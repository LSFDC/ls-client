; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioJackItem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ; ioBaseChar::GetTargetRot
; Function compile flags: /Ogsp
;	COMDAT ?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ
_TEXT	SEGMENT
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ PROC	; ioBaseChar::GetTargetRot, COMDAT
; _this$ = ecx

; 2599 : 	inline const D3DXQUATERNION& GetTargetRot() const { return m_qtTargetRot; }

  00000	8d 81 a4 06 00
	00		 lea	 eax, DWORD PTR [ecx+1700]
  00006	c3		 ret	 0
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ENDP	; ioBaseChar::GetTargetRot
_TEXT	ENDS
PUBLIC	?SetChargingState@ioBaseChar@@QAEX_N@Z		; ioBaseChar::SetChargingState
; Function compile flags: /Ogsp
;	COMDAT ?SetChargingState@ioBaseChar@@QAEX_N@Z
_TEXT	SEGMENT
_bState$ = 8						; size = 1
?SetChargingState@ioBaseChar@@QAEX_N@Z PROC		; ioBaseChar::SetChargingState, COMDAT
; _this$ = ecx

; 2937 : 	inline void SetChargingState( bool bState ) { m_bChargingState = bState; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _bState$[ebp]
  00006	88 81 54 20 00
	00		 mov	 BYTE PTR [ecx+8276], al
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetChargingState@ioBaseChar@@QAEX_N@Z ENDP		; ioBaseChar::SetChargingState
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_R0?AVioWeapon@@@8				; ioWeapon `RTTI Type Descriptor'
PUBLIC	??_R0?AVioZoneEffectWeapon@@@8			; ioZoneEffectWeapon `RTTI Type Descriptor'
PUBLIC	?ToZoneEffectWeapon@@YAPAVioZoneEffectWeapon@@PAVioWeapon@@@Z ; ToZoneEffectWeapon
EXTRN	___RTDynamicCast:PROC
;	COMDAT ??_R0?AVioWeapon@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iozoneeffectweapon.h
_DATA	SEGMENT
??_R0?AVioWeapon@@@8 DD FLAT:??_7type_info@@6B@		; ioWeapon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWeapon@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVioZoneEffectWeapon@@@8
_DATA	SEGMENT
??_R0?AVioZoneEffectWeapon@@@8 DD FLAT:??_7type_info@@6B@ ; ioZoneEffectWeapon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioZoneEffectWeapon@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ToZoneEffectWeapon@@YAPAVioZoneEffectWeapon@@PAVioWeapon@@@Z
_TEXT	SEGMENT
_pWeapon$ = 8						; size = 4
?ToZoneEffectWeapon@@YAPAVioZoneEffectWeapon@@PAVioWeapon@@@Z PROC ; ToZoneEffectWeapon, COMDAT

; 217  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 218  : 	if( !pWeapon || pWeapon->GetType() != ioWeapon::WT_ZONE_EFFECT )

  00004	8b 75 08	 mov	 esi, DWORD PTR _pWeapon$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 28		 je	 SHORT $LN1@ToZoneEffe
  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 90 10 01 00
	00		 call	 DWORD PTR [eax+272]
  00015	83 f8 08	 cmp	 eax, 8
  00018	75 19		 jne	 SHORT $LN1@ToZoneEffe

; 220  : 
; 221  : 	return dynamic_cast< ioZoneEffectWeapon* >( pWeapon );

  0001a	6a 00		 push	 0
  0001c	68 00 00 00 00	 push	 OFFSET ??_R0?AVioZoneEffectWeapon@@@8
  00021	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWeapon@@@8
  00026	6a 00		 push	 0
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ___RTDynamicCast
  0002e	83 c4 14	 add	 esp, 20			; 00000014H
  00031	eb 02		 jmp	 SHORT $LN3@ToZoneEffe
$LN1@ToZoneEffe:

; 219  : 		return NULL;

  00033	33 c0		 xor	 eax, eax
$LN3@ToZoneEffe:
  00035	5e		 pop	 esi

; 222  : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?ToZoneEffectWeapon@@YAPAVioZoneEffectWeapon@@PAVioWeapon@@@Z ENDP ; ToZoneEffectWeapon
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?GetSubType@ioJackItem@@UBE?AW4WeaponSubType@ioWeaponItem@@XZ ; ioJackItem::GetSubType
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iojackitem.cpp
;	COMDAT ?GetSubType@ioJackItem@@UBE?AW4WeaponSubType@ioWeaponItem@@XZ
_TEXT	SEGMENT
?GetSubType@ioJackItem@@UBE?AW4WeaponSubType@ioWeaponItem@@XZ PROC ; ioJackItem::GetSubType, COMDAT
; _this$ = ecx

; 57   : 	return WST_JACK_ITEM;

  00000	6a 68		 push	 104			; 00000068H
  00002	58		 pop	 eax

; 58   : }

  00003	c3		 ret	 0
?GetSubType@ioJackItem@@UBE?AW4WeaponSubType@ioWeaponItem@@XZ ENDP ; ioJackItem::GetSubType
_TEXT	ENDS
PUBLIC	??_C@_07BJEBJFJ@CS_NONE?$AA@			; `string'
PUBLIC	??_C@_0M@BNDKOBDN@CS_CHARGING?$AA@		; `string'
PUBLIC	??_C@_0P@FDNCCADO@CS_ATTACK_FIRE?$AA@		; `string'
PUBLIC	??_C@_0BB@MMGCBIEO@CS_CHARGE_ATTACK?$AA@	; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?GetAttackStateText@ioJackItem@@UBEPBDXZ	; ioJackItem::GetAttackStateText
;	COMDAT ??_C@_07BJEBJFJ@CS_NONE?$AA@
CONST	SEGMENT
??_C@_07BJEBJFJ@CS_NONE?$AA@ DB 'CS_NONE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BNDKOBDN@CS_CHARGING?$AA@
CONST	SEGMENT
??_C@_0M@BNDKOBDN@CS_CHARGING?$AA@ DB 'CS_CHARGING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FDNCCADO@CS_ATTACK_FIRE?$AA@
CONST	SEGMENT
??_C@_0P@FDNCCADO@CS_ATTACK_FIRE?$AA@ DB 'CS_ATTACK_FIRE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MMGCBIEO@CS_CHARGE_ATTACK?$AA@
CONST	SEGMENT
??_C@_0BB@MMGCBIEO@CS_CHARGE_ATTACK?$AA@ DB 'CS_CHARGE_ATTACK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?GetAttackStateText@ioJackItem@@UBEPBDXZ
_TEXT	SEGMENT
?GetAttackStateText@ioJackItem@@UBEPBDXZ PROC		; ioJackItem::GetAttackStateText, COMDAT
; _this$ = ecx

; 64   : 	switch( m_ChargeState )

  00000	8b 81 b8 19 00
	00		 mov	 eax, DWORD PTR [ecx+6584]
  00006	83 e8 00	 sub	 eax, 0
  00009	74 21		 je	 SHORT $LN4@GetAttackS
  0000b	48		 dec	 eax
  0000c	74 18		 je	 SHORT $LN3@GetAttackS
  0000e	48		 dec	 eax
  0000f	74 0f		 je	 SHORT $LN2@GetAttackS
  00011	48		 dec	 eax
  00012	74 06		 je	 SHORT $LN1@GetAttackS

; 74   : 	}
; 75   : 
; 76   : 	return "";

  00014	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@

; 77   : }

  00019	c3		 ret	 0
$LN1@GetAttackS:

; 72   : 	case CS_CHARGE_ATTACK:
; 73   : 		return "CS_CHARGE_ATTACK";

  0001a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@MMGCBIEO@CS_CHARGE_ATTACK?$AA@

; 77   : }

  0001f	c3		 ret	 0
$LN2@GetAttackS:

; 70   : 	case CS_ATTACK_FIRE:
; 71   : 		return "CS_ATTACK_FIRE";

  00020	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0P@FDNCCADO@CS_ATTACK_FIRE?$AA@

; 77   : }

  00025	c3		 ret	 0
$LN3@GetAttackS:

; 68   : 	case CS_CHARGING:
; 69   : 		return "CS_CHARGING";

  00026	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0M@BNDKOBDN@CS_CHARGING?$AA@

; 77   : }

  0002b	c3		 ret	 0
$LN4@GetAttackS:

; 65   : 	{
; 66   : 	case CS_NONE:
; 67   : 		return "CS_NONE";

  0002c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07BJEBJFJ@CS_NONE?$AA@

; 77   : }

  00031	c3		 ret	 0
?GetAttackStateText@ioJackItem@@UBEPBDXZ ENDP		; ioJackItem::GetAttackStateText
_TEXT	ENDS
PUBLIC	?ProcessJumpAttack@ioJackItem@@UAEXPAVioBaseChar@@M@Z ; ioJackItem::ProcessJumpAttack
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?ProcessJumpAttack@ioJackItem@@UAEXPAVioBaseChar@@M@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_fHeightGap$ = 12					; size = 4
?ProcessJumpAttack@ioJackItem@@UAEXPAVioBaseChar@@M@Z PROC ; ioJackItem::ProcessJumpAttack, COMDAT
; _this$ = ecx

; 183  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 184  : 	if( m_pExtendJump )

  00006	83 be c8 0b 00
	00 00		 cmp	 DWORD PTR [esi+3016], 0
  0000d	74 1b		 je	 SHORT $LN1@ProcessJum

; 185  : 		m_pExtendJump->ProcessJumpAttack( pOwner, fHeightGap );

  0000f	8b 86 c8 0b 00
	00		 mov	 eax, DWORD PTR [esi+3016]
  00015	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fHeightGap$[ebp]
  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
  0001c	51		 push	 ecx
  0001d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00022	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00025	8b c8		 mov	 ecx, eax
  00027	ff 52 24	 call	 DWORD PTR [edx+36]
$LN1@ProcessJum:

; 186  : 
; 187  : 	CheckAirJump( pOwner );

  0002a	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0002d	8b 06		 mov	 eax, DWORD PTR [esi]
  0002f	8b ce		 mov	 ecx, esi
  00031	ff 90 b0 02 00
	00		 call	 DWORD PTR [eax+688]
  00037	5e		 pop	 esi

; 188  : }

  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
?ProcessJumpAttack@ioJackItem@@UAEXPAVioBaseChar@@M@Z ENDP ; ioJackItem::ProcessJumpAttack
_TEXT	ENDS
PUBLIC	?IsChargeAttackState@ioJackItem@@UAE_NPAVioBaseChar@@@Z ; ioJackItem::IsChargeAttackState
; Function compile flags: /Ogsp
;	COMDAT ?IsChargeAttackState@ioJackItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsChargeAttackState@ioJackItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioJackItem::IsChargeAttackState, COMDAT
; _this$ = ecx

; 246  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 247  : 	if( pOwner->GetState() == CS_ATTACK )

  00003	8b 45 08	 mov	 eax, DWORD PTR _pOwner$[ebp]
  00006	80 b8 10 03 00
	00 05		 cmp	 BYTE PTR [eax+784], 5
  0000d	75 0b		 jne	 SHORT $LN1@IsChargeAt

; 248  : 	{
; 249  : 		if( m_ChargeState == CS_CHARGING )

  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	39 81 b8 19 00
	00		 cmp	 DWORD PTR [ecx+6584], eax

; 250  : 			return true;

  00018	74 02		 je	 SHORT $LN3@IsChargeAt
$LN1@IsChargeAt:

; 251  : 	}
; 252  : 
; 253  : 	return false;

  0001a	32 c0		 xor	 al, al
$LN3@IsChargeAt:

; 254  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?IsChargeAttackState@ioJackItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioJackItem::IsChargeAttackState
_TEXT	ENDS
PUBLIC	?IsConditionalSpecialDashReserve@ioJackItem@@UAE_NPAVioBaseChar@@@Z ; ioJackItem::IsConditionalSpecialDashReserve
; Function compile flags: /Ogsp
;	COMDAT ?IsConditionalSpecialDashReserve@ioJackItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsConditionalSpecialDashReserve@ioJackItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioJackItem::IsConditionalSpecialDashReserve, COMDAT
; _this$ = ecx

; 342  : 	return true;

  00000	b0 01		 mov	 al, 1

; 343  : }

  00002	c2 04 00	 ret	 4
?IsConditionalSpecialDashReserve@ioJackItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioJackItem::IsConditionalSpecialDashReserve
_TEXT	ENDS
PUBLIC	?GetNeedBullet@ioJackItem@@QAEHXZ		; ioJackItem::GetNeedBullet
; Function compile flags: /Ogsp
;	COMDAT ?GetNeedBullet@ioJackItem@@QAEHXZ
_TEXT	SEGMENT
?GetNeedBullet@ioJackItem@@QAEHXZ PROC			; ioJackItem::GetNeedBullet, COMDAT
; _this$ = ecx

; 354  : 	return (int)m_fNeedGauge;

  00000	f3 0f 2c 81 54
	19 00 00	 cvttss2si eax, DWORD PTR [ecx+6484]

; 355  : }

  00008	c3		 ret	 0
?GetNeedBullet@ioJackItem@@QAEHXZ ENDP			; ioJackItem::GetNeedBullet
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	__$ArrayPad$
PUBLIC	?ChangeToAttackFire@ioJackItem@@IAEXPAVioBaseChar@@@Z ; ioJackItem::ChangeToAttackFire
EXTRN	??1SP2Packet@@UAE@XZ:PROC			; SP2Packet::~SP2Packet
EXTRN	?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z:PROC ; P2PNetwork::SendToAllPlayingUser
EXTRN	??6SP2Packet@@QAEAAV0@ABUD3DXQUATERNION@@@Z:PROC ; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@H@Z:PROC			; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@E@Z:PROC			; SP2Packet::operator<<
EXTRN	?FillItemGaugePacketHeader@ioAttackableItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::FillItemGaugePacketHeader
EXTRN	??0SP2Packet@@QAE@K@Z:PROC			; SP2Packet::SP2Packet
EXTRN	?ApplyNormalAttackResult@ioBaseChar@@QAEXH_N@Z:PROC ; ioBaseChar::ApplyNormalAttackResult
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
EXTRN	?SetNormalAttackByAttribute@ioBaseChar@@QAEKABUAttackAttribute@@_NMM@Z:PROC ; ioBaseChar::SetNormalAttackByAttribute
EXTRN	?GetAttribute@ioFormalAttackGrp@@QBEPBUAttackAttribute@@W4AttackType@@H@Z:PROC ; ioFormalAttackGrp::GetAttribute
EXTRN	?InitExtendAttackTagInfo@ioBaseChar@@QAEXXZ:PROC ; ioBaseChar::InitExtendAttackTagInfo
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
;	COMDAT __real@3f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ChangeToAttackFire@ioJackItem@@IAEXPAVioBaseChar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ChangeToAttackFire@ioJackItem@@IAEXPAVioBaseChar@@@Z$0
__ehfuncinfo$?ChangeToAttackFire@ioJackItem@@IAEXPAVioBaseChar@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ChangeToAttackFire@ioJackItem@@IAEXPAVioBaseChar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iojackitem.cpp
xdata$x	ENDS
;	COMDAT ?ChangeToAttackFire@ioJackItem@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_dwCurTime$ = -32812					; size = 4
_kPacket$548646 = -32808				; size = 32792
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
?ChangeToAttackFire@ioJackItem@@IAEXPAVioBaseChar@@@Z PROC ; ioJackItem::ChangeToAttackFire, COMDAT
; _this$ = ecx

; 406  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ChangeToAttackFire@ioJackItem@@IAEXPAVioBaseChar@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 20 80 00 00	 mov	 eax, 32800		; 00008020H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00035	8b f1		 mov	 esi, ecx

; 407  : 	if( !pOwner ) 

  00037	85 ff		 test	 edi, edi
  00039	0f 84 1d 01 00
	00		 je	 $LN1@ChangeToAt

; 408  : 		return;
; 409  : 
; 410  : 	DWORD dwCurTime = FRAMEGETTIME();

  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00045	8b c8		 mov	 ecx, eax
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 411  : 
; 412  : 	pOwner->InitExtendAttackTagInfo();

  0004d	8b cf		 mov	 ecx, edi
  0004f	89 85 d4 7f ff
	ff		 mov	 DWORD PTR _dwCurTime$[ebp], eax
  00055	e8 00 00 00 00	 call	 ?InitExtendAttackTagInfo@ioBaseChar@@QAEXXZ ; ioBaseChar::InitExtendAttackTagInfo

; 413  : 
; 414  : 	ClearCancelInfo();

  0005a	8b 06		 mov	 eax, DWORD PTR [esi]
  0005c	8b ce		 mov	 ecx, esi
  0005e	ff 90 3c 02 00
	00		 call	 DWORD PTR [eax+572]

; 415  : 	
; 416  : 	const AttackAttribute *pAttribute = m_FormalAttack.GetAttribute( AT_NORMAL, m_nCurCombo );

  00064	ff b6 c0 19 00
	00		 push	 DWORD PTR [esi+6592]
  0006a	8d 8e 2c 06 00
	00		 lea	 ecx, DWORD PTR [esi+1580]
  00070	6a 00		 push	 0
  00072	e8 00 00 00 00	 call	 ?GetAttribute@ioFormalAttackGrp@@QBEPBUAttackAttribute@@W4AttackType@@H@Z ; ioFormalAttackGrp::GetAttribute
  00077	8b d8		 mov	 ebx, eax

; 417  : 	if( pAttribute )

  00079	85 db		 test	 ebx, ebx
  0007b	74 47		 je	 SHORT $LN2@ChangeToAt

; 418  : 	{
; 419  : 		pOwner->SetNormalAttackByAttribute( *pAttribute );

  0007d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00085	51		 push	 ecx
  00086	51		 push	 ecx
  00087	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0008d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00092	6a 01		 push	 1
  00094	53		 push	 ebx
  00095	8b cf		 mov	 ecx, edi
  00097	e8 00 00 00 00	 call	 ?SetNormalAttackByAttribute@ioBaseChar@@QAEKABUAttackAttribute@@_NMM@Z ; ioBaseChar::SetNormalAttackByAttribute

; 420  : 
; 421  : 		m_szCurAni = pAttribute->m_AttackAnimation;

  0009c	53		 push	 ebx
  0009d	8d 8e 10 0f 00
	00		 lea	 ecx, DWORD PTR [esi+3856]
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 422  : 		m_fCurAniRate = pAttribute->m_fAttackAniRate;

  000a9	d9 43 10	 fld	 DWORD PTR [ebx+16]

; 423  : 
; 424  : 		m_dwInputCancelCheckTime = dwCurTime;

  000ac	8b 85 d4 7f ff
	ff		 mov	 eax, DWORD PTR _dwCurTime$[ebp]
  000b2	d9 9e 20 0f 00
	00		 fstp	 DWORD PTR [esi+3872]
  000b8	89 86 0c 0f 00
	00		 mov	 DWORD PTR [esi+3852], eax

; 425  : 		m_dwCancelCheckTime = dwCurTime;

  000be	89 86 08 0f 00
	00		 mov	 DWORD PTR [esi+3848], eax
$LN2@ChangeToAt:

; 426  : 	}
; 427  : 
; 428  : 	pOwner->ApplyNormalAttackResult( m_nCurCombo );

  000c4	6a 00		 push	 0
  000c6	ff b6 c0 19 00
	00		 push	 DWORD PTR [esi+6592]
  000cc	8b cf		 mov	 ecx, edi
  000ce	e8 00 00 00 00	 call	 ?ApplyNormalAttackResult@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::ApplyNormalAttackResult

; 429  : 	m_ChargeState = CS_ATTACK_FIRE;

  000d3	c7 86 b8 19 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+6584], 2

; 430  : 
; 431  : 	if( pOwner->IsNeedSendNetwork() )

  000dd	8b 07		 mov	 eax, DWORD PTR [edi]
  000df	8b cf		 mov	 ecx, edi
  000e1	ff 90 04 01 00
	00		 call	 DWORD PTR [eax+260]
  000e7	84 c0		 test	 al, al
  000e9	74 71		 je	 SHORT $LN1@ChangeToAt

; 432  : 	{
; 433  : 		SP2Packet kPacket( CUPK_ITEM_GAUGE_OK );

  000eb	68 27 41 00 00	 push	 16679			; 00004127H
  000f0	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548646[ebp]
  000f6	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 434  : 		FillItemGaugePacketHeader( pOwner, kPacket );

  000fb	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$548646[ebp]
  00101	50		 push	 eax
  00102	33 db		 xor	 ebx, ebx
  00104	57		 push	 edi
  00105	8b ce		 mov	 ecx, esi
  00107	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0010a	e8 00 00 00 00	 call	 ?FillItemGaugePacketHeader@ioAttackableItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z ; ioAttackableItem::FillItemGaugePacketHeader

; 435  : 		kPacket << static_cast<byte>( ST_ATTACK );

  0010f	53		 push	 ebx
  00110	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548646[ebp]
  00116	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@E@Z ; SP2Packet::operator<<

; 436  : 		kPacket << m_nCurCombo;

  0011b	ff b6 c0 19 00
	00		 push	 DWORD PTR [esi+6592]
  00121	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548646[ebp]
  00127	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 437  : 		kPacket << pOwner->GetTargetRot();

  0012c	81 c7 a4 06 00
	00		 add	 edi, 1700		; 000006a4H
  00132	57		 push	 edi
  00133	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548646[ebp]
  00139	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXQUATERNION@@@Z ; SP2Packet::operator<<

; 438  : 		P2PNetwork::SendToAllPlayingUser( kPacket );

  0013e	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$548646[ebp]
  00144	53		 push	 ebx
  00145	50		 push	 eax
  00146	e8 00 00 00 00	 call	 ?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z ; P2PNetwork::SendToAllPlayingUser

; 439  : 	}

  0014b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0014f	59		 pop	 ecx
  00150	59		 pop	 ecx
  00151	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548646[ebp]
  00157	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN1@ChangeToAt:

; 440  : }

  0015c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0015f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00166	59		 pop	 ecx
  00167	5f		 pop	 edi
  00168	5e		 pop	 esi
  00169	5b		 pop	 ebx
  0016a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016d	33 cd		 xor	 ecx, ebp
  0016f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00174	c9		 leave
  00175	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ChangeToAttackFire@ioJackItem@@IAEXPAVioBaseChar@@@Z$0:
  00000	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548646[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?ChangeToAttackFire@ioJackItem@@IAEXPAVioBaseChar@@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a d0 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32816]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ChangeToAttackFire@ioJackItem@@IAEXPAVioBaseChar@@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ChangeToAttackFire@ioJackItem@@IAEXPAVioBaseChar@@@Z ENDP ; ioJackItem::ChangeToAttackFire
PUBLIC	??A?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEAAVioHashString@@I@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::operator[]
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??A?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEAAVioHashString@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEAAVioHashString@@I@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	c1 e0 04	 shl	 eax, 4
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEAAVioHashString@@I@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::operator[]
_TEXT	ENDS
PUBLIC	?empty@?$list@MV?$allocator@M@std@@@std@@QBE_NXZ ; std::list<float,std::allocator<float> >::empty
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?empty@?$list@MV?$allocator@M@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$list@MV?$allocator@M@std@@@std@@QBE_NXZ PROC	; std::list<float,std::allocator<float> >::empty, COMDAT
; _this$ = ecx

; 887  : 		return (this->_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 04	 cmp	 DWORD PTR [ecx+4], eax
  00005	0f 94 c0	 sete	 al

; 888  : 		}

  00008	c3		 ret	 0
?empty@?$list@MV?$allocator@M@std@@@std@@QBE_NXZ ENDP	; std::list<float,std::allocator<float> >::empty
_TEXT	ENDS
PUBLIC	?capacity@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 04	 sar	 eax, 4

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::capacity
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBE_NPBVioHashString@@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBE_NPBVioHashString@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBE_NPBVioHashString@@@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBE_NPBVioHashString@@@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXPAVioHashString@@0@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXPAVioHashString@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXPAVioHashString@@0@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXPAVioHashString@@0@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Orphan_range
_TEXT	ENDS
PUBLIC	?_Nextnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z ; std::_List_val<float,std::allocator<float> >::_Nextnode
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z PROC ; std::_List_val<float,std::allocator<float> >::_Nextnode, COMDAT

; 560  : 		{	// return reference to successor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 561  : 		return ((_Nodepref)(*_Pnode)._Next);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 562  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Nextnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z ENDP ; std::_List_val<float,std::allocator<float> >::_Nextnode
_TEXT	ENDS
PUBLIC	??8?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator==, COMDAT
; _this$ = ecx

; 281  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 282  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 283  : 		if (this->_Getcont() == 0
; 284  : 			|| this->_Getcont() != _Right._Getcont())
; 285  : 			{	// report error
; 286  : 			_DEBUG_ERROR("list iterators incompatible");
; 287  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 288  : 			}
; 289  : 
; 290  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 291  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 292  : 			&& this->_Getcont() == _Right._Getcont());
; 293  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 294  : 
; 295  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 296  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator==
_TEXT	ENDS
PUBLIC	?_Prevnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z ; std::_List_val<float,std::allocator<float> >::_Prevnode
; Function compile flags: /Ogsp
;	COMDAT ?_Prevnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z PROC ; std::_List_val<float,std::allocator<float> >::_Prevnode, COMDAT

; 565  : 		{	// return reference to predecessor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 566  : 		return ((_Nodepref)(*_Pnode)._Prev);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 567  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Prevnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z ENDP ; std::_List_val<float,std::allocator<float> >::_Prevnode
_TEXT	ENDS
PUBLIC	?_Myval@?$_List_val@MV?$allocator@M@std@@@std@@SAAAMPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z ; std::_List_val<float,std::allocator<float> >::_Myval
; Function compile flags: /Ogsp
;	COMDAT ?_Myval@?$_List_val@MV?$allocator@M@std@@@std@@SAAAMPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_val@MV?$allocator@M@std@@@std@@SAAAMPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z PROC ; std::_List_val<float,std::allocator<float> >::_Myval, COMDAT

; 570  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 571  : 		return ((reference)(*_Pnode)._Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 572  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_List_val@MV?$allocator@M@std@@@std@@SAAAMPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z ENDP ; std::_List_val<float,std::allocator<float> >::_Myval
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??E?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator++, COMDAT
; _this$ = ecx

; 221  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 222  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 223  : 		if (this->_Getcont() == 0
; 224  : 			|| this->_Ptr == 0
; 225  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 226  : 			{	// report error
; 227  : 			_DEBUG_ERROR("list iterator not incrementable");
; 228  : 			_SCL_SECURE_OUT_OF_RANGE;
; 229  : 			}
; 230  : 
; 231  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 232  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 233  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 234  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 235  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 236  : 
; 237  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 238  : 		return (*this);
; 239  : 		}

  00008	c3		 ret	 0
??E?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator++
_TEXT	ENDS
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>
; Function compile flags: /Ogsp
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 41   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 42   : 		this->_Adopt(_Plist);
; 43   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_unchecked_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>
_TEXT	ENDS
PUBLIC	??$addressof@$$CBVioHashString@@@std@@YAPBVioHashString@@ABV1@@Z ; std::addressof<ioHashString const >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBVioHashString@@@std@@YAPBVioHashString@@ABV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBVioHashString@@@std@@YAPBVioHashString@@ABV1@@Z PROC ; std::addressof<ioHashString const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBVioHashString@@@std@@YAPBVioHashString@@ABV1@@Z ENDP ; std::addressof<ioHashString const >
_TEXT	ENDS
PUBLIC	??$?0M@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::allocator<std::_List_nod<float,std::allocator<float> >::_Node><float>
; Function compile flags: /Ogsp
;	COMDAT ??$?0M@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0M@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z PROC ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::allocator<std::_List_nod<float,std::allocator<float> >::_Node><float>, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

  00002	c2 04 00	 ret	 4
??$?0M@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z ENDP ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::allocator<std::_List_nod<float,std::allocator<float> >::_Node><float>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<float,std::allocator<float> >::_Node>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T550940 = -12						; size = 12
$T550945 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_List_nod<float,std::allocator<float> >::_Node>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 55 55 55
	15		 cmp	 ecx, 357913941		; 15555555H
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T550945[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T550945[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T550940[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T550940[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T550940[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<float,std::allocator<float> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z ; std::_Destroy<std::_List_nod<float,std::allocator<float> >::_Node>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<float,std::allocator<float> >::_Node>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<float,std::allocator<float> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAVioHashString@@@std@@YAPAVioHashString@@PAV1@@Z ; std::_Val_type<ioHashString *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Val_type@PAVioHashString@@@std@@YAPAVioHashString@@PAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAVioHashString@@@std@@YAPAVioHashString@@PAV1@@Z PROC ; std::_Val_type<ioHashString *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAVioHashString@@@std@@YAPAVioHashString@@PAV1@@Z ENDP ; std::_Val_type<ioHashString *>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 28	 add	 DWORD PTR [eax], 40	; 00000028H

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator++
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 0c	 add	 DWORD PTR [eax], 12	; 0000000cH

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator++
_TEXT	ENDS
PUBLIC	??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z ; std::forward<WeaponInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z PROC ; std::forward<WeaponInfo const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z ENDP ; std::forward<WeaponInfo const &>
_TEXT	ENDS
PUBLIC	??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z ; std::forward<ForceInfo const &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z PROC ; std::forward<ForceInfo const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z ENDP ; std::forward<ForceInfo const &>
_TEXT	ENDS
PUBLIC	??$forward@VioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z ; std::forward<ioHashString>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@VioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@VioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z PROC ; std::forward<ioHashString>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@VioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z ENDP ; std::forward<ioHashString>
_TEXT	ENDS
PUBLIC	??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z ; std::_Construct<ForceInfo,ForceInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z PROC ; std::_Construct<ForceInfo,ForceInfo const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN3@Construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN3@Construct:
  00013	5f		 pop	 edi

; 49   : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z ENDP ; std::_Construct<ForceInfo,ForceInfo const &>
_TEXT	ENDS
PUBLIC	??0D3DXQUATERNION@@QAE@XZ			; D3DXQUATERNION::D3DXQUATERNION
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT
??0D3DXQUATERNION@@QAE@XZ PROC				; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 429  :     D3DXQUATERNION() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXQUATERNION@@QAE@XZ ENDP				; D3DXQUATERNION::D3DXQUATERNION
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ	; ioGameEntity::GetGroup
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
;	COMDAT ?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ
_TEXT	SEGMENT
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ PROC	; ioGameEntity::GetGroup, COMDAT
; _this$ = ecx

; 166  : 	inline ioEntityGroup* GetGroup() const { return m_pGroup; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ ENDP	; ioGameEntity::GetGroup
_TEXT	ENDS
PUBLIC	??1WeaponInfo@@QAE@XZ				; WeaponInfo::~WeaponInfo
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1WeaponInfo@@QAE@XZ
_TEXT	SEGMENT
??1WeaponInfo@@QAE@XZ PROC				; WeaponInfo::~WeaponInfo, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??1WeaponInfo@@QAE@XZ ENDP				; WeaponInfo::~WeaponInfo
_TEXT	ENDS
PUBLIC	?size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 04	 sar	 eax, 4

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::size
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::~_Vector_val<ioHashString,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::~_Vector_val<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::~_Vector_val<ioHashString,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??0?$allocator@VioHashString@@@std@@QAE@XZ	; std::allocator<ioHashString>::allocator<ioHashString>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@VioHashString@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@VioHashString@@@std@@QAE@XZ PROC		; std::allocator<ioHashString>::allocator<ioHashString>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@VioHashString@@@std@@QAE@XZ ENDP		; std::allocator<ioHashString>::allocator<ioHashString>
_TEXT	ENDS
PUBLIC	??0?$allocator@VioHashString@@@std@@QAE@ABV01@@Z ; std::allocator<ioHashString>::allocator<ioHashString>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@VioHashString@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@VioHashString@@@std@@QAE@ABV01@@Z PROC	; std::allocator<ioHashString>::allocator<ioHashString>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@VioHashString@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<ioHashString>::allocator<ioHashString>
_TEXT	ENDS
PUBLIC	??0?$allocator@M@std@@QAE@XZ			; std::allocator<float>::allocator<float>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@M@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@M@std@@QAE@XZ PROC			; std::allocator<float>::allocator<float>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@M@std@@QAE@XZ ENDP			; std::allocator<float>::allocator<float>
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::~_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::~_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::~_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UWeaponInfo@@@std@@QAE@XZ	; std::allocator<WeaponInfo>::allocator<WeaponInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UWeaponInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UWeaponInfo@@@std@@QAE@XZ PROC		; std::allocator<WeaponInfo>::allocator<WeaponInfo>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UWeaponInfo@@@std@@QAE@XZ ENDP		; std::allocator<WeaponInfo>::allocator<WeaponInfo>
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::~_Vector_val<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::~_Vector_val<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::~_Vector_val<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UForceInfo@@@std@@QAE@XZ		; std::allocator<ForceInfo>::allocator<ForceInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UForceInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UForceInfo@@@std@@QAE@XZ PROC		; std::allocator<ForceInfo>::allocator<ForceInfo>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UForceInfo@@@std@@QAE@XZ ENDP		; std::allocator<ForceInfo>::allocator<ForceInfo>
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z	; CEncrypt<float>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z PROC	; CEncrypt<float>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ENDP	; CEncrypt<float>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z	; CEncrypt<float>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z PROC	; CEncrypt<float>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1648 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1649 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1650 : 		*value = *((float*)m_TempMem);

  00016	d9 06		 fld	 DWORD PTR [esi]
  00018	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  0001b	d9 18		 fstp	 DWORD PTR [eax]
  0001d	5e		 pop	 esi

; 1651 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ENDP	; CEncrypt<float>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z	; CEncrypt<unsigned long>::DecryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z PROC	; CEncrypt<unsigned long>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1256 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1257 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1258 : 		*value = *((DWORD*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 1259 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ENDP	; CEncrypt<unsigned long>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Xlen
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@I@Z ; std::allocator<ioHashString>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@I@Z PROC ; std::allocator<ioHashString>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@I@Z ENDP ; std::allocator<ioHashString>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@M@std@@QAE@ABV01@@Z		; std::allocator<float>::allocator<float>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@M@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@M@std@@QAE@ABV01@@Z PROC			; std::allocator<float>::allocator<float>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@M@std@@QAE@ABV01@@Z ENDP			; std::allocator<float>::allocator<float>
_TEXT	ENDS
PUBLIC	??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z	; std::allocator<WeaponInfo>::allocator<WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z PROC	; std::allocator<WeaponInfo>::allocator<WeaponInfo>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<WeaponInfo>::allocator<WeaponInfo>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z ; std::allocator<WeaponInfo>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z PROC ; std::allocator<WeaponInfo>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z ENDP ; std::allocator<WeaponInfo>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z	; std::allocator<ForceInfo>::allocator<ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z PROC	; std::allocator<ForceInfo>::allocator<ForceInfo>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<ForceInfo>::allocator<ForceInfo>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z ; std::allocator<ForceInfo>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z PROC ; std::allocator<ForceInfo>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z ENDP ; std::allocator<ForceInfo>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@VioHashString@@@std@@QBEIXZ ; std::allocator<ioHashString>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@VioHashString@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@VioHashString@@@std@@QBEIXZ PROC	; std::allocator<ioHashString>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@VioHashString@@@std@@QBEIXZ ENDP	; std::allocator<ioHashString>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Compat
_TEXT	ENDS
PUBLIC	??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ; std::_Allocate<ioHashString>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z
_TEXT	SEGMENT
$T551079 = -12						; size = 12
$T551083 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z PROC ; std::_Allocate<ioHashString>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate@2

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	0f		 cmp	 ecx, 268435455		; 0fffffffH
  00015	77 0e		 ja	 SHORT $LN1@Allocate@2
  00017	c1 e1 04	 shl	 ecx, 4
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T551083[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T551083[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T551079[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T551079[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T551079[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate@2:
??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ENDP ; std::_Allocate<ioHashString>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$forward@ABVioHashString@@@std@@YAABVioHashString@@ABV1@@Z ; std::forward<ioHashString const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABVioHashString@@@std@@YAABVioHashString@@ABV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABVioHashString@@@std@@YAABVioHashString@@ABV1@@Z PROC ; std::forward<ioHashString const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABVioHashString@@@std@@YAABVioHashString@@ABV1@@Z ENDP ; std::forward<ioHashString const &>
_TEXT	ENDS
PUBLIC	??$forward@AAVioHashString@@@std@@YAAAVioHashString@@AAV1@@Z ; std::forward<ioHashString &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@AAVioHashString@@@std@@YAAAVioHashString@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAVioHashString@@@std@@YAAAVioHashString@@AAV1@@Z PROC ; std::forward<ioHashString &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAVioHashString@@@std@@YAAAVioHashString@@AAV1@@Z ENDP ; std::forward<ioHashString &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@VioHashString@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVioHashString@@0@Z ; std::_Ptr_cat<ioHashString,ioHashString>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@VioHashString@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVioHashString@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@VioHashString@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVioHashString@@0@Z PROC ; std::_Ptr_cat<ioHashString,ioHashString>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@VioHashString@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVioHashString@@0@Z ENDP ; std::_Ptr_cat<ioHashString,ioHashString>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z ; std::_Ptr_cat<WeaponInfo,WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z PROC ; std::_Ptr_cat<WeaponInfo,WeaponInfo>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z ENDP ; std::_Ptr_cat<WeaponInfo,WeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z ; std::_Ptr_cat<ForceInfo,ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z PROC ; std::_Ptr_cat<ForceInfo,ForceInfo>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z ENDP ; std::_Ptr_cat<ForceInfo,ForceInfo>
_TEXT	ENDS
PUBLIC	?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 28		 push	 40			; 00000028H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::size
_TEXT	ENDS
PUBLIC	?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 0c		 push	 12			; 0000000cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::size
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@2:
$LN3@Xlen@2:
  0000b	cc		 int	 3
?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Xlen
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@3:
$LN3@Xlen@3:
  0000b	cc		 int	 3
?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Xlen
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ	; std::allocator<WeaponInfo>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ PROC	; std::allocator<WeaponInfo>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ ENDP	; std::allocator<WeaponInfo>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ	; std::allocator<ForceInfo>::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ PROC	; std::allocator<ForceInfo>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ ENDP	; std::allocator<ForceInfo>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Compat
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Compat
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@AAPAVioHashString@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@AAPAVioHashString@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@AAPAVioHashString@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@AAPAVioHashString@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *>
_TEXT	ENDS
PUBLIC	??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ; std::_Allocate<WeaponInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z
_TEXT	SEGMENT
$T551145 = -12						; size = 12
$T551149 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z PROC ; std::_Allocate<WeaponInfo>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate@3

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 66 66 66
	06		 cmp	 ecx, 107374182		; 06666666H
  00015	77 0e		 ja	 SHORT $LN1@Allocate@3
  00017	6b c9 28	 imul	 ecx, 40			; 00000028H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate@3
$LN1@Allocate@3:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T551149[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T551149[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T551145[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T551145[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T551145[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@3:
$LN5@Allocate@3:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate@3:
??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ENDP ; std::_Allocate<WeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ; std::_Allocate<ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z
_TEXT	SEGMENT
$T551154 = -12						; size = 12
$T551158 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z PROC ; std::_Allocate<ForceInfo>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate@4

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 55 55 55
	15		 cmp	 ecx, 357913941		; 15555555H
  00015	77 0e		 ja	 SHORT $LN1@Allocate@4
  00017	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate@4
$LN1@Allocate@4:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T551158[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T551158[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T551154[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T551154[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T551154[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@4:
$LN5@Allocate@4:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate@4:
??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ENDP ; std::_Allocate<ForceInfo>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEABVioHashString@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEABVioHashString@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEABVioHashString@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 10	 add	 DWORD PTR [eax], 16	; 00000010H

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator++
_TEXT	ENDS
PUBLIC	??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z ; std::_Destroy<ForceInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z PROC	; std::_Destroy<ForceInfo>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z ENDP	; std::_Destroy<ForceInfo>
_TEXT	ENDS
PUBLIC	??_GioHashString@@QAEPAXI@Z			; ioHashString::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GioHashString@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioHashString@@QAEPAXI@Z PROC			; ioHashString::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0000c	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00010	74 07		 je	 SHORT $LN1@scalar@2
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@2:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_GioHashString@@QAEPAXI@Z ENDP			; ioHashString::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_GWeaponInfo@@QAEPAXI@Z			; WeaponInfo::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GWeaponInfo@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GWeaponInfo@@QAEPAXI@Z PROC				; WeaponInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0000f	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00013	74 07		 je	 SHORT $LN1@scalar@3
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	59		 pop	 ecx
$LN1@scalar@3:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GWeaponInfo@@QAEPAXI@Z ENDP				; WeaponInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z$0
__ehfuncinfo$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z
_TEXT	SEGMENT
$T551181 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z PROC ; std::_Construct<ioHashString,ioHashString const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T551181[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 09		 je	 SHORT $LN3@Construct@2
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
$LN3@Construct@2:

; 49   : 	}

  00026	e8 00 00 00 00	 call	 __EH_epilog3
  0002b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T551181[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ENDP ; std::_Construct<ioHashString,ioHashString const &>
PUBLIC	??0WeaponInfo@@QAE@ABU0@@Z			; WeaponInfo::WeaponInfo
; Function compile flags: /Ogsp
;	COMDAT ??0WeaponInfo@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0WeaponInfo@@QAE@ABU0@@Z PROC				; WeaponInfo::WeaponInfo, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	8b 07		 mov	 eax, DWORD PTR [edi]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00011	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00014	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00017	50		 push	 eax
  00018	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00021	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00024	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00027	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0002a	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0002d	8a 47 20	 mov	 al, BYTE PTR [edi+32]
  00030	88 46 20	 mov	 BYTE PTR [esi+32], al
  00033	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00036	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00039	5f		 pop	 edi
  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??0WeaponInfo@@QAE@ABU0@@Z ENDP				; WeaponInfo::WeaponInfo
_TEXT	ENDS
PUBLIC	??_C@_0CE@CAMGOCBI@?$CFs?5?9?5JumpAttack?5Animation?5Not?5Ex@ ; `string'
PUBLIC	??_C@_0BP@BGPIDIJC@?$CFs?5?9?5AttackAttribute?5Not?5Exist?$AA@ ; `string'
PUBLIC	??_C@_0BK@FMLPNHGJ@ioJackItem?3?3SetJumpAttack?$AA@ ; `string'
PUBLIC	?SetJumpAttack@ioJackItem@@UAE_NPAVioBaseChar@@HMW4AttackType@@@Z ; ioJackItem::SetJumpAttack
EXTRN	__imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z:PROC
EXTRN	__imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ:PROC
EXTRN	__imp_?LOG@@3VCLog@@A:BYTE
;	COMDAT ??_C@_0CE@CAMGOCBI@?$CFs?5?9?5JumpAttack?5Animation?5Not?5Ex@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
CONST	SEGMENT
??_C@_0CE@CAMGOCBI@?$CFs?5?9?5JumpAttack?5Animation?5Not?5Ex@ DB '%s - Ju'
	DB	'mpAttack Animation Not Exist', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BGPIDIJC@?$CFs?5?9?5AttackAttribute?5Not?5Exist?$AA@
CONST	SEGMENT
??_C@_0BP@BGPIDIJC@?$CFs?5?9?5AttackAttribute?5Not?5Exist?$AA@ DB '%s - A'
	DB	'ttackAttribute Not Exist', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FMLPNHGJ@ioJackItem?3?3SetJumpAttack?$AA@
CONST	SEGMENT
??_C@_0BK@FMLPNHGJ@ioJackItem?3?3SetJumpAttack?$AA@ DB 'ioJackItem::SetJu'
	DB	'mpAttack', 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iojackitem.cpp
CONST	ENDS
;	COMDAT ?SetJumpAttack@ioJackItem@@UAE_NPAVioBaseChar@@HMW4AttackType@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_iAniID$ = 12						; size = 4
_fTimeRate$ = 16					; size = 4
_eType$ = 20						; size = 4
?SetJumpAttack@ioJackItem@@UAE_NPAVioBaseChar@@HMW4AttackType@@@Z PROC ; ioJackItem::SetJumpAttack, COMDAT
; _this$ = ecx

; 150  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 151  : 	if( !pOwner ) return false;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _pOwner$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	85 db		 test	 ebx, ebx
  0000c	74 7d		 je	 SHORT $LN11@SetJumpAtt

; 152  : 
; 153  : 	DWORD dwCurTime = FRAMEGETTIME();

  0000e	57		 push	 edi
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00015	8b c8		 mov	 ecx, eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 154  : 	ClearAirJump();

  0001d	8b 06		 mov	 eax, DWORD PTR [esi]
  0001f	8b ce		 mov	 ecx, esi
  00021	ff 90 a8 02 00
	00		 call	 DWORD PTR [eax+680]

; 155  : 
; 156  : 	AttackType eExtendType = AT_JUMP_ATTACK;
; 157  : 
; 158  : 	const AttackAttribute *pAttr = GetAttackAttribute( eExtendType );

  00027	8b 06		 mov	 eax, DWORD PTR [esi]
  00029	6a 00		 push	 0
  0002b	6a 03		 push	 3
  0002d	8b ce		 mov	 ecx, esi
  0002f	ff 90 08 02 00
	00		 call	 DWORD PTR [eax+520]
  00035	8b f8		 mov	 edi, eax

; 159  : 	if( !pAttr )

  00037	85 ff		 test	 edi, edi
  00039	75 1d		 jne	 SHORT $LN2@SetJumpAtt

; 160  : 	{
; 161  : 		LOG.PrintTimeAndLog( 0, "%s - AttackAttribute Not Exist", __FUNCTION__ );

  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@FMLPNHGJ@ioJackItem?3?3SetJumpAttack?$AA@
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@BGPIDIJC@?$CFs?5?9?5AttackAttribute?5Not?5Exist?$AA@
$LN10@SetJumpAtt:
  00045	6a 00		 push	 0
  00047	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00053	83 c4 10	 add	 esp, 16			; 00000010H

; 162  : 		return false;

  00056	eb 32		 jmp	 SHORT $LN9@SetJumpAtt
$LN2@SetJumpAtt:

; 163  : 	}
; 164  : 
; 165  : 	ioEntityGroup *pGrp = pOwner->GetGroup();

  00058	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]

; 166  : 	iAniID = pGrp->GetAnimationIdx( pAttr->m_AttackAnimation );

  0005b	57		 push	 edi
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z

; 167  : 	if( iAniID == -1 )

  00062	83 f8 ff	 cmp	 eax, -1
  00065	75 0c		 jne	 SHORT $LN1@SetJumpAtt

; 168  : 	{
; 169  : 		LOG.PrintTimeAndLog( 0, "%s - JumpAttack Animation Not Exist", __FUNCTION__ );

  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@FMLPNHGJ@ioJackItem?3?3SetJumpAttack?$AA@
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@CAMGOCBI@?$CFs?5?9?5JumpAttack?5Animation?5Not?5Ex@

; 170  : 		return false;

  00071	eb d2		 jmp	 SHORT $LN10@SetJumpAtt
$LN1@SetJumpAtt:

; 171  : 	}
; 172  : 
; 173  : 	fTimeRate   = pAttr->m_fAttackAniRate;
; 174  : 	DWORD dwPreDelay  = pAttr->m_dwPreDelay;
; 175  : 
; 176  : 	// For AirJumpPower
; 177  : 	SetAirJump( pOwner, iAniID, fTimeRate );

  00073	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
  00078	8b 16		 mov	 edx, DWORD PTR [esi]
  0007a	51		 push	 ecx
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	50		 push	 eax
  00081	53		 push	 ebx
  00082	8b ce		 mov	 ecx, esi
  00084	ff 92 ac 02 00
	00		 call	 DWORD PTR [edx+684]
$LN9@SetJumpAtt:
  0008a	5f		 pop	 edi
$LN11@SetJumpAtt:
  0008b	5e		 pop	 esi

; 178  : 
; 179  : 	return false;

  0008c	32 c0		 xor	 al, al
  0008e	5b		 pop	 ebx

; 180  : }

  0008f	5d		 pop	 ebp
  00090	c2 10 00	 ret	 16			; 00000010H
?SetJumpAttack@ioJackItem@@UAE_NPAVioBaseChar@@HMW4AttackType@@@Z ENDP ; ioJackItem::SetJumpAttack
_TEXT	ENDS
PUBLIC	__real@bf800000
PUBLIC	__$ArrayPad$
PUBLIC	?SetExtraInfoToWeapon@ioJackItem@@UAEXPAVioWeapon@@_N@Z ; ioJackItem::SetExtraInfoToWeapon
EXTRN	?SetZoneValue@ioZoneEffectWeapon@@QAEX_N0@Z:PROC ; ioZoneEffectWeapon::SetZoneValue
EXTRN	?SetCollisionDir@ioZoneEffectWeapon@@QAEXAAUD3DXVECTOR3@@@Z:PROC ; ioZoneEffectWeapon::SetCollisionDir
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z:PROC
EXTRN	?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ:PROC	; ioWeapon::GetOwner
EXTRN	?SetExtraInfoToWeapon@ioAttackableItem@@UAEXPAVioWeapon@@_N@Z:PROC ; ioAttackableItem::SetExtraInfoToWeapon
;	COMDAT __real@bf800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iojackitem.cpp
CONST	ENDS
;	COMDAT ?SetExtraInfoToWeapon@ioJackItem@@UAEXPAVioWeapon@@_N@Z
_TEXT	SEGMENT
_vDir$548335 = -28					; size = 12
$T548336 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pWeapon$ = 8						; size = 4
_bJumpAttack$ = 12					; size = 1
?SetExtraInfoToWeapon@ioJackItem@@UAEXPAVioWeapon@@_N@Z PROC ; ioJackItem::SetExtraInfoToWeapon, COMDAT
; _this$ = ecx

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi

; 194  : 	ioAttackableItem::SetExtraInfoToWeapon( pWeapon, bJumpAttack );

  00011	ff 75 0c	 push	 DWORD PTR _bJumpAttack$[ebp]
  00014	8b 75 08	 mov	 esi, DWORD PTR _pWeapon$[ebp]
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ?SetExtraInfoToWeapon@ioAttackableItem@@UAEXPAVioWeapon@@_N@Z ; ioAttackableItem::SetExtraInfoToWeapon

; 195  : 
; 196  : 	ioZoneEffectWeapon *pZone = ToZoneEffectWeapon( pWeapon );

  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 ?ToZoneEffectWeapon@@YAPAVioZoneEffectWeapon@@PAVioWeapon@@@Z ; ToZoneEffectWeapon
  00023	8b f0		 mov	 esi, eax
  00025	59		 pop	 ecx

; 197  : 	if( pZone )

  00026	85 f6		 test	 esi, esi
  00028	74 52		 je	 SHORT $LN1@SetExtraIn

; 198  : 	{
; 199  : 		ioBaseChar *pChar = pZone->GetOwner();

  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ ; ioWeapon::GetOwner

; 200  : 		if( pChar )

  00031	85 c0		 test	 eax, eax
  00033	74 47		 je	 SHORT $LN1@SetExtraIn

; 201  : 		{
; 202  : 			D3DXVECTOR3 vDir = pChar->GetTargetRot() * D3DXVECTOR3( 0.0f, 0.0f, -1.0f );

  00035	0f 57 c0	 xorps	 xmm0, xmm0
  00038	8d 4d f0	 lea	 ecx, DWORD PTR $T548336[ebp]
  0003b	51		 push	 ecx
  0003c	05 a4 06 00 00	 add	 eax, 1700		; 000006a4H
  00041	50		 push	 eax
  00042	8d 45 e4	 lea	 eax, DWORD PTR _vDir$548335[ebp]
  00045	f3 0f 11 45 f0	 movss	 DWORD PTR $T548336[ebp], xmm0
  0004a	f3 0f 11 45 f4	 movss	 DWORD PTR $T548336[ebp+4], xmm0
  0004f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00057	50		 push	 eax
  00058	f3 0f 11 45 f8	 movss	 DWORD PTR $T548336[ebp+8], xmm0
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH

; 203  : 			pZone->SetCollisionDir( vDir );

  00066	8d 45 e4	 lea	 eax, DWORD PTR _vDir$548335[ebp]
  00069	50		 push	 eax
  0006a	8b ce		 mov	 ecx, esi
  0006c	e8 00 00 00 00	 call	 ?SetCollisionDir@ioZoneEffectWeapon@@QAEXAAUD3DXVECTOR3@@@Z ; ioZoneEffectWeapon::SetCollisionDir

; 204  : 			pZone->SetZoneValue( true, false );

  00071	6a 00		 push	 0
  00073	6a 01		 push	 1
  00075	8b ce		 mov	 ecx, esi
  00077	e8 00 00 00 00	 call	 ?SetZoneValue@ioZoneEffectWeapon@@QAEX_N0@Z ; ioZoneEffectWeapon::SetZoneValue
$LN1@SetExtraIn:

; 205  : 		}
; 206  : 	}
; 207  : }

  0007c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007f	33 cd		 xor	 ecx, ebp
  00081	5e		 pop	 esi
  00082	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00087	c9		 leave
  00088	c2 08 00	 ret	 8
?SetExtraInfoToWeapon@ioJackItem@@UAEXPAVioWeapon@@_N@Z ENDP ; ioJackItem::SetExtraInfoToWeapon
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4f800000
PUBLIC	__real@42c80000
PUBLIC	__$ArrayPad$
PUBLIC	?ChangeToChargeAttack@ioJackItem@@IAEXPAVioBaseChar@@@Z ; ioJackItem::ChangeToChargeAttack
EXTRN	__imp_?GetAnimationFullTime@ioEntityGroup@@QAEMH@Z:PROC
EXTRN	?RefreshFireTimeList@ioBaseChar@@QAEXHABV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@W4FireTimeType@@MK_N@Z:PROC ; ioBaseChar::RefreshFireTimeList
EXTRN	?SetReservedSliding@ioBaseChar@@QAEXABV?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@HMKM_N@Z:PROC ; ioBaseChar::SetReservedSliding
EXTRN	?ClearReservedSliding@ioBaseChar@@QAEXXZ:PROC	; ioBaseChar::ClearReservedSliding
EXTRN	__imp_?SetActionAni@ioEntityGroup@@QAE_NHMMMMMM_N0@Z:PROC
EXTRN	__imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z:PROC
EXTRN	__imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z:PROC
EXTRN	__ftol2:PROC
;	COMDAT __real@3ff0000000000000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ChangeToChargeAttack@ioJackItem@@IAEXPAVioBaseChar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ChangeToChargeAttack@ioJackItem@@IAEXPAVioBaseChar@@@Z$0
__ehfuncinfo$?ChangeToChargeAttack@ioJackItem@@IAEXPAVioBaseChar@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ChangeToChargeAttack@ioJackItem@@IAEXPAVioBaseChar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iojackitem.cpp
xdata$x	ENDS
;	COMDAT ?ChangeToChargeAttack@ioJackItem@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
tv261 = -32824						; size = 4
tv235 = -32824						; size = 4
_iAniID$ = -32820					; size = 4
_fTimeRate$ = -32816					; size = 4
_dwCurTime$ = -32812					; size = 4
_dwPreDelay$ = -32812					; size = 4
_kPacket$548660 = -32808				; size = 32792
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
?ChangeToChargeAttack@ioJackItem@@IAEXPAVioBaseChar@@@Z PROC ; ioJackItem::ChangeToChargeAttack, COMDAT
; _this$ = ecx

; 443  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ChangeToChargeAttack@ioJackItem@@IAEXPAVioBaseChar@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 2c 80 00 00	 mov	 eax, 32812		; 0000802cH
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00035	8b f1		 mov	 esi, ecx

; 444  : 	if( !pOwner ) 

  00037	85 ff		 test	 edi, edi
  00039	0f 84 2e 02 00
	00		 je	 $LN1@ChangeToCh

; 445  : 		return;
; 446  : 	
; 447  : 	ioEntityGroup *pGrp = pOwner->GetGroup();

  0003f	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]

; 448  : 	int iAniID = pGrp->GetAnimationIdx( m_ChargeAttackAttribute.m_AttackAnimation );

  00042	8d 86 68 19 00
	00		 lea	 eax, DWORD PTR [esi+6504]
  00048	50		 push	 eax
  00049	8b cb		 mov	 ecx, ebx
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z
  00051	89 85 cc 7f ff
	ff		 mov	 DWORD PTR _iAniID$[ebp], eax

; 449  : 	if ( iAniID == -1 )

  00057	83 f8 ff	 cmp	 eax, -1
  0005a	0f 84 0d 02 00
	00		 je	 $LN1@ChangeToCh

; 450  : 		return;
; 451  : 
; 452  : 	float fTimeRate  = m_ChargeAttackAttribute.m_fAttackAniRate;

  00060	f3 0f 10 86 78
	19 00 00	 movss	 xmm0, DWORD PTR [esi+6520]

; 453  : 	DWORD dwPreDelay = m_ChargeAttackAttribute.m_dwPreDelay;

  00068	8b 86 b0 19 00
	00		 mov	 eax, DWORD PTR [esi+6576]

; 454  : 	
; 455  : 	pGrp->ClearAllLoopAni( 100.0f, true );

  0006e	6a 01		 push	 1
  00070	51		 push	 ecx
  00071	f3 0f 11 85 d0
	7f ff ff	 movss	 DWORD PTR _fTimeRate$[ebp], xmm0
  00079	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00081	8b cb		 mov	 ecx, ebx
  00083	89 85 d4 7f ff
	ff		 mov	 DWORD PTR _dwPreDelay$[ebp], eax
  00089	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 456  : 	pGrp->ClearAllActionAni( 100.0f, true );

  00094	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0009c	6a 01		 push	 1
  0009e	51		 push	 ecx
  0009f	8b cb		 mov	 ecx, ebx
  000a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 457  : 	pGrp->SetActionAni( iAniID, 100.0f, 100.0f, 1.0f, 1.0f/fTimeRate, 0.0f, dwPreDelay );	

  000ac	db 85 d4 7f ff
	ff		 fild	 DWORD PTR _dwPreDelay$[ebp]
  000b2	8b 85 d4 7f ff
	ff		 mov	 eax, DWORD PTR _dwPreDelay$[ebp]
  000b8	6a 01		 push	 1
  000ba	6a 00		 push	 0
  000bc	85 c0		 test	 eax, eax
  000be	79 06		 jns	 SHORT $LN12@ChangeToCh
  000c0	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN12@ChangeToCh:
  000c6	0f 57 c0	 xorps	 xmm0, xmm0
  000c9	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000d1	83 ec 18	 sub	 esp, 24			; 00000018H
  000d4	d9 5c 24 14	 fstp	 DWORD PTR [esp+20]
  000d8	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  000de	f3 0f 10 85 d0
	7f ff ff	 movss	 xmm0, DWORD PTR _fTimeRate$[ebp]
  000e6	0f 5a c0	 cvtps2pd xmm0, xmm0
  000e9	f2 0f 5e c8	 divsd	 xmm1, xmm0
  000ed	8b cb		 mov	 ecx, ebx
  000ef	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  000f3	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  000f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00101	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00107	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0010f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00115	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011a	ff b5 cc 7f ff
	ff		 push	 DWORD PTR _iAniID$[ebp]
  00120	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetActionAni@ioEntityGroup@@QAE_NHMMMMMM_N0@Z

; 458  : 
; 459  : 	pOwner->ClearReservedSliding();

  00126	8b cf		 mov	 ecx, edi
  00128	e8 00 00 00 00	 call	 ?ClearReservedSliding@ioBaseChar@@QAEXXZ ; ioBaseChar::ClearReservedSliding

; 460  : 	pOwner->SetReservedSliding( m_ChargeAttackAttribute.m_vForceInfoList, iAniID, fTimeRate, dwPreDelay );

  0012d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00135	6a 01		 push	 1
  00137	51		 push	 ecx
  00138	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013d	ff b5 d4 7f ff
	ff		 push	 DWORD PTR _dwPreDelay$[ebp]
  00143	f3 0f 10 85 d0
	7f ff ff	 movss	 xmm0, DWORD PTR _fTimeRate$[ebp]
  0014b	51		 push	 ecx
  0014c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00151	ff b5 cc 7f ff
	ff		 push	 DWORD PTR _iAniID$[ebp]
  00157	8d 86 a0 19 00
	00		 lea	 eax, DWORD PTR [esi+6560]
  0015d	50		 push	 eax
  0015e	8b cf		 mov	 ecx, edi
  00160	e8 00 00 00 00	 call	 ?SetReservedSliding@ioBaseChar@@QAEXABV?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@HMKM_N@Z ; ioBaseChar::SetReservedSliding

; 461  : 
; 462  : 	pOwner->RefreshFireTimeList( iAniID, m_ChargeAttackAttribute.m_vWeaponInfoList, FTT_NORMAL_ATTACK, fTimeRate, dwPreDelay );

  00165	f3 0f 10 85 d0
	7f ff ff	 movss	 xmm0, DWORD PTR _fTimeRate$[ebp]
  0016d	6a 00		 push	 0
  0016f	ff b5 d4 7f ff
	ff		 push	 DWORD PTR _dwPreDelay$[ebp]
  00175	8d 86 90 19 00
	00		 lea	 eax, DWORD PTR [esi+6544]
  0017b	51		 push	 ecx
  0017c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00181	6a 00		 push	 0
  00183	50		 push	 eax
  00184	ff b5 cc 7f ff
	ff		 push	 DWORD PTR _iAniID$[ebp]
  0018a	8b cf		 mov	 ecx, edi
  0018c	e8 00 00 00 00	 call	 ?RefreshFireTimeList@ioBaseChar@@QAEXHABV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@W4FireTimeType@@MK_N@Z ; ioBaseChar::RefreshFireTimeList

; 463  : 
; 464  : 	DWORD dwCurTime = FRAMEGETTIME();

  00191	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00197	8b c8		 mov	 ecx, eax
  00199	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 465  : 	m_dwMotionEndTime = dwCurTime + pGrp->GetAnimationFullTime( iAniID ) * fTimeRate;

  0019f	ff b5 cc 7f ff
	ff		 push	 DWORD PTR _iAniID$[ebp]
  001a5	8b cb		 mov	 ecx, ebx
  001a7	89 85 d4 7f ff
	ff		 mov	 DWORD PTR _dwCurTime$[ebp], eax
  001ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationFullTime@ioEntityGroup@@QAEMH@Z
  001b3	d8 8d d0 7f ff
	ff		 fmul	 DWORD PTR _fTimeRate$[ebp]
  001b9	8b 85 d4 7f ff
	ff		 mov	 eax, DWORD PTR _dwCurTime$[ebp]
  001bf	db 85 d4 7f ff
	ff		 fild	 DWORD PTR _dwCurTime$[ebp]
  001c5	85 c0		 test	 eax, eax
  001c7	79 06		 jns	 SHORT $LN13@ChangeToCh
  001c9	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN13@ChangeToCh:
  001cf	de c1		 faddp	 ST(1), ST(0)
  001d1	e8 00 00 00 00	 call	 __ftol2

; 466  : 
; 467  : 	m_ChargeState = CS_CHARGE_ATTACK;
; 468  : 
; 469  : 	SetUseExtraGauge( m_fNeedGauge );

  001d6	f3 0f 10 86 54
	19 00 00	 movss	 xmm0, DWORD PTR [esi+6484]
  001de	51		 push	 ecx
  001df	89 86 c4 19 00
	00		 mov	 DWORD PTR [esi+6596], eax
  001e5	8b 06		 mov	 eax, DWORD PTR [esi]
  001e7	8b ce		 mov	 ecx, esi
  001e9	c7 86 b8 19 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+6584], 3
  001f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f8	ff 90 8c 02 00
	00		 call	 DWORD PTR [eax+652]

; 470  : 
; 471  : 	if( pOwner->IsNeedSendNetwork() )

  001fe	8b 07		 mov	 eax, DWORD PTR [edi]
  00200	8b cf		 mov	 ecx, edi
  00202	ff 90 04 01 00
	00		 call	 DWORD PTR [eax+260]
  00208	84 c0		 test	 al, al
  0020a	74 61		 je	 SHORT $LN1@ChangeToCh

; 472  : 	{
; 473  : 		SP2Packet kPacket( CUPK_ITEM_GAUGE_OK );

  0020c	68 27 41 00 00	 push	 16679			; 00004127H
  00211	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548660[ebp]
  00217	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet
  0021c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 474  : 		FillItemGaugePacketHeader( pOwner, kPacket );

  00220	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$548660[ebp]
  00226	50		 push	 eax
  00227	57		 push	 edi
  00228	8b ce		 mov	 ecx, esi
  0022a	e8 00 00 00 00	 call	 ?FillItemGaugePacketHeader@ioAttackableItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z ; ioAttackableItem::FillItemGaugePacketHeader

; 475  : 		kPacket << static_cast<byte>( ST_CHARGE_ATTACK );

  0022f	6a 01		 push	 1
  00231	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548660[ebp]
  00237	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@E@Z ; SP2Packet::operator<<

; 476  : 		kPacket << pOwner->GetTargetRot();

  0023c	81 c7 a4 06 00
	00		 add	 edi, 1700		; 000006a4H
  00242	57		 push	 edi
  00243	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548660[ebp]
  00249	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXQUATERNION@@@Z ; SP2Packet::operator<<

; 477  : 		P2PNetwork::SendToAllPlayingUser( kPacket );

  0024e	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$548660[ebp]
  00254	6a 00		 push	 0
  00256	50		 push	 eax
  00257	e8 00 00 00 00	 call	 ?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z ; P2PNetwork::SendToAllPlayingUser

; 478  : 	}

  0025c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00260	59		 pop	 ecx
  00261	59		 pop	 ecx
  00262	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548660[ebp]
  00268	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN1@ChangeToCh:

; 479  : }

  0026d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00270	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00277	59		 pop	 ecx
  00278	5f		 pop	 edi
  00279	5e		 pop	 esi
  0027a	5b		 pop	 ebx
  0027b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0027e	33 cd		 xor	 ecx, ebp
  00280	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00285	c9		 leave
  00286	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ChangeToChargeAttack@ioJackItem@@IAEXPAVioBaseChar@@@Z$0:
  00000	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548660[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?ChangeToChargeAttack@ioJackItem@@IAEXPAVioBaseChar@@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a c4 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32828]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ChangeToChargeAttack@ioJackItem@@IAEXPAVioBaseChar@@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ChangeToChargeAttack@ioJackItem@@IAEXPAVioBaseChar@@@Z ENDP ; ioJackItem::ChangeToChargeAttack
PUBLIC	??D?$CEncrypt@M@@QAEMABM@Z			; CEncrypt<float>::operator*
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??D?$CEncrypt@M@@QAEMABM@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
tv130 = 8						; size = 4
_inValue$ = 8						; size = 4
??D?$CEncrypt@M@@QAEMABM@Z PROC				; CEncrypt<float>::operator*, COMDAT
; _this$ = ecx

; 1685 : 	{	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1686 : 		type value;
; 1687 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 1688 : #ifdef _NOTUSE
; 1689 : 		Debug();
; 1690 : #endif
; 1691 : 		return value * inValue;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	d9 00		 fld	 DWORD PTR [eax]
  00012	d8 4d fc	 fmul	 DWORD PTR _value$[ebp]
  00015	d9 5d 08	 fstp	 DWORD PTR tv130[ebp]
  00018	d9 45 08	 fld	 DWORD PTR tv130[ebp]

; 1692 : 	}

  0001b	c9		 leave
  0001c	c2 04 00	 ret	 4
??D?$CEncrypt@M@@QAEMABM@Z ENDP				; CEncrypt<float>::operator*
_TEXT	ENDS
PUBLIC	??M?$CEncrypt@M@@QAE_NABM@Z			; CEncrypt<float>::operator<
; Function compile flags: /Ogsp
;	COMDAT ??M?$CEncrypt@M@@QAE_NABM@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??M?$CEncrypt@M@@QAE_NABM@Z PROC			; CEncrypt<float>::operator<, COMDAT
; _this$ = ecx

; 1791 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1792 : 		type value;
; 1793 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 1794 : #ifdef _NOTUSE
; 1795 : 		Debug();
; 1796 : #endif
; 1797 : 		return (value < inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00014	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$[ebp]
  00019	0f 5a c0	 cvtps2pd xmm0, xmm0
  0001c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0001f	33 c0		 xor	 eax, eax
  00021	66 0f 2f c8	 comisd	 xmm1, xmm0
  00025	76 01		 jbe	 SHORT $LN4@operator
  00027	40		 inc	 eax
$LN4@operator:

; 1798 : 	} 

  00028	c9		 leave
  00029	c2 04 00	 ret	 4
??M?$CEncrypt@M@@QAE_NABM@Z ENDP			; CEncrypt<float>::operator<
_TEXT	ENDS
PUBLIC	??P?$CEncrypt@M@@QAE_NABM@Z			; CEncrypt<float>::operator>=
; Function compile flags: /Ogsp
;	COMDAT ??P?$CEncrypt@M@@QAE_NABM@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??P?$CEncrypt@M@@QAE_NABM@Z PROC			; CEncrypt<float>::operator>=, COMDAT
; _this$ = ecx

; 1831 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1832 : 		type value;
; 1833 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 1834 : #ifdef _NOTUSE
; 1835 : 		Debug();
; 1836 : #endif
; 1837 : 		return (value >= inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00014	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$[ebp]
  00019	0f 5a c0	 cvtps2pd xmm0, xmm0
  0001c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0001f	33 c0		 xor	 eax, eax
  00021	66 0f 2f c1	 comisd	 xmm0, xmm1
  00025	72 01		 jb	 SHORT $LN4@operator@2
  00027	40		 inc	 eax
$LN4@operator@2:

; 1838 : 	}		

  00028	c9		 leave
  00029	c2 04 00	 ret	 4
??P?$CEncrypt@M@@QAE_NABM@Z ENDP			; CEncrypt<float>::operator>=
_TEXT	ENDS
PUBLIC	??9?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator!=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??9?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator!=, COMDAT
; _this$ = ecx

; 299  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 300  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 301  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator!=
_TEXT	ENDS
PUBLIC	?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end
_TEXT	ENDS
PUBLIC	?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end
_TEXT	ENDS
PUBLIC	??1?$_List_val@MV?$allocator@M@std@@@std@@QAE@XZ ; std::_List_val<float,std::allocator<float> >::~_List_val<float,std::allocator<float> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??1?$_List_val@MV?$allocator@M@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_val@MV?$allocator@M@std@@@std@@QAE@XZ PROC	; std::_List_val<float,std::allocator<float> >::~_List_val<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 502  : 		this->_Alnod.deallocate(this->_Myhead, 1);

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx

; 503  : 		}

  00008	c3		 ret	 0
??1?$_List_val@MV?$allocator@M@std@@@std@@QAE@XZ ENDP	; std::_List_val<float,std::allocator<float> >::~_List_val<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator++, COMDAT
; _this$ = ecx

; 369  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 370  : 		++(*(_Mybase *)this);

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 371  : 		return (*this);
; 372  : 		}

  00008	c3		 ret	 0
??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator++
_TEXT	ENDS
PUBLIC	??D?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEABMXZ ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEABMXZ
_TEXT	SEGMENT
??D?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEABMXZ PROC ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator*, COMDAT
; _this$ = ecx

; 202  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 203  : 		if (this->_Getcont() == 0
; 204  : 			|| this->_Ptr == 0
; 205  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 206  : 			{	// report error
; 207  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 208  : 			_SCL_SECURE_OUT_OF_RANGE;
; 209  : 			}
; 210  : 
; 211  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 212  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 213  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 214  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 215  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 216  : 
; 217  : 		return (_Mylist::_Myval(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 218  : 		}

  00005	c3		 ret	 0
??D?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEABMXZ ENDP ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator*
_TEXT	ENDS
PUBLIC	??0?$_List_nod@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ; std::_List_nod<float,std::allocator<float> >::_List_nod<float,std::allocator<float> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_List_nod@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_nod@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z PROC ; std::_List_nod<float,std::allocator<float> >::_List_nod<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 438  : 		{	// construct allocators from _Al

  00000	8b c1		 mov	 eax, ecx

; 439  : 		}

  00002	c2 04 00	 ret	 4
??0?$_List_nod@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ENDP ; std::_List_nod<float,std::allocator<float> >::_List_nod<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<float,std::allocator<float> >::_Node>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	??0?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::_List_const_iterator<std::_List_val<float,std::allocator<float> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::_List_const_iterator<std::_List_val<float,std::allocator<float> > >, COMDAT
; _this$ = ecx

; 184  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 185  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::_List_const_iterator<std::_List_val<float,std::allocator<float> > >
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z ; ioINILoader::LoadFloat_e<17>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 17
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<17>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 a7 01 00
	00		 je	 $LN96@LoadFloat_
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 90 01 00
	00		 je	 $LN95@LoadFloat_
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 78 01 00
	00		 je	 $LN94@LoadFloat_
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 61 01 00
	00		 je	 $LN93@LoadFloat_
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 4a 01 00
	00		 je	 $LN92@LoadFloat_
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 34 01 00
	00		 je	 $LN91@LoadFloat_
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 1e 01 00
	00		 je	 $LN90@LoadFloat_
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 07 01 00
	00		 je	 $LN89@LoadFloat_
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 f0 00 00
	00		 je	 $LN88@LoadFloat_
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 da 00 00
	00		 je	 $LN87@LoadFloat_
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 c4 00 00
	00		 je	 $LN86@LoadFloat_
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 ad 00 00
	00		 je	 $LN85@LoadFloat_
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 96 00 00
	00		 je	 $LN84@LoadFloat_
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 80 00 00
	00		 je	 $LN83@LoadFloat_
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	74 6e		 je	 SHORT $LN82@LoadFloat_
  00108	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010b	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0010e	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00111	84 d2		 test	 dl, dl
  00113	74 5b		 je	 SHORT $LN81@LoadFloat_
  00115	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00118	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	0f 84 a6 00 00
	00		 je	 $LN1@LoadFloat_
  00125	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00128	84 d2		 test	 dl, dl
  0012a	74 3f		 je	 SHORT $LN79@LoadFloat_
  0012c	32 d1		 xor	 dl, cl
  0012e	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00131	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00134	84 d2		 test	 dl, dl
  00136	74 2d		 je	 SHORT $LN78@LoadFloat_
  00138	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0013b	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0013e	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00141	84 d2		 test	 dl, dl
  00143	74 1a		 je	 SHORT $LN77@LoadFloat_
  00145	8a 40 14	 mov	 al, BYTE PTR [eax+20]
  00148	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014b	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014e	84 c0		 test	 al, al
  00150	74 07		 je	 SHORT $LN76@LoadFloat_
  00152	34 ed		 xor	 al, -19			; ffffffedH
  00154	88 45 f8	 mov	 BYTE PTR __k$[ebp+20], al
  00157	eb 72		 jmp	 SHORT $LN1@LoadFloat_
$LN76@LoadFloat_:
  00159	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0015d	eb 6c		 jmp	 SHORT $LN1@LoadFloat_
$LN77@LoadFloat_:
  0015f	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00163	eb 66		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  00165	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00169	eb 60		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  0016b	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  0016e	eb 5b		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  00170	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00174	eb 55		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  00176	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0017a	eb 4f		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  0017c	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  0017f	eb 4a		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  00181	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00185	eb 44		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  00187	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0018b	eb 3e		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  0018d	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00191	eb 38		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  00193	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  00196	eb 33		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  00198	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0019c	eb 2d		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  0019e	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001a2	eb 27		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  001a4	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001a8	eb 21		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  001aa	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001ad	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  001af	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001b3	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  001b5	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001b9	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  001bb	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001bf	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  001c1	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001c5	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  001c7	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  001cb	6a 04		 push	 4
  001cd	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001d0	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+16], 0
  001d4	5a		 pop	 edx
$LL104@LoadFloat_:
  001d5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001db	83 c0 04	 add	 eax, 4
  001de	4a		 dec	 edx
  001df	75 f4		 jne	 SHORT $LL104@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  001e1	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001e6	51		 push	 ecx
  001e7	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ef	50		 push	 eax
  001f0	8b ce		 mov	 ecx, esi
  001f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fb	33 cd		 xor	 ecx, ebp
  001fd	5e		 pop	 esi
  001fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00203	c9		 leave
  00204	c2 08 00	 ret	 8
??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<17>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$09@ioINILoader@@QAEHAAY09$$CBDH@Z	; ioINILoader::LoadInt_e<10>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$09@ioINILoader@@QAEHAAY09$$CBDH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$09@ioINILoader@@QAEHAAY09$$CBDH@Z PROC	; ioINILoader::LoadInt_e<10>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	84 d2		 test	 dl, dl
  00017	0f 84 0d 01 00
	00		 je	 $LN96@LoadInt_e
  0001d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00020	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00023	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00026	84 d2		 test	 dl, dl
  00028	0f 84 f6 00 00
	00		 je	 $LN95@LoadInt_e
  0002e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00031	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00034	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00037	84 d2		 test	 dl, dl
  00039	0f 84 df 00 00
	00		 je	 $LN94@LoadInt_e
  0003f	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00042	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00045	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00048	84 d2		 test	 dl, dl
  0004a	0f 84 c8 00 00
	00		 je	 $LN93@LoadInt_e
  00050	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00053	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00056	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00059	84 d2		 test	 dl, dl
  0005b	0f 84 b1 00 00
	00		 je	 $LN92@LoadInt_e
  00061	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00064	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00067	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006a	84 d2		 test	 dl, dl
  0006c	0f 84 9a 00 00
	00		 je	 $LN91@LoadInt_e
  00072	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00075	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00078	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007b	84 d2		 test	 dl, dl
  0007d	0f 84 83 00 00
	00		 je	 $LN90@LoadInt_e
  00083	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00086	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00089	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008c	84 d2		 test	 dl, dl
  0008e	74 70		 je	 SHORT $LN89@LoadInt_e
  00090	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00093	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  00096	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  00099	84 d2		 test	 dl, dl
  0009b	74 5d		 je	 SHORT $LN88@LoadInt_e
  0009d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a0	80 78 09 00	 cmp	 BYTE PTR [eax+9], 0
  000a4	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000a7	0f 84 81 00 00
	00		 je	 $LN1@LoadInt_e
  000ad	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000b0	84 d2		 test	 dl, dl
  000b2	74 40		 je	 SHORT $LN86@LoadInt_e
  000b4	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000b7	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000ba	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000bd	84 d2		 test	 dl, dl
  000bf	74 2d		 je	 SHORT $LN85@LoadInt_e
  000c1	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000c4	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000c7	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000ca	84 d2		 test	 dl, dl
  000cc	74 1a		 je	 SHORT $LN84@LoadInt_e
  000ce	8a 40 0d	 mov	 al, BYTE PTR [eax+13]
  000d1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d4	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000d7	84 c0		 test	 al, al
  000d9	74 07		 je	 SHORT $LN83@LoadInt_e
  000db	34 ec		 xor	 al, -20			; ffffffecH
  000dd	88 45 f9	 mov	 BYTE PTR __k$[ebp+13], al
  000e0	eb 4c		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  000e2	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  000e6	eb 46		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  000e8	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  000ec	eb 40		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  000ee	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  000f2	eb 3a		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  000f4	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  000f8	eb 34		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  000fa	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  000fe	eb 2e		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  00100	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00104	eb 28		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  00106	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0010a	eb 22		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  0010c	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00110	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  00112	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00116	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  00118	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0011c	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  0011e	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00122	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  00124	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00128	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  0012a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  0012e	6a 02		 push	 2
  00130	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00133	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+9], 0
  00137	5a		 pop	 edx
$LL104@LoadInt_e:
  00138	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0013e	83 c0 04	 add	 eax, 4
  00141	4a		 dec	 edx
  00142	75 f4		 jne	 SHORT $LL104@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  00144	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00147	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0014b	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014e	50		 push	 eax
  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00155	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00158	33 cd		 xor	 ecx, ebp
  0015a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015f	c9		 leave
  00160	c2 08 00	 ret	 8
??$LoadInt_e@$09@ioINILoader@@QAEHAAY09$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<10>
_TEXT	ENDS
PUBLIC	??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z ; ioEntityGroup::GetAnimationEventTimeList_e<13>
EXTRN	__imp_?GetAnimationEventTimeList@ioEntityGroup@@QAEHHABVioHashString@@AAV?$list@MV?$allocator@M@std@@@std@@@Z:PROC
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
xdata$x	SEGMENT
__unwindtable$??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z$0
__ehfuncinfo$??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioentitygroup.h
xdata$x	ENDS
;	COMDAT ??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z
_TEXT	SEGMENT
$T551404 = -52						; size = 16
_szEncEventType$ = -36					; size = 13
__$EHRec$ = -12						; size = 12
_id$ = 8						; size = 4
_szEventType$ = 12					; size = 4
_vTimeList$ = 16					; size = 4
??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z PROC ; ioEntityGroup::GetAnimationEventTimeList_e<13>, COMDAT
; _this$ = ecx

; 406  : 	{

  00000	6a 28		 push	 40			; 00000028H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _szEventType$[ebp]
  0000f	8b 75 10	 mov	 esi, DWORD PTR _vTimeList$[ebp]
  00012	8b f9		 mov	 edi, ecx

; 407  : 		_ENCSTR(szEventType, szEncEventType);

  00014	8a 08		 mov	 cl, BYTE PTR [eax]
  00016	84 c9		 test	 cl, cl
  00018	0f 84 49 01 00
	00		 je	 $LN96@GetAnimati
  0001e	80 f1 ed	 xor	 cl, -19			; ffffffedH
  00021	88 4d dc	 mov	 BYTE PTR _szEncEventType$[ebp], cl
  00024	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00027	84 c9		 test	 cl, cl
  00029	0f 84 32 01 00
	00		 je	 $LN95@GetAnimati
  0002f	80 f1 ec	 xor	 cl, -20			; ffffffecH
  00032	88 4d dd	 mov	 BYTE PTR _szEncEventType$[ebp+1], cl
  00035	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00038	84 c9		 test	 cl, cl
  0003a	0f 84 1b 01 00
	00		 je	 $LN94@GetAnimati
  00040	b2 eb		 mov	 dl, -21			; ffffffebH
  00042	32 ca		 xor	 cl, dl
  00044	88 4d de	 mov	 BYTE PTR _szEncEventType$[ebp+2], cl
  00047	8a 48 03	 mov	 cl, BYTE PTR [eax+3]
  0004a	84 c9		 test	 cl, cl
  0004c	0f 84 03 01 00
	00		 je	 $LN93@GetAnimati
  00052	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  00055	88 4d df	 mov	 BYTE PTR _szEncEventType$[ebp+3], cl
  00058	8a 48 04	 mov	 cl, BYTE PTR [eax+4]
  0005b	84 c9		 test	 cl, cl
  0005d	0f 84 ec 00 00
	00		 je	 $LN92@GetAnimati
  00063	80 f1 ed	 xor	 cl, -19			; ffffffedH
  00066	88 4d e0	 mov	 BYTE PTR _szEncEventType$[ebp+4], cl
  00069	8a 48 05	 mov	 cl, BYTE PTR [eax+5]
  0006c	84 c9		 test	 cl, cl
  0006e	0f 84 d5 00 00
	00		 je	 $LN91@GetAnimati
  00074	80 f1 ec	 xor	 cl, -20			; ffffffecH
  00077	88 4d e1	 mov	 BYTE PTR _szEncEventType$[ebp+5], cl
  0007a	8a 48 06	 mov	 cl, BYTE PTR [eax+6]
  0007d	84 c9		 test	 cl, cl
  0007f	0f 84 bf 00 00
	00		 je	 $LN90@GetAnimati
  00085	32 ca		 xor	 cl, dl
  00087	88 4d e2	 mov	 BYTE PTR _szEncEventType$[ebp+6], cl
  0008a	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  0008d	84 c9		 test	 cl, cl
  0008f	0f 84 a9 00 00
	00		 je	 $LN89@GetAnimati
  00095	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  00098	88 4d e3	 mov	 BYTE PTR _szEncEventType$[ebp+7], cl
  0009b	8a 48 08	 mov	 cl, BYTE PTR [eax+8]
  0009e	84 c9		 test	 cl, cl
  000a0	0f 84 92 00 00
	00		 je	 $LN88@GetAnimati
  000a6	80 f1 ed	 xor	 cl, -19			; ffffffedH
  000a9	88 4d e4	 mov	 BYTE PTR _szEncEventType$[ebp+8], cl
  000ac	8a 48 09	 mov	 cl, BYTE PTR [eax+9]
  000af	84 c9		 test	 cl, cl
  000b1	74 7f		 je	 SHORT $LN87@GetAnimati
  000b3	80 f1 ec	 xor	 cl, -20			; ffffffecH
  000b6	88 4d e5	 mov	 BYTE PTR _szEncEventType$[ebp+9], cl
  000b9	8a 48 0a	 mov	 cl, BYTE PTR [eax+10]
  000bc	84 c9		 test	 cl, cl
  000be	74 6d		 je	 SHORT $LN86@GetAnimati
  000c0	32 ca		 xor	 cl, dl
  000c2	88 4d e6	 mov	 BYTE PTR _szEncEventType$[ebp+10], cl
  000c5	8a 48 0b	 mov	 cl, BYTE PTR [eax+11]
  000c8	84 c9		 test	 cl, cl
  000ca	74 5b		 je	 SHORT $LN85@GetAnimati
  000cc	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  000cf	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  000d3	88 4d e7	 mov	 BYTE PTR _szEncEventType$[ebp+11], cl
  000d6	0f 84 8f 00 00
	00		 je	 $LN1@GetAnimati
  000dc	8a 48 0d	 mov	 cl, BYTE PTR [eax+13]
  000df	84 c9		 test	 cl, cl
  000e1	74 3e		 je	 SHORT $LN83@GetAnimati
  000e3	80 f1 ec	 xor	 cl, -20			; ffffffecH
  000e6	88 4d e9	 mov	 BYTE PTR _szEncEventType$[ebp+13], cl
  000e9	8a 48 0e	 mov	 cl, BYTE PTR [eax+14]
  000ec	84 c9		 test	 cl, cl
  000ee	74 2c		 je	 SHORT $LN82@GetAnimati
  000f0	32 ca		 xor	 cl, dl
  000f2	88 4d ea	 mov	 BYTE PTR _szEncEventType$[ebp+14], cl
  000f5	8a 48 0f	 mov	 cl, BYTE PTR [eax+15]
  000f8	84 c9		 test	 cl, cl
  000fa	74 1a		 je	 SHORT $LN81@GetAnimati
  000fc	8a 40 10	 mov	 al, BYTE PTR [eax+16]
  000ff	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  00102	88 4d eb	 mov	 BYTE PTR _szEncEventType$[ebp+15], cl
  00105	84 c0		 test	 al, al
  00107	74 07		 je	 SHORT $LN80@GetAnimati
  00109	34 ed		 xor	 al, -19			; ffffffedH
  0010b	88 45 ec	 mov	 BYTE PTR _szEncEventType$[ebp+16], al
  0010e	eb 5b		 jmp	 SHORT $LN1@GetAnimati
$LN80@GetAnimati:
  00110	c6 45 ec ed	 mov	 BYTE PTR _szEncEventType$[ebp+16], -19 ; ffffffedH
  00114	eb 55		 jmp	 SHORT $LN1@GetAnimati
$LN81@GetAnimati:
  00116	c6 45 eb ea	 mov	 BYTE PTR _szEncEventType$[ebp+15], -22 ; ffffffeaH
  0011a	eb 4f		 jmp	 SHORT $LN1@GetAnimati
$LN82@GetAnimati:
  0011c	88 55 ea	 mov	 BYTE PTR _szEncEventType$[ebp+14], dl
  0011f	eb 4a		 jmp	 SHORT $LN1@GetAnimati
$LN83@GetAnimati:
  00121	c6 45 e9 ec	 mov	 BYTE PTR _szEncEventType$[ebp+13], -20 ; ffffffecH
  00125	eb 44		 jmp	 SHORT $LN1@GetAnimati
$LN85@GetAnimati:
  00127	c6 45 e7 ea	 mov	 BYTE PTR _szEncEventType$[ebp+11], -22 ; ffffffeaH
  0012b	eb 3e		 jmp	 SHORT $LN1@GetAnimati
$LN86@GetAnimati:
  0012d	88 55 e6	 mov	 BYTE PTR _szEncEventType$[ebp+10], dl
  00130	eb 39		 jmp	 SHORT $LN1@GetAnimati
$LN87@GetAnimati:
  00132	c6 45 e5 ec	 mov	 BYTE PTR _szEncEventType$[ebp+9], -20 ; ffffffecH
  00136	eb 33		 jmp	 SHORT $LN1@GetAnimati
$LN88@GetAnimati:
  00138	c6 45 e4 ed	 mov	 BYTE PTR _szEncEventType$[ebp+8], -19 ; ffffffedH
  0013c	eb 2d		 jmp	 SHORT $LN1@GetAnimati
$LN89@GetAnimati:
  0013e	c6 45 e3 ea	 mov	 BYTE PTR _szEncEventType$[ebp+7], -22 ; ffffffeaH
  00142	eb 27		 jmp	 SHORT $LN1@GetAnimati
$LN90@GetAnimati:
  00144	88 55 e2	 mov	 BYTE PTR _szEncEventType$[ebp+6], dl
  00147	eb 22		 jmp	 SHORT $LN1@GetAnimati
$LN91@GetAnimati:
  00149	c6 45 e1 ec	 mov	 BYTE PTR _szEncEventType$[ebp+5], -20 ; ffffffecH
  0014d	eb 1c		 jmp	 SHORT $LN1@GetAnimati
$LN92@GetAnimati:
  0014f	c6 45 e0 ed	 mov	 BYTE PTR _szEncEventType$[ebp+4], -19 ; ffffffedH
  00153	eb 16		 jmp	 SHORT $LN1@GetAnimati
$LN93@GetAnimati:
  00155	c6 45 df ea	 mov	 BYTE PTR _szEncEventType$[ebp+3], -22 ; ffffffeaH
  00159	eb 10		 jmp	 SHORT $LN1@GetAnimati
$LN94@GetAnimati:
  0015b	c6 45 de eb	 mov	 BYTE PTR _szEncEventType$[ebp+2], -21 ; ffffffebH
  0015f	eb 0a		 jmp	 SHORT $LN1@GetAnimati
$LN95@GetAnimati:
  00161	c6 45 dd ec	 mov	 BYTE PTR _szEncEventType$[ebp+1], -20 ; ffffffecH
  00165	eb 04		 jmp	 SHORT $LN1@GetAnimati
$LN96@GetAnimati:
  00167	c6 45 dc ed	 mov	 BYTE PTR _szEncEventType$[ebp], -19 ; ffffffedH
$LN1@GetAnimati:
  0016b	6a 03		 push	 3
  0016d	8d 45 dc	 lea	 eax, DWORD PTR _szEncEventType$[ebp]
  00170	c6 45 e8 00	 mov	 BYTE PTR _szEncEventType$[ebp+12], 0
  00174	59		 pop	 ecx
$LL105@GetAnimati:
  00175	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0017b	83 c0 04	 add	 eax, 4
  0017e	49		 dec	 ecx
  0017f	75 f4		 jne	 SHORT $LL105@GetAnimati

; 408  : 		return GetAnimationEventTimeList(id, szEncEventType, vTimeList);

  00181	8d 45 dc	 lea	 eax, DWORD PTR _szEncEventType$[ebp]
  00184	50		 push	 eax
  00185	8d 4d cc	 lea	 ecx, DWORD PTR $T551404[ebp]
  00188	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0018e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00192	56		 push	 esi
  00193	8d 45 cc	 lea	 eax, DWORD PTR $T551404[ebp]
  00196	50		 push	 eax
  00197	ff 75 08	 push	 DWORD PTR _id$[ebp]
  0019a	8b cf		 mov	 ecx, edi
  0019c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventTimeList@ioEntityGroup@@QAEHHABVioHashString@@AAV?$list@MV?$allocator@M@std@@@std@@@Z
  001a2	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001a6	8d 4d cc	 lea	 ecx, DWORD PTR $T551404[ebp]
  001a9	8b f0		 mov	 esi, eax
  001ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  001b1	8b c6		 mov	 eax, esi

; 409  : 	}

  001b3	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001b8	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR $T551404[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z ENDP ; ioEntityGroup::GetAnimationEventTimeList_e<13>
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z PROC ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z ; std::allocator<ioHashString>::construct<ioHashString &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z$0
__ehfuncinfo$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z
_TEXT	SEGMENT
$T551442 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z PROC ; std::allocator<ioHashString>::construct<ioHashString &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T551442[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 09		 je	 SHORT $LN3@construct
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
$LN3@construct:

; 209  : 		}

  00023	e8 00 00 00 00	 call	 __EH_epilog3
  00028	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T551442[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z ENDP ; std::allocator<ioHashString>::construct<ioHashString &>
PUBLIC	?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z ; std::allocator<ioHashString>::construct
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z$0
__ehfuncinfo$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z
_TEXT	SEGMENT
$T551461 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z PROC ; std::allocator<ioHashString>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T551461[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 09		 je	 SHORT $LN3@construct@2
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
$LN3@construct@2:

; 203  : 		}

  00023	e8 00 00 00 00	 call	 __EH_epilog3
  00028	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T551461[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z ENDP ; std::allocator<ioHashString>::construct
PUBLIC	?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z ; std::allocator<ForceInfo>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z PROC ; std::allocator<ForceInfo>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN5@construct@3
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN5@construct@3:
  00013	5f		 pop	 edi

; 198  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z ENDP ; std::allocator<ForceInfo>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
_TEXT	SEGMENT
$T551504 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z PROC ; std::_Construct<WeaponInfo,WeaponInfo const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T551504[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 08		 je	 SHORT $LN3@Construct@3
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@ABU0@@Z
$LN3@Construct@3:

; 49   : 	}

  00025	e8 00 00 00 00	 call	 __EH_epilog3
  0002a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T551504[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ENDP ; std::_Construct<WeaponInfo,WeaponInfo const &>
PUBLIC	??B?$CEncrypt@M@@QAEMXZ				; CEncrypt<float>::operator float
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??B?$CEncrypt@M@@QAEMXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@M@@QAEMXZ PROC				; CEncrypt<float>::operator float, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	d9 45 fc	 fld	 DWORD PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@M@@QAEMXZ ENDP				; CEncrypt<float>::operator float
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@M@@QAEMM@Z			; CEncrypt<float>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@M@@QAEMM@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@M@@QAEMM@Z PROC				; CEncrypt<float>::operator=, COMDAT
; _this$ = ecx

; 1654 : 	{	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1655 : 		type value = inValue;

  00003	d9 45 08	 fld	 DWORD PTR _inValue$[ebp]

; 1656 : 		EncryptValueToPool((char*)&value);

  00006	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  00009	50		 push	 eax
  0000a	d9 5d 08	 fstp	 DWORD PTR _value$[ebp]
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 1657 : #ifdef _NOTUSE
; 1658 : 		m_value = inValue;
; 1659 : 		Debug();
; 1660 : #endif
; 1661 : 		return value;

  00012	d9 45 08	 fld	 DWORD PTR _value$[ebp]

; 1662 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@M@@QAEMM@Z ENDP				; CEncrypt<float>::operator=
_TEXT	ENDS
PUBLIC	??Y?$CEncrypt@M@@QAEAAMABM@Z			; CEncrypt<float>::operator+=
; Function compile flags: /Ogsp
;	COMDAT ??Y?$CEncrypt@M@@QAEAAMABM@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??Y?$CEncrypt@M@@QAEAAMABM@Z PROC			; CEncrypt<float>::operator+=, COMDAT
; _this$ = ecx

; 1715 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 1716 : 		type value;
; 1717 : 		DecryptValueToPool(&value);

  00005	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00008	50		 push	 eax
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 1718 : 		value += inValue;

  00010	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00013	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00017	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _value$[ebp]
  0001c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0001f	0f 5a c9	 cvtps2pd xmm1, xmm1

; 1719 : 		EncryptValueToPool((char*)&value);

  00022	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00025	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00029	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0002d	50		 push	 eax
  0002e	8b ce		 mov	 ecx, esi
  00030	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  00035	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 1720 : #ifdef _NOTUSE
; 1721 : 		m_value += inValue;
; 1722 : 		Debug();
; 1723 : #endif
; 1724 : 		return value;

  0003a	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  0003d	5e		 pop	 esi

; 1725 : 	} 

  0003e	c9		 leave
  0003f	c2 04 00	 ret	 4
??Y?$CEncrypt@M@@QAEAAMABM@Z ENDP			; CEncrypt<float>::operator+=
_TEXT	ENDS
PUBLIC	??Z?$CEncrypt@M@@QAEAAMABM@Z			; CEncrypt<float>::operator-=
; Function compile flags: /Ogsp
;	COMDAT ??Z?$CEncrypt@M@@QAEAAMABM@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??Z?$CEncrypt@M@@QAEAAMABM@Z PROC			; CEncrypt<float>::operator-=, COMDAT
; _this$ = ecx

; 1728 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 1729 : 		type value;
; 1730 : 		DecryptValueToPool(&value);

  00005	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00008	50		 push	 eax
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 1731 : 		value -= inValue;

  00010	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00013	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$[ebp]
  00018	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  0001c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0001f	0f 5a c9	 cvtps2pd xmm1, xmm1

; 1732 : 		EncryptValueToPool((char*)&value);

  00022	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00025	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00029	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0002d	50		 push	 eax
  0002e	8b ce		 mov	 ecx, esi
  00030	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  00035	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 1733 : #ifdef _NOTUSE
; 1734 : 		m_value -= inValue;
; 1735 : 		Debug();
; 1736 : #endif
; 1737 : 		return value;

  0003a	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  0003d	5e		 pop	 esi

; 1738 : 	} 

  0003e	c9		 leave
  0003f	c2 04 00	 ret	 4
??Z?$CEncrypt@M@@QAEAAMABM@Z ENDP			; CEncrypt<float>::operator-=
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@K@@QAEKXZ				; CEncrypt<unsigned long>::operator unsigned long
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@K@@QAEKXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@K@@QAEKXZ PROC				; CEncrypt<unsigned long>::operator unsigned long, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@K@@QAEKXZ ENDP				; CEncrypt<unsigned long>::operator unsigned long
_TEXT	ENDS
PUBLIC	?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::end
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@V?$allocator@VioHashString@@@1@@Z ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::_Vector_val<ioHashString,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@V?$allocator@VioHashString@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@V?$allocator@VioHashString@@@1@@Z PROC ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::_Vector_val<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@V?$allocator@VioHashString@@@1@@Z ENDP ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::_Vector_val<ioHashString,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z PROC ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z ENDP ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::_Vector_val<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z PROC ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::_Vector_val<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z ENDP ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::_Vector_val<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@VioHashString@@@std@@QAEPAVioHashString@@I@Z ; std::allocator<ioHashString>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@VioHashString@@@std@@QAEPAVioHashString@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@VioHashString@@@std@@QAEPAVioHashString@@I@Z PROC ; std::allocator<ioHashString>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ; std::_Allocate<ioHashString>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@VioHashString@@@std@@QAEPAVioHashString@@I@Z ENDP ; std::allocator<ioHashString>::allocate
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator==
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z ; std::allocator<WeaponInfo>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z PROC ; std::allocator<WeaponInfo>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ; std::_Allocate<WeaponInfo>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z ENDP ; std::allocator<WeaponInfo>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z ; std::allocator<ForceInfo>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z PROC ; std::allocator<ForceInfo>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ; std::_Allocate<ForceInfo>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z ENDP ; std::allocator<ForceInfo>::allocate
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator==
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator==
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z ; std::allocator<ForceInfo>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z PROC ; std::allocator<ForceInfo>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z ENDP ; std::allocator<ForceInfo>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@VioHashString@@@std@@YAXPAVioHashString@@@Z ; std::_Destroy<ioHashString>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@VioHashString@@@std@@YAXPAVioHashString@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@VioHashString@@@std@@YAXPAVioHashString@@@Z PROC ; std::_Destroy<ioHashString>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 64   : 	}

  00006	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Destroy@VioHashString@@@std@@YAXPAVioHashString@@@Z ENDP ; std::_Destroy<ioHashString>
_TEXT	ENDS
PUBLIC	??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z ; std::_Destroy<WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z PROC ; std::_Destroy<WeaponInfo>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	83 c1 08	 add	 ecx, 8

; 64   : 	}

  00009	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  0000a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z ENDP ; std::_Destroy<WeaponInfo>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@ABV3@@Z ; std::allocator<ioHashString>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@ABV3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@ABV3@@Z PROC ; std::allocator<ioHashString>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@ABV3@@Z ENDP ; std::allocator<ioHashString>::construct
_TEXT	ENDS
PUBLIC	?SetNormalAttack@ioJackItem@@UAEXPAVioBaseChar@@H@Z ; ioJackItem::SetNormalAttack
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	?SetState@ioBaseChar@@QAEXH_N@Z:PROC		; ioBaseChar::SetState
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
xdata$x	SEGMENT
__unwindtable$?SetNormalAttack@ioJackItem@@UAEXPAVioBaseChar@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetNormalAttack@ioJackItem@@UAEXPAVioBaseChar@@H@Z$0
__ehfuncinfo$?SetNormalAttack@ioJackItem@@UAEXPAVioBaseChar@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetNormalAttack@ioJackItem@@UAEXPAVioBaseChar@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iojackitem.cpp
xdata$x	ENDS
;	COMDAT ?SetNormalAttack@ioJackItem@@UAEXPAVioBaseChar@@H@Z
_TEXT	SEGMENT
_szPreAni$ = -36					; size = 16
tv250 = -20						; size = 8
__$EHRec$ = -12						; size = 12
tv273 = 8						; size = 4
tv266 = 8						; size = 4
_value$551671 = 8					; size = 4
_fTimeRate$548283 = 8					; size = 4
_pOwner$ = 8						; size = 4
_pGrp$ = 12						; size = 4
_iCurCombo$ = 12					; size = 4
?SetNormalAttack@ioJackItem@@UAEXPAVioBaseChar@@H@Z PROC ; ioJackItem::SetNormalAttack, COMDAT
; _this$ = ecx

; 82   : {

  00000	6a 18		 push	 24			; 00000018H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?SetNormalAttack@ioJackItem@@UAEXPAVioBaseChar@@H@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 83   : 	ClearCancelInfo();	

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	ff 90 3c 02 00
	00		 call	 DWORD PTR [eax+572]

; 84   : 	
; 85   : 	m_ChargeState		= CS_CHARGING;

  00016	33 ff		 xor	 edi, edi
  00018	47		 inc	 edi
  00019	89 be b8 19 00
	00		 mov	 DWORD PTR [esi+6584], edi

; 86   : 	m_dwAttackStartTime	= FRAMEGETTIME();

  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00025	8b c8		 mov	 ecx, eax
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 87   : 	m_nCurCombo			= iCurCombo;

  0002d	8b 5d 0c	 mov	 ebx, DWORD PTR _iCurCombo$[ebp]

; 88   : 
; 89   : 	pOwner->SetState( CS_ATTACK );

  00030	57		 push	 edi
  00031	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00034	6a 05		 push	 5
  00036	8b cf		 mov	 ecx, edi
  00038	89 86 bc 19 00
	00		 mov	 DWORD PTR [esi+6588], eax
  0003e	89 9e c0 19 00
	00		 mov	 DWORD PTR [esi+6592], ebx
  00044	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState

; 90   : 	pOwner->SetChargingState( true );
; 91   : 
; 92   : 	ioEntityGroup *pGrp = pOwner->GetGroup();
; 93   : 	pGrp->ClearAllActionAni( 100.0f, true );

  00049	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00051	c6 87 54 20 00
	00 01		 mov	 BYTE PTR [edi+8276], 1
  00058	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  0005b	6a 01		 push	 1
  0005d	51		 push	 ecx
  0005e	8b cf		 mov	 ecx, edi
  00060	89 7d 0c	 mov	 DWORD PTR _pGrp$[ebp], edi
  00063	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 94   : 	pGrp->ClearAllLoopAni( 100.0f, true );

  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00076	6a 01		 push	 1
  00078	51		 push	 ecx
  00079	8b cf		 mov	 ecx, edi
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 95   : 
; 96   : 	int iPreGatherCnt = m_szPreGatherAniList.size();

  00086	8b be 5c 19 00
	00		 mov	 edi, DWORD PTR [esi+6492]
  0008c	2b be 58 19 00
	00		 sub	 edi, DWORD PTR [esi+6488]

; 97   : 
; 98   : 	ioHashString szPreAni;

  00092	8d 4d dc	 lea	 ecx, DWORD PTR _szPreAni$[ebp]
  00095	c1 ff 04	 sar	 edi, 4
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ
  0009e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 99   : 	if( 0 < iPreGatherCnt && COMPARE( iCurCombo, 0, iPreGatherCnt ) )

  000a2	85 ff		 test	 edi, edi
  000a4	0f 8e b6 00 00
	00		 jle	 $LN1@SetNormalA
  000aa	85 db		 test	 ebx, ebx
  000ac	0f 88 ae 00 00
	00		 js	 $LN1@SetNormalA
  000b2	3b df		 cmp	 ebx, edi
  000b4	0f 8d a6 00 00
	00		 jge	 $LN1@SetNormalA

; 100  : 	{
; 101  : 		szPreAni = m_szPreGatherAniList[iCurCombo];

  000ba	c1 e3 04	 shl	 ebx, 4
  000bd	03 9e 58 19 00
	00		 add	 ebx, DWORD PTR [esi+6488]
  000c3	8d 4d dc	 lea	 ecx, DWORD PTR _szPreAni$[ebp]
  000c6	53		 push	 ebx
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 102  : 		
; 103  : 		int iAniID = pGrp->GetAnimationIdx( szPreAni );

  000cd	8b 4d 0c	 mov	 ecx, DWORD PTR _pGrp$[ebp]
  000d0	8d 45 dc	 lea	 eax, DWORD PTR _szPreAni$[ebp]
  000d3	50		 push	 eax
  000d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z
  000da	8b f8		 mov	 edi, eax

; 104  : 		float fTimeRate = (float)m_dwChargeTime / pGrp->GetAnimationFullTime( iAniID );

  000dc	8d 45 08	 lea	 eax, DWORD PTR _value$551671[ebp]
  000df	50		 push	 eax
  000e0	8d 8e b0 18 00
	00		 lea	 ecx, DWORD PTR [esi+6320]
  000e6	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  000eb	db 45 08	 fild	 DWORD PTR _value$551671[ebp]
  000ee	8b 45 08	 mov	 eax, DWORD PTR _value$551671[ebp]
  000f1	85 c0		 test	 eax, eax
  000f3	79 06		 jns	 SHORT $LN16@SetNormalA
  000f5	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN16@SetNormalA:
  000fb	8b 4d 0c	 mov	 ecx, DWORD PTR _pGrp$[ebp]
  000fe	dd 5d ec	 fstp	 QWORD PTR tv250[ebp]
  00101	57		 push	 edi
  00102	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationFullTime@ioEntityGroup@@QAEMH@Z
  00108	dc 7d ec	 fdivr	 QWORD PTR tv250[ebp]

; 105  : 		pGrp->SetActionAni( iAniID, 100.0f, 100.0f, 1.0f, 1.0f/fTimeRate, 0.0f, 0.0f, true );

  0010b	0f 57 c0	 xorps	 xmm0, xmm0
  0010e	8b 4d 0c	 mov	 ecx, DWORD PTR _pGrp$[ebp]
  00111	6a 01		 push	 1
  00113	6a 01		 push	 1
  00115	83 ec 18	 sub	 esp, 24			; 00000018H
  00118	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  0011e	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00124	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0012c	d9 5d 08	 fstp	 DWORD PTR _fTimeRate$548283[ebp]
  0012f	d9 45 08	 fld	 DWORD PTR _fTimeRate$548283[ebp]
  00132	d9 e8		 fld1
  00134	de f1		 fdivrp	 ST(1), ST(0)
  00136	d9 5d 08	 fstp	 DWORD PTR tv266[ebp]
  00139	d9 45 08	 fld	 DWORD PTR tv266[ebp]
  0013c	d9 5c 24 0c	 fstp	 DWORD PTR [esp+12]
  00140	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00146	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0014e	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00154	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00159	57		 push	 edi
  0015a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetActionAni@ioEntityGroup@@QAE_NHMMMMMM_N0@Z
$LN1@SetNormalA:

; 106  : 	}
; 107  : }

  00160	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00164	8d 4d dc	 lea	 ecx, DWORD PTR _szPreAni$[ebp]
  00167	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0016d	e8 00 00 00 00	 call	 __EH_epilog3
  00172	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetNormalAttack@ioJackItem@@UAEXPAVioBaseChar@@H@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _szPreAni$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?SetNormalAttack@ioJackItem@@UAEXPAVioBaseChar@@H@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetNormalAttack@ioJackItem@@UAEXPAVioBaseChar@@H@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetNormalAttack@ioJackItem@@UAEXPAVioBaseChar@@H@Z ENDP ; ioJackItem::SetNormalAttack
PUBLIC	?SetUseExtraGauge@ioJackItem@@UAEXM@Z		; ioJackItem::SetUseExtraGauge
; Function compile flags: /Ogsp
;	COMDAT ?SetUseExtraGauge@ioJackItem@@UAEXM@Z
_TEXT	SEGMENT
_value$551686 = -4					; size = 4
_value$551699 = 8					; size = 4
_value$551695 = 8					; size = 4
_value$551691 = 8					; size = 4
_fAmt$ = 8						; size = 4
?SetUseExtraGauge@ioJackItem@@UAEXM@Z PROC		; ioJackItem::SetUseExtraGauge, COMDAT
; _this$ = ecx

; 212  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 213  : 	m_fCurExtraGauge -= fAmt;

  00005	8d b1 dc 16 00
	00		 lea	 esi, DWORD PTR [ecx+5852]
  0000b	8d 45 fc	 lea	 eax, DWORD PTR _value$551686[ebp]
  0000e	50		 push	 eax
  0000f	8b ce		 mov	 ecx, esi
  00011	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00016	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$551686[ebp]
  0001b	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fAmt$[ebp]
  00020	0f 5a c0	 cvtps2pd xmm0, xmm0
  00023	0f 5a c9	 cvtps2pd xmm1, xmm1
  00026	8d 45 fc	 lea	 eax, DWORD PTR _value$551686[ebp]
  00029	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0002d	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00031	50		 push	 eax
  00032	8b ce		 mov	 ecx, esi
  00034	f3 0f 11 45 fc	 movss	 DWORD PTR _value$551686[ebp], xmm0
  00039	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 214  : 	m_fCurExtraGauge = max( 0.0f, m_fCurExtraGauge );

  0003e	8d 45 08	 lea	 eax, DWORD PTR _value$551691[ebp]
  00041	50		 push	 eax
  00042	8b ce		 mov	 ecx, esi
  00044	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00049	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _value$551691[ebp]
  0004e	0f 57 c9	 xorps	 xmm1, xmm1
  00051	0f 5a c0	 cvtps2pd xmm0, xmm0
  00054	66 0f 2f c8	 comisd	 xmm1, xmm0
  00058	76 05		 jbe	 SHORT $LN3@SetUseExtr
  0005a	0f 57 c0	 xorps	 xmm0, xmm0
  0005d	eb 10		 jmp	 SHORT $LN4@SetUseExtr
$LN3@SetUseExtr:
  0005f	8d 45 08	 lea	 eax, DWORD PTR _value$551695[ebp]
  00062	50		 push	 eax
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  0006a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _value$551695[ebp]
$LN4@SetUseExtr:
  0006f	8d 45 08	 lea	 eax, DWORD PTR _value$551699[ebp]
  00072	50		 push	 eax
  00073	8b ce		 mov	 ecx, esi
  00075	f3 0f 11 45 08	 movss	 DWORD PTR _value$551699[ebp], xmm0
  0007a	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool
  0007f	5e		 pop	 esi

; 215  : }

  00080	c9		 leave
  00081	c2 04 00	 ret	 4
?SetUseExtraGauge@ioJackItem@@UAEXM@Z ENDP		; ioJackItem::SetUseExtraGauge
_TEXT	ENDS
PUBLIC	?OnItemGaugeOK@ioJackItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z ; ioJackItem::OnItemGaugeOK
EXTRN	??5SP2Packet@@QAEAAV0@AAH@Z:PROC		; SP2Packet::operator>>
EXTRN	?SetTargetRot@ioBaseChar@@QAEXABUD3DXQUATERNION@@@Z:PROC ; ioBaseChar::SetTargetRot
EXTRN	??5SP2Packet@@QAEAAV0@AAUD3DXQUATERNION@@@Z:PROC ; SP2Packet::operator>>
EXTRN	??5SP2Packet@@QAEAAV0@AAE@Z:PROC		; SP2Packet::operator>>
; Function compile flags: /Ogsp
;	COMDAT ?OnItemGaugeOK@ioJackItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
_TEXT	SEGMENT
_qtRot$548601 = -16					; size = 16
_qtRot$548599 = -16					; size = 16
_pOwner$ = 8						; size = 4
_eState$ = 11						; size = 1
_rkPacket$ = 12						; size = 4
?OnItemGaugeOK@ioJackItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z PROC ; ioJackItem::OnItemGaugeOK, COMDAT
; _this$ = ecx

; 307  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 308  : 	if( !pOwner ) 

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _pOwner$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	85 db		 test	 ebx, ebx
  0000f	74 68		 je	 SHORT $LN3@OnItemGaug

; 309  : 		return;
; 310  : 
; 311  : 	byte eState;
; 312  : 	rkPacket >> eState;

  00011	57		 push	 edi
  00012	8b 7d 0c	 mov	 edi, DWORD PTR _rkPacket$[ebp]
  00015	8d 45 0b	 lea	 eax, DWORD PTR _eState$[ebp]
  00018	50		 push	 eax
  00019	8b cf		 mov	 ecx, edi
  0001b	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAE@Z ; SP2Packet::operator>>

; 313  : 
; 314  : 	switch( eState )

  00020	0f b6 45 0b	 movzx	 eax, BYTE PTR _eState$[ebp]
  00024	83 e8 00	 sub	 eax, 0
  00027	74 23		 je	 SHORT $LN2@OnItemGaug
  00029	48		 dec	 eax
  0002a	75 4c		 jne	 SHORT $LN12@OnItemGaug

; 324  : 		}
; 325  : 		break;
; 326  : 	case ST_CHARGE_ATTACK:
; 327  : 		{
; 328  : 			D3DXQUATERNION qtRot;
; 329  : 			rkPacket >> qtRot;

  0002c	8d 45 f0	 lea	 eax, DWORD PTR _qtRot$548601[ebp]
  0002f	50		 push	 eax
  00030	8b cf		 mov	 ecx, edi
  00032	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXQUATERNION@@@Z ; SP2Packet::operator>>

; 330  : 
; 331  : 			pOwner->SetTargetRot( qtRot );

  00037	8d 45 f0	 lea	 eax, DWORD PTR _qtRot$548601[ebp]
  0003a	50		 push	 eax
  0003b	8b cb		 mov	 ecx, ebx
  0003d	e8 00 00 00 00	 call	 ?SetTargetRot@ioBaseChar@@QAEXABUD3DXQUATERNION@@@Z ; ioBaseChar::SetTargetRot

; 332  : 			ChangeToChargeAttack( pOwner );

  00042	53		 push	 ebx
  00043	8b ce		 mov	 ecx, esi
  00045	e8 00 00 00 00	 call	 ?ChangeToChargeAttack@ioJackItem@@IAEXPAVioBaseChar@@@Z ; ioJackItem::ChangeToChargeAttack

; 333  : 		}
; 334  : 		break;

  0004a	eb 2c		 jmp	 SHORT $LN12@OnItemGaug
$LN2@OnItemGaug:

; 315  : 	{
; 316  : 	case ST_ATTACK:
; 317  : 		{
; 318  : 			D3DXQUATERNION qtRot;
; 319  : 			rkPacket >> m_nCurCombo;

  0004c	8d 86 c0 19 00
	00		 lea	 eax, DWORD PTR [esi+6592]
  00052	50		 push	 eax
  00053	8b cf		 mov	 ecx, edi
  00055	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 320  : 			rkPacket >> qtRot;

  0005a	8d 45 f0	 lea	 eax, DWORD PTR _qtRot$548599[ebp]
  0005d	50		 push	 eax
  0005e	8b cf		 mov	 ecx, edi
  00060	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXQUATERNION@@@Z ; SP2Packet::operator>>

; 321  : 
; 322  : 			pOwner->SetTargetRot( qtRot );

  00065	8d 45 f0	 lea	 eax, DWORD PTR _qtRot$548599[ebp]
  00068	50		 push	 eax
  00069	8b cb		 mov	 ecx, ebx
  0006b	e8 00 00 00 00	 call	 ?SetTargetRot@ioBaseChar@@QAEXABUD3DXQUATERNION@@@Z ; ioBaseChar::SetTargetRot

; 323  : 			ChangeToAttackFire( pOwner );

  00070	53		 push	 ebx
  00071	8b ce		 mov	 ecx, esi
  00073	e8 00 00 00 00	 call	 ?ChangeToAttackFire@ioJackItem@@IAEXPAVioBaseChar@@@Z ; ioJackItem::ChangeToAttackFire
$LN12@OnItemGaug:
  00078	5f		 pop	 edi
$LN3@OnItemGaug:
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx

; 335  : 	}	
; 336  : }

  0007b	c9		 leave
  0007c	c2 08 00	 ret	 8
?OnItemGaugeOK@ioJackItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z ENDP ; ioJackItem::OnItemGaugeOK
_TEXT	ENDS
PUBLIC	?GetMaxBullet@ioJackItem@@UAEHXZ		; ioJackItem::GetMaxBullet
; Function compile flags: /Ogsp
;	COMDAT ?GetMaxBullet@ioJackItem@@UAEHXZ
_TEXT	SEGMENT
_value$551717 = -4					; size = 4
?GetMaxBullet@ioJackItem@@UAEHXZ PROC			; ioJackItem::GetMaxBullet, COMDAT
; _this$ = ecx

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 349  : 	return (int)m_fMaxExtraGauge;

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$551717[ebp]
  00007	50		 push	 eax
  00008	81 c1 ac 16 00
	00		 add	 ecx, 5804		; 000016acH
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00013	f3 0f 2c 45 fc	 cvttss2si eax, DWORD PTR _value$551717[ebp]

; 350  : }

  00018	c9		 leave
  00019	c3		 ret	 0
?GetMaxBullet@ioJackItem@@UAEHXZ ENDP			; ioJackItem::GetMaxBullet
_TEXT	ENDS
PUBLIC	?GetCurBullet@ioJackItem@@UAEHXZ		; ioJackItem::GetCurBullet
; Function compile flags: /Ogsp
;	COMDAT ?GetCurBullet@ioJackItem@@UAEHXZ
_TEXT	SEGMENT
_fCurCoolTime$ = -12					; size = 4
_value$551745 = -8					; size = 4
_value$551741 = -8					; size = 4
_value$551737 = -8					; size = 4
_value$551733 = -8					; size = 4
_value$551729 = -4					; size = 4
?GetCurBullet@ioJackItem@@UAEHXZ PROC			; ioJackItem::GetCurBullet, COMDAT
; _this$ = ecx

; 358  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 359  : 	float fCurCoolTime = m_fCurExtraGauge;

  00009	8d 45 fc	 lea	 eax, DWORD PTR _value$551729[ebp]
  0000c	50		 push	 eax
  0000d	8d 8e dc 16 00
	00		 lea	 ecx, DWORD PTR [esi+5852]
  00013	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00018	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$551729[ebp]

; 360  : 	fCurCoolTime = max( 0, min( fCurCoolTime, m_fMaxExtraGauge ) );

  0001d	8d 45 f8	 lea	 eax, DWORD PTR _value$551733[ebp]
  00020	81 c6 ac 16 00
	00		 add	 esi, 5804		; 000016acH
  00026	50		 push	 eax
  00027	8b ce		 mov	 ecx, esi
  00029	f3 0f 11 45 f4	 movss	 DWORD PTR _fCurCoolTime$[ebp], xmm0
  0002e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00033	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$551729[ebp]
  00038	f3 0f 10 55 f8	 movss	 xmm2, DWORD PTR _value$551733[ebp]
  0003d	0f 57 c9	 xorps	 xmm1, xmm1
  00040	0f 5a c8	 cvtps2pd xmm1, xmm0
  00043	0f 5a d2	 cvtps2pd xmm2, xmm2
  00046	66 0f 2f d1	 comisd	 xmm2, xmm1
  0004a	77 10		 ja	 SHORT $LN4@GetCurBull
  0004c	8d 45 f8	 lea	 eax, DWORD PTR _value$551737[ebp]
  0004f	50		 push	 eax
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00057	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _value$551737[ebp]
$LN4@GetCurBull:
  0005c	0f 57 c9	 xorps	 xmm1, xmm1
  0005f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00062	66 0f 2f c8	 comisd	 xmm1, xmm0
  00066	76 05		 jbe	 SHORT $LN7@GetCurBull
  00068	0f 57 c0	 xorps	 xmm0, xmm0
  0006b	eb 38		 jmp	 SHORT $LN6@GetCurBull
$LN7@GetCurBull:
  0006d	8d 45 f8	 lea	 eax, DWORD PTR _value$551741[ebp]
  00070	50		 push	 eax
  00071	8b ce		 mov	 ecx, esi
  00073	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00078	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$551729[ebp]
  0007d	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _value$551741[ebp]
  00082	0f 5a c0	 cvtps2pd xmm0, xmm0
  00085	0f 5a c9	 cvtps2pd xmm1, xmm1
  00088	66 0f 2f c8	 comisd	 xmm1, xmm0
  0008c	77 12		 ja	 SHORT $LN19@GetCurBull
  0008e	8d 45 f8	 lea	 eax, DWORD PTR _value$551745[ebp]
  00091	50		 push	 eax
  00092	8b ce		 mov	 ecx, esi
  00094	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00099	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _value$551745[ebp]
  0009e	eb 05		 jmp	 SHORT $LN6@GetCurBull
$LN19@GetCurBull:
  000a0	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _fCurCoolTime$[ebp]
$LN6@GetCurBull:

; 361  : 
; 362  : 	return (int)fCurCoolTime;

  000a5	f3 0f 2c c0	 cvttss2si eax, xmm0
  000a9	5e		 pop	 esi

; 363  : }

  000aa	c9		 leave
  000ab	c3		 ret	 0
?GetCurBullet@ioJackItem@@UAEHXZ ENDP			; ioJackItem::GetCurBullet
_TEXT	ENDS
PUBLIC	?SetCurBullet@ioJackItem@@UAEXH@Z		; ioJackItem::SetCurBullet
; Function compile flags: /Ogsp
;	COMDAT ?SetCurBullet@ioJackItem@@UAEXH@Z
_TEXT	SEGMENT
_value$551766 = -4					; size = 4
_value$551762 = -4					; size = 4
_value$551758 = -4					; size = 4
_value$551774 = 8					; size = 4
_value$551770 = 8					; size = 4
_fCurBullet$ = 8					; size = 4
_iCurBullet$ = 8					; size = 4
?SetCurBullet@ioJackItem@@UAEXH@Z PROC			; ioJackItem::SetCurBullet, COMDAT
; _this$ = ecx

; 366  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 367  : 	if( iCurBullet < 0 )

  00004	83 7d 08 00	 cmp	 DWORD PTR _iCurBullet$[ebp], 0
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	0f 8c a6 00 00
	00		 jl	 $LN18@SetCurBull

; 368  : 		return;
; 369  : 
; 370  : 	float fCurBullet = iCurBullet;

  00011	66 0f 6e 45 08	 movd	 xmm0, DWORD PTR _iCurBullet$[ebp]
  00016	56		 push	 esi

; 371  : 	fCurBullet = max( 0, min( fCurBullet, m_fMaxExtraGauge ) );

  00017	8d 45 fc	 lea	 eax, DWORD PTR _value$551758[ebp]
  0001a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0001d	50		 push	 eax
  0001e	8d 8f ac 16 00
	00		 lea	 ecx, DWORD PTR [edi+5804]
  00024	f3 0f 11 45 08	 movss	 DWORD PTR _fCurBullet$[ebp], xmm0
  00029	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  0002e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fCurBullet$[ebp]
  00033	f3 0f 10 55 fc	 movss	 xmm2, DWORD PTR _value$551758[ebp]
  00038	0f 5a c8	 cvtps2pd xmm1, xmm0
  0003b	0f 5a d2	 cvtps2pd xmm2, xmm2
  0003e	66 0f 2f d1	 comisd	 xmm2, xmm1
  00042	77 14		 ja	 SHORT $LN5@SetCurBull
  00044	8d 45 fc	 lea	 eax, DWORD PTR _value$551762[ebp]
  00047	50		 push	 eax
  00048	8d 8f ac 16 00
	00		 lea	 ecx, DWORD PTR [edi+5804]
  0004e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00053	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$551762[ebp]
$LN5@SetCurBull:
  00058	0f 57 c9	 xorps	 xmm1, xmm1
  0005b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0005e	66 0f 2f c8	 comisd	 xmm1, xmm0
  00062	76 05		 jbe	 SHORT $LN8@SetCurBull
  00064	0f 57 c0	 xorps	 xmm0, xmm0
  00067	eb 39		 jmp	 SHORT $LN7@SetCurBull
$LN8@SetCurBull:
  00069	8d 45 fc	 lea	 eax, DWORD PTR _value$551766[ebp]
  0006c	50		 push	 eax
  0006d	8d 8f ac 16 00
	00		 lea	 ecx, DWORD PTR [edi+5804]
  00073	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00078	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fCurBullet$[ebp]
  0007d	f3 0f 10 55 fc	 movss	 xmm2, DWORD PTR _value$551766[ebp]
  00082	0f 5a c8	 cvtps2pd xmm1, xmm0
  00085	0f 5a d2	 cvtps2pd xmm2, xmm2
  00088	66 0f 2f d1	 comisd	 xmm2, xmm1
  0008c	77 14		 ja	 SHORT $LN7@SetCurBull
  0008e	8d 45 08	 lea	 eax, DWORD PTR _value$551770[ebp]
  00091	50		 push	 eax
  00092	8d 8f ac 16 00
	00		 lea	 ecx, DWORD PTR [edi+5804]
  00098	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  0009d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _value$551770[ebp]
$LN7@SetCurBull:

; 372  : 
; 373  : 	m_fCurExtraGauge = fCurBullet;

  000a2	8d 45 08	 lea	 eax, DWORD PTR _value$551774[ebp]
  000a5	50		 push	 eax
  000a6	8d 8f dc 16 00
	00		 lea	 ecx, DWORD PTR [edi+5852]
  000ac	f3 0f 11 45 08	 movss	 DWORD PTR _value$551774[ebp], xmm0
  000b1	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool
  000b6	5e		 pop	 esi
$LN18@SetCurBull:
  000b7	5f		 pop	 edi

; 374  : }

  000b8	c9		 leave
  000b9	c2 04 00	 ret	 4
?SetCurBullet@ioJackItem@@UAEXH@Z ENDP			; ioJackItem::SetCurBullet
_TEXT	ENDS
PUBLIC	?Init@ioJackItem@@IAEXXZ			; ioJackItem::Init
; Function compile flags: /Ogsp
;	COMDAT ?Init@ioJackItem@@IAEXXZ
_TEXT	SEGMENT
_value$551780 = -4					; size = 4
?Init@ioJackItem@@IAEXXZ PROC				; ioJackItem::Init, COMDAT
; _this$ = ecx

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 380  : 	m_ChargeState				= CS_NONE;
; 381  : 
; 382  : 	m_dwAttackStartTime			= 0;
; 383  : 	m_nCurCombo					= 0;
; 384  : 	m_iCurAirJump				= 0;
; 385  : 
; 386  : 	m_fAirJumpPowerRate			= 0.0f;

  00004	0f 57 c0	 xorps	 xmm0, xmm0
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	33 ff		 xor	 edi, edi

; 387  : 	m_fCurExtraGauge = 0.0f;

  0000d	8d 45 fc	 lea	 eax, DWORD PTR _value$551780[ebp]
  00010	50		 push	 eax
  00011	8d 8e dc 16 00
	00		 lea	 ecx, DWORD PTR [esi+5852]
  00017	89 be b8 19 00
	00		 mov	 DWORD PTR [esi+6584], edi
  0001d	89 be bc 19 00
	00		 mov	 DWORD PTR [esi+6588], edi
  00023	89 be c0 19 00
	00		 mov	 DWORD PTR [esi+6592], edi
  00029	89 be 58 0f 00
	00		 mov	 DWORD PTR [esi+3928], edi
  0002f	f3 0f 11 86 48
	0f 00 00	 movss	 DWORD PTR [esi+3912], xmm0
  00037	f3 0f 11 45 fc	 movss	 DWORD PTR _value$551780[ebp], xmm0
  0003c	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 388  : 	m_dwMotionEndTime = 0;

  00041	89 be c4 19 00
	00		 mov	 DWORD PTR [esi+6596], edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 389  : }

  00049	c9		 leave
  0004a	c3		 ret	 0
?Init@ioJackItem@@IAEXXZ ENDP				; ioJackItem::Init
_TEXT	ENDS
PUBLIC	?OnCharging@ioJackItem@@IAEXPAVioBaseChar@@@Z	; ioJackItem::OnCharging
EXTRN	?IsAttackKeyDown@ioBaseChar@@QBE_NXZ:PROC	; ioBaseChar::IsAttackKeyDown
; Function compile flags: /Ogsp
;	COMDAT ?OnCharging@ioJackItem@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_value$551791 = 8					; size = 4
_value$551794 = 8					; size = 4
_pOwner$ = 8						; size = 4
?OnCharging@ioJackItem@@IAEXPAVioBaseChar@@@Z PROC	; ioJackItem::OnCharging, COMDAT
; _this$ = ecx

; 392  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 393  : 	if( !pOwner || !pOwner->IsNeedProcess() )	

  00005	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	74 7d		 je	 SHORT $LN4@OnCharging
  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	8b cf		 mov	 ecx, edi
  00012	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  00018	84 c0		 test	 al, al
  0001a	74 6f		 je	 SHORT $LN4@OnCharging

; 394  : 		return;
; 395  : 
; 396  : 	if( m_fCurExtraGauge >= m_fNeedGauge && pOwner->IsAttackKeyDown() )

  0001c	8d 45 08	 lea	 eax, DWORD PTR _value$551791[ebp]
  0001f	50		 push	 eax
  00020	8d 8e dc 16 00
	00		 lea	 ecx, DWORD PTR [esi+5852]
  00026	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  0002b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _value$551791[ebp]
  00030	f3 0f 10 8e 54
	19 00 00	 movss	 xmm1, DWORD PTR [esi+6484]
  00038	0f 5a c0	 cvtps2pd xmm0, xmm0
  0003b	0f 5a c9	 cvtps2pd xmm1, xmm1
  0003e	66 0f 2f c1	 comisd	 xmm0, xmm1
  00042	72 3f		 jb	 SHORT $LN3@OnCharging
  00044	8b cf		 mov	 ecx, edi
  00046	e8 00 00 00 00	 call	 ?IsAttackKeyDown@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsAttackKeyDown
  0004b	84 c0		 test	 al, al
  0004d	74 34		 je	 SHORT $LN3@OnCharging

; 397  : 	{
; 398  : 		if( m_dwAttackStartTime + m_dwChargeTime <= FRAMEGETTIME() )

  0004f	8d 45 08	 lea	 eax, DWORD PTR _value$551794[ebp]
  00052	50		 push	 eax
  00053	8d 8e b0 18 00
	00		 lea	 ecx, DWORD PTR [esi+6320]
  00059	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00064	8b c8		 mov	 ecx, eax
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0006c	8b 8e bc 19 00
	00		 mov	 ecx, DWORD PTR [esi+6588]
  00072	03 4d 08	 add	 ecx, DWORD PTR _value$551794[ebp]
  00075	3b c8		 cmp	 ecx, eax
  00077	77 12		 ja	 SHORT $LN4@OnCharging

; 399  : 			ChangeToChargeAttack( pOwner );

  00079	57		 push	 edi
  0007a	8b ce		 mov	 ecx, esi
  0007c	e8 00 00 00 00	 call	 ?ChangeToChargeAttack@ioJackItem@@IAEXPAVioBaseChar@@@Z ; ioJackItem::ChangeToChargeAttack

; 400  : 	}
; 401  : 	else

  00081	eb 08		 jmp	 SHORT $LN4@OnCharging
$LN3@OnCharging:

; 402  : 		ChangeToAttackFire( pOwner );

  00083	57		 push	 edi
  00084	8b ce		 mov	 ecx, esi
  00086	e8 00 00 00 00	 call	 ?ChangeToAttackFire@ioJackItem@@IAEXPAVioBaseChar@@@Z ; ioJackItem::ChangeToAttackFire
$LN4@OnCharging:
  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi

; 403  : }

  0008d	5d		 pop	 ebp
  0008e	c2 04 00	 ret	 4
?OnCharging@ioJackItem@@IAEXPAVioBaseChar@@@Z ENDP	; ioJackItem::OnCharging
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	??4?$CEncrypt@M@@QAE_NAAV0@@Z			; CEncrypt<float>::operator=
;	COMDAT __real@00000000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??4?$CEncrypt@M@@QAE_NAAV0@@Z
_TEXT	SEGMENT
_value$551804 = -4					; size = 4
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@M@@QAE_NAAV0@@Z PROC			; CEncrypt<float>::operator=, COMDAT
; _this$ = ecx

; 3314 : 	 {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 3315 : 		 type value = inValue;

  00005	8d 45 fc	 lea	 eax, DWORD PTR _value$551804[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _inValue$[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00013	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$551804[ebp]

; 3316 : 		 EncryptValueToPool((char*)&value);

  00018	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0001b	50		 push	 eax
  0001c	8b ce		 mov	 ecx, esi
  0001e	f3 0f 11 45 08	 movss	 DWORD PTR _value$[ebp], xmm0
  00023	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 3317 : #ifdef _NOTUSE
; 3318 : 		 m_value = inValue;
; 3319 : 		 Debug();
; 3320 : #endif
; 3321 : 		 return value;

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _value$[ebp]
  0002d	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00034	9f		 lahf
  00035	5e		 pop	 esi
  00036	f6 c4 44	 test	 ah, 68			; 00000044H
  00039	7b 04		 jnp	 SHORT $LN3@operator@3
  0003b	b0 01		 mov	 al, 1
  0003d	eb 02		 jmp	 SHORT $LN4@operator@3
$LN3@operator@3:
  0003f	32 c0		 xor	 al, al
$LN4@operator@3:

; 3322 : 	 }

  00041	c9		 leave
  00042	c2 04 00	 ret	 4
??4?$CEncrypt@M@@QAE_NAAV0@@Z ENDP			; CEncrypt<float>::operator=
_TEXT	ENDS
PUBLIC	??D?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEAAMXZ ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??D?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEAAMXZ
_TEXT	SEGMENT
??D?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEAAMXZ PROC ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator*, COMDAT
; _this$ = ecx

; 360  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 361  : 		}

  00005	c3		 ret	 0
??D?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEAAMXZ ENDP ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator++, COMDAT
; _this$ = ecx

; 375  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 376  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 377  : 		++*this;

  0000a	8b 12		 mov	 edx, DWORD PTR [edx]
  0000c	89 11		 mov	 DWORD PTR [ecx], edx

; 378  : 		return (_Tmp);
; 379  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator++
_TEXT	ENDS
PUBLIC	??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ; std::_List_val<float,std::allocator<float> >::_List_val<float,std::allocator<float> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z
_TEXT	SEGMENT
$T551885 = -16						; size = 12
$T551862 = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z PROC ; std::_List_val<float,std::allocator<float> >::_List_val<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 493  : 		{	// construct base, and allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 494  : 		this->_Mysize = 0;

  00009	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 495  : 		this->_Myhead = this->_Alnod.allocate(1);

  0000d	6a 0c		 push	 12			; 0000000cH
  0000f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00014	59		 pop	 ecx
  00015	85 c0		 test	 eax, eax
  00017	74 10		 je	 SHORT $LN13@List_val
  00019	89 06		 mov	 DWORD PTR [esi], eax

; 496  : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

  0001b	89 00		 mov	 DWORD PTR [eax], eax

; 497  : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

  0001d	8b 06		 mov	 eax, DWORD PTR [esi]
  0001f	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 498  : 		}

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	c9		 leave
  00026	c2 04 00	 ret	 4

; 495  : 		this->_Myhead = this->_Alnod.allocate(1);

$LN13@List_val:
  00029	83 65 fc 00	 and	 DWORD PTR $T551862[ebp], 0
  0002d	8d 45 fc	 lea	 eax, DWORD PTR $T551862[ebp]
  00030	50		 push	 eax
  00031	8d 4d f0	 lea	 ecx, DWORD PTR $T551885[ebp]
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  0003a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003f	8d 45 f0	 lea	 eax, DWORD PTR $T551885[ebp]
  00042	50		 push	 eax
  00043	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T551885[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN29@List_val:
$LN28@List_val:
  0004f	cc		 int	 3
??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ENDP ; std::_List_val<float,std::allocator<float> >::_List_val<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	??0?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::_List_iterator<std::_List_val<float,std::allocator<float> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::_List_iterator<std::_List_val<float,std::allocator<float> > >, COMDAT
; _this$ = ecx

; 342  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 343  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::_List_iterator<std::_List_val<float,std::allocator<float> > >
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Grow_to
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 0f	 mov	 edx, 268435455		; 0fffffffH
  0000d	c1 f8 04	 sar	 eax, 4
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00023	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Grow_to
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@AAV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@AAV2@@Z ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@AAV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@AAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@AAV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@AAV2@@Z PROC ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  0000c	e8 00 00 00 00	 call	 ??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z ; std::allocator<ioHashString>::construct<ioHashString &>

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@AAV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@AAV2@@Z ENDP ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString &>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@U_Node@?$_List_nod@MV?$allocator@M@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@0@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z ; std::_Dest_val<std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>,std::_List_nod<float,std::allocator<float> >::_Node>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@U_Node@?$_List_nod@MV?$allocator@M@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@0@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@U_Node@?$_List_nod@MV?$allocator@M@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@0@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z PROC ; std::_Dest_val<std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>,std::_List_nod<float,std::allocator<float> >::_Node>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@U_Node@?$_List_nod@MV?$allocator@M@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@0@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z ENDP ; std::_Dest_val<std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>,std::_List_nod<float,std::allocator<float> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN9@Cons_val
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN9@Cons_val:
  00013	5f		 pop	 edi

; 281  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@V3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@$$QAV2@@Z ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@V3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@$$QAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@V3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@$$QAV2@@Z PROC ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  0000c	e8 00 00 00 00	 call	 ?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z ; std::allocator<ioHashString>::construct

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@V3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@$$QAV2@@Z ENDP ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z ; std::allocator<WeaponInfo>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z PROC ; std::allocator<WeaponInfo>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z ENDP ; std::allocator<WeaponInfo>::construct
_TEXT	ENDS
PUBLIC	??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Buy
; Function compile flags: /Ogsp
;	COMDAT ?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy
$LN4@Buy:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff ff ff ff
	0f		 cmp	 edi, 268435455		; 0fffffffH
  00022	76 0b		 jbe	 SHORT $LN2@Buy

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy:
$LN2@Buy:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ; std::_Allocate<ioHashString>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	c1 e7 04	 shl	 edi, 4
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy:
?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Buy
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator!=
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy
; Function compile flags: /Ogsp
;	COMDAT ?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy@2

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy@2
$LN4@Buy@2:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff 66 66 66
	06		 cmp	 edi, 107374182		; 06666666H
  00022	76 0b		 jbe	 SHORT $LN2@Buy@2

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy@2:
$LN2@Buy@2:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ; std::_Allocate<WeaponInfo>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	6b ff 28	 imul	 edi, 40			; 00000028H
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy@2:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy@2:
?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy
; Function compile flags: /Ogsp
;	COMDAT ?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy@3

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy@3
$LN4@Buy@3:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff 55 55 55
	15		 cmp	 edi, 357913941		; 15555555H
  00022	76 0b		 jbe	 SHORT $LN2@Buy@3

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy@3:
$LN2@Buy@3:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ; std::_Allocate<ForceInfo>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	6b ff 0c	 imul	 edi, 12			; 0000000cH
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy@3:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy@3:
?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator!=
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z ; std::_Dest_val<std::allocator<ForceInfo>,ForceInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z PROC ; std::_Dest_val<std::allocator<ForceInfo>,ForceInfo>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z ENDP ; std::_Dest_val<std::allocator<ForceInfo>,ForceInfo>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@@Z ; std::allocator<ioHashString>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@@Z PROC ; std::allocator<ioHashString>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 214  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?destroy@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@@Z ENDP ; std::allocator<ioHashString>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z ; std::allocator<WeaponInfo>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z PROC ; std::allocator<WeaponInfo>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	83 c1 08	 add	 ecx, 8
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 214  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z ENDP ; std::allocator<WeaponInfo>::destroy
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@ABV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@ABV2@@Z ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@ABV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@ABV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@ABV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@ABV2@@Z PROC ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@ABV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@ABV2@@Z ENDP ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString const &>
_TEXT	ENDS
PUBLIC	?CheckNormalAttack@ioJackItem@@UAEXPAVioBaseChar@@@Z ; ioJackItem::CheckNormalAttack
EXTRN	?CheckNormalAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckNormalAttack
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iojackitem.cpp
;	COMDAT ?CheckNormalAttack@ioJackItem@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?CheckNormalAttack@ioJackItem@@UAEXPAVioBaseChar@@@Z PROC ; ioJackItem::CheckNormalAttack, COMDAT
; _this$ = ecx

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f1		 mov	 esi, ecx

; 111  : 	DWORD dwCurTime = FRAMEGETTIME();

  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0000d	8b c8		 mov	 ecx, eax
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 112  : 
; 113  : 	switch( m_ChargeState )

  00015	8b 8e b8 19 00
	00		 mov	 ecx, DWORD PTR [esi+6584]
  0001b	49		 dec	 ecx
  0001c	74 78		 je	 SHORT $LN8@CheckNorma
  0001e	49		 dec	 ecx
  0001f	74 40		 je	 SHORT $LN7@CheckNorma
  00021	49		 dec	 ecx
  00022	75 7c		 jne	 SHORT $LN9@CheckNorma

; 130  : 	case CS_CHARGE_ATTACK:
; 131  : 		{
; 132  : 			if( m_dwMotionEndTime < dwCurTime )

  00024	39 86 c4 19 00
	00		 cmp	 DWORD PTR [esi+6596], eax
  0002a	73 0c		 jae	 SHORT $LN3@CheckNorma

; 133  : 			{
; 134  : 				pOwner->SetState( CS_DELAY, false );

  0002c	51		 push	 ecx
  0002d	51		 push	 ecx
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  00031	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState

; 135  : 				return;

  00036	eb 68		 jmp	 SHORT $LN9@CheckNorma
$LN3@CheckNorma:

; 136  : 			}
; 137  : 
; 138  : 			if( pOwner->IsNeedProcess() )

  00038	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  0003b	8b 07		 mov	 eax, DWORD PTR [edi]
  0003d	8b cf		 mov	 ecx, edi
  0003f	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  00045	84 c0		 test	 al, al
  00047	74 57		 je	 SHORT $LN9@CheckNorma

; 139  : 			{
; 140  : 				CheckCancelReserve( pOwner );

  00049	8b 06		 mov	 eax, DWORD PTR [esi]
  0004b	57		 push	 edi
  0004c	8b ce		 mov	 ecx, esi
  0004e	ff 90 40 02 00
	00		 call	 DWORD PTR [eax+576]

; 141  : 				if( ProcessCancel(pOwner) )

  00054	8b 06		 mov	 eax, DWORD PTR [esi]
  00056	57		 push	 edi
  00057	8b ce		 mov	 ecx, esi
  00059	ff 90 48 02 00
	00		 call	 DWORD PTR [eax+584]

; 142  : 					return;				
; 143  : 			}
; 144  : 		}
; 145  : 		break;

  0005f	eb 3f		 jmp	 SHORT $LN9@CheckNorma
$LN7@CheckNorma:

; 117  : 		break;
; 118  : 	case CS_ATTACK_FIRE:
; 119  : 		{
; 120  : 			if( pOwner->IsNeedProcess() )

  00061	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00064	8b 07		 mov	 eax, DWORD PTR [edi]
  00066	8b cf		 mov	 ecx, edi
  00068	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  0006e	84 c0		 test	 al, al
  00070	74 1a		 je	 SHORT $LN5@CheckNorma

; 121  : 			{
; 122  : 				CheckCancelReserve( pOwner );

  00072	8b 06		 mov	 eax, DWORD PTR [esi]
  00074	57		 push	 edi
  00075	8b ce		 mov	 ecx, esi
  00077	ff 90 40 02 00
	00		 call	 DWORD PTR [eax+576]

; 123  : 				if( ProcessCancel(pOwner) )

  0007d	8b 06		 mov	 eax, DWORD PTR [esi]
  0007f	57		 push	 edi
  00080	8b ce		 mov	 ecx, esi
  00082	ff 90 48 02 00
	00		 call	 DWORD PTR [eax+584]
  00088	84 c0		 test	 al, al
  0008a	75 14		 jne	 SHORT $LN9@CheckNorma
$LN5@CheckNorma:

; 124  : 					return;				
; 125  : 			}
; 126  : 
; 127  : 			ioWeaponItem::CheckNormalAttack( pOwner );

  0008c	57		 push	 edi
  0008d	8b ce		 mov	 ecx, esi
  0008f	e8 00 00 00 00	 call	 ?CheckNormalAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z ; ioAttackableItem::CheckNormalAttack

; 128  : 		}
; 129  : 		break;

  00094	eb 0a		 jmp	 SHORT $LN9@CheckNorma
$LN8@CheckNorma:

; 114  : 	{
; 115  : 	case CS_CHARGING:
; 116  : 		OnCharging( pOwner );

  00096	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00099	8b ce		 mov	 ecx, esi
  0009b	e8 00 00 00 00	 call	 ?OnCharging@ioJackItem@@IAEXPAVioBaseChar@@@Z ; ioJackItem::OnCharging
$LN9@CheckNorma:
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi

; 146  : 	}
; 147  : }

  000a2	5d		 pop	 ebp
  000a3	c2 04 00	 ret	 4
?CheckNormalAttack@ioJackItem@@UAEXPAVioBaseChar@@@Z ENDP ; ioJackItem::CheckNormalAttack
_TEXT	ENDS
PUBLIC	?UpdateExtraData@ioJackItem@@UAEXPAVioBaseChar@@@Z ; ioJackItem::UpdateExtraData
EXTRN	?IsSystemState@ioBaseChar@@QAE_NXZ:PROC		; ioBaseChar::IsSystemState
EXTRN	__imp_?GetSecPerFrame@ioFrameTimer@@QBEMXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?UpdateExtraData@ioJackItem@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_value$552254 = -8					; size = 4
_fTimePerSec$ = -8					; size = 4
_value$552245 = -4					; size = 4
_value$552233 = -4					; size = 4
_value$552262 = 8					; size = 4
_value$552249 = 8					; size = 4
_value$552241 = 8					; size = 4
_pOwner$ = 8						; size = 4
?UpdateExtraData@ioJackItem@@UAEXPAVioBaseChar@@@Z PROC	; ioJackItem::UpdateExtraData, COMDAT
; _this$ = ecx

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 219  : 	if( !pOwner ) 

  00007	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	85 ff		 test	 edi, edi
  0000e	0f 84 f6 00 00
	00		 je	 $LN1@UpdateExtr

; 220  : 		return;
; 221  : 
; 222  : 	float fTimePerSec = g_FrameTimer.GetSecPerFrame();

  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0001a	8b c8		 mov	 ecx, eax
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSecPerFrame@ioFrameTimer@@QBEMXZ
  00022	d9 5d f8	 fstp	 DWORD PTR _fTimePerSec$[ebp]

; 223  : 
; 224  : 	if( pOwner->IsSystemState() )

  00025	8b cf		 mov	 ecx, edi
  00027	e8 00 00 00 00	 call	 ?IsSystemState@ioBaseChar@@QAE_NXZ ; ioBaseChar::IsSystemState
  0002c	84 c0		 test	 al, al
  0002e	0f 85 d6 00 00
	00		 jne	 $LN1@UpdateExtr

; 225  : 		return;
; 226  : 
; 227  : 	switch( pOwner->GetState() )

  00034	80 bf 10 03 00
	00 02		 cmp	 BYTE PTR [edi+784], 2
  0003b	0f 87 c9 00 00
	00		 ja	 $LN1@UpdateExtr

; 228  : 	{
; 229  : 	case CS_DELAY:
; 230  : 	case CS_DASH:
; 231  : 	case CS_RUN:
; 232  : 		if( m_fCurExtraGauge < m_fMaxExtraGauge )

  00041	53		 push	 ebx
  00042	8d 45 fc	 lea	 eax, DWORD PTR _value$552233[ebp]
  00045	8d 9e ac 16 00
	00		 lea	 ebx, DWORD PTR [esi+5804]
  0004b	50		 push	 eax
  0004c	8b cb		 mov	 ecx, ebx
  0004e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00053	8d 45 08	 lea	 eax, DWORD PTR _value$552241[ebp]
  00056	8d be dc 16 00
	00		 lea	 edi, DWORD PTR [esi+5852]
  0005c	50		 push	 eax
  0005d	8b cf		 mov	 ecx, edi
  0005f	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00064	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _value$552241[ebp]
  00069	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _value$552233[ebp]
  0006e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00071	0f 5a c9	 cvtps2pd xmm1, xmm1
  00074	66 0f 2f c8	 comisd	 xmm1, xmm0
  00078	0f 86 8b 00 00
	00		 jbe	 $LN31@UpdateExtr

; 233  : 		{
; 234  : 			float fGauge = m_fExtraGaugeBaseInc * fTimePerSec;

  0007e	8d 45 fc	 lea	 eax, DWORD PTR _value$552245[ebp]
  00081	50		 push	 eax
  00082	8d 8e 4c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5708]
  00088	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 235  : 
; 236  : 			m_fCurExtraGauge += fGauge;

  0008d	8d 45 08	 lea	 eax, DWORD PTR _value$552249[ebp]
  00090	50		 push	 eax
  00091	8b cf		 mov	 ecx, edi
  00093	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00098	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$552245[ebp]
  0009d	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _fTimePerSec$[ebp]
  000a2	0f 5a c0	 cvtps2pd xmm0, xmm0
  000a5	0f 5a c9	 cvtps2pd xmm1, xmm1
  000a8	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  000ac	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _value$552249[ebp]
  000b1	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000b5	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000b9	0f 5a c9	 cvtps2pd xmm1, xmm1
  000bc	8d 45 08	 lea	 eax, DWORD PTR _value$552249[ebp]
  000bf	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000c3	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000c7	50		 push	 eax
  000c8	8b cf		 mov	 ecx, edi
  000ca	f3 0f 11 45 08	 movss	 DWORD PTR _value$552249[ebp], xmm0
  000cf	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 237  : 			m_fCurExtraGauge = min( m_fCurExtraGauge, m_fMaxExtraGauge );

  000d4	8d 45 f8	 lea	 eax, DWORD PTR _value$552254[ebp]
  000d7	50		 push	 eax
  000d8	8b cb		 mov	 ecx, ebx
  000da	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  000df	8d 45 08	 lea	 eax, DWORD PTR _value$552262[ebp]
  000e2	50		 push	 eax
  000e3	8b cf		 mov	 ecx, edi
  000e5	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  000ea	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _value$552262[ebp]
  000ef	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _value$552254[ebp]
  000f4	0f 5a c0	 cvtps2pd xmm0, xmm0
  000f7	0f 5a c9	 cvtps2pd xmm1, xmm1
  000fa	66 0f 2f c8	 comisd	 xmm1, xmm0
  000fe	0f 47 df	 cmova	 ebx, edi
  00101	53		 push	 ebx
  00102	8b cf		 mov	 ecx, edi
  00104	e8 00 00 00 00	 call	 ??4?$CEncrypt@M@@QAE_NAAV0@@Z ; CEncrypt<float>::operator=
$LN31@UpdateExtr:
  00109	5b		 pop	 ebx
$LN1@UpdateExtr:
  0010a	5f		 pop	 edi
  0010b	5e		 pop	 esi

; 238  : 		}
; 239  : 		return;
; 240  : 	}
; 241  : }

  0010c	c9		 leave
  0010d	c2 04 00	 ret	 4
?UpdateExtraData@ioJackItem@@UAEXPAVioBaseChar@@@Z ENDP	; ioJackItem::UpdateExtraData
_TEXT	ENDS
PUBLIC	??0?$list@MV?$allocator@M@std@@@std@@QAE@XZ	; std::list<float,std::allocator<float> >::list<float,std::allocator<float> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??0?$list@MV?$allocator@M@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T552273 = -4						; size = 4
$T552268 = -4						; size = 4
??0?$list@MV?$allocator@M@std@@@std@@QAE@XZ PROC	; std::list<float,std::allocator<float> >::list<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 607  : 		{	// construct empty list

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	51		 push	 ecx
  00006	89 65 fc	 mov	 DWORD PTR $T552268[ebp], esp
  00009	8b f1		 mov	 esi, ecx
  0000b	89 65 fc	 mov	 DWORD PTR $T552273[ebp], esp
  0000e	e8 00 00 00 00	 call	 ??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ; std::_List_val<float,std::allocator<float> >::_List_val<float,std::allocator<float> >

; 608  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c9		 leave
  00017	c3		 ret	 0
??0?$list@MV?$allocator@M@std@@@std@@QAE@XZ ENDP	; std::list<float,std::allocator<float> >::list<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	?begin@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ ; std::list<float,std::allocator<float> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ PROC ; std::list<float,std::allocator<float> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Nextnode(this->_Myhead), this));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ ENDP ; std::list<float,std::allocator<float> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ ; std::list<float,std::allocator<float> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ PROC ; std::list<float,std::allocator<float> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Myhead, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ ENDP ; std::list<float,std::allocator<float> >::end
_TEXT	ENDS
PUBLIC	?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ	; std::list<float,std::allocator<float> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ PROC	; std::list<float,std::allocator<float> >::clear, COMDAT
; _this$ = ecx

; 1096 : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1097 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1098 : 		this->_Orphan_ptr(*this, 0);
; 1099 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1100 : 
; 1101 : 		_Nodeptr _Pnext;
; 1102 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead);

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1103 : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

  00007	89 00		 mov	 DWORD PTR [eax], eax

; 1104 : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

  00009	8b 06		 mov	 eax, DWORD PTR [esi]
  0000b	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1105 : 		this->_Mysize = 0;

  0000e	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1106 : 
; 1107 : 		for (; _Pnode != this->_Myhead; _Pnode = _Pnext)

  00012	3b 0e		 cmp	 ecx, DWORD PTR [esi]
  00014	74 11		 je	 SHORT $LN1@clear
  00016	57		 push	 edi
$LL3@clear:

; 1108 : 			{	// delete an element
; 1109 : 			_Pnext = this->_Nextnode(_Pnode);

  00017	8b 39		 mov	 edi, DWORD PTR [ecx]

; 1110 : 
; 1111 : 			_Dest_val(this->_Alnod, _Pnode);
; 1112 : 			this->_Alnod.deallocate(_Pnode, 1);

  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	59		 pop	 ecx
  00020	8b cf		 mov	 ecx, edi
  00022	3b 3e		 cmp	 edi, DWORD PTR [esi]
  00024	75 f1		 jne	 SHORT $LL3@clear
  00026	5f		 pop	 edi
$LN1@clear:
  00027	5e		 pop	 esi

; 1113 : 			}
; 1114 : 		}

  00028	c3		 ret	 0
?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ ENDP	; std::list<float,std::allocator<float> >::clear
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	eb 19		 jmp	 SHORT $LN35@Uninit_cop
$LL14@Uninit_cop:

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  00005	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00008	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000b	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>
  00013	83 45 10 0c	 add	 DWORD PTR __Dest$[ebp], 12 ; 0000000cH
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	83 45 08 0c	 add	 DWORD PTR __First$[ebp], 12 ; 0000000cH
$LN35@Uninit_cop:

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00021	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00024	75 df		 jne	 SHORT $LL14@Uninit_cop

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)
; 379  : 		_Dest_val(_Al, _Next);
; 380  : 	_RERAISE;
; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00026	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo const &>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ForceInfo> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@VioHashString@@@std@@VioHashString@@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@@Z ; std::_Dest_val<std::allocator<ioHashString>,ioHashString>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@VioHashString@@@std@@VioHashString@@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@VioHashString@@@std@@VioHashString@@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@@Z PROC ; std::_Dest_val<std::allocator<ioHashString>,ioHashString>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]

; 288  : 	}

  00006	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Dest_val@V?$allocator@VioHashString@@@std@@VioHashString@@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@@Z ENDP ; std::_Dest_val<std::allocator<ioHashString>,ioHashString>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z ; std::_Dest_val<std::allocator<WeaponInfo>,WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z PROC ; std::_Dest_val<std::allocator<WeaponInfo>,WeaponInfo>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	83 c1 08	 add	 ecx, 8

; 288  : 	}

  00009	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  0000a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z ENDP ; std::_Dest_val<std::allocator<WeaponInfo>,WeaponInfo>
_TEXT	ENDS
PUBLIC	?_Tidy@?$list@MV?$allocator@M@std@@@std@@QAEXXZ	; std::list<float,std::allocator<float> >::_Tidy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?_Tidy@?$list@MV?$allocator@M@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@MV?$allocator@M@std@@@std@@QAEXXZ PROC	; std::list<float,std::allocator<float> >::_Tidy, COMDAT
; _this$ = ecx

; 1497 : 		clear();

  00000	e9 00 00 00 00	 jmp	 ?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ ; std::list<float,std::allocator<float> >::clear
?_Tidy@?$list@MV?$allocator@M@std@@@std@@QAEXXZ ENDP	; std::list<float,std::allocator<float> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$552508 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$552508[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$3
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 373  : 
; 374  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

$LL14@Uninit_cop@2:
  00016	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00019	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001c	74 34		 je	 SHORT $LN4@Uninit_cop@2

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  0001e	50		 push	 eax
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	e8 00 00 00 00	 call	 ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
  00027	83 45 10 28	 add	 DWORD PTR __Dest$[ebp], 40 ; 00000028H
  0002b	83 45 08 28	 add	 DWORD PTR __First$[ebp], 40 ; 00000028H
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
  00031	eb e3		 jmp	 SHORT $LL14@Uninit_cop@2
__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00033	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00036	eb 0c		 jmp	 SHORT $LN48@Uninit_cop@2
$LL3@Uninit_cop@2:

; 379  : 		_Dest_val(_Al, _Next);

  00038	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00041	83 c6 28	 add	 esi, 40			; 00000028H
$LN48@Uninit_cop@2:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00044	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00047	75 ef		 jne	 SHORT $LL3@Uninit_cop@2

; 380  : 	_RERAISE;

  00049	6a 00		 push	 0
  0004b	6a 00		 push	 0
  0004d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN49@Uninit_cop@2:
$LN4@Uninit_cop@2:

; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00052	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00055	e8 00 00 00 00	 call	 __EH_epilog3
  0005a	c3		 ret	 0
$LN47@Uninit_cop@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
PUBLIC	??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioHashString *,ioHashString *,std::allocator<ioHashString>,ioHashString>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ioHashString *,ioHashString *,std::allocator<ioHashString>,ioHashString>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 428  : 
; 429  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00016	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LL6@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	74 33		 je	 SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  0001e	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00021	56		 push	 esi
  00022	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00025	e8 00 00 00 00	 call	 ?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z ; std::allocator<ioHashString>::construct
  0002a	83 45 10 10	 add	 DWORD PTR __Dest$[ebp], 16 ; 00000010H
  0002e	83 c6 10	 add	 esi, 16			; 00000010H
  00031	eb e6		 jmp	 SHORT $LL6@Uninit_mov
__catch$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00033	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00036	eb 0b		 jmp	 SHORT $LN33@Uninit_mov
$LL3@Uninit_mov:

; 434  : 		_Dest_val(_Al, _Next);

  00038	8b ce		 mov	 ecx, esi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00040	83 c6 10	 add	 esi, 16			; 00000010H
$LN33@Uninit_mov:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00043	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00046	75 f0		 jne	 SHORT $LL3@Uninit_mov

; 435  : 	_RERAISE;

  00048	6a 00		 push	 0
  0004a	6a 00		 push	 0
  0004c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN34@Uninit_mov:
$LN4@Uninit_mov:

; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00051	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 438  : 	}

  00054	e8 00 00 00 00	 call	 __EH_epilog3
  00059	c3		 ret	 0
$LN32@Uninit_mov:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ioHashString *,ioHashString *,std::allocator<ioHashString>,ioHashString>
PUBLIC	??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z ; std::_Destroy_range<std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ForceInfo> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ioHashString> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN17@Destroy_ra
$LL3@Destroy_ra:

; 97   : 		_Dest_val(_Al, _First);

  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 10	 add	 esi, 16			; 00000010H
$LN17@Destroy_ra:

; 96   : 	for (; _First != _Last; ++_First)

  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL3@Destroy_ra
  00019	5e		 pop	 esi

; 98   : 	}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<WeaponInfo> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0c		 jmp	 SHORT $LN20@Destroy_ra@2
$LL3@Destroy_ra@2:

; 97   : 		_Dest_val(_Al, _First);

  00009	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00012	83 c6 28	 add	 esi, 40			; 00000028H
$LN20@Destroy_ra@2:

; 96   : 	for (; _First != _Last; ++_First)

  00015	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00018	75 ef		 jne	 SHORT $LL3@Destroy_ra@2
  0001a	5e		 pop	 esi

; 98   : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 373  : 
; 374  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

$LL14@Uninit_cop@3:
  00016	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00019	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001c	74 33		 je	 SHORT $LN4@Uninit_cop@3

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  0001e	50		 push	 eax
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	e8 00 00 00 00	 call	 ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
  00027	83 45 10 10	 add	 DWORD PTR __Dest$[ebp], 16 ; 00000010H
  0002b	83 45 08 10	 add	 DWORD PTR __First$[ebp], 16 ; 00000010H
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
  00031	eb e3		 jmp	 SHORT $LL14@Uninit_cop@3
__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00033	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00036	eb 0b		 jmp	 SHORT $LN45@Uninit_cop@3
$LL3@Uninit_cop@3:

; 379  : 		_Dest_val(_Al, _Next);

  00038	8b ce		 mov	 ecx, esi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00040	83 c6 10	 add	 esi, 16			; 00000010H
$LN45@Uninit_cop@3:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00043	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00046	75 f0		 jne	 SHORT $LL3@Uninit_cop@3

; 380  : 	_RERAISE;

  00048	6a 00		 push	 0
  0004a	6a 00		 push	 0
  0004c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN46@Uninit_cop@3:
$LN4@Uninit_cop@3:

; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00051	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00054	e8 00 00 00 00	 call	 __EH_epilog3
  00059	c3		 ret	 0
$LN44@Uninit_cop@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
PUBLIC	??1?$list@MV?$allocator@M@std@@@std@@QAE@XZ	; std::list<float,std::allocator<float> >::~list<float,std::allocator<float> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??1?$list@MV?$allocator@M@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@MV?$allocator@M@std@@@std@@QAE@XZ PROC	; std::list<float,std::allocator<float> >::~list<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 769  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 770  : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ ; std::list<float,std::allocator<float> >::clear

; 771  : 		}

  00008	ff 36		 push	 DWORD PTR [esi]
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	59		 pop	 ecx
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??1?$list@MV?$allocator@M@std@@@std@@QAE@XZ ENDP	; std::list<float,std::allocator<float> >::~list<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$552891 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$552891[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > > >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$552901 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$552901[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z
_TEXT	SEGMENT
__Cat$552908 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z PROC ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$552908[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioHashString *,ioHashString *,std::allocator<ioHashString>,ioHashString>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z ENDP ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@@Z ; std::_Destroy_range<std::allocator<ioHashString> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ioHashString> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN21@Destroy_ra@3
$LL7@Destroy_ra@3:
  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 10	 add	 esi, 16			; 00000010H
$LN21@Destroy_ra@3:
  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL7@Destroy_ra@3
  00019	5e		 pop	 esi

; 89   : 	}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z PROC ; std::_Destroy_range<std::allocator<WeaponInfo> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0c		 jmp	 SHORT $LN24@Destroy_ra@4
$LL7@Destroy_ra@4:
  00009	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00012	83 c6 28	 add	 esi, 40			; 00000028H
$LN24@Destroy_ra@4:
  00015	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00018	75 ef		 jne	 SHORT $LL7@Destroy_ra@4
  0001a	5e		 pop	 esi

; 89   : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@@Z
_TEXT	SEGMENT
__Cat$553096 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$553096[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	_pOwner$GSCopy$
PUBLIC	?ProcessCancel@ioJackItem@@UAE_NPAVioBaseChar@@@Z ; ioJackItem::ProcessCancel
EXTRN	?SetJumpState@ioBaseChar@@QAEX_N@Z:PROC		; ioBaseChar::SetJumpState
EXTRN	?IsBuffLimitJump@ioBaseChar@@QBE_NXZ:PROC	; ioBaseChar::IsBuffLimitJump
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$?ProcessCancel@ioJackItem@@UAE_NPAVioBaseChar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessCancel@ioJackItem@@UAE_NPAVioBaseChar@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ProcessCancel@ioJackItem@@UAE_NPAVioBaseChar@@@Z$2
__ehfuncinfo$?ProcessCancel@ioJackItem@@UAE_NPAVioBaseChar@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ProcessCancel@ioJackItem@@UAE_NPAVioBaseChar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iojackitem.cpp
xdata$x	ENDS
;	COMDAT ?ProcessCancel@ioJackItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
$T553143 = -80						; size = 16
tv1319 = -64						; size = 4
_vTimeList$ = -60					; size = 12
_pOwner$GSCopy$ = -48					; size = 4
_dwCurTime$ = -44					; size = 4
tv1187 = -40						; size = 4
$T553117 = -40						; size = 4
$T553119 = -40						; size = 4
_szEncEventType$553156 = -36				; size = 13
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
?ProcessCancel@ioJackItem@@UAE_NPAVioBaseChar@@@Z PROC	; ioJackItem::ProcessCancel, COMDAT
; _this$ = ecx

; 257  : {

  00000	6a 44		 push	 68			; 00000044H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?ProcessCancel@ioJackItem@@UAE_NPAVioBaseChar@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 75 08	 mov	 esi, DWORD PTR _pOwner$[ebp]
  0000f	8b f9		 mov	 edi, ecx

; 258  : 	if( m_szCurAni.IsEmpty() )

  00011	8d 9f 10 0f 00
	00		 lea	 ebx, DWORD PTR [edi+3856]
  00017	8b cb		 mov	 ecx, ebx

; 267  : 
; 268  : 	int iAniID = pGrp->GetAnimationIdx( m_szCurAni );

  00019	89 75 d0	 mov	 DWORD PTR _pOwner$GSCopy$[ebp], esi
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00022	84 c0		 test	 al, al
  00024	74 0a		 je	 SHORT $LN9@ProcessCan
$LN224@ProcessCan:

; 259  : 		return false;

  00026	32 c0		 xor	 al, al
$LN10@ProcessCan:

; 301  : 	}
; 302  : 
; 303  : 	return false;
; 304  : }

  00028	e8 00 00 00 00	 call	 __EH_epilog3_GS
  0002d	c2 04 00	 ret	 4
$LN9@ProcessCan:

; 260  : 
; 261  : 	if( !pOwner ) 

  00030	85 f6		 test	 esi, esi

; 262  : 		return false;

  00032	74 f2		 je	 SHORT $LN224@ProcessCan

; 263  : 
; 264  : 	ioEntityGroup *pGrp = pOwner->GetGroup();

  00034	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 265  : 	if( !pGrp ) 

  00037	85 f6		 test	 esi, esi

; 266  : 		return false;

  00039	74 eb		 je	 SHORT $LN224@ProcessCan

; 267  : 
; 268  : 	int iAniID = pGrp->GetAnimationIdx( m_szCurAni );

  0003b	53		 push	 ebx
  0003c	8b ce		 mov	 ecx, esi
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z

; 269  : 
; 270  : 	std::list<float> vTimeList;

  00044	51		 push	 ecx
  00045	89 65 d8	 mov	 DWORD PTR $T553119[ebp], esp
  00048	8d 4d c4	 lea	 ecx, DWORD PTR _vTimeList$[ebp]
  0004b	8b d8		 mov	 ebx, eax
  0004d	89 65 d8	 mov	 DWORD PTR $T553117[ebp], esp
  00050	e8 00 00 00 00	 call	 ??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ; std::_List_val<float,std::allocator<float> >::_List_val<float,std::allocator<float> >
  00055	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00059	6a 03		 push	 3

; 271  : 	pGrp->GetAnimationEventTimeList_e( iAniID, "input_jump_s", vTimeList );

  0005b	c7 45 dc 84 82
	9b 9f		 mov	 DWORD PTR _szEncEventType$553156[ebp], -1617198460 ; 9f9b8284H
  00062	c7 45 e0 99 b3
	81 9f		 mov	 DWORD PTR _szEncEventType$553156[ebp+4], -1618889831 ; 9f81b399H
  00069	c7 45 e4 80 9c
	b4 99		 mov	 DWORD PTR _szEncEventType$553156[ebp+8], -1716216704 ; 99b49c80H
  00070	8d 45 dc	 lea	 eax, DWORD PTR _szEncEventType$553156[ebp]
  00073	c6 45 e8 00	 mov	 BYTE PTR _szEncEventType$553156[ebp+12], 0
  00077	59		 pop	 ecx
$LL124@ProcessCan:
  00078	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0007e	83 c0 04	 add	 eax, 4
  00081	49		 dec	 ecx
  00082	75 f4		 jne	 SHORT $LL124@ProcessCan
  00084	8d 45 dc	 lea	 eax, DWORD PTR _szEncEventType$553156[ebp]
  00087	50		 push	 eax
  00088	8d 4d b0	 lea	 ecx, DWORD PTR $T553143[ebp]
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  00091	8d 45 c4	 lea	 eax, DWORD PTR _vTimeList$[ebp]
  00094	50		 push	 eax
  00095	8d 45 b0	 lea	 eax, DWORD PTR $T553143[ebp]
  00098	50		 push	 eax
  00099	53		 push	 ebx
  0009a	8b ce		 mov	 ecx, esi
  0009c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventTimeList@ioEntityGroup@@QAEHHABVioHashString@@AAV?$list@MV?$allocator@M@std@@@std@@@Z
  000a6	8d 4d b0	 lea	 ecx, DWORD PTR $T553143[ebp]
  000a9	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 272  : 
; 273  : 	if( vTimeList.empty() )

  000b3	83 7d c8 00	 cmp	 DWORD PTR _vTimeList$[ebp+4], 0
  000b7	75 1a		 jne	 SHORT $LN6@ProcessCan
$LN2@ProcessCan:
  000b9	32 db		 xor	 bl, bl
$LN217@ProcessCan:

; 274  : 		return false;

  000bb	8d 4d c4	 lea	 ecx, DWORD PTR _vTimeList$[ebp]
  000be	e8 00 00 00 00	 call	 ?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ ; std::list<float,std::allocator<float> >::clear
  000c3	ff 75 c4	 push	 DWORD PTR _vTimeList$[ebp]
  000c6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000cb	59		 pop	 ecx
  000cc	8a c3		 mov	 al, bl
  000ce	e9 55 ff ff ff	 jmp	 $LN10@ProcessCan
$LN6@ProcessCan:

; 275  : 
; 276  : 	DWORD dwCurTime = FRAMEGETTIME();

  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  000d9	8b c8		 mov	 ecx, eax
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  000e1	89 45 d4	 mov	 DWORD PTR _dwCurTime$[ebp], eax

; 277  : 	std::list< float >::iterator iter = vTimeList.begin();

  000e4	8b 45 c4	 mov	 eax, DWORD PTR _vTimeList$[ebp]
  000e7	8b 30		 mov	 esi, DWORD PTR [eax]

; 278  : 	while( iter != vTimeList.end() )

  000e9	3b f0		 cmp	 esi, eax
  000eb	74 cc		 je	 SHORT $LN2@ProcessCan
  000ed	f3 0f 10 87 20
	0f 00 00	 movss	 xmm0, DWORD PTR [edi+3872]
  000f5	8b 9f 08 0f 00
	00		 mov	 ebx, DWORD PTR [edi+3848]
  000fb	f3 0f 11 45 d8	 movss	 DWORD PTR tv1187[ebp], xmm0
$LL5@ProcessCan:

; 282  : 
; 283  : 		dwTime += m_dwInputCancelCheckTime;

  00100	d9 46 08	 fld	 DWORD PTR [esi+8]
  00103	e8 00 00 00 00	 call	 __ftol2
  00108	89 45 c0	 mov	 DWORD PTR tv1319[ebp], eax
  0010b	db 45 c0	 fild	 DWORD PTR tv1319[ebp]
  0010e	85 c0		 test	 eax, eax
  00110	79 06		 jns	 SHORT $LN223@ProcessCan
  00112	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN223@ProcessCan:

; 279  : 	{
; 280  : 		DWORD dwTime = (DWORD)*iter;
; 281  : 		dwTime *= m_fCurAniRate;

  00118	d8 4d d8	 fmul	 DWORD PTR tv1187[ebp]

; 282  : 
; 283  : 		dwTime += m_dwInputCancelCheckTime;

  0011b	e8 00 00 00 00	 call	 __ftol2
  00120	03 87 0c 0f 00
	00		 add	 eax, DWORD PTR [edi+3852]

; 284  : 		if( m_dwCancelCheckTime > 0 && COMPARE( dwTime, m_dwCancelCheckTime, dwCurTime ) )

  00126	85 db		 test	 ebx, ebx
  00128	74 09		 je	 SHORT $LN3@ProcessCan
  0012a	3b c3		 cmp	 eax, ebx
  0012c	72 05		 jb	 SHORT $LN3@ProcessCan
  0012e	3b 45 d4	 cmp	 eax, DWORD PTR _dwCurTime$[ebp]
  00131	72 11		 jb	 SHORT $LN212@ProcessCan
$LN3@ProcessCan:

; 291  : 				return true;
; 292  : 			}
; 293  : 
; 294  : 			return false;
; 295  : 		}
; 296  : 
; 297  : 		if( dwTime > dwCurTime )

  00133	3b 45 d4	 cmp	 eax, DWORD PTR _dwCurTime$[ebp]
  00136	77 81		 ja	 SHORT $LN2@ProcessCan

; 298  : 			return false;
; 299  : 
; 300  : 		iter++;

  00138	8b 36		 mov	 esi, DWORD PTR [esi]
  0013a	3b 75 c4	 cmp	 esi, DWORD PTR _vTimeList$[ebp]
  0013d	75 c1		 jne	 SHORT $LL5@ProcessCan

; 291  : 				return true;
; 292  : 			}
; 293  : 
; 294  : 			return false;
; 295  : 		}
; 296  : 
; 297  : 		if( dwTime > dwCurTime )

  0013f	e9 75 ff ff ff	 jmp	 $LN2@ProcessCan
$LN212@ProcessCan:

; 285  : 		{
; 286  : 			m_dwCancelCheckTime = dwTime + 1;

  00144	40		 inc	 eax

; 287  : 
; 288  : 			if( m_bEnableJumpState && !pOwner->IsBuffLimitJump() )

  00145	80 bf 02 0f 00
	00 00		 cmp	 BYTE PTR [edi+3842], 0
  0014c	89 87 08 0f 00
	00		 mov	 DWORD PTR [edi+3848], eax
  00152	0f 84 61 ff ff
	ff		 je	 $LN2@ProcessCan
  00158	8b 4d d0	 mov	 ecx, DWORD PTR _pOwner$GSCopy$[ebp]
  0015b	e8 00 00 00 00	 call	 ?IsBuffLimitJump@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsBuffLimitJump
  00160	84 c0		 test	 al, al
  00162	0f 85 51 ff ff
	ff		 jne	 $LN2@ProcessCan

; 289  : 			{
; 290  : 				pOwner->SetJumpState();

  00168	8b 4d d0	 mov	 ecx, DWORD PTR _pOwner$GSCopy$[ebp]
  0016b	6a 01		 push	 1
  0016d	e8 00 00 00 00	 call	 ?SetJumpState@ioBaseChar@@QAEX_N@Z ; ioBaseChar::SetJumpState
  00172	b3 01		 mov	 bl, 1
  00174	e9 42 ff ff ff	 jmp	 $LN217@ProcessCan
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ProcessCancel@ioJackItem@@UAE_NPAVioBaseChar@@@Z$0:
  00000	8d 4d c4	 lea	 ecx, DWORD PTR _vTimeList$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$list@MV?$allocator@M@std@@@std@@QAE@XZ ; std::list<float,std::allocator<float> >::~list<float,std::allocator<float> >
__unwindfunclet$?ProcessCancel@ioJackItem@@UAE_NPAVioBaseChar@@@Z$2:
  00008	8d 4d b0	 lea	 ecx, DWORD PTR $T553143[ebp]
  0000b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?ProcessCancel@ioJackItem@@UAE_NPAVioBaseChar@@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ProcessCancel@ioJackItem@@UAE_NPAVioBaseChar@@@Z
  00031	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ProcessCancel@ioJackItem@@UAE_NPAVioBaseChar@@@Z ENDP	; ioJackItem::ProcessCancel
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$553519 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$553519[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > > >
_TEXT	ENDS
PUBLIC	??$_Umove@PAVioHashString@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@PAV2@00@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Umove<ioHashString *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAVioHashString@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@PAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAVioHashString@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@PAV2@00@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Umove<ioHashString *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAVioHashString@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@PAV2@00@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Umove<ioHashString *>
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN21@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN21@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXPAVioHashString@@0@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXPAVioHashString@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXPAVioHashString@@0@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN23@Destroy
$LL9@Destroy:
  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 10	 add	 esi, 16			; 00000010H
$LN23@Destroy:
  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL9@Destroy
  00019	5e		 pop	 esi

; 1271 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?_Destroy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXPAVioHashString@@0@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@1@0PAV2@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@1@0PAV2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$553696 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@1@0PAV2@@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$553696[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@1@0PAV2@@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > > >
_TEXT	ENDS
PUBLIC	??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$553778 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	6a 0c		 push	 12			; 0000000cH
  00025	59		 pop	 ecx
  00026	99		 cdq
  00027	f7 f9		 idiv	 ecx
  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy
  00031	84 c0		 test	 al, al
  00033	74 1f		 je	 SHORT $LN7@vector

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00035	ff 75 08	 push	 DWORD PTR __Cat$553778[ebp]
  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003d	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003f	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00042	52		 push	 edx
  00043	51		 push	 ecx
  00044	50		 push	 eax
  00045	57		 push	 edi
  00046	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00049	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
  0004e	83 c4 14	 add	 esp, 20			; 00000014H
  00051	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector:

; 543  : 			_CATCH_END
; 544  : 		}

  00054	8b c6		 mov	 eax, esi
  00056	e8 00 00 00 00	 call	 __EH_epilog3
  0005b	c2 04 00	 ret	 4
__catch$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy

; 542  : 			_RERAISE;

  00066	33 db		 xor	 ebx, ebx
  00068	53		 push	 ebx
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector:
$LN37@vector:
  0006f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
PUBLIC	?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
tv300 = -24						; size = 4
__Ptr$548984 = -20					; size = 4
__$EHRec$ = -16						; size = 16
$T553888 = 8						; size = 4
__Count$ = 8						; size = 4
?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00011	81 fb ff ff ff
	0f		 cmp	 ebx, 268435455		; 0fffffffH
  00017	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN59@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00024	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00027	2b 06		 sub	 eax, DWORD PTR [esi]
  00029	c1 f8 04	 sar	 eax, 4
  0002c	3b c3		 cmp	 eax, ebx
  0002e	73 7a		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00030	6a 00		 push	 0
  00032	53		 push	 ebx
  00033	e8 00 00 00 00	 call	 ??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ; std::_Allocate<ioHashString>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  0003e	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00041	52		 push	 edx
  00042	89 45 ec	 mov	 DWORD PTR __Ptr$548984[ebp], eax
  00045	ff 75 ec	 push	 DWORD PTR __Ptr$548984[ebp]
  00048	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004b	50		 push	 eax
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00052	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00055	8b 06		 mov	 eax, DWORD PTR [esi]
  00057	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  0005b	8b f9		 mov	 edi, ecx
  0005d	83 c4 18	 add	 esp, 24			; 00000018H
  00060	2b f8		 sub	 edi, eax
  00062	89 4d e8	 mov	 DWORD PTR tv300[ebp], ecx
  00065	85 c0		 test	 eax, eax
  00067	74 24		 je	 SHORT $LN51@reserve

; 761  : 			if (this->_Myfirst != 0)
; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  00069	89 45 08	 mov	 DWORD PTR $T553888[ebp], eax
  0006c	3b c1		 cmp	 eax, ecx
  0006e	74 15		 je	 SHORT $LN37@reserve
$LN39@reserve:
  00070	8b 4d 08	 mov	 ecx, DWORD PTR $T553888[ebp]
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00079	83 45 08 10	 add	 DWORD PTR $T553888[ebp], 16 ; 00000010H
  0007d	8b 45 08	 mov	 eax, DWORD PTR $T553888[ebp]
  00080	3b 45 e8	 cmp	 eax, DWORD PTR tv300[ebp]
  00083	75 eb		 jne	 SHORT $LN39@reserve
$LN37@reserve:

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00085	ff 36		 push	 DWORD PTR [esi]
  00087	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008c	59		 pop	 ecx
$LN51@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0008d	8b ce		 mov	 ecx, esi
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00095	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$548984[ebp]
  00098	c1 e3 04	 shl	 ebx, 4
  0009b	03 d8		 add	 ebx, eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  0009d	83 e7 f0	 and	 edi, -16		; fffffff0H
  000a0	03 f8		 add	 edi, eax
  000a2	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  000a5	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  000a8	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  000aa	e8 00 00 00 00	 call	 __EH_epilog3
  000af	c2 04 00	 ret	 4
__catch$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000b2	ff 75 ec	 push	 DWORD PTR __Ptr$548984[ebp]
  000b5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ba	59		 pop	 ecx

; 757  : 			_RERAISE;

  000bb	6a 00		 push	 0
  000bd	6a 00		 push	 0
  000bf	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN60@reserve:
$LN58@reserve:
  000c4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::reserve
PUBLIC	??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 28		 je	 SHORT $LN24@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	53		 push	 ebx
  00009	57		 push	 edi
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  00010	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00013	8b 3e		 mov	 edi, DWORD PTR [esi]
  00015	eb 0b		 jmp	 SHORT $LN28@Tidy@2
$LL12@Tidy@2:
  00017	8b cf		 mov	 ecx, edi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0001f	83 c7 10	 add	 edi, 16			; 00000010H
$LN28@Tidy@2:
  00022	3b fb		 cmp	 edi, ebx
  00024	75 f1		 jne	 SHORT $LL12@Tidy@2

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00026	ff 36		 push	 DWORD PTR [esi]
  00028	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002d	59		 pop	 ecx
  0002e	5f		 pop	 edi
  0002f	5b		 pop	 ebx
$LN24@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00030	33 c0		 xor	 eax, eax
  00032	89 06		 mov	 DWORD PTR [esi], eax

; 1310 : 		this->_Mylast = 0;

  00034	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1311 : 		this->_Myend = 0;

  00037	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003a	5e		 pop	 esi

; 1312 : 		}

  0003b	c3		 ret	 0
?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 1e		 je	 SHORT $LN6@Tidy@3

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0000e	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00011	50		 push	 eax
  00012	ff 76 04	 push	 DWORD PTR [esi+4]
  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0001c	ff 36		 push	 DWORD PTR [esi]
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00023	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@Tidy@3:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00026	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00029	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0002d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00031	5e		 pop	 esi

; 1312 : 		}

  00032	c3		 ret	 0
?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$554156 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	6a 28		 push	 40			; 00000028H
  00025	59		 pop	 ecx
  00026	99		 cdq
  00027	f7 f9		 idiv	 ecx
  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy
  00031	84 c0		 test	 al, al
  00033	74 1f		 je	 SHORT $LN7@vector@2

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00035	ff 75 08	 push	 DWORD PTR __Cat$554156[ebp]
  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003d	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003f	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00042	52		 push	 edx
  00043	51		 push	 ecx
  00044	50		 push	 eax
  00045	57		 push	 edi
  00046	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00049	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
  0004e	83 c4 14	 add	 esp, 20			; 00000014H
  00051	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector@2:

; 543  : 			_CATCH_END
; 544  : 		}

  00054	8b c6		 mov	 eax, esi
  00056	e8 00 00 00 00	 call	 __EH_epilog3
  0005b	c2 04 00	 ret	 4
__catch$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy

; 542  : 			_RERAISE;

  00066	33 db		 xor	 ebx, ebx
  00068	53		 push	 ebx
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector@2:
$LN37@vector@2:
  0006f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
PUBLIC	?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx

; 1292 : 		if (max_size() - _Count < _Size)

  0000d	ba ff ff ff 0f	 mov	 edx, 268435455		; 0fffffffH
  00012	2b 55 08	 sub	 edx, DWORD PTR __Count$[ebp]
  00015	c1 f8 04	 sar	 eax, 4
  00018	3b d0		 cmp	 edx, eax
  0001a	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0002a	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  0002d	2b d1		 sub	 edx, ecx
  0002f	c1 fa 04	 sar	 edx, 4
  00032	3b c2		 cmp	 eax, edx
  00034	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Grow_to
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::reserve
$LN1@Reserve:
  00046	5e		 pop	 esi

; 1298 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve
_TEXT	ENDS
PUBLIC	??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$554282 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	c1 f8 04	 sar	 eax, 4
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Buy
  0002c	84 c0		 test	 al, al
  0002e	74 1f		 je	 SHORT $LN7@vector@3

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00030	ff 75 08	 push	 DWORD PTR __Cat$554282[ebp]
  00033	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00035	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00038	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003a	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  0003d	52		 push	 edx
  0003e	51		 push	 ecx
  0003f	50		 push	 eax
  00040	57		 push	 edi
  00041	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00044	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
  00049	83 c4 14	 add	 esp, 20			; 00000014H
  0004c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector@3:

; 543  : 			_CATCH_END
; 544  : 		}

  0004f	8b c6		 mov	 eax, esi
  00051	e8 00 00 00 00	 call	 __EH_epilog3
  00056	c2 04 00	 ret	 4
__catch$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  00059	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy

; 542  : 			_RERAISE;

  00061	33 db		 xor	 ebx, ebx
  00063	53		 push	 ebx
  00064	53		 push	 ebx
  00065	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector@3:
$LN37@vector@3:
  0006a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
PUBLIC	??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0AttackAttribute@@QAE@ABU0@@Z			; AttackAttribute::AttackAttribute
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0AttackAttribute@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$2
__ehfuncinfo$??0AttackAttribute@@QAE@ABU0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0AttackAttribute@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0AttackAttribute@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0AttackAttribute@@QAE@ABU0@@Z PROC			; AttackAttribute::AttackAttribute, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0AttackAttribute@@QAE@ABU0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00014	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  0001a	57		 push	 edi
  0001b	ff d3		 call	 ebx
  0001d	d9 47 10	 fld	 DWORD PTR [edi+16]
  00020	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00024	d9 5e 10	 fstp	 DWORD PTR [esi+16]
  00027	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  0002a	50		 push	 eax
  0002b	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0002e	ff d3		 call	 ebx
  00030	d9 47 24	 fld	 DWORD PTR [edi+36]
  00033	8d 47 28	 lea	 eax, DWORD PTR [edi+40]
  00036	d9 5e 24	 fstp	 DWORD PTR [esi+36]
  00039	50		 push	 eax
  0003a	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  0003d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00041	e8 00 00 00 00	 call	 ??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
  00046	8d 47 38	 lea	 eax, DWORD PTR [edi+56]
  00049	50		 push	 eax
  0004a	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  0004d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00051	e8 00 00 00 00	 call	 ??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
  00056	8b 47 48	 mov	 eax, DWORD PTR [edi+72]
  00059	89 46 48	 mov	 DWORD PTR [esi+72], eax
  0005c	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  0005f	89 46 4c	 mov	 DWORD PTR [esi+76], eax
  00062	8b c6		 mov	 eax, esi
  00064	e8 00 00 00 00	 call	 __EH_epilog3
  00069	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 28	 add	 ecx, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
__ehhandler$??0AttackAttribute@@QAE@ABU0@@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0AttackAttribute@@QAE@ABU0@@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0AttackAttribute@@QAE@ABU0@@Z ENDP			; AttackAttribute::AttackAttribute
PUBLIC	?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::push_back
; Function compile flags: /Ogsp
;	COMDAT ?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 29		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 23		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx

; 980  : 			if (this->_Mylast == this->_Myend)

  00019	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001c	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  0001e	6a 01		 push	 1
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00027	83 e7 f0	 and	 edi, -16		; fffffff0H
  0002a	03 3e		 add	 edi, DWORD PTR [esi]
  0002c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002f	57		 push	 edi
  00030	ff 76 04	 push	 DWORD PTR [esi+4]
  00033	e8 00 00 00 00	 call	 ??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z ; std::allocator<ioHashString>::construct<ioHashString &>

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00038	eb 19		 jmp	 SHORT $LN30@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  0003a	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0003d	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0003f	6a 01		 push	 1
  00041	8b ce		 mov	 ecx, esi
  00043	e8 00 00 00 00	 call	 ?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00048	57		 push	 edi
  00049	ff 76 04	 push	 DWORD PTR [esi+4]
  0004c	e8 00 00 00 00	 call	 ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
  00051	59		 pop	 ecx
  00052	59		 pop	 ecx
$LN30@push_back:

; 996  : 			++this->_Mylast;

  00053	83 46 04 10	 add	 DWORD PTR [esi+4], 16	; 00000010H
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::push_back
_TEXT	ENDS
PUBLIC	??0AttackAttribute@@QAE@XZ			; AttackAttribute::AttackAttribute
EXTRN	?Init@AttackAttribute@@QAEXXZ:PROC		; AttackAttribute::Init
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0AttackAttribute@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$3
__ehfuncinfo$??0AttackAttribute@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0AttackAttribute@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.h
xdata$x	ENDS
;	COMDAT ??0AttackAttribute@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0AttackAttribute@@QAE@XZ PROC				; AttackAttribute::AttackAttribute, COMDAT
; _this$ = ecx

; 107  : 	AttackAttribute()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0AttackAttribute@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	ff d7		 call	 edi
  00019	33 db		 xor	 ebx, ebx
  0001b	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0001e	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00021	ff d7		 call	 edi
  00023	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00026	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00029	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
  0002c	89 5e 38	 mov	 DWORD PTR [esi+56], ebx
  0002f	89 5e 3c	 mov	 DWORD PTR [esi+60], ebx
  00032	89 5e 40	 mov	 DWORD PTR [esi+64], ebx

; 108  : 	{
; 109  : 		Init();

  00035	8b ce		 mov	 ecx, esi
  00037	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0003b	e8 00 00 00 00	 call	 ?Init@AttackAttribute@@QAEXXZ ; AttackAttribute::Init

; 110  : 	}

  00040	8b c6		 mov	 eax, esi
  00042	e8 00 00 00 00	 call	 __EH_epilog3
  00047	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AttackAttribute@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@XZ$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 28	 add	 ecx, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
__unwindfunclet$??0AttackAttribute@@QAE@XZ$3:
  00020	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	83 c1 38	 add	 ecx, 56			; 00000038H
  00026	e9 00 00 00 00	 jmp	 ??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >
__ehhandler$??0AttackAttribute@@QAE@XZ:
  0002b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00032	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0AttackAttribute@@QAE@XZ
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0AttackAttribute@@QAE@XZ ENDP				; AttackAttribute::AttackAttribute
PUBLIC	??1AttackAttribute@@QAE@XZ			; AttackAttribute::~AttackAttribute
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1AttackAttribute@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1AttackAttribute@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1AttackAttribute@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1AttackAttribute@@QAE@XZ$2
__ehfuncinfo$??1AttackAttribute@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1AttackAttribute@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1AttackAttribute@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1AttackAttribute@@QAE@XZ PROC				; AttackAttribute::~AttackAttribute, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1AttackAttribute@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  00014	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0001b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
  00020	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00023	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00027	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
  0002c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00032	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00035	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00039	ff d7		 call	 edi
  0003b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0003f	8b ce		 mov	 ecx, esi
  00041	ff d7		 call	 edi
  00043	e8 00 00 00 00	 call	 __EH_epilog3
  00048	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1AttackAttribute@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1AttackAttribute@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1AttackAttribute@@QAE@XZ$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 28	 add	 ecx, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
__ehhandler$??1AttackAttribute@@QAE@XZ:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1AttackAttribute@@QAE@XZ
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1AttackAttribute@@QAE@XZ ENDP				; AttackAttribute::~AttackAttribute
PUBLIC	??_7ioJackItem@@6B@				; ioJackItem::`vftable'
PUBLIC	??0ioJackItem@@QAE@XZ				; ioJackItem::ioJackItem
PUBLIC	??_R4ioJackItem@@6B@				; ioJackItem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioJackItem@@@8				; ioJackItem `RTTI Type Descriptor'
PUBLIC	??_R3ioJackItem@@8				; ioJackItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioJackItem@@8				; ioJackItem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioJackItem@@8			; ioJackItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioWeaponItem@@8			; ioWeaponItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioWeaponItem@@@8			; ioWeaponItem `RTTI Type Descriptor'
PUBLIC	??_R3ioWeaponItem@@8				; ioWeaponItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWeaponItem@@8				; ioWeaponItem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioAttackableItem@@8		; ioAttackableItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioAttackableItem@@@8			; ioAttackableItem `RTTI Type Descriptor'
PUBLIC	??_R3ioAttackableItem@@8			; ioAttackableItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioAttackableItem@@8			; ioAttackableItem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioItem@@8				; ioItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioItem@@@8				; ioItem `RTTI Type Descriptor'
PUBLIC	??_R3ioItem@@8					; ioItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioItem@@8					; ioItem::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioJackItem@@UAEXAAVioINILoader@@@Z ; ioJackItem::LoadProperty
PUBLIC	?Clone@ioJackItem@@UAEPAVioItem@@XZ		; ioJackItem::Clone
PUBLIC	?IsEnableExtraGauge@ioItem@@UAE_NPAVioBaseChar@@@Z ; ioItem::IsEnableExtraGauge
PUBLIC	?GetExtraGauge@ioItem@@UAEMXZ			; ioItem::GetExtraGauge
PUBLIC	?CheckOnHand@ioAttackableItem@@UAE_NXZ		; ioAttackableItem::CheckOnHand
PUBLIC	?CheckAimState@ioAttackableItem@@UAE_N_N@Z	; ioAttackableItem::CheckAimState
PUBLIC	?SetAimState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ; ioAttackableItem::SetAimState
PUBLIC	?CheckExtendDefenseEnable@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ; ioAttackableItem::CheckExtendDefenseEnable
PUBLIC	?IsMoveAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ; ioAttackableItem::IsMoveAttackState
PUBLIC	?IsNoGhostWalk@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ; ioAttackableItem::IsNoGhostWalk
PUBLIC	?IsEnableAttackDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z ; ioAttackableItem::IsEnableAttackDashCheck
PUBLIC	?IsEnableItemDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z ; ioAttackableItem::IsEnableItemDashCheck
PUBLIC	?IsEnableAttackRotateCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ; ioAttackableItem::IsEnableAttackRotateCheck
PUBLIC	?IsEnableChargeDefenseCheck@ioAttackableItem@@UAE_NXZ ; ioAttackableItem::IsEnableChargeDefenseCheck
PUBLIC	?IsUseDefenceCounterAttackEndDash@ioAttackableItem@@UAE_NXZ ; ioAttackableItem::IsUseDefenceCounterAttackEndDash
PUBLIC	?IsAutoTarget@ioAttackableItem@@UBE_NXZ		; ioAttackableItem::IsAutoTarget
PUBLIC	?IsWoundAfterUseExtendState@ioAttackableItem@@UAE_NXZ ; ioAttackableItem::IsWoundAfterUseExtendState
PUBLIC	?CheckWoundAfterUseExtendState@ioAttackableItem@@UAE_NPAVioBaseChar@@W4BlowTargetType@@@Z ; ioAttackableItem::CheckWoundAfterUseExtendState
PUBLIC	?IsCharSkipState@ioAttackableItem@@UAE_NPBVioBaseChar@@@Z ; ioAttackableItem::IsCharSkipState
EXTRN	??1ioWeaponItem@@UAE@XZ:PROC			; ioWeaponItem::~ioWeaponItem
EXTRN	??0ioWeaponItem@@QAE@XZ:PROC			; ioWeaponItem::ioWeaponItem
EXTRN	?FindFieldEntityGrp@ioItem@@MBEABVioHashString@@XZ:PROC ; ioItem::FindFieldEntityGrp
EXTRN	?GetType@ioWeaponItem@@UBE?AW4ItemType@ioItem@@XZ:PROC ; ioWeaponItem::GetType
EXTRN	?UseCreateIndexItem@ioItem@@UBE_NXZ:PROC	; ioItem::UseCreateIndexItem
EXTRN	?GetSetFocusColor@ioItem@@UBEKXZ:PROC		; ioItem::GetSetFocusColor
EXTRN	?Initialize@ioItem@@UAEXABVioHashString@@PAVioPlayStage@@@Z:PROC ; ioItem::Initialize
EXTRN	?InitializeBeforeEquip@ioItem@@UAEXABVioHashString@@PAVioPlayStage@@@Z:PROC ; ioItem::InitializeBeforeEquip
EXTRN	?OnEquiped@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::OnEquiped
EXTRN	?OnReleased@ioWeaponItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioWeaponItem::OnReleased
EXTRN	?SetExtendEquipEffect@ioItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioItem::SetExtendEquipEffect
EXTRN	?ReleaseExtendEquipEffect@ioItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioItem::ReleaseExtendEquipEffect
EXTRN	?AddGlowLine@ioWeaponItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioWeaponItem::AddGlowLine
EXTRN	?RemoveGlowLine@ioWeaponItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioWeaponItem::RemoveGlowLine
EXTRN	?GetTargetName@ioItem@@UAE?AVioHashString@@XZ:PROC ; ioItem::GetTargetName
EXTRN	?ClearTarget@ioItem@@UAEXXZ:PROC		; ioItem::ClearTarget
EXTRN	?SetItemType@ioWeaponItem@@UAEXXZ:PROC		; ioWeaponItem::SetItemType
EXTRN	?CheckWeaponDefenseState@ioItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioItem::CheckWeaponDefenseState
EXTRN	?CheckWoundedState@ioItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioItem::CheckWoundedState
EXTRN	?SetVisible@ioItem@@UAEXPAVioBaseChar@@_N@Z:PROC ; ioItem::SetVisible
EXTRN	?UpdateSkillGauge@ioItem@@UAEXPAVioBaseChar@@M_N@Z:PROC ; ioItem::UpdateSkillGauge
EXTRN	?ReduceNeedGauge@ioItem@@UAEXMPAVioBaseChar@@@Z:PROC ; ioItem::ReduceNeedGauge
EXTRN	?GetCurSecoundBullet@ioItem@@UAEHXZ:PROC	; ioItem::GetCurSecoundBullet
EXTRN	?GetMaxSecoundBullet@ioItem@@UAEHXZ:PROC	; ioItem::GetMaxSecoundBullet
EXTRN	?SetCurSecoundBullet@ioItem@@UAEXH@Z:PROC	; ioItem::SetCurSecoundBullet
EXTRN	?GetGrowthInfoNum@ioItem@@UBEHH@Z:PROC		; ioItem::GetGrowthInfoNum
EXTRN	?GetGrowthInfoNumByType@ioItem@@UBEHHAAH@Z:PROC	; ioItem::GetGrowthInfoNumByType
EXTRN	?ClearCurChargeRateForSkill@ioItem@@UAEXXZ:PROC	; ioItem::ClearCurChargeRateForSkill
EXTRN	?GetChargeDamageRateForSkill@ioItem@@UAEMXZ:PROC ; ioItem::GetChargeDamageRateForSkill
EXTRN	?GetChargeForceRateForSkill@ioItem@@UAEMXZ:PROC	; ioItem::GetChargeForceRateForSkill
EXTRN	?GetChargeBlowRateForSkill@ioItem@@UAEMXZ:PROC	; ioItem::GetChargeBlowRateForSkill
EXTRN	?GetChargeRangeRateForSkill@ioItem@@UAEMXZ:PROC	; ioItem::GetChargeRangeRateForSkill
EXTRN	?GetChargeSpeedRateForSkill@ioItem@@UAEMXZ:PROC	; ioItem::GetChargeSpeedRateForSkill
EXTRN	?GetChargeFloatRateForSkill@ioItem@@UAEMXZ:PROC	; ioItem::GetChargeFloatRateForSkill
EXTRN	?GetChargeScaleRateForSkill@ioItem@@UAEMXZ:PROC	; ioItem::GetChargeScaleRateForSkill
EXTRN	?GetChargeExplosionRateForSkill@ioItem@@UAEMXZ:PROC ; ioItem::GetChargeExplosionRateForSkill
EXTRN	?GetChargeWoundedTimeRateForSkill@ioItem@@UAEMXZ:PROC ; ioItem::GetChargeWoundedTimeRateForSkill
EXTRN	?SetCurEquipEffect@ioItem@@UAEX_N@Z:PROC	; ioItem::SetCurEquipEffect
EXTRN	?SetCostume@ioItem@@UAEXH_N@Z:PROC		; ioItem::SetCostume
EXTRN	??_EioJackItem@@UAEPAXI@Z:PROC			; ioJackItem::`vector deleting destructor'
EXTRN	?IsCanFire@ioAttackableItem@@UBE_NPBVioBaseChar@@H_N@Z:PROC ; ioAttackableItem::IsCanFire
EXTRN	?CallItemProcess@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CallItemProcess
EXTRN	?CheckChargeInfo@ioAttackableItem@@UAEXPAVioWeapon@@_N@Z:PROC ; ioAttackableItem::CheckChargeInfo
EXTRN	?SetExtendDefenseState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetExtendDefenseState
EXTRN	?CheckExtendDefenseState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckExtendDefenseState
EXTRN	?CheckDefenseMoveAniState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckDefenseMoveAniState
EXTRN	?SetDodgeDefenseState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetDodgeDefenseState
EXTRN	?CheckDodgeDefenseState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckDodgeDefenseState
EXTRN	?ApplyDodgeDefenseState@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyDodgeDefenseState
EXTRN	?SetDefenseAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetDefenseAttackState
EXTRN	?CheckDefenseAttackState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckDefenseAttackState
EXTRN	?ApplyDefenseAttackState@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyDefenseAttackState
EXTRN	?SetExtendDashState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetExtendDashState
EXTRN	?CheckExtendDashState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckExtendDashState
EXTRN	?CheckJumpAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckJumpAttack
EXTRN	?SetJumpReloadState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetJumpReloadState
EXTRN	?SetJumpReload@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetJumpReload
EXTRN	?CheckJumpReloadState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckJumpReloadState
EXTRN	?CheckJumpReloadReserve@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckJumpReloadReserve
EXTRN	?ProcessJumpReloadState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessJumpReloadState
EXTRN	?ApplyJumpReload@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyJumpReload
EXTRN	?OnItemGaugeCancel@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::OnItemGaugeCancel
EXTRN	?OnEndExtendDefense@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::OnEndExtendDefense
EXTRN	?OnEndNormalAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::OnEndNormalAttack
EXTRN	?OnEndExtendAttack@ioAttackableItem@@UAEXPAVioBaseChar@@_N@Z:PROC ; ioAttackableItem::OnEndExtendAttack
EXTRN	?OnEndExtendJump@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::OnEndExtendJump
EXTRN	?FillNormalAttackExtraInfo@ioAttackableItem@@UAEXAAVSP2Packet@@@Z:PROC ; ioAttackableItem::FillNormalAttackExtraInfo
EXTRN	?ApplyNormalAttackExtraInfo@ioAttackableItem@@UAEXAAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyNormalAttackExtraInfo
EXTRN	?CheckLanding@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckLanding
EXTRN	?SetNoneState@ioAttackableItem@@UAEXPAVioBaseChar@@H@Z:PROC ; ioAttackableItem::SetNoneState
EXTRN	?IsCanUpdateGauge@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::IsCanUpdateGauge
EXTRN	?CheckAimJumpState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckAimJumpState
EXTRN	?GetJumppingAnimation@ioAttackableItem@@UBEABVioHashString@@XZ:PROC ; ioAttackableItem::GetJumppingAnimation
EXTRN	?GetExtendJumppingAnimation@ioAttackableItem@@UBEABVioHashString@@XZ:PROC ; ioAttackableItem::GetExtendJumppingAnimation
EXTRN	?CheckRetreatState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckRetreatState
EXTRN	?SetNextItemState@ioAttackableItem@@UAEXPAVioBaseChar@@0PAVioWeapon@@_NM@Z:PROC ; ioAttackableItem::SetNextItemState
EXTRN	?WeaponWounded@ioWeaponItem@@UAEXPAVioWeapon@@PAVioBaseChar@@@Z:PROC ; ioWeaponItem::WeaponWounded
EXTRN	?WeaponMapColDead@ioAttackableItem@@UAEXPAVioWeapon@@@Z:PROC ; ioAttackableItem::WeaponMapColDead
EXTRN	?SetDefenceCounterState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetDefenceCounterState
EXTRN	?IsUseDefenceCounterAttack@ioAttackableItem@@UAE_NXZ:PROC ; ioAttackableItem::IsUseDefenceCounterAttack
EXTRN	?ProcessDefenceCounterAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessDefenceCounterAttack
EXTRN	?ProcessExtraJump@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessExtraJump
EXTRN	?SetEndGrappling@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetEndGrappling
EXTRN	?ClearKeyReserve@ioAttackableItem@@MAEXXZ:PROC	; ioAttackableItem::ClearKeyReserve
EXTRN	?CheckReserve@ioAttackableItem@@MAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckReserve
EXTRN	?ProcessReserveKeyInput@ioAttackableItem@@MAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessReserveKeyInput
EXTRN	?SetJumpState@ioAttackableItem@@UAEXXZ:PROC	; ioAttackableItem::SetJumpState
EXTRN	?SetJumpping@ioAttackableItem@@UAEXPAVioBaseChar@@_N@Z:PROC ; ioAttackableItem::SetJumpping
EXTRN	?ProcessJumpping@ioAttackableItem@@UAEXPAVioBaseChar@@M@Z:PROC ; ioAttackableItem::ProcessJumpping
EXTRN	?ProcessJumppingByNoNeedProcess@ioAttackableItem@@UAEXPAVioBaseChar@@M@Z:PROC ; ioAttackableItem::ProcessJumppingByNoNeedProcess
EXTRN	?ProcessLanding@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessLanding
EXTRN	?ProcessAimJump@ioAttackableItem@@UAE_NPAVioBaseChar@@M@Z:PROC ; ioAttackableItem::ProcessAimJump
EXTRN	?ApplyJump@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyJump
EXTRN	?ApplyDash@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyDash
EXTRN	?ApplyCounterAttack@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyCounterAttack
EXTRN	?CheckComboJumpAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckComboJumpAttack
EXTRN	?SetFlashJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetFlashJumpAttack
EXTRN	?SetComboFlashAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetComboFlashAttack
EXTRN	?SetCollectJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetCollectJumpAttack
EXTRN	?SetPowerChargeJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetPowerChargeJumpAttack
EXTRN	?GetAttackSpeedRate@ioAttackableItem@@UBEMXZ:PROC ; ioAttackableItem::GetAttackSpeedRate
EXTRN	?GetExtraJumpSpeedRate@ioAttackableItem@@UBEMABUD3DXVECTOR3@@ABUD3DXQUATERNION@@@Z:PROC ; ioAttackableItem::GetExtraJumpSpeedRate
EXTRN	?IsEnableExtendJump@ioAttackableItem@@UAE_NXZ:PROC ; ioAttackableItem::IsEnableExtendJump
EXTRN	?RecevieExtendJumpUse@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::RecevieExtendJumpUse
EXTRN	?HasAniFile@ioAttackableItem@@UBE_NW4AttackType@@H@Z:PROC ; ioAttackableItem::HasAniFile
EXTRN	?HasEndAniFile@ioAttackableItem@@UBE_NW4AttackType@@H@Z:PROC ; ioAttackableItem::HasEndAniFile
EXTRN	?GetAttackAttribute@ioAttackableItem@@UBEPBUAttackAttribute@@W4AttackType@@H@Z:PROC ; ioAttackableItem::GetAttackAttribute
EXTRN	?GetAniFile@ioAttackableItem@@UBEABVioHashString@@W4AttackType@@H@Z:PROC ; ioAttackableItem::GetAniFile
EXTRN	?GetAttackAniRate@ioAttackableItem@@UBEMW4AttackType@@H@Z:PROC ; ioAttackableItem::GetAttackAniRate
EXTRN	?GetEndAniFile@ioAttackableItem@@UBEABVioHashString@@W4AttackType@@H@Z:PROC ; ioAttackableItem::GetEndAniFile
EXTRN	?GetAttackEndAniRate@ioAttackableItem@@UBEMW4AttackType@@H@Z:PROC ; ioAttackableItem::GetAttackEndAniRate
EXTRN	?GetAttackAttributeIdx@ioAttackableItem@@UBEABV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@W4AttackType@@H@Z:PROC ; ioAttackableItem::GetAttackAttributeIdx
EXTRN	?GetForceInfoList@ioAttackableItem@@UBEABV?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@W4AttackType@@H@Z:PROC ; ioAttackableItem::GetForceInfoList
EXTRN	?GetAttackPreDelay@ioAttackableItem@@UBEKW4AttackType@@H@Z:PROC ; ioAttackableItem::GetAttackPreDelay
EXTRN	?GetAttackAnimationDelay@ioAttackableItem@@UBEKW4AttackType@@H@Z:PROC ; ioAttackableItem::GetAttackAnimationDelay
EXTRN	?GetMaxCombo@ioAttackableItem@@UBEHXZ:PROC	; ioAttackableItem::GetMaxCombo
EXTRN	?GetExtraDashAttackMax@ioAttackableItem@@UBEHXZ:PROC ; ioAttackableItem::GetExtraDashAttackMax
EXTRN	?HasJumpEndAnimation@ioAttackableItem@@UBE_N_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::HasJumpEndAnimation
EXTRN	?GetJumpEndAnimation@ioAttackableItem@@UBEABVioHashString@@_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::GetJumpEndAnimation
EXTRN	?ClearCancelInfo@ioAttackableItem@@MAEXXZ:PROC	; ioAttackableItem::ClearCancelInfo
EXTRN	?CheckCancelReserve@ioAttackableItem@@MAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckCancelReserve
EXTRN	?SetCurAttackAniForInputJump@ioAttackableItem@@MAEXABVioHashString@@M@Z:PROC ; ioAttackableItem::SetCurAttackAniForInputJump
EXTRN	?ProcessCancelBySpeicalDash@ioAttackableItem@@MAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessCancelBySpeicalDash
EXTRN	?SetCurAttackAniForInputDashS@ioAttackableItem@@UAEXABVioHashString@@M@Z:PROC ; ioAttackableItem::SetCurAttackAniForInputDashS
EXTRN	?CheckCancelReserveByConditionalSpecialDash@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckCancelReserveByConditionalSpecialDash
EXTRN	?SetChangeConditionalSpecialDash@ioAttackableItem@@UAEXPAVioBaseChar@@W4DirKeyInput@ioUserKeyInput@@H@Z:PROC ; ioAttackableItem::SetChangeConditionalSpecialDash
EXTRN	?CheckChangeWereWolfState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckChangeWereWolfState
EXTRN	?SetChangeWereWolfState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetChangeWereWolfState
EXTRN	?CheckReleaseWereWolfState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckReleaseWereWolfState
EXTRN	?ReleseWereWolfState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ReleseWereWolfState
EXTRN	?ReleseWereWolfStateByOwner@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ReleseWereWolfStateByOwner
EXTRN	?IncreaseChangeDamage@ioAttackableItem@@UAEXMH_N@Z:PROC ; ioAttackableItem::IncreaseChangeDamage
EXTRN	?IncreaseChangeDamageByWeapon@ioAttackableItem@@UAEXM@Z:PROC ; ioAttackableItem::IncreaseChangeDamageByWeapon
EXTRN	?CheckIncreaseChangeDamage@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckIncreaseChangeDamage
EXTRN	?DecreaseChangeDamage@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::DecreaseChangeDamage
EXTRN	?IsEnableActionStopDelay@ioAttackableItem@@UAE_NXZ:PROC ; ioAttackableItem::IsEnableActionStopDelay
EXTRN	?SetExtraGaugeTypeByWeapon@ioAttackableItem@@UAEXPAVioBaseChar@@HHM@Z:PROC ; ioAttackableItem::SetExtraGaugeTypeByWeapon
EXTRN	?InitExtraGauge@ioAttackableItem@@UAEXXZ:PROC	; ioAttackableItem::InitExtraGauge
EXTRN	?MaxExtraGauge@ioAttackableItem@@UAEXXZ:PROC	; ioAttackableItem::MaxExtraGauge
EXTRN	?GetMaxExtraGauge@ioAttackableItem@@UAEMXZ:PROC	; ioAttackableItem::GetMaxExtraGauge
EXTRN	?GetCurExtraGauge@ioAttackableItem@@UAEMXZ:PROC	; ioAttackableItem::GetCurExtraGauge
EXTRN	?SetCurExtraGauge@ioAttackableItem@@UAEXM@Z:PROC ; ioAttackableItem::SetCurExtraGauge
EXTRN	?GetAutoTargetValue@ioAttackableItem@@UAEXPAVioBaseChar@@AAM11W4AutoTargetType@@@Z:PROC ; ioAttackableItem::GetAutoTargetValue
EXTRN	?ClearAirJump@ioAttackableItem@@UAEXXZ:PROC	; ioAttackableItem::ClearAirJump
EXTRN	?SetAirJump@ioAttackableItem@@UAEXPAVioBaseChar@@HM@Z:PROC ; ioAttackableItem::SetAirJump
EXTRN	?CheckAirJump@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckAirJump
EXTRN	?EquipObjectItemByAttakable@ioAttackableItem@@UAEXPAVioBaseChar@@PAVioItem@@@Z:PROC ; ioAttackableItem::EquipObjectItemByAttakable
EXTRN	?ReleaseObjectItemByAttack@ioAttackableItem@@UAEXPAVioBaseChar@@PAVioItem@@@Z:PROC ; ioAttackableItem::ReleaseObjectItemByAttack
EXTRN	?IsBuffFlyChange@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::IsBuffFlyChange
EXTRN	?SetJumpLandingExtraState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetJumpLandingExtraState
EXTRN	?ReleaseObjectState@ioWeaponItem@@UAEXPAVioBaseChar@@PAVioObjectItem@@@Z:PROC ; ioWeaponItem::ReleaseObjectState
EXTRN	?IsCmdCheckEnableTime@ioWeaponItem@@UAE_NXZ:PROC ; ioWeaponItem::IsCmdCheckEnableTime
EXTRN	?IsCmdSuccess@ioWeaponItem@@UAE_NXZ:PROC	; ioWeaponItem::IsCmdSuccess
EXTRN	?IsOneTimeWeaponItem@ioWeaponItem@@UBE_NXZ:PROC	; ioWeaponItem::IsOneTimeWeaponItem
EXTRN	?GetEquipMesh@ioWeaponItem@@UBEABVioHashString@@PAVioBaseChar@@@Z:PROC ; ioWeaponItem::GetEquipMesh
EXTRN	?IsCanSendControl@ioWeaponItem@@UBE_NXZ:PROC	; ioWeaponItem::IsCanSendControl
;	COMDAT ??_R2ioItem@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R2ioItem@@8 DD FLAT:??_R1A@?0A@EA@ioItem@@8		; ioItem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioItem@@8
rdata$r	SEGMENT
??_R3ioItem@@8 DD 00H					; ioItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioItem@@@8
_DATA	SEGMENT
??_R0?AVioItem@@@8 DD FLAT:??_7type_info@@6B@		; ioItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioItem@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioItem@@8 DD FLAT:??_R0?AVioItem@@@8	; ioItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioItem@@8
rdata$r	ENDS
;	COMDAT ??_R2ioAttackableItem@@8
rdata$r	SEGMENT
??_R2ioAttackableItem@@8 DD FLAT:??_R1A@?0A@EA@ioAttackableItem@@8 ; ioAttackableItem::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioItem@@8
rdata$r	ENDS
;	COMDAT ??_R3ioAttackableItem@@8
rdata$r	SEGMENT
??_R3ioAttackableItem@@8 DD 00H				; ioAttackableItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioAttackableItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioAttackableItem@@@8
_DATA	SEGMENT
??_R0?AVioAttackableItem@@@8 DD FLAT:??_7type_info@@6B@	; ioAttackableItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioAttackableItem@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioAttackableItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioAttackableItem@@8 DD FLAT:??_R0?AVioAttackableItem@@@8 ; ioAttackableItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioAttackableItem@@8
rdata$r	ENDS
;	COMDAT ??_R2ioWeaponItem@@8
rdata$r	SEGMENT
??_R2ioWeaponItem@@8 DD FLAT:??_R1A@?0A@EA@ioWeaponItem@@8 ; ioWeaponItem::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioAttackableItem@@8
	DD	FLAT:??_R1A@?0A@EA@ioItem@@8
rdata$r	ENDS
;	COMDAT ??_R3ioWeaponItem@@8
rdata$r	SEGMENT
??_R3ioWeaponItem@@8 DD 00H				; ioWeaponItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ioWeaponItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWeaponItem@@@8
_DATA	SEGMENT
??_R0?AVioWeaponItem@@@8 DD FLAT:??_7type_info@@6B@	; ioWeaponItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWeaponItem@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWeaponItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWeaponItem@@8 DD FLAT:??_R0?AVioWeaponItem@@@8 ; ioWeaponItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWeaponItem@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioJackItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioJackItem@@8 DD FLAT:??_R0?AVioJackItem@@@8 ; ioJackItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioJackItem@@8
rdata$r	ENDS
;	COMDAT ??_R2ioJackItem@@8
rdata$r	SEGMENT
??_R2ioJackItem@@8 DD FLAT:??_R1A@?0A@EA@ioJackItem@@8	; ioJackItem::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWeaponItem@@8
	DD	FLAT:??_R1A@?0A@EA@ioAttackableItem@@8
	DD	FLAT:??_R1A@?0A@EA@ioItem@@8
rdata$r	ENDS
;	COMDAT ??_R3ioJackItem@@8
rdata$r	SEGMENT
??_R3ioJackItem@@8 DD 00H				; ioJackItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2ioJackItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioJackItem@@@8
_DATA	SEGMENT
??_R0?AVioJackItem@@@8 DD FLAT:??_7type_info@@6B@	; ioJackItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioJackItem@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioJackItem@@6B@
rdata$r	SEGMENT
??_R4ioJackItem@@6B@ DD 00H				; ioJackItem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioJackItem@@@8
	DD	FLAT:??_R3ioJackItem@@8
rdata$r	ENDS
;	COMDAT ??_7ioJackItem@@6B@
CONST	SEGMENT
??_7ioJackItem@@6B@ DD FLAT:??_R4ioJackItem@@6B@	; ioJackItem::`vftable'
	DD	FLAT:?FindFieldEntityGrp@ioItem@@MBEABVioHashString@@XZ
	DD	FLAT:?LoadProperty@ioJackItem@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?GetType@ioWeaponItem@@UBE?AW4ItemType@ioItem@@XZ
	DD	FLAT:?Clone@ioJackItem@@UAEPAVioItem@@XZ
	DD	FLAT:?UseCreateIndexItem@ioItem@@UBE_NXZ
	DD	FLAT:?GetSetFocusColor@ioItem@@UBEKXZ
	DD	FLAT:?Initialize@ioItem@@UAEXABVioHashString@@PAVioPlayStage@@@Z
	DD	FLAT:?InitializeBeforeEquip@ioItem@@UAEXABVioHashString@@PAVioPlayStage@@@Z
	DD	FLAT:?OnEquiped@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?OnReleased@ioWeaponItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetExtendEquipEffect@ioItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ReleaseExtendEquipEffect@ioItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?AddGlowLine@ioWeaponItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?RemoveGlowLine@ioWeaponItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?GetTargetName@ioItem@@UAE?AVioHashString@@XZ
	DD	FLAT:?ClearTarget@ioItem@@UAEXXZ
	DD	FLAT:?SetItemType@ioWeaponItem@@UAEXXZ
	DD	FLAT:?UpdateExtraData@ioJackItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckWeaponDefenseState@ioItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckWoundedState@ioItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetVisible@ioItem@@UAEXPAVioBaseChar@@_N@Z
	DD	FLAT:?UpdateSkillGauge@ioItem@@UAEXPAVioBaseChar@@M_N@Z
	DD	FLAT:?IsEnableExtraGauge@ioItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetExtraGauge@ioItem@@UAEMXZ
	DD	FLAT:?ReduceNeedGauge@ioItem@@UAEXMPAVioBaseChar@@@Z
	DD	FLAT:?GetCurBullet@ioJackItem@@UAEHXZ
	DD	FLAT:?GetMaxBullet@ioJackItem@@UAEHXZ
	DD	FLAT:?SetCurBullet@ioJackItem@@UAEXH@Z
	DD	FLAT:?GetCurSecoundBullet@ioItem@@UAEHXZ
	DD	FLAT:?GetMaxSecoundBullet@ioItem@@UAEHXZ
	DD	FLAT:?SetCurSecoundBullet@ioItem@@UAEXH@Z
	DD	FLAT:?GetGrowthInfoNum@ioItem@@UBEHH@Z
	DD	FLAT:?GetGrowthInfoNumByType@ioItem@@UBEHHAAH@Z
	DD	FLAT:?ClearCurChargeRateForSkill@ioItem@@UAEXXZ
	DD	FLAT:?GetChargeDamageRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeForceRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeBlowRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeRangeRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeSpeedRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeFloatRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeScaleRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeExplosionRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeWoundedTimeRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?SetCurEquipEffect@ioItem@@UAEX_N@Z
	DD	FLAT:?SetCostume@ioItem@@UAEXH_N@Z
	DD	FLAT:??_EioJackItem@@UAEPAXI@Z
	DD	FLAT:?IsCanFire@ioAttackableItem@@UBE_NPBVioBaseChar@@H_N@Z
	DD	FLAT:?CallItemProcess@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetExtraInfoToWeapon@ioJackItem@@UAEXPAVioWeapon@@_N@Z
	DD	FLAT:?CheckChargeInfo@ioAttackableItem@@UAEXPAVioWeapon@@_N@Z
	DD	FLAT:?SetExtendDefenseState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckExtendDefenseState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckDefenseMoveAniState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetDodgeDefenseState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckDodgeDefenseState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ApplyDodgeDefenseState@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?SetDefenseAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckDefenseAttackState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ApplyDefenseAttackState@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?SetExtendDashState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckExtendDashState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetNormalAttack@ioJackItem@@UAEXPAVioBaseChar@@H@Z
	DD	FLAT:?CheckNormalAttack@ioJackItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetJumpAttack@ioJackItem@@UAE_NPAVioBaseChar@@HMW4AttackType@@@Z
	DD	FLAT:?CheckJumpAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetJumpReloadState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetJumpReload@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckJumpReloadState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckJumpReloadReserve@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessJumpReloadState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ApplyJumpReload@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?OnItemGaugeOK@ioJackItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?OnItemGaugeCancel@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?OnEndExtendDefense@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?OnEndNormalAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?OnEndExtendAttack@ioAttackableItem@@UAEXPAVioBaseChar@@_N@Z
	DD	FLAT:?OnEndExtendJump@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?FillNormalAttackExtraInfo@ioAttackableItem@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyNormalAttackExtraInfo@ioAttackableItem@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?CheckOnHand@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?CheckAimState@ioAttackableItem@@UAE_N_N@Z
	DD	FLAT:?SetAimState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckLanding@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetNoneState@ioAttackableItem@@UAEXPAVioBaseChar@@H@Z
	DD	FLAT:?CheckExtendDefenseEnable@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsChargeAttackState@ioJackItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsMoveAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanUpdateGauge@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsNoGhostWalk@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableAttackDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z
	DD	FLAT:?IsEnableItemDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z
	DD	FLAT:?IsEnableAttackRotateCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableChargeDefenseCheck@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?CheckAimJumpState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?GetJumppingAnimation@ioAttackableItem@@UBEABVioHashString@@XZ
	DD	FLAT:?GetExtendJumppingAnimation@ioAttackableItem@@UBEABVioHashString@@XZ
	DD	FLAT:?CheckRetreatState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetNextItemState@ioAttackableItem@@UAEXPAVioBaseChar@@0PAVioWeapon@@_NM@Z
	DD	FLAT:?WeaponWounded@ioWeaponItem@@UAEXPAVioWeapon@@PAVioBaseChar@@@Z
	DD	FLAT:?WeaponMapColDead@ioAttackableItem@@UAEXPAVioWeapon@@@Z
	DD	FLAT:?SetDefenceCounterState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsUseDefenceCounterAttack@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?ProcessDefenceCounterAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsUseDefenceCounterAttackEndDash@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?ProcessExtraJump@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetEndGrappling@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ClearKeyReserve@ioAttackableItem@@MAEXXZ
	DD	FLAT:?CheckReserve@ioAttackableItem@@MAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessReserveKeyInput@ioAttackableItem@@MAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetJumpState@ioAttackableItem@@UAEXXZ
	DD	FLAT:?SetJumpping@ioAttackableItem@@UAEXPAVioBaseChar@@_N@Z
	DD	FLAT:?ProcessJumpping@ioAttackableItem@@UAEXPAVioBaseChar@@M@Z
	DD	FLAT:?ProcessJumppingByNoNeedProcess@ioAttackableItem@@UAEXPAVioBaseChar@@M@Z
	DD	FLAT:?ProcessLanding@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessJumpAttack@ioJackItem@@UAEXPAVioBaseChar@@M@Z
	DD	FLAT:?ProcessAimJump@ioAttackableItem@@UAE_NPAVioBaseChar@@M@Z
	DD	FLAT:?ApplyJump@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?ApplyDash@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?ApplyCounterAttack@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?CheckComboJumpAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetFlashJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetComboFlashAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetCollectJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetPowerChargeJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetAttackSpeedRate@ioAttackableItem@@UBEMXZ
	DD	FLAT:?GetExtraJumpSpeedRate@ioAttackableItem@@UBEMABUD3DXVECTOR3@@ABUD3DXQUATERNION@@@Z
	DD	FLAT:?IsEnableExtendJump@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?RecevieExtendJumpUse@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?HasAniFile@ioAttackableItem@@UBE_NW4AttackType@@H@Z
	DD	FLAT:?HasEndAniFile@ioAttackableItem@@UBE_NW4AttackType@@H@Z
	DD	FLAT:?GetAttackAttribute@ioAttackableItem@@UBEPBUAttackAttribute@@W4AttackType@@H@Z
	DD	FLAT:?GetAniFile@ioAttackableItem@@UBEABVioHashString@@W4AttackType@@H@Z
	DD	FLAT:?GetAttackAniRate@ioAttackableItem@@UBEMW4AttackType@@H@Z
	DD	FLAT:?GetEndAniFile@ioAttackableItem@@UBEABVioHashString@@W4AttackType@@H@Z
	DD	FLAT:?GetAttackEndAniRate@ioAttackableItem@@UBEMW4AttackType@@H@Z
	DD	FLAT:?GetAttackAttributeIdx@ioAttackableItem@@UBEABV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@W4AttackType@@H@Z
	DD	FLAT:?GetForceInfoList@ioAttackableItem@@UBEABV?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@W4AttackType@@H@Z
	DD	FLAT:?GetAttackPreDelay@ioAttackableItem@@UBEKW4AttackType@@H@Z
	DD	FLAT:?GetAttackAnimationDelay@ioAttackableItem@@UBEKW4AttackType@@H@Z
	DD	FLAT:?GetMaxCombo@ioAttackableItem@@UBEHXZ
	DD	FLAT:?GetExtraDashAttackMax@ioAttackableItem@@UBEHXZ
	DD	FLAT:?HasJumpEndAnimation@ioAttackableItem@@UBE_N_NPAVioBaseChar@@@Z
	DD	FLAT:?GetJumpEndAnimation@ioAttackableItem@@UBEABVioHashString@@_NPAVioBaseChar@@@Z
	DD	FLAT:?ClearCancelInfo@ioAttackableItem@@MAEXXZ
	DD	FLAT:?CheckCancelReserve@ioAttackableItem@@MAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetCurAttackAniForInputJump@ioAttackableItem@@MAEXABVioHashString@@M@Z
	DD	FLAT:?ProcessCancel@ioJackItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?ProcessCancelBySpeicalDash@ioAttackableItem@@MAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetCurAttackAniForInputDashS@ioAttackableItem@@UAEXABVioHashString@@M@Z
	DD	FLAT:?CheckCancelReserveByConditionalSpecialDash@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsConditionalSpecialDashReserve@ioJackItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetChangeConditionalSpecialDash@ioAttackableItem@@UAEXPAVioBaseChar@@W4DirKeyInput@ioUserKeyInput@@H@Z
	DD	FLAT:?CheckChangeWereWolfState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetChangeWereWolfState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckReleaseWereWolfState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?ReleseWereWolfState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ReleseWereWolfStateByOwner@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IncreaseChangeDamage@ioAttackableItem@@UAEXMH_N@Z
	DD	FLAT:?IncreaseChangeDamageByWeapon@ioAttackableItem@@UAEXM@Z
	DD	FLAT:?CheckIncreaseChangeDamage@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?DecreaseChangeDamage@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableActionStopDelay@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?SetExtraGaugeTypeByWeapon@ioAttackableItem@@UAEXPAVioBaseChar@@HHM@Z
	DD	FLAT:?SetUseExtraGauge@ioJackItem@@UAEXM@Z
	DD	FLAT:?InitExtraGauge@ioAttackableItem@@UAEXXZ
	DD	FLAT:?MaxExtraGauge@ioAttackableItem@@UAEXXZ
	DD	FLAT:?GetMaxExtraGauge@ioAttackableItem@@UAEMXZ
	DD	FLAT:?GetCurExtraGauge@ioAttackableItem@@UAEMXZ
	DD	FLAT:?SetCurExtraGauge@ioAttackableItem@@UAEXM@Z
	DD	FLAT:?GetAutoTargetValue@ioAttackableItem@@UAEXPAVioBaseChar@@AAM11W4AutoTargetType@@@Z
	DD	FLAT:?ClearAirJump@ioAttackableItem@@UAEXXZ
	DD	FLAT:?SetAirJump@ioAttackableItem@@UAEXPAVioBaseChar@@HM@Z
	DD	FLAT:?CheckAirJump@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsAutoTarget@ioAttackableItem@@UBE_NXZ
	DD	FLAT:?EquipObjectItemByAttakable@ioAttackableItem@@UAEXPAVioBaseChar@@PAVioItem@@@Z
	DD	FLAT:?ReleaseObjectItemByAttack@ioAttackableItem@@UAEXPAVioBaseChar@@PAVioItem@@@Z
	DD	FLAT:?IsBuffFlyChange@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetAttackStateText@ioJackItem@@UBEPBDXZ
	DD	FLAT:?SetJumpLandingExtraState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsWoundAfterUseExtendState@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?CheckWoundAfterUseExtendState@ioAttackableItem@@UAE_NPAVioBaseChar@@W4BlowTargetType@@@Z
	DD	FLAT:?IsCharSkipState@ioAttackableItem@@UAE_NPBVioBaseChar@@@Z
	DD	FLAT:?ReleaseObjectState@ioWeaponItem@@UAEXPAVioBaseChar@@PAVioObjectItem@@@Z
	DD	FLAT:?IsCmdCheckEnableTime@ioWeaponItem@@UAE_NXZ
	DD	FLAT:?IsCmdSuccess@ioWeaponItem@@UAE_NXZ
	DD	FLAT:?IsOneTimeWeaponItem@ioWeaponItem@@UBE_NXZ
	DD	FLAT:?GetEquipMesh@ioWeaponItem@@UBEABVioHashString@@PAVioBaseChar@@@Z
	DD	FLAT:?IsCanSendControl@ioWeaponItem@@UBE_NXZ
	DD	FLAT:?GetSubType@ioJackItem@@UBE?AW4WeaponSubType@ioWeaponItem@@XZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioJackItem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioJackItem@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioJackItem@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioJackItem@@QAE@XZ$2
__ehfuncinfo$??0ioJackItem@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0ioJackItem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iojackitem.cpp
xdata$x	ENDS
;	COMDAT ??0ioJackItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioJackItem@@QAE@XZ PROC				; ioJackItem::ioJackItem, COMDAT
; _this$ = ecx

; 12   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioJackItem@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioWeaponItem@@QAE@XZ	; ioWeaponItem::ioWeaponItem
  00016	33 c9		 xor	 ecx, ecx
  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioJackItem@@6B@
  0001e	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ecx
  00021	89 8e 58 19 00
	00		 mov	 DWORD PTR [esi+6488], ecx
  00027	89 8e 5c 19 00
	00		 mov	 DWORD PTR [esi+6492], ecx
  0002d	89 8e 60 19 00
	00		 mov	 DWORD PTR [esi+6496], ecx
  00033	8d 8e 68 19 00
	00		 lea	 ecx, DWORD PTR [esi+6504]
  00039	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0003d	e8 00 00 00 00	 call	 ??0AttackAttribute@@QAE@XZ ; AttackAttribute::AttackAttribute

; 13   : 	Init();

  00042	8b ce		 mov	 ecx, esi
  00044	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00048	e8 00 00 00 00	 call	 ?Init@ioJackItem@@IAEXXZ ; ioJackItem::Init

; 14   : }

  0004d	8b c6		 mov	 eax, esi
  0004f	e8 00 00 00 00	 call	 __EH_epilog3
  00054	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioJackItem@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioWeaponItem@@UAE@XZ	; ioWeaponItem::~ioWeaponItem
__unwindfunclet$??0ioJackItem@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 58 19 00
	00		 add	 ecx, 6488		; 00001958H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
__unwindfunclet$??0ioJackItem@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 68 19 00
	00		 add	 ecx, 6504		; 00001968H
  0001f	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__ehhandler$??0ioJackItem@@QAE@XZ:
  00024	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00028	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002b	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioJackItem@@QAE@XZ
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioJackItem@@QAE@XZ ENDP				; ioJackItem::ioJackItem
PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioitem.h
_TEXT	ENDS
;	COMDAT ?IsEnableExtraGauge@ioItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?IsEnableExtraGauge@ioItem@@UAE_NPAVioBaseChar@@@Z PROC	; ioItem::IsEnableExtraGauge, COMDAT
; _this$ = ecx

; 375  : 	virtual bool IsEnableExtraGauge( ioBaseChar *pChar ) { return true; }

  00000	b0 01		 mov	 al, 1
  00002	c2 04 00	 ret	 4
?IsEnableExtraGauge@ioItem@@UAE_NPAVioBaseChar@@@Z ENDP	; ioItem::IsEnableExtraGauge
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetExtraGauge@ioItem@@UAEMXZ
_TEXT	SEGMENT
tv64 = -4						; size = 4
?GetExtraGauge@ioItem@@UAEMXZ PROC			; ioItem::GetExtraGauge, COMDAT
; _this$ = ecx

; 376  : 	virtual float GetExtraGauge() { return FLOAT1; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	b8 01 00 00 00	 mov	 eax, 1
  00009	89 45 fc	 mov	 DWORD PTR tv64[ebp], eax
  0000c	db 45 fc	 fild	 DWORD PTR tv64[ebp]
  0000f	85 c0		 test	 eax, eax
  00011	79 06		 jns	 SHORT $LN5@GetExtraGa
  00013	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN5@GetExtraGa:
  00019	c9		 leave
  0001a	c3		 ret	 0
?GetExtraGauge@ioItem@@UAEMXZ ENDP			; ioItem::GetExtraGauge
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackableitem.h
_TEXT	ENDS
;	COMDAT ?CheckOnHand@ioAttackableItem@@UAE_NXZ
_TEXT	SEGMENT
?CheckOnHand@ioAttackableItem@@UAE_NXZ PROC		; ioAttackableItem::CheckOnHand, COMDAT
; _this$ = ecx

; 429  : 	virtual bool CheckOnHand() { return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?CheckOnHand@ioAttackableItem@@UAE_NXZ ENDP		; ioAttackableItem::CheckOnHand
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?CheckAimState@ioAttackableItem@@UAE_N_N@Z
_TEXT	SEGMENT
_bAimMove$ = 8						; size = 1
?CheckAimState@ioAttackableItem@@UAE_N_N@Z PROC		; ioAttackableItem::CheckAimState, COMDAT
; _this$ = ecx

; 430  : 	virtual bool CheckAimState( bool bAimMove = false ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?CheckAimState@ioAttackableItem@@UAE_N_N@Z ENDP		; ioAttackableItem::CheckAimState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?SetAimState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?SetAimState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioAttackableItem::SetAimState, COMDAT
; _this$ = ecx

; 431  : 	virtual bool SetAimState( ioBaseChar *pChar ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?SetAimState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioAttackableItem::SetAimState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?CheckExtendDefenseEnable@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?CheckExtendDefenseEnable@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioAttackableItem::CheckExtendDefenseEnable, COMDAT
; _this$ = ecx

; 434  : 	virtual bool CheckExtendDefenseEnable( ioBaseChar *pChar ) { return true; }

  00000	b0 01		 mov	 al, 1
  00002	c2 04 00	 ret	 4
?CheckExtendDefenseEnable@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioAttackableItem::CheckExtendDefenseEnable
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsMoveAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsMoveAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioAttackableItem::IsMoveAttackState, COMDAT
; _this$ = ecx

; 437  : 	virtual bool IsMoveAttackState( ioBaseChar *pOwner ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsMoveAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioAttackableItem::IsMoveAttackState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsNoGhostWalk@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsNoGhostWalk@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioAttackableItem::IsNoGhostWalk, COMDAT
; _this$ = ecx

; 439  : 	virtual bool IsNoGhostWalk( ioBaseChar *pOwner ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsNoGhostWalk@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioAttackableItem::IsNoGhostWalk
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsEnableAttackDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_bCheck$ = 12						; size = 1
?IsEnableAttackDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z PROC ; ioAttackableItem::IsEnableAttackDashCheck, COMDAT
; _this$ = ecx

; 441  : 	virtual bool IsEnableAttackDashCheck( ioBaseChar *pOwner, bool bCheck ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 08 00	 ret	 8
?IsEnableAttackDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z ENDP ; ioAttackableItem::IsEnableAttackDashCheck
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsEnableItemDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_bCheck$ = 12						; size = 1
?IsEnableItemDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z PROC ; ioAttackableItem::IsEnableItemDashCheck, COMDAT
; _this$ = ecx

; 442  : 	virtual bool IsEnableItemDashCheck( ioBaseChar *pOwner, bool bCheck ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 08 00	 ret	 8
?IsEnableItemDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z ENDP ; ioAttackableItem::IsEnableItemDashCheck
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsEnableAttackRotateCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsEnableAttackRotateCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioAttackableItem::IsEnableAttackRotateCheck, COMDAT
; _this$ = ecx

; 443  : 	virtual bool IsEnableAttackRotateCheck( ioBaseChar *pOwner ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsEnableAttackRotateCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioAttackableItem::IsEnableAttackRotateCheck
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsEnableChargeDefenseCheck@ioAttackableItem@@UAE_NXZ
_TEXT	SEGMENT
?IsEnableChargeDefenseCheck@ioAttackableItem@@UAE_NXZ PROC ; ioAttackableItem::IsEnableChargeDefenseCheck, COMDAT
; _this$ = ecx

; 444  : 	virtual bool IsEnableChargeDefenseCheck() { return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsEnableChargeDefenseCheck@ioAttackableItem@@UAE_NXZ ENDP ; ioAttackableItem::IsEnableChargeDefenseCheck
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsUseDefenceCounterAttackEndDash@ioAttackableItem@@UAE_NXZ
_TEXT	SEGMENT
?IsUseDefenceCounterAttackEndDash@ioAttackableItem@@UAE_NXZ PROC ; ioAttackableItem::IsUseDefenceCounterAttackEndDash, COMDAT
; _this$ = ecx

; 464  : 	virtual bool IsUseDefenceCounterAttackEndDash() { return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsUseDefenceCounterAttackEndDash@ioAttackableItem@@UAE_NXZ ENDP ; ioAttackableItem::IsUseDefenceCounterAttackEndDash
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsAutoTarget@ioAttackableItem@@UBE_NXZ
_TEXT	SEGMENT
?IsAutoTarget@ioAttackableItem@@UBE_NXZ PROC		; ioAttackableItem::IsAutoTarget, COMDAT
; _this$ = ecx

; 707  : 	virtual bool IsAutoTarget() const { return true; }

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?IsAutoTarget@ioAttackableItem@@UBE_NXZ ENDP		; ioAttackableItem::IsAutoTarget
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsWoundAfterUseExtendState@ioAttackableItem@@UAE_NXZ
_TEXT	SEGMENT
?IsWoundAfterUseExtendState@ioAttackableItem@@UAE_NXZ PROC ; ioAttackableItem::IsWoundAfterUseExtendState, COMDAT
; _this$ = ecx

; 724  : 	virtual bool IsWoundAfterUseExtendState(){ return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsWoundAfterUseExtendState@ioAttackableItem@@UAE_NXZ ENDP ; ioAttackableItem::IsWoundAfterUseExtendState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?CheckWoundAfterUseExtendState@ioAttackableItem@@UAE_NPAVioBaseChar@@W4BlowTargetType@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_eType$ = 12						; size = 4
?CheckWoundAfterUseExtendState@ioAttackableItem@@UAE_NPAVioBaseChar@@W4BlowTargetType@@@Z PROC ; ioAttackableItem::CheckWoundAfterUseExtendState, COMDAT
; _this$ = ecx

; 725  : 	virtual bool CheckWoundAfterUseExtendState( ioBaseChar* pOwner, BlowTargetType eType ){ return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 08 00	 ret	 8
?CheckWoundAfterUseExtendState@ioAttackableItem@@UAE_NPAVioBaseChar@@W4BlowTargetType@@@Z ENDP ; ioAttackableItem::CheckWoundAfterUseExtendState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsCharSkipState@ioAttackableItem@@UAE_NPBVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsCharSkipState@ioAttackableItem@@UAE_NPBVioBaseChar@@@Z PROC ; ioAttackableItem::IsCharSkipState, COMDAT
; _this$ = ecx

; 728  : 	virtual bool IsCharSkipState( const ioBaseChar* pOwner ){ return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsCharSkipState@ioAttackableItem@@UAE_NPBVioBaseChar@@@Z ENDP ; ioAttackableItem::IsCharSkipState
_TEXT	ENDS
PUBLIC	??0ioJackItem@@QAE@ABV0@@Z			; ioJackItem::ioJackItem
EXTRN	??0ioWeaponItem@@QAE@ABV0@@Z:PROC		; ioWeaponItem::ioWeaponItem
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iojackitem.cpp
xdata$x	SEGMENT
__unwindtable$??0ioJackItem@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioJackItem@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioJackItem@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioJackItem@@QAE@ABV0@@Z$2
__ehfuncinfo$??0ioJackItem@@QAE@ABV0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0ioJackItem@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioJackItem@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioJackItem@@QAE@ABV0@@Z PROC				; ioJackItem::ioJackItem, COMDAT
; _this$ = ecx

; 21   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioJackItem@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0ioWeaponItem@@QAE@ABV0@@Z ; ioWeaponItem::ioWeaponItem
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioJackItem@@6B@
  00024	d9 87 54 19 00
	00		 fld	 DWORD PTR [edi+6484]
  0002a	8d 87 58 19 00
	00		 lea	 eax, DWORD PTR [edi+6488]
  00030	d9 9e 54 19 00
	00		 fstp	 DWORD PTR [esi+6484]
  00036	50		 push	 eax
  00037	8d 8e 58 19 00
	00		 lea	 ecx, DWORD PTR [esi+6488]
  0003d	e8 00 00 00 00	 call	 ??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
  00042	81 c7 68 19 00
	00		 add	 edi, 6504		; 00001968H
  00048	57		 push	 edi
  00049	8d 8e 68 19 00
	00		 lea	 ecx, DWORD PTR [esi+6504]
  0004f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00053	e8 00 00 00 00	 call	 ??0AttackAttribute@@QAE@ABU0@@Z

; 22   : 	Init();

  00058	8b ce		 mov	 ecx, esi
  0005a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0005e	e8 00 00 00 00	 call	 ?Init@ioJackItem@@IAEXXZ ; ioJackItem::Init

; 23   : }

  00063	8b c6		 mov	 eax, esi
  00065	e8 00 00 00 00	 call	 __EH_epilog3
  0006a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioJackItem@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioWeaponItem@@UAE@XZ	; ioWeaponItem::~ioWeaponItem
__unwindfunclet$??0ioJackItem@@QAE@ABV0@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 58 19 00
	00		 add	 ecx, 6488		; 00001958H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
__unwindfunclet$??0ioJackItem@@QAE@ABV0@@Z$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 68 19 00
	00		 add	 ecx, 6504		; 00001968H
  0001f	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__ehhandler$??0ioJackItem@@QAE@ABV0@@Z:
  00024	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00028	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002b	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioJackItem@@QAE@ABV0@@Z
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioJackItem@@QAE@ABV0@@Z ENDP				; ioJackItem::ioJackItem
PUBLIC	??1ioJackItem@@UAE@XZ				; ioJackItem::~ioJackItem
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??1ioJackItem@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioJackItem@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioJackItem@@UAE@XZ$1
__ehfuncinfo$??1ioJackItem@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1ioJackItem@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iojackitem.cpp
xdata$x	ENDS
;	COMDAT ??1ioJackItem@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioJackItem@@UAE@XZ PROC				; ioJackItem::~ioJackItem, COMDAT
; _this$ = ecx

; 26   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioJackItem@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioJackItem@@6B@

; 27   : }

  00017	8d 8e 68 19 00
	00		 lea	 ecx, DWORD PTR [esi+6504]
  0001d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00024	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  00029	8d 8e 58 19 00
	00		 lea	 ecx, DWORD PTR [esi+6488]
  0002f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00033	e8 00 00 00 00	 call	 ?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
  00038	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0003c	8b ce		 mov	 ecx, esi
  0003e	e8 00 00 00 00	 call	 ??1ioWeaponItem@@UAE@XZ	; ioWeaponItem::~ioWeaponItem
  00043	e8 00 00 00 00	 call	 __EH_epilog3
  00048	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioJackItem@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioWeaponItem@@UAE@XZ	; ioWeaponItem::~ioWeaponItem
__unwindfunclet$??1ioJackItem@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 58 19 00
	00		 add	 ecx, 6488		; 00001958H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
__ehhandler$??1ioJackItem@@UAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioJackItem@@UAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioJackItem@@UAE@XZ ENDP				; ioJackItem::~ioJackItem
PUBLIC	??_C@_0O@MIFKMNNO@charge_attack?$AA@		; `string'
PUBLIC	_this$GSCopy$
EXTRN	?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z:PROC ; LoadAttackAttribute
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	?LoadProperty@ioWeaponItem@@UAEXAAVioINILoader@@@Z:PROC ; ioWeaponItem::LoadProperty
;	COMDAT ??_C@_0O@MIFKMNNO@charge_attack?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_0O@MIFKMNNO@charge_attack?$AA@ DB 'charge_attack', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadProperty@ioJackItem@@UAEXAAVioINILoader@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadProperty@ioJackItem@@UAEXAAVioINILoader@@@Z$0
__ehfuncinfo$?LoadProperty@ioJackItem@@UAEXAAVioINILoader@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadProperty@ioJackItem@@UAEXAAVioINILoader@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iojackitem.cpp
xdata$x	ENDS
;	COMDAT ?LoadProperty@ioJackItem@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
$T554589 = -332						; size = 16
_nPreCount$ = -316					; size = 4
_this$GSCopy$ = -312					; size = 4
_szBuf$ = -308						; size = 260
___encStr$548096 = -48					; size = 25
__k$554606 = -40					; size = 17
__k$554731 = -36					; size = 10
__$EHRec$ = -12						; size = 12
_rkLoader$ = 8						; size = 4
?LoadProperty@ioJackItem@@UAEXAAVioINILoader@@@Z PROC	; ioJackItem::LoadProperty, COMDAT
; _this$ = ecx

; 32   : {

  00000	68 40 01 00 00	 push	 320			; 00000140H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?LoadProperty@ioJackItem@@UAEXAAVioINILoader@@@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b 75 08	 mov	 esi, DWORD PTR _rkLoader$[ebp]
  00012	8b f9		 mov	 edi, ecx

; 33   : 	ioWeaponItem::LoadProperty( rkLoader );

  00014	56		 push	 esi

; 41   : 	{
; 42   : 		wsprintf_e( szBuf, "attack_ready_animation%d", i+1 );

  00015	89 bd c8 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  0001b	e8 00 00 00 00	 call	 ?LoadProperty@ioWeaponItem@@UAEXAAVioINILoader@@@Z ; ioWeaponItem::LoadProperty
  00020	33 db		 xor	 ebx, ebx
  00022	6a 04		 push	 4
  00024	c7 45 d8 83 89
	8e 8e		 mov	 DWORD PTR __k$554606[ebp], -1903261309 ; 8e8e8983H
  0002b	c7 45 dc b2 89
	93 9e		 mov	 DWORD PTR __k$554606[ebp+4], -1634498126 ; 9e9389b2H
  00032	c7 45 e0 9f 8d
	b4 8d		 mov	 DWORD PTR __k$554606[ebp+8], -1917547105 ; 8db48d9fH
  00039	c7 45 e4 8c 99
	8c 8f		 mov	 DWORD PTR __k$554606[ebp+12], -1886611060 ; 8f8c998cH
  00040	8d 45 d8	 lea	 eax, DWORD PTR __k$554606[ebp]
  00043	88 5d e8	 mov	 BYTE PTR __k$554606[ebp+16], bl
  00046	59		 pop	 ecx
$LL209@LoadProper:

; 34   : 
; 35   : 	char szBuf[MAX_PATH];
; 36   : 
; 37   : 	m_fNeedGauge = rkLoader.LoadFloat_e( "need_extra_gauge", 100.0f );

  00047	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0004d	83 c0 04	 add	 eax, 4
  00050	49		 dec	 ecx
  00051	75 f4		 jne	 SHORT $LL209@LoadProper
  00053	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0005b	51		 push	 ecx
  0005c	8d 45 d8	 lea	 eax, DWORD PTR __k$554606[ebp]
  0005f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00064	50		 push	 eax
  00065	8b ce		 mov	 ecx, esi
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0006d	d9 9f 54 19 00
	00		 fstp	 DWORD PTR [edi+6484]
  00073	6a 02		 push	 2

; 38   : 
; 39   : 	int nPreCount = rkLoader.LoadInt_e( "max_combo", 0 );

  00075	c7 45 dc 80 8d
	93 b5		 mov	 DWORD PTR __k$554731[ebp], -1248621184 ; b5938d80H
  0007c	c7 45 e0 8e 83
	86 88		 mov	 DWORD PTR __k$554731[ebp+4], -2004450418 ; 8886838eH
  00083	8d 45 dc	 lea	 eax, DWORD PTR __k$554731[ebp]
  00086	66 c7 45 e4 82
	00		 mov	 WORD PTR __k$554731[ebp+8], 130 ; 00000082H
  0008c	59		 pop	 ecx
$LL315@LoadProper:
  0008d	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00093	83 c0 04	 add	 eax, 4
  00096	49		 dec	 ecx
  00097	75 f4		 jne	 SHORT $LL315@LoadProper
  00099	80 75 e4 ed	 xor	 BYTE PTR __k$554731[ebp+8], -19 ; ffffffedH
  0009d	53		 push	 ebx
  0009e	8d 45 dc	 lea	 eax, DWORD PTR __k$554731[ebp]
  000a1	50		 push	 eax
  000a2	8b ce		 mov	 ecx, esi
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 40   : 	for( int i=0; i<nPreCount; ++i )

  000aa	33 c9		 xor	 ecx, ecx
  000ac	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _nPreCount$[ebp], eax
  000b2	3b c3		 cmp	 eax, ebx
  000b4	0f 8e c3 00 00
	00		 jle	 $LN100@LoadProper
$LN102@LoadProper:

; 38   : 
; 39   : 	int nPreCount = rkLoader.LoadInt_e( "max_combo", 0 );

  000ba	6a 06		 push	 6

; 41   : 	{
; 42   : 		wsprintf_e( szBuf, "attack_ready_animation%d", i+1 );

  000bc	c7 45 d0 8c 98
	9f 8b		 mov	 DWORD PTR ___encStr$548096[ebp], -1952474996 ; 8b9f988cH
  000c3	c7 45 d4 8e 87
	b4 98		 mov	 DWORD PTR ___encStr$548096[ebp+4], -1732999282 ; 98b4878eH
  000ca	c7 45 d8 88 8d
	8f 93		 mov	 DWORD PTR ___encStr$548096[ebp+8], -1819308664 ; 938f8d88H
  000d1	c7 45 dc b2 8d
	85 83		 mov	 DWORD PTR ___encStr$548096[ebp+12], -2088399438 ; 83858db2H
  000d8	c7 45 e0 80 8d
	9f 83		 mov	 DWORD PTR ___encStr$548096[ebp+16], -2086695552 ; 839f8d80H
  000df	c7 45 e4 82 82
	ce 8e		 mov	 DWORD PTR ___encStr$548096[ebp+20], -1899068798 ; 8ece8282H
  000e6	8d 45 d0	 lea	 eax, DWORD PTR ___encStr$548096[ebp]
  000e9	88 5d e8	 mov	 BYTE PTR ___encStr$548096[ebp+24], bl
  000ec	5a		 pop	 edx
$LL323@LoadProper:
  000ed	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000f3	83 c0 04	 add	 eax, 4
  000f6	4a		 dec	 edx
  000f7	75 f4		 jne	 SHORT $LL323@LoadProper
  000f9	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
  000fc	57		 push	 edi
  000fd	8d 45 d0	 lea	 eax, DWORD PTR ___encStr$548096[ebp]
  00100	50		 push	 eax
  00101	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00107	50		 push	 eax
  00108	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  0010e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 43   : 		rkLoader.LoadString( szBuf, "", szBuf, MAX_PATH );

  00111	68 04 01 00 00	 push	 260			; 00000104H
  00116	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0011c	50		 push	 eax
  0011d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00122	50		 push	 eax
  00123	8b ce		 mov	 ecx, esi
  00125	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 44   : 		m_szPreGatherAniList.push_back( szBuf );

  0012b	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00131	50		 push	 eax
  00132	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR $T554589[ebp]
  00138	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0013e	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00144	8d 85 b4 fe ff
	ff		 lea	 eax, DWORD PTR $T554589[ebp]
  0014a	50		 push	 eax
  0014b	81 c1 58 19 00
	00		 add	 ecx, 6488		; 00001958H
  00151	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00154	e8 00 00 00 00	 call	 ?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::push_back
  00159	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0015d	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR $T554589[ebp]
  00163	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00169	8b cf		 mov	 ecx, edi
  0016b	3b 8d c4 fe ff
	ff		 cmp	 ecx, DWORD PTR _nPreCount$[ebp]
  00171	0f 8c 43 ff ff
	ff		 jl	 $LN102@LoadProper

; 40   : 	for( int i=0; i<nPreCount; ++i )

  00177	8b bd c8 fe ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
$LN100@LoadProper:

; 45   : 	}
; 46   : 	
; 47   : 	LoadAttackAttribute( "charge_attack", m_ChargeAttackAttribute, rkLoader );	

  0017d	56		 push	 esi
  0017e	81 c7 68 19 00
	00		 add	 edi, 6504		; 00001968H
  00184	57		 push	 edi
  00185	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MIFKMNNO@charge_attack?$AA@
  0018a	e8 00 00 00 00	 call	 ?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z ; LoadAttackAttribute
  0018f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 48   : }

  00192	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00197	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadProperty@ioJackItem@@UAEXAAVioINILoader@@@Z$0:
  00000	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR $T554589[ebp]
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?LoadProperty@ioJackItem@@UAEXAAVioINILoader@@@Z:
  0000c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00010	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00013	8b 8a b0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-336]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadProperty@ioJackItem@@UAEXAAVioINILoader@@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadProperty@ioJackItem@@UAEXAAVioINILoader@@@Z ENDP	; ioJackItem::LoadProperty
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioJackItem@@UAEPAVioItem@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioJackItem@@UAEPAVioItem@@XZ$0
__ehfuncinfo$?Clone@ioJackItem@@UAEPAVioItem@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioJackItem@@UAEPAVioItem@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioJackItem@@UAEPAVioItem@@XZ
_TEXT	SEGMENT
$T554879 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioJackItem@@UAEPAVioItem@@XZ PROC		; ioJackItem::Clone, COMDAT
; _this$ = ecx

; 51   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioJackItem@@UAEPAVioItem@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 52   : 	return new ioJackItem( *this );

  0000e	68 c8 19 00 00	 push	 6600			; 000019c8H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T554879[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioJackItem@@QAE@ABV0@@Z ; ioJackItem::ioJackItem
$LN3@Clone:

; 53   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioJackItem@@UAEPAVioItem@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T554879[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioJackItem@@UAEPAVioItem@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioJackItem@@UAEPAVioItem@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioJackItem@@UAEPAVioItem@@XZ ENDP		; ioJackItem::Clone
; Function compile flags: /Ogsp
;	COMDAT ??_GioJackItem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioJackItem@@UAEPAXI@Z PROC				; ioJackItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioJackItem@@UAE@XZ	; ioJackItem::~ioJackItem
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@4
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@4:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioJackItem@@UAEPAXI@Z ENDP				; ioJackItem::`scalar deleting destructor'
_TEXT	ENDS
END
