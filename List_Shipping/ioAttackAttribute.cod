; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioAttackAttribute.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBE_NPBUWeaponInfo@@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Inside
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBE_NPBUWeaponInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBE_NPBUWeaponInfo@@@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBE_NPBUWeaponInfo@@@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXPAUWeaponInfo@@0@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXPAUWeaponInfo@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXPAUWeaponInfo@@0@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXPAUWeaponInfo@@0@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Orphan_range
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBE_NPBUForceInfo@@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBE_NPBUForceInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBE_NPBUForceInfo@@@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside@2
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside@2
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside@2
$LN3@Inside@2:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside@2:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBE_NPBUForceInfo@@@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXPAUForceInfo@@0@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXPAUForceInfo@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXPAUForceInfo@@0@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXPAUForceInfo@@0@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUWeaponInfo@@@std@@YAPBUWeaponInfo@@ABU1@@Z ; std::addressof<WeaponInfo const >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBUWeaponInfo@@@std@@YAPBUWeaponInfo@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUWeaponInfo@@@std@@YAPBUWeaponInfo@@ABU1@@Z PROC ; std::addressof<WeaponInfo const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUWeaponInfo@@@std@@YAPBUWeaponInfo@@ABU1@@Z ENDP ; std::addressof<WeaponInfo const >
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUForceInfo@@@std@@YAPBUForceInfo@@ABU1@@Z ; std::addressof<ForceInfo const >
; Function compile flags: /Ogsp
;	COMDAT ??$addressof@$$CBUForceInfo@@@std@@YAPBUForceInfo@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUForceInfo@@@std@@YAPBUForceInfo@@ABU1@@Z PROC ; std::addressof<ForceInfo const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUForceInfo@@@std@@YAPBUForceInfo@@ABU1@@Z ENDP ; std::addressof<ForceInfo const >
_TEXT	ENDS
PUBLIC	??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z ; std::forward<WeaponInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z PROC ; std::forward<WeaponInfo const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z ENDP ; std::forward<WeaponInfo const &>
_TEXT	ENDS
PUBLIC	??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z ; std::forward<ForceInfo const &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z PROC ; std::forward<ForceInfo const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z ENDP ; std::forward<ForceInfo const &>
_TEXT	ENDS
PUBLIC	??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z ; std::_Construct<ForceInfo,ForceInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z PROC ; std::_Construct<ForceInfo,ForceInfo const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN3@Construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN3@Construct:
  00013	5f		 pop	 edi

; 49   : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z ENDP ; std::_Construct<ForceInfo,ForceInfo const &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUWeaponInfo@@@std@@YAPAUWeaponInfo@@PAU1@@Z ; std::_Val_type<WeaponInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUWeaponInfo@@@std@@YAPAUWeaponInfo@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUWeaponInfo@@@std@@YAPAUWeaponInfo@@PAU1@@Z PROC ; std::_Val_type<WeaponInfo *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUWeaponInfo@@@std@@YAPAUWeaponInfo@@PAU1@@Z ENDP ; std::_Val_type<WeaponInfo *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUForceInfo@@@std@@YAPAUForceInfo@@PAU1@@Z ; std::_Val_type<ForceInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Val_type@PAUForceInfo@@@std@@YAPAUForceInfo@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUForceInfo@@@std@@YAPAUForceInfo@@PAU1@@Z PROC ; std::_Val_type<ForceInfo *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUForceInfo@@@std@@YAPAUForceInfo@@PAU1@@Z ENDP ; std::_Val_type<ForceInfo *>
_TEXT	ENDS
PUBLIC	??$forward@UWeaponInfo@@@std@@YA$$QAUWeaponInfo@@AAU1@@Z ; std::forward<WeaponInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UWeaponInfo@@@std@@YA$$QAUWeaponInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UWeaponInfo@@@std@@YA$$QAUWeaponInfo@@AAU1@@Z PROC ; std::forward<WeaponInfo>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UWeaponInfo@@@std@@YA$$QAUWeaponInfo@@AAU1@@Z ENDP ; std::forward<WeaponInfo>
_TEXT	ENDS
PUBLIC	??$forward@UForceInfo@@@std@@YA$$QAUForceInfo@@AAU1@@Z ; std::forward<ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@UForceInfo@@@std@@YA$$QAUForceInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UForceInfo@@@std@@YA$$QAUForceInfo@@AAU1@@Z PROC ; std::forward<ForceInfo>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UForceInfo@@@std@@YA$$QAUForceInfo@@AAU1@@Z ENDP ; std::forward<ForceInfo>
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	??0ForceInfo@@QAE@XZ				; ForceInfo::ForceInfo
EXTRN	__fltused:DWORD
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.h
CONST	ENDS
;	COMDAT ??0ForceInfo@@QAE@XZ
_TEXT	SEGMENT
tv134 = -4						; size = 4
??0ForceInfo@@QAE@XZ PROC				; ForceInfo::ForceInfo, COMDAT
; _this$ = ecx

; 45   : 	ForceInfo()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 46   : 	{
; 47   : 		m_fForceMovePower = 0.0f;

  00004	0f 57 c0	 xorps	 xmm0, xmm0
  00007	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 48   : 		m_fForceMoveFriction = FLOAT1;

  0000b	b8 01 00 00 00	 mov	 eax, 1
  00010	89 45 fc	 mov	 DWORD PTR tv134[ebp], eax
  00013	db 45 fc	 fild	 DWORD PTR tv134[ebp]
  00016	85 c0		 test	 eax, eax
  00018	79 06		 jns	 SHORT $LN5@ForceInfo
  0001a	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN5@ForceInfo:
  00020	d9 59 04	 fstp	 DWORD PTR [ecx+4]

; 49   : 		m_fForceAngle = 0.0f;

  00023	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 50   : 	}

  00028	8b c1		 mov	 eax, ecx
  0002a	c9		 leave
  0002b	c3		 ret	 0
??0ForceInfo@@QAE@XZ ENDP				; ForceInfo::ForceInfo
_TEXT	ENDS
PUBLIC	?Init@WeaponInfo@@QAEXXZ			; WeaponInfo::Init
; Function compile flags: /Ogsp
;	COMDAT ?Init@WeaponInfo@@QAEXXZ
_TEXT	SEGMENT
?Init@WeaponInfo@@QAEXXZ PROC				; WeaponInfo::Init, COMDAT
; _this$ = ecx

; 71   : 		m_iWeaponIdx = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 01		 mov	 DWORD PTR [ecx], eax

; 72   : 		m_iResistanceIdx = 0;

  00004	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 73   : 
; 74   : 		m_dwWoundedDuration = 0;

  00007	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 75   : 		m_dwCallTime = 0;

  0000a	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 76   : 
; 77   : 		m_bWoundedLoopAni = false;

  0000d	88 41 20	 mov	 BYTE PTR [ecx+32], al

; 78   : 
; 79   : 		m_dwDuration = 0;

  00010	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 80   : 	}

  00013	c3		 ret	 0
?Init@WeaponInfo@@QAEXXZ ENDP				; WeaponInfo::Init
_TEXT	ENDS
PUBLIC	??1WeaponInfo@@QAE@XZ				; WeaponInfo::~WeaponInfo
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1WeaponInfo@@QAE@XZ
_TEXT	SEGMENT
??1WeaponInfo@@QAE@XZ PROC				; WeaponInfo::~WeaponInfo, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??1WeaponInfo@@QAE@XZ ENDP				; WeaponInfo::~WeaponInfo
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z ; std::allocator<WeaponInfo>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z PROC ; std::allocator<WeaponInfo>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z ENDP ; std::allocator<WeaponInfo>::deallocate
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z ; std::allocator<ForceInfo>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z PROC ; std::allocator<ForceInfo>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z ENDP ; std::allocator<ForceInfo>::deallocate
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z ; std::_Ptr_cat<WeaponInfo,WeaponInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z PROC ; std::_Ptr_cat<WeaponInfo,WeaponInfo>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z ENDP ; std::_Ptr_cat<WeaponInfo,WeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z ; std::_Ptr_cat<ForceInfo,ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z PROC ; std::_Ptr_cat<ForceInfo,ForceInfo>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z ENDP ; std::_Ptr_cat<ForceInfo,ForceInfo>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 28		 push	 40			; 00000028H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 28		 push	 40			; 00000028H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::size
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::capacity
; Function compile flags: /Ogsp
;	COMDAT ?capacity@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 0c		 push	 12			; 0000000cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 0c		 push	 12			; 0000000cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::size
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Xlen
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@2:
$LN3@Xlen@2:
  0000b	cc		 int	 3
?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Xlen
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ	; std::allocator<WeaponInfo>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ PROC	; std::allocator<WeaponInfo>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ ENDP	; std::allocator<WeaponInfo>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ	; std::allocator<ForceInfo>::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ PROC	; std::allocator<ForceInfo>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ ENDP	; std::allocator<ForceInfo>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Compat
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Compat
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ; std::_Allocate<WeaponInfo>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z
_TEXT	SEGMENT
$T511360 = -12						; size = 12
$T511365 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z PROC ; std::_Allocate<WeaponInfo>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 66 66 66
	06		 cmp	 ecx, 107374182		; 06666666H
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	6b c9 28	 imul	 ecx, 40			; 00000028H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T511365[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T511365[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T511360[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T511360[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T511360[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ENDP ; std::_Allocate<WeaponInfo>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ; std::_Allocate<ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z
_TEXT	SEGMENT
$T511373 = -12						; size = 12
$T511377 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z PROC ; std::_Allocate<ForceInfo>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate@2

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 55 55 55
	15		 cmp	 ecx, 357913941		; 15555555H
  00015	77 0e		 ja	 SHORT $LN1@Allocate@2
  00017	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T511377[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T511377[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T511373[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T511373[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T511373[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate@2:
??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ENDP ; std::_Allocate<ForceInfo>
_TEXT	ENDS
PUBLIC	??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z ; std::_Destroy<ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z PROC	; std::_Destroy<ForceInfo>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z ENDP	; std::_Destroy<ForceInfo>
_TEXT	ENDS
PUBLIC	??4WeaponInfo@@QAEAAU0@ABU0@@Z			; WeaponInfo::operator=
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??4WeaponInfo@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4WeaponInfo@@QAEAAU0@ABU0@@Z PROC			; WeaponInfo::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	8b 07		 mov	 eax, DWORD PTR [edi]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00011	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00014	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00017	50		 push	 eax
  00018	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  00021	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00024	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00027	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0002a	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0002d	8a 47 20	 mov	 al, BYTE PTR [edi+32]
  00030	88 46 20	 mov	 BYTE PTR [esi+32], al
  00033	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00036	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00039	5f		 pop	 edi
  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??4WeaponInfo@@QAEAAU0@ABU0@@Z ENDP			; WeaponInfo::operator=
_TEXT	ENDS
PUBLIC	??_GWeaponInfo@@QAEPAXI@Z			; WeaponInfo::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GWeaponInfo@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GWeaponInfo@@QAEPAXI@Z PROC				; WeaponInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0000f	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00013	74 07		 je	 SHORT $LN1@scalar@2
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	59		 pop	 ecx
$LN1@scalar@2:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GWeaponInfo@@QAEPAXI@Z ENDP				; WeaponInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$move@AAUWeaponInfo@@@std@@YA$$QAUWeaponInfo@@AAU1@@Z ; std::move<WeaponInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUWeaponInfo@@@std@@YA$$QAUWeaponInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUWeaponInfo@@@std@@YA$$QAUWeaponInfo@@AAU1@@Z PROC ; std::move<WeaponInfo &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUWeaponInfo@@@std@@YA$$QAUWeaponInfo@@AAU1@@Z ENDP ; std::move<WeaponInfo &>
_TEXT	ENDS
PUBLIC	??$move@AAUForceInfo@@@std@@YA$$QAUForceInfo@@AAU1@@Z ; std::move<ForceInfo &>
; Function compile flags: /Ogsp
;	COMDAT ??$move@AAUForceInfo@@@std@@YA$$QAUForceInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUForceInfo@@@std@@YA$$QAUForceInfo@@AAU1@@Z PROC ; std::move<ForceInfo &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUForceInfo@@@std@@YA$$QAUForceInfo@@AAU1@@Z ENDP ; std::move<ForceInfo &>
_TEXT	ENDS
PUBLIC	??$forward@AAUWeaponInfo@@@std@@YAAAUWeaponInfo@@AAU1@@Z ; std::forward<WeaponInfo &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@AAUWeaponInfo@@@std@@YAAAUWeaponInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUWeaponInfo@@@std@@YAAAUWeaponInfo@@AAU1@@Z PROC ; std::forward<WeaponInfo &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUWeaponInfo@@@std@@YAAAUWeaponInfo@@AAU1@@Z ENDP ; std::forward<WeaponInfo &>
_TEXT	ENDS
PUBLIC	??$forward@AAUForceInfo@@@std@@YAAAUForceInfo@@AAU1@@Z ; std::forward<ForceInfo &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@AAUForceInfo@@@std@@YAAAUForceInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUForceInfo@@@std@@YAAAUForceInfo@@AAU1@@Z PROC ; std::forward<ForceInfo &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUForceInfo@@@std@@YAAAUForceInfo@@AAU1@@Z ENDP ; std::forward<ForceInfo &>
_TEXT	ENDS
PUBLIC	??$construct@AAUForceInfo@@@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@AAU2@@Z ; std::allocator<ForceInfo>::construct<ForceInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUForceInfo@@@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUForceInfo@@@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@AAU2@@Z PROC ; std::allocator<ForceInfo>::construct<ForceInfo &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN3@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN3@construct:
  00013	5f		 pop	 edi

; 209  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$construct@AAUForceInfo@@@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@AAU2@@Z ENDP ; std::allocator<ForceInfo>::construct<ForceInfo &>
_TEXT	ENDS
PUBLIC	??0WeaponInfo@@QAE@ABU0@@Z			; WeaponInfo::WeaponInfo
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0WeaponInfo@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0WeaponInfo@@QAE@ABU0@@Z PROC				; WeaponInfo::WeaponInfo, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	8b 07		 mov	 eax, DWORD PTR [edi]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00011	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00014	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00017	50		 push	 eax
  00018	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00021	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00024	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00027	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0002a	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0002d	8a 47 20	 mov	 al, BYTE PTR [edi+32]
  00030	88 46 20	 mov	 BYTE PTR [esi+32], al
  00033	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00036	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00039	5f		 pop	 edi
  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??0WeaponInfo@@QAE@ABU0@@Z ENDP				; WeaponInfo::WeaponInfo
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	_rkLoader$GSCopy$
PUBLIC	_szWeapon$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?LoadWeaponInfo@@YAXPBDAAUWeaponInfo@@AAVioINILoader@@@Z ; LoadWeaponInfo
EXTRN	__imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z:PROC
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.cpp
CONST	ENDS
;	COMDAT ?LoadWeaponInfo@@YAXPBDAAUWeaponInfo@@AAVioINILoader@@@Z
_TEXT	SEGMENT
_rkLoader$GSCopy$ = -564				; size = 4
_szWeapon$GSCopy$ = -560				; size = 4
_szBuf$ = -556						; size = 260
_szKey$ = -296						; size = 260
___encStr$509534 = -36					; size = 25
___encStr$509382 = -32					; size = 21
___encStr$509230 = -28					; size = 16
___encStr$509078 = -28					; size = 15
___encStr$508926 = -20					; size = 8
__$ArrayPad$ = -4					; size = 4
_szWeapon$ = 8						; size = 4
_rkWeaponInfo$ = 12					; size = 4
_rkLoader$ = 16						; size = 4
?LoadWeaponInfo@@YAXPBDAAUWeaponInfo@@AAVioINILoader@@@Z PROC ; LoadWeaponInfo, COMDAT

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 34 02 00
	00		 sub	 esp, 564		; 00000234H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 10	 mov	 ebx, DWORD PTR _rkLoader$[ebp]
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR _szWeapon$[ebp]
  0001b	57		 push	 edi
  0001c	8b 7d 0c	 mov	 edi, DWORD PTR _rkWeaponInfo$[ebp]

; 156  : 	char szKey[MAX_PATH], szBuf[MAX_PATH];
; 157  : 
; 158  : 	wsprintf_e( szKey, "%s_type", szWeapon );

  0001f	6a 04		 push	 4
  00021	c7 45 ec c8 9f
	b4 9e		 mov	 DWORD PTR ___encStr$508926[ebp], -1632329784 ; 9eb49fc8H
  00028	81 75 ec ed ec
	eb ea		 xor	 DWORD PTR ___encStr$508926[ebp], -353637139 ; eaebecedH

; 167  : 
; 168  : 	wsprintf_e( szKey, "%s_type_wounded_time", szWeapon );

  0002f	89 b5 d0 fd ff
	ff		 mov	 DWORD PTR _szWeapon$GSCopy$[ebp], esi
  00035	89 9d cc fd ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], ebx
  0003b	c7 45 f0 94 9c
	8e 00		 mov	 DWORD PTR ___encStr$508926[ebp+4], 9346196 ; 008e9c94H
  00042	58		 pop	 eax
$LL500@LoadWeapon:

; 156  : 	char szKey[MAX_PATH], szBuf[MAX_PATH];
; 157  : 
; 158  : 	wsprintf_e( szKey, "%s_type", szWeapon );

  00043	8b c8		 mov	 ecx, eax
  00045	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0004b	79 05		 jns	 SHORT $LN558@LoadWeapon
  0004d	49		 dec	 ecx
  0004e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00051	41		 inc	 ecx
$LN558@LoadWeapon:
  00052	b2 ed		 mov	 dl, -19			; ffffffedH
  00054	2a d1		 sub	 dl, cl
  00056	30 54 05 ec	 xor	 BYTE PTR ___encStr$508926[ebp+eax], dl
  0005a	40		 inc	 eax
  0005b	83 f8 07	 cmp	 eax, 7
  0005e	7c e3		 jl	 SHORT $LL500@LoadWeapon
  00060	56		 push	 esi
  00061	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__wsprintfA
  00067	8d 45 ec	 lea	 eax, DWORD PTR ___encStr$508926[ebp]
  0006a	50		 push	 eax
  0006b	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00071	50		 push	 eax
  00072	ff d6		 call	 esi
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH

; 159  : 	rkWeaponInfo.m_iWeaponIdx = rkLoader.LoadInt( szKey, NO_WEAPON_ATTRIBUTE );

  00077	6a 00		 push	 0
  00079	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0007f	8b cb		 mov	 ecx, ebx
  00081	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00087	50		 push	 eax
  00088	ff d3		 call	 ebx
  0008a	6a 03		 push	 3
  0008c	89 07		 mov	 DWORD PTR [edi], eax

; 160  : 
; 161  : 	wsprintf_e( szKey, "%s_type_resist", szWeapon );

  0008e	c7 45 e4 c8 9f
	b4 9e		 mov	 DWORD PTR ___encStr$509078[ebp], -1632329784 ; 9eb49fc8H
  00095	c7 45 e8 94 9c
	8e b5		 mov	 DWORD PTR ___encStr$509078[ebp+4], -1248945004 ; b58e9c94H
  0009c	c7 45 ec 9f 89
	98 83		 mov	 DWORD PTR ___encStr$509078[ebp+8], -2087155297 ; 8398899fH
  000a3	66 c7 45 f0 9e
	98		 mov	 WORD PTR ___encStr$509078[ebp+12], 39070 ; 0000989eH
  000a9	8d 45 e4	 lea	 eax, DWORD PTR ___encStr$509078[ebp]
  000ac	c6 45 f2 00	 mov	 BYTE PTR ___encStr$509078[ebp+14], 0
  000b0	59		 pop	 ecx
$LL511@LoadWeapon:
  000b1	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000b7	83 c0 04	 add	 eax, 4
  000ba	49		 dec	 ecx
  000bb	75 f4		 jne	 SHORT $LL511@LoadWeapon
  000bd	6a 0c		 push	 12			; 0000000cH
  000bf	58		 pop	 eax
$LL508@LoadWeapon:
  000c0	8b c8		 mov	 ecx, eax
  000c2	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000c8	79 05		 jns	 SHORT $LN559@LoadWeapon
  000ca	49		 dec	 ecx
  000cb	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000ce	41		 inc	 ecx
$LN559@LoadWeapon:
  000cf	b2 ed		 mov	 dl, -19			; ffffffedH
  000d1	2a d1		 sub	 dl, cl
  000d3	30 54 05 e4	 xor	 BYTE PTR ___encStr$509078[ebp+eax], dl
  000d7	40		 inc	 eax
  000d8	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  000db	7c e3		 jl	 SHORT $LL508@LoadWeapon
  000dd	ff b5 d0 fd ff
	ff		 push	 DWORD PTR _szWeapon$GSCopy$[ebp]
  000e3	8d 45 e4	 lea	 eax, DWORD PTR ___encStr$509078[ebp]
  000e6	50		 push	 eax
  000e7	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  000ed	50		 push	 eax
  000ee	ff d6		 call	 esi

; 162  : 	rkWeaponInfo.m_iResistanceIdx = rkLoader.LoadInt( szKey, NO_WEAPON_ATTRIBUTE );

  000f0	8b 8d cc fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  000f6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f9	6a 00		 push	 0
  000fb	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00101	50		 push	 eax
  00102	ff d3		 call	 ebx
  00104	6a 03		 push	 3
  00106	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 163  : 
; 164  : 	wsprintf_e( szKey, "%s_type_wounded", szWeapon );

  00109	c7 45 e4 c8 9f
	b4 9e		 mov	 DWORD PTR ___encStr$509230[ebp], -1632329784 ; 9eb49fc8H
  00110	c7 45 e8 94 9c
	8e b5		 mov	 DWORD PTR ___encStr$509230[ebp+4], -1248945004 ; b58e9c94H
  00117	c7 45 ec 9a 83
	9e 84		 mov	 DWORD PTR ___encStr$509230[ebp+8], -2069986406 ; 849e839aH
  0011e	8d 45 e4	 lea	 eax, DWORD PTR ___encStr$509230[ebp]
  00121	c7 45 f0 89 89
	8f 00		 mov	 DWORD PTR ___encStr$509230[ebp+12], 9406857 ; 008f8989H
  00128	59		 pop	 ecx
$LL519@LoadWeapon:
  00129	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0012f	83 c0 04	 add	 eax, 4
  00132	49		 dec	 ecx
  00133	75 f4		 jne	 SHORT $LL519@LoadWeapon
  00135	6a 0c		 push	 12			; 0000000cH
  00137	58		 pop	 eax
$LL516@LoadWeapon:
  00138	8b c8		 mov	 ecx, eax
  0013a	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00140	79 05		 jns	 SHORT $LN560@LoadWeapon
  00142	49		 dec	 ecx
  00143	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00146	41		 inc	 ecx
$LN560@LoadWeapon:
  00147	b2 ed		 mov	 dl, -19			; ffffffedH
  00149	2a d1		 sub	 dl, cl
  0014b	30 54 05 e4	 xor	 BYTE PTR ___encStr$509230[ebp+eax], dl
  0014f	40		 inc	 eax
  00150	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00153	7c e3		 jl	 SHORT $LL516@LoadWeapon
  00155	ff b5 d0 fd ff
	ff		 push	 DWORD PTR _szWeapon$GSCopy$[ebp]
  0015b	8d 45 e4	 lea	 eax, DWORD PTR ___encStr$509230[ebp]
  0015e	50		 push	 eax
  0015f	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00165	50		 push	 eax
  00166	ff d6		 call	 esi

; 165  : 	rkLoader.LoadString( szKey, "", szBuf, MAX_PATH );

  00168	8b 8d cc fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0016e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00171	68 04 01 00 00	 push	 260			; 00000104H
  00176	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0017c	50		 push	 eax
  0017d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00182	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00188	50		 push	 eax
  00189	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 166  : 	rkWeaponInfo.m_WoundedAnimation = szBuf;

  0018f	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00195	50		 push	 eax
  00196	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  00199	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  0019f	6a 05		 push	 5

; 167  : 
; 168  : 	wsprintf_e( szKey, "%s_type_wounded_time", szWeapon );

  001a1	c7 45 e0 c8 9f
	b4 9e		 mov	 DWORD PTR ___encStr$509382[ebp], -1632329784 ; 9eb49fc8H
  001a8	c7 45 e4 94 9c
	8e b5		 mov	 DWORD PTR ___encStr$509382[ebp+4], -1248945004 ; b58e9c94H
  001af	c7 45 e8 9a 83
	9e 84		 mov	 DWORD PTR ___encStr$509382[ebp+8], -2069986406 ; 849e839aH
  001b6	c7 45 ec 89 89
	8f b5		 mov	 DWORD PTR ___encStr$509382[ebp+12], -1248884343 ; b58f8989H
  001bd	c7 45 f0 99 85
	86 8f		 mov	 DWORD PTR ___encStr$509382[ebp+16], -1887009383 ; 8f868599H
  001c4	8d 45 e0	 lea	 eax, DWORD PTR ___encStr$509382[ebp]
  001c7	c6 45 f4 00	 mov	 BYTE PTR ___encStr$509382[ebp+20], 0
  001cb	59		 pop	 ecx
$LL527@LoadWeapon:
  001cc	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001d2	83 c0 04	 add	 eax, 4
  001d5	49		 dec	 ecx
  001d6	75 f4		 jne	 SHORT $LL527@LoadWeapon
  001d8	ff b5 d0 fd ff
	ff		 push	 DWORD PTR _szWeapon$GSCopy$[ebp]
  001de	8d 45 e0	 lea	 eax, DWORD PTR ___encStr$509382[ebp]
  001e1	50		 push	 eax
  001e2	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  001e8	50		 push	 eax
  001e9	ff d6		 call	 esi

; 169  : 	rkWeaponInfo.m_dwWoundedDuration = rkLoader.LoadInt( szKey, 0 );

  001eb	8b 8d cc fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  001f1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f4	6a 00		 push	 0
  001f6	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  001fc	50		 push	 eax
  001fd	ff d3		 call	 ebx
  001ff	6a 06		 push	 6
  00201	89 47 18	 mov	 DWORD PTR [edi+24], eax

; 170  : 
; 171  : 	wsprintf_e( szKey, "%s_type_wounded_loop_ani", szWeapon );

  00204	c7 45 dc c8 9f
	b4 9e		 mov	 DWORD PTR ___encStr$509534[ebp], -1632329784 ; 9eb49fc8H
  0020b	c7 45 e0 94 9c
	8e b5		 mov	 DWORD PTR ___encStr$509534[ebp+4], -1248945004 ; b58e9c94H
  00212	c7 45 e4 9a 83
	9e 84		 mov	 DWORD PTR ___encStr$509534[ebp+8], -2069986406 ; 849e839aH
  00219	c7 45 e8 89 89
	8f b5		 mov	 DWORD PTR ___encStr$509534[ebp+12], -1248884343 ; b58f8989H
  00220	c7 45 ec 81 83
	84 9a		 mov	 DWORD PTR ___encStr$509534[ebp+16], -1702591615 ; 9a848381H
  00227	c7 45 f0 b2 8d
	85 83		 mov	 DWORD PTR ___encStr$509534[ebp+20], -2088399438 ; 83858db2H
  0022e	8d 45 dc	 lea	 eax, DWORD PTR ___encStr$509534[ebp]
  00231	c6 45 f4 00	 mov	 BYTE PTR ___encStr$509534[ebp+24], 0
  00235	59		 pop	 ecx
$LL535@LoadWeapon:
  00236	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0023c	83 c0 04	 add	 eax, 4
  0023f	49		 dec	 ecx
  00240	75 f4		 jne	 SHORT $LL535@LoadWeapon
  00242	ff b5 d0 fd ff
	ff		 push	 DWORD PTR _szWeapon$GSCopy$[ebp]
  00248	8d 45 dc	 lea	 eax, DWORD PTR ___encStr$509534[ebp]
  0024b	50		 push	 eax
  0024c	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00252	50		 push	 eax
  00253	ff d6		 call	 esi

; 172  : 	rkWeaponInfo.m_bWoundedLoopAni = rkLoader.LoadBool( szKey, false );

  00255	8b 8d cc fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0025b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0025e	6a 00		 push	 0
  00260	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00266	50		 push	 eax
  00267	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 173  : }

  0026d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00270	88 47 20	 mov	 BYTE PTR [edi+32], al
  00273	5f		 pop	 edi
  00274	5e		 pop	 esi
  00275	33 cd		 xor	 ecx, ebp
  00277	5b		 pop	 ebx
  00278	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0027d	c9		 leave
  0027e	c3		 ret	 0
?LoadWeaponInfo@@YAXPBDAAUWeaponInfo@@AAVioINILoader@@@Z ENDP ; LoadWeaponInfo
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z ; std::allocator<ForceInfo>::construct
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z PROC ; std::allocator<ForceInfo>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN5@construct@2
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN5@construct@2:
  00013	5f		 pop	 edi

; 198  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z ENDP ; std::allocator<ForceInfo>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
_TEXT	SEGMENT
$T511533 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z PROC ; std::_Construct<WeaponInfo,WeaponInfo const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T511533[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 08		 je	 SHORT $LN3@Construct@2
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@ABU0@@Z
$LN3@Construct@2:

; 49   : 	}

  00025	e8 00 00 00 00	 call	 __EH_epilog3
  0002a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T511533[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ENDP ; std::_Construct<WeaponInfo,WeaponInfo const &>
PUBLIC	?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@$$QAU3@@Z ; std::allocator<WeaponInfo>::construct
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@$$QAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@$$QAU3@@Z$0
__ehfuncinfo$?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@$$QAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@$$QAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@$$QAU3@@Z
_TEXT	SEGMENT
$T511557 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@$$QAU3@@Z PROC ; std::allocator<WeaponInfo>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@$$QAU3@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T511557[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct@3
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@ABU0@@Z
$LN3@construct@3:

; 203  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@$$QAU3@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T511557[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@$$QAU3@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@$$QAU3@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@$$QAU3@@Z ENDP ; std::allocator<WeaponInfo>::construct
PUBLIC	?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@$$QAU3@@Z ; std::allocator<ForceInfo>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@$$QAU3@@Z PROC ; std::allocator<ForceInfo>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN3@construct@4
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN3@construct@4:
  00013	5f		 pop	 edi

; 203  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@$$QAU3@@Z ENDP ; std::allocator<ForceInfo>::construct
_TEXT	ENDS
PUBLIC	??0WeaponInfo@@QAE@XZ				; WeaponInfo::WeaponInfo
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.h
;	COMDAT ??0WeaponInfo@@QAE@XZ
_TEXT	SEGMENT
??0WeaponInfo@@QAE@XZ PROC				; WeaponInfo::WeaponInfo, COMDAT
; _this$ = ecx

; 64   : 	WeaponInfo()

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 65   : 	{
; 66   : 		Init();

  0000c	33 c0		 xor	 eax, eax
  0000e	89 06		 mov	 DWORD PTR [esi], eax
  00010	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00013	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00016	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00019	88 46 20	 mov	 BYTE PTR [esi+32], al
  0001c	89 46 24	 mov	 DWORD PTR [esi+36], eax

; 67   : 	}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c3		 ret	 0
??0WeaponInfo@@QAE@XZ ENDP				; WeaponInfo::WeaponInfo
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z ; std::allocator<WeaponInfo>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z PROC ; std::allocator<WeaponInfo>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ; std::_Allocate<WeaponInfo>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z ENDP ; std::allocator<WeaponInfo>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z ; std::allocator<ForceInfo>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z PROC ; std::allocator<ForceInfo>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ; std::_Allocate<ForceInfo>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z ENDP ; std::allocator<ForceInfo>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator==
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator==
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z ; std::allocator<ForceInfo>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z PROC ; std::allocator<ForceInfo>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z ENDP ; std::allocator<ForceInfo>::destroy
_TEXT	ENDS
PUBLIC	??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<WeaponInfo *,WeaponInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<WeaponInfo *,WeaponInfo *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 10		 jmp	 SHORT $LN11@Move
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ??4WeaponInfo@@QAEAAU0@ABU0@@Z
  00012	83 45 10 28	 add	 DWORD PTR __Dest$[ebp], 40 ; 00000028H
  00016	83 c6 28	 add	 esi, 40			; 00000028H
$LN11@Move:

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	75 eb		 jne	 SHORT $LL3@Move

; 2515 : 	return (_Dest);

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00021	5e		 pop	 esi

; 2516 : 	}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<WeaponInfo *,WeaponInfo *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ForceInfo *,ForceInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<ForceInfo *,ForceInfo *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00009	74 18		 je	 SHORT $LN10@Move@2
  0000b	56		 push	 esi
  0000c	57		 push	 edi
$LL3@Move@2:

; 2514 : 		*_Dest = _STD move(*_First);

  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00010	83 45 10 0c	 add	 DWORD PTR __Dest$[ebp], 12 ; 0000000cH
  00014	8b f0		 mov	 esi, eax
  00016	a5		 movsd
  00017	a5		 movsd
  00018	83 c0 0c	 add	 eax, 12			; 0000000cH
  0001b	a5		 movsd
  0001c	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001f	75 ec		 jne	 SHORT $LL3@Move@2
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
$LN10@Move@2:

; 2515 : 	return (_Dest);

  00023	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<ForceInfo *,ForceInfo *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z ; std::_Destroy<WeaponInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z PROC ; std::_Destroy<WeaponInfo>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	83 c1 08	 add	 ecx, 8

; 64   : 	}

  00009	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  0000a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z ENDP ; std::_Destroy<WeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@AAU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@AAU2@@Z ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@AAU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@AAU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN7@Cons_val
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN7@Cons_val:
  00013	5f		 pop	 edi

; 281  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@AAU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo &>
_TEXT	ENDS
PUBLIC	??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z ; std::allocator<WeaponInfo>::construct<WeaponInfo &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z
_TEXT	SEGMENT
$T511714 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z PROC ; std::allocator<WeaponInfo>::construct<WeaponInfo &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T511714[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct@5
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@ABU0@@Z
$LN3@construct@5:

; 209  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T511714[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z ENDP ; std::allocator<WeaponInfo>::construct<WeaponInfo &>
PUBLIC	?_Grow_to@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEII@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Grow_to
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEII@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 28		 push	 40			; 00000028H
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba 66 66 66 06	 mov	 edx, 107374182		; 06666666H
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00026	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Grow_to@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEII@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Grow_to
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEII@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEII@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 0c		 push	 12			; 0000000cH
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba 55 55 55 15	 mov	 edx, 357913941		; 15555555H
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to@2
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to@2
$LN4@Grow_to@2:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to@2:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00026	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Grow_to@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEII@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Grow_to
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN9@Cons_val@2
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN9@Cons_val@2:
  00013	5f		 pop	 edi

; 281  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z ; std::allocator<WeaponInfo>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z PROC ; std::allocator<WeaponInfo>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z ENDP ; std::allocator<WeaponInfo>::construct
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@U3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@$$QAU2@@Z ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@U3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@$$QAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@U3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@$$QAU2@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@U3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@$$QAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@U3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@$$QAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@U3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@$$QAU2@@Z
_TEXT	SEGMENT
$T511839 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@U3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo>, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@U3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@$$QAU2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T511839[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val@3
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@ABU0@@Z
$LN7@Cons_val@3:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@U3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@$$QAU2@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T511839[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@U3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@$$QAU2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@U3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@$$QAU2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@U3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo>
PUBLIC	??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@U3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@$$QAU2@@Z ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@U3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@U3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN7@Cons_val@4
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN7@Cons_val@4:
  00013	5f		 pop	 edi

; 281  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@U3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo>
_TEXT	ENDS
PUBLIC	?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end
_TEXT	ENDS
PUBLIC	?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Make_iter
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator!=
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z ; std::_Dest_val<std::allocator<ForceInfo>,ForceInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z PROC ; std::_Dest_val<std::allocator<ForceInfo>,ForceInfo>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z ENDP ; std::_Dest_val<std::allocator<ForceInfo>,ForceInfo>
_TEXT	ENDS
PUBLIC	??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00@Z ; std::_Move<WeaponInfo *,WeaponInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$512021 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00@Z PROC ; std::_Move<WeaponInfo *,WeaponInfo *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$512021[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<WeaponInfo *,WeaponInfo *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00@Z ENDP ; std::_Move<WeaponInfo *,WeaponInfo *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00@Z ; std::_Move<ForceInfo *,ForceInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$512028 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00@Z PROC ; std::_Move<ForceInfo *,ForceInfo *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$512028[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ForceInfo *,ForceInfo *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00@Z ENDP ; std::_Move<ForceInfo *,ForceInfo *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z ; std::allocator<WeaponInfo>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z PROC ; std::allocator<WeaponInfo>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	83 c1 08	 add	 ecx, 8
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 214  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z ENDP ; std::allocator<WeaponInfo>::destroy
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z
_TEXT	SEGMENT
$T512068 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T512068[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val@5
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@ABU0@@Z
$LN7@Cons_val@5:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T512068[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo &>
PUBLIC	??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo const &>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@U1@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ForceInfo *,ForceInfo *,std::allocator<ForceInfo>,ForceInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@U1@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@U1@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ForceInfo *,ForceInfo *,std::allocator<ForceInfo>,ForceInfo>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 16		 jmp	 SHORT $LN24@Uninit_mov
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00009	56		 push	 esi
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@U3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@$$QAU2@@Z ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo>
  00015	83 45 10 0c	 add	 DWORD PTR __Dest$[ebp], 12 ; 0000000cH
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	83 c6 0c	 add	 esi, 12			; 0000000cH
$LN24@Uninit_mov:

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001f	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00022	75 e5		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00024	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00027	5e		 pop	 esi

; 438  : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Uninit_move@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@U1@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ForceInfo *,ForceInfo *,std::allocator<ForceInfo>,ForceInfo>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ForceInfo> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z ; std::_Dest_val<std::allocator<WeaponInfo>,WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z PROC ; std::_Dest_val<std::allocator<WeaponInfo>,WeaponInfo>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	83 c1 08	 add	 ecx, 8

; 288  : 	}

  00009	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  0000a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z ENDP ; std::_Dest_val<std::allocator<WeaponInfo>,WeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@@Z ; std::_Uninitialized_move<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$512175 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@@Z PROC ; std::_Uninitialized_move<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$512175[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@U1@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ForceInfo *,ForceInfo *,std::allocator<ForceInfo>,ForceInfo>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@@Z ENDP ; std::_Uninitialized_move<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@U1@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo>,WeaponInfo>
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@U1@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@U1@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@U1@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@U1@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@U1@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$3
__ehfuncinfo$??$_Uninit_move@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@U1@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@U1@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@U1@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@U1@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@U1@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo>,WeaponInfo>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_move@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@U1@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 428  : 
; 429  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00016	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LL6@Uninit_mov@2:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	74 37		 je	 SHORT $LN4@Uninit_mov@2

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  0001e	56		 push	 esi
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00025	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@U3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@$$QAU2@@Z ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo>
  0002a	83 45 10 28	 add	 DWORD PTR __Dest$[ebp], 40 ; 00000028H
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00031	83 c6 28	 add	 esi, 40			; 00000028H
  00034	eb e3		 jmp	 SHORT $LL6@Uninit_mov@2
__catch$??$_Uninit_move@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@U1@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00036	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00039	eb 0c		 jmp	 SHORT $LN32@Uninit_mov@2
$LL3@Uninit_mov@2:

; 434  : 		_Dest_val(_Al, _Next);

  0003b	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00044	83 c6 28	 add	 esi, 40			; 00000028H
$LN32@Uninit_mov@2:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00047	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  0004a	75 ef		 jne	 SHORT $LL3@Uninit_mov@2

; 435  : 	_RERAISE;

  0004c	6a 00		 push	 0
  0004e	6a 00		 push	 0
  00050	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN33@Uninit_mov@2:
$LN4@Uninit_mov@2:

; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00055	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 438  : 	}

  00058	e8 00 00 00 00	 call	 __EH_epilog3
  0005d	c3		 ret	 0
$LN31@Uninit_mov@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@U1@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@U1@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@U1@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo>,WeaponInfo>
PUBLIC	??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z ; std::_Destroy_range<std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ForceInfo> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<WeaponInfo> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0c		 jmp	 SHORT $LN20@Destroy_ra
$LL3@Destroy_ra:

; 97   : 		_Dest_val(_Al, _First);

  00009	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00012	83 c6 28	 add	 esi, 40			; 00000028H
$LN20@Destroy_ra:

; 96   : 	for (; _First != _Last; ++_First)

  00015	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00018	75 ef		 jne	 SHORT $LL3@Destroy_ra
  0001a	5e		 pop	 esi

; 98   : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??$_Umove@PAUForceInfo@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@PAU2@00@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Umove<ForceInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAUForceInfo@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUForceInfo@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@PAU2@00@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Umove<ForceInfo *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@@Z ; std::_Uninitialized_move<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUForceInfo@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@PAU2@00@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Umove<ForceInfo *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Uninitialized_move<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$512332 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@@Z PROC ; std::_Uninitialized_move<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$512332[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@U1@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo>,WeaponInfo>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@@Z ENDP ; std::_Uninitialized_move<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z PROC ; std::_Destroy_range<std::allocator<WeaponInfo> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0c		 jmp	 SHORT $LN24@Destroy_ra@2
$LL7@Destroy_ra@2:
  00009	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00012	83 c6 28	 add	 esi, 40			; 00000028H
$LN24@Destroy_ra@2:
  00015	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00018	75 ef		 jne	 SHORT $LL7@Destroy_ra@2
  0001a	5e		 pop	 esi

; 89   : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	?erase@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@0@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::erase
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?erase@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$512536 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@0@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$512536[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ForceInfo *,ForceInfo *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@0@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::erase
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXI@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::reserve
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
__Ptr$510642 = 8					; size = 4
__Count$ = 8						; size = 4
?reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXI@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00011	81 fb 55 55 55
	15		 cmp	 ebx, 357913941		; 15555555H
  00017	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN56@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00024	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00027	2b 06		 sub	 eax, DWORD PTR [esi]
  00029	6a 0c		 push	 12			; 0000000cH
  0002b	99		 cdq
  0002c	59		 pop	 ecx
  0002d	f7 f9		 idiv	 ecx
  0002f	3b c3		 cmp	 eax, ebx
  00031	73 6b		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00033	6a 00		 push	 0
  00035	53		 push	 ebx
  00036	e8 00 00 00 00	 call	 ??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ; std::_Allocate<ForceInfo>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  0003b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00041	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00044	52		 push	 edx
  00045	89 45 08	 mov	 DWORD PTR __Ptr$510642[ebp], eax
  00048	ff 75 08	 push	 DWORD PTR __Ptr$510642[ebp]
  0004b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004e	50		 push	 eax
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@@Z ; std::_Uninitialized_move<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00055	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00057	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005a	83 c4 18	 add	 esp, 24			; 00000018H
  0005d	2b c1		 sub	 eax, ecx
  0005f	6a 0c		 push	 12			; 0000000cH
  00061	99		 cdq
  00062	5f		 pop	 edi
  00063	f7 ff		 idiv	 edi
  00065	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00069	8b f8		 mov	 edi, eax
  0006b	85 c9		 test	 ecx, ecx
  0006d	74 12		 je	 SHORT $LN48@reserve

; 761  : 			if (this->_Myfirst != 0)

  0006f	eb 03		 jmp	 SHORT $LN55@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

$LL39@reserve:
  00071	83 c1 0c	 add	 ecx, 12			; 0000000cH
$LN55@reserve:
  00074	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  00077	75 f8		 jne	 SHORT $LL39@reserve

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00079	ff 36		 push	 DWORD PTR [esi]
  0007b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00080	59		 pop	 ecx
$LN48@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00081	8b ce		 mov	 ecx, esi
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00089	6b db 0c	 imul	 ebx, 12			; 0000000cH

; 770  : 			this->_Mylast = _Ptr + _Size;

  0008c	6b ff 0c	 imul	 edi, 12			; 0000000cH
  0008f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$510642[ebp]
  00092	03 d8		 add	 ebx, eax
  00094	03 f8		 add	 edi, eax
  00096	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00099	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  0009c	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  0009e	e8 00 00 00 00	 call	 __EH_epilog3
  000a3	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000a6	ff 75 08	 push	 DWORD PTR __Ptr$510642[ebp]
  000a9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ae	59		 pop	 ecx

; 757  : 			_RERAISE;

  000af	6a 00		 push	 0
  000b1	6a 00		 push	 0
  000b3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN57@reserve:
$LN54@reserve:
  000b8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXI@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::reserve
PUBLIC	?_Reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXI@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 0c		 push	 12			; 0000000cH
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00030	2b c1		 sub	 eax, ecx
  00032	6a 0c		 push	 12			; 0000000cH
  00034	99		 cdq
  00035	59		 pop	 ecx
  00036	f7 f9		 idiv	 ecx
  00038	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003b	3b f8		 cmp	 edi, eax
  0003d	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003f	57		 push	 edi
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEII@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Grow_to
  00047	50		 push	 eax
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXI@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::reserve
$LN1@Reserve:
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 1298 : 		}

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Reserve
_TEXT	ENDS
PUBLIC	??$_Umove@PAUWeaponInfo@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@PAU2@00@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Umove<WeaponInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAUWeaponInfo@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUWeaponInfo@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@PAU2@00@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Umove<WeaponInfo *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Uninitialized_move<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUWeaponInfo@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@PAU2@00@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Umove<WeaponInfo *>
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	?clear@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T512787 = -4						; size = 4
?clear@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T512787[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@0@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::clear
_TEXT	ENDS
PUBLIC	?erase@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@0@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$512913 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@0@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 03		 mov	 DWORD PTR [ebx], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 27		 je	 SHORT $LN1@erase@2

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00017	57		 push	 edi
  00018	ff 75 10	 push	 DWORD PTR __Cat$512913[ebp]
  0001b	50		 push	 eax
  0001c	51		 push	 ecx
  0001d	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  00020	e8 00 00 00 00	 call	 ??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<WeaponInfo *,WeaponInfo *>
  00025	8b f8		 mov	 edi, eax

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00027	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0002a	50		 push	 eax
  0002b	ff 76 04	 push	 DWORD PTR [esi+4]
  0002e	57		 push	 edi
  0002f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
  00034	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1211 : 			this->_Mylast = _Ptr;

  00037	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  0003a	5f		 pop	 edi
$LN1@erase@2:

; 1212 : 			}
; 1213 : 		return (_First);

  0003b	5e		 pop	 esi
  0003c	8b c3		 mov	 eax, ebx
  0003e	5b		 pop	 ebx

; 1214 : 		}

  0003f	5d		 pop	 ebp
  00040	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@0@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::erase
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXI@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
__Ptr$510609 = 8					; size = 4
__Count$ = 8						; size = 4
?reserve@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXI@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00011	81 fb 66 66 66
	06		 cmp	 ebx, 107374182		; 06666666H
  00017	76 0b		 jbe	 SHORT $LN5@reserve@2

; 748  : 			_Xlen();	// result too long

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN38@reserve@2:
$LN5@reserve@2:

; 749  : 		else if (capacity() < _Count)

  00024	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00027	2b 06		 sub	 eax, DWORD PTR [esi]
  00029	6a 28		 push	 40			; 00000028H
  0002b	99		 cdq
  0002c	59		 pop	 ecx
  0002d	f7 f9		 idiv	 ecx
  0002f	3b c3		 cmp	 eax, ebx
  00031	73 70		 jae	 SHORT $LN3@reserve@2

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00033	6a 00		 push	 0
  00035	53		 push	 ebx
  00036	e8 00 00 00 00	 call	 ??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ; std::_Allocate<WeaponInfo>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  0003b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00041	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00044	52		 push	 edx
  00045	89 45 08	 mov	 DWORD PTR __Ptr$510609[ebp], eax
  00048	ff 75 08	 push	 DWORD PTR __Ptr$510609[ebp]
  0004b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004e	50		 push	 eax
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Uninitialized_move<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00055	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00057	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005a	83 c4 18	 add	 esp, 24			; 00000018H
  0005d	2b c1		 sub	 eax, ecx
  0005f	6a 28		 push	 40			; 00000028H
  00061	99		 cdq
  00062	5f		 pop	 edi
  00063	f7 ff		 idiv	 edi
  00065	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00069	8b f8		 mov	 edi, eax
  0006b	85 c9		 test	 ecx, ecx
  0006d	74 17		 je	 SHORT $LN33@reserve@2

; 761  : 			if (this->_Myfirst != 0)
; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  0006f	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00072	50		 push	 eax
  00073	ff 76 04	 push	 DWORD PTR [esi+4]
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  0007c	ff 36		 push	 DWORD PTR [esi]
  0007e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00083	83 c4 10	 add	 esp, 16			; 00000010H
$LN33@reserve@2:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00086	8b ce		 mov	 ecx, esi
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  0008e	6b db 28	 imul	 ebx, 40			; 00000028H

; 770  : 			this->_Mylast = _Ptr + _Size;

  00091	6b ff 28	 imul	 edi, 40			; 00000028H
  00094	8b 45 08	 mov	 eax, DWORD PTR __Ptr$510609[ebp]
  00097	03 d8		 add	 ebx, eax
  00099	03 f8		 add	 edi, eax
  0009b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0009e	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  000a1	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve@2:

; 772  : 			}
; 773  : 		}

  000a3	e8 00 00 00 00	 call	 __EH_epilog3
  000a8	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000ab	ff 75 08	 push	 DWORD PTR __Ptr$510609[ebp]
  000ae	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000b3	59		 pop	 ecx

; 757  : 			_RERAISE;

  000b4	6a 00		 push	 0
  000b6	6a 00		 push	 0
  000b8	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN39@reserve@2:
$LN37@reserve@2:
  000bd	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXI@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::reserve
PUBLIC	?push_back@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXABUForceInfo@@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::push_back
; Function compile flags: /Ogsp
;	COMDAT ?push_back@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXABUForceInfo@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXABUForceInfo@@@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 34		 jae	 SHORT $LN4@push_back
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 2e		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 0c		 push	 12			; 0000000cH
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXI@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00031	6b ff 0c	 imul	 edi, 12			; 0000000cH
  00034	03 3e		 add	 edi, DWORD PTR [esi]
  00036	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00039	57		 push	 edi
  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@AAU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@AAU2@@Z ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo &>

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00043	eb 1b		 jmp	 SHORT $LN20@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00045	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00048	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004a	6a 01		 push	 1
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXI@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00053	57		 push	 edi
  00054	ff 76 04	 push	 DWORD PTR [esi+4]
  00057	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>
$LN20@push_back:
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00063	83 46 04 0c	 add	 DWORD PTR [esi+4], 12	; 0000000cH
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
?push_back@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXABUForceInfo@@@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::push_back
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXI@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 28		 push	 40			; 00000028H
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0b		 jae	 SHORT $LN4@Reserve@2

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve@2:
$LN4@Reserve@2:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00030	2b c1		 sub	 eax, ecx
  00032	6a 28		 push	 40			; 00000028H
  00034	99		 cdq
  00035	59		 pop	 ecx
  00036	f7 f9		 idiv	 ecx
  00038	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003b	3b f8		 cmp	 edi, eax
  0003d	76 10		 jbe	 SHORT $LN1@Reserve@2

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003f	57		 push	 edi
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEII@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Grow_to
  00047	50		 push	 eax
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?reserve@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXI@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::reserve
$LN1@Reserve@2:
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 1298 : 		}

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN20@Reserve@2:
?_Reserve@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Reserve
_TEXT	ENDS
PUBLIC	?clear@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T513046 = -4						; size = 4
?clear@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T513046[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@0@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::clear
_TEXT	ENDS
PUBLIC	?Init@AttackAttribute@@QAEXXZ			; AttackAttribute::Init
EXTRN	__imp_?Clear@ioHashString@@QAEXXZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.cpp
;	COMDAT ?Init@AttackAttribute@@QAEXXZ
_TEXT	SEGMENT
tv257 = -4						; size = 4
tv253 = -4						; size = 4
$T513248 = -4						; size = 4
$T513168 = -4						; size = 4
?Init@AttackAttribute@@QAEXXZ PROC			; AttackAttribute::Init, COMDAT
; _this$ = ecx

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx

; 9    : 	m_fAttackAniRate = FLOAT1;

  00008	b8 01 00 00 00	 mov	 eax, 1
  0000d	89 45 fc	 mov	 DWORD PTR tv257[ebp], eax
  00010	db 45 fc	 fild	 DWORD PTR tv257[ebp]
  00013	85 c0		 test	 eax, eax
  00015	79 06		 jns	 SHORT $LN43@Init
  00017	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN43@Init:
  0001d	d9 5e 10	 fstp	 DWORD PTR [esi+16]

; 10   : 	m_fAttackEndAniRate = FLOAT1;

  00020	b8 01 00 00 00	 mov	 eax, 1
  00025	89 45 fc	 mov	 DWORD PTR tv253[ebp], eax
  00028	db 45 fc	 fild	 DWORD PTR tv253[ebp]
  0002b	85 c0		 test	 eax, eax
  0002d	79 06		 jns	 SHORT $LN44@Init
  0002f	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN44@Init:

; 11   : 	m_dwPreDelay = 0;
; 12   : 	m_dwEndDelay = 0;
; 13   : 
; 14   : 	m_AttackAnimation.Clear();

  00035	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?Clear@ioHashString@@QAEXXZ
  0003b	d9 5e 24	 fstp	 DWORD PTR [esi+36]
  0003e	83 66 48 00	 and	 DWORD PTR [esi+72], 0
  00042	83 66 4c 00	 and	 DWORD PTR [esi+76], 0
  00046	ff d7		 call	 edi

; 15   : 	m_AttackEndAnimation.Clear();

  00048	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0004b	ff d7		 call	 edi

; 16   : 
; 17   : 	m_vWeaponInfoList.clear();

  0004d	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00050	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00053	8b 11		 mov	 edx, DWORD PTR [ecx]
  00055	50		 push	 eax
  00056	52		 push	 edx
  00057	8d 45 fc	 lea	 eax, DWORD PTR $T513168[ebp]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?erase@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@0@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::erase

; 18   : 	m_vForceInfoList.clear();

  00060	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  00063	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00066	8b 11		 mov	 edx, DWORD PTR [ecx]
  00068	50		 push	 eax
  00069	52		 push	 edx
  0006a	8d 45 fc	 lea	 eax, DWORD PTR $T513248[ebp]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ?erase@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@0@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::erase
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi

; 19   : }

  00075	c9		 leave
  00076	c3		 ret	 0
?Init@AttackAttribute@@QAEXXZ ENDP			; AttackAttribute::Init
_TEXT	ENDS
PUBLIC	_rkLoader$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?LoadForceInfo@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z ; LoadForceInfo
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?LoadForceInfo@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z
_TEXT	SEGMENT
tv3075 = -324						; size = 4
tv2692 = -320						; size = 4
tv1041 = -316						; size = 4
_iForceCnt$ = -316					; size = 4
_rkLoader$GSCopy$ = -312				; size = 4
_szKey$ = -308						; size = 260
___encStr$507388 = -48					; size = 13
_kInfo$507542 = -44					; size = 12
___encStr$507849 = -28					; size = 17
___encStr$507697 = -28					; size = 20
___encStr$507546 = -24					; size = 16
__$ArrayPad$ = -4					; size = 4
_szAttack$ = 8						; size = 4
_rkAttribute$ = 12					; size = 4
_rkLoader$ = 16						; size = 4
?LoadForceInfo@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z PROC ; LoadForceInfo, COMDAT

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 10	 mov	 eax, DWORD PTR _rkLoader$[ebp]
  00016	53		 push	 ebx
  00017	8b 5d 08	 mov	 ebx, DWORD PTR _szAttack$[ebp]
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	8b 7d 0c	 mov	 edi, DWORD PTR _rkAttribute$[ebp]

; 100  : 	char szKey[MAX_PATH];
; 101  : 
; 102  : 	wsprintf_e( szKey, "%s_force_cnt", szAttack );

  0001f	6a 03		 push	 3

; 116  : 
; 117  : 		wsprintf_e( szKey, "%s_force_angle%d", szAttack, i+1 );

  00021	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], eax
  00027	c7 45 d0 c8 9f
	b4 8c		 mov	 DWORD PTR ___encStr$507388[ebp], -1934319672 ; 8cb49fc8H
  0002e	c7 45 d4 82 9e
	88 8f		 mov	 DWORD PTR ___encStr$507388[ebp+4], -1886871934 ; 8f889e82H
  00035	c7 45 d8 b2 8f
	85 9e		 mov	 DWORD PTR ___encStr$507388[ebp+8], -1635414094 ; 9e858fb2H
  0003c	8d 45 d0	 lea	 eax, DWORD PTR ___encStr$507388[ebp]
  0003f	c6 45 dc 00	 mov	 BYTE PTR ___encStr$507388[ebp+12], 0
  00043	59		 pop	 ecx
$LL408@LoadForceI:

; 100  : 	char szKey[MAX_PATH];
; 101  : 
; 102  : 	wsprintf_e( szKey, "%s_force_cnt", szAttack );

  00044	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0004a	83 c0 04	 add	 eax, 4
  0004d	49		 dec	 ecx
  0004e	75 f4		 jne	 SHORT $LL408@LoadForceI
  00050	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__wsprintfA
  00056	53		 push	 ebx
  00057	8d 45 d0	 lea	 eax, DWORD PTR ___encStr$507388[ebp]
  0005a	50		 push	 eax
  0005b	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00061	50		 push	 eax
  00062	ff d6		 call	 esi

; 103  : 	int iForceCnt = rkLoader.LoadInt( szKey, 0 );

  00064	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006d	6a 00		 push	 0
  0006f	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00075	50		 push	 eax
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  0007c	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _iForceCnt$[ebp], eax

; 104  : 	if( iForceCnt > 0 )

  00082	85 c0		 test	 eax, eax
  00084	0f 8e c6 01 00
	00		 jle	 $LN298@LoadForceI

; 105  : 		rkAttribute.m_vForceInfoList.reserve( iForceCnt );

  0008a	50		 push	 eax
  0008b	8d 4f 38	 lea	 ecx, DWORD PTR [edi+56]
  0008e	e8 00 00 00 00	 call	 ?reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXI@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::reserve
  00093	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _iForceCnt$[ebp]

; 106  : 
; 107  : 	for( int i=0; i < iForceCnt; ++i )

  00099	85 c0		 test	 eax, eax
  0009b	0f 8e af 01 00
	00		 jle	 $LN298@LoadForceI
  000a1	83 c7 38	 add	 edi, 56			; 00000038H
  000a4	89 bd c0 fe ff
	ff		 mov	 DWORD PTR tv2692[ebp], edi
  000aa	33 ff		 xor	 edi, edi
  000ac	47		 inc	 edi
  000ad	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv1041[ebp], eax
$LL300@LoadForceI:

; 108  : 	{
; 109  : 		ForceInfo kInfo;

  000b3	b8 01 00 00 00	 mov	 eax, 1
  000b8	6a 03		 push	 3

; 110  : 
; 111  : 		wsprintf_e( szKey, "%s_force_move%d", szAttack, i+1 );

  000ba	c7 45 e8 c8 9f
	b4 8c		 mov	 DWORD PTR ___encStr$507546[ebp], -1934319672 ; 8cb49fc8H
  000c1	c7 45 ec 82 9e
	88 8f		 mov	 DWORD PTR ___encStr$507546[ebp+4], -1886871934 ; 8f889e82H
  000c8	c7 45 f0 b2 81
	84 9c		 mov	 DWORD PTR ___encStr$507546[ebp+8], -1669037646 ; 9c8481b2H
  000cf	8d 45 e8	 lea	 eax, DWORD PTR ___encStr$507546[ebp]
  000d2	c7 45 f4 88 c9
	8f 00		 mov	 DWORD PTR ___encStr$507546[ebp+12], 9423240 ; 008fc988H
  000d9	59		 pop	 ecx
$LL420@LoadForceI:
  000da	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000e0	83 c0 04	 add	 eax, 4
  000e3	49		 dec	 ecx
  000e4	75 f4		 jne	 SHORT $LL420@LoadForceI
  000e6	6a 0c		 push	 12			; 0000000cH
  000e8	58		 pop	 eax
$LL417@LoadForceI:
  000e9	8b c8		 mov	 ecx, eax
  000eb	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000f1	79 05		 jns	 SHORT $LN459@LoadForceI
  000f3	49		 dec	 ecx
  000f4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000f7	41		 inc	 ecx
$LN459@LoadForceI:
  000f8	b2 ed		 mov	 dl, -19			; ffffffedH
  000fa	2a d1		 sub	 dl, cl
  000fc	30 54 05 e8	 xor	 BYTE PTR ___encStr$507546[ebp+eax], dl
  00100	40		 inc	 eax
  00101	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00104	7c e3		 jl	 SHORT $LL417@LoadForceI
  00106	57		 push	 edi
  00107	53		 push	 ebx
  00108	8d 45 e8	 lea	 eax, DWORD PTR ___encStr$507546[ebp]
  0010b	50		 push	 eax
  0010c	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00112	50		 push	 eax
  00113	ff d6		 call	 esi

; 112  : 		kInfo.m_fForceMovePower = rkLoader.LoadFloat( szKey, 0.0f );

  00115	0f 57 c0	 xorps	 xmm0, xmm0
  00118	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0011e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00121	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00127	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012c	50		 push	 eax
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00133	d9 5d d4	 fstp	 DWORD PTR _kInfo$507542[ebp]
  00136	6a 04		 push	 4

; 113  : 
; 114  : 		wsprintf_e( szKey, "%s_force_friction%d", szAttack, i+1 );

  00138	c7 45 e4 c8 9f
	b4 8c		 mov	 DWORD PTR ___encStr$507697[ebp], -1934319672 ; 8cb49fc8H
  0013f	c7 45 e8 82 9e
	88 8f		 mov	 DWORD PTR ___encStr$507697[ebp+4], -1886871934 ; 8f889e82H
  00146	c7 45 ec b2 8a
	99 83		 mov	 DWORD PTR ___encStr$507697[ebp+8], -2087089486 ; 83998ab2H
  0014d	c7 45 f0 8e 98
	82 85		 mov	 DWORD PTR ___encStr$507697[ebp+12], -2055038834 ; 8582988eH
  00154	8d 45 e4	 lea	 eax, DWORD PTR ___encStr$507697[ebp]
  00157	c7 45 f4 83 c9
	8f 00		 mov	 DWORD PTR ___encStr$507697[ebp+16], 9423235 ; 008fc983H
  0015e	59		 pop	 ecx
$LL428@LoadForceI:
  0015f	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00165	83 c0 04	 add	 eax, 4
  00168	49		 dec	 ecx
  00169	75 f4		 jne	 SHORT $LL428@LoadForceI
  0016b	6a 10		 push	 16			; 00000010H
  0016d	58		 pop	 eax
$LL425@LoadForceI:
  0016e	8b c8		 mov	 ecx, eax
  00170	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00176	79 05		 jns	 SHORT $LN460@LoadForceI
  00178	49		 dec	 ecx
  00179	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0017c	41		 inc	 ecx
$LN460@LoadForceI:
  0017d	b2 ed		 mov	 dl, -19			; ffffffedH
  0017f	2a d1		 sub	 dl, cl
  00181	30 54 05 e4	 xor	 BYTE PTR ___encStr$507697[ebp+eax], dl
  00185	40		 inc	 eax
  00186	83 f8 13	 cmp	 eax, 19			; 00000013H
  00189	7c e3		 jl	 SHORT $LL425@LoadForceI
  0018b	57		 push	 edi
  0018c	53		 push	 ebx
  0018d	8d 45 e4	 lea	 eax, DWORD PTR ___encStr$507697[ebp]
  00190	50		 push	 eax
  00191	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00197	50		 push	 eax
  00198	ff d6		 call	 esi
  0019a	83 c4 10	 add	 esp, 16			; 00000010H

; 115  : 		kInfo.m_fForceMoveFriction = rkLoader.LoadFloat( szKey, FLOAT1 );

  0019d	b8 01 00 00 00	 mov	 eax, 1
  001a2	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv3075[ebp], eax
  001a8	db 85 bc fe ff
	ff		 fild	 DWORD PTR tv3075[ebp]
  001ae	85 c0		 test	 eax, eax
  001b0	79 06		 jns	 SHORT $LN461@LoadForceI
  001b2	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN461@LoadForceI:
  001b8	51		 push	 ecx
  001b9	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  001bf	d9 1c 24	 fstp	 DWORD PTR [esp]
  001c2	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  001c8	50		 push	 eax
  001c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  001cf	d9 5d d8	 fstp	 DWORD PTR _kInfo$507542[ebp+4]
  001d2	6a 04		 push	 4

; 116  : 
; 117  : 		wsprintf_e( szKey, "%s_force_angle%d", szAttack, i+1 );

  001d4	c7 45 e4 c8 9f
	b4 8c		 mov	 DWORD PTR ___encStr$507849[ebp], -1934319672 ; 8cb49fc8H
  001db	c7 45 e8 82 9e
	88 8f		 mov	 DWORD PTR ___encStr$507849[ebp+4], -1886871934 ; 8f889e82H
  001e2	c7 45 ec b2 8d
	85 8d		 mov	 DWORD PTR ___encStr$507849[ebp+8], -1920627278 ; 8d858db2H
  001e9	c7 45 f0 81 89
	ce 8e		 mov	 DWORD PTR ___encStr$507849[ebp+12], -1899067007 ; 8ece8981H
  001f0	8d 45 e4	 lea	 eax, DWORD PTR ___encStr$507849[ebp]
  001f3	c6 45 f4 00	 mov	 BYTE PTR ___encStr$507849[ebp+16], 0
  001f7	59		 pop	 ecx
$LL438@LoadForceI:
  001f8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001fe	83 c0 04	 add	 eax, 4
  00201	49		 dec	 ecx
  00202	75 f4		 jne	 SHORT $LL438@LoadForceI
  00204	57		 push	 edi
  00205	53		 push	 ebx
  00206	8d 45 e4	 lea	 eax, DWORD PTR ___encStr$507849[ebp]
  00209	50		 push	 eax
  0020a	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00210	50		 push	 eax
  00211	ff d6		 call	 esi

; 118  : 		kInfo.m_fForceAngle = rkLoader.LoadFloat( szKey, 0.0f );

  00213	0f 57 c0	 xorps	 xmm0, xmm0
  00216	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0021c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0021f	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00225	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022a	50		 push	 eax
  0022b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00231	d9 5d dc	 fstp	 DWORD PTR _kInfo$507542[ebp+8]

; 119  : 
; 120  : 		rkAttribute.m_vForceInfoList.push_back( kInfo );

  00234	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv2692[ebp]
  0023a	8d 45 d4	 lea	 eax, DWORD PTR _kInfo$507542[ebp]
  0023d	50		 push	 eax
  0023e	e8 00 00 00 00	 call	 ?push_back@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXABUForceInfo@@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::push_back
  00243	47		 inc	 edi
  00244	ff 8d c4 fe ff
	ff		 dec	 DWORD PTR tv1041[ebp]
  0024a	0f 85 63 fe ff
	ff		 jne	 $LL300@LoadForceI
$LN298@LoadForceI:

; 121  : 	}
; 122  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5f		 pop	 edi
  00254	5e		 pop	 esi
  00255	33 cd		 xor	 ecx, ebp
  00257	5b		 pop	 ebx
  00258	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025d	c9		 leave
  0025e	c3		 ret	 0
?LoadForceInfo@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z ENDP ; LoadForceInfo
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXABUWeaponInfo@@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXABUWeaponInfo@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXABUWeaponInfo@@@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 37		 jae	 SHORT $LN4@push_back@2
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 31		 ja	 SHORT $LN4@push_back@2

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 28		 push	 40			; 00000028H
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back@2

; 981  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXI@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Reserve
$LN3@push_back@2:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00031	6b ff 28	 imul	 edi, 40			; 00000028H
  00034	03 3e		 add	 edi, DWORD PTR [esi]
  00036	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00039	57		 push	 edi
  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo &>
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00046	eb 19		 jmp	 SHORT $LN26@push_back@2
$LN4@push_back@2:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00048	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0004b	75 09		 jne	 SHORT $LN1@push_back@2

; 991  : 				_Reserve(1);

  0004d	6a 01		 push	 1
  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXI@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Reserve
$LN1@push_back@2:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00056	57		 push	 edi
  00057	ff 76 04	 push	 DWORD PTR [esi+4]
  0005a	e8 00 00 00 00	 call	 ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
  0005f	59		 pop	 ecx
  00060	59		 pop	 ecx
$LN26@push_back@2:

; 996  : 			++this->_Mylast;

  00061	83 46 04 28	 add	 DWORD PTR [esi+4], 40	; 00000028H
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
?push_back@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXABUWeaponInfo@@@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::push_back
_TEXT	ENDS
PUBLIC	_rkLoader$GSCopy$
PUBLIC	_rkAttribute$GSCopy$
PUBLIC	_szAttack$GSCopy$
PUBLIC	?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z ; LoadAttackAttribute
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	SEGMENT
__unwindtable$?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z$0
__ehfuncinfo$?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.cpp
xdata$x	ENDS
;	COMDAT ?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z
_TEXT	SEGMENT
_kInfo$506618 = -680					; size = 40
tv11190 = -640						; size = 4
tv10098 = -636						; size = 4
_rkAttribute$GSCopy$ = -636				; size = 4
tv11238 = -632						; size = 4
tv11223 = -632						; size = 4
tv8924 = -632						; size = 4
tv5135 = -632						; size = 4
_iForceCnt$ = -632					; size = 4
tv11258 = -628						; size = 4
tv11149 = -628						; size = 4
_szAttack$GSCopy$ = -624				; size = 4
_rkLoader$GSCopy$ = -620				; size = 4
_szBuf$ = -616						; size = 260
_szKey$ = -356						; size = 260
___encStr$507230 = -96					; size = 27
___encStr$506464 = -64					; size = 14
___encStr$505848 = -64					; size = 13
___encStr$505544 = -64					; size = 13
___encStr$505085 = -64					; size = 13
___encStr$506622 = -60					; size = 10
_kInfo$506003 = -60					; size = 12
___encStr$505696 = -60					; size = 9
___encStr$507078 = -44					; size = 23
___encStr$506159 = -44					; size = 20
___encStr$506926 = -40					; size = 18
___encStr$506774 = -40					; size = 17
___encStr$506312 = -40					; size = 17
___encStr$506007 = -40					; size = 16
___encStr$505391 = -40					; size = 17
___encStr$505239 = -40					; size = 17
__$EHRec$ = -12						; size = 12
_szAttack$ = 8						; size = 4
_rkAttribute$ = 12					; size = 4
_rkLoader$ = 16						; size = 4
?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z PROC ; LoadAttackAttribute, COMDAT

; 22   : {

  00000	68 9c 02 00 00	 push	 668			; 0000029cH
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b 7d 0c	 mov	 edi, DWORD PTR _rkAttribute$[ebp]
  00012	8b 75 08	 mov	 esi, DWORD PTR _szAttack$[ebp]
  00015	8b 5d 10	 mov	 ebx, DWORD PTR _rkLoader$[ebp]

; 23   : 	rkAttribute.Init();

  00018	8b cf		 mov	 ecx, edi

; 89   : 
; 90   : 		wsprintf_e( szKey, "%s_type%d_wounded_loop_ani", szAttack, i+1 );

  0001a	89 b5 90 fd ff
	ff		 mov	 DWORD PTR _szAttack$GSCopy$[ebp], esi
  00020	89 bd 84 fd ff
	ff		 mov	 DWORD PTR _rkAttribute$GSCopy$[ebp], edi
  00026	89 9d 94 fd ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], ebx
  0002c	e8 00 00 00 00	 call	 ?Init@AttackAttribute@@QAEXXZ ; AttackAttribute::Init
  00031	68 04 01 00 00	 push	 260			; 00000104H
  00036	8d 85 98 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0003c	50		 push	 eax
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00042	56		 push	 esi
  00043	8b cb		 mov	 ecx, ebx
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z
  0004b	8d 85 98 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00051	50		 push	 eax
  00052	8b cf		 mov	 ecx, edi
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  0005a	8b cf		 mov	 ecx, edi
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00062	84 c0		 test	 al, al
  00064	0f 85 a2 07 00
	00		 jne	 $LN496@LoadAttack

; 24   : 
; 25   : 	char szKey[MAX_PATH], szBuf[MAX_PATH];
; 26   : 	rkLoader.LoadString( szAttack, "", szBuf, MAX_PATH );
; 27   : 	rkAttribute.m_AttackAnimation = szBuf;
; 28   : 
; 29   : 	if( rkAttribute.m_AttackAnimation.IsEmpty() )
; 30   : 		return;
; 31   : 
; 32   : 	wsprintf_e( szKey, "%s_time_rate", szAttack );

  0006a	33 db		 xor	 ebx, ebx
  0006c	6a 03		 push	 3
  0006e	c7 45 c0 c8 9f
	b4 9e		 mov	 DWORD PTR ___encStr$505085[ebp], -1632329784 ; 9eb49fc8H
  00075	c7 45 c4 84 81
	8e b5		 mov	 DWORD PTR ___encStr$505085[ebp+4], -1248951932 ; b58e8184H
  0007c	c7 45 c8 9f 8d
	9f 8f		 mov	 DWORD PTR ___encStr$505085[ebp+8], -1885368929 ; 8f9f8d9fH
  00083	8d 45 c0	 lea	 eax, DWORD PTR ___encStr$505085[ebp]
  00086	88 5d cc	 mov	 BYTE PTR ___encStr$505085[ebp+12], bl
  00089	59		 pop	 ecx
$LL1502@LoadAttack:
  0008a	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00090	83 c0 04	 add	 eax, 4
  00093	49		 dec	 ecx
  00094	75 f4		 jne	 SHORT $LL1502@LoadAttack
  00096	56		 push	 esi
  00097	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__wsprintfA
  0009d	8d 45 c0	 lea	 eax, DWORD PTR ___encStr$505085[ebp]
  000a0	50		 push	 eax
  000a1	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  000a7	50		 push	 eax
  000a8	ff d6		 call	 esi
  000aa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 33   : 	rkAttribute.m_fAttackAniRate = rkLoader.LoadFloat( szKey, FLOAT1 );

  000ad	b8 01 00 00 00	 mov	 eax, 1
  000b2	89 85 88 fd ff
	ff		 mov	 DWORD PTR tv11238[ebp], eax
  000b8	db 85 88 fd ff
	ff		 fild	 DWORD PTR tv11238[ebp]
  000be	85 c0		 test	 eax, eax
  000c0	79 06		 jns	 SHORT $LN1696@LoadAttack
  000c2	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN1696@LoadAttack:
  000c8	51		 push	 ecx
  000c9	8b 8d 94 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  000cf	d9 1c 24	 fstp	 DWORD PTR [esp]
  000d2	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  000d8	50		 push	 eax
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  000df	d9 5f 10	 fstp	 DWORD PTR [edi+16]
  000e2	6a 04		 push	 4

; 34   : 
; 35   : 	wsprintf_e( szKey, "%s_end_animation", szAttack );

  000e4	c7 45 d8 c8 9f
	b4 8f		 mov	 DWORD PTR ___encStr$505239[ebp], -1883988024 ; 8fb49fc8H
  000eb	c7 45 dc 83 88
	b4 8b		 mov	 DWORD PTR ___encStr$505239[ebp+4], -1951102845 ; 8bb48883H
  000f2	c7 45 e0 83 85
	86 8b		 mov	 DWORD PTR ___encStr$505239[ebp+8], -1954118269 ; 8b868583H
  000f9	c7 45 e4 99 85
	84 84		 mov	 DWORD PTR ___encStr$505239[ebp+12], -2071689831 ; 84848599H
  00100	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$505239[ebp]
  00103	88 5d e8	 mov	 BYTE PTR ___encStr$505239[ebp+16], bl
  00106	59		 pop	 ecx
$LL1512@LoadAttack:
  00107	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0010d	83 c0 04	 add	 eax, 4
  00110	49		 dec	 ecx
  00111	75 f4		 jne	 SHORT $LL1512@LoadAttack
  00113	ff b5 90 fd ff
	ff		 push	 DWORD PTR _szAttack$GSCopy$[ebp]
  00119	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$505239[ebp]
  0011c	50		 push	 eax
  0011d	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00123	50		 push	 eax
  00124	ff d6		 call	 esi

; 36   : 	rkLoader.LoadString( szKey, "", szBuf, MAX_PATH );

  00126	8b 8d 94 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0012c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012f	68 04 01 00 00	 push	 260			; 00000104H
  00134	8d 85 98 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0013a	50		 push	 eax
  0013b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00140	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00146	50		 push	 eax
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 37   : 	rkAttribute.m_AttackEndAnimation = szBuf;

  0014d	8d 85 98 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00153	50		 push	 eax
  00154	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00157	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  0015d	6a 04		 push	 4

; 38   : 
; 39   : 	wsprintf_e( szKey, "%s_end_time_rate", szAttack );

  0015f	c7 45 d8 c8 9f
	b4 8f		 mov	 DWORD PTR ___encStr$505391[ebp], -1883988024 ; 8fb49fc8H
  00166	c7 45 dc 83 88
	b4 9e		 mov	 DWORD PTR ___encStr$505391[ebp+4], -1632335741 ; 9eb48883H
  0016d	c7 45 e0 84 81
	8e b5		 mov	 DWORD PTR ___encStr$505391[ebp+8], -1248951932 ; b58e8184H
  00174	c7 45 e4 9f 8d
	9f 8f		 mov	 DWORD PTR ___encStr$505391[ebp+12], -1885368929 ; 8f9f8d9fH
  0017b	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$505391[ebp]
  0017e	88 5d e8	 mov	 BYTE PTR ___encStr$505391[ebp+16], bl
  00181	59		 pop	 ecx
$LL1520@LoadAttack:
  00182	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00188	83 c0 04	 add	 eax, 4
  0018b	49		 dec	 ecx
  0018c	75 f4		 jne	 SHORT $LL1520@LoadAttack
  0018e	ff b5 90 fd ff
	ff		 push	 DWORD PTR _szAttack$GSCopy$[ebp]
  00194	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$505391[ebp]
  00197	50		 push	 eax
  00198	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0019e	50		 push	 eax
  0019f	ff d6		 call	 esi
  001a1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 40   : 	rkAttribute.m_fAttackEndAniRate = rkLoader.LoadFloat( szKey, FLOAT1 );

  001a4	b8 01 00 00 00	 mov	 eax, 1
  001a9	89 85 88 fd ff
	ff		 mov	 DWORD PTR tv11223[ebp], eax
  001af	db 85 88 fd ff
	ff		 fild	 DWORD PTR tv11223[ebp]
  001b5	85 c0		 test	 eax, eax
  001b7	79 06		 jns	 SHORT $LN1697@LoadAttack
  001b9	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN1697@LoadAttack:
  001bf	51		 push	 ecx
  001c0	8b 8d 94 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  001c6	d9 1c 24	 fstp	 DWORD PTR [esp]
  001c9	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  001cf	50		 push	 eax
  001d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  001d6	d9 5f 24	 fstp	 DWORD PTR [edi+36]
  001d9	6a 03		 push	 3

; 41   : 
; 42   : 	wsprintf_e( szKey, "%s_pre_delay", szAttack );

  001db	c7 45 c0 c8 9f
	b4 9a		 mov	 DWORD PTR ___encStr$505544[ebp], -1699438648 ; 9ab49fc8H
  001e2	c7 45 c4 9f 89
	b4 8e		 mov	 DWORD PTR ___encStr$505544[ebp+4], -1900770913 ; 8eb4899fH
  001e9	c7 45 c8 88 80
	8a 93		 mov	 DWORD PTR ___encStr$505544[ebp+8], -1819639672 ; 938a8088H
  001f0	8d 45 c0	 lea	 eax, DWORD PTR ___encStr$505544[ebp]
  001f3	88 5d cc	 mov	 BYTE PTR ___encStr$505544[ebp+12], bl
  001f6	59		 pop	 ecx
$LL1530@LoadAttack:
  001f7	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001fd	83 c0 04	 add	 eax, 4
  00200	49		 dec	 ecx
  00201	75 f4		 jne	 SHORT $LL1530@LoadAttack
  00203	ff b5 90 fd ff
	ff		 push	 DWORD PTR _szAttack$GSCopy$[ebp]
  00209	8d 45 c0	 lea	 eax, DWORD PTR ___encStr$505544[ebp]
  0020c	50		 push	 eax
  0020d	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00213	50		 push	 eax
  00214	ff d6		 call	 esi

; 43   : 	rkAttribute.m_dwPreDelay = rkLoader.LoadInt( szKey, 0 );

  00216	8b 8d 94 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0021c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00222	83 c4 0c	 add	 esp, 12			; 0000000cH
  00225	53		 push	 ebx
  00226	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0022c	50		 push	 eax
  0022d	ff d7		 call	 edi
  0022f	8b 8d 84 fd ff
	ff		 mov	 ecx, DWORD PTR _rkAttribute$GSCopy$[ebp]
  00235	89 41 48	 mov	 DWORD PTR [ecx+72], eax
  00238	6a 02		 push	 2

; 44   : 
; 45   : 	wsprintf_e( szKey, "%s_delay", szAttack );

  0023a	c7 45 c4 c8 9f
	b4 8e		 mov	 DWORD PTR ___encStr$505696[ebp], -1900765240 ; 8eb49fc8H
  00241	c7 45 c8 88 80
	8a 93		 mov	 DWORD PTR ___encStr$505696[ebp+4], -1819639672 ; 938a8088H
  00248	8d 45 c4	 lea	 eax, DWORD PTR ___encStr$505696[ebp]
  0024b	88 5d cc	 mov	 BYTE PTR ___encStr$505696[ebp+8], bl
  0024e	59		 pop	 ecx
$LL1538@LoadAttack:
  0024f	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00255	83 c0 04	 add	 eax, 4
  00258	49		 dec	 ecx
  00259	75 f4		 jne	 SHORT $LL1538@LoadAttack
  0025b	ff b5 90 fd ff
	ff		 push	 DWORD PTR _szAttack$GSCopy$[ebp]
  00261	8d 45 c4	 lea	 eax, DWORD PTR ___encStr$505696[ebp]
  00264	50		 push	 eax
  00265	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0026b	50		 push	 eax
  0026c	ff d6		 call	 esi

; 46   : 	rkAttribute.m_dwEndDelay = rkLoader.LoadInt( szKey, 0 );

  0026e	8b 8d 94 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00274	83 c4 0c	 add	 esp, 12			; 0000000cH
  00277	53		 push	 ebx
  00278	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0027e	50		 push	 eax
  0027f	ff d7		 call	 edi
  00281	8b 8d 84 fd ff
	ff		 mov	 ecx, DWORD PTR _rkAttribute$GSCopy$[ebp]
  00287	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
  0028a	6a 03		 push	 3

; 47   : 
; 48   : 
; 49   : 	wsprintf_e( szKey, "%s_force_cnt", szAttack );

  0028c	c7 45 c0 c8 9f
	b4 8c		 mov	 DWORD PTR ___encStr$505848[ebp], -1934319672 ; 8cb49fc8H
  00293	c7 45 c4 82 9e
	88 8f		 mov	 DWORD PTR ___encStr$505848[ebp+4], -1886871934 ; 8f889e82H
  0029a	c7 45 c8 b2 8f
	85 9e		 mov	 DWORD PTR ___encStr$505848[ebp+8], -1635414094 ; 9e858fb2H
  002a1	8d 45 c0	 lea	 eax, DWORD PTR ___encStr$505848[ebp]
  002a4	88 5d cc	 mov	 BYTE PTR ___encStr$505848[ebp+12], bl
  002a7	59		 pop	 ecx
$LL1546@LoadAttack:
  002a8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002ae	83 c0 04	 add	 eax, 4
  002b1	49		 dec	 ecx
  002b2	75 f4		 jne	 SHORT $LL1546@LoadAttack
  002b4	ff b5 90 fd ff
	ff		 push	 DWORD PTR _szAttack$GSCopy$[ebp]
  002ba	8d 45 c0	 lea	 eax, DWORD PTR ___encStr$505848[ebp]
  002bd	50		 push	 eax
  002be	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  002c4	50		 push	 eax
  002c5	ff d6		 call	 esi

; 50   : 	int iForceCnt = rkLoader.LoadInt( szKey, 0 );

  002c7	8b 8d 94 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  002cd	83 c4 0c	 add	 esp, 12			; 0000000cH
  002d0	53		 push	 ebx
  002d1	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  002d7	50		 push	 eax
  002d8	ff d7		 call	 edi
  002da	89 85 88 fd ff
	ff		 mov	 DWORD PTR _iForceCnt$[ebp], eax

; 51   : 	if( iForceCnt > 0 )

  002e0	3b c3		 cmp	 eax, ebx
  002e2	0f 8e ef 01 00
	00		 jle	 $LN597@LoadAttack

; 52   : 		rkAttribute.m_vForceInfoList.reserve( iForceCnt );

  002e8	8b 8d 84 fd ff
	ff		 mov	 ecx, DWORD PTR _rkAttribute$GSCopy$[ebp]
  002ee	83 c1 38	 add	 ecx, 56			; 00000038H
  002f1	50		 push	 eax
  002f2	e8 00 00 00 00	 call	 ?reserve@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXI@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::reserve

; 53   : 
; 54   : 	for( int i=0; i < iForceCnt; ++i )

  002f7	8b 85 88 fd ff
	ff		 mov	 eax, DWORD PTR _iForceCnt$[ebp]
  002fd	3b c3		 cmp	 eax, ebx
  002ff	0f 8e d2 01 00
	00		 jle	 $LN597@LoadAttack
  00305	c7 85 8c fd ff
	ff 01 00 00 00	 mov	 DWORD PTR tv11149[ebp], 1
  0030f	89 85 88 fd ff
	ff		 mov	 DWORD PTR tv8924[ebp], eax
$LN897@LoadAttack:

; 55   : 	{
; 56   : 		ForceInfo kInfo;

  00315	b8 01 00 00 00	 mov	 eax, 1
  0031a	6a 03		 push	 3

; 57   : 
; 58   : 		wsprintf_e( szKey, "%s_force_move%d", szAttack, i+1 );

  0031c	c7 45 d8 c8 9f
	b4 8c		 mov	 DWORD PTR ___encStr$506007[ebp], -1934319672 ; 8cb49fc8H
  00323	c7 45 dc 82 9e
	88 8f		 mov	 DWORD PTR ___encStr$506007[ebp+4], -1886871934 ; 8f889e82H
  0032a	c7 45 e0 b2 81
	84 9c		 mov	 DWORD PTR ___encStr$506007[ebp+8], -1669037646 ; 9c8481b2H
  00331	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$506007[ebp]
  00334	c7 45 e4 88 c9
	8f 00		 mov	 DWORD PTR ___encStr$506007[ebp+12], 9423240 ; 008fc988H
  0033b	59		 pop	 ecx
$LL1558@LoadAttack:
  0033c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00342	83 c0 04	 add	 eax, 4
  00345	49		 dec	 ecx
  00346	75 f4		 jne	 SHORT $LL1558@LoadAttack
  00348	6a 0c		 push	 12			; 0000000cH
  0034a	58		 pop	 eax
$LL1555@LoadAttack:
  0034b	8b c8		 mov	 ecx, eax
  0034d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00353	79 05		 jns	 SHORT $LN1698@LoadAttack
  00355	49		 dec	 ecx
  00356	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00359	41		 inc	 ecx
$LN1698@LoadAttack:
  0035a	b2 ed		 mov	 dl, -19			; ffffffedH
  0035c	2a d1		 sub	 dl, cl
  0035e	30 54 05 d8	 xor	 BYTE PTR ___encStr$506007[ebp+eax], dl
  00362	40		 inc	 eax
  00363	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00366	7c e3		 jl	 SHORT $LL1555@LoadAttack
  00368	ff b5 8c fd ff
	ff		 push	 DWORD PTR tv11149[ebp]
  0036e	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$506007[ebp]
  00371	ff b5 90 fd ff
	ff		 push	 DWORD PTR _szAttack$GSCopy$[ebp]
  00377	50		 push	 eax
  00378	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0037e	50		 push	 eax
  0037f	ff d6		 call	 esi

; 59   : 		kInfo.m_fForceMovePower = rkLoader.LoadFloat( szKey, 0.0f );

  00381	0f 57 c0	 xorps	 xmm0, xmm0
  00384	8b 8d 94 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0038a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0038d	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00393	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00398	50		 push	 eax
  00399	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0039f	d9 5d c4	 fstp	 DWORD PTR _kInfo$506003[ebp]
  003a2	6a 04		 push	 4

; 60   : 
; 61   : 		wsprintf_e( szKey, "%s_force_friction%d", szAttack, i+1 );

  003a4	c7 45 d4 c8 9f
	b4 8c		 mov	 DWORD PTR ___encStr$506159[ebp], -1934319672 ; 8cb49fc8H
  003ab	c7 45 d8 82 9e
	88 8f		 mov	 DWORD PTR ___encStr$506159[ebp+4], -1886871934 ; 8f889e82H
  003b2	c7 45 dc b2 8a
	99 83		 mov	 DWORD PTR ___encStr$506159[ebp+8], -2087089486 ; 83998ab2H
  003b9	c7 45 e0 8e 98
	82 85		 mov	 DWORD PTR ___encStr$506159[ebp+12], -2055038834 ; 8582988eH
  003c0	8d 45 d4	 lea	 eax, DWORD PTR ___encStr$506159[ebp]
  003c3	c7 45 e4 83 c9
	8f 00		 mov	 DWORD PTR ___encStr$506159[ebp+16], 9423235 ; 008fc983H
  003ca	59		 pop	 ecx
$LL1566@LoadAttack:
  003cb	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  003d1	83 c0 04	 add	 eax, 4
  003d4	49		 dec	 ecx
  003d5	75 f4		 jne	 SHORT $LL1566@LoadAttack
  003d7	6a 10		 push	 16			; 00000010H
  003d9	58		 pop	 eax
$LL1563@LoadAttack:
  003da	8b c8		 mov	 ecx, eax
  003dc	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  003e2	79 05		 jns	 SHORT $LN1699@LoadAttack
  003e4	49		 dec	 ecx
  003e5	83 c9 fc	 or	 ecx, -4			; fffffffcH
  003e8	41		 inc	 ecx
$LN1699@LoadAttack:
  003e9	b2 ed		 mov	 dl, -19			; ffffffedH
  003eb	2a d1		 sub	 dl, cl
  003ed	30 54 05 d4	 xor	 BYTE PTR ___encStr$506159[ebp+eax], dl
  003f1	40		 inc	 eax
  003f2	83 f8 13	 cmp	 eax, 19			; 00000013H
  003f5	7c e3		 jl	 SHORT $LL1563@LoadAttack
  003f7	ff b5 8c fd ff
	ff		 push	 DWORD PTR tv11149[ebp]
  003fd	8d 45 d4	 lea	 eax, DWORD PTR ___encStr$506159[ebp]
  00400	ff b5 90 fd ff
	ff		 push	 DWORD PTR _szAttack$GSCopy$[ebp]
  00406	50		 push	 eax
  00407	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0040d	50		 push	 eax
  0040e	ff d6		 call	 esi
  00410	83 c4 10	 add	 esp, 16			; 00000010H

; 62   : 		kInfo.m_fForceMoveFriction = rkLoader.LoadFloat( szKey, FLOAT1 );

  00413	b8 01 00 00 00	 mov	 eax, 1
  00418	89 85 80 fd ff
	ff		 mov	 DWORD PTR tv11190[ebp], eax
  0041e	db 85 80 fd ff
	ff		 fild	 DWORD PTR tv11190[ebp]
  00424	85 c0		 test	 eax, eax
  00426	79 06		 jns	 SHORT $LN1700@LoadAttack
  00428	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN1700@LoadAttack:
  0042e	51		 push	 ecx
  0042f	8b 8d 94 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00435	d9 1c 24	 fstp	 DWORD PTR [esp]
  00438	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0043e	50		 push	 eax
  0043f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00445	d9 5d c8	 fstp	 DWORD PTR _kInfo$506003[ebp+4]
  00448	6a 04		 push	 4

; 63   : 
; 64   : 		wsprintf_e( szKey, "%s_force_angle%d", szAttack, i+1 );

  0044a	c7 45 d8 c8 9f
	b4 8c		 mov	 DWORD PTR ___encStr$506312[ebp], -1934319672 ; 8cb49fc8H
  00451	c7 45 dc 82 9e
	88 8f		 mov	 DWORD PTR ___encStr$506312[ebp+4], -1886871934 ; 8f889e82H
  00458	c7 45 e0 b2 8d
	85 8d		 mov	 DWORD PTR ___encStr$506312[ebp+8], -1920627278 ; 8d858db2H
  0045f	c7 45 e4 81 89
	ce 8e		 mov	 DWORD PTR ___encStr$506312[ebp+12], -1899067007 ; 8ece8981H
  00466	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$506312[ebp]
  00469	88 5d e8	 mov	 BYTE PTR ___encStr$506312[ebp+16], bl
  0046c	59		 pop	 ecx
$LL1576@LoadAttack:
  0046d	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00473	83 c0 04	 add	 eax, 4
  00476	49		 dec	 ecx
  00477	75 f4		 jne	 SHORT $LL1576@LoadAttack
  00479	ff b5 8c fd ff
	ff		 push	 DWORD PTR tv11149[ebp]
  0047f	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$506312[ebp]
  00482	ff b5 90 fd ff
	ff		 push	 DWORD PTR _szAttack$GSCopy$[ebp]
  00488	50		 push	 eax
  00489	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0048f	50		 push	 eax
  00490	ff d6		 call	 esi

; 65   : 		kInfo.m_fForceAngle = rkLoader.LoadFloat( szKey, 0.0f );

  00492	0f 57 c0	 xorps	 xmm0, xmm0
  00495	8b 8d 94 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0049b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0049e	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  004a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a9	50		 push	 eax
  004aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  004b0	d9 5d cc	 fstp	 DWORD PTR _kInfo$506003[ebp+8]

; 66   : 
; 67   : 		rkAttribute.m_vForceInfoList.push_back( kInfo );

  004b3	8b 8d 84 fd ff
	ff		 mov	 ecx, DWORD PTR _rkAttribute$GSCopy$[ebp]
  004b9	8d 45 c4	 lea	 eax, DWORD PTR _kInfo$506003[ebp]
  004bc	50		 push	 eax
  004bd	83 c1 38	 add	 ecx, 56			; 00000038H
  004c0	e8 00 00 00 00	 call	 ?push_back@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXABUForceInfo@@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::push_back
  004c5	ff 85 8c fd ff
	ff		 inc	 DWORD PTR tv11149[ebp]
  004cb	ff 8d 88 fd ff
	ff		 dec	 DWORD PTR tv8924[ebp]
  004d1	0f 85 3e fe ff
	ff		 jne	 $LN897@LoadAttack
$LN597@LoadAttack:

; 68   : 	}
; 69   : 
; 70   : 
; 71   : 	wsprintf_e( szKey, "%s_type_count", szAttack );

  004d7	6a 03		 push	 3
  004d9	c7 45 c0 c8 9f
	b4 9e		 mov	 DWORD PTR ___encStr$506464[ebp], -1632329784 ; 9eb49fc8H
  004e0	c7 45 c4 94 9c
	8e b5		 mov	 DWORD PTR ___encStr$506464[ebp+4], -1248945004 ; b58e9c94H
  004e7	c7 45 c8 8e 83
	9e 84		 mov	 DWORD PTR ___encStr$506464[ebp+8], -2069986418 ; 849e838eH
  004ee	8d 45 c0	 lea	 eax, DWORD PTR ___encStr$506464[ebp]
  004f1	66 c7 45 cc 99
	00		 mov	 WORD PTR ___encStr$506464[ebp+12], 153 ; 00000099H
  004f7	59		 pop	 ecx
$LL1584@LoadAttack:
  004f8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  004fe	83 c0 04	 add	 eax, 4
  00501	49		 dec	 ecx
  00502	75 f4		 jne	 SHORT $LL1584@LoadAttack
  00504	ff b5 90 fd ff
	ff		 push	 DWORD PTR _szAttack$GSCopy$[ebp]
  0050a	80 75 cc ed	 xor	 BYTE PTR ___encStr$506464[ebp+12], -19 ; ffffffedH
  0050e	8d 45 c0	 lea	 eax, DWORD PTR ___encStr$506464[ebp]
  00511	50		 push	 eax
  00512	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00518	50		 push	 eax
  00519	ff d6		 call	 esi

; 72   : 	int iAttackTypeCnt = rkLoader.LoadInt( szKey, 0 );

  0051b	8b 8d 94 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00521	83 c4 0c	 add	 esp, 12			; 0000000cH
  00524	53		 push	 ebx
  00525	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0052b	50		 push	 eax
  0052c	ff d7		 call	 edi

; 73   : 	for( int i=0 ; i<iAttackTypeCnt ; i++ )

  0052e	3b c3		 cmp	 eax, ebx
  00530	0f 8e d6 02 00
	00		 jle	 $LN496@LoadAttack
  00536	8b 8d 84 fd ff
	ff		 mov	 ecx, DWORD PTR _rkAttribute$GSCopy$[ebp]
  0053c	83 c1 28	 add	 ecx, 40			; 00000028H
  0053f	89 8d 84 fd ff
	ff		 mov	 DWORD PTR tv10098[ebp], ecx
  00545	c7 85 8c fd ff
	ff 01 00 00 00	 mov	 DWORD PTR tv11258[ebp], 1
  0054f	89 85 88 fd ff
	ff		 mov	 DWORD PTR tv5135[ebp], eax
$LL498@LoadAttack:

; 74   : 	{
; 75   : 		WeaponInfo kInfo;

  00555	8d 8d 58 fd ff
	ff		 lea	 ecx, DWORD PTR _kInfo$506618[ebp]
  0055b	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@XZ	; WeaponInfo::WeaponInfo
  00560	6a 02		 push	 2
  00562	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 76   : 
; 77   : 		wsprintf_e( szKey, "%s_type%d", szAttack, i+1 );

  00565	c7 45 c4 c8 9f
	b4 9e		 mov	 DWORD PTR ___encStr$506622[ebp], -1632329784 ; 9eb49fc8H
  0056c	c7 45 c8 94 9c
	8e cf		 mov	 DWORD PTR ___encStr$506622[ebp+4], -812737388 ; cf8e9c94H
  00573	8d 45 c4	 lea	 eax, DWORD PTR ___encStr$506622[ebp]
  00576	66 c7 45 cc 89
	00		 mov	 WORD PTR ___encStr$506622[ebp+8], 137 ; 00000089H
  0057c	59		 pop	 ecx
$LL1592@LoadAttack:
  0057d	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00583	83 c0 04	 add	 eax, 4
  00586	49		 dec	 ecx
  00587	75 f4		 jne	 SHORT $LL1592@LoadAttack
  00589	ff b5 8c fd ff
	ff		 push	 DWORD PTR tv11258[ebp]
  0058f	80 75 cc ed	 xor	 BYTE PTR ___encStr$506622[ebp+8], -19 ; ffffffedH
  00593	ff b5 90 fd ff
	ff		 push	 DWORD PTR _szAttack$GSCopy$[ebp]
  00599	8d 45 c4	 lea	 eax, DWORD PTR ___encStr$506622[ebp]
  0059c	50		 push	 eax
  0059d	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  005a3	50		 push	 eax
  005a4	ff d6		 call	 esi

; 78   : 		kInfo.m_iWeaponIdx = rkLoader.LoadInt( szKey, NO_WEAPON_ATTRIBUTE );

  005a6	8b 8d 94 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  005ac	83 c4 10	 add	 esp, 16			; 00000010H
  005af	53		 push	 ebx
  005b0	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  005b6	50		 push	 eax
  005b7	ff d7		 call	 edi
  005b9	6a 04		 push	 4
  005bb	89 85 58 fd ff
	ff		 mov	 DWORD PTR _kInfo$506618[ebp], eax

; 79   : 
; 80   : 		wsprintf_e( szKey, "%s_type%d_resist", szAttack, i+1 );

  005c1	c7 45 d8 c8 9f
	b4 9e		 mov	 DWORD PTR ___encStr$506774[ebp], -1632329784 ; 9eb49fc8H
  005c8	c7 45 dc 94 9c
	8e cf		 mov	 DWORD PTR ___encStr$506774[ebp+4], -812737388 ; cf8e9c94H
  005cf	c7 45 e0 89 b3
	99 8f		 mov	 DWORD PTR ___encStr$506774[ebp+8], -1885752439 ; 8f99b389H
  005d6	c7 45 e4 9e 85
	98 9e		 mov	 DWORD PTR ___encStr$506774[ebp+12], -1634171490 ; 9e98859eH
  005dd	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$506774[ebp]
  005e0	88 5d e8	 mov	 BYTE PTR ___encStr$506774[ebp+16], bl
  005e3	59		 pop	 ecx
$LL1600@LoadAttack:
  005e4	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  005ea	83 c0 04	 add	 eax, 4
  005ed	49		 dec	 ecx
  005ee	75 f4		 jne	 SHORT $LL1600@LoadAttack
  005f0	ff b5 8c fd ff
	ff		 push	 DWORD PTR tv11258[ebp]
  005f6	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$506774[ebp]
  005f9	ff b5 90 fd ff
	ff		 push	 DWORD PTR _szAttack$GSCopy$[ebp]
  005ff	50		 push	 eax
  00600	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00606	50		 push	 eax
  00607	ff d6		 call	 esi

; 81   : 		kInfo.m_iResistanceIdx = rkLoader.LoadInt( szKey, NO_WEAPON_ATTRIBUTE );

  00609	8b 8d 94 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0060f	83 c4 10	 add	 esp, 16			; 00000010H
  00612	53		 push	 ebx
  00613	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00619	50		 push	 eax
  0061a	ff d7		 call	 edi
  0061c	6a 04		 push	 4
  0061e	89 85 5c fd ff
	ff		 mov	 DWORD PTR _kInfo$506618[ebp+4], eax

; 82   : 
; 83   : 		wsprintf_e( szKey, "%s_type%d_wounded", szAttack, i+1 );

  00624	c7 45 d8 c8 9f
	b4 9e		 mov	 DWORD PTR ___encStr$506926[ebp], -1632329784 ; 9eb49fc8H
  0062b	c7 45 dc 94 9c
	8e cf		 mov	 DWORD PTR ___encStr$506926[ebp+4], -812737388 ; cf8e9c94H
  00632	c7 45 e0 89 b3
	9c 85		 mov	 DWORD PTR ___encStr$506926[ebp+8], -2053327991 ; 859cb389H
  00639	c7 45 e4 98 82
	8f 8f		 mov	 DWORD PTR ___encStr$506926[ebp+12], -1886420328 ; 8f8f8298H
  00640	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$506926[ebp]
  00643	66 c7 45 e8 89
	00		 mov	 WORD PTR ___encStr$506926[ebp+16], 137 ; 00000089H
  00649	59		 pop	 ecx
$LL1608@LoadAttack:
  0064a	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00650	83 c0 04	 add	 eax, 4
  00653	49		 dec	 ecx
  00654	75 f4		 jne	 SHORT $LL1608@LoadAttack
  00656	ff b5 8c fd ff
	ff		 push	 DWORD PTR tv11258[ebp]
  0065c	80 75 e8 ed	 xor	 BYTE PTR ___encStr$506926[ebp+16], -19 ; ffffffedH
  00660	ff b5 90 fd ff
	ff		 push	 DWORD PTR _szAttack$GSCopy$[ebp]
  00666	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$506926[ebp]
  00669	50		 push	 eax
  0066a	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00670	50		 push	 eax
  00671	ff d6		 call	 esi

; 84   : 		rkLoader.LoadString( szKey, "", szBuf, MAX_PATH );

  00673	8b 8d 94 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00679	83 c4 10	 add	 esp, 16			; 00000010H
  0067c	68 04 01 00 00	 push	 260			; 00000104H
  00681	8d 85 98 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00687	50		 push	 eax
  00688	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0068d	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00693	50		 push	 eax
  00694	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 85   : 		kInfo.m_WoundedAnimation = szBuf;

  0069a	8d 85 98 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  006a0	50		 push	 eax
  006a1	8d 8d 60 fd ff
	ff		 lea	 ecx, DWORD PTR _kInfo$506618[ebp+8]
  006a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  006ad	6a 05		 push	 5

; 86   : 
; 87   : 		wsprintf_e( szKey, "%s_type%d_wounded_time", szAttack, i+1 );

  006af	c7 45 d4 c8 9f
	b4 9e		 mov	 DWORD PTR ___encStr$507078[ebp], -1632329784 ; 9eb49fc8H
  006b6	c7 45 d8 94 9c
	8e cf		 mov	 DWORD PTR ___encStr$507078[ebp+4], -812737388 ; cf8e9c94H
  006bd	c7 45 dc 89 b3
	9c 85		 mov	 DWORD PTR ___encStr$507078[ebp+8], -2053327991 ; 859cb389H
  006c4	c7 45 e0 98 82
	8f 8f		 mov	 DWORD PTR ___encStr$507078[ebp+12], -1886420328 ; 8f8f8298H
  006cb	c7 45 e4 89 b3
	9f 83		 mov	 DWORD PTR ___encStr$507078[ebp+16], -2086685815 ; 839fb389H
  006d2	66 c7 45 e8 80
	89		 mov	 WORD PTR ___encStr$507078[ebp+20], 35200 ; 00008980H
  006d8	8d 45 d4	 lea	 eax, DWORD PTR ___encStr$507078[ebp]
  006db	88 5d ea	 mov	 BYTE PTR ___encStr$507078[ebp+22], bl
  006de	59		 pop	 ecx
$LL1616@LoadAttack:
  006df	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  006e5	83 c0 04	 add	 eax, 4
  006e8	49		 dec	 ecx
  006e9	75 f4		 jne	 SHORT $LL1616@LoadAttack
  006eb	6a 14		 push	 20			; 00000014H
  006ed	58		 pop	 eax
$LL1613@LoadAttack:
  006ee	8b c8		 mov	 ecx, eax
  006f0	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  006f6	79 05		 jns	 SHORT $LN1701@LoadAttack
  006f8	49		 dec	 ecx
  006f9	83 c9 fc	 or	 ecx, -4			; fffffffcH
  006fc	41		 inc	 ecx
$LN1701@LoadAttack:
  006fd	b2 ed		 mov	 dl, -19			; ffffffedH
  006ff	2a d1		 sub	 dl, cl
  00701	30 54 05 d4	 xor	 BYTE PTR ___encStr$507078[ebp+eax], dl
  00705	40		 inc	 eax
  00706	83 f8 16	 cmp	 eax, 22			; 00000016H
  00709	7c e3		 jl	 SHORT $LL1613@LoadAttack
  0070b	ff b5 8c fd ff
	ff		 push	 DWORD PTR tv11258[ebp]
  00711	8d 45 d4	 lea	 eax, DWORD PTR ___encStr$507078[ebp]
  00714	ff b5 90 fd ff
	ff		 push	 DWORD PTR _szAttack$GSCopy$[ebp]
  0071a	50		 push	 eax
  0071b	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00721	50		 push	 eax
  00722	ff d6		 call	 esi

; 88   :         kInfo.m_dwWoundedDuration = rkLoader.LoadInt( szKey, 0 );

  00724	8b 8d 94 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0072a	83 c4 10	 add	 esp, 16			; 00000010H
  0072d	53		 push	 ebx
  0072e	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00734	50		 push	 eax
  00735	ff d7		 call	 edi
  00737	6a 06		 push	 6
  00739	89 85 70 fd ff
	ff		 mov	 DWORD PTR _kInfo$506618[ebp+24], eax

; 89   : 
; 90   : 		wsprintf_e( szKey, "%s_type%d_wounded_loop_ani", szAttack, i+1 );

  0073f	c7 45 a0 c8 9f
	b4 9e		 mov	 DWORD PTR ___encStr$507230[ebp], -1632329784 ; 9eb49fc8H
  00746	c7 45 a4 94 9c
	8e cf		 mov	 DWORD PTR ___encStr$507230[ebp+4], -812737388 ; cf8e9c94H
  0074d	c7 45 a8 89 b3
	9c 85		 mov	 DWORD PTR ___encStr$507230[ebp+8], -2053327991 ; 859cb389H
  00754	c7 45 ac 98 82
	8f 8f		 mov	 DWORD PTR ___encStr$507230[ebp+12], -1886420328 ; 8f8f8298H
  0075b	c7 45 b0 89 b3
	87 85		 mov	 DWORD PTR ___encStr$507230[ebp+16], -2054704247 ; 8587b389H
  00762	c7 45 b4 82 9c
	b4 8b		 mov	 DWORD PTR ___encStr$507230[ebp+20], -1951097726 ; 8bb49c82H
  00769	66 c7 45 b8 83
	85		 mov	 WORD PTR ___encStr$507230[ebp+24], 34179 ; 00008583H
  0076f	8d 45 a0	 lea	 eax, DWORD PTR ___encStr$507230[ebp]
  00772	88 5d ba	 mov	 BYTE PTR ___encStr$507230[ebp+26], bl
  00775	59		 pop	 ecx
$LL1624@LoadAttack:
  00776	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0077c	83 c0 04	 add	 eax, 4
  0077f	49		 dec	 ecx
  00780	75 f4		 jne	 SHORT $LL1624@LoadAttack
  00782	6a 18		 push	 24			; 00000018H
  00784	58		 pop	 eax
$LL1621@LoadAttack:
  00785	8b c8		 mov	 ecx, eax
  00787	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0078d	79 05		 jns	 SHORT $LN1702@LoadAttack
  0078f	49		 dec	 ecx
  00790	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00793	41		 inc	 ecx
$LN1702@LoadAttack:
  00794	b2 ed		 mov	 dl, -19			; ffffffedH
  00796	2a d1		 sub	 dl, cl
  00798	30 54 05 a0	 xor	 BYTE PTR ___encStr$507230[ebp+eax], dl
  0079c	40		 inc	 eax
  0079d	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  007a0	7c e3		 jl	 SHORT $LL1621@LoadAttack
  007a2	ff b5 8c fd ff
	ff		 push	 DWORD PTR tv11258[ebp]
  007a8	8d 45 a0	 lea	 eax, DWORD PTR ___encStr$507230[ebp]
  007ab	ff b5 90 fd ff
	ff		 push	 DWORD PTR _szAttack$GSCopy$[ebp]
  007b1	50		 push	 eax
  007b2	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  007b8	50		 push	 eax
  007b9	ff d6		 call	 esi

; 91   : 		kInfo.m_bWoundedLoopAni = rkLoader.LoadBool( szKey, false );

  007bb	8b 8d 94 fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  007c1	83 c4 10	 add	 esp, 16			; 00000010H
  007c4	53		 push	 ebx
  007c5	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  007cb	50		 push	 eax
  007cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 92   : 
; 93   : 		rkAttribute.m_vWeaponInfoList.push_back( kInfo );

  007d2	8b 8d 84 fd ff
	ff		 mov	 ecx, DWORD PTR tv10098[ebp]
  007d8	88 85 78 fd ff
	ff		 mov	 BYTE PTR _kInfo$506618[ebp+32], al
  007de	8d 85 58 fd ff
	ff		 lea	 eax, DWORD PTR _kInfo$506618[ebp]
  007e4	50		 push	 eax
  007e5	e8 00 00 00 00	 call	 ?push_back@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXABUWeaponInfo@@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::push_back

; 94   : 	}

  007ea	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  007ee	8d 8d 60 fd ff
	ff		 lea	 ecx, DWORD PTR _kInfo$506618[ebp+8]
  007f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  007fa	ff 85 8c fd ff
	ff		 inc	 DWORD PTR tv11258[ebp]
  00800	ff 8d 88 fd ff
	ff		 dec	 DWORD PTR tv5135[ebp]
  00806	0f 85 49 fd ff
	ff		 jne	 $LL498@LoadAttack
$LN496@LoadAttack:

; 95   : }

  0080c	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00811	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z$0:
  00000	8d 8d 58 fd ff
	ff		 lea	 ecx, DWORD PTR _kInfo$506618[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1WeaponInfo@@QAE@XZ
__ehhandler$?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 54 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-684]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z ENDP ; LoadAttackAttribute
PUBLIC	_rkLoader$GSCopy$
PUBLIC	_szAttack$GSCopy$
PUBLIC	_rkAttribute$GSCopy$
PUBLIC	?LoadWeaponInfo@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z ; LoadWeaponInfo
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	SEGMENT
__unwindtable$?LoadWeaponInfo@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadWeaponInfo@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z$0
__ehfuncinfo$?LoadWeaponInfo@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadWeaponInfo@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.cpp
xdata$x	ENDS
;	COMDAT ?LoadWeaponInfo@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z
_TEXT	SEGMENT
_kInfo$508160 = -648					; size = 40
tv4069 = -608						; size = 4
_rkAttribute$GSCopy$ = -604				; size = 4
tv1095 = -604						; size = 4
_szAttack$GSCopy$ = -600				; size = 4
_rkLoader$GSCopy$ = -596				; size = 4
tv4586 = -592						; size = 4
_szBuf$ = -588						; size = 260
_szKey$ = -328						; size = 260
___encStr$508007 = -68					; size = 14
___encStr$508164 = -64					; size = 10
___encStr$508768 = -48					; size = 27
___encStr$508617 = -44					; size = 23
___encStr$508466 = -40					; size = 18
___encStr$508315 = -40					; size = 17
__$EHRec$ = -12						; size = 12
_szAttack$ = 8						; size = 4
_rkAttribute$ = 12					; size = 4
_rkLoader$ = 16						; size = 4
?LoadWeaponInfo@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z PROC ; LoadWeaponInfo, COMDAT

; 125  : {

  00000	68 7c 02 00 00	 push	 636			; 0000027cH
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?LoadWeaponInfo@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _rkAttribute$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _szAttack$[ebp]
  00015	8b 7d 10	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 126  : 	char szKey[MAX_PATH], szBuf[MAX_PATH];
; 127  : 
; 128  : 	wsprintf_e( szKey, "%s_type_count", szAttack );

  00018	6a 03		 push	 3

; 146  : 
; 147  : 		wsprintf_e( szKey, "%s_type%d_wounded_loop_ani", szAttack, i+1 );

  0001a	89 85 a4 fd ff
	ff		 mov	 DWORD PTR _rkAttribute$GSCopy$[ebp], eax
  00020	89 8d a8 fd ff
	ff		 mov	 DWORD PTR _szAttack$GSCopy$[ebp], ecx
  00026	89 bd ac fd ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], edi
  0002c	c7 45 bc c8 9f
	b4 9e		 mov	 DWORD PTR ___encStr$508007[ebp], -1632329784 ; 9eb49fc8H
  00033	c7 45 c0 94 9c
	8e b5		 mov	 DWORD PTR ___encStr$508007[ebp+4], -1248945004 ; b58e9c94H
  0003a	c7 45 c4 8e 83
	9e 84		 mov	 DWORD PTR ___encStr$508007[ebp+8], -2069986418 ; 849e838eH
  00041	8d 45 bc	 lea	 eax, DWORD PTR ___encStr$508007[ebp]
  00044	33 db		 xor	 ebx, ebx
  00046	66 c7 45 c8 99
	00		 mov	 WORD PTR ___encStr$508007[ebp+12], 153 ; 00000099H
  0004c	5a		 pop	 edx
$LL606@LoadWeapon@2:

; 126  : 	char szKey[MAX_PATH], szBuf[MAX_PATH];
; 127  : 
; 128  : 	wsprintf_e( szKey, "%s_type_count", szAttack );

  0004d	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00053	83 c0 04	 add	 eax, 4
  00056	4a		 dec	 edx
  00057	75 f4		 jne	 SHORT $LL606@LoadWeapon@2
  00059	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__wsprintfA
  0005f	80 75 c8 ed	 xor	 BYTE PTR ___encStr$508007[ebp+12], -19 ; ffffffedH
  00063	51		 push	 ecx
  00064	8d 45 bc	 lea	 eax, DWORD PTR ___encStr$508007[ebp]
  00067	50		 push	 eax
  00068	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0006e	50		 push	 eax
  0006f	ff d6		 call	 esi
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH

; 129  : 	int iAttackTypeCnt = rkLoader.LoadInt( szKey, 0 );

  00074	53		 push	 ebx
  00075	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0007b	8b cf		 mov	 ecx, edi
  0007d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00083	50		 push	 eax
  00084	ff d7		 call	 edi

; 130  : 	for( int i=0 ; i<iAttackTypeCnt ; i++ )

  00086	3b c3		 cmp	 eax, ebx
  00088	0f 8e d6 02 00
	00		 jle	 $LN496@LoadWeapon@2
  0008e	8b 8d a4 fd ff
	ff		 mov	 ecx, DWORD PTR _rkAttribute$GSCopy$[ebp]
  00094	83 c1 28	 add	 ecx, 40			; 00000028H
  00097	89 8d a0 fd ff
	ff		 mov	 DWORD PTR tv4069[ebp], ecx
  0009d	c7 85 b0 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR tv4586[ebp], 1
  000a7	89 85 a4 fd ff
	ff		 mov	 DWORD PTR tv1095[ebp], eax
$LL498@LoadWeapon@2:

; 131  : 	{
; 132  : 		WeaponInfo kInfo;

  000ad	8d 8d 78 fd ff
	ff		 lea	 ecx, DWORD PTR _kInfo$508160[ebp]
  000b3	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@XZ	; WeaponInfo::WeaponInfo
  000b8	6a 02		 push	 2
  000ba	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 133  : 
; 134  : 		wsprintf_e( szKey, "%s_type%d", szAttack, i+1 );

  000bd	c7 45 c0 c8 9f
	b4 9e		 mov	 DWORD PTR ___encStr$508164[ebp], -1632329784 ; 9eb49fc8H
  000c4	c7 45 c4 94 9c
	8e cf		 mov	 DWORD PTR ___encStr$508164[ebp+4], -812737388 ; cf8e9c94H
  000cb	8d 45 c0	 lea	 eax, DWORD PTR ___encStr$508164[ebp]
  000ce	66 c7 45 c8 89
	00		 mov	 WORD PTR ___encStr$508164[ebp+8], 137 ; 00000089H
  000d4	59		 pop	 ecx
$LL614@LoadWeapon@2:
  000d5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000db	83 c0 04	 add	 eax, 4
  000de	49		 dec	 ecx
  000df	75 f4		 jne	 SHORT $LL614@LoadWeapon@2
  000e1	ff b5 b0 fd ff
	ff		 push	 DWORD PTR tv4586[ebp]
  000e7	80 75 c8 ed	 xor	 BYTE PTR ___encStr$508164[ebp+8], -19 ; ffffffedH
  000eb	ff b5 a8 fd ff
	ff		 push	 DWORD PTR _szAttack$GSCopy$[ebp]
  000f1	8d 45 c0	 lea	 eax, DWORD PTR ___encStr$508164[ebp]
  000f4	50		 push	 eax
  000f5	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  000fb	50		 push	 eax
  000fc	ff d6		 call	 esi

; 135  : 		kInfo.m_iWeaponIdx = rkLoader.LoadInt( szKey, NO_WEAPON_ATTRIBUTE );

  000fe	8b 8d ac fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00104	83 c4 10	 add	 esp, 16			; 00000010H
  00107	53		 push	 ebx
  00108	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0010e	50		 push	 eax
  0010f	ff d7		 call	 edi
  00111	6a 04		 push	 4
  00113	89 85 78 fd ff
	ff		 mov	 DWORD PTR _kInfo$508160[ebp], eax

; 136  : 
; 137  : 		wsprintf_e( szKey, "%s_type%d_resist", szAttack, i+1 );

  00119	c7 45 d8 c8 9f
	b4 9e		 mov	 DWORD PTR ___encStr$508315[ebp], -1632329784 ; 9eb49fc8H
  00120	c7 45 dc 94 9c
	8e cf		 mov	 DWORD PTR ___encStr$508315[ebp+4], -812737388 ; cf8e9c94H
  00127	c7 45 e0 89 b3
	99 8f		 mov	 DWORD PTR ___encStr$508315[ebp+8], -1885752439 ; 8f99b389H
  0012e	c7 45 e4 9e 85
	98 9e		 mov	 DWORD PTR ___encStr$508315[ebp+12], -1634171490 ; 9e98859eH
  00135	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$508315[ebp]
  00138	88 5d e8	 mov	 BYTE PTR ___encStr$508315[ebp+16], bl
  0013b	59		 pop	 ecx
$LL622@LoadWeapon@2:
  0013c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00142	83 c0 04	 add	 eax, 4
  00145	49		 dec	 ecx
  00146	75 f4		 jne	 SHORT $LL622@LoadWeapon@2
  00148	ff b5 b0 fd ff
	ff		 push	 DWORD PTR tv4586[ebp]
  0014e	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$508315[ebp]
  00151	ff b5 a8 fd ff
	ff		 push	 DWORD PTR _szAttack$GSCopy$[ebp]
  00157	50		 push	 eax
  00158	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0015e	50		 push	 eax
  0015f	ff d6		 call	 esi

; 138  : 		kInfo.m_iResistanceIdx = rkLoader.LoadInt( szKey, NO_WEAPON_ATTRIBUTE );

  00161	8b 8d ac fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00167	83 c4 10	 add	 esp, 16			; 00000010H
  0016a	53		 push	 ebx
  0016b	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00171	50		 push	 eax
  00172	ff d7		 call	 edi
  00174	6a 04		 push	 4
  00176	89 85 7c fd ff
	ff		 mov	 DWORD PTR _kInfo$508160[ebp+4], eax

; 139  : 
; 140  : 		wsprintf_e( szKey, "%s_type%d_wounded", szAttack, i+1 );

  0017c	c7 45 d8 c8 9f
	b4 9e		 mov	 DWORD PTR ___encStr$508466[ebp], -1632329784 ; 9eb49fc8H
  00183	c7 45 dc 94 9c
	8e cf		 mov	 DWORD PTR ___encStr$508466[ebp+4], -812737388 ; cf8e9c94H
  0018a	c7 45 e0 89 b3
	9c 85		 mov	 DWORD PTR ___encStr$508466[ebp+8], -2053327991 ; 859cb389H
  00191	c7 45 e4 98 82
	8f 8f		 mov	 DWORD PTR ___encStr$508466[ebp+12], -1886420328 ; 8f8f8298H
  00198	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$508466[ebp]
  0019b	66 c7 45 e8 89
	00		 mov	 WORD PTR ___encStr$508466[ebp+16], 137 ; 00000089H
  001a1	59		 pop	 ecx
$LL630@LoadWeapon@2:
  001a2	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a8	83 c0 04	 add	 eax, 4
  001ab	49		 dec	 ecx
  001ac	75 f4		 jne	 SHORT $LL630@LoadWeapon@2
  001ae	ff b5 b0 fd ff
	ff		 push	 DWORD PTR tv4586[ebp]
  001b4	80 75 e8 ed	 xor	 BYTE PTR ___encStr$508466[ebp+16], -19 ; ffffffedH
  001b8	ff b5 a8 fd ff
	ff		 push	 DWORD PTR _szAttack$GSCopy$[ebp]
  001be	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$508466[ebp]
  001c1	50		 push	 eax
  001c2	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  001c8	50		 push	 eax
  001c9	ff d6		 call	 esi

; 141  : 		rkLoader.LoadString( szKey, "", szBuf, MAX_PATH );

  001cb	8b 8d ac fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  001d1	83 c4 10	 add	 esp, 16			; 00000010H
  001d4	68 04 01 00 00	 push	 260			; 00000104H
  001d9	8d 85 b4 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  001df	50		 push	 eax
  001e0	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  001e5	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  001eb	50		 push	 eax
  001ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 142  : 		kInfo.m_WoundedAnimation = szBuf;

  001f2	8d 85 b4 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  001f8	50		 push	 eax
  001f9	8d 8d 80 fd ff
	ff		 lea	 ecx, DWORD PTR _kInfo$508160[ebp+8]
  001ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  00205	6a 05		 push	 5

; 143  : 
; 144  : 		wsprintf_e( szKey, "%s_type%d_wounded_time", szAttack, i+1 );

  00207	c7 45 d4 c8 9f
	b4 9e		 mov	 DWORD PTR ___encStr$508617[ebp], -1632329784 ; 9eb49fc8H
  0020e	c7 45 d8 94 9c
	8e cf		 mov	 DWORD PTR ___encStr$508617[ebp+4], -812737388 ; cf8e9c94H
  00215	c7 45 dc 89 b3
	9c 85		 mov	 DWORD PTR ___encStr$508617[ebp+8], -2053327991 ; 859cb389H
  0021c	c7 45 e0 98 82
	8f 8f		 mov	 DWORD PTR ___encStr$508617[ebp+12], -1886420328 ; 8f8f8298H
  00223	c7 45 e4 89 b3
	9f 83		 mov	 DWORD PTR ___encStr$508617[ebp+16], -2086685815 ; 839fb389H
  0022a	66 c7 45 e8 80
	89		 mov	 WORD PTR ___encStr$508617[ebp+20], 35200 ; 00008980H
  00230	8d 45 d4	 lea	 eax, DWORD PTR ___encStr$508617[ebp]
  00233	88 5d ea	 mov	 BYTE PTR ___encStr$508617[ebp+22], bl
  00236	59		 pop	 ecx
$LL638@LoadWeapon@2:
  00237	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0023d	83 c0 04	 add	 eax, 4
  00240	49		 dec	 ecx
  00241	75 f4		 jne	 SHORT $LL638@LoadWeapon@2
  00243	6a 14		 push	 20			; 00000014H
  00245	58		 pop	 eax
$LL635@LoadWeapon@2:
  00246	8b c8		 mov	 ecx, eax
  00248	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0024e	79 05		 jns	 SHORT $LN679@LoadWeapon@2
  00250	49		 dec	 ecx
  00251	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00254	41		 inc	 ecx
$LN679@LoadWeapon@2:
  00255	b2 ed		 mov	 dl, -19			; ffffffedH
  00257	2a d1		 sub	 dl, cl
  00259	30 54 05 d4	 xor	 BYTE PTR ___encStr$508617[ebp+eax], dl
  0025d	40		 inc	 eax
  0025e	83 f8 16	 cmp	 eax, 22			; 00000016H
  00261	7c e3		 jl	 SHORT $LL635@LoadWeapon@2
  00263	ff b5 b0 fd ff
	ff		 push	 DWORD PTR tv4586[ebp]
  00269	8d 45 d4	 lea	 eax, DWORD PTR ___encStr$508617[ebp]
  0026c	ff b5 a8 fd ff
	ff		 push	 DWORD PTR _szAttack$GSCopy$[ebp]
  00272	50		 push	 eax
  00273	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00279	50		 push	 eax
  0027a	ff d6		 call	 esi

; 145  : 		kInfo.m_dwWoundedDuration = rkLoader.LoadInt( szKey, 0 );

  0027c	8b 8d ac fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00282	83 c4 10	 add	 esp, 16			; 00000010H
  00285	53		 push	 ebx
  00286	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0028c	50		 push	 eax
  0028d	ff d7		 call	 edi
  0028f	6a 06		 push	 6
  00291	89 85 90 fd ff
	ff		 mov	 DWORD PTR _kInfo$508160[ebp+24], eax

; 146  : 
; 147  : 		wsprintf_e( szKey, "%s_type%d_wounded_loop_ani", szAttack, i+1 );

  00297	c7 45 d0 c8 9f
	b4 9e		 mov	 DWORD PTR ___encStr$508768[ebp], -1632329784 ; 9eb49fc8H
  0029e	c7 45 d4 94 9c
	8e cf		 mov	 DWORD PTR ___encStr$508768[ebp+4], -812737388 ; cf8e9c94H
  002a5	c7 45 d8 89 b3
	9c 85		 mov	 DWORD PTR ___encStr$508768[ebp+8], -2053327991 ; 859cb389H
  002ac	c7 45 dc 98 82
	8f 8f		 mov	 DWORD PTR ___encStr$508768[ebp+12], -1886420328 ; 8f8f8298H
  002b3	c7 45 e0 89 b3
	87 85		 mov	 DWORD PTR ___encStr$508768[ebp+16], -2054704247 ; 8587b389H
  002ba	c7 45 e4 82 9c
	b4 8b		 mov	 DWORD PTR ___encStr$508768[ebp+20], -1951097726 ; 8bb49c82H
  002c1	66 c7 45 e8 83
	85		 mov	 WORD PTR ___encStr$508768[ebp+24], 34179 ; 00008583H
  002c7	8d 45 d0	 lea	 eax, DWORD PTR ___encStr$508768[ebp]
  002ca	88 5d ea	 mov	 BYTE PTR ___encStr$508768[ebp+26], bl
  002cd	59		 pop	 ecx
$LL646@LoadWeapon@2:
  002ce	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002d4	83 c0 04	 add	 eax, 4
  002d7	49		 dec	 ecx
  002d8	75 f4		 jne	 SHORT $LL646@LoadWeapon@2
  002da	6a 18		 push	 24			; 00000018H
  002dc	58		 pop	 eax
$LL643@LoadWeapon@2:
  002dd	8b c8		 mov	 ecx, eax
  002df	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  002e5	79 05		 jns	 SHORT $LN680@LoadWeapon@2
  002e7	49		 dec	 ecx
  002e8	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002eb	41		 inc	 ecx
$LN680@LoadWeapon@2:
  002ec	b2 ed		 mov	 dl, -19			; ffffffedH
  002ee	2a d1		 sub	 dl, cl
  002f0	30 54 05 d0	 xor	 BYTE PTR ___encStr$508768[ebp+eax], dl
  002f4	40		 inc	 eax
  002f5	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  002f8	7c e3		 jl	 SHORT $LL643@LoadWeapon@2
  002fa	ff b5 b0 fd ff
	ff		 push	 DWORD PTR tv4586[ebp]
  00300	8d 45 d0	 lea	 eax, DWORD PTR ___encStr$508768[ebp]
  00303	ff b5 a8 fd ff
	ff		 push	 DWORD PTR _szAttack$GSCopy$[ebp]
  00309	50		 push	 eax
  0030a	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00310	50		 push	 eax
  00311	ff d6		 call	 esi

; 148  : 		kInfo.m_bWoundedLoopAni = rkLoader.LoadBool( szKey, false );

  00313	8b 8d ac fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00319	83 c4 10	 add	 esp, 16			; 00000010H
  0031c	53		 push	 ebx
  0031d	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00323	50		 push	 eax
  00324	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 149  : 
; 150  : 		rkAttribute.m_vWeaponInfoList.push_back( kInfo );

  0032a	8b 8d a0 fd ff
	ff		 mov	 ecx, DWORD PTR tv4069[ebp]
  00330	88 85 98 fd ff
	ff		 mov	 BYTE PTR _kInfo$508160[ebp+32], al
  00336	8d 85 78 fd ff
	ff		 lea	 eax, DWORD PTR _kInfo$508160[ebp]
  0033c	50		 push	 eax
  0033d	e8 00 00 00 00	 call	 ?push_back@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXABUWeaponInfo@@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::push_back

; 151  : 	}

  00342	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00346	8d 8d 80 fd ff
	ff		 lea	 ecx, DWORD PTR _kInfo$508160[ebp+8]
  0034c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00352	ff 85 b0 fd ff
	ff		 inc	 DWORD PTR tv4586[ebp]
  00358	ff 8d a4 fd ff
	ff		 dec	 DWORD PTR tv1095[ebp]
  0035e	0f 85 49 fd ff
	ff		 jne	 $LL498@LoadWeapon@2
$LN496@LoadWeapon@2:

; 152  : }

  00364	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00369	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadWeaponInfo@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z$0:
  00000	8d 8d 78 fd ff
	ff		 lea	 ecx, DWORD PTR _kInfo$508160[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1WeaponInfo@@QAE@XZ
__ehhandler$?LoadWeaponInfo@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 74 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-652]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadWeaponInfo@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadWeaponInfo@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z ENDP ; LoadWeaponInfo
PUBLIC	_rkLoader$GSCopy$
PUBLIC	_szAttack$GSCopy$
PUBLIC	_WeaponInfoList$GSCopy$
PUBLIC	?LoadWeaponInfoList@@YAXPBDAAV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@AAVioINILoader@@@Z ; LoadWeaponInfoList
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	SEGMENT
__unwindtable$?LoadWeaponInfoList@@YAXPBDAAV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@AAVioINILoader@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadWeaponInfoList@@YAXPBDAAV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@AAVioINILoader@@@Z$0
__ehfuncinfo$?LoadWeaponInfoList@@YAXPBDAAV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@AAVioINILoader@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadWeaponInfoList@@YAXPBDAAV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@AAVioINILoader@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.cpp
xdata$x	ENDS
;	COMDAT ?LoadWeaponInfoList@@YAXPBDAAV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@AAVioINILoader@@@Z
_TEXT	SEGMENT
_kInfo$509846 = -644					; size = 40
_WeaponInfoList$GSCopy$ = -604				; size = 4
tv1041 = -600						; size = 4
_iCnt$ = -600						; size = 4
_rkLoader$GSCopy$ = -596				; size = 4
_szAttack$GSCopy$ = -592				; size = 4
tv4569 = -588						; size = 4
_szBuf$ = -584						; size = 260
_szKey$ = -324						; size = 260
___encStr$509693 = -64					; size = 14
___encStr$509850 = -60					; size = 10
___encStr$510455 = -44					; size = 23
___encStr$510303 = -40					; size = 19
___encStr$510152 = -40					; size = 18
___encStr$510001 = -40					; size = 17
__$EHRec$ = -12						; size = 12
_szAttack$ = 8						; size = 4
_WeaponInfoList$ = 12					; size = 4
_rkLoader$ = 16						; size = 4
?LoadWeaponInfoList@@YAXPBDAAV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@AAVioINILoader@@@Z PROC ; LoadWeaponInfoList, COMDAT

; 176  : {

  00000	68 78 02 00 00	 push	 632			; 00000278H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?LoadWeaponInfoList@@YAXPBDAAV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@AAVioINILoader@@@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _WeaponInfoList$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _szAttack$[ebp]
  00015	8b 7d 10	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 177  : 	char szKey[MAX_PATH], szBuf[MAX_PATH];
; 178  : 
; 179  : 	wsprintf_e( szKey, "%s_type_count", szAttack );

  00018	6a 03		 push	 3

; 198  : 
; 199  : 		wsprintf_e( szKey, "%s_type%d_wounded_time", szAttack, i+1 );

  0001a	89 85 a4 fd ff
	ff		 mov	 DWORD PTR _WeaponInfoList$GSCopy$[ebp], eax
  00020	89 8d b0 fd ff
	ff		 mov	 DWORD PTR _szAttack$GSCopy$[ebp], ecx
  00026	89 bd ac fd ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], edi
  0002c	c7 45 c0 c8 9f
	b4 9e		 mov	 DWORD PTR ___encStr$509693[ebp], -1632329784 ; 9eb49fc8H
  00033	c7 45 c4 94 9c
	8e b5		 mov	 DWORD PTR ___encStr$509693[ebp+4], -1248945004 ; b58e9c94H
  0003a	c7 45 c8 8e 83
	9e 84		 mov	 DWORD PTR ___encStr$509693[ebp+8], -2069986418 ; 849e838eH
  00041	8d 45 c0	 lea	 eax, DWORD PTR ___encStr$509693[ebp]
  00044	33 db		 xor	 ebx, ebx
  00046	66 c7 45 cc 99
	00		 mov	 WORD PTR ___encStr$509693[ebp+12], 153 ; 00000099H
  0004c	5a		 pop	 edx
$LL606@LoadWeapon@3:

; 177  : 	char szKey[MAX_PATH], szBuf[MAX_PATH];
; 178  : 
; 179  : 	wsprintf_e( szKey, "%s_type_count", szAttack );

  0004d	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00053	83 c0 04	 add	 eax, 4
  00056	4a		 dec	 edx
  00057	75 f4		 jne	 SHORT $LL606@LoadWeapon@3
  00059	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__wsprintfA
  0005f	80 75 cc ed	 xor	 BYTE PTR ___encStr$509693[ebp+12], -19 ; ffffffedH
  00063	51		 push	 ecx
  00064	8d 45 c0	 lea	 eax, DWORD PTR ___encStr$509693[ebp]
  00067	50		 push	 eax
  00068	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0006e	50		 push	 eax
  0006f	ff d6		 call	 esi
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH

; 180  : 	int iCnt = rkLoader.LoadInt( szKey, 0 );

  00074	53		 push	 ebx
  00075	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0007b	8b cf		 mov	 ecx, edi
  0007d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00083	50		 push	 eax
  00084	ff d7		 call	 edi

; 181  : 	WeaponInfoList.reserve( iCnt );

  00086	8b 8d a4 fd ff
	ff		 mov	 ecx, DWORD PTR _WeaponInfoList$GSCopy$[ebp]
  0008c	50		 push	 eax
  0008d	89 85 a8 fd ff
	ff		 mov	 DWORD PTR _iCnt$[ebp], eax
  00093	e8 00 00 00 00	 call	 ?reserve@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXI@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::reserve

; 182  : 	for( int i=0; i<iCnt; ++i )

  00098	8b 85 a8 fd ff
	ff		 mov	 eax, DWORD PTR _iCnt$[ebp]
  0009e	3b c3		 cmp	 eax, ebx
  000a0	0f 8e b9 02 00
	00		 jle	 $LN496@LoadWeapon@3

; 177  : 	char szKey[MAX_PATH], szBuf[MAX_PATH];
; 178  : 
; 179  : 	wsprintf_e( szKey, "%s_type_count", szAttack );

  000a6	c7 85 b4 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR tv4569[ebp], 1
  000b0	89 85 a8 fd ff
	ff		 mov	 DWORD PTR tv1041[ebp], eax
$LL498@LoadWeapon@3:

; 183  : 	{
; 184  : 		WeaponInfo kInfo;

  000b6	8d 8d 7c fd ff
	ff		 lea	 ecx, DWORD PTR _kInfo$509846[ebp]
  000bc	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@XZ	; WeaponInfo::WeaponInfo
  000c1	6a 02		 push	 2
  000c3	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 185  : 
; 186  : 		wsprintf_e( szKey, "%s_type%d", szAttack, i+1 );

  000c6	c7 45 c4 c8 9f
	b4 9e		 mov	 DWORD PTR ___encStr$509850[ebp], -1632329784 ; 9eb49fc8H
  000cd	c7 45 c8 94 9c
	8e cf		 mov	 DWORD PTR ___encStr$509850[ebp+4], -812737388 ; cf8e9c94H
  000d4	8d 45 c4	 lea	 eax, DWORD PTR ___encStr$509850[ebp]
  000d7	66 c7 45 cc 89
	00		 mov	 WORD PTR ___encStr$509850[ebp+8], 137 ; 00000089H
  000dd	59		 pop	 ecx
$LL614@LoadWeapon@3:
  000de	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000e4	83 c0 04	 add	 eax, 4
  000e7	49		 dec	 ecx
  000e8	75 f4		 jne	 SHORT $LL614@LoadWeapon@3
  000ea	ff b5 b4 fd ff
	ff		 push	 DWORD PTR tv4569[ebp]
  000f0	80 75 cc ed	 xor	 BYTE PTR ___encStr$509850[ebp+8], -19 ; ffffffedH
  000f4	ff b5 b0 fd ff
	ff		 push	 DWORD PTR _szAttack$GSCopy$[ebp]
  000fa	8d 45 c4	 lea	 eax, DWORD PTR ___encStr$509850[ebp]
  000fd	50		 push	 eax
  000fe	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00104	50		 push	 eax
  00105	ff d6		 call	 esi

; 187  : 		kInfo.m_iWeaponIdx = rkLoader.LoadInt( szKey, NO_WEAPON_ATTRIBUTE );

  00107	8b 8d ac fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0010d	83 c4 10	 add	 esp, 16			; 00000010H
  00110	53		 push	 ebx
  00111	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00117	50		 push	 eax
  00118	ff d7		 call	 edi
  0011a	6a 04		 push	 4
  0011c	89 85 7c fd ff
	ff		 mov	 DWORD PTR _kInfo$509846[ebp], eax

; 188  : 
; 189  : 		wsprintf_e( szKey, "%s_type%d_resist", szAttack, i+1 );

  00122	c7 45 d8 c8 9f
	b4 9e		 mov	 DWORD PTR ___encStr$510001[ebp], -1632329784 ; 9eb49fc8H
  00129	c7 45 dc 94 9c
	8e cf		 mov	 DWORD PTR ___encStr$510001[ebp+4], -812737388 ; cf8e9c94H
  00130	c7 45 e0 89 b3
	99 8f		 mov	 DWORD PTR ___encStr$510001[ebp+8], -1885752439 ; 8f99b389H
  00137	c7 45 e4 9e 85
	98 9e		 mov	 DWORD PTR ___encStr$510001[ebp+12], -1634171490 ; 9e98859eH
  0013e	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$510001[ebp]
  00141	88 5d e8	 mov	 BYTE PTR ___encStr$510001[ebp+16], bl
  00144	59		 pop	 ecx
$LL622@LoadWeapon@3:
  00145	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0014b	83 c0 04	 add	 eax, 4
  0014e	49		 dec	 ecx
  0014f	75 f4		 jne	 SHORT $LL622@LoadWeapon@3
  00151	ff b5 b4 fd ff
	ff		 push	 DWORD PTR tv4569[ebp]
  00157	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$510001[ebp]
  0015a	ff b5 b0 fd ff
	ff		 push	 DWORD PTR _szAttack$GSCopy$[ebp]
  00160	50		 push	 eax
  00161	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00167	50		 push	 eax
  00168	ff d6		 call	 esi

; 190  : 		kInfo.m_iResistanceIdx = rkLoader.LoadInt( szKey, NO_WEAPON_ATTRIBUTE );

  0016a	8b 8d ac fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00170	83 c4 10	 add	 esp, 16			; 00000010H
  00173	53		 push	 ebx
  00174	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0017a	50		 push	 eax
  0017b	ff d7		 call	 edi
  0017d	6a 04		 push	 4
  0017f	89 85 80 fd ff
	ff		 mov	 DWORD PTR _kInfo$509846[ebp+4], eax

; 191  : 
; 192  : 		wsprintf_e( szKey, "%s_type%d_wounded", szAttack, i+1 );

  00185	c7 45 d8 c8 9f
	b4 9e		 mov	 DWORD PTR ___encStr$510152[ebp], -1632329784 ; 9eb49fc8H
  0018c	c7 45 dc 94 9c
	8e cf		 mov	 DWORD PTR ___encStr$510152[ebp+4], -812737388 ; cf8e9c94H
  00193	c7 45 e0 89 b3
	9c 85		 mov	 DWORD PTR ___encStr$510152[ebp+8], -2053327991 ; 859cb389H
  0019a	c7 45 e4 98 82
	8f 8f		 mov	 DWORD PTR ___encStr$510152[ebp+12], -1886420328 ; 8f8f8298H
  001a1	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$510152[ebp]
  001a4	66 c7 45 e8 89
	00		 mov	 WORD PTR ___encStr$510152[ebp+16], 137 ; 00000089H
  001aa	59		 pop	 ecx
$LL630@LoadWeapon@3:
  001ab	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001b1	83 c0 04	 add	 eax, 4
  001b4	49		 dec	 ecx
  001b5	75 f4		 jne	 SHORT $LL630@LoadWeapon@3
  001b7	ff b5 b4 fd ff
	ff		 push	 DWORD PTR tv4569[ebp]
  001bd	80 75 e8 ed	 xor	 BYTE PTR ___encStr$510152[ebp+16], -19 ; ffffffedH
  001c1	ff b5 b0 fd ff
	ff		 push	 DWORD PTR _szAttack$GSCopy$[ebp]
  001c7	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$510152[ebp]
  001ca	50		 push	 eax
  001cb	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  001d1	50		 push	 eax
  001d2	ff d6		 call	 esi

; 193  : 		rkLoader.LoadString( szKey, "", szBuf, MAX_PATH );

  001d4	8b 8d ac fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  001da	83 c4 10	 add	 esp, 16			; 00000010H
  001dd	68 04 01 00 00	 push	 260			; 00000104H
  001e2	8d 85 b8 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  001e8	50		 push	 eax
  001e9	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  001ee	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  001f4	50		 push	 eax
  001f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 194  : 		kInfo.m_WoundedAnimation = szBuf;

  001fb	8d 85 b8 fd ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00201	50		 push	 eax
  00202	8d 8d 84 fd ff
	ff		 lea	 ecx, DWORD PTR _kInfo$509846[ebp+8]
  00208	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  0020e	6a 04		 push	 4

; 195  : 
; 196  : 		wsprintf_e( szKey, "%s_type%d_loop_ani", szAttack, i+1 );

  00210	c7 45 d8 c8 9f
	b4 9e		 mov	 DWORD PTR ___encStr$510303[ebp], -1632329784 ; 9eb49fc8H
  00217	c7 45 dc 94 9c
	8e cf		 mov	 DWORD PTR ___encStr$510303[ebp+4], -812737388 ; cf8e9c94H
  0021e	c7 45 e0 89 b3
	87 85		 mov	 DWORD PTR ___encStr$510303[ebp+8], -2054704247 ; 8587b389H
  00225	c7 45 e4 82 9c
	b4 8b		 mov	 DWORD PTR ___encStr$510303[ebp+12], -1951097726 ; 8bb49c82H
  0022c	66 c7 45 e8 83
	85		 mov	 WORD PTR ___encStr$510303[ebp+16], 34179 ; 00008583H
  00232	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$510303[ebp]
  00235	88 5d ea	 mov	 BYTE PTR ___encStr$510303[ebp+18], bl
  00238	59		 pop	 ecx
$LL638@LoadWeapon@3:
  00239	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0023f	83 c0 04	 add	 eax, 4
  00242	49		 dec	 ecx
  00243	75 f4		 jne	 SHORT $LL638@LoadWeapon@3
  00245	6a 10		 push	 16			; 00000010H
  00247	58		 pop	 eax
$LL635@LoadWeapon@3:
  00248	8b c8		 mov	 ecx, eax
  0024a	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00250	79 05		 jns	 SHORT $LN679@LoadWeapon@3
  00252	49		 dec	 ecx
  00253	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00256	41		 inc	 ecx
$LN679@LoadWeapon@3:
  00257	b2 ed		 mov	 dl, -19			; ffffffedH
  00259	2a d1		 sub	 dl, cl
  0025b	30 54 05 d8	 xor	 BYTE PTR ___encStr$510303[ebp+eax], dl
  0025f	40		 inc	 eax
  00260	83 f8 12	 cmp	 eax, 18			; 00000012H
  00263	7c e3		 jl	 SHORT $LL635@LoadWeapon@3
  00265	ff b5 b4 fd ff
	ff		 push	 DWORD PTR tv4569[ebp]
  0026b	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$510303[ebp]
  0026e	ff b5 b0 fd ff
	ff		 push	 DWORD PTR _szAttack$GSCopy$[ebp]
  00274	50		 push	 eax
  00275	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0027b	50		 push	 eax
  0027c	ff d6		 call	 esi

; 197  : 		kInfo.m_bWoundedLoopAni = rkLoader.LoadBool( szKey, false );

  0027e	8b 8d ac fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00284	83 c4 10	 add	 esp, 16			; 00000010H
  00287	53		 push	 ebx
  00288	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0028e	50		 push	 eax
  0028f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  00295	6a 05		 push	 5
  00297	88 85 9c fd ff
	ff		 mov	 BYTE PTR _kInfo$509846[ebp+32], al

; 198  : 
; 199  : 		wsprintf_e( szKey, "%s_type%d_wounded_time", szAttack, i+1 );

  0029d	c7 45 d4 c8 9f
	b4 9e		 mov	 DWORD PTR ___encStr$510455[ebp], -1632329784 ; 9eb49fc8H
  002a4	c7 45 d8 94 9c
	8e cf		 mov	 DWORD PTR ___encStr$510455[ebp+4], -812737388 ; cf8e9c94H
  002ab	c7 45 dc 89 b3
	9c 85		 mov	 DWORD PTR ___encStr$510455[ebp+8], -2053327991 ; 859cb389H
  002b2	c7 45 e0 98 82
	8f 8f		 mov	 DWORD PTR ___encStr$510455[ebp+12], -1886420328 ; 8f8f8298H
  002b9	c7 45 e4 89 b3
	9f 83		 mov	 DWORD PTR ___encStr$510455[ebp+16], -2086685815 ; 839fb389H
  002c0	66 c7 45 e8 80
	89		 mov	 WORD PTR ___encStr$510455[ebp+20], 35200 ; 00008980H
  002c6	8d 45 d4	 lea	 eax, DWORD PTR ___encStr$510455[ebp]
  002c9	88 5d ea	 mov	 BYTE PTR ___encStr$510455[ebp+22], bl
  002cc	59		 pop	 ecx
$LL646@LoadWeapon@3:
  002cd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002d3	83 c0 04	 add	 eax, 4
  002d6	49		 dec	 ecx
  002d7	75 f4		 jne	 SHORT $LL646@LoadWeapon@3
  002d9	6a 14		 push	 20			; 00000014H
  002db	58		 pop	 eax
$LL643@LoadWeapon@3:
  002dc	8b c8		 mov	 ecx, eax
  002de	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  002e4	79 05		 jns	 SHORT $LN680@LoadWeapon@3
  002e6	49		 dec	 ecx
  002e7	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002ea	41		 inc	 ecx
$LN680@LoadWeapon@3:
  002eb	b2 ed		 mov	 dl, -19			; ffffffedH
  002ed	2a d1		 sub	 dl, cl
  002ef	30 54 05 d4	 xor	 BYTE PTR ___encStr$510455[ebp+eax], dl
  002f3	40		 inc	 eax
  002f4	83 f8 16	 cmp	 eax, 22			; 00000016H
  002f7	7c e3		 jl	 SHORT $LL643@LoadWeapon@3
  002f9	ff b5 b4 fd ff
	ff		 push	 DWORD PTR tv4569[ebp]
  002ff	8d 45 d4	 lea	 eax, DWORD PTR ___encStr$510455[ebp]
  00302	ff b5 b0 fd ff
	ff		 push	 DWORD PTR _szAttack$GSCopy$[ebp]
  00308	50		 push	 eax
  00309	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  0030f	50		 push	 eax
  00310	ff d6		 call	 esi

; 200  : 		kInfo.m_dwWoundedDuration = (DWORD)rkLoader.LoadInt( szKey, 0 );

  00312	8b 8d ac fd ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00318	83 c4 10	 add	 esp, 16			; 00000010H
  0031b	53		 push	 ebx
  0031c	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00322	50		 push	 eax
  00323	ff d7		 call	 edi

; 201  : 
; 202  : 		WeaponInfoList.push_back( kInfo );

  00325	8b 8d a4 fd ff
	ff		 mov	 ecx, DWORD PTR _WeaponInfoList$GSCopy$[ebp]
  0032b	89 85 94 fd ff
	ff		 mov	 DWORD PTR _kInfo$509846[ebp+24], eax
  00331	8d 85 7c fd ff
	ff		 lea	 eax, DWORD PTR _kInfo$509846[ebp]
  00337	50		 push	 eax
  00338	e8 00 00 00 00	 call	 ?push_back@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXABUWeaponInfo@@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::push_back

; 203  : 	}

  0033d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00341	8d 8d 84 fd ff
	ff		 lea	 ecx, DWORD PTR _kInfo$509846[ebp+8]
  00347	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0034d	ff 85 b4 fd ff
	ff		 inc	 DWORD PTR tv4569[ebp]
  00353	ff 8d a8 fd ff
	ff		 dec	 DWORD PTR tv1041[ebp]
  00359	0f 85 57 fd ff
	ff		 jne	 $LL498@LoadWeapon@3
$LN496@LoadWeapon@3:

; 204  : }

  0035f	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00364	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadWeaponInfoList@@YAXPBDAAV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@AAVioINILoader@@@Z$0:
  00000	8d 8d 7c fd ff
	ff		 lea	 ecx, DWORD PTR _kInfo$509846[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1WeaponInfo@@QAE@XZ
__ehhandler$?LoadWeaponInfoList@@YAXPBDAAV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@AAVioINILoader@@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 78 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-648]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadWeaponInfoList@@YAXPBDAAV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@AAVioINILoader@@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadWeaponInfoList@@YAXPBDAAV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@AAVioINILoader@@@Z ENDP ; LoadWeaponInfoList
END
