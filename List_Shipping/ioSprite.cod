; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\GUI\ioSprite.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?SetStop@ioSprite@@QAEXXZ			; ioSprite::SetStop
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iosprite.h
;	COMDAT ?SetStop@ioSprite@@QAEXXZ
_TEXT	SEGMENT
?SetStop@ioSprite@@QAEXXZ PROC				; ioSprite::SetStop, COMDAT
; _this$ = ecx

; 57   : 	void SetStop() { m_State = SS_STOP; }

  00000	c7 41 04 02 00
	00 00		 mov	 DWORD PTR [ecx+4], 2
  00007	c3		 ret	 0
?SetStop@ioSprite@@QAEXXZ ENDP				; ioSprite::SetStop
_TEXT	ENDS
PUBLIC	?Init@ioSprite@@QAEXXZ				; ioSprite::Init
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iosprite.cpp
;	COMDAT ?Init@ioSprite@@QAEXXZ
_TEXT	SEGMENT
?Init@ioSprite@@QAEXXZ PROC				; ioSprite::Init, COMDAT
; _this$ = ecx

; 33   : 	m_State = SS_READY;

  00000	33 c0		 xor	 eax, eax
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 34   : 	m_iCurSprite = 0;

  00005	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 35   : 	
; 36   : 	m_dwAniStartTime = 0;

  00008	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 37   : 	m_dwAniEndTIme = 0;

  0000b	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 38   : }

  0000e	c3		 ret	 0
?Init@ioSprite@@QAEXXZ ENDP				; ioSprite::Init
_TEXT	ENDS
PUBLIC	?SetType@ioSprite@@QAEXW4AniType@1@@Z		; ioSprite::SetType
; Function compile flags: /Ogsp
;	COMDAT ?SetType@ioSprite@@QAEXW4AniType@1@@Z
_TEXT	SEGMENT
_eType$ = 8						; size = 4
?SetType@ioSprite@@QAEXW4AniType@1@@Z PROC		; ioSprite::SetType, COMDAT
; _this$ = ecx

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 62   : 	m_AniType = eType;

  00003	8b 45 08	 mov	 eax, DWORD PTR _eType$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 63   : }

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
?SetType@ioSprite@@QAEXW4AniType@1@@Z ENDP		; ioSprite::SetType
_TEXT	ENDS
PUBLIC	?SetAnimationGapTime@ioSprite@@QAEXK@Z		; ioSprite::SetAnimationGapTime
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?SetAnimationGapTime@ioSprite@@QAEXK@Z
_TEXT	SEGMENT
_dwGapTime$ = 8						; size = 4
?SetAnimationGapTime@ioSprite@@QAEXK@Z PROC		; ioSprite::SetAnimationGapTime, COMDAT
; _this$ = ecx

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 67   : 	m_dwCheckTime = FRAMEGETTIME() + dwGapTime;

  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0000c	8b c8		 mov	 ecx, eax
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00014	8b c8		 mov	 ecx, eax
  00016	8b 45 08	 mov	 eax, DWORD PTR _dwGapTime$[ebp]
  00019	03 c8		 add	 ecx, eax
  0001b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 68   : 	m_dwAniGapTime = dwGapTime;

  0001e	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00021	5e		 pop	 esi

; 69   : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?SetAnimationGapTime@ioSprite@@QAEXK@Z ENDP		; ioSprite::SetAnimationGapTime
_TEXT	ENDS
PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?SetAnimationDuration@ioSprite@@QAEXK@Z		; ioSprite::SetAnimationDuration
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iosprite.cpp
;	COMDAT ?SetAnimationDuration@ioSprite@@QAEXK@Z
_TEXT	SEGMENT
_dwDuration$ = 8					; size = 4
?SetAnimationDuration@ioSprite@@QAEXK@Z PROC		; ioSprite::SetAnimationDuration, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   : 	m_dwDuration = dwDuration;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwDuration$[ebp]
  00006	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 74   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetAnimationDuration@ioSprite@@QAEXK@Z ENDP		; ioSprite::SetAnimationDuration
_TEXT	ENDS
PUBLIC	?SetAlphaAnimation@ioSprite@@QAEXHH@Z		; ioSprite::SetAlphaAnimation
; Function compile flags: /Ogsp
;	COMDAT ?SetAlphaAnimation@ioSprite@@QAEXHH@Z
_TEXT	SEGMENT
_iStartAlpha$ = 8					; size = 4
_iEndAlpha$ = 12					; size = 4
?SetAlphaAnimation@ioSprite@@QAEXHH@Z PROC		; ioSprite::SetAlphaAnimation, COMDAT
; _this$ = ecx

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 78   : 	m_iCurAlpha = iStartAlpha;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iStartAlpha$[ebp]
  00006	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 79   : 	m_iStartAlpha = iStartAlpha;

  00009	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 80   : 	m_iEndAlpha = iEndAlpha;

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _iEndAlpha$[ebp]
  0000f	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 81   : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?SetAlphaAnimation@ioSprite@@QAEXHH@Z ENDP		; ioSprite::SetAlphaAnimation
_TEXT	ENDS
PUBLIC	?SetScaleAnimation@ioSprite@@QAEXMM@Z		; ioSprite::SetScaleAnimation
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?SetScaleAnimation@ioSprite@@QAEXMM@Z
_TEXT	SEGMENT
_fStartScale$ = 8					; size = 4
_fEndScale$ = 12					; size = 4
?SetScaleAnimation@ioSprite@@QAEXMM@Z PROC		; ioSprite::SetScaleAnimation, COMDAT
; _this$ = ecx

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 85   : 	m_fCurScale = fStartScale;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fStartScale$[ebp]
  00008	f3 0f 11 41 44	 movss	 DWORD PTR [ecx+68], xmm0

; 86   : 	m_fStartScale = fStartScale;

  0000d	f3 0f 11 41 48	 movss	 DWORD PTR [ecx+72], xmm0

; 87   : 	m_fEndScale = fEndScale;

  00012	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fEndScale$[ebp]
  00017	f3 0f 11 41 4c	 movss	 DWORD PTR [ecx+76], xmm0

; 88   : }

  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
?SetScaleAnimation@ioSprite@@QAEXMM@Z ENDP		; ioSprite::SetScaleAnimation
_TEXT	ENDS
PUBLIC	?SetPlay@ioSprite@@QAEXK@Z			; ioSprite::SetPlay
; Function compile flags: /Ogsp
;	COMDAT ?SetPlay@ioSprite@@QAEXK@Z
_TEXT	SEGMENT
_dwDelayTime$ = 8					; size = 4
?SetPlay@ioSprite@@QAEXK@Z PROC				; ioSprite::SetPlay, COMDAT
; _this$ = ecx

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 92   : 	m_State = SS_READY;

  00006	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 93   : 
; 94   : 	m_iCurSprite = 0;

  0000a	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  0000e	57		 push	 edi

; 95   : 
; 96   : 	m_dwCheckTime = FRAMEGETTIME() + m_dwAniGapTime;

  0000f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00015	ff d7		 call	 edi
  00017	8b c8		 mov	 ecx, eax
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0001f	03 46 0c	 add	 eax, DWORD PTR [esi+12]
  00022	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 97   : 	m_dwAniStartTime = m_dwAniEndTIme = FRAMEGETTIME() + dwDelayTime;

  00025	ff d7		 call	 edi
  00027	8b c8		 mov	 ecx, eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 98   : 	m_dwAniEndTIme += m_dwDuration;
; 99   : 
; 100  : 	m_iCurAlpha = m_iStartAlpha;
; 101  : 	m_fCurScale = m_fStartScale;

  0002f	d9 46 48	 fld	 DWORD PTR [esi+72]
  00032	03 45 08	 add	 eax, DWORD PTR _dwDelayTime$[ebp]
  00035	d9 5e 44	 fstp	 DWORD PTR [esi+68]
  00038	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  0003b	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  0003e	03 c8		 add	 ecx, eax
  00040	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00043	5f		 pop	 edi
  00044	89 4e 30	 mov	 DWORD PTR [esi+48], ecx
  00047	89 46 38	 mov	 DWORD PTR [esi+56], eax
  0004a	5e		 pop	 esi

; 102  : }

  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
?SetPlay@ioSprite@@QAEXK@Z ENDP				; ioSprite::SetPlay
_TEXT	ENDS
PUBLIC	?IsStop@ioSprite@@QAE_NXZ			; ioSprite::IsStop
; Function compile flags: /Ogsp
;	COMDAT ?IsStop@ioSprite@@QAE_NXZ
_TEXT	SEGMENT
?IsStop@ioSprite@@QAE_NXZ PROC				; ioSprite::IsStop, COMDAT
; _this$ = ecx

; 106  : 	if( m_State == SS_STOP )

  00000	83 79 04 02	 cmp	 DWORD PTR [ecx+4], 2
  00004	0f 94 c0	 sete	 al

; 107  : 		return true;
; 108  : 
; 109  : 	return false;
; 110  : }

  00007	c3		 ret	 0
?IsStop@ioSprite@@QAE_NXZ ENDP				; ioSprite::IsStop
_TEXT	ENDS
PUBLIC	?size@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBEIXZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBEIXZ PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::size
_TEXT	ENDS
PUBLIC	?empty@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBE_NXZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::empty
; Function compile flags: /Ogsp
;	COMDAT ?empty@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBE_NXZ PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::empty, COMDAT
; _this$ = ecx

; 889  : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	40		 inc	 eax

; 890  : 		}

  0000a	c3		 ret	 0
?empty@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBE_NXZ ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::empty
_TEXT	ENDS
PUBLIC	??A?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEAAPAVioUIRenderImage@@I@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEAAPAVioUIRenderImage@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEAAPAVioUIRenderImage@@I@Z PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pos$[ebp]
  00008	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEAAPAVioUIRenderImage@@I@Z ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::operator[]
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBE_NPBQAVioUIRenderImage@@@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBE_NPBQAVioUIRenderImage@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBE_NPBQAVioUIRenderImage@@@Z PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBE_NPBQAVioUIRenderImage@@@Z ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEXPAPAVioUIRenderImage@@0@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEXPAPAVioUIRenderImage@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEXPAPAVioUIRenderImage@@0@Z PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEXPAPAVioUIRenderImage@@0@Z ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ ; std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::~_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::~_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::~_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVioUIRenderImage@@@std@@QAE@XZ	; std::allocator<ioUIRenderImage *>::allocator<ioUIRenderImage *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVioUIRenderImage@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAVioUIRenderImage@@@std@@QAE@XZ PROC	; std::allocator<ioUIRenderImage *>::allocator<ioUIRenderImage *>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@PAVioUIRenderImage@@@std@@QAE@XZ ENDP	; std::allocator<ioUIRenderImage *>::allocator<ioUIRenderImage *>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBEIXZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBEIXZ PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEXXZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEXXZ PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEXXZ ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVioUIRenderImage@@@std@@QAE@ABV01@@Z ; std::allocator<ioUIRenderImage *>::allocator<ioUIRenderImage *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVioUIRenderImage@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAVioUIRenderImage@@@std@@QAE@ABV01@@Z PROC ; std::allocator<ioUIRenderImage *>::allocator<ioUIRenderImage *>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@PAVioUIRenderImage@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<ioUIRenderImage *>::allocator<ioUIRenderImage *>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@I@Z ; std::allocator<ioUIRenderImage *>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@I@Z PROC ; std::allocator<ioUIRenderImage *>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@I@Z ENDP ; std::allocator<ioUIRenderImage *>::deallocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVioUIRenderImage@@@std@@QBEIXZ ; std::allocator<ioUIRenderImage *>::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@PAVioUIRenderImage@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAVioUIRenderImage@@@std@@QBEIXZ PROC ; std::allocator<ioUIRenderImage *>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAVioUIRenderImage@@@std@@QBEIXZ ENDP ; std::allocator<ioUIRenderImage *>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::_Compat
_TEXT	ENDS
PUBLIC	??$addressof@QAVioUIRenderImage@@@std@@YAPBQAVioUIRenderImage@@ABQAV1@@Z ; std::addressof<ioUIRenderImage * const>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@QAVioUIRenderImage@@@std@@YAPBQAVioUIRenderImage@@ABQAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAVioUIRenderImage@@@std@@YAPBQAVioUIRenderImage@@ABQAV1@@Z PROC ; std::addressof<ioUIRenderImage * const>, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@QAVioUIRenderImage@@@std@@YAPBQAVioUIRenderImage@@ABQAV1@@Z ENDP ; std::addressof<ioUIRenderImage * const>
_TEXT	ENDS
PUBLIC	??$forward@AAPAVioUIRenderImage@@@std@@YAAAPAVioUIRenderImage@@AAPAV1@@Z ; std::forward<ioUIRenderImage * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAPAVioUIRenderImage@@@std@@YAAAPAVioUIRenderImage@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAVioUIRenderImage@@@std@@YAAAPAVioUIRenderImage@@AAPAV1@@Z PROC ; std::forward<ioUIRenderImage * &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAVioUIRenderImage@@@std@@YAAAPAVioUIRenderImage@@AAPAV1@@Z ENDP ; std::forward<ioUIRenderImage * &>
_TEXT	ENDS
PUBLIC	??$forward@ABQAVioUIRenderImage@@@std@@YAABQAVioUIRenderImage@@ABQAV1@@Z ; std::forward<ioUIRenderImage * const &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@ABQAVioUIRenderImage@@@std@@YAABQAVioUIRenderImage@@ABQAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAVioUIRenderImage@@@std@@YAABQAVioUIRenderImage@@ABQAV1@@Z PROC ; std::forward<ioUIRenderImage * const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABQAVioUIRenderImage@@@std@@YAABQAVioUIRenderImage@@ABQAV1@@Z ENDP ; std::forward<ioUIRenderImage * const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAVioUIRenderImage@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVioUIRenderImage@@0@Z ; std::_Ptr_cat<ioUIRenderImage *,ioUIRenderImage *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAVioUIRenderImage@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVioUIRenderImage@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVioUIRenderImage@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVioUIRenderImage@@0@Z PROC ; std::_Ptr_cat<ioUIRenderImage *,ioUIRenderImage *>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@PAVioUIRenderImage@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVioUIRenderImage@@0@Z ENDP ; std::_Ptr_cat<ioUIRenderImage *,ioUIRenderImage *>
_TEXT	ENDS
PUBLIC	??$_Move@PAPAVioUIRenderImage@@PAPAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<ioUIRenderImage * *,ioUIRenderImage * *>
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAPAVioUIRenderImage@@PAPAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAPAVioUIRenderImage@@PAPAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<ioUIRenderImage * *,ioUIRenderImage * *>, COMDAT

; 2522 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2523 : 	ptrdiff_t _Count = _Last - _First;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	57		 push	 edi

; 2524 : 	_CSTD memmove(&*_Dest, &*_First,
; 2525 : 		_Count * sizeof (*_First));

  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0000e	c1 fe 02	 sar	 esi, 2
  00011	c1 e6 02	 shl	 esi, 2
  00014	56		 push	 esi
  00015	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00018	57		 push	 edi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2526 : 	return (_Dest + _Count);

  00022	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 2527 : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Move@PAPAVioUIRenderImage@@PAPAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<ioUIRenderImage * *,ioUIRenderImage * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAXPAPAVioUIRenderImage@@0AAV?$allocator@PAVioUIRenderImage@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ioUIRenderImage *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAXPAPAVioUIRenderImage@@0AAV?$allocator@PAVioUIRenderImage@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAXPAPAVioUIRenderImage@@0AAV?$allocator@PAVioUIRenderImage@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ioUIRenderImage *> >, COMDAT

; 105  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAXPAPAVioUIRenderImage@@0AAV?$allocator@PAVioUIRenderImage@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioUIRenderImage *> >
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Val_type@PAPAVioUIRenderImage@@@std@@YAPAPAVioUIRenderImage@@PAPAV1@@Z ; std::_Val_type<ioUIRenderImage * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAVioUIRenderImage@@@std@@YAPAPAVioUIRenderImage@@PAPAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAVioUIRenderImage@@@std@@YAPAPAVioUIRenderImage@@PAPAV1@@Z PROC ; std::_Val_type<ioUIRenderImage * *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAPAVioUIRenderImage@@@std@@YAPAPAVioUIRenderImage@@PAPAV1@@Z ENDP ; std::_Val_type<ioUIRenderImage * *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAVioUIRenderImage@@PAV1@PAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00AAV?$allocator@PAVioUIRenderImage@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioUIRenderImage *,ioUIRenderImage *,ioUIRenderImage *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAVioUIRenderImage@@PAV1@PAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00AAV?$allocator@PAVioUIRenderImage@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVioUIRenderImage@@PAV1@PAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00AAV?$allocator@PAVioUIRenderImage@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ioUIRenderImage *,ioUIRenderImage *,ioUIRenderImage *>, COMDAT

; 456  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 457  : 	_DEBUG_RANGE(_First, _Last);
; 458  : 	_DEBUG_POINTER(_Dest);
; 459  : 	size_t _Count = (size_t)(_Last - _First);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2

; 460  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 461  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 462  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninit_move@PAVioUIRenderImage@@PAV1@PAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00AAV?$allocator@PAVioUIRenderImage@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ioUIRenderImage *,ioUIRenderImage *,ioUIRenderImage *>
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	__real@406fe00000000000
PUBLIC	__real@4f800000
PUBLIC	?Process@ioSprite@@QAEXXZ			; ioSprite::Process
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@406fe00000000000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iosprite.cpp
CONST	ENDS
;	COMDAT ?Process@ioSprite@@QAEXXZ
_TEXT	SEGMENT
tv389 = -12						; size = 4
tv386 = -12						; size = 4
tv380 = -12						; size = 4
tv360 = -12						; size = 4
_fScaleGap$505232 = -12					; size = 4
_fScaleGap$505228 = -12					; size = 4
tv366 = -8						; size = 4
tv364 = -8						; size = 4
tv353 = -8						; size = 4
_fRate$505220 = -4					; size = 4
?Process@ioSprite@@QAEXXZ PROC				; ioSprite::Process, COMDAT
; _this$ = ecx

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 114  : 	if( m_State == SS_READY && m_dwAniStartTime > 0 && m_dwAniStartTime <= FRAMEGETTIME() )

  00009	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  0000d	57		 push	 edi
  0000e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00014	75 1c		 jne	 SHORT $LN22@Process
  00016	83 7e 2c 00	 cmp	 DWORD PTR [esi+44], 0
  0001a	76 16		 jbe	 SHORT $LN22@Process
  0001c	ff d7		 call	 edi
  0001e	8b c8		 mov	 ecx, eax
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00026	39 46 2c	 cmp	 DWORD PTR [esi+44], eax
  00029	77 07		 ja	 SHORT $LN22@Process

; 115  : 		m_State = SS_PLAY;

  0002b	c7 46 04 01 00
	00 00		 mov	 DWORD PTR [esi+4], 1
$LN22@Process:

; 116  : 		
; 117  : 	if( m_State != SS_PLAY )

  00032	83 7e 04 01	 cmp	 DWORD PTR [esi+4], 1
  00036	0f 85 7a 01 00
	00		 jne	 $LN15@Process

; 118  : 		return;
; 119  : 
; 120  : 	if( m_vSpriteList.empty() )

  0003c	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0003f	3b 46 1c	 cmp	 eax, DWORD PTR [esi+28]
  00042	0f 84 6e 01 00
	00		 je	 $LN15@Process

; 121  : 		return;
; 122  : 
; 123  : 	DWORD dwCurTime = FRAMEGETTIME();

  00048	ff d7		 call	 edi
  0004a	8b c8		 mov	 ecx, eax
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 124  : 
; 125  : 	switch( m_AniType )

  00052	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00054	83 e9 00	 sub	 ecx, 0
  00057	0f 84 39 01 00
	00		 je	 $LN17@Process
  0005d	49		 dec	 ecx
  0005e	0f 85 52 01 00
	00		 jne	 $LN15@Process

; 136  : 					return;
; 137  : 				}
; 138  : 			}
; 139  : 		}
; 140  : 		break;
; 141  : 	case AT_LOOP:
; 142  : 		{
; 143  : 			if( m_dwCheckTime < dwCurTime )

  00064	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  00067	73 17		 jae	 SHORT $LN12@Process

; 144  : 			{
; 145  : 				m_dwCheckTime = dwCurTime + m_dwAniGapTime;

  00069	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0006c	03 c8		 add	 ecx, eax

; 146  : 				m_iCurSprite++;

  0006e	ff 46 10	 inc	 DWORD PTR [esi+16]
  00071	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00074	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]

; 147  : 				if( m_iCurSprite >= m_iMaxSpriteCnt )

  00077	3b 4e 14	 cmp	 ecx, DWORD PTR [esi+20]
  0007a	7c 04		 jl	 SHORT $LN12@Process

; 148  : 					m_iCurSprite = 0;

  0007c	83 66 10 00	 and	 DWORD PTR [esi+16], 0
$LN12@Process:

; 149  : 			}
; 150  : 
; 151  : 			if( m_dwDuration > 0 && m_dwAniEndTIme < dwCurTime )

  00080	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00083	85 c9		 test	 ecx, ecx
  00085	0f 84 2b 01 00
	00		 je	 $LN15@Process
  0008b	39 46 30	 cmp	 DWORD PTR [esi+48], eax

; 152  : 			{
; 153  : 				SetStop();
; 154  : 				return;

  0008e	0f 82 1b 01 00
	00		 jb	 $LN43@Process

; 155  : 			}
; 156  : 			else if( m_dwDuration > 0 )

  00094	85 c9		 test	 ecx, ecx
  00096	0f 84 1a 01 00
	00		 je	 $LN15@Process

; 157  : 			{
; 158  : 				float fRate = static_cast<float>( m_dwAniEndTIme - dwCurTime ) / m_dwDuration;

  0009c	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0009f	2b d0		 sub	 edx, eax
  000a1	89 55 f4	 mov	 DWORD PTR tv389[ebp], edx
  000a4	db 45 f4	 fild	 DWORD PTR tv389[ebp]
  000a7	79 06		 jns	 SHORT $LN37@Process
  000a9	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN37@Process:
  000af	89 4d f4	 mov	 DWORD PTR tv386[ebp], ecx
  000b2	db 45 f4	 fild	 DWORD PTR tv386[ebp]
  000b5	85 c9		 test	 ecx, ecx
  000b7	79 06		 jns	 SHORT $LN38@Process
  000b9	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN38@Process:
  000bf	de f9		 fdivp	 ST(1), ST(0)

; 159  : 
; 160  : 				if( m_iStartAlpha > m_iEndAlpha )

  000c1	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  000c4	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  000c7	d9 5d fc	 fstp	 DWORD PTR _fRate$505220[ebp]
  000ca	3b c8		 cmp	 ecx, eax
  000cc	7e 16		 jle	 SHORT $LN44@Process

; 161  : 					m_iCurAlpha = MAX_ALPHA_RATE * fRate;

  000ce	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fRate$505220[ebp]
  000d3	0f 5a c0	 cvtps2pd xmm0, xmm0
  000d6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@406fe00000000000
  000de	f2 0f 2c c0	 cvttsd2si eax, xmm0
  000e2	eb 25		 jmp	 SHORT $LN6@Process
$LN44@Process:

; 162  : 				else if( m_iStartAlpha < m_iEndAlpha )

  000e4	7d 23		 jge	 SHORT $LN6@Process

; 163  : 					m_iCurAlpha = MAX_ALPHA_RATE * ( FLOAT1 - fRate );

  000e6	b8 01 00 00 00	 mov	 eax, 1
  000eb	89 45 f4	 mov	 DWORD PTR tv380[ebp], eax
  000ee	db 45 f4	 fild	 DWORD PTR tv380[ebp]
  000f1	85 c0		 test	 eax, eax
  000f3	79 06		 jns	 SHORT $LN39@Process
  000f5	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN39@Process:
  000fb	d8 65 fc	 fsub	 DWORD PTR _fRate$505220[ebp]
  000fe	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@406fe00000000000
  00104	e8 00 00 00 00	 call	 __ftol2_sse
$LN6@Process:

; 164  : 				else
; 165  : 					m_iCurAlpha = m_iEndAlpha;
; 166  : 
; 167  : 				if( m_fStartScale > m_fEndScale )

  00109	f3 0f 10 4e 48	 movss	 xmm1, DWORD PTR [esi+72]
  0010e	f3 0f 10 46 4c	 movss	 xmm0, DWORD PTR [esi+76]
  00113	0f 5a d1	 cvtps2pd xmm2, xmm1
  00116	0f 5a d8	 cvtps2pd xmm3, xmm0
  00119	66 0f 2f d3	 comisd	 xmm2, xmm3
  0011d	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00120	f3 0f 11 4d f4	 movss	 DWORD PTR tv360[ebp], xmm1
  00125	f3 0f 11 45 f8	 movss	 DWORD PTR tv364[ebp], xmm0
  0012a	76 2b		 jbe	 SHORT $LN4@Process

; 168  : 				{
; 169  : 					float fScaleGap = m_fStartScale - m_fEndScale;

  0012c	d9 45 f4	 fld	 DWORD PTR tv360[ebp]
  0012f	d8 65 f8	 fsub	 DWORD PTR tv364[ebp]
  00132	d9 5d f4	 fstp	 DWORD PTR _fScaleGap$505228[ebp]

; 170  : 					m_fCurScale = m_fStartScale - fScaleGap * ( FLOAT1 - fRate );

  00135	b8 01 00 00 00	 mov	 eax, 1
  0013a	d9 46 48	 fld	 DWORD PTR [esi+72]
  0013d	89 45 f8	 mov	 DWORD PTR tv366[ebp], eax
  00140	db 45 f8	 fild	 DWORD PTR tv366[ebp]
  00143	85 c0		 test	 eax, eax
  00145	79 06		 jns	 SHORT $LN40@Process
  00147	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN40@Process:
  0014d	d8 65 fc	 fsub	 DWORD PTR _fRate$505220[ebp]
  00150	d8 4d f4	 fmul	 DWORD PTR _fScaleGap$505228[ebp]
  00153	de e9		 fsubp	 ST(1), ST(0)
  00155	eb 33		 jmp	 SHORT $LN45@Process
$LN4@Process:

; 171  : 				}
; 172  : 				else if( m_fStartScale < m_fEndScale )

  00157	0f 5a c9	 cvtps2pd xmm1, xmm1
  0015a	0f 5a d0	 cvtps2pd xmm2, xmm0
  0015d	66 0f 2f d1	 comisd	 xmm2, xmm1
  00161	76 2c		 jbe	 SHORT $LN2@Process

; 173  : 				{
; 174  : 					float fScaleGap = m_fEndScale - m_fStartScale;

  00163	d9 45 f8	 fld	 DWORD PTR tv364[ebp]
  00166	d8 65 f4	 fsub	 DWORD PTR tv360[ebp]
  00169	d9 5d f4	 fstp	 DWORD PTR _fScaleGap$505232[ebp]

; 175  : 					m_fCurScale = m_fStartScale + fScaleGap * ( FLOAT1 - fRate );

  0016c	b8 01 00 00 00	 mov	 eax, 1
  00171	89 45 f8	 mov	 DWORD PTR tv353[ebp], eax
  00174	db 45 f8	 fild	 DWORD PTR tv353[ebp]
  00177	85 c0		 test	 eax, eax
  00179	79 06		 jns	 SHORT $LN41@Process
  0017b	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN41@Process:
  00181	d8 65 fc	 fsub	 DWORD PTR _fRate$505220[ebp]
  00184	d8 4d f4	 fmul	 DWORD PTR _fScaleGap$505232[ebp]
  00187	d8 46 48	 fadd	 DWORD PTR [esi+72]
$LN45@Process:
  0018a	d9 5e 44	 fstp	 DWORD PTR [esi+68]

; 176  : 				}
; 177  : 				else

  0018d	eb 27		 jmp	 SHORT $LN15@Process
$LN2@Process:

; 178  : 					m_fCurScale = m_fEndScale;

  0018f	f3 0f 11 46 44	 movss	 DWORD PTR [esi+68], xmm0

; 179  : 			}
; 180  : 		}
; 181  : 		break;

  00194	eb 20		 jmp	 SHORT $LN15@Process
$LN17@Process:

; 126  : 	{
; 127  : 	case AT_PLAY_ONCE:
; 128  : 		{
; 129  : 			if( m_dwCheckTime < dwCurTime )

  00196	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  00199	73 1b		 jae	 SHORT $LN15@Process

; 130  : 			{
; 131  : 				m_dwCheckTime = dwCurTime + m_dwAniGapTime;

  0019b	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0019e	03 c8		 add	 ecx, eax

; 132  : 				m_iCurSprite++;

  001a0	ff 46 10	 inc	 DWORD PTR [esi+16]
  001a3	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 133  : 				if( m_iCurSprite >= m_iMaxSpriteCnt - 1 )

  001a6	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  001a9	49		 dec	 ecx
  001aa	39 4e 10	 cmp	 DWORD PTR [esi+16], ecx
  001ad	7c 07		 jl	 SHORT $LN15@Process
$LN43@Process:

; 134  : 				{
; 135  : 					SetStop();

  001af	c7 46 04 02 00
	00 00		 mov	 DWORD PTR [esi+4], 2
$LN15@Process:
  001b6	5f		 pop	 edi
  001b7	5e		 pop	 esi

; 182  : 	}
; 183  : }

  001b8	c9		 leave
  001b9	c3		 ret	 0
?Process@ioSprite@@QAEXXZ ENDP				; ioSprite::Process
_TEXT	ENDS
PUBLIC	?Render@ioSprite@@QAEXHHMW4UIRenderType@@W4TextureFilterOption@@@Z ; ioSprite::Render
; Function compile flags: /Ogsp
;	COMDAT ?Render@ioSprite@@QAEXHHMW4UIRenderType@@W4TextureFilterOption@@@Z
_TEXT	SEGMENT
_iXpos$ = 8						; size = 4
_iYPos$ = 12						; size = 4
_fScale$ = 16						; size = 4
_eRenderType$ = 20					; size = 4
_eFilterOption$ = 24					; size = 4
?Render@ioSprite@@QAEXHHMW4UIRenderType@@W4TextureFilterOption@@@Z PROC ; ioSprite::Render, COMDAT
; _this$ = ecx

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 187  : 	if( m_State != SS_PLAY )

  00006	83 7e 04 01	 cmp	 DWORD PTR [esi+4], 1
  0000a	0f 85 8e 00 00
	00		 jne	 $LN1@Render

; 188  : 		return;
; 189  : 
; 190  : 	if( m_vSpriteList.empty() )

  00010	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00013	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00016	3b d0		 cmp	 edx, eax
  00018	0f 84 80 00 00
	00		 je	 $LN1@Render

; 191  : 		return;
; 192  : 
; 193  : 	if( (int)m_vSpriteList.size() > m_iCurSprite && m_vSpriteList[m_iCurSprite] /*&& m_vSpriteList[m_iCurSprite]->GetImage()*/ )

  0001e	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00021	2b c2		 sub	 eax, edx
  00023	c1 f8 02	 sar	 eax, 2
  00026	3b c1		 cmp	 eax, ecx
  00028	7e 74		 jle	 SHORT $LN1@Render
  0002a	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  0002d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00030	74 6c		 je	 SHORT $LN1@Render

; 194  : 	{
; 195  : 		m_vSpriteList[m_iCurSprite]->SetAlpha( m_iCurAlpha );

  00032	0f b6 56 38	 movzx	 edx, BYTE PTR [esi+56]
  00036	8b 08		 mov	 ecx, DWORD PTR [eax]
  00038	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003a	52		 push	 edx
  0003b	ff 50 30	 call	 DWORD PTR [eax+48]

; 196  : 		m_vSpriteList[m_iCurSprite]->SetScale( m_fCurScale * fScale );

  0003e	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00041	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00044	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  00047	f3 0f 10 46 44	 movss	 xmm0, DWORD PTR [esi+68]
  0004c	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _fScale$[ebp]
  00051	8b 01		 mov	 eax, DWORD PTR [ecx]
  00053	0f 5a c0	 cvtps2pd xmm0, xmm0
  00056	0f 5a c9	 cvtps2pd xmm1, xmm1
  00059	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0005d	51		 push	 ecx
  0005e	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00062	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00067	ff 50 1c	 call	 DWORD PTR [eax+28]

; 197  : 		m_vSpriteList[m_iCurSprite]->Render( iXpos, iYPos, eRenderType, eFilterOption );

  0006a	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0006d	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00070	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  00073	66 0f 6e 45 0c	 movd	 xmm0, DWORD PTR _iYPos$[ebp]
  00078	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007a	6a 00		 push	 0
  0007c	6a 00		 push	 0
  0007e	ff 75 18	 push	 DWORD PTR _eFilterOption$[ebp]
  00081	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00084	ff 75 14	 push	 DWORD PTR _eRenderType$[ebp]
  00087	51		 push	 ecx
  00088	51		 push	 ecx
  00089	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0008f	66 0f 6e 45 08	 movd	 xmm0, DWORD PTR _iXpos$[ebp]
  00094	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	ff 10		 call	 DWORD PTR [eax]
$LN1@Render:
  0009e	5e		 pop	 esi

; 198  : 	}
; 199  : }

  0009f	5d		 pop	 ebp
  000a0	c2 14 00	 ret	 20			; 00000014H
?Render@ioSprite@@QAEXHHMW4UIRenderType@@W4TextureFilterOption@@@Z ENDP ; ioSprite::Render
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@V?$allocator@PAVioUIRenderImage@@@1@@Z ; std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@V?$allocator@PAVioUIRenderImage@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@V?$allocator@PAVioUIRenderImage@@@1@@Z PROC ; std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@V?$allocator@PAVioUIRenderImage@@@1@@Z ENDP ; std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBEIXZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBEIXZ PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEII@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEII@Z PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  0000d	c1 f8 02	 sar	 eax, 2
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00023	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?_Grow_to@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEII@Z ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QAE@PAPAVioUIRenderImage@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QAE@PAPAVioUIRenderImage@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QAE@PAPAVioUIRenderImage@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QAE@PAPAVioUIRenderImage@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::operator==
_TEXT	ENDS
PUBLIC	??$_Move@PAPAVioUIRenderImage@@PAPAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00@Z ; std::_Move<ioUIRenderImage * *,ioUIRenderImage * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAPAVioUIRenderImage@@PAPAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00@Z
_TEXT	SEGMENT
__Cat$506288 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAPAVioUIRenderImage@@PAPAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00@Z PROC ; std::_Move<ioUIRenderImage * *,ioUIRenderImage * *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$506288[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAPAVioUIRenderImage@@PAPAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<ioUIRenderImage * *,ioUIRenderImage * *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAPAVioUIRenderImage@@PAPAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00@Z ENDP ; std::_Move<ioUIRenderImage * *,ioUIRenderImage * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAXPAPAVioUIRenderImage@@0AAV?$allocator@PAVioUIRenderImage@@@0@@Z ; std::_Destroy_range<std::allocator<ioUIRenderImage *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAXPAPAVioUIRenderImage@@0AAV?$allocator@PAVioUIRenderImage@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAXPAPAVioUIRenderImage@@0AAV?$allocator@PAVioUIRenderImage@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ioUIRenderImage *> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAXPAPAVioUIRenderImage@@0AAV?$allocator@PAVioUIRenderImage@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioUIRenderImage *> >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@PAVioUIRenderImage@@@std@@YAPAPAVioUIRenderImage@@IPAPAV1@@Z ; std::_Allocate<ioUIRenderImage *>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@PAVioUIRenderImage@@@std@@YAPAPAVioUIRenderImage@@IPAPAV1@@Z
_TEXT	SEGMENT
$T506303 = -12						; size = 12
$T506308 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVioUIRenderImage@@@std@@YAPAPAVioUIRenderImage@@IPAPAV1@@Z PROC ; std::_Allocate<ioUIRenderImage *>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3e		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate
  00017	8b c1		 mov	 eax, ecx
  00019	c1 e0 02	 shl	 eax, 2
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	59		 pop	 ecx
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	83 65 08 00	 and	 DWORD PTR $T506308[ebp], 0
  0002b	8d 45 08	 lea	 eax, DWORD PTR $T506308[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T506303[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00038	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003d	8d 45 f4	 lea	 eax, DWORD PTR $T506303[ebp]
  00040	50		 push	 eax
  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T506303[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00048	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004d	c9		 leave
  0004e	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@PAVioUIRenderImage@@@std@@YAPAPAVioUIRenderImage@@IPAPAV1@@Z ENDP ; std::_Allocate<ioUIRenderImage *>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$construct@AAPAVioUIRenderImage@@@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@AAPAV2@@Z ; std::allocator<ioUIRenderImage *>::construct<ioUIRenderImage * &>
; Function compile flags: /Ogsp
;	COMDAT ??$construct@AAPAVioUIRenderImage@@@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@AAPAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAPAVioUIRenderImage@@@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@AAPAV2@@Z PROC ; std::allocator<ioUIRenderImage *>::construct<ioUIRenderImage * &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@construct:

; 209  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@AAPAVioUIRenderImage@@@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@AAPAV2@@Z ENDP ; std::allocator<ioUIRenderImage *>::construct<ioUIRenderImage * &>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAPAVioUIRenderImage@@PAPAV1@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00AAV?$allocator@PAVioUIRenderImage@@@0@@Z ; std::_Uninitialized_move<ioUIRenderImage * *,ioUIRenderImage * *,std::allocator<ioUIRenderImage *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAPAVioUIRenderImage@@PAPAV1@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00AAV?$allocator@PAVioUIRenderImage@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVioUIRenderImage@@PAPAV1@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00AAV?$allocator@PAVioUIRenderImage@@@0@@Z PROC ; std::_Uninitialized_move<ioUIRenderImage * *,ioUIRenderImage * *,std::allocator<ioUIRenderImage *> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2
  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 472  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAVioUIRenderImage@@PAPAV1@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00AAV?$allocator@PAVioUIRenderImage@@@0@@Z ENDP ; std::_Uninitialized_move<ioUIRenderImage * *,ioUIRenderImage * *,std::allocator<ioUIRenderImage *> >
_TEXT	ENDS
PUBLIC	??$_Construct@PAVioUIRenderImage@@ABQAV1@@std@@YAXPAPAVioUIRenderImage@@ABQAV1@@Z ; std::_Construct<ioUIRenderImage *,ioUIRenderImage * const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@PAVioUIRenderImage@@ABQAV1@@std@@YAXPAPAVioUIRenderImage@@ABQAV1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAVioUIRenderImage@@ABQAV1@@std@@YAXPAPAVioUIRenderImage@@ABQAV1@@Z PROC ; std::_Construct<ioUIRenderImage *,ioUIRenderImage * const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@Construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@Construct:

; 49   : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Construct@PAVioUIRenderImage@@ABQAV1@@std@@YAXPAPAVioUIRenderImage@@ABQAV1@@Z ENDP ; std::_Construct<ioUIRenderImage *,ioUIRenderImage * const &>
_TEXT	ENDS
PUBLIC	??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXPAPAVioUIRenderImage@@0@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXPAPAVioUIRenderImage@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXPAPAVioUIRenderImage@@0@Z PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXPAPAVioUIRenderImage@@0@Z ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Destroy
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QAE@PAPAVioUIRenderImage@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::_Vector_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QAE@PAPAVioUIRenderImage@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QAE@PAPAVioUIRenderImage@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::_Vector_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QAE@PAPAVioUIRenderImage@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::_Vector_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioUIRenderImage *,std::allocator<ioUIRenderImage *> > >::operator!=
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAVioUIRenderImage@@@std@@QAEPAPAVioUIRenderImage@@I@Z ; std::allocator<ioUIRenderImage *>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@PAVioUIRenderImage@@@std@@QAEPAPAVioUIRenderImage@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVioUIRenderImage@@@std@@QAEPAPAVioUIRenderImage@@I@Z PROC ; std::allocator<ioUIRenderImage *>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@PAVioUIRenderImage@@@std@@YAPAPAVioUIRenderImage@@IPAPAV1@@Z ; std::_Allocate<ioUIRenderImage *>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@PAVioUIRenderImage@@@std@@QAEPAPAVioUIRenderImage@@I@Z ENDP ; std::allocator<ioUIRenderImage *>::allocate
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@PAVioUIRenderImage@@@std@@PAVioUIRenderImage@@AAPAV3@@std@@YAXAAV?$allocator@PAVioUIRenderImage@@@0@PAPAVioUIRenderImage@@AAPAV2@@Z ; std::_Cons_val<std::allocator<ioUIRenderImage *>,ioUIRenderImage *,ioUIRenderImage * &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@PAVioUIRenderImage@@@std@@PAVioUIRenderImage@@AAPAV3@@std@@YAXAAV?$allocator@PAVioUIRenderImage@@@0@PAPAVioUIRenderImage@@AAPAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAVioUIRenderImage@@@std@@PAVioUIRenderImage@@AAPAV3@@std@@YAXAAV?$allocator@PAVioUIRenderImage@@@0@PAPAVioUIRenderImage@@AAPAV2@@Z PROC ; std::_Cons_val<std::allocator<ioUIRenderImage *>,ioUIRenderImage *,ioUIRenderImage * &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@Cons_val:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@PAVioUIRenderImage@@@std@@PAVioUIRenderImage@@AAPAV3@@std@@YAXAAV?$allocator@PAVioUIRenderImage@@@0@PAPAVioUIRenderImage@@AAPAV2@@Z ENDP ; std::_Cons_val<std::allocator<ioUIRenderImage *>,ioUIRenderImage *,ioUIRenderImage * &>
_TEXT	ENDS
PUBLIC	??$_Umove@PAPAVioUIRenderImage@@@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEPAPAVioUIRenderImage@@PAPAV2@00@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Umove<ioUIRenderImage * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAVioUIRenderImage@@@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEPAPAVioUIRenderImage@@PAPAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVioUIRenderImage@@@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEPAPAVioUIRenderImage@@PAPAV2@00@Z PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Umove<ioUIRenderImage * *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVioUIRenderImage@@PAPAV1@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00AAV?$allocator@PAVioUIRenderImage@@@0@@Z ; std::_Uninitialized_move<ioUIRenderImage * *,ioUIRenderImage * *,std::allocator<ioUIRenderImage *> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAPAVioUIRenderImage@@@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEPAPAVioUIRenderImage@@PAPAV2@00@Z ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Umove<ioUIRenderImage * *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@ABQAV3@@Z ; std::allocator<ioUIRenderImage *>::construct
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@ABQAV3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@ABQAV3@@Z PROC ; std::allocator<ioUIRenderImage *>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN5@construct@2
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN5@construct@2:

; 198  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?construct@?$allocator@PAVioUIRenderImage@@@std@@QAEXPAPAVioUIRenderImage@@ABQAV3@@Z ENDP ; std::allocator<ioUIRenderImage *>::construct
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@XZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@XZ PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@XZ ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@XZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@XZ PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@XZ ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::end
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXXZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXXZ PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN12@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN12@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXXZ ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXI@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::reserve
; Function compile flags: /Ogsp
;	COMDAT ?reserve@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?reserve@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXI@Z PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 747  : 		if (max_size() < _Count)

  00003	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN43@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  0001a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001d	2b 06		 sub	 eax, DWORD PTR [esi]
  0001f	c1 f8 02	 sar	 eax, 2
  00022	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00025	73 52		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00027	53		 push	 ebx
  00028	57		 push	 edi
  00029	6a 00		 push	 0
  0002b	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0002e	e8 00 00 00 00	 call	 ??$_Allocate@PAVioUIRenderImage@@@std@@YAPAPAVioUIRenderImage@@IPAPAV1@@Z ; std::_Allocate<ioUIRenderImage *>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00033	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00035	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00038	52		 push	 edx
  00039	8b d8		 mov	 ebx, eax
  0003b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003e	53		 push	 ebx
  0003f	50		 push	 eax
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVioUIRenderImage@@PAPAV1@V?$allocator@PAVioUIRenderImage@@@std@@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00AAV?$allocator@PAVioUIRenderImage@@@0@@Z ; std::_Uninitialized_move<ioUIRenderImage * *,ioUIRenderImage * *,std::allocator<ioUIRenderImage *> >

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);
; 757  : 			_RERAISE;
; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00046	8b 06		 mov	 eax, DWORD PTR [esi]
  00048	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0004b	2b f8		 sub	 edi, eax
  0004d	83 c4 18	 add	 esp, 24			; 00000018H
  00050	c1 ff 02	 sar	 edi, 2

; 761  : 			if (this->_Myfirst != 0)

  00053	85 c0		 test	 eax, eax
  00055	74 07		 je	 SHORT $LN39@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005d	59		 pop	 ecx
$LN39@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0005e	8b ce		 mov	 ecx, esi
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00066	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00069	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  0006c	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  0006f	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00072	5f		 pop	 edi

; 771  : 			this->_Myfirst = _Ptr;

  00073	89 1e		 mov	 DWORD PTR [esi], ebx
  00075	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00078	5b		 pop	 ebx
$LN3@reserve:
  00079	5e		 pop	 esi

; 772  : 			}
; 773  : 		}

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
$LN42@reserve:
?reserve@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXI@Z ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::reserve
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@@Z PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@@Z ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@PAVioUIRenderImage@@@std@@PAVioUIRenderImage@@ABQAV3@@std@@YAXAAV?$allocator@PAVioUIRenderImage@@@0@PAPAVioUIRenderImage@@ABQAV2@@Z ; std::_Cons_val<std::allocator<ioUIRenderImage *>,ioUIRenderImage *,ioUIRenderImage * const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@PAVioUIRenderImage@@@std@@PAVioUIRenderImage@@ABQAV3@@std@@YAXAAV?$allocator@PAVioUIRenderImage@@@0@PAPAVioUIRenderImage@@ABQAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAVioUIRenderImage@@@std@@PAVioUIRenderImage@@ABQAV3@@std@@YAXAAV?$allocator@PAVioUIRenderImage@@@0@PAPAVioUIRenderImage@@ABQAV2@@Z PROC ; std::_Cons_val<std::allocator<ioUIRenderImage *>,ioUIRenderImage *,ioUIRenderImage * const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN9@Cons_val@2
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN9@Cons_val@2:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@PAVioUIRenderImage@@@std@@PAVioUIRenderImage@@ABQAV3@@std@@YAXAAV?$allocator@PAVioUIRenderImage@@@0@PAPAVioUIRenderImage@@ABQAV2@@Z ENDP ; std::_Cons_val<std::allocator<ioUIRenderImage *>,ioUIRenderImage *,ioUIRenderImage * const &>
_TEXT	ENDS
PUBLIC	??1?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::~vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::~vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXXZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Tidy
??1?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::~vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@0@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$506760 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@0@Z PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$506760[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAPAVioUIRenderImage@@PAPAV1@@std@@YAPAPAVioUIRenderImage@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<ioUIRenderImage * *,ioUIRenderImage * *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@0@Z ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::erase
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXI@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXI@Z PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx

; 1292 : 		if (max_size() - _Count < _Size)

  0000d	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  00012	2b 55 08	 sub	 edx, DWORD PTR __Count$[ebp]
  00015	c1 f8 02	 sar	 eax, 2
  00018	3b d0		 cmp	 edx, eax
  0001a	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0002a	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  0002d	2b d1		 sub	 edx, ecx
  0002f	c1 fa 02	 sar	 edx, 2
  00032	3b c2		 cmp	 eax, edx
  00034	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IBEII@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Grow_to
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?reserve@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXI@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::reserve
$LN1@Reserve:
  00046	5e		 pop	 esi

; 1298 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Reserve
_TEXT	ENDS
PUBLIC	?push_back@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXABQAVioUIRenderImage@@@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::push_back
; Function compile flags: /Ogsp
;	COMDAT ?push_back@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXABQAVioUIRenderImage@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXABQAVioUIRenderImage@@@Z PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 27		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 21		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 980  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXI@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0002a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002d	85 c0		 test	 eax, eax
  0002f	74 20		 je	 SHORT $LN39@push_back
  00031	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00033	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00036	eb 17		 jmp	 SHORT $LN46@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00038	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0003b	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0003d	6a 01		 push	 1
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXI@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00046	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00049	85 c0		 test	 eax, eax
  0004b	74 04		 je	 SHORT $LN39@push_back
  0004d	8b 0f		 mov	 ecx, DWORD PTR [edi]
$LN46@push_back:
  0004f	89 08		 mov	 DWORD PTR [eax], ecx
$LN39@push_back:

; 996  : 			++this->_Mylast;

  00051	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?push_back@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXABQAVioUIRenderImage@@@Z ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::push_back
_TEXT	ENDS
PUBLIC	?clear@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXXZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T506951 = -4						; size = 4
?clear@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXXZ PROC ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T506951[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@0@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXXZ ENDP ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::clear
_TEXT	ENDS
PUBLIC	??0ioSprite@@QAE@XZ				; ioSprite::ioSprite
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iosprite.cpp
;	COMDAT ??0ioSprite@@QAE@XZ
_TEXT	SEGMENT
tv298 = -4						; size = 4
tv294 = -4						; size = 4
$T507094 = -4						; size = 4
??0ioSprite@@QAE@XZ PROC				; ioSprite::ioSprite, COMDAT
; _this$ = ecx

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi
  00008	33 ff		 xor	 edi, edi
  0000a	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0000d	89 39		 mov	 DWORD PTR [ecx], edi
  0000f	89 79 04	 mov	 DWORD PTR [ecx+4], edi
  00012	89 79 08	 mov	 DWORD PTR [ecx+8], edi

; 8    : 	Init();

  00015	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00018	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  0001b	89 7e 2c	 mov	 DWORD PTR [esi+44], edi
  0001e	89 7e 30	 mov	 DWORD PTR [esi+48], edi

; 9    : 	m_vSpriteList.clear();

  00021	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00024	8b 11		 mov	 edx, DWORD PTR [ecx]
  00026	50		 push	 eax
  00027	52		 push	 edx
  00028	8d 45 fc	 lea	 eax, DWORD PTR $T507094[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?erase@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@0@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::erase

; 10   : 
; 11   : 	m_dwCheckTime = 0;
; 12   : 	m_dwAniGapTime = 0;
; 13   : 	m_dwDuration = 0;
; 14   : 
; 15   : 	m_iStartAlpha = MAX_ALPHA_RATE;

  00031	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00036	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00039	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  0003c	89 7e 34	 mov	 DWORD PTR [esi+52], edi
  0003f	89 46 3c	 mov	 DWORD PTR [esi+60], eax

; 16   : 	m_iEndAlpha = MAX_ALPHA_RATE;

  00042	89 46 40	 mov	 DWORD PTR [esi+64], eax

; 17   : 
; 18   : 	m_fStartScale = FLOAT1;

  00045	b8 01 00 00 00	 mov	 eax, 1
  0004a	89 45 fc	 mov	 DWORD PTR tv298[ebp], eax
  0004d	db 45 fc	 fild	 DWORD PTR tv298[ebp]
  00050	85 c0		 test	 eax, eax
  00052	79 06		 jns	 SHORT $LN36@ioSprite
  00054	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN36@ioSprite:
  0005a	d9 5e 48	 fstp	 DWORD PTR [esi+72]

; 19   : 	m_fEndScale = FLOAT1;

  0005d	b8 01 00 00 00	 mov	 eax, 1
  00062	89 45 fc	 mov	 DWORD PTR tv294[ebp], eax
  00065	db 45 fc	 fild	 DWORD PTR tv294[ebp]
  00068	85 c0		 test	 eax, eax
  0006a	79 06		 jns	 SHORT $LN37@ioSprite
  0006c	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN37@ioSprite:
  00072	5f		 pop	 edi
  00073	d9 5e 4c	 fstp	 DWORD PTR [esi+76]

; 20   : }

  00076	8b c6		 mov	 eax, esi
  00078	5e		 pop	 esi
  00079	c9		 leave
  0007a	c3		 ret	 0
??0ioSprite@@QAE@XZ ENDP				; ioSprite::ioSprite
_TEXT	ENDS
PUBLIC	??1ioSprite@@QAE@XZ				; ioSprite::~ioSprite
; Function compile flags: /Ogsp
;	COMDAT ??1ioSprite@@QAE@XZ
_TEXT	SEGMENT
$T507190 = -4						; size = 4
??1ioSprite@@QAE@XZ PROC				; ioSprite::~ioSprite, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 24   : 	Init();

  00007	33 c0		 xor	 eax, eax
  00009	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000c	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0000f	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  00012	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 25   : 	m_vSpriteList.clear();

  00015	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00018	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0001b	57		 push	 edi
  0001c	50		 push	 eax
  0001d	51		 push	 ecx
  0001e	8d 45 fc	 lea	 eax, DWORD PTR $T507190[ebp]
  00021	50		 push	 eax
  00022	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00025	e8 00 00 00 00	 call	 ?erase@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@0@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::erase

; 26   : 
; 27   : 	m_iCurAlpha = m_iStartAlpha;
; 28   : 	m_fCurScale = m_fStartScale;

  0002a	d9 46 48	 fld	 DWORD PTR [esi+72]
  0002d	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00030	d9 5e 44	 fstp	 DWORD PTR [esi+68]

; 29   : }

  00033	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00036	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00039	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXXZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Tidy
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	c9		 leave
  00041	c3		 ret	 0
??1ioSprite@@QAE@XZ ENDP				; ioSprite::~ioSprite
_TEXT	ENDS
PUBLIC	?AddSpriteList@ioSprite@@QAEXV?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@Z ; ioSprite::AddSpriteList
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$?AddSpriteList@ioSprite@@QAEXV?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddSpriteList@ioSprite@@QAEXV?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@Z$0
__ehfuncinfo$?AddSpriteList@ioSprite@@QAEXV?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddSpriteList@ioSprite@@QAEXV?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iosprite.cpp
xdata$x	ENDS
;	COMDAT ?AddSpriteList@ioSprite@@QAEXV?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@Z
_TEXT	SEGMENT
_pImage$505165 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_vList$ = 8						; size = 16
?AddSpriteList@ioSprite@@QAEXV?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@Z PROC ; ioSprite::AddSpriteList, COMDAT
; _this$ = ecx

; 41   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?AddSpriteList@ioSprite@@QAEXV?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b d9		 mov	 ebx, ecx

; 42   : 	int iSize = vList.size();

  0000e	8b 75 0c	 mov	 esi, DWORD PTR _vList$[ebp+4]
  00011	2b 75 08	 sub	 esi, DWORD PTR _vList$[ebp]
  00014	33 ff		 xor	 edi, edi
  00016	c1 fe 02	 sar	 esi, 2
  00019	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi

; 43   : 	for( int i=0; i<iSize; ++i )

  0001c	3b f7		 cmp	 esi, edi
  0001e	7e 1e		 jle	 SHORT $LN2@AddSpriteL
$LN4@AddSpriteL:

; 44   : 	{
; 45   : 		ioUIRenderImage *pImage = vList[i];

  00020	8b 45 08	 mov	 eax, DWORD PTR _vList$[ebp]
  00023	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00026	89 45 f0	 mov	 DWORD PTR _pImage$505165[ebp], eax

; 46   : 		if( pImage )

  00029	85 c0		 test	 eax, eax
  0002b	74 0c		 je	 SHORT $LN3@AddSpriteL

; 47   : 		{
; 48   : 			m_vSpriteList.push_back( pImage );

  0002d	8d 45 f0	 lea	 eax, DWORD PTR _pImage$505165[ebp]
  00030	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAEXABQAVioUIRenderImage@@@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::push_back
$LN3@AddSpriteL:

; 43   : 	for( int i=0; i<iSize; ++i )

  00039	47		 inc	 edi
  0003a	3b fe		 cmp	 edi, esi
  0003c	7c e2		 jl	 SHORT $LN4@AddSpriteL
$LN2@AddSpriteL:

; 49   : 		}
; 50   : 	}
; 51   : 	m_iMaxSpriteCnt = m_vSpriteList.size();

  0003e	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00041	2b 43 18	 sub	 eax, DWORD PTR [ebx+24]

; 52   : }

  00044	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00048	c1 f8 02	 sar	 eax, 2
  0004b	8d 4d 08	 lea	 ecx, DWORD PTR _vList$[ebp]
  0004e	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  00051	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@IAEXXZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::_Tidy
  00056	e8 00 00 00 00	 call	 __EH_epilog3
  0005b	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddSpriteList@ioSprite@@QAEXV?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _vList$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE@XZ ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::~vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >
__ehhandler$?AddSpriteList@ioSprite@@QAEXV?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddSpriteList@ioSprite@@QAEXV?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddSpriteList@ioSprite@@QAEXV?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@Z ENDP ; ioSprite::AddSpriteList
PUBLIC	?DestroySpriteList@ioSprite@@QAEXXZ		; ioSprite::DestroySpriteList
; Function compile flags: /Ogsp
;	COMDAT ?DestroySpriteList@ioSprite@@QAEXXZ
_TEXT	SEGMENT
$T507314 = -4						; size = 4
?DestroySpriteList@ioSprite@@QAEXXZ PROC		; ioSprite::DestroySpriteList, COMDAT
; _this$ = ecx

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 56   : 	m_vSpriteList.clear();

  00007	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0000a	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	50		 push	 eax
  00010	52		 push	 edx
  00011	8d 45 fc	 lea	 eax, DWORD PTR $T507314[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?erase@?$vector@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioUIRenderImage@@V?$allocator@PAVioUIRenderImage@@@std@@@std@@@2@0@Z ; std::vector<ioUIRenderImage *,std::allocator<ioUIRenderImage *> >::erase

; 57   : 	m_iMaxSpriteCnt = 0;

  0001a	83 66 14 00	 and	 DWORD PTR [esi+20], 0
  0001e	5e		 pop	 esi

; 58   : }

  0001f	c9		 leave
  00020	c3		 ret	 0
?DestroySpriteList@ioSprite@@QAEXXZ ENDP		; ioSprite::DestroySpriteList
_TEXT	ENDS
END
