; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\GUI\AniTextWnd.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_7AniTextWnd@@6B@				; AniTextWnd::`vftable'
PUBLIC	??0AniTextWnd@@QAE@XZ				; AniTextWnd::AniTextWnd
PUBLIC	??_R4AniTextWnd@@6B@				; AniTextWnd::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVAniTextWnd@@@8				; AniTextWnd `RTTI Type Descriptor'
PUBLIC	??_R3AniTextWnd@@8				; AniTextWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AniTextWnd@@8				; AniTextWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AniTextWnd@@8			; AniTextWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioMovingWnd@@8			; ioMovingWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioMovingWnd@@@8				; ioMovingWnd `RTTI Type Descriptor'
PUBLIC	??_R3ioMovingWnd@@8				; ioMovingWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioMovingWnd@@8				; ioMovingWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioWnd@@8				; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioWnd@@@8				; ioWnd `RTTI Type Descriptor'
PUBLIC	??_R3ioWnd@@8					; ioWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWnd@@8					; ioWnd::`RTTI Base Class Array'
EXTRN	__imp_??0ioMovingWnd@@QAE@XZ:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z:PROC ; ioWnd::AddRenderFrame
EXTRN	?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC ; ioWnd::AddRenderImage
EXTRN	?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z:PROC ; ioWnd::AddTooltipHelp
EXTRN	?ParseExtraInfo@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::ParseExtraInfo
EXTRN	?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC ; ioWnd::AddNamedRenderImage
EXTRN	?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z:PROC ; ioWnd::RemoveNamedRenderImage
EXTRN	?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z:PROC ; ioWnd::GetNamedRenderImage
EXTRN	?SetWindowAlpha@ioWnd@@UAEXH@Z:PROC		; ioWnd::SetWindowAlpha
EXTRN	?SetActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetActive
EXTRN	?SetInActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetInActive
EXTRN	?ClearElementImageList@ioWnd@@UAEXXZ:PROC	; ioWnd::ClearElementImageList
EXTRN	?SetSize@ioWnd@@UAEXHH@Z:PROC			; ioWnd::SetSize
EXTRN	?SetPositionToDefault@ioMovingWnd@@UAEXHH_N0@Z:PROC ; ioMovingWnd::SetPositionToDefault
EXTRN	?IsNeedProcess@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsNeedProcess
EXTRN	?IsCanMouseReaction@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsCanMouseReaction
EXTRN	?AddChild@ioWnd@@UAEXPAV1@@Z:PROC		; ioWnd::AddChild
EXTRN	?DeleteChild@ioWnd@@UAEXK@Z:PROC		; ioWnd::DeleteChild
EXTRN	?DeleteAllChild@ioWnd@@UAEXXZ:PROC		; ioWnd::DeleteAllChild
EXTRN	?OnRenderShowAndHide@ioWnd@@MAE_NXZ:PROC	; ioWnd::OnRenderShowAndHide
EXTRN	?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z:PROC ; ioWnd::OnRenderShowAndHideByDefault
EXTRN	?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByTop
EXTRN	?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByDown
EXTRN	?OnRender@ioWnd@@MAEXXZ:PROC			; ioWnd::OnRender
EXTRN	?OnRenderAfterChild@ioWnd@@MAEXXZ:PROC		; ioWnd::OnRenderAfterChild
EXTRN	?OnProcess@ioWnd@@MAEXM@Z:PROC			; ioWnd::OnProcess
EXTRN	?OnMouseProcess@ioMovingWnd@@MAEXABVioMouse@@@Z:PROC ; ioMovingWnd::OnMouseProcess
EXTRN	?CheckFrameReSize@ioWnd@@MAEXHHHH@Z:PROC	; ioWnd::CheckFrameReSize
EXTRN	?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z:PROC ; ioWnd::RenderImageList
EXTRN	?iwm_create@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_create
EXTRN	?iwm_destroy@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_destroy
EXTRN	?iwm_lbuttondown@ioMovingWnd@@UAEXABVioMouse@@@Z:PROC ; ioMovingWnd::iwm_lbuttondown
EXTRN	?iwm_lbuttonup@ioMovingWnd@@UAEXABVioMouse@@@Z:PROC ; ioMovingWnd::iwm_lbuttonup
EXTRN	?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z:PROC ; ioWnd::iwm_lbuttonDBLCLK
EXTRN	?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttondown
EXTRN	?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttonup
EXTRN	?iwm_command@ioWnd@@UAEXPAV1@HK@Z:PROC		; ioWnd::iwm_command
EXTRN	?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseover
EXTRN	?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mousemove
EXTRN	?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseleave
EXTRN	?iwm_vscroll@ioWnd@@UAEXKH@Z:PROC		; ioWnd::iwm_vscroll
EXTRN	?iwm_wheel@ioWnd@@UAEXH@Z:PROC			; ioWnd::iwm_wheel
EXTRN	?iwm_show@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_show
EXTRN	?iwm_hide@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_hide
EXTRN	?iwm_esc@ioWnd@@UAE_NXZ:PROC			; ioWnd::iwm_esc
EXTRN	?iwm_spacebar@ioWnd@@UAE_NXZ:PROC		; ioWnd::iwm_spacebar
EXTRN	?iwm_gototop@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_gototop
EXTRN	?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragenter
EXTRN	?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragover
EXTRN	?iwm_dragleave@ioWnd@@UAEXXZ:PROC		; ioWnd::iwm_dragleave
EXTRN	?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z:PROC ; ioWnd::iwm_dropitem
EXTRN	?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z:PROC ; ioWnd::iwm_dropdone
EXTRN	?IsEXType@ioWnd@@UBE_NXZ:PROC			; ioWnd::IsEXType
EXTRN	?GetWndType@ioWnd@@UBEKXZ:PROC			; ioWnd::GetWndType
EXTRN	?RenderWnd@ioWnd@@UAEXXZ:PROC			; ioWnd::RenderWnd
EXTRN	?SetIDEX@ioWnd@@UAEXAAK_N@Z:PROC		; ioWnd::SetIDEX
EXTRN	?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC	; ioWnd::ParseXML
EXTRN	?GetHeaderFileName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetHeaderFileName
EXTRN	?GetTemplateName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetTemplateName
EXTRN	?GetDefClassName@ioWnd@@UBEPBDXZ:PROC		; ioWnd::GetDefClassName
EXTRN	?_Clone@ioWnd@@UAEPAV1@XZ:PROC			; ioWnd::_Clone
EXTRN	?Copy@ioWnd@@UAEXPAV1@@Z:PROC			; ioWnd::Copy
EXTRN	?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z:PROC	; ioWnd::Save
EXTRN	?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::SetSaveData
EXTRN	?SetPosX@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosX
EXTRN	?SetPosY@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosY
EXTRN	?SetWidth@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetWidth
EXTRN	?SetHeight@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetHeight
EXTRN	?GetNumFixedRenderFrame@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderFrame
EXTRN	?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderFrameType
EXTRN	?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderFrame
EXTRN	?GetNumFixedRenderImage@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderImage
EXTRN	?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderImageType
EXTRN	?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderImage
EXTRN	?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z:PROC ; ioWnd::AddEffect
EXTRN	?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z:PROC ; ioWnd::GetEffect
EXTRN	??_EAniTextWnd@@UAEPAXI@Z:PROC			; AniTextWnd::`vector deleting destructor'
;	COMDAT ??_R2ioWnd@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\anitextwnd.cpp
rdata$r	SEGMENT
??_R2ioWnd@@8 DD FLAT:??_R1A@?0A@EA@ioWnd@@8		; ioWnd::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWnd@@8
rdata$r	SEGMENT
??_R3ioWnd@@8 DD 00H					; ioWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWnd@@@8
_DATA	SEGMENT
??_R0?AVioWnd@@@8 DD FLAT:??_7type_info@@6B@		; ioWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWnd@@8 DD FLAT:??_R0?AVioWnd@@@8	; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2ioMovingWnd@@8
rdata$r	SEGMENT
??_R2ioMovingWnd@@8 DD FLAT:??_R1A@?0A@EA@ioMovingWnd@@8 ; ioMovingWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3ioMovingWnd@@8
rdata$r	SEGMENT
??_R3ioMovingWnd@@8 DD 00H				; ioMovingWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioMovingWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioMovingWnd@@@8
_DATA	SEGMENT
??_R0?AVioMovingWnd@@@8 DD FLAT:??_7type_info@@6B@	; ioMovingWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioMovingWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioMovingWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioMovingWnd@@8 DD FLAT:??_R0?AVioMovingWnd@@@8 ; ioMovingWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioMovingWnd@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AniTextWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AniTextWnd@@8 DD FLAT:??_R0?AVAniTextWnd@@@8 ; AniTextWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AniTextWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2AniTextWnd@@8
rdata$r	SEGMENT
??_R2AniTextWnd@@8 DD FLAT:??_R1A@?0A@EA@AniTextWnd@@8	; AniTextWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioMovingWnd@@8
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3AniTextWnd@@8
rdata$r	SEGMENT
??_R3AniTextWnd@@8 DD 00H				; AniTextWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2AniTextWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAniTextWnd@@@8
_DATA	SEGMENT
??_R0?AVAniTextWnd@@@8 DD FLAT:??_7type_info@@6B@	; AniTextWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAniTextWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R4AniTextWnd@@6B@
rdata$r	SEGMENT
??_R4AniTextWnd@@6B@ DD 00H				; AniTextWnd::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVAniTextWnd@@@8
	DD	FLAT:??_R3AniTextWnd@@8
rdata$r	ENDS
;	COMDAT ??_7AniTextWnd@@6B@
CONST	SEGMENT
??_7AniTextWnd@@6B@ DD FLAT:??_R4AniTextWnd@@6B@	; AniTextWnd::`vftable'
	DD	FLAT:?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
	DD	FLAT:?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z
	DD	FLAT:?ParseExtraInfo@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z
	DD	FLAT:?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z
	DD	FLAT:?SetWindowAlpha@ioWnd@@UAEXH@Z
	DD	FLAT:?SetActive@ioWnd@@UAEXXZ
	DD	FLAT:?SetInActive@ioWnd@@UAEXXZ
	DD	FLAT:?ClearElementImageList@ioWnd@@UAEXXZ
	DD	FLAT:?SetSize@ioWnd@@UAEXHH@Z
	DD	FLAT:?SetPositionToDefault@ioMovingWnd@@UAEXHH_N0@Z
	DD	FLAT:?IsNeedProcess@ioWnd@@UBE_NXZ
	DD	FLAT:?IsCanMouseReaction@ioWnd@@UBE_NXZ
	DD	FLAT:?AddChild@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?DeleteChild@ioWnd@@UAEXK@Z
	DD	FLAT:?DeleteAllChild@ioWnd@@UAEXXZ
	DD	FLAT:?OnRenderShowAndHide@ioWnd@@MAE_NXZ
	DD	FLAT:?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRender@ioWnd@@MAEXXZ
	DD	FLAT:?OnRenderAfterChild@ioWnd@@MAEXXZ
	DD	FLAT:?OnProcess@ioWnd@@MAEXM@Z
	DD	FLAT:?OnMouseProcess@ioMovingWnd@@MAEXABVioMouse@@@Z
	DD	FLAT:?CheckFrameReSize@ioWnd@@MAEXHHHH@Z
	DD	FLAT:?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z
	DD	FLAT:?iwm_create@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_destroy@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_lbuttondown@ioMovingWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonup@ioMovingWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_command@ioWnd@@UAEXPAV1@HK@Z
	DD	FLAT:?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_vscroll@ioWnd@@UAEXKH@Z
	DD	FLAT:?iwm_wheel@ioWnd@@UAEXH@Z
	DD	FLAT:?iwm_show@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_hide@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_esc@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_spacebar@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_gototop@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragleave@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z
	DD	FLAT:?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z
	DD	FLAT:?IsEXType@ioWnd@@UBE_NXZ
	DD	FLAT:?GetWndType@ioWnd@@UBEKXZ
	DD	FLAT:?RenderWnd@ioWnd@@UAEXXZ
	DD	FLAT:?SetIDEX@ioWnd@@UAEXAAK_N@Z
	DD	FLAT:?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?GetHeaderFileName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetTemplateName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetDefClassName@ioWnd@@UBEPBDXZ
	DD	FLAT:?_Clone@ioWnd@@UAEPAV1@XZ
	DD	FLAT:?Copy@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z
	DD	FLAT:?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?SetPosX@ioWnd@@UAEXH@Z
	DD	FLAT:?SetPosY@ioWnd@@UAEXH@Z
	DD	FLAT:?SetWidth@ioWnd@@UAEXH@Z
	DD	FLAT:?SetHeight@ioWnd@@UAEXH@Z
	DD	FLAT:?GetNumFixedRenderFrame@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?GetNumFixedRenderImage@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z
	DD	FLAT:?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z
	DD	FLAT:??_EAniTextWnd@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0AniTextWnd@@QAE@XZ
_TEXT	SEGMENT
??0AniTextWnd@@QAE@XZ PROC				; AniTextWnd::AniTextWnd, COMDAT
; _this$ = ecx

; 14   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioMovingWnd@@QAE@XZ

; 15   : 	m_eState = SAT_NONE;

  00009	83 a6 90 01 00
	00 00		 and	 DWORD PTR [esi+400], 0
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7AniTextWnd@@6B@

; 16   : }

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
??0AniTextWnd@@QAE@XZ ENDP				; AniTextWnd::AniTextWnd
_TEXT	ENDS
PUBLIC	??1AniTextWnd@@UAE@XZ				; AniTextWnd::~AniTextWnd
EXTRN	__imp_??1ioMovingWnd@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1AniTextWnd@@UAE@XZ
_TEXT	SEGMENT
??1AniTextWnd@@UAE@XZ PROC				; AniTextWnd::~AniTextWnd, COMDAT
; _this$ = ecx

; 20   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7AniTextWnd@@6B@

; 21   : }

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioMovingWnd@@UAE@XZ
??1AniTextWnd@@UAE@XZ ENDP				; AniTextWnd::~AniTextWnd
_TEXT	ENDS
PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?return5@@YAIXZ					; return5
; Function compile flags: /Ogsp
;	COMDAT ?return5@@YAIXZ
_TEXT	SEGMENT
?return5@@YAIXZ PROC					; return5, COMDAT

; 18   : 	__forceinline unsigned int return5() { __asm mov eax, 5 };

  00000	b8 05 00 00 00	 mov	 eax, 5
  00005	c3		 ret	 0
?return5@@YAIXZ ENDP					; return5
_TEXT	ENDS
PUBLIC	??_R0?AVPlazaNPCGaugeWnd@@@8			; PlazaNPCGaugeWnd `RTTI Type Descriptor'
PUBLIC	?SetState@AniTextWnd@@QAEXW4ShowAniType@1@@Z	; AniTextWnd::SetState
EXTRN	__imp_?ShowWnd@ioWnd@@QAEXXZ:PROC
EXTRN	?ChangeShowAniState@PlazaNPCGaugeWnd@@QAEXW4ShowAniType@ioAnimationState@@@Z:PROC ; PlazaNPCGaugeWnd::ChangeShowAniState
EXTRN	__imp_?FindWnd@ioGUIManager@@QAEPAVioWnd@@K@Z:PROC
EXTRN	?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ:PROC	; ioSP2GUIManager::GetSingleton
EXTRN	___RTDynamicCast:PROC
;	COMDAT ??_R0?AVPlazaNPCGaugeWnd@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\anitextwnd.cpp
_DATA	SEGMENT
??_R0?AVPlazaNPCGaugeWnd@@@8 DD FLAT:??_7type_info@@6B@	; PlazaNPCGaugeWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPlazaNPCGaugeWnd@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?SetState@AniTextWnd@@QAEXW4ShowAniType@1@@Z
_TEXT	SEGMENT
_eState$ = 8						; size = 4
?SetState@AniTextWnd@@QAEXW4ShowAniType@1@@Z PROC	; AniTextWnd::SetState, COMDAT
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _eState$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
$LL14@SetState:

; 47   : 	m_eState = eState;

  0000a	89 87 90 01 00
	00		 mov	 DWORD PTR [edi+400], eax

; 48   : 
; 49   : 	switch(m_eState)

  00010	48		 dec	 eax
  00011	48		 dec	 eax
  00012	75 54		 jne	 SHORT $LN17@SetState

; 50   : 	{
; 51   : 	case SAT_NONE:
; 52   : 		break;
; 53   : 	case SAT_START_ANI:
; 54   : 		break;
; 55   : 	case SAT_END:
; 56   : 		if( m_eType == ARRIVAL_SUBWND || m_eType == AWAKENING_SUBWND )

  00014	8b 87 94 01 00
	00		 mov	 eax, DWORD PTR [edi+404]
  0001a	83 f8 01	 cmp	 eax, 1
  0001d	74 05		 je	 SHORT $LN5@SetState
  0001f	83 f8 04	 cmp	 eax, 4

; 63   : 			}
; 64   : 		}
; 65   : 		else if( m_eType == DESTROY_SUBWND || m_eType == RUNAWAY_SUBWND )

  00022	75 40		 jne	 SHORT $LN4@SetState
$LN5@SetState:

; 57   : 		{
; 58   : 			PlazaNPCGaugeWnd *pPlazaNPCGaugeWnd = dynamic_cast<PlazaNPCGaugeWnd *>( g_GUIMgr.FindWnd( PLAZA_NPC_GAUGE_WND ) );

  00024	6a 00		 push	 0
  00026	68 00 00 00 00	 push	 OFFSET ??_R0?AVPlazaNPCGaugeWnd@@@8
  0002b	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  00030	6a 00		 push	 0
  00032	68 d7 13 00 00	 push	 5079			; 000013d7H
  00037	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  0003c	8b c8		 mov	 ecx, eax
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindWnd@ioGUIManager@@QAEPAVioWnd@@K@Z
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ___RTDynamicCast
  0004a	8b f0		 mov	 esi, eax
  0004c	83 c4 14	 add	 esp, 20			; 00000014H

; 59   : 			if( pPlazaNPCGaugeWnd )

  0004f	85 f6		 test	 esi, esi
  00051	74 11		 je	 SHORT $LN4@SetState

; 60   : 			{
; 61   : 				pPlazaNPCGaugeWnd->ChangeShowAniState( ioAnimationState::SAT_START_ROUND );

  00053	6a 01		 push	 1
  00055	8b ce		 mov	 ecx, esi
  00057	e8 00 00 00 00	 call	 ?ChangeShowAniState@PlazaNPCGaugeWnd@@QAEXW4ShowAniType@ioAnimationState@@@Z ; PlazaNPCGaugeWnd::ChangeShowAniState

; 62   : 				pPlazaNPCGaugeWnd->ShowWnd();

  0005c	8b ce		 mov	 ecx, esi
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowWnd@ioWnd@@QAEXXZ
$LN4@SetState:

; 66   : 		{
; 67   : 			
; 68   : 		}
; 69   : 		SetState(SAT_NONE);

  00064	33 c0		 xor	 eax, eax
  00066	eb a2		 jmp	 SHORT $LL14@SetState
$LN17@SetState:
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi

; 70   : 		break;
; 71   : 	}
; 72   : }

  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
?SetState@AniTextWnd@@QAEXW4ShowAniType@1@@Z ENDP	; AniTextWnd::SetState
_TEXT	ENDS
PUBLIC	?return10@@YAIXZ				; return10
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return10@@YAIXZ
_TEXT	SEGMENT
?return10@@YAIXZ PROC					; return10, COMDAT

; 21   : 	__forceinline unsigned int return10() { __asm mov eax, 10 };

  00000	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00005	c3		 ret	 0
?return10@@YAIXZ ENDP					; return10
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7AniLetterSubWnd@@6B@			; AniLetterSubWnd::`vftable'
PUBLIC	??0AniLetterSubWnd@@QAE@XZ			; AniLetterSubWnd::AniLetterSubWnd
PUBLIC	??_R4AniLetterSubWnd@@6B@			; AniLetterSubWnd::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVAniLetterSubWnd@@@8			; AniLetterSubWnd `RTTI Type Descriptor'
PUBLIC	??_R3AniLetterSubWnd@@8				; AniLetterSubWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AniLetterSubWnd@@8				; AniLetterSubWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AniLetterSubWnd@@8		; AniLetterSubWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?AddRenderImage@AniLetterSubWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z ; AniLetterSubWnd::AddRenderImage
PUBLIC	?ParseExtraInfo@AniLetterSubWnd@@UAEXAAVioXMLElement@@@Z ; AniLetterSubWnd::ParseExtraInfo
PUBLIC	?OnRender@AniLetterSubWnd@@MAEXXZ		; AniLetterSubWnd::OnRender
PUBLIC	?OnProcess@AniLetterSubWnd@@MAEXM@Z		; AniLetterSubWnd::OnProcess
PUBLIC	?iwm_create@AniLetterSubWnd@@MAEXXZ		; AniLetterSubWnd::iwm_create
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__fltused:DWORD
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_EAniLetterSubWnd@@UAEPAXI@Z:PROC		; AniLetterSubWnd::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@AniLetterSubWnd@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\anitextwnd.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@AniLetterSubWnd@@8 DD FLAT:??_R0?AVAniLetterSubWnd@@@8 ; AniLetterSubWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AniLetterSubWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2AniLetterSubWnd@@8
rdata$r	SEGMENT
??_R2AniLetterSubWnd@@8 DD FLAT:??_R1A@?0A@EA@AniLetterSubWnd@@8 ; AniLetterSubWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioMovingWnd@@8
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3AniLetterSubWnd@@8
rdata$r	SEGMENT
??_R3AniLetterSubWnd@@8 DD 00H				; AniLetterSubWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2AniLetterSubWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAniLetterSubWnd@@@8
_DATA	SEGMENT
??_R0?AVAniLetterSubWnd@@@8 DD FLAT:??_7type_info@@6B@	; AniLetterSubWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAniLetterSubWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R4AniLetterSubWnd@@6B@
rdata$r	SEGMENT
??_R4AniLetterSubWnd@@6B@ DD 00H			; AniLetterSubWnd::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVAniLetterSubWnd@@@8
	DD	FLAT:??_R3AniLetterSubWnd@@8
rdata$r	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7AniLetterSubWnd@@6B@
CONST	SEGMENT
??_7AniLetterSubWnd@@6B@ DD FLAT:??_R4AniLetterSubWnd@@6B@ ; AniLetterSubWnd::`vftable'
	DD	FLAT:?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
	DD	FLAT:?AddRenderImage@AniLetterSubWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z
	DD	FLAT:?ParseExtraInfo@AniLetterSubWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z
	DD	FLAT:?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z
	DD	FLAT:?SetWindowAlpha@ioWnd@@UAEXH@Z
	DD	FLAT:?SetActive@ioWnd@@UAEXXZ
	DD	FLAT:?SetInActive@ioWnd@@UAEXXZ
	DD	FLAT:?ClearElementImageList@ioWnd@@UAEXXZ
	DD	FLAT:?SetSize@ioWnd@@UAEXHH@Z
	DD	FLAT:?SetPositionToDefault@ioMovingWnd@@UAEXHH_N0@Z
	DD	FLAT:?IsNeedProcess@ioWnd@@UBE_NXZ
	DD	FLAT:?IsCanMouseReaction@ioWnd@@UBE_NXZ
	DD	FLAT:?AddChild@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?DeleteChild@ioWnd@@UAEXK@Z
	DD	FLAT:?DeleteAllChild@ioWnd@@UAEXXZ
	DD	FLAT:?OnRenderShowAndHide@ioWnd@@MAE_NXZ
	DD	FLAT:?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRender@AniLetterSubWnd@@MAEXXZ
	DD	FLAT:?OnRenderAfterChild@ioWnd@@MAEXXZ
	DD	FLAT:?OnProcess@AniLetterSubWnd@@MAEXM@Z
	DD	FLAT:?OnMouseProcess@ioMovingWnd@@MAEXABVioMouse@@@Z
	DD	FLAT:?CheckFrameReSize@ioWnd@@MAEXHHHH@Z
	DD	FLAT:?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z
	DD	FLAT:?iwm_create@AniLetterSubWnd@@MAEXXZ
	DD	FLAT:?iwm_destroy@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_lbuttondown@ioMovingWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonup@ioMovingWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_command@ioWnd@@UAEXPAV1@HK@Z
	DD	FLAT:?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_vscroll@ioWnd@@UAEXKH@Z
	DD	FLAT:?iwm_wheel@ioWnd@@UAEXH@Z
	DD	FLAT:?iwm_show@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_hide@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_esc@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_spacebar@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_gototop@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragleave@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z
	DD	FLAT:?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z
	DD	FLAT:?IsEXType@ioWnd@@UBE_NXZ
	DD	FLAT:?GetWndType@ioWnd@@UBEKXZ
	DD	FLAT:?RenderWnd@ioWnd@@UAEXXZ
	DD	FLAT:?SetIDEX@ioWnd@@UAEXAAK_N@Z
	DD	FLAT:?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?GetHeaderFileName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetTemplateName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetDefClassName@ioWnd@@UBEPBDXZ
	DD	FLAT:?_Clone@ioWnd@@UAEPAV1@XZ
	DD	FLAT:?Copy@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z
	DD	FLAT:?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?SetPosX@ioWnd@@UAEXH@Z
	DD	FLAT:?SetPosY@ioWnd@@UAEXH@Z
	DD	FLAT:?SetWidth@ioWnd@@UAEXH@Z
	DD	FLAT:?SetHeight@ioWnd@@UAEXH@Z
	DD	FLAT:?GetNumFixedRenderFrame@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?GetNumFixedRenderImage@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z
	DD	FLAT:?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z
	DD	FLAT:??_EAniLetterSubWnd@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0AniLetterSubWnd@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AniLetterSubWnd@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0AniLetterSubWnd@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0AniLetterSubWnd@@QAE@XZ$2
__ehfuncinfo$??0AniLetterSubWnd@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0AniLetterSubWnd@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0AniLetterSubWnd@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0AniLetterSubWnd@@QAE@XZ PROC				; AniLetterSubWnd::AniLetterSubWnd, COMDAT
; _this$ = ecx

; 76   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0AniLetterSubWnd@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioMovingWnd@@QAE@XZ
  00017	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  0001d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00021	8d 8e 00 02 00
	00		 lea	 ecx, DWORD PTR [esi+512]
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7AniLetterSubWnd@@6B@
  0002d	ff d7		 call	 edi
  0002f	8d 8e 10 02 00
	00		 lea	 ecx, DWORD PTR [esi+528]
  00035	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00039	ff d7		 call	 edi

; 77   : 	m_pLetter = NULL;

  0003b	83 a6 90 01 00
	00 00		 and	 DWORD PTR [esi+400], 0

; 78   : 	ZeroMemory( &m_stStart, sizeof(stAniText));

  00042	33 c0		 xor	 eax, eax
  00044	8d be b4 01 00
	00		 lea	 edi, DWORD PTR [esi+436]
  0004a	ab		 stosd
  0004b	ab		 stosd
  0004c	ab		 stosd

; 79   : 	ZeroMemory( &m_stDest, sizeof(stAniText));

  0004d	33 c0		 xor	 eax, eax
  0004f	8d be c0 01 00
	00		 lea	 edi, DWORD PTR [esi+448]
  00055	ab		 stosd
  00056	ab		 stosd
  00057	ab		 stosd

; 80   : 	ZeroMemory( &m_stCurrPos, sizeof(stAniText));

  00058	33 c0		 xor	 eax, eax
  0005a	8d be cc 01 00
	00		 lea	 edi, DWORD PTR [esi+460]
  00060	ab		 stosd
  00061	ab		 stosd
  00062	ab		 stosd

; 81   : 	ZeroMemory( &m_stExFactor, sizeof(stExtraFactor));

  00063	6a 0a		 push	 10			; 0000000aH
  00065	59		 pop	 ecx
  00066	33 c0		 xor	 eax, eax
  00068	8d be d8 01 00
	00		 lea	 edi, DWORD PTR [esi+472]
  0006e	f3 ab		 rep stosd

; 82   : 	m_szBGM = "";

  00070	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  00076	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0007b	53		 push	 ebx
  0007c	8d 8e 00 02 00
	00		 lea	 ecx, DWORD PTR [esi+512]
  00082	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00086	ff d7		 call	 edi

; 83   : 	m_szEffect = "";

  00088	53		 push	 ebx
  00089	8d 8e 10 02 00
	00		 lea	 ecx, DWORD PTR [esi+528]
  0008f	ff d7		 call	 edi

; 84   : 	m_bLeftToRight = false;
; 85   : 	m_fSpeed = 0.f;

  00091	0f 57 c0	 xorps	 xmm0, xmm0

; 86   : 	m_fScaleSpeed = 0.f;
; 87   : 	m_dwAniTime = 0.f;

  00094	33 c0		 xor	 eax, eax
  00096	89 86 9c 01 00
	00		 mov	 DWORD PTR [esi+412], eax

; 88   : 	m_dwZoomTime = 0.f;

  0009c	89 86 a0 01 00
	00		 mov	 DWORD PTR [esi+416], eax

; 89   : 	m_eState = SAT_NONE;

  000a2	89 86 94 01 00
	00		 mov	 DWORD PTR [esi+404], eax
  000a8	c6 86 b0 01 00
	00 00		 mov	 BYTE PTR [esi+432], 0
  000af	f3 0f 11 86 a4
	01 00 00	 movss	 DWORD PTR [esi+420], xmm0
  000b7	f3 0f 11 86 a8
	01 00 00	 movss	 DWORD PTR [esi+424], xmm0

; 90   : }

  000bf	8b c6		 mov	 eax, esi
  000c1	e8 00 00 00 00	 call	 __EH_epilog3
  000c6	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AniLetterSubWnd@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioMovingWnd@@UAE@XZ
__unwindfunclet$??0AniLetterSubWnd@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	81 c1 00 02 00
	00		 add	 ecx, 512		; 00000200H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AniLetterSubWnd@@QAE@XZ$2:
  00018	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	81 c1 10 02 00
	00		 add	 ecx, 528		; 00000210H
  00021	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0AniLetterSubWnd@@QAE@XZ:
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0AniLetterSubWnd@@QAE@XZ
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0AniLetterSubWnd@@QAE@XZ ENDP				; AniLetterSubWnd::AniLetterSubWnd
PUBLIC	??1AniLetterSubWnd@@UAE@XZ			; AniLetterSubWnd::~AniLetterSubWnd
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1AniLetterSubWnd@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1AniLetterSubWnd@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1AniLetterSubWnd@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1AniLetterSubWnd@@UAE@XZ$2
__ehfuncinfo$??1AniLetterSubWnd@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1AniLetterSubWnd@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1AniLetterSubWnd@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1AniLetterSubWnd@@UAE@XZ PROC				; AniLetterSubWnd::~AniLetterSubWnd, COMDAT
; _this$ = ecx

; 94   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1AniLetterSubWnd@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7AniLetterSubWnd@@6B@

; 95   : 	SAFEDELETE(m_pLetter);

  00017	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  0001d	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00024	85 c9		 test	 ecx, ecx
  00026	74 0e		 je	 SHORT $LN1@AniLetterS
  00028	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002a	6a 01		 push	 1
  0002c	ff 50 40	 call	 DWORD PTR [eax+64]
  0002f	83 a6 90 01 00
	00 00		 and	 DWORD PTR [esi+400], 0
$LN1@AniLetterS:

; 96   : }

  00036	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0003c	8d 8e 10 02 00
	00		 lea	 ecx, DWORD PTR [esi+528]
  00042	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00046	ff d7		 call	 edi
  00048	8d 8e 00 02 00
	00		 lea	 ecx, DWORD PTR [esi+512]
  0004e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00052	ff d7		 call	 edi
  00054	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00058	8b ce		 mov	 ecx, esi
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioMovingWnd@@UAE@XZ
  00060	e8 00 00 00 00	 call	 __EH_epilog3
  00065	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1AniLetterSubWnd@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioMovingWnd@@UAE@XZ
__unwindfunclet$??1AniLetterSubWnd@@UAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	81 c1 00 02 00
	00		 add	 ecx, 512		; 00000200H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1AniLetterSubWnd@@UAE@XZ$2:
  00018	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	81 c1 10 02 00
	00		 add	 ecx, 528		; 00000210H
  00021	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1AniLetterSubWnd@@UAE@XZ:
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1AniLetterSubWnd@@UAE@XZ
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1AniLetterSubWnd@@UAE@XZ ENDP				; AniLetterSubWnd::~AniLetterSubWnd
PUBLIC	__real@4000000000000000
PUBLIC	__real@4f800000
PUBLIC	?SetState@AniLetterSubWnd@@QAEXW4ShowAniType@1@@Z ; AniLetterSubWnd::SetState
EXTRN	?Height@Setting@@SAHXZ:PROC			; Setting::Height
EXTRN	?Width@Setting@@SAHXZ:PROC			; Setting::Width
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	__imp_?PlayStream@ioSoundManager@@QAEX_N@Z:PROC
EXTRN	__imp_?OpenOggStream@ioSoundManager@@QAEXPBD@Z:PROC
EXTRN	__imp_?c_str@ioHashString@@QBEPBDXZ:PROC
EXTRN	__imp_?StopStream@ioSoundManager@@QAEXXZ:PROC
EXTRN	__imp_?PlaySoundA@ioSoundManager@@QAEKABVioHashString@@HK@Z:PROC
EXTRN	__imp_?GetSingleton@ioSoundManager@@SAAAV1@XZ:PROC
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	__imp_?GetParent@ioWnd@@QAEPAV1@XZ:PROC
EXTRN	__imp_?HideWnd@ioWnd@@QAEXXZ:PROC
;	COMDAT __real@4000000000000000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\anitextwnd.cpp
CONST	ENDS
;	COMDAT ?SetState@AniLetterSubWnd@@QAEXW4ShowAniType@1@@Z
_TEXT	SEGMENT
tv621 = -4						; size = 4
tv591 = -4						; size = 4
tv626 = 8						; size = 4
tv608 = 8						; size = 4
tv596 = 8						; size = 4
tv574 = 8						; size = 4
tv544 = 8						; size = 4
tv510 = 8						; size = 4
_eState$ = 8						; size = 4
?SetState@AniLetterSubWnd@@QAEXW4ShowAniType@1@@Z PROC	; AniLetterSubWnd::SetState, COMDAT
; _this$ = ecx

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 132  : 	m_eState = eState;

  00004	8b 45 08	 mov	 eax, DWORD PTR _eState$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	89 86 94 01 00
	00		 mov	 DWORD PTR [esi+404], eax

; 133  : 
; 134  : 	switch(m_eState)

  00010	48		 dec	 eax
  00011	57		 push	 edi
  00012	0f 84 b8 02 00
	00		 je	 $LN17@SetState@2
  00018	48		 dec	 eax
  00019	0f 84 5d 02 00
	00		 je	 $LN11@SetState@2
  0001f	48		 dec	 eax
  00020	0f 84 9c 01 00
	00		 je	 $LN14@SetState@2
  00026	48		 dec	 eax
  00027	0f 84 48 01 00
	00		 je	 $LN9@SetState@2
  0002d	48		 dec	 eax
  0002e	0f 84 27 01 00
	00		 je	 $LN8@SetState@2
  00034	48		 dec	 eax
  00035	74 5a		 je	 SHORT $LN7@SetState@2
  00037	48		 dec	 eax
  00038	0f 85 ed 03 00
	00		 jne	 $LN19@SetState@2

; 234  : 
; 235  : 	case SAT_END:
; 236  : 		{
; 237  : 			HideWnd();

  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideWnd@ioWnd@@QAEXXZ

; 238  : 			SetState( SAT_NONE );

  00044	33 ff		 xor	 edi, edi
  00046	57		 push	 edi
  00047	8b ce		 mov	 ecx, esi
  00049	e8 00 00 00 00	 call	 ?SetState@AniLetterSubWnd@@QAEXW4ShowAniType@1@@Z ; AniLetterSubWnd::SetState

; 239  : 
; 240  : 			ioWnd* pWnd = GetParent();

  0004e	8b ce		 mov	 ecx, esi
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetParent@ioWnd@@QAEPAV1@XZ

; 241  : 			if( pWnd )

  00056	3b c7		 cmp	 eax, edi
  00058	0f 84 cd 03 00
	00		 je	 $LN19@SetState@2

; 242  : 			{
; 243  : 				AniTextWnd* pAniWnd = dynamic_cast<AniTextWnd*>( pWnd->GetParent() );

  0005e	57		 push	 edi
  0005f	68 00 00 00 00	 push	 OFFSET ??_R0?AVAniTextWnd@@@8
  00064	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  00069	57		 push	 edi
  0006a	8b c8		 mov	 ecx, eax
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetParent@ioWnd@@QAEPAV1@XZ
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ___RTDynamicCast
  00078	83 c4 14	 add	 esp, 20			; 00000014H

; 244  : 				if( pAniWnd )

  0007b	3b c7		 cmp	 eax, edi
  0007d	0f 84 a8 03 00
	00		 je	 $LN19@SetState@2

; 245  : 					pAniWnd->SetState(AniTextWnd::SAT_END);

  00083	6a 02		 push	 2
  00085	8b c8		 mov	 ecx, eax
  00087	e8 00 00 00 00	 call	 ?SetState@AniTextWnd@@QAEXW4ShowAniType@1@@Z ; AniTextWnd::SetState

; 246  : 			}
; 247  : 		}
; 248  : 		break;

  0008c	e9 9a 03 00 00	 jmp	 $LN19@SetState@2
$LN7@SetState@2:

; 213  : 
; 214  : 	case SAT_ZOOM_IN:
; 215  : 		{
; 216  : 			m_dwZoomTime = m_dwAniTime;

  00091	8b 8e 9c 01 00
	00		 mov	 ecx, DWORD PTR [esi+412]

; 217  : 			m_dwAniTime += m_stExFactor.dwZoomInDuration;

  00097	8b 96 ec 01 00
	00		 mov	 edx, DWORD PTR [esi+492]
  0009d	89 8e a0 01 00
	00		 mov	 DWORD PTR [esi+416], ecx
  000a3	03 ca		 add	 ecx, edx

; 218  : 
; 219  : 			float fDest = (float) ((m_stStart.fScale - m_stDest.fScale) * 2);
; 220  : 			float fTime = (float) (m_stExFactor.dwZoomInDuration * m_stExFactor.dwZoomInDuration);

  000a5	0f af d2	 imul	 edx, edx
  000a8	89 55 08	 mov	 DWORD PTR tv626[ebp], edx
  000ab	89 8e 9c 01 00
	00		 mov	 DWORD PTR [esi+412], ecx
  000b1	db 45 08	 fild	 DWORD PTR tv626[ebp]
  000b4	85 d2		 test	 edx, edx
  000b6	79 06		 jns	 SHORT $LN27@SetState@2
  000b8	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN27@SetState@2:

; 221  : 			m_fScaleSpeed = fDest / fTime; 
; 222  : 
; 223  : 			if( m_bLeftToRight)

  000be	80 be b0 01 00
	00 00		 cmp	 BYTE PTR [esi+432], 0
  000c5	d9 5d 08	 fstp	 DWORD PTR tv510[ebp]
  000c8	d9 86 bc 01 00
	00		 fld	 DWORD PTR [esi+444]
  000ce	d8 a6 c8 01 00
	00		 fsub	 DWORD PTR [esi+456]
  000d4	dc c0		 fadd	 ST(0), ST(0)
  000d6	d9 5d fc	 fstp	 DWORD PTR tv621[ebp]
  000d9	d9 45 fc	 fld	 DWORD PTR tv621[ebp]
  000dc	d8 75 08	 fdiv	 DWORD PTR tv510[ebp]
  000df	d9 9e a8 01 00
	00		 fstp	 DWORD PTR [esi+424]
  000e5	74 12		 je	 SHORT $LN6@SetState@2

; 224  : 				fDest = (float) ( (m_stDest.fX - m_stStart.fX) * 2);

  000e7	f3 0f 10 86 c0
	01 00 00	 movss	 xmm0, DWORD PTR [esi+448]
  000ef	f3 0f 10 8e b4
	01 00 00	 movss	 xmm1, DWORD PTR [esi+436]

; 225  : 			else

  000f7	eb 10		 jmp	 SHORT $LN31@SetState@2
$LN6@SetState@2:

; 226  : 				fDest = (float) ( (m_stStart.fX - m_stDest.fX) * 2);

  000f9	f3 0f 10 86 b4
	01 00 00	 movss	 xmm0, DWORD PTR [esi+436]
  00101	f3 0f 10 8e c0
	01 00 00	 movss	 xmm1, DWORD PTR [esi+448]
$LN31@SetState@2:
  00109	0f 5a c0	 cvtps2pd xmm0, xmm0
  0010c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0010f	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00113	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000

; 227  : 
; 228  : 			fTime = (float) (m_stExFactor.dwZoomInDuration * m_stExFactor.dwZoomInDuration);
; 229  : 			m_fSpeed = fDest / fTime;

  0011b	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR tv510[ebp]
  00120	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00124	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00128	0f 5a c9	 cvtps2pd xmm1, xmm1
  0012b	f2 0f 5e c1	 divsd	 xmm0, xmm1
  0012f	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00133	f3 0f 11 86 a4
	01 00 00	 movss	 DWORD PTR [esi+420], xmm0

; 230  : 
; 231  : 			m_fAlphaRate = FLOAT1;

  0013b	b8 01 00 00 00	 mov	 eax, 1
  00140	89 45 08	 mov	 DWORD PTR tv608[ebp], eax
  00143	db 45 08	 fild	 DWORD PTR tv608[ebp]
  00146	85 c0		 test	 eax, eax
  00148	79 06		 jns	 SHORT $LN28@SetState@2
  0014a	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN28@SetState@2:
  00150	d9 9e ac 01 00
	00		 fstp	 DWORD PTR [esi+428]

; 232  : 		}
; 233  : 		break;

  00156	e9 d0 02 00 00	 jmp	 $LN19@SetState@2
$LN8@SetState@2:

; 204  : 
; 205  : 	case SAT_ANI_COLOR:
; 206  : 		m_dwZoomTime = m_dwAniTime + COLORING_DURATION;

  0015b	8b 8e 9c 01 00
	00		 mov	 ecx, DWORD PTR [esi+412]
  00161	8d 91 e8 03 00
	00		 lea	 edx, DWORD PTR [ecx+1000]
  00167	89 96 a0 01 00
	00		 mov	 DWORD PTR [esi+416], edx

; 207  : 		m_dwAniTime += m_stExFactor.dwTextClrDuration;

  0016d	8b 96 e8 01 00
	00		 mov	 edx, DWORD PTR [esi+488]

; 208  : 		m_stCurrPos.fX = m_stDest.fX;
; 209  : 		m_stCurrPos.fY = m_stDest.fY;
; 210  : 		m_stCurrPos.fScale = m_stDest.fScale;
; 211  : 		m_nOffSet = 0;
; 212  : 		break;

  00173	eb 15		 jmp	 SHORT $LN34@SetState@2
$LN9@SetState@2:

; 195  : 
; 196  : 	case SAT_VIB:
; 197  : 		m_dwZoomTime = m_dwAniTime + VIB_DURATION;

  00175	8b 8e 9c 01 00
	00		 mov	 ecx, DWORD PTR [esi+412]
  0017b	8d 51 21	 lea	 edx, DWORD PTR [ecx+33]
  0017e	89 96 a0 01 00
	00		 mov	 DWORD PTR [esi+416], edx

; 198  : 		m_dwAniTime += m_stExFactor.dwVibDuration;

  00184	8b 96 e4 01 00
	00		 mov	 edx, DWORD PTR [esi+484]
$LN34@SetState@2:

; 199  : 		m_stCurrPos.fX = m_stDest.fX;

  0018a	d9 86 c0 01 00
	00		 fld	 DWORD PTR [esi+448]
  00190	03 d1		 add	 edx, ecx

; 200  : 		m_stCurrPos.fY = m_stDest.fY;
; 201  : 		m_stCurrPos.fScale = m_stDest.fScale;
; 202  : 		m_nOffSet = 0;

  00192	83 a6 98 01 00
	00 00		 and	 DWORD PTR [esi+408], 0
  00199	d9 9e cc 01 00
	00		 fstp	 DWORD PTR [esi+460]
  0019f	d9 86 c4 01 00
	00		 fld	 DWORD PTR [esi+452]
  001a5	89 96 9c 01 00
	00		 mov	 DWORD PTR [esi+412], edx
  001ab	d9 9e d0 01 00
	00		 fstp	 DWORD PTR [esi+464]
  001b1	d9 86 c8 01 00
	00		 fld	 DWORD PTR [esi+456]
  001b7	d9 9e d4 01 00
	00		 fstp	 DWORD PTR [esi+468]

; 203  : 		break;

  001bd	e9 69 02 00 00	 jmp	 $LN19@SetState@2
$LN14@SetState@2:

; 163  : 		break;
; 164  : 
; 165  : 	case SAT_ZOOM_OUT:
; 166  : 		{
; 167  : 			m_dwZoomTime = m_dwAniTime;

  001c2	8b 8e 9c 01 00
	00		 mov	 ecx, DWORD PTR [esi+412]

; 168  : 			m_dwAniTime += m_stExFactor.dwStartDuration;

  001c8	8b 96 dc 01 00
	00		 mov	 edx, DWORD PTR [esi+476]
  001ce	89 8e a0 01 00
	00		 mov	 DWORD PTR [esi+416], ecx
  001d4	03 ca		 add	 ecx, edx

; 169  : 
; 170  : 			float fDest = (float) ((m_stStart.fScale - m_stDest.fScale) * 2);
; 171  : 			float fTime = (float) (m_stExFactor.dwStartDuration * m_stExFactor.dwStartDuration);

  001d6	0f af d2	 imul	 edx, edx
  001d9	89 55 08	 mov	 DWORD PTR tv596[ebp], edx
  001dc	89 8e 9c 01 00
	00		 mov	 DWORD PTR [esi+412], ecx
  001e2	db 45 08	 fild	 DWORD PTR tv596[ebp]
  001e5	85 d2		 test	 edx, edx
  001e7	79 06		 jns	 SHORT $LN29@SetState@2
  001e9	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN29@SetState@2:

; 172  : 			m_fScaleSpeed = fDest / fTime; 
; 173  : 
; 174  : 			if( m_bLeftToRight)

  001ef	80 be b0 01 00
	00 00		 cmp	 BYTE PTR [esi+432], 0
  001f6	d9 5d 08	 fstp	 DWORD PTR tv574[ebp]
  001f9	d9 86 bc 01 00
	00		 fld	 DWORD PTR [esi+444]
  001ff	d8 a6 c8 01 00
	00		 fsub	 DWORD PTR [esi+456]
  00205	dc c0		 fadd	 ST(0), ST(0)
  00207	d9 5d fc	 fstp	 DWORD PTR tv591[ebp]
  0020a	d9 45 fc	 fld	 DWORD PTR tv591[ebp]
  0020d	d8 75 08	 fdiv	 DWORD PTR tv574[ebp]
  00210	d9 9e a8 01 00
	00		 fstp	 DWORD PTR [esi+424]
  00216	74 12		 je	 SHORT $LN13@SetState@2

; 175  : 				fDest = (float) ( (m_stDest.fX - m_stStart.fX) * 2);

  00218	f3 0f 10 86 c0
	01 00 00	 movss	 xmm0, DWORD PTR [esi+448]
  00220	f3 0f 10 8e b4
	01 00 00	 movss	 xmm1, DWORD PTR [esi+436]

; 176  : 			else

  00228	eb 10		 jmp	 SHORT $LN32@SetState@2
$LN13@SetState@2:

; 177  : 				fDest = (float) ( (m_stStart.fX - m_stDest.fX) * 2);

  0022a	f3 0f 10 86 b4
	01 00 00	 movss	 xmm0, DWORD PTR [esi+436]
  00232	f3 0f 10 8e c0
	01 00 00	 movss	 xmm1, DWORD PTR [esi+448]
$LN32@SetState@2:
  0023a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0023d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00240	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00244	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000

; 178  : 
; 179  : 			fTime = (float) (m_stExFactor.dwStartDuration * m_stExFactor.dwStartDuration);
; 180  : 			m_fSpeed = fDest / fTime;

  0024c	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR tv574[ebp]
  00251	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00255	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00259	0f 5a c9	 cvtps2pd xmm1, xmm1
  0025c	f2 0f 5e c1	 divsd	 xmm0, xmm1
  00260	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00264	f3 0f 11 86 a4
	01 00 00	 movss	 DWORD PTR [esi+420], xmm0

; 181  : 
; 182  : 			m_fAlphaRate = 0.f;

  0026c	0f 57 c0	 xorps	 xmm0, xmm0
  0026f	f3 0f 11 86 ac
	01 00 00	 movss	 DWORD PTR [esi+428], xmm0

; 183  : 		}
; 184  : 		break;

  00277	e9 af 01 00 00	 jmp	 $LN19@SetState@2
$LN11@SetState@2:

; 185  : 
; 186  : 	case SAT_DELAY:
; 187  : 		if( !m_szEffect.IsEmpty() )

  0027c	8d be 10 02 00
	00		 lea	 edi, DWORD PTR [esi+528]
  00282	8b cf		 mov	 ecx, edi
  00284	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0028a	84 c0		 test	 al, al
  0028c	75 13		 jne	 SHORT $LN10@SetState@2

; 188  : 			g_SoundMgr.PlaySound(m_szEffect);

  0028e	6a 04		 push	 4
  00290	6a 00		 push	 0
  00292	57		 push	 edi
  00293	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioSoundManager@@SAAAV1@XZ
  00299	8b c8		 mov	 ecx, eax
  0029b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PlaySoundA@ioSoundManager@@QAEKABVioHashString@@HK@Z
$LN10@SetState@2:

; 189  : 
; 190  : 		m_dwAniTime += m_stExFactor.dwDelayDuration;
; 191  : 		m_stCurrPos.fScale = m_stDest.fScale;

  002a1	d9 86 c8 01 00
	00		 fld	 DWORD PTR [esi+456]
  002a7	8b 86 e0 01 00
	00		 mov	 eax, DWORD PTR [esi+480]
  002ad	01 86 9c 01 00
	00		 add	 DWORD PTR [esi+412], eax
  002b3	d9 9e d4 01 00
	00		 fstp	 DWORD PTR [esi+468]

; 192  : 		m_stCurrPos.fX = m_stDest.fX;

  002b9	d9 86 c0 01 00
	00		 fld	 DWORD PTR [esi+448]
  002bf	d9 9e cc 01 00
	00		 fstp	 DWORD PTR [esi+460]

; 193  : 		m_stCurrPos.fY = m_stDest.fY;

  002c5	d9 86 c4 01 00
	00		 fld	 DWORD PTR [esi+452]

; 194  : 		break;

  002cb	e9 55 01 00 00	 jmp	 $LN33@SetState@2
$LN17@SetState@2:
  002d0	53		 push	 ebx

; 135  : 	{
; 136  : 	case SAT_NONE:
; 137  : 		break;
; 138  : 
; 139  : 	case SAT_START_ANI:
; 140  : 		if( !m_szBGM.IsEmpty() )

  002d1	8d 8e 00 02 00
	00		 lea	 ecx, DWORD PTR [esi+512]
  002d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  002dd	84 c0		 test	 al, al
  002df	75 33		 jne	 SHORT $LN16@SetState@2

; 141  : 		{
; 142  : 			g_SoundMgr.StopStream();

  002e1	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetSingleton@ioSoundManager@@SAAAV1@XZ
  002e7	ff d7		 call	 edi
  002e9	8b c8		 mov	 ecx, eax
  002eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?StopStream@ioSoundManager@@QAEXXZ

; 143  : 
; 144  : 			g_SoundMgr.OpenOggStream( m_szBGM.c_str() );

  002f1	8d 8e 00 02 00
	00		 lea	 ecx, DWORD PTR [esi+512]
  002f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  002fd	50		 push	 eax
  002fe	ff d7		 call	 edi
  00300	8b c8		 mov	 ecx, eax
  00302	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OpenOggStream@ioSoundManager@@QAEXPBD@Z

; 145  : 			g_SoundMgr.PlayStream( true );

  00308	6a 01		 push	 1
  0030a	ff d7		 call	 edi
  0030c	8b c8		 mov	 ecx, eax
  0030e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PlayStream@ioSoundManager@@QAEX_N@Z
$LN16@SetState@2:

; 146  : 		}
; 147  : 
; 148  : 		m_dwAniTime = FRAMEGETTIME() + m_stExFactor.dwStartTime;

  00314	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0031a	8b c8		 mov	 ecx, eax
  0031c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00322	03 86 d8 01 00
	00		 add	 eax, DWORD PTR [esi+472]
  00328	89 86 9c 01 00
	00		 mov	 DWORD PTR [esi+412], eax

; 149  : 		m_stStart.fX = (Setting::Width() / 2) + m_stExFactor.nStartXPos;

  0032e	e8 00 00 00 00	 call	 ?Width@Setting@@SAHXZ	; Setting::Width
  00333	99		 cdq
  00334	2b c2		 sub	 eax, edx
  00336	d1 f8		 sar	 eax, 1
  00338	03 86 f0 01 00
	00		 add	 eax, DWORD PTR [esi+496]
  0033e	0f 57 c0	 xorps	 xmm0, xmm0
  00341	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00345	f3 0f 11 86 b4
	01 00 00	 movss	 DWORD PTR [esi+436], xmm0

; 150  : 		m_stStart.fY = (Setting::Height() * m_stExFactor.fStartYPosRatio);

  0034d	e8 00 00 00 00	 call	 ?Height@Setting@@SAHXZ	; Setting::Height

; 151  : 		m_stStart.fScale = m_stExFactor.fStartScale;

  00352	d9 86 f8 01 00
	00		 fld	 DWORD PTR [esi+504]
  00358	f3 0f 10 8e fc
	01 00 00	 movss	 xmm1, DWORD PTR [esi+508]
  00360	d9 9e bc 01 00
	00		 fstp	 DWORD PTR [esi+444]
  00366	0f 57 c0	 xorps	 xmm0, xmm0
  00369	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0036d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00370	0f 5a c9	 cvtps2pd xmm1, xmm1
  00373	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00377	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0037b	f3 0f 11 86 b8
	01 00 00	 movss	 DWORD PTR [esi+440], xmm0

; 152  : 
; 153  : 		m_stDest.fX = (Setting::Width() / 2) + m_stExFactor.nZoomOutXPos;

  00383	e8 00 00 00 00	 call	 ?Width@Setting@@SAHXZ	; Setting::Width
  00388	99		 cdq
  00389	2b c2		 sub	 eax, edx
  0038b	d1 f8		 sar	 eax, 1
  0038d	03 86 f4 01 00
	00		 add	 eax, DWORD PTR [esi+500]
  00393	0f 57 c0	 xorps	 xmm0, xmm0
  00396	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0039a	f3 0f 11 86 c0
	01 00 00	 movss	 DWORD PTR [esi+448], xmm0

; 154  : 		m_stDest.fY = (Setting::Height() * m_stExFactor.fStartYPosRatio);

  003a2	e8 00 00 00 00	 call	 ?Height@Setting@@SAHXZ	; Setting::Height
  003a7	f3 0f 10 8e fc
	01 00 00	 movss	 xmm1, DWORD PTR [esi+508]
  003af	0f 57 c0	 xorps	 xmm0, xmm0
  003b2	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  003b6	0f 5a c0	 cvtps2pd xmm0, xmm0
  003b9	0f 5a c9	 cvtps2pd xmm1, xmm1
  003bc	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  003c0	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  003c4	f3 0f 11 86 c4
	01 00 00	 movss	 DWORD PTR [esi+452], xmm0

; 155  : 		m_stDest.fScale = FLOAT1;

  003cc	b8 01 00 00 00	 mov	 eax, 1
  003d1	89 45 08	 mov	 DWORD PTR tv544[ebp], eax
  003d4	db 45 08	 fild	 DWORD PTR tv544[ebp]
  003d7	85 c0		 test	 eax, eax
  003d9	79 06		 jns	 SHORT $LN30@SetState@2
  003db	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN30@SetState@2:

; 156  : 
; 157  : 		if( m_stDest.fX >= m_stStart.fX)

  003e1	f3 0f 10 86 b4
	01 00 00	 movss	 xmm0, DWORD PTR [esi+436]
  003e9	d9 9e c8 01 00
	00		 fstp	 DWORD PTR [esi+456]
  003ef	f3 0f 10 8e c0
	01 00 00	 movss	 xmm1, DWORD PTR [esi+448]
  003f7	0f 5a c9	 cvtps2pd xmm1, xmm1
  003fa	0f 5a d0	 cvtps2pd xmm2, xmm0
  003fd	66 0f 2f ca	 comisd	 xmm1, xmm2
  00401	5b		 pop	 ebx
  00402	72 07		 jb	 SHORT $LN15@SetState@2

; 158  : 			m_bLeftToRight = true;

  00404	c6 86 b0 01 00
	00 01		 mov	 BYTE PTR [esi+432], 1
$LN15@SetState@2:

; 159  : 
; 160  : 		m_stCurrPos.fScale = m_stStart.fScale;

  0040b	d9 86 bc 01 00
	00		 fld	 DWORD PTR [esi+444]

; 161  : 		m_stCurrPos.fX	= m_stStart.fX;

  00411	f3 0f 11 86 cc
	01 00 00	 movss	 DWORD PTR [esi+460], xmm0
  00419	d9 9e d4 01 00
	00		 fstp	 DWORD PTR [esi+468]

; 162  : 		m_stCurrPos.fY	= m_stStart.fY;

  0041f	d9 86 b8 01 00
	00		 fld	 DWORD PTR [esi+440]
$LN33@SetState@2:
  00425	d9 9e d0 01 00
	00		 fstp	 DWORD PTR [esi+464]
$LN19@SetState@2:
  0042b	5f		 pop	 edi
  0042c	5e		 pop	 esi

; 249  : 
; 250  : 	default:
; 251  : 		break;
; 252  : 	}
; 253  : }

  0042d	c9		 leave
  0042e	c2 04 00	 ret	 4
?SetState@AniLetterSubWnd@@QAEXW4ShowAniType@1@@Z ENDP	; AniLetterSubWnd::SetState
_TEXT	ENDS
PUBLIC	__real@408f400000000000
;	COMDAT __real@408f400000000000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\anitextwnd.cpp
CONST	ENDS
;	COMDAT ?OnProcess@AniLetterSubWnd@@MAEXM@Z
_TEXT	SEGMENT
tv647 = -8						; size = 4
tv626 = -8						; size = 4
tv621 = -8						; size = 4
tv617 = -8						; size = 4
tv608 = -8						; size = 4
tv604 = -8						; size = 4
tv600 = -8						; size = 4
tv593 = -8						; size = 4
tv584 = -8						; size = 4
tv569 = -8						; size = 4
tv565 = -8						; size = 4
tv561 = -8						; size = 4
tv557 = -8						; size = 4
tv549 = -8						; size = 4
tv545 = -8						; size = 4
tv541 = -8						; size = 4
tv532 = -8						; size = 4
tv528 = -8						; size = 4
tv524 = -8						; size = 4
tv515 = -8						; size = 4
_fTime$505520 = -8					; size = 4
tv643 = -4						; size = 4
tv639 = -4						; size = 4
tv635 = -4						; size = 4
_fTime$505513 = -4					; size = 4
_fTime$505489 = -4					; size = 4
_fTimePerSec$ = 8					; size = 4
?OnProcess@AniLetterSubWnd@@MAEXM@Z PROC		; AniLetterSubWnd::OnProcess, COMDAT
; _this$ = ecx

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 257  : 	switch(m_eState)

  00009	8b 86 94 01 00
	00		 mov	 eax, DWORD PTR [esi+404]
  0000f	48		 dec	 eax
  00010	57		 push	 edi
  00011	0f 84 d2 03 00
	00		 je	 $LN25@OnProcess
  00017	48		 dec	 eax
  00018	0f 84 b1 03 00
	00		 je	 $LN18@OnProcess
  0001e	48		 dec	 eax
  0001f	0f 84 46 02 00
	00		 je	 $LN23@OnProcess
  00025	48		 dec	 eax
  00026	0f 84 de 01 00
	00		 je	 $LN16@OnProcess
  0002c	48		 dec	 eax
  0002d	0f 84 5c 01 00
	00		 je	 $LN11@OnProcess
  00033	48		 dec	 eax
  00034	0f 85 d6 03 00
	00		 jne	 $LN24@OnProcess

; 337  : 
; 338  : 	case SAT_ZOOM_IN:
; 339  : 		if( FRAMEGETTIME() > m_dwAniTime )

  0003a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00040	ff d7		 call	 edi
  00042	8b c8		 mov	 ecx, eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0004a	3b 86 9c 01 00
	00		 cmp	 eax, DWORD PTR [esi+412]
  00050	76 07		 jbe	 SHORT $LN6@OnProcess

; 340  : 		{
; 341  : 			SetState( SAT_END );

  00052	6a 07		 push	 7

; 342  : 		}
; 343  : 		else

  00054	e9 b0 03 00 00	 jmp	 $LN80@OnProcess
$LN6@OnProcess:

; 344  : 		{
; 345  : 			float fTime = (float)(FRAMEGETTIME() - m_dwZoomTime);

  00059	ff d7		 call	 edi
  0005b	8b c8		 mov	 ecx, eax
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00063	2b 86 a0 01 00
	00		 sub	 eax, DWORD PTR [esi+416]
  00069	89 45 f8	 mov	 DWORD PTR tv647[ebp], eax
  0006c	db 45 f8	 fild	 DWORD PTR tv647[ebp]
  0006f	79 06		 jns	 SHORT $LN63@OnProcess
  00071	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN63@OnProcess:
  00077	d9 5d f8	 fstp	 DWORD PTR _fTime$505520[ebp]

; 346  : 			m_stCurrPos.fScale = m_stDest.fScale + ( FLOAT05 * m_fScaleSpeed * fTime * fTime);

  0007a	b8 05 00 00 00	 mov	 eax, 5
  0007f	8b c8		 mov	 ecx, eax
  00081	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00086	89 4d fc	 mov	 DWORD PTR tv643[ebp], ecx
  00089	db 45 fc	 fild	 DWORD PTR tv643[ebp]
  0008c	85 c9		 test	 ecx, ecx
  0008e	79 06		 jns	 SHORT $LN64@OnProcess
  00090	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN64@OnProcess:
  00096	89 45 fc	 mov	 DWORD PTR tv639[ebp], eax
  00099	db 45 fc	 fild	 DWORD PTR tv639[ebp]
  0009c	85 c0		 test	 eax, eax
  0009e	79 06		 jns	 SHORT $LN65@OnProcess
  000a0	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN65@OnProcess:

; 347  : 
; 348  : 			if( m_bLeftToRight)

  000a6	80 be b0 01 00
	00 00		 cmp	 BYTE PTR [esi+432], 0
  000ad	de f9		 fdivp	 ST(1), ST(0)
  000af	d9 5d fc	 fstp	 DWORD PTR tv635[ebp]
  000b2	d9 45 fc	 fld	 DWORD PTR tv635[ebp]
  000b5	d8 8e a8 01 00
	00		 fmul	 DWORD PTR [esi+424]
  000bb	d9 45 f8	 fld	 DWORD PTR _fTime$505520[ebp]
  000be	d9 c0		 fld	 ST(0)
  000c0	de ca		 fmulp	 ST(2), ST(0)
  000c2	d9 c0		 fld	 ST(0)
  000c4	de ca		 fmulp	 ST(2), ST(0)
  000c6	d9 86 c8 01 00
	00		 fld	 DWORD PTR [esi+456]
  000cc	de c2		 faddp	 ST(2), ST(0)
  000ce	d9 c9		 fxch	 ST(1)
  000d0	d9 9e d4 01 00
	00		 fstp	 DWORD PTR [esi+468]
  000d6	74 4c		 je	 SHORT $LN4@OnProcess

; 349  : 			{
; 350  : 				m_stCurrPos.fX = m_stDest.fX - ( FLOAT05 * m_fSpeed * fTime * fTime);

  000d8	b8 05 00 00 00	 mov	 eax, 5
  000dd	8b c8		 mov	 ecx, eax
  000df	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  000e4	d9 86 c0 01 00
	00		 fld	 DWORD PTR [esi+448]
  000ea	89 4d f8	 mov	 DWORD PTR tv626[ebp], ecx
  000ed	db 45 f8	 fild	 DWORD PTR tv626[ebp]
  000f0	85 c9		 test	 ecx, ecx
  000f2	79 06		 jns	 SHORT $LN66@OnProcess
  000f4	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN66@OnProcess:
  000fa	89 45 f8	 mov	 DWORD PTR tv621[ebp], eax
  000fd	db 45 f8	 fild	 DWORD PTR tv621[ebp]
  00100	85 c0		 test	 eax, eax
  00102	79 06		 jns	 SHORT $LN67@OnProcess
  00104	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN67@OnProcess:
  0010a	de f9		 fdivp	 ST(1), ST(0)
  0010c	d9 5d f8	 fstp	 DWORD PTR tv617[ebp]
  0010f	d9 45 f8	 fld	 DWORD PTR tv617[ebp]
  00112	d8 8e a4 01 00
	00		 fmul	 DWORD PTR [esi+420]
  00118	d9 c2		 fld	 ST(2)
  0011a	de c9		 fmulp	 ST(1), ST(0)
  0011c	d9 c2		 fld	 ST(2)
  0011e	de c9		 fmulp	 ST(1), ST(0)
  00120	de e9		 fsubp	 ST(1), ST(0)

; 351  : 				m_stCurrPos.fY = m_stDest.fY;// - (FLOAT05 * m_fSpeed * fTime);
; 352  : 			}
; 353  : 			else

  00122	eb 48		 jmp	 SHORT $LN81@OnProcess
$LN4@OnProcess:

; 354  : 			{
; 355  : 				m_stCurrPos.fX = m_stDest.fX + ( FLOAT05 * m_fSpeed * fTime * fTime);

  00124	b8 05 00 00 00	 mov	 eax, 5
  00129	8b c8		 mov	 ecx, eax
  0012b	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00130	89 4d f8	 mov	 DWORD PTR tv608[ebp], ecx
  00133	db 45 f8	 fild	 DWORD PTR tv608[ebp]
  00136	85 c9		 test	 ecx, ecx
  00138	79 06		 jns	 SHORT $LN68@OnProcess
  0013a	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN68@OnProcess:
  00140	89 45 f8	 mov	 DWORD PTR tv604[ebp], eax
  00143	db 45 f8	 fild	 DWORD PTR tv604[ebp]
  00146	85 c0		 test	 eax, eax
  00148	79 06		 jns	 SHORT $LN69@OnProcess
  0014a	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN69@OnProcess:
  00150	de f9		 fdivp	 ST(1), ST(0)
  00152	d9 5d f8	 fstp	 DWORD PTR tv600[ebp]
  00155	d9 45 f8	 fld	 DWORD PTR tv600[ebp]
  00158	d8 8e a4 01 00
	00		 fmul	 DWORD PTR [esi+420]
  0015e	d9 c1		 fld	 ST(1)
  00160	de c9		 fmulp	 ST(1), ST(0)
  00162	d9 c1		 fld	 ST(1)
  00164	de c9		 fmulp	 ST(1), ST(0)
  00166	d8 86 c0 01 00
	00		 fadd	 DWORD PTR [esi+448]
$LN81@OnProcess:

; 356  : 				m_stCurrPos.fY = m_stDest.fY;// - (FLOAT05 * m_fSpeed * fTime);
; 357  : 			}
; 358  : 
; 359  : 			m_fAlphaRate = ( fTime / (float)m_stExFactor.dwZoomInDuration );

  0016c	8b 86 ec 01 00
	00		 mov	 eax, DWORD PTR [esi+492]
  00172	d9 9e cc 01 00
	00		 fstp	 DWORD PTR [esi+460]
  00178	d9 86 c4 01 00
	00		 fld	 DWORD PTR [esi+452]
  0017e	d9 9e d0 01 00
	00		 fstp	 DWORD PTR [esi+464]
  00184	db 86 ec 01 00
	00		 fild	 DWORD PTR [esi+492]

; 360  : 		}
; 361  : 		break;

  0018a	e9 2c 02 00 00	 jmp	 $LN83@OnProcess
$LN11@OnProcess:

; 318  : 
; 319  : 	case SAT_ANI_COLOR:
; 320  : 		if( FRAMEGETTIME() > m_dwAniTime )

  0018f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00195	ff d7		 call	 edi
  00197	8b c8		 mov	 ecx, eax
  00199	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0019f	3b 86 9c 01 00
	00		 cmp	 eax, DWORD PTR [esi+412]
  001a5	76 07		 jbe	 SHORT $LN10@OnProcess

; 321  : 		{
; 322  : 			SetState( SAT_ZOOM_IN );

  001a7	6a 06		 push	 6

; 323  : 		}
; 324  : 		else

  001a9	e9 5b 02 00 00	 jmp	 $LN80@OnProcess
$LN10@OnProcess:

; 325  : 		{
; 326  : 			float fTime = (float)( m_dwZoomTime - FRAMEGETTIME() );

  001ae	8b 9e a0 01 00
	00		 mov	 ebx, DWORD PTR [esi+416]
  001b4	ff d7		 call	 edi
  001b6	8b c8		 mov	 ecx, eax
  001b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  001be	8b cb		 mov	 ecx, ebx
  001c0	2b c8		 sub	 ecx, eax
  001c2	89 4d f8	 mov	 DWORD PTR tv584[ebp], ecx
  001c5	db 45 f8	 fild	 DWORD PTR tv584[ebp]
  001c8	79 06		 jns	 SHORT $LN71@OnProcess
  001ca	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN71@OnProcess:
  001d0	d9 5d fc	 fstp	 DWORD PTR _fTime$505513[ebp]

; 327  : 			m_fAlphaRate = ( fTime / (float)(COLORING_DURATION) );

  001d3	d9 45 fc	 fld	 DWORD PTR _fTime$505513[ebp]
  001d6	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@408f400000000000
  001dc	dc f9		 fdiv	 ST(1), ST(0)
  001de	d9 c9		 fxch	 ST(1)
  001e0	d9 9e ac 01 00
	00		 fstp	 DWORD PTR [esi+428]

; 328  : 
; 329  : 			if( fTime > COLORING_DURATION )

  001e6	d9 45 fc	 fld	 DWORD PTR _fTime$505513[ebp]
  001e9	df f1		 fcomip	 ST(1)
  001eb	dd d8		 fstp	 ST(0)
  001ed	0f 86 1d 02 00
	00		 jbe	 $LN24@OnProcess

; 330  : 			{
; 331  : 				m_dwZoomTime += COLORING_DURATION;

  001f3	81 c3 e8 03 00
	00		 add	 ebx, 1000		; 000003e8H

; 332  : 				m_nOffSet++;

  001f9	ff 86 98 01 00
	00		 inc	 DWORD PTR [esi+408]
  001ff	89 9e a0 01 00
	00		 mov	 DWORD PTR [esi+416], ebx

; 333  : //				m_fAlphaRate = 0.f;
; 334  : 			}
; 335  : 		}
; 336  : 		break;

  00205	e9 06 02 00 00	 jmp	 $LN24@OnProcess
$LN16@OnProcess:

; 301  : 
; 302  : 	case SAT_VIB:
; 303  : 		if( FRAMEGETTIME() > m_dwAniTime )

  0020a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00210	8b c8		 mov	 ecx, eax
  00212	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00218	3b 86 9c 01 00
	00		 cmp	 eax, DWORD PTR [esi+412]
  0021e	76 07		 jbe	 SHORT $LN15@OnProcess

; 304  : 		{
; 305  : 			SetState( SAT_ANI_COLOR );

  00220	6a 05		 push	 5

; 306  : 		}
; 307  : 		else

  00222	e9 e2 01 00 00	 jmp	 $LN80@OnProcess
$LN15@OnProcess:

; 308  : 		{
; 309  : 			if( FRAMEGETTIME() > m_dwZoomTime )

  00227	8b 9e a0 01 00
	00		 mov	 ebx, DWORD PTR [esi+416]
  0022d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00233	8b c8		 mov	 ecx, eax
  00235	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0023b	3b c3		 cmp	 eax, ebx
  0023d	0f 86 cd 01 00
	00		 jbe	 $LN24@OnProcess

; 310  : 			{
; 311  : 				m_dwZoomTime += VIB_DURATION;

  00243	83 c3 21	 add	 ebx, 33			; 00000021H

; 312  : 				m_nOffSet++;

  00246	ff 86 98 01 00
	00		 inc	 DWORD PTR [esi+408]

; 313  : 				if(m_nOffSet >= VIB_POS )

  0024c	83 be 98 01 00
	00 09		 cmp	 DWORD PTR [esi+408], 9
  00253	89 9e a0 01 00
	00		 mov	 DWORD PTR [esi+416], ebx
  00259	0f 8c b1 01 00
	00		 jl	 $LN24@OnProcess

; 314  : 					m_nOffSet = 0;

  0025f	83 a6 98 01 00
	00 00		 and	 DWORD PTR [esi+408], 0

; 315  : 			}
; 316  : 		}
; 317  : 		break;

  00266	e9 a5 01 00 00	 jmp	 $LN24@OnProcess
$LN23@OnProcess:

; 267  : 		}
; 268  : 		break;
; 269  : 
; 270  : 	case SAT_ZOOM_OUT:
; 271  : 		if( FRAMEGETTIME() > m_dwAniTime )

  0026b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00271	ff d7		 call	 edi
  00273	8b c8		 mov	 ecx, eax
  00275	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0027b	3b 86 9c 01 00
	00		 cmp	 eax, DWORD PTR [esi+412]
  00281	76 07		 jbe	 SHORT $LN22@OnProcess

; 272  : 		{
; 273  : 			SetState( SAT_DELAY );

  00283	6a 02		 push	 2

; 274  : 		}
; 275  : 		else

  00285	e9 7f 01 00 00	 jmp	 $LN80@OnProcess
$LN22@OnProcess:

; 276  : 		{
; 277  : 			float fTime = (float)(FRAMEGETTIME() - m_dwZoomTime);

  0028a	ff d7		 call	 edi
  0028c	8b c8		 mov	 ecx, eax
  0028e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00294	2b 86 a0 01 00
	00		 sub	 eax, DWORD PTR [esi+416]
  0029a	89 45 f8	 mov	 DWORD PTR tv569[ebp], eax
  0029d	db 45 f8	 fild	 DWORD PTR tv569[ebp]
  002a0	79 06		 jns	 SHORT $LN72@OnProcess
  002a2	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN72@OnProcess:
  002a8	d9 5d fc	 fstp	 DWORD PTR _fTime$505489[ebp]

; 278  : 			m_stCurrPos.fScale = m_stStart.fScale - ( FLOAT05 * m_fScaleSpeed * fTime * fTime);

  002ab	b8 05 00 00 00	 mov	 eax, 5
  002b0	8b c8		 mov	 ecx, eax
  002b2	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  002b7	d9 86 bc 01 00
	00		 fld	 DWORD PTR [esi+444]
  002bd	89 4d f8	 mov	 DWORD PTR tv565[ebp], ecx
  002c0	db 45 f8	 fild	 DWORD PTR tv565[ebp]
  002c3	85 c9		 test	 ecx, ecx
  002c5	79 06		 jns	 SHORT $LN73@OnProcess
  002c7	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN73@OnProcess:
  002cd	89 45 f8	 mov	 DWORD PTR tv561[ebp], eax
  002d0	db 45 f8	 fild	 DWORD PTR tv561[ebp]
  002d3	85 c0		 test	 eax, eax
  002d5	79 06		 jns	 SHORT $LN74@OnProcess
  002d7	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN74@OnProcess:

; 279  : 
; 280  : 			if( m_bLeftToRight)

  002dd	80 be b0 01 00
	00 00		 cmp	 BYTE PTR [esi+432], 0
  002e4	de f9		 fdivp	 ST(1), ST(0)
  002e6	d9 5d f8	 fstp	 DWORD PTR tv557[ebp]
  002e9	d9 45 f8	 fld	 DWORD PTR tv557[ebp]
  002ec	d8 8e a8 01 00
	00		 fmul	 DWORD PTR [esi+424]
  002f2	d9 45 fc	 fld	 DWORD PTR _fTime$505489[ebp]
  002f5	d9 c0		 fld	 ST(0)
  002f7	de ca		 fmulp	 ST(2), ST(0)
  002f9	d9 c0		 fld	 ST(0)
  002fb	de ca		 fmulp	 ST(2), ST(0)
  002fd	d9 ca		 fxch	 ST(2)
  002ff	de e1		 fsubrp	 ST(1), ST(0)
  00301	d9 9e d4 01 00
	00		 fstp	 DWORD PTR [esi+468]
  00307	74 4a		 je	 SHORT $LN20@OnProcess

; 281  : 			{
; 282  : 				m_stCurrPos.fX = m_stStart.fX + ( FLOAT05 * m_fSpeed * fTime * fTime);

  00309	b8 05 00 00 00	 mov	 eax, 5
  0030e	8b c8		 mov	 ecx, eax
  00310	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00315	89 4d f8	 mov	 DWORD PTR tv549[ebp], ecx
  00318	db 45 f8	 fild	 DWORD PTR tv549[ebp]
  0031b	85 c9		 test	 ecx, ecx
  0031d	79 06		 jns	 SHORT $LN75@OnProcess
  0031f	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN75@OnProcess:
  00325	89 45 f8	 mov	 DWORD PTR tv545[ebp], eax
  00328	db 45 f8	 fild	 DWORD PTR tv545[ebp]
  0032b	85 c0		 test	 eax, eax
  0032d	79 06		 jns	 SHORT $LN76@OnProcess
  0032f	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN76@OnProcess:
  00335	de f9		 fdivp	 ST(1), ST(0)
  00337	d9 5d f8	 fstp	 DWORD PTR tv541[ebp]
  0033a	d9 45 f8	 fld	 DWORD PTR tv541[ebp]
  0033d	d8 8e a4 01 00
	00		 fmul	 DWORD PTR [esi+420]
  00343	d9 c1		 fld	 ST(1)
  00345	de c9		 fmulp	 ST(1), ST(0)
  00347	d9 c1		 fld	 ST(1)
  00349	de c9		 fmulp	 ST(1), ST(0)
  0034b	d8 86 b4 01 00
	00		 fadd	 DWORD PTR [esi+436]

; 283  : 				m_stCurrPos.fY = m_stStart.fY;// - (FLOAT05 * m_fSpeed * fTime);
; 284  : 			}
; 285  : 			else

  00351	eb 4a		 jmp	 SHORT $LN82@OnProcess
$LN20@OnProcess:

; 286  : 			{
; 287  : 				m_stCurrPos.fX = m_stStart.fX - ( FLOAT05 * m_fSpeed * fTime * fTime);

  00353	b8 05 00 00 00	 mov	 eax, 5
  00358	8b c8		 mov	 ecx, eax
  0035a	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  0035f	d9 86 b4 01 00
	00		 fld	 DWORD PTR [esi+436]
  00365	89 4d f8	 mov	 DWORD PTR tv532[ebp], ecx
  00368	db 45 f8	 fild	 DWORD PTR tv532[ebp]
  0036b	85 c9		 test	 ecx, ecx
  0036d	79 06		 jns	 SHORT $LN77@OnProcess
  0036f	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN77@OnProcess:
  00375	89 45 f8	 mov	 DWORD PTR tv528[ebp], eax
  00378	db 45 f8	 fild	 DWORD PTR tv528[ebp]
  0037b	85 c0		 test	 eax, eax
  0037d	79 06		 jns	 SHORT $LN78@OnProcess
  0037f	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN78@OnProcess:
  00385	de f9		 fdivp	 ST(1), ST(0)
  00387	d9 5d f8	 fstp	 DWORD PTR tv524[ebp]
  0038a	d9 45 f8	 fld	 DWORD PTR tv524[ebp]
  0038d	d8 8e a4 01 00
	00		 fmul	 DWORD PTR [esi+420]
  00393	d9 c2		 fld	 ST(2)
  00395	de c9		 fmulp	 ST(1), ST(0)
  00397	d9 c2		 fld	 ST(2)
  00399	de c9		 fmulp	 ST(1), ST(0)
  0039b	de e9		 fsubp	 ST(1), ST(0)
$LN82@OnProcess:

; 288  : 				m_stCurrPos.fY = m_stStart.fY;// - (FLOAT05 * m_fSpeed * fTime);
; 289  : 			}
; 290  : 
; 291  : 			m_fAlphaRate = ( fTime / (float)m_stExFactor.dwStartDuration );

  0039d	8b 86 dc 01 00
	00		 mov	 eax, DWORD PTR [esi+476]
  003a3	d9 9e cc 01 00
	00		 fstp	 DWORD PTR [esi+460]
  003a9	d9 86 b8 01 00
	00		 fld	 DWORD PTR [esi+440]
  003af	d9 9e d0 01 00
	00		 fstp	 DWORD PTR [esi+464]
  003b5	db 86 dc 01 00
	00		 fild	 DWORD PTR [esi+476]
$LN83@OnProcess:
  003bb	85 c0		 test	 eax, eax
  003bd	79 06		 jns	 SHORT $LN79@OnProcess
  003bf	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN79@OnProcess:
  003c5	de f9		 fdivp	 ST(1), ST(0)
  003c7	d9 9e ac 01 00
	00		 fstp	 DWORD PTR [esi+428]

; 292  : 		}
; 293  : 		break;

  003cd	eb 41		 jmp	 SHORT $LN24@OnProcess
$LN18@OnProcess:

; 294  : 
; 295  : 	case SAT_DELAY:
; 296  : 		if( FRAMEGETTIME() > m_dwAniTime )

  003cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  003d5	8b c8		 mov	 ecx, eax
  003d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  003dd	3b 86 9c 01 00
	00		 cmp	 eax, DWORD PTR [esi+412]
  003e3	76 2b		 jbe	 SHORT $LN24@OnProcess

; 297  : 		{
; 298  : 			SetState( SAT_VIB );

  003e5	6a 04		 push	 4

; 299  : 		}
; 300  : 		break;

  003e7	eb 20		 jmp	 SHORT $LN80@OnProcess
$LN25@OnProcess:

; 258  : 	{
; 259  : 	case SAT_NONE:
; 260  : 		break;
; 261  : 
; 262  : 	case SAT_START_ANI:
; 263  : 		if( FRAMEGETTIME() > m_dwAniTime )

  003e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  003ef	8b c8		 mov	 ecx, eax
  003f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  003f7	3b 86 9c 01 00
	00		 cmp	 eax, DWORD PTR [esi+412]
  003fd	76 11		 jbe	 SHORT $LN24@OnProcess

; 264  : 		{
; 265  : 			ShowWnd();

  003ff	8b ce		 mov	 ecx, esi
  00401	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowWnd@ioWnd@@QAEXXZ

; 266  : 			SetState( SAT_ZOOM_OUT );

  00407	6a 03		 push	 3
$LN80@OnProcess:
  00409	8b ce		 mov	 ecx, esi
  0040b	e8 00 00 00 00	 call	 ?SetState@AniLetterSubWnd@@QAEXW4ShowAniType@1@@Z ; AniLetterSubWnd::SetState
$LN24@OnProcess:
  00410	5f		 pop	 edi
  00411	5e		 pop	 esi
  00412	5b		 pop	 ebx

; 362  : 
; 363  : 	case SAT_END:
; 364  : 		break;
; 365  : 
; 366  : 	default:
; 367  : 		break;
; 368  : 	}
; 369  : }

  00413	c9		 leave
  00414	c2 04 00	 ret	 4
?OnProcess@AniLetterSubWnd@@MAEXM@Z ENDP		; AniLetterSubWnd::OnProcess
_TEXT	ENDS
PUBLIC	__real@4067e80000000000
PUBLIC	__real@406fe00000000000
PUBLIC	__$ArrayPad$
EXTRN	__imp_?GetDerivedPosY@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?GetDerivedPosX@ioWnd@@QBEHXZ:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__ftol2:PROC
;	COMDAT __real@4067e80000000000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
CONST	SEGMENT
__real@4067e80000000000 DQ 04067e80000000000r	; 191.25
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\anitextwnd.cpp
CONST	ENDS
;	COMDAT ?OnRender@AniLetterSubWnd@@MAEXXZ
_TEXT	SEGMENT
tv1140 = -88						; size = 4
tv1094 = -88						; size = 4
tv1036 = -88						; size = 4
_fXPos$505580 = -84					; size = 4
_fXPos$505570 = -84					; size = 4
_fYPos$505563 = -84					; size = 4
_fXPos$505555 = -84					; size = 4
_fXPos$505550 = -84					; size = 4
_fYPos$505582 = -80					; size = 4
_fYPos$505572 = -80					; size = 4
_fXPos$505561 = -80					; size = 4
_fYPos$505557 = -80					; size = 4
_fYPos$505552 = -80					; size = 4
_iXPos$ = -80						; size = 4
_ptOffSet$ = -76					; size = 72
__$ArrayPad$ = -4					; size = 4
?OnRender@AniLetterSubWnd@@MAEXXZ PROC			; AniLetterSubWnd::OnRender, COMDAT
; _this$ = ecx

; 372  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b f1		 mov	 esi, ecx

; 373  : 	if( m_eState == SAT_NONE || m_eState == SAT_START_ANI || m_eState == SAT_END)

  00014	8b 86 94 01 00
	00		 mov	 eax, DWORD PTR [esi+404]
  0001a	33 db		 xor	 ebx, ebx
  0001c	3b c3		 cmp	 eax, ebx
  0001e	0f 84 6f 05 00
	00		 je	 $LN18@OnRender
  00024	57		 push	 edi
  00025	33 ff		 xor	 edi, edi
  00027	47		 inc	 edi
  00028	3b c7		 cmp	 eax, edi
  0002a	0f 84 62 05 00
	00		 je	 $LN28@OnRender
  00030	83 f8 07	 cmp	 eax, 7
  00033	0f 84 59 05 00
	00		 je	 $LN28@OnRender

; 374  : 		return;
; 375  : 
; 376  : 	if( !m_pLetter )

  00039	39 9e 90 01 00
	00		 cmp	 DWORD PTR [esi+400], ebx
  0003f	0f 84 4d 05 00
	00		 je	 $LN28@OnRender

; 377  : 		return;
; 378  : 
; 379  : 	int iXPos = GetDerivedPosX();

  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosX@ioWnd@@QBEHXZ

; 380  : 	int iYPos = GetDerivedPosY();	

  0004b	8b ce		 mov	 ecx, esi
  0004d	89 45 b0	 mov	 DWORD PTR _iXPos$[ebp], eax
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ

; 381  : 
; 382  : 	const POINT ptOffSet[9] = { 0, 0, 2, 0, -1, 0, -1, 2, -1, -1, 0, 1, -2, 0, 1, -1, -2, 1};

  00056	83 4d f0 ff	 or	 DWORD PTR _ptOffSet$[ebp+60], -1
  0005a	83 ca ff	 or	 edx, -1
  0005d	6a 02		 push	 2
  0005f	59		 pop	 ecx
  00060	89 55 c4	 mov	 DWORD PTR _ptOffSet$[ebp+16], edx
  00063	89 55 cc	 mov	 DWORD PTR _ptOffSet$[ebp+24], edx
  00066	89 55 d4	 mov	 DWORD PTR _ptOffSet$[ebp+32], edx
  00069	89 55 d8	 mov	 DWORD PTR _ptOffSet$[ebp+36], edx
  0006c	6a fe		 push	 -2			; fffffffeH
  0006e	5a		 pop	 edx
  0006f	89 55 e4	 mov	 DWORD PTR _ptOffSet$[ebp+48], edx
  00072	89 55 f4	 mov	 DWORD PTR _ptOffSet$[ebp+64], edx

; 383  : 
; 384  : 	switch(m_eState)

  00075	8b 96 94 01 00
	00		 mov	 edx, DWORD PTR [esi+404]
  0007b	2b d1		 sub	 edx, ecx
  0007d	89 5d b4	 mov	 DWORD PTR _ptOffSet$[ebp], ebx
  00080	89 5d b8	 mov	 DWORD PTR _ptOffSet$[ebp+4], ebx
  00083	89 4d bc	 mov	 DWORD PTR _ptOffSet$[ebp+8], ecx
  00086	89 5d c0	 mov	 DWORD PTR _ptOffSet$[ebp+12], ebx
  00089	89 5d c8	 mov	 DWORD PTR _ptOffSet$[ebp+20], ebx
  0008c	89 4d d0	 mov	 DWORD PTR _ptOffSet$[ebp+28], ecx
  0008f	89 5d dc	 mov	 DWORD PTR _ptOffSet$[ebp+40], ebx
  00092	89 7d e0	 mov	 DWORD PTR _ptOffSet$[ebp+44], edi
  00095	89 5d e8	 mov	 DWORD PTR _ptOffSet$[ebp+52], ebx
  00098	89 7d ec	 mov	 DWORD PTR _ptOffSet$[ebp+56], edi
  0009b	89 7d f8	 mov	 DWORD PTR _ptOffSet$[ebp+68], edi
  0009e	0f 84 63 04 00
	00		 je	 $LN14@OnRender
  000a4	4a		 dec	 edx
  000a5	0f 84 84 03 00
	00		 je	 $LN13@OnRender
  000ab	4a		 dec	 edx
  000ac	0f 84 0b 02 00
	00		 je	 $LN12@OnRender
  000b2	4a		 dec	 edx
  000b3	0f 84 bd 00 00
	00		 je	 $LN7@OnRender
  000b9	4a		 dec	 edx
  000ba	0f 85 d2 04 00
	00		 jne	 $LN28@OnRender

; 461  : 
; 462  : 	case SAT_ZOOM_IN:
; 463  : 		{
; 464  : 			float fXPos = (float)iXPos + m_stCurrPos.fX;

  000c0	66 0f 6e 4d b0	 movd	 xmm1, DWORD PTR _iXPos$[ebp]
  000c5	f3 0f 10 86 cc
	01 00 00	 movss	 xmm0, DWORD PTR [esi+460]

; 465  : 			float fYPos = (float)iYPos + m_stCurrPos.fY;
; 466  : 			m_pLetter->SetScale(m_stCurrPos.fScale, m_stCurrPos.fScale);

  000cd	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  000d3	0f 5a c0	 cvtps2pd xmm0, xmm0
  000d6	0f 5b c9	 cvtdq2ps xmm1, xmm1
  000d9	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  000dd	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000e1	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000e5	f3 0f 11 45 ac	 movss	 DWORD PTR _fXPos$505580[ebp], xmm0
  000ea	f3 0f 10 86 d0
	01 00 00	 movss	 xmm0, DWORD PTR [esi+464]
  000f2	0f 57 c9	 xorps	 xmm1, xmm1
  000f5	0f 5a c0	 cvtps2pd xmm0, xmm0
  000f8	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  000fc	8b 01		 mov	 eax, DWORD PTR [ecx]
  000fe	0f 5a c9	 cvtps2pd xmm1, xmm1
  00101	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00105	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00109	51		 push	 ecx
  0010a	51		 push	 ecx
  0010b	f3 0f 11 45 b0	 movss	 DWORD PTR _fYPos$505582[ebp], xmm0
  00110	f3 0f 10 86 d4
	01 00 00	 movss	 xmm0, DWORD PTR [esi+468]
  00118	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0011e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00123	ff 50 18	 call	 DWORD PTR [eax+24]

; 467  : 			m_pLetter->SetAlpha( int( 255.0f * (FLOAT1 - m_fAlphaRate)) );

  00126	b8 01 00 00 00	 mov	 eax, 1
  0012b	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  00131	8b 39		 mov	 edi, DWORD PTR [ecx]
  00133	89 45 a8	 mov	 DWORD PTR tv1140[ebp], eax
  00136	db 45 a8	 fild	 DWORD PTR tv1140[ebp]
  00139	85 c0		 test	 eax, eax
  0013b	79 06		 jns	 SHORT $LN29@OnRender
  0013d	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN29@OnRender:
  00143	d8 a6 ac 01 00
	00		 fsub	 DWORD PTR [esi+428]
  00149	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@406fe00000000000
  0014f	e8 00 00 00 00	 call	 __ftol2
  00154	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  0015a	0f b6 c0	 movzx	 eax, al
  0015d	50		 push	 eax
  0015e	ff 57 30	 call	 DWORD PTR [edi+48]

; 468  : 			m_pLetter->Render( fXPos, fYPos );

  00161	53		 push	 ebx
  00162	53		 push	 ebx
  00163	53		 push	 ebx
  00164	53		 push	 ebx
$LN39@OnRender:
  00165	8b b6 90 01 00
	00		 mov	 esi, DWORD PTR [esi+400]
  0016b	8b 06		 mov	 eax, DWORD PTR [esi]
  0016d	51		 push	 ecx
  0016e	51		 push	 ecx
  0016f	8b ce		 mov	 ecx, esi

; 469  : 		}
; 470  : 		break;

  00171	e9 05 04 00 00	 jmp	 $LN33@OnRender
$LN7@OnRender:

; 426  : 			{
; 427  : 				m_pLetter->Render(fXPos + ptOffSet[m_nOffSet].x, fYPos + ptOffSet[m_nOffSet].y);
; 428  : 			}
; 429  : 		}
; 430  : 		break;
; 431  : 
; 432  : 	case SAT_ANI_COLOR:
; 433  : 		{
; 434  : 			float fXPos = (float)iXPos + m_stCurrPos.fX;

  00176	66 0f 6e 4d b0	 movd	 xmm1, DWORD PTR _iXPos$[ebp]
  0017b	f3 0f 10 86 cc
	01 00 00	 movss	 xmm0, DWORD PTR [esi+460]

; 435  : 			float fYPos = (float)iYPos + m_stCurrPos.fY;
; 436  : 
; 437  : 			m_pLetter->SetScale(m_stCurrPos.fScale, m_stCurrPos.fScale);

  00183	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  00189	0f 5a c0	 cvtps2pd xmm0, xmm0
  0018c	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0018f	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00193	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00197	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0019b	f3 0f 11 45 ac	 movss	 DWORD PTR _fXPos$505570[ebp], xmm0
  001a0	f3 0f 10 86 d0
	01 00 00	 movss	 xmm0, DWORD PTR [esi+464]
  001a8	0f 57 c9	 xorps	 xmm1, xmm1
  001ab	0f 5a c0	 cvtps2pd xmm0, xmm0
  001ae	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  001b2	8b 01		 mov	 eax, DWORD PTR [ecx]
  001b4	0f 5a c9	 cvtps2pd xmm1, xmm1
  001b7	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001bb	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  001bf	51		 push	 ecx
  001c0	51		 push	 ecx
  001c1	f3 0f 11 45 b0	 movss	 DWORD PTR _fYPos$505572[ebp], xmm0
  001c6	f3 0f 10 86 d4
	01 00 00	 movss	 xmm0, DWORD PTR [esi+468]
  001ce	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d9	ff 50 18	 call	 DWORD PTR [eax+24]

; 438  : 			m_pLetter->SetAlpha(255.f);

  001dc	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  001e2	8b 01		 mov	 eax, DWORD PTR [ecx]
  001e4	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  001e9	57		 push	 edi
  001ea	ff 50 30	 call	 DWORD PTR [eax+48]

; 439  : 			m_pLetter->Render( fXPos, fYPos );

  001ed	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  001f3	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _fYPos$505572[ebp]
  001f8	8b 01		 mov	 eax, DWORD PTR [ecx]
  001fa	53		 push	 ebx
  001fb	53		 push	 ebx
  001fc	53		 push	 ebx
  001fd	53		 push	 ebx
  001fe	51		 push	 ecx
  001ff	51		 push	 ecx
  00200	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00206	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _fXPos$505570[ebp]
  0020b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00210	ff 10		 call	 DWORD PTR [eax]

; 440  : 
; 441  : 			if( m_nOffSet == 0 )

  00212	8b 86 98 01 00
	00		 mov	 eax, DWORD PTR [esi+408]
  00218	3b c3		 cmp	 eax, ebx
  0021a	75 3f		 jne	 SHORT $LN6@OnRender

; 442  : 			{
; 443  : 				m_pLetter->SetColor(255, 255, 255);

  0021c	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  00222	8b 01		 mov	 eax, DWORD PTR [ecx]
  00224	57		 push	 edi
  00225	57		 push	 edi
  00226	57		 push	 edi
$LN35@OnRender:
  00227	ff 50 28	 call	 DWORD PTR [eax+40]

; 444  : 				m_pLetter->SetAlpha( int( 255.0f * 0.75f * (m_fAlphaRate)) );

  0022a	f3 0f 10 86 ac
	01 00 00	 movss	 xmm0, DWORD PTR [esi+428]
  00232	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  00238	8b 01		 mov	 eax, DWORD PTR [ecx]
  0023a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0023d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4067e80000000000
  00245	f2 0f 2c d0	 cvttsd2si edx, xmm0
  00249	0f b6 d2	 movzx	 edx, dl
  0024c	52		 push	 edx
  0024d	ff 50 30	 call	 DWORD PTR [eax+48]

; 445  : 				m_pLetter->Render( fXPos, fYPos, UI_RENDER_NORMAL_ADD_COLOR, TFO_BILINEAR );

  00250	53		 push	 ebx
  00251	53		 push	 ebx
  00252	6a 01		 push	 1
  00254	6a 04		 push	 4
  00256	e9 16 03 00 00	 jmp	 $LN34@OnRender
$LN6@OnRender:

; 446  : 			}
; 447  : 			else if( m_nOffSet % 2 == 0)

  0025b	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00260	79 05		 jns	 SHORT $LN30@OnRender
  00262	48		 dec	 eax
  00263	83 c8 fe	 or	 eax, -2			; fffffffeH
  00266	40		 inc	 eax
$LN30@OnRender:

; 448  : 			{
; 449  : 				m_pLetter->SetColor(255, 255, 255);

  00267	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  0026d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0026f	57		 push	 edi
  00270	57		 push	 edi
  00271	57		 push	 edi

; 450  : 				m_pLetter->SetAlpha( int( 255.0f * 0.75f * (m_fAlphaRate)) );
; 451  : 				m_pLetter->Render( fXPos, fYPos, UI_RENDER_NORMAL_ADD_COLOR, TFO_BILINEAR );
; 452  : 			}
; 453  : 			else

  00272	74 b3		 je	 SHORT $LN35@OnRender

; 454  : 			{
; 455  : 				m_pLetter->SetColor(255, 255, 255);

  00274	ff 50 28	 call	 DWORD PTR [eax+40]

; 456  : 				m_pLetter->SetAlpha( int( 255.0f * 0.75f * (FLOAT1 - m_fAlphaRate)) );

  00277	b8 01 00 00 00	 mov	 eax, 1
  0027c	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  00282	8b 39		 mov	 edi, DWORD PTR [ecx]
  00284	89 45 a8	 mov	 DWORD PTR tv1094[ebp], eax
  00287	db 45 a8	 fild	 DWORD PTR tv1094[ebp]
  0028a	85 c0		 test	 eax, eax
  0028c	79 06		 jns	 SHORT $LN31@OnRender
  0028e	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN31@OnRender:
  00294	d8 a6 ac 01 00
	00		 fsub	 DWORD PTR [esi+428]
  0029a	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4067e80000000000
$LN38@OnRender:
  002a0	e8 00 00 00 00	 call	 __ftol2
  002a5	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  002ab	0f b6 c0	 movzx	 eax, al
  002ae	50		 push	 eax
  002af	ff 57 30	 call	 DWORD PTR [edi+48]

; 457  : 				m_pLetter->Render( fXPos, fYPos, UI_RENDER_NORMAL_ADD_COLOR, TFO_BILINEAR );

  002b2	53		 push	 ebx
  002b3	53		 push	 ebx
  002b4	6a 01		 push	 1
  002b6	6a 04		 push	 4

; 458  : 			}
; 459  : 		}
; 460  : 		break;

  002b8	e9 a8 fe ff ff	 jmp	 $LN39@OnRender
$LN12@OnRender:

; 409  : 
; 410  : 	case SAT_VIB:
; 411  : 		{
; 412  : 			float fXPos = (float)iXPos + m_stCurrPos.fX;

  002bd	66 0f 6e 4d b0	 movd	 xmm1, DWORD PTR _iXPos$[ebp]
  002c2	f3 0f 10 86 cc
	01 00 00	 movss	 xmm0, DWORD PTR [esi+460]

; 413  : 			float fYPos = (float)iYPos + m_stCurrPos.fY;
; 414  : 			m_pLetter->SetAlpha(255.f);

  002ca	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  002d0	0f 5a c0	 cvtps2pd xmm0, xmm0
  002d3	0f 5b c9	 cvtdq2ps xmm1, xmm1
  002d6	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002da	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002de	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  002e2	f3 0f 11 45 b0	 movss	 DWORD PTR _fXPos$505561[ebp], xmm0
  002e7	f3 0f 10 86 d0
	01 00 00	 movss	 xmm0, DWORD PTR [esi+464]
  002ef	0f 57 c9	 xorps	 xmm1, xmm1
  002f2	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  002f6	8b 01		 mov	 eax, DWORD PTR [ecx]
  002f8	0f 5a c0	 cvtps2pd xmm0, xmm0
  002fb	0f 5a c9	 cvtps2pd xmm1, xmm1
  002fe	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00302	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00306	68 ff 00 00 00	 push	 255			; 000000ffH
  0030b	f3 0f 11 45 ac	 movss	 DWORD PTR _fYPos$505563[ebp], xmm0
  00310	ff 50 30	 call	 DWORD PTR [eax+48]

; 415  : 			if( m_nOffSet == 0 )

  00313	8b 86 98 01 00
	00		 mov	 eax, DWORD PTR [esi+408]

; 416  : 			{
; 417  : 				m_pLetter->Render(fXPos + ptOffSet[m_nOffSet].x, fYPos + ptOffSet[m_nOffSet].y);

  00319	f3 0f 10 4d ac	 movss	 xmm1, DWORD PTR _fYPos$505563[ebp]
  0031e	0f 5a c9	 cvtps2pd xmm1, xmm1
  00321	3b c3		 cmp	 eax, ebx
  00323	75 4d		 jne	 SHORT $LN11@OnRender
  00325	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  0032b	66 0f 6e 44 c5
	b8		 movd	 xmm0, DWORD PTR _ptOffSet$[ebp+eax*8+4]
  00331	8b 11		 mov	 edx, DWORD PTR [ecx]
  00333	53		 push	 ebx
  00334	53		 push	 ebx
  00335	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00338	53		 push	 ebx
  00339	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0033d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00341	f3 0f 10 4d b0	 movss	 xmm1, DWORD PTR _fXPos$505561[ebp]
  00346	53		 push	 ebx
  00347	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0034b	51		 push	 ecx
  0034c	51		 push	 ecx
  0034d	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00353	66 0f 6e 44 c5
	b4		 movd	 xmm0, DWORD PTR _ptOffSet$[ebp+eax*8]
  00359	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0035c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00360	0f 5a c9	 cvtps2pd xmm1, xmm1
  00363	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00367	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0036b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0

; 418  : 				m_pLetter->Render(fXPos + ptOffSet[m_nOffSet].x, fYPos + ptOffSet[m_nOffSet].y, UI_RENDER_SCREEN);

  00370	eb 5b		 jmp	 SHORT $LN37@OnRender
$LN11@OnRender:

; 419  : 			}
; 420  : 			else if( m_nOffSet % 3 == 0)

  00372	6a 03		 push	 3
  00374	59		 pop	 ecx
  00375	99		 cdq
  00376	f7 f9		 idiv	 ecx

; 421  : 			{
; 422  : 				m_pLetter->Render(fXPos + ptOffSet[m_nOffSet].x, fYPos + ptOffSet[m_nOffSet].y);

  00378	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  0037e	8b 86 98 01 00
	00		 mov	 eax, DWORD PTR [esi+408]
  00384	66 0f 6e 44 c5
	b8		 movd	 xmm0, DWORD PTR _ptOffSet$[ebp+eax*8+4]
  0038a	53		 push	 ebx
  0038b	53		 push	 ebx
  0038c	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0038f	53		 push	 ebx
  00390	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00394	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00398	f3 0f 10 4d b0	 movss	 xmm1, DWORD PTR _fXPos$505561[ebp]
  0039d	53		 push	 ebx
  0039e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003a2	51		 push	 ecx
  003a3	51		 push	 ecx
  003a4	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  003aa	66 0f 6e 44 c5
	b4		 movd	 xmm0, DWORD PTR _ptOffSet$[ebp+eax*8]
  003b0	0f 5b c0	 cvtdq2ps xmm0, xmm0
  003b3	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003b7	0f 5a c9	 cvtps2pd xmm1, xmm1
  003ba	f2 0f 58 c1	 addsd	 xmm0, xmm1
  003be	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c7	85 d2		 test	 edx, edx
  003c9	8b 11		 mov	 edx, DWORD PTR [ecx]
  003cb	75 5b		 jne	 SHORT $LN9@OnRender
$LN37@OnRender:
  003cd	ff 12		 call	 DWORD PTR [edx]

; 423  : 				m_pLetter->Render(fXPos + ptOffSet[m_nOffSet].x, fYPos + ptOffSet[m_nOffSet].y, UI_RENDER_SCREEN);

  003cf	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  003d5	8b 86 98 01 00
	00		 mov	 eax, DWORD PTR [esi+408]
  003db	66 0f 6e 44 c5
	b8		 movd	 xmm0, DWORD PTR _ptOffSet$[ebp+eax*8+4]
  003e1	f3 0f 10 4d ac	 movss	 xmm1, DWORD PTR _fYPos$505563[ebp]
  003e6	8b 11		 mov	 edx, DWORD PTR [ecx]
  003e8	53		 push	 ebx
  003e9	53		 push	 ebx
  003ea	0f 5b c0	 cvtdq2ps xmm0, xmm0
  003ed	53		 push	 ebx
  003ee	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003f2	57		 push	 edi
  003f3	0f 5a c9	 cvtps2pd xmm1, xmm1
  003f6	f2 0f 58 c1	 addsd	 xmm0, xmm1
  003fa	f3 0f 10 4d b0	 movss	 xmm1, DWORD PTR _fXPos$505561[ebp]
  003ff	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00403	51		 push	 ecx
  00404	51		 push	 ecx
  00405	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0040b	66 0f 6e 44 c5
	b4		 movd	 xmm0, DWORD PTR _ptOffSet$[ebp+eax*8]
  00411	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00414	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00418	0f 5a c9	 cvtps2pd xmm1, xmm1
  0041b	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0041f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00423	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
$LN9@OnRender:
  00428	ff 12		 call	 DWORD PTR [edx]

; 424  : 			}
; 425  : 			else

  0042a	e9 63 01 00 00	 jmp	 $LN28@OnRender
$LN13@OnRender:

; 392  : 		}
; 393  : 		break;
; 394  : 
; 395  : 	case SAT_ZOOM_OUT:
; 396  : 		{
; 397  : 			float fXPos = (float)iXPos + m_stCurrPos.fX;

  0042f	66 0f 6e 4d b0	 movd	 xmm1, DWORD PTR _iXPos$[ebp]
  00434	f3 0f 10 86 cc
	01 00 00	 movss	 xmm0, DWORD PTR [esi+460]

; 398  : 			float fYPos = (float)iYPos + m_stCurrPos.fY;
; 399  : 
; 400  : 			m_pLetter->SetScale(m_stCurrPos.fScale, m_stCurrPos.fScale);

  0043c	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  00442	0f 5a c0	 cvtps2pd xmm0, xmm0
  00445	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00448	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0044c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00450	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00454	f3 0f 11 45 ac	 movss	 DWORD PTR _fXPos$505555[ebp], xmm0
  00459	f3 0f 10 86 d0
	01 00 00	 movss	 xmm0, DWORD PTR [esi+464]
  00461	0f 57 c9	 xorps	 xmm1, xmm1
  00464	0f 5a c0	 cvtps2pd xmm0, xmm0
  00467	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  0046b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0046d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00470	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00474	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00478	51		 push	 ecx
  00479	51		 push	 ecx
  0047a	f3 0f 11 45 b0	 movss	 DWORD PTR _fYPos$505557[ebp], xmm0
  0047f	f3 0f 10 86 d4
	01 00 00	 movss	 xmm0, DWORD PTR [esi+468]
  00487	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0048d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00492	ff 50 18	 call	 DWORD PTR [eax+24]

; 401  : 			m_pLetter->SetAlpha(255.f);

  00495	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  0049b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0049d	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  004a2	57		 push	 edi
  004a3	ff 50 30	 call	 DWORD PTR [eax+48]

; 402  : 			m_pLetter->Render( fXPos, fYPos );

  004a6	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  004ac	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _fYPos$505557[ebp]
  004b1	8b 01		 mov	 eax, DWORD PTR [ecx]
  004b3	53		 push	 ebx
  004b4	53		 push	 ebx
  004b5	53		 push	 ebx
  004b6	53		 push	 ebx
  004b7	51		 push	 ecx
  004b8	51		 push	 ecx
  004b9	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  004bf	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _fXPos$505555[ebp]
  004c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c9	ff 10		 call	 DWORD PTR [eax]

; 403  : 
; 404  :  			m_pLetter->SetColor(255, 255, 255);

  004cb	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  004d1	8b 01		 mov	 eax, DWORD PTR [ecx]
  004d3	57		 push	 edi
  004d4	57		 push	 edi
  004d5	57		 push	 edi
  004d6	ff 50 28	 call	 DWORD PTR [eax+40]

; 405  :  			m_pLetter->SetAlpha( int( 255.0f * (FLOAT1 - m_fAlphaRate)) );

  004d9	b8 01 00 00 00	 mov	 eax, 1
  004de	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  004e4	8b 39		 mov	 edi, DWORD PTR [ecx]
  004e6	89 45 a8	 mov	 DWORD PTR tv1036[ebp], eax
  004e9	db 45 a8	 fild	 DWORD PTR tv1036[ebp]
  004ec	85 c0		 test	 eax, eax
  004ee	79 06		 jns	 SHORT $LN32@OnRender
  004f0	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN32@OnRender:
  004f6	d8 a6 ac 01 00
	00		 fsub	 DWORD PTR [esi+428]
  004fc	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@406fe00000000000

; 406  :  			m_pLetter->Render( fXPos, fYPos, UI_RENDER_NORMAL_ADD_COLOR, TFO_BILINEAR );
; 407  : 		}
; 408  : 		break;

  00502	e9 99 fd ff ff	 jmp	 $LN38@OnRender
$LN14@OnRender:

; 385  : 	{
; 386  : 	case SAT_DELAY:
; 387  : 		{
; 388  : 			float fXPos = (float)iXPos + m_stCurrPos.fX;

  00507	66 0f 6e 4d b0	 movd	 xmm1, DWORD PTR _iXPos$[ebp]
  0050c	f3 0f 10 86 cc
	01 00 00	 movss	 xmm0, DWORD PTR [esi+460]

; 389  : 			float fYPos = (float)iYPos + m_stCurrPos.fY;
; 390  : 			m_pLetter->SetScale(m_stCurrPos.fScale, m_stCurrPos.fScale);

  00514	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  0051a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0051d	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00520	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00524	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00528	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0052c	f3 0f 11 45 ac	 movss	 DWORD PTR _fXPos$505550[ebp], xmm0
  00531	f3 0f 10 86 d0
	01 00 00	 movss	 xmm0, DWORD PTR [esi+464]
  00539	0f 57 c9	 xorps	 xmm1, xmm1
  0053c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0053f	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00543	8b 01		 mov	 eax, DWORD PTR [ecx]
  00545	0f 5a c9	 cvtps2pd xmm1, xmm1
  00548	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0054c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00550	51		 push	 ecx
  00551	51		 push	 ecx
  00552	f3 0f 11 45 b0	 movss	 DWORD PTR _fYPos$505552[ebp], xmm0
  00557	f3 0f 10 86 d4
	01 00 00	 movss	 xmm0, DWORD PTR [esi+468]
  0055f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00565	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0056a	ff 50 18	 call	 DWORD PTR [eax+24]

; 391  : 			m_pLetter->Render( fXPos, fYPos );

  0056d	53		 push	 ebx
  0056e	53		 push	 ebx
  0056f	53		 push	 ebx
  00570	53		 push	 ebx
$LN34@OnRender:
  00571	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  00577	8b 01		 mov	 eax, DWORD PTR [ecx]
  00579	51		 push	 ecx
  0057a	51		 push	 ecx
$LN33@OnRender:
  0057b	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _fYPos$505552[ebp]
  00580	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00586	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _fXPos$505550[ebp]
  0058b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00590	ff 10		 call	 DWORD PTR [eax]
$LN28@OnRender:
  00592	5f		 pop	 edi
$LN18@OnRender:

; 471  : 
; 472  : 	default:
; 473  : 		break;
; 474  : 	}
; 475  : }

  00593	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00596	5e		 pop	 esi
  00597	33 cd		 xor	 ecx, ebp
  00599	5b		 pop	 ebx
  0059a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0059f	c9		 leave
  005a0	c3		 ret	 0
?OnRender@AniLetterSubWnd@@MAEXXZ ENDP			; AniLetterSubWnd::OnRender
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?iwm_create@AniLetterSubWnd@@MAEXXZ
_TEXT	SEGMENT
?iwm_create@AniLetterSubWnd@@MAEXXZ PROC		; AniLetterSubWnd::iwm_create, COMDAT
; _this$ = ecx

; 479  : 	m_dwStyle |= IWS_PROCESS_ALWAYS;

  00000	83 49 18 40	 or	 DWORD PTR [ecx+24], 64	; 00000040H

; 480  : }

  00004	c3		 ret	 0
?iwm_create@AniLetterSubWnd@@MAEXXZ ENDP		; AniLetterSubWnd::iwm_create
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GAniTextWnd@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GAniTextWnd@@UAEPAXI@Z PROC				; AniTextWnd::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1AniTextWnd@@UAE@XZ	; AniTextWnd::~AniTextWnd
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GAniTextWnd@@UAEPAXI@Z ENDP				; AniTextWnd::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?StartAniText@AniTextWnd@@QAEXW4SubWnd@1@@Z	; AniTextWnd::StartAniText
EXTRN	__imp_?GetChild@ioWnd@@QAEPAV1@H@Z:PROC
EXTRN	__imp_?GetNumChildren@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\anitextwnd.cpp
;	COMDAT ?StartAniText@AniTextWnd@@QAEXW4SubWnd@1@@Z
_TEXT	SEGMENT
_i$505323 = 8						; size = 4
_eSub$ = 8						; size = 4
?StartAniText@AniTextWnd@@QAEXW4SubWnd@1@@Z PROC	; AniTextWnd::StartAniText, COMDAT
; _this$ = ecx

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	m_eType = eSub;

  00003	8b 45 08	 mov	 eax, DWORD PTR _eSub$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 26   : 
; 27   : 	ioWnd* pWnd = FindChildWnd(eSub);

  0000a	50		 push	 eax
  0000b	89 86 94 01 00
	00		 mov	 DWORD PTR [esi+404], eax
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  00017	8b d8		 mov	 ebx, eax

; 28   : 
; 29   : 	if( pWnd )

  00019	85 db		 test	 ebx, ebx
  0001b	74 72		 je	 SHORT $LN2@StartAniTe

; 30   : 	{
; 31   : 		SetState(SAT_START_ANI);
; 32   : 
; 33   : 		pWnd->ShowWnd();

  0001d	57		 push	 edi
  0001e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?ShowWnd@ioWnd@@QAEXXZ
  00024	8b cb		 mov	 ecx, ebx
  00026	c7 86 90 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+400], 1
  00030	ff d7		 call	 edi

; 34   : 		for( int i = 0; i < pWnd->GetNumChildren(); i++ )

  00032	83 65 08 00	 and	 DWORD PTR _i$505323[ebp], 0
  00036	8b cb		 mov	 ecx, ebx
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetNumChildren@ioWnd@@QBEHXZ
  0003e	85 c0		 test	 eax, eax
  00040	7e 4c		 jle	 SHORT $LN23@StartAniTe
  00042	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?GetChild@ioWnd@@QAEPAV1@H@Z
$LL4@StartAniTe:

; 35   : 		{
; 36   : 			pWnd->GetChild(i)->ShowWnd();

  00048	ff 75 08	 push	 DWORD PTR _i$505323[ebp]
  0004b	8b cb		 mov	 ecx, ebx
  0004d	ff d6		 call	 esi
  0004f	8b c8		 mov	 ecx, eax
  00051	ff d7		 call	 edi

; 37   : 
; 38   : 			AniLetterSubWnd* pAniLetterSubWnd = dynamic_cast<AniLetterSubWnd*>( pWnd->GetChild(i) );

  00053	6a 00		 push	 0
  00055	68 00 00 00 00	 push	 OFFSET ??_R0?AVAniLetterSubWnd@@@8
  0005a	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  0005f	6a 00		 push	 0
  00061	ff 75 08	 push	 DWORD PTR _i$505323[ebp]
  00064	8b cb		 mov	 ecx, ebx
  00066	ff d6		 call	 esi
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ___RTDynamicCast
  0006e	83 c4 14	 add	 esp, 20			; 00000014H

; 39   : 			if ( pAniLetterSubWnd )

  00071	85 c0		 test	 eax, eax
  00073	74 09		 je	 SHORT $LN3@StartAniTe

; 40   : 				pAniLetterSubWnd->SetState(AniLetterSubWnd::SAT_START_ANI);

  00075	6a 01		 push	 1
  00077	8b c8		 mov	 ecx, eax
  00079	e8 00 00 00 00	 call	 ?SetState@AniLetterSubWnd@@QAEXW4ShowAniType@1@@Z ; AniLetterSubWnd::SetState
$LN3@StartAniTe:

; 34   : 		for( int i = 0; i < pWnd->GetNumChildren(); i++ )

  0007e	ff 45 08	 inc	 DWORD PTR _i$505323[ebp]
  00081	8b cb		 mov	 ecx, ebx
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetNumChildren@ioWnd@@QBEHXZ
  00089	39 45 08	 cmp	 DWORD PTR _i$505323[ebp], eax
  0008c	7c ba		 jl	 SHORT $LL4@StartAniTe
$LN23@StartAniTe:
  0008e	5f		 pop	 edi
$LN2@StartAniTe:
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx

; 41   : 		}
; 42   : 	}
; 43   : }

  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
?StartAniText@AniTextWnd@@QAEXW4SubWnd@1@@Z ENDP	; AniTextWnd::StartAniText
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GAniLetterSubWnd@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GAniLetterSubWnd@@UAEPAXI@Z PROC			; AniLetterSubWnd::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1AniLetterSubWnd@@UAE@XZ ; AniLetterSubWnd::~AniLetterSubWnd
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@2:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GAniLetterSubWnd@@UAEPAXI@Z ENDP			; AniLetterSubWnd::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$06@@YA_NABVioHashString@@AAY06$$CBD@Z	; operator==<7>
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iohashstring.h
;	COMDAT ??$?8$06@@YA_NABVioHashString@@AAY06$$CBD@Z
_TEXT	SEGMENT
__t$ = -16						; size = 7
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$06@@YA_NABVioHashString@@AAY06$$CBD@Z PROC	; operator==<7>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 c0 00 00
	00		 je	 $LN96@operator
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 f0	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 a9 00 00
	00		 je	 $LN95@operator
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 f1	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 92 00 00
	00		 je	 $LN94@operator
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 f2	 mov	 BYTE PTR __t$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	74 7f		 je	 SHORT $LN93@operator
  00051	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00054	88 55 f3	 mov	 BYTE PTR __t$[ebp+3], dl
  00057	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005a	84 d2		 test	 dl, dl
  0005c	74 6c		 je	 SHORT $LN92@operator
  0005e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00061	88 55 f4	 mov	 BYTE PTR __t$[ebp+4], dl
  00064	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00067	84 d2		 test	 dl, dl
  00069	74 59		 je	 SHORT $LN91@operator
  0006b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0006e	80 78 06 00	 cmp	 BYTE PTR [eax+6], 0
  00072	88 55 f5	 mov	 BYTE PTR __t$[ebp+5], dl
  00075	74 6f		 je	 SHORT $LN1@operator
  00077	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0007a	84 d2		 test	 dl, dl
  0007c	74 40		 je	 SHORT $LN89@operator
  0007e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00081	88 55 f7	 mov	 BYTE PTR __t$[ebp+7], dl
  00084	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  00087	84 d2		 test	 dl, dl
  00089	74 2d		 je	 SHORT $LN88@operator
  0008b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0008e	88 55 f8	 mov	 BYTE PTR __t$[ebp+8], dl
  00091	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  00094	84 d2		 test	 dl, dl
  00096	74 1a		 je	 SHORT $LN87@operator
  00098	8a 40 0a	 mov	 al, BYTE PTR [eax+10]
  0009b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0009e	88 55 f9	 mov	 BYTE PTR __t$[ebp+9], dl
  000a1	84 c0		 test	 al, al
  000a3	74 07		 je	 SHORT $LN86@operator
  000a5	34 eb		 xor	 al, -21			; ffffffebH
  000a7	88 45 fa	 mov	 BYTE PTR __t$[ebp+10], al
  000aa	eb 3a		 jmp	 SHORT $LN1@operator
$LN86@operator:
  000ac	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000b0	eb 34		 jmp	 SHORT $LN1@operator
$LN87@operator:
  000b2	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  000b6	eb 2e		 jmp	 SHORT $LN1@operator
$LN88@operator:
  000b8	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  000bc	eb 28		 jmp	 SHORT $LN1@operator
$LN89@operator:
  000be	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  000c2	eb 22		 jmp	 SHORT $LN1@operator
$LN91@operator:
  000c4	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  000c8	eb 1c		 jmp	 SHORT $LN1@operator
$LN92@operator:
  000ca	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  000ce	eb 16		 jmp	 SHORT $LN1@operator
$LN93@operator:
  000d0	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  000d4	eb 10		 jmp	 SHORT $LN1@operator
$LN94@operator:
  000d6	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  000da	eb 0a		 jmp	 SHORT $LN1@operator
$LN95@operator:
  000dc	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  000e0	eb 04		 jmp	 SHORT $LN1@operator
$LN96@operator:
  000e2	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator:
  000e6	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __t$[ebp], -353637139 ; eaebecedH
  000ed	6a 04		 push	 4
  000ef	c6 45 f6 00	 mov	 BYTE PTR __t$[ebp+6], 0
  000f3	58		 pop	 eax
$LL101@operator:
  000f4	8b c8		 mov	 ecx, eax
  000f6	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000fc	79 05		 jns	 SHORT $LN115@operator
  000fe	49		 dec	 ecx
  000ff	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00102	41		 inc	 ecx
$LN115@operator:
  00103	b2 ed		 mov	 dl, -19			; ffffffedH
  00105	2a d1		 sub	 dl, cl
  00107	30 54 05 f0	 xor	 BYTE PTR __t$[ebp+eax], dl
  0010b	40		 inc	 eax
  0010c	83 f8 06	 cmp	 eax, 6
  0010f	7c e3		 jl	 SHORT $LL101@operator
  00111	8b cf		 mov	 ecx, edi
  00113	8d 75 f0	 lea	 esi, DWORD PTR __t$[ebp]
  00116	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator:
  0011c	8a 08		 mov	 cl, BYTE PTR [eax]
  0011e	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00120	75 1a		 jne	 SHORT $LN112@operator
  00122	84 c9		 test	 cl, cl
  00124	74 12		 je	 SHORT $LN113@operator
  00126	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00129	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0012c	75 0e		 jne	 SHORT $LN112@operator
  0012e	83 c0 02	 add	 eax, 2
  00131	83 c6 02	 add	 esi, 2
  00134	84 c9		 test	 cl, cl
  00136	75 e4		 jne	 SHORT $LL111@operator
$LN113@operator:
  00138	33 c0		 xor	 eax, eax
  0013a	eb 05		 jmp	 SHORT $LN114@operator
$LN112@operator:
  0013c	1b c0		 sbb	 eax, eax
  0013e	83 d8 ff	 sbb	 eax, -1
$LN114@operator:
  00141	33 c9		 xor	 ecx, ecx
  00143	85 c0		 test	 eax, eax
  00145	0f 94 c0	 sete	 al

; 148  : }

  00148	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014b	5f		 pop	 edi
  0014c	33 cd		 xor	 ecx, ebp
  0014e	5e		 pop	 esi
  0014f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00154	c9		 leave
  00155	c3		 ret	 0
??$?8$06@@YA_NABVioHashString@@AAY06$$CBD@Z ENDP	; operator==<7>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$GetIntAttribute_e@$09@ioXMLElement@@QBEHAAY09$$CBD@Z ; ioXMLElement::GetIntAttribute_e<10>
EXTRN	__imp_?GetIntAttribute@ioXMLElement@@QBEHPBD@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioxmlelement.h
;	COMDAT ??$GetIntAttribute_e@$09@ioXMLElement@@QBEHAAY09$$CBD@Z
_TEXT	SEGMENT
__k$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
??$GetIntAttribute_e@$09@ioXMLElement@@QBEHAAY09$$CBD@Z PROC ; ioXMLElement::GetIntAttribute_e<10>, COMDAT
; _this$ = ecx

; 86   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 87   : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	84 d2		 test	 dl, dl
  00017	0f 84 0d 01 00
	00		 je	 $LN96@GetIntAttr
  0001d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00020	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00023	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00026	84 d2		 test	 dl, dl
  00028	0f 84 f6 00 00
	00		 je	 $LN95@GetIntAttr
  0002e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00031	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00034	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00037	84 d2		 test	 dl, dl
  00039	0f 84 df 00 00
	00		 je	 $LN94@GetIntAttr
  0003f	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00042	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00045	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00048	84 d2		 test	 dl, dl
  0004a	0f 84 c8 00 00
	00		 je	 $LN93@GetIntAttr
  00050	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00053	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00056	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00059	84 d2		 test	 dl, dl
  0005b	0f 84 b1 00 00
	00		 je	 $LN92@GetIntAttr
  00061	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00064	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00067	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006a	84 d2		 test	 dl, dl
  0006c	0f 84 9a 00 00
	00		 je	 $LN91@GetIntAttr
  00072	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00075	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00078	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007b	84 d2		 test	 dl, dl
  0007d	0f 84 83 00 00
	00		 je	 $LN90@GetIntAttr
  00083	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00086	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00089	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008c	84 d2		 test	 dl, dl
  0008e	74 70		 je	 SHORT $LN89@GetIntAttr
  00090	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00093	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  00096	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  00099	84 d2		 test	 dl, dl
  0009b	74 5d		 je	 SHORT $LN88@GetIntAttr
  0009d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a0	80 78 09 00	 cmp	 BYTE PTR [eax+9], 0
  000a4	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000a7	0f 84 81 00 00
	00		 je	 $LN1@GetIntAttr
  000ad	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000b0	84 d2		 test	 dl, dl
  000b2	74 40		 je	 SHORT $LN86@GetIntAttr
  000b4	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000b7	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000ba	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000bd	84 d2		 test	 dl, dl
  000bf	74 2d		 je	 SHORT $LN85@GetIntAttr
  000c1	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000c4	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000c7	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000ca	84 d2		 test	 dl, dl
  000cc	74 1a		 je	 SHORT $LN84@GetIntAttr
  000ce	8a 40 0d	 mov	 al, BYTE PTR [eax+13]
  000d1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d4	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000d7	84 c0		 test	 al, al
  000d9	74 07		 je	 SHORT $LN83@GetIntAttr
  000db	34 ec		 xor	 al, -20			; ffffffecH
  000dd	88 45 f9	 mov	 BYTE PTR __k$[ebp+13], al
  000e0	eb 4c		 jmp	 SHORT $LN1@GetIntAttr
$LN83@GetIntAttr:
  000e2	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  000e6	eb 46		 jmp	 SHORT $LN1@GetIntAttr
$LN84@GetIntAttr:
  000e8	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  000ec	eb 40		 jmp	 SHORT $LN1@GetIntAttr
$LN85@GetIntAttr:
  000ee	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  000f2	eb 3a		 jmp	 SHORT $LN1@GetIntAttr
$LN86@GetIntAttr:
  000f4	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  000f8	eb 34		 jmp	 SHORT $LN1@GetIntAttr
$LN88@GetIntAttr:
  000fa	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  000fe	eb 2e		 jmp	 SHORT $LN1@GetIntAttr
$LN89@GetIntAttr:
  00100	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00104	eb 28		 jmp	 SHORT $LN1@GetIntAttr
$LN90@GetIntAttr:
  00106	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0010a	eb 22		 jmp	 SHORT $LN1@GetIntAttr
$LN91@GetIntAttr:
  0010c	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00110	eb 1c		 jmp	 SHORT $LN1@GetIntAttr
$LN92@GetIntAttr:
  00112	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00116	eb 16		 jmp	 SHORT $LN1@GetIntAttr
$LN93@GetIntAttr:
  00118	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0011c	eb 10		 jmp	 SHORT $LN1@GetIntAttr
$LN94@GetIntAttr:
  0011e	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00122	eb 0a		 jmp	 SHORT $LN1@GetIntAttr
$LN95@GetIntAttr:
  00124	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00128	eb 04		 jmp	 SHORT $LN1@GetIntAttr
$LN96@GetIntAttr:
  0012a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@GetIntAttr:
  0012e	6a 02		 push	 2
  00130	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00133	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+9], 0
  00137	5a		 pop	 edx
$LL104@GetIntAttr:
  00138	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0013e	83 c0 04	 add	 eax, 4
  00141	4a		 dec	 edx
  00142	75 f4		 jne	 SHORT $LL104@GetIntAttr
  00144	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH

; 88   : 		return GetIntAttribute(_k);

  00148	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014b	50		 push	 eax
  0014c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetIntAttribute@ioXMLElement@@QBEHPBD@Z

; 89   : 	}

  00152	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00155	33 cd		 xor	 ecx, ebp
  00157	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015c	c9		 leave
  0015d	c2 04 00	 ret	 4
??$GetIntAttribute_e@$09@ioXMLElement@@QBEHAAY09$$CBD@Z ENDP ; ioXMLElement::GetIntAttribute_e<10>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$GetIntAttribute_e@$0O@@ioXMLElement@@QBEHAAY0O@$$CBD@Z ; ioXMLElement::GetIntAttribute_e<14>
; Function compile flags: /Ogsp
;	COMDAT ??$GetIntAttribute_e@$0O@@ioXMLElement@@QBEHAAY0O@$$CBD@Z
_TEXT	SEGMENT
__k$ = -24						; size = 14
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
??$GetIntAttribute_e@$0O@@ioXMLElement@@QBEHAAY0O@$$CBD@Z PROC ; ioXMLElement::GetIntAttribute_e<14>, COMDAT
; _this$ = ecx

; 86   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 87   : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 64 01 00
	00		 je	 $LN96@GetIntAttr@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 4d 01 00
	00		 je	 $LN95@GetIntAttr@2
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 36 01 00
	00		 je	 $LN94@GetIntAttr@2
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 1e 01 00
	00		 je	 $LN93@GetIntAttr@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 07 01 00
	00		 je	 $LN92@GetIntAttr@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 f0 00 00
	00		 je	 $LN91@GetIntAttr@2
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 da 00 00
	00		 je	 $LN90@GetIntAttr@2
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 c4 00 00
	00		 je	 $LN89@GetIntAttr@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 ad 00 00
	00		 je	 $LN88@GetIntAttr@2
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 96 00 00
	00		 je	 $LN87@GetIntAttr@2
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 80 00 00
	00		 je	 $LN86@GetIntAttr@2
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 6e		 je	 SHORT $LN85@GetIntAttr@2
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 5b		 je	 SHORT $LN84@GetIntAttr@2
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	0f 84 95 00 00
	00		 je	 $LN1@GetIntAttr@2
  000f3	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f6	84 d2		 test	 dl, dl
  000f8	74 3f		 je	 SHORT $LN82@GetIntAttr@2
  000fa	32 d1		 xor	 dl, cl
  000fc	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 2d		 je	 SHORT $LN81@GetIntAttr@2
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 1a		 je	 SHORT $LN80@GetIntAttr@2
  00113	8a 40 11	 mov	 al, BYTE PTR [eax+17]
  00116	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00119	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011c	84 c0		 test	 al, al
  0011e	74 07		 je	 SHORT $LN79@GetIntAttr@2
  00120	34 ec		 xor	 al, -20			; ffffffecH
  00122	88 45 f9	 mov	 BYTE PTR __k$[ebp+17], al
  00125	eb 61		 jmp	 SHORT $LN1@GetIntAttr@2
$LN79@GetIntAttr@2:
  00127	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0012b	eb 5b		 jmp	 SHORT $LN1@GetIntAttr@2
$LN80@GetIntAttr@2:
  0012d	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00131	eb 55		 jmp	 SHORT $LN1@GetIntAttr@2
$LN81@GetIntAttr@2:
  00133	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00137	eb 4f		 jmp	 SHORT $LN1@GetIntAttr@2
$LN82@GetIntAttr@2:
  00139	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0013c	eb 4a		 jmp	 SHORT $LN1@GetIntAttr@2
$LN84@GetIntAttr@2:
  0013e	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00142	eb 44		 jmp	 SHORT $LN1@GetIntAttr@2
$LN85@GetIntAttr@2:
  00144	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00148	eb 3e		 jmp	 SHORT $LN1@GetIntAttr@2
$LN86@GetIntAttr@2:
  0014a	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  0014d	eb 39		 jmp	 SHORT $LN1@GetIntAttr@2
$LN87@GetIntAttr@2:
  0014f	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00153	eb 33		 jmp	 SHORT $LN1@GetIntAttr@2
$LN88@GetIntAttr@2:
  00155	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00159	eb 2d		 jmp	 SHORT $LN1@GetIntAttr@2
$LN89@GetIntAttr@2:
  0015b	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0015f	eb 27		 jmp	 SHORT $LN1@GetIntAttr@2
$LN90@GetIntAttr@2:
  00161	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  00164	eb 22		 jmp	 SHORT $LN1@GetIntAttr@2
$LN91@GetIntAttr@2:
  00166	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0016a	eb 1c		 jmp	 SHORT $LN1@GetIntAttr@2
$LN92@GetIntAttr@2:
  0016c	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00170	eb 16		 jmp	 SHORT $LN1@GetIntAttr@2
$LN93@GetIntAttr@2:
  00172	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00176	eb 10		 jmp	 SHORT $LN1@GetIntAttr@2
$LN94@GetIntAttr@2:
  00178	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0017c	eb 0a		 jmp	 SHORT $LN1@GetIntAttr@2
$LN95@GetIntAttr@2:
  0017e	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00182	eb 04		 jmp	 SHORT $LN1@GetIntAttr@2
$LN96@GetIntAttr@2:
  00184	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@GetIntAttr@2:
  00188	6a 03		 push	 3
  0018a	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0018d	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+13], 0
  00191	5a		 pop	 edx
$LL104@GetIntAttr@2:
  00192	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00198	83 c0 04	 add	 eax, 4
  0019b	4a		 dec	 edx
  0019c	75 f4		 jne	 SHORT $LL104@GetIntAttr@2
  0019e	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH

; 88   : 		return GetIntAttribute(_k);

  001a2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001a5	50		 push	 eax
  001a6	8b ce		 mov	 ecx, esi
  001a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetIntAttribute@ioXMLElement@@QBEHPBD@Z

; 89   : 	}

  001ae	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b1	33 cd		 xor	 ecx, ebp
  001b3	5e		 pop	 esi
  001b4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b9	c9		 leave
  001ba	c2 04 00	 ret	 4
??$GetIntAttribute_e@$0O@@ioXMLElement@@QBEHAAY0O@$$CBD@Z ENDP ; ioXMLElement::GetIntAttribute_e<14>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$GetFloatAttribute_e@$0L@@ioXMLElement@@QBEMAAY0L@$$CBD@Z ; ioXMLElement::GetFloatAttribute_e<11>
EXTRN	__imp_?GetFloatAttribute@ioXMLElement@@QBEMPBD@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$GetFloatAttribute_e@$0L@@ioXMLElement@@QBEMAAY0L@$$CBD@Z
_TEXT	SEGMENT
__k$ = -20						; size = 11
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
??$GetFloatAttribute_e@$0L@@ioXMLElement@@QBEMAAY0L@$$CBD@Z PROC ; ioXMLElement::GetFloatAttribute_e<11>, COMDAT
; _this$ = ecx

; 100  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 101  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 24 01 00
	00		 je	 $LN96@GetFloatAt
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 0d 01 00
	00		 je	 $LN95@GetFloatAt
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 f6 00 00
	00		 je	 $LN94@GetFloatAt
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 df 00 00
	00		 je	 $LN93@GetFloatAt
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 c8 00 00
	00		 je	 $LN92@GetFloatAt
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	0f 84 b1 00 00
	00		 je	 $LN91@GetFloatAt
  00075	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00078	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 9a 00 00
	00		 je	 $LN90@GetFloatAt
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 83 00 00
	00		 je	 $LN89@GetFloatAt
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	74 70		 je	 SHORT $LN88@GetFloatAt
  000a4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a7	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000aa	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ad	84 d2		 test	 dl, dl
  000af	74 5d		 je	 SHORT $LN87@GetFloatAt
  000b1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b4	80 78 0a 00	 cmp	 BYTE PTR [eax+10], 0
  000b8	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bb	0f 84 87 00 00
	00		 je	 $LN1@GetFloatAt
  000c1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c4	84 d2		 test	 dl, dl
  000c6	74 40		 je	 SHORT $LN85@GetFloatAt
  000c8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000cb	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000ce	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d1	84 d2		 test	 dl, dl
  000d3	74 2d		 je	 SHORT $LN84@GetFloatAt
  000d5	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d8	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000db	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000de	84 d2		 test	 dl, dl
  000e0	74 1a		 je	 SHORT $LN83@GetFloatAt
  000e2	8a 40 0e	 mov	 al, BYTE PTR [eax+14]
  000e5	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e8	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000eb	84 c0		 test	 al, al
  000ed	74 07		 je	 SHORT $LN82@GetFloatAt
  000ef	34 eb		 xor	 al, -21			; ffffffebH
  000f1	88 45 fa	 mov	 BYTE PTR __k$[ebp+14], al
  000f4	eb 52		 jmp	 SHORT $LN1@GetFloatAt
$LN82@GetFloatAt:
  000f6	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  000fa	eb 4c		 jmp	 SHORT $LN1@GetFloatAt
$LN83@GetFloatAt:
  000fc	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00100	eb 46		 jmp	 SHORT $LN1@GetFloatAt
$LN84@GetFloatAt:
  00102	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00106	eb 40		 jmp	 SHORT $LN1@GetFloatAt
$LN85@GetFloatAt:
  00108	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0010c	eb 3a		 jmp	 SHORT $LN1@GetFloatAt
$LN87@GetFloatAt:
  0010e	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00112	eb 34		 jmp	 SHORT $LN1@GetFloatAt
$LN88@GetFloatAt:
  00114	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00118	eb 2e		 jmp	 SHORT $LN1@GetFloatAt
$LN89@GetFloatAt:
  0011a	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0011e	eb 28		 jmp	 SHORT $LN1@GetFloatAt
$LN90@GetFloatAt:
  00120	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00124	eb 22		 jmp	 SHORT $LN1@GetFloatAt
$LN91@GetFloatAt:
  00126	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0012a	eb 1c		 jmp	 SHORT $LN1@GetFloatAt
$LN92@GetFloatAt:
  0012c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00130	eb 16		 jmp	 SHORT $LN1@GetFloatAt
$LN93@GetFloatAt:
  00132	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00136	eb 10		 jmp	 SHORT $LN1@GetFloatAt
$LN94@GetFloatAt:
  00138	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0013c	eb 0a		 jmp	 SHORT $LN1@GetFloatAt
$LN95@GetFloatAt:
  0013e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00142	eb 04		 jmp	 SHORT $LN1@GetFloatAt
$LN96@GetFloatAt:
  00144	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@GetFloatAt:
  00148	6a 02		 push	 2
  0014a	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014d	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+10], 0
  00151	5a		 pop	 edx
$LL104@GetFloatAt:
  00152	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00158	83 c0 04	 add	 eax, 4
  0015b	4a		 dec	 edx
  0015c	75 f4		 jne	 SHORT $LL104@GetFloatAt
  0015e	6a 08		 push	 8
  00160	58		 pop	 eax
$LL101@GetFloatAt:
  00161	8b c8		 mov	 ecx, eax
  00163	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00169	79 05		 jns	 SHORT $LN111@GetFloatAt
  0016b	49		 dec	 ecx
  0016c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0016f	41		 inc	 ecx
$LN111@GetFloatAt:
  00170	b2 ed		 mov	 dl, -19			; ffffffedH
  00172	2a d1		 sub	 dl, cl
  00174	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  00178	40		 inc	 eax
  00179	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0017c	7c e3		 jl	 SHORT $LL101@GetFloatAt

; 102  : 		return GetFloatAttribute(_k);

  0017e	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00181	50		 push	 eax
  00182	8b ce		 mov	 ecx, esi
  00184	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetFloatAttribute@ioXMLElement@@QBEMPBD@Z

; 103  : 	}

  0018a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018d	33 cd		 xor	 ecx, ebp
  0018f	5e		 pop	 esi
  00190	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00195	c9		 leave
  00196	c2 04 00	 ret	 4
??$GetFloatAttribute_e@$0L@@ioXMLElement@@QBEMAAY0L@$$CBD@Z ENDP ; ioXMLElement::GetFloatAttribute_e<11>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$GetIntAttribute_e@$0M@@ioXMLElement@@QBEHAAY0M@$$CBD@Z ; ioXMLElement::GetIntAttribute_e<12>
; Function compile flags: /Ogsp
;	COMDAT ??$GetIntAttribute_e@$0M@@ioXMLElement@@QBEHAAY0M@$$CBD@Z
_TEXT	SEGMENT
__k$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
??$GetIntAttribute_e@$0M@@ioXMLElement@@QBEHAAY0M@$$CBD@Z PROC ; ioXMLElement::GetIntAttribute_e<12>, COMDAT
; _this$ = ecx

; 86   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 87   : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 32 01 00
	00		 je	 $LN96@GetIntAttr@3
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 1b 01 00
	00		 je	 $LN95@GetIntAttr@3
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 04 01 00
	00		 je	 $LN94@GetIntAttr@3
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 ec 00 00
	00		 je	 $LN93@GetIntAttr@3
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 d5 00 00
	00		 je	 $LN92@GetIntAttr@3
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 be 00 00
	00		 je	 $LN91@GetIntAttr@3
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 a8 00 00
	00		 je	 $LN90@GetIntAttr@3
  00087	32 d1		 xor	 dl, cl
  00089	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 92 00 00
	00		 je	 $LN89@GetIntAttr@3
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	74 7f		 je	 SHORT $LN88@GetIntAttr@3
  000a4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a7	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000aa	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ad	84 d2		 test	 dl, dl
  000af	74 6c		 je	 SHORT $LN87@GetIntAttr@3
  000b1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b4	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000b7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ba	84 d2		 test	 dl, dl
  000bc	74 5a		 je	 SHORT $LN86@GetIntAttr@3
  000be	32 d1		 xor	 dl, cl
  000c0	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000c4	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000c7	0f 84 89 00 00
	00		 je	 $LN1@GetIntAttr@3
  000cd	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d0	84 d2		 test	 dl, dl
  000d2	74 3e		 je	 SHORT $LN84@GetIntAttr@3
  000d4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d7	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000da	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000dd	84 d2		 test	 dl, dl
  000df	74 2b		 je	 SHORT $LN83@GetIntAttr@3
  000e1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e4	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000e7	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000ea	84 d2		 test	 dl, dl
  000ec	74 19		 je	 SHORT $LN82@GetIntAttr@3
  000ee	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000f1	32 d1		 xor	 dl, cl
  000f3	88 55 fa	 mov	 BYTE PTR __k$[ebp+14], dl
  000f6	84 c0		 test	 al, al
  000f8	74 07		 je	 SHORT $LN81@GetIntAttr@3
  000fa	34 ea		 xor	 al, -22			; ffffffeaH
  000fc	88 45 fb	 mov	 BYTE PTR __k$[ebp+15], al
  000ff	eb 55		 jmp	 SHORT $LN1@GetIntAttr@3
$LN81@GetIntAttr@3:
  00101	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00105	eb 4f		 jmp	 SHORT $LN1@GetIntAttr@3
$LN82@GetIntAttr@3:
  00107	88 4d fa	 mov	 BYTE PTR __k$[ebp+14], cl
  0010a	eb 4a		 jmp	 SHORT $LN1@GetIntAttr@3
$LN83@GetIntAttr@3:
  0010c	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00110	eb 44		 jmp	 SHORT $LN1@GetIntAttr@3
$LN84@GetIntAttr@3:
  00112	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00116	eb 3e		 jmp	 SHORT $LN1@GetIntAttr@3
$LN86@GetIntAttr@3:
  00118	88 4d f6	 mov	 BYTE PTR __k$[ebp+10], cl
  0011b	eb 39		 jmp	 SHORT $LN1@GetIntAttr@3
$LN87@GetIntAttr@3:
  0011d	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00121	eb 33		 jmp	 SHORT $LN1@GetIntAttr@3
$LN88@GetIntAttr@3:
  00123	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00127	eb 2d		 jmp	 SHORT $LN1@GetIntAttr@3
$LN89@GetIntAttr@3:
  00129	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0012d	eb 27		 jmp	 SHORT $LN1@GetIntAttr@3
$LN90@GetIntAttr@3:
  0012f	88 4d f2	 mov	 BYTE PTR __k$[ebp+6], cl
  00132	eb 22		 jmp	 SHORT $LN1@GetIntAttr@3
$LN91@GetIntAttr@3:
  00134	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00138	eb 1c		 jmp	 SHORT $LN1@GetIntAttr@3
$LN92@GetIntAttr@3:
  0013a	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0013e	eb 16		 jmp	 SHORT $LN1@GetIntAttr@3
$LN93@GetIntAttr@3:
  00140	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00144	eb 10		 jmp	 SHORT $LN1@GetIntAttr@3
$LN94@GetIntAttr@3:
  00146	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0014a	eb 0a		 jmp	 SHORT $LN1@GetIntAttr@3
$LN95@GetIntAttr@3:
  0014c	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00150	eb 04		 jmp	 SHORT $LN1@GetIntAttr@3
$LN96@GetIntAttr@3:
  00152	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@GetIntAttr@3:
  00156	6a 02		 push	 2
  00158	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0015b	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+11], 0
  0015f	5a		 pop	 edx
$LL104@GetIntAttr@3:
  00160	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00166	83 c0 04	 add	 eax, 4
  00169	4a		 dec	 edx
  0016a	75 f4		 jne	 SHORT $LL104@GetIntAttr@3
  0016c	6a 08		 push	 8
  0016e	58		 pop	 eax
$LL101@GetIntAttr@3:
  0016f	8b c8		 mov	 ecx, eax
  00171	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00177	79 05		 jns	 SHORT $LN111@GetIntAttr@3
  00179	49		 dec	 ecx
  0017a	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0017d	41		 inc	 ecx
$LN111@GetIntAttr@3:
  0017e	b2 ed		 mov	 dl, -19			; ffffffedH
  00180	2a d1		 sub	 dl, cl
  00182	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  00186	40		 inc	 eax
  00187	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0018a	7c e3		 jl	 SHORT $LL101@GetIntAttr@3

; 88   : 		return GetIntAttribute(_k);

  0018c	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0018f	50		 push	 eax
  00190	8b ce		 mov	 ecx, esi
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetIntAttribute@ioXMLElement@@QBEHPBD@Z

; 89   : 	}

  00198	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0019b	33 cd		 xor	 ecx, ebp
  0019d	5e		 pop	 esi
  0019e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a3	c9		 leave
  001a4	c2 04 00	 ret	 4
??$GetIntAttribute_e@$0M@@ioXMLElement@@QBEHAAY0M@$$CBD@Z ENDP ; ioXMLElement::GetIntAttribute_e<12>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$GetFloatAttribute_e@$0P@@ioXMLElement@@QBEMAAY0P@$$CBD@Z ; ioXMLElement::GetFloatAttribute_e<15>
; Function compile flags: /Ogsp
;	COMDAT ??$GetFloatAttribute_e@$0P@@ioXMLElement@@QBEMAAY0P@$$CBD@Z
_TEXT	SEGMENT
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
??$GetFloatAttribute_e@$0P@@ioXMLElement@@QBEMAAY0P@$$CBD@Z PROC ; ioXMLElement::GetFloatAttribute_e<15>, COMDAT
; _this$ = ecx

; 100  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 101  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 75 01 00
	00		 je	 $LN96@GetFloatAt@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 5e 01 00
	00		 je	 $LN95@GetFloatAt@2
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 46 01 00
	00		 je	 $LN94@GetFloatAt@2
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 2f 01 00
	00		 je	 $LN93@GetFloatAt@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 18 01 00
	00		 je	 $LN92@GetFloatAt@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 02 01 00
	00		 je	 $LN91@GetFloatAt@2
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 ec 00 00
	00		 je	 $LN90@GetFloatAt@2
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 d5 00 00
	00		 je	 $LN89@GetFloatAt@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 be 00 00
	00		 je	 $LN88@GetFloatAt@2
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 a8 00 00
	00		 je	 $LN87@GetFloatAt@2
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 92 00 00
	00		 je	 $LN86@GetFloatAt@2
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 7f		 je	 SHORT $LN85@GetFloatAt@2
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 6c		 je	 SHORT $LN84@GetFloatAt@2
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000e9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000ec	84 d2		 test	 dl, dl
  000ee	74 5a		 je	 SHORT $LN83@GetFloatAt@2
  000f0	32 d1		 xor	 dl, cl
  000f2	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000f6	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000f9	0f 84 9a 00 00
	00		 je	 $LN1@GetFloatAt@2
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 3e		 je	 SHORT $LN81@GetFloatAt@2
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 2b		 je	 SHORT $LN80@GetFloatAt@2
  00113	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00116	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00119	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0011c	84 d2		 test	 dl, dl
  0011e	74 19		 je	 SHORT $LN79@GetFloatAt@2
  00120	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  00123	32 d1		 xor	 dl, cl
  00125	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00128	84 c0		 test	 al, al
  0012a	74 07		 je	 SHORT $LN78@GetFloatAt@2
  0012c	34 eb		 xor	 al, -21			; ffffffebH
  0012e	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00131	eb 66		 jmp	 SHORT $LN1@GetFloatAt@2
$LN78@GetFloatAt@2:
  00133	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00137	eb 60		 jmp	 SHORT $LN1@GetFloatAt@2
$LN79@GetFloatAt@2:
  00139	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  0013c	eb 5b		 jmp	 SHORT $LN1@GetFloatAt@2
$LN80@GetFloatAt@2:
  0013e	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00142	eb 55		 jmp	 SHORT $LN1@GetFloatAt@2
$LN81@GetFloatAt@2:
  00144	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00148	eb 4f		 jmp	 SHORT $LN1@GetFloatAt@2
$LN83@GetFloatAt@2:
  0014a	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0014d	eb 4a		 jmp	 SHORT $LN1@GetFloatAt@2
$LN84@GetFloatAt@2:
  0014f	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00153	eb 44		 jmp	 SHORT $LN1@GetFloatAt@2
$LN85@GetFloatAt@2:
  00155	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00159	eb 3e		 jmp	 SHORT $LN1@GetFloatAt@2
$LN86@GetFloatAt@2:
  0015b	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0015f	eb 38		 jmp	 SHORT $LN1@GetFloatAt@2
$LN87@GetFloatAt@2:
  00161	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  00164	eb 33		 jmp	 SHORT $LN1@GetFloatAt@2
$LN88@GetFloatAt@2:
  00166	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0016a	eb 2d		 jmp	 SHORT $LN1@GetFloatAt@2
$LN89@GetFloatAt@2:
  0016c	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00170	eb 27		 jmp	 SHORT $LN1@GetFloatAt@2
$LN90@GetFloatAt@2:
  00172	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00176	eb 21		 jmp	 SHORT $LN1@GetFloatAt@2
$LN91@GetFloatAt@2:
  00178	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  0017b	eb 1c		 jmp	 SHORT $LN1@GetFloatAt@2
$LN92@GetFloatAt@2:
  0017d	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00181	eb 16		 jmp	 SHORT $LN1@GetFloatAt@2
$LN93@GetFloatAt@2:
  00183	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00187	eb 10		 jmp	 SHORT $LN1@GetFloatAt@2
$LN94@GetFloatAt@2:
  00189	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0018d	eb 0a		 jmp	 SHORT $LN1@GetFloatAt@2
$LN95@GetFloatAt@2:
  0018f	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00193	eb 04		 jmp	 SHORT $LN1@GetFloatAt@2
$LN96@GetFloatAt@2:
  00195	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@GetFloatAt@2:
  00199	6a 03		 push	 3
  0019b	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0019e	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001a2	5a		 pop	 edx
$LL104@GetFloatAt@2:
  001a3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a9	83 c0 04	 add	 eax, 4
  001ac	4a		 dec	 edx
  001ad	75 f4		 jne	 SHORT $LL104@GetFloatAt@2
  001af	6a 0c		 push	 12			; 0000000cH
  001b1	58		 pop	 eax
$LL101@GetFloatAt@2:
  001b2	8b c8		 mov	 ecx, eax
  001b4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001ba	79 05		 jns	 SHORT $LN111@GetFloatAt@2
  001bc	49		 dec	 ecx
  001bd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c0	41		 inc	 ecx
$LN111@GetFloatAt@2:
  001c1	b2 ed		 mov	 dl, -19			; ffffffedH
  001c3	2a d1		 sub	 dl, cl
  001c5	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001c9	40		 inc	 eax
  001ca	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001cd	7c e3		 jl	 SHORT $LL101@GetFloatAt@2

; 102  : 		return GetFloatAttribute(_k);

  001cf	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001d2	50		 push	 eax
  001d3	8b ce		 mov	 ecx, esi
  001d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetFloatAttribute@ioXMLElement@@QBEMPBD@Z

; 103  : 	}

  001db	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001de	33 cd		 xor	 ecx, ebp
  001e0	5e		 pop	 esi
  001e1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e6	c9		 leave
  001e7	c2 04 00	 ret	 4
??$GetFloatAttribute_e@$0P@@ioXMLElement@@QBEMAAY0P@$$CBD@Z ENDP ; ioXMLElement::GetFloatAttribute_e<15>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$GetIntAttribute_e@$0BA@@ioXMLElement@@QBEHAAY0BA@$$CBD@Z ; ioXMLElement::GetIntAttribute_e<16>
; Function compile flags: /Ogsp
;	COMDAT ??$GetIntAttribute_e@$0BA@@ioXMLElement@@QBEHAAY0BA@$$CBD@Z
_TEXT	SEGMENT
__k$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
??$GetIntAttribute_e@$0BA@@ioXMLElement@@QBEHAAY0BA@$$CBD@Z PROC ; ioXMLElement::GetIntAttribute_e<16>, COMDAT
; _this$ = ecx

; 86   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 87   : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 8c 01 00
	00		 je	 $LN96@GetIntAttr@4
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 75 01 00
	00		 je	 $LN95@GetIntAttr@4
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 5e 01 00
	00		 je	 $LN94@GetIntAttr@4
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 46 01 00
	00		 je	 $LN93@GetIntAttr@4
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 2f 01 00
	00		 je	 $LN92@GetIntAttr@4
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 18 01 00
	00		 je	 $LN91@GetIntAttr@4
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 02 01 00
	00		 je	 $LN90@GetIntAttr@4
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 ec 00 00
	00		 je	 $LN89@GetIntAttr@4
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 d5 00 00
	00		 je	 $LN88@GetIntAttr@4
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 be 00 00
	00		 je	 $LN87@GetIntAttr@4
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 a8 00 00
	00		 je	 $LN86@GetIntAttr@4
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 92 00 00
	00		 je	 $LN85@GetIntAttr@4
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	74 7f		 je	 SHORT $LN84@GetIntAttr@4
  000e7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f0	84 d2		 test	 dl, dl
  000f2	74 6c		 je	 SHORT $LN83@GetIntAttr@4
  000f4	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f7	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000fa	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000fd	84 d2		 test	 dl, dl
  000ff	74 5a		 je	 SHORT $LN82@GetIntAttr@4
  00101	32 d1		 xor	 dl, cl
  00103	80 78 0f 00	 cmp	 BYTE PTR [eax+15], 0
  00107	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  0010a	0f 84 a0 00 00
	00		 je	 $LN1@GetIntAttr@4
  00110	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00113	84 d2		 test	 dl, dl
  00115	74 3e		 je	 SHORT $LN80@GetIntAttr@4
  00117	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011a	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011d	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00120	84 d2		 test	 dl, dl
  00122	74 2b		 je	 SHORT $LN79@GetIntAttr@4
  00124	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00127	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  0012a	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0012d	84 d2		 test	 dl, dl
  0012f	74 19		 je	 SHORT $LN78@GetIntAttr@4
  00131	8a 40 13	 mov	 al, BYTE PTR [eax+19]
  00134	32 d1		 xor	 dl, cl
  00136	88 55 fa	 mov	 BYTE PTR __k$[ebp+18], dl
  00139	84 c0		 test	 al, al
  0013b	74 07		 je	 SHORT $LN77@GetIntAttr@4
  0013d	34 ea		 xor	 al, -22			; ffffffeaH
  0013f	88 45 fb	 mov	 BYTE PTR __k$[ebp+19], al
  00142	eb 6c		 jmp	 SHORT $LN1@GetIntAttr@4
$LN77@GetIntAttr@4:
  00144	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00148	eb 66		 jmp	 SHORT $LN1@GetIntAttr@4
$LN78@GetIntAttr@4:
  0014a	88 4d fa	 mov	 BYTE PTR __k$[ebp+18], cl
  0014d	eb 61		 jmp	 SHORT $LN1@GetIntAttr@4
$LN79@GetIntAttr@4:
  0014f	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  00153	eb 5b		 jmp	 SHORT $LN1@GetIntAttr@4
$LN80@GetIntAttr@4:
  00155	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00159	eb 55		 jmp	 SHORT $LN1@GetIntAttr@4
$LN82@GetIntAttr@4:
  0015b	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0015e	eb 50		 jmp	 SHORT $LN1@GetIntAttr@4
$LN83@GetIntAttr@4:
  00160	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00164	eb 4a		 jmp	 SHORT $LN1@GetIntAttr@4
$LN84@GetIntAttr@4:
  00166	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0016a	eb 44		 jmp	 SHORT $LN1@GetIntAttr@4
$LN85@GetIntAttr@4:
  0016c	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00170	eb 3e		 jmp	 SHORT $LN1@GetIntAttr@4
$LN86@GetIntAttr@4:
  00172	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  00175	eb 39		 jmp	 SHORT $LN1@GetIntAttr@4
$LN87@GetIntAttr@4:
  00177	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0017b	eb 33		 jmp	 SHORT $LN1@GetIntAttr@4
$LN88@GetIntAttr@4:
  0017d	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00181	eb 2d		 jmp	 SHORT $LN1@GetIntAttr@4
$LN89@GetIntAttr@4:
  00183	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00187	eb 27		 jmp	 SHORT $LN1@GetIntAttr@4
$LN90@GetIntAttr@4:
  00189	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  0018c	eb 22		 jmp	 SHORT $LN1@GetIntAttr@4
$LN91@GetIntAttr@4:
  0018e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00192	eb 1c		 jmp	 SHORT $LN1@GetIntAttr@4
$LN92@GetIntAttr@4:
  00194	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00198	eb 16		 jmp	 SHORT $LN1@GetIntAttr@4
$LN93@GetIntAttr@4:
  0019a	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0019e	eb 10		 jmp	 SHORT $LN1@GetIntAttr@4
$LN94@GetIntAttr@4:
  001a0	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001a4	eb 0a		 jmp	 SHORT $LN1@GetIntAttr@4
$LN95@GetIntAttr@4:
  001a6	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001aa	eb 04		 jmp	 SHORT $LN1@GetIntAttr@4
$LN96@GetIntAttr@4:
  001ac	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@GetIntAttr@4:
  001b0	6a 03		 push	 3
  001b2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001b5	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+15], 0
  001b9	5a		 pop	 edx
$LL104@GetIntAttr@4:
  001ba	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001c0	83 c0 04	 add	 eax, 4
  001c3	4a		 dec	 edx
  001c4	75 f4		 jne	 SHORT $LL104@GetIntAttr@4
  001c6	6a 0c		 push	 12			; 0000000cH
  001c8	58		 pop	 eax
$LL101@GetIntAttr@4:
  001c9	8b c8		 mov	 ecx, eax
  001cb	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001d1	79 05		 jns	 SHORT $LN111@GetIntAttr@4
  001d3	49		 dec	 ecx
  001d4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001d7	41		 inc	 ecx
$LN111@GetIntAttr@4:
  001d8	b2 ed		 mov	 dl, -19			; ffffffedH
  001da	2a d1		 sub	 dl, cl
  001dc	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001e0	40		 inc	 eax
  001e1	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001e4	7c e3		 jl	 SHORT $LL101@GetIntAttr@4

; 88   : 		return GetIntAttribute(_k);

  001e6	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001e9	50		 push	 eax
  001ea	8b ce		 mov	 ecx, esi
  001ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetIntAttribute@ioXMLElement@@QBEHPBD@Z

; 89   : 	}

  001f2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f5	33 cd		 xor	 ecx, ebp
  001f7	5e		 pop	 esi
  001f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fd	c9		 leave
  001fe	c2 04 00	 ret	 4
??$GetIntAttribute_e@$0BA@@ioXMLElement@@QBEHAAY0BA@$$CBD@Z ENDP ; ioXMLElement::GetIntAttribute_e<16>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$GetIntAttribute_e@$0P@@ioXMLElement@@QBEHAAY0P@$$CBD@Z ; ioXMLElement::GetIntAttribute_e<15>
; Function compile flags: /Ogsp
;	COMDAT ??$GetIntAttribute_e@$0P@@ioXMLElement@@QBEHAAY0P@$$CBD@Z
_TEXT	SEGMENT
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
??$GetIntAttribute_e@$0P@@ioXMLElement@@QBEHAAY0P@$$CBD@Z PROC ; ioXMLElement::GetIntAttribute_e<15>, COMDAT
; _this$ = ecx

; 86   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 87   : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 75 01 00
	00		 je	 $LN96@GetIntAttr@5
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 5e 01 00
	00		 je	 $LN95@GetIntAttr@5
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 46 01 00
	00		 je	 $LN94@GetIntAttr@5
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 2f 01 00
	00		 je	 $LN93@GetIntAttr@5
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 18 01 00
	00		 je	 $LN92@GetIntAttr@5
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 02 01 00
	00		 je	 $LN91@GetIntAttr@5
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 ec 00 00
	00		 je	 $LN90@GetIntAttr@5
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 d5 00 00
	00		 je	 $LN89@GetIntAttr@5
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 be 00 00
	00		 je	 $LN88@GetIntAttr@5
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 a8 00 00
	00		 je	 $LN87@GetIntAttr@5
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 92 00 00
	00		 je	 $LN86@GetIntAttr@5
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 7f		 je	 SHORT $LN85@GetIntAttr@5
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 6c		 je	 SHORT $LN84@GetIntAttr@5
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000e9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000ec	84 d2		 test	 dl, dl
  000ee	74 5a		 je	 SHORT $LN83@GetIntAttr@5
  000f0	32 d1		 xor	 dl, cl
  000f2	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000f6	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000f9	0f 84 9a 00 00
	00		 je	 $LN1@GetIntAttr@5
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 3e		 je	 SHORT $LN81@GetIntAttr@5
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 2b		 je	 SHORT $LN80@GetIntAttr@5
  00113	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00116	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00119	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0011c	84 d2		 test	 dl, dl
  0011e	74 19		 je	 SHORT $LN79@GetIntAttr@5
  00120	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  00123	32 d1		 xor	 dl, cl
  00125	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00128	84 c0		 test	 al, al
  0012a	74 07		 je	 SHORT $LN78@GetIntAttr@5
  0012c	34 eb		 xor	 al, -21			; ffffffebH
  0012e	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00131	eb 66		 jmp	 SHORT $LN1@GetIntAttr@5
$LN78@GetIntAttr@5:
  00133	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00137	eb 60		 jmp	 SHORT $LN1@GetIntAttr@5
$LN79@GetIntAttr@5:
  00139	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  0013c	eb 5b		 jmp	 SHORT $LN1@GetIntAttr@5
$LN80@GetIntAttr@5:
  0013e	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00142	eb 55		 jmp	 SHORT $LN1@GetIntAttr@5
$LN81@GetIntAttr@5:
  00144	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00148	eb 4f		 jmp	 SHORT $LN1@GetIntAttr@5
$LN83@GetIntAttr@5:
  0014a	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0014d	eb 4a		 jmp	 SHORT $LN1@GetIntAttr@5
$LN84@GetIntAttr@5:
  0014f	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00153	eb 44		 jmp	 SHORT $LN1@GetIntAttr@5
$LN85@GetIntAttr@5:
  00155	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00159	eb 3e		 jmp	 SHORT $LN1@GetIntAttr@5
$LN86@GetIntAttr@5:
  0015b	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0015f	eb 38		 jmp	 SHORT $LN1@GetIntAttr@5
$LN87@GetIntAttr@5:
  00161	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  00164	eb 33		 jmp	 SHORT $LN1@GetIntAttr@5
$LN88@GetIntAttr@5:
  00166	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0016a	eb 2d		 jmp	 SHORT $LN1@GetIntAttr@5
$LN89@GetIntAttr@5:
  0016c	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00170	eb 27		 jmp	 SHORT $LN1@GetIntAttr@5
$LN90@GetIntAttr@5:
  00172	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00176	eb 21		 jmp	 SHORT $LN1@GetIntAttr@5
$LN91@GetIntAttr@5:
  00178	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  0017b	eb 1c		 jmp	 SHORT $LN1@GetIntAttr@5
$LN92@GetIntAttr@5:
  0017d	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00181	eb 16		 jmp	 SHORT $LN1@GetIntAttr@5
$LN93@GetIntAttr@5:
  00183	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00187	eb 10		 jmp	 SHORT $LN1@GetIntAttr@5
$LN94@GetIntAttr@5:
  00189	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0018d	eb 0a		 jmp	 SHORT $LN1@GetIntAttr@5
$LN95@GetIntAttr@5:
  0018f	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00193	eb 04		 jmp	 SHORT $LN1@GetIntAttr@5
$LN96@GetIntAttr@5:
  00195	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@GetIntAttr@5:
  00199	6a 03		 push	 3
  0019b	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0019e	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001a2	5a		 pop	 edx
$LL104@GetIntAttr@5:
  001a3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a9	83 c0 04	 add	 eax, 4
  001ac	4a		 dec	 edx
  001ad	75 f4		 jne	 SHORT $LL104@GetIntAttr@5
  001af	6a 0c		 push	 12			; 0000000cH
  001b1	58		 pop	 eax
$LL101@GetIntAttr@5:
  001b2	8b c8		 mov	 ecx, eax
  001b4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001ba	79 05		 jns	 SHORT $LN111@GetIntAttr@5
  001bc	49		 dec	 ecx
  001bd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c0	41		 inc	 ecx
$LN111@GetIntAttr@5:
  001c1	b2 ed		 mov	 dl, -19			; ffffffedH
  001c3	2a d1		 sub	 dl, cl
  001c5	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001c9	40		 inc	 eax
  001ca	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001cd	7c e3		 jl	 SHORT $LL101@GetIntAttr@5

; 88   : 		return GetIntAttribute(_k);

  001cf	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001d2	50		 push	 eax
  001d3	8b ce		 mov	 ecx, esi
  001d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetIntAttribute@ioXMLElement@@QBEHPBD@Z

; 89   : 	}

  001db	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001de	33 cd		 xor	 ecx, ebp
  001e0	5e		 pop	 esi
  001e1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e6	c9		 leave
  001e7	c2 04 00	 ret	 4
??$GetIntAttribute_e@$0P@@ioXMLElement@@QBEHAAY0P@$$CBD@Z ENDP ; ioXMLElement::GetIntAttribute_e<15>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$GetStringAttribute_e@$09@ioXMLElement@@QBEPBDAAY09$$CBD@Z ; ioXMLElement::GetStringAttribute_e<10>
EXTRN	__imp_?GetStringAttribute@ioXMLElement@@QBEPBDPBD@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$GetStringAttribute_e@$09@ioXMLElement@@QBEPBDAAY09$$CBD@Z
_TEXT	SEGMENT
__k$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
??$GetStringAttribute_e@$09@ioXMLElement@@QBEPBDAAY09$$CBD@Z PROC ; ioXMLElement::GetStringAttribute_e<10>, COMDAT
; _this$ = ecx

; 107  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 108  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	84 d2		 test	 dl, dl
  00017	0f 84 0d 01 00
	00		 je	 $LN96@GetStringA
  0001d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00020	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00023	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00026	84 d2		 test	 dl, dl
  00028	0f 84 f6 00 00
	00		 je	 $LN95@GetStringA
  0002e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00031	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00034	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00037	84 d2		 test	 dl, dl
  00039	0f 84 df 00 00
	00		 je	 $LN94@GetStringA
  0003f	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00042	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00045	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00048	84 d2		 test	 dl, dl
  0004a	0f 84 c8 00 00
	00		 je	 $LN93@GetStringA
  00050	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00053	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00056	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00059	84 d2		 test	 dl, dl
  0005b	0f 84 b1 00 00
	00		 je	 $LN92@GetStringA
  00061	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00064	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00067	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006a	84 d2		 test	 dl, dl
  0006c	0f 84 9a 00 00
	00		 je	 $LN91@GetStringA
  00072	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00075	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00078	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007b	84 d2		 test	 dl, dl
  0007d	0f 84 83 00 00
	00		 je	 $LN90@GetStringA
  00083	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00086	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00089	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008c	84 d2		 test	 dl, dl
  0008e	74 70		 je	 SHORT $LN89@GetStringA
  00090	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00093	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  00096	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  00099	84 d2		 test	 dl, dl
  0009b	74 5d		 je	 SHORT $LN88@GetStringA
  0009d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a0	80 78 09 00	 cmp	 BYTE PTR [eax+9], 0
  000a4	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000a7	0f 84 81 00 00
	00		 je	 $LN1@GetStringA
  000ad	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000b0	84 d2		 test	 dl, dl
  000b2	74 40		 je	 SHORT $LN86@GetStringA
  000b4	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000b7	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000ba	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000bd	84 d2		 test	 dl, dl
  000bf	74 2d		 je	 SHORT $LN85@GetStringA
  000c1	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000c4	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000c7	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000ca	84 d2		 test	 dl, dl
  000cc	74 1a		 je	 SHORT $LN84@GetStringA
  000ce	8a 40 0d	 mov	 al, BYTE PTR [eax+13]
  000d1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d4	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000d7	84 c0		 test	 al, al
  000d9	74 07		 je	 SHORT $LN83@GetStringA
  000db	34 ec		 xor	 al, -20			; ffffffecH
  000dd	88 45 f9	 mov	 BYTE PTR __k$[ebp+13], al
  000e0	eb 4c		 jmp	 SHORT $LN1@GetStringA
$LN83@GetStringA:
  000e2	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  000e6	eb 46		 jmp	 SHORT $LN1@GetStringA
$LN84@GetStringA:
  000e8	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  000ec	eb 40		 jmp	 SHORT $LN1@GetStringA
$LN85@GetStringA:
  000ee	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  000f2	eb 3a		 jmp	 SHORT $LN1@GetStringA
$LN86@GetStringA:
  000f4	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  000f8	eb 34		 jmp	 SHORT $LN1@GetStringA
$LN88@GetStringA:
  000fa	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  000fe	eb 2e		 jmp	 SHORT $LN1@GetStringA
$LN89@GetStringA:
  00100	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00104	eb 28		 jmp	 SHORT $LN1@GetStringA
$LN90@GetStringA:
  00106	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0010a	eb 22		 jmp	 SHORT $LN1@GetStringA
$LN91@GetStringA:
  0010c	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00110	eb 1c		 jmp	 SHORT $LN1@GetStringA
$LN92@GetStringA:
  00112	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00116	eb 16		 jmp	 SHORT $LN1@GetStringA
$LN93@GetStringA:
  00118	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0011c	eb 10		 jmp	 SHORT $LN1@GetStringA
$LN94@GetStringA:
  0011e	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00122	eb 0a		 jmp	 SHORT $LN1@GetStringA
$LN95@GetStringA:
  00124	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00128	eb 04		 jmp	 SHORT $LN1@GetStringA
$LN96@GetStringA:
  0012a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@GetStringA:
  0012e	6a 02		 push	 2
  00130	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00133	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+9], 0
  00137	5a		 pop	 edx
$LL104@GetStringA:
  00138	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0013e	83 c0 04	 add	 eax, 4
  00141	4a		 dec	 edx
  00142	75 f4		 jne	 SHORT $LL104@GetStringA
  00144	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH

; 109  : 		return GetStringAttribute(_k);

  00148	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014b	50		 push	 eax
  0014c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetStringAttribute@ioXMLElement@@QBEPBDPBD@Z

; 110  : 	}

  00152	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00155	33 cd		 xor	 ecx, ebp
  00157	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015c	c9		 leave
  0015d	c2 04 00	 ret	 4
??$GetStringAttribute_e@$09@ioXMLElement@@QBEPBDAAY09$$CBD@Z ENDP ; ioXMLElement::GetStringAttribute_e<10>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\anitextwnd.cpp
;	COMDAT ?AddRenderImage@AniLetterSubWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -20					; size = 4
__t$507628 = -16					; size = 7
__$ArrayPad$ = -4					; size = 4
_szType$ = 8						; size = 4
_pImage$ = 12						; size = 4
?AddRenderImage@AniLetterSubWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z PROC ; AniLetterSubWnd::AddRenderImage, COMDAT
; _this$ = ecx

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _pImage$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _szType$[ebp]

; 100  : 	if( szType == "Letter" )

  00019	6a 04		 push	 4
  0001b	c7 45 f0 a1 89
	9f 9e		 mov	 DWORD PTR __t$507628[ebp], -1633711711 ; 9e9f89a1H
  00022	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __t$507628[ebp], -353637139 ; eaebecedH
  00029	89 4d ec	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0002c	66 c7 45 f4 88
	9e		 mov	 WORD PTR __t$507628[ebp+4], 40584 ; 00009e88H
  00032	c6 45 f6 00	 mov	 BYTE PTR __t$507628[ebp+6], 0
  00036	58		 pop	 eax
$LL108@AddRenderI:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN122@AddRenderI
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN122@AddRenderI:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 54 05 f0	 xor	 BYTE PTR __t$507628[ebp+eax], dl
  0004e	40		 inc	 eax
  0004f	83 f8 06	 cmp	 eax, 6
  00052	7c e3		 jl	 SHORT $LL108@AddRenderI
  00054	8b cf		 mov	 ecx, edi
  00056	8d 75 f0	 lea	 esi, DWORD PTR __t$507628[ebp]
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL118@AddRenderI:
  0005f	8a 08		 mov	 cl, BYTE PTR [eax]
  00061	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00063	75 1a		 jne	 SHORT $LN119@AddRenderI
  00065	84 c9		 test	 cl, cl
  00067	74 12		 je	 SHORT $LN120@AddRenderI
  00069	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0006c	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0006f	75 0e		 jne	 SHORT $LN119@AddRenderI
  00071	83 c0 02	 add	 eax, 2
  00074	83 c6 02	 add	 esi, 2
  00077	84 c9		 test	 cl, cl
  00079	75 e4		 jne	 SHORT $LL118@AddRenderI
$LN120@AddRenderI:
  0007b	33 c0		 xor	 eax, eax
  0007d	eb 05		 jmp	 SHORT $LN121@AddRenderI
$LN119@AddRenderI:
  0007f	1b c0		 sbb	 eax, eax
  00081	83 d8 ff	 sbb	 eax, -1
$LN121@AddRenderI:
  00084	85 c0		 test	 eax, eax
  00086	75 23		 jne	 SHORT $LN3@AddRenderI

; 101  : 	{
; 102  : 		SAFEDELETE(m_pLetter);

  00088	8b 75 ec	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0008b	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  00091	85 c9		 test	 ecx, ecx
  00093	74 0e		 je	 SHORT $LN2@AddRenderI
  00095	8b 01		 mov	 eax, DWORD PTR [ecx]
  00097	6a 01		 push	 1
  00099	ff 50 40	 call	 DWORD PTR [eax+64]
  0009c	83 a6 90 01 00
	00 00		 and	 DWORD PTR [esi+400], 0
$LN2@AddRenderI:

; 103  : 		m_pLetter = pImage;

  000a3	89 9e 90 01 00
	00		 mov	 DWORD PTR [esi+400], ebx

; 104  : 	}
; 105  : 	else

  000a9	eb 0b		 jmp	 SHORT $LN1@AddRenderI
$LN3@AddRenderI:

; 106  : 	{
; 107  : 		ioWnd::AddRenderImage( szType, pImage );

  000ab	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  000ae	53		 push	 ebx
  000af	57		 push	 edi
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
$LN1@AddRenderI:

; 108  : 	}
; 109  : }

  000b6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b9	5f		 pop	 edi
  000ba	5e		 pop	 esi
  000bb	33 cd		 xor	 ecx, ebp
  000bd	5b		 pop	 ebx
  000be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c3	c9		 leave
  000c4	c2 08 00	 ret	 8
?AddRenderImage@AniLetterSubWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z ENDP ; AniLetterSubWnd::AddRenderImage
_TEXT	ENDS
PUBLIC	??_C@_03NPKEBKFI@BGM?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_03NPKEBKFI@BGM?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_03NPKEBKFI@BGM?$AA@ DB 'BGM', 00H			; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\anitextwnd.cpp
CONST	ENDS
;	COMDAT ?ParseExtraInfo@AniLetterSubWnd@@UAEXAAVioXMLElement@@@Z
_TEXT	SEGMENT
__k$508879 = -24					; size = 15
__k$508754 = -24					; size = 16
__k$508504 = -24					; size = 14
__k$508392 = -24					; size = 15
__k$507879 = -24					; size = 14
__k$509046 = -20					; size = 10
__k$508629 = -20					; size = 12
__k$508255 = -20					; size = 12
__k$508158 = -20					; size = 10
__k$508017 = -20					; size = 11
__k$507783 = -20					; size = 10
__$ArrayPad$ = -4					; size = 4
_xElement$ = 8						; size = 4
?ParseExtraInfo@AniLetterSubWnd@@UAEXAAVioXMLElement@@@Z PROC ; AniLetterSubWnd::ParseExtraInfo, COMDAT
; _this$ = ecx

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _xElement$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi

; 114  : 	m_stExFactor.dwStartTime = xElement.GetIntAttribute_e( "StartTime" );

  00016	6a 02		 push	 2
  00018	8b f1		 mov	 esi, ecx
  0001a	c7 45 ec be 98
	8a 98		 mov	 DWORD PTR __k$507783[ebp], -1735747394 ; 988a98beH
  00021	c7 45 f0 99 b8
	82 87		 mov	 DWORD PTR __k$507783[ebp+4], -2021476199 ; 8782b899H
  00028	8d 45 ec	 lea	 eax, DWORD PTR __k$507783[ebp]
  0002b	66 c7 45 f4 88
	00		 mov	 WORD PTR __k$507783[ebp+8], 136 ; 00000088H
  00031	59		 pop	 ecx
$LL106@ParseExtra:
  00032	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00038	83 c0 04	 add	 eax, 4
  0003b	49		 dec	 ecx
  0003c	75 f4		 jne	 SHORT $LL106@ParseExtra
  0003e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetIntAttribute@ioXMLElement@@QBEHPBD@Z
  00044	80 75 f4 ed	 xor	 BYTE PTR __k$507783[ebp+8], -19 ; ffffffedH
  00048	8d 45 ec	 lea	 eax, DWORD PTR __k$507783[ebp]
  0004b	50		 push	 eax
  0004c	8b cb		 mov	 ecx, ebx
  0004e	ff d7		 call	 edi
  00050	6a 03		 push	 3
  00052	89 86 d8 01 00
	00		 mov	 DWORD PTR [esi+472], eax

; 115  : 	m_stExFactor.dwStartDuration = xElement.GetIntAttribute_e( "StartDuration" );

  00058	c7 45 e8 be 98
	8a 98		 mov	 DWORD PTR __k$507879[ebp], -1735747394 ; 988a98beH
  0005f	c7 45 ec 99 a8
	9e 98		 mov	 DWORD PTR __k$507879[ebp+4], -1734432615 ; 989ea899H
  00066	c7 45 f0 8c 98
	82 85		 mov	 DWORD PTR __k$507879[ebp+8], -2055038836 ; 8582988cH
  0006d	8d 45 e8	 lea	 eax, DWORD PTR __k$507879[ebp]
  00070	66 c7 45 f4 83
	00		 mov	 WORD PTR __k$507879[ebp+12], 131 ; 00000083H
  00076	59		 pop	 ecx
$LL212@ParseExtra:
  00077	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0007d	83 c0 04	 add	 eax, 4
  00080	49		 dec	 ecx
  00081	75 f4		 jne	 SHORT $LL212@ParseExtra
  00083	80 75 f4 ed	 xor	 BYTE PTR __k$507879[ebp+12], -19 ; ffffffedH
  00087	8d 45 e8	 lea	 eax, DWORD PTR __k$507879[ebp]
  0008a	50		 push	 eax
  0008b	8b cb		 mov	 ecx, ebx
  0008d	ff d7		 call	 edi
  0008f	6a 02		 push	 2
  00091	89 86 dc 01 00
	00		 mov	 DWORD PTR [esi+476], eax

; 116  : 	m_stExFactor.fStartScale = xElement.GetFloatAttribute_e( "StartScale" );

  00097	c7 45 ec be 98
	8a 98		 mov	 DWORD PTR __k$508017[ebp], -1735747394 ; 988a98beH
  0009e	c7 45 f0 99 bf
	88 8b		 mov	 DWORD PTR __k$508017[ebp+4], -1953972327 ; 8b88bf99H
  000a5	66 c7 45 f4 81
	89		 mov	 WORD PTR __k$508017[ebp+8], 35201 ; 00008981H
  000ab	8d 45 ec	 lea	 eax, DWORD PTR __k$508017[ebp]
  000ae	c6 45 f6 00	 mov	 BYTE PTR __k$508017[ebp+10], 0
  000b2	59		 pop	 ecx
$LL318@ParseExtra:
  000b3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000b9	83 c0 04	 add	 eax, 4
  000bc	49		 dec	 ecx
  000bd	75 f4		 jne	 SHORT $LL318@ParseExtra
  000bf	6a 08		 push	 8
  000c1	58		 pop	 eax
$LL315@ParseExtra:
  000c2	8b c8		 mov	 ecx, eax
  000c4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000ca	79 05		 jns	 SHORT $LN1213@ParseExtra
  000cc	49		 dec	 ecx
  000cd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000d0	41		 inc	 ecx
$LN1213@ParseExtra:
  000d1	b2 ed		 mov	 dl, -19			; ffffffedH
  000d3	2a d1		 sub	 dl, cl
  000d5	30 54 05 ec	 xor	 BYTE PTR __k$508017[ebp+eax], dl
  000d9	40		 inc	 eax
  000da	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000dd	7c e3		 jl	 SHORT $LL315@ParseExtra
  000df	8d 45 ec	 lea	 eax, DWORD PTR __k$508017[ebp]
  000e2	50		 push	 eax
  000e3	8b cb		 mov	 ecx, ebx
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetFloatAttribute@ioXMLElement@@QBEMPBD@Z
  000eb	d9 9e f8 01 00
	00		 fstp	 DWORD PTR [esi+504]
  000f1	6a 02		 push	 2

; 117  : 	m_stExFactor.nStartXPos = xElement.GetIntAttribute_e( "StartXPos" );

  000f3	c7 45 ec be 98
	8a 98		 mov	 DWORD PTR __k$508158[ebp], -1735747394 ; 988a98beH
  000fa	c7 45 f0 99 b4
	bb 85		 mov	 DWORD PTR __k$508158[ebp+4], -2051296103 ; 85bbb499H
  00101	8d 45 ec	 lea	 eax, DWORD PTR __k$508158[ebp]
  00104	66 c7 45 f4 9e
	00		 mov	 WORD PTR __k$508158[ebp+8], 158 ; 0000009eH
  0010a	59		 pop	 ecx
$LL424@ParseExtra:
  0010b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00111	83 c0 04	 add	 eax, 4
  00114	49		 dec	 ecx
  00115	75 f4		 jne	 SHORT $LL424@ParseExtra
  00117	80 75 f4 ed	 xor	 BYTE PTR __k$508158[ebp+8], -19 ; ffffffedH
  0011b	8d 45 ec	 lea	 eax, DWORD PTR __k$508158[ebp]
  0011e	50		 push	 eax
  0011f	8b cb		 mov	 ecx, ebx
  00121	ff d7		 call	 edi
  00123	6a 02		 push	 2
  00125	89 86 f0 01 00
	00		 mov	 DWORD PTR [esi+496], eax

; 118  : 	m_stExFactor.nZoomOutXPos = xElement.GetIntAttribute_e( "ZoomOutXPos" );

  0012b	c7 45 ec b7 83
	84 87		 mov	 DWORD PTR __k$508255[ebp], -2021358665 ; 878483b7H
  00132	c7 45 f0 a2 99
	9f b2		 mov	 DWORD PTR __k$508255[ebp+4], -1298163294 ; b29f99a2H
  00139	8d 45 ec	 lea	 eax, DWORD PTR __k$508255[ebp]
  0013c	c7 45 f4 bd 83
	98 00		 mov	 DWORD PTR __k$508255[ebp+8], 9995197 ; 009883bdH
  00143	59		 pop	 ecx
$LL530@ParseExtra:
  00144	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0014a	83 c0 04	 add	 eax, 4
  0014d	49		 dec	 ecx
  0014e	75 f4		 jne	 SHORT $LL530@ParseExtra
  00150	6a 08		 push	 8
  00152	58		 pop	 eax
$LL527@ParseExtra:
  00153	8b c8		 mov	 ecx, eax
  00155	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0015b	79 05		 jns	 SHORT $LN1214@ParseExtra
  0015d	49		 dec	 ecx
  0015e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00161	41		 inc	 ecx
$LN1214@ParseExtra:
  00162	b2 ed		 mov	 dl, -19			; ffffffedH
  00164	2a d1		 sub	 dl, cl
  00166	30 54 05 ec	 xor	 BYTE PTR __k$508255[ebp+eax], dl
  0016a	40		 inc	 eax
  0016b	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0016e	7c e3		 jl	 SHORT $LL527@ParseExtra
  00170	8d 45 ec	 lea	 eax, DWORD PTR __k$508255[ebp]
  00173	50		 push	 eax
  00174	8b cb		 mov	 ecx, ebx
  00176	ff d7		 call	 edi
  00178	6a 03		 push	 3
  0017a	89 86 f4 01 00
	00		 mov	 DWORD PTR [esi+500], eax

; 119  : 	m_stExFactor.fStartYPosRatio = xElement.GetFloatAttribute_e( "StartYPosRatio" );

  00180	c7 45 e8 be 98
	8a 98		 mov	 DWORD PTR __k$508392[ebp], -1735747394 ; 988a98beH
  00187	c7 45 ec 99 b5
	bb 85		 mov	 DWORD PTR __k$508392[ebp+4], -2051295847 ; 85bbb599H
  0018e	c7 45 f0 9e be
	8a 9e		 mov	 DWORD PTR __k$508392[ebp+8], -1635074402 ; 9e8abe9eH
  00195	66 c7 45 f4 84
	83		 mov	 WORD PTR __k$508392[ebp+12], 33668 ; 00008384H
  0019b	8d 45 e8	 lea	 eax, DWORD PTR __k$508392[ebp]
  0019e	c6 45 f6 00	 mov	 BYTE PTR __k$508392[ebp+14], 0
  001a2	59		 pop	 ecx
$LL636@ParseExtra:
  001a3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a9	83 c0 04	 add	 eax, 4
  001ac	49		 dec	 ecx
  001ad	75 f4		 jne	 SHORT $LL636@ParseExtra
  001af	6a 0c		 push	 12			; 0000000cH
  001b1	58		 pop	 eax
$LL633@ParseExtra:
  001b2	8b c8		 mov	 ecx, eax
  001b4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001ba	79 05		 jns	 SHORT $LN1215@ParseExtra
  001bc	49		 dec	 ecx
  001bd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c0	41		 inc	 ecx
$LN1215@ParseExtra:
  001c1	b2 ed		 mov	 dl, -19			; ffffffedH
  001c3	2a d1		 sub	 dl, cl
  001c5	30 54 05 e8	 xor	 BYTE PTR __k$508392[ebp+eax], dl
  001c9	40		 inc	 eax
  001ca	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001cd	7c e3		 jl	 SHORT $LL633@ParseExtra
  001cf	8d 45 e8	 lea	 eax, DWORD PTR __k$508392[ebp]
  001d2	50		 push	 eax
  001d3	8b cb		 mov	 ecx, ebx
  001d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetFloatAttribute@ioXMLElement@@QBEMPBD@Z
  001db	d9 9e fc 01 00
	00		 fstp	 DWORD PTR [esi+508]
  001e1	6a 03		 push	 3

; 120  : 	m_stExFactor.dwDelayDuration = xElement.GetIntAttribute_e( "DelayDuration" );

  001e3	c7 45 e8 a9 89
	87 8b		 mov	 DWORD PTR __k$508504[ebp], -1954051671 ; 8b8789a9H
  001ea	c7 45 ec 94 a8
	9e 98		 mov	 DWORD PTR __k$508504[ebp+4], -1734432620 ; 989ea894H
  001f1	c7 45 f0 8c 98
	82 85		 mov	 DWORD PTR __k$508504[ebp+8], -2055038836 ; 8582988cH
  001f8	8d 45 e8	 lea	 eax, DWORD PTR __k$508504[ebp]
  001fb	66 c7 45 f4 83
	00		 mov	 WORD PTR __k$508504[ebp+12], 131 ; 00000083H
  00201	59		 pop	 ecx
$LL742@ParseExtra:
  00202	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00208	83 c0 04	 add	 eax, 4
  0020b	49		 dec	 ecx
  0020c	75 f4		 jne	 SHORT $LL742@ParseExtra
  0020e	80 75 f4 ed	 xor	 BYTE PTR __k$508504[ebp+12], -19 ; ffffffedH
  00212	8d 45 e8	 lea	 eax, DWORD PTR __k$508504[ebp]
  00215	50		 push	 eax
  00216	8b cb		 mov	 ecx, ebx
  00218	ff d7		 call	 edi
  0021a	6a 02		 push	 2
  0021c	89 86 e0 01 00
	00		 mov	 DWORD PTR [esi+480], eax

; 121  : 	m_stExFactor.dwVibDuration = xElement.GetIntAttribute_e( "VibDuration" );

  00222	c7 45 ec bb 85
	89 ae		 mov	 DWORD PTR __k$508629[ebp], -1366719045 ; ae8985bbH
  00229	c7 45 f0 98 9e
	8a 9e		 mov	 DWORD PTR __k$508629[ebp+4], -1635082600 ; 9e8a9e98H
  00230	8d 45 ec	 lea	 eax, DWORD PTR __k$508629[ebp]
  00233	c7 45 f4 84 83
	85 00		 mov	 DWORD PTR __k$508629[ebp+8], 8749956 ; 00858384H
  0023a	59		 pop	 ecx
$LL848@ParseExtra:
  0023b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00241	83 c0 04	 add	 eax, 4
  00244	49		 dec	 ecx
  00245	75 f4		 jne	 SHORT $LL848@ParseExtra
  00247	6a 08		 push	 8
  00249	58		 pop	 eax
$LL845@ParseExtra:
  0024a	8b c8		 mov	 ecx, eax
  0024c	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00252	79 05		 jns	 SHORT $LN1216@ParseExtra
  00254	49		 dec	 ecx
  00255	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00258	41		 inc	 ecx
$LN1216@ParseExtra:
  00259	b2 ed		 mov	 dl, -19			; ffffffedH
  0025b	2a d1		 sub	 dl, cl
  0025d	30 54 05 ec	 xor	 BYTE PTR __k$508629[ebp+eax], dl
  00261	40		 inc	 eax
  00262	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00265	7c e3		 jl	 SHORT $LL845@ParseExtra
  00267	8d 45 ec	 lea	 eax, DWORD PTR __k$508629[ebp]
  0026a	50		 push	 eax
  0026b	8b cb		 mov	 ecx, ebx
  0026d	ff d7		 call	 edi
  0026f	6a 03		 push	 3
  00271	89 86 e4 01 00
	00		 mov	 DWORD PTR [esi+484], eax

; 122  : 	m_stExFactor.dwTextClrDuration = xElement.GetIntAttribute_e( "TextClrDuration" );

  00277	c7 45 e8 b9 89
	93 9e		 mov	 DWORD PTR __k$508754[ebp], -1634498119 ; 9e9389b9H
  0027e	c7 45 ec ae 80
	99 ae		 mov	 DWORD PTR __k$508754[ebp+4], -1365671762 ; ae9980aeH
  00285	c7 45 f0 98 9e
	8a 9e		 mov	 DWORD PTR __k$508754[ebp+8], -1635082600 ; 9e8a9e98H
  0028c	8d 45 e8	 lea	 eax, DWORD PTR __k$508754[ebp]
  0028f	c7 45 f4 84 83
	85 00		 mov	 DWORD PTR __k$508754[ebp+12], 8749956 ; 00858384H
  00296	59		 pop	 ecx
$LL954@ParseExtra:
  00297	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0029d	83 c0 04	 add	 eax, 4
  002a0	49		 dec	 ecx
  002a1	75 f4		 jne	 SHORT $LL954@ParseExtra
  002a3	6a 0c		 push	 12			; 0000000cH
  002a5	58		 pop	 eax
$LL951@ParseExtra:
  002a6	8b c8		 mov	 ecx, eax
  002a8	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  002ae	79 05		 jns	 SHORT $LN1217@ParseExtra
  002b0	49		 dec	 ecx
  002b1	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002b4	41		 inc	 ecx
$LN1217@ParseExtra:
  002b5	b2 ed		 mov	 dl, -19			; ffffffedH
  002b7	2a d1		 sub	 dl, cl
  002b9	30 54 05 e8	 xor	 BYTE PTR __k$508754[ebp+eax], dl
  002bd	40		 inc	 eax
  002be	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  002c1	7c e3		 jl	 SHORT $LL951@ParseExtra
  002c3	8d 45 e8	 lea	 eax, DWORD PTR __k$508754[ebp]
  002c6	50		 push	 eax
  002c7	8b cb		 mov	 ecx, ebx
  002c9	ff d7		 call	 edi
  002cb	6a 03		 push	 3
  002cd	89 86 e8 01 00
	00		 mov	 DWORD PTR [esi+488], eax

; 123  : 	m_stExFactor.dwZoomInDuration = xElement.GetIntAttribute_e( "ZoomInDuration" );

  002d3	c7 45 e8 b7 83
	84 87		 mov	 DWORD PTR __k$508879[ebp], -2021358665 ; 878483b7H
  002da	c7 45 ec a4 82
	af 9f		 mov	 DWORD PTR __k$508879[ebp+4], -1615887708 ; 9faf82a4H
  002e1	c7 45 f0 9f 8d
	9f 83		 mov	 DWORD PTR __k$508879[ebp+8], -2086695521 ; 839f8d9fH
  002e8	66 c7 45 f4 82
	82		 mov	 WORD PTR __k$508879[ebp+12], 33410 ; 00008282H
  002ee	8d 45 e8	 lea	 eax, DWORD PTR __k$508879[ebp]
  002f1	c6 45 f6 00	 mov	 BYTE PTR __k$508879[ebp+14], 0
  002f5	59		 pop	 ecx
$LL1060@ParseExtra:
  002f6	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002fc	83 c0 04	 add	 eax, 4
  002ff	49		 dec	 ecx
  00300	75 f4		 jne	 SHORT $LL1060@ParseExtra
  00302	6a 0c		 push	 12			; 0000000cH
  00304	58		 pop	 eax
$LL1057@ParseExtra:
  00305	8b c8		 mov	 ecx, eax
  00307	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0030d	79 05		 jns	 SHORT $LN1218@ParseExtra
  0030f	49		 dec	 ecx
  00310	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00313	41		 inc	 ecx
$LN1218@ParseExtra:
  00314	b2 ed		 mov	 dl, -19			; ffffffedH
  00316	2a d1		 sub	 dl, cl
  00318	30 54 05 e8	 xor	 BYTE PTR __k$508879[ebp+eax], dl
  0031c	40		 inc	 eax
  0031d	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00320	7c e3		 jl	 SHORT $LL1057@ParseExtra
  00322	8d 45 e8	 lea	 eax, DWORD PTR __k$508879[ebp]
  00325	50		 push	 eax
  00326	8b cb		 mov	 ecx, ebx
  00328	ff d7		 call	 edi

; 124  : 
; 125  : 	m_szBGM = xElement.GetStringAttribute( "BGM" );

  0032a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetStringAttribute@ioXMLElement@@QBEPBDPBD@Z
  00330	68 00 00 00 00	 push	 OFFSET ??_C@_03NPKEBKFI@BGM?$AA@
  00335	8b cb		 mov	 ecx, ebx
  00337	89 86 ec 01 00
	00		 mov	 DWORD PTR [esi+492], eax
  0033d	ff d7		 call	 edi
  0033f	50		 push	 eax
  00340	8d 8e 00 02 00
	00		 lea	 ecx, DWORD PTR [esi+512]
  00346	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  0034c	6a 02		 push	 2

; 126  : 	m_szEffect = xElement.GetStringAttribute_e( "EffectSnd" );

  0034e	c7 45 ec a8 8a
	8d 8f		 mov	 DWORD PTR __k$509046[ebp], -1886549336 ; 8f8d8aa8H
  00355	c7 45 f0 8e 98
	b8 84		 mov	 DWORD PTR __k$509046[ebp+4], -2068277106 ; 84b8988eH
  0035c	8d 45 ec	 lea	 eax, DWORD PTR __k$509046[ebp]
  0035f	66 c7 45 f4 89
	00		 mov	 WORD PTR __k$509046[ebp+8], 137 ; 00000089H
  00365	59		 pop	 ecx
$LL1166@ParseExtra:
  00366	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0036c	83 c0 04	 add	 eax, 4
  0036f	49		 dec	 ecx
  00370	75 f4		 jne	 SHORT $LL1166@ParseExtra
  00372	80 75 f4 ed	 xor	 BYTE PTR __k$509046[ebp+8], -19 ; ffffffedH
  00376	8d 45 ec	 lea	 eax, DWORD PTR __k$509046[ebp]
  00379	50		 push	 eax
  0037a	8b cb		 mov	 ecx, ebx
  0037c	ff d7		 call	 edi
  0037e	50		 push	 eax
  0037f	8d 8e 10 02 00
	00		 lea	 ecx, DWORD PTR [esi+528]
  00385	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 127  : }

  0038b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0038e	5f		 pop	 edi
  0038f	5e		 pop	 esi
  00390	33 cd		 xor	 ecx, ebp
  00392	5b		 pop	 ebx
  00393	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00398	c9		 leave
  00399	c2 04 00	 ret	 4
?ParseExtraInfo@AniLetterSubWnd@@UAEXAAVioXMLElement@@@Z ENDP ; AniLetterSubWnd::ParseExtraInfo
_TEXT	ENDS
END
