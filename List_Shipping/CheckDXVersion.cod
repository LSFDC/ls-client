; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\CheckDXVersion.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_1CO@OMGOKEDM@?$AAs?$AAz?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAX?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AAL?$AAe?$AAt?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@LGFLHEGN@?$AAd?$AAw?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAX?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AAM?$AAi?$AAn?$AAo?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@CBMGDKGD@?$AAd?$AAw?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAX?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AAM?$AAa?$AAj?$AAo?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CE@PCMHGHPI@?$AAD?$AAx?$AAD?$AAi?$AAa?$AAg?$AA_?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AAI?$AAn?$AAf?$AAo?$AA?$AA@ ; `string'
PUBLIC	_pcDirectXVersionLetter$GSCopy$
PUBLIC	_pdwDirectXVersionMinor$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?GetDirectXVersionViaDxDiag@@YAJPAK0PAD@Z	; GetDirectXVersionViaDxDiag
EXTRN	__imp__CoUninitialize@0:PROC
EXTRN	__imp__WideCharToMultiByte@32:PROC
EXTRN	__imp__SysStringLen@4:PROC
EXTRN	__imp__VariantClear@4:PROC
EXTRN	__imp__VariantInit@4:PROC
EXTRN	__imp__CoCreateInstance@20:PROC
EXTRN	_CLSID_DxDiagProvider:BYTE
EXTRN	_IID_IDxDiagProvider:BYTE
EXTRN	__imp__CoInitialize@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_1CO@OMGOKEDM@?$AAs?$AAz?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAX?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AAL?$AAe?$AAt?$AAt?$AAe?$AAr?$AA?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\checkdxversion.cpp
CONST	SEGMENT
??_C@_1CO@OMGOKEDM@?$AAs?$AAz?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAX?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AAL?$AAe?$AAt?$AAt?$AAe?$AAr?$AA?$AA@ DB 's'
	DB	00H, 'z', 00H, 'D', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'X', 00H, 'V', 00H, 'e', 00H, 'r', 00H, 's', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, 'L', 00H, 'e', 00H, 't', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@LGFLHEGN@?$AAd?$AAw?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAX?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AAM?$AAi?$AAn?$AAo?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@LGFLHEGN@?$AAd?$AAw?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAX?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AAM?$AAi?$AAn?$AAo?$AAr?$AA?$AA@ DB 'd'
	DB	00H, 'w', 00H, 'D', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'X', 00H, 'V', 00H, 'e', 00H, 'r', 00H, 's', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, 'M', 00H, 'i', 00H, 'n', 00H, 'o', 00H
	DB	'r', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@CBMGDKGD@?$AAd?$AAw?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAX?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AAM?$AAa?$AAj?$AAo?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@CBMGDKGD@?$AAd?$AAw?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAX?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AAM?$AAa?$AAj?$AAo?$AAr?$AA?$AA@ DB 'd'
	DB	00H, 'w', 00H, 'D', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'X', 00H, 'V', 00H, 'e', 00H, 'r', 00H, 's', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, 'M', 00H, 'a', 00H, 'j', 00H, 'o', 00H
	DB	'r', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@PCMHGHPI@?$AAD?$AAx?$AAD?$AAi?$AAa?$AAg?$AA_?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AAI?$AAn?$AAf?$AAo?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@PCMHGHPI@?$AAD?$AAx?$AAD?$AAi?$AAa?$AAg?$AA_?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AAI?$AAn?$AAf?$AAo?$AA?$AA@ DB 'D'
	DB	00H, 'x', 00H, 'D', 00H, 'i', 00H, 'a', 00H, 'g', 00H, '_', 00H
	DB	'S', 00H, 'y', 00H, 's', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'I'
	DB	00H, 'n', 00H, 'f', 00H, 'o', 00H, 00H, 00H	; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?GetDirectXVersionViaDxDiag@@YAJPAK0PAD@Z
_TEXT	SEGMENT
_dxDiagInitParam$505206 = -76				; size = 16
_pcDirectXVersionLetter$GSCopy$ = -60			; size = 4
_pdwDirectXVersionMinor$GSCopy$ = -56			; size = 4
_var$505218 = -52					; size = 16
_pDxDiagRoot$505211 = -36				; size = 4
_pDxDiagProvider$ = -32					; size = 4
_pDxDiagSystemInfo$505212 = -28				; size = 4
_bCleanupCOM$ = -21					; size = 1
_bSuccessGettingLetter$ = -20				; size = 1
_bSuccessGettingMajor$ = -19				; size = 1
_bSuccessGettingMinor$ = -18				; size = 1
_bGotDirectXVersion$ = -17				; size = 1
_strDestination$505230 = -16				; size = 10
__$ArrayPad$ = -4					; size = 4
_pdwDirectXVersionMajor$ = 8				; size = 4
_pdwDirectXVersionMinor$ = 12				; size = 4
_pcDirectXVersionLetter$ = 16				; size = 4
?GetDirectXVersionViaDxDiag@@YAJPAK0PAD@Z PROC		; GetDirectXVersionViaDxDiag, COMDAT

; 138  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _pdwDirectXVersionMinor$[ebp]
  00013	53		 push	 ebx

; 139  :     HRESULT hr;
; 140  :     bool bCleanupCOM = false;
; 141  : 
; 142  :     bool bSuccessGettingMajor = false;

  00014	33 db		 xor	 ebx, ebx
  00016	56		 push	 esi
  00017	8b 75 08	 mov	 esi, DWORD PTR _pdwDirectXVersionMajor$[ebp]
  0001a	89 45 c8	 mov	 DWORD PTR _pdwDirectXVersionMinor$GSCopy$[ebp], eax
  0001d	8b 45 10	 mov	 eax, DWORD PTR _pcDirectXVersionLetter$[ebp]

; 143  :     bool bSuccessGettingMinor = false;
; 144  :     bool bSuccessGettingLetter = false;
; 145  : 
; 146  :     // Init COM.  COM may fail if its already been inited with a different
; 147  :     // concurrency model.  And if it fails you shouldn't release it.
; 148  :     hr = CoInitialize(NULL);

  00020	53		 push	 ebx
  00021	89 45 c4	 mov	 DWORD PTR _pcDirectXVersionLetter$GSCopy$[ebp], eax
  00024	88 5d ed	 mov	 BYTE PTR _bSuccessGettingMajor$[ebp], bl
  00027	88 5d ee	 mov	 BYTE PTR _bSuccessGettingMinor$[ebp], bl
  0002a	88 5d ec	 mov	 BYTE PTR _bSuccessGettingLetter$[ebp], bl
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoInitialize@4

; 149  :     bCleanupCOM = SUCCEEDED(hr);

  00033	85 c0		 test	 eax, eax

; 150  : 
; 151  :     // Get an IDxDiagProvider
; 152  :     bool bGotDirectXVersion = false;
; 153  :     IDxDiagProvider* pDxDiagProvider = NULL;
; 154  :     hr = CoCreateInstance( CLSID_DxDiagProvider,
; 155  :                            NULL,
; 156  :                            CLSCTX_INPROC_SERVER,
; 157  :                            IID_IDxDiagProvider,
; 158  :                            (LPVOID*) &pDxDiagProvider );

  00035	8d 45 e0	 lea	 eax, DWORD PTR _pDxDiagProvider$[ebp]
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET _IID_IDxDiagProvider
  0003e	6a 01		 push	 1
  00040	53		 push	 ebx
  00041	68 00 00 00 00	 push	 OFFSET _CLSID_DxDiagProvider
  00046	0f 99 45 eb	 setns	 BYTE PTR _bCleanupCOM$[ebp]
  0004a	88 5d ef	 mov	 BYTE PTR _bGotDirectXVersion$[ebp], bl
  0004d	89 5d e0	 mov	 DWORD PTR _pDxDiagProvider$[ebp], ebx
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoCreateInstance@20

; 159  :     if( SUCCEEDED(hr) )

  00056	85 c0		 test	 eax, eax
  00058	0f 88 5f 01 00
	00		 js	 $LN14@GetDirectX

; 160  :     {
; 161  :         // Fill out a DXDIAG_INIT_PARAMS struct
; 162  :         DXDIAG_INIT_PARAMS dxDiagInitParam;
; 163  :         ZeroMemory( &dxDiagInitParam, sizeof(DXDIAG_INIT_PARAMS) );

  0005e	57		 push	 edi
  0005f	33 c0		 xor	 eax, eax
  00061	8d 7d b4	 lea	 edi, DWORD PTR _dxDiagInitParam$505206[ebp]
  00064	ab		 stosd
  00065	ab		 stosd
  00066	ab		 stosd
  00067	ab		 stosd

; 164  :         dxDiagInitParam.dwSize                  = sizeof(DXDIAG_INIT_PARAMS);
; 165  :         dxDiagInitParam.dwDxDiagHeaderVersion   = DXDIAG_DX9_SDK_VERSION;
; 166  :         dxDiagInitParam.bAllowWHQLChecks        = false;
; 167  :         dxDiagInitParam.pReserved               = NULL;
; 168  : 
; 169  :         // Init the m_pDxDiagProvider
; 170  :         hr = pDxDiagProvider->Initialize( &dxDiagInitParam );

  00068	8b 45 e0	 mov	 eax, DWORD PTR _pDxDiagProvider$[ebp]
  0006b	8d 55 b4	 lea	 edx, DWORD PTR _dxDiagInitParam$505206[ebp]
  0006e	52		 push	 edx
  0006f	c7 45 b4 10 00
	00 00		 mov	 DWORD PTR _dxDiagInitParam$505206[ebp], 16 ; 00000010H
  00076	c7 45 b8 6f 00
	00 00		 mov	 DWORD PTR _dxDiagInitParam$505206[ebp+4], 111 ; 0000006fH
  0007d	89 5d bc	 mov	 DWORD PTR _dxDiagInitParam$505206[ebp+8], ebx
  00080	89 5d c0	 mov	 DWORD PTR _dxDiagInitParam$505206[ebp+12], ebx
  00083	8b 08		 mov	 ecx, DWORD PTR [eax]
  00085	50		 push	 eax
  00086	ff 51 0c	 call	 DWORD PTR [ecx+12]
  00089	5f		 pop	 edi

; 171  :         if( SUCCEEDED(hr) )

  0008a	85 c0		 test	 eax, eax
  0008c	0f 88 22 01 00
	00		 js	 $LN12@GetDirectX

; 172  :         {
; 173  :             IDxDiagContainer* pDxDiagRoot = NULL;
; 174  :             IDxDiagContainer* pDxDiagSystemInfo = NULL;
; 175  : 
; 176  :             // Get the DxDiag root container
; 177  :             hr = pDxDiagProvider->GetRootContainer( &pDxDiagRoot );

  00092	8b 45 e0	 mov	 eax, DWORD PTR _pDxDiagProvider$[ebp]
  00095	8d 55 dc	 lea	 edx, DWORD PTR _pDxDiagRoot$505211[ebp]
  00098	52		 push	 edx
  00099	89 5d dc	 mov	 DWORD PTR _pDxDiagRoot$505211[ebp], ebx
  0009c	89 5d e4	 mov	 DWORD PTR _pDxDiagSystemInfo$505212[ebp], ebx
  0009f	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a1	50		 push	 eax
  000a2	ff 51 10	 call	 DWORD PTR [ecx+16]

; 178  :             if( SUCCEEDED(hr) )

  000a5	85 c0		 test	 eax, eax
  000a7	0f 88 07 01 00
	00		 js	 $LN12@GetDirectX

; 179  :             {
; 180  :                 // Get the object called DxDiag_SystemInfo
; 181  :                 hr = pDxDiagRoot->GetChildContainer( L"DxDiag_SystemInfo", &pDxDiagSystemInfo );

  000ad	8b 45 dc	 mov	 eax, DWORD PTR _pDxDiagRoot$505211[ebp]
  000b0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b2	8d 55 e4	 lea	 edx, DWORD PTR _pDxDiagSystemInfo$505212[ebp]
  000b5	52		 push	 edx
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_1CE@PCMHGHPI@?$AAD?$AAx?$AAD?$AAi?$AAa?$AAg?$AA_?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AAI?$AAn?$AAf?$AAo?$AA?$AA@
  000bb	50		 push	 eax
  000bc	ff 51 14	 call	 DWORD PTR [ecx+20]

; 182  :                 if( SUCCEEDED(hr) )

  000bf	85 c0		 test	 eax, eax
  000c1	0f 88 e4 00 00
	00		 js	 $LN11@GetDirectX

; 183  :                 {
; 184  :                     VARIANT var;
; 185  :                     VariantInit( &var );

  000c7	8d 45 cc	 lea	 eax, DWORD PTR _var$505218[ebp]
  000ca	50		 push	 eax
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantInit@4

; 186  : 
; 187  :                     // Get the "dwDirectXVersionMajor" property
; 188  :                     hr = pDxDiagSystemInfo->GetProp( L"dwDirectXVersionMajor", &var );

  000d1	8b 45 e4	 mov	 eax, DWORD PTR _pDxDiagSystemInfo$505212[ebp]
  000d4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d6	8d 55 cc	 lea	 edx, DWORD PTR _var$505218[ebp]
  000d9	52		 push	 edx
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_1CM@CBMGDKGD@?$AAd?$AAw?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAX?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AAM?$AAa?$AAj?$AAo?$AAr?$AA?$AA@
  000df	50		 push	 eax
  000e0	ff 51 20	 call	 DWORD PTR [ecx+32]

; 189  :                     if( SUCCEEDED(hr) && var.vt == VT_UI4 )

  000e3	85 c0		 test	 eax, eax
  000e5	78 14		 js	 SHORT $LN10@GetDirectX
  000e7	66 83 7d cc 13	 cmp	 WORD PTR _var$505218[ebp], 19 ; 00000013H
  000ec	75 0d		 jne	 SHORT $LN10@GetDirectX

; 190  :                     {
; 191  :                         if( pdwDirectXVersionMajor )

  000ee	3b f3		 cmp	 esi, ebx
  000f0	74 05		 je	 SHORT $LN9@GetDirectX

; 192  :                             *pdwDirectXVersionMajor = var.ulVal;

  000f2	8b 45 d4	 mov	 eax, DWORD PTR _var$505218[ebp+8]
  000f5	89 06		 mov	 DWORD PTR [esi], eax
$LN9@GetDirectX:

; 193  :                         bSuccessGettingMajor = true;

  000f7	c6 45 ed 01	 mov	 BYTE PTR _bSuccessGettingMajor$[ebp], 1
$LN10@GetDirectX:

; 194  :                     }
; 195  :                     VariantClear( &var );

  000fb	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__VariantClear@4
  00101	8d 45 cc	 lea	 eax, DWORD PTR _var$505218[ebp]
  00104	50		 push	 eax
  00105	ff d6		 call	 esi

; 196  : 
; 197  :                     // Get the "dwDirectXVersionMinor" property
; 198  :                     hr = pDxDiagSystemInfo->GetProp( L"dwDirectXVersionMinor", &var );

  00107	8b 45 e4	 mov	 eax, DWORD PTR _pDxDiagSystemInfo$505212[ebp]
  0010a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010c	8d 55 cc	 lea	 edx, DWORD PTR _var$505218[ebp]
  0010f	52		 push	 edx
  00110	68 00 00 00 00	 push	 OFFSET ??_C@_1CM@LGFLHEGN@?$AAd?$AAw?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAX?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AAM?$AAi?$AAn?$AAo?$AAr?$AA?$AA@
  00115	50		 push	 eax
  00116	ff 51 20	 call	 DWORD PTR [ecx+32]

; 199  :                     if( SUCCEEDED(hr) && var.vt == VT_UI4 )

  00119	85 c0		 test	 eax, eax
  0011b	78 17		 js	 SHORT $LN8@GetDirectX
  0011d	66 83 7d cc 13	 cmp	 WORD PTR _var$505218[ebp], 19 ; 00000013H
  00122	75 10		 jne	 SHORT $LN8@GetDirectX

; 200  :                     {
; 201  :                         if( pdwDirectXVersionMinor )

  00124	8b 45 c8	 mov	 eax, DWORD PTR _pdwDirectXVersionMinor$GSCopy$[ebp]
  00127	3b c3		 cmp	 eax, ebx
  00129	74 05		 je	 SHORT $LN7@GetDirectX

; 202  :                             *pdwDirectXVersionMinor = var.ulVal;

  0012b	8b 4d d4	 mov	 ecx, DWORD PTR _var$505218[ebp+8]
  0012e	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@GetDirectX:

; 203  :                         bSuccessGettingMinor = true;

  00130	c6 45 ee 01	 mov	 BYTE PTR _bSuccessGettingMinor$[ebp], 1
$LN8@GetDirectX:

; 204  :                     }
; 205  :                     VariantClear( &var );

  00134	8d 45 cc	 lea	 eax, DWORD PTR _var$505218[ebp]
  00137	50		 push	 eax
  00138	ff d6		 call	 esi

; 206  : 
; 207  :                     // Get the "szDirectXVersionLetter" property
; 208  :                     hr = pDxDiagSystemInfo->GetProp( L"szDirectXVersionLetter", &var );

  0013a	8b 45 e4	 mov	 eax, DWORD PTR _pDxDiagSystemInfo$505212[ebp]
  0013d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0013f	8d 55 cc	 lea	 edx, DWORD PTR _var$505218[ebp]
  00142	52		 push	 edx
  00143	68 00 00 00 00	 push	 OFFSET ??_C@_1CO@OMGOKEDM@?$AAs?$AAz?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAX?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AAL?$AAe?$AAt?$AAt?$AAe?$AAr?$AA?$AA@
  00148	50		 push	 eax
  00149	ff 51 20	 call	 DWORD PTR [ecx+32]

; 209  :                     if( SUCCEEDED(hr) && var.vt == VT_BSTR && SysStringLen( var.bstrVal ) != 0 )

  0014c	85 c0		 test	 eax, eax
  0014e	78 39		 js	 SHORT $LN6@GetDirectX
  00150	66 83 7d cc 08	 cmp	 WORD PTR _var$505218[ebp], 8
  00155	75 32		 jne	 SHORT $LN6@GetDirectX
  00157	ff 75 d4	 push	 DWORD PTR _var$505218[ebp+8]
  0015a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysStringLen@4
  00160	85 c0		 test	 eax, eax
  00162	74 25		 je	 SHORT $LN6@GetDirectX

; 210  :                     {
; 211  : #ifdef UNICODE
; 212  :                         *pcDirectXVersionLetter = var.bstrVal[0];
; 213  : #else
; 214  :                         char strDestination[10];
; 215  :                         WideCharToMultiByte( CP_ACP, 0, var.bstrVal, -1, strDestination, 10*sizeof(CHAR), NULL, NULL );

  00164	53		 push	 ebx
  00165	53		 push	 ebx
  00166	6a 0a		 push	 10			; 0000000aH
  00168	8d 45 f0	 lea	 eax, DWORD PTR _strDestination$505230[ebp]
  0016b	50		 push	 eax
  0016c	6a ff		 push	 -1
  0016e	ff 75 d4	 push	 DWORD PTR _var$505218[ebp+8]
  00171	53		 push	 ebx
  00172	53		 push	 ebx
  00173	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32

; 216  :                         if( pcDirectXVersionLetter )

  00179	8b 45 c4	 mov	 eax, DWORD PTR _pcDirectXVersionLetter$GSCopy$[ebp]
  0017c	3b c3		 cmp	 eax, ebx
  0017e	74 05		 je	 SHORT $LN5@GetDirectX

; 217  :                             *pcDirectXVersionLetter = strDestination[0];

  00180	8a 4d f0	 mov	 cl, BYTE PTR _strDestination$505230[ebp]
  00183	88 08		 mov	 BYTE PTR [eax], cl
$LN5@GetDirectX:

; 218  : #endif
; 219  :                         bSuccessGettingLetter = true;

  00185	c6 45 ec 01	 mov	 BYTE PTR _bSuccessGettingLetter$[ebp], 1
$LN6@GetDirectX:

; 220  :                     }
; 221  :                     VariantClear( &var );

  00189	8d 45 cc	 lea	 eax, DWORD PTR _var$505218[ebp]
  0018c	50		 push	 eax
  0018d	ff d6		 call	 esi

; 222  : 
; 223  :                     // If it all worked right, then mark it down
; 224  :                     if( bSuccessGettingMajor && bSuccessGettingMinor && bSuccessGettingLetter )

  0018f	38 5d ed	 cmp	 BYTE PTR _bSuccessGettingMajor$[ebp], bl
  00192	74 0e		 je	 SHORT $LN4@GetDirectX
  00194	38 5d ee	 cmp	 BYTE PTR _bSuccessGettingMinor$[ebp], bl
  00197	74 09		 je	 SHORT $LN4@GetDirectX
  00199	38 5d ec	 cmp	 BYTE PTR _bSuccessGettingLetter$[ebp], bl
  0019c	74 04		 je	 SHORT $LN4@GetDirectX

; 225  :                         bGotDirectXVersion = true;

  0019e	c6 45 ef 01	 mov	 BYTE PTR _bGotDirectXVersion$[ebp], 1
$LN4@GetDirectX:

; 226  : 
; 227  :                     pDxDiagSystemInfo->Release();

  001a2	8b 45 e4	 mov	 eax, DWORD PTR _pDxDiagSystemInfo$505212[ebp]
  001a5	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a7	50		 push	 eax
  001a8	ff 51 08	 call	 DWORD PTR [ecx+8]
$LN11@GetDirectX:

; 228  :                 }
; 229  : 
; 230  :                 pDxDiagRoot->Release();

  001ab	8b 45 dc	 mov	 eax, DWORD PTR _pDxDiagRoot$505211[ebp]
  001ae	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b0	50		 push	 eax
  001b1	ff 51 08	 call	 DWORD PTR [ecx+8]
$LN12@GetDirectX:

; 231  :             }
; 232  :         }
; 233  : 
; 234  :         pDxDiagProvider->Release();

  001b4	8b 45 e0	 mov	 eax, DWORD PTR _pDxDiagProvider$[ebp]
  001b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b9	50		 push	 eax
  001ba	ff 51 08	 call	 DWORD PTR [ecx+8]
$LN14@GetDirectX:

; 235  :     }
; 236  : 
; 237  :     if( bCleanupCOM )

  001bd	38 5d eb	 cmp	 BYTE PTR _bCleanupCOM$[ebp], bl
  001c0	74 06		 je	 SHORT $LN3@GetDirectX

; 238  :         CoUninitialize();

  001c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoUninitialize@0
$LN3@GetDirectX:

; 239  : 
; 240  :     if( bGotDirectXVersion )

  001c8	38 5d ef	 cmp	 BYTE PTR _bGotDirectXVersion$[ebp], bl
  001cb	5e		 pop	 esi
  001cc	5b		 pop	 ebx
  001cd	74 04		 je	 SHORT $LN2@GetDirectX

; 241  :         return S_OK;

  001cf	33 c0		 xor	 eax, eax
  001d1	eb 05		 jmp	 SHORT $LN1@GetDirectX
$LN2@GetDirectX:

; 242  :     else
; 243  :         return E_FAIL;

  001d3	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
$LN1@GetDirectX:

; 244  : }

  001d8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001db	33 cd		 xor	 ecx, ebp
  001dd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e2	c9		 leave
  001e3	c3		 ret	 0
?GetDirectXVersionViaDxDiag@@YAJPAK0PAD@Z ENDP		; GetDirectXVersionViaDxDiag
_TEXT	ENDS
PUBLIC	??_C@_01KICIPPFI@?2?$AA@			; `string'
PUBLIC	?GetFileVersion@@YAJPADPAT_ULARGE_INTEGER@@@Z	; GetFileVersion
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_VerQueryValueA@16:PROC
EXTRN	_GetFileVersionInfoA@16:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	_GetFileVersionInfoSizeA@8:PROC
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT
??_C@_01KICIPPFI@?2?$AA@ DB '\', 00H			; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?GetFileVersion@@YAJPADPAT_ULARGE_INTEGER@@@Z
_TEXT	SEGMENT
_dwHandle$ = -8						; size = 4
_cb$ = -4						; size = 4
_pVersion$505406 = 8					; size = 4
_szPath$ = 8						; size = 4
_pllFileVersion$ = 12					; size = 4
?GetFileVersion@@YAJPADPAT_ULARGE_INTEGER@@@Z PROC	; GetFileVersion, COMDAT

; 495  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 496  :     if( szPath == NULL || pllFileVersion == NULL )

  00005	83 7d 08 00	 cmp	 DWORD PTR _szPath$[ebp], 0
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	0f 84 86 00 00
	00		 je	 $LN5@GetFileVer
  00011	8b 7d 0c	 mov	 edi, DWORD PTR _pllFileVersion$[ebp]
  00014	85 ff		 test	 edi, edi
  00016	74 7f		 je	 SHORT $LN5@GetFileVer

; 498  : 
; 499  :     DWORD dwHandle;
; 500  :     UINT  cb;
; 501  :     cb = GetFileVersionInfoSize( szPath, &dwHandle );

  00018	8d 45 f8	 lea	 eax, DWORD PTR _dwHandle$[ebp]
  0001b	50		 push	 eax
  0001c	ff 75 08	 push	 DWORD PTR _szPath$[ebp]
  0001f	e8 00 00 00 00	 call	 _GetFileVersionInfoSizeA@8
  00024	89 45 fc	 mov	 DWORD PTR _cb$[ebp], eax

; 502  :     if (cb > 0)

  00027	85 c0		 test	 eax, eax
  00029	74 65		 je	 SHORT $LN4@GetFileVer

; 503  :     {
; 504  :         BYTE* pFileVersionBuffer = new BYTE[cb];

  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00031	8b f0		 mov	 esi, eax
  00033	59		 pop	 ecx

; 505  :         if( pFileVersionBuffer == NULL )

  00034	85 f6		 test	 esi, esi
  00036	75 07		 jne	 SHORT $LN3@GetFileVer

; 506  :             return E_OUTOFMEMORY;

  00038	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  0003d	eb 5d		 jmp	 SHORT $LN7@GetFileVer
$LN3@GetFileVer:

; 507  : 
; 508  :         if (GetFileVersionInfo( szPath, 0, cb, pFileVersionBuffer))

  0003f	56		 push	 esi
  00040	ff 75 fc	 push	 DWORD PTR _cb$[ebp]
  00043	6a 00		 push	 0
  00045	ff 75 08	 push	 DWORD PTR _szPath$[ebp]
  00048	e8 00 00 00 00	 call	 _GetFileVersionInfoA@16
  0004d	85 c0		 test	 eax, eax
  0004f	74 38		 je	 SHORT $LN1@GetFileVer

; 509  :         {
; 510  :             VS_FIXEDFILEINFO* pVersion = NULL;

  00051	83 65 08 00	 and	 DWORD PTR _pVersion$505406[ebp], 0

; 511  :             if (VerQueryValue(pFileVersionBuffer, TEXT("\\"), (VOID**)&pVersion, &cb) &&
; 512  :                 pVersion != NULL)

  00055	8d 45 fc	 lea	 eax, DWORD PTR _cb$[ebp]
  00058	50		 push	 eax
  00059	8d 45 08	 lea	 eax, DWORD PTR _pVersion$505406[ebp]
  0005c	50		 push	 eax
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_01KICIPPFI@?2?$AA@
  00062	56		 push	 esi
  00063	e8 00 00 00 00	 call	 _VerQueryValueA@16
  00068	85 c0		 test	 eax, eax
  0006a	74 1d		 je	 SHORT $LN1@GetFileVer
  0006c	8b 45 08	 mov	 eax, DWORD PTR _pVersion$505406[ebp]
  0006f	85 c0		 test	 eax, eax
  00071	74 16		 je	 SHORT $LN1@GetFileVer

; 513  :             {
; 514  :                 pllFileVersion->HighPart = pVersion->dwFileVersionMS;

  00073	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00076	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 515  :                 pllFileVersion->LowPart  = pVersion->dwFileVersionLS;

  00079	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 516  :                 delete[] pFileVersionBuffer;

  0007c	56		 push	 esi
  0007d	89 07		 mov	 DWORD PTR [edi], eax
  0007f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00084	59		 pop	 ecx

; 517  :                 return S_OK;

  00085	33 c0		 xor	 eax, eax
  00087	eb 13		 jmp	 SHORT $LN7@GetFileVer
$LN1@GetFileVer:

; 518  :             }
; 519  :         }
; 520  : 
; 521  :         delete[] pFileVersionBuffer;

  00089	56		 push	 esi
  0008a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0008f	59		 pop	 ecx
$LN4@GetFileVer:

; 522  :     }
; 523  : 
; 524  :     return E_FAIL;

  00090	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  00095	eb 05		 jmp	 SHORT $LN7@GetFileVer
$LN5@GetFileVer:

; 497  :         return E_INVALIDARG;

  00097	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN7@GetFileVer:
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi

; 525  : }

  0009e	c9		 leave
  0009f	c3		 ret	 0
?GetFileVersion@@YAJPADPAT_ULARGE_INTEGER@@@Z ENDP	; GetFileVersion
_TEXT	ENDS
PUBLIC	?MakeInt64@@YA?AT_ULARGE_INTEGER@@GGGG@Z	; MakeInt64
; Function compile flags: /Ogsp
;	COMDAT ?MakeInt64@@YA?AT_ULARGE_INTEGER@@GGGG@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
_d$ = 20						; size = 2
?MakeInt64@@YA?AT_ULARGE_INTEGER@@GGGG@Z PROC		; MakeInt64, COMDAT

; 535  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 536  :     ULARGE_INTEGER ull;
; 537  :     ull.HighPart = MAKELONG(b,a);

  00003	0f b7 55 08	 movzx	 edx, WORD PTR _a$[ebp]
  00007	0f b7 45 0c	 movzx	 eax, WORD PTR _b$[ebp]

; 538  :     ull.LowPart = MAKELONG(d,c);

  0000b	0f b7 4d 14	 movzx	 ecx, WORD PTR _d$[ebp]
  0000f	c1 e2 10	 shl	 edx, 16			; 00000010H
  00012	0b d0		 or	 edx, eax
  00014	0f b7 45 10	 movzx	 eax, WORD PTR _c$[ebp]
  00018	c1 e0 10	 shl	 eax, 16			; 00000010H
  0001b	0b c1		 or	 eax, ecx

; 539  :     return ull;
; 540  : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?MakeInt64@@YA?AT_ULARGE_INTEGER@@GGGG@Z ENDP		; MakeInt64
_TEXT	ENDS
PUBLIC	?CompareLargeInts@@YAHT_ULARGE_INTEGER@@0@Z	; CompareLargeInts
; Function compile flags: /Ogsp
;	COMDAT ?CompareLargeInts@@YAHT_ULARGE_INTEGER@@0@Z
_TEXT	SEGMENT
_ullParam1$ = 8						; size = 8
_ullParam2$ = 16					; size = 8
?CompareLargeInts@@YAHT_ULARGE_INTEGER@@0@Z PROC	; CompareLargeInts, COMDAT

; 552  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 553  :     if( ullParam1.HighPart > ullParam2.HighPart )

  00003	8b 45 0c	 mov	 eax, DWORD PTR _ullParam1$[ebp+4]
  00006	3b 45 14	 cmp	 eax, DWORD PTR _ullParam2$[ebp+4]
  00009	76 05		 jbe	 SHORT $LN7@CompareLar
$LN9@CompareLar:

; 554  :         return 1;

  0000b	33 c0		 xor	 eax, eax
  0000d	40		 inc	 eax

; 561  :         return -1;
; 562  : 
; 563  :     return 0;
; 564  : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN7@CompareLar:

; 555  :     if( ullParam1.HighPart < ullParam2.HighPart )

  00010	73 05		 jae	 SHORT $LN3@CompareLar

; 556  :         return -1;

  00012	83 c8 ff	 or	 eax, -1

; 561  :         return -1;
; 562  : 
; 563  :     return 0;
; 564  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
$LN3@CompareLar:

; 557  : 
; 558  :     if( ullParam1.LowPart > ullParam2.LowPart )

  00017	8b 45 08	 mov	 eax, DWORD PTR _ullParam1$[ebp]
  0001a	3b 45 10	 cmp	 eax, DWORD PTR _ullParam2$[ebp]

; 559  :         return 1;

  0001d	77 ec		 ja	 SHORT $LN9@CompareLar

; 560  :     if( ullParam1.LowPart < ullParam2.LowPart )

  0001f	1b c0		 sbb	 eax, eax

; 561  :         return -1;
; 562  : 
; 563  :     return 0;
; 564  : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?CompareLargeInts@@YAHT_ULARGE_INTEGER@@0@Z ENDP	; CompareLargeInts
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\strsafe.h
_TEXT	ENDS
;	COMDAT ?StringLengthWorkerA@@YGJPBDIPAI@Z
_TEXT	SEGMENT
?StringLengthWorkerA@@YGJPBDIPAI@Z PROC			; StringLengthWorkerA, COMDAT
; _psz$ = eax
; _cchMax$ = edx
; _pcchLength$ = edi

; 8549 : {

  00000	56		 push	 esi
  00001	8b f0		 mov	 esi, eax

; 8550 :     HRESULT hr = S_OK;

  00003	33 c0		 xor	 eax, eax

; 8551 :     size_t cchOriginalMax = cchMax;

  00005	8b ca		 mov	 ecx, edx

; 8552 : 
; 8553 :     while (cchMax && (*psz != '\0'))

  00007	85 d2		 test	 edx, edx
  00009	74 0c		 je	 SHORT $LN11@StringLeng
$LL6@StringLeng:
  0000b	38 06		 cmp	 BYTE PTR [esi], al
  0000d	74 04		 je	 SHORT $LN5@StringLeng

; 8554 :     {
; 8555 :         psz++;

  0000f	46		 inc	 esi

; 8556 :         cchMax--;

  00010	4a		 dec	 edx
  00011	75 f8		 jne	 SHORT $LL6@StringLeng
$LN5@StringLeng:

; 8557 :     }
; 8558 : 
; 8559 :     if (cchMax == 0)

  00013	85 d2		 test	 edx, edx
  00015	75 05		 jne	 SHORT $LN4@StringLeng
$LN11@StringLeng:

; 8560 :     {
; 8561 :         // the string is longer than cchMax
; 8562 :         hr = STRSAFE_E_INVALID_PARAMETER;

  00017	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN4@StringLeng:
  0001c	5e		 pop	 esi

; 8563 :     }
; 8564 : 
; 8565 :     if (pcchLength)

  0001d	85 ff		 test	 edi, edi
  0001f	74 0c		 je	 SHORT $LN1@StringLeng

; 8566 :     {
; 8567 :         if (SUCCEEDED(hr))

  00021	85 c0		 test	 eax, eax
  00023	78 05		 js	 SHORT $LN2@StringLeng

; 8568 :         {
; 8569 :             *pcchLength = cchOriginalMax - cchMax;

  00025	2b ca		 sub	 ecx, edx
  00027	89 0f		 mov	 DWORD PTR [edi], ecx

; 8574 :         }
; 8575 :     }
; 8576 : 
; 8577 :     return hr;
; 8578 : }

  00029	c3		 ret	 0
$LN2@StringLeng:

; 8570 :         }
; 8571 :         else
; 8572 :         {
; 8573 :             *pcchLength = 0;

  0002a	83 27 00	 and	 DWORD PTR [edi], 0
$LN1@StringLeng:

; 8574 :         }
; 8575 :     }
; 8576 : 
; 8577 :     return hr;
; 8578 : }

  0002d	c3		 ret	 0
?StringLengthWorkerA@@YGJPBDIPAI@Z ENDP			; StringLengthWorkerA
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?StringValidateDestA@@YGJPBDII@Z
_TEXT	SEGMENT
_cchMax$ = 8						; size = 4
?StringValidateDestA@@YGJPBDII@Z PROC			; StringValidateDestA, COMDAT
; _cchDest$ = ecx

; 8721 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 8722 :     HRESULT hr = S_OK;

  00003	33 c0		 xor	 eax, eax

; 8723 : 
; 8724 :     if ((cchDest == 0) || (cchDest > cchMax))

  00005	85 c9		 test	 ecx, ecx
  00007	74 05		 je	 SHORT $LN1@StringVali
  00009	3b 4d 08	 cmp	 ecx, DWORD PTR _cchMax$[ebp]
  0000c	76 05		 jbe	 SHORT $LN2@StringVali
$LN1@StringVali:

; 8725 :     {
; 8726 :         hr = STRSAFE_E_INVALID_PARAMETER;

  0000e	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN2@StringVali:

; 8727 :     }
; 8728 : 
; 8729 :     return hr;
; 8730 : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?StringValidateDestA@@YGJPBDII@Z ENDP			; StringValidateDestA
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?StringValidateDestAndLengthA@@YGJPBDIPAII@Z
_TEXT	SEGMENT
_pszDest$ = 8						; size = 4
_cchMax$ = 12						; size = 4
?StringValidateDestAndLengthA@@YGJPBDIPAII@Z PROC	; StringValidateDestAndLengthA, COMDAT
; _cchDest$ = ecx
; _pcchDestLength$ = esi

; 8743 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 8744 :     HRESULT hr;
; 8745 : 
; 8746 :     hr = StringValidateDestA(pszDest, cchDest, cchMax);

  00003	33 c0		 xor	 eax, eax
  00005	85 c9		 test	 ecx, ecx
  00007	74 05		 je	 SHORT $LN5@StringVali@2
  00009	3b 4d 0c	 cmp	 ecx, DWORD PTR _cchMax$[ebp]
  0000c	76 05		 jbe	 SHORT $LN6@StringVali@2
$LN5@StringVali@2:
  0000e	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN6@StringVali@2:

; 8747 : 
; 8748 :     if (SUCCEEDED(hr))

  00013	85 c0		 test	 eax, eax
  00015	78 34		 js	 SHORT $LN2@StringVali@2

; 8749 :     {
; 8750 :         hr = StringLengthWorkerA(pszDest, cchDest, pcchDestLength);

  00017	8b 45 08	 mov	 eax, DWORD PTR _pszDest$[ebp]
  0001a	57		 push	 edi
  0001b	33 ff		 xor	 edi, edi
  0001d	8b d1		 mov	 edx, ecx
  0001f	85 c9		 test	 ecx, ecx
  00021	74 0d		 je	 SHORT $LN19@StringVali@2
$LL14@StringVali@2:
  00023	80 38 00	 cmp	 BYTE PTR [eax], 0
  00026	74 04		 je	 SHORT $LN13@StringVali@2
  00028	40		 inc	 eax
  00029	4a		 dec	 edx
  0002a	75 f7		 jne	 SHORT $LL14@StringVali@2
$LN13@StringVali@2:
  0002c	85 d2		 test	 edx, edx
  0002e	75 05		 jne	 SHORT $LN12@StringVali@2
$LN19@StringVali@2:
  00030	bf 57 00 07 80	 mov	 edi, -2147024809	; 80070057H
$LN12@StringVali@2:
  00035	85 f6		 test	 esi, esi
  00037	74 0d		 je	 SHORT $LN9@StringVali@2
  00039	85 ff		 test	 edi, edi
  0003b	78 06		 js	 SHORT $LN10@StringVali@2
  0003d	2b ca		 sub	 ecx, edx
  0003f	89 0e		 mov	 DWORD PTR [esi], ecx
  00041	eb 03		 jmp	 SHORT $LN9@StringVali@2
$LN10@StringVali@2:
  00043	83 26 00	 and	 DWORD PTR [esi], 0
$LN9@StringVali@2:
  00046	8b c7		 mov	 eax, edi
  00048	5f		 pop	 edi

; 8751 :     }
; 8752 :     else

  00049	eb 03		 jmp	 SHORT $LN1@StringVali@2
$LN2@StringVali@2:

; 8753 :     {
; 8754 :         *pcchDestLength = 0;

  0004b	83 26 00	 and	 DWORD PTR [esi], 0
$LN1@StringVali@2:

; 8755 :     }
; 8756 : 
; 8757 :     return hr;
; 8758 : }

  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
?StringValidateDestAndLengthA@@YGJPBDIPAII@Z ENDP	; StringValidateDestAndLengthA
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?StringCopyWorkerA@@YGJPADIPAIPBDI@Z
_TEXT	SEGMENT
_hr$ = -4						; size = 4
_pcchNewDestLength$ = 8					; size = 4
_pszSrc$ = 12						; size = 4
_cchToCopy$ = 16					; size = 4
?StringCopyWorkerA@@YGJPADIPAIPBDI@Z PROC		; StringCopyWorkerA, COMDAT
; _pszDest$ = ecx
; _cchDest$ = eax

; 8947 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 8948 :     HRESULT hr = S_OK;

  00004	83 65 fc 00	 and	 DWORD PTR _hr$[ebp], 0
  00008	57		 push	 edi
  00009	8b f8		 mov	 edi, eax

; 8949 :     size_t cchNewDestLength = 0;

  0000b	33 c0		 xor	 eax, eax

; 8950 :     
; 8951 :     // ASSERT(cchDest != 0);
; 8952 : 
; 8953 :     while (cchDest && cchToCopy && (*pszSrc != '\0'))

  0000d	85 ff		 test	 edi, edi
  0000f	74 23		 je	 SHORT $LN9@StringCopy

; 8948 :     HRESULT hr = S_OK;

  00011	53		 push	 ebx
  00012	8b 5d 10	 mov	 ebx, DWORD PTR _cchToCopy$[ebp]
  00015	56		 push	 esi

; 8950 :     
; 8951 :     // ASSERT(cchDest != 0);
; 8952 : 
; 8953 :     while (cchDest && cchToCopy && (*pszSrc != '\0'))

  00016	8b 75 0c	 mov	 esi, DWORD PTR _pszSrc$[ebp]
  00019	2b f1		 sub	 esi, ecx
$LL4@StringCopy:
  0001b	85 db		 test	 ebx, ebx
  0001d	74 0f		 je	 SHORT $LN11@StringCopy
  0001f	8a 14 0e	 mov	 dl, BYTE PTR [esi+ecx]
  00022	84 d2		 test	 dl, dl
  00024	74 08		 je	 SHORT $LN11@StringCopy

; 8954 :     {
; 8955 :         *pszDest++ = *pszSrc++;

  00026	88 11		 mov	 BYTE PTR [ecx], dl
  00028	41		 inc	 ecx

; 8956 :         cchDest--;

  00029	4b		 dec	 ebx

; 8957 :         cchToCopy--;
; 8958 : 
; 8959 :         cchNewDestLength++;

  0002a	40		 inc	 eax
  0002b	4f		 dec	 edi
  0002c	75 ed		 jne	 SHORT $LL4@StringCopy
$LN11@StringCopy:
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 8960 :     }
; 8961 : 
; 8962 :     if (cchDest == 0)

  00030	85 ff		 test	 edi, edi
  00032	75 09		 jne	 SHORT $LN2@StringCopy
$LN9@StringCopy:

; 8963 :     {
; 8964 :         // we are going to truncate pszDest
; 8965 :         pszDest--;

  00034	49		 dec	 ecx

; 8966 :         cchNewDestLength--;

  00035	48		 dec	 eax

; 8967 : 
; 8968 :         hr = STRSAFE_E_INSUFFICIENT_BUFFER;

  00036	c7 45 fc 7a 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024774 ; 8007007aH
$LN2@StringCopy:

; 8969 :     }
; 8970 : 
; 8971 :     *pszDest = '\0';

  0003d	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 8972 : 
; 8973 :     if (pcchNewDestLength)

  00040	8b 4d 08	 mov	 ecx, DWORD PTR _pcchNewDestLength$[ebp]
  00043	5f		 pop	 edi
  00044	85 c9		 test	 ecx, ecx
  00046	74 02		 je	 SHORT $LN1@StringCopy

; 8974 :     {
; 8975 :         *pcchNewDestLength = cchNewDestLength;

  00048	89 01		 mov	 DWORD PTR [ecx], eax
$LN1@StringCopy:

; 8976 :     }
; 8977 : 
; 8978 :     return hr;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 8979 : }

  0004d	c9		 leave
  0004e	c2 0c 00	 ret	 12			; 0000000cH
?StringCopyWorkerA@@YGJPADIPAIPBDI@Z ENDP		; StringCopyWorkerA
_TEXT	ENDS
EXTRN	__imp___vsnprintf:PROC
; Function compile flags: /Ogsp
;	COMDAT ?StringVPrintfWorkerA@@YGJPADIPAIPBD0@Z
_TEXT	SEGMENT
_pcchNewDestLength$ = 8					; size = 4
_pszFormat$ = 12					; size = 4
_argList$ = 16						; size = 4
?StringVPrintfWorkerA@@YGJPADIPAIPBD0@Z PROC		; StringVPrintfWorkerA, COMDAT
; _pszDest$ = edi
; _cchDest$ = eax

; 9029 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 9030 :     HRESULT hr = S_OK;
; 9031 :     int iRet;
; 9032 :     size_t cchMax;
; 9033 :     size_t cchNewDestLength = 0;
; 9034 : 
; 9035 :     // leave the last space for the null terminator
; 9036 :     cchMax = cchDest - 1;
; 9037 : 
; 9038 : #if (STRSAFE_USE_SECURE_CRT == 1) && !defined(STRSAFE_LIB_IMPL)
; 9039 :     iRet = _vsnprintf_s(pszDest, cchDest, cchMax, pszFormat, argList);
; 9040 : #else
; 9041 :     #pragma warning(push)
; 9042 :     #pragma warning(disable: __WARNING_BANNED_API_USAGE)// "STRSAFE not included"
; 9043 :     iRet = _vsnprintf(pszDest, cchMax, pszFormat, argList);

  00005	ff 75 10	 push	 DWORD PTR _argList$[ebp]
  00008	8d 70 ff	 lea	 esi, DWORD PTR [eax-1]
  0000b	ff 75 0c	 push	 DWORD PTR _pszFormat$[ebp]
  0000e	33 db		 xor	 ebx, ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___vsnprintf
  00018	83 c4 10	 add	 esp, 16			; 00000010H

; 9044 :     #pragma warning(pop)
; 9045 : #endif
; 9046 :     // ASSERT((iRet < 0) || (((size_t)iRet) <= cchMax));
; 9047 : 
; 9048 :     if ((iRet < 0) || (((size_t)iRet) > cchMax))

  0001b	85 c0		 test	 eax, eax
  0001d	78 0b		 js	 SHORT $LN5@StringVPri
  0001f	3b c6		 cmp	 eax, esi
  00021	77 07		 ja	 SHORT $LN5@StringVPri

; 9058 :     }
; 9059 :     else if (((size_t)iRet) == cchMax)

  00023	75 0f		 jne	 SHORT $LN2@StringVPri

; 9060 :     {
; 9061 :         // need to null terminate the string
; 9062 :         pszDest += cchMax;
; 9063 :         *pszDest = '\0';

  00025	88 1c 3e	 mov	 BYTE PTR [esi+edi], bl

; 9064 : 
; 9065 :         cchNewDestLength = cchMax;
; 9066 :     }
; 9067 :     else

  00028	eb 08		 jmp	 SHORT $LN9@StringVPri
$LN5@StringVPri:

; 9049 :     {
; 9050 :         // need to null terminate the string
; 9051 :         pszDest += cchMax;
; 9052 :         *pszDest = '\0';

  0002a	88 1c 3e	 mov	 BYTE PTR [esi+edi], bl

; 9055 : 
; 9056 :         // we have truncated pszDest
; 9057 :         hr = STRSAFE_E_INSUFFICIENT_BUFFER;

  0002d	bb 7a 00 07 80	 mov	 ebx, -2147024774	; 8007007aH
$LN9@StringVPri:

; 9053 : 
; 9054 :         cchNewDestLength = cchMax;

  00032	8b c6		 mov	 eax, esi
$LN2@StringVPri:

; 9068 :     {
; 9069 :         cchNewDestLength = (size_t)iRet;
; 9070 :     }
; 9071 : 
; 9072 :     if (pcchNewDestLength)

  00034	8b 4d 08	 mov	 ecx, DWORD PTR _pcchNewDestLength$[ebp]
  00037	85 c9		 test	 ecx, ecx
  00039	74 02		 je	 SHORT $LN1@StringVPri

; 9073 :     {
; 9074 :         *pcchNewDestLength = cchNewDestLength;

  0003b	89 01		 mov	 DWORD PTR [ecx], eax
$LN1@StringVPri:
  0003d	5e		 pop	 esi

; 9075 :     }
; 9076 : 
; 9077 :     return hr;

  0003e	8b c3		 mov	 eax, ebx
  00040	5b		 pop	 ebx

; 9078 : }

  00041	5d		 pop	 ebp
  00042	c2 0c 00	 ret	 12			; 0000000cH
?StringVPrintfWorkerA@@YGJPADIPAIPBD0@Z ENDP		; StringVPrintfWorkerA
_TEXT	ENDS
PUBLIC	?StringCchCopyA@@YGJPADIPBD@Z			; StringCchCopyA
; Function compile flags: /Ogsp
;	COMDAT ?StringCchCopyA@@YGJPADIPBD@Z
_TEXT	SEGMENT
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_pszSrc$ = 16						; size = 4
?StringCchCopyA@@YGJPADIPBD@Z PROC			; StringCchCopyA, COMDAT

; 463  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 464  :     HRESULT hr;
; 465  : 
; 466  :     hr = StringValidateDestA(pszDest, cchDest, STRSAFE_MAX_CCH);

  00003	33 c0		 xor	 eax, eax
  00005	39 45 0c	 cmp	 DWORD PTR _cchDest$[ebp], eax
  00008	74 09		 je	 SHORT $LN4@StringCchC
  0000a	81 7d 0c ff ff
	ff 7f		 cmp	 DWORD PTR _cchDest$[ebp], 2147483647 ; 7fffffffH
  00011	76 05		 jbe	 SHORT $LN5@StringCchC
$LN4@StringCchC:
  00013	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN5@StringCchC:

; 467  :     
; 468  :     if (SUCCEEDED(hr))

  00018	85 c0		 test	 eax, eax
  0001a	78 15		 js	 SHORT $LN1@StringCchC

; 469  :     {
; 470  :         hr = StringCopyWorkerA(pszDest,
; 471  :                                cchDest,
; 472  :                                NULL,
; 473  :                                pszSrc,
; 474  :                                STRSAFE_MAX_LENGTH);

  0001c	8b 45 0c	 mov	 eax, DWORD PTR _cchDest$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _pszDest$[ebp]
  00022	68 fe ff ff 7f	 push	 2147483646		; 7ffffffeH
  00027	ff 75 10	 push	 DWORD PTR _pszSrc$[ebp]
  0002a	6a 00		 push	 0
  0002c	e8 00 00 00 00	 call	 ?StringCopyWorkerA@@YGJPADIPAIPBDI@Z ; StringCopyWorkerA
$LN1@StringCchC:

; 475  :     }
; 476  : 
; 477  :     return hr;
; 478  : }

  00031	5d		 pop	 ebp
  00032	c2 0c 00	 ret	 12			; 0000000cH
?StringCchCopyA@@YGJPADIPBD@Z ENDP			; StringCchCopyA
_TEXT	ENDS
PUBLIC	?StringCchCatA@@YGJPADIPBD@Z			; StringCchCatA
; Function compile flags: /Ogsp
;	COMDAT ?StringCchCatA@@YGJPADIPBD@Z
_TEXT	SEGMENT
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_pszSrc$ = 16						; size = 4
?StringCchCatA@@YGJPADIPBD@Z PROC			; StringCchCatA, COMDAT

; 2329 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 2330 :     HRESULT hr;
; 2331 :     size_t cchDestLength;
; 2332 : 
; 2333 :     hr = StringValidateDestAndLengthA(pszDest,
; 2334 :                                       cchDest,
; 2335 :                                       &cchDestLength,
; 2336 :                                       STRSAFE_MAX_CCH);

  00005	8b 75 0c	 mov	 esi, DWORD PTR _cchDest$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	57		 push	 edi
  0000b	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00010	85 f6		 test	 esi, esi
  00012	74 04		 je	 SHORT $LN8@StringCchC@2
  00014	3b f3		 cmp	 esi, ebx
  00016	76 05		 jbe	 SHORT $LN9@StringCchC@2
$LN8@StringCchC@2:
  00018	b9 57 00 07 80	 mov	 ecx, -2147024809	; 80070057H
$LN9@StringCchC@2:
  0001d	8b 7d 08	 mov	 edi, DWORD PTR _pszDest$[ebp]
  00020	8b c1		 mov	 eax, ecx
  00022	85 c9		 test	 ecx, ecx
  00024	78 1b		 js	 SHORT $LN5@StringCchC@2
  00026	33 c0		 xor	 eax, eax
  00028	8b d6		 mov	 edx, esi
  0002a	8b cf		 mov	 ecx, edi
  0002c	85 f6		 test	 esi, esi
  0002e	74 0c		 je	 SHORT $LN24@StringCchC@2
$LL17@StringCchC@2:
  00030	38 01		 cmp	 BYTE PTR [ecx], al
  00032	74 04		 je	 SHORT $LN16@StringCchC@2
  00034	41		 inc	 ecx
  00035	4a		 dec	 edx
  00036	75 f8		 jne	 SHORT $LL17@StringCchC@2
$LN16@StringCchC@2:
  00038	85 d2		 test	 edx, edx
  0003a	75 23		 jne	 SHORT $LN23@StringCchC@2
$LN24@StringCchC@2:
  0003c	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN5@StringCchC@2:
  00041	33 c9		 xor	 ecx, ecx
$LN4@StringCchC@2:

; 2337 :     
; 2338 :     if (SUCCEEDED(hr))

  00043	85 c0		 test	 eax, eax
  00045	78 11		 js	 SHORT $LN1@StringCchC@2

; 2339 :     {
; 2340 :         hr = StringCopyWorkerA(pszDest + cchDestLength,
; 2341 :                                cchDest - cchDestLength,
; 2342 :                                NULL,
; 2343 :                                pszSrc,
; 2344 :                                STRSAFE_MAX_CCH);

  00047	53		 push	 ebx
  00048	ff 75 10	 push	 DWORD PTR _pszSrc$[ebp]
  0004b	8b c6		 mov	 eax, esi
  0004d	2b c1		 sub	 eax, ecx
  0004f	6a 00		 push	 0
  00051	03 cf		 add	 ecx, edi
  00053	e8 00 00 00 00	 call	 ?StringCopyWorkerA@@YGJPADIPAIPBDI@Z ; StringCopyWorkerA
$LN1@StringCchC@2:
  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx

; 2345 :     }
; 2346 : 
; 2347 :     return hr;
; 2348 : }

  0005b	5d		 pop	 ebp
  0005c	c2 0c 00	 ret	 12			; 0000000cH
$LN23@StringCchC@2:

; 2330 :     HRESULT hr;
; 2331 :     size_t cchDestLength;
; 2332 : 
; 2333 :     hr = StringValidateDestAndLengthA(pszDest,
; 2334 :                                       cchDest,
; 2335 :                                       &cchDestLength,
; 2336 :                                       STRSAFE_MAX_CCH);

  0005f	8b ce		 mov	 ecx, esi
  00061	2b ca		 sub	 ecx, edx
  00063	eb de		 jmp	 SHORT $LN4@StringCchC@2
?StringCchCatA@@YGJPADIPBD@Z ENDP			; StringCchCatA
_TEXT	ENDS
PUBLIC	?StringCchPrintfA@@YAJPADIPBDZZ			; StringCchPrintfA
; Function compile flags: /Ogsp
;	COMDAT ?StringCchPrintfA@@YAJPADIPBDZZ
_TEXT	SEGMENT
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_pszFormat$ = 16					; size = 4
?StringCchPrintfA@@YAJPADIPBDZZ PROC			; StringCchPrintfA, COMDAT

; 4548 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4549 :     HRESULT hr;
; 4550 : 
; 4551 :     hr = StringValidateDestA(pszDest, cchDest, STRSAFE_MAX_CCH);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _cchDest$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	74 08		 je	 SHORT $LN4@StringCchP
  0000c	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  00012	76 05		 jbe	 SHORT $LN5@StringCchP
$LN4@StringCchP:
  00014	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN5@StringCchP:

; 4552 :     
; 4553 :     if (SUCCEEDED(hr))

  00019	85 c0		 test	 eax, eax
  0001b	78 39		 js	 SHORT $LN1@StringCchP

; 4554 :     {
; 4555 :         va_list argList;
; 4556 : 
; 4557 :         va_start(argList, pszFormat);
; 4558 : 
; 4559 :         hr = StringVPrintfWorkerA(pszDest,
; 4560 :                                   cchDest,
; 4561 :                                   NULL,
; 4562 :                                   pszFormat,
; 4563 :                                   argList);

  0001d	53		 push	 ebx
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	8b 7d 08	 mov	 edi, DWORD PTR _pszDest$[ebp]
  00023	8d 45 14	 lea	 eax, DWORD PTR _pszFormat$[ebp+4]
  00026	50		 push	 eax
  00027	ff 75 10	 push	 DWORD PTR _pszFormat$[ebp]
  0002a	8d 71 ff	 lea	 esi, DWORD PTR [ecx-1]
  0002d	56		 push	 esi
  0002e	57		 push	 edi
  0002f	33 db		 xor	 ebx, ebx
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___vsnprintf
  00037	83 c4 10	 add	 esp, 16			; 00000010H
  0003a	85 c0		 test	 eax, eax
  0003c	78 0b		 js	 SHORT $LN12@StringCchP
  0003e	3b c6		 cmp	 eax, esi
  00040	77 07		 ja	 SHORT $LN12@StringCchP
  00042	75 0d		 jne	 SHORT $LN9@StringCchP
  00044	88 1c 3e	 mov	 BYTE PTR [esi+edi], bl
  00047	eb 08		 jmp	 SHORT $LN9@StringCchP
$LN12@StringCchP:
  00049	88 1c 3e	 mov	 BYTE PTR [esi+edi], bl
  0004c	bb 7a 00 07 80	 mov	 ebx, -2147024774	; 8007007aH
$LN9@StringCchP:
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	8b c3		 mov	 eax, ebx
  00055	5b		 pop	 ebx
$LN1@StringCchP:

; 4564 : 
; 4565 :         va_end(argList);
; 4566 :     }
; 4567 : 
; 4568 :     return hr;
; 4569 : }

  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?StringCchPrintfA@@YAJPADIPBDZZ ENDP			; StringCchPrintfA
_TEXT	ENDS
PUBLIC	??_C@_09KLCMKMDE@?2d3d9?4dll?$AA@		; `string'
PUBLIC	??_C@_0L@BPBPON@?2dpnet?4dll?$AA@		; `string'
PUBLIC	??_C@_0N@ELFFLKCN@?2mpg2splt?4ax?$AA@		; `string'
PUBLIC	??_C@_09GAHAHPJB@?2d3d8?4dll?$AA@		; `string'
PUBLIC	??_C@_0M@CEIGHIDO@?2dinput?4dll?$AA@		; `string'
PUBLIC	??_C@_0M@NBLIGBCA@?2dplayx?4dll?$AA@		; `string'
PUBLIC	??_C@_0N@BLNNCICB@?2d3drg8x?4dll?$AA@		; `string'
PUBLIC	??_C@_0L@KIPMHOEJ@?2ddraw?4dll?$AA@		; `string'
PUBLIC	_pcDirectXVersionLetter$GSCopy$
PUBLIC	_pdwDirectXVersionMinor$GSCopy$
PUBLIC	_pdwDirectXVersionMajor$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?GetDirectXVersionViaFileVersions@@YAJPAK0PAD@Z	; GetDirectXVersionViaFileVersions
EXTRN	__imp__GetSystemDirectoryA@8:PROC
;	COMDAT ??_C@_09KLCMKMDE@?2d3d9?4dll?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\checkdxversion.cpp
CONST	SEGMENT
??_C@_09KLCMKMDE@?2d3d9?4dll?$AA@ DB '\d3d9.dll', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BPBPON@?2dpnet?4dll?$AA@
CONST	SEGMENT
??_C@_0L@BPBPON@?2dpnet?4dll?$AA@ DB '\dpnet.dll', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@ELFFLKCN@?2mpg2splt?4ax?$AA@
CONST	SEGMENT
??_C@_0N@ELFFLKCN@?2mpg2splt?4ax?$AA@ DB '\mpg2splt.ax', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GAHAHPJB@?2d3d8?4dll?$AA@
CONST	SEGMENT
??_C@_09GAHAHPJB@?2d3d8?4dll?$AA@ DB '\d3d8.dll', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CEIGHIDO@?2dinput?4dll?$AA@
CONST	SEGMENT
??_C@_0M@CEIGHIDO@?2dinput?4dll?$AA@ DB '\dinput.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NBLIGBCA@?2dplayx?4dll?$AA@
CONST	SEGMENT
??_C@_0M@NBLIGBCA@?2dplayx?4dll?$AA@ DB '\dplayx.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BLNNCICB@?2d3drg8x?4dll?$AA@
CONST	SEGMENT
??_C@_0N@BLNNCICB@?2d3drg8x?4dll?$AA@ DB '\d3drg8x.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KIPMHOEJ@?2ddraw?4dll?$AA@
CONST	SEGMENT
??_C@_0L@KIPMHOEJ@?2ddraw?4dll?$AA@ DB '\ddraw.dll', 00H ; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?GetDirectXVersionViaFileVersions@@YAJPAK0PAD@Z
_TEXT	SEGMENT
_pdwDirectXVersionMinor$GSCopy$ = -1052			; size = 4
_bFound$ = -1048					; size = 4
_pdwDirectXVersionMajor$GSCopy$ = -1044			; size = 4
_pcDirectXVersionLetter$GSCopy$ = -1040			; size = 4
_llFileVersion$ = -1036					; size = 8
_szPath$ = -1028					; size = 512
_szFile$ = -516						; size = 512
__$ArrayPad$ = -4					; size = 4
_pdwDirectXVersionMajor$ = 8				; size = 4
_pdwDirectXVersionMinor$ = 12				; size = 4
_pcDirectXVersionLetter$ = 16				; size = 4
?GetDirectXVersionViaFileVersions@@YAJPAK0PAD@Z PROC	; GetDirectXVersionViaFileVersions, COMDAT

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 04 00
	00		 sub	 esp, 1052		; 0000041cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 481  :         if( pcDirectXVersionLetter ) *pcDirectXVersionLetter = TEXT(' ');

  00013	8b 45 08	 mov	 eax, DWORD PTR _pdwDirectXVersionMajor$[ebp]
  00016	83 a5 e8 fb ff
	ff 00		 and	 DWORD PTR _bFound$[ebp], 0
  0001d	89 85 ec fb ff
	ff		 mov	 DWORD PTR _pdwDirectXVersionMajor$GSCopy$[ebp], eax
  00023	8b 45 0c	 mov	 eax, DWORD PTR _pdwDirectXVersionMinor$[ebp]
  00026	89 85 e4 fb ff
	ff		 mov	 DWORD PTR _pdwDirectXVersionMinor$GSCopy$[ebp], eax
  0002c	8b 45 10	 mov	 eax, DWORD PTR _pcDirectXVersionLetter$[ebp]
  0002f	89 85 f0 fb ff
	ff		 mov	 DWORD PTR _pcDirectXVersionLetter$GSCopy$[ebp], eax
  00035	68 04 01 00 00	 push	 260			; 00000104H
  0003a	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  00040	50		 push	 eax
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemDirectoryA@8
  00047	85 c0		 test	 eax, eax
  00049	0f 84 91 08 00
	00		 je	 $LN128@GetDirectX@2

; 257  :     ULARGE_INTEGER llFileVersion;
; 258  :     TCHAR szPath[512];
; 259  :     TCHAR szFile[512];
; 260  :     BOOL bFound = false;
; 261  : 
; 262  :     if( GetSystemDirectory( szPath, MAX_PATH ) != 0 )
; 263  :     {
; 264  :         szPath[MAX_PATH-1]=0;
; 265  : 
; 266  :         // Switch off the ddraw version
; 267  :         StringCchCopy( szFile, 512, szPath );

  0004f	53		 push	 ebx
  00050	56		 push	 esi
  00051	57		 push	 edi
  00052	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  00058	50		 push	 eax
  00059	bb 00 02 00 00	 mov	 ebx, 512		; 00000200H
  0005e	53		 push	 ebx
  0005f	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  00065	50		 push	 eax
  00066	c6 85 ff fc ff
	ff 00		 mov	 BYTE PTR _szPath$[ebp+259], 0
  0006d	e8 00 00 00 00	 call	 ?StringCchCopyA@@YGJPADIPBD@Z ; StringCchCopyA

; 268  :         StringCchCat( szFile, 512, TEXT("\\ddraw.dll") );

  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0L@KIPMHOEJ@?2ddraw?4dll?$AA@
  00077	53		 push	 ebx
  00078	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?StringCchCatA@@YGJPADIPBD@Z ; StringCchCatA

; 269  :         if( SUCCEEDED( GetFileVersion( szFile, &llFileVersion ) ) )

  00084	8d 85 f4 fb ff
	ff		 lea	 eax, DWORD PTR _llFileVersion$[ebp]
  0008a	50		 push	 eax
  0008b	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ?GetFileVersion@@YAJPADPAT_ULARGE_INTEGER@@@Z ; GetFileVersion
  00097	59		 pop	 ecx
  00098	59		 pop	 ecx
  00099	85 c0		 test	 eax, eax
  0009b	0f 88 f2 00 00
	00		 js	 $LN135@GetDirectX@2

; 270  :         {
; 271  :             if( CompareLargeInts( llFileVersion, MakeInt64( 4, 2, 0, 95 ) ) >= 0 ) // Win9x version

  000a1	6a 5f		 push	 95			; 0000005fH
  000a3	59		 pop	 ecx
  000a4	b8 02 00 04 00	 mov	 eax, 262146		; 00040002H
  000a9	50		 push	 eax
  000aa	51		 push	 ecx
  000ab	ff b5 f8 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp+4]
  000b1	ff b5 f4 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp]
  000b7	e8 00 00 00 00	 call	 ?CompareLargeInts@@YAHT_ULARGE_INTEGER@@0@Z ; CompareLargeInts

; 272  :             {
; 273  :                 // flle is >= DirectX1.0 version, so we must be at least DirectX1.0
; 274  :                 if( pdwDirectXVersionMajor ) *pdwDirectXVersionMajor = 1;

  000bc	8b b5 ec fb ff
	ff		 mov	 esi, DWORD PTR _pdwDirectXVersionMajor$GSCopy$[ebp]
  000c2	83 c4 10	 add	 esp, 16			; 00000010H
  000c5	85 c0		 test	 eax, eax
  000c7	78 32		 js	 SHORT $LN134@GetDirectX@2
  000c9	85 f6		 test	 esi, esi
  000cb	74 06		 je	 SHORT $LN84@GetDirectX@2
  000cd	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1
$LN84@GetDirectX@2:

; 275  :                 if( pdwDirectXVersionMinor ) *pdwDirectXVersionMinor = 0;

  000d3	8b bd e4 fb ff
	ff		 mov	 edi, DWORD PTR _pdwDirectXVersionMinor$GSCopy$[ebp]
  000d9	85 ff		 test	 edi, edi
  000db	74 03		 je	 SHORT $LN83@GetDirectX@2
  000dd	83 27 00	 and	 DWORD PTR [edi], 0
$LN83@GetDirectX@2:

; 276  :                 if( pcDirectXVersionLetter ) *pcDirectXVersionLetter = TEXT(' ');

  000e0	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _pcDirectXVersionLetter$GSCopy$[ebp]
  000e6	85 c0		 test	 eax, eax
  000e8	74 03		 je	 SHORT $LN82@GetDirectX@2
  000ea	c6 00 20	 mov	 BYTE PTR [eax], 32	; 00000020H
$LN82@GetDirectX@2:

; 277  :                 bFound = true;

  000ed	c7 85 e8 fb ff
	ff 01 00 00 00	 mov	 DWORD PTR _bFound$[ebp], 1
  000f7	8b d0		 mov	 edx, eax
  000f9	eb 0c		 jmp	 SHORT $LN85@GetDirectX@2
$LN134@GetDirectX@2:
  000fb	8b bd e4 fb ff
	ff		 mov	 edi, DWORD PTR _pdwDirectXVersionMinor$GSCopy$[ebp]
  00101	8b 95 f0 fb ff
	ff		 mov	 edx, DWORD PTR _pcDirectXVersionLetter$GSCopy$[ebp]
$LN85@GetDirectX@2:

; 278  :             }
; 279  : 
; 280  :             if( CompareLargeInts( llFileVersion, MakeInt64( 4, 3, 0, 1096 ) ) >= 0 ) // Win9x version

  00107	b8 03 00 04 00	 mov	 eax, 262147		; 00040003H
  0010c	50		 push	 eax
  0010d	b9 48 04 00 00	 mov	 ecx, 1096		; 00000448H
  00112	51		 push	 ecx
  00113	ff b5 f8 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp+4]
  00119	ff b5 f4 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp]
  0011f	e8 00 00 00 00	 call	 ?CompareLargeInts@@YAHT_ULARGE_INTEGER@@0@Z ; CompareLargeInts
  00124	83 c4 10	 add	 esp, 16			; 00000010H
  00127	85 c0		 test	 eax, eax
  00129	78 22		 js	 SHORT $LN143@GetDirectX@2

; 281  :             {
; 282  :                 // flle is is >= DirectX2.0 version, so we must DirectX2.0 or DirectX2.0a (no redist change)
; 283  :                 if( pdwDirectXVersionMajor ) *pdwDirectXVersionMajor = 2;

  0012b	85 f6		 test	 esi, esi
  0012d	74 06		 je	 SHORT $LN80@GetDirectX@2
  0012f	c7 06 02 00 00
	00		 mov	 DWORD PTR [esi], 2
$LN80@GetDirectX@2:

; 284  :                 if( pdwDirectXVersionMinor ) *pdwDirectXVersionMinor = 0;

  00135	85 ff		 test	 edi, edi
  00137	74 03		 je	 SHORT $LN79@GetDirectX@2
  00139	83 27 00	 and	 DWORD PTR [edi], 0
$LN79@GetDirectX@2:

; 285  :                 if( pcDirectXVersionLetter ) *pcDirectXVersionLetter = TEXT(' ');

  0013c	85 d2		 test	 edx, edx
  0013e	74 03		 je	 SHORT $LN78@GetDirectX@2
  00140	c6 02 20	 mov	 BYTE PTR [edx], 32	; 00000020H
$LN78@GetDirectX@2:

; 286  :                 bFound = true;

  00143	c7 85 e8 fb ff
	ff 01 00 00 00	 mov	 DWORD PTR _bFound$[ebp], 1
$LN143@GetDirectX@2:

; 287  :             }
; 288  : 
; 289  :             if( CompareLargeInts( llFileVersion, MakeInt64( 4, 4, 0, 68 ) ) >= 0 ) // Win9x version

  0014d	6a 44		 push	 68			; 00000044H
  0014f	59		 pop	 ecx
  00150	b8 04 00 04 00	 mov	 eax, 262148		; 00040004H
  00155	50		 push	 eax
  00156	51		 push	 ecx
  00157	ff b5 f8 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp+4]
  0015d	ff b5 f4 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp]
  00163	e8 00 00 00 00	 call	 ?CompareLargeInts@@YAHT_ULARGE_INTEGER@@0@Z ; CompareLargeInts
  00168	83 c4 10	 add	 esp, 16			; 00000010H
  0016b	85 c0		 test	 eax, eax
  0016d	78 30		 js	 SHORT $LN77@GetDirectX@2

; 290  :             {
; 291  :                 // flle is is >= DirectX3.0 version, so we must be at least DirectX3.0
; 292  :                 if( pdwDirectXVersionMajor ) *pdwDirectXVersionMajor = 3;

  0016f	85 f6		 test	 esi, esi
  00171	74 06		 je	 SHORT $LN76@GetDirectX@2
  00173	c7 06 03 00 00
	00		 mov	 DWORD PTR [esi], 3
$LN76@GetDirectX@2:

; 293  :                 if( pdwDirectXVersionMinor ) *pdwDirectXVersionMinor = 0;

  00179	85 ff		 test	 edi, edi
  0017b	74 03		 je	 SHORT $LN75@GetDirectX@2
  0017d	83 27 00	 and	 DWORD PTR [edi], 0
$LN75@GetDirectX@2:

; 294  :                 if( pcDirectXVersionLetter ) *pcDirectXVersionLetter = TEXT(' ');

  00180	85 d2		 test	 edx, edx
  00182	74 03		 je	 SHORT $LN74@GetDirectX@2
  00184	c6 02 20	 mov	 BYTE PTR [edx], 32	; 00000020H
$LN74@GetDirectX@2:

; 295  :                 bFound = true;

  00187	c7 85 e8 fb ff
	ff 01 00 00 00	 mov	 DWORD PTR _bFound$[ebp], 1
  00191	eb 0c		 jmp	 SHORT $LN77@GetDirectX@2
$LN135@GetDirectX@2:
  00193	8b bd e4 fb ff
	ff		 mov	 edi, DWORD PTR _pdwDirectXVersionMinor$GSCopy$[ebp]
  00199	8b b5 ec fb ff
	ff		 mov	 esi, DWORD PTR _pdwDirectXVersionMajor$GSCopy$[ebp]
$LN77@GetDirectX@2:

; 296  :             }
; 297  :         }
; 298  : 
; 299  :         // Switch off the d3drg8x.dll version
; 300  :         StringCchCopy( szFile, 512, szPath );

  0019f	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  001a5	50		 push	 eax
  001a6	53		 push	 ebx
  001a7	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  001ad	50		 push	 eax
  001ae	e8 00 00 00 00	 call	 ?StringCchCopyA@@YGJPADIPBD@Z ; StringCchCopyA

; 301  :         StringCchCat( szFile, 512, TEXT("\\d3drg8x.dll") );

  001b3	68 00 00 00 00	 push	 OFFSET ??_C@_0N@BLNNCICB@?2d3drg8x?4dll?$AA@
  001b8	53		 push	 ebx
  001b9	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  001bf	50		 push	 eax
  001c0	e8 00 00 00 00	 call	 ?StringCchCatA@@YGJPADIPBD@Z ; StringCchCatA

; 302  :         if( SUCCEEDED( GetFileVersion( szFile, &llFileVersion ) ) )

  001c5	8d 85 f4 fb ff
	ff		 lea	 eax, DWORD PTR _llFileVersion$[ebp]
  001cb	50		 push	 eax
  001cc	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  001d2	50		 push	 eax
  001d3	e8 00 00 00 00	 call	 ?GetFileVersion@@YAJPADPAT_ULARGE_INTEGER@@@Z ; GetFileVersion
  001d8	59		 pop	 ecx
  001d9	59		 pop	 ecx
  001da	85 c0		 test	 eax, eax
  001dc	78 4a		 js	 SHORT $LN72@GetDirectX@2

; 303  :         {
; 304  :             if( CompareLargeInts( llFileVersion, MakeInt64( 4, 4, 0, 70 ) ) >= 0 ) // Win9x version

  001de	6a 46		 push	 70			; 00000046H
  001e0	59		 pop	 ecx
  001e1	b8 04 00 04 00	 mov	 eax, 262148		; 00040004H
  001e6	50		 push	 eax
  001e7	51		 push	 ecx
  001e8	ff b5 f8 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp+4]
  001ee	ff b5 f4 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp]
  001f4	e8 00 00 00 00	 call	 ?CompareLargeInts@@YAHT_ULARGE_INTEGER@@0@Z ; CompareLargeInts
  001f9	83 c4 10	 add	 esp, 16			; 00000010H
  001fc	85 c0		 test	 eax, eax
  001fe	78 28		 js	 SHORT $LN72@GetDirectX@2

; 305  :             {
; 306  :                 // d3drg8x.dll is the DirectX3.0a version, so we must be DirectX3.0a or DirectX3.0b  (no redist change)
; 307  :                 if( pdwDirectXVersionMajor ) *pdwDirectXVersionMajor = 3;

  00200	85 f6		 test	 esi, esi
  00202	74 06		 je	 SHORT $LN71@GetDirectX@2
  00204	c7 06 03 00 00
	00		 mov	 DWORD PTR [esi], 3
$LN71@GetDirectX@2:

; 308  :                 if( pdwDirectXVersionMinor ) *pdwDirectXVersionMinor = 0;

  0020a	85 ff		 test	 edi, edi
  0020c	74 03		 je	 SHORT $LN70@GetDirectX@2
  0020e	83 27 00	 and	 DWORD PTR [edi], 0
$LN70@GetDirectX@2:

; 309  :                 if( pcDirectXVersionLetter ) *pcDirectXVersionLetter = TEXT('a');

  00211	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _pcDirectXVersionLetter$GSCopy$[ebp]
  00217	85 c0		 test	 eax, eax
  00219	74 03		 je	 SHORT $LN69@GetDirectX@2
  0021b	c6 00 61	 mov	 BYTE PTR [eax], 97	; 00000061H
$LN69@GetDirectX@2:

; 310  :                 bFound = true;

  0021e	c7 85 e8 fb ff
	ff 01 00 00 00	 mov	 DWORD PTR _bFound$[ebp], 1
$LN72@GetDirectX@2:

; 311  :             }
; 312  :         }
; 313  : 
; 314  :         // Switch off the ddraw version
; 315  :         StringCchCopy( szFile, 512, szPath );

  00228	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  0022e	50		 push	 eax
  0022f	53		 push	 ebx
  00230	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  00236	50		 push	 eax
  00237	e8 00 00 00 00	 call	 ?StringCchCopyA@@YGJPADIPBD@Z ; StringCchCopyA

; 316  :         StringCchCat( szFile, 512, TEXT("\\ddraw.dll") );

  0023c	68 00 00 00 00	 push	 OFFSET ??_C@_0L@KIPMHOEJ@?2ddraw?4dll?$AA@
  00241	53		 push	 ebx
  00242	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  00248	50		 push	 eax
  00249	e8 00 00 00 00	 call	 ?StringCchCatA@@YGJPADIPBD@Z ; StringCchCatA

; 317  :         if( SUCCEEDED( GetFileVersion( szFile, &llFileVersion ) ) )

  0024e	8d 85 f4 fb ff
	ff		 lea	 eax, DWORD PTR _llFileVersion$[ebp]
  00254	50		 push	 eax
  00255	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  0025b	50		 push	 eax
  0025c	e8 00 00 00 00	 call	 ?GetFileVersion@@YAJPADPAT_ULARGE_INTEGER@@@Z ; GetFileVersion
  00261	59		 pop	 ecx
  00262	59		 pop	 ecx
  00263	be 06 00 04 00	 mov	 esi, 262150		; 00040006H
  00268	85 c0		 test	 eax, eax
  0026a	0f 88 e1 00 00
	00		 js	 $LN59@GetDirectX@2

; 318  :         {
; 319  :             if( CompareLargeInts( llFileVersion, MakeInt64( 4, 5, 0, 155 ) ) >= 0 ) // Win9x version

  00270	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00273	50		 push	 eax
  00274	b9 9b 00 00 00	 mov	 ecx, 155		; 0000009bH
  00279	51		 push	 ecx
  0027a	ff b5 f8 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp+4]
  00280	ff b5 f4 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp]
  00286	e8 00 00 00 00	 call	 ?CompareLargeInts@@YAHT_ULARGE_INTEGER@@0@Z ; CompareLargeInts

; 320  :             {
; 321  :                 // ddraw.dll is the DirectX5.0 version, so we must be DirectX5.0 or DirectX5.2 (no redist change)
; 322  :                 if( pdwDirectXVersionMajor ) *pdwDirectXVersionMajor = 5;

  0028b	8b 95 ec fb ff
	ff		 mov	 edx, DWORD PTR _pdwDirectXVersionMajor$GSCopy$[ebp]
  00291	83 c4 10	 add	 esp, 16			; 00000010H
  00294	85 c0		 test	 eax, eax
  00296	78 28		 js	 SHORT $LN67@GetDirectX@2
  00298	85 d2		 test	 edx, edx
  0029a	74 06		 je	 SHORT $LN66@GetDirectX@2
  0029c	c7 02 05 00 00
	00		 mov	 DWORD PTR [edx], 5
$LN66@GetDirectX@2:

; 323  :                 if( pdwDirectXVersionMinor ) *pdwDirectXVersionMinor = 0;

  002a2	85 ff		 test	 edi, edi
  002a4	74 03		 je	 SHORT $LN65@GetDirectX@2
  002a6	83 27 00	 and	 DWORD PTR [edi], 0
$LN65@GetDirectX@2:

; 324  :                 if( pcDirectXVersionLetter ) *pcDirectXVersionLetter = TEXT(' ');

  002a9	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _pcDirectXVersionLetter$GSCopy$[ebp]
  002af	85 c0		 test	 eax, eax
  002b1	74 03		 je	 SHORT $LN64@GetDirectX@2
  002b3	c6 00 20	 mov	 BYTE PTR [eax], 32	; 00000020H
$LN64@GetDirectX@2:

; 325  :                 bFound = true;

  002b6	c7 85 e8 fb ff
	ff 01 00 00 00	 mov	 DWORD PTR _bFound$[ebp], 1
$LN67@GetDirectX@2:

; 326  :             }
; 327  : 
; 328  :             if( CompareLargeInts( llFileVersion, MakeInt64( 4, 6, 0, 318 ) ) >= 0 ) // Win9x version

  002c0	56		 push	 esi
  002c1	b9 3e 01 00 00	 mov	 ecx, 318		; 0000013eH
  002c6	51		 push	 ecx
  002c7	ff b5 f8 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp+4]
  002cd	ff b5 f4 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp]
  002d3	e8 00 00 00 00	 call	 ?CompareLargeInts@@YAHT_ULARGE_INTEGER@@0@Z ; CompareLargeInts
  002d8	83 c4 10	 add	 esp, 16			; 00000010H
  002db	85 c0		 test	 eax, eax
  002dd	78 28		 js	 SHORT $LN140@GetDirectX@2

; 329  :             {
; 330  :                 // ddraw.dll is the DirectX6.0 version, so we must be at least DirectX6.0
; 331  :                 if( pdwDirectXVersionMajor ) *pdwDirectXVersionMajor = 6;

  002df	85 d2		 test	 edx, edx
  002e1	74 06		 je	 SHORT $LN139@GetDirectX@2
  002e3	c7 02 06 00 00
	00		 mov	 DWORD PTR [edx], 6
$LN139@GetDirectX@2:

; 332  :                 if( pdwDirectXVersionMinor ) *pdwDirectXVersionMinor = 0;

  002e9	85 ff		 test	 edi, edi
  002eb	74 03		 je	 SHORT $LN61@GetDirectX@2
  002ed	83 27 00	 and	 DWORD PTR [edi], 0
$LN61@GetDirectX@2:

; 333  :                 if( pcDirectXVersionLetter ) *pcDirectXVersionLetter = TEXT(' ');

  002f0	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _pcDirectXVersionLetter$GSCopy$[ebp]
  002f6	85 c0		 test	 eax, eax
  002f8	74 03		 je	 SHORT $LN60@GetDirectX@2
  002fa	c6 00 20	 mov	 BYTE PTR [eax], 32	; 00000020H
$LN60@GetDirectX@2:

; 334  :                 bFound = true;

  002fd	c7 85 e8 fb ff
	ff 01 00 00 00	 mov	 DWORD PTR _bFound$[ebp], 1
$LN140@GetDirectX@2:

; 335  :             }
; 336  : 
; 337  :             if( CompareLargeInts( llFileVersion, MakeInt64( 4, 6, 0, 436 ) ) >= 0 ) // Win9x version

  00307	56		 push	 esi
  00308	b9 b4 01 00 00	 mov	 ecx, 436		; 000001b4H
  0030d	51		 push	 ecx
  0030e	ff b5 f8 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp+4]
  00314	ff b5 f4 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp]
  0031a	e8 00 00 00 00	 call	 ?CompareLargeInts@@YAHT_ULARGE_INTEGER@@0@Z ; CompareLargeInts
  0031f	83 c4 10	 add	 esp, 16			; 00000010H
  00322	85 c0		 test	 eax, eax
  00324	78 2b		 js	 SHORT $LN59@GetDirectX@2

; 338  :             {
; 339  :                 // ddraw.dll is the DirectX6.1 version, so we must be at least DirectX6.1
; 340  :                 if( pdwDirectXVersionMajor ) *pdwDirectXVersionMajor = 6;

  00326	85 d2		 test	 edx, edx
  00328	74 06		 je	 SHORT $LN58@GetDirectX@2
  0032a	c7 02 06 00 00
	00		 mov	 DWORD PTR [edx], 6
$LN58@GetDirectX@2:

; 341  :                 if( pdwDirectXVersionMinor ) *pdwDirectXVersionMinor = 1;

  00330	85 ff		 test	 edi, edi
  00332	74 06		 je	 SHORT $LN142@GetDirectX@2
  00334	c7 07 01 00 00
	00		 mov	 DWORD PTR [edi], 1
$LN142@GetDirectX@2:

; 342  :                 if( pcDirectXVersionLetter ) *pcDirectXVersionLetter = TEXT(' ');

  0033a	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _pcDirectXVersionLetter$GSCopy$[ebp]
  00340	85 c0		 test	 eax, eax
  00342	74 03		 je	 SHORT $LN56@GetDirectX@2
  00344	c6 00 20	 mov	 BYTE PTR [eax], 32	; 00000020H
$LN56@GetDirectX@2:

; 343  :                 bFound = true;

  00347	c7 85 e8 fb ff
	ff 01 00 00 00	 mov	 DWORD PTR _bFound$[ebp], 1
$LN59@GetDirectX@2:

; 344  :             }
; 345  :         }
; 346  : 
; 347  :         // Switch off the dplayx.dll version
; 348  :         StringCchCopy( szFile, 512, szPath );

  00351	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  00357	50		 push	 eax
  00358	53		 push	 ebx
  00359	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  0035f	50		 push	 eax
  00360	e8 00 00 00 00	 call	 ?StringCchCopyA@@YGJPADIPBD@Z ; StringCchCopyA

; 349  :         StringCchCat( szFile, 512, TEXT("\\dplayx.dll") );

  00365	68 00 00 00 00	 push	 OFFSET ??_C@_0M@NBLIGBCA@?2dplayx?4dll?$AA@
  0036a	53		 push	 ebx
  0036b	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  00371	50		 push	 eax
  00372	e8 00 00 00 00	 call	 ?StringCchCatA@@YGJPADIPBD@Z ; StringCchCatA

; 350  :         if( SUCCEEDED( GetFileVersion( szFile, &llFileVersion ) ) )

  00377	8d 85 f4 fb ff
	ff		 lea	 eax, DWORD PTR _llFileVersion$[ebp]
  0037d	50		 push	 eax
  0037e	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  00384	50		 push	 eax
  00385	e8 00 00 00 00	 call	 ?GetFileVersion@@YAJPADPAT_ULARGE_INTEGER@@@Z ; GetFileVersion
  0038a	59		 pop	 ecx
  0038b	59		 pop	 ecx
  0038c	85 c0		 test	 eax, eax
  0038e	78 50		 js	 SHORT $LN54@GetDirectX@2

; 351  :         {
; 352  :             if( CompareLargeInts( llFileVersion, MakeInt64( 4, 6, 3, 518 ) ) >= 0 ) // Win9x version

  00390	56		 push	 esi
  00391	b9 06 02 03 00	 mov	 ecx, 197126		; 00030206H
  00396	51		 push	 ecx
  00397	ff b5 f8 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp+4]
  0039d	ff b5 f4 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp]
  003a3	e8 00 00 00 00	 call	 ?CompareLargeInts@@YAHT_ULARGE_INTEGER@@0@Z ; CompareLargeInts
  003a8	83 c4 10	 add	 esp, 16			; 00000010H
  003ab	85 c0		 test	 eax, eax
  003ad	78 31		 js	 SHORT $LN54@GetDirectX@2

; 353  :             {
; 354  :                 // ddraw.dll is the DirectX6.1 version, so we must be at least DirectX6.1a
; 355  :                 if( pdwDirectXVersionMajor ) *pdwDirectXVersionMajor = 6;

  003af	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _pdwDirectXVersionMajor$GSCopy$[ebp]
  003b5	85 c0		 test	 eax, eax
  003b7	74 06		 je	 SHORT $LN53@GetDirectX@2
  003b9	c7 00 06 00 00
	00		 mov	 DWORD PTR [eax], 6
$LN53@GetDirectX@2:

; 356  :                 if( pdwDirectXVersionMinor ) *pdwDirectXVersionMinor = 1;

  003bf	85 ff		 test	 edi, edi
  003c1	74 06		 je	 SHORT $LN141@GetDirectX@2
  003c3	c7 07 01 00 00
	00		 mov	 DWORD PTR [edi], 1
$LN141@GetDirectX@2:

; 357  :                 if( pcDirectXVersionLetter ) *pcDirectXVersionLetter = TEXT('a');

  003c9	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _pcDirectXVersionLetter$GSCopy$[ebp]
  003cf	85 c0		 test	 eax, eax
  003d1	74 03		 je	 SHORT $LN51@GetDirectX@2
  003d3	c6 00 61	 mov	 BYTE PTR [eax], 97	; 00000061H
$LN51@GetDirectX@2:

; 358  :                 bFound = true;

  003d6	c7 85 e8 fb ff
	ff 01 00 00 00	 mov	 DWORD PTR _bFound$[ebp], 1
$LN54@GetDirectX@2:

; 359  :             }
; 360  :         }
; 361  : 
; 362  :         // Switch off the ddraw version
; 363  :         StringCchCopy( szFile, 512, szPath );

  003e0	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  003e6	50		 push	 eax
  003e7	53		 push	 ebx
  003e8	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  003ee	50		 push	 eax
  003ef	e8 00 00 00 00	 call	 ?StringCchCopyA@@YGJPADIPBD@Z ; StringCchCopyA

; 364  :         StringCchCat( szFile, 512, TEXT("\\ddraw.dll") );

  003f4	68 00 00 00 00	 push	 OFFSET ??_C@_0L@KIPMHOEJ@?2ddraw?4dll?$AA@
  003f9	53		 push	 ebx
  003fa	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  00400	50		 push	 eax
  00401	e8 00 00 00 00	 call	 ?StringCchCatA@@YGJPADIPBD@Z ; StringCchCatA

; 365  :         if( SUCCEEDED( GetFileVersion( szFile, &llFileVersion ) ) )

  00406	8d 85 f4 fb ff
	ff		 lea	 eax, DWORD PTR _llFileVersion$[ebp]
  0040c	50		 push	 eax
  0040d	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  00413	50		 push	 eax
  00414	e8 00 00 00 00	 call	 ?GetFileVersion@@YAJPADPAT_ULARGE_INTEGER@@@Z ; GetFileVersion
  00419	59		 pop	 ecx
  0041a	59		 pop	 ecx
  0041b	6a 07		 push	 7
  0041d	5f		 pop	 edi
  0041e	be 07 00 04 00	 mov	 esi, 262151		; 00040007H
  00423	85 c0		 test	 eax, eax
  00425	78 4f		 js	 SHORT $LN49@GetDirectX@2

; 366  :         {
; 367  :             if( CompareLargeInts( llFileVersion, MakeInt64( 4, 7, 0, 700 ) ) >= 0 ) // Win9x version

  00427	56		 push	 esi
  00428	b9 bc 02 00 00	 mov	 ecx, 700		; 000002bcH
  0042d	51		 push	 ecx
  0042e	ff b5 f8 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp+4]
  00434	ff b5 f4 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp]
  0043a	e8 00 00 00 00	 call	 ?CompareLargeInts@@YAHT_ULARGE_INTEGER@@0@Z ; CompareLargeInts
  0043f	83 c4 10	 add	 esp, 16			; 00000010H
  00442	85 c0		 test	 eax, eax
  00444	78 30		 js	 SHORT $LN49@GetDirectX@2

; 368  :             {
; 369  :                 // TODO: find win2k version
; 370  : 
; 371  :                 // ddraw.dll is the DirectX7.0 version, so we must be at least DirectX7.0
; 372  :                 if( pdwDirectXVersionMajor ) *pdwDirectXVersionMajor = 7;

  00446	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _pdwDirectXVersionMajor$GSCopy$[ebp]
  0044c	85 c0		 test	 eax, eax
  0044e	74 02		 je	 SHORT $LN48@GetDirectX@2
  00450	89 38		 mov	 DWORD PTR [eax], edi
$LN48@GetDirectX@2:

; 373  :                 if( pdwDirectXVersionMinor ) *pdwDirectXVersionMinor = 0;

  00452	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR _pdwDirectXVersionMinor$GSCopy$[ebp]
  00458	85 c0		 test	 eax, eax
  0045a	74 03		 je	 SHORT $LN47@GetDirectX@2
  0045c	83 20 00	 and	 DWORD PTR [eax], 0
$LN47@GetDirectX@2:

; 374  :                 if( pcDirectXVersionLetter ) *pcDirectXVersionLetter = TEXT(' ');

  0045f	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _pcDirectXVersionLetter$GSCopy$[ebp]
  00465	85 c0		 test	 eax, eax
  00467	74 03		 je	 SHORT $LN46@GetDirectX@2
  00469	c6 00 20	 mov	 BYTE PTR [eax], 32	; 00000020H
$LN46@GetDirectX@2:

; 375  :                 bFound = true;

  0046c	c7 85 e8 fb ff
	ff 01 00 00 00	 mov	 DWORD PTR _bFound$[ebp], 1
$LN49@GetDirectX@2:

; 376  :             }
; 377  :         }
; 378  : 
; 379  :         // Switch off the dinput version
; 380  :         StringCchCopy( szFile, 512, szPath );

  00476	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  0047c	50		 push	 eax
  0047d	53		 push	 ebx
  0047e	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  00484	50		 push	 eax
  00485	e8 00 00 00 00	 call	 ?StringCchCopyA@@YGJPADIPBD@Z ; StringCchCopyA

; 381  :         StringCchCat( szFile, 512, TEXT("\\dinput.dll") );

  0048a	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CEIGHIDO@?2dinput?4dll?$AA@
  0048f	53		 push	 ebx
  00490	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  00496	50		 push	 eax
  00497	e8 00 00 00 00	 call	 ?StringCchCatA@@YGJPADIPBD@Z ; StringCchCatA

; 382  :         if( SUCCEEDED( GetFileVersion( szFile, &llFileVersion ) ) )

  0049c	8d 85 f4 fb ff
	ff		 lea	 eax, DWORD PTR _llFileVersion$[ebp]
  004a2	50		 push	 eax
  004a3	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  004a9	50		 push	 eax
  004aa	e8 00 00 00 00	 call	 ?GetFileVersion@@YAJPADPAT_ULARGE_INTEGER@@@Z ; GetFileVersion
  004af	59		 pop	 ecx
  004b0	59		 pop	 ecx
  004b1	85 c0		 test	 eax, eax
  004b3	78 4f		 js	 SHORT $LN44@GetDirectX@2

; 383  :         {
; 384  :             if( CompareLargeInts( llFileVersion, MakeInt64( 4, 7, 0, 716 ) ) >= 0 ) // Win9x version

  004b5	56		 push	 esi
  004b6	b9 cc 02 00 00	 mov	 ecx, 716		; 000002ccH
  004bb	51		 push	 ecx
  004bc	ff b5 f8 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp+4]
  004c2	ff b5 f4 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp]
  004c8	e8 00 00 00 00	 call	 ?CompareLargeInts@@YAHT_ULARGE_INTEGER@@0@Z ; CompareLargeInts
  004cd	83 c4 10	 add	 esp, 16			; 00000010H
  004d0	85 c0		 test	 eax, eax
  004d2	78 30		 js	 SHORT $LN44@GetDirectX@2

; 385  :             {
; 386  :                 // ddraw.dll is the DirectX7.0 version, so we must be at least DirectX7.0a
; 387  :                 if( pdwDirectXVersionMajor ) *pdwDirectXVersionMajor = 7;

  004d4	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _pdwDirectXVersionMajor$GSCopy$[ebp]
  004da	85 c0		 test	 eax, eax
  004dc	74 02		 je	 SHORT $LN43@GetDirectX@2
  004de	89 38		 mov	 DWORD PTR [eax], edi
$LN43@GetDirectX@2:

; 388  :                 if( pdwDirectXVersionMinor ) *pdwDirectXVersionMinor = 0;

  004e0	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR _pdwDirectXVersionMinor$GSCopy$[ebp]
  004e6	85 c0		 test	 eax, eax
  004e8	74 03		 je	 SHORT $LN42@GetDirectX@2
  004ea	83 20 00	 and	 DWORD PTR [eax], 0
$LN42@GetDirectX@2:

; 389  :                 if( pcDirectXVersionLetter ) *pcDirectXVersionLetter = TEXT('a');

  004ed	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _pcDirectXVersionLetter$GSCopy$[ebp]
  004f3	85 c0		 test	 eax, eax
  004f5	74 03		 je	 SHORT $LN41@GetDirectX@2
  004f7	c6 00 61	 mov	 BYTE PTR [eax], 97	; 00000061H
$LN41@GetDirectX@2:

; 390  :                 bFound = true;

  004fa	c7 85 e8 fb ff
	ff 01 00 00 00	 mov	 DWORD PTR _bFound$[ebp], 1
$LN44@GetDirectX@2:

; 391  :             }
; 392  :         }
; 393  : 
; 394  :         // Switch off the ddraw version
; 395  :         StringCchCopy( szFile, 512, szPath );

  00504	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  0050a	50		 push	 eax
  0050b	53		 push	 ebx
  0050c	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  00512	50		 push	 eax
  00513	e8 00 00 00 00	 call	 ?StringCchCopyA@@YGJPADIPBD@Z ; StringCchCopyA

; 396  :         StringCchCat( szFile, 512, TEXT("\\ddraw.dll") );

  00518	68 00 00 00 00	 push	 OFFSET ??_C@_0L@KIPMHOEJ@?2ddraw?4dll?$AA@
  0051d	53		 push	 ebx
  0051e	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  00524	50		 push	 eax
  00525	e8 00 00 00 00	 call	 ?StringCchCatA@@YGJPADIPBD@Z ; StringCchCatA

; 397  :         if( SUCCEEDED( GetFileVersion( szFile, &llFileVersion ) ) )

  0052a	8d 85 f4 fb ff
	ff		 lea	 eax, DWORD PTR _llFileVersion$[ebp]
  00530	50		 push	 eax
  00531	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  00537	50		 push	 eax
  00538	e8 00 00 00 00	 call	 ?GetFileVersion@@YAJPADPAT_ULARGE_INTEGER@@@Z ; GetFileVersion
  0053d	59		 pop	 ecx
  0053e	59		 pop	 ecx
  0053f	bf 08 00 04 00	 mov	 edi, 262152		; 00040008H
  00544	85 c0		 test	 eax, eax
  00546	0f 88 8c 00 00
	00		 js	 $LN39@GetDirectX@2

; 398  :         {
; 399  :             if( (HIWORD(llFileVersion.HighPart) == 4 && CompareLargeInts( llFileVersion, MakeInt64( 4, 8, 0, 400 ) ) >= 0) || // Win9x version
; 400  :                 (HIWORD(llFileVersion.HighPart) == 5 && CompareLargeInts( llFileVersion, MakeInt64( 5, 1, 2258, 400 ) ) >= 0) ) // Win2k/WinXP version

  0054c	8b 95 f8 fb ff
	ff		 mov	 edx, DWORD PTR _llFileVersion$[ebp+4]
  00552	c1 ea 10	 shr	 edx, 16			; 00000010H
  00555	66 83 fa 04	 cmp	 dx, 4
  00559	75 1f		 jne	 SHORT $LN37@GetDirectX@2
  0055b	57		 push	 edi
  0055c	b9 90 01 00 00	 mov	 ecx, 400		; 00000190H
  00561	51		 push	 ecx
  00562	ff b5 f8 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp+4]
  00568	ff b5 f4 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp]
  0056e	e8 00 00 00 00	 call	 ?CompareLargeInts@@YAHT_ULARGE_INTEGER@@0@Z ; CompareLargeInts
  00573	83 c4 10	 add	 esp, 16			; 00000010H
  00576	85 c0		 test	 eax, eax
  00578	79 2a		 jns	 SHORT $LN38@GetDirectX@2
$LN37@GetDirectX@2:
  0057a	66 83 fa 05	 cmp	 dx, 5
  0057e	75 58		 jne	 SHORT $LN39@GetDirectX@2
  00580	b8 01 00 05 00	 mov	 eax, 327681		; 00050001H
  00585	50		 push	 eax
  00586	b9 90 01 d2 08	 mov	 ecx, 147980688		; 08d20190H
  0058b	51		 push	 ecx
  0058c	ff b5 f8 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp+4]
  00592	ff b5 f4 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp]
  00598	e8 00 00 00 00	 call	 ?CompareLargeInts@@YAHT_ULARGE_INTEGER@@0@Z ; CompareLargeInts
  0059d	83 c4 10	 add	 esp, 16			; 00000010H
  005a0	85 c0		 test	 eax, eax
  005a2	78 34		 js	 SHORT $LN39@GetDirectX@2
$LN38@GetDirectX@2:

; 401  :             {
; 402  :                 // ddraw.dll is the DirectX8.0 version, so we must be at least DirectX8.0 or DirectX8.0a (no redist change)
; 403  :                 if( pdwDirectXVersionMajor ) *pdwDirectXVersionMajor = 8;

  005a4	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _pdwDirectXVersionMajor$GSCopy$[ebp]
  005aa	85 c0		 test	 eax, eax
  005ac	74 06		 je	 SHORT $LN36@GetDirectX@2
  005ae	c7 00 08 00 00
	00		 mov	 DWORD PTR [eax], 8
$LN36@GetDirectX@2:

; 404  :                 if( pdwDirectXVersionMinor ) *pdwDirectXVersionMinor = 0;

  005b4	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR _pdwDirectXVersionMinor$GSCopy$[ebp]
  005ba	85 c0		 test	 eax, eax
  005bc	74 03		 je	 SHORT $LN35@GetDirectX@2
  005be	83 20 00	 and	 DWORD PTR [eax], 0
$LN35@GetDirectX@2:

; 405  :                 if( pcDirectXVersionLetter ) *pcDirectXVersionLetter = TEXT(' ');

  005c1	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _pcDirectXVersionLetter$GSCopy$[ebp]
  005c7	85 c0		 test	 eax, eax
  005c9	74 03		 je	 SHORT $LN34@GetDirectX@2
  005cb	c6 00 20	 mov	 BYTE PTR [eax], 32	; 00000020H
$LN34@GetDirectX@2:

; 406  :                 bFound = true;

  005ce	c7 85 e8 fb ff
	ff 01 00 00 00	 mov	 DWORD PTR _bFound$[ebp], 1
$LN39@GetDirectX@2:

; 407  :             }
; 408  :         }
; 409  : 
; 410  :         StringCchCopy( szFile, 512, szPath );

  005d8	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  005de	50		 push	 eax
  005df	53		 push	 ebx
  005e0	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  005e6	50		 push	 eax
  005e7	e8 00 00 00 00	 call	 ?StringCchCopyA@@YGJPADIPBD@Z ; StringCchCopyA

; 411  :         StringCchCat( szFile, 512, TEXT("\\d3d8.dll"));

  005ec	68 00 00 00 00	 push	 OFFSET ??_C@_09GAHAHPJB@?2d3d8?4dll?$AA@
  005f1	53		 push	 ebx
  005f2	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  005f8	50		 push	 eax
  005f9	e8 00 00 00 00	 call	 ?StringCchCatA@@YGJPADIPBD@Z ; StringCchCatA

; 412  :         if( SUCCEEDED( GetFileVersion( szFile, &llFileVersion ) ) )

  005fe	8d 85 f4 fb ff
	ff		 lea	 eax, DWORD PTR _llFileVersion$[ebp]
  00604	50		 push	 eax
  00605	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  0060b	50		 push	 eax
  0060c	e8 00 00 00 00	 call	 ?GetFileVersion@@YAJPADPAT_ULARGE_INTEGER@@@Z ; GetFileVersion
  00611	59		 pop	 ecx
  00612	59		 pop	 ecx
  00613	85 c0		 test	 eax, eax
  00615	0f 88 f0 00 00
	00		 js	 $LN133@GetDirectX@2

; 413  :         {
; 414  :             if( (HIWORD(llFileVersion.HighPart) == 4 && CompareLargeInts( llFileVersion, MakeInt64( 4, 8, 1, 881 ) ) >= 0) || // Win9x version
; 415  :                 (HIWORD(llFileVersion.HighPart) == 5 && CompareLargeInts( llFileVersion, MakeInt64( 5, 1, 2600, 881 ) ) >= 0) ) // Win2k/WinXP version

  0061b	8b 95 f8 fb ff
	ff		 mov	 edx, DWORD PTR _llFileVersion$[ebp+4]
  00621	8b b5 f4 fb ff
	ff		 mov	 esi, DWORD PTR _llFileVersion$[ebp]
  00627	8b da		 mov	 ebx, edx
  00629	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0062c	66 83 fb 04	 cmp	 bx, 4
  00630	75 15		 jne	 SHORT $LN30@GetDirectX@2
  00632	57		 push	 edi
  00633	b9 71 03 01 00	 mov	 ecx, 66417		; 00010371H
  00638	51		 push	 ecx
  00639	52		 push	 edx
  0063a	56		 push	 esi
  0063b	e8 00 00 00 00	 call	 ?CompareLargeInts@@YAHT_ULARGE_INTEGER@@0@Z ; CompareLargeInts
  00640	83 c4 10	 add	 esp, 16			; 00000010H
  00643	85 c0		 test	 eax, eax
  00645	79 20		 jns	 SHORT $LN31@GetDirectX@2
$LN30@GetDirectX@2:
  00647	66 83 fb 05	 cmp	 bx, 5
  0064b	75 51		 jne	 SHORT $LN130@GetDirectX@2
  0064d	b8 01 00 05 00	 mov	 eax, 327681		; 00050001H
  00652	50		 push	 eax
  00653	b9 71 03 28 0a	 mov	 ecx, 170394481		; 0a280371H
  00658	51		 push	 ecx
  00659	52		 push	 edx
  0065a	56		 push	 esi
  0065b	e8 00 00 00 00	 call	 ?CompareLargeInts@@YAHT_ULARGE_INTEGER@@0@Z ; CompareLargeInts
  00660	83 c4 10	 add	 esp, 16			; 00000010H
  00663	85 c0		 test	 eax, eax
  00665	78 37		 js	 SHORT $LN130@GetDirectX@2
$LN31@GetDirectX@2:

; 416  :             {
; 417  :                 // d3d8.dll is the DirectX8.1 version, so we must be at least DirectX8.1
; 418  :                 if( pdwDirectXVersionMajor ) *pdwDirectXVersionMajor = 8;

  00667	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _pdwDirectXVersionMajor$GSCopy$[ebp]
  0066d	85 c0		 test	 eax, eax
  0066f	74 06		 je	 SHORT $LN29@GetDirectX@2
  00671	c7 00 08 00 00
	00		 mov	 DWORD PTR [eax], 8
$LN29@GetDirectX@2:

; 419  :                 if( pdwDirectXVersionMinor ) *pdwDirectXVersionMinor = 1;

  00677	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR _pdwDirectXVersionMinor$GSCopy$[ebp]
  0067d	85 c0		 test	 eax, eax
  0067f	74 06		 je	 SHORT $LN129@GetDirectX@2
  00681	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
$LN129@GetDirectX@2:

; 420  :                 if( pcDirectXVersionLetter ) *pcDirectXVersionLetter = TEXT(' ');

  00687	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _pcDirectXVersionLetter$GSCopy$[ebp]
  0068d	85 c0		 test	 eax, eax
  0068f	74 03		 je	 SHORT $LN27@GetDirectX@2
  00691	c6 00 20	 mov	 BYTE PTR [eax], 32	; 00000020H
$LN27@GetDirectX@2:

; 421  :                 bFound = true;

  00694	c7 85 e8 fb ff
	ff 01 00 00 00	 mov	 DWORD PTR _bFound$[ebp], 1
$LN130@GetDirectX@2:

; 422  :             }
; 423  : 
; 424  :             if( (HIWORD(llFileVersion.HighPart) == 4 && CompareLargeInts( llFileVersion, MakeInt64( 4, 8, 1, 901 ) ) >= 0) || // Win9x version
; 425  :                 (HIWORD(llFileVersion.HighPart) == 5 && CompareLargeInts( llFileVersion, MakeInt64( 5, 1, 2600, 901 ) ) >= 0) ) // Win2k/WinXP version

  0069e	66 83 fb 04	 cmp	 bx, 4
  006a2	75 15		 jne	 SHORT $LN24@GetDirectX@2
  006a4	57		 push	 edi
  006a5	b9 85 03 01 00	 mov	 ecx, 66437		; 00010385H
  006aa	51		 push	 ecx
  006ab	52		 push	 edx
  006ac	56		 push	 esi
  006ad	e8 00 00 00 00	 call	 ?CompareLargeInts@@YAHT_ULARGE_INTEGER@@0@Z ; CompareLargeInts
  006b2	83 c4 10	 add	 esp, 16			; 00000010H
  006b5	85 c0		 test	 eax, eax
  006b7	79 20		 jns	 SHORT $LN25@GetDirectX@2
$LN24@GetDirectX@2:
  006b9	66 83 fb 05	 cmp	 bx, 5
  006bd	75 4c		 jne	 SHORT $LN133@GetDirectX@2
  006bf	b8 01 00 05 00	 mov	 eax, 327681		; 00050001H
  006c4	50		 push	 eax
  006c5	b9 85 03 28 0a	 mov	 ecx, 170394501		; 0a280385H
  006ca	51		 push	 ecx
  006cb	52		 push	 edx
  006cc	56		 push	 esi
  006cd	e8 00 00 00 00	 call	 ?CompareLargeInts@@YAHT_ULARGE_INTEGER@@0@Z ; CompareLargeInts
  006d2	83 c4 10	 add	 esp, 16			; 00000010H
  006d5	85 c0		 test	 eax, eax
  006d7	78 32		 js	 SHORT $LN133@GetDirectX@2
$LN25@GetDirectX@2:

; 426  :             {
; 427  :                 // d3d8.dll is the DirectX8.1a version, so we must be at least DirectX8.1a
; 428  :                 if( pdwDirectXVersionMajor ) *pdwDirectXVersionMajor = 8;

  006d9	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _pdwDirectXVersionMajor$GSCopy$[ebp]
  006df	85 c0		 test	 eax, eax
  006e1	74 06		 je	 SHORT $LN131@GetDirectX@2
  006e3	c7 00 08 00 00
	00		 mov	 DWORD PTR [eax], 8
$LN131@GetDirectX@2:

; 429  :                 if( pdwDirectXVersionMinor ) *pdwDirectXVersionMinor = 1;

  006e9	8b bd e4 fb ff
	ff		 mov	 edi, DWORD PTR _pdwDirectXVersionMinor$GSCopy$[ebp]
  006ef	85 ff		 test	 edi, edi
  006f1	74 06		 je	 SHORT $LN132@GetDirectX@2
  006f3	c7 07 01 00 00
	00		 mov	 DWORD PTR [edi], 1
$LN132@GetDirectX@2:

; 430  :                 if( pcDirectXVersionLetter ) *pcDirectXVersionLetter = TEXT('a');

  006f9	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _pcDirectXVersionLetter$GSCopy$[ebp]
  006ff	85 c0		 test	 eax, eax
  00701	74 03		 je	 SHORT $LN21@GetDirectX@2
  00703	c6 00 61	 mov	 BYTE PTR [eax], 97	; 00000061H
$LN21@GetDirectX@2:

; 431  :                 bFound = true;

  00706	33 f6		 xor	 esi, esi
  00708	46		 inc	 esi
  00709	eb 0c		 jmp	 SHORT $LN26@GetDirectX@2
$LN133@GetDirectX@2:
  0070b	8b b5 e8 fb ff
	ff		 mov	 esi, DWORD PTR _bFound$[ebp]
  00711	8b bd e4 fb ff
	ff		 mov	 edi, DWORD PTR _pdwDirectXVersionMinor$GSCopy$[ebp]
$LN26@GetDirectX@2:

; 432  :             }
; 433  :         }
; 434  : 
; 435  :         StringCchCopy( szFile, 512, szPath );

  00717	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  0071d	50		 push	 eax
  0071e	bb 00 02 00 00	 mov	 ebx, 512		; 00000200H
  00723	53		 push	 ebx
  00724	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  0072a	50		 push	 eax
  0072b	e8 00 00 00 00	 call	 ?StringCchCopyA@@YGJPADIPBD@Z ; StringCchCopyA

; 436  :         StringCchCat( szFile, 512, TEXT("\\mpg2splt.ax"));

  00730	68 00 00 00 00	 push	 OFFSET ??_C@_0N@ELFFLKCN@?2mpg2splt?4ax?$AA@
  00735	53		 push	 ebx
  00736	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  0073c	50		 push	 eax
  0073d	e8 00 00 00 00	 call	 ?StringCchCatA@@YGJPADIPBD@Z ; StringCchCatA

; 437  :         if( SUCCEEDED( GetFileVersion( szFile, &llFileVersion ) ) )

  00742	8d 85 f4 fb ff
	ff		 lea	 eax, DWORD PTR _llFileVersion$[ebp]
  00748	50		 push	 eax
  00749	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  0074f	50		 push	 eax
  00750	e8 00 00 00 00	 call	 ?GetFileVersion@@YAJPADPAT_ULARGE_INTEGER@@@Z ; GetFileVersion
  00755	59		 pop	 ecx
  00756	59		 pop	 ecx
  00757	85 c0		 test	 eax, eax
  00759	78 4e		 js	 SHORT $LN19@GetDirectX@2

; 438  :         {
; 439  :             if( CompareLargeInts( llFileVersion, MakeInt64( 6, 3, 1, 885 ) ) >= 0 ) // Win9x/Win2k/WinXP version

  0075b	b8 03 00 06 00	 mov	 eax, 393219		; 00060003H
  00760	50		 push	 eax
  00761	b9 75 03 01 00	 mov	 ecx, 66421		; 00010375H
  00766	51		 push	 ecx
  00767	ff b5 f8 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp+4]
  0076d	ff b5 f4 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp]
  00773	e8 00 00 00 00	 call	 ?CompareLargeInts@@YAHT_ULARGE_INTEGER@@0@Z ; CompareLargeInts
  00778	83 c4 10	 add	 esp, 16			; 00000010H
  0077b	85 c0		 test	 eax, eax
  0077d	78 2a		 js	 SHORT $LN19@GetDirectX@2

; 440  :             {
; 441  :                 // quartz.dll is the DirectX8.1b version, so we must be at least DirectX8.1b
; 442  :                 if( pdwDirectXVersionMajor ) *pdwDirectXVersionMajor = 8;

  0077f	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _pdwDirectXVersionMajor$GSCopy$[ebp]
  00785	85 c0		 test	 eax, eax
  00787	74 06		 je	 SHORT $LN18@GetDirectX@2
  00789	c7 00 08 00 00
	00		 mov	 DWORD PTR [eax], 8
$LN18@GetDirectX@2:

; 443  :                 if( pdwDirectXVersionMinor ) *pdwDirectXVersionMinor = 1;

  0078f	85 ff		 test	 edi, edi
  00791	74 06		 je	 SHORT $LN136@GetDirectX@2
  00793	c7 07 01 00 00
	00		 mov	 DWORD PTR [edi], 1
$LN136@GetDirectX@2:

; 444  :                 if( pcDirectXVersionLetter ) *pcDirectXVersionLetter = TEXT('b');

  00799	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _pcDirectXVersionLetter$GSCopy$[ebp]
  0079f	85 c0		 test	 eax, eax
  007a1	74 03		 je	 SHORT $LN16@GetDirectX@2
  007a3	c6 00 62	 mov	 BYTE PTR [eax], 98	; 00000062H
$LN16@GetDirectX@2:

; 445  :                 bFound = true;

  007a6	33 f6		 xor	 esi, esi
  007a8	46		 inc	 esi
$LN19@GetDirectX@2:

; 446  :             }
; 447  :         }
; 448  : 
; 449  :         StringCchCopy( szFile, 512, szPath );

  007a9	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  007af	50		 push	 eax
  007b0	53		 push	 ebx
  007b1	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  007b7	50		 push	 eax
  007b8	e8 00 00 00 00	 call	 ?StringCchCopyA@@YGJPADIPBD@Z ; StringCchCopyA

; 450  :         StringCchCat( szFile, 512, TEXT("\\dpnet.dll"));

  007bd	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BPBPON@?2dpnet?4dll?$AA@
  007c2	53		 push	 ebx
  007c3	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  007c9	50		 push	 eax
  007ca	e8 00 00 00 00	 call	 ?StringCchCatA@@YGJPADIPBD@Z ; StringCchCatA

; 451  :         if( SUCCEEDED( GetFileVersion( szFile, &llFileVersion ) ) )

  007cf	8d 85 f4 fb ff
	ff		 lea	 eax, DWORD PTR _llFileVersion$[ebp]
  007d5	50		 push	 eax
  007d6	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  007dc	50		 push	 eax
  007dd	e8 00 00 00 00	 call	 ?GetFileVersion@@YAJPADPAT_ULARGE_INTEGER@@@Z ; GetFileVersion
  007e2	59		 pop	 ecx
  007e3	59		 pop	 ecx
  007e4	85 c0		 test	 eax, eax
  007e6	0f 88 87 00 00
	00		 js	 $LN14@GetDirectX@2

; 452  :         {
; 453  :             if( (HIWORD(llFileVersion.HighPart) == 4 && CompareLargeInts( llFileVersion, MakeInt64( 4, 9, 0, 134 ) ) >= 0) || // Win9x version
; 454  :                 (HIWORD(llFileVersion.HighPart) == 5 && CompareLargeInts( llFileVersion, MakeInt64( 5, 2, 3677, 134 ) ) >= 0) ) // Win2k/WinXP version

  007ec	8b 8d f8 fb ff
	ff		 mov	 ecx, DWORD PTR _llFileVersion$[ebp+4]
  007f2	c1 e9 10	 shr	 ecx, 16			; 00000010H
  007f5	66 83 f9 04	 cmp	 cx, 4
  007f9	75 24		 jne	 SHORT $LN12@GetDirectX@2
  007fb	b8 09 00 04 00	 mov	 eax, 262153		; 00040009H
  00800	50		 push	 eax
  00801	ba 86 00 00 00	 mov	 edx, 134		; 00000086H
  00806	52		 push	 edx
  00807	ff b5 f8 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp+4]
  0080d	ff b5 f4 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp]
  00813	e8 00 00 00 00	 call	 ?CompareLargeInts@@YAHT_ULARGE_INTEGER@@0@Z ; CompareLargeInts
  00818	83 c4 10	 add	 esp, 16			; 00000010H
  0081b	85 c0		 test	 eax, eax
  0081d	79 2a		 jns	 SHORT $LN13@GetDirectX@2
$LN12@GetDirectX@2:
  0081f	66 83 f9 05	 cmp	 cx, 5
  00823	75 4e		 jne	 SHORT $LN14@GetDirectX@2
  00825	b8 02 00 05 00	 mov	 eax, 327682		; 00050002H
  0082a	50		 push	 eax
  0082b	b9 86 00 5d 0e	 mov	 ecx, 240976006		; 0e5d0086H
  00830	51		 push	 ecx
  00831	ff b5 f8 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp+4]
  00837	ff b5 f4 fb ff
	ff		 push	 DWORD PTR _llFileVersion$[ebp]
  0083d	e8 00 00 00 00	 call	 ?CompareLargeInts@@YAHT_ULARGE_INTEGER@@0@Z ; CompareLargeInts
  00842	83 c4 10	 add	 esp, 16			; 00000010H
  00845	85 c0		 test	 eax, eax
  00847	78 2a		 js	 SHORT $LN14@GetDirectX@2
$LN13@GetDirectX@2:

; 455  :             {
; 456  :                 // dpnet.dll is the DirectX8.2 version, so we must be at least DirectX8.2
; 457  :                 if( pdwDirectXVersionMajor ) *pdwDirectXVersionMajor = 8;

  00849	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _pdwDirectXVersionMajor$GSCopy$[ebp]
  0084f	85 c0		 test	 eax, eax
  00851	74 06		 je	 SHORT $LN11@GetDirectX@2
  00853	c7 00 08 00 00
	00		 mov	 DWORD PTR [eax], 8
$LN11@GetDirectX@2:

; 458  :                 if( pdwDirectXVersionMinor ) *pdwDirectXVersionMinor = 2;

  00859	85 ff		 test	 edi, edi
  0085b	74 06		 je	 SHORT $LN10@GetDirectX@2
  0085d	c7 07 02 00 00
	00		 mov	 DWORD PTR [edi], 2
$LN10@GetDirectX@2:

; 459  :                 if( pcDirectXVersionLetter ) *pcDirectXVersionLetter = TEXT(' ');

  00863	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _pcDirectXVersionLetter$GSCopy$[ebp]
  00869	85 c0		 test	 eax, eax
  0086b	74 03		 je	 SHORT $LN9@GetDirectX@2
  0086d	c6 00 20	 mov	 BYTE PTR [eax], 32	; 00000020H
$LN9@GetDirectX@2:

; 460  :                 bFound = true;

  00870	33 f6		 xor	 esi, esi
  00872	46		 inc	 esi
$LN14@GetDirectX@2:

; 461  :             }
; 462  :         }
; 463  : 
; 464  :         StringCchCopy( szFile, 512, szPath );

  00873	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  00879	50		 push	 eax
  0087a	53		 push	 ebx
  0087b	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  00881	50		 push	 eax
  00882	e8 00 00 00 00	 call	 ?StringCchCopyA@@YGJPADIPBD@Z ; StringCchCopyA

; 465  :         StringCchCat( szFile, 512, TEXT("\\d3d9.dll"));

  00887	68 00 00 00 00	 push	 OFFSET ??_C@_09KLCMKMDE@?2d3d9?4dll?$AA@
  0088c	53		 push	 ebx
  0088d	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  00893	50		 push	 eax
  00894	e8 00 00 00 00	 call	 ?StringCchCatA@@YGJPADIPBD@Z ; StringCchCatA

; 466  :         if( SUCCEEDED( GetFileVersion( szFile, &llFileVersion ) ) )

  00899	8d 85 f4 fb ff
	ff		 lea	 eax, DWORD PTR _llFileVersion$[ebp]
  0089f	50		 push	 eax
  008a0	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  008a6	50		 push	 eax
  008a7	e8 00 00 00 00	 call	 ?GetFileVersion@@YAJPADPAT_ULARGE_INTEGER@@@Z ; GetFileVersion
  008ac	59		 pop	 ecx
  008ad	59		 pop	 ecx
  008ae	85 c0		 test	 eax, eax
  008b0	78 27		 js	 SHORT $LN137@GetDirectX@2

; 467  :         {
; 468  :             // File exists, but be at least DirectX9
; 469  :             if( pdwDirectXVersionMajor ) *pdwDirectXVersionMajor = 9;

  008b2	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _pdwDirectXVersionMajor$GSCopy$[ebp]
  008b8	85 c0		 test	 eax, eax
  008ba	74 06		 je	 SHORT $LN7@GetDirectX@2
  008bc	c7 00 09 00 00
	00		 mov	 DWORD PTR [eax], 9
$LN7@GetDirectX@2:

; 470  :             if( pdwDirectXVersionMinor ) *pdwDirectXVersionMinor = 0;

  008c2	85 ff		 test	 edi, edi
  008c4	74 03		 je	 SHORT $LN6@GetDirectX@2
  008c6	83 27 00	 and	 DWORD PTR [edi], 0
$LN6@GetDirectX@2:

; 471  :             if( pcDirectXVersionLetter ) *pcDirectXVersionLetter = TEXT(' ');

  008c9	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _pcDirectXVersionLetter$GSCopy$[ebp]
  008cf	85 c0		 test	 eax, eax
  008d1	74 03		 je	 SHORT $LN5@GetDirectX@2
  008d3	c6 00 20	 mov	 BYTE PTR [eax], 32	; 00000020H
$LN5@GetDirectX@2:

; 472  :             bFound = true;

  008d6	33 f6		 xor	 esi, esi
  008d8	46		 inc	 esi
$LN137@GetDirectX@2:

; 473  :         }
; 474  :     }
; 475  : 
; 476  :     if( !bFound )

  008d9	5f		 pop	 edi
  008da	85 f6		 test	 esi, esi
  008dc	5e		 pop	 esi
  008dd	5b		 pop	 ebx
  008de	75 27		 jne	 SHORT $LN1@GetDirectX@2
$LN128@GetDirectX@2:

; 477  :     {
; 478  :         // No DirectX installed
; 479  :         if( pdwDirectXVersionMajor ) *pdwDirectXVersionMajor = 0;

  008e0	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _pdwDirectXVersionMajor$GSCopy$[ebp]
  008e6	85 c0		 test	 eax, eax
  008e8	74 03		 je	 SHORT $LN3@GetDirectX@2
  008ea	83 20 00	 and	 DWORD PTR [eax], 0
$LN3@GetDirectX@2:

; 480  :         if( pdwDirectXVersionMinor ) *pdwDirectXVersionMinor = 0;

  008ed	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR _pdwDirectXVersionMinor$GSCopy$[ebp]
  008f3	85 c0		 test	 eax, eax
  008f5	74 03		 je	 SHORT $LN2@GetDirectX@2
  008f7	83 20 00	 and	 DWORD PTR [eax], 0
$LN2@GetDirectX@2:

; 481  :         if( pcDirectXVersionLetter ) *pcDirectXVersionLetter = TEXT(' ');

  008fa	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _pcDirectXVersionLetter$GSCopy$[ebp]
  00900	85 c0		 test	 eax, eax
  00902	74 03		 je	 SHORT $LN1@GetDirectX@2
  00904	c6 00 20	 mov	 BYTE PTR [eax], 32	; 00000020H
$LN1@GetDirectX@2:

; 482  :     }
; 483  : 
; 484  :     return S_OK;
; 485  : }

  00907	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0090a	33 cd		 xor	 ecx, ebp
  0090c	33 c0		 xor	 eax, eax
  0090e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00913	c9		 leave
  00914	c3		 ret	 0
?GetDirectXVersionViaFileVersions@@YAJPAK0PAD@Z ENDP	; GetDirectXVersionViaFileVersions
_TEXT	ENDS
PUBLIC	??_C@_07KECHDMFL@?$CFd?4?$CFd?$CFc?$AA@		; `string'
PUBLIC	??_C@_05KBEOJPB@?$CFd?4?$CFd?$AA@		; `string'
PUBLIC	?CheckDXVersion@@YAJPAKPADH@Z			; CheckDXVersion
EXTRN	__imp__tolower:PROC
;	COMDAT ??_C@_07KECHDMFL@?$CFd?4?$CFd?$CFc?$AA@
CONST	SEGMENT
??_C@_07KECHDMFL@?$CFd?4?$CFd?$CFc?$AA@ DB '%d.%d%c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05KBEOJPB@?$CFd?4?$CFd?$AA@
CONST	SEGMENT
??_C@_05KBEOJPB@?$CFd?4?$CFd?$AA@ DB '%d.%d', 00H	; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?CheckDXVersion@@YAJPAKPADH@Z
_TEXT	SEGMENT
_dwDirectXVersionMajor$ = -4				; size = 4
_pdwDirectXVersion$ = 8					; size = 4
_cDirectXVersionLetter$ = 11				; size = 1
_dwDirectXVersionMinor$ = 12				; size = 4
_strDirectXVersion$ = 12				; size = 4
_cchDirectXVersion$ = 16				; size = 4
?CheckDXVersion@@YAJPAKPADH@Z PROC			; CheckDXVersion, COMDAT

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 69   :     bool bGotDirectXVersion = false;
; 70   : 
; 71   :     // Init values to unknown
; 72   :     if( pdwDirectXVersion )

  00006	8b 75 08	 mov	 esi, DWORD PTR _pdwDirectXVersion$[ebp]
  00009	33 db		 xor	 ebx, ebx
  0000b	57		 push	 edi
  0000c	3b f3		 cmp	 esi, ebx
  0000e	74 02		 je	 SHORT $LN11@CheckDXVer

; 73   :         *pdwDirectXVersion = 0;

  00010	89 1e		 mov	 DWORD PTR [esi], ebx
$LN11@CheckDXVer:

; 74   :     if( strDirectXVersion && cchDirectXVersion > 0 )

  00012	8b 7d 0c	 mov	 edi, DWORD PTR _strDirectXVersion$[ebp]
  00015	3b fb		 cmp	 edi, ebx
  00017	74 07		 je	 SHORT $LN10@CheckDXVer
  00019	39 5d 10	 cmp	 DWORD PTR _cchDirectXVersion$[ebp], ebx
  0001c	7e 02		 jle	 SHORT $LN10@CheckDXVer

; 75   :         strDirectXVersion[0] = 0;

  0001e	88 1f		 mov	 BYTE PTR [edi], bl
$LN10@CheckDXVer:

; 76   : 
; 77   :     DWORD dwDirectXVersionMajor = 0;
; 78   :     DWORD dwDirectXVersionMinor = 0;
; 79   :     TCHAR cDirectXVersionLetter = ' ';
; 80   : 
; 81   :     // First, try to use dxdiag's COM interface to get the DirectX version.
; 82   :     // The only downside is this will only work on DirectX9 or later.
; 83   :     if( SUCCEEDED( GetDirectXVersionViaDxDiag( &dwDirectXVersionMajor, &dwDirectXVersionMinor, &cDirectXVersionLetter ) ) )

  00020	8d 45 0b	 lea	 eax, DWORD PTR _cDirectXVersionLetter$[ebp]
  00023	50		 push	 eax
  00024	8d 45 0c	 lea	 eax, DWORD PTR _dwDirectXVersionMinor$[ebp]
  00027	50		 push	 eax
  00028	8d 45 fc	 lea	 eax, DWORD PTR _dwDirectXVersionMajor$[ebp]
  0002b	50		 push	 eax
  0002c	89 5d fc	 mov	 DWORD PTR _dwDirectXVersionMajor$[ebp], ebx
  0002f	89 5d 0c	 mov	 DWORD PTR _dwDirectXVersionMinor$[ebp], ebx
  00032	c6 45 0b 20	 mov	 BYTE PTR _cDirectXVersionLetter$[ebp], 32 ; 00000020H
  00036	e8 00 00 00 00	 call	 ?GetDirectXVersionViaDxDiag@@YAJPAK0PAD@Z ; GetDirectXVersionViaDxDiag
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003e	85 c0		 test	 eax, eax

; 84   :         bGotDirectXVersion = true;
; 85   : 
; 86   :     if( !bGotDirectXVersion )

  00040	79 1f		 jns	 SHORT $LN6@CheckDXVer

; 87   :     {
; 88   :         // Getting the DirectX version info from DxDiag failed,
; 89   :         // so most likely we are on DirectX8.x or earlier
; 90   :         if( SUCCEEDED( GetDirectXVersionViaFileVersions( &dwDirectXVersionMajor, &dwDirectXVersionMinor, &cDirectXVersionLetter ) ) )

  00042	8d 45 0b	 lea	 eax, DWORD PTR _cDirectXVersionLetter$[ebp]
  00045	50		 push	 eax
  00046	8d 45 0c	 lea	 eax, DWORD PTR _dwDirectXVersionMinor$[ebp]
  00049	50		 push	 eax
  0004a	8d 45 fc	 lea	 eax, DWORD PTR _dwDirectXVersionMajor$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ?GetDirectXVersionViaFileVersions@@YAJPAK0PAD@Z ; GetDirectXVersionViaFileVersions
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	85 c0		 test	 eax, eax

; 91   :             bGotDirectXVersion = true;
; 92   :     }
; 93   : 
; 94   :     // If both techniques failed, then return E_FAIL
; 95   :     if( !bGotDirectXVersion )

  00058	79 07		 jns	 SHORT $LN6@CheckDXVer

; 96   :         return E_FAIL;

  0005a	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  0005f	eb 70		 jmp	 SHORT $LN12@CheckDXVer
$LN6@CheckDXVer:

; 97   : 
; 98   :     // Set the output values to what we got and return
; 99   :     cDirectXVersionLetter = (char)tolower(cDirectXVersionLetter);

  00061	0f be 45 0b	 movsx	 eax, BYTE PTR _cDirectXVersionLetter$[ebp]
  00065	50		 push	 eax
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__tolower
  0006c	59		 pop	 ecx

; 100  : 
; 101  :     if( pdwDirectXVersion )

  0006d	3b f3		 cmp	 esi, ebx
  0006f	74 1d		 je	 SHORT $LN5@CheckDXVer

; 102  :     {
; 103  :         // If pdwDirectXVersion is non-NULL, then set it to something
; 104  :         // like 0x00080102 which would represent DirectX8.1b
; 105  :         DWORD dwDirectXVersion = dwDirectXVersionMajor;
; 106  :         dwDirectXVersion <<= 8;
; 107  :         dwDirectXVersion += dwDirectXVersionMinor;
; 108  :         dwDirectXVersion <<= 8;

  00071	8b 4d fc	 mov	 ecx, DWORD PTR _dwDirectXVersionMajor$[ebp]
  00074	c1 e1 08	 shl	 ecx, 8
  00077	03 4d 0c	 add	 ecx, DWORD PTR _dwDirectXVersionMinor$[ebp]

; 109  :         if( cDirectXVersionLetter >= 'a' && cDirectXVersionLetter <= 'z' )

  0007a	8d 50 9f	 lea	 edx, DWORD PTR [eax-97]
  0007d	c1 e1 08	 shl	 ecx, 8
  00080	80 fa 19	 cmp	 dl, 25			; 00000019H
  00083	77 07		 ja	 SHORT $LN4@CheckDXVer

; 110  :             dwDirectXVersion += (cDirectXVersionLetter - 'a') + 1;

  00085	0f be d0	 movsx	 edx, al
  00088	8d 4c 11 a0	 lea	 ecx, DWORD PTR [ecx+edx-96]
$LN4@CheckDXVer:

; 111  : 
; 112  :         *pdwDirectXVersion = dwDirectXVersion;

  0008c	89 0e		 mov	 DWORD PTR [esi], ecx
$LN5@CheckDXVer:

; 113  :     }
; 114  : 
; 115  :     if( strDirectXVersion && cchDirectXVersion > 0 )

  0008e	3b fb		 cmp	 edi, ebx
  00090	74 3d		 je	 SHORT $LN1@CheckDXVer
  00092	39 5d 10	 cmp	 DWORD PTR _cchDirectXVersion$[ebp], ebx
  00095	7e 38		 jle	 SHORT $LN1@CheckDXVer

; 116  :     {
; 117  :         // If strDirectXVersion is non-NULL, then set it to something
; 118  :         // like "8.1b" which would represent DirectX8.1b
; 119  :         if( cDirectXVersionLetter == ' ' )

  00097	3c 20		 cmp	 al, 32			; 00000020H
  00099	75 19		 jne	 SHORT $LN2@CheckDXVer

; 120  :             StringCchPrintf( strDirectXVersion, cchDirectXVersion, TEXT("%d.%d"), dwDirectXVersionMajor, dwDirectXVersionMinor );

  0009b	ff 75 0c	 push	 DWORD PTR _dwDirectXVersionMinor$[ebp]
  0009e	ff 75 fc	 push	 DWORD PTR _dwDirectXVersionMajor$[ebp]
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_05KBEOJPB@?$CFd?4?$CFd?$AA@
  000a6	ff 75 10	 push	 DWORD PTR _cchDirectXVersion$[ebp]
  000a9	57		 push	 edi
  000aa	e8 00 00 00 00	 call	 ?StringCchPrintfA@@YAJPADIPBDZZ ; StringCchPrintfA
  000af	83 c4 14	 add	 esp, 20			; 00000014H

; 121  :         else

  000b2	eb 1b		 jmp	 SHORT $LN1@CheckDXVer
$LN2@CheckDXVer:

; 122  :             StringCchPrintf( strDirectXVersion, cchDirectXVersion, TEXT("%d.%d%c"), dwDirectXVersionMajor, dwDirectXVersionMinor, cDirectXVersionLetter );

  000b4	0f be c0	 movsx	 eax, al
  000b7	50		 push	 eax
  000b8	ff 75 0c	 push	 DWORD PTR _dwDirectXVersionMinor$[ebp]
  000bb	ff 75 fc	 push	 DWORD PTR _dwDirectXVersionMajor$[ebp]
  000be	68 00 00 00 00	 push	 OFFSET ??_C@_07KECHDMFL@?$CFd?4?$CFd?$CFc?$AA@
  000c3	ff 75 10	 push	 DWORD PTR _cchDirectXVersion$[ebp]
  000c6	57		 push	 edi
  000c7	e8 00 00 00 00	 call	 ?StringCchPrintfA@@YAJPADIPBDZZ ; StringCchPrintfA
  000cc	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@CheckDXVer:

; 123  :     }
; 124  : 
; 125  :    return S_OK;

  000cf	33 c0		 xor	 eax, eax
$LN12@CheckDXVer:
  000d1	5f		 pop	 edi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx

; 126  : }

  000d4	c9		 leave
  000d5	c3		 ret	 0
?CheckDXVersion@@YAJPAKPADH@Z ENDP			; CheckDXVersion
_TEXT	ENDS
END
