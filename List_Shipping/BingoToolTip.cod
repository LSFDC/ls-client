; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\GUI\BingoToolTip.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?GetHiddenIconName@ioBingo@@QAEABVioHashString@@XZ ; ioBingo::GetHiddenIconName
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobingo.h
;	COMDAT ?GetHiddenIconName@ioBingo@@QAEABVioHashString@@XZ
_TEXT	SEGMENT
?GetHiddenIconName@ioBingo@@QAEABVioHashString@@XZ PROC	; ioBingo::GetHiddenIconName, COMDAT
; _this$ = ecx

; 225  : 	const ioHashString &GetHiddenIconName() { return m_HiddenIconName; }

  00000	8d 81 08 01 00
	00		 lea	 eax, DWORD PTR [ecx+264]
  00006	c3		 ret	 0
?GetHiddenIconName@ioBingo@@QAEABVioHashString@@XZ ENDP	; ioBingo::GetHiddenIconName
_TEXT	ENDS
PUBLIC	??_7BingoToolTip@@6B@				; BingoToolTip::`vftable'
PUBLIC	??0BingoToolTip@@QAE@XZ				; BingoToolTip::BingoToolTip
PUBLIC	??_R4BingoToolTip@@6B@				; BingoToolTip::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBingoToolTip@@@8			; BingoToolTip `RTTI Type Descriptor'
PUBLIC	??_R3BingoToolTip@@8				; BingoToolTip::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BingoToolTip@@8				; BingoToolTip::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BingoToolTip@@8			; BingoToolTip::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioWnd@@8				; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioWnd@@@8				; ioWnd `RTTI Type Descriptor'
PUBLIC	??_R3ioWnd@@8					; ioWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWnd@@8					; ioWnd::`RTTI Base Class Array'
PUBLIC	?AddRenderImage@BingoToolTip@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z ; BingoToolTip::AddRenderImage
PUBLIC	?OnRender@BingoToolTip@@MAEXXZ			; BingoToolTip::OnRender
PUBLIC	?OnProcess@BingoToolTip@@MAEXM@Z		; BingoToolTip::OnProcess
PUBLIC	?iwm_show@BingoToolTip@@UAEXXZ			; BingoToolTip::iwm_show
PUBLIC	?iwm_hide@BingoToolTip@@UAEXXZ			; BingoToolTip::iwm_hide
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	__imp_??1ioWnd@@UAE@XZ:PROC
EXTRN	__imp_?Clear@ioHashString@@QAEXXZ:PROC
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	__imp_??0ioWnd@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z:PROC ; ioWnd::AddRenderFrame
EXTRN	?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z:PROC ; ioWnd::AddTooltipHelp
EXTRN	?ParseExtraInfo@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::ParseExtraInfo
EXTRN	?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC ; ioWnd::AddNamedRenderImage
EXTRN	?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z:PROC ; ioWnd::RemoveNamedRenderImage
EXTRN	?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z:PROC ; ioWnd::GetNamedRenderImage
EXTRN	?SetWindowAlpha@ioWnd@@UAEXH@Z:PROC		; ioWnd::SetWindowAlpha
EXTRN	?SetActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetActive
EXTRN	?SetInActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetInActive
EXTRN	?ClearElementImageList@ioWnd@@UAEXXZ:PROC	; ioWnd::ClearElementImageList
EXTRN	?SetSize@ioWnd@@UAEXHH@Z:PROC			; ioWnd::SetSize
EXTRN	?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z:PROC	; ioWnd::SetPositionToDefault
EXTRN	?IsNeedProcess@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsNeedProcess
EXTRN	?IsCanMouseReaction@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsCanMouseReaction
EXTRN	?AddChild@ioWnd@@UAEXPAV1@@Z:PROC		; ioWnd::AddChild
EXTRN	?DeleteChild@ioWnd@@UAEXK@Z:PROC		; ioWnd::DeleteChild
EXTRN	?DeleteAllChild@ioWnd@@UAEXXZ:PROC		; ioWnd::DeleteAllChild
EXTRN	?OnRenderShowAndHide@ioWnd@@MAE_NXZ:PROC	; ioWnd::OnRenderShowAndHide
EXTRN	?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z:PROC ; ioWnd::OnRenderShowAndHideByDefault
EXTRN	?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByTop
EXTRN	?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByDown
EXTRN	?OnRenderAfterChild@ioWnd@@MAEXXZ:PROC		; ioWnd::OnRenderAfterChild
EXTRN	?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z:PROC	; ioWnd::OnMouseProcess
EXTRN	?CheckFrameReSize@ioWnd@@MAEXHHHH@Z:PROC	; ioWnd::CheckFrameReSize
EXTRN	?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z:PROC ; ioWnd::RenderImageList
EXTRN	?iwm_create@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_create
EXTRN	?iwm_destroy@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_destroy
EXTRN	?iwm_lbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_lbuttondown
EXTRN	?iwm_lbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_lbuttonup
EXTRN	?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z:PROC ; ioWnd::iwm_lbuttonDBLCLK
EXTRN	?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttondown
EXTRN	?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttonup
EXTRN	?iwm_command@ioWnd@@UAEXPAV1@HK@Z:PROC		; ioWnd::iwm_command
EXTRN	?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseover
EXTRN	?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mousemove
EXTRN	?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseleave
EXTRN	?iwm_vscroll@ioWnd@@UAEXKH@Z:PROC		; ioWnd::iwm_vscroll
EXTRN	?iwm_wheel@ioWnd@@UAEXH@Z:PROC			; ioWnd::iwm_wheel
EXTRN	?iwm_esc@ioWnd@@UAE_NXZ:PROC			; ioWnd::iwm_esc
EXTRN	?iwm_spacebar@ioWnd@@UAE_NXZ:PROC		; ioWnd::iwm_spacebar
EXTRN	?iwm_gototop@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_gototop
EXTRN	?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragenter
EXTRN	?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragover
EXTRN	?iwm_dragleave@ioWnd@@UAEXXZ:PROC		; ioWnd::iwm_dragleave
EXTRN	?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z:PROC ; ioWnd::iwm_dropitem
EXTRN	?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z:PROC ; ioWnd::iwm_dropdone
EXTRN	?IsEXType@ioWnd@@UBE_NXZ:PROC			; ioWnd::IsEXType
EXTRN	?GetWndType@ioWnd@@UBEKXZ:PROC			; ioWnd::GetWndType
EXTRN	?RenderWnd@ioWnd@@UAEXXZ:PROC			; ioWnd::RenderWnd
EXTRN	?SetIDEX@ioWnd@@UAEXAAK_N@Z:PROC		; ioWnd::SetIDEX
EXTRN	?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC	; ioWnd::ParseXML
EXTRN	?GetHeaderFileName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetHeaderFileName
EXTRN	?GetTemplateName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetTemplateName
EXTRN	?GetDefClassName@ioWnd@@UBEPBDXZ:PROC		; ioWnd::GetDefClassName
EXTRN	?_Clone@ioWnd@@UAEPAV1@XZ:PROC			; ioWnd::_Clone
EXTRN	?Copy@ioWnd@@UAEXPAV1@@Z:PROC			; ioWnd::Copy
EXTRN	?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z:PROC	; ioWnd::Save
EXTRN	?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::SetSaveData
EXTRN	?SetPosX@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosX
EXTRN	?SetPosY@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosY
EXTRN	?SetWidth@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetWidth
EXTRN	?SetHeight@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetHeight
EXTRN	?GetNumFixedRenderFrame@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderFrame
EXTRN	?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderFrameType
EXTRN	?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderFrame
EXTRN	?GetNumFixedRenderImage@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderImage
EXTRN	?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderImageType
EXTRN	?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderImage
EXTRN	?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z:PROC ; ioWnd::AddEffect
EXTRN	?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z:PROC ; ioWnd::GetEffect
EXTRN	??_EBingoToolTip@@UAEPAXI@Z:PROC		; BingoToolTip::`vector deleting destructor'
;	COMDAT ??_R2ioWnd@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingotooltip.cpp
rdata$r	SEGMENT
??_R2ioWnd@@8 DD FLAT:??_R1A@?0A@EA@ioWnd@@8		; ioWnd::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWnd@@8
rdata$r	SEGMENT
??_R3ioWnd@@8 DD 00H					; ioWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWnd@@@8
_DATA	SEGMENT
??_R0?AVioWnd@@@8 DD FLAT:??_7type_info@@6B@		; ioWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWnd@@8 DD FLAT:??_R0?AVioWnd@@@8	; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BingoToolTip@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BingoToolTip@@8 DD FLAT:??_R0?AVBingoToolTip@@@8 ; BingoToolTip::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BingoToolTip@@8
rdata$r	ENDS
;	COMDAT ??_R2BingoToolTip@@8
rdata$r	SEGMENT
??_R2BingoToolTip@@8 DD FLAT:??_R1A@?0A@EA@BingoToolTip@@8 ; BingoToolTip::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3BingoToolTip@@8
rdata$r	SEGMENT
??_R3BingoToolTip@@8 DD 00H				; BingoToolTip::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BingoToolTip@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBingoToolTip@@@8
_DATA	SEGMENT
??_R0?AVBingoToolTip@@@8 DD FLAT:??_7type_info@@6B@	; BingoToolTip `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBingoToolTip@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BingoToolTip@@6B@
rdata$r	SEGMENT
??_R4BingoToolTip@@6B@ DD 00H				; BingoToolTip::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBingoToolTip@@@8
	DD	FLAT:??_R3BingoToolTip@@8
rdata$r	ENDS
;	COMDAT ??_7BingoToolTip@@6B@
CONST	SEGMENT
??_7BingoToolTip@@6B@ DD FLAT:??_R4BingoToolTip@@6B@	; BingoToolTip::`vftable'
	DD	FLAT:?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
	DD	FLAT:?AddRenderImage@BingoToolTip@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z
	DD	FLAT:?ParseExtraInfo@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z
	DD	FLAT:?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z
	DD	FLAT:?SetWindowAlpha@ioWnd@@UAEXH@Z
	DD	FLAT:?SetActive@ioWnd@@UAEXXZ
	DD	FLAT:?SetInActive@ioWnd@@UAEXXZ
	DD	FLAT:?ClearElementImageList@ioWnd@@UAEXXZ
	DD	FLAT:?SetSize@ioWnd@@UAEXHH@Z
	DD	FLAT:?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z
	DD	FLAT:?IsNeedProcess@ioWnd@@UBE_NXZ
	DD	FLAT:?IsCanMouseReaction@ioWnd@@UBE_NXZ
	DD	FLAT:?AddChild@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?DeleteChild@ioWnd@@UAEXK@Z
	DD	FLAT:?DeleteAllChild@ioWnd@@UAEXXZ
	DD	FLAT:?OnRenderShowAndHide@ioWnd@@MAE_NXZ
	DD	FLAT:?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRender@BingoToolTip@@MAEXXZ
	DD	FLAT:?OnRenderAfterChild@ioWnd@@MAEXXZ
	DD	FLAT:?OnProcess@BingoToolTip@@MAEXM@Z
	DD	FLAT:?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z
	DD	FLAT:?CheckFrameReSize@ioWnd@@MAEXHHHH@Z
	DD	FLAT:?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z
	DD	FLAT:?iwm_create@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_destroy@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_lbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_command@ioWnd@@UAEXPAV1@HK@Z
	DD	FLAT:?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_vscroll@ioWnd@@UAEXKH@Z
	DD	FLAT:?iwm_wheel@ioWnd@@UAEXH@Z
	DD	FLAT:?iwm_show@BingoToolTip@@UAEXXZ
	DD	FLAT:?iwm_hide@BingoToolTip@@UAEXXZ
	DD	FLAT:?iwm_esc@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_spacebar@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_gototop@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragleave@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z
	DD	FLAT:?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z
	DD	FLAT:?IsEXType@ioWnd@@UBE_NXZ
	DD	FLAT:?GetWndType@ioWnd@@UBEKXZ
	DD	FLAT:?RenderWnd@ioWnd@@UAEXXZ
	DD	FLAT:?SetIDEX@ioWnd@@UAEXAAK_N@Z
	DD	FLAT:?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?GetHeaderFileName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetTemplateName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetDefClassName@ioWnd@@UBEPBDXZ
	DD	FLAT:?_Clone@ioWnd@@UAEPAV1@XZ
	DD	FLAT:?Copy@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z
	DD	FLAT:?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?SetPosX@ioWnd@@UAEXH@Z
	DD	FLAT:?SetPosY@ioWnd@@UAEXH@Z
	DD	FLAT:?SetWidth@ioWnd@@UAEXH@Z
	DD	FLAT:?SetHeight@ioWnd@@UAEXH@Z
	DD	FLAT:?GetNumFixedRenderFrame@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?GetNumFixedRenderImage@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z
	DD	FLAT:?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z
	DD	FLAT:??_EBingoToolTip@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0BingoToolTip@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BingoToolTip@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0BingoToolTip@@QAE@XZ$1
__ehfuncinfo$??0BingoToolTip@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0BingoToolTip@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0BingoToolTip@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0BingoToolTip@@QAE@XZ PROC				; BingoToolTip::BingoToolTip, COMDAT
; _this$ = ecx

; 8    : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0BingoToolTip@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioWnd@@QAE@XZ
  00017	33 db		 xor	 ebx, ebx
  00019	8d 8e 74 01 00
	00		 lea	 ecx, DWORD PTR [esi+372]
  0001f	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00022	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7BingoToolTip@@6B@
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 9    : 	m_pIconBg      = NULL;
; 10   : 	m_pIcon        = NULL;
; 11   : 	m_pHiddenIcon  = NULL;
; 12   : 	m_iManualIndex = 0;
; 13   : 	m_szTtitle.Clear();

  0002e	8d 8e 74 01 00
	00		 lea	 ecx, DWORD PTR [esi+372]
  00034	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00038	89 9e 64 01 00
	00		 mov	 DWORD PTR [esi+356], ebx
  0003e	89 9e 68 01 00
	00		 mov	 DWORD PTR [esi+360], ebx
  00044	89 9e 6c 01 00
	00		 mov	 DWORD PTR [esi+364], ebx
  0004a	89 9e 70 01 00
	00		 mov	 DWORD PTR [esi+368], ebx
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Clear@ioHashString@@QAEXXZ

; 14   : 
; 15   : 	m_bHidden = false;

  00056	88 9e 84 01 00
	00		 mov	 BYTE PTR [esi+388], bl

; 16   : }

  0005c	8b c6		 mov	 eax, esi
  0005e	e8 00 00 00 00	 call	 __EH_epilog3
  00063	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0BingoToolTip@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
__unwindfunclet$??0BingoToolTip@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	81 c1 74 01 00
	00		 add	 ecx, 372		; 00000174H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0BingoToolTip@@QAE@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0BingoToolTip@@QAE@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0BingoToolTip@@QAE@XZ ENDP				; BingoToolTip::BingoToolTip
PUBLIC	??1BingoToolTip@@UAE@XZ				; BingoToolTip::~BingoToolTip
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1BingoToolTip@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1BingoToolTip@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1BingoToolTip@@UAE@XZ$1
__ehfuncinfo$??1BingoToolTip@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1BingoToolTip@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1BingoToolTip@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1BingoToolTip@@UAE@XZ PROC				; BingoToolTip::~BingoToolTip, COMDAT
; _this$ = ecx

; 19   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1BingoToolTip@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7BingoToolTip@@6B@

; 20   : 	SAFEDELETE( m_pIconBg );

  00017	8b 8e 64 01 00
	00		 mov	 ecx, DWORD PTR [esi+356]
  0001d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00024	85 c9		 test	 ecx, ecx
  00026	74 0e		 je	 SHORT $LN2@BingoToolT
  00028	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002a	6a 01		 push	 1
  0002c	ff 50 40	 call	 DWORD PTR [eax+64]
  0002f	83 a6 64 01 00
	00 00		 and	 DWORD PTR [esi+356], 0
$LN2@BingoToolT:

; 21   : 	SAFEDELETE( m_pHiddenIcon );

  00036	8b 8e 6c 01 00
	00		 mov	 ecx, DWORD PTR [esi+364]
  0003c	85 c9		 test	 ecx, ecx
  0003e	74 0e		 je	 SHORT $LN1@BingoToolT
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]
  00042	6a 01		 push	 1
  00044	ff 50 40	 call	 DWORD PTR [eax+64]
  00047	83 a6 6c 01 00
	00 00		 and	 DWORD PTR [esi+364], 0
$LN1@BingoToolT:

; 22   : }

  0004e	8d 8e 74 01 00
	00		 lea	 ecx, DWORD PTR [esi+372]
  00054	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0005e	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00062	8b ce		 mov	 ecx, esi
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
  0006a	e8 00 00 00 00	 call	 __EH_epilog3
  0006f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1BingoToolTip@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
__unwindfunclet$??1BingoToolTip@@UAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	81 c1 74 01 00
	00		 add	 ecx, 372		; 00000174H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1BingoToolTip@@UAE@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1BingoToolTip@@UAE@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1BingoToolTip@@UAE@XZ ENDP				; BingoToolTip::~BingoToolTip
; Function compile flags: /Ogsp
;	COMDAT ?iwm_show@BingoToolTip@@UAEXXZ
_TEXT	SEGMENT
?iwm_show@BingoToolTip@@UAEXXZ PROC			; BingoToolTip::iwm_show, COMDAT
; _this$ = ecx

; 37   : }

  00000	c3		 ret	 0
?iwm_show@BingoToolTip@@UAEXXZ ENDP			; BingoToolTip::iwm_show
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?iwm_hide@BingoToolTip@@UAEXXZ
_TEXT	SEGMENT
?iwm_hide@BingoToolTip@@UAEXXZ PROC			; BingoToolTip::iwm_hide, COMDAT
; _this$ = ecx

; 40   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 41   : 	m_pIcon = NULL;

  00003	83 a6 68 01 00
	00 00		 and	 DWORD PTR [esi+360], 0

; 42   : 	m_iManualIndex = 0;

  0000a	83 a6 70 01 00
	00 00		 and	 DWORD PTR [esi+368], 0

; 43   : 	m_szTtitle.Clear();

  00011	8d 8e 74 01 00
	00		 lea	 ecx, DWORD PTR [esi+372]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Clear@ioHashString@@QAEXXZ

; 44   : 	m_bHidden = false;

  0001d	c6 86 84 01 00
	00 00		 mov	 BYTE PTR [esi+388], 0
  00024	5e		 pop	 esi

; 45   : }

  00025	c3		 ret	 0
?iwm_hide@BingoToolTip@@UAEXXZ ENDP			; BingoToolTip::iwm_hide
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetFullWidth@ioComplexStringPrinter@@QBEMXZ	; ioComplexStringPrinter::GetFullWidth
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocomplexstringprinter.h
;	COMDAT ?GetFullWidth@ioComplexStringPrinter@@QBEMXZ
_TEXT	SEGMENT
?GetFullWidth@ioComplexStringPrinter@@QBEMXZ PROC	; ioComplexStringPrinter::GetFullWidth, COMDAT
; _this$ = ecx

; 125  : 	inline float GetFullWidth() const { return m_fFullWidth; }

  00000	d9 41 1c	 fld	 DWORD PTR [ecx+28]
  00003	c3		 ret	 0
?GetFullWidth@ioComplexStringPrinter@@QBEMXZ ENDP	; ioComplexStringPrinter::GetFullWidth
_TEXT	ENDS
PUBLIC	?GetMouse@ioApplication@@QAEPAVioLSMouse@@XZ	; ioApplication::GetMouse
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioapplication.h
;	COMDAT ?GetMouse@ioApplication@@QAEPAVioLSMouse@@XZ
_TEXT	SEGMENT
?GetMouse@ioApplication@@QAEPAVioLSMouse@@XZ PROC	; ioApplication::GetMouse, COMDAT
; _this$ = ecx

; 796  : 	inline ioLSMouse* GetMouse(){ return &m_Mouse;	}

  00000	8d 81 90 00 00
	00		 lea	 eax, DWORD PTR [ecx+144]
  00006	c3		 ret	 0
?GetMouse@ioApplication@@QAEPAVioLSMouse@@XZ ENDP	; ioApplication::GetMouse
_TEXT	ENDS
PUBLIC	?GetBingo@ioMyInfo@@QAEPAVioBingo@@XZ		; ioMyInfo::GetBingo
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomyinfo.h
;	COMDAT ?GetBingo@ioMyInfo@@QAEPAVioBingo@@XZ
_TEXT	SEGMENT
?GetBingo@ioMyInfo@@QAEPAVioBingo@@XZ PROC		; ioMyInfo::GetBingo, COMDAT
; _this$ = ecx

; 643  : 	ioBingo* GetBingo() { return m_pBingo; }

  00000	8b 81 94 0b 00
	00		 mov	 eax, DWORD PTR [ecx+2964]
  00006	c3		 ret	 0
?GetBingo@ioMyInfo@@QAEPAVioBingo@@XZ ENDP		; ioMyInfo::GetBingo
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GBingoToolTip@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GBingoToolTip@@UAEPAXI@Z PROC			; BingoToolTip::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1BingoToolTip@@UAE@XZ	; BingoToolTip::~BingoToolTip
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GBingoToolTip@@UAEPAXI@Z ENDP			; BingoToolTip::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@434c0000
PUBLIC	__real@4069800000000000
PUBLIC	__real@43040000
PUBLIC	__real@3f59999a
PUBLIC	??_C@_0BK@PDKJILHJ@BingoToolTip?3?3PrintManual?$AA@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?PrintManual@BingoToolTip@@IAEXHHM@Z		; BingoToolTip::PrintManual
EXTRN	?ClearList@ioComplexStringPrinter@@QAEXXZ:PROC	; ioComplexStringPrinter::ClearList
EXTRN	?CopyFullText@ioComplexStringPrinter@@QBEXAAV1@@Z:PROC ; ioComplexStringPrinter::CopyFullText
EXTRN	?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z:PROC ; ioComplexStringPrinter::PrintFullText
EXTRN	?GetToolTipGetSpaceLine@ioBingo@@QAEHHH@Z:PROC	; ioBingo::GetToolTipGetSpaceLine
EXTRN	?SplitFullText@ioComplexStringPrinter@@QAEXAAV1@0M@Z:PROC ; ioComplexStringPrinter::SplitFullText
EXTRN	?SetPrinter@ioBingo@@QAEXHHMAAVioComplexStringPrinter@@@Z:PROC ; ioBingo::SetPrinter
EXTRN	?GetToolTipMaxLine@ioBingo@@QAEHH@Z:PROC	; ioBingo::GetToolTipMaxLine
EXTRN	??1ioComplexStringPrinter@@QAE@XZ:PROC		; ioComplexStringPrinter::~ioComplexStringPrinter
EXTRN	?PrintFullTextWidthCut@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@ME@Z:PROC ; ioComplexStringPrinter::PrintFullTextWidthCut
EXTRN	__imp_?GetDerivedPosX@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?GetDerivedPosY@ioWnd@@QBEHXZ:PROC
EXTRN	?AddTextPiece@ioComplexStringPrinter@@QAEXMPBD0@Z:PROC ; ioComplexStringPrinter::AddTextPiece
EXTRN	__imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z:PROC
EXTRN	__imp_?GetSingleton@ioStringManager@@SAAAV1@XZ:PROC
EXTRN	__imp_?c_str@ioHashString@@QBEPBDXZ:PROC
EXTRN	?SetTextColor@ioComplexStringPrinter@@QAEXK@Z:PROC ; ioComplexStringPrinter::SetTextColor
EXTRN	?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z:PROC ; ioComplexStringPrinter::SetBkColor
EXTRN	?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z:PROC ; ioComplexStringPrinter::SetTextStyle
EXTRN	??0ioComplexStringPrinter@@QAE@XZ:PROC		; ioComplexStringPrinter::ioComplexStringPrinter
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	?GetSingleton@ioMyInfo@@SAAAV1@XZ:PROC		; ioMyInfo::GetSingleton
;	COMDAT __real@434c0000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocomplexstringprinter.h
CONST	SEGMENT
__real@434c0000 DD 0434c0000r			; 204
CONST	ENDS
;	COMDAT __real@4069800000000000
CONST	SEGMENT
__real@4069800000000000 DQ 04069800000000000r	; 204
CONST	ENDS
;	COMDAT __real@43040000
CONST	SEGMENT
__real@43040000 DD 043040000r			; 132
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT ??_C@_0BK@PDKJILHJ@BingoToolTip?3?3PrintManual?$AA@
CONST	SEGMENT
??_C@_0BK@PDKJILHJ@BingoToolTip?3?3PrintManual?$AA@ DB 'BingoToolTip::Pri'
	DB	'ntManual', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PrintManual@BingoToolTip@@IAEXHHM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PrintManual@BingoToolTip@@IAEXHHM@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PrintManual@BingoToolTip@@IAEXHHM@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?PrintManual@BingoToolTip@@IAEXHHM@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?PrintManual@BingoToolTip@@IAEXHHM@Z$3
__ehfuncinfo$?PrintManual@BingoToolTip@@IAEXHHM@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?PrintManual@BingoToolTip@@IAEXHHM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingotooltip.cpp
xdata$x	ENDS
;	COMDAT ?PrintManual@BingoToolTip@@IAEXHHM@Z
_TEXT	SEGMENT
_kPrinterA$507600 = -160				; size = 32
_kPrinterB$507601 = -128				; size = 32
_kTitle$507580 = -96					; size = 32
_kPrinter$ = -64					; size = 32
_iMaxLine$ = -32					; size = 4
tv282 = -28						; size = 4
_i$507593 = -24						; size = 4
_pBingo$ = -20						; size = 4
_iLine$507585 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_iXPos$ = 8						; size = 4
_bFirstGap$507592 = 11					; size = 1
_iYPos$ = 12						; size = 4
_fScale$ = 16						; size = 4
?PrintManual@BingoToolTip@@IAEXHHM@Z PROC		; BingoToolTip::PrintManual, COMDAT
; _this$ = ecx

; 99   : {

  00000	68 94 00 00 00	 push	 148			; 00000094H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?PrintManual@BingoToolTip@@IAEXHHM@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3
  0000f	8b f1		 mov	 esi, ecx

; 100  : 	ioBingo *pBingo = g_MyInfo.GetBingo();

  00011	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00016	8b 80 94 0b 00
	00		 mov	 eax, DWORD PTR [eax+2964]

; 101  : 	if( !pBingo )

  0001c	33 db		 xor	 ebx, ebx
  0001e	89 45 ec	 mov	 DWORD PTR _pBingo$[ebp], eax
  00021	3b c3		 cmp	 eax, ebx
  00023	0f 84 98 02 00
	00		 je	 $LN14@PrintManua

; 102  : 		return;
; 103  : 
; 104  : 	if( !m_szTtitle.IsEmpty() && !m_bHidden )

  00029	8d 8e 74 01 00
	00		 lea	 ecx, DWORD PTR [esi+372]
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00035	84 c0		 test	 al, al
  00037	0f 85 d2 00 00
	00		 jne	 $LN30@PrintManua
  0003d	38 9e 84 01 00
	00		 cmp	 BYTE PTR [esi+388], bl
  00043	0f 85 c6 00 00
	00		 jne	 $LN30@PrintManua

; 105  : 	{
; 106  : 		ioComplexStringPrinter kTitle;

  00049	8d 4d a0	 lea	 ecx, DWORD PTR _kTitle$507580[ebp]
  0004c	e8 00 00 00 00	 call	 ??0ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::ioComplexStringPrinter

; 107  : 		kTitle.SetTextStyle( TS_NORMAL );

  00051	53		 push	 ebx
  00052	8d 4d a0	 lea	 ecx, DWORD PTR _kTitle$507580[ebp]
  00055	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00058	e8 00 00 00 00	 call	 ?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z ; ioComplexStringPrinter::SetTextStyle

; 108  : 		kTitle.SetBkColor( 0, 0, 0 );	

  0005d	53		 push	 ebx
  0005e	53		 push	 ebx
  0005f	53		 push	 ebx
  00060	8d 4d a0	 lea	 ecx, DWORD PTR _kTitle$507580[ebp]
  00063	e8 00 00 00 00	 call	 ?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z ; ioComplexStringPrinter::SetBkColor

; 109  : 		kTitle.SetTextColor( TCT_DEFAULT_DARKGRAY );

  00068	68 3a 3a 3a ff	 push	 -12961222		; ff3a3a3aH
  0006d	8d 4d a0	 lea	 ecx, DWORD PTR _kTitle$507580[ebp]
  00070	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 110  : 		kTitle.AddTextPiece( FONT_SIZE_17, STR(2), m_szTtitle.c_str() );

  00075	8d 8e 74 01 00
	00		 lea	 ecx, DWORD PTR [esi+372]
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  00081	50		 push	 eax
  00082	53		 push	 ebx
  00083	6a 02		 push	 2
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@PDKJILHJ@BingoToolTip?3?3PrintManual?$AA@
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00095	8b c8		 mov	 ecx, eax
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  0009d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  000a5	50		 push	 eax
  000a6	51		 push	 ecx
  000a7	8d 4d a0	 lea	 ecx, DWORD PTR _kTitle$507580[ebp]
  000aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000af	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAEXMPBD0@Z ; ioComplexStringPrinter::AddTextPiece

; 111  : 		kTitle.PrintFullTextWidthCut( GetDerivedPosX() + 99, GetDerivedPosY() + 41, TAT_LEFT, 132 );

  000b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43040000
  000bc	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  000c1	57		 push	 edi
  000c2	51		 push	 ecx
  000c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c8	53		 push	 ebx
  000c9	8b ce		 mov	 ecx, esi
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ
  000d1	83 c0 29	 add	 eax, 41			; 00000029H
  000d4	51		 push	 ecx
  000d5	0f 57 c0	 xorps	 xmm0, xmm0
  000d8	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000dc	8b ce		 mov	 ecx, esi
  000de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosX@ioWnd@@QBEHXZ
  000e9	83 c0 63	 add	 eax, 99			; 00000063H
  000ec	51		 push	 ecx
  000ed	0f 57 c0	 xorps	 xmm0, xmm0
  000f0	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000f4	8d 4d a0	 lea	 ecx, DWORD PTR _kTitle$507580[ebp]
  000f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fc	e8 00 00 00 00	 call	 ?PrintFullTextWidthCut@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@ME@Z ; ioComplexStringPrinter::PrintFullTextWidthCut

; 112  : 	}

  00101	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00105	8d 4d a0	 lea	 ecx, DWORD PTR _kTitle$507580[ebp]
  00108	e8 00 00 00 00	 call	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
  0010d	eb 05		 jmp	 SHORT $LN12@PrintManua
$LN30@PrintManua:
  0010f	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
$LN12@PrintManua:

; 113  : 
; 114  : 	ioComplexStringPrinter kPrinter;

  00114	8d 4d c0	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00117	e8 00 00 00 00	 call	 ??0ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::ioComplexStringPrinter

; 115  : 	int iMaxLine = pBingo->GetToolTipMaxLine( m_iManualIndex );

  0011c	ff b6 70 01 00
	00		 push	 DWORD PTR [esi+368]
  00122	8b 4d ec	 mov	 ecx, DWORD PTR _pBingo$[ebp]
  00125	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0012c	e8 00 00 00 00	 call	 ?GetToolTipMaxLine@ioBingo@@QAEHH@Z ; ioBingo::GetToolTipMaxLine
  00131	89 45 e0	 mov	 DWORD PTR _iMaxLine$[ebp], eax

; 116  : 	for( int iLine=0; iLine<iMaxLine; ++iLine )

  00134	89 5d f0	 mov	 DWORD PTR _iLine$507585[ebp], ebx
  00137	3b c3		 cmp	 eax, ebx
  00139	0f 8e 76 01 00
	00		 jle	 $LN9@PrintManua
  0013f	66 0f 6e 45 08	 movd	 xmm0, DWORD PTR _iXPos$[ebp]
  00144	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00147	f3 0f 11 45 e4	 movss	 DWORD PTR tv282[ebp], xmm0
$LN11@PrintManua:

; 117  : 	{
; 118  : 		pBingo->SetPrinter( m_iManualIndex, iLine, fScale, kPrinter );

  0014c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fScale$[ebp]
  00151	8d 45 c0	 lea	 eax, DWORD PTR _kPrinter$[ebp]
  00154	50		 push	 eax
  00155	51		 push	 ecx
  00156	8b 4d ec	 mov	 ecx, DWORD PTR _pBingo$[ebp]
  00159	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015e	ff 75 f0	 push	 DWORD PTR _iLine$507585[ebp]
  00161	ff b6 70 01 00
	00		 push	 DWORD PTR [esi+368]
  00167	e8 00 00 00 00	 call	 ?SetPrinter@ioBingo@@QAEXHHMAAVioComplexStringPrinter@@@Z ; ioBingo::SetPrinter

; 119  : 		enum { MAX_LOOP = 20, Y_GAP = 18, };
; 120  : 		bool bFirstGap = true;

  0016c	c6 45 0b 01	 mov	 BYTE PTR _bFirstGap$507592[ebp], 1

; 121  : 		for ( int i = 0; i < MAX_LOOP ; i++ )

  00170	89 5d e8	 mov	 DWORD PTR _i$507593[ebp], ebx
$LN8@PrintManua:

; 122  : 		{
; 123  : 			if( kPrinter.GetFullWidth() < DESC_WIDTH )

  00173	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _kPrinter$[ebp+28]
  00178	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4069800000000000
  00180	0f 5a c0	 cvtps2pd xmm0, xmm0
  00183	66 0f 2f c8	 comisd	 xmm1, xmm0
  00187	0f 87 ce 00 00
	00		 ja	 $LN26@PrintManua

; 134  : 				break;
; 135  : 			}
; 136  : 
; 137  : 			ioComplexStringPrinter kPrinterA, kPrinterB;

  0018d	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _kPrinterA$507600[ebp]
  00193	e8 00 00 00 00	 call	 ??0ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::ioComplexStringPrinter
  00198	8d 4d 80	 lea	 ecx, DWORD PTR _kPrinterB$507601[ebp]
  0019b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0019f	e8 00 00 00 00	 call	 ??0ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::ioComplexStringPrinter

; 138  : 			kPrinter.SplitFullText( kPrinterA, kPrinterB, DESC_WIDTH );

  001a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@434c0000
  001ac	51		 push	 ecx
  001ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b2	8d 45 80	 lea	 eax, DWORD PTR _kPrinterB$507601[ebp]
  001b5	50		 push	 eax
  001b6	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _kPrinterA$507600[ebp]
  001bc	50		 push	 eax
  001bd	8d 4d c0	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  001c0	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  001c4	e8 00 00 00 00	 call	 ?SplitFullText@ioComplexStringPrinter@@QAEXAAV1@0M@Z ; ioComplexStringPrinter::SplitFullText

; 139  : 			if( bFirstGap )

  001c9	38 5d 0b	 cmp	 BYTE PTR _bFirstGap$507592[ebp], bl
  001cc	74 19		 je	 SHORT $LN2@PrintManua

; 140  : 			{
; 141  : 				iYPos += pBingo->GetToolTipGetSpaceLine( m_iManualIndex, iLine );

  001ce	ff 75 f0	 push	 DWORD PTR _iLine$507585[ebp]
  001d1	8b 4d ec	 mov	 ecx, DWORD PTR _pBingo$[ebp]
  001d4	ff b6 70 01 00
	00		 push	 DWORD PTR [esi+368]
  001da	e8 00 00 00 00	 call	 ?GetToolTipGetSpaceLine@ioBingo@@QAEHHH@Z ; ioBingo::GetToolTipGetSpaceLine
  001df	01 45 0c	 add	 DWORD PTR _iYPos$[ebp], eax

; 142  : 				bFirstGap = false;

  001e2	88 5d 0b	 mov	 BYTE PTR _bFirstGap$507592[ebp], bl

; 143  : 			}
; 144  : 			else

  001e5	eb 04		 jmp	 SHORT $LN1@PrintManua
$LN2@PrintManua:

; 145  : 				iYPos += Y_GAP;

  001e7	83 45 0c 12	 add	 DWORD PTR _iYPos$[ebp], 18 ; 00000012H
$LN1@PrintManua:

; 146  : 
; 147  : 			kPrinterA.PrintFullText( iXPos, iYPos, TAT_LEFT );

  001eb	66 0f 6e 45 0c	 movd	 xmm0, DWORD PTR _iYPos$[ebp]
  001f0	57		 push	 edi
  001f1	53		 push	 ebx
  001f2	51		 push	 ecx
  001f3	51		 push	 ecx
  001f4	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001f7	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001fd	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR tv282[ebp]
  00202	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _kPrinterA$507600[ebp]
  00208	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020d	e8 00 00 00 00	 call	 ?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z ; ioComplexStringPrinter::PrintFullText

; 148  : 			kPrinterB.CopyFullText( kPrinter );

  00212	8d 45 c0	 lea	 eax, DWORD PTR _kPrinter$[ebp]
  00215	50		 push	 eax
  00216	8d 4d 80	 lea	 ecx, DWORD PTR _kPrinterB$507601[ebp]
  00219	e8 00 00 00 00	 call	 ?CopyFullText@ioComplexStringPrinter@@QBEXAAV1@@Z ; ioComplexStringPrinter::CopyFullText

; 149  : 			kPrinterA.ClearList();

  0021e	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _kPrinterA$507600[ebp]
  00224	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList

; 150  : 			kPrinterB.ClearList();

  00229	8d 4d 80	 lea	 ecx, DWORD PTR _kPrinterB$507601[ebp]
  0022c	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList

; 151  : 		}

  00231	8d 4d 80	 lea	 ecx, DWORD PTR _kPrinterB$507601[ebp]
  00234	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00238	e8 00 00 00 00	 call	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
  0023d	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _kPrinterA$507600[ebp]
  00243	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00247	e8 00 00 00 00	 call	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
  0024c	ff 45 e8	 inc	 DWORD PTR _i$507593[ebp]
  0024f	83 7d e8 14	 cmp	 DWORD PTR _i$507593[ebp], 20 ; 00000014H
  00253	0f 8c 1a ff ff
	ff		 jl	 $LN8@PrintManua

; 122  : 		{
; 123  : 			if( kPrinter.GetFullWidth() < DESC_WIDTH )

  00259	eb 4b		 jmp	 SHORT $LN10@PrintManua
$LN26@PrintManua:

; 124  : 			{
; 125  : 				if( bFirstGap )

  0025b	38 5d 0b	 cmp	 BYTE PTR _bFirstGap$507592[ebp], bl
  0025e	74 16		 je	 SHORT $LN4@PrintManua

; 126  : 				{
; 127  : 					iYPos += pBingo->GetToolTipGetSpaceLine( m_iManualIndex, iLine );

  00260	ff 75 f0	 push	 DWORD PTR _iLine$507585[ebp]
  00263	8b 4d ec	 mov	 ecx, DWORD PTR _pBingo$[ebp]
  00266	ff b6 70 01 00
	00		 push	 DWORD PTR [esi+368]
  0026c	e8 00 00 00 00	 call	 ?GetToolTipGetSpaceLine@ioBingo@@QAEHHH@Z ; ioBingo::GetToolTipGetSpaceLine
  00271	01 45 0c	 add	 DWORD PTR _iYPos$[ebp], eax

; 128  : 					bFirstGap = false;
; 129  : 				}
; 130  : 				else

  00274	eb 04		 jmp	 SHORT $LN3@PrintManua
$LN4@PrintManua:

; 131  : 					iYPos += Y_GAP;

  00276	83 45 0c 12	 add	 DWORD PTR _iYPos$[ebp], 18 ; 00000012H
$LN3@PrintManua:

; 132  : 				kPrinter.PrintFullText( iXPos, iYPos, TAT_LEFT );

  0027a	66 0f 6e 45 0c	 movd	 xmm0, DWORD PTR _iYPos$[ebp]
  0027f	57		 push	 edi
  00280	53		 push	 ebx
  00281	51		 push	 ecx
  00282	51		 push	 ecx
  00283	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00286	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0028c	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR tv282[ebp]
  00291	8d 4d c0	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00294	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00299	e8 00 00 00 00	 call	 ?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z ; ioComplexStringPrinter::PrintFullText

; 133  : 				kPrinter.ClearList();

  0029e	8d 4d c0	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  002a1	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList
$LN10@PrintManua:

; 116  : 	for( int iLine=0; iLine<iMaxLine; ++iLine )

  002a6	ff 45 f0	 inc	 DWORD PTR _iLine$507585[ebp]
  002a9	8b 45 f0	 mov	 eax, DWORD PTR _iLine$507585[ebp]
  002ac	3b 45 e0	 cmp	 eax, DWORD PTR _iMaxLine$[ebp]
  002af	0f 8c 97 fe ff
	ff		 jl	 $LN11@PrintManua
$LN9@PrintManua:

; 152  : 	}
; 153  : }

  002b5	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  002b9	8d 4d c0	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  002bc	e8 00 00 00 00	 call	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
$LN14@PrintManua:
  002c1	e8 00 00 00 00	 call	 __EH_epilog3
  002c6	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PrintManual@BingoToolTip@@IAEXHHM@Z$0:
  00000	8d 4d a0	 lea	 ecx, DWORD PTR _kTitle$507580[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
__unwindfunclet$?PrintManual@BingoToolTip@@IAEXHHM@Z$1:
  00008	8d 4d c0	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
__unwindfunclet$?PrintManual@BingoToolTip@@IAEXHHM@Z$2:
  00010	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _kPrinterA$507600[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
__unwindfunclet$?PrintManual@BingoToolTip@@IAEXHHM@Z$3:
  0001b	8d 4d 80	 lea	 ecx, DWORD PTR _kPrinterB$507601[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
__ehhandler$?PrintManual@BingoToolTip@@IAEXHHM@Z:
  00023	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00027	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002a	8b 8a 5c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-164]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PrintManual@BingoToolTip@@IAEXHHM@Z
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PrintManual@BingoToolTip@@IAEXHHM@Z ENDP		; BingoToolTip::PrintManual
PUBLIC	?UpdateWndSize@BingoToolTip@@IAEXXZ		; BingoToolTip::UpdateWndSize
EXTRN	__imp_?GetWidth@ioWnd@@QBEHXZ:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocomplexstringprinter.h
xdata$x	SEGMENT
__unwindtable$?UpdateWndSize@BingoToolTip@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UpdateWndSize@BingoToolTip@@IAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?UpdateWndSize@BingoToolTip@@IAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?UpdateWndSize@BingoToolTip@@IAEXXZ$2
__ehfuncinfo$?UpdateWndSize@BingoToolTip@@IAEXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?UpdateWndSize@BingoToolTip@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingotooltip.cpp
xdata$x	ENDS
;	COMDAT ?UpdateWndSize@BingoToolTip@@IAEXXZ
_TEXT	SEGMENT
_kPrinterA$507627 = -124				; size = 32
_kPrinterB$507628 = -92					; size = 32
_kPrinter$ = -60					; size = 32
_iMaxLine$ = -28					; size = 4
_i$507620 = -24						; size = 4
_iLine$507612 = -20					; size = 4
_bFirstGap$507619 = -13					; size = 1
__$EHRec$ = -12						; size = 12
?UpdateWndSize@BingoToolTip@@IAEXXZ PROC		; BingoToolTip::UpdateWndSize, COMDAT
; _this$ = ecx

; 156  : {

  00000	6a 70		 push	 112			; 00000070H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?UpdateWndSize@BingoToolTip@@IAEXXZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 157  : 	ioBingo *pBingo = g_MyInfo.GetBingo();

  0000e	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00013	8b b8 94 0b 00
	00		 mov	 edi, DWORD PTR [eax+2964]

; 158  : 	if( !pBingo )

  00019	85 ff		 test	 edi, edi
  0001b	0f 84 3b 01 00
	00		 je	 $LN13@UpdateWndS

; 159  : 		return;
; 160  : 
; 161  : 	ioComplexStringPrinter kPrinter;

  00021	8d 4d c4	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00024	e8 00 00 00 00	 call	 ??0ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::ioComplexStringPrinter
  00029	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 162  : 	int iTotalLineGap = 18;

  0002d	6a 12		 push	 18			; 00000012H
  0002f	5b		 pop	 ebx

; 163  : 	int iMaxLine = pBingo->GetToolTipMaxLine( m_iManualIndex );

  00030	ff b6 70 01 00
	00		 push	 DWORD PTR [esi+368]
  00036	8b cf		 mov	 ecx, edi
  00038	e8 00 00 00 00	 call	 ?GetToolTipMaxLine@ioBingo@@QAEHH@Z ; ioBingo::GetToolTipMaxLine

; 164  : 
; 165  : 	for( int iLine = 0; iLine < iMaxLine; ++iLine )

  0003d	83 65 ec 00	 and	 DWORD PTR _iLine$507612[ebp], 0
  00041	89 45 e4	 mov	 DWORD PTR _iMaxLine$[ebp], eax
  00044	85 c0		 test	 eax, eax
  00046	0f 8e f0 00 00
	00		 jle	 $LN9@UpdateWndS
$LN11@UpdateWndS:

; 166  : 	{
; 167  : 		enum { MAX_LOOP = 20, Y_GAP = 18, };
; 168  : 		bool bFirstGap = true;
; 169  : 		for( int i = 0; i < MAX_LOOP ; i++ )

  0004c	83 65 e8 00	 and	 DWORD PTR _i$507620[ebp], 0
  00050	c6 45 f3 01	 mov	 BYTE PTR _bFirstGap$507619[ebp], 1
$LN8@UpdateWndS:

; 170  : 		{
; 171  : 			if( kPrinter.GetFullWidth() < DESC_WIDTH )

  00054	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _kPrinter$[ebp+28]
  00059	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4069800000000000
  00061	0f 5a c0	 cvtps2pd xmm0, xmm0
  00064	66 0f 2f c8	 comisd	 xmm1, xmm0
  00068	0f 87 9a 00 00
	00		 ja	 $LN24@UpdateWndS

; 182  : 				break;
; 183  : 			}
; 184  : 
; 185  : 			ioComplexStringPrinter kPrinterA, kPrinterB;

  0006e	8d 4d 84	 lea	 ecx, DWORD PTR _kPrinterA$507627[ebp]
  00071	e8 00 00 00 00	 call	 ??0ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::ioComplexStringPrinter
  00076	8d 4d a4	 lea	 ecx, DWORD PTR _kPrinterB$507628[ebp]
  00079	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0007d	e8 00 00 00 00	 call	 ??0ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::ioComplexStringPrinter

; 186  : 			kPrinter.SplitFullText( kPrinterA, kPrinterB, DESC_WIDTH );

  00082	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@434c0000
  0008a	51		 push	 ecx
  0008b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00090	8d 45 a4	 lea	 eax, DWORD PTR _kPrinterB$507628[ebp]
  00093	50		 push	 eax
  00094	8d 45 84	 lea	 eax, DWORD PTR _kPrinterA$507627[ebp]
  00097	50		 push	 eax
  00098	8d 4d c4	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  0009b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0009f	e8 00 00 00 00	 call	 ?SplitFullText@ioComplexStringPrinter@@QAEXAAV1@0M@Z ; ioComplexStringPrinter::SplitFullText

; 187  : 			if( bFirstGap )

  000a4	80 7d f3 00	 cmp	 BYTE PTR _bFirstGap$507619[ebp], 0
  000a8	74 18		 je	 SHORT $LN2@UpdateWndS

; 188  : 			{
; 189  : 				iTotalLineGap += pBingo->GetToolTipGetSpaceLine( m_iManualIndex, iLine );

  000aa	ff 75 ec	 push	 DWORD PTR _iLine$507612[ebp]
  000ad	8b cf		 mov	 ecx, edi
  000af	ff b6 70 01 00
	00		 push	 DWORD PTR [esi+368]
  000b5	e8 00 00 00 00	 call	 ?GetToolTipGetSpaceLine@ioBingo@@QAEHHH@Z ; ioBingo::GetToolTipGetSpaceLine
  000ba	03 d8		 add	 ebx, eax

; 190  : 				bFirstGap = false;

  000bc	c6 45 f3 00	 mov	 BYTE PTR _bFirstGap$507619[ebp], 0

; 191  : 			}
; 192  : 			else

  000c0	eb 03		 jmp	 SHORT $LN1@UpdateWndS
$LN2@UpdateWndS:

; 193  : 				iTotalLineGap += Y_GAP;

  000c2	83 c3 12	 add	 ebx, 18			; 00000012H
$LN1@UpdateWndS:

; 194  : 
; 195  : 			kPrinterB.CopyFullText( kPrinter );

  000c5	8d 45 c4	 lea	 eax, DWORD PTR _kPrinter$[ebp]
  000c8	50		 push	 eax
  000c9	8d 4d a4	 lea	 ecx, DWORD PTR _kPrinterB$507628[ebp]
  000cc	e8 00 00 00 00	 call	 ?CopyFullText@ioComplexStringPrinter@@QBEXAAV1@@Z ; ioComplexStringPrinter::CopyFullText

; 196  : 			kPrinterA.ClearList();

  000d1	8d 4d 84	 lea	 ecx, DWORD PTR _kPrinterA$507627[ebp]
  000d4	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList

; 197  : 			kPrinterB.ClearList();

  000d9	8d 4d a4	 lea	 ecx, DWORD PTR _kPrinterB$507628[ebp]
  000dc	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList

; 198  : 		}

  000e1	8d 4d a4	 lea	 ecx, DWORD PTR _kPrinterB$507628[ebp]
  000e4	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000e8	e8 00 00 00 00	 call	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
  000ed	8d 4d 84	 lea	 ecx, DWORD PTR _kPrinterA$507627[ebp]
  000f0	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000f4	e8 00 00 00 00	 call	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
  000f9	ff 45 e8	 inc	 DWORD PTR _i$507620[ebp]
  000fc	83 7d e8 14	 cmp	 DWORD PTR _i$507620[ebp], 20 ; 00000014H
  00100	0f 8c 4e ff ff
	ff		 jl	 $LN8@UpdateWndS

; 170  : 		{
; 171  : 			if( kPrinter.GetFullWidth() < DESC_WIDTH )

  00106	eb 25		 jmp	 SHORT $LN10@UpdateWndS
$LN24@UpdateWndS:

; 172  : 			{
; 173  : 				if( bFirstGap )

  00108	80 7d f3 00	 cmp	 BYTE PTR _bFirstGap$507619[ebp], 0
  0010c	74 14		 je	 SHORT $LN4@UpdateWndS

; 174  : 				{
; 175  : 					iTotalLineGap += pBingo->GetToolTipGetSpaceLine( m_iManualIndex, iLine );

  0010e	ff 75 ec	 push	 DWORD PTR _iLine$507612[ebp]
  00111	8b cf		 mov	 ecx, edi
  00113	ff b6 70 01 00
	00		 push	 DWORD PTR [esi+368]
  00119	e8 00 00 00 00	 call	 ?GetToolTipGetSpaceLine@ioBingo@@QAEHHH@Z ; ioBingo::GetToolTipGetSpaceLine
  0011e	03 d8		 add	 ebx, eax

; 176  : 					bFirstGap = false;
; 177  : 				}
; 178  : 				else

  00120	eb 03		 jmp	 SHORT $LN3@UpdateWndS
$LN4@UpdateWndS:

; 179  : 					iTotalLineGap += Y_GAP;

  00122	83 c3 12	 add	 ebx, 18			; 00000012H
$LN3@UpdateWndS:

; 180  : 
; 181  : 				kPrinter.ClearList();

  00125	8d 4d c4	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00128	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList
$LN10@UpdateWndS:

; 164  : 
; 165  : 	for( int iLine = 0; iLine < iMaxLine; ++iLine )

  0012d	ff 45 ec	 inc	 DWORD PTR _iLine$507612[ebp]
  00130	8b 45 ec	 mov	 eax, DWORD PTR _iLine$507612[ebp]
  00133	3b 45 e4	 cmp	 eax, DWORD PTR _iMaxLine$[ebp]
  00136	0f 8c 10 ff ff
	ff		 jl	 $LN11@UpdateWndS
$LN9@UpdateWndS:

; 199  : 	}
; 200  : 
; 201  : 	SetSize( GetWidth(), 123 + iTotalLineGap - 12 );

  0013c	8b 3e		 mov	 edi, DWORD PTR [esi]
  0013e	83 c3 6f	 add	 ebx, 111		; 0000006fH
  00141	53		 push	 ebx
  00142	8b ce		 mov	 ecx, esi
  00144	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioWnd@@QBEHXZ
  0014a	50		 push	 eax
  0014b	8b ce		 mov	 ecx, esi
  0014d	ff 57 2c	 call	 DWORD PTR [edi+44]

; 202  : }

  00150	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00154	8d 4d c4	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00157	e8 00 00 00 00	 call	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
$LN13@UpdateWndS:
  0015c	e8 00 00 00 00	 call	 __EH_epilog3
  00161	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UpdateWndSize@BingoToolTip@@IAEXXZ$0:
  00000	8d 4d c4	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
__unwindfunclet$?UpdateWndSize@BingoToolTip@@IAEXXZ$1:
  00008	8d 4d 84	 lea	 ecx, DWORD PTR _kPrinterA$507627[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
__unwindfunclet$?UpdateWndSize@BingoToolTip@@IAEXXZ$2:
  00010	8d 4d a4	 lea	 ecx, DWORD PTR _kPrinterB$507628[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
__ehhandler$?UpdateWndSize@BingoToolTip@@IAEXXZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a 80	 mov	 ecx, DWORD PTR [edx-128]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?UpdateWndSize@BingoToolTip@@IAEXXZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?UpdateWndSize@BingoToolTip@@IAEXXZ ENDP		; BingoToolTip::UpdateWndSize
PUBLIC	?SetInfo@BingoToolTip@@QAEXHHW4ToolTipType@1@@Z	; BingoToolTip::SetInfo
EXTRN	?GetRewardName@ioBingo@@QAEABVioHashString@@H@Z:PROC ; ioBingo::GetRewardName
EXTRN	?GetRewardIcon@ioBingo@@QAEPAVioUIRenderImage@@H@Z:PROC ; ioBingo::GetRewardIcon
EXTRN	?GetAllBingoRewardName@ioBingo@@QAEABVioHashString@@H@Z:PROC ; ioBingo::GetAllBingoRewardName
EXTRN	?GetAllBingoRewardIcon@ioBingo@@QAEPAVioUIRenderImage@@H@Z:PROC ; ioBingo::GetAllBingoRewardIcon
EXTRN	?GetBingoDummyManualIndex@ioBingo@@QAEHH@Z:PROC	; ioBingo::GetBingoDummyManualIndex
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
EXTRN	?GetBingoDummyName@ioBingo@@QAEABVioHashString@@H@Z:PROC ; ioBingo::GetBingoDummyName
EXTRN	?GetBingoDummyIcon@ioBingo@@QAEPAVioUIRenderImage@@H@Z:PROC ; ioBingo::GetBingoDummyIcon
EXTRN	__imp_?CreateImageByFullName@ioUIImageSetManager@@QAEPAVioUIRenderImage@@ABVioHashString@@_N@Z:PROC
EXTRN	__imp_?GetSingleton@ioUIImageSetManager@@SAAAV1@XZ:PROC
EXTRN	?IsRewardHidden@ioBingo@@QAE_NH@Z:PROC		; ioBingo::IsRewardHidden
EXTRN	__imp_?ShowWnd@ioWnd@@QAEXXZ:PROC
EXTRN	__imp_?IsShow@ioWnd@@QBE_NXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?SetInfo@BingoToolTip@@QAEXHHW4ToolTipType@1@@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_iManualIndex$ = 12					; size = 4
_eType$ = 16						; size = 4
?SetInfo@BingoToolTip@@QAEXHHW4ToolTipType@1@@Z PROC	; BingoToolTip::SetInfo, COMDAT
; _this$ = ecx

; 205  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 206  : 	if( iIndex == 0 )

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _iIndex$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	85 db		 test	 ebx, ebx
  0000c	0f 84 fe 00 00
	00		 je	 $LN4@SetInfo

; 207  : 		return;
; 208  : 
; 209  : 	if( !IsShow() )

  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  00018	84 c0		 test	 al, al
  0001a	75 08		 jne	 SHORT $LN10@SetInfo

; 210  : 		ShowWnd();

  0001c	8b ce		 mov	 ecx, esi
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowWnd@ioWnd@@QAEXXZ
$LN10@SetInfo:

; 211  : 
; 212  : 	m_ToolTipType = eType;

  00024	8b 45 10	 mov	 eax, DWORD PTR _eType$[ebp]
  00027	57		 push	 edi
  00028	89 86 60 01 00
	00		 mov	 DWORD PTR [esi+352], eax

; 213  : 
; 214  : 	ioBingo *pBingo = g_MyInfo.GetBingo();

  0002e	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00033	8b b8 94 0b 00
	00		 mov	 edi, DWORD PTR [eax+2964]

; 215  : 	if( pBingo )

  00039	85 ff		 test	 edi, edi
  0003b	0f 84 ce 00 00
	00		 je	 $LN20@SetInfo

; 216  : 	{
; 217  : 		m_bHidden = pBingo->IsRewardHidden( iIndex );

  00041	53		 push	 ebx
  00042	8b cf		 mov	 ecx, edi
  00044	e8 00 00 00 00	 call	 ?IsRewardHidden@ioBingo@@QAE_NH@Z ; ioBingo::IsRewardHidden
  00049	88 86 84 01 00
	00		 mov	 BYTE PTR [esi+388], al

; 218  : 		if( m_bHidden )

  0004f	84 c0		 test	 al, al
  00051	74 3a		 je	 SHORT $LN8@SetInfo

; 219  : 		{
; 220  : 			SAFEDELETE( m_pHiddenIcon );

  00053	8b 8e 6c 01 00
	00		 mov	 ecx, DWORD PTR [esi+364]
  00059	85 c9		 test	 ecx, ecx
  0005b	74 0e		 je	 SHORT $LN7@SetInfo
  0005d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005f	6a 01		 push	 1
  00061	ff 50 40	 call	 DWORD PTR [eax+64]
  00064	83 a6 6c 01 00
	00 00		 and	 DWORD PTR [esi+364], 0
$LN7@SetInfo:

; 221  : 			m_pHiddenIcon = g_UIImageSetMgr.CreateImageByFullName( pBingo->GetHiddenIconName() );

  0006b	6a 00		 push	 0
  0006d	81 c7 08 01 00
	00		 add	 edi, 264		; 00000108H
  00073	57		 push	 edi
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioUIImageSetManager@@SAAAV1@XZ
  0007a	8b c8		 mov	 ecx, eax
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CreateImageByFullName@ioUIImageSetManager@@QAEPAVioUIRenderImage@@ABVioHashString@@_N@Z
  00082	89 86 6c 01 00
	00		 mov	 DWORD PTR [esi+364], eax

; 222  : 		}
; 223  : 		else

  00088	e9 82 00 00 00	 jmp	 $LN20@SetInfo
$LN8@SetInfo:

; 224  : 		{
; 225  : 			switch( m_ToolTipType )

  0008d	8b 86 60 01 00
	00		 mov	 eax, DWORD PTR [esi+352]
  00093	83 e8 00	 sub	 eax, 0
  00096	74 4b		 je	 SHORT $LN3@SetInfo
  00098	48		 dec	 eax
  00099	74 30		 je	 SHORT $LN2@SetInfo
  0009b	48		 dec	 eax
  0009c	75 71		 jne	 SHORT $LN20@SetInfo

; 241  : 			case TTT_DUMMY:
; 242  : 				{
; 243  : 					m_pIcon        = pBingo->GetBingoDummyIcon( iIndex );

  0009e	53		 push	 ebx
  0009f	8b cf		 mov	 ecx, edi
  000a1	e8 00 00 00 00	 call	 ?GetBingoDummyIcon@ioBingo@@QAEPAVioUIRenderImage@@H@Z ; ioBingo::GetBingoDummyIcon

; 244  : 					m_szTtitle     = pBingo->GetBingoDummyName( iIndex );

  000a6	53		 push	 ebx
  000a7	8b cf		 mov	 ecx, edi
  000a9	89 86 68 01 00
	00		 mov	 DWORD PTR [esi+360], eax
  000af	e8 00 00 00 00	 call	 ?GetBingoDummyName@ioBingo@@QAEABVioHashString@@H@Z ; ioBingo::GetBingoDummyName
  000b4	50		 push	 eax
  000b5	8d 8e 74 01 00
	00		 lea	 ecx, DWORD PTR [esi+372]
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 245  : 					m_iManualIndex = pBingo->GetBingoDummyManualIndex( iIndex );

  000c1	53		 push	 ebx
  000c2	8b cf		 mov	 ecx, edi
  000c4	e8 00 00 00 00	 call	 ?GetBingoDummyManualIndex@ioBingo@@QAEHH@Z ; ioBingo::GetBingoDummyManualIndex

; 246  : 				}
; 247  : 				break;

  000c9	eb 3e		 jmp	 SHORT $LN21@SetInfo
$LN2@SetInfo:

; 232  : 				}
; 233  : 				break;
; 234  : 			case TTT_ALL_BINGO_REWARD:
; 235  : 				{
; 236  : 					m_pIcon        = pBingo->GetAllBingoRewardIcon( iIndex );

  000cb	53		 push	 ebx
  000cc	8b cf		 mov	 ecx, edi
  000ce	e8 00 00 00 00	 call	 ?GetAllBingoRewardIcon@ioBingo@@QAEPAVioUIRenderImage@@H@Z ; ioBingo::GetAllBingoRewardIcon

; 237  : 					m_szTtitle     = pBingo->GetAllBingoRewardName( iIndex );

  000d3	53		 push	 ebx
  000d4	8b cf		 mov	 ecx, edi
  000d6	89 86 68 01 00
	00		 mov	 DWORD PTR [esi+360], eax
  000dc	e8 00 00 00 00	 call	 ?GetAllBingoRewardName@ioBingo@@QAEABVioHashString@@H@Z ; ioBingo::GetAllBingoRewardName

; 238  : 					m_iManualIndex = iManualIndex;
; 239  : 				}
; 240  : 				break;

  000e1	eb 16		 jmp	 SHORT $LN22@SetInfo
$LN3@SetInfo:

; 226  : 			{
; 227  : 			case TTT_REWARD:
; 228  : 				{
; 229  : 					m_pIcon        = pBingo->GetRewardIcon( iIndex );

  000e3	53		 push	 ebx
  000e4	8b cf		 mov	 ecx, edi
  000e6	e8 00 00 00 00	 call	 ?GetRewardIcon@ioBingo@@QAEPAVioUIRenderImage@@H@Z ; ioBingo::GetRewardIcon

; 230  : 					m_szTtitle     = pBingo->GetRewardName( iIndex );

  000eb	53		 push	 ebx
  000ec	8b cf		 mov	 ecx, edi
  000ee	89 86 68 01 00
	00		 mov	 DWORD PTR [esi+360], eax
  000f4	e8 00 00 00 00	 call	 ?GetRewardName@ioBingo@@QAEABVioHashString@@H@Z ; ioBingo::GetRewardName
$LN22@SetInfo:
  000f9	50		 push	 eax
  000fa	8d 8e 74 01 00
	00		 lea	 ecx, DWORD PTR [esi+372]
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 231  : 					m_iManualIndex = iManualIndex;

  00106	8b 45 0c	 mov	 eax, DWORD PTR _iManualIndex$[ebp]
$LN21@SetInfo:
  00109	89 86 70 01 00
	00		 mov	 DWORD PTR [esi+368], eax
$LN20@SetInfo:
  0010f	5f		 pop	 edi
$LN4@SetInfo:
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx

; 248  : 			}
; 249  : 		}
; 250  : 	}	
; 251  : }

  00112	5d		 pop	 ebp
  00113	c2 0c 00	 ret	 12			; 0000000cH
?SetInfo@BingoToolTip@@QAEXHHW4ToolTipType@1@@Z ENDP	; BingoToolTip::SetInfo
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$06@@YA_NABVioHashString@@AAY06$$CBD@Z	; operator==<7>
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iohashstring.h
;	COMDAT ??$?8$06@@YA_NABVioHashString@@AAY06$$CBD@Z
_TEXT	SEGMENT
__t$ = -16						; size = 7
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$06@@YA_NABVioHashString@@AAY06$$CBD@Z PROC	; operator==<7>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 c0 00 00
	00		 je	 $LN96@operator
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 f0	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 a9 00 00
	00		 je	 $LN95@operator
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 f1	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 92 00 00
	00		 je	 $LN94@operator
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 f2	 mov	 BYTE PTR __t$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	74 7f		 je	 SHORT $LN93@operator
  00051	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00054	88 55 f3	 mov	 BYTE PTR __t$[ebp+3], dl
  00057	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005a	84 d2		 test	 dl, dl
  0005c	74 6c		 je	 SHORT $LN92@operator
  0005e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00061	88 55 f4	 mov	 BYTE PTR __t$[ebp+4], dl
  00064	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00067	84 d2		 test	 dl, dl
  00069	74 59		 je	 SHORT $LN91@operator
  0006b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0006e	80 78 06 00	 cmp	 BYTE PTR [eax+6], 0
  00072	88 55 f5	 mov	 BYTE PTR __t$[ebp+5], dl
  00075	74 6f		 je	 SHORT $LN1@operator
  00077	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0007a	84 d2		 test	 dl, dl
  0007c	74 40		 je	 SHORT $LN89@operator
  0007e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00081	88 55 f7	 mov	 BYTE PTR __t$[ebp+7], dl
  00084	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  00087	84 d2		 test	 dl, dl
  00089	74 2d		 je	 SHORT $LN88@operator
  0008b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0008e	88 55 f8	 mov	 BYTE PTR __t$[ebp+8], dl
  00091	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  00094	84 d2		 test	 dl, dl
  00096	74 1a		 je	 SHORT $LN87@operator
  00098	8a 40 0a	 mov	 al, BYTE PTR [eax+10]
  0009b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0009e	88 55 f9	 mov	 BYTE PTR __t$[ebp+9], dl
  000a1	84 c0		 test	 al, al
  000a3	74 07		 je	 SHORT $LN86@operator
  000a5	34 eb		 xor	 al, -21			; ffffffebH
  000a7	88 45 fa	 mov	 BYTE PTR __t$[ebp+10], al
  000aa	eb 3a		 jmp	 SHORT $LN1@operator
$LN86@operator:
  000ac	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000b0	eb 34		 jmp	 SHORT $LN1@operator
$LN87@operator:
  000b2	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  000b6	eb 2e		 jmp	 SHORT $LN1@operator
$LN88@operator:
  000b8	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  000bc	eb 28		 jmp	 SHORT $LN1@operator
$LN89@operator:
  000be	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  000c2	eb 22		 jmp	 SHORT $LN1@operator
$LN91@operator:
  000c4	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  000c8	eb 1c		 jmp	 SHORT $LN1@operator
$LN92@operator:
  000ca	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  000ce	eb 16		 jmp	 SHORT $LN1@operator
$LN93@operator:
  000d0	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  000d4	eb 10		 jmp	 SHORT $LN1@operator
$LN94@operator:
  000d6	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  000da	eb 0a		 jmp	 SHORT $LN1@operator
$LN95@operator:
  000dc	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  000e0	eb 04		 jmp	 SHORT $LN1@operator
$LN96@operator:
  000e2	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator:
  000e6	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __t$[ebp], -353637139 ; eaebecedH
  000ed	6a 04		 push	 4
  000ef	c6 45 f6 00	 mov	 BYTE PTR __t$[ebp+6], 0
  000f3	58		 pop	 eax
$LL101@operator:
  000f4	8b c8		 mov	 ecx, eax
  000f6	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000fc	79 05		 jns	 SHORT $LN115@operator
  000fe	49		 dec	 ecx
  000ff	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00102	41		 inc	 ecx
$LN115@operator:
  00103	b2 ed		 mov	 dl, -19			; ffffffedH
  00105	2a d1		 sub	 dl, cl
  00107	30 54 05 f0	 xor	 BYTE PTR __t$[ebp+eax], dl
  0010b	40		 inc	 eax
  0010c	83 f8 06	 cmp	 eax, 6
  0010f	7c e3		 jl	 SHORT $LL101@operator
  00111	8b cf		 mov	 ecx, edi
  00113	8d 75 f0	 lea	 esi, DWORD PTR __t$[ebp]
  00116	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator:
  0011c	8a 08		 mov	 cl, BYTE PTR [eax]
  0011e	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00120	75 1a		 jne	 SHORT $LN112@operator
  00122	84 c9		 test	 cl, cl
  00124	74 12		 je	 SHORT $LN113@operator
  00126	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00129	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0012c	75 0e		 jne	 SHORT $LN112@operator
  0012e	83 c0 02	 add	 eax, 2
  00131	83 c6 02	 add	 esi, 2
  00134	84 c9		 test	 cl, cl
  00136	75 e4		 jne	 SHORT $LL111@operator
$LN113@operator:
  00138	33 c0		 xor	 eax, eax
  0013a	eb 05		 jmp	 SHORT $LN114@operator
$LN112@operator:
  0013c	1b c0		 sbb	 eax, eax
  0013e	83 d8 ff	 sbb	 eax, -1
$LN114@operator:
  00141	33 c9		 xor	 ecx, ecx
  00143	85 c0		 test	 eax, eax
  00145	0f 94 c0	 sete	 al

; 148  : }

  00148	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014b	5f		 pop	 edi
  0014c	33 cd		 xor	 ecx, ebp
  0014e	5e		 pop	 esi
  0014f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00154	c9		 leave
  00155	c3		 ret	 0
??$?8$06@@YA_NABVioHashString@@AAY06$$CBD@Z ENDP	; operator==<7>
_TEXT	ENDS
PUBLIC	_pImage$GSCopy$
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingotooltip.cpp
;	COMDAT ?AddRenderImage@BingoToolTip@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z
_TEXT	SEGMENT
_pImage$GSCopy$ = -20					; size = 4
__t$508177 = -16					; size = 7
__$ArrayPad$ = -4					; size = 4
_szType$ = 8						; size = 4
_pImage$ = 12						; size = 4
?AddRenderImage@BingoToolTip@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z PROC ; BingoToolTip::AddRenderImage, COMDAT
; _this$ = ecx

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _pImage$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _szType$[ebp]

; 26   : 	if( szType == "IconBg" )

  00019	6a 04		 push	 4

; 32   : 		AddRenderImage( szType, pImage );

  0001b	89 45 ec	 mov	 DWORD PTR _pImage$GSCopy$[ebp], eax
  0001e	c7 45 f0 a4 8f
	84 84		 mov	 DWORD PTR __t$508177[ebp], -2071687260 ; 84848fa4H
  00025	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __t$508177[ebp], -353637139 ; eaebecedH
  0002c	8b d9		 mov	 ebx, ecx
  0002e	66 c7 45 f4 af
	8b		 mov	 WORD PTR __t$508177[ebp+4], 35759 ; 00008bafH
  00034	c6 45 f6 00	 mov	 BYTE PTR __t$508177[ebp+6], 0
  00038	58		 pop	 eax
$LL108@AddRenderI:

; 26   : 	if( szType == "IconBg" )

  00039	8b c8		 mov	 ecx, eax
  0003b	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00041	79 05		 jns	 SHORT $LN122@AddRenderI
  00043	49		 dec	 ecx
  00044	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00047	41		 inc	 ecx
$LN122@AddRenderI:
  00048	b2 ed		 mov	 dl, -19			; ffffffedH
  0004a	2a d1		 sub	 dl, cl
  0004c	30 54 05 f0	 xor	 BYTE PTR __t$508177[ebp+eax], dl
  00050	40		 inc	 eax
  00051	83 f8 06	 cmp	 eax, 6
  00054	7c e3		 jl	 SHORT $LL108@AddRenderI
  00056	8b cf		 mov	 ecx, edi
  00058	8d 75 f0	 lea	 esi, DWORD PTR __t$508177[ebp]
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL118@AddRenderI:
  00061	8a 08		 mov	 cl, BYTE PTR [eax]
  00063	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00065	75 1a		 jne	 SHORT $LN119@AddRenderI
  00067	84 c9		 test	 cl, cl
  00069	74 12		 je	 SHORT $LN120@AddRenderI
  0006b	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0006e	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00071	75 0e		 jne	 SHORT $LN119@AddRenderI
  00073	83 c0 02	 add	 eax, 2
  00076	83 c6 02	 add	 esi, 2
  00079	84 c9		 test	 cl, cl
  0007b	75 e4		 jne	 SHORT $LL118@AddRenderI
$LN120@AddRenderI:
  0007d	33 c0		 xor	 eax, eax
  0007f	eb 05		 jmp	 SHORT $LN121@AddRenderI
$LN119@AddRenderI:
  00081	1b c0		 sbb	 eax, eax
  00083	83 d8 ff	 sbb	 eax, -1
$LN121@AddRenderI:
  00086	85 c0		 test	 eax, eax
  00088	75 23		 jne	 SHORT $LN3@AddRenderI

; 27   : 	{
; 28   : 		SAFEDELETE( m_pIconBg );

  0008a	8b 8b 64 01 00
	00		 mov	 ecx, DWORD PTR [ebx+356]
  00090	85 c9		 test	 ecx, ecx
  00092	74 0e		 je	 SHORT $LN2@AddRenderI
  00094	8b 01		 mov	 eax, DWORD PTR [ecx]
  00096	6a 01		 push	 1
  00098	ff 50 40	 call	 DWORD PTR [eax+64]
  0009b	83 a3 64 01 00
	00 00		 and	 DWORD PTR [ebx+356], 0
$LN2@AddRenderI:

; 29   : 		m_pIconBg = pImage;

  000a2	8b 45 ec	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  000a5	89 83 64 01 00
	00		 mov	 DWORD PTR [ebx+356], eax

; 30   : 	}
; 31   : 	else

  000ab	eb 0b		 jmp	 SHORT $LN1@AddRenderI
$LN3@AddRenderI:

; 32   : 		AddRenderImage( szType, pImage );

  000ad	ff 75 ec	 push	 DWORD PTR _pImage$GSCopy$[ebp]
  000b0	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b2	57		 push	 edi
  000b3	8b cb		 mov	 ecx, ebx
  000b5	ff 50 04	 call	 DWORD PTR [eax+4]
$LN1@AddRenderI:

; 33   : }

  000b8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	33 cd		 xor	 ecx, ebp
  000bf	5b		 pop	 ebx
  000c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c5	c9		 leave
  000c6	c2 08 00	 ret	 8
?AddRenderImage@BingoToolTip@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z ENDP ; BingoToolTip::AddRenderImage
_TEXT	ENDS
EXTRN	__imp_?SetScreenWndPos@ioWnd@@QAEXHH@Z:PROC
EXTRN	?Height@Setting@@SAHXZ:PROC			; Setting::Height
EXTRN	__imp_?GetHeight@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?GetMousePos@ioMouse@@QBEABUtagPOINT@@XZ:PROC
EXTRN	?SetToolTipCursor@ioLSMouse@@QAEXXZ:PROC	; ioLSMouse::SetToolTipCursor
EXTRN	?GetSingleton@ioApplication@@SAAAV1@XZ:PROC	; ioApplication::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?OnProcess@BingoToolTip@@MAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fTimePerSec$ = 8					; size = 4
?OnProcess@BingoToolTip@@MAEXM@Z PROC			; BingoToolTip::OnProcess, COMDAT
; _this$ = ecx

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 49   : 	if( !IsShow() )

  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  0000d	84 c0		 test	 al, al
  0000f	74 66		 je	 SHORT $LN4@OnProcess

; 50   : 		return;
; 51   : 
; 52   : 	UpdateWndSize();

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ?UpdateWndSize@BingoToolTip@@IAEXXZ ; BingoToolTip::UpdateWndSize

; 53   : 
; 54   : 	ioLSMouse *pMouse = g_App.GetMouse();

  0001a	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton
  0001f	8b f0		 mov	 esi, eax
  00021	81 c6 90 00 00
	00		 add	 esi, 144		; 00000090H

; 55   : 	if( !pMouse )

  00027	74 4d		 je	 SHORT $LN8@OnProcess

; 56   : 		return;
; 57   : 	
; 58   : 	pMouse->SetToolTipCursor();

  00029	53		 push	 ebx
  0002a	57		 push	 edi
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?SetToolTipCursor@ioLSMouse@@QAEXXZ ; ioLSMouse::SetToolTipCursor

; 59   : 	POINT pt = pMouse->GetMousePos();

  00032	8b ce		 mov	 ecx, esi
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetMousePos@ioMouse@@QBEABUtagPOINT@@XZ
  0003a	8b 18		 mov	 ebx, DWORD PTR [eax]
  0003c	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 60   : 	int iXPos = pt.x + 8;
; 61   : 	int iYPos = pt.y + 8;
; 62   : 	int iYOffset = pt.y + GetHeight() + 8;

  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	83 c3 08	 add	 ebx, 8
  00045	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioWnd@@QBEHXZ
  0004e	8d 74 30 08	 lea	 esi, DWORD PTR [eax+esi+8]

; 63   : 	if( Setting::Height() < iYOffset )

  00052	e8 00 00 00 00	 call	 ?Height@Setting@@SAHXZ	; Setting::Height
  00057	3b c6		 cmp	 eax, esi
  00059	7d 0e		 jge	 SHORT $LN1@OnProcess

; 64   : 	{
; 65   : 		iYPos -= ( iYOffset - Setting::Height() ) + 8;

  0005b	e8 00 00 00 00	 call	 ?Height@Setting@@SAHXZ	; Setting::Height
  00060	6a f8		 push	 -8			; fffffff8H
  00062	59		 pop	 ecx
  00063	2b ce		 sub	 ecx, esi
  00065	03 f9		 add	 edi, ecx
  00067	03 f8		 add	 edi, eax
$LN1@OnProcess:

; 66   : 	}
; 67   : 
; 68   : 	SetScreenWndPos( iXPos, iYPos );

  00069	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	57		 push	 edi
  0006d	53		 push	 ebx
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetScreenWndPos@ioWnd@@QAEXHH@Z
  00074	5f		 pop	 edi
  00075	5b		 pop	 ebx
$LN8@OnProcess:
  00076	5e		 pop	 esi
$LN4@OnProcess:

; 69   : }

  00077	c9		 leave
  00078	c2 04 00	 ret	 4
?OnProcess@BingoToolTip@@MAEXM@Z ENDP			; BingoToolTip::OnProcess
_TEXT	ENDS
PUBLIC	__real@3f19999a
PUBLIC	__real@4f800000
EXTRN	__imp_?OnRender@ioWnd@@MAEXXZ:PROC
;	COMDAT __real@3f19999a
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingotooltip.cpp
CONST	ENDS
;	COMDAT ?OnRender@BingoToolTip@@MAEXXZ
_TEXT	SEGMENT
tv301 = -8						; size = 4
tv292 = -8						; size = 4
_iYPos$ = -4						; size = 4
?OnRender@BingoToolTip@@MAEXXZ PROC			; BingoToolTip::OnRender, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f1		 mov	 esi, ecx

; 73   : 	ioWnd::OnRender();

  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnRender@ioWnd@@MAEXXZ

; 74   : 
; 75   : 	int iXPos = GetDerivedPosX();

  00010	8b ce		 mov	 ecx, esi
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosX@ioWnd@@QBEHXZ

; 76   : 	int iYPos = GetDerivedPosY();

  00018	8b ce		 mov	 ecx, esi
  0001a	8b f8		 mov	 edi, eax
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ
  00022	8b c8		 mov	 ecx, eax

; 77   : 
; 78   : 	enum { ICON_XOFFSET = 48, ICON_YOFFSET = 49,
; 79   : 		   PRINT_XOFFSET = 14, FIRST_YOFFSET = 99, };
; 80   : 
; 81   : 	if( m_pIconBg )

  00024	8d 86 64 01 00
	00		 lea	 eax, DWORD PTR [esi+356]
  0002a	33 db		 xor	 ebx, ebx
  0002c	89 4d fc	 mov	 DWORD PTR _iYPos$[ebp], ecx
  0002f	39 18		 cmp	 DWORD PTR [eax], ebx
  00031	74 2e		 je	 SHORT $LN4@OnRender

; 82   : 		m_pIconBg->Render( iXPos + ICON_XOFFSET, iYPos + ICON_YOFFSET, UI_RENDER_MULTIPLY );

  00033	8b 00		 mov	 eax, DWORD PTR [eax]
  00035	8b 10		 mov	 edx, DWORD PTR [eax]
  00037	53		 push	 ebx
  00038	53		 push	 ebx
  00039	53		 push	 ebx
  0003a	83 c1 31	 add	 ecx, 49			; 00000031H
  0003d	6a 08		 push	 8
  0003f	51		 push	 ecx
  00040	51		 push	 ecx
  00041	0f 57 c0	 xorps	 xmm0, xmm0
  00044	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00048	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0004e	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  00051	0f 57 c0	 xorps	 xmm0, xmm0
  00054	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00058	8b c8		 mov	 ecx, eax
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	ff 12		 call	 DWORD PTR [edx]
$LN4@OnRender:

; 83   : 
; 84   : 	if( !m_bHidden && m_pIcon )

  00061	8a 86 84 01 00
	00		 mov	 al, BYTE PTR [esi+388]
  00067	3a c3		 cmp	 al, bl
  00069	75 38		 jne	 SHORT $LN14@OnRender
  0006b	39 9e 68 01 00
	00		 cmp	 DWORD PTR [esi+360], ebx
  00071	74 2c		 je	 SHORT $LN3@OnRender

; 85   : 	{
; 86   : 		m_pIcon->SetScale( FLOAT1 );

  00073	b8 01 00 00 00	 mov	 eax, 1
  00078	8b 8e 68 01 00
	00		 mov	 ecx, DWORD PTR [esi+360]
  0007e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00080	89 45 f8	 mov	 DWORD PTR tv301[ebp], eax
  00083	db 45 f8	 fild	 DWORD PTR tv301[ebp]
  00086	85 c0		 test	 eax, eax
  00088	79 06		 jns	 SHORT $LN11@OnRender
  0008a	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN11@OnRender:
  00090	51		 push	 ecx
  00091	d9 1c 24	 fstp	 DWORD PTR [esp]
  00094	ff 52 1c	 call	 DWORD PTR [edx+28]

; 87   : 		m_pIcon->Render( iXPos + ICON_XOFFSET, iYPos + ICON_YOFFSET );

  00097	8b 8e 68 01 00
	00		 mov	 ecx, DWORD PTR [esi+360]
  0009d	eb 36		 jmp	 SHORT $LN15@OnRender
$LN3@OnRender:

; 88   : 	}
; 89   : 	else if( m_bHidden && m_pHiddenIcon )

  0009f	3a c3		 cmp	 al, bl
  000a1	74 5e		 je	 SHORT $LN1@OnRender
$LN14@OnRender:
  000a3	39 9e 6c 01 00
	00		 cmp	 DWORD PTR [esi+364], ebx
  000a9	74 56		 je	 SHORT $LN1@OnRender

; 90   : 	{
; 91   : 		m_pHiddenIcon->SetScale( FLOAT1 );

  000ab	b8 01 00 00 00	 mov	 eax, 1
  000b0	8b 8e 6c 01 00
	00		 mov	 ecx, DWORD PTR [esi+364]
  000b6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b8	89 45 f8	 mov	 DWORD PTR tv292[ebp], eax
  000bb	db 45 f8	 fild	 DWORD PTR tv292[ebp]
  000be	85 c0		 test	 eax, eax
  000c0	79 06		 jns	 SHORT $LN12@OnRender
  000c2	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN12@OnRender:
  000c8	51		 push	 ecx
  000c9	d9 1c 24	 fstp	 DWORD PTR [esp]
  000cc	ff 52 1c	 call	 DWORD PTR [edx+28]

; 92   : 		m_pHiddenIcon->Render( iXPos + ICON_XOFFSET, iYPos + ICON_YOFFSET );

  000cf	8b 8e 6c 01 00
	00		 mov	 ecx, DWORD PTR [esi+364]
$LN15@OnRender:
  000d5	8b 55 fc	 mov	 edx, DWORD PTR _iYPos$[ebp]
  000d8	8b 01		 mov	 eax, DWORD PTR [ecx]
  000da	53		 push	 ebx
  000db	53		 push	 ebx
  000dc	53		 push	 ebx
  000dd	53		 push	 ebx
  000de	51		 push	 ecx
  000df	0f 57 c0	 xorps	 xmm0, xmm0
  000e2	83 c2 31	 add	 edx, 49			; 00000031H
  000e5	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  000e9	51		 push	 ecx
  000ea	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000f0	8d 57 30	 lea	 edx, DWORD PTR [edi+48]
  000f3	0f 57 c0	 xorps	 xmm0, xmm0
  000f6	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  000fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ff	ff 10		 call	 DWORD PTR [eax]
$LN1@OnRender:

; 93   : 	}
; 94   : 
; 95   : 	PrintManual( iXPos + PRINT_XOFFSET, iYPos + FIRST_YOFFSET, FONT_SIZE_12);

  00101	8b 45 fc	 mov	 eax, DWORD PTR _iYPos$[ebp]
  00104	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  0010c	51		 push	 ecx
  0010d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00112	83 c0 63	 add	 eax, 99			; 00000063H
  00115	50		 push	 eax
  00116	83 c7 0e	 add	 edi, 14			; 0000000eH
  00119	57		 push	 edi
  0011a	8b ce		 mov	 ecx, esi
  0011c	e8 00 00 00 00	 call	 ?PrintManual@BingoToolTip@@IAEXHHM@Z ; BingoToolTip::PrintManual
  00121	5f		 pop	 edi
  00122	5e		 pop	 esi
  00123	5b		 pop	 ebx

; 96   : }

  00124	c9		 leave
  00125	c3		 ret	 0
?OnRender@BingoToolTip@@MAEXXZ ENDP			; BingoToolTip::OnRender
_TEXT	ENDS
END
