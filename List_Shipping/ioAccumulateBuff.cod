; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioAccumulateBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	??_7ioAccumulateBuff@@6B@			; ioAccumulateBuff::`vftable'
PUBLIC	??0ioAccumulateBuff@@QAE@XZ			; ioAccumulateBuff::ioAccumulateBuff
PUBLIC	??_R4ioAccumulateBuff@@6B@			; ioAccumulateBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioAccumulateBuff@@@8			; ioAccumulateBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioAccumulateBuff@@8			; ioAccumulateBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioAccumulateBuff@@8			; ioAccumulateBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioAccumulateBuff@@8		; ioAccumulateBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioAccumulateBuff@@UAEXAAVioINILoader@@@Z ; ioAccumulateBuff::LoadProperty
PUBLIC	?Clone@ioAccumulateBuff@@UAEPAVioBuff@@XZ	; ioAccumulateBuff::Clone
PUBLIC	?StartBuff@ioAccumulateBuff@@UAEXPAVioBaseChar@@@Z ; ioAccumulateBuff::StartBuff
PUBLIC	?ApplyStartBuff@ioAccumulateBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioAccumulateBuff::ApplyStartBuff
PUBLIC	?ProcessBuff@ioAccumulateBuff@@UAEXM@Z		; ioAccumulateBuff::ProcessBuff
PUBLIC	?EndBuff@ioAccumulateBuff@@UAEXXZ		; ioAccumulateBuff::EndBuff
PUBLIC	?GetBuffInfo@ioAccumulateBuff@@UAEXAAVSP2Packet@@@Z ; ioAccumulateBuff::GetBuffInfo
PUBLIC	?ApplyBuffInfo@ioAccumulateBuff@@UAEXAAVSP2Packet@@@Z ; ioAccumulateBuff::ApplyBuffInfo
PUBLIC	?AccumulateBuff@ioAccumulateBuff@@UAEXXZ	; ioAccumulateBuff::AccumulateBuff
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyExtraBuffInfo
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioAccumulateBuff@@UAEPAXI@Z:PROC		; ioAccumulateBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioaccumulatebuff.cpp
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioAccumulateBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioAccumulateBuff@@8 DD FLAT:??_R0?AVioAccumulateBuff@@@8 ; ioAccumulateBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioAccumulateBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioAccumulateBuff@@8
rdata$r	SEGMENT
??_R2ioAccumulateBuff@@8 DD FLAT:??_R1A@?0A@EA@ioAccumulateBuff@@8 ; ioAccumulateBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioAccumulateBuff@@8
rdata$r	SEGMENT
??_R3ioAccumulateBuff@@8 DD 00H				; ioAccumulateBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioAccumulateBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioAccumulateBuff@@@8
_DATA	SEGMENT
??_R0?AVioAccumulateBuff@@@8 DD FLAT:??_7type_info@@6B@	; ioAccumulateBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioAccumulateBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioAccumulateBuff@@6B@
rdata$r	SEGMENT
??_R4ioAccumulateBuff@@6B@ DD 00H			; ioAccumulateBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioAccumulateBuff@@@8
	DD	FLAT:??_R3ioAccumulateBuff@@8
rdata$r	ENDS
;	COMDAT ??_7ioAccumulateBuff@@6B@
CONST	SEGMENT
??_7ioAccumulateBuff@@6B@ DD FLAT:??_R4ioAccumulateBuff@@6B@ ; ioAccumulateBuff::`vftable'
	DD	FLAT:?LoadProperty@ioAccumulateBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioAccumulateBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioAccumulateBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioAccumulateBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioAccumulateBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioAccumulateBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioAccumulateBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioAccumulateBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioAccumulateBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioAccumulateBuff@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioAccumulateBuff@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioAccumulateBuff@@QAE@XZ$0
__ehfuncinfo$??0ioAccumulateBuff@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioAccumulateBuff@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioAccumulateBuff@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioAccumulateBuff@@QAE@XZ PROC			; ioAccumulateBuff::ioAccumulateBuff, COMDAT
; _this$ = ecx

; 10   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioAccumulateBuff@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff
  00016	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001a	8d 8e 74 09 00
	00		 lea	 ecx, DWORD PTR [esi+2420]
  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioAccumulateBuff@@6B@
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 11   : 	m_bImmuneBuff = false;
; 12   : 	m_iAccumulateCnt = 0;

  0002c	83 a6 6c 09 00
	00 00		 and	 DWORD PTR [esi+2412], 0
  00033	c6 86 84 09 00
	00 00		 mov	 BYTE PTR [esi+2436], 0

; 13   : }

  0003a	8b c6		 mov	 eax, esi
  0003c	e8 00 00 00 00	 call	 __EH_epilog3
  00041	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioAccumulateBuff@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??0ioAccumulateBuff@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioAccumulateBuff@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioAccumulateBuff@@QAE@XZ ENDP			; ioAccumulateBuff::ioAccumulateBuff
PUBLIC	??0ioAccumulateBuff@@QAE@ABV0@@Z		; ioAccumulateBuff::ioAccumulateBuff
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioAccumulateBuff@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioAccumulateBuff@@QAE@ABV0@@Z$0
__ehfuncinfo$??0ioAccumulateBuff@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioAccumulateBuff@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioAccumulateBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioAccumulateBuff@@QAE@ABV0@@Z PROC			; ioAccumulateBuff::ioAccumulateBuff, COMDAT
; _this$ = ecx

; 20   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioAccumulateBuff@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioAccumulateBuff@@6B@
  00024	8b 87 70 09 00
	00		 mov	 eax, DWORD PTR [edi+2416]
  0002a	89 86 70 09 00
	00		 mov	 DWORD PTR [esi+2416], eax
  00030	8d 87 74 09 00
	00		 lea	 eax, DWORD PTR [edi+2420]
  00036	50		 push	 eax
  00037	8d 8e 74 09 00
	00		 lea	 ecx, DWORD PTR [esi+2420]
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00043	8a 87 85 09 00
	00		 mov	 al, BYTE PTR [edi+2437]

; 21   : 	m_bImmuneBuff = false;
; 22   : 	m_iAccumulateCnt = 0;

  00049	83 a6 6c 09 00
	00 00		 and	 DWORD PTR [esi+2412], 0
  00050	88 86 85 09 00
	00		 mov	 BYTE PTR [esi+2437], al
  00056	c6 86 84 09 00
	00 00		 mov	 BYTE PTR [esi+2436], 0

; 23   : }

  0005d	8b c6		 mov	 eax, esi
  0005f	e8 00 00 00 00	 call	 __EH_epilog3
  00064	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioAccumulateBuff@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??0ioAccumulateBuff@@QAE@ABV0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioAccumulateBuff@@QAE@ABV0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioAccumulateBuff@@QAE@ABV0@@Z ENDP			; ioAccumulateBuff::ioAccumulateBuff
PUBLIC	??1ioAccumulateBuff@@UAE@XZ			; ioAccumulateBuff::~ioAccumulateBuff
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioAccumulateBuff@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioAccumulateBuff@@UAE@XZ$0
__ehfuncinfo$??1ioAccumulateBuff@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ioAccumulateBuff@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioAccumulateBuff@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioAccumulateBuff@@UAE@XZ PROC			; ioAccumulateBuff::~ioAccumulateBuff, COMDAT
; _this$ = ecx

; 26   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioAccumulateBuff@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioAccumulateBuff@@6B@
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 27   : }

  0001b	8d 8e 74 09 00
	00		 lea	 ecx, DWORD PTR [esi+2420]
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00027	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  00032	e8 00 00 00 00	 call	 __EH_epilog3
  00037	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioAccumulateBuff@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??1ioAccumulateBuff@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioAccumulateBuff@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioAccumulateBuff@@UAE@XZ ENDP			; ioAccumulateBuff::~ioAccumulateBuff
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioAccumulateBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioAccumulateBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioAccumulateBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioAccumulateBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioAccumulateBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T524636 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioAccumulateBuff@@UAEPAVioBuff@@XZ PROC		; ioAccumulateBuff::Clone, COMDAT
; _this$ = ecx

; 44   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioAccumulateBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 45   : 	return new ioAccumulateBuff( *this );

  0000e	68 88 09 00 00	 push	 2440			; 00000988H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T524636[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioAccumulateBuff@@QAE@ABV0@@Z ; ioAccumulateBuff::ioAccumulateBuff
$LN3@Clone:

; 46   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioAccumulateBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T524636[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioAccumulateBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioAccumulateBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioAccumulateBuff@@UAEPAVioBuff@@XZ ENDP		; ioAccumulateBuff::Clone
EXTRN	?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z:PROC	; ioBuff::StartBuff
; Function compile flags: /Ogsp
;	COMDAT ?StartBuff@ioAccumulateBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?StartBuff@ioAccumulateBuff@@UAEXPAVioBaseChar@@@Z PROC	; ioAccumulateBuff::StartBuff, COMDAT
; _this$ = ecx

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 50   : 	ioBuff::StartBuff( pOwner );

  00004	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z ; ioBuff::StartBuff

; 51   : 
; 52   : 	m_bImmuneBuff = false;
; 53   : 	m_iAccumulateCnt = 0;

  0000e	83 a6 6c 09 00
	00 00		 and	 DWORD PTR [esi+2412], 0
  00015	c6 86 84 09 00
	00 00		 mov	 BYTE PTR [esi+2436], 0
  0001c	5e		 pop	 esi

; 54   : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?StartBuff@ioAccumulateBuff@@UAEXPAVioBaseChar@@@Z ENDP	; ioAccumulateBuff::StartBuff
_TEXT	ENDS
EXTRN	?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z:PROC ; ioBuff::ApplyStartBuff
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioAccumulateBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioAccumulateBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioAccumulateBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 58   : 	if( !ioBuff::ApplyStartBuff( pOwner, dwGlobalTime, dwGlobalTime ) )

  00003	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  00009	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0000c	e8 00 00 00 00	 call	 ?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBuff::ApplyStartBuff
  00011	84 c0		 test	 al, al
  00013	0f 95 c0	 setne	 al

; 59   : 		return false;
; 60   : 
; 61   : 	return true;
; 62   : }

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioAccumulateBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioAccumulateBuff::ApplyStartBuff
_TEXT	ENDS
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
; Function compile flags: /Ogsp
;	COMDAT ?EndBuff@ioAccumulateBuff@@UAEXXZ
_TEXT	SEGMENT
?EndBuff@ioAccumulateBuff@@UAEXXZ PROC			; ioAccumulateBuff::EndBuff, COMDAT
; _this$ = ecx

; 110  : 	ioBuff::EndBuff();

  00000	e9 00 00 00 00	 jmp	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff
?EndBuff@ioAccumulateBuff@@UAEXXZ ENDP			; ioAccumulateBuff::EndBuff
_TEXT	ENDS
EXTRN	??6SP2Packet@@QAEAAV0@H@Z:PROC			; SP2Packet::operator<<
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
; Function compile flags: /Ogsp
;	COMDAT ?GetBuffInfo@ioAccumulateBuff@@UAEXAAVSP2Packet@@@Z
_TEXT	SEGMENT
_rkPacket$ = 8						; size = 4
?GetBuffInfo@ioAccumulateBuff@@UAEXAAVSP2Packet@@@Z PROC ; ioAccumulateBuff::GetBuffInfo, COMDAT
; _this$ = ecx

; 114  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 115  : 	ioBuff::GetBuffInfo( rkPacket );

  00004	ff 75 08	 push	 DWORD PTR _rkPacket$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z ; ioBuff::GetBuffInfo

; 116  : 
; 117  : 	rkPacket << m_iAccumulateCnt;

  0000e	ff b6 6c 09 00
	00		 push	 DWORD PTR [esi+2412]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  00017	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<
  0001c	5e		 pop	 esi

; 118  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?GetBuffInfo@ioAccumulateBuff@@UAEXAAVSP2Packet@@@Z ENDP ; ioAccumulateBuff::GetBuffInfo
_TEXT	ENDS
EXTRN	??5SP2Packet@@QAEAAV0@AAH@Z:PROC		; SP2Packet::operator>>
; Function compile flags: /Ogsp
;	COMDAT ?ApplyBuffInfo@ioAccumulateBuff@@UAEXAAVSP2Packet@@@Z
_TEXT	SEGMENT
_rkPacket$ = 8						; size = 4
?ApplyBuffInfo@ioAccumulateBuff@@UAEXAAVSP2Packet@@@Z PROC ; ioAccumulateBuff::ApplyBuffInfo, COMDAT
; _this$ = ecx

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 122  : 	rkPacket >> m_iAccumulateCnt;

  00003	81 c1 6c 09 00
	00		 add	 ecx, 2412		; 0000096cH
  00009	51		 push	 ecx
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  0000d	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 123  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?ApplyBuffInfo@ioAccumulateBuff@@UAEXAAVSP2Packet@@@Z ENDP ; ioAccumulateBuff::ApplyBuffInfo
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?AccumulateBuff@ioAccumulateBuff@@UAEXXZ
_TEXT	SEGMENT
?AccumulateBuff@ioAccumulateBuff@@UAEXXZ PROC		; ioAccumulateBuff::AccumulateBuff, COMDAT
; _this$ = ecx

; 127  : 	m_iAccumulateCnt++;

  00000	ff 81 6c 09 00
	00		 inc	 DWORD PTR [ecx+2412]

; 128  : }

  00006	c3		 ret	 0
?AccumulateBuff@ioAccumulateBuff@@UAEXXZ ENDP		; ioAccumulateBuff::AccumulateBuff
_TEXT	ENDS
PUBLIC	?CheckOwnerStateCheck@ioAccumulateBuff@@IAE_NXZ	; ioAccumulateBuff::CheckOwnerStateCheck
EXTRN	?IsApplyDownState@ioBaseChar@@QAE_N_N@Z:PROC	; ioBaseChar::IsApplyDownState
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
EXTRN	?IsFloatingState@ioBaseChar@@QBE_NXZ:PROC	; ioBaseChar::IsFloatingState
; Function compile flags: /Ogsp
;	COMDAT ?CheckOwnerStateCheck@ioAccumulateBuff@@IAE_NXZ
_TEXT	SEGMENT
?CheckOwnerStateCheck@ioAccumulateBuff@@IAE_NXZ PROC	; ioAccumulateBuff::CheckOwnerStateCheck, COMDAT
; _this$ = ecx

; 131  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 132  : 	if( !m_pOwner ) return false;

  00003	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 3a		 je	 SHORT $LN1@CheckOwner

; 133  : 
; 134  : 	CharState eState = m_pOwner->GetState();
; 135  : 
; 136  : 	if( m_bDisableDownState )

  0000d	80 be 85 09 00
	00 00		 cmp	 BYTE PTR [esi+2437], 0
  00014	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  0001a	74 2b		 je	 SHORT $LN1@CheckOwner

; 137  : 	{
; 138  : 		if( eState == CS_BLOW_WOUNDED && !m_pOwner->IsFloatingState() )

  0001c	3c 0c		 cmp	 al, 12			; 0000000cH
  0001e	75 14		 jne	 SHORT $LN7@CheckOwner
$LN14@CheckOwner:
  00020	e8 00 00 00 00	 call	 ?IsFloatingState@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsFloatingState
  00025	84 c0		 test	 al, al
$LN16@CheckOwner:
  00027	75 1e		 jne	 SHORT $LN1@CheckOwner
$LN15@CheckOwner:

; 139  : 		{
; 140  : 			SetReserveEndBuff();

  00029	8b ce		 mov	 ecx, esi
  0002b	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 141  : 			return true;

  00030	b0 01		 mov	 al, 1
  00032	5e		 pop	 esi

; 161  : }

  00033	c3		 ret	 0
$LN7@CheckOwner:

; 142  : 		}
; 143  : 		else if( eState == CS_BOUND_BLOW_WOUNDED && !m_pOwner->IsFloatingState() )

  00034	3c 31		 cmp	 al, 49			; 00000031H

; 144  : 		{
; 145  : 			SetReserveEndBuff();
; 146  : 			return true;

  00036	74 e8		 je	 SHORT $LN14@CheckOwner

; 147  : 		}
; 148  : 		else if( eState == CS_ETC_STATE && m_pOwner->IsApplyDownState(false) )

  00038	3c 0f		 cmp	 al, 15			; 0000000fH
  0003a	75 0f		 jne	 SHORT $LN3@CheckOwner
  0003c	6a 00		 push	 0
  0003e	e8 00 00 00 00	 call	 ?IsApplyDownState@ioBaseChar@@QAE_N_N@Z ; ioBaseChar::IsApplyDownState
  00043	84 c0		 test	 al, al
  00045	75 e2		 jne	 SHORT $LN15@CheckOwner
$LN1@CheckOwner:

; 157  : 		}
; 158  : 	}
; 159  : 
; 160  : 	return false;

  00047	32 c0		 xor	 al, al
  00049	5e		 pop	 esi

; 161  : }

  0004a	c3		 ret	 0
$LN3@CheckOwner:

; 149  : 		{
; 150  : 			SetReserveEndBuff();
; 151  : 			return true;
; 152  : 		}
; 153  : 		else if( eState == CS_DROP_ZONE_DOWN )

  0004b	3c 10		 cmp	 al, 16			; 00000010H

; 154  : 		{
; 155  : 			SetReserveEndBuff();
; 156  : 			return true;

  0004d	eb d8		 jmp	 SHORT $LN16@CheckOwner
?CheckOwnerStateCheck@ioAccumulateBuff@@IAE_NXZ ENDP	; ioAccumulateBuff::CheckOwnerStateCheck
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
_TEXT	ENDS
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioAccumulateBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioAccumulateBuff@@UAEPAXI@Z PROC			; ioAccumulateBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioAccumulateBuff@@UAE@XZ ; ioAccumulateBuff::~ioAccumulateBuff
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioAccumulateBuff@@UAEPAXI@Z ENDP			; ioAccumulateBuff::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	?ReserveAddNewBuff@ioBaseChar@@QAEXABVioHashString@@00PAVioSkill@@_N@Z:PROC ; ioBaseChar::ReserveAddNewBuff
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
EXTRN	?CheckCallingAreaWeapon@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingAreaWeapon
EXTRN	?ProcessBuff@ioBuff@@UAEXM@Z:PROC		; ioBuff::ProcessBuff
EXTRN	?CheckCallingProcess@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingProcess
EXTRN	?CheckSwitchType@ioBuff@@IAE_NM@Z:PROC		; ioBuff::CheckSwitchType
EXTRN	?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ:PROC	; ioBuff::GetOwner
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioaccumulatebuff.cpp
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ProcessBuff@ioAccumulateBuff@@UAEXM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessBuff@ioAccumulateBuff@@UAEXM@Z$0
__ehfuncinfo$?ProcessBuff@ioAccumulateBuff@@UAEXM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ProcessBuff@ioAccumulateBuff@@UAEXM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?ProcessBuff@ioAccumulateBuff@@UAEXM@Z
_TEXT	SEGMENT
$T524685 = -28						; size = 16
__$EHRec$ = -12						; size = 12
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioAccumulateBuff@@UAEXM@Z PROC		; ioAccumulateBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 65   : {

  00000	6a 10		 push	 16			; 00000010H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?ProcessBuff@ioAccumulateBuff@@UAEXM@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 66   : 	ioBaseChar *pOwner = GetOwner();

  0000e	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  00013	8b f8		 mov	 edi, eax

; 67   : 	if( !pOwner )

  00015	33 db		 xor	 ebx, ebx

; 68   : 	{
; 69   : 		SetReserveEndBuff();

  00017	8b ce		 mov	 ecx, esi
  00019	3b fb		 cmp	 edi, ebx

; 70   : 		return;

  0001b	0f 84 c6 00 00
	00		 je	 $LN15@ProcessBuf

; 71   : 	}
; 72   : 
; 73   : 	if( CheckOwnerStateCheck() )

  00021	e8 00 00 00 00	 call	 ?CheckOwnerStateCheck@ioAccumulateBuff@@IAE_NXZ ; ioAccumulateBuff::CheckOwnerStateCheck
  00026	84 c0		 test	 al, al
  00028	0f 85 be 00 00
	00		 jne	 $LN1@ProcessBuf

; 74   : 		return;
; 75   : 
; 76   : 	switch( m_iOperationType )

  0002e	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  00034	2b c3		 sub	 eax, ebx
  00036	74 50		 je	 SHORT $LN2@ProcessBuf
  00038	48		 dec	 eax
  00039	74 39		 je	 SHORT $LN3@ProcessBuf
  0003b	48		 dec	 eax
  0003c	74 17		 je	 SHORT $LN6@ProcessBuf
  0003e	48		 dec	 eax
  0003f	75 4e		 jne	 SHORT $LN7@ProcessBuf

; 87   : 	case OT_DELAY:
; 88   : 		ProcessDelay( fTimePerSec );

  00041	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00046	8b 06		 mov	 eax, DWORD PTR [esi]
  00048	51		 push	 ecx
  00049	8b ce		 mov	 ecx, esi
  0004b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00050	ff 50 38	 call	 DWORD PTR [eax+56]

; 89   : 		break;

  00053	eb 3a		 jmp	 SHORT $LN7@ProcessBuf
$LN6@ProcessBuf:

; 77   : 	{
; 78   : 	case OT_SWITCH:
; 79   : 		if( !CheckSwitchType( fTimePerSec ) )

  00055	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  0005a	51		 push	 ecx
  0005b	8b ce		 mov	 ecx, esi
  0005d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00062	e8 00 00 00 00	 call	 ?CheckSwitchType@ioBuff@@IAE_NM@Z ; ioBuff::CheckSwitchType

; 80   : 		{
; 81   : 			SetReserveEndBuff();

  00067	8b ce		 mov	 ecx, esi
  00069	84 c0		 test	 al, al

; 82   : 			return;

  0006b	74 7a		 je	 SHORT $LN15@ProcessBuf

; 83   : 		}
; 84   : 
; 85   : 		CheckCallingProcess();

  0006d	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 86   : 		break;

  00072	eb 1b		 jmp	 SHORT $LN7@ProcessBuf
$LN3@ProcessBuf:

; 90   : 	case OT_ACTIVE:
; 91   : 		ioBuff::ProcessBuff( fTimePerSec );

  00074	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00079	51		 push	 ecx
  0007a	8b ce		 mov	 ecx, esi
  0007c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00081	e8 00 00 00 00	 call	 ?ProcessBuff@ioBuff@@UAEXM@Z ; ioBuff::ProcessBuff

; 92   : 		break;

  00086	eb 07		 jmp	 SHORT $LN7@ProcessBuf
$LN2@ProcessBuf:

; 93   : 	case OT_PASSIVE:
; 94   : 		CheckCallingAreaWeapon();

  00088	8b ce		 mov	 ecx, esi
  0008a	e8 00 00 00 00	 call	 ?CheckCallingAreaWeapon@ioBuff@@IAEXXZ ; ioBuff::CheckCallingAreaWeapon
$LN7@ProcessBuf:

; 95   : 		break;
; 96   : 	}
; 97   : 
; 98   : 	// Check Accumulate
; 99   : 	if( m_iAccumulateCnt >= m_iImmuneCnt && !m_bImmuneBuff )

  0008f	8b 86 6c 09 00
	00		 mov	 eax, DWORD PTR [esi+2412]
  00095	3b 86 70 09 00
	00		 cmp	 eax, DWORD PTR [esi+2416]
  0009b	7c 4f		 jl	 SHORT $LN1@ProcessBuf
  0009d	38 9e 84 09 00
	00		 cmp	 BYTE PTR [esi+2436], bl
  000a3	75 47		 jne	 SHORT $LN1@ProcessBuf

; 100  : 	{
; 101  : 		m_bImmuneBuff = true;
; 102  : 		pOwner->ReserveAddNewBuff( m_szImmuneBuff, m_CreateChar, "", NULL );

  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  000aa	8d 4d e4	 lea	 ecx, DWORD PTR $T524685[ebp]
  000ad	c6 86 84 09 00
	00 01		 mov	 BYTE PTR [esi+2436], 1
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  000ba	53		 push	 ebx
  000bb	53		 push	 ebx
  000bc	8d 45 e4	 lea	 eax, DWORD PTR $T524685[ebp]
  000bf	50		 push	 eax
  000c0	8d 86 88 02 00
	00		 lea	 eax, DWORD PTR [esi+648]
  000c6	50		 push	 eax
  000c7	8d 86 74 09 00
	00		 lea	 eax, DWORD PTR [esi+2420]
  000cd	50		 push	 eax
  000ce	8b cf		 mov	 ecx, edi
  000d0	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  000d3	e8 00 00 00 00	 call	 ?ReserveAddNewBuff@ioBaseChar@@QAEXABVioHashString@@00PAVioSkill@@_N@Z ; ioBaseChar::ReserveAddNewBuff
  000d8	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000dc	8d 4d e4	 lea	 ecx, DWORD PTR $T524685[ebp]
  000df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 103  : 		SetReserveEndBuff();

  000e5	8b ce		 mov	 ecx, esi
$LN15@ProcessBuf:
  000e7	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff
$LN1@ProcessBuf:

; 104  : 		return;
; 105  : 	}
; 106  : }

  000ec	e8 00 00 00 00	 call	 __EH_epilog3
  000f1	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ProcessBuff@ioAccumulateBuff@@UAEXM@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR $T524685[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?ProcessBuff@ioAccumulateBuff@@UAEXM@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ProcessBuff@ioAccumulateBuff@@UAEXM@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ProcessBuff@ioAccumulateBuff@@UAEXM@Z ENDP		; ioAccumulateBuff::ProcessBuff
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0L@@ioINILoader@@QAEHAAY0L@$$CBDH@Z ; ioINILoader::LoadInt_e<11>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadInt_e@$0L@@ioINILoader@@QAEHAAY0L@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 11
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0L@@ioINILoader@@QAEHAAY0L@$$CBDH@Z PROC	; ioINILoader::LoadInt_e<11>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 24 01 00
	00		 je	 $LN96@LoadInt_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 0d 01 00
	00		 je	 $LN95@LoadInt_e
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 f6 00 00
	00		 je	 $LN94@LoadInt_e
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 df 00 00
	00		 je	 $LN93@LoadInt_e
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 c8 00 00
	00		 je	 $LN92@LoadInt_e
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	0f 84 b1 00 00
	00		 je	 $LN91@LoadInt_e
  00075	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00078	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 9a 00 00
	00		 je	 $LN90@LoadInt_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 83 00 00
	00		 je	 $LN89@LoadInt_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	74 70		 je	 SHORT $LN88@LoadInt_e
  000a4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a7	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000aa	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ad	84 d2		 test	 dl, dl
  000af	74 5d		 je	 SHORT $LN87@LoadInt_e
  000b1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b4	80 78 0a 00	 cmp	 BYTE PTR [eax+10], 0
  000b8	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bb	0f 84 87 00 00
	00		 je	 $LN1@LoadInt_e
  000c1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c4	84 d2		 test	 dl, dl
  000c6	74 40		 je	 SHORT $LN85@LoadInt_e
  000c8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000cb	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000ce	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d1	84 d2		 test	 dl, dl
  000d3	74 2d		 je	 SHORT $LN84@LoadInt_e
  000d5	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d8	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000db	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000de	84 d2		 test	 dl, dl
  000e0	74 1a		 je	 SHORT $LN83@LoadInt_e
  000e2	8a 40 0e	 mov	 al, BYTE PTR [eax+14]
  000e5	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e8	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000eb	84 c0		 test	 al, al
  000ed	74 07		 je	 SHORT $LN82@LoadInt_e
  000ef	34 eb		 xor	 al, -21			; ffffffebH
  000f1	88 45 fa	 mov	 BYTE PTR __k$[ebp+14], al
  000f4	eb 52		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  000f6	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  000fa	eb 4c		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  000fc	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00100	eb 46		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  00102	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00106	eb 40		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  00108	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0010c	eb 3a		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  0010e	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00112	eb 34		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  00114	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00118	eb 2e		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  0011a	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0011e	eb 28		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  00120	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00124	eb 22		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  00126	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0012a	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  0012c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00130	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  00132	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00136	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  00138	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0013c	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  0013e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00142	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  00144	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  00148	6a 02		 push	 2
  0014a	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014d	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+10], 0
  00151	5a		 pop	 edx
$LL104@LoadInt_e:
  00152	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00158	83 c0 04	 add	 eax, 4
  0015b	4a		 dec	 edx
  0015c	75 f4		 jne	 SHORT $LL104@LoadInt_e
  0015e	6a 08		 push	 8
  00160	58		 pop	 eax
$LL101@LoadInt_e:
  00161	8b c8		 mov	 ecx, eax
  00163	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00169	79 05		 jns	 SHORT $LN111@LoadInt_e
  0016b	49		 dec	 ecx
  0016c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0016f	41		 inc	 ecx
$LN111@LoadInt_e:
  00170	b2 ed		 mov	 dl, -19			; ffffffedH
  00172	2a d1		 sub	 dl, cl
  00174	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  00178	40		 inc	 eax
  00179	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0017c	7c e3		 jl	 SHORT $LL101@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  0017e	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00181	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00184	50		 push	 eax
  00185	8b ce		 mov	 ecx, esi
  00187	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  0018d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00190	33 cd		 xor	 ecx, ebp
  00192	5e		 pop	 esi
  00193	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00198	c9		 leave
  00199	c2 08 00	 ret	 8
??$LoadInt_e@$0L@@ioINILoader@@QAEHAAY0L@$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<11>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0M@@ioINILoader@@QAEXAAY0M@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<12>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0M@@ioINILoader@@QAEXAAY0M@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -24					; size = 4
__k$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0M@@ioINILoader@@QAEXAAY0M@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<12>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 32 01 00
	00		 je	 $LN96@LoadString
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 1b 01 00
	00		 je	 $LN95@LoadString
  00039	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003c	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  0003f	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00042	84 d2		 test	 dl, dl
  00044	0f 84 04 01 00
	00		 je	 $LN94@LoadString
  0004a	b1 eb		 mov	 cl, -21			; ffffffebH
  0004c	32 d1		 xor	 dl, cl
  0004e	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 ec 00 00
	00		 je	 $LN93@LoadString
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 d5 00 00
	00		 je	 $LN92@LoadString
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 be 00 00
	00		 je	 $LN91@LoadString
  0007e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00081	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00084	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00087	84 d2		 test	 dl, dl
  00089	0f 84 a8 00 00
	00		 je	 $LN90@LoadString
  0008f	32 d1		 xor	 dl, cl
  00091	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 92 00 00
	00		 je	 $LN89@LoadString
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	74 7f		 je	 SHORT $LN88@LoadString
  000ac	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000af	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000b2	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b5	84 d2		 test	 dl, dl
  000b7	74 6c		 je	 SHORT $LN87@LoadString
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	74 5a		 je	 SHORT $LN86@LoadString
  000c6	32 d1		 xor	 dl, cl
  000c8	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000cc	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	0f 84 89 00 00
	00		 je	 $LN111@LoadString
  000d5	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d8	84 d2		 test	 dl, dl
  000da	74 3e		 je	 SHORT $LN84@LoadString
  000dc	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000df	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000e2	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000e5	84 d2		 test	 dl, dl
  000e7	74 2b		 je	 SHORT $LN83@LoadString
  000e9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ec	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000ef	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f2	84 d2		 test	 dl, dl
  000f4	74 19		 je	 SHORT $LN82@LoadString
  000f6	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000f9	32 d1		 xor	 dl, cl
  000fb	88 55 fa	 mov	 BYTE PTR __k$[ebp+14], dl
  000fe	84 c0		 test	 al, al
  00100	74 07		 je	 SHORT $LN81@LoadString
  00102	34 ea		 xor	 al, -22			; ffffffeaH
  00104	88 45 fb	 mov	 BYTE PTR __k$[ebp+15], al
  00107	eb 55		 jmp	 SHORT $LN111@LoadString
$LN81@LoadString:
  00109	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0010d	eb 4f		 jmp	 SHORT $LN111@LoadString
$LN82@LoadString:
  0010f	88 4d fa	 mov	 BYTE PTR __k$[ebp+14], cl
  00112	eb 4a		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  00114	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00118	eb 44		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  0011a	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0011e	eb 3e		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  00120	88 4d f6	 mov	 BYTE PTR __k$[ebp+10], cl
  00123	eb 39		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  00125	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00129	eb 33		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  0012b	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0012f	eb 2d		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  00131	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00135	eb 27		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  00137	88 4d f2	 mov	 BYTE PTR __k$[ebp+6], cl
  0013a	eb 22		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  0013c	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00140	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  00142	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00146	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  00148	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0014c	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  0014e	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00152	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  00154	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00158	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  0015a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  0015e	6a 02		 push	 2
  00160	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00163	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+11], 0
  00167	5a		 pop	 edx
$LL104@LoadString:
  00168	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0016e	83 c0 04	 add	 eax, 4
  00171	4a		 dec	 edx
  00172	75 f4		 jne	 SHORT $LL104@LoadString
  00174	6a 08		 push	 8
  00176	58		 pop	 eax
$LL101@LoadString:
  00177	8b c8		 mov	 ecx, eax
  00179	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0017f	79 05		 jns	 SHORT $LN112@LoadString
  00181	49		 dec	 ecx
  00182	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00185	41		 inc	 ecx
$LN112@LoadString:
  00186	b2 ed		 mov	 dl, -19			; ffffffedH
  00188	2a d1		 sub	 dl, cl
  0018a	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  0018e	40		 inc	 eax
  0018f	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00192	7c e3		 jl	 SHORT $LL101@LoadString

; 163  : 		LoadString(_k, d, b, i);

  00194	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00197	8b 4d e8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0019a	57		 push	 edi
  0019b	56		 push	 esi
  0019c	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0019f	50		 push	 eax
  001a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  001a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a9	5f		 pop	 edi
  001aa	33 cd		 xor	 ecx, ebp
  001ac	5e		 pop	 esi
  001ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b2	c9		 leave
  001b3	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0M@@ioINILoader@@QAEXAAY0M@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<12>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z ; ioINILoader::LoadBool_e<19>
EXTRN	__imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<19>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 cf 01 00
	00		 je	 $LN96@LoadBool_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 b8 01 00
	00		 je	 $LN95@LoadBool_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 a0 01 00
	00		 je	 $LN94@LoadBool_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 89 01 00
	00		 je	 $LN93@LoadBool_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 72 01 00
	00		 je	 $LN92@LoadBool_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 5c 01 00
	00		 je	 $LN91@LoadBool_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 46 01 00
	00		 je	 $LN90@LoadBool_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 2f 01 00
	00		 je	 $LN89@LoadBool_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 18 01 00
	00		 je	 $LN88@LoadBool_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 02 01 00
	00		 je	 $LN87@LoadBool_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 ec 00 00
	00		 je	 $LN86@LoadBool_e
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 d5 00 00
	00		 je	 $LN85@LoadBool_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 be 00 00
	00		 je	 $LN84@LoadBool_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 a8 00 00
	00		 je	 $LN83@LoadBool_e
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 92 00 00
	00		 je	 $LN82@LoadBool_e
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 7f		 je	 SHORT $LN81@LoadBool_e
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 6c		 je	 SHORT $LN80@LoadBool_e
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012c	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0012f	84 d2		 test	 dl, dl
  00131	74 5a		 je	 SHORT $LN79@LoadBool_e
  00133	32 d1		 xor	 dl, cl
  00135	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00139	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013c	0f 84 b1 00 00
	00		 je	 $LN1@LoadBool_e
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 3e		 je	 SHORT $LN77@LoadBool_e
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 2b		 je	 SHORT $LN76@LoadBool_e
  00156	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00159	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0015f	84 d2		 test	 dl, dl
  00161	74 19		 je	 SHORT $LN75@LoadBool_e
  00163	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  00166	32 d1		 xor	 dl, cl
  00168	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016b	84 c0		 test	 al, al
  0016d	74 07		 je	 SHORT $LN74@LoadBool_e
  0016f	34 eb		 xor	 al, -21			; ffffffebH
  00171	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  00174	eb 7d		 jmp	 SHORT $LN1@LoadBool_e
$LN74@LoadBool_e:
  00176	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0017a	eb 77		 jmp	 SHORT $LN1@LoadBool_e
$LN75@LoadBool_e:
  0017c	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  0017f	eb 72		 jmp	 SHORT $LN1@LoadBool_e
$LN76@LoadBool_e:
  00181	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00185	eb 6c		 jmp	 SHORT $LN1@LoadBool_e
$LN77@LoadBool_e:
  00187	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0018b	eb 66		 jmp	 SHORT $LN1@LoadBool_e
$LN79@LoadBool_e:
  0018d	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00190	eb 61		 jmp	 SHORT $LN1@LoadBool_e
$LN80@LoadBool_e:
  00192	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00196	eb 5b		 jmp	 SHORT $LN1@LoadBool_e
$LN81@LoadBool_e:
  00198	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0019c	eb 55		 jmp	 SHORT $LN1@LoadBool_e
$LN82@LoadBool_e:
  0019e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001a2	eb 4f		 jmp	 SHORT $LN1@LoadBool_e
$LN83@LoadBool_e:
  001a4	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001a7	eb 4a		 jmp	 SHORT $LN1@LoadBool_e
$LN84@LoadBool_e:
  001a9	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001ad	eb 44		 jmp	 SHORT $LN1@LoadBool_e
$LN85@LoadBool_e:
  001af	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001b3	eb 3e		 jmp	 SHORT $LN1@LoadBool_e
$LN86@LoadBool_e:
  001b5	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001b9	eb 38		 jmp	 SHORT $LN1@LoadBool_e
$LN87@LoadBool_e:
  001bb	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001be	eb 33		 jmp	 SHORT $LN1@LoadBool_e
$LN88@LoadBool_e:
  001c0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001c4	eb 2d		 jmp	 SHORT $LN1@LoadBool_e
$LN89@LoadBool_e:
  001c6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001ca	eb 27		 jmp	 SHORT $LN1@LoadBool_e
$LN90@LoadBool_e:
  001cc	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d0	eb 21		 jmp	 SHORT $LN1@LoadBool_e
$LN91@LoadBool_e:
  001d2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001d5	eb 1c		 jmp	 SHORT $LN1@LoadBool_e
$LN92@LoadBool_e:
  001d7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001db	eb 16		 jmp	 SHORT $LN1@LoadBool_e
$LN93@LoadBool_e:
  001dd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e1	eb 10		 jmp	 SHORT $LN1@LoadBool_e
$LN94@LoadBool_e:
  001e3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001e7	eb 0a		 jmp	 SHORT $LN1@LoadBool_e
$LN95@LoadBool_e:
  001e9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001ed	eb 04		 jmp	 SHORT $LN1@LoadBool_e
$LN96@LoadBool_e:
  001ef	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e:
  001f3	6a 04		 push	 4
  001f5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f8	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  001fc	5a		 pop	 edx
$LL104@LoadBool_e:
  001fd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00203	83 c0 04	 add	 eax, 4
  00206	4a		 dec	 edx
  00207	75 f4		 jne	 SHORT $LL104@LoadBool_e
  00209	6a 10		 push	 16			; 00000010H
  0020b	58		 pop	 eax
$LL101@LoadBool_e:
  0020c	8b c8		 mov	 ecx, eax
  0020e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00214	79 05		 jns	 SHORT $LN111@LoadBool_e
  00216	49		 dec	 ecx
  00217	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0021a	41		 inc	 ecx
$LN111@LoadBool_e:
  0021b	b2 ed		 mov	 dl, -19			; ffffffedH
  0021d	2a d1		 sub	 dl, cl
  0021f	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00223	40		 inc	 eax
  00224	83 f8 12	 cmp	 eax, 18			; 00000012H
  00227	7c e3		 jl	 SHORT $LL101@LoadBool_e

; 103  : 		return LoadBool(_k, b);

  00229	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  0022c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0022f	50		 push	 eax
  00230	8b ce		 mov	 ecx, esi
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  00238	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023b	33 cd		 xor	 ecx, ebp
  0023d	5e		 pop	 esi
  0023e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00243	c9		 leave
  00244	c2 08 00	 ret	 8
??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<19>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
EXTRN	_memset:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioaccumulatebuff.cpp
;	COMDAT ?LoadProperty@ioAccumulateBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_szBuf$ = -288						; size = 260
__k$525101 = -28					; size = 19
__k$524921 = -24					; size = 12
__k$524796 = -20					; size = 11
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioAccumulateBuff@@UAEXAAVioINILoader@@@Z PROC ; ioAccumulateBuff::LoadProperty, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 31   : 	ioBuff::LoadProperty( rkLoader );

  00019	57		 push	 edi
  0001a	8b f1		 mov	 esi, ecx
  0001c	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty

; 32   : 
; 33   : 	char szBuf[MAX_PATH] = "";

  00021	33 db		 xor	 ebx, ebx
  00023	68 03 01 00 00	 push	 259			; 00000103H
  00028	8d 85 e1 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp+1]
  0002e	53		 push	 ebx
  0002f	50		 push	 eax
  00030	88 9d e0 fe ff
	ff		 mov	 BYTE PTR _szBuf$[ebp], bl
  00036	e8 00 00 00 00	 call	 _memset
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 34   : 
; 35   : 	m_iImmuneCnt = rkLoader.LoadInt_e( "immune_cnt", 0 );

  0003e	6a 02		 push	 2
  00040	c7 45 ec 84 81
	86 9f		 mov	 DWORD PTR __k$524796[ebp], -1618574972 ; 9f868184H
  00047	c7 45 f0 83 89
	b4 89		 mov	 DWORD PTR __k$524796[ebp+4], -1984657021 ; 89b48983H
  0004e	66 c7 45 f4 83
	98		 mov	 WORD PTR __k$524796[ebp+8], 39043 ; 00009883H
  00054	8d 45 ec	 lea	 eax, DWORD PTR __k$524796[ebp]
  00057	88 5d f6	 mov	 BYTE PTR __k$524796[ebp+10], bl
  0005a	59		 pop	 ecx
$LL106@LoadProper:
  0005b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00061	83 c0 04	 add	 eax, 4
  00064	49		 dec	 ecx
  00065	75 f4		 jne	 SHORT $LL106@LoadProper
  00067	6a 08		 push	 8
  00069	58		 pop	 eax
$LL103@LoadProper:
  0006a	8b c8		 mov	 ecx, eax
  0006c	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00072	79 05		 jns	 SHORT $LN333@LoadProper
  00074	49		 dec	 ecx
  00075	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00078	41		 inc	 ecx
$LN333@LoadProper:
  00079	b2 ed		 mov	 dl, -19			; ffffffedH
  0007b	2a d1		 sub	 dl, cl
  0007d	30 54 05 ec	 xor	 BYTE PTR __k$524796[ebp+eax], dl
  00081	40		 inc	 eax
  00082	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00085	7c e3		 jl	 SHORT $LL103@LoadProper
  00087	53		 push	 ebx
  00088	8d 45 ec	 lea	 eax, DWORD PTR __k$524796[ebp]
  0008b	50		 push	 eax
  0008c	8b cf		 mov	 ecx, edi
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00094	6a 02		 push	 2
  00096	89 86 70 09 00
	00		 mov	 DWORD PTR [esi+2416], eax

; 36   : 
; 37   : 	rkLoader.LoadString_e( "immune_buff", "", szBuf, MAX_PATH );

  0009c	c7 45 e8 84 81
	86 9f		 mov	 DWORD PTR __k$524921[ebp], -1618574972 ; 9f868184H
  000a3	c7 45 ec 83 89
	b4 88		 mov	 DWORD PTR __k$524921[ebp+4], -2001434237 ; 88b48983H
  000aa	8d 45 e8	 lea	 eax, DWORD PTR __k$524921[ebp]
  000ad	c7 45 f0 98 8a
	8d 00		 mov	 DWORD PTR __k$524921[ebp+8], 9276056 ; 008d8a98H
  000b4	59		 pop	 ecx
$LL212@LoadProper:
  000b5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000bb	83 c0 04	 add	 eax, 4
  000be	49		 dec	 ecx
  000bf	75 f4		 jne	 SHORT $LL212@LoadProper
  000c1	6a 08		 push	 8
  000c3	58		 pop	 eax
$LL209@LoadProper:
  000c4	8b c8		 mov	 ecx, eax
  000c6	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000cc	79 05		 jns	 SHORT $LN334@LoadProper
  000ce	49		 dec	 ecx
  000cf	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000d2	41		 inc	 ecx
$LN334@LoadProper:
  000d3	b2 ed		 mov	 dl, -19			; ffffffedH
  000d5	2a d1		 sub	 dl, cl
  000d7	30 54 05 e8	 xor	 BYTE PTR __k$524921[ebp+eax], dl
  000db	40		 inc	 eax
  000dc	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  000df	7c e3		 jl	 SHORT $LL209@LoadProper
  000e1	68 04 01 00 00	 push	 260			; 00000104H
  000e6	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000ec	50		 push	 eax
  000ed	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  000f2	8d 45 e8	 lea	 eax, DWORD PTR __k$524921[ebp]
  000f5	50		 push	 eax
  000f6	8b cf		 mov	 ecx, edi
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 38   : 	m_szImmuneBuff = szBuf;

  000fe	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00104	50		 push	 eax
  00105	8d 8e 74 09 00
	00		 lea	 ecx, DWORD PTR [esi+2420]
  0010b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  00111	6a 04		 push	 4

; 39   : 
; 40   : 	m_bDisableDownState  = rkLoader.LoadBool_e( "disable_down_state", false );

  00113	c7 45 e4 89 85
	98 8b		 mov	 DWORD PTR __k$525101[ebp], -1952938615 ; 8b988589H
  0011a	c7 45 e8 8f 80
	8e b5		 mov	 DWORD PTR __k$525101[ebp+4], -1248952177 ; b58e808fH
  00121	c7 45 ec 89 83
	9c 84		 mov	 DWORD PTR __k$525101[ebp+8], -2070117495 ; 849c8389H
  00128	c7 45 f0 b2 9f
	9f 8b		 mov	 DWORD PTR __k$525101[ebp+12], -1952473166 ; 8b9f9fb2H
  0012f	66 c7 45 f4 99
	89		 mov	 WORD PTR __k$525101[ebp+16], 35225 ; 00008999H
  00135	8d 45 e4	 lea	 eax, DWORD PTR __k$525101[ebp]
  00138	88 5d f6	 mov	 BYTE PTR __k$525101[ebp+18], bl
  0013b	59		 pop	 ecx
$LL318@LoadProper:
  0013c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00142	83 c0 04	 add	 eax, 4
  00145	49		 dec	 ecx
  00146	75 f4		 jne	 SHORT $LL318@LoadProper
  00148	6a 10		 push	 16			; 00000010H
  0014a	58		 pop	 eax
$LL315@LoadProper:
  0014b	8b c8		 mov	 ecx, eax
  0014d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00153	79 05		 jns	 SHORT $LN335@LoadProper
  00155	49		 dec	 ecx
  00156	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00159	41		 inc	 ecx
$LN335@LoadProper:
  0015a	b2 ed		 mov	 dl, -19			; ffffffedH
  0015c	2a d1		 sub	 dl, cl
  0015e	30 54 05 e4	 xor	 BYTE PTR __k$525101[ebp+eax], dl
  00162	40		 inc	 eax
  00163	83 f8 12	 cmp	 eax, 18			; 00000012H
  00166	7c e3		 jl	 SHORT $LL315@LoadProper
  00168	53		 push	 ebx
  00169	8d 45 e4	 lea	 eax, DWORD PTR __k$525101[ebp]
  0016c	50		 push	 eax
  0016d	8b cf		 mov	 ecx, edi
  0016f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 41   : }

  00175	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00178	5f		 pop	 edi
  00179	88 86 85 09 00
	00		 mov	 BYTE PTR [esi+2437], al
  0017f	5e		 pop	 esi
  00180	33 cd		 xor	 ecx, ebp
  00182	5b		 pop	 ebx
  00183	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00188	c9		 leave
  00189	c2 04 00	 ret	 4
?LoadProperty@ioAccumulateBuff@@UAEXAAVioINILoader@@@Z ENDP ; ioAccumulateBuff::LoadProperty
_TEXT	ENDS
END
