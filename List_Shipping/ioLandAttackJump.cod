; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioLandAttackJump.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	??_7ioLandAttackJump@@6B@			; ioLandAttackJump::`vftable'
PUBLIC	??0ioLandAttackJump@@QAE@XZ			; ioLandAttackJump::ioLandAttackJump
PUBLIC	??_R4ioLandAttackJump@@6B@			; ioLandAttackJump::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioLandAttackJump@@@8			; ioLandAttackJump `RTTI Type Descriptor'
PUBLIC	??_R3ioLandAttackJump@@8			; ioLandAttackJump::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioLandAttackJump@@8			; ioLandAttackJump::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioLandAttackJump@@8		; ioLandAttackJump::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioExtendJump@@8			; ioExtendJump::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioExtendJump@@@8			; ioExtendJump `RTTI Type Descriptor'
PUBLIC	??_R3ioExtendJump@@8				; ioExtendJump::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioExtendJump@@8				; ioExtendJump::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioLandAttackJump@@UAEXAAVioINILoader@@@Z ; ioLandAttackJump::LoadProperty
PUBLIC	?Clone@ioLandAttackJump@@UAEPAVioExtendJump@@XZ	; ioLandAttackJump::Clone
PUBLIC	?GetType@ioLandAttackJump@@UBE?AW4JumpType@@XZ	; ioLandAttackJump::GetType
PUBLIC	?SetJumpping@ioLandAttackJump@@UAEXPAVioBaseChar@@_N@Z ; ioLandAttackJump::SetJumpping
PUBLIC	?GetChargingTime@ioLandAttackJump@@UAEKPAVioBaseChar@@@Z ; ioLandAttackJump::GetChargingTime
EXTRN	??0ioExtendJump@@QAE@XZ:PROC			; ioExtendJump::ioExtendJump
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?SetJumpState@ioExtendJump@@UAEXXZ:PROC		; ioExtendJump::SetJumpState
EXTRN	?ProcessJumpReady@ioExtendJump@@UAEXPAVioBaseChar@@@Z:PROC ; ioExtendJump::ProcessJumpReady
EXTRN	?SetJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@HM@Z:PROC ; ioExtendJump::SetJumpAttack
EXTRN	?ProcessJumpping@ioExtendJump@@UAEXPAVioBaseChar@@MM@Z:PROC ; ioExtendJump::ProcessJumpping
EXTRN	?ProcessLanding@ioExtendJump@@UAEXPAVioBaseChar@@@Z:PROC ; ioExtendJump::ProcessLanding
EXTRN	?ProcessJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@M@Z:PROC ; ioExtendJump::ProcessJumpAttack
EXTRN	?ProcessAimJump@ioExtendJump@@UAE_NPAVioBaseChar@@M@Z:PROC ; ioExtendJump::ProcessAimJump
EXTRN	?ApplyJump@ioExtendJump@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioExtendJump::ApplyJump
EXTRN	?OnEndExtendJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z:PROC ; ioExtendJump::OnEndExtendJump
EXTRN	?CheckComboJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@@Z:PROC ; ioExtendJump::CheckComboJumpAttack
EXTRN	?GetJumpAniDefenseWounded@ioExtendJump@@UAE?AVioHashString@@XZ:PROC ; ioExtendJump::GetJumpAniDefenseWounded
EXTRN	?GetJumpAniDefenseCriticalWounded@ioExtendJump@@UAE?AVioHashString@@XZ:PROC ; ioExtendJump::GetJumpAniDefenseCriticalWounded
EXTRN	?IsCanJumpingSkill@ioExtendJump@@UAE_NPAVioBaseChar@@@Z:PROC ; ioExtendJump::IsCanJumpingSkill
EXTRN	?GetExtraJumpSpeedRate@ioExtendJump@@UBEMABUD3DXVECTOR3@@ABUD3DXQUATERNION@@@Z:PROC ; ioExtendJump::GetExtraJumpSpeedRate
EXTRN	?SetLandingState@ioExtendJump@@UAEXPAVioBaseChar@@@Z:PROC ; ioExtendJump::SetLandingState
EXTRN	?IsCanJumpAttack@ioExtendJump@@UAE_NPAVioBaseChar@@@Z:PROC ; ioExtendJump::IsCanJumpAttack
EXTRN	?IsEnableLandAfterState@ioExtendJump@@UAE_NXZ:PROC ; ioExtendJump::IsEnableLandAfterState
EXTRN	?IsEnableJumpLandEndDash@ioExtendJump@@UAE_NXZ:PROC ; ioExtendJump::IsEnableJumpLandEndDash
EXTRN	?IsEnableJumpDash@ioExtendJump@@UAE_NPAVioBaseChar@@@Z:PROC ; ioExtendJump::IsEnableJumpDash
EXTRN	?GetLandAfterAni@ioExtendJump@@UAEABVioHashString@@_N@Z:PROC ; ioExtendJump::GetLandAfterAni
EXTRN	?GetLandAfterAniRate@ioExtendJump@@UAEM_N@Z:PROC ; ioExtendJump::GetLandAfterAniRate
EXTRN	?SetNextJumpItemState@ioExtendJump@@UAEXPAVioBaseChar@@0_NW4ChangeNextItemType@@PAVioWeapon@@M@Z:PROC ; ioExtendJump::SetNextJumpItemState
EXTRN	?SetExtraJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z:PROC ; ioExtendJump::SetExtraJump
EXTRN	?ProcessExtraJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z:PROC ; ioExtendJump::ProcessExtraJump
EXTRN	?ClearAirJump@ioExtendJump@@MAEXXZ:PROC		; ioExtendJump::ClearAirJump
EXTRN	?SetAirJump@ioExtendJump@@MAEXPAVioBaseChar@@HM@Z:PROC ; ioExtendJump::SetAirJump
EXTRN	?CheckAirJump@ioExtendJump@@MAEXPAVioBaseChar@@@Z:PROC ; ioExtendJump::CheckAirJump
EXTRN	?CheckCanUseBuffAirDash@ioExtendJump@@UAE_NXZ:PROC ; ioExtendJump::CheckCanUseBuffAirDash
EXTRN	?CheckKeyReserveTime@ioExtendJump@@MAEMPAVioBaseChar@@HMK@Z:PROC ; ioExtendJump::CheckKeyReserveTime
EXTRN	?CheckKeyReserve@ioExtendJump@@MAEXPAVioBaseChar@@@Z:PROC ; ioExtendJump::CheckKeyReserve
EXTRN	?CheckUseExtendJump@ioExtendJump@@UAE_NPAVioBaseChar@@@Z:PROC ; ioExtendJump::CheckUseExtendJump
EXTRN	?IsBuffFlyChange@ioExtendJump@@UAE_NPAVioBaseChar@@@Z:PROC ; ioExtendJump::IsBuffFlyChange
EXTRN	?IsNoProcessMove@ioExtendJump@@UAE_NXZ:PROC	; ioExtendJump::IsNoProcessMove
EXTRN	??_EioLandAttackJump@@UAEPAXI@Z:PROC		; ioLandAttackJump::`vector deleting destructor'
;	COMDAT ??_R2ioExtendJump@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iolandattackjump.cpp
rdata$r	SEGMENT
??_R2ioExtendJump@@8 DD FLAT:??_R1A@?0A@EA@ioExtendJump@@8 ; ioExtendJump::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioExtendJump@@8
rdata$r	SEGMENT
??_R3ioExtendJump@@8 DD 00H				; ioExtendJump::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioExtendJump@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioExtendJump@@@8
_DATA	SEGMENT
??_R0?AVioExtendJump@@@8 DD FLAT:??_7type_info@@6B@	; ioExtendJump `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioExtendJump@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioExtendJump@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioExtendJump@@8 DD FLAT:??_R0?AVioExtendJump@@@8 ; ioExtendJump::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioExtendJump@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioLandAttackJump@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioLandAttackJump@@8 DD FLAT:??_R0?AVioLandAttackJump@@@8 ; ioLandAttackJump::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioLandAttackJump@@8
rdata$r	ENDS
;	COMDAT ??_R2ioLandAttackJump@@8
rdata$r	SEGMENT
??_R2ioLandAttackJump@@8 DD FLAT:??_R1A@?0A@EA@ioLandAttackJump@@8 ; ioLandAttackJump::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioExtendJump@@8
rdata$r	ENDS
;	COMDAT ??_R3ioLandAttackJump@@8
rdata$r	SEGMENT
??_R3ioLandAttackJump@@8 DD 00H				; ioLandAttackJump::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioLandAttackJump@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioLandAttackJump@@@8
_DATA	SEGMENT
??_R0?AVioLandAttackJump@@@8 DD FLAT:??_7type_info@@6B@	; ioLandAttackJump `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioLandAttackJump@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioLandAttackJump@@6B@
rdata$r	SEGMENT
??_R4ioLandAttackJump@@6B@ DD 00H			; ioLandAttackJump::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioLandAttackJump@@@8
	DD	FLAT:??_R3ioLandAttackJump@@8
rdata$r	ENDS
;	COMDAT ??_7ioLandAttackJump@@6B@
CONST	SEGMENT
??_7ioLandAttackJump@@6B@ DD FLAT:??_R4ioLandAttackJump@@6B@ ; ioLandAttackJump::`vftable'
	DD	FLAT:?LoadProperty@ioLandAttackJump@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioLandAttackJump@@UAEPAVioExtendJump@@XZ
	DD	FLAT:?GetType@ioLandAttackJump@@UBE?AW4JumpType@@XZ
	DD	FLAT:?SetJumpState@ioExtendJump@@UAEXXZ
	DD	FLAT:?ProcessJumpReady@ioExtendJump@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetJumpping@ioLandAttackJump@@UAEXPAVioBaseChar@@_N@Z
	DD	FLAT:?SetJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@HM@Z
	DD	FLAT:?ProcessJumpping@ioExtendJump@@UAEXPAVioBaseChar@@MM@Z
	DD	FLAT:?ProcessLanding@ioExtendJump@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@M@Z
	DD	FLAT:?ProcessAimJump@ioExtendJump@@UAE_NPAVioBaseChar@@M@Z
	DD	FLAT:?ApplyJump@ioExtendJump@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?OnEndExtendJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckComboJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?GetChargingTime@ioLandAttackJump@@UAEKPAVioBaseChar@@@Z
	DD	FLAT:?GetJumpAniDefenseWounded@ioExtendJump@@UAE?AVioHashString@@XZ
	DD	FLAT:?GetJumpAniDefenseCriticalWounded@ioExtendJump@@UAE?AVioHashString@@XZ
	DD	FLAT:?IsCanJumpingSkill@ioExtendJump@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetExtraJumpSpeedRate@ioExtendJump@@UBEMABUD3DXVECTOR3@@ABUD3DXQUATERNION@@@Z
	DD	FLAT:?SetLandingState@ioExtendJump@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsCanJumpAttack@ioExtendJump@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableLandAfterState@ioExtendJump@@UAE_NXZ
	DD	FLAT:?IsEnableJumpLandEndDash@ioExtendJump@@UAE_NXZ
	DD	FLAT:?IsEnableJumpDash@ioExtendJump@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetLandAfterAni@ioExtendJump@@UAEABVioHashString@@_N@Z
	DD	FLAT:?GetLandAfterAniRate@ioExtendJump@@UAEM_N@Z
	DD	FLAT:?SetNextJumpItemState@ioExtendJump@@UAEXPAVioBaseChar@@0_NW4ChangeNextItemType@@PAVioWeapon@@M@Z
	DD	FLAT:?SetExtraJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessExtraJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ClearAirJump@ioExtendJump@@MAEXXZ
	DD	FLAT:?SetAirJump@ioExtendJump@@MAEXPAVioBaseChar@@HM@Z
	DD	FLAT:?CheckAirJump@ioExtendJump@@MAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckCanUseBuffAirDash@ioExtendJump@@UAE_NXZ
	DD	FLAT:?CheckKeyReserveTime@ioExtendJump@@MAEMPAVioBaseChar@@HMK@Z
	DD	FLAT:?CheckKeyReserve@ioExtendJump@@MAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckUseExtendJump@ioExtendJump@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsBuffFlyChange@ioExtendJump@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsNoProcessMove@ioExtendJump@@UAE_NXZ
	DD	FLAT:??_EioLandAttackJump@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0ioLandAttackJump@@QAE@XZ
_TEXT	SEGMENT
??0ioLandAttackJump@@QAE@XZ PROC			; ioLandAttackJump::ioLandAttackJump, COMDAT
; _this$ = ecx

; 7    : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0ioExtendJump@@QAE@XZ	; ioExtendJump::ioExtendJump
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioLandAttackJump@@6B@

; 8    : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0ioLandAttackJump@@QAE@XZ ENDP			; ioLandAttackJump::ioLandAttackJump
_TEXT	ENDS
PUBLIC	??0ioLandAttackJump@@QAE@ABV0@@Z		; ioLandAttackJump::ioLandAttackJump
EXTRN	??0ioExtendJump@@QAE@ABV0@@Z:PROC		; ioExtendJump::ioExtendJump
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
;	COMDAT ??0ioLandAttackJump@@QAE@ABV0@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??0ioLandAttackJump@@QAE@ABV0@@Z PROC			; ioLandAttackJump::ioLandAttackJump, COMDAT
; _this$ = ecx

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??0ioExtendJump@@QAE@ABV0@@Z ; ioExtendJump::ioExtendJump
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioLandAttackJump@@6B@
  00016	8a 87 24 01 00
	00		 mov	 al, BYTE PTR [edi+292]
  0001c	88 86 24 01 00
	00		 mov	 BYTE PTR [esi+292], al
  00022	d9 87 28 01 00
	00		 fld	 DWORD PTR [edi+296]
  00028	d9 9e 28 01 00
	00		 fstp	 DWORD PTR [esi+296]
  0002e	8b 87 2c 01 00
	00		 mov	 eax, DWORD PTR [edi+300]
  00034	89 86 2c 01 00
	00		 mov	 DWORD PTR [esi+300], eax
  0003a	5f		 pop	 edi

; 16   : }

  0003b	8b c6		 mov	 eax, esi
  0003d	5e		 pop	 esi
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
??0ioLandAttackJump@@QAE@ABV0@@Z ENDP			; ioLandAttackJump::ioLandAttackJump
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioLandAttackJump@@UAEPAVioExtendJump@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioLandAttackJump@@UAEPAVioExtendJump@@XZ$0
__ehfuncinfo$?Clone@ioLandAttackJump@@UAEPAVioExtendJump@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioLandAttackJump@@UAEPAVioExtendJump@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioLandAttackJump@@UAEPAVioExtendJump@@XZ
_TEXT	SEGMENT
$T524557 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioLandAttackJump@@UAEPAVioExtendJump@@XZ PROC	; ioLandAttackJump::Clone, COMDAT
; _this$ = ecx

; 19   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioLandAttackJump@@UAEPAVioExtendJump@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 20   : 	return new ioLandAttackJump( *this );

  0000e	68 30 01 00 00	 push	 304			; 00000130H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T524557[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioLandAttackJump@@QAE@ABV0@@Z ; ioLandAttackJump::ioLandAttackJump
$LN3@Clone:

; 21   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioLandAttackJump@@UAEPAVioExtendJump@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T524557[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioLandAttackJump@@UAEPAVioExtendJump@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioLandAttackJump@@UAEPAVioExtendJump@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioLandAttackJump@@UAEPAVioExtendJump@@XZ ENDP	; ioLandAttackJump::Clone
PUBLIC	??1ioLandAttackJump@@UAE@XZ			; ioLandAttackJump::~ioLandAttackJump
EXTRN	??1ioExtendJump@@UAE@XZ:PROC			; ioExtendJump::~ioExtendJump
; Function compile flags: /Ogsp
;	COMDAT ??1ioLandAttackJump@@UAE@XZ
_TEXT	SEGMENT
??1ioLandAttackJump@@UAE@XZ PROC			; ioLandAttackJump::~ioLandAttackJump, COMDAT
; _this$ = ecx

; 24   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioLandAttackJump@@6B@

; 25   : }

  00006	e9 00 00 00 00	 jmp	 ??1ioExtendJump@@UAE@XZ	; ioExtendJump::~ioExtendJump
??1ioLandAttackJump@@UAE@XZ ENDP			; ioLandAttackJump::~ioLandAttackJump
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetType@ioLandAttackJump@@UBE?AW4JumpType@@XZ
_TEXT	SEGMENT
?GetType@ioLandAttackJump@@UBE?AW4JumpType@@XZ PROC	; ioLandAttackJump::GetType, COMDAT
; _this$ = ecx

; 29   : 	return JT_LAND_ATTACK_JUMP;

  00000	6a 08		 push	 8
  00002	58		 pop	 eax

; 30   : }

  00003	c3		 ret	 0
?GetType@ioLandAttackJump@@UBE?AW4JumpType@@XZ ENDP	; ioLandAttackJump::GetType
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	?ActionHighJump@ioTutorialManager@@QAEXXZ:PROC	; ioTutorialManager::ActionHighJump
EXTRN	?GetSingleton@ioTutorialManager@@SAAAV1@XZ:PROC	; ioTutorialManager::GetSingleton
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	?SetChangeJumpMotion@ioBaseChar@@QAEX_NABVioHashString@@11M@Z:PROC ; ioBaseChar::SetChangeJumpMotion
EXTRN	?SetEnableChangeTeam@ioBaseChar@@QAEX_N@Z:PROC	; ioBaseChar::SetEnableChangeTeam
EXTRN	?SetEnableHide@ioBaseChar@@QAEX_NVioHashString@@1@Z:PROC ; ioBaseChar::SetEnableHide
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
EXTRN	?SetJumpPower@ioBaseChar@@QAEXM@Z:PROC		; ioBaseChar::SetJumpPower
EXTRN	?GetJumpPower@ioBaseChar@@QBEMXZ:PROC		; ioBaseChar::GetJumpPower
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetJumpping@ioLandAttackJump@@UAEXPAVioBaseChar@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetJumpping@ioLandAttackJump@@UAEXPAVioBaseChar@@_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SetJumpping@ioLandAttackJump@@UAEXPAVioBaseChar@@_N@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?SetJumpping@ioLandAttackJump@@UAEXPAVioBaseChar@@_N@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?SetJumpping@ioLandAttackJump@@UAEXPAVioBaseChar@@_N@Z$4
__ehfuncinfo$?SetJumpping@ioLandAttackJump@@UAEXPAVioBaseChar@@_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?SetJumpping@ioLandAttackJump@@UAEXPAVioBaseChar@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?SetJumpping@ioLandAttackJump@@UAEXPAVioBaseChar@@_N@Z
_TEXT	SEGMENT
$T524585 = -60						; size = 16
$T524586 = -44						; size = 16
$T524587 = -28						; size = 16
__$EHRec$ = -12						; size = 12
$T524584 = 8						; size = 4
_pOwner$ = 8						; size = 4
$T524583 = 12						; size = 4
_fJumpPower$523785 = 12					; size = 4
_bFullTime$ = 12					; size = 1
?SetJumpping@ioLandAttackJump@@UAEXPAVioBaseChar@@_N@Z PROC ; ioLandAttackJump::SetJumpping, COMDAT
; _this$ = ecx

; 42   : {

  00000	6a 30		 push	 48			; 00000030H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?SetJumpping@ioLandAttackJump@@UAEXPAVioBaseChar@@_N@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 43   : 	m_bUseExtendJump = false;
; 44   : 
; 45   : 	if( m_bEnableHighJump && bFullTime )

  0000e	80 be 24 01 00
	00 00		 cmp	 BYTE PTR [esi+292], 0
  00015	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
  00019	0f 84 ea 00 00
	00		 je	 $LN1@SetJumppin
  0001f	80 7d 0c 00	 cmp	 BYTE PTR _bFullTime$[ebp], 0
  00023	0f 84 e0 00 00
	00		 je	 $LN1@SetJumppin

; 46   : 	{
; 47   : 		m_bUseExtendJump = true;
; 48   : 
; 49   : 		float fJumpPower = pOwner->GetJumpPower();

  00029	8b 5d 08	 mov	 ebx, DWORD PTR _pOwner$[ebp]
  0002c	8b cb		 mov	 ecx, ebx
  0002e	c6 46 10 01	 mov	 BYTE PTR [esi+16], 1
  00032	e8 00 00 00 00	 call	 ?GetJumpPower@ioBaseChar@@QBEMXZ ; ioBaseChar::GetJumpPower
  00037	d9 5d 0c	 fstp	 DWORD PTR _fJumpPower$523785[ebp]

; 50   : 		fJumpPower *= m_fExtraJumpPowerRate;

  0003a	f3 0f 10 86 28
	01 00 00	 movss	 xmm0, DWORD PTR [esi+296]
  00042	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fJumpPower$523785[ebp]
  00047	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004a	0f 5a c9	 cvtps2pd xmm1, xmm1

; 51   : 		pOwner->SetJumpPower( fJumpPower );

  0004d	51		 push	 ecx
  0004e	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00052	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00056	8b cb		 mov	 ecx, ebx
  00058	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005d	e8 00 00 00 00	 call	 ?SetJumpPower@ioBaseChar@@QAEXM@Z ; ioBaseChar::SetJumpPower

; 52   : 
; 53   : 		pOwner->SetEnableHide( false );

  00062	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  00068	83 ec 10	 sub	 esp, 16			; 00000010H
  0006b	8b cc		 mov	 ecx, esp
  0006d	89 65 0c	 mov	 DWORD PTR $T524583[ebp], esp
  00070	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00075	57		 push	 edi
  00076	ff d6		 call	 esi
  00078	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0007c	83 ec 10	 sub	 esp, 16			; 00000010H
  0007f	8b cc		 mov	 ecx, esp
  00081	89 65 08	 mov	 DWORD PTR $T524584[ebp], esp
  00084	57		 push	 edi
  00085	ff d6		 call	 esi
  00087	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0008b	6a 00		 push	 0
  0008d	8b cb		 mov	 ecx, ebx
  0008f	e8 00 00 00 00	 call	 ?SetEnableHide@ioBaseChar@@QAEX_NVioHashString@@1@Z ; ioBaseChar::SetEnableHide

; 54   : 		pOwner->SetEnableChangeTeam( false );

  00094	6a 00		 push	 0
  00096	8b cb		 mov	 ecx, ebx
  00098	e8 00 00 00 00	 call	 ?SetEnableChangeTeam@ioBaseChar@@QAEX_N@Z ; ioBaseChar::SetEnableChangeTeam

; 55   : 		pOwner->SetChangeJumpMotion( false, "", "", "", 0.0f );

  0009d	57		 push	 edi
  0009e	8d 4d c4	 lea	 ecx, DWORD PTR $T524585[ebp]
  000a1	ff d6		 call	 esi
  000a3	57		 push	 edi
  000a4	8d 4d d4	 lea	 ecx, DWORD PTR $T524586[ebp]
  000a7	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000ae	ff d6		 call	 esi
  000b0	57		 push	 edi
  000b1	8d 4d e4	 lea	 ecx, DWORD PTR $T524587[ebp]
  000b4	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000b8	ff d6		 call	 esi
  000ba	0f 57 c0	 xorps	 xmm0, xmm0
  000bd	51		 push	 ecx
  000be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c3	8d 45 c4	 lea	 eax, DWORD PTR $T524585[ebp]
  000c6	50		 push	 eax
  000c7	8d 45 d4	 lea	 eax, DWORD PTR $T524586[ebp]
  000ca	50		 push	 eax
  000cb	8d 45 e4	 lea	 eax, DWORD PTR $T524587[ebp]
  000ce	50		 push	 eax
  000cf	6a 00		 push	 0
  000d1	8b cb		 mov	 ecx, ebx
  000d3	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000d7	e8 00 00 00 00	 call	 ?SetChangeJumpMotion@ioBaseChar@@QAEX_NABVioHashString@@11M@Z ; ioBaseChar::SetChangeJumpMotion
  000dc	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  000e2	8d 4d e4	 lea	 ecx, DWORD PTR $T524587[ebp]
  000e5	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000e9	ff d6		 call	 esi
  000eb	8d 4d d4	 lea	 ecx, DWORD PTR $T524586[ebp]
  000ee	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000f2	ff d6		 call	 esi
  000f4	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000f8	8d 4d c4	 lea	 ecx, DWORD PTR $T524585[ebp]
  000fb	ff d6		 call	 esi

; 56   : 
; 57   : 		g_TutorialMgr.ActionHighJump();

  000fd	e8 00 00 00 00	 call	 ?GetSingleton@ioTutorialManager@@SAAAV1@XZ ; ioTutorialManager::GetSingleton
  00102	8b c8		 mov	 ecx, eax
  00104	e8 00 00 00 00	 call	 ?ActionHighJump@ioTutorialManager@@QAEXXZ ; ioTutorialManager::ActionHighJump
$LN1@SetJumppin:

; 58   : 	}
; 59   : }

  00109	e8 00 00 00 00	 call	 __EH_epilog3
  0010e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetJumpping@ioLandAttackJump@@UAEXPAVioBaseChar@@_N@Z$0:
  00000	8b 4d 0c	 mov	 ecx, DWORD PTR $T524583[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?SetJumpping@ioLandAttackJump@@UAEXPAVioBaseChar@@_N@Z$2:
  00009	8d 4d c4	 lea	 ecx, DWORD PTR $T524585[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?SetJumpping@ioLandAttackJump@@UAEXPAVioBaseChar@@_N@Z$3:
  00012	8d 4d d4	 lea	 ecx, DWORD PTR $T524586[ebp]
  00015	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?SetJumpping@ioLandAttackJump@@UAEXPAVioBaseChar@@_N@Z$4:
  0001b	8d 4d e4	 lea	 ecx, DWORD PTR $T524587[ebp]
  0001e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?SetJumpping@ioLandAttackJump@@UAEXPAVioBaseChar@@_N@Z:
  00024	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00028	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002b	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetJumpping@ioLandAttackJump@@UAEXPAVioBaseChar@@_N@Z
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetJumpping@ioLandAttackJump@@UAEXPAVioBaseChar@@_N@Z ENDP ; ioLandAttackJump::SetJumpping
; Function compile flags: /Ogsp
;	COMDAT ?GetChargingTime@ioLandAttackJump@@UAEKPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?GetChargingTime@ioLandAttackJump@@UAEKPAVioBaseChar@@@Z PROC ; ioLandAttackJump::GetChargingTime, COMDAT
; _this$ = ecx

; 63   : 	if( m_bEnableHighJump )

  00000	80 b9 24 01 00
	00 00		 cmp	 BYTE PTR [ecx+292], 0
  00007	74 08		 je	 SHORT $LN1@GetChargin

; 64   : 		return m_dwJumpChargeTime;

  00009	8b 81 2c 01 00
	00		 mov	 eax, DWORD PTR [ecx+300]
  0000f	eb 02		 jmp	 SHORT $LN2@GetChargin
$LN1@GetChargin:

; 65   : 
; 66   : 	return 0;

  00011	33 c0		 xor	 eax, eax
$LN2@GetChargin:

; 67   : }

  00013	c2 04 00	 ret	 4
?GetChargingTime@ioLandAttackJump@@UAEKPAVioBaseChar@@@Z ENDP ; ioLandAttackJump::GetChargingTime
_TEXT	ENDS
PUBLIC	?IsUsedHighJump@ioLandAttackJump@@QAE_NXZ	; ioLandAttackJump::IsUsedHighJump
; Function compile flags: /Ogsp
;	COMDAT ?IsUsedHighJump@ioLandAttackJump@@QAE_NXZ
_TEXT	SEGMENT
?IsUsedHighJump@ioLandAttackJump@@QAE_NXZ PROC		; ioLandAttackJump::IsUsedHighJump, COMDAT
; _this$ = ecx

; 71   : 	if( m_bEnableHighJump && m_bUseExtendJump )

  00000	80 b9 24 01 00
	00 00		 cmp	 BYTE PTR [ecx+292], 0
  00007	74 09		 je	 SHORT $LN1@IsUsedHigh
  00009	80 79 10 00	 cmp	 BYTE PTR [ecx+16], 0
  0000d	74 03		 je	 SHORT $LN1@IsUsedHigh

; 72   : 		return true;

  0000f	b0 01		 mov	 al, 1

; 75   : }

  00011	c3		 ret	 0
$LN1@IsUsedHigh:

; 73   : 
; 74   : 	return false;

  00012	32 c0		 xor	 al, al

; 75   : }

  00014	c3		 ret	 0
?IsUsedHighJump@ioLandAttackJump@@QAE_NXZ ENDP		; ioLandAttackJump::IsUsedHighJump
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioLandAttackJump@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioLandAttackJump@@UAEPAXI@Z PROC			; ioLandAttackJump::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioLandAttackJump@@6B@
  0000c	e8 00 00 00 00	 call	 ??1ioExtendJump@@UAE@XZ	; ioExtendJump::~ioExtendJump
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 07		 je	 SHORT $LN1@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	59		 pop	 ecx
$LN1@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??_GioLandAttackJump@@UAEPAXI@Z ENDP			; ioLandAttackJump::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BB@@ioINILoader@@QAE_NAAY0BB@$$CBD_N@Z ; ioINILoader::LoadBool_e<17>
EXTRN	__imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadBool_e@$0BB@@ioINILoader@@QAE_NAAY0BB@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -28						; size = 17
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BB@@ioINILoader@@QAE_NAAY0BB@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<17>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 a7 01 00
	00		 je	 $LN96@LoadBool_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 90 01 00
	00		 je	 $LN95@LoadBool_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 78 01 00
	00		 je	 $LN94@LoadBool_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 61 01 00
	00		 je	 $LN93@LoadBool_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 4a 01 00
	00		 je	 $LN92@LoadBool_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 34 01 00
	00		 je	 $LN91@LoadBool_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 1e 01 00
	00		 je	 $LN90@LoadBool_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 07 01 00
	00		 je	 $LN89@LoadBool_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 f0 00 00
	00		 je	 $LN88@LoadBool_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 da 00 00
	00		 je	 $LN87@LoadBool_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 c4 00 00
	00		 je	 $LN86@LoadBool_e
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 ad 00 00
	00		 je	 $LN85@LoadBool_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 96 00 00
	00		 je	 $LN84@LoadBool_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 80 00 00
	00		 je	 $LN83@LoadBool_e
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	74 6e		 je	 SHORT $LN82@LoadBool_e
  00108	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010b	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0010e	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00111	84 d2		 test	 dl, dl
  00113	74 5b		 je	 SHORT $LN81@LoadBool_e
  00115	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00118	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	0f 84 a6 00 00
	00		 je	 $LN1@LoadBool_e
  00125	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00128	84 d2		 test	 dl, dl
  0012a	74 3f		 je	 SHORT $LN79@LoadBool_e
  0012c	32 d1		 xor	 dl, cl
  0012e	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00131	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00134	84 d2		 test	 dl, dl
  00136	74 2d		 je	 SHORT $LN78@LoadBool_e
  00138	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0013b	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0013e	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00141	84 d2		 test	 dl, dl
  00143	74 1a		 je	 SHORT $LN77@LoadBool_e
  00145	8a 40 14	 mov	 al, BYTE PTR [eax+20]
  00148	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014b	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014e	84 c0		 test	 al, al
  00150	74 07		 je	 SHORT $LN76@LoadBool_e
  00152	34 ed		 xor	 al, -19			; ffffffedH
  00154	88 45 f8	 mov	 BYTE PTR __k$[ebp+20], al
  00157	eb 72		 jmp	 SHORT $LN1@LoadBool_e
$LN76@LoadBool_e:
  00159	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0015d	eb 6c		 jmp	 SHORT $LN1@LoadBool_e
$LN77@LoadBool_e:
  0015f	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00163	eb 66		 jmp	 SHORT $LN1@LoadBool_e
$LN78@LoadBool_e:
  00165	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00169	eb 60		 jmp	 SHORT $LN1@LoadBool_e
$LN79@LoadBool_e:
  0016b	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  0016e	eb 5b		 jmp	 SHORT $LN1@LoadBool_e
$LN81@LoadBool_e:
  00170	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00174	eb 55		 jmp	 SHORT $LN1@LoadBool_e
$LN82@LoadBool_e:
  00176	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0017a	eb 4f		 jmp	 SHORT $LN1@LoadBool_e
$LN83@LoadBool_e:
  0017c	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  0017f	eb 4a		 jmp	 SHORT $LN1@LoadBool_e
$LN84@LoadBool_e:
  00181	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00185	eb 44		 jmp	 SHORT $LN1@LoadBool_e
$LN85@LoadBool_e:
  00187	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0018b	eb 3e		 jmp	 SHORT $LN1@LoadBool_e
$LN86@LoadBool_e:
  0018d	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00191	eb 38		 jmp	 SHORT $LN1@LoadBool_e
$LN87@LoadBool_e:
  00193	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  00196	eb 33		 jmp	 SHORT $LN1@LoadBool_e
$LN88@LoadBool_e:
  00198	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0019c	eb 2d		 jmp	 SHORT $LN1@LoadBool_e
$LN89@LoadBool_e:
  0019e	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001a2	eb 27		 jmp	 SHORT $LN1@LoadBool_e
$LN90@LoadBool_e:
  001a4	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001a8	eb 21		 jmp	 SHORT $LN1@LoadBool_e
$LN91@LoadBool_e:
  001aa	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001ad	eb 1c		 jmp	 SHORT $LN1@LoadBool_e
$LN92@LoadBool_e:
  001af	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001b3	eb 16		 jmp	 SHORT $LN1@LoadBool_e
$LN93@LoadBool_e:
  001b5	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001b9	eb 10		 jmp	 SHORT $LN1@LoadBool_e
$LN94@LoadBool_e:
  001bb	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001bf	eb 0a		 jmp	 SHORT $LN1@LoadBool_e
$LN95@LoadBool_e:
  001c1	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001c5	eb 04		 jmp	 SHORT $LN1@LoadBool_e
$LN96@LoadBool_e:
  001c7	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e:
  001cb	6a 04		 push	 4
  001cd	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001d0	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+16], 0
  001d4	5a		 pop	 edx
$LL104@LoadBool_e:
  001d5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001db	83 c0 04	 add	 eax, 4
  001de	4a		 dec	 edx
  001df	75 f4		 jne	 SHORT $LL104@LoadBool_e

; 103  : 		return LoadBool(_k, b);

  001e1	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  001e4	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001e7	50		 push	 eax
  001e8	8b ce		 mov	 ecx, esi
  001ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  001f0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f3	33 cd		 xor	 ecx, ebp
  001f5	5e		 pop	 esi
  001f6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fb	c9		 leave
  001fc	c2 08 00	 ret	 8
??$LoadBool_e@$0BB@@ioINILoader@@QAE_NAAY0BB@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<17>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BG@@ioINILoader@@QAEMAAY0BG@$$CBDM@Z ; ioINILoader::LoadFloat_e<22>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BG@@ioINILoader@@QAEMAAY0BG@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -32						; size = 22
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BG@@ioINILoader@@QAEMAAY0BG@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<22>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 15 02 00
	00		 je	 $LN96@LoadFloat_
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 fe 01 00
	00		 je	 $LN95@LoadFloat_
  00032	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00035	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 e7 01 00
	00		 je	 $LN94@LoadFloat_
  00043	b1 eb		 mov	 cl, -21			; ffffffebH
  00045	32 d1		 xor	 dl, cl
  00047	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 cf 01 00
	00		 je	 $LN93@LoadFloat_
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 b7 01 00
	00		 je	 $LN92@LoadFloat_
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 a0 01 00
	00		 je	 $LN91@LoadFloat_
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 8a 01 00
	00		 je	 $LN90@LoadFloat_
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 75 01 00
	00		 je	 $LN89@LoadFloat_
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 5f 01 00
	00		 je	 $LN88@LoadFloat_
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 48 01 00
	00		 je	 $LN87@LoadFloat_
  000ba	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bd	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	0f 84 32 01 00
	00		 je	 $LN86@LoadFloat_
  000cb	32 d1		 xor	 dl, cl
  000cd	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 1d 01 00
	00		 je	 $LN85@LoadFloat_
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 07 01 00
	00		 je	 $LN84@LoadFloat_
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 f0 00 00
	00		 je	 $LN83@LoadFloat_
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 da 00 00
	00		 je	 $LN82@LoadFloat_
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 c5 00 00
	00		 je	 $LN81@LoadFloat_
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 af 00 00
	00		 je	 $LN80@LoadFloat_
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 98 00 00
	00		 je	 $LN79@LoadFloat_
  0013e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00141	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00147	84 d2		 test	 dl, dl
  00149	0f 84 82 00 00
	00		 je	 $LN78@LoadFloat_
  0014f	32 d1		 xor	 dl, cl
  00151	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	74 71		 je	 SHORT $LN77@LoadFloat_
  0015b	32 d3		 xor	 dl, bl
  0015d	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00160	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00163	84 d2		 test	 dl, dl
  00165	74 5f		 je	 SHORT $LN76@LoadFloat_
  00167	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016a	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0016e	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00171	0f 84 c3 00 00
	00		 je	 $LN1@LoadFloat_
  00177	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0017a	84 d2		 test	 dl, dl
  0017c	74 43		 je	 SHORT $LN74@LoadFloat_
  0017e	32 d1		 xor	 dl, cl
  00180	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00183	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00186	84 d2		 test	 dl, dl
  00188	74 32		 je	 SHORT $LN73@LoadFloat_
  0018a	32 d3		 xor	 dl, bl
  0018c	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  0018f	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  00192	84 d2		 test	 dl, dl
  00194	74 20		 je	 SHORT $LN72@LoadFloat_
  00196	8a 40 19	 mov	 al, BYTE PTR [eax+25]
  00199	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0019c	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  0019f	84 c0		 test	 al, al
  001a1	74 0a		 je	 SHORT $LN71@LoadFloat_
  001a3	34 ec		 xor	 al, -20			; ffffffecH
  001a5	88 45 f9	 mov	 BYTE PTR __k$[ebp+25], al
  001a8	e9 8d 00 00 00	 jmp	 $LN1@LoadFloat_
$LN71@LoadFloat_:
  001ad	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+25], -20 ; ffffffecH
  001b1	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_
$LN72@LoadFloat_:
  001b6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ba	eb 7e		 jmp	 SHORT $LN1@LoadFloat_
$LN73@LoadFloat_:
  001bc	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001bf	eb 79		 jmp	 SHORT $LN1@LoadFloat_
$LN74@LoadFloat_:
  001c1	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001c4	eb 74		 jmp	 SHORT $LN1@LoadFloat_
$LN76@LoadFloat_:
  001c6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001ca	eb 6e		 jmp	 SHORT $LN1@LoadFloat_
$LN77@LoadFloat_:
  001cc	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001cf	eb 69		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  001d1	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  001d4	eb 64		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  001d6	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  001da	eb 5e		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  001dc	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001e0	eb 58		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  001e2	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001e5	eb 53		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  001e7	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  001ea	eb 4e		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  001ec	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  001f0	eb 48		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  001f2	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001f6	eb 42		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  001f8	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  001fb	eb 3d		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  001fd	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00200	eb 38		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  00202	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00206	eb 32		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  00208	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0020c	eb 2c		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  0020e	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00211	eb 27		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  00213	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00216	eb 22		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  00218	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0021c	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  0021e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00222	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  00224	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00228	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  0022a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0022e	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  00230	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00234	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  00236	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  0023a	6a 05		 push	 5
  0023c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0023f	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+21], 0
  00243	5a		 pop	 edx
$LL104@LoadFloat_:
  00244	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0024a	83 c0 04	 add	 eax, 4
  0024d	4a		 dec	 edx
  0024e	75 f4		 jne	 SHORT $LL104@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  00250	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00255	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00259	51		 push	 ecx
  0025a	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0025d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00262	50		 push	 eax
  00263	8b ce		 mov	 ecx, esi
  00265	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0026b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0026e	5e		 pop	 esi
  0026f	33 cd		 xor	 ecx, ebp
  00271	5b		 pop	 ebx
  00272	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00277	c9		 leave
  00278	c2 08 00	 ret	 8
??$LoadFloat_e@$0BG@@ioINILoader@@QAEMAAY0BG@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<22>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BB@@ioINILoader@@QAEHAAY0BB@$$CBDH@Z ; ioINILoader::LoadInt_e<17>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BB@@ioINILoader@@QAEHAAY0BB@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -28						; size = 17
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BB@@ioINILoader@@QAEHAAY0BB@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<17>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 a7 01 00
	00		 je	 $LN96@LoadInt_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 90 01 00
	00		 je	 $LN95@LoadInt_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 78 01 00
	00		 je	 $LN94@LoadInt_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 61 01 00
	00		 je	 $LN93@LoadInt_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 4a 01 00
	00		 je	 $LN92@LoadInt_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 34 01 00
	00		 je	 $LN91@LoadInt_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 1e 01 00
	00		 je	 $LN90@LoadInt_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 07 01 00
	00		 je	 $LN89@LoadInt_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 f0 00 00
	00		 je	 $LN88@LoadInt_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 da 00 00
	00		 je	 $LN87@LoadInt_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 c4 00 00
	00		 je	 $LN86@LoadInt_e
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 ad 00 00
	00		 je	 $LN85@LoadInt_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 96 00 00
	00		 je	 $LN84@LoadInt_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 80 00 00
	00		 je	 $LN83@LoadInt_e
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	74 6e		 je	 SHORT $LN82@LoadInt_e
  00108	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010b	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0010e	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00111	84 d2		 test	 dl, dl
  00113	74 5b		 je	 SHORT $LN81@LoadInt_e
  00115	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00118	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	0f 84 a6 00 00
	00		 je	 $LN1@LoadInt_e
  00125	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00128	84 d2		 test	 dl, dl
  0012a	74 3f		 je	 SHORT $LN79@LoadInt_e
  0012c	32 d1		 xor	 dl, cl
  0012e	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00131	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00134	84 d2		 test	 dl, dl
  00136	74 2d		 je	 SHORT $LN78@LoadInt_e
  00138	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0013b	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0013e	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00141	84 d2		 test	 dl, dl
  00143	74 1a		 je	 SHORT $LN77@LoadInt_e
  00145	8a 40 14	 mov	 al, BYTE PTR [eax+20]
  00148	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014b	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014e	84 c0		 test	 al, al
  00150	74 07		 je	 SHORT $LN76@LoadInt_e
  00152	34 ed		 xor	 al, -19			; ffffffedH
  00154	88 45 f8	 mov	 BYTE PTR __k$[ebp+20], al
  00157	eb 72		 jmp	 SHORT $LN1@LoadInt_e
$LN76@LoadInt_e:
  00159	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0015d	eb 6c		 jmp	 SHORT $LN1@LoadInt_e
$LN77@LoadInt_e:
  0015f	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00163	eb 66		 jmp	 SHORT $LN1@LoadInt_e
$LN78@LoadInt_e:
  00165	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00169	eb 60		 jmp	 SHORT $LN1@LoadInt_e
$LN79@LoadInt_e:
  0016b	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  0016e	eb 5b		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  00170	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00174	eb 55		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  00176	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0017a	eb 4f		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  0017c	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  0017f	eb 4a		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  00181	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00185	eb 44		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  00187	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0018b	eb 3e		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  0018d	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00191	eb 38		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  00193	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  00196	eb 33		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  00198	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0019c	eb 2d		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  0019e	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001a2	eb 27		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  001a4	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001a8	eb 21		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  001aa	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001ad	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  001af	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001b3	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  001b5	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001b9	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  001bb	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001bf	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  001c1	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001c5	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  001c7	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  001cb	6a 04		 push	 4
  001cd	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001d0	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+16], 0
  001d4	5a		 pop	 edx
$LL104@LoadInt_e:
  001d5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001db	83 c0 04	 add	 eax, 4
  001de	4a		 dec	 edx
  001df	75 f4		 jne	 SHORT $LL104@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  001e1	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001e4	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001e7	50		 push	 eax
  001e8	8b ce		 mov	 ecx, esi
  001ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  001f0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f3	33 cd		 xor	 ecx, ebp
  001f5	5e		 pop	 esi
  001f6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fb	c9		 leave
  001fc	c2 08 00	 ret	 8
??$LoadInt_e@$0BB@@ioINILoader@@QAEHAAY0BB@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<17>
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	__$ArrayPad$
EXTRN	?LoadProperty@ioExtendJump@@UAEXAAVioINILoader@@@Z:PROC ; ioExtendJump::LoadProperty
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iolandattackjump.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioLandAttackJump@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
tv2839 = -36						; size = 4
__k$524844 = -32					; size = 22
__k$524999 = -28					; size = 17
__k$524715 = -28					; size = 17
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioLandAttackJump@@UAEXAAVioINILoader@@@Z PROC ; ioLandAttackJump::LoadProperty, COMDAT
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 34   : 	ioExtendJump::LoadProperty( rkLoader );

  00016	57		 push	 edi
  00017	8b f1		 mov	 esi, ecx
  00019	e8 00 00 00 00	 call	 ?LoadProperty@ioExtendJump@@UAEXAAVioINILoader@@@Z ; ioExtendJump::LoadProperty

; 35   : 
; 36   : 	m_bEnableHighJump = rkLoader.LoadBool_e( "enable_high_jump", false );

  0001e	33 db		 xor	 ebx, ebx
  00020	6a 04		 push	 4
  00022	c7 45 e4 88 82
	8a 88		 mov	 DWORD PTR __k$524715[ebp], -2004188536 ; 888a8288H
  00029	c7 45 e8 81 89
	b4 82		 mov	 DWORD PTR __k$524715[ebp+4], -2102097535 ; 82b48981H
  00030	c7 45 ec 84 8b
	83 b5		 mov	 DWORD PTR __k$524715[ebp+8], -1249670268 ; b5838b84H
  00037	c7 45 f0 87 99
	86 9a		 mov	 DWORD PTR __k$524715[ebp+12], -1702454905 ; 9a869987H
  0003e	8d 45 e4	 lea	 eax, DWORD PTR __k$524715[ebp]
  00041	88 5d f4	 mov	 BYTE PTR __k$524715[ebp+16], bl
  00044	59		 pop	 ecx
$LL106@LoadProper:
  00045	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0004b	83 c0 04	 add	 eax, 4
  0004e	49		 dec	 ecx
  0004f	75 f4		 jne	 SHORT $LL106@LoadProper
  00051	53		 push	 ebx
  00052	8d 45 e4	 lea	 eax, DWORD PTR __k$524715[ebp]
  00055	50		 push	 eax
  00056	8b cf		 mov	 ecx, edi
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  0005e	88 86 24 01 00
	00		 mov	 BYTE PTR [esi+292], al

; 37   : 	m_fExtraJumpPowerRate = rkLoader.LoadFloat_e( "jump_extra_power_rate", FLOAT1 );

  00064	b8 01 00 00 00	 mov	 eax, 1
  00069	6a 05		 push	 5
  0006b	c7 45 e0 87 99
	86 9a		 mov	 DWORD PTR __k$524844[ebp], -1702454905 ; 9a869987H
  00072	c7 45 e4 b2 89
	93 9e		 mov	 DWORD PTR __k$524844[ebp+4], -1634498126 ; 9e9389b2H
  00079	c7 45 e8 9f 8d
	b4 9a		 mov	 DWORD PTR __k$524844[ebp+8], -1699443297 ; 9ab48d9fH
  00080	c7 45 ec 82 9b
	8e 98		 mov	 DWORD PTR __k$524844[ebp+12], -1735484542 ; 988e9b82H
  00087	c7 45 f0 b2 9e
	8a 9e		 mov	 DWORD PTR __k$524844[ebp+16], -1635082574 ; 9e8a9eb2H
  0008e	8d 4d e0	 lea	 ecx, DWORD PTR __k$524844[ebp]
  00091	66 c7 45 f4 88
	00		 mov	 WORD PTR __k$524844[ebp+20], 136 ; 00000088H
  00097	5a		 pop	 edx
$LL214@LoadProper:
  00098	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  0009e	83 c1 04	 add	 ecx, 4
  000a1	4a		 dec	 edx
  000a2	75 f4		 jne	 SHORT $LL214@LoadProper
  000a4	80 75 f4 ed	 xor	 BYTE PTR __k$524844[ebp+20], -19 ; ffffffedH
  000a8	89 45 dc	 mov	 DWORD PTR tv2839[ebp], eax
  000ab	db 45 dc	 fild	 DWORD PTR tv2839[ebp]
  000ae	85 c0		 test	 eax, eax
  000b0	79 06		 jns	 SHORT $LN335@LoadProper
  000b2	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN335@LoadProper:
  000b8	51		 push	 ecx
  000b9	8d 45 e0	 lea	 eax, DWORD PTR __k$524844[ebp]
  000bc	d9 1c 24	 fstp	 DWORD PTR [esp]
  000bf	50		 push	 eax
  000c0	8b cf		 mov	 ecx, edi
  000c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  000c8	d9 9e 28 01 00
	00		 fstp	 DWORD PTR [esi+296]
  000ce	6a 04		 push	 4

; 38   : 	m_dwJumpChargeTime = rkLoader.LoadInt_e( "jump_charge_time", 0 );

  000d0	c7 45 e4 87 99
	86 9a		 mov	 DWORD PTR __k$524999[ebp], -1702454905 ; 9a869987H
  000d7	c7 45 e8 b2 8f
	83 8b		 mov	 DWORD PTR __k$524999[ebp+4], -1954312270 ; 8b838fb2H
  000de	c7 45 ec 9f 8b
	8e b5		 mov	 DWORD PTR __k$524999[ebp+8], -1248949345 ; b58e8b9fH
  000e5	c7 45 f0 99 85
	86 8f		 mov	 DWORD PTR __k$524999[ebp+12], -1887009383 ; 8f868599H
  000ec	8d 45 e4	 lea	 eax, DWORD PTR __k$524999[ebp]
  000ef	88 5d f4	 mov	 BYTE PTR __k$524999[ebp+16], bl
  000f2	59		 pop	 ecx
$LL320@LoadProper:
  000f3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000f9	83 c0 04	 add	 eax, 4
  000fc	49		 dec	 ecx
  000fd	75 f4		 jne	 SHORT $LL320@LoadProper
  000ff	53		 push	 ebx
  00100	8d 45 e4	 lea	 eax, DWORD PTR __k$524999[ebp]
  00103	50		 push	 eax
  00104	8b cf		 mov	 ecx, edi
  00106	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 39   : }

  0010c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010f	5f		 pop	 edi
  00110	89 86 2c 01 00
	00		 mov	 DWORD PTR [esi+300], eax
  00116	5e		 pop	 esi
  00117	33 cd		 xor	 ecx, ebp
  00119	5b		 pop	 ebx
  0011a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011f	c9		 leave
  00120	c2 04 00	 ret	 4
?LoadProperty@ioLandAttackJump@@UAEXAAVioINILoader@@@Z ENDP ; ioLandAttackJump::LoadProperty
_TEXT	ENDS
END
