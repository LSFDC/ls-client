; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioSimpleBoxWeapon.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
PUBLIC	?m_ActionStopType@ioSimpleBoxWeapon@@2W4ActionStopType@@A ; ioSimpleBoxWeapon::m_ActionStopType
PUBLIC	?m_DieActionStopType@ioSimpleBoxWeapon@@2W4ActionStopType@@A ; ioSimpleBoxWeapon::m_DieActionStopType
_BSS	SEGMENT
?m_ActionStopType@ioSimpleBoxWeapon@@2W4ActionStopType@@A DD 01H DUP (?) ; ioSimpleBoxWeapon::m_ActionStopType
?m_DieActionStopType@ioSimpleBoxWeapon@@2W4ActionStopType@@A DD 01H DUP (?) ; ioSimpleBoxWeapon::m_DieActionStopType
_BSS	ENDS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?return1000@@YAIXZ				; return1000
; Function compile flags: /Ogsp
;	COMDAT ?return1000@@YAIXZ
_TEXT	SEGMENT
?return1000@@YAIXZ PROC					; return1000, COMDAT

; 29   : 	__forceinline unsigned int return1000() { __asm mov eax, 1000 };

  00000	b8 e8 03 00 00	 mov	 eax, 1000		; 000003e8H
  00005	c3		 ret	 0
?return1000@@YAIXZ ENDP					; return1000
_TEXT	ENDS
PUBLIC	??_C@_0DL@INFHANEB@ioSimpleBoxWeapon?3?3?$HOioSimpleBoxW@ ; `string'
PUBLIC	??_7ioSimpleBoxWeapon@@6B@			; ioSimpleBoxWeapon::`vftable'
PUBLIC	??1ioSimpleBoxWeapon@@UAE@XZ			; ioSimpleBoxWeapon::~ioSimpleBoxWeapon
PUBLIC	??_R4ioSimpleBoxWeapon@@6B@			; ioSimpleBoxWeapon::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioSimpleBoxWeapon@@@8			; ioSimpleBoxWeapon `RTTI Type Descriptor'
PUBLIC	??_R3ioSimpleBoxWeapon@@8			; ioSimpleBoxWeapon::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioSimpleBoxWeapon@@8			; ioSimpleBoxWeapon::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioSimpleBoxWeapon@@8		; ioSimpleBoxWeapon::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioWeapon@@8			; ioWeapon::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioWeapon@@@8				; ioWeapon `RTTI Type Descriptor'
PUBLIC	??_R3ioWeapon@@8				; ioWeapon::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWeapon@@8				; ioWeapon::`RTTI Base Class Array'
PUBLIC	?InitResource@ioSimpleBoxWeapon@@UAE_NXZ	; ioSimpleBoxWeapon::InitResource
PUBLIC	?DestroyResource@ioSimpleBoxWeapon@@MAEXPAVioPlayStage@@@Z ; ioSimpleBoxWeapon::DestroyResource
PUBLIC	?LoadProperty@ioSimpleBoxWeapon@@UAEXAAVioINILoader@@@Z ; ioSimpleBoxWeapon::LoadProperty
PUBLIC	?SetMoveDir@ioSimpleBoxWeapon@@UAEXABUD3DXVECTOR3@@@Z ; ioSimpleBoxWeapon::SetMoveDir
PUBLIC	?SetStartPosition@ioSimpleBoxWeapon@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z ; ioSimpleBoxWeapon::SetStartPosition
PUBLIC	?Process@ioSimpleBoxWeapon@@UAEXMPAVioPlayStage@@@Z ; ioSimpleBoxWeapon::Process
PUBLIC	?IsCollision@ioSimpleBoxWeapon@@UAE_NPAVioPlayEntity@@_N@Z ; ioSimpleBoxWeapon::IsCollision
PUBLIC	?GetLocalAttackBox@ioSimpleBoxWeapon@@UBEABVioOrientBox@@XZ ; ioSimpleBoxWeapon::GetLocalAttackBox
PUBLIC	?GetType@ioSimpleBoxWeapon@@UBE?AW4WeaponType@ioWeapon@@XZ ; ioSimpleBoxWeapon::GetType
PUBLIC	?GetActionStopType@ioSimpleBoxWeapon@@UBE?AW4ActionStopType@@XZ ; ioSimpleBoxWeapon::GetActionStopType
PUBLIC	?GetDieActionStopType@ioSimpleBoxWeapon@@UBE?AW4ActionStopType@@XZ ; ioSimpleBoxWeapon::GetDieActionStopType
PUBLIC	?UpdateWorldAttackBox@ioSimpleBoxWeapon@@MAEXM_N@Z ; ioSimpleBoxWeapon::UpdateWorldAttackBox
EXTRN	??1ioWeapon@@UAE@XZ:PROC			; ioWeapon::~ioWeapon
EXTRN	__imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ:PROC
EXTRN	__imp_?LOG@@3VCLog@@A:BYTE
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?IsAlreadyCollisioned@ioWeapon@@UAE_NPAVioPlayEntity@@@Z:PROC ; ioWeapon::IsAlreadyCollisioned
EXTRN	?AddCollisionEntity@ioWeapon@@UAEXPAVioPlayEntity@@@Z:PROC ; ioWeapon::AddCollisionEntity
EXTRN	?SetOwnerDamageRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerDamageRate
EXTRN	?SetOwnerChargeDamageRate@ioWeapon@@UAEXM@Z:PROC ; ioWeapon::SetOwnerChargeDamageRate
EXTRN	?SetOwnerChargeForceRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerChargeForceRate
EXTRN	?SetOwnerChargeRangeRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerChargeRangeRate
EXTRN	?SetOwnerChargeSpeedRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerChargeSpeedRate
EXTRN	?SetOwnerChargeBlowRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerChargeBlowRate
EXTRN	?SetOwnerChargeFloatRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerChargeFloatRate
EXTRN	?SetOwnerChargeScaleRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerChargeScaleRate
EXTRN	?SetOwnerChargeExplosionRate@ioWeapon@@UAEXM@Z:PROC ; ioWeapon::SetOwnerChargeExplosionRate
EXTRN	?SetOwnerChargeWoundedTimeRate@ioWeapon@@UAEXM@Z:PROC ; ioWeapon::SetOwnerChargeWoundedTimeRate
EXTRN	?SetOwnerChargeLiveTimeRate@ioWeapon@@UAEXM@Z:PROC ; ioWeapon::SetOwnerChargeLiveTimeRate
EXTRN	?SetOwnerChargeBuffLiveTimeRate@ioWeapon@@UAEXM@Z:PROC ; ioWeapon::SetOwnerChargeBuffLiveTimeRate
EXTRN	?SetWeaponIndex@ioWeapon@@UAEXK@Z:PROC		; ioWeapon::SetWeaponIndex
EXTRN	?SetGrapplingTargetName@ioWeapon@@UAEXABVioHashString@@@Z:PROC ; ioWeapon::SetGrapplingTargetName
EXTRN	?SetCreateItem@ioWeapon@@UAEXABVioHashString@@@Z:PROC ; ioWeapon::SetCreateItem
EXTRN	?SetTeam@ioWeapon@@UAEXPAVioPlayStage@@W4TeamType@@@Z:PROC ; ioWeapon::SetTeam
EXTRN	?CallReserveAreaWeapon@ioWeapon@@UAEXXZ:PROC	; ioWeapon::CallReserveAreaWeapon
EXTRN	?SetWeaponDead@ioWeapon@@UAEXXZ:PROC		; ioWeapon::SetWeaponDead
EXTRN	?PlayExplosionSound@ioWeapon@@UAEXXZ:PROC	; ioWeapon::PlayExplosionSound
EXTRN	?PlayWoundedSound@ioWeapon@@UAEXPAVioPlayEntity@@@Z:PROC ; ioWeapon::PlayWoundedSound
EXTRN	?PlayDefensedSound@ioWeapon@@UAEXPAVioPlayEntity@@@Z:PROC ; ioWeapon::PlayDefensedSound
EXTRN	?PlayLoopSound@ioWeapon@@UAEXXZ:PROC		; ioWeapon::PlayLoopSound
EXTRN	?StopLoopSound@ioWeapon@@UAEXXZ:PROC		; ioWeapon::StopLoopSound
EXTRN	?GetTargetAirBuffList@ioWeapon@@UBEABV?$vector@UBuffInfoStruct@@V?$allocator@UBuffInfoStruct@@@std@@@std@@XZ:PROC ; ioWeapon::GetTargetAirBuffList
EXTRN	?GetTargetBuffList@ioWeapon@@UBEABV?$vector@UBuffInfoStruct@@V?$allocator@UBuffInfoStruct@@@std@@@std@@XZ:PROC ; ioWeapon::GetTargetBuffList
EXTRN	?GetTargetDownBuffList@ioWeapon@@UBEABV?$vector@UBuffInfoStruct@@V?$allocator@UBuffInfoStruct@@@std@@@std@@XZ:PROC ; ioWeapon::GetTargetDownBuffList
EXTRN	?GetPosition@ioWeapon@@UBEABUD3DXVECTOR3@@XZ:PROC ; ioWeapon::GetPosition
EXTRN	?GetBlowType@ioWeapon@@UBE?AW4BlowTargetType@@XZ:PROC ; ioWeapon::GetBlowType
EXTRN	?GetPushPower@ioWeapon@@UBEMM@Z:PROC		; ioWeapon::GetPushPower
EXTRN	?GetBlowPower@ioWeapon@@UBEMM@Z:PROC		; ioWeapon::GetBlowPower
EXTRN	?GetAirPushPower@ioWeapon@@UBEMM@Z:PROC		; ioWeapon::GetAirPushPower
EXTRN	?GetAirBlowPower@ioWeapon@@UBEMM@Z:PROC		; ioWeapon::GetAirBlowPower
EXTRN	?GetDefensePushPower@ioWeapon@@UBEMM@Z:PROC	; ioWeapon::GetDefensePushPower
EXTRN	?GetCollisionEnableTime@ioWeapon@@UBEKXZ:PROC	; ioWeapon::GetCollisionEnableTime
EXTRN	?SetSylphid@ioWeapon@@UAEHXZ:PROC		; ioWeapon::SetSylphid
EXTRN	?ApplyExtraReserveWeaponByWeaponInfo@ioWeapon@@UAEXPAV1@@Z:PROC ; ioWeapon::ApplyExtraReserveWeaponByWeaponInfo
EXTRN	?SetResistanceAttr@ioWeapon@@UAEXH@Z:PROC	; ioWeapon::SetResistanceAttr
EXTRN	?SetStartCollisionBox@ioWeapon@@UAEXXZ:PROC	; ioWeapon::SetStartCollisionBox
EXTRN	?SetLiveTime@ioWeapon@@UAEXK@Z:PROC		; ioWeapon::SetLiveTime
EXTRN	?SetMoveSpeed@ioWeapon@@UAEXM@Z:PROC		; ioWeapon::SetMoveSpeed
EXTRN	?SetFloatPower@ioWeapon@@UAEXM@Z:PROC		; ioWeapon::SetFloatPower
EXTRN	?TestMapCollision@ioWeapon@@UAE_NPAVioOpcodeShape@@PAVioPlayStage@@PBUD3DXMATRIX@@@Z:PROC ; ioWeapon::TestMapCollision
EXTRN	?CheckPreCollision@ioWeapon@@UAEXPAVioPlayEntity@@PAVioPlayStage@@@Z:PROC ; ioWeapon::CheckPreCollision
EXTRN	?CheckStructAndDummy@ioWeapon@@UAEXPAVioPlayEntity@@PAVioPlayStage@@@Z:PROC ; ioWeapon::CheckStructAndDummy
EXTRN	?GetDamage@ioWeapon@@UAEMPAVioPlayEntity@@@Z:PROC ; ioWeapon::GetDamage
EXTRN	?GetBaseDamage@ioWeapon@@UAEMPAVioPlayEntity@@@Z:PROC ; ioWeapon::GetBaseDamage
EXTRN	?GetPushAngle@ioWeapon@@UBEMXZ:PROC		; ioWeapon::GetPushAngle
EXTRN	?IsResistanceMagic@ioWeapon@@UAEHPAVioBaseChar@@@Z:PROC ; ioWeapon::IsResistanceMagic
EXTRN	?IsResistanceBomb@ioWeapon@@UAEHPAVioBaseChar@@@Z:PROC ; ioWeapon::IsResistanceBomb
EXTRN	?IsCanMineExplosion@ioWeapon@@UAE_NXZ:PROC	; ioWeapon::IsCanMineExplosion
EXTRN	?CheckGrapplingState@ioWeapon@@UAE?AW4GrapplingType@@XZ:PROC ; ioWeapon::CheckGrapplingState
EXTRN	?CheckCurAttribute@ioWeapon@@UAEXPBVioPlayEntity@@@Z:PROC ; ioWeapon::CheckCurAttribute
EXTRN	?CheckItemNotDrop@ioWeapon@@UAE_NPAVioBaseChar@@@Z:PROC ; ioWeapon::CheckItemNotDrop
EXTRN	?GetWorldAttackBoxList@ioWeapon@@UAEXAAV?$vector@VioOrientBox@@V?$allocator@VioOrientBox@@@std@@@std@@@Z:PROC ; ioWeapon::GetWorldAttackBoxList
EXTRN	?GetAttackDir@ioWeapon@@UBE?AUD3DXVECTOR3@@PBVioPlayEntity@@@Z:PROC ; ioWeapon::GetAttackDir
EXTRN	?GetLiveTime@ioWeapon@@UAEKXZ:PROC		; ioWeapon::GetLiveTime
EXTRN	?GetMoveDir@ioWeapon@@UAE?AUD3DXVECTOR3@@XZ:PROC ; ioWeapon::GetMoveDir
EXTRN	?CheckWeaponCollision@ioWeapon@@UAEXXZ:PROC	; ioWeapon::CheckWeaponCollision
EXTRN	?GetRefreshDuration@ioWeapon@@UAEKXZ:PROC	; ioWeapon::GetRefreshDuration
EXTRN	?GetIgnoreDuration@ioWeapon@@UAEKXZ:PROC	; ioWeapon::GetIgnoreDuration
EXTRN	?GetIgnoreTimeTypeDuration@ioWeapon@@UAEKXZ:PROC ; ioWeapon::GetIgnoreTimeTypeDuration
EXTRN	?GetIgnoreTimeType@ioWeapon@@UAEKXZ:PROC	; ioWeapon::GetIgnoreTimeType
EXTRN	?ApplyWeaponSync@ioWeapon@@UAEXAAVSP2Packet@@PAVioPlayStage@@@Z:PROC ; ioWeapon::ApplyWeaponSync
EXTRN	?IsSkillDependency@ioWeapon@@UAE_NABVioHashString@@@Z:PROC ; ioWeapon::IsSkillDependency
EXTRN	?SetSkillDependencyAction@ioWeapon@@UAEXXZ:PROC	; ioWeapon::SetSkillDependencyAction
EXTRN	?GetAttribute@ioWeapon@@MBEPBUWeaponAttribute@@XZ:PROC ; ioWeapon::GetAttribute
EXTRN	?CalcFinalDamage@ioWeapon@@MAEMXZ:PROC		; ioWeapon::CalcFinalDamage
EXTRN	?CalcFinalBoundDamage@ioWeapon@@MAEMXZ:PROC	; ioWeapon::CalcFinalBoundDamage
EXTRN	?CheckPiercing@ioWeapon@@MAE_N_N@Z:PROC		; ioWeapon::CheckPiercing
EXTRN	?ClearCollisionList@ioWeapon@@MAEXXZ:PROC	; ioWeapon::ClearCollisionList
EXTRN	?CheckCreateWeaponList@ioWeapon@@MAEXXZ:PROC	; ioWeapon::CheckCreateWeaponList
EXTRN	?CreateCollisionAreaWeapon@ioWeapon@@MAEXXZ:PROC ; ioWeapon::CreateCollisionAreaWeapon
EXTRN	?SetMapCollision@ioWeapon@@UAEXXZ:PROC		; ioWeapon::SetMapCollision
EXTRN	?IsIgnoreMapCollision@ioWeapon@@UBE_NXZ:PROC	; ioWeapon::IsIgnoreMapCollision
EXTRN	?IsIgnoreTestMapCollision@ioWeapon@@UBE_NXZ:PROC ; ioWeapon::IsIgnoreTestMapCollision
EXTRN	?IsIgnoreMapCollisionEffect@ioWeapon@@UBE_NXZ:PROC ; ioWeapon::IsIgnoreMapCollisionEffect
EXTRN	?AddEffectEvent@ioWeapon@@MAEXPAVioEffect@@@Z:PROC ; ioWeapon::AddEffectEvent
EXTRN	??_EioSimpleBoxWeapon@@UAEPAXI@Z:PROC		; ioSimpleBoxWeapon::`vector deleting destructor'
;	COMDAT ??_R2ioWeapon@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosimpleboxweapon.cpp
rdata$r	SEGMENT
??_R2ioWeapon@@8 DD FLAT:??_R1A@?0A@EA@ioWeapon@@8	; ioWeapon::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWeapon@@8
rdata$r	SEGMENT
??_R3ioWeapon@@8 DD 00H					; ioWeapon::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWeapon@@@8
_DATA	SEGMENT
??_R0?AVioWeapon@@@8 DD FLAT:??_7type_info@@6B@		; ioWeapon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWeapon@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWeapon@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWeapon@@8 DD FLAT:??_R0?AVioWeapon@@@8	; ioWeapon::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioSimpleBoxWeapon@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioSimpleBoxWeapon@@8 DD FLAT:??_R0?AVioSimpleBoxWeapon@@@8 ; ioSimpleBoxWeapon::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioSimpleBoxWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R2ioSimpleBoxWeapon@@8
rdata$r	SEGMENT
??_R2ioSimpleBoxWeapon@@8 DD FLAT:??_R1A@?0A@EA@ioSimpleBoxWeapon@@8 ; ioSimpleBoxWeapon::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R3ioSimpleBoxWeapon@@8
rdata$r	SEGMENT
??_R3ioSimpleBoxWeapon@@8 DD 00H			; ioSimpleBoxWeapon::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioSimpleBoxWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioSimpleBoxWeapon@@@8
_DATA	SEGMENT
??_R0?AVioSimpleBoxWeapon@@@8 DD FLAT:??_7type_info@@6B@ ; ioSimpleBoxWeapon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioSimpleBoxWeapon@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioSimpleBoxWeapon@@6B@
rdata$r	SEGMENT
??_R4ioSimpleBoxWeapon@@6B@ DD 00H			; ioSimpleBoxWeapon::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioSimpleBoxWeapon@@@8
	DD	FLAT:??_R3ioSimpleBoxWeapon@@8
rdata$r	ENDS
;	COMDAT ??_C@_0DL@INFHANEB@ioSimpleBoxWeapon?3?3?$HOioSimpleBoxW@
CONST	SEGMENT
??_C@_0DL@INFHANEB@ioSimpleBoxWeapon?3?3?$HOioSimpleBoxW@ DB 'ioSimpleBox'
	DB	'Weapon::~ioSimpleBoxWeapon - UnReleased Resouce', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7ioSimpleBoxWeapon@@6B@
CONST	SEGMENT
??_7ioSimpleBoxWeapon@@6B@ DD FLAT:??_R4ioSimpleBoxWeapon@@6B@ ; ioSimpleBoxWeapon::`vftable'
	DD	FLAT:?IsAlreadyCollisioned@ioWeapon@@UAE_NPAVioPlayEntity@@@Z
	DD	FLAT:?AddCollisionEntity@ioWeapon@@UAEXPAVioPlayEntity@@@Z
	DD	FLAT:?SetOwnerDamageRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeDamageRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeForceRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeRangeRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeSpeedRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeBlowRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeFloatRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeScaleRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeExplosionRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeWoundedTimeRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeLiveTimeRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeBuffLiveTimeRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioWeapon@@UAEXK@Z
	DD	FLAT:?SetGrapplingTargetName@ioWeapon@@UAEXABVioHashString@@@Z
	DD	FLAT:?SetCreateItem@ioWeapon@@UAEXABVioHashString@@@Z
	DD	FLAT:?SetTeam@ioWeapon@@UAEXPAVioPlayStage@@W4TeamType@@@Z
	DD	FLAT:?CallReserveAreaWeapon@ioWeapon@@UAEXXZ
	DD	FLAT:?SetWeaponDead@ioWeapon@@UAEXXZ
	DD	FLAT:?PlayExplosionSound@ioWeapon@@UAEXXZ
	DD	FLAT:?PlayWoundedSound@ioWeapon@@UAEXPAVioPlayEntity@@@Z
	DD	FLAT:?PlayDefensedSound@ioWeapon@@UAEXPAVioPlayEntity@@@Z
	DD	FLAT:?PlayLoopSound@ioWeapon@@UAEXXZ
	DD	FLAT:?StopLoopSound@ioWeapon@@UAEXXZ
	DD	FLAT:?GetTargetAirBuffList@ioWeapon@@UBEABV?$vector@UBuffInfoStruct@@V?$allocator@UBuffInfoStruct@@@std@@@std@@XZ
	DD	FLAT:?GetTargetBuffList@ioWeapon@@UBEABV?$vector@UBuffInfoStruct@@V?$allocator@UBuffInfoStruct@@@std@@@std@@XZ
	DD	FLAT:?GetTargetDownBuffList@ioWeapon@@UBEABV?$vector@UBuffInfoStruct@@V?$allocator@UBuffInfoStruct@@@std@@@std@@XZ
	DD	FLAT:?GetPosition@ioWeapon@@UBEABUD3DXVECTOR3@@XZ
	DD	FLAT:?GetBlowType@ioWeapon@@UBE?AW4BlowTargetType@@XZ
	DD	FLAT:?GetPushPower@ioWeapon@@UBEMM@Z
	DD	FLAT:?GetBlowPower@ioWeapon@@UBEMM@Z
	DD	FLAT:?GetAirPushPower@ioWeapon@@UBEMM@Z
	DD	FLAT:?GetAirBlowPower@ioWeapon@@UBEMM@Z
	DD	FLAT:?GetDefensePushPower@ioWeapon@@UBEMM@Z
	DD	FLAT:?GetCollisionEnableTime@ioWeapon@@UBEKXZ
	DD	FLAT:?SetSylphid@ioWeapon@@UAEHXZ
	DD	FLAT:?ApplyExtraReserveWeaponByWeaponInfo@ioWeapon@@UAEXPAV1@@Z
	DD	FLAT:?InitResource@ioSimpleBoxWeapon@@UAE_NXZ
	DD	FLAT:?DestroyResource@ioSimpleBoxWeapon@@MAEXPAVioPlayStage@@@Z
	DD	FLAT:?LoadProperty@ioSimpleBoxWeapon@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?SetResistanceAttr@ioWeapon@@UAEXH@Z
	DD	FLAT:?SetStartCollisionBox@ioWeapon@@UAEXXZ
	DD	FLAT:?SetLiveTime@ioWeapon@@UAEXK@Z
	DD	FLAT:?SetMoveDir@ioSimpleBoxWeapon@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?SetMoveSpeed@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetFloatPower@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetStartPosition@ioSimpleBoxWeapon@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z
	DD	FLAT:?Process@ioSimpleBoxWeapon@@UAEXMPAVioPlayStage@@@Z
	DD	FLAT:?IsCollision@ioSimpleBoxWeapon@@UAE_NPAVioPlayEntity@@_N@Z
	DD	FLAT:?TestMapCollision@ioWeapon@@UAE_NPAVioOpcodeShape@@PAVioPlayStage@@PBUD3DXMATRIX@@@Z
	DD	FLAT:?CheckPreCollision@ioWeapon@@UAEXPAVioPlayEntity@@PAVioPlayStage@@@Z
	DD	FLAT:?CheckStructAndDummy@ioWeapon@@UAEXPAVioPlayEntity@@PAVioPlayStage@@@Z
	DD	FLAT:?GetDamage@ioWeapon@@UAEMPAVioPlayEntity@@@Z
	DD	FLAT:?GetBaseDamage@ioWeapon@@UAEMPAVioPlayEntity@@@Z
	DD	FLAT:?GetPushAngle@ioWeapon@@UBEMXZ
	DD	FLAT:?IsResistanceMagic@ioWeapon@@UAEHPAVioBaseChar@@@Z
	DD	FLAT:?IsResistanceBomb@ioWeapon@@UAEHPAVioBaseChar@@@Z
	DD	FLAT:?IsCanMineExplosion@ioWeapon@@UAE_NXZ
	DD	FLAT:?CheckGrapplingState@ioWeapon@@UAE?AW4GrapplingType@@XZ
	DD	FLAT:?CheckCurAttribute@ioWeapon@@UAEXPBVioPlayEntity@@@Z
	DD	FLAT:?CheckItemNotDrop@ioWeapon@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetWorldAttackBoxList@ioWeapon@@UAEXAAV?$vector@VioOrientBox@@V?$allocator@VioOrientBox@@@std@@@std@@@Z
	DD	FLAT:?GetAttackDir@ioWeapon@@UBE?AUD3DXVECTOR3@@PBVioPlayEntity@@@Z
	DD	FLAT:?GetLocalAttackBox@ioSimpleBoxWeapon@@UBEABVioOrientBox@@XZ
	DD	FLAT:?GetLiveTime@ioWeapon@@UAEKXZ
	DD	FLAT:?GetMoveDir@ioWeapon@@UAE?AUD3DXVECTOR3@@XZ
	DD	FLAT:?CheckWeaponCollision@ioWeapon@@UAEXXZ
	DD	FLAT:?GetType@ioSimpleBoxWeapon@@UBE?AW4WeaponType@ioWeapon@@XZ
	DD	FLAT:?GetActionStopType@ioSimpleBoxWeapon@@UBE?AW4ActionStopType@@XZ
	DD	FLAT:?GetDieActionStopType@ioSimpleBoxWeapon@@UBE?AW4ActionStopType@@XZ
	DD	FLAT:?GetRefreshDuration@ioWeapon@@UAEKXZ
	DD	FLAT:?GetIgnoreDuration@ioWeapon@@UAEKXZ
	DD	FLAT:?GetIgnoreTimeTypeDuration@ioWeapon@@UAEKXZ
	DD	FLAT:?GetIgnoreTimeType@ioWeapon@@UAEKXZ
	DD	FLAT:?ApplyWeaponSync@ioWeapon@@UAEXAAVSP2Packet@@PAVioPlayStage@@@Z
	DD	FLAT:?IsSkillDependency@ioWeapon@@UAE_NABVioHashString@@@Z
	DD	FLAT:?SetSkillDependencyAction@ioWeapon@@UAEXXZ
	DD	FLAT:?UpdateWorldAttackBox@ioSimpleBoxWeapon@@MAEXM_N@Z
	DD	FLAT:?GetAttribute@ioWeapon@@MBEPBUWeaponAttribute@@XZ
	DD	FLAT:?CalcFinalDamage@ioWeapon@@MAEMXZ
	DD	FLAT:?CalcFinalBoundDamage@ioWeapon@@MAEMXZ
	DD	FLAT:?CheckPiercing@ioWeapon@@MAE_N_N@Z
	DD	FLAT:?ClearCollisionList@ioWeapon@@MAEXXZ
	DD	FLAT:?CheckCreateWeaponList@ioWeapon@@MAEXXZ
	DD	FLAT:?CreateCollisionAreaWeapon@ioWeapon@@MAEXXZ
	DD	FLAT:?SetMapCollision@ioWeapon@@UAEXXZ
	DD	FLAT:?IsIgnoreMapCollision@ioWeapon@@UBE_NXZ
	DD	FLAT:?IsIgnoreTestMapCollision@ioWeapon@@UBE_NXZ
	DD	FLAT:?IsIgnoreMapCollisionEffect@ioWeapon@@UBE_NXZ
	DD	FLAT:?AddEffectEvent@ioWeapon@@MAEXPAVioEffect@@@Z
	DD	FLAT:??_EioSimpleBoxWeapon@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioSimpleBoxWeapon@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioSimpleBoxWeapon@@UAE@XZ$0
__ehfuncinfo$??1ioSimpleBoxWeapon@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ioSimpleBoxWeapon@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioSimpleBoxWeapon@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioSimpleBoxWeapon@@UAE@XZ PROC			; ioSimpleBoxWeapon::~ioSimpleBoxWeapon, COMDAT
; _this$ = ecx

; 24   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioSimpleBoxWeapon@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioSimpleBoxWeapon@@6B@
  00017	33 c0		 xor	 eax, eax
  00019	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax

; 25   : 	if( m_pMesh )

  0001c	39 86 94 08 00
	00		 cmp	 DWORD PTR [esi+2196], eax
  00022	74 15		 je	 SHORT $LN1@ioSimpleBo

; 26   : 	{
; 27   : 		LOG.PrintTimeAndLog( 0, "ioSimpleBoxWeapon::~ioSimpleBoxWeapon - UnReleased Resouce" );

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@INFHANEB@ioSimpleBoxWeapon?3?3?$HOioSimpleBoxW@
  00029	50		 push	 eax
  0002a	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@ioSimpleBo:

; 28   : 	}
; 29   : }

  00039	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ??1ioWeapon@@UAE@XZ	; ioWeapon::~ioWeapon
  00044	e8 00 00 00 00	 call	 __EH_epilog3
  00049	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioSimpleBoxWeapon@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioWeapon@@UAE@XZ	; ioWeapon::~ioWeapon
__ehhandler$??1ioSimpleBoxWeapon@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioSimpleBoxWeapon@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioSimpleBoxWeapon@@UAE@XZ ENDP			; ioSimpleBoxWeapon::~ioSimpleBoxWeapon
EXTRN	__imp_?DestroyEffect@ioEffectFactory@@QAEXPAVioEffect@@@Z:PROC
EXTRN	__imp_?GetSingleton@ioEffectFactory@@SAAAV1@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?DestroyResource@ioSimpleBoxWeapon@@MAEXPAVioPlayStage@@@Z
_TEXT	SEGMENT
_pStage$ = 8						; size = 4
?DestroyResource@ioSimpleBoxWeapon@@MAEXPAVioPlayStage@@@Z PROC ; ioSimpleBoxWeapon::DestroyResource, COMDAT
; _this$ = ecx

; 101  : {

  00000	56		 push	 esi

; 102  : 	if( m_pMesh )

  00001	8d b1 94 08 00
	00		 lea	 esi, DWORD PTR [ecx+2196]
  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	85 c0		 test	 eax, eax
  0000b	74 12		 je	 SHORT $LN1@DestroyRes

; 103  : 	{
; 104  : 		g_EffectFactory.DestroyEffect( m_pMesh );

  0000d	50		 push	 eax
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioEffectFactory@@SAAAV1@XZ
  00014	8b c8		 mov	 ecx, eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?DestroyEffect@ioEffectFactory@@QAEXPAVioEffect@@@Z

; 105  : 		m_pMesh = NULL;

  0001c	83 26 00	 and	 DWORD PTR [esi], 0
$LN1@DestroyRes:
  0001f	5e		 pop	 esi

; 106  : 	}
; 107  : }

  00020	c2 04 00	 ret	 4
?DestroyResource@ioSimpleBoxWeapon@@MAEXPAVioPlayStage@@@Z ENDP ; ioSimpleBoxWeapon::DestroyResource
_TEXT	ENDS
EXTRN	?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z:PROC ; ioWeapon::SetPosition
; Function compile flags: /Ogsp
;	COMDAT ?SetStartPosition@ioSimpleBoxWeapon@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z
_TEXT	SEGMENT
_vPos$ = 8						; size = 4
_pStage$ = 12						; size = 4
?SetStartPosition@ioSimpleBoxWeapon@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z PROC ; ioSimpleBoxWeapon::SetStartPosition, COMDAT
; _this$ = ecx

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	SetPosition( vPos );

  00003	ff 75 08	 push	 DWORD PTR _vPos$[ebp]
  00006	e8 00 00 00 00	 call	 ?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z ; ioWeapon::SetPosition

; 112  : }

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?SetStartPosition@ioSimpleBoxWeapon@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z ENDP ; ioSimpleBoxWeapon::SetStartPosition
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetType@ioSimpleBoxWeapon@@UBE?AW4WeaponType@ioWeapon@@XZ
_TEXT	SEGMENT
?GetType@ioSimpleBoxWeapon@@UBE?AW4WeaponType@ioWeapon@@XZ PROC ; ioSimpleBoxWeapon::GetType, COMDAT
; _this$ = ecx

; 116  : 	return WT_SIMPLE_BOX;

  00000	6a 49		 push	 73			; 00000049H
  00002	58		 pop	 eax

; 117  : }

  00003	c3		 ret	 0
?GetType@ioSimpleBoxWeapon@@UBE?AW4WeaponType@ioWeapon@@XZ ENDP ; ioSimpleBoxWeapon::GetType
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetActionStopType@ioSimpleBoxWeapon@@UBE?AW4ActionStopType@@XZ
_TEXT	SEGMENT
?GetActionStopType@ioSimpleBoxWeapon@@UBE?AW4ActionStopType@@XZ PROC ; ioSimpleBoxWeapon::GetActionStopType, COMDAT
; _this$ = ecx

; 121  : 	return m_ActionStopType;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_ActionStopType@ioSimpleBoxWeapon@@2W4ActionStopType@@A ; ioSimpleBoxWeapon::m_ActionStopType

; 122  : }

  00005	c3		 ret	 0
?GetActionStopType@ioSimpleBoxWeapon@@UBE?AW4ActionStopType@@XZ ENDP ; ioSimpleBoxWeapon::GetActionStopType
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetDieActionStopType@ioSimpleBoxWeapon@@UBE?AW4ActionStopType@@XZ
_TEXT	SEGMENT
?GetDieActionStopType@ioSimpleBoxWeapon@@UBE?AW4ActionStopType@@XZ PROC ; ioSimpleBoxWeapon::GetDieActionStopType, COMDAT
; _this$ = ecx

; 126  : 	return m_DieActionStopType;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_DieActionStopType@ioSimpleBoxWeapon@@2W4ActionStopType@@A ; ioSimpleBoxWeapon::m_DieActionStopType

; 127  : }

  00005	c3		 ret	 0
?GetDieActionStopType@ioSimpleBoxWeapon@@UBE?AW4ActionStopType@@XZ ENDP ; ioSimpleBoxWeapon::GetDieActionStopType
_TEXT	ENDS
EXTRN	?GetLocalAttackBox@ioWeapon@@UBEABVioOrientBox@@XZ:PROC ; ioWeapon::GetLocalAttackBox
EXTRN	__imp_?GetCollisionBox@ioEffect@@QBEABVioOrientBox@@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?GetLocalAttackBox@ioSimpleBoxWeapon@@UBEABVioOrientBox@@XZ
_TEXT	SEGMENT
?GetLocalAttackBox@ioSimpleBoxWeapon@@UBEABVioOrientBox@@XZ PROC ; ioSimpleBoxWeapon::GetLocalAttackBox, COMDAT
; _this$ = ecx

; 248  : 	if( m_pMesh )

  00000	8b 81 94 08 00
	00		 mov	 eax, DWORD PTR [ecx+2196]
  00006	85 c0		 test	 eax, eax
  00008	74 08		 je	 SHORT $LN1@GetLocalAt

; 249  : 		return m_pMesh->GetCollisionBox();

  0000a	8b c8		 mov	 ecx, eax
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_?GetCollisionBox@ioEffect@@QBEABVioOrientBox@@XZ
$LN1@GetLocalAt:

; 250  : 
; 251  : 	return ioWeapon::GetLocalAttackBox();

  00012	e9 00 00 00 00	 jmp	 ?GetLocalAttackBox@ioWeapon@@UBEABVioOrientBox@@XZ ; ioWeapon::GetLocalAttackBox
?GetLocalAttackBox@ioSimpleBoxWeapon@@UBEABVioOrientBox@@XZ ENDP ; ioSimpleBoxWeapon::GetLocalAttackBox
_TEXT	ENDS
PUBLIC	?SetOwnerAttach@ioSimpleBoxWeapon@@QAEX_N@Z	; ioSimpleBoxWeapon::SetOwnerAttach
; Function compile flags: /Ogsp
;	COMDAT ?SetOwnerAttach@ioSimpleBoxWeapon@@QAEX_N@Z
_TEXT	SEGMENT
_bAttach$ = 8						; size = 1
?SetOwnerAttach@ioSimpleBoxWeapon@@QAEX_N@Z PROC	; ioSimpleBoxWeapon::SetOwnerAttach, COMDAT
; _this$ = ecx

; 295  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 296  : 	m_bOwnerAttach = bAttach;

  00003	8a 45 08	 mov	 al, BYTE PTR _bAttach$[ebp]
  00006	88 81 b0 08 00
	00		 mov	 BYTE PTR [ecx+2224], al

; 297  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetOwnerAttach@ioSimpleBoxWeapon@@QAEX_N@Z ENDP	; ioSimpleBoxWeapon::SetOwnerAttach
_TEXT	ENDS
PUBLIC	?SetCheckDeadTime@ioSimpleBoxWeapon@@QAEX_N@Z	; ioSimpleBoxWeapon::SetCheckDeadTime
; Function compile flags: /Ogsp
;	COMDAT ?SetCheckDeadTime@ioSimpleBoxWeapon@@QAEX_N@Z
_TEXT	SEGMENT
_bCheckDeadTime$ = 8					; size = 1
?SetCheckDeadTime@ioSimpleBoxWeapon@@QAEX_N@Z PROC	; ioSimpleBoxWeapon::SetCheckDeadTime, COMDAT
; _this$ = ecx

; 301  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 302  : 	m_bCheckDeadTime = bCheckDeadTime;

  00003	8a 45 08	 mov	 al, BYTE PTR _bCheckDeadTime$[ebp]
  00006	88 81 b1 08 00
	00		 mov	 BYTE PTR [ecx+2225], al

; 303  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetCheckDeadTime@ioSimpleBoxWeapon@@QAEX_N@Z ENDP	; ioSimpleBoxWeapon::SetCheckDeadTime
_TEXT	ENDS
PUBLIC	__real@3f91df46a2526c7a
PUBLIC	??$DEGtoRAD@M@@YAMM@Z				; DEGtoRAD<float>
EXTRN	__fltused:DWORD
;	COMDAT __real@3f91df46a2526c7a
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\veryoftenusedefine.h
CONST	SEGMENT
__real@3f91df46a2526c7a DQ 03f91df46a2526c7ar	; 0.0174533
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??$DEGtoRAD@M@@YAMM@Z
_TEXT	SEGMENT
tv129 = 8						; size = 4
_val$ = 8						; size = 4
??$DEGtoRAD@M@@YAMM@Z PROC				; DEGtoRAD<float>, COMDAT

; 20   : type  DEGtoRAD (type val) {return (type) (val * 0.0174532925199);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR _val$[ebp]
  00006	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a2526c7a
  0000c	d9 5d 08	 fstp	 DWORD PTR tv129[ebp]
  0000f	d9 45 08	 fld	 DWORD PTR tv129[ebp]
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??$DEGtoRAD@M@@YAMM@Z ENDP				; DEGtoRAD<float>
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??0D3DXQUATERNION@@QAE@XZ			; D3DXQUATERNION::D3DXQUATERNION
; Function compile flags: /Ogsp
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT
??0D3DXQUATERNION@@QAE@XZ PROC				; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 429  :     D3DXQUATERNION() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXQUATERNION@@QAE@XZ ENDP				; D3DXQUATERNION::D3DXQUATERNION
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z			; D3DXVECTOR3::operator+=
; Function compile flags: /Ogsp
;	COMDAT ??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+=, COMDAT
; _this$ = ecx

; 327  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 328  :     x += v.x;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00008	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000c	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00010	0f 5a c0	 cvtps2pd xmm0, xmm0
  00013	0f 5a c9	 cvtps2pd xmm1, xmm1
  00016	f2 0f 58 c1	 addsd	 xmm0, xmm1

; 329  :     y += v.y;

  0001a	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0001f	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00023	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00027	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0002f	0f 5a c9	 cvtps2pd xmm1, xmm1
  00032	f2 0f 58 c1	 addsd	 xmm0, xmm1

; 330  :     z += v.z;

  00036	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  0003b	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0003f	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00044	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00049	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0004f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00053	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00057	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 331  :     return *this;
; 332  : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+=
_TEXT	ENDS
PUBLIC	??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator+
; Function compile flags: /Ogsp
;	COMDAT ??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+, COMDAT
; _this$ = ecx

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0000a	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	0f 5a c9	 cvtps2pd xmm1, xmm1
  00017	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0001b	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00020	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00024	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00028	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  0002d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00030	0f 5a c9	 cvtps2pd xmm1, xmm1
  00033	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00037	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0003c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00040	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00045	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  0004a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00050	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00054	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00058	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 382  : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+
_TEXT	ENDS
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator-
; Function compile flags: /Ogsp
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 386  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000a	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	0f 5a c9	 cvtps2pd xmm1, xmm1
  00017	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0001b	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  00020	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00024	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00028	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00030	0f 5a c9	 cvtps2pd xmm1, xmm1
  00033	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00037	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  0003c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00040	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00045	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0004a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00050	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00054	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00058	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 388  : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator-
_TEXT	ENDS
PUBLIC	??DD3DXVECTOR3@@QBE?AU0@M@Z			; D3DXVECTOR3::operator*
; Function compile flags: /Ogsp
;	COMDAT ??DD3DXVECTOR3@@QBE?AU0@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
??DD3DXVECTOR3@@QBE?AU0@M@Z PROC			; D3DXVECTOR3::operator*, COMDAT
; _this$ = ecx

; 392  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 393  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00003	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  00008	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00012	0f 5a c9	 cvtps2pd xmm1, xmm1
  00015	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00019	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  0001e	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00022	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00026	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0002e	0f 5a c9	 cvtps2pd xmm1, xmm1
  00031	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00035	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  0003a	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0003e	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00043	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00048	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004b	0f 5a c9	 cvtps2pd xmm1, xmm1
  0004e	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00052	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00056	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 394  : }

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
??DD3DXVECTOR3@@QBE?AU0@M@Z ENDP			; D3DXVECTOR3::operator*
_TEXT	ENDS
PUBLIC	?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z	; D3DXVec3Cross
; Function compile flags: /Ogsp
;	COMDAT ?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z
_TEXT	SEGMENT
_v$ = -12						; size = 12
_pOut$ = 8						; size = 4
_pV1$ = 12						; size = 4
_pV2$ = 16						; size = 4
?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z PROC	; D3DXVec3Cross, COMDAT

; 1747 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1757 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;
; 1758 : 
; 1759 :     *pOut = v;

  00006	56		 push	 esi
  00007	57		 push	 edi

; 1748 :     D3DXVECTOR3 v;
; 1749 : 
; 1750 : #ifdef D3DX_DEBUG
; 1751 :     if(!pOut || !pV1 || !pV2)
; 1752 :         return NULL;
; 1753 : #endif
; 1754 : 
; 1755 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00008	8b 45 0c	 mov	 eax, DWORD PTR _pV1$[ebp]
  0000b	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00010	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _pV2$[ebp]
  00018	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0001d	f3 0f 10 59 04	 movss	 xmm3, DWORD PTR [ecx+4]
  00022	0f 5a e8	 cvtps2pd xmm5, xmm0
  00025	0f 5a e1	 cvtps2pd xmm4, xmm1
  00028	0f 5a f2	 cvtps2pd xmm6, xmm2
  0002b	f2 0f 59 e5	 mulsd	 xmm4, xmm5

; 1756 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0002f	0f 5a d2	 cvtps2pd xmm2, xmm2
  00032	0f 5a c9	 cvtps2pd xmm1, xmm1
  00035	0f 5a eb	 cvtps2pd xmm5, xmm3
  00038	f2 0f 59 ee	 mulsd	 xmm5, xmm6
  0003c	f2 0f 5c e5	 subsd	 xmm4, xmm5
  00040	f3 0f 10 28	 movss	 xmm5, DWORD PTR [eax]

; 1757 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;
; 1758 : 
; 1759 :     *pOut = v;

  00044	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  00047	66 0f 5a e4	 cvtpd2ps xmm4, xmm4
  0004b	f3 0f 11 65 f4	 movss	 DWORD PTR _v$[ebp], xmm4
  00050	f3 0f 10 21	 movss	 xmm4, DWORD PTR [ecx]
  00054	0f 5a f4	 cvtps2pd xmm6, xmm4
  00057	f2 0f 59 f2	 mulsd	 xmm6, xmm2
  0005b	0f 5a d5	 cvtps2pd xmm2, xmm5
  0005e	f2 0f 59 d1	 mulsd	 xmm2, xmm1
  00062	f2 0f 5c f2	 subsd	 xmm6, xmm2
  00066	66 0f 5a ce	 cvtpd2ps xmm1, xmm6
  0006a	f3 0f 11 4d f8	 movss	 DWORD PTR _v$[ebp+4], xmm1
  0006f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00072	0f 5a d3	 cvtps2pd xmm2, xmm3
  00075	0f 5a cd	 cvtps2pd xmm1, xmm5
  00078	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  0007c	8d 75 f4	 lea	 esi, DWORD PTR _v$[ebp]
  0007f	8b f8		 mov	 edi, eax
  00081	0f 5a d4	 cvtps2pd xmm2, xmm4
  00084	f2 0f 59 d0	 mulsd	 xmm2, xmm0
  00088	f2 0f 5c ca	 subsd	 xmm1, xmm2
  0008c	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  00090	f3 0f 11 45 fc	 movss	 DWORD PTR _v$[ebp+8], xmm0
  00095	a5		 movsd
  00096	a5		 movsd
  00097	a5		 movsd
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi

; 1760 :     return pOut;
; 1761 : }

  0009a	c9		 leave
  0009b	c3		 ret	 0
?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z ENDP	; D3DXVec3Cross
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ	; ioGameEntity::GetGroup
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
;	COMDAT ?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ
_TEXT	SEGMENT
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ PROC	; ioGameEntity::GetGroup, COMDAT
; _this$ = ecx

; 166  : 	inline ioEntityGroup* GetGroup() const { return m_pGroup; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ ENDP	; ioGameEntity::GetGroup
_TEXT	ENDS
PUBLIC	?IsLive@ioWeapon@@QBE_NXZ			; ioWeapon::IsLive
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioweapon.h
;	COMDAT ?IsLive@ioWeapon@@QBE_NXZ
_TEXT	SEGMENT
?IsLive@ioWeapon@@QBE_NXZ PROC				; ioWeapon::IsLive, COMDAT
; _this$ = ecx

; 533  : 	inline bool IsLive() const { return m_bLive; }

  00000	8a 81 82 05 00
	00		 mov	 al, BYTE PTR [ecx+1410]
  00006	c3		 ret	 0
?IsLive@ioWeapon@@QBE_NXZ ENDP				; ioWeapon::IsLive
_TEXT	ENDS
PUBLIC	?GetParentSceneNode@ioWeapon@@QBEPAVioSceneNode@@XZ ; ioWeapon::GetParentSceneNode
; Function compile flags: /Ogsp
;	COMDAT ?GetParentSceneNode@ioWeapon@@QBEPAVioSceneNode@@XZ
_TEXT	SEGMENT
?GetParentSceneNode@ioWeapon@@QBEPAVioSceneNode@@XZ PROC ; ioWeapon::GetParentSceneNode, COMDAT
; _this$ = ecx

; 797  : 	ioSceneNode* GetParentSceneNode() const { return m_pSceneNode; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetParentSceneNode@ioWeapon@@QBEPAVioSceneNode@@XZ ENDP ; ioWeapon::GetParentSceneNode
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z	; CEncrypt<float>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z PROC	; CEncrypt<float>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1648 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1649 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1650 : 		*value = *((float*)m_TempMem);

  00016	d9 06		 fld	 DWORD PTR [esi]
  00018	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  0001b	d9 18		 fstp	 DWORD PTR [eax]
  0001d	5e		 pop	 esi

; 1651 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ENDP	; CEncrypt<float>::DecryptValueToPool
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GioSimpleBoxWeapon@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioSimpleBoxWeapon@@UAEPAXI@Z PROC			; ioSimpleBoxWeapon::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioSimpleBoxWeapon@@UAE@XZ ; ioSimpleBoxWeapon::~ioSimpleBoxWeapon
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioSimpleBoxWeapon@@UAEPAXI@Z ENDP			; ioSimpleBoxWeapon::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	?ClearData@ioSimpleBoxWeapon@@QAEXXZ		; ioSimpleBoxWeapon::ClearData
;	COMDAT __real@4f800000
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosimpleboxweapon.cpp
CONST	ENDS
;	COMDAT ?ClearData@ioSimpleBoxWeapon@@QAEXXZ
_TEXT	SEGMENT
$T530547 = -16						; size = 12
tv144 = -4						; size = 4
?ClearData@ioSimpleBoxWeapon@@QAEXXZ PROC		; ioSimpleBoxWeapon::ClearData, COMDAT
; _this$ = ecx

; 44   : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 45   : 	m_vMoveDir = D3DXVECTOR3( 0.0f, 0.0f, -FLOAT1 );

  00008	b8 01 00 00 00	 mov	 eax, 1
  0000d	0f 57 c0	 xorps	 xmm0, xmm0
  00010	89 45 fc	 mov	 DWORD PTR tv144[ebp], eax
  00013	db 45 fc	 fild	 DWORD PTR tv144[ebp]
  00016	f3 0f 11 45 f0	 movss	 DWORD PTR $T530547[ebp], xmm0
  0001b	f3 0f 11 45 f4	 movss	 DWORD PTR $T530547[ebp+4], xmm0
  00020	85 c0		 test	 eax, eax
  00022	79 06		 jns	 SHORT $LN7@ClearData
  00024	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN7@ClearData:
  0002a	d9 e0		 fchs
  0002c	8d b9 9c 08 00
	00		 lea	 edi, DWORD PTR [ecx+2204]
  00032	d9 5d f8	 fstp	 DWORD PTR $T530547[ebp+8]
  00035	8d 75 f0	 lea	 esi, DWORD PTR $T530547[ebp]
  00038	a5		 movsd
  00039	a5		 movsd
  0003a	a5		 movsd

; 46   : 	m_State = WS_INIT;

  0003b	33 c0		 xor	 eax, eax
  0003d	5f		 pop	 edi
  0003e	89 81 98 08 00
	00		 mov	 DWORD PTR [ecx+2200], eax

; 47   : 
; 48   : 	m_bOwnerAttach = false;

  00044	66 89 81 b0 08
	00 00		 mov	 WORD PTR [ecx+2224], ax
  0004b	5e		 pop	 esi

; 49   : 	m_bCheckDeadTime = false;
; 50   : }

  0004c	c9		 leave
  0004d	c3		 ret	 0
?ClearData@ioSimpleBoxWeapon@@QAEXXZ ENDP		; ioSimpleBoxWeapon::ClearData
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	?SetMesh@ioSimpleBoxWeapon@@IAE_NABVioHashString@@@Z ; ioSimpleBoxWeapon::SetMesh
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABU0@0@Z:PROC
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z:PROC
EXTRN	__imp_?GetBiped@ioEntityGroup@@QAEPAVioBiped@@ABVioHashString@@@Z:PROC
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	__imp_?GetFirstLinkOffset@ioEffect@@QAE_NAAVioHashString@@AAUD3DXVECTOR3@@AAUD3DXQUATERNION@@@Z:PROC
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	__imp_?GetSkeletonName@ioEffect@@QBE?AVioHashString@@XZ:PROC
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	__imp_?CreateEffect@ioEffectFactory@@QAEPAVioEffect@@ABVioHashString@@@Z:PROC
EXTRN	?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ:PROC	; ioWeapon::GetOwner
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
xdata$x	SEGMENT
__unwindtable$?SetMesh@ioSimpleBoxWeapon@@IAE_NABVioHashString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetMesh@ioSimpleBoxWeapon@@IAE_NABVioHashString@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SetMesh@ioSimpleBoxWeapon@@IAE_NABVioHashString@@@Z$1
__ehfuncinfo$?SetMesh@ioSimpleBoxWeapon@@IAE_NABVioHashString@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetMesh@ioSimpleBoxWeapon@@IAE_NABVioHashString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosimpleboxweapon.cpp
xdata$x	ENDS
;	COMDAT ?SetMesh@ioSimpleBoxWeapon@@IAE_NABVioHashString@@@Z
_TEXT	SEGMENT
_qtLinkRotOffset$ = -100				; size = 16
_szLinkBiped$ = -84					; size = 16
$T531696 = -68						; size = 4
_this$GSCopy$ = -64					; size = 4
$T531690 = -57						; size = 1
$T531691 = -56						; size = 16
$T530589 = -52						; size = 12
_vLinkPosOffset$ = -40					; size = 12
$T530590 = -28						; size = 12
$T530588 = -28						; size = 12
$T530587 = -28						; size = 12
$T530586 = -28						; size = 12
__$EHRec$ = -12						; size = 12
_szFileName$ = 8					; size = 4
?SetMesh@ioSimpleBoxWeapon@@IAE_NABVioHashString@@@Z PROC ; ioSimpleBoxWeapon::SetMesh, COMDAT
; _this$ = ecx

; 69   : {

  00000	6a 58		 push	 88			; 00000058H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?SetMesh@ioSimpleBoxWeapon@@IAE_NABVioHashString@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 7d 08	 mov	 edi, DWORD PTR _szFileName$[ebp]
  0000f	83 65 bc 00	 and	 DWORD PTR $T531696[ebp], 0
  00013	8b f1		 mov	 esi, ecx

; 88   : 		{
; 89   : 			vLinkPosOffset = pLinked->GetDerivedOrientation() * vLinkPosOffset + pLinked->GetDerivedPosition();

  00015	89 75 c0	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  00018	e8 00 00 00 00	 call	 ?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ ; ioWeapon::GetOwner
  0001d	8b d8		 mov	 ebx, eax
  0001f	85 db		 test	 ebx, ebx
  00021	75 07		 jne	 SHORT $LN4@SetMesh
$LN33@SetMesh:

; 70   : 	ioBaseChar *pOwner = GetOwner();
; 71   : 	if( !pOwner )	
; 72   : 		return false;

  00023	32 c0		 xor	 al, al
  00025	e9 fd 01 00 00	 jmp	 $LN5@SetMesh
$LN4@SetMesh:

; 73   : 
; 74   : 	m_pMesh = g_EffectFactory.CreateEffect( szFileName );

  0002a	57		 push	 edi
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioEffectFactory@@SAAAV1@XZ
  00031	8b c8		 mov	 ecx, eax
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CreateEffect@ioEffectFactory@@QAEPAVioEffect@@ABVioHashString@@@Z
  00039	89 86 94 08 00
	00		 mov	 DWORD PTR [esi+2196], eax

; 75   : 	if( !m_pMesh )	

  0003f	85 c0		 test	 eax, eax

; 76   : 		return false;

  00041	74 e0		 je	 SHORT $LN33@SetMesh

; 77   : 
; 78   : 	GetParentSceneNode()->AttachObject( m_pMesh );

  00043	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00046	8b 11		 mov	 edx, DWORD PTR [ecx]
  00048	83 c0 14	 add	 eax, 20			; 00000014H
  0004b	50		 push	 eax
  0004c	ff 92 ac 00 00
	00		 call	 DWORD PTR [edx+172]

; 79   : 
; 80   : 	ioHashString szLinkBiped;

  00052	8d 4d ac	 lea	 ecx, DWORD PTR _szLinkBiped$[ebp]
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 81   : 	D3DXVECTOR3 vLinkPosOffset;
; 82   : 	D3DXQUATERNION qtLinkRotOffset;
; 83   : 
; 84   : 	if( m_pMesh->GetSkeletonName().IsEmpty() && m_pMesh->GetFirstLinkOffset(szLinkBiped, vLinkPosOffset, qtLinkRotOffset ) )

  0005b	8b 8e 94 08 00
	00		 mov	 ecx, DWORD PTR [esi+2196]
  00061	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00065	8d 45 c8	 lea	 eax, DWORD PTR $T531691[ebp]
  00068	50		 push	 eax
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSkeletonName@ioEffect@@QBE?AVioHashString@@XZ
  0006f	8b c8		 mov	 ecx, eax
  00071	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00075	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR $T531696[ebp], 1
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00082	84 c0		 test	 al, al
  00084	74 20		 je	 SHORT $LN9@SetMesh
  00086	8b 8e 94 08 00
	00		 mov	 ecx, DWORD PTR [esi+2196]
  0008c	8d 45 9c	 lea	 eax, DWORD PTR _qtLinkRotOffset$[ebp]
  0008f	50		 push	 eax
  00090	8d 45 d8	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]
  00093	50		 push	 eax
  00094	8d 45 ac	 lea	 eax, DWORD PTR _szLinkBiped$[ebp]
  00097	50		 push	 eax
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetFirstLinkOffset@ioEffect@@QAE_NAAVioHashString@@AAUD3DXVECTOR3@@AAUD3DXQUATERNION@@@Z
  0009e	c6 45 c7 01	 mov	 BYTE PTR $T531690[ebp], 1
  000a2	84 c0		 test	 al, al
  000a4	75 04		 jne	 SHORT $LN10@SetMesh
$LN9@SetMesh:
  000a6	c6 45 c7 00	 mov	 BYTE PTR $T531690[ebp], 0
$LN10@SetMesh:
  000aa	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  000ae	8d 4d c8	 lea	 ecx, DWORD PTR $T531691[ebp]
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  000b7	80 7d c7 00	 cmp	 BYTE PTR $T531690[ebp], 0
  000bb	0f 84 47 01 00
	00		 je	 $LN1@SetMesh

; 85   : 	{
; 86   : 		ioBiped *pLinked = pOwner->GetGroup()->GetBiped( szLinkBiped );

  000c1	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000c4	8d 45 ac	 lea	 eax, DWORD PTR _szLinkBiped$[ebp]
  000c7	50		 push	 eax
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetBiped@ioEntityGroup@@QAEPAVioBiped@@ABVioHashString@@@Z
  000ce	8b f8		 mov	 edi, eax

; 87   : 		if( pLinked )

  000d0	85 ff		 test	 edi, edi
  000d2	0f 84 30 01 00
	00		 je	 $LN1@SetMesh

; 88   : 		{
; 89   : 			vLinkPosOffset = pLinked->GetDerivedOrientation() * vLinkPosOffset + pLinked->GetDerivedPosition();

  000d8	8b 07		 mov	 eax, DWORD PTR [edi]
  000da	8b cf		 mov	 ecx, edi
  000dc	ff 50 7c	 call	 DWORD PTR [eax+124]
  000df	8b f0		 mov	 esi, eax
  000e1	8d 45 d8	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]
  000e4	50		 push	 eax
  000e5	8b 07		 mov	 eax, DWORD PTR [edi]
  000e7	8b cf		 mov	 ecx, edi
  000e9	ff 50 78	 call	 DWORD PTR [eax+120]
  000ec	50		 push	 eax
  000ed	8d 45 e4	 lea	 eax, DWORD PTR $T530586[ebp]
  000f0	50		 push	 eax
  000f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  000f7	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  000fb	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  000ff	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00104	f3 0f 10 58 08	 movss	 xmm3, DWORD PTR [eax+8]
  00109	0f 5a c9	 cvtps2pd xmm1, xmm1
  0010c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0010f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00113	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  00118	0f 5a d2	 cvtps2pd xmm2, xmm2
  0011b	0f 5a c9	 cvtps2pd xmm1, xmm1
  0011e	f2 0f 58 ca	 addsd	 xmm1, xmm2
  00122	f3 0f 10 56 08	 movss	 xmm2, DWORD PTR [esi+8]
  00127	0f 5a d2	 cvtps2pd xmm2, xmm2
  0012a	0f 5a db	 cvtps2pd xmm3, xmm3
  0012d	f2 0f 58 d3	 addsd	 xmm2, xmm3
  00131	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00135	f3 0f 11 45 e4	 movss	 DWORD PTR $T530587[ebp], xmm0
  0013a	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  0013e	f3 0f 11 4d e8	 movss	 DWORD PTR $T530587[ebp+4], xmm1
  00143	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  00147	f3 0f 11 55 ec	 movss	 DWORD PTR $T530587[ebp+8], xmm2
  0014c	8d 75 e4	 lea	 esi, DWORD PTR $T530587[ebp]
  0014f	8d 7d d8	 lea	 edi, DWORD PTR _vLinkPosOffset$[ebp]
  00152	a5		 movsd
  00153	a5		 movsd
  00154	a5		 movsd

; 90   : 			vLinkPosOffset = vLinkPosOffset * pOwner->GetWorldScale();

  00155	8b 03		 mov	 eax, DWORD PTR [ebx]
  00157	83 c4 0c	 add	 esp, 12			; 0000000cH
  0015a	8b cb		 mov	 ecx, ebx
  0015c	ff 50 78	 call	 DWORD PTR [eax+120]
  0015f	50		 push	 eax
  00160	8d 45 d8	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]
  00163	50		 push	 eax
  00164	8d 45 e4	 lea	 eax, DWORD PTR $T530588[ebp]
  00167	50		 push	 eax
  00168	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABU0@0@Z
  0016e	8b f0		 mov	 esi, eax
  00170	8d 7d d8	 lea	 edi, DWORD PTR _vLinkPosOffset$[ebp]
  00173	a5		 movsd
  00174	a5		 movsd
  00175	a5		 movsd

; 91   : 			vLinkPosOffset = pOwner->GetWorldOrientation() * vLinkPosOffset + pOwner->GetWorldPosition();

  00176	8b 03		 mov	 eax, DWORD PTR [ebx]
  00178	83 c4 0c	 add	 esp, 12			; 0000000cH
  0017b	8b cb		 mov	 ecx, ebx
  0017d	ff 50 70	 call	 DWORD PTR [eax+112]
  00180	8b f0		 mov	 esi, eax
  00182	8d 45 d8	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]
  00185	50		 push	 eax
  00186	8b 03		 mov	 eax, DWORD PTR [ebx]
  00188	8b cb		 mov	 ecx, ebx
  0018a	ff 50 74	 call	 DWORD PTR [eax+116]
  0018d	50		 push	 eax
  0018e	8d 45 cc	 lea	 eax, DWORD PTR $T530589[ebp]
  00191	50		 push	 eax
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  00198	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  0019c	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  001a0	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  001a5	0f 5a c9	 cvtps2pd xmm1, xmm1
  001a8	0f 5a c0	 cvtps2pd xmm0, xmm0
  001ab	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001af	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  001b4	0f 5a c9	 cvtps2pd xmm1, xmm1
  001b7	0f 5a d2	 cvtps2pd xmm2, xmm2
  001ba	f2 0f 58 ca	 addsd	 xmm1, xmm2
  001be	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c1	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  001c5	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  001c9	f3 0f 10 56 08	 movss	 xmm2, DWORD PTR [esi+8]
  001ce	f3 0f 10 58 08	 movss	 xmm3, DWORD PTR [eax+8]

; 92   : 			SetPosition( vLinkPosOffset );

  001d3	8b 4d c0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001d6	0f 5a d2	 cvtps2pd xmm2, xmm2
  001d9	0f 5a db	 cvtps2pd xmm3, xmm3
  001dc	f2 0f 58 d3	 addsd	 xmm2, xmm3
  001e0	f3 0f 11 45 e4	 movss	 DWORD PTR $T530590[ebp], xmm0
  001e5	f3 0f 11 4d e8	 movss	 DWORD PTR $T530590[ebp+4], xmm1
  001ea	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  001ee	f3 0f 11 55 ec	 movss	 DWORD PTR $T530590[ebp+8], xmm2
  001f3	8d 75 e4	 lea	 esi, DWORD PTR $T530590[ebp]
  001f6	8d 7d d8	 lea	 edi, DWORD PTR _vLinkPosOffset$[ebp]
  001f9	a5		 movsd
  001fa	a5		 movsd
  001fb	8d 45 d8	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]
  001fe	50		 push	 eax
  001ff	a5		 movsd
  00200	e8 00 00 00 00	 call	 ?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z ; ioWeapon::SetPosition
  00205	8b 75 c0	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
$LN1@SetMesh:

; 93   : 		}
; 94   : 	}
; 95   : 	
; 96   : 	AddEffectEvent( m_pMesh );

  00208	ff b6 94 08 00
	00		 push	 DWORD PTR [esi+2196]
  0020e	8b 06		 mov	 eax, DWORD PTR [esi]
  00210	8b ce		 mov	 ecx, esi
  00212	ff 90 68 01 00
	00		 call	 DWORD PTR [eax+360]

; 97   : 	return true;

  00218	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0021c	8d 4d ac	 lea	 ecx, DWORD PTR _szLinkBiped$[ebp]
  0021f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00225	b0 01		 mov	 al, 1
$LN5@SetMesh:

; 98   : }

  00227	e8 00 00 00 00	 call	 __EH_epilog3_GS
  0022c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetMesh@ioSimpleBoxWeapon@@IAE_NABVioHashString@@@Z$0:
  00000	8d 4d ac	 lea	 ecx, DWORD PTR _szLinkBiped$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?SetMesh@ioSimpleBoxWeapon@@IAE_NABVioHashString@@@Z$1:
  00009	8b 45 bc	 mov	 eax, DWORD PTR $T531696[ebp]
  0000c	83 e0 01	 and	 eax, 1
  0000f	0f 84 0d 00 00
	00		 je	 $LN13@SetMesh
  00015	83 65 bc fe	 and	 DWORD PTR $T531696[ebp], -2 ; fffffffeH
  00019	8d 4d c8	 lea	 ecx, DWORD PTR $T531691[ebp]
  0001c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
$LN13@SetMesh:
  00022	c3		 ret	 0
__ehhandler$?SetMesh@ioSimpleBoxWeapon@@IAE_NABVioHashString@@@Z:
  00023	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00027	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002a	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00037	33 c8		 xor	 ecx, eax
  00039	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetMesh@ioSimpleBoxWeapon@@IAE_NABVioHashString@@@Z
  00043	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetMesh@ioSimpleBoxWeapon@@IAE_NABVioHashString@@@Z ENDP ; ioSimpleBoxWeapon::SetMesh
PUBLIC	_this$GSCopy$
PUBLIC	?ProcessAttach@ioSimpleBoxWeapon@@QAEXMPAVioPlayStage@@@Z ; ioSimpleBoxWeapon::ProcessAttach
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
xdata$x	SEGMENT
__unwindtable$?ProcessAttach@ioSimpleBoxWeapon@@QAEXMPAVioPlayStage@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessAttach@ioSimpleBoxWeapon@@QAEXMPAVioPlayStage@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ProcessAttach@ioSimpleBoxWeapon@@QAEXMPAVioPlayStage@@@Z$1
__ehfuncinfo$?ProcessAttach@ioSimpleBoxWeapon@@QAEXMPAVioPlayStage@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ProcessAttach@ioSimpleBoxWeapon@@QAEXMPAVioPlayStage@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosimpleboxweapon.cpp
xdata$x	ENDS
;	COMDAT ?ProcessAttach@ioSimpleBoxWeapon@@QAEXMPAVioPlayStage@@@Z
_TEXT	SEGMENT
_qtLinkRotOffset$ = -100				; size = 16
_szLinkBiped$ = -84					; size = 16
_this$GSCopy$ = -68					; size = 4
$T531760 = -64						; size = 4
$T531755 = -57						; size = 1
$T531756 = -56						; size = 16
$T530659 = -52						; size = 12
_vLinkPosOffset$ = -40					; size = 12
$T530660 = -28						; size = 12
$T530658 = -28						; size = 12
$T530657 = -28						; size = 12
$T530656 = -28						; size = 12
__$EHRec$ = -12						; size = 12
_fTimePerSec$ = 8					; size = 4
_pStage$ = 12						; size = 4
?ProcessAttach@ioSimpleBoxWeapon@@QAEXMPAVioPlayStage@@@Z PROC ; ioSimpleBoxWeapon::ProcessAttach, COMDAT
; _this$ = ecx

; 177  : {

  00000	6a 58		 push	 88			; 00000058H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?ProcessAttach@ioSimpleBoxWeapon@@QAEXMPAVioPlayStage@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b f9		 mov	 edi, ecx

; 192  : 		{
; 193  : 			vLinkPosOffset = pLinked->GetDerivedOrientation() * vLinkPosOffset + pLinked->GetDerivedPosition();

  0000e	33 f6		 xor	 esi, esi
  00010	89 7d bc	 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00013	89 75 c0	 mov	 DWORD PTR $T531760[ebp], esi
  00016	e8 00 00 00 00	 call	 ?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ ; ioWeapon::GetOwner
  0001b	8b d8		 mov	 ebx, eax
  0001d	3b de		 cmp	 ebx, esi
  0001f	0f 84 be 01 00
	00		 je	 $LN4@ProcessAtt

; 178  : 	ioBaseChar *pOwner = GetOwner();
; 179  : 	if( !pOwner )
; 180  : 		return;
; 181  : 
; 182  : 	ioHashString szLinkBiped;

  00025	8d 4d ac	 lea	 ecx, DWORD PTR _szLinkBiped$[ebp]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 183  : 	D3DXVECTOR3 vLinkPosOffset;
; 184  : 	D3DXQUATERNION qtLinkRotOffset;
; 185  : 
; 186  : 	if( m_pMesh->GetSkeletonName().IsEmpty() && m_pMesh->GetFirstLinkOffset( szLinkBiped,
; 187  : 																			 vLinkPosOffset,
; 188  : 																			 qtLinkRotOffset ) )

  0002e	8b 8f 94 08 00
	00		 mov	 ecx, DWORD PTR [edi+2196]
  00034	8d 45 c8	 lea	 eax, DWORD PTR $T531756[ebp]
  00037	50		 push	 eax
  00038	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSkeletonName@ioEffect@@QBE?AVioHashString@@XZ
  00041	8b c8		 mov	 ecx, eax
  00043	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00047	c7 45 c0 01 00
	00 00		 mov	 DWORD PTR $T531760[ebp], 1
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00054	84 c0		 test	 al, al
  00056	74 20		 je	 SHORT $LN6@ProcessAtt
  00058	8b 8f 94 08 00
	00		 mov	 ecx, DWORD PTR [edi+2196]
  0005e	8d 45 9c	 lea	 eax, DWORD PTR _qtLinkRotOffset$[ebp]
  00061	50		 push	 eax
  00062	8d 45 d8	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]
  00065	50		 push	 eax
  00066	8d 45 ac	 lea	 eax, DWORD PTR _szLinkBiped$[ebp]
  00069	50		 push	 eax
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetFirstLinkOffset@ioEffect@@QAE_NAAVioHashString@@AAUD3DXVECTOR3@@AAUD3DXQUATERNION@@@Z
  00070	c6 45 c7 01	 mov	 BYTE PTR $T531755[ebp], 1
  00074	84 c0		 test	 al, al
  00076	75 04		 jne	 SHORT $LN7@ProcessAtt
$LN6@ProcessAtt:
  00078	c6 45 c7 00	 mov	 BYTE PTR $T531755[ebp], 0
$LN7@ProcessAtt:
  0007c	8d 4d c8	 lea	 ecx, DWORD PTR $T531756[ebp]
  0007f	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00088	80 7d c7 00	 cmp	 BYTE PTR $T531755[ebp], 0
  0008c	0f 84 44 01 00
	00		 je	 $LN1@ProcessAtt

; 189  : 	{
; 190  : 		ioBiped *pLinked = pOwner->GetGroup()->GetBiped( szLinkBiped );

  00092	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00095	8d 45 ac	 lea	 eax, DWORD PTR _szLinkBiped$[ebp]
  00098	50		 push	 eax
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetBiped@ioEntityGroup@@QAEPAVioBiped@@ABVioHashString@@@Z
  0009f	8b f8		 mov	 edi, eax

; 191  : 		if( pLinked )

  000a1	3b fe		 cmp	 edi, esi
  000a3	0f 84 2d 01 00
	00		 je	 $LN1@ProcessAtt

; 192  : 		{
; 193  : 			vLinkPosOffset = pLinked->GetDerivedOrientation() * vLinkPosOffset + pLinked->GetDerivedPosition();

  000a9	8b 07		 mov	 eax, DWORD PTR [edi]
  000ab	8b cf		 mov	 ecx, edi
  000ad	ff 50 7c	 call	 DWORD PTR [eax+124]
  000b0	8b f0		 mov	 esi, eax
  000b2	8d 45 d8	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]
  000b5	50		 push	 eax
  000b6	8b 07		 mov	 eax, DWORD PTR [edi]
  000b8	8b cf		 mov	 ecx, edi
  000ba	ff 50 78	 call	 DWORD PTR [eax+120]
  000bd	50		 push	 eax
  000be	8d 45 e4	 lea	 eax, DWORD PTR $T530656[ebp]
  000c1	50		 push	 eax
  000c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  000c8	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  000cc	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  000d0	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  000d5	f3 0f 10 58 08	 movss	 xmm3, DWORD PTR [eax+8]
  000da	0f 5a c9	 cvtps2pd xmm1, xmm1
  000dd	0f 5a c0	 cvtps2pd xmm0, xmm0
  000e0	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000e4	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  000e9	0f 5a d2	 cvtps2pd xmm2, xmm2
  000ec	0f 5a c9	 cvtps2pd xmm1, xmm1
  000ef	f2 0f 58 ca	 addsd	 xmm1, xmm2
  000f3	f3 0f 10 56 08	 movss	 xmm2, DWORD PTR [esi+8]
  000f8	0f 5a d2	 cvtps2pd xmm2, xmm2
  000fb	0f 5a db	 cvtps2pd xmm3, xmm3
  000fe	f2 0f 58 d3	 addsd	 xmm2, xmm3
  00102	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00106	f3 0f 11 45 e4	 movss	 DWORD PTR $T530657[ebp], xmm0
  0010b	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  0010f	f3 0f 11 4d e8	 movss	 DWORD PTR $T530657[ebp+4], xmm1
  00114	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  00118	f3 0f 11 55 ec	 movss	 DWORD PTR $T530657[ebp+8], xmm2
  0011d	8d 75 e4	 lea	 esi, DWORD PTR $T530657[ebp]
  00120	8d 7d d8	 lea	 edi, DWORD PTR _vLinkPosOffset$[ebp]
  00123	a5		 movsd
  00124	a5		 movsd
  00125	a5		 movsd

; 194  : 			vLinkPosOffset = vLinkPosOffset * pOwner->GetWorldScale();

  00126	8b 03		 mov	 eax, DWORD PTR [ebx]
  00128	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012b	8b cb		 mov	 ecx, ebx
  0012d	ff 50 78	 call	 DWORD PTR [eax+120]
  00130	50		 push	 eax
  00131	8d 45 d8	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]
  00134	50		 push	 eax
  00135	8d 45 e4	 lea	 eax, DWORD PTR $T530658[ebp]
  00138	50		 push	 eax
  00139	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABU0@0@Z
  0013f	8b f0		 mov	 esi, eax
  00141	8d 7d d8	 lea	 edi, DWORD PTR _vLinkPosOffset$[ebp]
  00144	a5		 movsd
  00145	a5		 movsd
  00146	a5		 movsd

; 195  : 			vLinkPosOffset = pOwner->GetWorldOrientation() * vLinkPosOffset + pOwner->GetWorldPosition();

  00147	8b 03		 mov	 eax, DWORD PTR [ebx]
  00149	83 c4 0c	 add	 esp, 12			; 0000000cH
  0014c	8b cb		 mov	 ecx, ebx
  0014e	ff 50 70	 call	 DWORD PTR [eax+112]
  00151	8b f0		 mov	 esi, eax
  00153	8d 45 d8	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]
  00156	50		 push	 eax
  00157	8b 03		 mov	 eax, DWORD PTR [ebx]
  00159	8b cb		 mov	 ecx, ebx
  0015b	ff 50 74	 call	 DWORD PTR [eax+116]
  0015e	50		 push	 eax
  0015f	8d 45 cc	 lea	 eax, DWORD PTR $T530659[ebp]
  00162	50		 push	 eax
  00163	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  00169	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  0016d	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00171	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00176	0f 5a c9	 cvtps2pd xmm1, xmm1
  00179	0f 5a c0	 cvtps2pd xmm0, xmm0
  0017c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00180	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  00185	0f 5a c9	 cvtps2pd xmm1, xmm1
  00188	0f 5a d2	 cvtps2pd xmm2, xmm2
  0018b	f2 0f 58 ca	 addsd	 xmm1, xmm2
  0018f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00192	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00196	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  0019a	f3 0f 10 56 08	 movss	 xmm2, DWORD PTR [esi+8]
  0019f	f3 0f 10 58 08	 movss	 xmm3, DWORD PTR [eax+8]

; 196  : 			SetPosition( vLinkPosOffset );

  001a4	8b 4d bc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001a7	0f 5a d2	 cvtps2pd xmm2, xmm2
  001aa	0f 5a db	 cvtps2pd xmm3, xmm3
  001ad	f2 0f 58 d3	 addsd	 xmm2, xmm3
  001b1	f3 0f 11 45 e4	 movss	 DWORD PTR $T530660[ebp], xmm0
  001b6	f3 0f 11 4d e8	 movss	 DWORD PTR $T530660[ebp+4], xmm1
  001bb	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  001bf	f3 0f 11 55 ec	 movss	 DWORD PTR $T530660[ebp+8], xmm2
  001c4	8d 75 e4	 lea	 esi, DWORD PTR $T530660[ebp]
  001c7	8d 7d d8	 lea	 edi, DWORD PTR _vLinkPosOffset$[ebp]
  001ca	a5		 movsd
  001cb	a5		 movsd
  001cc	8d 45 d8	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]
  001cf	50		 push	 eax
  001d0	a5		 movsd
  001d1	e8 00 00 00 00	 call	 ?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z ; ioWeapon::SetPosition
$LN1@ProcessAtt:

; 197  : 		}
; 198  : 	}
; 199  : }

  001d6	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001da	8d 4d ac	 lea	 ecx, DWORD PTR _szLinkBiped$[ebp]
  001dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
$LN4@ProcessAtt:
  001e3	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001e8	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ProcessAttach@ioSimpleBoxWeapon@@QAEXMPAVioPlayStage@@@Z$0:
  00000	8d 4d ac	 lea	 ecx, DWORD PTR _szLinkBiped$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?ProcessAttach@ioSimpleBoxWeapon@@QAEXMPAVioPlayStage@@@Z$1:
  00009	8b 45 c0	 mov	 eax, DWORD PTR $T531760[ebp]
  0000c	83 e0 01	 and	 eax, 1
  0000f	0f 84 0d 00 00
	00		 je	 $LN10@ProcessAtt
  00015	83 65 c0 fe	 and	 DWORD PTR $T531760[ebp], -2 ; fffffffeH
  00019	8d 4d c8	 lea	 ecx, DWORD PTR $T531756[ebp]
  0001c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
$LN10@ProcessAtt:
  00022	c3		 ret	 0
__ehhandler$?ProcessAttach@ioSimpleBoxWeapon@@QAEXMPAVioPlayStage@@@Z:
  00023	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00027	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002a	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00037	33 c8		 xor	 ecx, eax
  00039	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ProcessAttach@ioSimpleBoxWeapon@@QAEXMPAVioPlayStage@@@Z
  00043	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ProcessAttach@ioSimpleBoxWeapon@@QAEXMPAVioPlayStage@@@Z ENDP ; ioSimpleBoxWeapon::ProcessAttach
PUBLIC	_bMapCollision$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	?GetWorldAttackBox@ioWeapon@@QBEABVioOrientBox@@_N@Z:PROC ; ioWeapon::GetWorldAttackBox
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?IsCollision@ioSimpleBoxWeapon@@UAE_NPAVioPlayEntity@@_N@Z
_TEXT	SEGMENT
_bMapCollision$GSCopy$ = -24				; size = 1
_bCollision$ = -20					; size = 1
_vColPoint$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_pEntity$ = 8						; size = 4
_bMapCollision$ = 12					; size = 1
?IsCollision@ioSimpleBoxWeapon@@UAE_NPAVioPlayEntity@@_N@Z PROC ; ioSimpleBoxWeapon::IsCollision, COMDAT
; _this$ = ecx

; 202  : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 203  : 	bool bCollision = false;
; 204  : 	D3DXVECTOR3 vColPoint( 0.0f, 0.0f, 0.0f );
; 205  : 	if( pEntity->IsWoundedCollision( GetWorldAttackBox(bMapCollision), &vColPoint ) )

  00010	8a 45 0c	 mov	 al, BYTE PTR _bMapCollision$[ebp]
  00013	0f 57 c0	 xorps	 xmm0, xmm0
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR _pEntity$[ebp]
  0001b	57		 push	 edi
  0001c	8b 3e		 mov	 edi, DWORD PTR [esi]
  0001e	88 45 e8	 mov	 BYTE PTR _bMapCollision$GSCopy$[ebp], al
  00021	8d 45 f0	 lea	 eax, DWORD PTR _vColPoint$[ebp]
  00024	50		 push	 eax
  00025	ff 75 e8	 push	 DWORD PTR _bMapCollision$GSCopy$[ebp]
  00028	8b d9		 mov	 ebx, ecx
  0002a	c6 45 ec 00	 mov	 BYTE PTR _bCollision$[ebp], 0
  0002e	f3 0f 11 45 f0	 movss	 DWORD PTR _vColPoint$[ebp], xmm0
  00033	f3 0f 11 45 f4	 movss	 DWORD PTR _vColPoint$[ebp+4], xmm0
  00038	f3 0f 11 45 f8	 movss	 DWORD PTR _vColPoint$[ebp+8], xmm0
  0003d	e8 00 00 00 00	 call	 ?GetWorldAttackBox@ioWeapon@@QBEABVioOrientBox@@_N@Z ; ioWeapon::GetWorldAttackBox
  00042	50		 push	 eax
  00043	8b ce		 mov	 ecx, esi
  00045	ff 97 90 00 00
	00		 call	 DWORD PTR [edi+144]
  0004b	84 c0		 test	 al, al
  0004d	74 04		 je	 SHORT $LN1@IsCollisio

; 206  : 		bCollision = true;

  0004f	c6 45 ec 01	 mov	 BYTE PTR _bCollision$[ebp], 1
$LN1@IsCollisio:

; 207  : 
; 208  : 	CheckPiercing( bCollision );

  00053	ff 75 ec	 push	 DWORD PTR _bCollision$[ebp]
  00056	8b 03		 mov	 eax, DWORD PTR [ebx]
  00058	8b cb		 mov	 ecx, ebx
  0005a	ff 90 48 01 00
	00		 call	 DWORD PTR [eax+328]

; 209  : 	
; 210  : 	return bCollision;
; 211  : }

  00060	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00063	8a 45 ec	 mov	 al, BYTE PTR _bCollision$[ebp]
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	33 cd		 xor	 ecx, ebp
  0006a	5b		 pop	 ebx
  0006b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00070	c9		 leave
  00071	c2 08 00	 ret	 8
?IsCollision@ioSimpleBoxWeapon@@UAE_NPAVioPlayEntity@@_N@Z ENDP ; ioSimpleBoxWeapon::IsCollision
_TEXT	ENDS
PUBLIC	__real@bff0000000000000
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	?SetOrientation@ioWeapon@@QAEXABUD3DXQUATERNION@@@Z:PROC ; ioWeapon::SetOrientation
EXTRN	?CheckOrientation@ioPlayEntityHelp@@YAXABUD3DXVECTOR3@@AAUD3DXQUATERNION@@@Z:PROC ; ioPlayEntityHelp::CheckOrientation
EXTRN	__imp_?UNIT_Y@ioMath@@2UD3DXVECTOR3@@A:BYTE
EXTRN	_D3DXQuaternionRotationAxis@12:PROC
EXTRN	__imp_?ArrangeHead@ioMath@@SAMM@Z:PROC
;	COMDAT __real@bff0000000000000
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosimpleboxweapon.cpp
CONST	ENDS
;	COMDAT ?SetMoveDir@ioSimpleBoxWeapon@@UAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_qtRotDir$ = -72					; size = 16
_qtRot$530697 = -56					; size = 16
_fAngleH$530695 = -40					; size = 4
_this$GSCopy$ = -36					; size = 4
tv361 = -32						; size = 4
_fAngleV$530696 = -32					; size = 4
_vAxis$530698 = -28					; size = 12
_v$531840 = -16						; size = 12
$T530705 = -16						; size = 12
$T530704 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_vDir$ = 8						; size = 4
?SetMoveDir@ioSimpleBoxWeapon@@UAEXABUD3DXVECTOR3@@@Z PROC ; ioSimpleBoxWeapon::SetMoveDir, COMDAT
; _this$ = ecx

; 260  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi

; 261  : 	m_vMoveDir = vDir;

  00012	8b 75 08	 mov	 esi, DWORD PTR _vDir$[ebp]
  00015	8b c1		 mov	 eax, ecx

; 262  : 
; 263  : 	if( m_bRotateMoveDir )

  00017	80 b8 b2 08 00
	00 00		 cmp	 BYTE PTR [eax+2226], 0
  0001e	57		 push	 edi
  0001f	8d 98 9c 08 00
	00		 lea	 ebx, DWORD PTR [eax+2204]
  00025	8b fb		 mov	 edi, ebx
  00027	a5		 movsd
  00028	a5		 movsd

; 277  : 	}
; 278  : 
; 279  : 	D3DXQUATERNION qtRotDir;
; 280  : 	ioPlayEntityHelp::CheckOrientation( m_vMoveDir, qtRotDir );

  00029	89 45 dc	 mov	 DWORD PTR _this$GSCopy$[ebp], eax
  0002c	a5		 movsd
  0002d	0f 84 1c 01 00
	00		 je	 $LN1@SetMoveDir

; 264  : 	{
; 265  : 		float fAngleH = ioMath::ArrangeHead( m_fRotateY );

  00033	f3 0f 10 80 b4
	08 00 00	 movss	 xmm0, DWORD PTR [eax+2228]
  0003b	51		 push	 ecx
  0003c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ArrangeHead@ioMath@@SAMM@Z
  00047	d9 5d d8	 fstp	 DWORD PTR _fAngleH$530695[ebp]

; 266  : 		float fAngleV = ioMath::ArrangeHead( m_fRotateX );

  0004a	8b 45 dc	 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  0004d	f3 0f 10 80 b8
	08 00 00	 movss	 xmm0, DWORD PTR [eax+2232]
  00055	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ArrangeHead@ioMath@@SAMM@Z
  00060	d9 5d e0	 fstp	 DWORD PTR _fAngleV$530696[ebp]

; 267  : 
; 268  : 		D3DXQUATERNION qtRot;
; 269  : 		D3DXVECTOR3 vAxis;
; 270  : 		D3DXVec3Cross( &vAxis, &m_vMoveDir, &D3DXVECTOR3( 0.0f, -1.0f, 0.0f ) );

  00063	f3 0f 10 43 04	 movss	 xmm0, DWORD PTR [ebx+4]

; 271  : 		// vertical
; 272  : 		D3DXQuaternionRotationAxis( &qtRot, &vAxis, DEGtoRAD(fAngleV) );

  00068	d9 45 e0	 fld	 DWORD PTR _fAngleV$530696[ebp]
  0006b	f3 0f 10 5b 08	 movss	 xmm3, DWORD PTR [ebx+8]
  00070	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a2526c7a
  00076	0f 5a c8	 cvtps2pd xmm1, xmm0
  00079	0f 57 c0	 xorps	 xmm0, xmm0
  0007c	0f 5a e3	 cvtps2pd xmm4, xmm3
  0007f	d9 5d e0	 fstp	 DWORD PTR tv361[ebp]
  00082	f2 0f 59 25 00
	00 00 00	 mulsd	 xmm4, QWORD PTR __real@bff0000000000000
  0008a	d9 45 e0	 fld	 DWORD PTR tv361[ebp]
  0008d	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00091	d9 1c 24	 fstp	 DWORD PTR [esp]
  00094	66 0f 28 e9	 movapd	 xmm5, xmm1
  00098	f2 0f 5c ec	 subsd	 xmm5, xmm4
  0009c	0f 57 e4	 xorps	 xmm4, xmm4
  0009f	f2 0f 5a e5	 cvtsd2ss xmm4, xmm5
  000a3	f3 0f 11 65 f0	 movss	 DWORD PTR _v$531840[ebp], xmm4
  000a8	f3 0f 10 23	 movss	 xmm4, DWORD PTR [ebx]
  000ac	0f 5a db	 cvtps2pd xmm3, xmm3
  000af	f2 0f 59 d8	 mulsd	 xmm3, xmm0
  000b3	0f 5a ec	 cvtps2pd xmm5, xmm4
  000b6	f2 0f 59 e8	 mulsd	 xmm5, xmm0
  000ba	f2 0f 5c dd	 subsd	 xmm3, xmm5
  000be	66 0f 5a c3	 cvtpd2ps xmm0, xmm3
  000c2	f3 0f 11 45 f4	 movss	 DWORD PTR _v$531840[ebp+4], xmm0
  000c7	8d 75 f0	 lea	 esi, DWORD PTR _v$531840[ebp]
  000ca	8d 7d e4	 lea	 edi, DWORD PTR _vAxis$530698[ebp]
  000cd	8d 45 e4	 lea	 eax, DWORD PTR _vAxis$530698[ebp]
  000d0	50		 push	 eax
  000d1	0f 5a c4	 cvtps2pd xmm0, xmm4
  000d4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff0000000000000
  000dc	f2 0f 5c c1	 subsd	 xmm0, xmm1
  000e0	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000e4	f3 0f 11 45 f8	 movss	 DWORD PTR _v$531840[ebp+8], xmm0
  000e9	a5		 movsd
  000ea	a5		 movsd
  000eb	8d 45 c8	 lea	 eax, DWORD PTR _qtRot$530697[ebp]
  000ee	50		 push	 eax
  000ef	a5		 movsd
  000f0	e8 00 00 00 00	 call	 _D3DXQuaternionRotationAxis@12

; 273  : 		m_vMoveDir = qtRot * m_vMoveDir;

  000f5	53		 push	 ebx
  000f6	8d 45 c8	 lea	 eax, DWORD PTR _qtRot$530697[ebp]
  000f9	50		 push	 eax
  000fa	8d 45 f0	 lea	 eax, DWORD PTR $T530704[ebp]
  000fd	50		 push	 eax
  000fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z

; 274  : 		// horizon
; 275  : 		D3DXQuaternionRotationAxis( &qtRot, &ioMath::UNIT_Y, DEGtoRAD(fAngleH) );

  00104	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _fAngleH$530695[ebp]
  00109	8b f0		 mov	 esi, eax
  0010b	8b fb		 mov	 edi, ebx
  0010d	a5		 movsd
  0010e	a5		 movsd
  0010f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00112	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f91df46a2526c7a
  0011a	83 c4 08	 add	 esp, 8
  0011d	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00121	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00126	a5		 movsd
  00127	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?UNIT_Y@ioMath@@2UD3DXVECTOR3@@A
  0012d	8d 45 c8	 lea	 eax, DWORD PTR _qtRot$530697[ebp]
  00130	50		 push	 eax
  00131	e8 00 00 00 00	 call	 _D3DXQuaternionRotationAxis@12

; 276  : 		m_vMoveDir = qtRot * m_vMoveDir;

  00136	53		 push	 ebx
  00137	8d 45 c8	 lea	 eax, DWORD PTR _qtRot$530697[ebp]
  0013a	50		 push	 eax
  0013b	8d 45 f0	 lea	 eax, DWORD PTR $T530705[ebp]
  0013e	50		 push	 eax
  0013f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  00145	8b f0		 mov	 esi, eax
  00147	8b fb		 mov	 edi, ebx
  00149	83 c4 0c	 add	 esp, 12			; 0000000cH
  0014c	a5		 movsd
  0014d	a5		 movsd
  0014e	a5		 movsd
$LN1@SetMoveDir:

; 277  : 	}
; 278  : 
; 279  : 	D3DXQUATERNION qtRotDir;
; 280  : 	ioPlayEntityHelp::CheckOrientation( m_vMoveDir, qtRotDir );

  0014f	8d 45 b8	 lea	 eax, DWORD PTR _qtRotDir$[ebp]
  00152	50		 push	 eax
  00153	53		 push	 ebx
  00154	e8 00 00 00 00	 call	 ?CheckOrientation@ioPlayEntityHelp@@YAXABUD3DXVECTOR3@@AAUD3DXQUATERNION@@@Z ; ioPlayEntityHelp::CheckOrientation
  00159	59		 pop	 ecx
  0015a	59		 pop	 ecx

; 281  : 	SetOrientation( qtRotDir );

  0015b	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0015e	8d 45 b8	 lea	 eax, DWORD PTR _qtRotDir$[ebp]
  00161	50		 push	 eax
  00162	e8 00 00 00 00	 call	 ?SetOrientation@ioWeapon@@QAEXABUD3DXQUATERNION@@@Z ; ioWeapon::SetOrientation

; 282  : }

  00167	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016a	5f		 pop	 edi
  0016b	5e		 pop	 esi
  0016c	33 cd		 xor	 ecx, ebp
  0016e	5b		 pop	 ebx
  0016f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00174	c9		 leave
  00175	c2 04 00	 ret	 4
?SetMoveDir@ioSimpleBoxWeapon@@UAEXABUD3DXVECTOR3@@@Z ENDP ; ioSimpleBoxWeapon::SetMoveDir
_TEXT	ENDS
PUBLIC	?SetPointDir@ioSimpleBoxWeapon@@QAEXABUD3DXVECTOR3@@@Z ; ioSimpleBoxWeapon::SetPointDir
EXTRN	_D3DXVec3Normalize@8:PROC
; Function compile flags: /Ogsp
;	COMDAT ?SetPointDir@ioSimpleBoxWeapon@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_qtRot$ = -28						; size = 16
$T530711 = -12						; size = 12
_vPoint$ = 8						; size = 4
?SetPointDir@ioSimpleBoxWeapon@@QAEXABUD3DXVECTOR3@@@Z PROC ; ioSimpleBoxWeapon::SetPointDir, COMDAT
; _this$ = ecx

; 285  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b d9		 mov	 ebx, ecx

; 286  : 	m_vMoveDir = vPoint - GetPosition();

  0000a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0000c	57		 push	 edi
  0000d	ff 50 70	 call	 DWORD PTR [eax+112]
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _vPoint$[ebp]
  00013	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00017	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0001b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0001e	0f 5a c9	 cvtps2pd xmm1, xmm1
  00021	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00025	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0002a	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0002e	f3 0f 11 45 f4	 movss	 DWORD PTR $T530711[ebp], xmm0
  00033	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00038	0f 5a c0	 cvtps2pd xmm0, xmm0
  0003b	0f 5a c9	 cvtps2pd xmm1, xmm1
  0003e	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00042	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  00047	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0004b	f3 0f 11 45 f8	 movss	 DWORD PTR $T530711[ebp+4], xmm0
  00050	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00055	8d 83 9c 08 00
	00		 lea	 eax, DWORD PTR [ebx+2204]
  0005b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0005e	0f 5a c9	 cvtps2pd xmm1, xmm1
  00061	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00065	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00069	f3 0f 11 45 fc	 movss	 DWORD PTR $T530711[ebp+8], xmm0
  0006e	8b f8		 mov	 edi, eax
  00070	8d 75 f4	 lea	 esi, DWORD PTR $T530711[ebp]
  00073	a5		 movsd
  00074	a5		 movsd

; 287  : 	D3DXVec3Normalize( &m_vMoveDir, &m_vMoveDir );

  00075	50		 push	 eax
  00076	50		 push	 eax
  00077	a5		 movsd
  00078	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 288  : 
; 289  : 	D3DXQUATERNION qtRot;
; 290  : 	ioPlayEntityHelp::CheckOrientation( m_vMoveDir, qtRot );

  0007d	8d 45 e4	 lea	 eax, DWORD PTR _qtRot$[ebp]
  00080	50		 push	 eax
  00081	8d 83 9c 08 00
	00		 lea	 eax, DWORD PTR [ebx+2204]
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ?CheckOrientation@ioPlayEntityHelp@@YAXABUD3DXVECTOR3@@AAUD3DXQUATERNION@@@Z ; ioPlayEntityHelp::CheckOrientation
  0008d	59		 pop	 ecx
  0008e	59		 pop	 ecx

; 291  : 	SetOrientation( qtRot );

  0008f	8d 45 e4	 lea	 eax, DWORD PTR _qtRot$[ebp]
  00092	50		 push	 eax
  00093	8b cb		 mov	 ecx, ebx
  00095	e8 00 00 00 00	 call	 ?SetOrientation@ioWeapon@@QAEXABUD3DXQUATERNION@@@Z ; ioWeapon::SetOrientation
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx

; 292  : }

  0009d	c9		 leave
  0009e	c2 04 00	 ret	 4
?SetPointDir@ioSimpleBoxWeapon@@QAEXABUD3DXVECTOR3@@@Z ENDP ; ioSimpleBoxWeapon::SetPointDir
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$08@ioINILoader@@QAEHAAY08$$CBDH@Z	; ioINILoader::LoadInt_e<9>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadInt_e@$08@ioINILoader@@QAEHAAY08$$CBDH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 9
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$08@ioINILoader@@QAEHAAY08$$CBDH@Z PROC	; ioINILoader::LoadInt_e<9>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	84 d2		 test	 dl, dl
  00017	0f 84 ee 00 00
	00		 je	 $LN96@LoadInt_e
  0001d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00020	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00023	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00026	84 d2		 test	 dl, dl
  00028	0f 84 d7 00 00
	00		 je	 $LN95@LoadInt_e
  0002e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00031	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00034	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00037	84 d2		 test	 dl, dl
  00039	0f 84 c0 00 00
	00		 je	 $LN94@LoadInt_e
  0003f	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00042	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00045	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00048	84 d2		 test	 dl, dl
  0004a	0f 84 a9 00 00
	00		 je	 $LN93@LoadInt_e
  00050	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00053	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00056	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00059	84 d2		 test	 dl, dl
  0005b	0f 84 92 00 00
	00		 je	 $LN92@LoadInt_e
  00061	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00064	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00067	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006a	84 d2		 test	 dl, dl
  0006c	74 7f		 je	 SHORT $LN91@LoadInt_e
  0006e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00071	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00074	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00077	84 d2		 test	 dl, dl
  00079	74 6c		 je	 SHORT $LN90@LoadInt_e
  0007b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0007e	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00081	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00084	84 d2		 test	 dl, dl
  00086	74 59		 je	 SHORT $LN89@LoadInt_e
  00088	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0008b	80 78 08 00	 cmp	 BYTE PTR [eax+8], 0
  0008f	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  00092	74 7b		 je	 SHORT $LN1@LoadInt_e
  00094	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  00097	84 d2		 test	 dl, dl
  00099	74 40		 je	 SHORT $LN87@LoadInt_e
  0009b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0009e	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000a1	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000a4	84 d2		 test	 dl, dl
  000a6	74 2d		 je	 SHORT $LN86@LoadInt_e
  000a8	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ab	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000ae	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000b1	84 d2		 test	 dl, dl
  000b3	74 1a		 je	 SHORT $LN85@LoadInt_e
  000b5	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  000b8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000bb	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000be	84 c0		 test	 al, al
  000c0	74 07		 je	 SHORT $LN84@LoadInt_e
  000c2	34 ed		 xor	 al, -19			; ffffffedH
  000c4	88 45 f8	 mov	 BYTE PTR __k$[ebp+12], al
  000c7	eb 46		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  000c9	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  000cd	eb 40		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  000cf	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  000d3	eb 3a		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  000d5	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  000d9	eb 34		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  000db	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  000df	eb 2e		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  000e1	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  000e5	eb 28		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  000e7	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  000eb	eb 22		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  000ed	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  000f1	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  000f3	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  000f7	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  000f9	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  000fd	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  000ff	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00103	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  00105	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00109	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  0010b	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  0010f	6a 02		 push	 2
  00111	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00114	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+8], 0
  00118	5a		 pop	 edx
$LL104@LoadInt_e:
  00119	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0011f	83 c0 04	 add	 eax, 4
  00122	4a		 dec	 edx
  00123	75 f4		 jne	 SHORT $LL104@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  00125	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00128	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0012b	50		 push	 eax
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00132	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00135	33 cd		 xor	 ecx, ebp
  00137	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013c	c9		 leave
  0013d	c2 08 00	 ret	 8
??$LoadInt_e@$08@ioINILoader@@QAEHAAY08$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<9>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BC@@ioINILoader@@QAE_NAAY0BC@$$CBD_N@Z ; ioINILoader::LoadBool_e<18>
EXTRN	__imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0BC@@ioINILoader@@QAE_NAAY0BC@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -28						; size = 18
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BC@@ioINILoader@@QAE_NAAY0BC@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<18>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 be 01 00
	00		 je	 $LN96@LoadBool_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 a7 01 00
	00		 je	 $LN95@LoadBool_e
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 90 01 00
	00		 je	 $LN94@LoadBool_e
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 78 01 00
	00		 je	 $LN93@LoadBool_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 61 01 00
	00		 je	 $LN92@LoadBool_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 4a 01 00
	00		 je	 $LN91@LoadBool_e
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 34 01 00
	00		 je	 $LN90@LoadBool_e
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 1e 01 00
	00		 je	 $LN89@LoadBool_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 07 01 00
	00		 je	 $LN88@LoadBool_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 f0 00 00
	00		 je	 $LN87@LoadBool_e
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 da 00 00
	00		 je	 $LN86@LoadBool_e
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 c4 00 00
	00		 je	 $LN85@LoadBool_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 ad 00 00
	00		 je	 $LN84@LoadBool_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 96 00 00
	00		 je	 $LN83@LoadBool_e
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 80 00 00
	00		 je	 $LN82@LoadBool_e
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 6e		 je	 SHORT $LN81@LoadBool_e
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 5b		 je	 SHORT $LN80@LoadBool_e
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  0012d	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00130	0f 84 ac 00 00
	00		 je	 $LN1@LoadBool_e
  00136	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00139	84 d2		 test	 dl, dl
  0013b	74 3f		 je	 SHORT $LN78@LoadBool_e
  0013d	32 d1		 xor	 dl, cl
  0013f	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 2d		 je	 SHORT $LN77@LoadBool_e
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 1a		 je	 SHORT $LN76@LoadBool_e
  00156	8a 40 15	 mov	 al, BYTE PTR [eax+21]
  00159	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0015c	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015f	84 c0		 test	 al, al
  00161	74 07		 je	 SHORT $LN75@LoadBool_e
  00163	34 ec		 xor	 al, -20			; ffffffecH
  00165	88 45 f9	 mov	 BYTE PTR __k$[ebp+21], al
  00168	eb 78		 jmp	 SHORT $LN1@LoadBool_e
$LN75@LoadBool_e:
  0016a	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  0016e	eb 72		 jmp	 SHORT $LN1@LoadBool_e
$LN76@LoadBool_e:
  00170	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00174	eb 6c		 jmp	 SHORT $LN1@LoadBool_e
$LN77@LoadBool_e:
  00176	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0017a	eb 66		 jmp	 SHORT $LN1@LoadBool_e
$LN78@LoadBool_e:
  0017c	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  0017f	eb 61		 jmp	 SHORT $LN1@LoadBool_e
$LN80@LoadBool_e:
  00181	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00185	eb 5b		 jmp	 SHORT $LN1@LoadBool_e
$LN81@LoadBool_e:
  00187	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0018b	eb 55		 jmp	 SHORT $LN1@LoadBool_e
$LN82@LoadBool_e:
  0018d	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  00190	eb 50		 jmp	 SHORT $LN1@LoadBool_e
$LN83@LoadBool_e:
  00192	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00196	eb 4a		 jmp	 SHORT $LN1@LoadBool_e
$LN84@LoadBool_e:
  00198	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0019c	eb 44		 jmp	 SHORT $LN1@LoadBool_e
$LN85@LoadBool_e:
  0019e	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001a2	eb 3e		 jmp	 SHORT $LN1@LoadBool_e
$LN86@LoadBool_e:
  001a4	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001a7	eb 39		 jmp	 SHORT $LN1@LoadBool_e
$LN87@LoadBool_e:
  001a9	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  001ad	eb 33		 jmp	 SHORT $LN1@LoadBool_e
$LN88@LoadBool_e:
  001af	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001b3	eb 2d		 jmp	 SHORT $LN1@LoadBool_e
$LN89@LoadBool_e:
  001b5	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001b9	eb 27		 jmp	 SHORT $LN1@LoadBool_e
$LN90@LoadBool_e:
  001bb	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001be	eb 22		 jmp	 SHORT $LN1@LoadBool_e
$LN91@LoadBool_e:
  001c0	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  001c4	eb 1c		 jmp	 SHORT $LN1@LoadBool_e
$LN92@LoadBool_e:
  001c6	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001ca	eb 16		 jmp	 SHORT $LN1@LoadBool_e
$LN93@LoadBool_e:
  001cc	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001d0	eb 10		 jmp	 SHORT $LN1@LoadBool_e
$LN94@LoadBool_e:
  001d2	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001d6	eb 0a		 jmp	 SHORT $LN1@LoadBool_e
$LN95@LoadBool_e:
  001d8	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001dc	eb 04		 jmp	 SHORT $LN1@LoadBool_e
$LN96@LoadBool_e:
  001de	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e:
  001e2	6a 04		 push	 4
  001e4	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001e7	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+17], 0
  001eb	5a		 pop	 edx
$LL104@LoadBool_e:
  001ec	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001f2	83 c0 04	 add	 eax, 4
  001f5	4a		 dec	 edx
  001f6	75 f4		 jne	 SHORT $LL104@LoadBool_e

; 103  : 		return LoadBool(_k, b);

  001f8	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  001fb	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001ff	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00202	50		 push	 eax
  00203	8b ce		 mov	 ecx, esi
  00205	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  0020b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0020e	33 cd		 xor	 ecx, ebp
  00210	5e		 pop	 esi
  00211	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00216	c9		 leave
  00217	c2 08 00	 ret	 8
??$LoadBool_e@$0BC@@ioINILoader@@QAE_NAAY0BC@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<18>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z ; ioINILoader::LoadFloat_e<15>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<15>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 75 01 00
	00		 je	 $LN96@LoadFloat_
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 5e 01 00
	00		 je	 $LN95@LoadFloat_
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 46 01 00
	00		 je	 $LN94@LoadFloat_
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 2f 01 00
	00		 je	 $LN93@LoadFloat_
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 18 01 00
	00		 je	 $LN92@LoadFloat_
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 02 01 00
	00		 je	 $LN91@LoadFloat_
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 ec 00 00
	00		 je	 $LN90@LoadFloat_
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 d5 00 00
	00		 je	 $LN89@LoadFloat_
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 be 00 00
	00		 je	 $LN88@LoadFloat_
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 a8 00 00
	00		 je	 $LN87@LoadFloat_
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 92 00 00
	00		 je	 $LN86@LoadFloat_
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 7f		 je	 SHORT $LN85@LoadFloat_
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 6c		 je	 SHORT $LN84@LoadFloat_
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000e9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000ec	84 d2		 test	 dl, dl
  000ee	74 5a		 je	 SHORT $LN83@LoadFloat_
  000f0	32 d1		 xor	 dl, cl
  000f2	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000f6	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000f9	0f 84 9a 00 00
	00		 je	 $LN1@LoadFloat_
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 3e		 je	 SHORT $LN81@LoadFloat_
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 2b		 je	 SHORT $LN80@LoadFloat_
  00113	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00116	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00119	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0011c	84 d2		 test	 dl, dl
  0011e	74 19		 je	 SHORT $LN79@LoadFloat_
  00120	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  00123	32 d1		 xor	 dl, cl
  00125	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00128	84 c0		 test	 al, al
  0012a	74 07		 je	 SHORT $LN78@LoadFloat_
  0012c	34 eb		 xor	 al, -21			; ffffffebH
  0012e	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00131	eb 66		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  00133	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00137	eb 60		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  00139	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  0013c	eb 5b		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  0013e	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00142	eb 55		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  00144	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00148	eb 4f		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  0014a	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0014d	eb 4a		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  0014f	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00153	eb 44		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  00155	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00159	eb 3e		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  0015b	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0015f	eb 38		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  00161	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  00164	eb 33		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  00166	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0016a	eb 2d		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  0016c	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00170	eb 27		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  00172	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00176	eb 21		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  00178	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  0017b	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  0017d	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00181	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  00183	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00187	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  00189	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0018d	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  0018f	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00193	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  00195	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  00199	6a 03		 push	 3
  0019b	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0019e	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001a2	5a		 pop	 edx
$LL104@LoadFloat_:
  001a3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a9	83 c0 04	 add	 eax, 4
  001ac	4a		 dec	 edx
  001ad	75 f4		 jne	 SHORT $LL104@LoadFloat_
  001af	6a 0c		 push	 12			; 0000000cH
  001b1	58		 pop	 eax
$LL101@LoadFloat_:
  001b2	8b c8		 mov	 ecx, eax
  001b4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001ba	79 05		 jns	 SHORT $LN111@LoadFloat_
  001bc	49		 dec	 ecx
  001bd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c0	41		 inc	 ecx
$LN111@LoadFloat_:
  001c1	b2 ed		 mov	 dl, -19			; ffffffedH
  001c3	2a d1		 sub	 dl, cl
  001c5	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001c9	40		 inc	 eax
  001ca	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001cd	7c e3		 jl	 SHORT $LL101@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  001cf	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001d4	51		 push	 ecx
  001d5	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001dd	50		 push	 eax
  001de	8b ce		 mov	 ecx, esi
  001e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001e6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e9	33 cd		 xor	 ecx, ebp
  001eb	5e		 pop	 esi
  001ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f1	c9		 leave
  001f2	c2 08 00	 ret	 8
??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<15>
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@M@@QAEMXZ				; CEncrypt<float>::operator float
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??B?$CEncrypt@M@@QAEMXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@M@@QAEMXZ PROC				; CEncrypt<float>::operator float, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	d9 45 fc	 fld	 DWORD PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@M@@QAEMXZ ENDP				; CEncrypt<float>::operator float
_TEXT	ENDS
PUBLIC	??O?$CEncrypt@M@@QAE_NABM@Z			; CEncrypt<float>::operator>
; Function compile flags: /Ogsp
;	COMDAT ??O?$CEncrypt@M@@QAE_NABM@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??O?$CEncrypt@M@@QAE_NABM@Z PROC			; CEncrypt<float>::operator>, COMDAT
; _this$ = ecx

; 1811 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1812 : 		type value;
; 1813 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 1814 : #ifdef _NOTUSE
; 1815 : 		Debug();
; 1816 : #endif
; 1817 : 		return (value > inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00014	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$[ebp]
  00019	0f 5a c0	 cvtps2pd xmm0, xmm0
  0001c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0001f	33 c0		 xor	 eax, eax
  00021	66 0f 2f c1	 comisd	 xmm0, xmm1
  00025	76 01		 jbe	 SHORT $LN4@operator
  00027	40		 inc	 eax
$LN4@operator:

; 1818 : 	}		

  00028	c9		 leave
  00029	c2 04 00	 ret	 4
??O?$CEncrypt@M@@QAE_NABM@Z ENDP			; CEncrypt<float>::operator>
_TEXT	ENDS
PUBLIC	??0ioSimpleBoxWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z ; ioSimpleBoxWeapon::ioSimpleBoxWeapon
EXTRN	?SetPeculiarity@ioWeapon@@QAEXK@Z:PROC		; ioWeapon::SetPeculiarity
EXTRN	??0ioWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z:PROC ; ioWeapon::ioWeapon
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
xdata$x	SEGMENT
__unwindtable$??0ioSimpleBoxWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioSimpleBoxWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z$0
__ehfuncinfo$??0ioSimpleBoxWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioSimpleBoxWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosimpleboxweapon.cpp
xdata$x	ENDS
;	COMDAT ??0ioSimpleBoxWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
_pAttr$ = 12						; size = 4
??0ioSimpleBoxWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z PROC ; ioSimpleBoxWeapon::ioSimpleBoxWeapon, COMDAT
; _this$ = ecx

; 15   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioSimpleBoxWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 75 0c	 push	 DWORD PTR _pAttr$[ebp]
  00014	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00017	e8 00 00 00 00	 call	 ??0ioWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z ; ioWeapon::ioWeapon
  0001c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 16   : 	SetPeculiarity( WP_DIVIDE_ACTION );

  00020	68 00 01 00 00	 push	 256			; 00000100H
  00025	8b ce		 mov	 ecx, esi
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioSimpleBoxWeapon@@6B@
  0002d	e8 00 00 00 00	 call	 ?SetPeculiarity@ioWeapon@@QAEXK@Z ; ioWeapon::SetPeculiarity

; 17   : 
; 18   : 	m_pMesh = NULL;

  00032	83 a6 94 08 00
	00 00		 and	 DWORD PTR [esi+2196], 0

; 19   : 
; 20   : 	ClearData();	

  00039	8b ce		 mov	 ecx, esi
  0003b	e8 00 00 00 00	 call	 ?ClearData@ioSimpleBoxWeapon@@QAEXXZ ; ioSimpleBoxWeapon::ClearData

; 21   : }

  00040	8b c6		 mov	 eax, esi
  00042	e8 00 00 00 00	 call	 __EH_epilog3
  00047	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioSimpleBoxWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioWeapon@@UAE@XZ	; ioWeapon::~ioWeapon
__ehhandler$??0ioSimpleBoxWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioSimpleBoxWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioSimpleBoxWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z ENDP ; ioSimpleBoxWeapon::ioSimpleBoxWeapon
EXTRN	?InitResource@ioWeapon@@UAE_NXZ:PROC		; ioWeapon::InitResource
; Function compile flags: /Ogsp
;	COMDAT ?InitResource@ioSimpleBoxWeapon@@UAE_NXZ
_TEXT	SEGMENT
?InitResource@ioSimpleBoxWeapon@@UAE_NXZ PROC		; ioSimpleBoxWeapon::InitResource, COMDAT
; _this$ = ecx

; 33   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 34   : 	if( ioWeapon::InitResource() )

  00003	e8 00 00 00 00	 call	 ?InitResource@ioWeapon@@UAE_NXZ ; ioWeapon::InitResource
  00008	84 c0		 test	 al, al
  0000a	74 25		 je	 SHORT $LN1@InitResour

; 35   : 	{
; 36   : 		DestroyResource();

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	6a 00		 push	 0
  00010	8b ce		 mov	 ecx, esi
  00012	ff 90 9c 00 00
	00		 call	 DWORD PTR [eax+156]

; 37   : 		return SetMesh( GetAttribute()->m_WeaponEffect );

  00018	8b 06		 mov	 eax, DWORD PTR [esi]
  0001a	8b ce		 mov	 ecx, esi
  0001c	ff 90 3c 01 00
	00		 call	 DWORD PTR [eax+316]
  00022	05 34 01 00 00	 add	 eax, 308		; 00000134H
  00027	50		 push	 eax
  00028	8b ce		 mov	 ecx, esi
  0002a	e8 00 00 00 00	 call	 ?SetMesh@ioSimpleBoxWeapon@@IAE_NABVioHashString@@@Z ; ioSimpleBoxWeapon::SetMesh
  0002f	5e		 pop	 esi

; 41   : }

  00030	c3		 ret	 0
$LN1@InitResour:

; 38   : 	}
; 39   : 
; 40   : 	return false;

  00031	32 c0		 xor	 al, al
  00033	5e		 pop	 esi

; 41   : }

  00034	c3		 ret	 0
?InitResource@ioSimpleBoxWeapon@@UAE_NXZ ENDP		; ioSimpleBoxWeapon::InitResource
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	?LoadProperty@ioWeapon@@UAEXAAVioINILoader@@@Z:PROC ; ioWeapon::LoadProperty
; Function compile flags: /Ogsp
;	COMDAT ?LoadProperty@ioSimpleBoxWeapon@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
__k$532352 = -28					; size = 15
__k$532227 = -28					; size = 15
__k$532102 = -28					; size = 18
__k$531977 = -20					; size = 9
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioSimpleBoxWeapon@@UAEXAAVioINILoader@@@Z PROC ; ioSimpleBoxWeapon::LoadProperty, COMDAT
; _this$ = ecx

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 54   : 	ioWeapon::LoadProperty( rkLoader );

  00016	57		 push	 edi
  00017	8b f1		 mov	 esi, ecx
  00019	e8 00 00 00 00	 call	 ?LoadProperty@ioWeapon@@UAEXAAVioINILoader@@@Z ; ioWeapon::LoadProperty

; 55   : 
; 56   : 	DWORD dwCurTime = FRAMEGETTIME();

  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00024	8b c8		 mov	 ecx, eax
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 57   : 
; 58   : 	char szBuf[MAX_PATH] = "";
; 59   : 	char szKey[MAX_PATH] = "";
; 60   : 
; 61   : 	m_dwDurationTime = rkLoader.LoadInt_e( "duration", 0 );

  0002c	33 db		 xor	 ebx, ebx
  0002e	6a 02		 push	 2
  00030	c7 45 ec 89 99
	99 8b		 mov	 DWORD PTR __k$531977[ebp], -1952867959 ; 8b999989H
  00037	c7 45 f0 99 85
	84 84		 mov	 DWORD PTR __k$531977[ebp+4], -2071689831 ; 84848599H
  0003e	8d 45 ec	 lea	 eax, DWORD PTR __k$531977[ebp]
  00041	88 5d f4	 mov	 BYTE PTR __k$531977[ebp+8], bl
  00044	59		 pop	 ecx
$LL106@LoadProper:
  00045	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0004b	83 c0 04	 add	 eax, 4
  0004e	49		 dec	 ecx
  0004f	75 f4		 jne	 SHORT $LL106@LoadProper
  00051	53		 push	 ebx
  00052	8d 45 ec	 lea	 eax, DWORD PTR __k$531977[ebp]
  00055	50		 push	 eax
  00056	8b cf		 mov	 ecx, edi
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  0005e	6a 04		 push	 4
  00060	89 86 a8 08 00
	00		 mov	 DWORD PTR [esi+2216], eax

; 62   : 	//////////////////////////////////////////////////////////////////////////
; 63   : 	m_bRotateMoveDir = rkLoader.LoadBool_e( "use_rotate_weapon", false );

  00066	c7 45 e4 98 9f
	8e b5		 mov	 DWORD PTR __k$532102[ebp], -1248944232 ; b58e9f98H
  0006d	c7 45 e8 9f 83
	9f 8b		 mov	 DWORD PTR __k$532102[ebp+4], -1952480353 ; 8b9f839fH
  00074	c7 45 ec 99 89
	b4 9d		 mov	 DWORD PTR __k$532102[ebp+8], -1649112679 ; 9db48999H
  0007b	c7 45 f0 88 8d
	9b 85		 mov	 DWORD PTR __k$532102[ebp+12], -2053403256 ; 859b8d88H
  00082	8d 45 e4	 lea	 eax, DWORD PTR __k$532102[ebp]
  00085	66 c7 45 f4 83
	00		 mov	 WORD PTR __k$532102[ebp+16], 131 ; 00000083H
  0008b	59		 pop	 ecx
$LL212@LoadProper:
  0008c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00092	83 c0 04	 add	 eax, 4
  00095	49		 dec	 ecx
  00096	75 f4		 jne	 SHORT $LL212@LoadProper
  00098	80 75 f4 ed	 xor	 BYTE PTR __k$532102[ebp+16], -19 ; ffffffedH
  0009c	53		 push	 ebx
  0009d	8d 45 e4	 lea	 eax, DWORD PTR __k$532102[ebp]
  000a0	50		 push	 eax
  000a1	8b cf		 mov	 ecx, edi
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  000a9	6a 03		 push	 3
  000ab	88 86 b2 08 00
	00		 mov	 BYTE PTR [esi+2226], al

; 64   : 	m_fRotateY = rkLoader.LoadFloat_e( "rotate_y_value", 0.f );

  000b1	c7 45 e4 9f 83
	9f 8b		 mov	 DWORD PTR __k$532227[ebp], -1952480353 ; 8b9f839fH
  000b8	c7 45 e8 99 89
	b4 93		 mov	 DWORD PTR __k$532227[ebp+4], -1816884839 ; 93b48999H
  000bf	c7 45 ec b2 9a
	8a 86		 mov	 DWORD PTR __k$532227[ebp+8], -2037736782 ; 868a9ab2H
  000c6	66 c7 45 f0 98
	89		 mov	 WORD PTR __k$532227[ebp+12], 35224 ; 00008998H
  000cc	8d 45 e4	 lea	 eax, DWORD PTR __k$532227[ebp]
  000cf	88 5d f2	 mov	 BYTE PTR __k$532227[ebp+14], bl
  000d2	59		 pop	 ecx
$LL318@LoadProper:
  000d3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000d9	83 c0 04	 add	 eax, 4
  000dc	49		 dec	 ecx
  000dd	75 f4		 jne	 SHORT $LL318@LoadProper
  000df	6a 0c		 push	 12			; 0000000cH
  000e1	58		 pop	 eax
$LL315@LoadProper:
  000e2	8b c8		 mov	 ecx, eax
  000e4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000ea	79 05		 jns	 SHORT $LN443@LoadProper
  000ec	49		 dec	 ecx
  000ed	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000f0	41		 inc	 ecx
$LN443@LoadProper:
  000f1	b2 ed		 mov	 dl, -19			; ffffffedH
  000f3	2a d1		 sub	 dl, cl
  000f5	30 54 05 e4	 xor	 BYTE PTR __k$532227[ebp+eax], dl
  000f9	40		 inc	 eax
  000fa	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  000fd	7c e3		 jl	 SHORT $LL315@LoadProper
  000ff	0f 57 c0	 xorps	 xmm0, xmm0
  00102	51		 push	 ecx
  00103	8d 45 e4	 lea	 eax, DWORD PTR __k$532227[ebp]
  00106	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010b	50		 push	 eax
  0010c	8b cf		 mov	 ecx, edi
  0010e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00114	d9 9e b4 08 00
	00		 fstp	 DWORD PTR [esi+2228]
  0011a	6a 03		 push	 3

; 65   : 	m_fRotateX = rkLoader.LoadFloat_e( "rotate_x_value", 0.f );

  0011c	c7 45 e4 9f 83
	9f 8b		 mov	 DWORD PTR __k$532352[ebp], -1952480353 ; 8b9f839fH
  00123	c7 45 e8 99 89
	b4 92		 mov	 DWORD PTR __k$532352[ebp+4], -1833662055 ; 92b48999H
  0012a	c7 45 ec b2 9a
	8a 86		 mov	 DWORD PTR __k$532352[ebp+8], -2037736782 ; 868a9ab2H
  00131	66 c7 45 f0 98
	89		 mov	 WORD PTR __k$532352[ebp+12], 35224 ; 00008998H
  00137	8d 45 e4	 lea	 eax, DWORD PTR __k$532352[ebp]
  0013a	88 5d f2	 mov	 BYTE PTR __k$532352[ebp+14], bl
  0013d	59		 pop	 ecx
$LL424@LoadProper:
  0013e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00144	83 c0 04	 add	 eax, 4
  00147	49		 dec	 ecx
  00148	75 f4		 jne	 SHORT $LL424@LoadProper
  0014a	6a 0c		 push	 12			; 0000000cH
  0014c	58		 pop	 eax
$LL421@LoadProper:
  0014d	8b c8		 mov	 ecx, eax
  0014f	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00155	79 05		 jns	 SHORT $LN444@LoadProper
  00157	49		 dec	 ecx
  00158	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0015b	41		 inc	 ecx
$LN444@LoadProper:
  0015c	b2 ed		 mov	 dl, -19			; ffffffedH
  0015e	2a d1		 sub	 dl, cl
  00160	30 54 05 e4	 xor	 BYTE PTR __k$532352[ebp+eax], dl
  00164	40		 inc	 eax
  00165	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00168	7c e3		 jl	 SHORT $LL421@LoadProper
  0016a	0f 57 c0	 xorps	 xmm0, xmm0
  0016d	51		 push	 ecx
  0016e	8d 45 e4	 lea	 eax, DWORD PTR __k$532352[ebp]
  00171	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00176	50		 push	 eax
  00177	8b cf		 mov	 ecx, edi
  00179	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0017f	d9 9e b8 08 00
	00		 fstp	 DWORD PTR [esi+2232]

; 66   : }

  00185	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00188	5f		 pop	 edi
  00189	5e		 pop	 esi
  0018a	33 cd		 xor	 ecx, ebp
  0018c	5b		 pop	 ebx
  0018d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00192	c9		 leave
  00193	c2 04 00	 ret	 4
?LoadProperty@ioSimpleBoxWeapon@@UAEXAAVioINILoader@@@Z ENDP ; ioSimpleBoxWeapon::LoadProperty
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp_?SetNull@ioOrientBox@@QAEXXZ:PROC
EXTRN	__imp_?UNIT_ALL@ioMath@@2UD3DXVECTOR3@@A:BYTE
EXTRN	__imp_?Transform@ioOrientBox@@QAEXABUD3DXVECTOR3@@0ABUD3DXQUATERNION@@@Z:PROC
EXTRN	?GetOrientation@ioWeapon@@QBEABUD3DXQUATERNION@@XZ:PROC ; ioWeapon::GetOrientation
EXTRN	__imp_?IsNull@ioOrientBox@@QBE_NXZ:PROC
EXTRN	__imp_?SetExtents@ioOrientBox@@QAEXHM@Z:PROC
EXTRN	__imp_?GetExtents@ioOrientBox@@QBEMH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?UpdateWorldAttackBox@ioSimpleBoxWeapon@@MAEXM_N@Z
_TEXT	SEGMENT
tv397 = -32						; size = 4
_value$532505 = -32					; size = 4
tv417 = -28						; size = 4
tv399 = -28						; size = 4
_value$532510 = -24					; size = 4
$T532493 = -24						; size = 4
_fMapCollisionRate$ = -24				; size = 4
tv411 = -20						; size = 4
tv405 = -20						; size = 4
_value$532515 = -20					; size = 4
_value$532501 = -20					; size = 4
_vScale$530681 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_fTimePerSec$ = 8					; size = 4
_bSetNull$ = 12						; size = 1
?UpdateWorldAttackBox@ioSimpleBoxWeapon@@MAEXM_N@Z PROC	; ioSimpleBoxWeapon::UpdateWorldAttackBox, COMDAT
; _this$ = ecx

; 214  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b d9		 mov	 ebx, ecx

; 215  : 	if( !IsLive() || bSetNull )

  00013	80 bb 82 05 00
	00 00		 cmp	 BYTE PTR [ebx+1410], 0
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	0f 84 b7 01 00
	00		 je	 $LN4@UpdateWorl
  00022	80 7d 0c 00	 cmp	 BYTE PTR _bSetNull$[ebp], 0
  00026	0f 85 ad 01 00
	00		 jne	 $LN4@UpdateWorl

; 219  : 		return;
; 220  : 	}
; 221  : 
; 222  : 	m_WorldAttackBox = GetLocalAttackBox();

  0002c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0002e	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  00034	6a 11		 push	 17			; 00000011H
  00036	59		 pop	 ecx
  00037	8b f0		 mov	 esi, eax
  00039	8d bb e8 04 00
	00		 lea	 edi, DWORD PTR [ebx+1256]
  0003f	f3 a5		 rep movsd

; 223  : 	m_WorldAttackBoxForMap = m_WorldAttackBox;

  00041	6a 11		 push	 17			; 00000011H
  00043	8b f0		 mov	 esi, eax

; 224  : 
; 225  : 	float fMapCollisionRate = GetAttribute()->m_fMapCollisionBoxRate;

  00045	8b 03		 mov	 eax, DWORD PTR [ebx]
  00047	59		 pop	 ecx
  00048	8d bb 2c 05 00
	00		 lea	 edi, DWORD PTR [ebx+1324]
  0004e	f3 a5		 rep movsd
  00050	8b cb		 mov	 ecx, ebx
  00052	ff 90 3c 01 00
	00		 call	 DWORD PTR [eax+316]

; 226  : 	m_WorldAttackBoxForMap.SetExtents( 0, m_WorldAttackBox.GetExtents(0)*fMapCollisionRate );

  00058	6a 00		 push	 0
  0005a	d9 80 a8 01 00
	00		 fld	 DWORD PTR [eax+424]
  00060	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  00066	d9 5d e8	 fstp	 DWORD PTR _fMapCollisionRate$[ebp]
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetExtents@ioOrientBox@@QBEMH@Z
  0006f	d8 4d e8	 fmul	 DWORD PTR _fMapCollisionRate$[ebp]
  00072	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?SetExtents@ioOrientBox@@QAEXHM@Z
  00078	51		 push	 ecx
  00079	8d 8b 2c 05 00
	00		 lea	 ecx, DWORD PTR [ebx+1324]
  0007f	d9 5d e4	 fstp	 DWORD PTR tv417[ebp]
  00082	d9 45 e4	 fld	 DWORD PTR tv417[ebp]
  00085	89 4d e4	 mov	 DWORD PTR tv399[ebp], ecx
  00088	d9 1c 24	 fstp	 DWORD PTR [esp]
  0008b	6a 00		 push	 0
  0008d	ff d6		 call	 esi

; 227  : 	m_WorldAttackBoxForMap.SetExtents( 1, m_WorldAttackBox.GetExtents(1)*fMapCollisionRate );

  0008f	6a 01		 push	 1
  00091	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetExtents@ioOrientBox@@QBEMH@Z
  0009d	d8 4d e8	 fmul	 DWORD PTR _fMapCollisionRate$[ebp]
  000a0	51		 push	 ecx
  000a1	8b 4d e4	 mov	 ecx, DWORD PTR tv399[ebp]
  000a4	d9 5d ec	 fstp	 DWORD PTR tv411[ebp]
  000a7	d9 45 ec	 fld	 DWORD PTR tv411[ebp]
  000aa	d9 1c 24	 fstp	 DWORD PTR [esp]
  000ad	6a 01		 push	 1
  000af	ff d6		 call	 esi

; 228  : 	m_WorldAttackBoxForMap.SetExtents( 2, m_WorldAttackBox.GetExtents(2)*fMapCollisionRate );

  000b1	6a 02		 push	 2
  000b3	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  000b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetExtents@ioOrientBox@@QBEMH@Z
  000bf	d8 4d e8	 fmul	 DWORD PTR _fMapCollisionRate$[ebp]
  000c2	51		 push	 ecx
  000c3	8b 4d e4	 mov	 ecx, DWORD PTR tv399[ebp]
  000c6	d9 5d ec	 fstp	 DWORD PTR tv405[ebp]
  000c9	d9 45 ec	 fld	 DWORD PTR tv405[ebp]
  000cc	d9 1c 24	 fstp	 DWORD PTR [esp]
  000cf	6a 02		 push	 2
  000d1	ff d6		 call	 esi

; 229  : 
; 230  : 	if( !m_WorldAttackBox.IsNull() )

  000d3	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsNull@ioOrientBox@@QBE_NXZ
  000df	84 c0		 test	 al, al
  000e1	0f 85 08 01 00
	00		 jne	 $LN1@UpdateWorl

; 231  : 	{
; 232  : 		if( m_fOwnerChargeScaleRate > FLOAT1 )

  000e7	b8 01 00 00 00	 mov	 eax, 1
  000ec	89 45 e8	 mov	 DWORD PTR $T532493[ebp], eax
  000ef	8d 45 ec	 lea	 eax, DWORD PTR _value$532501[ebp]
  000f2	50		 push	 eax
  000f3	8d 8b b0 01 00
	00		 lea	 ecx, DWORD PTR [ebx+432]
  000f9	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  000fe	d9 45 ec	 fld	 DWORD PTR _value$532501[ebp]
  00101	8b 45 e8	 mov	 eax, DWORD PTR $T532493[ebp]
  00104	db 45 e8	 fild	 DWORD PTR $T532493[ebp]
  00107	85 c0		 test	 eax, eax
  00109	79 06		 jns	 SHORT $LN25@UpdateWorl
  0010b	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN25@UpdateWorl:
  00111	d9 c9		 fxch	 ST(1)
  00113	df f1		 fcomip	 ST(1)
  00115	dd d8		 fstp	 ST(0)
  00117	0f 86 88 00 00
	00		 jbe	 $LN2@UpdateWorl

; 233  : 		{
; 234  : 			D3DXVECTOR3 vScale( m_fOwnerChargeScaleRate, m_fOwnerChargeScaleRate, m_fOwnerChargeScaleRate );

  0011d	8d 45 e0	 lea	 eax, DWORD PTR _value$532505[ebp]
  00120	50		 push	 eax
  00121	8d 8b b0 01 00
	00		 lea	 ecx, DWORD PTR [ebx+432]
  00127	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  0012c	8d 45 e8	 lea	 eax, DWORD PTR _value$532510[ebp]
  0012f	50		 push	 eax
  00130	8d 8b b0 01 00
	00		 lea	 ecx, DWORD PTR [ebx+432]
  00136	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  0013b	8d 45 ec	 lea	 eax, DWORD PTR _value$532515[ebp]
  0013e	50		 push	 eax
  0013f	8d 8b b0 01 00
	00		 lea	 ecx, DWORD PTR [ebx+432]
  00145	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  0014a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _value$532515[ebp]
  0014f	f3 0f 11 45 f0	 movss	 DWORD PTR _vScale$530681[ebp], xmm0
  00154	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _value$532510[ebp]
  00159	f3 0f 11 45 f4	 movss	 DWORD PTR _vScale$530681[ebp+4], xmm0
  0015e	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _value$532505[ebp]

; 235  : 			m_WorldAttackBox.Transform( GetPosition(), vScale, GetOrientation() );

  00163	8b cb		 mov	 ecx, ebx
  00165	f3 0f 11 45 f8	 movss	 DWORD PTR _vScale$530681[ebp+8], xmm0
  0016a	e8 00 00 00 00	 call	 ?GetOrientation@ioWeapon@@QBEABUD3DXQUATERNION@@XZ ; ioWeapon::GetOrientation
  0016f	50		 push	 eax
  00170	8d 45 f0	 lea	 eax, DWORD PTR _vScale$530681[ebp]
  00173	50		 push	 eax
  00174	8b 03		 mov	 eax, DWORD PTR [ebx]
  00176	8b cb		 mov	 ecx, ebx
  00178	ff 50 70	 call	 DWORD PTR [eax+112]
  0017b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?Transform@ioOrientBox@@QAEXABUD3DXVECTOR3@@0ABUD3DXQUATERNION@@@Z
  00181	50		 push	 eax
  00182	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  00188	ff d6		 call	 esi

; 236  : 			m_WorldAttackBoxForMap.Transform( GetPosition(), vScale, GetOrientation() );

  0018a	8b cb		 mov	 ecx, ebx
  0018c	e8 00 00 00 00	 call	 ?GetOrientation@ioWeapon@@QBEABUD3DXQUATERNION@@XZ ; ioWeapon::GetOrientation
  00191	50		 push	 eax
  00192	8d 45 f0	 lea	 eax, DWORD PTR _vScale$530681[ebp]
  00195	50		 push	 eax
$LN26@UpdateWorl:
  00196	8b 03		 mov	 eax, DWORD PTR [ebx]
  00198	8b cb		 mov	 ecx, ebx
  0019a	ff 50 70	 call	 DWORD PTR [eax+112]
  0019d	8b 4d e4	 mov	 ecx, DWORD PTR tv399[ebp]
  001a0	50		 push	 eax
  001a1	ff d6		 call	 esi

; 237  : 		}
; 238  : 		else

  001a3	eb 4a		 jmp	 SHORT $LN1@UpdateWorl
$LN2@UpdateWorl:

; 239  : 		{
; 240  : 			m_WorldAttackBox.Transform( GetPosition(), ioMath::UNIT_ALL, GetOrientation() );

  001a5	8b cb		 mov	 ecx, ebx
  001a7	e8 00 00 00 00	 call	 ?GetOrientation@ioWeapon@@QBEABUD3DXQUATERNION@@XZ ; ioWeapon::GetOrientation
  001ac	50		 push	 eax
  001ad	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?UNIT_ALL@ioMath@@2UD3DXVECTOR3@@A
  001b3	8b 03		 mov	 eax, DWORD PTR [ebx]
  001b5	8b cb		 mov	 ecx, ebx
  001b7	ff 50 70	 call	 DWORD PTR [eax+112]
  001ba	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?Transform@ioOrientBox@@QAEXABUD3DXVECTOR3@@0ABUD3DXQUATERNION@@@Z
  001c0	50		 push	 eax
  001c1	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  001c7	ff d6		 call	 esi

; 241  : 			m_WorldAttackBoxForMap.Transform( GetPosition(), ioMath::UNIT_ALL, GetOrientation() );

  001c9	8b cb		 mov	 ecx, ebx
  001cb	e8 00 00 00 00	 call	 ?GetOrientation@ioWeapon@@QBEABUD3DXQUATERNION@@XZ ; ioWeapon::GetOrientation
  001d0	50		 push	 eax
  001d1	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?UNIT_ALL@ioMath@@2UD3DXVECTOR3@@A
  001d7	eb bd		 jmp	 SHORT $LN26@UpdateWorl
$LN4@UpdateWorl:

; 216  : 	{
; 217  : 		m_WorldAttackBox.SetNull();

  001d9	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?SetNull@ioOrientBox@@QAEXXZ
  001df	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  001e5	ff d6		 call	 esi

; 218  : 		m_WorldAttackBoxForMap.SetNull();

  001e7	8d 8b 2c 05 00
	00		 lea	 ecx, DWORD PTR [ebx+1324]
  001ed	ff d6		 call	 esi
$LN1@UpdateWorl:

; 242  : 		}
; 243  : 	}
; 244  : }

  001ef	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	33 cd		 xor	 ecx, ebp
  001f6	5b		 pop	 ebx
  001f7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fc	c9		 leave
  001fd	c2 08 00	 ret	 8
?UpdateWorldAttackBox@ioSimpleBoxWeapon@@MAEXM_N@Z ENDP	; ioSimpleBoxWeapon::UpdateWorldAttackBox
_TEXT	ENDS
PUBLIC	?GetMoveSpeed@ioSimpleBoxWeapon@@QAEMXZ		; ioSimpleBoxWeapon::GetMoveSpeed
; Function compile flags: /Ogsp
;	COMDAT ?GetMoveSpeed@ioSimpleBoxWeapon@@QAEMXZ
_TEXT	SEGMENT
tv136 = -4						; size = 4
_value$532529 = -4					; size = 4
?GetMoveSpeed@ioSimpleBoxWeapon@@QAEMXZ PROC		; ioSimpleBoxWeapon::GetMoveSpeed, COMDAT
; _this$ = ecx

; 255  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 256  : 	return GetAttribute()->m_fMoveSpeed * m_fOwnerChargeSpeedRate;

  00007	8d 45 fc	 lea	 eax, DWORD PTR _value$532529[ebp]
  0000a	50		 push	 eax
  0000b	8d 8e 20 01 00
	00		 lea	 ecx, DWORD PTR [esi+288]
  00011	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b ce		 mov	 ecx, esi
  0001a	ff 90 3c 01 00
	00		 call	 DWORD PTR [eax+316]
  00020	d9 80 98 01 00
	00		 fld	 DWORD PTR [eax+408]
  00026	d8 4d fc	 fmul	 DWORD PTR _value$532529[ebp]
  00029	5e		 pop	 esi
  0002a	d9 5d fc	 fstp	 DWORD PTR tv136[ebp]
  0002d	d9 45 fc	 fld	 DWORD PTR tv136[ebp]

; 257  : }

  00030	c9		 leave
  00031	c3		 ret	 0
?GetMoveSpeed@ioSimpleBoxWeapon@@QAEMXZ ENDP		; ioSimpleBoxWeapon::GetMoveSpeed
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	__$ArrayPad$
PUBLIC	?ProcessMove@ioSimpleBoxWeapon@@QAEXMPAVioPlayStage@@@Z ; ioSimpleBoxWeapon::ProcessMove
;	COMDAT __real@00000000
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosimpleboxweapon.cpp
CONST	ENDS
;	COMDAT ?ProcessMove@ioSimpleBoxWeapon@@QAEXMPAVioPlayStage@@@Z
_TEXT	SEGMENT
tv326 = -20						; size = 4
tv322 = -20						; size = 4
tv318 = -20						; size = 4
_fMoveDist$ = -20					; size = 4
_vMove$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_fTimePerSec$ = 8					; size = 4
_pStage$ = 12						; size = 4
?ProcessMove@ioSimpleBoxWeapon@@QAEXMPAVioPlayStage@@@Z PROC ; ioSimpleBoxWeapon::ProcessMove, COMDAT
; _this$ = ecx

; 161  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 162  : 	if( fTimePerSec == 0.0f )

  00010	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00015	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  0001c	9f		 lahf
  0001d	53		 push	 ebx
  0001e	8b d9		 mov	 ebx, ecx
  00020	f6 c4 44	 test	 ah, 68			; 00000044H
  00023	7a 37		 jp	 SHORT $LN2@ProcessMov

; 163  : 		fTimePerSec = FLOAT0001;

  00025	b8 01 00 00 00	 mov	 eax, 1
  0002a	8b c8		 mov	 ecx, eax
  0002c	b8 e8 03 00 00	 mov	 eax, 1000		; 000003e8H
  00031	89 4d ec	 mov	 DWORD PTR tv326[ebp], ecx
  00034	db 45 ec	 fild	 DWORD PTR tv326[ebp]
  00037	85 c9		 test	 ecx, ecx
  00039	79 06		 jns	 SHORT $LN15@ProcessMov
  0003b	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN15@ProcessMov:
  00041	89 45 ec	 mov	 DWORD PTR tv322[ebp], eax
  00044	db 45 ec	 fild	 DWORD PTR tv322[ebp]
  00047	85 c0		 test	 eax, eax
  00049	79 06		 jns	 SHORT $LN16@ProcessMov
  0004b	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN16@ProcessMov:
  00051	de f9		 fdivp	 ST(1), ST(0)
  00053	d9 5d ec	 fstp	 DWORD PTR tv318[ebp]
  00056	d9 45 ec	 fld	 DWORD PTR tv318[ebp]
  00059	d9 5d 08	 fstp	 DWORD PTR _fTimePerSec$[ebp]
$LN2@ProcessMov:

; 164  : 		
; 165  : 	float fMoveDist = GetMoveSpeed() * fTimePerSec;

  0005c	56		 push	 esi
  0005d	57		 push	 edi
  0005e	8b cb		 mov	 ecx, ebx
  00060	e8 00 00 00 00	 call	 ?GetMoveSpeed@ioSimpleBoxWeapon@@QAEMXZ ; ioSimpleBoxWeapon::GetMoveSpeed
  00065	d8 4d 08	 fmul	 DWORD PTR _fTimePerSec$[ebp]

; 166  : 	D3DXVECTOR3 vMove = GetPosition();

  00068	8b 03		 mov	 eax, DWORD PTR [ebx]
  0006a	8b cb		 mov	 ecx, ebx
  0006c	d9 5d ec	 fstp	 DWORD PTR _fMoveDist$[ebp]
  0006f	ff 50 70	 call	 DWORD PTR [eax+112]

; 167  : 	vMove += m_vMoveDir * fMoveDist;

  00072	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _fMoveDist$[ebp]
  00077	f3 0f 10 83 9c
	08 00 00	 movss	 xmm0, DWORD PTR [ebx+2204]
  0007f	f3 0f 10 55 ec	 movss	 xmm2, DWORD PTR _fMoveDist$[ebp]
  00084	f3 0f 10 5d ec	 movss	 xmm3, DWORD PTR _fMoveDist$[ebp]
  00089	0f 5a c0	 cvtps2pd xmm0, xmm0
  0008c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0008f	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00093	f3 0f 10 8b a0
	08 00 00	 movss	 xmm1, DWORD PTR [ebx+2208]
  0009b	8b f0		 mov	 esi, eax
  0009d	8d 7d f0	 lea	 edi, DWORD PTR _vMove$[ebp]
  000a0	a5		 movsd
  000a1	a5		 movsd
  000a2	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000a6	0f 5a c9	 cvtps2pd xmm1, xmm1
  000a9	0f 5a d2	 cvtps2pd xmm2, xmm2
  000ac	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  000b0	f3 0f 10 93 a4
	08 00 00	 movss	 xmm2, DWORD PTR [ebx+2212]
  000b8	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000bc	a5		 movsd
  000bd	0f 5a db	 cvtps2pd xmm3, xmm3
  000c0	0f 5a d2	 cvtps2pd xmm2, xmm2
  000c3	f2 0f 59 d3	 mulsd	 xmm2, xmm3
  000c7	f3 0f 10 5d f0	 movss	 xmm3, DWORD PTR _vMove$[ebp]
  000cc	0f 5a db	 cvtps2pd xmm3, xmm3
  000cf	f2 0f 58 c3	 addsd	 xmm0, xmm3
  000d3	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000d7	f3 0f 11 45 f0	 movss	 DWORD PTR _vMove$[ebp], xmm0
  000dc	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _vMove$[ebp+4]
  000e1	0f 5a c0	 cvtps2pd xmm0, xmm0
  000e4	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  000e8	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  000ec	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000f0	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000f4	f3 0f 11 45 f4	 movss	 DWORD PTR _vMove$[ebp+4], xmm0
  000f9	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _vMove$[ebp+8]
  000fe	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  00102	0f 5a c0	 cvtps2pd xmm0, xmm0
  00105	0f 57 c9	 xorps	 xmm1, xmm1
  00108	f3 0f 5a ca	 cvtss2sd xmm1, xmm2

; 168  : 	SetPosition( vMove );

  0010c	8d 45 f0	 lea	 eax, DWORD PTR _vMove$[ebp]
  0010f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00113	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00117	50		 push	 eax
  00118	8b cb		 mov	 ecx, ebx
  0011a	f3 0f 11 45 f8	 movss	 DWORD PTR _vMove$[ebp+8], xmm0
  0011f	e8 00 00 00 00	 call	 ?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z ; ioWeapon::SetPosition

; 169  : 
; 170  : 	if( m_dwWeaponDeadTime < FRAMEGETTIME() )

  00124	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0012a	8b c8		 mov	 ecx, eax
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00132	5f		 pop	 edi
  00133	5e		 pop	 esi
  00134	39 83 ac 08 00
	00		 cmp	 DWORD PTR [ebx+2220], eax
  0013a	73 07		 jae	 SHORT $LN1@ProcessMov

; 171  : 	{
; 172  : 		SetWeaponDead();

  0013c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0013e	8b cb		 mov	 ecx, ebx
  00140	ff 50 4c	 call	 DWORD PTR [eax+76]
$LN1@ProcessMov:

; 173  : 	}
; 174  : }

  00143	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00146	33 cd		 xor	 ecx, ebp
  00148	5b		 pop	 ebx
  00149	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014e	c9		 leave
  0014f	c2 08 00	 ret	 8
?ProcessMove@ioSimpleBoxWeapon@@QAEXMPAVioPlayStage@@@Z ENDP ; ioSimpleBoxWeapon::ProcessMove
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?Process@ioSimpleBoxWeapon@@UAEXMPAVioPlayStage@@@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
tv221 = 12						; size = 4
tv217 = 12						; size = 4
_pStage$ = 12						; size = 4
?Process@ioSimpleBoxWeapon@@UAEXMPAVioPlayStage@@@Z PROC ; ioSimpleBoxWeapon::Process, COMDAT
; _this$ = ecx

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 131  : 	DWORD dwCurTime = FRAMEGETTIME();

  00006	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0000c	8b f1		 mov	 esi, ecx
  0000e	ff d7		 call	 edi
  00010	8b c8		 mov	 ecx, eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 132  : 
; 133  : 	switch( m_State )

  00018	8b 8e 98 08 00
	00		 mov	 ecx, DWORD PTR [esi+2200]
  0001e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00023	33 db		 xor	 ebx, ebx
  00025	2b cb		 sub	 ecx, ebx
  00027	74 45		 je	 SHORT $LN6@Process
  00029	49		 dec	 ecx
  0002a	75 5a		 jne	 SHORT $LN13@Process

; 138  : 		break;
; 139  : 	case WS_LIVE:
; 140  : 		{
; 141  : 			if( m_bOwnerAttach )
; 142  : 				ProcessAttach( fTimePerSec, pStage );

  0002c	ff 75 0c	 push	 DWORD PTR _pStage$[ebp]
  0002f	51		 push	 ecx
  00030	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00035	8b ce		 mov	 ecx, esi
  00037	38 9e b0 08 00
	00		 cmp	 BYTE PTR [esi+2224], bl
  0003d	74 07		 je	 SHORT $LN4@Process
  0003f	e8 00 00 00 00	 call	 ?ProcessAttach@ioSimpleBoxWeapon@@QAEXMPAVioPlayStage@@@Z ; ioSimpleBoxWeapon::ProcessAttach

; 143  : 			else

  00044	eb 05		 jmp	 SHORT $LN3@Process
$LN4@Process:

; 144  : 				ProcessMove( fTimePerSec, pStage );

  00046	e8 00 00 00 00	 call	 ?ProcessMove@ioSimpleBoxWeapon@@QAEXMPAVioPlayStage@@@Z ; ioSimpleBoxWeapon::ProcessMove
$LN3@Process:

; 145  : 
; 146  : 			if( m_bCheckDeadTime && m_dwWeaponDeadTime < FRAMEGETTIME() )

  0004b	38 9e b1 08 00
	00		 cmp	 BYTE PTR [esi+2225], bl
  00051	74 33		 je	 SHORT $LN13@Process
  00053	ff d7		 call	 edi
  00055	8b c8		 mov	 ecx, eax
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0005d	39 86 ac 08 00
	00		 cmp	 DWORD PTR [esi+2220], eax
  00063	73 21		 jae	 SHORT $LN13@Process

; 147  : 				SetWeaponDead();

  00065	8b 06		 mov	 eax, DWORD PTR [esi]
  00067	8b ce		 mov	 ecx, esi
  00069	ff 50 4c	 call	 DWORD PTR [eax+76]

; 148  : 		}
; 149  : 		break;

  0006c	eb 18		 jmp	 SHORT $LN13@Process
$LN6@Process:

; 134  : 	{
; 135  : 	case WS_INIT:			
; 136  : 		m_State = WS_LIVE;
; 137  : 		m_dwWeaponDeadTime = dwCurTime + m_dwDurationTime;

  0006e	8b 8e a8 08 00
	00		 mov	 ecx, DWORD PTR [esi+2216]
  00074	03 c8		 add	 ecx, eax
  00076	c7 86 98 08 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+2200], 1
  00080	89 8e ac 08 00
	00		 mov	 DWORD PTR [esi+2220], ecx
$LN13@Process:

; 150  : 	}
; 151  : 
; 152  : 	if( m_pMesh )

  00086	8d 8e 94 08 00
	00		 lea	 ecx, DWORD PTR [esi+2196]
  0008c	39 19		 cmp	 DWORD PTR [ecx], ebx
  0008e	74 2c		 je	 SHORT $LN1@Process

; 153  : 	{
; 154  : 		m_pMesh->Update( fTimePerSec * FLOAT1000 );

  00090	b8 e8 03 00 00	 mov	 eax, 1000		; 000003e8H
  00095	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00097	83 c1 14	 add	 ecx, 20			; 00000014H
  0009a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009c	89 45 0c	 mov	 DWORD PTR tv221[ebp], eax
  0009f	db 45 0c	 fild	 DWORD PTR tv221[ebp]
  000a2	85 c0		 test	 eax, eax
  000a4	79 06		 jns	 SHORT $LN14@Process
  000a6	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN14@Process:
  000ac	d8 4d 08	 fmul	 DWORD PTR _fTimePerSec$[ebp]
  000af	51		 push	 ecx
  000b0	d9 5d 0c	 fstp	 DWORD PTR tv217[ebp]
  000b3	d9 45 0c	 fld	 DWORD PTR tv217[ebp]
  000b6	d9 1c 24	 fstp	 DWORD PTR [esp]
  000b9	ff 52 40	 call	 DWORD PTR [edx+64]
$LN1@Process:

; 155  : 	}
; 156  : 
; 157  : 	UpdateWorldAttackBox( fTimePerSec, false );

  000bc	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  000c1	8b 06		 mov	 eax, DWORD PTR [esi]
  000c3	53		 push	 ebx
  000c4	51		 push	 ecx
  000c5	8b ce		 mov	 ecx, esi
  000c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cc	ff 90 38 01 00
	00		 call	 DWORD PTR [eax+312]
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx

; 158  : }

  000d5	5d		 pop	 ebp
  000d6	c2 08 00	 ret	 8
?Process@ioSimpleBoxWeapon@@UAEXMPAVioPlayStage@@@Z ENDP ; ioSimpleBoxWeapon::Process
_TEXT	ENDS
END
