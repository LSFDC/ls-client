; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioNotMoveProtectBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?return100@@YAIXZ				; return100
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return100@@YAIXZ
_TEXT	SEGMENT
?return100@@YAIXZ PROC					; return100, COMDAT

; 25   : 	__forceinline unsigned int return100() { __asm mov eax, 100 };

  00000	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00005	c3		 ret	 0
?return100@@YAIXZ ENDP					; return100
_TEXT	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	??_7ioNotMoveProtectBuff@@6B@			; ioNotMoveProtectBuff::`vftable'
PUBLIC	??0ioNotMoveProtectBuff@@QAE@XZ			; ioNotMoveProtectBuff::ioNotMoveProtectBuff
PUBLIC	??_R4ioNotMoveProtectBuff@@6B@			; ioNotMoveProtectBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioNotMoveProtectBuff@@@8		; ioNotMoveProtectBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioNotMoveProtectBuff@@8			; ioNotMoveProtectBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioNotMoveProtectBuff@@8			; ioNotMoveProtectBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioNotMoveProtectBuff@@8		; ioNotMoveProtectBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioNotMoveProtectBuff@@UAEXAAVioINILoader@@@Z ; ioNotMoveProtectBuff::LoadProperty
PUBLIC	?Clone@ioNotMoveProtectBuff@@UAEPAVioBuff@@XZ	; ioNotMoveProtectBuff::Clone
PUBLIC	?StartBuff@ioNotMoveProtectBuff@@UAEXPAVioBaseChar@@@Z ; ioNotMoveProtectBuff::StartBuff
PUBLIC	?ApplyStartBuff@ioNotMoveProtectBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioNotMoveProtectBuff::ApplyStartBuff
PUBLIC	?ProcessBuff@ioNotMoveProtectBuff@@UAEXM@Z	; ioNotMoveProtectBuff::ProcessBuff
PUBLIC	?EndBuff@ioNotMoveProtectBuff@@UAEXXZ		; ioNotMoveProtectBuff::EndBuff
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyExtraBuffInfo
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioNotMoveProtectBuff@@UAEPAXI@Z:PROC	; ioNotMoveProtectBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionotmoveprotectbuff.cpp
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioNotMoveProtectBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioNotMoveProtectBuff@@8 DD FLAT:??_R0?AVioNotMoveProtectBuff@@@8 ; ioNotMoveProtectBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioNotMoveProtectBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioNotMoveProtectBuff@@8
rdata$r	SEGMENT
??_R2ioNotMoveProtectBuff@@8 DD FLAT:??_R1A@?0A@EA@ioNotMoveProtectBuff@@8 ; ioNotMoveProtectBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioNotMoveProtectBuff@@8
rdata$r	SEGMENT
??_R3ioNotMoveProtectBuff@@8 DD 00H			; ioNotMoveProtectBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioNotMoveProtectBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioNotMoveProtectBuff@@@8
_DATA	SEGMENT
??_R0?AVioNotMoveProtectBuff@@@8 DD FLAT:??_7type_info@@6B@ ; ioNotMoveProtectBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioNotMoveProtectBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioNotMoveProtectBuff@@6B@
rdata$r	SEGMENT
??_R4ioNotMoveProtectBuff@@6B@ DD 00H			; ioNotMoveProtectBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioNotMoveProtectBuff@@@8
	DD	FLAT:??_R3ioNotMoveProtectBuff@@8
rdata$r	ENDS
;	COMDAT ??_7ioNotMoveProtectBuff@@6B@
CONST	SEGMENT
??_7ioNotMoveProtectBuff@@6B@ DD FLAT:??_R4ioNotMoveProtectBuff@@6B@ ; ioNotMoveProtectBuff::`vftable'
	DD	FLAT:?LoadProperty@ioNotMoveProtectBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioNotMoveProtectBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioNotMoveProtectBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioNotMoveProtectBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioNotMoveProtectBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioNotMoveProtectBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioNotMoveProtectBuff@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioNotMoveProtectBuff@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioNotMoveProtectBuff@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioNotMoveProtectBuff@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioNotMoveProtectBuff@@QAE@XZ$2
__ehfuncinfo$??0ioNotMoveProtectBuff@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0ioNotMoveProtectBuff@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioNotMoveProtectBuff@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioNotMoveProtectBuff@@QAE@XZ PROC			; ioNotMoveProtectBuff::ioNotMoveProtectBuff, COMDAT
; _this$ = ecx

; 10   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioNotMoveProtectBuff@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff
  00016	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  0001c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00020	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioNotMoveProtectBuff@@6B@
  0002c	ff d7		 call	 edi
  0002e	8d 8e 7c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2428]
  00034	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00038	ff d7		 call	 edi
  0003a	8d 8e 8c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2444]
  00040	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00044	ff d7		 call	 edi

; 11   : 	m_bSetState = false;

  00046	c6 86 9c 09 00
	00 00		 mov	 BYTE PTR [esi+2460], 0

; 12   : }

  0004d	8b c6		 mov	 eax, esi
  0004f	e8 00 00 00 00	 call	 __EH_epilog3
  00054	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioNotMoveProtectBuff@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??0ioNotMoveProtectBuff@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 6c 09 00
	00		 add	 ecx, 2412		; 0000096cH
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioNotMoveProtectBuff@@QAE@XZ$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 7c 09 00
	00		 add	 ecx, 2428		; 0000097cH
  00020	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0ioNotMoveProtectBuff@@QAE@XZ:
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioNotMoveProtectBuff@@QAE@XZ
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioNotMoveProtectBuff@@QAE@XZ ENDP			; ioNotMoveProtectBuff::ioNotMoveProtectBuff
PUBLIC	??0ioNotMoveProtectBuff@@QAE@ABV0@@Z		; ioNotMoveProtectBuff::ioNotMoveProtectBuff
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioNotMoveProtectBuff@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioNotMoveProtectBuff@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioNotMoveProtectBuff@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioNotMoveProtectBuff@@QAE@ABV0@@Z$2
__ehfuncinfo$??0ioNotMoveProtectBuff@@QAE@ABV0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0ioNotMoveProtectBuff@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioNotMoveProtectBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioNotMoveProtectBuff@@QAE@ABV0@@Z PROC		; ioNotMoveProtectBuff::ioNotMoveProtectBuff, COMDAT
; _this$ = ecx

; 19   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioNotMoveProtectBuff@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _rhs$[ebp]
  00014	53		 push	 ebx
  00015	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  0001a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00020	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00024	8d 83 6c 09 00
	00		 lea	 eax, DWORD PTR [ebx+2412]
  0002a	50		 push	 eax
  0002b	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00031	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioNotMoveProtectBuff@@6B@
  00037	ff d7		 call	 edi
  00039	8d 83 7c 09 00
	00		 lea	 eax, DWORD PTR [ebx+2428]
  0003f	50		 push	 eax
  00040	8d 8e 7c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2428]
  00046	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0004a	ff d7		 call	 edi
  0004c	81 c3 8c 09 00
	00		 add	 ebx, 2444		; 0000098cH
  00052	53		 push	 ebx
  00053	8d 8e 8c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2444]
  00059	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0005d	ff d7		 call	 edi

; 20   : 	m_bSetState = false;

  0005f	c6 86 9c 09 00
	00 00		 mov	 BYTE PTR [esi+2460], 0

; 21   : }

  00066	8b c6		 mov	 eax, esi
  00068	e8 00 00 00 00	 call	 __EH_epilog3
  0006d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioNotMoveProtectBuff@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??0ioNotMoveProtectBuff@@QAE@ABV0@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 6c 09 00
	00		 add	 ecx, 2412		; 0000096cH
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioNotMoveProtectBuff@@QAE@ABV0@@Z$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 7c 09 00
	00		 add	 ecx, 2428		; 0000097cH
  00020	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0ioNotMoveProtectBuff@@QAE@ABV0@@Z:
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioNotMoveProtectBuff@@QAE@ABV0@@Z
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioNotMoveProtectBuff@@QAE@ABV0@@Z ENDP		; ioNotMoveProtectBuff::ioNotMoveProtectBuff
PUBLIC	??1ioNotMoveProtectBuff@@UAE@XZ			; ioNotMoveProtectBuff::~ioNotMoveProtectBuff
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioNotMoveProtectBuff@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioNotMoveProtectBuff@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioNotMoveProtectBuff@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1ioNotMoveProtectBuff@@UAE@XZ$2
__ehfuncinfo$??1ioNotMoveProtectBuff@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1ioNotMoveProtectBuff@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioNotMoveProtectBuff@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioNotMoveProtectBuff@@UAE@XZ PROC			; ioNotMoveProtectBuff::~ioNotMoveProtectBuff, COMDAT
; _this$ = ecx

; 24   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioNotMoveProtectBuff@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioNotMoveProtectBuff@@6B@

; 25   : }

  00017	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0001d	8d 8e 8c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2444]
  00023	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0002a	ff d7		 call	 edi
  0002c	8d 8e 7c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2428]
  00032	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00036	ff d7		 call	 edi
  00038	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  0003e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00042	ff d7		 call	 edi
  00044	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  0004f	e8 00 00 00 00	 call	 __EH_epilog3
  00054	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioNotMoveProtectBuff@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??1ioNotMoveProtectBuff@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 6c 09 00
	00		 add	 ecx, 2412		; 0000096cH
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioNotMoveProtectBuff@@UAE@XZ$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 7c 09 00
	00		 add	 ecx, 2428		; 0000097cH
  00020	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1ioNotMoveProtectBuff@@UAE@XZ:
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioNotMoveProtectBuff@@UAE@XZ
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioNotMoveProtectBuff@@UAE@XZ ENDP			; ioNotMoveProtectBuff::~ioNotMoveProtectBuff
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioNotMoveProtectBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioNotMoveProtectBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioNotMoveProtectBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioNotMoveProtectBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioNotMoveProtectBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T524484 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioNotMoveProtectBuff@@UAEPAVioBuff@@XZ PROC	; ioNotMoveProtectBuff::Clone, COMDAT
; _this$ = ecx

; 43   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioNotMoveProtectBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 44   : 	return new ioNotMoveProtectBuff( *this );

  0000e	68 a0 09 00 00	 push	 2464			; 000009a0H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T524484[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioNotMoveProtectBuff@@QAE@ABV0@@Z ; ioNotMoveProtectBuff::ioNotMoveProtectBuff
$LN3@Clone:

; 45   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioNotMoveProtectBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T524484[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioNotMoveProtectBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioNotMoveProtectBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioNotMoveProtectBuff@@UAEPAVioBuff@@XZ ENDP	; ioNotMoveProtectBuff::Clone
EXTRN	?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z:PROC	; ioBuff::StartBuff
; Function compile flags: /Ogsp
;	COMDAT ?StartBuff@ioNotMoveProtectBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?StartBuff@ioNotMoveProtectBuff@@UAEXPAVioBaseChar@@@Z PROC ; ioNotMoveProtectBuff::StartBuff, COMDAT
; _this$ = ecx

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 49   : 	ioBuff::StartBuff( pOwner );

  00004	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z ; ioBuff::StartBuff

; 50   : 
; 51   : 	m_bSetState = false;

  0000e	c6 86 9c 09 00
	00 00		 mov	 BYTE PTR [esi+2460], 0
  00015	5e		 pop	 esi

; 52   : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?StartBuff@ioNotMoveProtectBuff@@UAEXPAVioBaseChar@@@Z ENDP ; ioNotMoveProtectBuff::StartBuff
_TEXT	ENDS
EXTRN	?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z:PROC ; ioBuff::ApplyStartBuff
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioNotMoveProtectBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioNotMoveProtectBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioNotMoveProtectBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 56   : 	if( !ioBuff::ApplyStartBuff( pOwner, dwGlobalTime, dwGapTime ) )

  00004	ff 75 10	 push	 DWORD PTR _dwGapTime$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0000f	e8 00 00 00 00	 call	 ?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBuff::ApplyStartBuff
  00014	84 c0		 test	 al, al
  00016	74 09		 je	 SHORT $LN2@ApplyStart
$LN1@ApplyStart:

; 57   : 		return false;
; 58   : 
; 59   : 	m_bSetState = false;

  00018	c6 86 9c 09 00
	00 00		 mov	 BYTE PTR [esi+2460], 0

; 60   : 	return true;

  0001f	b0 01		 mov	 al, 1
$LN2@ApplyStart:
  00021	5e		 pop	 esi

; 61   : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioNotMoveProtectBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioNotMoveProtectBuff::ApplyStartBuff
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ	; ioGameEntity::GetGroup
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
;	COMDAT ?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ
_TEXT	SEGMENT
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ PROC	; ioGameEntity::GetGroup, COMDAT
; _this$ = ecx

; 166  : 	inline ioEntityGroup* GetGroup() const { return m_pGroup; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ ENDP	; ioGameEntity::GetGroup
_TEXT	ENDS
PUBLIC	?SoftSkinning@Setting@@SA_NXZ			; Setting::SoftSkinning
EXTRN	?m_Option@Setting@@1USettingOption@@A:BYTE	; Setting::m_Option
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\setting.h
;	COMDAT ?SoftSkinning@Setting@@SA_NXZ
_TEXT	SEGMENT
?SoftSkinning@Setting@@SA_NXZ PROC			; Setting::SoftSkinning, COMDAT

; 266  : 	static bool SoftSkinning() { return m_Option.m_bSoftSkinning; }

  00000	a0 05 00 00 00	 mov	 al, BYTE PTR ?m_Option@Setting@@1USettingOption@@A+5
  00005	c3		 ret	 0
?SoftSkinning@Setting@@SA_NXZ ENDP			; Setting::SoftSkinning
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
_TEXT	ENDS
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioNotMoveProtectBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioNotMoveProtectBuff@@UAEPAXI@Z PROC		; ioNotMoveProtectBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioNotMoveProtectBuff@@UAE@XZ ; ioNotMoveProtectBuff::~ioNotMoveProtectBuff
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioNotMoveProtectBuff@@UAEPAXI@Z ENDP		; ioNotMoveProtectBuff::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	__real@4f800000
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
EXTRN	?CheckUseBuffSkill@ioBaseChar@@QAEXABVioHashString@@_N@Z:PROC ; ioBaseChar::CheckUseBuffSkill
EXTRN	?ChangeMaterial@Help@@YAXPAVioEntityGroup@@ABVioHashString@@_N@Z:PROC ; Help::ChangeMaterial
EXTRN	?ClearAllEquipEffect@ioBaseChar@@QAEXXZ:PROC	; ioBaseChar::ClearAllEquipEffect
EXTRN	__imp_?SetLoopAni@ioEntityGroup@@QAE_NABVioHashString@@MMMM@Z:PROC
EXTRN	__imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z:PROC
EXTRN	__imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z:PROC
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	?AttachEffect@ioBaseChar@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@_N@Z:PROC ; ioBaseChar::AttachEffect
EXTRN	?CheckCallingAreaWeapon@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingAreaWeapon
EXTRN	?CheckCallingProcess@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingProcess
EXTRN	?CheckSwitchType@ioBuff@@IAE_NM@Z:PROC		; ioBuff::CheckSwitchType
EXTRN	?ProcessBuff@ioBuff@@UAEXM@Z:PROC		; ioBuff::ProcessBuff
EXTRN	__fltused:DWORD
;	COMDAT __real@3f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionotmoveprotectbuff.cpp
CONST	ENDS
;	COMDAT ?ProcessBuff@ioNotMoveProtectBuff@@UAEXM@Z
_TEXT	SEGMENT
tv304 = 8						; size = 4
tv297 = 8						; size = 4
tv290 = 8						; size = 4
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioNotMoveProtectBuff@@UAEXM@Z PROC		; ioNotMoveProtectBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 64   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 65   : 	switch( m_iOperationType )

  00007	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  0000d	33 db		 xor	 ebx, ebx
  0000f	2b c3		 sub	 eax, ebx
  00011	57		 push	 edi
  00012	74 3c		 je	 SHORT $LN9@ProcessBuf
  00014	48		 dec	 eax
  00015	74 06		 je	 SHORT $LN10@ProcessBuf
  00017	48		 dec	 eax
  00018	74 15		 je	 SHORT $LN12@ProcessBuf
  0001a	48		 dec	 eax
  0001b	75 38		 jne	 SHORT $LN13@ProcessBuf
$LN10@ProcessBuf:

; 76   : 	case OT_DELAY:
; 77   : 	case OT_ACTIVE:
; 78   : 		ioBuff::ProcessBuff( fTimePerSec );

  0001d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00022	51		 push	 ecx
  00023	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00028	e8 00 00 00 00	 call	 ?ProcessBuff@ioBuff@@UAEXM@Z ; ioBuff::ProcessBuff

; 79   : 		break;

  0002d	eb 26		 jmp	 SHORT $LN13@ProcessBuf
$LN12@ProcessBuf:

; 66   : 	{
; 67   : 	case OT_SWITCH:
; 68   : 		if( !CheckSwitchType( fTimePerSec ) )

  0002f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00034	51		 push	 ecx
  00035	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003a	e8 00 00 00 00	 call	 ?CheckSwitchType@ioBuff@@IAE_NM@Z ; ioBuff::CheckSwitchType

; 69   : 		{
; 70   : 			SetReserveEndBuff();

  0003f	8b ce		 mov	 ecx, esi
  00041	84 c0		 test	 al, al

; 71   : 			return;

  00043	0f 84 3c 01 00
	00		 je	 $LN38@ProcessBuf

; 72   : 		}
; 73   : 
; 74   : 		CheckCallingProcess();

  00049	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 75   : 		break;

  0004e	eb 05		 jmp	 SHORT $LN13@ProcessBuf
$LN9@ProcessBuf:

; 80   : 	case OT_PASSIVE:
; 81   : 		CheckCallingAreaWeapon();

  00050	e8 00 00 00 00	 call	 ?CheckCallingAreaWeapon@ioBuff@@IAEXXZ ; ioBuff::CheckCallingAreaWeapon
$LN13@ProcessBuf:

; 82   : 		break;
; 83   : 	}
; 84   : 
; 85   : 	if( m_bSetState )
; 86   : 	{
; 87   : 		if( m_pOwner->GetState() != CS_NOT_MOVE_PROTECT )

  00055	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0005b	38 9e 9c 09 00
	00		 cmp	 BYTE PTR [esi+2460], bl
  00061	74 0c		 je	 SHORT $LN8@ProcessBuf
  00063	80 b9 10 03 00
	00 3a		 cmp	 BYTE PTR [ecx+784], 58	; 0000003aH

; 88   : 		{
; 89   : 			m_pOwner->CheckUseBuffSkill( m_Name, false );
; 90   : 			SetReserveEndBuff();
; 91   : 			return;

  0006a	e9 05 01 00 00	 jmp	 $LN39@ProcessBuf
$LN8@ProcessBuf:

; 92   : 		}
; 93   : 	}
; 94   : 	else if( m_pOwner->GetState() == CS_NOT_MOVE_PROTECT )

  0006f	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00075	3c 3a		 cmp	 al, 58			; 0000003aH
  00077	0f 85 f5 00 00
	00		 jne	 $LN5@ProcessBuf

; 95   : 	{
; 96   : 		m_bSetState = true;
; 97   : 		m_pOwner->AttachEffect( m_LoopEffect, NULL );

  0007d	6a 01		 push	 1
  0007f	53		 push	 ebx
  00080	8d 86 8c 09 00
	00		 lea	 eax, DWORD PTR [esi+2444]
  00086	50		 push	 eax
  00087	c6 86 9c 09 00
	00 01		 mov	 BYTE PTR [esi+2460], 1
  0008e	e8 00 00 00 00	 call	 ?AttachEffect@ioBaseChar@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@_N@Z ; ioBaseChar::AttachEffect

; 98   : 
; 99   : 		ioEntityGroup *pGrp = m_pOwner->GetGroup();

  00093	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  00099	8b 78 04	 mov	 edi, DWORD PTR [eax+4]

; 100  : 
; 101  : 		if( !m_LoopAnimation.IsEmpty() )

  0009c	8d 9e 7c 09 00
	00		 lea	 ebx, DWORD PTR [esi+2428]
  000a2	8b cb		 mov	 ecx, ebx
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  000aa	84 c0		 test	 al, al
  000ac	0f 85 d8 00 00
	00		 jne	 $LN1@ProcessBuf

; 102  : 		{
; 103  : 			pGrp->ClearAllLoopAni( FLOAT100, true );

  000b2	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  000b7	89 45 08	 mov	 DWORD PTR tv304[ebp], eax
  000ba	db 45 08	 fild	 DWORD PTR tv304[ebp]
  000bd	6a 01		 push	 1
  000bf	85 c0		 test	 eax, eax
  000c1	79 06		 jns	 SHORT $LN35@ProcessBuf
  000c3	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN35@ProcessBuf:
  000c9	51		 push	 ecx
  000ca	8b cf		 mov	 ecx, edi
  000cc	d9 1c 24	 fstp	 DWORD PTR [esp]
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 104  : 			pGrp->ClearAllActionAni( FLOAT100, true );

  000d5	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  000da	89 45 08	 mov	 DWORD PTR tv297[ebp], eax
  000dd	db 45 08	 fild	 DWORD PTR tv297[ebp]
  000e0	6a 01		 push	 1
  000e2	85 c0		 test	 eax, eax
  000e4	79 06		 jns	 SHORT $LN36@ProcessBuf
  000e6	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN36@ProcessBuf:
  000ec	51		 push	 ecx
  000ed	8b cf		 mov	 ecx, edi
  000ef	d9 1c 24	 fstp	 DWORD PTR [esp]
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 105  : 			pGrp->SetLoopAni( m_LoopAnimation, FLOAT100 );

  000f8	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  000fd	0f 57 c0	 xorps	 xmm0, xmm0
  00100	83 ec 10	 sub	 esp, 16			; 00000010H
  00103	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00109	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00111	89 45 08	 mov	 DWORD PTR tv290[ebp], eax
  00114	db 45 08	 fild	 DWORD PTR tv290[ebp]
  00117	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0011d	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00123	85 c0		 test	 eax, eax
  00125	79 06		 jns	 SHORT $LN37@ProcessBuf
  00127	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN37@ProcessBuf:
  0012d	d9 1c 24	 fstp	 DWORD PTR [esp]
  00130	53		 push	 ebx
  00131	8b cf		 mov	 ecx, edi
  00133	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetLoopAni@ioEntityGroup@@QAE_NABVioHashString@@MMMM@Z

; 106  : 
; 107  : 			m_pOwner->ClearAllEquipEffect();

  00139	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0013f	e8 00 00 00 00	 call	 ?ClearAllEquipEffect@ioBaseChar@@QAEXXZ ; ioBaseChar::ClearAllEquipEffect

; 108  : 
; 109  : 			if( !m_ChangeMaterial.IsEmpty() )

  00144	8d be 6c 09 00
	00		 lea	 edi, DWORD PTR [esi+2412]
  0014a	8b cf		 mov	 ecx, edi
  0014c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00152	84 c0		 test	 al, al
  00154	75 34		 jne	 SHORT $LN1@ProcessBuf

; 110  : 			{
; 111  : 				Help::ChangeMaterial( m_pOwner->GetGroup(), m_ChangeMaterial, Setting::SoftSkinning() );

  00156	0f b6 05 05 00
	00 00		 movzx	 eax, BYTE PTR ?m_Option@Setting@@1USettingOption@@A+5
  0015d	50		 push	 eax
  0015e	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  00164	57		 push	 edi
  00165	ff 70 04	 push	 DWORD PTR [eax+4]
  00168	e8 00 00 00 00	 call	 ?ChangeMaterial@Help@@YAXPAVioEntityGroup@@ABVioHashString@@_N@Z ; Help::ChangeMaterial
  0016d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 112  : 			}
; 113  : 		}
; 114  : 	}

  00170	eb 18		 jmp	 SHORT $LN1@ProcessBuf
$LN5@ProcessBuf:

; 115  : 	else if( m_pOwner->GetState() != CS_USING_SKILL )

  00172	3c 07		 cmp	 al, 7
$LN39@ProcessBuf:
  00174	74 14		 je	 SHORT $LN1@ProcessBuf

; 116  : 	{
; 117  : 		m_pOwner->CheckUseBuffSkill( m_Name, false );

  00176	53		 push	 ebx
  00177	8d 86 34 02 00
	00		 lea	 eax, DWORD PTR [esi+564]
  0017d	50		 push	 eax
  0017e	e8 00 00 00 00	 call	 ?CheckUseBuffSkill@ioBaseChar@@QAEXABVioHashString@@_N@Z ; ioBaseChar::CheckUseBuffSkill

; 118  : 		SetReserveEndBuff();

  00183	8b ce		 mov	 ecx, esi
$LN38@ProcessBuf:
  00185	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff
$LN1@ProcessBuf:
  0018a	5f		 pop	 edi
  0018b	5e		 pop	 esi
  0018c	5b		 pop	 ebx

; 119  : 		return;
; 120  : 	}
; 121  : }

  0018d	5d		 pop	 ebp
  0018e	c2 04 00	 ret	 4
?ProcessBuff@ioNotMoveProtectBuff@@UAEXM@Z ENDP		; ioNotMoveProtectBuff::ProcessBuff
_TEXT	ENDS
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
EXTRN	?EndEffect@ioBaseChar@@QAEXABVioHashString@@_N1@Z:PROC ; ioBaseChar::EndEffect
EXTRN	?RestroeAllEquipItemCustomize@ioBaseChar@@QAEXXZ:PROC ; ioBaseChar::RestroeAllEquipItemCustomize
EXTRN	?RestoreAllEquipEffect@ioBaseChar@@QAEXXZ:PROC	; ioBaseChar::RestoreAllEquipEffect
EXTRN	?ApplyModifiedMaterial@ioBaseChar@@QAEXXZ:PROC	; ioBaseChar::ApplyModifiedMaterial
EXTRN	?RestoreMaterial@Help@@YAXPAVioEntityGroup@@_N@Z:PROC ; Help::RestoreMaterial
EXTRN	?SetState@ioBaseChar@@QAEXH_N@Z:PROC		; ioBaseChar::SetState
; Function compile flags: /Ogsp
;	COMDAT ?EndBuff@ioNotMoveProtectBuff@@UAEXXZ
_TEXT	SEGMENT
?EndBuff@ioNotMoveProtectBuff@@UAEXXZ PROC		; ioNotMoveProtectBuff::EndBuff, COMDAT
; _this$ = ecx

; 124  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 125  : 	if( m_pOwner->GetState() == CS_NOT_MOVE_PROTECT )

  00003	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00009	80 b9 10 03 00
	00 3a		 cmp	 BYTE PTR [ecx+784], 58	; 0000003aH
  00010	75 0f		 jne	 SHORT $LN2@EndBuff

; 126  : 	{
; 127  : 		m_pOwner->SetState( CS_DELAY, m_bSendDelayNetWork );

  00012	0f b6 86 f9 08
	00 00		 movzx	 eax, BYTE PTR [esi+2297]
  00019	50		 push	 eax
  0001a	6a 00		 push	 0
  0001c	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState
$LN2@EndBuff:

; 128  : 	}
; 129  : 
; 130  : 	if( !m_ChangeMaterial.IsEmpty() )

  00021	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0002d	84 c0		 test	 al, al
  0002f	75 23		 jne	 SHORT $LN1@EndBuff

; 131  : 	{
; 132  : 		Help::RestoreMaterial( m_pOwner->GetGroup(), Setting::SoftSkinning() );

  00031	0f b6 05 05 00
	00 00		 movzx	 eax, BYTE PTR ?m_Option@Setting@@1USettingOption@@A+5
  00038	50		 push	 eax
  00039	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  0003f	ff 70 04	 push	 DWORD PTR [eax+4]
  00042	e8 00 00 00 00	 call	 ?RestoreMaterial@Help@@YAXPAVioEntityGroup@@_N@Z ; Help::RestoreMaterial
  00047	59		 pop	 ecx
  00048	59		 pop	 ecx

; 133  : 		m_pOwner->ApplyModifiedMaterial();

  00049	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0004f	e8 00 00 00 00	 call	 ?ApplyModifiedMaterial@ioBaseChar@@QAEXXZ ; ioBaseChar::ApplyModifiedMaterial
$LN1@EndBuff:

; 134  : 	}
; 135  : 
; 136  : 	m_pOwner->RestoreAllEquipEffect();

  00054	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0005a	e8 00 00 00 00	 call	 ?RestoreAllEquipEffect@ioBaseChar@@QAEXXZ ; ioBaseChar::RestoreAllEquipEffect

; 137  : 	m_pOwner->RestroeAllEquipItemCustomize();

  0005f	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00065	e8 00 00 00 00	 call	 ?RestroeAllEquipItemCustomize@ioBaseChar@@QAEXXZ ; ioBaseChar::RestroeAllEquipItemCustomize

; 138  : 
; 139  : 
; 140  : 	m_pOwner->EndEffect( m_LoopEffect );

  0006a	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00070	6a 01		 push	 1
  00072	6a 01		 push	 1
  00074	8d 86 8c 09 00
	00		 lea	 eax, DWORD PTR [esi+2444]
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ?EndEffect@ioBaseChar@@QAEXABVioHashString@@_N1@Z ; ioBaseChar::EndEffect

; 141  : 
; 142  : 	ioBuff::EndBuff();

  00080	8b ce		 mov	 ecx, esi
  00082	5e		 pop	 esi
  00083	e9 00 00 00 00	 jmp	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff
?EndBuff@ioNotMoveProtectBuff@@UAEXXZ ENDP		; ioNotMoveProtectBuff::EndBuff
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<16>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -28					; size = 4
__k$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<16>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 8c 01 00
	00		 je	 $LN96@LoadString
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 75 01 00
	00		 je	 $LN95@LoadString
  00039	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003c	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  0003f	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00042	84 d2		 test	 dl, dl
  00044	0f 84 5e 01 00
	00		 je	 $LN94@LoadString
  0004a	b1 eb		 mov	 cl, -21			; ffffffebH
  0004c	32 d1		 xor	 dl, cl
  0004e	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 46 01 00
	00		 je	 $LN93@LoadString
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 2f 01 00
	00		 je	 $LN92@LoadString
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 18 01 00
	00		 je	 $LN91@LoadString
  0007e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00081	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  00084	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00087	84 d2		 test	 dl, dl
  00089	0f 84 02 01 00
	00		 je	 $LN90@LoadString
  0008f	32 d1		 xor	 dl, cl
  00091	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 ec 00 00
	00		 je	 $LN89@LoadString
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 d5 00 00
	00		 je	 $LN88@LoadString
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 be 00 00
	00		 je	 $LN87@LoadString
  000c1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000c4	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 a8 00 00
	00		 je	 $LN86@LoadString
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 92 00 00
	00		 je	 $LN85@LoadString
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	74 7f		 je	 SHORT $LN84@LoadString
  000ef	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f2	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f5	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f8	84 d2		 test	 dl, dl
  000fa	74 6c		 je	 SHORT $LN83@LoadString
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	74 5a		 je	 SHORT $LN82@LoadString
  00109	32 d1		 xor	 dl, cl
  0010b	80 78 0f 00	 cmp	 BYTE PTR [eax+15], 0
  0010f	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	0f 84 a0 00 00
	00		 je	 $LN111@LoadString
  00118	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0011b	84 d2		 test	 dl, dl
  0011d	74 3e		 je	 SHORT $LN80@LoadString
  0011f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00122	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00125	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00128	84 d2		 test	 dl, dl
  0012a	74 2b		 je	 SHORT $LN79@LoadString
  0012c	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0012f	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00132	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00135	84 d2		 test	 dl, dl
  00137	74 19		 je	 SHORT $LN78@LoadString
  00139	8a 40 13	 mov	 al, BYTE PTR [eax+19]
  0013c	32 d1		 xor	 dl, cl
  0013e	88 55 fa	 mov	 BYTE PTR __k$[ebp+18], dl
  00141	84 c0		 test	 al, al
  00143	74 07		 je	 SHORT $LN77@LoadString
  00145	34 ea		 xor	 al, -22			; ffffffeaH
  00147	88 45 fb	 mov	 BYTE PTR __k$[ebp+19], al
  0014a	eb 6c		 jmp	 SHORT $LN111@LoadString
$LN77@LoadString:
  0014c	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00150	eb 66		 jmp	 SHORT $LN111@LoadString
$LN78@LoadString:
  00152	88 4d fa	 mov	 BYTE PTR __k$[ebp+18], cl
  00155	eb 61		 jmp	 SHORT $LN111@LoadString
$LN79@LoadString:
  00157	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0015b	eb 5b		 jmp	 SHORT $LN111@LoadString
$LN80@LoadString:
  0015d	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00161	eb 55		 jmp	 SHORT $LN111@LoadString
$LN82@LoadString:
  00163	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  00166	eb 50		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  00168	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  0016c	eb 4a		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  0016e	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00172	eb 44		 jmp	 SHORT $LN111@LoadString
$LN85@LoadString:
  00174	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00178	eb 3e		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  0017a	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  0017d	eb 39		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  0017f	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00183	eb 33		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  00185	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00189	eb 2d		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  0018b	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0018f	eb 27		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  00191	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  00194	eb 22		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  00196	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0019a	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  0019c	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001a0	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  001a2	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001a6	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  001a8	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001ac	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  001ae	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001b2	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  001b4	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  001b8	6a 03		 push	 3
  001ba	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001bd	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+15], 0
  001c1	5a		 pop	 edx
$LL104@LoadString:
  001c2	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001c8	83 c0 04	 add	 eax, 4
  001cb	4a		 dec	 edx
  001cc	75 f4		 jne	 SHORT $LL104@LoadString
  001ce	6a 0c		 push	 12			; 0000000cH
  001d0	58		 pop	 eax
$LL101@LoadString:
  001d1	8b c8		 mov	 ecx, eax
  001d3	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001d9	79 05		 jns	 SHORT $LN112@LoadString
  001db	49		 dec	 ecx
  001dc	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001df	41		 inc	 ecx
$LN112@LoadString:
  001e0	b2 ed		 mov	 dl, -19			; ffffffedH
  001e2	2a d1		 sub	 dl, cl
  001e4	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001e8	40		 inc	 eax
  001e9	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001ec	7c e3		 jl	 SHORT $LL101@LoadString

; 163  : 		LoadString(_k, d, b, i);

  001ee	ff 75 14	 push	 DWORD PTR _i$[ebp]
  001f1	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001f4	57		 push	 edi
  001f5	56		 push	 esi
  001f6	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001f9	50		 push	 eax
  001fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00200	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00203	5f		 pop	 edi
  00204	33 cd		 xor	 ecx, ebp
  00206	5e		 pop	 esi
  00207	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020c	c9		 leave
  0020d	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<16>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<19>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<19>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 cf 01 00
	00		 je	 $LN96@LoadString@2
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 b8 01 00
	00		 je	 $LN95@LoadString@2
  00039	b1 ec		 mov	 cl, -20			; ffffffecH
  0003b	32 d1		 xor	 dl, cl
  0003d	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00040	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00043	84 d2		 test	 dl, dl
  00045	0f 84 a0 01 00
	00		 je	 $LN94@LoadString@2
  0004b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004e	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 89 01 00
	00		 je	 $LN93@LoadString@2
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 72 01 00
	00		 je	 $LN92@LoadString@2
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 5c 01 00
	00		 je	 $LN91@LoadString@2
  0007e	32 d1		 xor	 dl, cl
  00080	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  00083	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00086	84 d2		 test	 dl, dl
  00088	0f 84 46 01 00
	00		 je	 $LN90@LoadString@2
  0008e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00091	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 2f 01 00
	00		 je	 $LN89@LoadString@2
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 18 01 00
	00		 je	 $LN88@LoadString@2
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 02 01 00
	00		 je	 $LN87@LoadString@2
  000c1	32 d1		 xor	 dl, cl
  000c3	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000c6	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c9	84 d2		 test	 dl, dl
  000cb	0f 84 ec 00 00
	00		 je	 $LN86@LoadString@2
  000d1	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 d5 00 00
	00		 je	 $LN85@LoadString@2
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 be 00 00
	00		 je	 $LN84@LoadString@2
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 a8 00 00
	00		 je	 $LN83@LoadString@2
  00104	32 d1		 xor	 dl, cl
  00106	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 92 00 00
	00		 je	 $LN82@LoadString@2
  00114	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00117	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0011a	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011d	84 d2		 test	 dl, dl
  0011f	74 7f		 je	 SHORT $LN81@LoadString@2
  00121	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00124	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00127	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012a	84 d2		 test	 dl, dl
  0012c	74 6c		 je	 SHORT $LN80@LoadString@2
  0012e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00131	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00134	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00137	84 d2		 test	 dl, dl
  00139	74 5a		 je	 SHORT $LN79@LoadString@2
  0013b	32 d1		 xor	 dl, cl
  0013d	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00141	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	0f 84 b1 00 00
	00		 je	 $LN111@LoadString@2
  0014a	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0014d	84 d2		 test	 dl, dl
  0014f	74 3e		 je	 SHORT $LN77@LoadString@2
  00151	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00154	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  00157	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0015a	84 d2		 test	 dl, dl
  0015c	74 2b		 je	 SHORT $LN76@LoadString@2
  0015e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00161	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  00164	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00167	84 d2		 test	 dl, dl
  00169	74 19		 je	 SHORT $LN75@LoadString@2
  0016b	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  0016e	32 d1		 xor	 dl, cl
  00170	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  00173	84 c0		 test	 al, al
  00175	74 07		 je	 SHORT $LN74@LoadString@2
  00177	34 eb		 xor	 al, -21			; ffffffebH
  00179	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  0017c	eb 7d		 jmp	 SHORT $LN111@LoadString@2
$LN74@LoadString@2:
  0017e	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  00182	eb 77		 jmp	 SHORT $LN111@LoadString@2
$LN75@LoadString@2:
  00184	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  00187	eb 72		 jmp	 SHORT $LN111@LoadString@2
$LN76@LoadString@2:
  00189	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0018d	eb 6c		 jmp	 SHORT $LN111@LoadString@2
$LN77@LoadString@2:
  0018f	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00193	eb 66		 jmp	 SHORT $LN111@LoadString@2
$LN79@LoadString@2:
  00195	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00198	eb 61		 jmp	 SHORT $LN111@LoadString@2
$LN80@LoadString@2:
  0019a	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0019e	eb 5b		 jmp	 SHORT $LN111@LoadString@2
$LN81@LoadString@2:
  001a0	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001a4	eb 55		 jmp	 SHORT $LN111@LoadString@2
$LN82@LoadString@2:
  001a6	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001aa	eb 4f		 jmp	 SHORT $LN111@LoadString@2
$LN83@LoadString@2:
  001ac	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001af	eb 4a		 jmp	 SHORT $LN111@LoadString@2
$LN84@LoadString@2:
  001b1	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001b5	eb 44		 jmp	 SHORT $LN111@LoadString@2
$LN85@LoadString@2:
  001b7	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001bb	eb 3e		 jmp	 SHORT $LN111@LoadString@2
$LN86@LoadString@2:
  001bd	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001c1	eb 38		 jmp	 SHORT $LN111@LoadString@2
$LN87@LoadString@2:
  001c3	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001c6	eb 33		 jmp	 SHORT $LN111@LoadString@2
$LN88@LoadString@2:
  001c8	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001cc	eb 2d		 jmp	 SHORT $LN111@LoadString@2
$LN89@LoadString@2:
  001ce	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001d2	eb 27		 jmp	 SHORT $LN111@LoadString@2
$LN90@LoadString@2:
  001d4	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d8	eb 21		 jmp	 SHORT $LN111@LoadString@2
$LN91@LoadString@2:
  001da	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001dd	eb 1c		 jmp	 SHORT $LN111@LoadString@2
$LN92@LoadString@2:
  001df	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001e3	eb 16		 jmp	 SHORT $LN111@LoadString@2
$LN93@LoadString@2:
  001e5	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e9	eb 10		 jmp	 SHORT $LN111@LoadString@2
$LN94@LoadString@2:
  001eb	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001ef	eb 0a		 jmp	 SHORT $LN111@LoadString@2
$LN95@LoadString@2:
  001f1	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001f5	eb 04		 jmp	 SHORT $LN111@LoadString@2
$LN96@LoadString@2:
  001f7	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@2:
  001fb	6a 04		 push	 4
  001fd	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00200	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  00204	5a		 pop	 edx
$LL104@LoadString@2:
  00205	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0020b	83 c0 04	 add	 eax, 4
  0020e	4a		 dec	 edx
  0020f	75 f4		 jne	 SHORT $LL104@LoadString@2
  00211	6a 10		 push	 16			; 00000010H
  00213	58		 pop	 eax
$LL101@LoadString@2:
  00214	8b c8		 mov	 ecx, eax
  00216	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0021c	79 05		 jns	 SHORT $LN112@LoadString@2
  0021e	49		 dec	 ecx
  0021f	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00222	41		 inc	 ecx
$LN112@LoadString@2:
  00223	b2 ed		 mov	 dl, -19			; ffffffedH
  00225	2a d1		 sub	 dl, cl
  00227	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  0022b	40		 inc	 eax
  0022c	83 f8 12	 cmp	 eax, 18			; 00000012H
  0022f	7c e3		 jl	 SHORT $LL101@LoadString@2

; 163  : 		LoadString(_k, d, b, i);

  00231	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00234	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00237	57		 push	 edi
  00238	56		 push	 esi
  00239	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0023c	50		 push	 eax
  0023d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00243	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00246	5f		 pop	 edi
  00247	33 cd		 xor	 ecx, ebp
  00249	5e		 pop	 esi
  0024a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024f	c9		 leave
  00250	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<19>
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	_rkLoader$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionotmoveprotectbuff.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioNotMoveProtectBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_rkLoader$GSCopy$ = -296				; size = 4
_this$GSCopy$ = -292					; size = 4
_szBuf$ = -288						; size = 260
__k$524913 = -28					; size = 16
__k$524788 = -28					; size = 19
__k$524663 = -28					; size = 16
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioNotMoveProtectBuff@@UAEXAAVioINILoader@@@Z PROC ; ioNotMoveProtectBuff::LoadProperty, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _rkLoader$[ebp]
  00018	57		 push	 edi
  00019	8b f9		 mov	 edi, ecx

; 29   : 	ioBuff::LoadProperty( rkLoader );

  0001b	56		 push	 esi

; 38   : 	rkLoader.LoadString_e( "not_move_effect", "", szBuf, MAX_PATH );

  0001c	89 bd dc fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00022	89 b5 d8 fe ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], esi
  00028	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty
  0002d	6a 03		 push	 3
  0002f	c7 45 e4 8e 84
	8a 84		 mov	 DWORD PTR __k$524663[ebp], -2071296882 ; 848a848eH
  00036	c7 45 e8 8a 89
	b4 87		 mov	 DWORD PTR __k$524663[ebp+4], -2018211446 ; 87b4898aH
  0003d	c7 45 ec 8c 98
	8e 98		 mov	 DWORD PTR __k$524663[ebp+8], -1735485300 ; 988e988cH
  00044	8d 45 e4	 lea	 eax, DWORD PTR __k$524663[ebp]
  00047	c7 45 f0 84 8d
	87 00		 mov	 DWORD PTR __k$524663[ebp+12], 8883588 ; 00878d84H
  0004e	59		 pop	 ecx
$LL106@LoadProper:

; 30   : 
; 31   : 	char szBuf[MAX_PATH];
; 32   : 
; 33   : 	rkLoader.LoadString_e( "change_material", "", szBuf, MAX_PATH );

  0004f	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00055	83 c0 04	 add	 eax, 4
  00058	49		 dec	 ecx
  00059	75 f4		 jne	 SHORT $LL106@LoadProper
  0005b	6a 0c		 push	 12			; 0000000cH
  0005d	58		 pop	 eax
$LL103@LoadProper:
  0005e	8b c8		 mov	 ecx, eax
  00060	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00066	79 05		 jns	 SHORT $LN333@LoadProper
  00068	49		 dec	 ecx
  00069	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0006c	41		 inc	 ecx
$LN333@LoadProper:
  0006d	b2 ed		 mov	 dl, -19			; ffffffedH
  0006f	2a d1		 sub	 dl, cl
  00071	30 54 05 e4	 xor	 BYTE PTR __k$524663[ebp+eax], dl
  00075	40		 inc	 eax
  00076	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00079	7c e3		 jl	 SHORT $LL103@LoadProper
  0007b	68 04 01 00 00	 push	 260			; 00000104H
  00080	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00086	50		 push	 eax
  00087	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0008c	53		 push	 ebx
  0008d	8d 45 e4	 lea	 eax, DWORD PTR __k$524663[ebp]
  00090	8b ce		 mov	 ecx, esi
  00092	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z
  00098	50		 push	 eax
  00099	ff d6		 call	 esi

; 34   : 	m_ChangeMaterial = szBuf;

  0009b	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000a1	8d 8f 6c 09 00
	00		 lea	 ecx, DWORD PTR [edi+2412]
  000a7	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  000ad	50		 push	 eax
  000ae	ff d7		 call	 edi
  000b0	6a 04		 push	 4

; 35   : 	
; 36   : 	rkLoader.LoadString_e( "not_move_animation", "", szBuf, MAX_PATH );

  000b2	c7 45 e4 83 83
	9f b5		 mov	 DWORD PTR __k$524788[ebp], -1247837309 ; b59f8383H
  000b9	c7 45 e8 80 83
	9d 8f		 mov	 DWORD PTR __k$524788[ebp+4], -1885502592 ; 8f9d8380H
  000c0	c7 45 ec b2 8d
	85 83		 mov	 DWORD PTR __k$524788[ebp+8], -2088399438 ; 83858db2H
  000c7	c7 45 f0 80 8d
	9f 83		 mov	 DWORD PTR __k$524788[ebp+12], -2086695552 ; 839f8d80H
  000ce	66 c7 45 f4 82
	82		 mov	 WORD PTR __k$524788[ebp+16], 33410 ; 00008282H
  000d4	8d 45 e4	 lea	 eax, DWORD PTR __k$524788[ebp]
  000d7	c6 45 f6 00	 mov	 BYTE PTR __k$524788[ebp+18], 0
  000db	59		 pop	 ecx
$LL212@LoadProper:
  000dc	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000e2	83 c0 04	 add	 eax, 4
  000e5	49		 dec	 ecx
  000e6	75 f4		 jne	 SHORT $LL212@LoadProper
  000e8	6a 10		 push	 16			; 00000010H
  000ea	58		 pop	 eax
$LL209@LoadProper:
  000eb	8b c8		 mov	 ecx, eax
  000ed	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000f3	79 05		 jns	 SHORT $LN334@LoadProper
  000f5	49		 dec	 ecx
  000f6	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000f9	41		 inc	 ecx
$LN334@LoadProper:
  000fa	b2 ed		 mov	 dl, -19			; ffffffedH
  000fc	2a d1		 sub	 dl, cl
  000fe	30 54 05 e4	 xor	 BYTE PTR __k$524788[ebp+eax], dl
  00102	40		 inc	 eax
  00103	83 f8 12	 cmp	 eax, 18			; 00000012H
  00106	7c e3		 jl	 SHORT $LL209@LoadProper
  00108	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0010e	68 04 01 00 00	 push	 260			; 00000104H
  00113	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00119	50		 push	 eax
  0011a	53		 push	 ebx
  0011b	8d 45 e4	 lea	 eax, DWORD PTR __k$524788[ebp]
  0011e	50		 push	 eax
  0011f	ff d6		 call	 esi

; 37   : 	m_LoopAnimation = szBuf;

  00121	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00127	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0012d	50		 push	 eax
  0012e	81 c1 7c 09 00
	00		 add	 ecx, 2428		; 0000097cH
  00134	ff d7		 call	 edi
  00136	6a 03		 push	 3

; 38   : 	rkLoader.LoadString_e( "not_move_effect", "", szBuf, MAX_PATH );

  00138	c7 45 e4 83 83
	9f b5		 mov	 DWORD PTR __k$524913[ebp], -1247837309 ; b59f8383H
  0013f	c7 45 e8 80 83
	9d 8f		 mov	 DWORD PTR __k$524913[ebp+4], -1885502592 ; 8f9d8380H
  00146	c7 45 ec b2 89
	8d 8c		 mov	 DWORD PTR __k$524913[ebp+8], -1936881230 ; 8c8d89b2H
  0014d	8d 45 e4	 lea	 eax, DWORD PTR __k$524913[ebp]
  00150	c7 45 f0 88 8f
	9f 00		 mov	 DWORD PTR __k$524913[ebp+12], 10456968 ; 009f8f88H
  00157	59		 pop	 ecx
$LL318@LoadProper:
  00158	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0015e	83 c0 04	 add	 eax, 4
  00161	49		 dec	 ecx
  00162	75 f4		 jne	 SHORT $LL318@LoadProper
  00164	6a 0c		 push	 12			; 0000000cH
  00166	58		 pop	 eax
$LL315@LoadProper:
  00167	8b c8		 mov	 ecx, eax
  00169	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0016f	79 05		 jns	 SHORT $LN335@LoadProper
  00171	49		 dec	 ecx
  00172	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00175	41		 inc	 ecx
$LN335@LoadProper:
  00176	b2 ed		 mov	 dl, -19			; ffffffedH
  00178	2a d1		 sub	 dl, cl
  0017a	30 54 05 e4	 xor	 BYTE PTR __k$524913[ebp+eax], dl
  0017e	40		 inc	 eax
  0017f	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00182	7c e3		 jl	 SHORT $LL315@LoadProper
  00184	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0018a	68 04 01 00 00	 push	 260			; 00000104H
  0018f	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00195	50		 push	 eax
  00196	53		 push	 ebx
  00197	8d 45 e4	 lea	 eax, DWORD PTR __k$524913[ebp]
  0019a	50		 push	 eax
  0019b	ff d6		 call	 esi

; 39   : 	m_LoopEffect = szBuf;

  0019d	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001a3	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  001a9	50		 push	 eax
  001aa	81 c1 8c 09 00
	00		 add	 ecx, 2444		; 0000098cH
  001b0	ff d7		 call	 edi

; 40   : }

  001b2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b5	5f		 pop	 edi
  001b6	5e		 pop	 esi
  001b7	33 cd		 xor	 ecx, ebp
  001b9	5b		 pop	 ebx
  001ba	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001bf	c9		 leave
  001c0	c2 04 00	 ret	 4
?LoadProperty@ioNotMoveProtectBuff@@UAEXAAVioINILoader@@@Z ENDP ; ioNotMoveProtectBuff::LoadProperty
_TEXT	ENDS
END
