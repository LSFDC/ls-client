; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\SlangUtil.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?ms_Singleton@?$Singleton@VCSlangUtil@@@@1PAVCSlangUtil@@A ; Singleton<CSlangUtil>::ms_Singleton
;	COMDAT ?ms_Singleton@?$Singleton@VCSlangUtil@@@@1PAVCSlangUtil@@A
_BSS	SEGMENT
?ms_Singleton@?$Singleton@VCSlangUtil@@@@1PAVCSlangUtil@@A DD 01H DUP (?) ; Singleton<CSlangUtil>::ms_Singleton
_BSS	ENDS
PUBLIC	??_C@_0BN@GHLBKHJF@?$CFs?5?3?5?$CFd?5?3?5Over?5Max?5loop?5?3?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BF@FKJJFIBM@CSlangUtil?3?3GetField?$AA@	; `string'
PUBLIC	?GetField@CSlangUtil@@IAEPADPBDHPAD@Z		; CSlangUtil::GetField
EXTRN	__imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ:PROC
EXTRN	__imp_?LOG@@3VCLog@@A:BYTE
;	COMDAT ??_C@_0BN@GHLBKHJF@?$CFs?5?3?5?$CFd?5?3?5Over?5Max?5loop?5?3?5?$CFs?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\slangutil.cpp
CONST	SEGMENT
??_C@_0BN@GHLBKHJF@?$CFs?5?3?5?$CFd?5?3?5Over?5Max?5loop?5?3?5?$CFs?$AA@ DB '%'
	DB	's : %d : Over Max loop : %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FKJJFIBM@CSlangUtil?3?3GetField?$AA@
CONST	SEGMENT
??_C@_0BF@FKJJFIBM@CSlangUtil?3?3GetField?$AA@ DB 'CSlangUtil::GetField', 00H ; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?GetField@CSlangUtil@@IAEPADPBDHPAD@Z
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_delim$ = 12						; size = 4
_field$ = 16						; size = 4
?GetField@CSlangUtil@@IAEPADPBDHPAD@Z PROC		; CSlangUtil::GetField, COMDAT
; _this$ = ecx

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 253  : 	unsigned char *src = (unsigned char *)buf;

  00006	8b 7d 08	 mov	 edi, DWORD PTR _buf$[ebp]

; 254  : 	int iCnt = 0;
; 255  :     while ((int)*src == delim && *src != 0) 

  00009	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  0000c	8b f7		 mov	 esi, edi
  0000e	33 c0		 xor	 eax, eax
  00010	eb 14		 jmp	 SHORT $LN15@GetField
$LL6@GetField:
  00012	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00015	74 37		 je	 SHORT $LN5@GetField

; 256  : 	{
; 257  : 		src++;	// delimeter를 건너뛴다.

  00017	46		 inc	 esi

; 258  : 		if( iCnt++ > MAX_LOOP ) // 비상STOP

  00018	8b c8		 mov	 ecx, eax
  0001a	40		 inc	 eax
  0001b	81 f9 00 04 00
	00		 cmp	 ecx, 1024		; 00000400H
  00021	7f 0a		 jg	 SHORT $LN11@GetField

; 254  : 	int iCnt = 0;
; 255  :     while ((int)*src == delim && *src != 0) 

  00023	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]
$LN15@GetField:
  00026	3b 4d 0c	 cmp	 ecx, DWORD PTR _delim$[ebp]
  00029	74 e7		 je	 SHORT $LL6@GetField

; 268  : 		if( iCnt++ > MAX_LOOP ) // 비상STOP

  0002b	eb 21		 jmp	 SHORT $LN5@GetField
$LN11@GetField:

; 259  : 		{
; 260  : 			LOG.PrintTimeAndLog(0, "%s : %d : Over Max loop : %s", __FUNCTION__, __LINE__, buf );

  0002d	57		 push	 edi
  0002e	68 04 01 00 00	 push	 260			; 00000104H
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FKJJFIBM@CSlangUtil?3?3GetField?$AA@
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GHLBKHJF@?$CFs?5?3?5?$CFd?5?3?5Over?5Max?5loop?5?3?5?$CFs?$AA@
  0003d	6a 00		 push	 0
  0003f	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  0004b	83 c4 18	 add	 esp, 24			; 00000018H
$LN5@GetField:

; 261  : 			break;
; 262  : 		}
; 263  : 	}
; 264  : 	iCnt=0;
; 265  :     while ((int)*src != delim && *src != 0) 

  0004e	8b 5d 10	 mov	 ebx, DWORD PTR _field$[ebp]
  00051	33 c9		 xor	 ecx, ecx
  00053	eb 12		 jmp	 SHORT $LN17@GetField
$LL3@GetField:
  00055	84 c0		 test	 al, al
  00057	74 3b		 je	 SHORT $LN2@GetField

; 266  : 	{
; 267  : 		*field++ = *src++;

  00059	88 03		 mov	 BYTE PTR [ebx], al
  0005b	43		 inc	 ebx
  0005c	46		 inc	 esi

; 268  : 		if( iCnt++ > MAX_LOOP ) // 비상STOP

  0005d	8b c1		 mov	 eax, ecx
  0005f	41		 inc	 ecx
  00060	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  00065	7f 0c		 jg	 SHORT $LN12@GetField
$LN17@GetField:

; 261  : 			break;
; 262  : 		}
; 263  : 	}
; 264  : 	iCnt=0;
; 265  :     while ((int)*src != delim && *src != 0) 

  00067	8a 06		 mov	 al, BYTE PTR [esi]
  00069	0f b6 d0	 movzx	 edx, al
  0006c	3b 55 0c	 cmp	 edx, DWORD PTR _delim$[ebp]
  0006f	75 e4		 jne	 SHORT $LL3@GetField

; 268  : 		if( iCnt++ > MAX_LOOP ) // 비상STOP

  00071	eb 21		 jmp	 SHORT $LN2@GetField
$LN12@GetField:

; 269  : 		{
; 270  : 			LOG.PrintTimeAndLog(0, "%s : %d : Over Max loop : %s", __FUNCTION__, __LINE__, buf );

  00073	57		 push	 edi
  00074	68 0e 01 00 00	 push	 270			; 0000010eH
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FKJJFIBM@CSlangUtil?3?3GetField?$AA@
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GHLBKHJF@?$CFs?5?3?5?$CFd?5?3?5Over?5Max?5loop?5?3?5?$CFs?$AA@
  00083	6a 00		 push	 0
  00085	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00091	83 c4 18	 add	 esp, 24			; 00000018H
$LN2@GetField:

; 271  : 			break;
; 272  : 		}
; 273  : 	}
; 274  : 
; 275  :     *field = '\0';
; 276  :     return (char *)src;

  00094	5f		 pop	 edi
  00095	8b c6		 mov	 eax, esi
  00097	5e		 pop	 esi
  00098	c6 03 00	 mov	 BYTE PTR [ebx], 0
  0009b	5b		 pop	 ebx

; 277  : }

  0009c	5d		 pop	 ebp
  0009d	c2 0c 00	 ret	 12			; 0000000cH
?GetField@CSlangUtil@@IAEPADPBDHPAD@Z ENDP		; CSlangUtil::GetField
_TEXT	ENDS
PUBLIC	?strchr@@YAPADPADH@Z				; strchr
EXTRN	__imp__strchr:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\string.h
;	COMDAT ?strchr@@YAPADPADH@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strchr@@YAPADPADH@Z PROC				; strchr, COMDAT

; 215  : 	{ return (char*)strchr((const char*)_Str, _Ch); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__strchr
?strchr@@YAPADPADH@Z ENDP				; strchr
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 490  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 491  : 		return (_CSTD strlen(_First));

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@length:
  00009	8a 08		 mov	 cl, BYTE PTR [eax]
  0000b	40		 inc	 eax
  0000c	84 c9		 test	 cl, cl
  0000e	75 f9		 jne	 SHORT $LL3@length
  00010	2b c2		 sub	 eax, edx

; 492  : 		}

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
EXTRN	_memcpy:PROC
; Function compile flags: /Ogsp
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 496  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 		}

  00003	5d		 pop	 ebp

; 497  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogsp
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 516  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 518  : 		}

  00003	5d		 pop	 ebp

; 517  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAPADPADID@Z	; std::char_traits<char>::assign
EXTRN	_memset:PROC
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$char_traits@D@std@@SAPADPADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADPADID@Z PROC		; std::char_traits<char>::assign, COMDAT

; 521  : 		{	// assign _Count * _Ch to [_First, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 522  : 		return ((_Elem *)_CSTD memset(_First, _Ch, _Count));

  00003	0f be 45 10	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00007	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0000a	50		 push	 eax
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	e8 00 00 00 00	 call	 _memset
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH

; 523  : 		}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?assign@?$char_traits@D@std@@SAPADPADID@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 526  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 527  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]
  00008	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000b	88 01		 mov	 BYTE PTR [ecx], al

; 528  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty, COMDAT
; _this$ = ecx

; 1551 : 		return (this->_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00005	0f 94 c0	 sete	 al

; 1552 : 		}

  00008	c3		 ret	 0
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
_TEXT	ENDS
PUBLIC	?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 1c		 push	 28			; 0000001cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
_TEXT	ENDS
PUBLIC	??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	6b c0 1c	 imul	 eax, 28			; 0000001cH
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[]
_TEXT	ENDS
PUBLIC	??0?$Singleton@VCSlangUtil@@@@QAE@XZ		; Singleton<CSlangUtil>::Singleton<CSlangUtil>
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
;	COMDAT ??0?$Singleton@VCSlangUtil@@@@QAE@XZ
_TEXT	SEGMENT
??0?$Singleton@VCSlangUtil@@@@QAE@XZ PROC		; Singleton<CSlangUtil>::Singleton<CSlangUtil>, COMDAT
; _this$ = ecx

; 27   : 	Singleton()

  00000	8b c1		 mov	 eax, ecx

; 28   : 	{
; 29   : 		assert( !ms_Singleton );
; 30   : 		int offset = (int)(T*)1 - (int)(Singleton <T>*)(T*)1;
; 31   : 		ms_Singleton = (T*)((int)this + offset);

  00002	8d 48 fc	 lea	 ecx, DWORD PTR [eax-4]
  00005	89 0d 00 00 00
	00		 mov	 DWORD PTR ?ms_Singleton@?$Singleton@VCSlangUtil@@@@1PAVCSlangUtil@@A, ecx ; Singleton<CSlangUtil>::ms_Singleton

; 32   : 	}

  0000b	c3		 ret	 0
??0?$Singleton@VCSlangUtil@@@@QAE@XZ ENDP		; Singleton<CSlangUtil>::Singleton<CSlangUtil>
_TEXT	ENDS
PUBLIC	??1?$Singleton@VCSlangUtil@@@@QAE@XZ		; Singleton<CSlangUtil>::~Singleton<CSlangUtil>
; Function compile flags: /Ogsp
;	COMDAT ??1?$Singleton@VCSlangUtil@@@@QAE@XZ
_TEXT	SEGMENT
??1?$Singleton@VCSlangUtil@@@@QAE@XZ PROC		; Singleton<CSlangUtil>::~Singleton<CSlangUtil>, COMDAT
; _this$ = ecx

; 36   : 		assert( ms_Singleton );
; 37   : 		ms_Singleton = 0;

  00000	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_Singleton@?$Singleton@VCSlangUtil@@@@1PAVCSlangUtil@@A, 0 ; Singleton<CSlangUtil>::ms_Singleton

; 38   : 	}

  00007	c3		 ret	 0
??1?$Singleton@VCSlangUtil@@@@QAE@XZ ENDP		; Singleton<CSlangUtil>::~Singleton<CSlangUtil>
_TEXT	ENDS
PUBLIC	?GetSingleton@?$Singleton@VCSlangUtil@@@@SAAAVCSlangUtil@@XZ ; Singleton<CSlangUtil>::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?GetSingleton@?$Singleton@VCSlangUtil@@@@SAAAVCSlangUtil@@XZ
_TEXT	SEGMENT
?GetSingleton@?$Singleton@VCSlangUtil@@@@SAAAVCSlangUtil@@XZ PROC ; Singleton<CSlangUtil>::GetSingleton, COMDAT

; 42   : 		assert( ms_Singleton );
; 43   : 		return (*ms_Singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VCSlangUtil@@@@1PAVCSlangUtil@@A ; Singleton<CSlangUtil>::ms_Singleton

; 44   : 	}

  00005	c3		 ret	 0
?GetSingleton@?$Singleton@VCSlangUtil@@@@SAAAVCSlangUtil@@XZ ENDP ; Singleton<CSlangUtil>::GetSingleton
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBE_NPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Inside
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBE_NPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBE_NPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBE_NPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range
_TEXT	ENDS
PUBLIC	??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 1c		 push	 28			; 0000001cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Compat
_TEXT	ENDS
PUBLIC	??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z
_TEXT	SEGMENT
$T509275 = -12						; size = 12
$T509280 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z PROC ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 49 92 24
	09		 cmp	 ecx, 153391689		; 09249249H
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T509280[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T509280[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T509275[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T509275[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T509275[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z ENDP ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$_Val_type@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ; std::_Val_type<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z PROC ; std::_Val_type<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ENDP ; std::_Val_type<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\strsafe.h
_TEXT	ENDS
;	COMDAT ?StringLengthWorkerA@@YGJPBDIPAI@Z
_TEXT	SEGMENT
?StringLengthWorkerA@@YGJPBDIPAI@Z PROC			; StringLengthWorkerA, COMDAT
; _psz$ = eax
; _cchMax$ = edx
; _pcchLength$ = edi

; 8549 : {

  00000	56		 push	 esi
  00001	8b f0		 mov	 esi, eax

; 8550 :     HRESULT hr = S_OK;

  00003	33 c0		 xor	 eax, eax

; 8551 :     size_t cchOriginalMax = cchMax;

  00005	8b ca		 mov	 ecx, edx

; 8552 : 
; 8553 :     while (cchMax && (*psz != '\0'))

  00007	85 d2		 test	 edx, edx
  00009	74 0c		 je	 SHORT $LN11@StringLeng
$LL6@StringLeng:
  0000b	38 06		 cmp	 BYTE PTR [esi], al
  0000d	74 04		 je	 SHORT $LN5@StringLeng

; 8554 :     {
; 8555 :         psz++;

  0000f	46		 inc	 esi

; 8556 :         cchMax--;

  00010	4a		 dec	 edx
  00011	75 f8		 jne	 SHORT $LL6@StringLeng
$LN5@StringLeng:

; 8557 :     }
; 8558 : 
; 8559 :     if (cchMax == 0)

  00013	85 d2		 test	 edx, edx
  00015	75 05		 jne	 SHORT $LN4@StringLeng
$LN11@StringLeng:

; 8560 :     {
; 8561 :         // the string is longer than cchMax
; 8562 :         hr = STRSAFE_E_INVALID_PARAMETER;

  00017	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN4@StringLeng:
  0001c	5e		 pop	 esi

; 8563 :     }
; 8564 : 
; 8565 :     if (pcchLength)

  0001d	85 ff		 test	 edi, edi
  0001f	74 0c		 je	 SHORT $LN1@StringLeng

; 8566 :     {
; 8567 :         if (SUCCEEDED(hr))

  00021	85 c0		 test	 eax, eax
  00023	78 05		 js	 SHORT $LN2@StringLeng

; 8568 :         {
; 8569 :             *pcchLength = cchOriginalMax - cchMax;

  00025	2b ca		 sub	 ecx, edx
  00027	89 0f		 mov	 DWORD PTR [edi], ecx

; 8574 :         }
; 8575 :     }
; 8576 : 
; 8577 :     return hr;
; 8578 : }

  00029	c3		 ret	 0
$LN2@StringLeng:

; 8570 :         }
; 8571 :         else
; 8572 :         {
; 8573 :             *pcchLength = 0;

  0002a	83 27 00	 and	 DWORD PTR [edi], 0
$LN1@StringLeng:

; 8574 :         }
; 8575 :     }
; 8576 : 
; 8577 :     return hr;
; 8578 : }

  0002d	c3		 ret	 0
?StringLengthWorkerA@@YGJPBDIPAI@Z ENDP			; StringLengthWorkerA
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?StringValidateDestA@@YGJPBDII@Z
_TEXT	SEGMENT
_cchMax$ = 8						; size = 4
?StringValidateDestA@@YGJPBDII@Z PROC			; StringValidateDestA, COMDAT
; _cchDest$ = ecx

; 8721 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 8722 :     HRESULT hr = S_OK;

  00003	33 c0		 xor	 eax, eax

; 8723 : 
; 8724 :     if ((cchDest == 0) || (cchDest > cchMax))

  00005	85 c9		 test	 ecx, ecx
  00007	74 05		 je	 SHORT $LN1@StringVali
  00009	3b 4d 08	 cmp	 ecx, DWORD PTR _cchMax$[ebp]
  0000c	76 05		 jbe	 SHORT $LN2@StringVali
$LN1@StringVali:

; 8725 :     {
; 8726 :         hr = STRSAFE_E_INVALID_PARAMETER;

  0000e	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN2@StringVali:

; 8727 :     }
; 8728 : 
; 8729 :     return hr;
; 8730 : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?StringValidateDestA@@YGJPBDII@Z ENDP			; StringValidateDestA
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?StringCopyWorkerA@@YGJPADIPAIPBDI@Z
_TEXT	SEGMENT
_hr$ = -4						; size = 4
_pcchNewDestLength$ = 8					; size = 4
_pszSrc$ = 12						; size = 4
_cchToCopy$ = 16					; size = 4
?StringCopyWorkerA@@YGJPADIPAIPBDI@Z PROC		; StringCopyWorkerA, COMDAT
; _pszDest$ = ecx
; _cchDest$ = eax

; 8947 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 8948 :     HRESULT hr = S_OK;

  00004	83 65 fc 00	 and	 DWORD PTR _hr$[ebp], 0
  00008	57		 push	 edi
  00009	8b f8		 mov	 edi, eax

; 8949 :     size_t cchNewDestLength = 0;

  0000b	33 c0		 xor	 eax, eax

; 8950 :     
; 8951 :     // ASSERT(cchDest != 0);
; 8952 : 
; 8953 :     while (cchDest && cchToCopy && (*pszSrc != '\0'))

  0000d	85 ff		 test	 edi, edi
  0000f	74 23		 je	 SHORT $LN9@StringCopy

; 8948 :     HRESULT hr = S_OK;

  00011	53		 push	 ebx
  00012	8b 5d 10	 mov	 ebx, DWORD PTR _cchToCopy$[ebp]
  00015	56		 push	 esi

; 8950 :     
; 8951 :     // ASSERT(cchDest != 0);
; 8952 : 
; 8953 :     while (cchDest && cchToCopy && (*pszSrc != '\0'))

  00016	8b 75 0c	 mov	 esi, DWORD PTR _pszSrc$[ebp]
  00019	2b f1		 sub	 esi, ecx
$LL4@StringCopy:
  0001b	85 db		 test	 ebx, ebx
  0001d	74 0f		 je	 SHORT $LN11@StringCopy
  0001f	8a 14 0e	 mov	 dl, BYTE PTR [esi+ecx]
  00022	84 d2		 test	 dl, dl
  00024	74 08		 je	 SHORT $LN11@StringCopy

; 8954 :     {
; 8955 :         *pszDest++ = *pszSrc++;

  00026	88 11		 mov	 BYTE PTR [ecx], dl
  00028	41		 inc	 ecx

; 8956 :         cchDest--;

  00029	4b		 dec	 ebx

; 8957 :         cchToCopy--;
; 8958 : 
; 8959 :         cchNewDestLength++;

  0002a	40		 inc	 eax
  0002b	4f		 dec	 edi
  0002c	75 ed		 jne	 SHORT $LL4@StringCopy
$LN11@StringCopy:
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 8960 :     }
; 8961 : 
; 8962 :     if (cchDest == 0)

  00030	85 ff		 test	 edi, edi
  00032	75 09		 jne	 SHORT $LN2@StringCopy
$LN9@StringCopy:

; 8963 :     {
; 8964 :         // we are going to truncate pszDest
; 8965 :         pszDest--;

  00034	49		 dec	 ecx

; 8966 :         cchNewDestLength--;

  00035	48		 dec	 eax

; 8967 : 
; 8968 :         hr = STRSAFE_E_INSUFFICIENT_BUFFER;

  00036	c7 45 fc 7a 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024774 ; 8007007aH
$LN2@StringCopy:

; 8969 :     }
; 8970 : 
; 8971 :     *pszDest = '\0';

  0003d	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 8972 : 
; 8973 :     if (pcchNewDestLength)

  00040	8b 4d 08	 mov	 ecx, DWORD PTR _pcchNewDestLength$[ebp]
  00043	5f		 pop	 edi
  00044	85 c9		 test	 ecx, ecx
  00046	74 02		 je	 SHORT $LN1@StringCopy

; 8974 :     {
; 8975 :         *pcchNewDestLength = cchNewDestLength;

  00048	89 01		 mov	 DWORD PTR [ecx], eax
$LN1@StringCopy:

; 8976 :     }
; 8977 : 
; 8978 :     return hr;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 8979 : }

  0004d	c9		 leave
  0004e	c2 0c 00	 ret	 12			; 0000000cH
?StringCopyWorkerA@@YGJPADIPAIPBDI@Z ENDP		; StringCopyWorkerA
_TEXT	ENDS
EXTRN	__imp___vsnprintf:PROC
; Function compile flags: /Ogsp
;	COMDAT ?StringVPrintfWorkerA@@YGJPADIPAIPBD0@Z
_TEXT	SEGMENT
_pcchNewDestLength$ = 8					; size = 4
_pszFormat$ = 12					; size = 4
_argList$ = 16						; size = 4
?StringVPrintfWorkerA@@YGJPADIPAIPBD0@Z PROC		; StringVPrintfWorkerA, COMDAT
; _pszDest$ = edi
; _cchDest$ = eax

; 9029 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 9030 :     HRESULT hr = S_OK;
; 9031 :     int iRet;
; 9032 :     size_t cchMax;
; 9033 :     size_t cchNewDestLength = 0;
; 9034 : 
; 9035 :     // leave the last space for the null terminator
; 9036 :     cchMax = cchDest - 1;
; 9037 : 
; 9038 : #if (STRSAFE_USE_SECURE_CRT == 1) && !defined(STRSAFE_LIB_IMPL)
; 9039 :     iRet = _vsnprintf_s(pszDest, cchDest, cchMax, pszFormat, argList);
; 9040 : #else
; 9041 :     #pragma warning(push)
; 9042 :     #pragma warning(disable: __WARNING_BANNED_API_USAGE)// "STRSAFE not included"
; 9043 :     iRet = _vsnprintf(pszDest, cchMax, pszFormat, argList);

  00005	ff 75 10	 push	 DWORD PTR _argList$[ebp]
  00008	8d 70 ff	 lea	 esi, DWORD PTR [eax-1]
  0000b	ff 75 0c	 push	 DWORD PTR _pszFormat$[ebp]
  0000e	33 db		 xor	 ebx, ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___vsnprintf
  00018	83 c4 10	 add	 esp, 16			; 00000010H

; 9044 :     #pragma warning(pop)
; 9045 : #endif
; 9046 :     // ASSERT((iRet < 0) || (((size_t)iRet) <= cchMax));
; 9047 : 
; 9048 :     if ((iRet < 0) || (((size_t)iRet) > cchMax))

  0001b	85 c0		 test	 eax, eax
  0001d	78 0b		 js	 SHORT $LN5@StringVPri
  0001f	3b c6		 cmp	 eax, esi
  00021	77 07		 ja	 SHORT $LN5@StringVPri

; 9058 :     }
; 9059 :     else if (((size_t)iRet) == cchMax)

  00023	75 0f		 jne	 SHORT $LN2@StringVPri

; 9060 :     {
; 9061 :         // need to null terminate the string
; 9062 :         pszDest += cchMax;
; 9063 :         *pszDest = '\0';

  00025	88 1c 3e	 mov	 BYTE PTR [esi+edi], bl

; 9064 : 
; 9065 :         cchNewDestLength = cchMax;
; 9066 :     }
; 9067 :     else

  00028	eb 08		 jmp	 SHORT $LN9@StringVPri
$LN5@StringVPri:

; 9049 :     {
; 9050 :         // need to null terminate the string
; 9051 :         pszDest += cchMax;
; 9052 :         *pszDest = '\0';

  0002a	88 1c 3e	 mov	 BYTE PTR [esi+edi], bl

; 9055 : 
; 9056 :         // we have truncated pszDest
; 9057 :         hr = STRSAFE_E_INSUFFICIENT_BUFFER;

  0002d	bb 7a 00 07 80	 mov	 ebx, -2147024774	; 8007007aH
$LN9@StringVPri:

; 9053 : 
; 9054 :         cchNewDestLength = cchMax;

  00032	8b c6		 mov	 eax, esi
$LN2@StringVPri:

; 9068 :     {
; 9069 :         cchNewDestLength = (size_t)iRet;
; 9070 :     }
; 9071 : 
; 9072 :     if (pcchNewDestLength)

  00034	8b 4d 08	 mov	 ecx, DWORD PTR _pcchNewDestLength$[ebp]
  00037	85 c9		 test	 ecx, ecx
  00039	74 02		 je	 SHORT $LN1@StringVPri

; 9073 :     {
; 9074 :         *pcchNewDestLength = cchNewDestLength;

  0003b	89 01		 mov	 DWORD PTR [ecx], eax
$LN1@StringVPri:
  0003d	5e		 pop	 esi

; 9075 :     }
; 9076 : 
; 9077 :     return hr;

  0003e	8b c3		 mov	 eax, ebx
  00040	5b		 pop	 ebx

; 9078 : }

  00041	5d		 pop	 ebp
  00042	c2 0c 00	 ret	 12			; 0000000cH
?StringVPrintfWorkerA@@YGJPADIPAIPBD0@Z ENDP		; StringVPrintfWorkerA
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?IsSlangFilterChange@Setting@@SA_NXZ		; Setting::IsSlangFilterChange
EXTRN	?m_Option@Setting@@1USettingOption@@A:BYTE	; Setting::m_Option
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\setting.h
;	COMDAT ?IsSlangFilterChange@Setting@@SA_NXZ
_TEXT	SEGMENT
?IsSlangFilterChange@Setting@@SA_NXZ PROC		; Setting::IsSlangFilterChange, COMDAT

; 341  : 	static bool IsSlangFilterChange() { return m_Option.m_bSlangFilterChange; }

  00000	a0 5f 00 00 00	 mov	 al, BYTE PTR ?m_Option@Setting@@1USettingOption@@A+95
  00005	c3		 ret	 0
?IsSlangFilterChange@Setting@@SA_NXZ ENDP		; Setting::IsSlangFilterChange
_TEXT	ENDS
PUBLIC	?GetPublicID@ioMyInfo@@QBEABVioHashString@@XZ	; ioMyInfo::GetPublicID
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomyinfo.h
;	COMDAT ?GetPublicID@ioMyInfo@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetPublicID@ioMyInfo@@QBEABVioHashString@@XZ PROC	; ioMyInfo::GetPublicID, COMDAT
; _this$ = ecx

; 517  : 	const ioHashString& GetPublicID() const { return m_user_data.m_public_id; }    

  00000	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00003	c3		 ret	 0
?GetPublicID@ioMyInfo@@QBEABVioHashString@@XZ ENDP	; ioMyInfo::GetPublicID
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1512 : 		return (this->_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1513 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2010 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2011 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2012 : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 2010 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2011 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2012 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 459  : 		}

  00000	c3		 ret	 0
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??Y?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??Y?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 		if (this->_Getcont() == 0
; 162  : 			|| this->_Ptr == 0
; 163  : 			|| this->_Ptr + _Off < ((_Mystr *)this->_Getcont())->_Myptr()
; 164  : 			|| ((_Mystr *)this->_Getcont())->_Myptr()
; 165  : 				+ ((_Mystr *)this->_Getcont())->_Mysize < this->_Ptr + _Off)
; 166  : 			{	// report error
; 167  : 			_DEBUG_ERROR("string iterator + offset out of range");
; 168  : 			_SCL_SECURE_OUT_OF_RANGE;
; 169  : 			}
; 170  : 
; 171  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 172  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 173  : 		_SCL_SECURE_VALIDATE_RANGE(
; 174  : 			((_Mystr *)this->_Getcont())->_Myptr() <= this->_Ptr + _Off
; 175  : 				&& this->_Ptr + _Off <= ((_Mystr *)this->_Getcont())->_Myptr()
; 176  : 					+ ((_Mystr *)this->_Getcont())->_Mysize);
; 177  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 178  : 
; 179  : 		_Ptr += _Off;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00008	01 08		 add	 DWORD PTR [eax], ecx

; 180  : 		return (*this);
; 181  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??Y?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
; Function compile flags: /Ogsp
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT
; _this$ = ecx

; 1906 : 		{	// return allocator object for values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1907 : 		return (this->_Alval);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1908 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2004 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2005 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr@2
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2006 : 		}

  00008	c3		 ret	 0
$LN3@Myptr@2:

; 2004 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2005 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2006 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2016 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@2:
$LN3@Xlen@2:
  0000b	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
EXTRN	__imp_?_Xout_of_range@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2021 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN4@Xran:
$LN3@Xran:
  0000b	cc		 int	 3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	??Y?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??Y?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 378  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 379  : 		*(_Mybase *)this += _Off;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00008	01 08		 add	 DWORD PTR [eax], ecx

; 380  : 		return (*this);
; 381  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??Y?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1973 : 		{	// test if _Ptr points inside string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1974 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + this->_Mysize <= _Ptr)

  00003	83 7d 08 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  00007	74 2c		 je	 SHORT $LN2@Inside@2
  00009	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0000c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0000f	72 04		 jb	 SHORT $LN8@Inside@2
  00011	8b 01		 mov	 eax, DWORD PTR [ecx]
  00013	eb 02		 jmp	 SHORT $LN9@Inside@2
$LN8@Inside@2:
  00015	8b c1		 mov	 eax, ecx
$LN9@Inside@2:
  00017	39 45 08	 cmp	 DWORD PTR __Ptr$[ebp], eax
  0001a	72 19		 jb	 SHORT $LN2@Inside@2
  0001c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0001f	72 04		 jb	 SHORT $LN12@Inside@2
  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	eb 02		 jmp	 SHORT $LN13@Inside@2
$LN12@Inside@2:
  00025	8b c1		 mov	 eax, ecx
$LN13@Inside@2:
  00027	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0002a	03 c8		 add	 ecx, eax
  0002c	3b 4d 08	 cmp	 ecx, DWORD PTR __Ptr$[ebp]
  0002f	76 04		 jbe	 SHORT $LN2@Inside@2

; 1976 : 		else
; 1977 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	eb 02		 jmp	 SHORT $LN1@Inside@2
$LN2@Inside@2:

; 1975 : 			return (false);	// don't ask

  00035	32 c0		 xor	 al, al
$LN1@Inside@2:

; 1978 : 		}

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base0@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base0@1@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 50   : 	_String_const_iterator(pointer _Parg, const _Container_base *_Pstring)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 51   : 		{	// construct with pointer _Parg
; 52   : 		this->_Adopt(_Pstring);
; 53   : 		this->_Ptr = _Parg;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 54   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base0@1@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 220  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXABV12@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Compat@?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXABV12@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_Compat, COMDAT
; _this$ = ecx

; 264  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXABV12@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_Compat
_TEXT	ENDS
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
;	COMDAT ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T509399 = -12						; size = 12
$T509403 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;

  00003	33 c0		 xor	 eax, eax
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 32   : 
; 33   : 	if (_Count <= 0)

  00008	39 45 08	 cmp	 DWORD PTR __Count$[ebp], eax

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000b	76 39		 jbe	 SHORT $LN5@Allocate@2

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000d	83 7d 08 ff	 cmp	 DWORD PTR __Count$[ebp], -1
  00011	77 0d		 ja	 SHORT $LN1@Allocate@2
  00013	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00016	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001b	59		 pop	 ecx
  0001c	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0001e	75 26		 jne	 SHORT $LN5@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00020	83 65 08 00	 and	 DWORD PTR $T509403[ebp], 0
  00024	8d 45 08	 lea	 eax, DWORD PTR $T509403[ebp]
  00027	50		 push	 eax
  00028	8d 4d f4	 lea	 ecx, DWORD PTR $T509399[ebp]
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00031	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00036	8d 45 f4	 lea	 eax, DWORD PTR $T509399[ebp]
  00039	50		 push	 eax
  0003a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T509399[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00041	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:

; 40   : 	}

  00046	c9		 leave
  00047	c3		 ret	 0
$LN9@Allocate@2:
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
_TEXT	ENDS
PUBLIC	??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator==<char,char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator==<char,char>, COMDAT

; 263  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 264  : 	}

  00002	c3		 ret	 0
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator==<char,char>
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::_Ptr_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::_Ptr_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::_Ptr_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??_C@_0BH@MKNLAHM@CSlangUtil?3?3FilterChar?$AA@	; `string'
PUBLIC	?FilterChar@CSlangUtil@@IAEXPBDPAD1@Z		; CSlangUtil::FilterChar
;	COMDAT ??_C@_0BH@MKNLAHM@CSlangUtil?3?3FilterChar?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\string.h
CONST	SEGMENT
??_C@_0BH@MKNLAHM@CSlangUtil?3?3FilterChar?$AA@ DB 'CSlangUtil::FilterCha'
	DB	'r', 00H					; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\slangutil.cpp
CONST	ENDS
;	COMDAT ?FilterChar@CSlangUtil@@IAEXPBDPAD1@Z
_TEXT	SEGMENT
_bFiltered$ = -1					; size = 1
_iCnt$ = 8						; size = 4
_src$ = 8						; size = 4
_dst$ = 12						; size = 4
_szFilterChar$ = 16					; size = 4
?FilterChar@CSlangUtil@@IAEXPBDPAD1@Z PROC		; CSlangUtil::FilterChar, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 44   : 	if(szFilterChar == NULL) return;

  00004	83 7d 10 00	 cmp	 DWORD PTR _szFilterChar$[ebp], 0
  00008	74 79		 je	 SHORT $LN1@FilterChar

; 45   : 
; 46   : 	bool bFiltered = false;
; 47   : 	char *srcp = (char *) src;

  0000a	53		 push	 ebx
  0000b	8b 5d 08	 mov	 ebx, DWORD PTR _src$[ebp]

; 48   : 	char *dstp = dst;
; 49   : 	int iCnt = 0;

  0000e	83 65 08 00	 and	 DWORD PTR _iCnt$[ebp], 0

; 50   : 	while (*srcp) 

  00012	80 3b 00	 cmp	 BYTE PTR [ebx], 0
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 0c	 mov	 edi, DWORD PTR _dst$[ebp]
  0001a	c6 45 ff 00	 mov	 BYTE PTR _bFiltered$[ebp], 0
  0001e	8b f3		 mov	 esi, ebx
  00020	74 51		 je	 SHORT $LN8@FilterChar
$LL9@FilterChar:

; 51   : 	{
; 52   : 		// lead byte면 byte filer을 생략 2칸 이동
; 53   : 
; 54   : #if defined( SRC_OVERSEAS ) && !defined( SRC_ID )
; 55   : 
; 56   : #if defined( MULTI_BYTE_CHECK )
; 57   : 		if( IsDBCSLeadByteEx( COUNTRY_CODE_PAGE, *srcp ) )
; 58   : #else
; 59   : 		if( false && IsDBCSLeadByteEx( COUNTRY_CODE_PAGE, *srcp ) ) 
; 60   : #endif
; 61   : 
; 62   : #else
; 63   : 		if( IsDBCSLeadByte(*srcp)) 
; 64   : #endif
; 65   : 
; 66   : 		{
; 67   : 			*dstp = *srcp;   
; 68   : 			dstp += 1;
; 69   : 			srcp += 1;
; 70   : 
; 71   : 			if( !(*srcp) )
; 72   : 				break;
; 73   : 
; 74   : 			*dstp = *srcp;   
; 75   : 			dstp += 1;
; 76   : 		}
; 77   : 		else if (strchr(szFilterChar, *srcp) == NULL) 

  00022	0f be 06	 movsx	 eax, BYTE PTR [esi]
  00025	50		 push	 eax
  00026	ff 75 10	 push	 DWORD PTR _szFilterChar$[ebp]
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
  00031	85 c0		 test	 eax, eax
  00033	75 07		 jne	 SHORT $LN4@FilterChar

; 78   : 		{
; 79   : 			*dstp = *srcp;   

  00035	8a 06		 mov	 al, BYTE PTR [esi]
  00037	88 07		 mov	 BYTE PTR [edi], al

; 80   : 			dstp += 1;

  00039	47		 inc	 edi

; 81   : 		}
; 82   : 		else

  0003a	eb 04		 jmp	 SHORT $LN3@FilterChar
$LN4@FilterChar:

; 83   : 		{
; 84   : 			bFiltered = true;

  0003c	c6 45 ff 01	 mov	 BYTE PTR _bFiltered$[ebp], 1
$LN3@FilterChar:

; 85   : 		}
; 86   : 
; 87   : 		srcp += 1;
; 88   : 		if( iCnt++ > MAX_LOOP ) // 비상STOP

  00040	8b 45 08	 mov	 eax, DWORD PTR _iCnt$[ebp]
  00043	46		 inc	 esi
  00044	ff 45 08	 inc	 DWORD PTR _iCnt$[ebp]
  00047	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  0004c	7f 07		 jg	 SHORT $LN16@FilterChar

; 50   : 	while (*srcp) 

  0004e	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00051	75 cf		 jne	 SHORT $LL9@FilterChar

; 85   : 		}
; 86   : 
; 87   : 		srcp += 1;
; 88   : 		if( iCnt++ > MAX_LOOP ) // 비상STOP

  00053	eb 1e		 jmp	 SHORT $LN8@FilterChar
$LN16@FilterChar:

; 89   : 		{
; 90   : 			LOG.PrintTimeAndLog(0, "%s : %d : Over Max loop : %s", __FUNCTION__, __LINE__, src );

  00055	53		 push	 ebx
  00056	6a 5a		 push	 90			; 0000005aH
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@MKNLAHM@CSlangUtil?3?3FilterChar?$AA@
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GHLBKHJF@?$CFs?5?3?5?$CFd?5?3?5Over?5Max?5loop?5?3?5?$CFs?$AA@
  00062	6a 00		 push	 0
  00064	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00070	83 c4 18	 add	 esp, 24			; 00000018H
$LN8@FilterChar:

; 91   : 			break;
; 92   : 		}
; 93   : 	}
; 94   : 	*dstp = 0;
; 95   : 
; 96   : 	// 앞에 글자로 NULL이 변형되는 것을 방지하기 위해서
; 97   : 	if( bFiltered )

  00073	80 7d ff 00	 cmp	 BYTE PTR _bFiltered$[ebp], 0
  00077	c6 07 00	 mov	 BYTE PTR [edi], 0
  0007a	74 04		 je	 SHORT $LN18@FilterChar

; 98   : 	{
; 99   : 		dstp += 1;
; 100  : 		*dstp = 0;

  0007c	c6 47 01 00	 mov	 BYTE PTR [edi+1], 0
$LN18@FilterChar:
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
$LN1@FilterChar:

; 101  : 	}
; 102  : }

  00083	c9		 leave
  00084	c2 0c 00	 ret	 12			; 0000000cH
?FilterChar@CSlangUtil@@IAEXPBDPAD1@Z ENDP		; CSlangUtil::FilterChar
_TEXT	ENDS
PUBLIC	?GetSingleton@CSlangUtil@@SAAAV1@XZ		; CSlangUtil::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?GetSingleton@CSlangUtil@@SAAAV1@XZ
_TEXT	SEGMENT
?GetSingleton@CSlangUtil@@SAAAV1@XZ PROC		; CSlangUtil::GetSingleton, COMDAT

; 617  : 	return Singleton< CSlangUtil >::GetSingleton();

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VCSlangUtil@@@@1PAVCSlangUtil@@A ; Singleton<CSlangUtil>::ms_Singleton

; 618  : }

  00005	c3		 ret	 0
?GetSingleton@CSlangUtil@@SAAAV1@XZ ENDP		; CSlangUtil::GetSingleton
_TEXT	ENDS
PUBLIC	?at@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::at
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?at@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?at@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::at, COMDAT
; _this$ = ecx

; 1422 : 		{	// subscript mutable sequence with checking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1423 : 		if (this->_Mysize <= _Off)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00009	77 0b		 ja	 SHORT $LN1@at

; 1424 : 			_Xran();	// _Off off end

  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN12@at:
$LN1@at:

; 1425 : 		return (_Myptr()[_Off]);

  00016	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  0001a	72 02		 jb	 SHORT $LN9@at
  0001c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN9@at:
  0001e	03 c1		 add	 eax, ecx

; 1426 : 		}

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN11@at:
?at@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::at
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEII@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEII@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 1c		 push	 28			; 0000001cH
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba 49 92 24 09	 mov	 edx, 153391689		; 09249249H
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00026	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Grow_to@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEII@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator==
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$SetTitle_e@$0N@@ioINILoader@@QAEXAAY0N@$$CBD@Z ; ioINILoader::SetTitle_e<13>
EXTRN	__imp_?SetTitle@ioINILoader@@QAEXPBD@Z:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$SetTitle_e@$0N@@ioINILoader@@QAEXAAY0N@$$CBD@Z
_TEXT	SEGMENT
__t$ = -24						; size = 13
__$ArrayPad$ = -4					; size = 4
_t$ = 8							; size = 4
??$SetTitle_e@$0N@@ioINILoader@@QAEXAAY0N@$$CBD@Z PROC	; ioINILoader::SetTitle_e<13>, COMDAT
; _this$ = ecx

; 188  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]

; 189  : 		_ENCSTR(t, _t);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 4d 01 00
	00		 je	 $LN96@SetTitle_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 36 01 00
	00		 je	 $LN95@SetTitle_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __t$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 1e 01 00
	00		 je	 $LN94@SetTitle_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __t$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 07 01 00
	00		 je	 $LN93@SetTitle_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __t$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 f0 00 00
	00		 je	 $LN92@SetTitle_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __t$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 da 00 00
	00		 je	 $LN91@SetTitle_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __t$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 c4 00 00
	00		 je	 $LN90@SetTitle_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __t$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 ad 00 00
	00		 je	 $LN89@SetTitle_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __t$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 96 00 00
	00		 je	 $LN88@SetTitle_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __t$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 80 00 00
	00		 je	 $LN87@SetTitle_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __t$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	74 6e		 je	 SHORT $LN86@SetTitle_e
  000c5	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000c8	88 55 f2	 mov	 BYTE PTR __t$[ebp+10], dl
  000cb	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000ce	84 d2		 test	 dl, dl
  000d0	74 5b		 je	 SHORT $LN85@SetTitle_e
  000d2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  000d9	88 55 f3	 mov	 BYTE PTR __t$[ebp+11], dl
  000dc	0f 84 8f 00 00
	00		 je	 $LN1@SetTitle_e
  000e2	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000e5	84 d2		 test	 dl, dl
  000e7	74 3f		 je	 SHORT $LN83@SetTitle_e
  000e9	32 d1		 xor	 dl, cl
  000eb	88 55 f5	 mov	 BYTE PTR __t$[ebp+13], dl
  000ee	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f1	84 d2		 test	 dl, dl
  000f3	74 2d		 je	 SHORT $LN82@SetTitle_e
  000f5	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000f8	88 55 f6	 mov	 BYTE PTR __t$[ebp+14], dl
  000fb	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  000fe	84 d2		 test	 dl, dl
  00100	74 1a		 je	 SHORT $LN81@SetTitle_e
  00102	8a 40 10	 mov	 al, BYTE PTR [eax+16]
  00105	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00108	88 55 f7	 mov	 BYTE PTR __t$[ebp+15], dl
  0010b	84 c0		 test	 al, al
  0010d	74 07		 je	 SHORT $LN80@SetTitle_e
  0010f	34 ed		 xor	 al, -19			; ffffffedH
  00111	88 45 f8	 mov	 BYTE PTR __t$[ebp+16], al
  00114	eb 5b		 jmp	 SHORT $LN1@SetTitle_e
$LN80@SetTitle_e:
  00116	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+16], -19 ; ffffffedH
  0011a	eb 55		 jmp	 SHORT $LN1@SetTitle_e
$LN81@SetTitle_e:
  0011c	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+15], -22 ; ffffffeaH
  00120	eb 4f		 jmp	 SHORT $LN1@SetTitle_e
$LN82@SetTitle_e:
  00122	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+14], -21 ; ffffffebH
  00126	eb 49		 jmp	 SHORT $LN1@SetTitle_e
$LN83@SetTitle_e:
  00128	88 4d f5	 mov	 BYTE PTR __t$[ebp+13], cl
  0012b	eb 44		 jmp	 SHORT $LN1@SetTitle_e
$LN85@SetTitle_e:
  0012d	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  00131	eb 3e		 jmp	 SHORT $LN1@SetTitle_e
$LN86@SetTitle_e:
  00133	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  00137	eb 38		 jmp	 SHORT $LN1@SetTitle_e
$LN87@SetTitle_e:
  00139	88 4d f1	 mov	 BYTE PTR __t$[ebp+9], cl
  0013c	eb 33		 jmp	 SHORT $LN1@SetTitle_e
$LN88@SetTitle_e:
  0013e	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  00142	eb 2d		 jmp	 SHORT $LN1@SetTitle_e
$LN89@SetTitle_e:
  00144	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  00148	eb 27		 jmp	 SHORT $LN1@SetTitle_e
$LN90@SetTitle_e:
  0014a	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  0014e	eb 21		 jmp	 SHORT $LN1@SetTitle_e
$LN91@SetTitle_e:
  00150	88 4d ed	 mov	 BYTE PTR __t$[ebp+5], cl
  00153	eb 1c		 jmp	 SHORT $LN1@SetTitle_e
$LN92@SetTitle_e:
  00155	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00159	eb 16		 jmp	 SHORT $LN1@SetTitle_e
$LN93@SetTitle_e:
  0015b	c6 45 eb ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  0015f	eb 10		 jmp	 SHORT $LN1@SetTitle_e
$LN94@SetTitle_e:
  00161	c6 45 ea eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  00165	eb 0a		 jmp	 SHORT $LN1@SetTitle_e
$LN95@SetTitle_e:
  00167	c6 45 e9 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  0016b	eb 04		 jmp	 SHORT $LN1@SetTitle_e
$LN96@SetTitle_e:
  0016d	c6 45 e8 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@SetTitle_e:
  00171	6a 03		 push	 3
  00173	8d 45 e8	 lea	 eax, DWORD PTR __t$[ebp]
  00176	c6 45 f4 00	 mov	 BYTE PTR __t$[ebp+12], 0
  0017a	5a		 pop	 edx
$LL104@SetTitle_e:
  0017b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00181	83 c0 04	 add	 eax, 4
  00184	4a		 dec	 edx
  00185	75 f4		 jne	 SHORT $LL104@SetTitle_e

; 190  : 		SetTitle(_t);

  00187	8d 45 e8	 lea	 eax, DWORD PTR __t$[ebp]
  0018a	50		 push	 eax
  0018b	8b ce		 mov	 ecx, esi
  0018d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitle@ioINILoader@@QAEXPBD@Z

; 191  : 	}

  00193	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00196	33 cd		 xor	 ecx, ebp
  00198	5e		 pop	 esi
  00199	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0019e	c9		 leave
  0019f	c2 04 00	 ret	 4
??$SetTitle_e@$0N@@ioINILoader@@QAEXAAY0N@$$CBD@Z ENDP	; ioINILoader::SetTitle_e<13>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$SetTitle_e@$06@ioINILoader@@QAEXAAY06$$CBD@Z	; ioINILoader::SetTitle_e<7>
; Function compile flags: /Ogsp
;	COMDAT ??$SetTitle_e@$06@ioINILoader@@QAEXAAY06$$CBD@Z
_TEXT	SEGMENT
__t$ = -16						; size = 7
__$ArrayPad$ = -4					; size = 4
_t$ = 8							; size = 4
??$SetTitle_e@$06@ioINILoader@@QAEXAAY06$$CBD@Z PROC	; ioINILoader::SetTitle_e<7>, COMDAT
; _this$ = ecx

; 188  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]

; 189  : 		_ENCSTR(t, _t);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 c0 00 00
	00		 je	 $LN96@SetTitle_e@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 f0	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 a9 00 00
	00		 je	 $LN95@SetTitle_e@2
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 f1	 mov	 BYTE PTR __t$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 92 00 00
	00		 je	 $LN94@SetTitle_e@2
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 f2	 mov	 BYTE PTR __t$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	74 7f		 je	 SHORT $LN93@SetTitle_e@2
  0004f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00052	88 55 f3	 mov	 BYTE PTR __t$[ebp+3], dl
  00055	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00058	84 d2		 test	 dl, dl
  0005a	74 6c		 je	 SHORT $LN92@SetTitle_e@2
  0005c	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0005f	88 55 f4	 mov	 BYTE PTR __t$[ebp+4], dl
  00062	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00065	84 d2		 test	 dl, dl
  00067	74 59		 je	 SHORT $LN91@SetTitle_e@2
  00069	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0006c	80 78 06 00	 cmp	 BYTE PTR [eax+6], 0
  00070	88 55 f5	 mov	 BYTE PTR __t$[ebp+5], dl
  00073	74 6f		 je	 SHORT $LN1@SetTitle_e@2
  00075	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00078	84 d2		 test	 dl, dl
  0007a	74 40		 je	 SHORT $LN89@SetTitle_e@2
  0007c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0007f	88 55 f7	 mov	 BYTE PTR __t$[ebp+7], dl
  00082	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  00085	84 d2		 test	 dl, dl
  00087	74 2d		 je	 SHORT $LN88@SetTitle_e@2
  00089	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0008c	88 55 f8	 mov	 BYTE PTR __t$[ebp+8], dl
  0008f	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  00092	84 d2		 test	 dl, dl
  00094	74 1a		 je	 SHORT $LN87@SetTitle_e@2
  00096	8a 40 0a	 mov	 al, BYTE PTR [eax+10]
  00099	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0009c	88 55 f9	 mov	 BYTE PTR __t$[ebp+9], dl
  0009f	84 c0		 test	 al, al
  000a1	74 07		 je	 SHORT $LN86@SetTitle_e@2
  000a3	34 eb		 xor	 al, -21			; ffffffebH
  000a5	88 45 fa	 mov	 BYTE PTR __t$[ebp+10], al
  000a8	eb 3a		 jmp	 SHORT $LN1@SetTitle_e@2
$LN86@SetTitle_e@2:
  000aa	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000ae	eb 34		 jmp	 SHORT $LN1@SetTitle_e@2
$LN87@SetTitle_e@2:
  000b0	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  000b4	eb 2e		 jmp	 SHORT $LN1@SetTitle_e@2
$LN88@SetTitle_e@2:
  000b6	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  000ba	eb 28		 jmp	 SHORT $LN1@SetTitle_e@2
$LN89@SetTitle_e@2:
  000bc	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  000c0	eb 22		 jmp	 SHORT $LN1@SetTitle_e@2
$LN91@SetTitle_e@2:
  000c2	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  000c6	eb 1c		 jmp	 SHORT $LN1@SetTitle_e@2
$LN92@SetTitle_e@2:
  000c8	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  000cc	eb 16		 jmp	 SHORT $LN1@SetTitle_e@2
$LN93@SetTitle_e@2:
  000ce	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  000d2	eb 10		 jmp	 SHORT $LN1@SetTitle_e@2
$LN94@SetTitle_e@2:
  000d4	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  000d8	eb 0a		 jmp	 SHORT $LN1@SetTitle_e@2
$LN95@SetTitle_e@2:
  000da	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  000de	eb 04		 jmp	 SHORT $LN1@SetTitle_e@2
$LN96@SetTitle_e@2:
  000e0	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@SetTitle_e@2:
  000e4	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __t$[ebp], -353637139 ; eaebecedH
  000eb	6a 04		 push	 4
  000ed	c6 45 f6 00	 mov	 BYTE PTR __t$[ebp+6], 0
  000f1	58		 pop	 eax
$LL101@SetTitle_e@2:
  000f2	8b c8		 mov	 ecx, eax
  000f4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000fa	79 05		 jns	 SHORT $LN111@SetTitle_e@2
  000fc	49		 dec	 ecx
  000fd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00100	41		 inc	 ecx
$LN111@SetTitle_e@2:
  00101	b2 ed		 mov	 dl, -19			; ffffffedH
  00103	2a d1		 sub	 dl, cl
  00105	30 54 05 f0	 xor	 BYTE PTR __t$[ebp+eax], dl
  00109	40		 inc	 eax
  0010a	83 f8 06	 cmp	 eax, 6
  0010d	7c e3		 jl	 SHORT $LL101@SetTitle_e@2

; 190  : 		SetTitle(_t);

  0010f	8d 45 f0	 lea	 eax, DWORD PTR __t$[ebp]
  00112	50		 push	 eax
  00113	8b ce		 mov	 ecx, esi
  00115	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitle@ioINILoader@@QAEXPBD@Z

; 191  : 	}

  0011b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0011e	33 cd		 xor	 ecx, ebp
  00120	5e		 pop	 esi
  00121	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00126	c9		 leave
  00127	c2 04 00	 ret	 4
??$SetTitle_e@$06@ioINILoader@@QAEXAAY06$$CBD@Z ENDP	; ioINILoader::SetTitle_e<7>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$SetTitle_e@$0BB@@ioINILoader@@QAEXAAY0BB@$$CBD@Z ; ioINILoader::SetTitle_e<17>
; Function compile flags: /Ogsp
;	COMDAT ??$SetTitle_e@$0BB@@ioINILoader@@QAEXAAY0BB@$$CBD@Z
_TEXT	SEGMENT
__t$ = -28						; size = 17
__$ArrayPad$ = -4					; size = 4
_t$ = 8							; size = 4
??$SetTitle_e@$0BB@@ioINILoader@@QAEXAAY0BB@$$CBD@Z PROC ; ioINILoader::SetTitle_e<17>, COMDAT
; _this$ = ecx

; 188  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]

; 189  : 		_ENCSTR(t, _t);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 a7 01 00
	00		 je	 $LN96@SetTitle_e@3
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 90 01 00
	00		 je	 $LN95@SetTitle_e@3
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __t$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 78 01 00
	00		 je	 $LN94@SetTitle_e@3
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __t$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 61 01 00
	00		 je	 $LN93@SetTitle_e@3
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __t$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 4a 01 00
	00		 je	 $LN92@SetTitle_e@3
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __t$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 34 01 00
	00		 je	 $LN91@SetTitle_e@3
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __t$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 1e 01 00
	00		 je	 $LN90@SetTitle_e@3
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __t$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 07 01 00
	00		 je	 $LN89@SetTitle_e@3
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __t$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 f0 00 00
	00		 je	 $LN88@SetTitle_e@3
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __t$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 da 00 00
	00		 je	 $LN87@SetTitle_e@3
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __t$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 c4 00 00
	00		 je	 $LN86@SetTitle_e@3
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __t$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 ad 00 00
	00		 je	 $LN85@SetTitle_e@3
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __t$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 96 00 00
	00		 je	 $LN84@SetTitle_e@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __t$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 80 00 00
	00		 je	 $LN83@SetTitle_e@3
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __t$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	74 6e		 je	 SHORT $LN82@SetTitle_e@3
  00108	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010b	88 55 f2	 mov	 BYTE PTR __t$[ebp+14], dl
  0010e	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00111	84 d2		 test	 dl, dl
  00113	74 5b		 je	 SHORT $LN81@SetTitle_e@3
  00115	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00118	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  0011c	88 55 f3	 mov	 BYTE PTR __t$[ebp+15], dl
  0011f	0f 84 a6 00 00
	00		 je	 $LN1@SetTitle_e@3
  00125	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00128	84 d2		 test	 dl, dl
  0012a	74 3f		 je	 SHORT $LN79@SetTitle_e@3
  0012c	32 d1		 xor	 dl, cl
  0012e	88 55 f5	 mov	 BYTE PTR __t$[ebp+17], dl
  00131	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00134	84 d2		 test	 dl, dl
  00136	74 2d		 je	 SHORT $LN78@SetTitle_e@3
  00138	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0013b	88 55 f6	 mov	 BYTE PTR __t$[ebp+18], dl
  0013e	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00141	84 d2		 test	 dl, dl
  00143	74 1a		 je	 SHORT $LN77@SetTitle_e@3
  00145	8a 40 14	 mov	 al, BYTE PTR [eax+20]
  00148	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014b	88 55 f7	 mov	 BYTE PTR __t$[ebp+19], dl
  0014e	84 c0		 test	 al, al
  00150	74 07		 je	 SHORT $LN76@SetTitle_e@3
  00152	34 ed		 xor	 al, -19			; ffffffedH
  00154	88 45 f8	 mov	 BYTE PTR __t$[ebp+20], al
  00157	eb 72		 jmp	 SHORT $LN1@SetTitle_e@3
$LN76@SetTitle_e@3:
  00159	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+20], -19 ; ffffffedH
  0015d	eb 6c		 jmp	 SHORT $LN1@SetTitle_e@3
$LN77@SetTitle_e@3:
  0015f	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+19], -22 ; ffffffeaH
  00163	eb 66		 jmp	 SHORT $LN1@SetTitle_e@3
$LN78@SetTitle_e@3:
  00165	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+18], -21 ; ffffffebH
  00169	eb 60		 jmp	 SHORT $LN1@SetTitle_e@3
$LN79@SetTitle_e@3:
  0016b	88 4d f5	 mov	 BYTE PTR __t$[ebp+17], cl
  0016e	eb 5b		 jmp	 SHORT $LN1@SetTitle_e@3
$LN81@SetTitle_e@3:
  00170	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+15], -22 ; ffffffeaH
  00174	eb 55		 jmp	 SHORT $LN1@SetTitle_e@3
$LN82@SetTitle_e@3:
  00176	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+14], -21 ; ffffffebH
  0017a	eb 4f		 jmp	 SHORT $LN1@SetTitle_e@3
$LN83@SetTitle_e@3:
  0017c	88 4d f1	 mov	 BYTE PTR __t$[ebp+13], cl
  0017f	eb 4a		 jmp	 SHORT $LN1@SetTitle_e@3
$LN84@SetTitle_e@3:
  00181	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  00185	eb 44		 jmp	 SHORT $LN1@SetTitle_e@3
$LN85@SetTitle_e@3:
  00187	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  0018b	eb 3e		 jmp	 SHORT $LN1@SetTitle_e@3
$LN86@SetTitle_e@3:
  0018d	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  00191	eb 38		 jmp	 SHORT $LN1@SetTitle_e@3
$LN87@SetTitle_e@3:
  00193	88 4d ed	 mov	 BYTE PTR __t$[ebp+9], cl
  00196	eb 33		 jmp	 SHORT $LN1@SetTitle_e@3
$LN88@SetTitle_e@3:
  00198	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  0019c	eb 2d		 jmp	 SHORT $LN1@SetTitle_e@3
$LN89@SetTitle_e@3:
  0019e	c6 45 eb ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  001a2	eb 27		 jmp	 SHORT $LN1@SetTitle_e@3
$LN90@SetTitle_e@3:
  001a4	c6 45 ea eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  001a8	eb 21		 jmp	 SHORT $LN1@SetTitle_e@3
$LN91@SetTitle_e@3:
  001aa	88 4d e9	 mov	 BYTE PTR __t$[ebp+5], cl
  001ad	eb 1c		 jmp	 SHORT $LN1@SetTitle_e@3
$LN92@SetTitle_e@3:
  001af	c6 45 e8 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  001b3	eb 16		 jmp	 SHORT $LN1@SetTitle_e@3
$LN93@SetTitle_e@3:
  001b5	c6 45 e7 ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  001b9	eb 10		 jmp	 SHORT $LN1@SetTitle_e@3
$LN94@SetTitle_e@3:
  001bb	c6 45 e6 eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  001bf	eb 0a		 jmp	 SHORT $LN1@SetTitle_e@3
$LN95@SetTitle_e@3:
  001c1	c6 45 e5 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  001c5	eb 04		 jmp	 SHORT $LN1@SetTitle_e@3
$LN96@SetTitle_e@3:
  001c7	c6 45 e4 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@SetTitle_e@3:
  001cb	6a 04		 push	 4
  001cd	8d 45 e4	 lea	 eax, DWORD PTR __t$[ebp]
  001d0	c6 45 f4 00	 mov	 BYTE PTR __t$[ebp+16], 0
  001d4	5a		 pop	 edx
$LL104@SetTitle_e@3:
  001d5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001db	83 c0 04	 add	 eax, 4
  001de	4a		 dec	 edx
  001df	75 f4		 jne	 SHORT $LL104@SetTitle_e@3

; 190  : 		SetTitle(_t);

  001e1	8d 45 e4	 lea	 eax, DWORD PTR __t$[ebp]
  001e4	50		 push	 eax
  001e5	8b ce		 mov	 ecx, esi
  001e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitle@ioINILoader@@QAEXPBD@Z

; 191  : 	}

  001ed	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f0	33 cd		 xor	 ecx, ebp
  001f2	5e		 pop	 esi
  001f3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f8	c9		 leave
  001f9	c2 04 00	 ret	 4
??$SetTitle_e@$0BB@@ioINILoader@@QAEXAAY0BB@$$CBD@Z ENDP ; ioINILoader::SetTitle_e<17>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$SetTitle_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBD@Z ; ioINILoader::SetTitle_e<16>
; Function compile flags: /Ogsp
;	COMDAT ??$SetTitle_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBD@Z
_TEXT	SEGMENT
__t$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_t$ = 8							; size = 4
??$SetTitle_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBD@Z PROC ; ioINILoader::SetTitle_e<16>, COMDAT
; _this$ = ecx

; 188  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]

; 189  : 		_ENCSTR(t, _t);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 8c 01 00
	00		 je	 $LN96@SetTitle_e@4
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 75 01 00
	00		 je	 $LN95@SetTitle_e@4
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __t$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 5e 01 00
	00		 je	 $LN94@SetTitle_e@4
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __t$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 46 01 00
	00		 je	 $LN93@SetTitle_e@4
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __t$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 2f 01 00
	00		 je	 $LN92@SetTitle_e@4
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __t$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 18 01 00
	00		 je	 $LN91@SetTitle_e@4
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __t$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 02 01 00
	00		 je	 $LN90@SetTitle_e@4
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __t$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 ec 00 00
	00		 je	 $LN89@SetTitle_e@4
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __t$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 d5 00 00
	00		 je	 $LN88@SetTitle_e@4
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __t$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 be 00 00
	00		 je	 $LN87@SetTitle_e@4
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __t$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 a8 00 00
	00		 je	 $LN86@SetTitle_e@4
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __t$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 92 00 00
	00		 je	 $LN85@SetTitle_e@4
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 f3	 mov	 BYTE PTR __t$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	74 7f		 je	 SHORT $LN84@SetTitle_e@4
  000e7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ea	88 55 f4	 mov	 BYTE PTR __t$[ebp+12], dl
  000ed	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f0	84 d2		 test	 dl, dl
  000f2	74 6c		 je	 SHORT $LN83@SetTitle_e@4
  000f4	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f7	88 55 f5	 mov	 BYTE PTR __t$[ebp+13], dl
  000fa	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000fd	84 d2		 test	 dl, dl
  000ff	74 5a		 je	 SHORT $LN82@SetTitle_e@4
  00101	32 d1		 xor	 dl, cl
  00103	80 78 0f 00	 cmp	 BYTE PTR [eax+15], 0
  00107	88 55 f6	 mov	 BYTE PTR __t$[ebp+14], dl
  0010a	0f 84 a0 00 00
	00		 je	 $LN1@SetTitle_e@4
  00110	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00113	84 d2		 test	 dl, dl
  00115	74 3e		 je	 SHORT $LN80@SetTitle_e@4
  00117	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011a	88 55 f8	 mov	 BYTE PTR __t$[ebp+16], dl
  0011d	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00120	84 d2		 test	 dl, dl
  00122	74 2b		 je	 SHORT $LN79@SetTitle_e@4
  00124	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00127	88 55 f9	 mov	 BYTE PTR __t$[ebp+17], dl
  0012a	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0012d	84 d2		 test	 dl, dl
  0012f	74 19		 je	 SHORT $LN78@SetTitle_e@4
  00131	8a 40 13	 mov	 al, BYTE PTR [eax+19]
  00134	32 d1		 xor	 dl, cl
  00136	88 55 fa	 mov	 BYTE PTR __t$[ebp+18], dl
  00139	84 c0		 test	 al, al
  0013b	74 07		 je	 SHORT $LN77@SetTitle_e@4
  0013d	34 ea		 xor	 al, -22			; ffffffeaH
  0013f	88 45 fb	 mov	 BYTE PTR __t$[ebp+19], al
  00142	eb 6c		 jmp	 SHORT $LN1@SetTitle_e@4
$LN77@SetTitle_e@4:
  00144	c6 45 fb ea	 mov	 BYTE PTR __t$[ebp+19], -22 ; ffffffeaH
  00148	eb 66		 jmp	 SHORT $LN1@SetTitle_e@4
$LN78@SetTitle_e@4:
  0014a	88 4d fa	 mov	 BYTE PTR __t$[ebp+18], cl
  0014d	eb 61		 jmp	 SHORT $LN1@SetTitle_e@4
$LN79@SetTitle_e@4:
  0014f	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+17], -20 ; ffffffecH
  00153	eb 5b		 jmp	 SHORT $LN1@SetTitle_e@4
$LN80@SetTitle_e@4:
  00155	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+16], -19 ; ffffffedH
  00159	eb 55		 jmp	 SHORT $LN1@SetTitle_e@4
$LN82@SetTitle_e@4:
  0015b	88 4d f6	 mov	 BYTE PTR __t$[ebp+14], cl
  0015e	eb 50		 jmp	 SHORT $LN1@SetTitle_e@4
$LN83@SetTitle_e@4:
  00160	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+13], -20 ; ffffffecH
  00164	eb 4a		 jmp	 SHORT $LN1@SetTitle_e@4
$LN84@SetTitle_e@4:
  00166	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  0016a	eb 44		 jmp	 SHORT $LN1@SetTitle_e@4
$LN85@SetTitle_e@4:
  0016c	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  00170	eb 3e		 jmp	 SHORT $LN1@SetTitle_e@4
$LN86@SetTitle_e@4:
  00172	88 4d f2	 mov	 BYTE PTR __t$[ebp+10], cl
  00175	eb 39		 jmp	 SHORT $LN1@SetTitle_e@4
$LN87@SetTitle_e@4:
  00177	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  0017b	eb 33		 jmp	 SHORT $LN1@SetTitle_e@4
$LN88@SetTitle_e@4:
  0017d	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  00181	eb 2d		 jmp	 SHORT $LN1@SetTitle_e@4
$LN89@SetTitle_e@4:
  00183	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  00187	eb 27		 jmp	 SHORT $LN1@SetTitle_e@4
$LN90@SetTitle_e@4:
  00189	88 4d ee	 mov	 BYTE PTR __t$[ebp+6], cl
  0018c	eb 22		 jmp	 SHORT $LN1@SetTitle_e@4
$LN91@SetTitle_e@4:
  0018e	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  00192	eb 1c		 jmp	 SHORT $LN1@SetTitle_e@4
$LN92@SetTitle_e@4:
  00194	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00198	eb 16		 jmp	 SHORT $LN1@SetTitle_e@4
$LN93@SetTitle_e@4:
  0019a	c6 45 eb ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  0019e	eb 10		 jmp	 SHORT $LN1@SetTitle_e@4
$LN94@SetTitle_e@4:
  001a0	c6 45 ea eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  001a4	eb 0a		 jmp	 SHORT $LN1@SetTitle_e@4
$LN95@SetTitle_e@4:
  001a6	c6 45 e9 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  001aa	eb 04		 jmp	 SHORT $LN1@SetTitle_e@4
$LN96@SetTitle_e@4:
  001ac	c6 45 e8 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@SetTitle_e@4:
  001b0	6a 03		 push	 3
  001b2	8d 45 e8	 lea	 eax, DWORD PTR __t$[ebp]
  001b5	c6 45 f7 00	 mov	 BYTE PTR __t$[ebp+15], 0
  001b9	5a		 pop	 edx
$LL104@SetTitle_e@4:
  001ba	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001c0	83 c0 04	 add	 eax, 4
  001c3	4a		 dec	 edx
  001c4	75 f4		 jne	 SHORT $LL104@SetTitle_e@4
  001c6	6a 0c		 push	 12			; 0000000cH
  001c8	58		 pop	 eax
$LL101@SetTitle_e@4:
  001c9	8b c8		 mov	 ecx, eax
  001cb	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001d1	79 05		 jns	 SHORT $LN111@SetTitle_e@4
  001d3	49		 dec	 ecx
  001d4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001d7	41		 inc	 ecx
$LN111@SetTitle_e@4:
  001d8	b2 ed		 mov	 dl, -19			; ffffffedH
  001da	2a d1		 sub	 dl, cl
  001dc	30 54 05 e8	 xor	 BYTE PTR __t$[ebp+eax], dl
  001e0	40		 inc	 eax
  001e1	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001e4	7c e3		 jl	 SHORT $LL101@SetTitle_e@4

; 190  : 		SetTitle(_t);

  001e6	8d 45 e8	 lea	 eax, DWORD PTR __t$[ebp]
  001e9	50		 push	 eax
  001ea	8b ce		 mov	 ecx, esi
  001ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitle@ioINILoader@@QAEXPBD@Z

; 191  : 	}

  001f2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f5	33 cd		 xor	 ecx, ebp
  001f7	5e		 pop	 esi
  001f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fd	c9		 leave
  001fe	c2 04 00	 ret	 4
??$SetTitle_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBD@Z ENDP ; ioINILoader::SetTitle_e<16>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$SetTitle_e@$0P@@ioINILoader@@QAEXAAY0P@$$CBD@Z ; ioINILoader::SetTitle_e<15>
; Function compile flags: /Ogsp
;	COMDAT ??$SetTitle_e@$0P@@ioINILoader@@QAEXAAY0P@$$CBD@Z
_TEXT	SEGMENT
__t$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_t$ = 8							; size = 4
??$SetTitle_e@$0P@@ioINILoader@@QAEXAAY0P@$$CBD@Z PROC	; ioINILoader::SetTitle_e<15>, COMDAT
; _this$ = ecx

; 188  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]

; 189  : 		_ENCSTR(t, _t);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 75 01 00
	00		 je	 $LN96@SetTitle_e@5
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 5e 01 00
	00		 je	 $LN95@SetTitle_e@5
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __t$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 46 01 00
	00		 je	 $LN94@SetTitle_e@5
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __t$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 2f 01 00
	00		 je	 $LN93@SetTitle_e@5
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __t$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 18 01 00
	00		 je	 $LN92@SetTitle_e@5
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __t$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 02 01 00
	00		 je	 $LN91@SetTitle_e@5
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __t$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 ec 00 00
	00		 je	 $LN90@SetTitle_e@5
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __t$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 d5 00 00
	00		 je	 $LN89@SetTitle_e@5
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __t$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 be 00 00
	00		 je	 $LN88@SetTitle_e@5
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __t$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 a8 00 00
	00		 je	 $LN87@SetTitle_e@5
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __t$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 92 00 00
	00		 je	 $LN86@SetTitle_e@5
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 f2	 mov	 BYTE PTR __t$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 7f		 je	 SHORT $LN85@SetTitle_e@5
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __t$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 6c		 je	 SHORT $LN84@SetTitle_e@5
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	88 55 f4	 mov	 BYTE PTR __t$[ebp+12], dl
  000e9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000ec	84 d2		 test	 dl, dl
  000ee	74 5a		 je	 SHORT $LN83@SetTitle_e@5
  000f0	32 d1		 xor	 dl, cl
  000f2	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000f6	88 55 f5	 mov	 BYTE PTR __t$[ebp+13], dl
  000f9	0f 84 9a 00 00
	00		 je	 $LN1@SetTitle_e@5
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 3e		 je	 SHORT $LN81@SetTitle_e@5
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __t$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 2b		 je	 SHORT $LN80@SetTitle_e@5
  00113	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00116	88 55 f8	 mov	 BYTE PTR __t$[ebp+16], dl
  00119	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0011c	84 d2		 test	 dl, dl
  0011e	74 19		 je	 SHORT $LN79@SetTitle_e@5
  00120	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  00123	32 d1		 xor	 dl, cl
  00125	88 55 f9	 mov	 BYTE PTR __t$[ebp+17], dl
  00128	84 c0		 test	 al, al
  0012a	74 07		 je	 SHORT $LN78@SetTitle_e@5
  0012c	34 eb		 xor	 al, -21			; ffffffebH
  0012e	88 45 fa	 mov	 BYTE PTR __t$[ebp+18], al
  00131	eb 66		 jmp	 SHORT $LN1@SetTitle_e@5
$LN78@SetTitle_e@5:
  00133	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+18], -21 ; ffffffebH
  00137	eb 60		 jmp	 SHORT $LN1@SetTitle_e@5
$LN79@SetTitle_e@5:
  00139	88 4d f9	 mov	 BYTE PTR __t$[ebp+17], cl
  0013c	eb 5b		 jmp	 SHORT $LN1@SetTitle_e@5
$LN80@SetTitle_e@5:
  0013e	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+16], -19 ; ffffffedH
  00142	eb 55		 jmp	 SHORT $LN1@SetTitle_e@5
$LN81@SetTitle_e@5:
  00144	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+15], -22 ; ffffffeaH
  00148	eb 4f		 jmp	 SHORT $LN1@SetTitle_e@5
$LN83@SetTitle_e@5:
  0014a	88 4d f5	 mov	 BYTE PTR __t$[ebp+13], cl
  0014d	eb 4a		 jmp	 SHORT $LN1@SetTitle_e@5
$LN84@SetTitle_e@5:
  0014f	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  00153	eb 44		 jmp	 SHORT $LN1@SetTitle_e@5
$LN85@SetTitle_e@5:
  00155	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  00159	eb 3e		 jmp	 SHORT $LN1@SetTitle_e@5
$LN86@SetTitle_e@5:
  0015b	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  0015f	eb 38		 jmp	 SHORT $LN1@SetTitle_e@5
$LN87@SetTitle_e@5:
  00161	88 4d f1	 mov	 BYTE PTR __t$[ebp+9], cl
  00164	eb 33		 jmp	 SHORT $LN1@SetTitle_e@5
$LN88@SetTitle_e@5:
  00166	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  0016a	eb 2d		 jmp	 SHORT $LN1@SetTitle_e@5
$LN89@SetTitle_e@5:
  0016c	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  00170	eb 27		 jmp	 SHORT $LN1@SetTitle_e@5
$LN90@SetTitle_e@5:
  00172	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  00176	eb 21		 jmp	 SHORT $LN1@SetTitle_e@5
$LN91@SetTitle_e@5:
  00178	88 4d ed	 mov	 BYTE PTR __t$[ebp+5], cl
  0017b	eb 1c		 jmp	 SHORT $LN1@SetTitle_e@5
$LN92@SetTitle_e@5:
  0017d	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00181	eb 16		 jmp	 SHORT $LN1@SetTitle_e@5
$LN93@SetTitle_e@5:
  00183	c6 45 eb ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00187	eb 10		 jmp	 SHORT $LN1@SetTitle_e@5
$LN94@SetTitle_e@5:
  00189	c6 45 ea eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  0018d	eb 0a		 jmp	 SHORT $LN1@SetTitle_e@5
$LN95@SetTitle_e@5:
  0018f	c6 45 e9 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  00193	eb 04		 jmp	 SHORT $LN1@SetTitle_e@5
$LN96@SetTitle_e@5:
  00195	c6 45 e8 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@SetTitle_e@5:
  00199	6a 03		 push	 3
  0019b	8d 45 e8	 lea	 eax, DWORD PTR __t$[ebp]
  0019e	c6 45 f6 00	 mov	 BYTE PTR __t$[ebp+14], 0
  001a2	5a		 pop	 edx
$LL104@SetTitle_e@5:
  001a3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a9	83 c0 04	 add	 eax, 4
  001ac	4a		 dec	 edx
  001ad	75 f4		 jne	 SHORT $LL104@SetTitle_e@5
  001af	6a 0c		 push	 12			; 0000000cH
  001b1	58		 pop	 eax
$LL101@SetTitle_e@5:
  001b2	8b c8		 mov	 ecx, eax
  001b4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001ba	79 05		 jns	 SHORT $LN111@SetTitle_e@5
  001bc	49		 dec	 ecx
  001bd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c0	41		 inc	 ecx
$LN111@SetTitle_e@5:
  001c1	b2 ed		 mov	 dl, -19			; ffffffedH
  001c3	2a d1		 sub	 dl, cl
  001c5	30 54 05 e8	 xor	 BYTE PTR __t$[ebp+eax], dl
  001c9	40		 inc	 eax
  001ca	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001cd	7c e3		 jl	 SHORT $LL101@SetTitle_e@5

; 190  : 		SetTitle(_t);

  001cf	8d 45 e8	 lea	 eax, DWORD PTR __t$[ebp]
  001d2	50		 push	 eax
  001d3	8b ce		 mov	 ecx, esi
  001d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitle@ioINILoader@@QAEXPBD@Z

; 191  : 	}

  001db	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001de	33 cd		 xor	 ecx, ebp
  001e0	5e		 pop	 esi
  001e1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e6	c9		 leave
  001e7	c2 04 00	 ret	 4
??$SetTitle_e@$0P@@ioINILoader@@QAEXAAY0P@$$CBD@Z ENDP	; ioINILoader::SetTitle_e<15>
_TEXT	ENDS
PUBLIC	?StringCbCopyA@@YGJPADIPBD@Z			; StringCbCopyA
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\strsafe.h
;	COMDAT ?StringCbCopyA@@YGJPADIPBD@Z
_TEXT	SEGMENT
_pszDest$ = 8						; size = 4
_cbDest$ = 12						; size = 4
_pszSrc$ = 16						; size = 4
?StringCbCopyA@@YGJPADIPBD@Z PROC			; StringCbCopyA, COMDAT

; 582  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 583  :     HRESULT hr;
; 584  :     size_t cchDest = cbDest / sizeof(char);
; 585  : 
; 586  :     hr = StringValidateDestA(pszDest, cchDest, STRSAFE_MAX_CCH);

  00003	33 c0		 xor	 eax, eax
  00005	39 45 0c	 cmp	 DWORD PTR _cbDest$[ebp], eax
  00008	74 09		 je	 SHORT $LN4@StringCbCo
  0000a	81 7d 0c ff ff
	ff 7f		 cmp	 DWORD PTR _cbDest$[ebp], 2147483647 ; 7fffffffH
  00011	76 05		 jbe	 SHORT $LN5@StringCbCo
$LN4@StringCbCo:
  00013	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN5@StringCbCo:

; 587  : 
; 588  :     if (SUCCEEDED(hr))

  00018	85 c0		 test	 eax, eax
  0001a	78 15		 js	 SHORT $LN1@StringCbCo

; 589  :     {
; 590  :         hr = StringCopyWorkerA(pszDest,
; 591  :                                cchDest,
; 592  :                                NULL,
; 593  :                                pszSrc,
; 594  :                                STRSAFE_MAX_LENGTH);

  0001c	8b 45 0c	 mov	 eax, DWORD PTR _cbDest$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _pszDest$[ebp]
  00022	68 fe ff ff 7f	 push	 2147483646		; 7ffffffeH
  00027	ff 75 10	 push	 DWORD PTR _pszSrc$[ebp]
  0002a	6a 00		 push	 0
  0002c	e8 00 00 00 00	 call	 ?StringCopyWorkerA@@YGJPADIPAIPBDI@Z ; StringCopyWorkerA
$LN1@StringCbCo:

; 595  :     }
; 596  : 
; 597  :     return hr;
; 598  : }

  00031	5d		 pop	 ebp
  00032	c2 0c 00	 ret	 12			; 0000000cH
?StringCbCopyA@@YGJPADIPBD@Z ENDP			; StringCbCopyA
_TEXT	ENDS
PUBLIC	?StringCbCopyNA@@YGJPADIPBDI@Z			; StringCbCopyNA
; Function compile flags: /Ogsp
;	COMDAT ?StringCbCopyNA@@YGJPADIPBDI@Z
_TEXT	SEGMENT
_pszDest$ = 8						; size = 4
_cbDest$ = 12						; size = 4
_pszSrc$ = 16						; size = 4
_cbToCopy$ = 20						; size = 4
?StringCbCopyNA@@YGJPADIPBDI@Z PROC			; StringCbCopyNA, COMDAT

; 1505 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1506 :     HRESULT hr;
; 1507 :     size_t cchDest = cbDest / sizeof(char);
; 1508 : 
; 1509 :     hr = StringValidateDestA(pszDest, cchDest, STRSAFE_MAX_CCH);

  00003	33 d2		 xor	 edx, edx
  00005	33 c0		 xor	 eax, eax
  00007	b9 57 00 07 80	 mov	 ecx, -2147024809	; 80070057H
  0000c	39 55 0c	 cmp	 DWORD PTR _cbDest$[ebp], edx
  0000f	74 09		 je	 SHORT $LN6@StringCbCo@2
  00011	81 7d 0c ff ff
	ff 7f		 cmp	 DWORD PTR _cbDest$[ebp], 2147483647 ; 7fffffffH
  00018	76 02		 jbe	 SHORT $LN7@StringCbCo@2
$LN6@StringCbCo@2:
  0001a	8b c1		 mov	 eax, ecx
$LN7@StringCbCo@2:

; 1510 :     
; 1511 :     if (SUCCEEDED(hr))

  0001c	3b c2		 cmp	 eax, edx
  0001e	7c 24		 jl	 SHORT $LN1@StringCbCo@2

; 1512 :     {
; 1513 :         size_t cchToCopy = cbToCopy / sizeof(char);
; 1514 : 
; 1515 :         if (cchToCopy > STRSAFE_MAX_LENGTH)

  00020	81 7d 14 fe ff
	ff 7f		 cmp	 DWORD PTR _cbToCopy$[ebp], 2147483646 ; 7ffffffeH
  00027	76 09		 jbe	 SHORT $LN2@StringCbCo@2

; 1516 :         {
; 1517 :             hr = STRSAFE_E_INVALID_PARAMETER;

  00029	8b c1		 mov	 eax, ecx

; 1518 :             
; 1519 :             *pszDest = '\0';

  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _pszDest$[ebp]
  0002e	88 11		 mov	 BYTE PTR [ecx], dl

; 1520 :         }
; 1521 :         else

  00030	eb 12		 jmp	 SHORT $LN1@StringCbCo@2
$LN2@StringCbCo@2:

; 1522 :         {
; 1523 :             hr = StringCopyWorkerA(pszDest,
; 1524 :                                    cchDest,
; 1525 :                                    NULL,
; 1526 :                                    pszSrc,
; 1527 :                                    cchToCopy);

  00032	ff 75 14	 push	 DWORD PTR _cbToCopy$[ebp]
  00035	8b 45 0c	 mov	 eax, DWORD PTR _cbDest$[ebp]
  00038	ff 75 10	 push	 DWORD PTR _pszSrc$[ebp]
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _pszDest$[ebp]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 ?StringCopyWorkerA@@YGJPADIPAIPBDI@Z ; StringCopyWorkerA
$LN1@StringCbCo@2:

; 1528 :         }
; 1529 :     }
; 1530 : 
; 1531 :     return hr;
; 1532 : }

  00044	5d		 pop	 ebp
  00045	c2 10 00	 ret	 16			; 00000010H
?StringCbCopyNA@@YGJPADIPBDI@Z ENDP			; StringCbCopyNA
_TEXT	ENDS
PUBLIC	?StringCbPrintfA@@YAJPADIPBDZZ			; StringCbPrintfA
; Function compile flags: /Ogsp
;	COMDAT ?StringCbPrintfA@@YAJPADIPBDZZ
_TEXT	SEGMENT
_pszDest$ = 8						; size = 4
_cbDest$ = 12						; size = 4
_pszFormat$ = 16					; size = 4
?StringCbPrintfA@@YAJPADIPBDZZ PROC			; StringCbPrintfA, COMDAT

; 4767 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4768 :     HRESULT hr;
; 4769 :     size_t cchDest = cbDest / sizeof(char);
; 4770 : 
; 4771 :     hr = StringValidateDestA(pszDest, cchDest, STRSAFE_MAX_CCH);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _cbDest$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	74 08		 je	 SHORT $LN4@StringCbPr
  0000c	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  00012	76 05		 jbe	 SHORT $LN5@StringCbPr
$LN4@StringCbPr:
  00014	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN5@StringCbPr:

; 4772 :     
; 4773 :     if (SUCCEEDED(hr))

  00019	85 c0		 test	 eax, eax
  0001b	78 39		 js	 SHORT $LN1@StringCbPr

; 4774 :     {
; 4775 :         va_list argList;
; 4776 : 
; 4777 :         va_start(argList, pszFormat);
; 4778 : 
; 4779 :         hr = StringVPrintfWorkerA(pszDest,
; 4780 :                                   cchDest,
; 4781 :                                   NULL,
; 4782 :                                   pszFormat,
; 4783 :                                   argList);

  0001d	53		 push	 ebx
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	8b 7d 08	 mov	 edi, DWORD PTR _pszDest$[ebp]
  00023	8d 45 14	 lea	 eax, DWORD PTR _pszFormat$[ebp+4]
  00026	50		 push	 eax
  00027	ff 75 10	 push	 DWORD PTR _pszFormat$[ebp]
  0002a	8d 71 ff	 lea	 esi, DWORD PTR [ecx-1]
  0002d	56		 push	 esi
  0002e	57		 push	 edi
  0002f	33 db		 xor	 ebx, ebx
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___vsnprintf
  00037	83 c4 10	 add	 esp, 16			; 00000010H
  0003a	85 c0		 test	 eax, eax
  0003c	78 0b		 js	 SHORT $LN12@StringCbPr
  0003e	3b c6		 cmp	 eax, esi
  00040	77 07		 ja	 SHORT $LN12@StringCbPr
  00042	75 0d		 jne	 SHORT $LN9@StringCbPr
  00044	88 1c 3e	 mov	 BYTE PTR [esi+edi], bl
  00047	eb 08		 jmp	 SHORT $LN9@StringCbPr
$LN12@StringCbPr:
  00049	88 1c 3e	 mov	 BYTE PTR [esi+edi], bl
  0004c	bb 7a 00 07 80	 mov	 ebx, -2147024774	; 8007007aH
$LN9@StringCbPr:
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	8b c3		 mov	 eax, ebx
  00055	5b		 pop	 ebx
$LN1@StringCbPr:

; 4784 : 
; 4785 :         va_end(argList);
; 4786 :     }
; 4787 : 
; 4788 :     return hr;
; 4789 : }

  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?StringCbPrintfA@@YAJPADIPBDZZ ENDP			; StringCbPrintfA
_TEXT	ENDS
PUBLIC	?StringCbLengthA@@YGJPBDIPAI@Z			; StringCbLengthA
; Function compile flags: /Ogsp
;	COMDAT ?StringCbLengthA@@YGJPBDIPAI@Z
_TEXT	SEGMENT
_psz$ = 8						; size = 4
_cbMax$ = 12						; size = 4
_pcbLength$ = 16					; size = 4
?StringCbLengthA@@YGJPBDIPAI@Z PROC			; StringCbLengthA, COMDAT

; 8293 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 8294 :     HRESULT hr;
; 8295 :     size_t cchMax = cbMax / sizeof(char);
; 8296 :     size_t cchLength = 0;
; 8297 : 
; 8298 :     if ((psz == NULL) || (cchMax > STRSAFE_MAX_CCH))

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	85 c9		 test	 ecx, ecx
  0000a	74 32		 je	 SHORT $LN5@StringCbLe
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _cbMax$[ebp]
  0000f	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00014	77 28		 ja	 SHORT $LN5@StringCbLe

; 8301 :     }
; 8302 :     else
; 8303 :     {
; 8304 :         hr = StringLengthWorkerA(psz, cchMax, &cchLength);

  00016	56		 push	 esi
  00017	33 f6		 xor	 esi, esi
  00019	8b d0		 mov	 edx, eax
  0001b	85 c0		 test	 eax, eax
  0001d	74 0d		 je	 SHORT $LN19@StringCbLe
$LL14@StringCbLe:
  0001f	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00022	74 04		 je	 SHORT $LN13@StringCbLe
  00024	41		 inc	 ecx
  00025	4a		 dec	 edx
  00026	75 f7		 jne	 SHORT $LL14@StringCbLe
$LN13@StringCbLe:
  00028	85 d2		 test	 edx, edx
  0002a	75 0c		 jne	 SHORT $LN20@StringCbLe
$LN19@StringCbLe:
  0002c	be 57 00 07 80	 mov	 esi, -2147024809	; 80070057H
  00031	33 d2		 xor	 edx, edx
$LN9@StringCbLe:
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	eb 0b		 jmp	 SHORT $LN4@StringCbLe
$LN20@StringCbLe:
  00038	2b c2		 sub	 eax, edx
  0003a	8b d0		 mov	 edx, eax
  0003c	eb f5		 jmp	 SHORT $LN9@StringCbLe
$LN5@StringCbLe:

; 8299 :     {
; 8300 :         hr = STRSAFE_E_INVALID_PARAMETER;

  0003e	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN4@StringCbLe:

; 8305 :     }
; 8306 : 
; 8307 :     if (pcbLength)

  00043	8b 4d 10	 mov	 ecx, DWORD PTR _pcbLength$[ebp]
  00046	85 c9		 test	 ecx, ecx
  00048	74 0b		 je	 SHORT $LN1@StringCbLe

; 8308 :     {
; 8309 :         if (SUCCEEDED(hr))

  0004a	85 c0		 test	 eax, eax
  0004c	78 04		 js	 SHORT $LN2@StringCbLe

; 8310 :         {
; 8311 :              // safe to multiply cchLength * sizeof(char) since cchLength < STRSAFE_MAX_CCH and sizeof(char) is 1
; 8312 :             *pcbLength = cchLength * sizeof(char);

  0004e	89 11		 mov	 DWORD PTR [ecx], edx

; 8313 :         }
; 8314 :         else

  00050	eb 03		 jmp	 SHORT $LN1@StringCbLe
$LN2@StringCbLe:

; 8315 :         {
; 8316 :             *pcbLength = 0;

  00052	83 21 00	 and	 DWORD PTR [ecx], 0
$LN1@StringCbLe:

; 8317 :         }
; 8318 :     }
; 8319 : 
; 8320 :     return hr;
; 8321 : }

  00055	5d		 pop	 ebp
  00056	c2 0c 00	 ret	 12			; 0000000cH
?StringCbLengthA@@YGJPBDIPAI@Z ENDP			; StringCbLengthA
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1497 : 		return (_Myptr());

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN5@c_str
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1498 : 		}

  00008	c3		 ret	 0

; 1497 : 		return (_Myptr());

$LN5@c_str:
  00009	8b c1		 mov	 eax, ecx

; 1498 : 		}

  0000b	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 454  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 455  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??H?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV01@H@Z ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+
; Function compile flags: /Ogsp
;	COMDAT ??H?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV01@H@Z PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+, COMDAT
; _this$ = ecx

; 384  : 		{	// return this + integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 385  : 		_Myiter _Tmp = *this;
; 386  : 		return (_Tmp += _Off);

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	03 4d 0c	 add	 ecx, DWORD PTR __Off$[ebp]
  00008	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 387  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 08 00	 ret	 8
??H?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV01@H@Z ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+
_TEXT	ENDS
PUBLIC	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
; Function compile flags: /Ogsp
;	COMDAT ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign, COMDAT
; _this$ = ecx

; 1911 : 		{	// assign _Count copies of _Ch beginning at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1912 : 		if (_Count == 1)

  00003	83 7d 0c 01	 cmp	 DWORD PTR __Count$[ebp], 1
  00007	75 13		 jne	 SHORT $LN2@Chassign

; 1913 : 			_Traits::assign(*(_Myptr() + _Off), _Ch);

  00009	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  0000d	72 02		 jb	 SHORT $LN7@Chassign
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN7@Chassign:
  00011	8a 45 10	 mov	 al, BYTE PTR __Ch$[ebp]
  00014	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00017	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 1914 : 		else

  0001a	eb 1c		 jmp	 SHORT $LN15@Chassign
$LN2@Chassign:

; 1915 : 			_Traits::assign(_Myptr() + _Off, _Count, _Ch);

  0001c	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00020	72 02		 jb	 SHORT $LN13@Chassign
  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN13@Chassign:
  00024	0f be 45 10	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00028	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0002b	03 4d 08	 add	 ecx, DWORD PTR __Off$[ebp]
  0002e	50		 push	 eax
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _memset
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN15@Chassign:

; 1916 : 		}

  00038	5d		 pop	 ebp
  00039	c2 0c 00	 ret	 12			; 0000000cH
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogsp
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1953 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1954 : 		_Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0000a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000d	72 02		 jb	 SHORT $LN5@Eos
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN5@Eos:
  00011	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1955 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base0@1@@Z ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base0@1@@Z PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 325  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 326  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base0@1@@Z ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1517 : 		size_type _Num = this->_Alval.max_size();
; 1518 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	6a fe		 push	 -2			; fffffffeH
  00002	58		 pop	 eax

; 1519 : 		}

  00003	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-
; Function compile flags: /Ogsp
;	COMDAT ??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-, COMDAT
; _this$ = ecx

; 201  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr - _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]

; 204  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator!=<char,char>
; Function compile flags: /Ogsp
;	COMDAT ??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator!=<char,char>, COMDAT

; 271  : 	return (!(_Left == _Right));

  00000	32 c0		 xor	 al, al

; 272  : 	}

  00002	c3		 ret	 0
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator!=<char,char>
_TEXT	ENDS
PUBLIC	??_C@_0CA@EEDPGPHN@CSlangUtil?3?3FilterMultiByteChar?$AA@ ; `string'
PUBLIC	?FilterMultiByteChar@CSlangUtil@@IAEXPBDHPADH1@Z ; CSlangUtil::FilterMultiByteChar
;	COMDAT ??_C@_0CA@EEDPGPHN@CSlangUtil?3?3FilterMultiByteChar?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\slangutil.cpp
CONST	SEGMENT
??_C@_0CA@EEDPGPHN@CSlangUtil?3?3FilterMultiByteChar?$AA@ DB 'CSlangUtil:'
	DB	':FilterMultiByteChar', 00H			; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?FilterMultiByteChar@CSlangUtil@@IAEXPBDHPADH1@Z
_TEXT	SEGMENT
_iCnt$ = -16						; size = 4
_iSrcPos$ = -12						; size = 4
tv245 = -8						; size = 4
tv247 = -4						; size = 4
_szSrc$ = 8						; size = 4
_iSrcLength$ = 12					; size = 4
_szDst$ = 16						; size = 4
_iDstLength$ = 20					; size = 4
_szMultiByte$ = 24					; size = 3
_szFilterChar$ = 24					; size = 4
?FilterMultiByteChar@CSlangUtil@@IAEXPBDHPADH1@Z PROC	; CSlangUtil::FilterMultiByteChar, COMDAT
; _this$ = ecx

; 109  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi

; 110  : 	if(szFilterChar == NULL) 

  00007	33 f6		 xor	 esi, esi
  00009	39 75 18	 cmp	 DWORD PTR _szFilterChar$[ebp], esi
  0000c	75 13		 jne	 SHORT $LN19@FilterMult

; 111  : 	{
; 112  : 		StringCbCopy( szDst, iDstLength, szSrc );

  0000e	ff 75 08	 push	 DWORD PTR _szSrc$[ebp]
  00011	ff 75 14	 push	 DWORD PTR _iDstLength$[ebp]
  00014	ff 75 10	 push	 DWORD PTR _szDst$[ebp]
  00017	e8 00 00 00 00	 call	 ?StringCbCopyA@@YGJPADIPBD@Z ; StringCbCopyA

; 113  : 		return;

  0001c	e9 b2 00 00 00	 jmp	 $LN1@FilterMult
$LN19@FilterMult:
  00021	53		 push	 ebx
  00022	57		 push	 edi

; 114  : 	}
; 115  : 
; 116  : 	bool bFiltered = false;
; 117  : 	char szMultiByte[3]="";

  00023	33 c0		 xor	 eax, eax
  00025	8d 7d 19	 lea	 edi, DWORD PTR _szMultiByte$[ebp+1]
  00028	c6 45 18 00	 mov	 BYTE PTR _szMultiByte$[ebp], 0
  0002c	66 ab		 stosw

; 118  : 	int iSrcPos = 0;
; 119  : 	int iDstPos = 0;
; 120  : 	int iCnt=0;
; 121  : 
; 122  : 	while( szSrc[iSrcPos] != NULL )

  0002e	8b 7d 08	 mov	 edi, DWORD PTR _szSrc$[ebp]
  00031	89 45 f4	 mov	 DWORD PTR _iSrcPos$[ebp], eax
  00034	89 75 f0	 mov	 DWORD PTR _iCnt$[ebp], esi
  00037	38 07		 cmp	 BYTE PTR [edi], al
  00039	0f 84 86 00 00
	00		 je	 $LN28@FilterMult

; 114  : 	}
; 115  : 
; 116  : 	bool bFiltered = false;
; 117  : 	char szMultiByte[3]="";

  0003f	8b 5d 10	 mov	 ebx, DWORD PTR _szDst$[ebp]
  00042	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv245[ebp], 1
  00049	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR tv247[ebp], 2
$LL18@FilterMult:

; 123  : 	{
; 124  : 		if( iSrcPos >= iSrcLength )

  00050	8b 4d 0c	 mov	 ecx, DWORD PTR _iSrcLength$[ebp]
  00053	3b c1		 cmp	 eax, ecx
  00055	7d 6e		 jge	 SHORT $LN28@FilterMult

; 125  : 			break;
; 126  : 		if( iDstPos >= iDstLength )

  00057	3b 75 14	 cmp	 esi, DWORD PTR _iDstLength$[ebp]
  0005a	7d 75		 jge	 SHORT $LN31@FilterMult

; 127  : 			break;
; 128  : 
; 129  : 		if( (iSrcPos + 2) <= iSrcLength )

  0005c	39 4d fc	 cmp	 DWORD PTR tv247[ebp], ecx

; 130  : 		{
; 131  : 
; 132  : #if defined( SRC_OVERSEAS ) && !defined( SRC_ID )
; 133  : 
; 134  : #if defined( MULTI_BYTE_CHECK )
; 135  : 			if( IsDBCSLeadByteEx( COUNTRY_CODE_PAGE, szSrc[iSrcPos] ) )
; 136  : #else
; 137  : 			if( false && IsDBCSLeadByteEx( COUNTRY_CODE_PAGE, szSrc[iSrcPos] ) )
; 138  : #endif
; 139  : 
; 140  : #else
; 141  : 			if( IsDBCSLeadByte(szSrc[iSrcPos]) )
; 142  : #endif
; 143  : 
; 144  : 			{
; 145  : 				StringCbCopyN( szMultiByte, sizeof(szMultiByte), &szSrc[iSrcPos], 2 );
; 146  : 
; 147  : 				if( _mbsstr((const unsigned char*)szFilterChar, (const unsigned char*)szMultiByte) == NULL )
; 148  : 				{
; 149  : 					StringCbCopyN( &szDst[iDstPos],iDstLength - iDstPos, &szSrc[iSrcPos], 2);
; 150  : 					iDstPos+=2;
; 151  : 				}
; 152  : 				else
; 153  : 				{
; 154  : 					bFiltered = true;
; 155  : 				}
; 156  : 				iSrcPos+=2;
; 157  : 			}
; 158  : 			else
; 159  : 			{
; 160  : 				StringCbCopyN( &szDst[iDstPos],iDstLength - iDstPos, &szSrc[iSrcPos], 1);
; 161  : 				iDstPos++;
; 162  : 				iSrcPos++;
; 163  : 			}

  0005f	7e 05		 jle	 SHORT $LN33@FilterMult

; 164  : 		}
; 165  : 		else if( (iSrcPos + 1) <= iSrcLength )

  00061	39 4d f8	 cmp	 DWORD PTR tv245[ebp], ecx
  00064	7f 1b		 jg	 SHORT $LN8@FilterMult
$LN33@FilterMult:

; 166  : 		{
; 167  : 			StringCbCopyN( &szDst[iDstPos],iDstLength - iDstPos, &szSrc[iSrcPos], 1);

  00066	8b 45 14	 mov	 eax, DWORD PTR _iDstLength$[ebp]
  00069	6a 01		 push	 1
  0006b	57		 push	 edi
  0006c	2b c6		 sub	 eax, esi
  0006e	50		 push	 eax
  0006f	53		 push	 ebx
  00070	e8 00 00 00 00	 call	 ?StringCbCopyNA@@YGJPADIPBDI@Z ; StringCbCopyNA

; 168  : 			iDstPos++;

  00075	46		 inc	 esi
  00076	43		 inc	 ebx

; 169  : 			iSrcPos++;

  00077	ff 45 f4	 inc	 DWORD PTR _iSrcPos$[ebp]
  0007a	ff 45 fc	 inc	 DWORD PTR tv247[ebp]
  0007d	ff 45 f8	 inc	 DWORD PTR tv245[ebp]
  00080	47		 inc	 edi
$LN8@FilterMult:

; 170  : 		}
; 171  : 
; 172  : 		if( iCnt++ > MAX_LOOP ) // 비상STOP

  00081	8b 45 f0	 mov	 eax, DWORD PTR _iCnt$[ebp]
  00084	ff 45 f0	 inc	 DWORD PTR _iCnt$[ebp]
  00087	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  0008c	7f 14		 jg	 SHORT $LN25@FilterMult

; 175  : 			break;
; 176  : 		}
; 177  : 
; 178  : 		if( iSrcPos >= iSrcLength )

  0008e	8b 45 f4	 mov	 eax, DWORD PTR _iSrcPos$[ebp]
  00091	3b 45 0c	 cmp	 eax, DWORD PTR _iSrcLength$[ebp]
  00094	7d 2f		 jge	 SHORT $LN28@FilterMult

; 179  : 			break;
; 180  : 		if( iDstPos >= iDstLength )

  00096	3b 75 14	 cmp	 esi, DWORD PTR _iDstLength$[ebp]
  00099	7d 36		 jge	 SHORT $LN31@FilterMult

; 118  : 	int iSrcPos = 0;
; 119  : 	int iDstPos = 0;
; 120  : 	int iCnt=0;
; 121  : 
; 122  : 	while( szSrc[iSrcPos] != NULL )

  0009b	80 3f 00	 cmp	 BYTE PTR [edi], 0
  0009e	75 b0		 jne	 SHORT $LL18@FilterMult

; 179  : 			break;
; 180  : 		if( iDstPos >= iDstLength )

  000a0	eb 23		 jmp	 SHORT $LN28@FilterMult
$LN25@FilterMult:

; 173  : 		{
; 174  : 			LOG.PrintTimeAndLog(0, "%s : %d : Over Max loop : %s", __FUNCTION__, __LINE__, szSrc );

  000a2	ff 75 08	 push	 DWORD PTR _szSrc$[ebp]
  000a5	68 ae 00 00 00	 push	 174			; 000000aeH
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@EEDPGPHN@CSlangUtil?3?3FilterMultiByteChar?$AA@
  000af	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GHLBKHJF@?$CFs?5?3?5?$CFd?5?3?5Over?5Max?5loop?5?3?5?$CFs?$AA@
  000b4	6a 00		 push	 0
  000b6	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  000c2	83 c4 18	 add	 esp, 24			; 00000018H
$LN28@FilterMult:

; 181  : 			break;
; 182  : 	}
; 183  : 
; 184  : 	// 앞에 글자로 NULL이 변형되는 것을 방지하기 위해서
; 185  : 	if( bFiltered )
; 186  : 	{
; 187  : 		if( (iDstPos + 1) < iDstLength )
; 188  : 		{
; 189  : 			szDst[iDstPos]=NULL;
; 190  : 			szDst[iDstPos+1]=NULL;
; 191  : 		}
; 192  : 	}
; 193  : 	else
; 194  : 	{
; 195  : 		if( (iDstPos) < iDstLength )

  000c5	3b 75 14	 cmp	 esi, DWORD PTR _iDstLength$[ebp]
  000c8	7d 07		 jge	 SHORT $LN31@FilterMult

; 196  : 		{
; 197  : 			szDst[iDstPos]=NULL;

  000ca	8b 45 10	 mov	 eax, DWORD PTR _szDst$[ebp]
  000cd	c6 04 06 00	 mov	 BYTE PTR [esi+eax], 0
$LN31@FilterMult:
  000d1	5f		 pop	 edi
  000d2	5b		 pop	 ebx
$LN1@FilterMult:
  000d3	5e		 pop	 esi

; 198  : 		}
; 199  : 	}
; 200  : }

  000d4	c9		 leave
  000d5	c2 14 00	 ret	 20			; 00000014H
?FilterMultiByteChar@CSlangUtil@@IAEXPBDHPADH1@Z ENDP	; CSlangUtil::FilterMultiByteChar
_TEXT	ENDS
PUBLIC	??_C@_0BE@HMBBAFJH@CSlangUtil?3?3IsSlang?$AA@	; `string'
PUBLIC	_szFilteredString$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?IsSlang@CSlangUtil@@IAE_NPBD@Z			; CSlangUtil::IsSlang
;	COMDAT ??_C@_0BE@HMBBAFJH@CSlangUtil?3?3IsSlang?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
??_C@_0BE@HMBBAFJH@CSlangUtil?3?3IsSlang?$AA@ DB 'CSlangUtil::IsSlang', 00H ; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\slangutil.cpp
CONST	ENDS
;	COMDAT ?IsSlang@CSlangUtil@@IAE_NPBD@Z
_TEXT	SEGMENT
_this$GSCopy$ = -288					; size = 4
tv333 = -284						; size = 4
tv342 = -280						; size = 4
_szFilteredString$GSCopy$ = -276			; size = 4
_iCnt$505167 = -272					; size = 4
_i$505162 = -268					; size = 4
_word$ = -264						; size = 260
__$ArrayPad$ = -4					; size = 4
_szFilteredString$ = 8					; size = 4
?IsSlang@CSlangUtil@@IAE_NPBD@Z PROC			; CSlangUtil::IsSlang, COMDAT
; _this$ = ecx

; 203  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _szFilteredString$[ebp]
  00018	57		 push	 edi

; 204  : 	char word[MAX_PATH];    
; 205  : 	memset(word, 0, sizeof(word));

  00019	68 04 01 00 00	 push	 260			; 00000104H
  0001e	33 db		 xor	 ebx, ebx
  00020	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _word$[ebp]
  00026	8b f9		 mov	 edi, ecx
  00028	53		 push	 ebx
  00029	50		 push	 eax

; 224  : 			while (*subs && (*subs == *subw)) 

  0002a	89 bd e0 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00030	89 b5 ec fe ff
	ff		 mov	 DWORD PTR _szFilteredString$GSCopy$[ebp], esi
  00036	e8 00 00 00 00	 call	 _memset
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003e	38 1e		 cmp	 BYTE PTR [esi], bl
  00040	0f 84 34 01 00
	00		 je	 $LN9@IsSlang

; 206  : 
; 207  :     const char *sub, *subs, *subw;
; 208  : 
; 209  :     if (!szFilteredString[0]) return false;
; 210  : 
; 211  :     // optimized for multibyte code set.
; 212  : 	for( int i=0 ; i < m_iMaxString ; i++)

  00046	89 9d f4 fe ff
	ff		 mov	 DWORD PTR _i$505162[ebp], ebx
  0004c	39 5f 04	 cmp	 DWORD PTR [edi+4], ebx
  0004f	0f 8e 25 01 00
	00		 jle	 $LN9@IsSlang
  00055	89 9d e8 fe ff
	ff		 mov	 DWORD PTR tv342[ebp], ebx
  0005b	eb 06		 jmp	 SHORT $LN11@IsSlang
$LL39@IsSlang:
  0005d	8b b5 ec fe ff
	ff		 mov	 esi, DWORD PTR _szFilteredString$GSCopy$[ebp]
$LN11@IsSlang:

; 213  : 	{
; 214  : 		if(m_vString[i].empty())	break;

  00063	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00066	03 85 e8 fe ff
	ff		 add	 eax, DWORD PTR tv342[ebp]
  0006c	39 58 10	 cmp	 DWORD PTR [eax+16], ebx
  0006f	0f 84 05 01 00
	00		 je	 $LN9@IsSlang

; 215  : 
; 216  : 		GetField(m_vString[i].c_str(), ',', word);	

  00075	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00079	72 02		 jb	 SHORT $LN25@IsSlang
  0007b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN25@IsSlang:
  0007d	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _word$[ebp]
  00083	51		 push	 ecx
  00084	6a 2c		 push	 44			; 0000002cH
  00086	50		 push	 eax
  00087	8b cf		 mov	 ecx, edi
  00089	e8 00 00 00 00	 call	 ?GetField@CSlangUtil@@IAEPADPBDHPAD@Z ; CSlangUtil::GetField

; 217  : 		sub = szFilteredString;
; 218  : 		int iCnt=0;

  0008e	89 9d f0 fe ff
	ff		 mov	 DWORD PTR _iCnt$505167[ebp], ebx
  00094	e9 90 00 00 00	 jmp	 $LN40@IsSlang
$LL7@IsSlang:

; 219  : 		while (*sub && *(sub + 1)) 

  00099	38 5e 01	 cmp	 BYTE PTR [esi+1], bl
  0009c	0f 84 b6 00 00
	00		 je	 $LN10@IsSlang

; 220  : 		{
; 221  : 			subs = sub;	// current comparison pointer in string
; 222  : 			subw = word;	// current comparison pointer in word
; 223  : 			int iCnt2=0;

  000a2	33 ff		 xor	 edi, edi
  000a4	8b c6		 mov	 eax, esi

; 224  : 			while (*subs && (*subs == *subw)) 

  000a6	38 1e		 cmp	 BYTE PTR [esi], bl
  000a8	74 62		 je	 SHORT $LN37@IsSlang
  000aa	8a 8d f8 fe ff
	ff		 mov	 cl, BYTE PTR _word$[ebp]
  000b0	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _word$[ebp]
  000b6	2b d6		 sub	 edx, esi
  000b8	89 95 e4 fe ff
	ff		 mov	 DWORD PTR tv333[ebp], edx
  000be	eb 06		 jmp	 SHORT $LN5@IsSlang
$LL35@IsSlang:
  000c0	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR tv333[ebp]
$LN5@IsSlang:
  000c6	38 08		 cmp	 BYTE PTR [eax], cl
  000c8	75 42		 jne	 SHORT $LN37@IsSlang

; 225  : 			{
; 226  : 				subs++; subw++;

  000ca	40		 inc	 eax

; 227  : 				if (*subw == 0) 

  000cb	8a 0c 02	 mov	 cl, BYTE PTR [edx+eax]
  000ce	3a cb		 cmp	 cl, bl
  000d0	0f 84 b7 00 00
	00		 je	 $LN30@IsSlang

; 230  : 				}
; 231  : 
; 232  : 				if( iCnt2++ > MAX_LOOP ) // 비상STOP

  000d6	8b d7		 mov	 edx, edi
  000d8	47		 inc	 edi
  000d9	81 fa 00 04 00
	00		 cmp	 edx, 1024		; 00000400H
  000df	7f 06		 jg	 SHORT $LN31@IsSlang

; 224  : 			while (*subs && (*subs == *subw)) 

  000e1	38 18		 cmp	 BYTE PTR [eax], bl
  000e3	75 db		 jne	 SHORT $LL35@IsSlang

; 213  : 	{
; 214  : 		if(m_vString[i].empty())	break;

  000e5	eb 25		 jmp	 SHORT $LN37@IsSlang
$LN31@IsSlang:

; 233  : 				{
; 234  : 					LOG.PrintTimeAndLog(0, "%s : %d : Over Max loop : %s", __FUNCTION__, __LINE__,  szFilteredString );

  000e7	ff b5 ec fe ff
	ff		 push	 DWORD PTR _szFilteredString$GSCopy$[ebp]
  000ed	68 ea 00 00 00	 push	 234			; 000000eaH
  000f2	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@HMBBAFJH@CSlangUtil?3?3IsSlang?$AA@
  000f7	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GHLBKHJF@?$CFs?5?3?5?$CFd?5?3?5Over?5Max?5loop?5?3?5?$CFs?$AA@
  000fc	53		 push	 ebx
  000fd	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  00103	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00109	83 c4 18	 add	 esp, 24			; 00000018H
$LN37@IsSlang:

; 235  : 					break;
; 236  : 				}
; 237  : 			}
; 238  : 			sub += *sub < 0 ? 2 : 1;

  0010c	33 c0		 xor	 eax, eax
  0010e	38 1e		 cmp	 BYTE PTR [esi], bl
  00110	0f 9c c0	 setl	 al
  00113	40		 inc	 eax
  00114	03 f0		 add	 esi, eax

; 239  : 
; 240  : 			if( iCnt++ > MAX_LOOP ) // 비상STOP

  00116	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _iCnt$505167[ebp]
  0011c	ff 85 f0 fe ff
	ff		 inc	 DWORD PTR _iCnt$505167[ebp]
  00122	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  00127	7f 0a		 jg	 SHORT $LN32@IsSlang
$LN40@IsSlang:

; 219  : 		while (*sub && *(sub + 1)) 

  00129	38 1e		 cmp	 BYTE PTR [esi], bl
  0012b	0f 85 68 ff ff
	ff		 jne	 $LL7@IsSlang

; 213  : 	{
; 214  : 		if(m_vString[i].empty())	break;

  00131	eb 25		 jmp	 SHORT $LN10@IsSlang
$LN32@IsSlang:

; 241  : 			{
; 242  : 				LOG.PrintTimeAndLog(0, "%s : %d : Over Max loop : %s", __FUNCTION__, __LINE__, szFilteredString );

  00133	ff b5 ec fe ff
	ff		 push	 DWORD PTR _szFilteredString$GSCopy$[ebp]
  00139	68 f2 00 00 00	 push	 242			; 000000f2H
  0013e	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@HMBBAFJH@CSlangUtil?3?3IsSlang?$AA@
  00143	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GHLBKHJF@?$CFs?5?3?5?$CFd?5?3?5Over?5Max?5loop?5?3?5?$CFs?$AA@
  00148	53		 push	 ebx
  00149	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00155	83 c4 18	 add	 esp, 24			; 00000018H
$LN10@IsSlang:

; 206  : 
; 207  :     const char *sub, *subs, *subw;
; 208  : 
; 209  :     if (!szFilteredString[0]) return false;
; 210  : 
; 211  :     // optimized for multibyte code set.
; 212  : 	for( int i=0 ; i < m_iMaxString ; i++)

  00158	ff 85 f4 fe ff
	ff		 inc	 DWORD PTR _i$505162[ebp]
  0015e	8b bd e0 fe ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  00164	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _i$505162[ebp]
  0016a	83 85 e8 fe ff
	ff 1c		 add	 DWORD PTR tv342[ebp], 28 ; 0000001cH
  00171	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  00174	0f 8c e3 fe ff
	ff		 jl	 $LL39@IsSlang
$LN9@IsSlang:

; 243  : 				break;
; 244  : 			}
; 245  : 		}
; 246  : 	}
; 247  : 	
; 248  : 	return false;

  0017a	32 c0		 xor	 al, al
$LN13@IsSlang:

; 249  : }

  0017c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0017f	5f		 pop	 edi
  00180	5e		 pop	 esi
  00181	33 cd		 xor	 ecx, ebp
  00183	5b		 pop	 ebx
  00184	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00189	c9		 leave
  0018a	c2 04 00	 ret	 4
$LN30@IsSlang:

; 228  : 				{
; 229  : 					return true;		// reach to null, curse

  0018d	b0 01		 mov	 al, 1
  0018f	eb eb		 jmp	 SHORT $LN13@IsSlang
?IsSlang@CSlangUtil@@IAE_NPBD@Z ENDP			; CSlangUtil::IsSlang
_TEXT	ENDS
PUBLIC	??_C@_0CC@FBOBEEIK@?$CFs?5?3?5?$CFd?5?3?5Over?5Max?5loop?5?3?5?$CFs?5?3?5?$CF@ ; `string'
PUBLIC	??_C@_0BJ@NCLCKMCK@CSlangUtil?3?3RePlaceSlang?$AA@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	_result$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?RePlaceSlang@CSlangUtil@@IAE_NPAD0H@Z		; CSlangUtil::RePlaceSlang
EXTRN	__imp__strncpy:PROC
EXTRN	__imp___mbsstr:PROC
;	COMDAT ??_C@_0CC@FBOBEEIK@?$CFs?5?3?5?$CFd?5?3?5Over?5Max?5loop?5?3?5?$CFs?5?3?5?$CF@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\setting.h
CONST	SEGMENT
??_C@_0CC@FBOBEEIK@?$CFs?5?3?5?$CFd?5?3?5Over?5Max?5loop?5?3?5?$CFs?5?3?5?$CF@ DB '%'
	DB	's : %d : Over Max loop : %s : %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NCLCKMCK@CSlangUtil?3?3RePlaceSlang?$AA@
CONST	SEGMENT
??_C@_0BJ@NCLCKMCK@CSlangUtil?3?3RePlaceSlang?$AA@ DB 'CSlangUtil::RePlac'
	DB	'eSlang', 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\slangutil.cpp
CONST	ENDS
;	COMDAT ?RePlaceSlang@CSlangUtil@@IAE_NPAD0H@Z
_TEXT	SEGMENT
tv395 = -548						; size = 4
_this$GSCopy$ = -544					; size = 4
tv618 = -540						; size = 4
_iCnt$507622 = -536					; size = 4
_i$507607 = -532					; size = 4
_result$GSCopy$ = -528					; size = 4
_slang$ = -524						; size = 260
_replace$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_string$ = 8						; size = 4
_result$ = 12						; size = 4
_max_len$ = 16						; size = 4
?RePlaceSlang@CSlangUtil@@IAE_NPAD0H@Z PROC		; CSlangUtil::RePlaceSlang, COMDAT
; _this$ = ecx

; 846  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 02 00
	00		 sub	 esp, 548		; 00000224H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 853  : 	{
; 854  : 		if( m_vString[i].empty()) break;

  00013	8b 45 0c	 mov	 eax, DWORD PTR _result$[ebp]
  00016	53		 push	 ebx
  00017	8b 5d 08	 mov	 ebx, DWORD PTR _string$[ebp]
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	be 04 01 00 00	 mov	 esi, 260		; 00000104H
  00021	56		 push	 esi
  00022	89 85 f0 fd ff
	ff		 mov	 DWORD PTR _result$GSCopy$[ebp], eax
  00028	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _slang$[ebp]
  0002e	8b f9		 mov	 edi, ecx
  00030	6a 00		 push	 0
  00032	50		 push	 eax
  00033	89 bd e0 fd ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00039	e8 00 00 00 00	 call	 _memset
  0003e	56		 push	 esi
  0003f	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _replace$[ebp]
  00045	6a 00		 push	 0
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 _memset
  0004d	33 c0		 xor	 eax, eax
  0004f	83 c4 18	 add	 esp, 24			; 00000018H
  00052	89 85 ec fd ff
	ff		 mov	 DWORD PTR _i$507607[ebp], eax
  00058	39 47 04	 cmp	 DWORD PTR [edi+4], eax
  0005b	0f 8e 38 02 00
	00		 jle	 $LN49@RePlaceSla
  00061	89 85 e4 fd ff
	ff		 mov	 DWORD PTR tv618[ebp], eax
  00067	eb 05		 jmp	 SHORT $LN17@RePlaceSla
$LL59@RePlaceSla:
  00069	be 04 01 00 00	 mov	 esi, 260		; 00000104H
$LN17@RePlaceSla:
  0006e	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00071	03 85 e4 fd ff
	ff		 add	 eax, DWORD PTR tv618[ebp]
  00077	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0007b	0f 84 18 02 00
	00		 je	 $LN49@RePlaceSla

; 855  : 
; 856  : 		lptr = (char*)m_vString[i].c_str();

  00081	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00085	72 02		 jb	 SHORT $LN35@RePlaceSla
  00087	8b 00		 mov	 eax, DWORD PTR [eax]
$LN35@RePlaceSla:

; 857  : 		lptr = GetField(lptr, ',', slang);		// get the first field	

  00089	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR _slang$[ebp]
  0008f	51		 push	 ecx
  00090	6a 2c		 push	 44			; 0000002cH
  00092	50		 push	 eax
  00093	8b cf		 mov	 ecx, edi
  00095	e8 00 00 00 00	 call	 ?GetField@CSlangUtil@@IAEPADPBDHPAD@Z ; CSlangUtil::GetField

; 858  : 		lptr = GetField(lptr, ',', replace);	// get the second field

  0009a	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _replace$[ebp]
  000a0	51		 push	 ecx
  000a1	6a 2c		 push	 44			; 0000002cH
  000a3	50		 push	 eax
  000a4	8b cf		 mov	 ecx, edi
  000a6	e8 00 00 00 00	 call	 ?GetField@CSlangUtil@@IAEPADPBDHPAD@Z ; CSlangUtil::GetField

; 859  : 		cptr = string;
; 860  : 		strcpy(result, string);

  000ab	8b 95 f0 fd ff
	ff		 mov	 edx, DWORD PTR _result$GSCopy$[ebp]
  000b1	2b d3		 sub	 edx, ebx
  000b3	8b c3		 mov	 eax, ebx
  000b5	89 95 dc fd ff
	ff		 mov	 DWORD PTR tv395[ebp], edx
$LL20@RePlaceSla:
  000bb	8a 08		 mov	 cl, BYTE PTR [eax]
  000bd	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000c0	40		 inc	 eax
  000c1	84 c9		 test	 cl, cl
  000c3	75 f6		 jne	 SHORT $LL20@RePlaceSla

; 861  : 
; 862  : 		if( !Setting::IsSlangFilterChange() )

  000c5	38 0d 5f 00 00
	00		 cmp	 BYTE PTR ?m_Option@Setting@@1USettingOption@@A+95, cl
  000cb	75 3a		 jne	 SHORT $LN60@RePlaceSla

; 863  : 		{
; 864  : 			memset(replace, 0, sizeof(replace));

  000cd	56		 push	 esi
  000ce	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _replace$[ebp]
  000d4	6a 00		 push	 0
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 _memset

; 865  : 			int iSlangSize = strlen( slang );

  000dc	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _slang$[ebp]
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e5	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
$LL52@RePlaceSla:
  000e8	8a 10		 mov	 dl, BYTE PTR [eax]
  000ea	40		 inc	 eax
  000eb	84 d2		 test	 dl, dl
  000ed	75 f9		 jne	 SHORT $LL52@RePlaceSla
  000ef	2b c1		 sub	 eax, ecx

; 866  : 			for (int j = 0; j < iSlangSize ; j++)

  000f1	85 c0		 test	 eax, eax
  000f3	7e 12		 jle	 SHORT $LN60@RePlaceSla

; 863  : 		{
; 864  : 			memset(replace, 0, sizeof(replace));

  000f5	50		 push	 eax
  000f6	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _replace$[ebp]
  000fc	6a 2a		 push	 42			; 0000002aH
  000fe	50		 push	 eax
  000ff	e8 00 00 00 00	 call	 _memset
  00104	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN60@RePlaceSla:

; 867  : 			{
; 868  : 
; 869  : #if defined( SRC_OVERSEAS ) && !defined( SRC_ID )
; 870  : 
; 871  : #if defined( MULTI_BYTE_CHECK )
; 872  : 				if( IsDBCSLeadByteEx( COUNTRY_CODE_PAGE, slang[j] ) )
; 873  : #else
; 874  : 				if( false && IsDBCSLeadByteEx( COUNTRY_CODE_PAGE, slang[j] ) ) 
; 875  : #endif
; 876  : 
; 877  : #else
; 878  : 				if( IsDBCSLeadByte(slang[j]) ) 
; 879  : #endif
; 880  : 
; 881  : 				{
; 882  : 					replace[j] = '*';
; 883  : 					j++;
; 884  : 					replace[j] = ' ';
; 885  : 				}
; 886  : 				else
; 887  : 				{
; 888  : 					replace[j] = '*';
; 889  : 				}
; 890  : 			}
; 891  : 		}
; 892  : 
; 893  : 		// 바뀔값이 없다면 다음으로 넘어가자.
; 894  : 		if (!replace[0]) continue;

  00107	80 bd f8 fe ff
	ff 00		 cmp	 BYTE PTR _replace$[ebp], 0
  0010e	0f 84 69 01 00
	00		 je	 $LN16@RePlaceSla

; 895  : 
; 896  : 		int iCnt=0;

  00114	83 a5 e8 fd ff
	ff 00		 and	 DWORD PTR _iCnt$507622[ebp], 0

; 897  : 		while (cptr = (char*)_mbsstr((const unsigned char*)string, (const unsigned char*)slang), cptr) 

  0011b	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _slang$[ebp]
  00121	50		 push	 eax
  00122	53		 push	 ebx
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbsstr
  00129	8b f0		 mov	 esi, eax
  0012b	59		 pop	 ecx
  0012c	59		 pop	 ecx
  0012d	85 f6		 test	 esi, esi
  0012f	0f 84 48 01 00
	00		 je	 $LN16@RePlaceSla
$LL6@RePlaceSla:

; 898  : 		{
; 899  : 			// if there is no matching replacement of curse word
; 900  : 			if (!replace[0]) 
; 901  : 				return false;
; 902  : 
; 903  : 			if ((max_len - 1) < (int)((cptr - string) + strlen(replace) + strlen(cptr + strlen(slang)))) 

  00135	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR _replace$[ebp]
  0013b	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
$LL53@RePlaceSla:
  0013e	8a 07		 mov	 al, BYTE PTR [edi]
  00140	47		 inc	 edi
  00141	84 c0		 test	 al, al
  00143	75 f9		 jne	 SHORT $LL53@RePlaceSla
  00145	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _slang$[ebp]
  0014b	2b f9		 sub	 edi, ecx
  0014d	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
$LL54@RePlaceSla:
  00150	8a 10		 mov	 dl, BYTE PTR [eax]
  00152	40		 inc	 eax
  00153	84 d2		 test	 dl, dl
  00155	75 f9		 jne	 SHORT $LL54@RePlaceSla
  00157	2b c1		 sub	 eax, ecx
  00159	03 c6		 add	 eax, esi
  0015b	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
$LL55@RePlaceSla:
  0015e	8a 10		 mov	 dl, BYTE PTR [eax]
  00160	40		 inc	 eax
  00161	84 d2		 test	 dl, dl
  00163	75 f9		 jne	 SHORT $LL55@RePlaceSla
  00165	2b c1		 sub	 eax, ecx
  00167	8b cf		 mov	 ecx, edi
  00169	2b cb		 sub	 ecx, ebx
  0016b	03 c8		 add	 ecx, eax
  0016d	8b 45 10	 mov	 eax, DWORD PTR _max_len$[ebp]
  00170	03 ce		 add	 ecx, esi
  00172	48		 dec	 eax
  00173	3b c1		 cmp	 eax, ecx

; 904  : 			{
; 905  : 				// string too long, remove the curses that linger around
; 906  : 				strncpy(result, string, cptr - string);

  00175	8b c6		 mov	 eax, esi
  00177	7d 3d		 jge	 SHORT $LN3@RePlaceSla
  00179	2b c3		 sub	 eax, ebx
  0017b	50		 push	 eax
  0017c	53		 push	 ebx
  0017d	ff b5 f0 fd ff
	ff		 push	 DWORD PTR _result$GSCopy$[ebp]
  00183	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy

; 907  : 				strcpy(result + (cptr - string), cptr + strlen(slang));

  00189	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _slang$[ebp]
  0018f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00192	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
$LL56@RePlaceSla:
  00195	8a 10		 mov	 dl, BYTE PTR [eax]
  00197	40		 inc	 eax
  00198	84 d2		 test	 dl, dl
  0019a	75 f9		 jne	 SHORT $LL56@RePlaceSla
  0019c	2b c1		 sub	 eax, ecx
  0019e	8b 8d dc fd ff
	ff		 mov	 ecx, DWORD PTR tv395[ebp]
  001a4	03 c6		 add	 eax, esi
  001a6	2b c8		 sub	 ecx, eax
  001a8	03 ce		 add	 ecx, esi
$LL21@RePlaceSla:
  001aa	8a 10		 mov	 dl, BYTE PTR [eax]
  001ac	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  001af	40		 inc	 eax
  001b0	84 d2		 test	 dl, dl
  001b2	75 f6		 jne	 SHORT $LL21@RePlaceSla

; 908  : 			}
; 909  : 			else

  001b4	eb 57		 jmp	 SHORT $LN2@RePlaceSla
$LN3@RePlaceSla:

; 910  : 			{               	    
; 911  : 				strncpy(result, string, cptr - string);

  001b6	2b c3		 sub	 eax, ebx
  001b8	50		 push	 eax
  001b9	53		 push	 ebx
  001ba	ff b5 f0 fd ff
	ff		 push	 DWORD PTR _result$GSCopy$[ebp]
  001c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy

; 912  : 				strcpy(result + (cptr - string), replace);

  001c6	8b 8d dc fd ff
	ff		 mov	 ecx, DWORD PTR tv395[ebp]
  001cc	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _replace$[ebp]
  001d2	8b d0		 mov	 edx, eax
  001d4	2b ca		 sub	 ecx, edx
  001d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d9	03 ce		 add	 ecx, esi
$LL22@RePlaceSla:
  001db	8a 10		 mov	 dl, BYTE PTR [eax]
  001dd	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  001e0	40		 inc	 eax
  001e1	84 d2		 test	 dl, dl
  001e3	75 f6		 jne	 SHORT $LL22@RePlaceSla

; 913  : 				strcpy(result + (cptr - string + strlen(replace)), cptr + strlen(slang));

  001e5	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _slang$[ebp]
  001eb	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL57@RePlaceSla:
  001ee	8a 08		 mov	 cl, BYTE PTR [eax]
  001f0	40		 inc	 eax
  001f1	84 c9		 test	 cl, cl
  001f3	75 f9		 jne	 SHORT $LL57@RePlaceSla
  001f5	2b fb		 sub	 edi, ebx
  001f7	03 bd f0 fd ff
	ff		 add	 edi, DWORD PTR _result$GSCopy$[ebp]
  001fd	2b c2		 sub	 eax, edx
  001ff	03 c6		 add	 eax, esi
  00201	03 fe		 add	 edi, esi
$LL23@RePlaceSla:
  00203	8a 08		 mov	 cl, BYTE PTR [eax]
  00205	40		 inc	 eax
  00206	88 0f		 mov	 BYTE PTR [edi], cl
  00208	47		 inc	 edi
  00209	84 c9		 test	 cl, cl
  0020b	75 f6		 jne	 SHORT $LL23@RePlaceSla
$LN2@RePlaceSla:

; 914  : 			}
; 915  : 			// refresh intermediate result
; 916  : 			strcpy(string, result);

  0020d	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _result$GSCopy$[ebp]
  00213	8b d3		 mov	 edx, ebx
  00215	2b d0		 sub	 edx, eax
$LL24@RePlaceSla:
  00217	8a 08		 mov	 cl, BYTE PTR [eax]
  00219	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0021c	40		 inc	 eax
  0021d	84 c9		 test	 cl, cl
  0021f	75 f6		 jne	 SHORT $LL24@RePlaceSla

; 917  : 
; 918  : 			if( iCnt++ > MAX_LOOP ) // 비상STOP

  00221	8b 85 e8 fd ff
	ff		 mov	 eax, DWORD PTR _iCnt$507622[ebp]
  00227	ff 85 e8 fd ff
	ff		 inc	 DWORD PTR _iCnt$507622[ebp]
  0022d	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  00232	7f 1c		 jg	 SHORT $LN48@RePlaceSla

; 897  : 		while (cptr = (char*)_mbsstr((const unsigned char*)string, (const unsigned char*)slang), cptr) 

  00234	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _slang$[ebp]
  0023a	50		 push	 eax
  0023b	53		 push	 ebx
  0023c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbsstr
  00242	8b f0		 mov	 esi, eax
  00244	59		 pop	 ecx
  00245	59		 pop	 ecx
  00246	85 f6		 test	 esi, esi
  00248	0f 85 e7 fe ff
	ff		 jne	 $LL6@RePlaceSla

; 853  : 	{
; 854  : 		if( m_vString[i].empty()) break;

  0024e	eb 27		 jmp	 SHORT $LN61@RePlaceSla
$LN48@RePlaceSla:

; 919  : 			{
; 920  : 				LOG.PrintTimeAndLog(0, "%s : %d : Over Max loop : %s : %s", __FUNCTION__, __LINE__, string , result );

  00250	ff b5 f0 fd ff
	ff		 push	 DWORD PTR _result$GSCopy$[ebp]
  00256	53		 push	 ebx
  00257	68 98 03 00 00	 push	 920			; 00000398H
  0025c	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@NCLCKMCK@CSlangUtil?3?3RePlaceSlang?$AA@
  00261	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@FBOBEEIK@?$CFs?5?3?5?$CFd?5?3?5Over?5Max?5loop?5?3?5?$CFs?5?3?5?$CF@
  00266	6a 00		 push	 0
  00268	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  0026e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00274	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN61@RePlaceSla:
  00277	8b bd e0 fd ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
$LN16@RePlaceSla:

; 847  : 	char slang[MAX_PATH], replace[MAX_PATH];
; 848  : 	memset(slang, 0, sizeof(slang));
; 849  : 	memset(replace, 0, sizeof(replace));
; 850  : 
; 851  : 	char *lptr, *cptr;
; 852  : 	for(int i=0 ; i< m_iMaxString ; i++)

  0027d	ff 85 ec fd ff
	ff		 inc	 DWORD PTR _i$507607[ebp]
  00283	8b 85 ec fd ff
	ff		 mov	 eax, DWORD PTR _i$507607[ebp]
  00289	83 85 e4 fd ff
	ff 1c		 add	 DWORD PTR tv618[ebp], 28 ; 0000001cH
  00290	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  00293	0f 8c d0 fd ff
	ff		 jl	 $LL59@RePlaceSla
$LN49@RePlaceSla:

; 921  : 				break;
; 922  : 			}
; 923  : 		}
; 924  : 	}
; 925  : 	return true;
; 926  : }

  00299	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0029c	5f		 pop	 edi
  0029d	5e		 pop	 esi
  0029e	33 cd		 xor	 ecx, ebp
  002a0	b0 01		 mov	 al, 1
  002a2	5b		 pop	 ebx
  002a3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002a8	c9		 leave
  002a9	c2 0c 00	 ret	 12			; 0000000cH
?RePlaceSlang@CSlangUtil@@IAE_NPAD0H@Z ENDP		; CSlangUtil::RePlaceSlang
_TEXT	ENDS
PUBLIC	??_C@_0BN@NGCHCDFI@CSlangUtil?3?3RePlaceException?$AA@ ; `string'
PUBLIC	?RePlaceException@CSlangUtil@@IAE_NPAD0H@Z	; CSlangUtil::RePlaceException
;	COMDAT ??_C@_0BN@NGCHCDFI@CSlangUtil?3?3RePlaceException?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
??_C@_0BN@NGCHCDFI@CSlangUtil?3?3RePlaceException?$AA@ DB 'CSlangUtil::Re'
	DB	'PlaceException', 00H			; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\slangutil.cpp
CONST	ENDS
;	COMDAT ?RePlaceException@CSlangUtil@@IAE_NPAD0H@Z
_TEXT	SEGMENT
tv284 = -24						; size = 4
_i$507644 = -20						; size = 4
tv330 = -16						; size = 4
_this$ = -12						; size = 4
_iCnt$507650 = -8					; size = 4
_bReplace$ = -1						; size = 1
_string$ = 8						; size = 4
_result$ = 12						; size = 4
_max_len$ = 16						; size = 4
?RePlaceException@CSlangUtil@@IAE_NPAD0H@Z PROC		; CSlangUtil::RePlaceException, COMDAT
; _this$ = ecx

; 929  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 933  : 	for(int i = 0;i < (int)m_vExceptionList.size();i++)

  00009	8b 83 24 08 00
	00		 mov	 eax, DWORD PTR [ebx+2084]
  0000f	2b 83 20 08 00
	00		 sub	 eax, DWORD PTR [ebx+2080]
  00015	6a 1c		 push	 28			; 0000001cH
  00017	99		 cdq
  00018	59		 pop	 ecx
  00019	f7 f9		 idiv	 ecx
  0001b	83 65 ec 00	 and	 DWORD PTR _i$507644[ebp], 0
  0001f	89 5d f4	 mov	 DWORD PTR _this$[ebp], ebx
  00022	c6 45 ff 00	 mov	 BYTE PTR _bReplace$[ebp], 0
  00026	85 c0		 test	 eax, eax
  00028	0f 8e 34 01 00
	00		 jle	 $LN30@RePlaceExc

; 930  : 	const char *word;
; 931  : 
; 932  : 	bool bReplace = false;

  0002e	83 65 f0 00	 and	 DWORD PTR tv330[ebp], 0
  00032	56		 push	 esi
  00033	57		 push	 edi
$LL38@RePlaceExc:

; 934  : 	{
; 935  : 		if(m_vExceptionList[i].empty())

  00034	8b 83 20 08 00
	00		 mov	 eax, DWORD PTR [ebx+2080]
  0003a	03 45 f0	 add	 eax, DWORD PTR tv330[ebp]
  0003d	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00041	0f 84 19 01 00
	00		 je	 $LN39@RePlaceExc

; 936  : 			break;
; 937  : 
; 938  : 		word = m_vExceptionList[i].c_str();

  00047	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0004b	72 04		 jb	 SHORT $LN24@RePlaceExc
  0004d	8b 38		 mov	 edi, DWORD PTR [eax]
  0004f	eb 02		 jmp	 SHORT $LN25@RePlaceExc
$LN24@RePlaceExc:
  00051	8b f8		 mov	 edi, eax
$LN25@RePlaceExc:

; 939  : 
; 940  : 		int iCnt=0;

  00053	83 65 f8 00	 and	 DWORD PTR _iCnt$507650[ebp], 0

; 941  : 		char *cptr;
; 942  : 
; 943  : 		while (cptr = (char*)_mbsstr((const unsigned char*)string, (const unsigned char*)word), cptr) 

  00057	57		 push	 edi
  00058	ff 75 08	 push	 DWORD PTR _string$[ebp]
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbsstr
  00061	8b f0		 mov	 esi, eax
  00063	59		 pop	 ecx
  00064	59		 pop	 ecx
  00065	85 f6		 test	 esi, esi
  00067	0f 84 d1 00 00
	00		 je	 $LN8@RePlaceExc

; 939  : 
; 940  : 		int iCnt=0;

  0006d	8b 45 10	 mov	 eax, DWORD PTR _max_len$[ebp]
  00070	48		 dec	 eax
  00071	89 45 e8	 mov	 DWORD PTR tv284[ebp], eax
$LL5@RePlaceExc:

; 944  : 		{
; 945  : 			if ((max_len - 1) < (int)((cptr - string) + strlen(word) + strlen(cptr + strlen(word)))) 

  00074	8b c7		 mov	 eax, edi
  00076	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL32@RePlaceExc:
  00079	8a 08		 mov	 cl, BYTE PTR [eax]
  0007b	40		 inc	 eax
  0007c	84 c9		 test	 cl, cl
  0007e	75 f9		 jne	 SHORT $LL32@RePlaceExc
  00080	2b c2		 sub	 eax, edx
  00082	8b d8		 mov	 ebx, eax
  00084	8b c7		 mov	 eax, edi
  00086	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
$LL33@RePlaceExc:
  00089	8a 10		 mov	 dl, BYTE PTR [eax]
  0008b	40		 inc	 eax
  0008c	84 d2		 test	 dl, dl
  0008e	75 f9		 jne	 SHORT $LL33@RePlaceExc
  00090	2b c1		 sub	 eax, ecx
  00092	03 c6		 add	 eax, esi
  00094	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
$LL34@RePlaceExc:
  00097	8a 10		 mov	 dl, BYTE PTR [eax]
  00099	40		 inc	 eax
  0009a	84 d2		 test	 dl, dl
  0009c	75 f9		 jne	 SHORT $LL34@RePlaceExc
  0009e	2b c1		 sub	 eax, ecx
  000a0	2b 45 08	 sub	 eax, DWORD PTR _string$[ebp]
  000a3	03 c3		 add	 eax, ebx
  000a5	03 c6		 add	 eax, esi
  000a7	39 45 e8	 cmp	 DWORD PTR tv284[ebp], eax
  000aa	0f 8c 8b 00 00
	00		 jl	 $LN37@RePlaceExc

; 946  : 			{
; 947  : 				break;
; 948  : 			}
; 949  : 			else
; 950  : 			{
; 951  : 				strncpy( result + (cptr - string), word, strlen(word) );

  000b0	8b c7		 mov	 eax, edi
  000b2	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
$LL35@RePlaceExc:
  000b5	8a 10		 mov	 dl, BYTE PTR [eax]
  000b7	40		 inc	 eax
  000b8	84 d2		 test	 dl, dl
  000ba	75 f9		 jne	 SHORT $LL35@RePlaceExc
  000bc	2b c1		 sub	 eax, ecx
  000be	50		 push	 eax
  000bf	8b c6		 mov	 eax, esi
  000c1	2b 45 08	 sub	 eax, DWORD PTR _string$[ebp]
  000c4	57		 push	 edi
  000c5	03 45 0c	 add	 eax, DWORD PTR _result$[ebp]
  000c8	50		 push	 eax
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy

; 952  : 
; 953  : 				memset( cptr, '*', strlen(word) );

  000cf	8b c7		 mov	 eax, edi
  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d4	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
$LL36@RePlaceExc:
  000d7	8a 10		 mov	 dl, BYTE PTR [eax]
  000d9	40		 inc	 eax
  000da	84 d2		 test	 dl, dl
  000dc	75 f9		 jne	 SHORT $LL36@RePlaceExc
  000de	2b c1		 sub	 eax, ecx
  000e0	50		 push	 eax
  000e1	6a 2a		 push	 42			; 0000002aH
  000e3	56		 push	 esi
  000e4	e8 00 00 00 00	 call	 _memset

; 954  : 
; 955  : 				bReplace = true;
; 956  : 			}
; 957  : 
; 958  : 			if( iCnt++ > MAX_LOOP ) // 비상STOP

  000e9	8b 45 f8	 mov	 eax, DWORD PTR _iCnt$507650[ebp]
  000ec	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ef	ff 45 f8	 inc	 DWORD PTR _iCnt$507650[ebp]
  000f2	c6 45 ff 01	 mov	 BYTE PTR _bReplace$[ebp], 1
  000f6	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  000fb	7f 18		 jg	 SHORT $LN29@RePlaceExc

; 941  : 		char *cptr;
; 942  : 
; 943  : 		while (cptr = (char*)_mbsstr((const unsigned char*)string, (const unsigned char*)word), cptr) 

  000fd	57		 push	 edi
  000fe	ff 75 08	 push	 DWORD PTR _string$[ebp]
  00101	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbsstr
  00107	8b f0		 mov	 esi, eax
  00109	59		 pop	 ecx
  0010a	59		 pop	 ecx
  0010b	85 f6		 test	 esi, esi
  0010d	0f 85 61 ff ff
	ff		 jne	 $LL5@RePlaceExc

; 934  : 	{
; 935  : 		if(m_vExceptionList[i].empty())

  00113	eb 26		 jmp	 SHORT $LN37@RePlaceExc
$LN29@RePlaceExc:

; 959  : 			{
; 960  : 				LOG.PrintTimeAndLog(0, "%s : %d : Over Max loop : %s : %s", __FUNCTION__, __LINE__, string , result );

  00115	ff 75 0c	 push	 DWORD PTR _result$[ebp]
  00118	ff 75 08	 push	 DWORD PTR _string$[ebp]
  0011b	68 c0 03 00 00	 push	 960			; 000003c0H
  00120	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@NGCHCDFI@CSlangUtil?3?3RePlaceException?$AA@
  00125	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@FBOBEEIK@?$CFs?5?3?5?$CFd?5?3?5Over?5Max?5loop?5?3?5?$CFs?5?3?5?$CF@
  0012a	6a 00		 push	 0
  0012c	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  00132	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00138	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN37@RePlaceExc:

; 934  : 	{
; 935  : 		if(m_vExceptionList[i].empty())

  0013b	8b 5d f4	 mov	 ebx, DWORD PTR _this$[ebp]
$LN8@RePlaceExc:

; 933  : 	for(int i = 0;i < (int)m_vExceptionList.size();i++)

  0013e	8b 83 24 08 00
	00		 mov	 eax, DWORD PTR [ebx+2084]
  00144	2b 83 20 08 00
	00		 sub	 eax, DWORD PTR [ebx+2080]
  0014a	6a 1c		 push	 28			; 0000001cH
  0014c	99		 cdq
  0014d	59		 pop	 ecx
  0014e	f7 f9		 idiv	 ecx
  00150	ff 45 ec	 inc	 DWORD PTR _i$507644[ebp]
  00153	83 45 f0 1c	 add	 DWORD PTR tv330[ebp], 28 ; 0000001cH
  00157	39 45 ec	 cmp	 DWORD PTR _i$507644[ebp], eax
  0015a	0f 8c d4 fe ff
	ff		 jl	 $LL38@RePlaceExc
$LN39@RePlaceExc:
  00160	5f		 pop	 edi
  00161	5e		 pop	 esi
$LN30@RePlaceExc:

; 961  : 				break;
; 962  : 			}
; 963  : 		}
; 964  : 	}
; 965  : 
; 966  : 	return bReplace;

  00162	8a 45 ff	 mov	 al, BYTE PTR _bReplace$[ebp]
  00165	5b		 pop	 ebx

; 967  : }

  00166	c9		 leave
  00167	c2 0c 00	 ret	 12			; 0000000cH
?RePlaceException@CSlangUtil@@IAE_NPAD0H@Z ENDP		; CSlangUtil::RePlaceException
_TEXT	ENDS
PUBLIC	??_C@_0BP@GOJLEGID@CSlangUtil?3?3IsLimitedGuildName?$AA@ ; `string'
PUBLIC	_szGuildName$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?IsLimitedGuildName@CSlangUtil@@QAE_NPBD@Z	; CSlangUtil::IsLimitedGuildName
EXTRN	?GetLocal@ioLocalManager@@QAEPAVioLocalParent@@W4LocalType@ioLocalManagerParent@@@Z:PROC ; ioLocalManager::GetLocal
EXTRN	?GetSingleton@ioLocalManager@@SAAAV1@XZ:PROC	; ioLocalManager::GetSingleton
EXTRN	__imp_?GetLocalType@ioLocalManagerParent@@SA?AW4LocalType@1@XZ:PROC
;	COMDAT ??_C@_0BP@GOJLEGID@CSlangUtil?3?3IsLimitedGuildName?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
??_C@_0BP@GOJLEGID@CSlangUtil?3?3IsLimitedGuildName?$AA@ DB 'CSlangUtil::'
	DB	'IsLimitedGuildName', 00H			; `string'
CONST	ENDS
;	COMDAT ?szNumFilter@?3??IsLimitedGuildName@CSlangUtil@@QAE_NPBD@Z@4PADA
_DATA	SEGMENT
?szNumFilter@?3??IsLimitedGuildName@CSlangUtil@@QAE_NPBD@Z@4PADA DB 030H ; `CSlangUtil::IsLimitedGuildName'::`4'::szNumFilter
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	00H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\slangutil.cpp
_DATA	ENDS
;	COMDAT ?IsLimitedGuildName@CSlangUtil@@QAE_NPBD@Z
_TEXT	SEGMENT
_subs$ = -1076						; size = 4
_word$ = -1072						; size = 4
tv447 = -1068						; size = 4
_szGuildName$GSCopy$ = -1064				; size = 4
_iCnt$507687 = -1060					; size = 4
tv438 = -1056						; size = 4
_iCnt2$507691 = -1052					; size = 4
_i$507681 = -1048					; size = 4
_iMaxLen$ = -1048					; size = 4
_szSrcChar1$ = -1044					; size = 260
_szSrcChar2$ = -784					; size = 260
_szSrcChar3$ = -524					; size = 260
_szSrcLastFilter$ = -264				; size = 260
__$ArrayPad$ = -4					; size = 4
_szGuildName$ = 8					; size = 4
?IsLimitedGuildName@CSlangUtil@@QAE_NPBD@Z PROC		; CSlangUtil::IsLimitedGuildName, COMDAT
; _this$ = ecx

; 970  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 34 04 00
	00		 sub	 esp, 1076		; 00000434H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _szGuildName$[ebp]
  00016	53		 push	 ebx

; 971  : 	if( szGuildName == NULL ) return false;

  00017	33 db		 xor	 ebx, ebx
  00019	57		 push	 edi
  0001a	8b f9		 mov	 edi, ecx

; 992  : 
; 993  : 	const char *word, *sub, *subs, *subw;
; 994  : 	for(int i = 0;i < (int)m_vGuildNameLimit.size();i++)

  0001c	89 85 d8 fb ff
	ff		 mov	 DWORD PTR _szGuildName$GSCopy$[ebp], eax
  00022	3b c3		 cmp	 eax, ebx
  00024	75 07		 jne	 SHORT $LN13@IsLimitedG

; 971  : 	if( szGuildName == NULL ) return false;

  00026	32 c0		 xor	 al, al
  00028	e9 71 02 00 00	 jmp	 $LN14@IsLimitedG
$LN13@IsLimitedG:
  0002d	56		 push	 esi

; 972  : 
; 973  : 	int iMaxLen = strlen( szGuildName ) + 1;

  0002e	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL38@IsLimitedG:
  00031	8a 08		 mov	 cl, BYTE PTR [eax]
  00033	40		 inc	 eax
  00034	3a cb		 cmp	 cl, bl
  00036	75 f9		 jne	 SHORT $LL38@IsLimitedG
  00038	2b c6		 sub	 eax, esi
  0003a	40		 inc	 eax

; 974  : 
; 975  : 	static char szNumFilter[]={'0','1','2','3','4','5','6','7','8','9',NULL}; 
; 976  : 	char szSrcChar1[MAX_PATH], szSrcChar2[MAX_PATH], szSrcChar3[MAX_PATH], szSrcLastFilter[MAX_PATH];
; 977  : 	memset( szSrcChar1, 0, sizeof( szSrcChar1 ) );

  0003b	be 04 01 00 00	 mov	 esi, 260		; 00000104H
  00040	56		 push	 esi
  00041	89 85 e8 fb ff
	ff		 mov	 DWORD PTR _iMaxLen$[ebp], eax
  00047	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _szSrcChar1$[ebp]
  0004d	53		 push	 ebx
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 _memset

; 978  : 	memset( szSrcChar2, 0, sizeof( szSrcChar2 ) );

  00054	56		 push	 esi
  00055	8d 85 f0 fc ff
	ff		 lea	 eax, DWORD PTR _szSrcChar2$[ebp]
  0005b	53		 push	 ebx
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 _memset

; 979  : 	memset( szSrcChar3, 0, sizeof( szSrcChar3 ) );

  00062	56		 push	 esi
  00063	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _szSrcChar3$[ebp]
  00069	53		 push	 ebx
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 _memset

; 980  : 	memset( szSrcLastFilter, 0, sizeof( szSrcLastFilter ) );

  00070	56		 push	 esi
  00071	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szSrcLastFilter$[ebp]
  00077	53		 push	 ebx
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 _memset
  0007e	83 c4 30	 add	 esp, 48			; 00000030H

; 981  : 
; 982  : 	FilterChar( szGuildName, szSrcChar1, m_pFilterString );

  00081	ff 77 18	 push	 DWORD PTR [edi+24]
  00084	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _szSrcChar1$[ebp]
  0008a	50		 push	 eax
  0008b	ff b5 d8 fb ff
	ff		 push	 DWORD PTR _szGuildName$GSCopy$[ebp]
  00091	8b cf		 mov	 ecx, edi
  00093	e8 00 00 00 00	 call	 ?FilterChar@CSlangUtil@@IAEXPBDPAD1@Z ; CSlangUtil::FilterChar

; 983  : 	FilterMultiByteChar( szSrcChar1, iMaxLen, szSrcChar2, iMaxLen, m_pFilterMultiByteString );

  00098	ff 77 1c	 push	 DWORD PTR [edi+28]
  0009b	8d 85 f0 fc ff
	ff		 lea	 eax, DWORD PTR _szSrcChar2$[ebp]
  000a1	ff b5 e8 fb ff
	ff		 push	 DWORD PTR _iMaxLen$[ebp]
  000a7	8b cf		 mov	 ecx, edi
  000a9	50		 push	 eax
  000aa	ff b5 e8 fb ff
	ff		 push	 DWORD PTR _iMaxLen$[ebp]
  000b0	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _szSrcChar1$[ebp]
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 ?FilterMultiByteChar@CSlangUtil@@IAEXPBDHPADH1@Z ; CSlangUtil::FilterMultiByteChar

; 984  : 	FilterChar( szSrcChar2, szSrcChar3, szNumFilter );

  000bc	68 00 00 00 00	 push	 OFFSET ?szNumFilter@?3??IsLimitedGuildName@CSlangUtil@@QAE_NPBD@Z@4PADA
  000c1	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _szSrcChar3$[ebp]
  000c7	50		 push	 eax
  000c8	8d 85 f0 fc ff
	ff		 lea	 eax, DWORD PTR _szSrcChar2$[ebp]
  000ce	50		 push	 eax
  000cf	8b cf		 mov	 ecx, edi
  000d1	e8 00 00 00 00	 call	 ?FilterChar@CSlangUtil@@IAEXPBDPAD1@Z ; CSlangUtil::FilterChar

; 985  : 	RePlaceException( szSrcChar3, szSrcLastFilter, MAX_PATH ); // szSrcChar3의 예외 단어를 **변경하고 | szSrcLastFilter는 필터된 글자를 복원한다.

  000d6	56		 push	 esi
  000d7	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szSrcLastFilter$[ebp]
  000dd	50		 push	 eax
  000de	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _szSrcChar3$[ebp]
  000e4	50		 push	 eax
  000e5	8b cf		 mov	 ecx, edi
  000e7	e8 00 00 00 00	 call	 ?RePlaceException@CSlangUtil@@IAE_NPAD0H@Z ; CSlangUtil::RePlaceException

; 986  : 	memset( szSrcLastFilter, 0, sizeof( szSrcLastFilter ) );   // 필터된 글자가 복원되므로 다시 초기화

  000ec	56		 push	 esi
  000ed	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szSrcLastFilter$[ebp]
  000f3	53		 push	 ebx
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 _memset
  000fa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 987  : 	StringCbCopy( szSrcLastFilter, sizeof( szSrcLastFilter ), szSrcChar3 ); // 아래에서 금칙어 검사를 하므로 **변한 값을 넘겨준다.

  000fd	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _szSrcChar3$[ebp]
  00103	50		 push	 eax
  00104	56		 push	 esi
  00105	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szSrcLastFilter$[ebp]
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ?StringCbCopyA@@YGJPADIPBD@Z ; StringCbCopyA

; 988  : 
; 989  : 	ioLocalParent *pLocal = g_LocalMgr.GetLocal( ioLocalManager::GetLocalType() );

  00111	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLocalType@ioLocalManagerParent@@SA?AW4LocalType@1@XZ
  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 ?GetSingleton@ioLocalManager@@SAAAV1@XZ ; ioLocalManager::GetSingleton
  0011d	8b c8		 mov	 ecx, eax
  0011f	e8 00 00 00 00	 call	 ?GetLocal@ioLocalManager@@QAEPAVioLocalParent@@W4LocalType@ioLocalManagerParent@@@Z ; ioLocalManager::GetLocal

; 990  : 	if( pLocal )

  00124	3b c3		 cmp	 eax, ebx
  00126	74 11		 je	 SHORT $LN12@IsLimitedG

; 991  : 		pLocal->GetChangedString( szSrcLastFilter );

  00128	8b 10		 mov	 edx, DWORD PTR [eax]
  0012a	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _szSrcLastFilter$[ebp]
  00130	51		 push	 ecx
  00131	8b c8		 mov	 ecx, eax
  00133	ff 92 8c 00 00
	00		 call	 DWORD PTR [edx+140]
$LN12@IsLimitedG:

; 992  : 
; 993  : 	const char *word, *sub, *subs, *subw;
; 994  : 	for(int i = 0;i < (int)m_vGuildNameLimit.size();i++)

  00139	8b 87 34 08 00
	00		 mov	 eax, DWORD PTR [edi+2100]
  0013f	2b 87 30 08 00
	00		 sub	 eax, DWORD PTR [edi+2096]
  00145	6a 1c		 push	 28			; 0000001cH
  00147	99		 cdq
  00148	59		 pop	 ecx
  00149	f7 f9		 idiv	 ecx
  0014b	89 9d e8 fb ff
	ff		 mov	 DWORD PTR _i$507681[ebp], ebx
  00151	85 c0		 test	 eax, eax
  00153	0f 8e 42 01 00
	00		 jle	 $LN9@IsLimitedG
  00159	89 9d d4 fb ff
	ff		 mov	 DWORD PTR tv447[ebp], ebx
$LL11@IsLimitedG:

; 995  : 	{
; 996  : 		if(m_vGuildNameLimit[i].empty())

  0015f	8b 87 30 08 00
	00		 mov	 eax, DWORD PTR [edi+2096]
  00165	03 85 d4 fb ff
	ff		 add	 eax, DWORD PTR tv447[ebp]
  0016b	39 58 10	 cmp	 DWORD PTR [eax+16], ebx
  0016e	0f 84 27 01 00
	00		 je	 $LN9@IsLimitedG

; 997  : 			break;
; 998  : 
; 999  : 		word = m_vGuildNameLimit[i].c_str();	

  00174	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00178	72 02		 jb	 SHORT $LN28@IsLimitedG
  0017a	8b 00		 mov	 eax, DWORD PTR [eax]
$LN28@IsLimitedG:
  0017c	89 85 d0 fb ff
	ff		 mov	 DWORD PTR _word$[ebp], eax

; 1000 : 		sub  = szSrcLastFilter;

  00182	8d b5 f8 fe ff
	ff		 lea	 esi, DWORD PTR _szSrcLastFilter$[ebp]

; 1001 : 		int iCnt=0;

  00188	89 9d dc fb ff
	ff		 mov	 DWORD PTR _iCnt$507687[ebp], ebx

; 1002 : 		while (*sub && *(sub + 1)) 

  0018e	38 9d f8 fe ff
	ff		 cmp	 BYTE PTR _szSrcLastFilter$[ebp], bl
  00194	0f 84 d6 00 00
	00		 je	 $LN10@IsLimitedG
$LL7@IsLimitedG:
  0019a	38 5e 01	 cmp	 BYTE PTR [esi+1], bl
  0019d	0f 84 cd 00 00
	00		 je	 $LN10@IsLimitedG

; 1003 : 		{
; 1004 : 			subs = sub;	

  001a3	8b ce		 mov	 ecx, esi

; 1005 : 			subw = word;
; 1006 : 			int iCnt2=0;

  001a5	89 9d e4 fb ff
	ff		 mov	 DWORD PTR _iCnt2$507691[ebp], ebx

; 1007 : 			while (*subs && (*subs == *subw)) 

  001ab	38 1e		 cmp	 BYTE PTR [esi], bl
  001ad	74 75		 je	 SHORT $LN40@IsLimitedG
  001af	8b 95 d0 fb ff
	ff		 mov	 edx, DWORD PTR _word$[ebp]
  001b5	8a 02		 mov	 al, BYTE PTR [edx]
  001b7	89 95 e0 fb ff
	ff		 mov	 DWORD PTR tv438[ebp], edx
  001bd	29 b5 e0 fb ff
	ff		 sub	 DWORD PTR tv438[ebp], esi
$LL5@IsLimitedG:
  001c3	38 01		 cmp	 BYTE PTR [ecx], al
  001c5	75 5d		 jne	 SHORT $LN40@IsLimitedG

; 1008 : 			{
; 1009 : 				subs++; subw++;
; 1010 : 				if (*subw == 0) 

  001c7	8b 85 e0 fb ff
	ff		 mov	 eax, DWORD PTR tv438[ebp]
  001cd	41		 inc	 ecx
  001ce	8a 04 08	 mov	 al, BYTE PTR [eax+ecx]
  001d1	89 8d cc fb ff
	ff		 mov	 DWORD PTR _subs$[ebp], ecx
  001d7	3a c3		 cmp	 al, bl
  001d9	0f 84 cf 00 00
	00		 je	 $LN33@IsLimitedG

; 1013 : 				}
; 1014 : 				if( iCnt2++ > MAX_LOOP ) // 비상STOP

  001df	8b 8d e4 fb ff
	ff		 mov	 ecx, DWORD PTR _iCnt2$507691[ebp]
  001e5	ff 85 e4 fb ff
	ff		 inc	 DWORD PTR _iCnt2$507691[ebp]
  001eb	81 f9 00 04 00
	00		 cmp	 ecx, 1024		; 00000400H
  001f1	7f 0c		 jg	 SHORT $LN34@IsLimitedG

; 1007 : 			while (*subs && (*subs == *subw)) 

  001f3	8b 8d cc fb ff
	ff		 mov	 ecx, DWORD PTR _subs$[ebp]
  001f9	38 19		 cmp	 BYTE PTR [ecx], bl
  001fb	75 c6		 jne	 SHORT $LL5@IsLimitedG

; 995  : 	{
; 996  : 		if(m_vGuildNameLimit[i].empty())

  001fd	eb 25		 jmp	 SHORT $LN40@IsLimitedG
$LN34@IsLimitedG:

; 1015 : 				{
; 1016 : 					LOG.PrintTimeAndLog(0, "%s : %d : Over Max loop : %s", __FUNCTION__, __LINE__, szGuildName );

  001ff	ff b5 d8 fb ff
	ff		 push	 DWORD PTR _szGuildName$GSCopy$[ebp]
  00205	68 f8 03 00 00	 push	 1016			; 000003f8H
  0020a	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@GOJLEGID@CSlangUtil?3?3IsLimitedGuildName?$AA@
  0020f	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GHLBKHJF@?$CFs?5?3?5?$CFd?5?3?5Over?5Max?5loop?5?3?5?$CFs?$AA@
  00214	53		 push	 ebx
  00215	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  0021b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00221	83 c4 18	 add	 esp, 24			; 00000018H
$LN40@IsLimitedG:

; 1017 : 					break;
; 1018 : 				}
; 1019 : 			}
; 1020 : 			sub += *sub < 0 ? 2 : 1;

  00224	33 c0		 xor	 eax, eax
  00226	38 1e		 cmp	 BYTE PTR [esi], bl
  00228	0f 9c c0	 setl	 al
  0022b	40		 inc	 eax
  0022c	03 f0		 add	 esi, eax

; 1021 : 			if( iCnt++ > MAX_LOOP ) // 비상STOP

  0022e	8b 85 dc fb ff
	ff		 mov	 eax, DWORD PTR _iCnt$507687[ebp]
  00234	ff 85 dc fb ff
	ff		 inc	 DWORD PTR _iCnt$507687[ebp]
  0023a	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  0023f	7f 0a		 jg	 SHORT $LN35@IsLimitedG

; 1002 : 		while (*sub && *(sub + 1)) 

  00241	38 1e		 cmp	 BYTE PTR [esi], bl
  00243	0f 85 51 ff ff
	ff		 jne	 $LL7@IsLimitedG

; 995  : 	{
; 996  : 		if(m_vGuildNameLimit[i].empty())

  00249	eb 25		 jmp	 SHORT $LN10@IsLimitedG
$LN35@IsLimitedG:

; 1022 : 			{
; 1023 : 				LOG.PrintTimeAndLog(0, "%s : %d : Over Max loop : %s", __FUNCTION__, __LINE__, szGuildName );

  0024b	ff b5 d8 fb ff
	ff		 push	 DWORD PTR _szGuildName$GSCopy$[ebp]
  00251	68 ff 03 00 00	 push	 1023			; 000003ffH
  00256	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@GOJLEGID@CSlangUtil?3?3IsLimitedGuildName?$AA@
  0025b	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GHLBKHJF@?$CFs?5?3?5?$CFd?5?3?5Over?5Max?5loop?5?3?5?$CFs?$AA@
  00260	53		 push	 ebx
  00261	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  00267	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  0026d	83 c4 18	 add	 esp, 24			; 00000018H
$LN10@IsLimitedG:

; 992  : 
; 993  : 	const char *word, *sub, *subs, *subw;
; 994  : 	for(int i = 0;i < (int)m_vGuildNameLimit.size();i++)

  00270	8b 87 34 08 00
	00		 mov	 eax, DWORD PTR [edi+2100]
  00276	2b 87 30 08 00
	00		 sub	 eax, DWORD PTR [edi+2096]
  0027c	6a 1c		 push	 28			; 0000001cH
  0027e	99		 cdq
  0027f	59		 pop	 ecx
  00280	f7 f9		 idiv	 ecx
  00282	ff 85 e8 fb ff
	ff		 inc	 DWORD PTR _i$507681[ebp]
  00288	83 85 d4 fb ff
	ff 1c		 add	 DWORD PTR tv447[ebp], 28 ; 0000001cH
  0028f	39 85 e8 fb ff
	ff		 cmp	 DWORD PTR _i$507681[ebp], eax
  00295	0f 8c c4 fe ff
	ff		 jl	 $LL11@IsLimitedG
$LN9@IsLimitedG:

; 1024 : 				break;
; 1025 : 			}
; 1026 : 		}
; 1027 : 	}
; 1028 : 	return false;

  0029b	32 c0		 xor	 al, al
$LN43@IsLimitedG:
  0029d	5e		 pop	 esi
$LN14@IsLimitedG:

; 1029 : }

  0029e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a1	5f		 pop	 edi
  002a2	33 cd		 xor	 ecx, ebp
  002a4	5b		 pop	 ebx
  002a5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002aa	c9		 leave
  002ab	c2 04 00	 ret	 4
$LN33@IsLimitedG:

; 1011 : 				{
; 1012 : 					return true;

  002ae	b0 01		 mov	 al, 1
  002b0	eb eb		 jmp	 SHORT $LN43@IsLimitedG
?IsLimitedGuildName@CSlangUtil@@QAE_NPBD@Z ENDP		; CSlangUtil::IsLimitedGuildName
_TEXT	ENDS
PUBLIC	?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear, COMDAT
; _this$ = ecx

; 1140 : 		_Eos(0);

  00000	83 61 10 00	 and	 DWORD PTR [ecx+16], 0
  00004	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00008	72 02		 jb	 SHORT $LN7@clear
  0000a	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN7@clear:
  0000c	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 1141 : 		}

  0000f	c3		 ret	 0
?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear
_TEXT	ENDS
PUBLIC	??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Make_iter
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator!=
_TEXT	ENDS
PUBLIC	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 1351 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1352 : 		return (_STRING_ITERATOR(_Myptr()));

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	72 02		 jb	 SHORT $LN5@begin
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN5@begin:
  0000b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 1353 : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1988 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1989 : 		if (!_Built)

  00003	80 7d 08 00	 cmp	 BYTE PTR __Built$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 20		 je	 SHORT $LN9@Tidy

; 1990 : 			;
; 1991 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00010	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00014	72 1a		 jb	 SHORT $LN9@Tidy

; 1992 : 			{	// copy any leftovers to small buffer and deallocate
; 1993 : 			_Elem *_Ptr = this->_Bx._Ptr;

  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 1994 : 			if (0 < _Newsize)

  00019	85 ff		 test	 edi, edi
  0001b	74 0b		 je	 SHORT $LN7@Tidy

; 1995 : 				_Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);

  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _memcpy
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@Tidy:

; 1996 : 			this->_Alval.deallocate(_Ptr, this->_Myres + 1);

  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	59		 pop	 ecx
  0002f	5b		 pop	 ebx
$LN9@Tidy:

; 1997 : 			}
; 1998 : 		this->_Myres = this->_BUF_SIZE - 1;
; 1999 : 		_Eos(_Newsize);

  00030	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00033	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0003a	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi

; 2000 : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1109 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1110 : 		if (this->_Mysize < _Off)

  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0000d	3b c1		 cmp	 eax, ecx
  0000f	73 0b		 jae	 SHORT $LN3@erase

; 1111 : 			_Xran();	// _Off off end

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN28@erase:
$LN3@erase:

; 1112 : 		if (this->_Mysize - _Off < _Count)

  0001c	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0001f	2b c1		 sub	 eax, ecx
  00021	3b c3		 cmp	 eax, ebx

; 1113 : 			_Count = this->_Mysize - _Off;	// trim _Count

  00023	0f 42 d8	 cmovb	 ebx, eax

; 1114 : 		if (0 < _Count)

  00026	85 db		 test	 ebx, ebx
  00028	74 47		 je	 SHORT $LN25@erase

; 1115 : 			{	// move elements down
; 1116 : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 1117 : 				this->_Mysize - _Off - _Count);

  0002a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0002d	57		 push	 edi
  0002e	83 fa 10	 cmp	 edx, 16			; 00000010H
  00031	72 04		 jb	 SHORT $LN11@erase
  00033	8b 3e		 mov	 edi, DWORD PTR [esi]
  00035	eb 02		 jmp	 SHORT $LN12@erase
$LN11@erase:
  00037	8b fe		 mov	 edi, esi
$LN12@erase:
  00039	83 fa 10	 cmp	 edx, 16			; 00000010H
  0003c	72 04		 jb	 SHORT $LN15@erase
  0003e	8b 16		 mov	 edx, DWORD PTR [esi]
  00040	eb 02		 jmp	 SHORT $LN16@erase
$LN15@erase:
  00042	8b d6		 mov	 edx, esi
$LN16@erase:
  00044	2b c3		 sub	 eax, ebx
  00046	03 f9		 add	 edi, ecx
  00048	50		 push	 eax
  00049	03 fb		 add	 edi, ebx
  0004b	03 d1		 add	 edx, ecx
  0004d	57		 push	 edi
  0004e	52		 push	 edx
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove

; 1118 : 			size_type _Newsize = this->_Mysize - _Count;

  00055	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005b	2b c3		 sub	 eax, ebx

; 1119 : 			_Eos(_Newsize);

  0005d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00061	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00064	5f		 pop	 edi
  00065	72 04		 jb	 SHORT $LN23@erase
  00067	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00069	eb 02		 jmp	 SHORT $LN24@erase
$LN23@erase:
  0006b	8b ce		 mov	 ecx, esi
$LN24@erase:
  0006d	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
$LN25@erase:

; 1120 : 			}
; 1121 : 		return (*this);

  00071	8b c6		 mov	 eax, esi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx

; 1122 : 		}

  00075	5d		 pop	 ebp
  00076	c2 08 00	 ret	 8
$LN27@erase:
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Pdif
; Function compile flags: /Ogsp
;	COMDAT ?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
__P2$ = 8						; size = 4
__P1$ = 12						; size = 4
?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Pdif, COMDAT

; 1982 : 		{	// compute safe iterator difference

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1983 : 		return (_STRING_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);

  00003	8b 45 08	 mov	 eax, DWORD PTR __P2$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 02		 jne	 SHORT $LN3@Pdif

; 1984 : 		}

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
$LN3@Pdif:

; 1983 : 		return (_STRING_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);

  0000c	2b 45 0c	 sub	 eax, DWORD PTR __P1$[ebp]

; 1984 : 		}

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Pdif
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
tv296 = -20						; size = 4
__Newres$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1919 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi

; 1920 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  00014	83 cf 0f	 or	 edi, 15			; 0000000fH

; 1921 : 		if (max_size() < _Newres)

  00017	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0001a	76 05		 jbe	 SHORT $LN9@Copy

; 1922 : 			_Newres = _Newsize;	// undo roundup if too big

  0001c	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0001f	eb 27		 jmp	 SHORT $LN5@Copy
$LN9@Copy:

; 1923 : 		else if (this->_Myres / 2 <= _Newres / 3)

  00021	33 d2		 xor	 edx, edx
  00023	6a 03		 push	 3
  00025	8b c7		 mov	 eax, edi
  00027	5b		 pop	 ebx
  00028	f7 f3		 div	 ebx
  0002a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0002d	89 4d ec	 mov	 DWORD PTR tv296[ebp], ecx
  00030	d1 6d ec	 shr	 DWORD PTR tv296[ebp], 1
  00033	8b 55 ec	 mov	 edx, DWORD PTR tv296[ebp]
  00036	3b d0		 cmp	 edx, eax
  00038	76 0e		 jbe	 SHORT $LN5@Copy

; 1924 : 			;
; 1925 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

  0003a	6a fe		 push	 -2			; fffffffeH
  0003c	5f		 pop	 edi
  0003d	8b c7		 mov	 eax, edi
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	77 03		 ja	 SHORT $LN5@Copy

; 1926 : 			_Newres = this->_Myres
; 1927 : 				+ this->_Myres / 2;	// grow exponentially if possible

  00045	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]
$LN5@Copy:

; 1928 : 		else
; 1929 : 			_Newres = max_size();	// settle for max_size()
; 1930 : 
; 1931 : 		_Elem *_Ptr;
; 1932 : 		_TRY_BEGIN

  00048	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0

; 1933 : 			_Ptr = this->_Alval.allocate(_Newres + 1);

  0004c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0004f	6a 00		 push	 0
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00057	59		 pop	 ecx
  00058	59		 pop	 ecx
  00059	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0005c	eb 27		 jmp	 SHORT $LN19@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 1934 : 		_CATCH_ALL
; 1935 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0005e	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00061	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00064	89 45 ec	 mov	 DWORD PTR __Newres$[ebp], eax

; 1936 : 			_TRY_BEGIN
; 1937 : 				_Ptr = this->_Alval.allocate(_Newres + 1);

  00067	40		 inc	 eax
  00068	6a 00		 push	 0
  0006a	50		 push	 eax
  0006b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0006f	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00074	59		 pop	 ecx
  00075	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00078	59		 pop	 ecx

; 1941 : 			_CATCH_END
; 1942 : 		_CATCH_END

  00079	b8 00 00 00 00	 mov	 eax, $LN63@Copy
  0007e	c3		 ret	 0
$LN63@Copy:
  0007f	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
  00082	8b 7d ec	 mov	 edi, DWORD PTR __Newres$[ebp]
$LN19@Copy:

; 1943 : 
; 1944 : 		if (0 < _Oldlen)

  00085	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  00088	85 db		 test	 ebx, ebx
  0008a	74 19		 je	 SHORT $LN52@Copy

; 1945 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  0008c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00090	72 04		 jb	 SHORT $LN50@Copy
  00092	8b 06		 mov	 eax, DWORD PTR [esi]
  00094	eb 02		 jmp	 SHORT $LN51@Copy
$LN50@Copy:
  00096	8b c6		 mov	 eax, esi
$LN51@Copy:
  00098	53		 push	 ebx
  00099	50		 push	 eax
  0009a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0009d	e8 00 00 00 00	 call	 _memcpy
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN52@Copy:

; 1946 : 		_Tidy(true);

  000a5	6a 00		 push	 0
  000a7	6a 01		 push	 1
  000a9	8b ce		 mov	 ecx, esi
  000ab	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1947 : 		this->_Bx._Ptr = _Ptr;

  000b0	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000b3	89 06		 mov	 DWORD PTR [esi], eax

; 1948 : 		this->_Myres = _Newres;
; 1949 : 		_Eos(_Oldlen);

  000b5	83 ff 10	 cmp	 edi, 16			; 00000010H
  000b8	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000bb	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000be	0f 42 c6	 cmovb	 eax, esi
  000c1	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 1950 : 		}

  000c5	e8 00 00 00 00	 call	 __EH_epilog3
  000ca	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 1938 : 			_CATCH_ALL
; 1939 : 			_Tidy(true);	// failed again, discard storage and reraise

  000cd	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	33 f6		 xor	 esi, esi
  000d2	56		 push	 esi
  000d3	6a 01		 push	 1
  000d5	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1940 : 			_RERAISE;

  000da	56		 push	 esi
  000db	56		 push	 esi
  000dc	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN67@Copy:
$LN66@Copy:
  000e1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 550  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 551  : 		_Tidy();

  00002	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  00006	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
  0000d	c6 00 00	 mov	 BYTE PTR [eax], 0

; 552  : 		}

  00010	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 754  : 		_Tidy(true);

  00000	6a 00		 push	 0
  00002	6a 01		 push	 1
  00004	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 755  : 		}

  00009	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
; Function compile flags: /Ogsp
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1959 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1960 : 		if (max_size() < _Newsize)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00007	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0000a	76 0b		 jbe	 SHORT $LN6@Grow

; 1961 : 			_Xlen();	// result too long

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN31@Grow:
$LN6@Grow:

; 1962 : 		if (this->_Myres < _Newsize)

  00017	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0001a	3b c6		 cmp	 eax, esi
  0001c	73 0b		 jae	 SHORT $LN5@Grow

; 1963 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  0001e	ff 71 10	 push	 DWORD PTR [ecx+16]
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00027	eb 2e		 jmp	 SHORT $LN28@Grow
$LN5@Grow:

; 1964 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00029	33 d2		 xor	 edx, edx
  0002b	38 55 0c	 cmp	 BYTE PTR __Trim$[ebp], dl
  0002e	74 17		 je	 SHORT $LN3@Grow
  00030	83 fe 10	 cmp	 esi, 16			; 00000010H
  00033	73 12		 jae	 SHORT $LN3@Grow

; 1965 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1966 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

  00035	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00038	3b f0		 cmp	 esi, eax
  0003a	0f 42 c6	 cmovb	 eax, esi
  0003d	50		 push	 eax
  0003e	6a 01		 push	 1
  00040	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00045	eb 10		 jmp	 SHORT $LN28@Grow
$LN3@Grow:

; 1967 : 		else if (_Newsize == 0)

  00047	3b f2		 cmp	 esi, edx
  00049	75 0c		 jne	 SHORT $LN28@Grow

; 1968 : 			_Eos(0);	// new size is zero, just null terminate

  0004b	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0004e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00051	72 02		 jb	 SHORT $LN26@Grow
  00053	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN26@Grow:
  00055	88 11		 mov	 BYTE PTR [ecx], dl
$LN28@Grow:

; 1969 : 		return (0 < _Newsize);	// return true only if more work to do

  00057	33 c0		 xor	 eax, eax
  00059	3b c6		 cmp	 eax, esi
  0005b	1b c0		 sbb	 eax, eax
  0005d	f7 d8		 neg	 eax
  0005f	5e		 pop	 esi

; 1970 : 		}

  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
$LN30@Grow:
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogsp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 799  : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 800  : 		if (_Right.size() < _Roff)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	3b 45 0c	 cmp	 eax, DWORD PTR __Roff$[ebp]
  00010	73 0b		 jae	 SHORT $LN4@append

; 801  : 			_Xran();	// _Roff off end

  00012	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN36@append:
$LN4@append:

; 802  : 		size_type _Num = _Right.size() - _Roff;

  0001d	2b 45 0c	 sub	 eax, DWORD PTR __Roff$[ebp]

; 803  : 		if (_Num < _Count)

  00020	8b 5d 10	 mov	 ebx, DWORD PTR __Count$[ebp]
  00023	3b c3		 cmp	 eax, ebx

; 804  : 			_Count = _Num;	// trim _Count to size

  00025	0f 42 d8	 cmovb	 ebx, eax

; 805  : 		if (npos - this->_Mysize <= _Count)

  00028	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002b	83 c9 ff	 or	 ecx, -1
  0002e	2b c8		 sub	 ecx, eax
  00030	3b cb		 cmp	 ecx, ebx
  00032	77 0b		 ja	 SHORT $LN2@append

; 806  : 			_Xlen();	// result too long

  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN37@append:
$LN2@append:

; 807  : 
; 808  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  0003f	85 db		 test	 ebx, ebx
  00041	74 50		 je	 SHORT $LN32@append
  00043	57		 push	 edi
  00044	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  00047	6a 00		 push	 0
  00049	57		 push	 edi
  0004a	8b ce		 mov	 ecx, esi
  0004c	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00051	84 c0		 test	 al, al
  00053	74 3d		 je	 SHORT $LN34@append

; 809  : 			{	// make room and append new stuff
; 810  : 			_Traits::copy(_Myptr() + this->_Mysize,
; 811  : 				_Right._Myptr() + _Roff, _Count);

  00055	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00058	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0005c	72 02		 jb	 SHORT $LN18@append
  0005e	8b 00		 mov	 eax, DWORD PTR [eax]
$LN18@append:
  00060	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00064	72 04		 jb	 SHORT $LN22@append
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	eb 02		 jmp	 SHORT $LN23@append
$LN22@append:
  0006a	8b ce		 mov	 ecx, esi
$LN23@append:
  0006c	03 45 0c	 add	 eax, DWORD PTR __Roff$[ebp]
  0006f	53		 push	 ebx
  00070	50		 push	 eax
  00071	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00074	03 c1		 add	 eax, ecx
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 _memcpy
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 812  : 			_Eos(_Num);

  0007f	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00083	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00086	72 04		 jb	 SHORT $LN30@append
  00088	8b 06		 mov	 eax, DWORD PTR [esi]
  0008a	eb 02		 jmp	 SHORT $LN31@append
$LN30@append:
  0008c	8b c6		 mov	 eax, esi
$LN31@append:
  0008e	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN34@append:
  00092	5f		 pop	 edi
$LN32@append:

; 813  : 			}
; 814  : 		return (*this);

  00093	8b c6		 mov	 eax, esi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx

; 815  : 		}

  00097	5d		 pop	 ebp
  00098	c2 0c 00	 ret	 12			; 0000000cH
$LN35@append:
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	6a 00		 push	 0
  00006	6a 01		 push	 1
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0000f	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00013	74 07		 je	 SHORT $LN1@scalar@2
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	59		 pop	 ecx
$LN1@scalar@2:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogsp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 845  : 		{	// append _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 846  : 		if (npos - this->_Mysize <= _Count)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000d	83 c9 ff	 or	 ecx, -1
  00010	2b c8		 sub	 ecx, eax
  00012	3b cb		 cmp	 ecx, ebx
  00014	77 0b		 ja	 SHORT $LN2@append@2

; 847  : 			_Xlen();	// result too long

  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN18@append@2:
$LN2@append@2:

; 848  : 
; 849  : 		size_type _Num;
; 850  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  00021	85 db		 test	 ebx, ebx
  00023	74 34		 je	 SHORT $LN14@append@2
  00025	57		 push	 edi
  00026	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  00029	6a 00		 push	 0
  0002b	57		 push	 edi
  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00033	84 c0		 test	 al, al
  00035	74 21		 je	 SHORT $LN16@append@2

; 851  : 			{	// make room and append new stuff using assign
; 852  : 			_Chassign(this->_Mysize, _Count, _Ch);

  00037	ff 75 0c	 push	 DWORD PTR __Ch$[ebp]
  0003a	8b ce		 mov	 ecx, esi
  0003c	53		 push	 ebx
  0003d	ff 76 10	 push	 DWORD PTR [esi+16]
  00040	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 853  : 			_Eos(_Num);

  00045	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00049	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  0004c	72 04		 jb	 SHORT $LN12@append@2
  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
  00050	eb 02		 jmp	 SHORT $LN13@append@2
$LN12@append@2:
  00052	8b c6		 mov	 eax, esi
$LN13@append@2:
  00054	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN16@append@2:
  00058	5f		 pop	 edi
$LN14@append@2:

; 854  : 			}
; 855  : 		return (*this);

  00059	8b c6		 mov	 eax, esi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx

; 856  : 		}

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
$LN17@append@2:
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
; Function compile flags: /Ogsp
;	COMDAT ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newcap$ = 8						; size = 4
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve, COMDAT
; _this$ = ecx

; 1540 : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1541 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Newcap$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi
  0000a	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0000d	3b f8		 cmp	 edi, eax
  0000f	77 20		 ja	 SHORT $LN11@reserve
  00011	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  00014	74 1b		 je	 SHORT $LN11@reserve

; 1542 : 			{	// change reservation
; 1543 : 			size_type _Size = this->_Mysize;
; 1544 : 			if (_Grow(_Newcap, true))

  00016	6a 01		 push	 1
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0001e	84 c0		 test	 al, al
  00020	74 0f		 je	 SHORT $LN11@reserve

; 1545 : 				_Eos(_Size);

  00022	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00026	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00029	72 02		 jb	 SHORT $LN9@reserve
  0002b	8b 36		 mov	 esi, DWORD PTR [esi]
$LN9@reserve:
  0002d	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0
$LN11@reserve:
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi

; 1546 : 			}
; 1547 : 		}

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogsp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 793  : 		{	// append _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 794  : 		return (append(_Right, 0, npos));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 795  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogsp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 818  : 		{	// append [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 819  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 820  : 		if (_Count != 0)
; 821  : 			_DEBUG_POINTER(_Ptr);
; 822  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 823  : 
; 824  : 		if (_Inside(_Ptr))

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
  00010	84 c0		 test	 al, al
  00012	74 1c		 je	 SHORT $LN3@append@3

; 825  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

  00014	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00018	72 04		 jb	 SHORT $LN8@append@3
  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	eb 02		 jmp	 SHORT $LN9@append@3
$LN8@append@3:
  0001e	8b c6		 mov	 eax, esi
$LN9@append@3:
  00020	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00023	2b f8		 sub	 edi, eax
  00025	57		 push	 edi
  00026	56		 push	 esi
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0002e	eb 64		 jmp	 SHORT $LN4@append@3
$LN3@append@3:

; 826  : 		if (npos - this->_Mysize <= _Count)

  00030	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00033	83 c9 ff	 or	 ecx, -1
  00036	53		 push	 ebx
  00037	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0003a	2b c8		 sub	 ecx, eax
  0003c	3b cb		 cmp	 ecx, ebx
  0003e	77 0b		 ja	 SHORT $LN2@append@3

; 827  : 			_Xlen();	// result too long

  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN28@append@3:
$LN2@append@3:

; 828  : 
; 829  : 		size_type _Num;
; 830  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  0004b	85 db		 test	 ebx, ebx
  0004d	74 42		 je	 SHORT $LN25@append@3
  0004f	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  00052	6a 00		 push	 0
  00054	57		 push	 edi
  00055	8b ce		 mov	 ecx, esi
  00057	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0005c	84 c0		 test	 al, al
  0005e	74 31		 je	 SHORT $LN25@append@3

; 831  : 			{	// make room and append new stuff
; 832  : 			_Traits::copy(_Myptr() + this->_Mysize, _Ptr, _Count);

  00060	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00064	72 04		 jb	 SHORT $LN15@append@3
  00066	8b 06		 mov	 eax, DWORD PTR [esi]
  00068	eb 02		 jmp	 SHORT $LN16@append@3
$LN15@append@3:
  0006a	8b c6		 mov	 eax, esi
$LN16@append@3:
  0006c	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0006f	53		 push	 ebx
  00070	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00073	03 c8		 add	 ecx, eax
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 _memcpy
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 833  : 			_Eos(_Num);

  0007e	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00082	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00085	72 04		 jb	 SHORT $LN23@append@3
  00087	8b 06		 mov	 eax, DWORD PTR [esi]
  00089	eb 02		 jmp	 SHORT $LN24@append@3
$LN23@append@3:
  0008b	8b c6		 mov	 eax, esi
$LN24@append@3:
  0008d	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN25@append@3:

; 834  : 			}
; 835  : 		return (*this);

  00091	8b c6		 mov	 eax, esi
  00093	5b		 pop	 ebx
$LN4@append@3:
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi

; 836  : 		}

  00096	5d		 pop	 ebp
  00097	c2 08 00	 ret	 8
$LN27@append@3:
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 893  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 894  : 		if (_Right.size() < _Roff)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  00010	57		 push	 edi
  00011	3b c1		 cmp	 eax, ecx
  00013	73 0b		 jae	 SHORT $LN5@assign

; 895  : 			_Xran();	// _Roff off end

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN34@assign:
$LN5@assign:

; 896  : 		size_type _Num = _Right.size() - _Roff;

  00020	2b c1		 sub	 eax, ecx
  00022	8b f8		 mov	 edi, eax

; 897  : 		if (_Count < _Num)

  00024	39 7d 10	 cmp	 DWORD PTR __Count$[ebp], edi

; 898  : 			_Num = _Count;	// trim _Num to size

  00027	0f 42 7d 10	 cmovb	 edi, DWORD PTR __Count$[ebp]

; 899  : 
; 900  : 		if (this == &_Right)

  0002b	3b f3		 cmp	 esi, ebx
  0002d	75 1a		 jne	 SHORT $LN3@assign

; 901  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002f	03 f9		 add	 edi, ecx
  00031	6a ff		 push	 -1
  00033	57		 push	 edi
  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0003b	ff 75 0c	 push	 DWORD PTR __Roff$[ebp]
  0003e	8b ce		 mov	 ecx, esi
  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00047	eb 47		 jmp	 SHORT $LN31@assign
$LN3@assign:

; 902  : 		else if (_Grow(_Num))

  00049	6a 00		 push	 0
  0004b	57		 push	 edi
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00053	84 c0		 test	 al, al
  00055	74 39		 je	 SHORT $LN31@assign

; 903  : 			{	// make room and assign new stuff
; 904  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  00057	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  0005b	72 04		 jb	 SHORT $LN17@assign
  0005d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0005f	eb 02		 jmp	 SHORT $LN18@assign
$LN17@assign:
  00061	8b c3		 mov	 eax, ebx
$LN18@assign:
  00063	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00067	72 04		 jb	 SHORT $LN21@assign
  00069	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0006b	eb 02		 jmp	 SHORT $LN22@assign
$LN21@assign:
  0006d	8b ce		 mov	 ecx, esi
$LN22@assign:
  0006f	03 45 0c	 add	 eax, DWORD PTR __Roff$[ebp]
  00072	57		 push	 edi
  00073	50		 push	 eax
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _memcpy
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 905  : 			_Eos(_Num);

  0007d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00081	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00084	72 04		 jb	 SHORT $LN29@assign
  00086	8b 06		 mov	 eax, DWORD PTR [esi]
  00088	eb 02		 jmp	 SHORT $LN30@assign
$LN29@assign:
  0008a	8b c6		 mov	 eax, esi
$LN30@assign:
  0008c	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN31@assign:

; 906  : 			}
; 907  : 		return (*this);

  00090	5f		 pop	 edi
  00091	8b c6		 mov	 eax, esi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx

; 908  : 		}

  00095	5d		 pop	 ebp
  00096	c2 0c 00	 ret	 12			; 0000000cH
$LN33@assign:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 911  : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 912  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 913  : 		if (_Count != 0)
; 914  : 			_DEBUG_POINTER(_Ptr);
; 915  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 916  : 
; 917  : 		if (_Inside(_Ptr))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  00007	56		 push	 esi
  00008	53		 push	 ebx
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
  00010	84 c0		 test	 al, al
  00012	74 1c		 je	 SHORT $LN2@assign@2

; 918  : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00014	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00018	72 04		 jb	 SHORT $LN7@assign@2
  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	eb 02		 jmp	 SHORT $LN8@assign@2
$LN7@assign@2:
  0001e	8b c6		 mov	 eax, esi
$LN8@assign@2:
  00020	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00023	2b d8		 sub	 ebx, eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0002e	eb 3f		 jmp	 SHORT $LN3@assign@2
$LN2@assign@2:
  00030	57		 push	 edi

; 919  : 
; 920  : 		if (_Grow(_Count))

  00031	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00034	6a 00		 push	 0
  00036	57		 push	 edi
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0003e	84 c0		 test	 al, al
  00040	74 2a		 je	 SHORT $LN21@assign@2

; 921  : 			{	// make room and assign new stuff
; 922  : 			_Traits::copy(_Myptr(), _Ptr, _Count);

  00042	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00046	72 04		 jb	 SHORT $LN11@assign@2
  00048	8b 06		 mov	 eax, DWORD PTR [esi]
  0004a	eb 02		 jmp	 SHORT $LN12@assign@2
$LN11@assign@2:
  0004c	8b c6		 mov	 eax, esi
$LN12@assign@2:
  0004e	57		 push	 edi
  0004f	53		 push	 ebx
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _memcpy
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 923  : 			_Eos(_Count);

  00059	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0005d	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00060	72 04		 jb	 SHORT $LN19@assign@2
  00062	8b 06		 mov	 eax, DWORD PTR [esi]
  00064	eb 02		 jmp	 SHORT $LN20@assign@2
$LN19@assign@2:
  00066	8b c6		 mov	 eax, esi
$LN20@assign@2:
  00068	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN21@assign@2:

; 924  : 			}
; 925  : 		return (*this);

  0006c	8b c6		 mov	 eax, esi
  0006e	5f		 pop	 edi
$LN3@assign@2:
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx

; 926  : 		}

  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogsp
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1041 : 		{	// insert _Count * _Ch at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1042 : 		if (this->_Mysize < _Off)

  00007	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR __Off$[ebp]
  0000e	3b df		 cmp	 ebx, edi
  00010	73 0b		 jae	 SHORT $LN3@insert

; 1043 : 			_Xran();	// _Off off end

  00012	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN30@insert:
$LN3@insert:

; 1044 : 		if (npos - this->_Mysize <= _Count)

  0001d	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00020	83 c9 ff	 or	 ecx, -1
  00023	2b cb		 sub	 ecx, ebx
  00025	3b c8		 cmp	 ecx, eax
  00027	77 0b		 ja	 SHORT $LN2@insert

; 1045 : 			_Xlen();	// result too long

  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN31@insert:
$LN2@insert:

; 1046 : 		size_type _Num;
; 1047 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  00034	85 c0		 test	 eax, eax
  00036	74 62		 je	 SHORT $LN27@insert
  00038	03 d8		 add	 ebx, eax
  0003a	6a 00		 push	 0
  0003c	53		 push	 ebx
  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00044	84 c0		 test	 al, al
  00046	74 52		 je	 SHORT $LN27@insert

; 1048 : 			{	// make room and insert new stuff
; 1049 : 			_Traits::move(_Myptr() + _Off + _Count,
; 1050 : 				_Myptr() + _Off, this->_Mysize - _Off);	// empty out hole

  00048	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0004b	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004e	72 04		 jb	 SHORT $LN13@insert
  00050	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00052	eb 02		 jmp	 SHORT $LN14@insert
$LN13@insert:
  00054	8b ce		 mov	 ecx, esi
$LN14@insert:
  00056	83 f8 10	 cmp	 eax, 16			; 00000010H
  00059	72 04		 jb	 SHORT $LN17@insert
  0005b	8b 06		 mov	 eax, DWORD PTR [esi]
  0005d	eb 02		 jmp	 SHORT $LN18@insert
$LN17@insert:
  0005f	8b c6		 mov	 eax, esi
$LN18@insert:
  00061	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00064	2b d7		 sub	 edx, edi
  00066	52		 push	 edx
  00067	03 c7		 add	 eax, edi
  00069	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  0006c	03 cf		 add	 ecx, edi
  0006e	51		 push	 ecx
  0006f	50		 push	 eax
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1051 : 			_Chassign(_Off, _Count, _Ch);	// fill hole

  00079	ff 75 10	 push	 DWORD PTR __Ch$[ebp]
  0007c	8b ce		 mov	 ecx, esi
  0007e	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00081	57		 push	 edi
  00082	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1052 : 			_Eos(_Num);

  00087	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0008b	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  0008e	72 04		 jb	 SHORT $LN25@insert
  00090	8b 06		 mov	 eax, DWORD PTR [esi]
  00092	eb 02		 jmp	 SHORT $LN26@insert
$LN25@insert:
  00094	8b c6		 mov	 eax, esi
$LN26@insert:
  00096	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0
$LN27@insert:

; 1053 : 			}
; 1054 : 		return (*this);

  0009a	5f		 pop	 edi
  0009b	8b c6		 mov	 eax, esi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx

; 1055 : 		}

  0009f	5d		 pop	 ebp
  000a0	c2 0c 00	 ret	 12			; 0000000cH
$LN29@insert:
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogsp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 839  : 		{	// append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 840  : 		_DEBUG_POINTER(_Ptr);
; 841  : 		return (append(_Ptr, _Traits::length(_Ptr)));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00009	53		 push	 ebx
$LL5@append@4:
  0000a	8a 18		 mov	 bl, BYTE PTR [eax]
  0000c	40		 inc	 eax
  0000d	84 db		 test	 bl, bl
  0000f	75 f9		 jne	 SHORT $LL5@append@4
  00011	2b c2		 sub	 eax, edx
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00017	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0001c	5b		 pop	 ebx

; 842  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	??$_Destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::_Destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::_Destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	6a 00		 push	 0
  00008	6a 01		 push	 1
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 64   : 	}

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??$_Destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::_Destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 778  : 		{	// append _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 779  : 		return (append(_Right));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 780  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogsp
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 788  : 		{	// append 1 * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 789  : 		return (append((size_type)1, _Ch));

  00003	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  00006	6a 01		 push	 1
  00008	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 790  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 887  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 888  : 		return (assign(_Right, 0, npos));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 889  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 929  : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 930  : 		_DEBUG_POINTER(_Ptr);
; 931  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00009	53		 push	 ebx
$LL5@assign@3:
  0000a	8a 18		 mov	 bl, BYTE PTR [eax]
  0000c	40		 inc	 eax
  0000d	84 db		 test	 bl, bl
  0000f	75 f9		 jne	 SHORT $LL5@assign@3
  00011	2b c2		 sub	 eax, edx
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00017	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0001c	5b		 pop	 ebx

; 932  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogsp
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@D@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Ch$ = 16						; size = 1
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1063 : 		{	// insert _Ch at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1064 : 		size_type _Off = _Pdif(_Where, begin());

  00006	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0000a	57		 push	 edi
  0000b	72 02		 jb	 SHORT $LN8@insert@2
  0000d	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN8@insert@2:
  0000f	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00012	85 c0		 test	 eax, eax
  00014	75 04		 jne	 SHORT $LN17@insert@2
  00016	33 ff		 xor	 edi, edi
  00018	eb 04		 jmp	 SHORT $LN18@insert@2
$LN17@insert@2:
  0001a	2b c1		 sub	 eax, ecx
  0001c	8b f8		 mov	 edi, eax
$LN18@insert@2:

; 1065 : 		insert(_Off, 1, _Ch);

  0001e	ff 75 10	 push	 DWORD PTR __Ch$[ebp]
  00021	8b ce		 mov	 ecx, esi
  00023	6a 01		 push	 1
  00025	57		 push	 edi
  00026	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1066 : 		return (begin() + _Off);

  0002b	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0002f	72 02		 jb	 SHORT $LN27@insert@2
  00031	8b 36		 mov	 esi, DWORD PTR [esi]
$LN27@insert@2:
  00033	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00036	03 f7		 add	 esi, edi
  00038	5f		 pop	 edi
  00039	89 30		 mov	 DWORD PTR [eax], esi
  0003b	5e		 pop	 esi

; 1067 : 		}

  0003c	5d		 pop	 ebp
  0003d	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogsp
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 783  : 		{	// append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 785  : 		}

  00003	5d		 pop	 ebp

; 784  : 		return (append(_Ptr));

  00004	e9 00 00 00 00	 jmp	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	6a 00		 push	 0
  00008	6a 01		 push	 1
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 214  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?destroy@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::destroy
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 592  : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 593  : 		_Tidy();
; 594  : 		assign(_Ptr);

  00004	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c6 06 00	 mov	 BYTE PTR [esi], 0
  00017	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 595  : 		}

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 763  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 764  : 		return (assign(_Right));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 765  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 768  : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 770  : 		}

  00003	5d		 pop	 ebp

; 769  : 		return (assign(_Ptr));

  00004	e9 00 00 00 00	 jmp	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 713  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 714  : 		if (this == &_Right)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	3b fe		 cmp	 edi, esi
  0000c	74 3c		 je	 SHORT $LN3@assign@4

; 715  : 			;
; 716  : 		else if (get_allocator() != _Right.get_allocator()
; 717  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 718  : 			*this = _Right;
; 719  : 		else
; 720  : 			{	// not same, clear this and steal from _Right
; 721  : 			_Tidy(true);

  0000e	6a 00		 push	 0
  00010	6a 01		 push	 1
  00012	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 722  : 			if (_Right._Myres < this->_BUF_SIZE)

  00017	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0001b	73 12		 jae	 SHORT $LN2@assign@4

; 723  : 				_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 724  : 					_Right._Mysize + 1);

  0001d	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00020	40		 inc	 eax
  00021	50		 push	 eax
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 725  : 			else

  0002d	eb 07		 jmp	 SHORT $LN1@assign@4
$LN2@assign@4:

; 726  : 				{	// copy pointer
; 727  : 				this->_Bx._Ptr = _Right._Bx._Ptr;

  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	89 07		 mov	 DWORD PTR [edi], eax

; 728  : 				_Right._Bx._Ptr = 0;

  00033	83 26 00	 and	 DWORD PTR [esi], 0
$LN1@assign@4:

; 729  : 				}
; 730  : 			this->_Mysize = _Right._Mysize;

  00036	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00039	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 731  : 			this->_Myres = _Right._Myres;

  0003c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0003f	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 732  : 
; 733  : 			_Right._Mysize = 0;

  00042	83 66 10 00	 and	 DWORD PTR [esi+16], 0

; 734  : 			_Right._Myres = 0;

  00046	83 66 14 00	 and	 DWORD PTR [esi+20], 0
$LN3@assign@4:

; 735  : 			}
; 736  : 		return (*this);

  0004a	8b c7		 mov	 eax, edi
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi

; 737  : 		}

  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::_Dest_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::_Dest_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	6a 00		 push	 0
  00008	6a 01		 push	 1
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 288  : 	}

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??$_Dest_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::_Dest_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 702  : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 703  : 		_Tidy();
; 704  : 		assign(_STD forward<_Myt>(_Right));

  00004	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c6 06 00	 mov	 BYTE PTR [esi], 0
  00017	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 705  : 		}

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 708  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 710  : 		}

  00003	5d		 pop	 ebp

; 709  : 		return (assign(_STD forward<_Myt>(_Right)));

  00004	e9 00 00 00 00	 jmp	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0e		 jmp	 SHORT $LN21@Destroy_ra
$LL3@Destroy_ra:

; 97   : 		_Dest_val(_Al, _First);

  00009	6a 00		 push	 0
  0000b	6a 01		 push	 1
  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00014	83 c6 1c	 add	 esi, 28			; 0000001cH
$LN21@Destroy_ra:

; 96   : 	for (; _First != _Last; ++_First)

  00017	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001a	75 ed		 jne	 SHORT $LL3@Destroy_ra
  0001c	5e		 pop	 esi

; 98   : 	}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
_TEXT	SEGMENT
$T511254 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 1
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 78   : 	{	// return string + character

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	33 db		 xor	 ebx, ebx
  0000e	89 5d f0	 mov	 DWORD PTR $T511254[ebp], ebx

; 79   : 	basic_string<_Elem, _Traits, _Alloc> _Ans;

  00011	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00014	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0001b	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  0001e	88 1e		 mov	 BYTE PTR [esi], bl

; 80   : 	_Ans.reserve(_Left.size() + 1);
; 81   : 	_Ans += _Left;
; 82   : 	_Ans += _Right;
; 83   : 	return (_Ans);

  00020	8b 7d 0c	 mov	 edi, DWORD PTR __Left$[ebp]
  00023	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00026	40		 inc	 eax
  00027	50		 push	 eax
  00028	8b ce		 mov	 ecx, esi
  0002a	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0002d	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T511254[ebp], 1
  00034	e8 00 00 00 00	 call	 ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
  00039	6a ff		 push	 -1
  0003b	53		 push	 ebx
  0003c	57		 push	 edi
  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00044	ff 75 10	 push	 DWORD PTR __Right$[ebp]
  00047	8b ce		 mov	 ecx, esi
  00049	6a 01		 push	 1
  0004b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00050	8b c6		 mov	 eax, esi

; 84   : 	}

  00052	e8 00 00 00 00	 call	 __EH_epilog3
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T511254[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@operator
  0000c	83 65 f0 fe	 and	 DWORD PTR $T511254[ebp], -2 ; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN4@operator:
  00018	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z$0
__ehfuncinfo$?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z
_TEXT	SEGMENT
$T511374 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T511374[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN3@construct:

; 203  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T511374[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct
PUBLIC	??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 10		 jmp	 SHORT $LN15@Move
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00012	83 45 10 1c	 add	 DWORD PTR __Dest$[ebp], 28 ; 0000001cH
  00016	83 c6 1c	 add	 esi, 28			; 0000001cH
$LN15@Move:

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	75 eb		 jne	 SHORT $LL3@Move

; 2515 : 	return (_Dest);

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00021	5e		 pop	 esi

; 2516 : 	}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$511412 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$511412[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	_szOriginalStr$GSCopy$
PUBLIC	?ConvertString@CSlangUtil@@QAEPBDPBD_N@Z	; CSlangUtil::ConvertString
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	_atexit:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
_BSS	SEGMENT
?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 01cH DUP (?) ; `CSlangUtil::ConvertString'::`2'::szCleanUpString
_BSS	ENDS
;	COMDAT ?$S1@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4IA
_BSS	SEGMENT
?$S1@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4IA DD 01H DUP (?) ; `CSlangUtil::ConvertString'::`2'::$S1
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ConvertString@CSlangUtil@@QAEPBDPBD_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConvertString@CSlangUtil@@QAEPBDPBD_N@Z$1
__ehfuncinfo$?ConvertString@CSlangUtil@@QAEPBDPBD_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ConvertString@CSlangUtil@@QAEPBDPBD_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\slangutil.cpp
xdata$x	ENDS
;	COMDAT ?ConvertString@CSlangUtil@@QAEPBDPBD_N@Z
_TEXT	SEGMENT
$T511432 = -104						; size = 4
tv906 = -100						; size = 4
tv773 = -96						; size = 4
tv903 = -92						; size = 4
_pLocal$ = -92						; size = 4
_iCleanUpSize$505257 = -88				; size = 4
_pFirstResult$ = -88					; size = 4
_szPreString$ = -84					; size = 4
_szOriginalStr$GSCopy$ = -80				; size = 4
_iCheckArray$505255 = -80				; size = 4
_bSecondFilter$ = -74					; size = 1
_isFirstFilter$ = -73					; size = 1
_i$505258 = -72						; size = 4
_szPreException$ = -72					; size = 4
_string$ = -68						; size = 4
_result$ = -64						; size = 4
_szTempString$ = -60					; size = 4
$T505295 = -56						; size = 28
_szFilterChar2$ = -28					; size = 11
__$EHRec$ = -12						; size = 12
_szOriginalStr$ = 8					; size = 4
_bSetPreChat$ = 12					; size = 1
?ConvertString@CSlangUtil@@QAEPBDPBD_N@Z PROC		; CSlangUtil::ConvertString, COMDAT
; _this$ = ecx

; 280  : {

  00000	6a 5c		 push	 92			; 0000005cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?ConvertString@CSlangUtil@@QAEPBDPBD_N@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 75 08	 mov	 esi, DWORD PTR _szOriginalStr$[ebp]

; 281  : 	static std::string szCleanUpString;

  0000f	33 db		 xor	 ebx, ebx
  00011	f6 05 00 00 00
	00 01		 test	 BYTE PTR ?$S1@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4IA, 1
  00018	8b f9		 mov	 edi, ecx

; 408  : 		for (int i = 0;  i <  max_len - 1; i++)

  0001a	89 75 b0	 mov	 DWORD PTR _szOriginalStr$GSCopy$[ebp], esi
  0001d	75 28		 jne	 SHORT $LN25@ConvertStr

; 281  : 	static std::string szCleanUpString;

  0001f	83 0d 00 00 00
	00 01		 or	 DWORD PTR ?$S1@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4IA, 1
  00026	68 00 00 00 00	 push	 OFFSET ??__FszCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@YAXXZ ; `CSlangUtil::ConvertString'::`2'::`dynamic atexit destructor for 'szCleanUpString''
  0002b	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH
  00035	89 1d 10 00 00
	00		 mov	 DWORD PTR ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, ebx
  0003b	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, bl
  00041	e8 00 00 00 00	 call	 _atexit
  00046	59		 pop	 ecx
$LN25@ConvertStr:

; 282  :     char *result, *string, *szTempString, *szPreString, *szPreException;
; 283  : 
; 284  : 	szCleanUpString.clear();

  00047	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00053	89 1d 10 00 00
	00		 mov	 DWORD PTR ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, ebx
  00059	73 05		 jae	 SHORT $LN63@ConvertStr
  0005b	b8 00 00 00 00	 mov	 eax, OFFSET ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
$LN63@ConvertStr:

; 285  : 	szCleanUpString = szOriginalStr;

  00060	56		 push	 esi
  00061	b9 00 00 00 00	 mov	 ecx, OFFSET ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00066	88 18		 mov	 BYTE PTR [eax], bl
  00068	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 286  : 
; 287  : 	// 인자의 전체 크기를 넘는 수정을 해서는 안됨
; 288  : 	int max_len = strlen(szOriginalStr)+1;

  0006d	8b c6		 mov	 eax, esi
  0006f	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL156@ConvertStr:
  00072	8a 08		 mov	 cl, BYTE PTR [eax]
  00074	40		 inc	 eax
  00075	3a cb		 cmp	 cl, bl
  00077	75 f9		 jne	 SHORT $LL156@ConvertStr
  00079	2b c6		 sub	 eax, esi
  0007b	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 289  : 
; 290  : 	if ( max_len <= 1) return szCleanUpString.c_str();

  0007e	83 fe 01	 cmp	 esi, 1
  00081	0f 8e a3 03 00
	00		 jle	 $LN163@ConvertStr

; 291  : 
; 292  :     if (!szOriginalStr[0]) return szCleanUpString.c_str();

  00087	8b 45 b0	 mov	 eax, DWORD PTR _szOriginalStr$GSCopy$[ebp]
  0008a	38 18		 cmp	 BYTE PTR [eax], bl
  0008c	0f 84 98 03 00
	00		 je	 $LN163@ConvertStr

; 293  : 
; 294  : 	result = new char[max_len];

  00092	56		 push	 esi
  00093	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 295  : 	string = new char[max_len];

  00098	56		 push	 esi
  00099	89 45 c0	 mov	 DWORD PTR _result$[ebp], eax
  0009c	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 296  : 	szTempString = new char[max_len];

  000a1	56		 push	 esi
  000a2	89 45 bc	 mov	 DWORD PTR _string$[ebp], eax
  000a5	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 297  : 	szPreString  = new char[max_len];

  000aa	56		 push	 esi
  000ab	89 45 c4	 mov	 DWORD PTR _szTempString$[ebp], eax
  000ae	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 298  : 	szPreException = new char[max_len];

  000b3	56		 push	 esi
  000b4	89 45 ac	 mov	 DWORD PTR _szPreString$[ebp], eax
  000b7	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 299  : 
; 300  : 	memset(result, 0, max_len);

  000bc	56		 push	 esi
  000bd	53		 push	 ebx
  000be	ff 75 c0	 push	 DWORD PTR _result$[ebp]
  000c1	89 45 b8	 mov	 DWORD PTR _szPreException$[ebp], eax
  000c4	e8 00 00 00 00	 call	 _memset

; 301  : 	memset(string, 0, max_len);

  000c9	56		 push	 esi
  000ca	53		 push	 ebx
  000cb	ff 75 bc	 push	 DWORD PTR _string$[ebp]
  000ce	e8 00 00 00 00	 call	 _memset

; 302  : 	memset(szTempString, 0, max_len);

  000d3	56		 push	 esi
  000d4	53		 push	 ebx
  000d5	ff 75 c4	 push	 DWORD PTR _szTempString$[ebp]
  000d8	e8 00 00 00 00	 call	 _memset

; 303  : 	memset(szPreString, 0, max_len);

  000dd	56		 push	 esi
  000de	53		 push	 ebx
  000df	ff 75 ac	 push	 DWORD PTR _szPreString$[ebp]
  000e2	e8 00 00 00 00	 call	 _memset
  000e7	83 c4 44	 add	 esp, 68			; 00000044H

; 304  : 	memset(szPreException, 0, max_len);

  000ea	56		 push	 esi
  000eb	53		 push	 ebx
  000ec	ff 75 b8	 push	 DWORD PTR _szPreException$[ebp]
  000ef	e8 00 00 00 00	 call	 _memset
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 305  : 
; 306  : 	FilterChar(szOriginalStr, szTempString, m_pFilterString);

  000f7	ff 77 18	 push	 DWORD PTR [edi+24]
  000fa	8b cf		 mov	 ecx, edi
  000fc	ff 75 c4	 push	 DWORD PTR _szTempString$[ebp]
  000ff	ff 75 b0	 push	 DWORD PTR _szOriginalStr$GSCopy$[ebp]
  00102	e8 00 00 00 00	 call	 ?FilterChar@CSlangUtil@@IAEXPBDPAD1@Z ; CSlangUtil::FilterChar

; 307  : 	FilterMultiByteChar(szTempString, max_len, string, max_len, m_pFilterMultiByteString);

  00107	ff 77 1c	 push	 DWORD PTR [edi+28]
  0010a	8b cf		 mov	 ecx, edi
  0010c	56		 push	 esi
  0010d	ff 75 bc	 push	 DWORD PTR _string$[ebp]
  00110	56		 push	 esi
  00111	ff 75 c4	 push	 DWORD PTR _szTempString$[ebp]
  00114	e8 00 00 00 00	 call	 ?FilterMultiByteChar@CSlangUtil@@IAEXPBDHPADH1@Z ; CSlangUtil::FilterMultiByteChar

; 308  : 
; 309  : 	StringCbCopy( szPreString, max_len, szTempString );

  00119	ff 75 c4	 push	 DWORD PTR _szTempString$[ebp]
  0011c	56		 push	 esi
  0011d	ff 75 ac	 push	 DWORD PTR _szPreString$[ebp]
  00120	e8 00 00 00 00	 call	 ?StringCbCopyA@@YGJPADIPBD@Z ; StringCbCopyA

; 310  : 
; 311  : 	// 기본 필터링
; 312  : 	ioLocalParent *pLocal = g_LocalMgr.GetLocal( ioLocalManager::GetLocalType() );

  00125	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLocalType@ioLocalManagerParent@@SA?AW4LocalType@1@XZ
  0012b	50		 push	 eax
  0012c	e8 00 00 00 00	 call	 ?GetSingleton@ioLocalManager@@SAAAV1@XZ ; ioLocalManager::GetSingleton
  00131	8b c8		 mov	 ecx, eax
  00133	e8 00 00 00 00	 call	 ?GetLocal@ioLocalManager@@QAEPAVioLocalParent@@W4LocalType@ioLocalManagerParent@@@Z ; ioLocalManager::GetLocal
  00138	89 45 a4	 mov	 DWORD PTR _pLocal$[ebp], eax

; 313  : 	if( pLocal )

  0013b	3b c3		 cmp	 eax, ebx
  0013d	74 0d		 je	 SHORT $LN22@ConvertStr

; 314  : 		pLocal->GetChangedString( string );

  0013f	ff 75 bc	 push	 DWORD PTR _string$[ebp]
  00142	8b 10		 mov	 edx, DWORD PTR [eax]
  00144	8b c8		 mov	 ecx, eax
  00146	ff 92 8c 00 00
	00		 call	 DWORD PTR [edx+140]
$LN22@ConvertStr:

; 315  : 
; 316  : 	char *pFirstResult = NULL;
; 317  : 	bool isFirstFilter = false;
; 318  :     if (IsSlang(string)) 

  0014c	ff 75 bc	 push	 DWORD PTR _string$[ebp]
  0014f	8b cf		 mov	 ecx, edi
  00151	88 5d b7	 mov	 BYTE PTR _isFirstFilter$[ebp], bl
  00154	e8 00 00 00 00	 call	 ?IsSlang@CSlangUtil@@IAE_NPBD@Z ; CSlangUtil::IsSlang
  00159	84 c0		 test	 al, al
  0015b	74 67		 je	 SHORT $LN21@ConvertStr

; 319  : 	{
; 320  : 		StringCbCopy( szPreException, max_len, string );

  0015d	ff 75 bc	 push	 DWORD PTR _string$[ebp]
  00160	56		 push	 esi
  00161	ff 75 b8	 push	 DWORD PTR _szPreException$[ebp]
  00164	e8 00 00 00 00	 call	 ?StringCbCopyA@@YGJPADIPBD@Z ; StringCbCopyA

; 321  : 
; 322  : 		if( RePlaceSlang(string, result, max_len) == false)

  00169	56		 push	 esi
  0016a	ff 75 c0	 push	 DWORD PTR _result$[ebp]
  0016d	8b cf		 mov	 ecx, edi
  0016f	ff 75 bc	 push	 DWORD PTR _string$[ebp]
  00172	e8 00 00 00 00	 call	 ?RePlaceSlang@CSlangUtil@@IAE_NPAD0H@Z ; CSlangUtil::RePlaceSlang
  00177	84 c0		 test	 al, al
  00179	75 20		 jne	 SHORT $LN20@ConvertStr
$LN165@ConvertStr:

; 323  : 		{
; 324  : 			szCleanUpString.clear();

  0017b	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H
  00182	a1 00 00 00 00	 mov	 eax, DWORD PTR ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00187	89 1d 10 00 00
	00		 mov	 DWORD PTR ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, ebx
  0018d	73 05		 jae	 SHORT $LN87@ConvertStr
  0018f	b8 00 00 00 00	 mov	 eax, OFFSET ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
$LN87@ConvertStr:
  00194	88 18		 mov	 BYTE PTR [eax], bl

; 325  : 			delete[] result;
; 326  : 			delete[] string;
; 327  : 			delete[] szTempString;
; 328  : 			delete[] szPreString;
; 329  : 
; 330  : 			return szCleanUpString.c_str();

  00196	e9 6c 02 00 00	 jmp	 $LN9@ConvertStr
$LN20@ConvertStr:

; 331  : 		}
; 332  : 
; 333  : 		RePlaceException( szPreException, result, max_len );

  0019b	56		 push	 esi
  0019c	ff 75 c0	 push	 DWORD PTR _result$[ebp]
  0019f	8b cf		 mov	 ecx, edi
  001a1	ff 75 b8	 push	 DWORD PTR _szPreException$[ebp]
  001a4	e8 00 00 00 00	 call	 ?RePlaceException@CSlangUtil@@IAE_NPAD0H@Z ; CSlangUtil::RePlaceException

; 334  : 
; 335  : 		result[max_len-1] = 0;		// prevent overflow

  001a9	8b 45 c0	 mov	 eax, DWORD PTR _result$[ebp]

; 336  : 		szCleanUpString = result;

  001ac	50		 push	 eax
  001ad	b9 00 00 00 00	 mov	 ecx, OFFSET ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  001b2	88 5c 30 ff	 mov	 BYTE PTR [eax+esi-1], bl
  001b6	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 337  : 		pFirstResult = result;

  001bb	8b 45 c0	 mov	 eax, DWORD PTR _result$[ebp]

; 338  : 		isFirstFilter = true;

  001be	c6 45 b7 01	 mov	 BYTE PTR _isFirstFilter$[ebp], 1

; 339  : 	}
; 340  : 	else

  001c2	eb 03		 jmp	 SHORT $LN162@ConvertStr
$LN21@ConvertStr:

; 341  : 		pFirstResult = (char*)string;

  001c4	8b 45 bc	 mov	 eax, DWORD PTR _string$[ebp]
$LN162@ConvertStr:

; 342  : 
; 343  :     // 숫자 필터링
; 344  : 	memset(szTempString, 0, max_len);

  001c7	56		 push	 esi
  001c8	53		 push	 ebx
  001c9	ff 75 c4	 push	 DWORD PTR _szTempString$[ebp]
  001cc	89 45 a8	 mov	 DWORD PTR _pFirstResult$[ebp], eax
  001cf	e8 00 00 00 00	 call	 _memset
  001d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 345  : 	char szFilterChar2[]={'0','1','2','3','4','5','6','7','8','9',NULL}; 
; 346  : 	FilterChar(pFirstResult, szTempString, szFilterChar2);

  001d7	8d 45 e4	 lea	 eax, DWORD PTR _szFilterChar2$[ebp]
  001da	50		 push	 eax
  001db	ff 75 c4	 push	 DWORD PTR _szTempString$[ebp]
  001de	8b cf		 mov	 ecx, edi
  001e0	ff 75 a8	 push	 DWORD PTR _pFirstResult$[ebp]
  001e3	c7 45 e4 30 31
	32 33		 mov	 DWORD PTR _szFilterChar2$[ebp], 858927408 ; 33323130H
  001ea	c7 45 e8 34 35
	36 37		 mov	 DWORD PTR _szFilterChar2$[ebp+4], 926299444 ; 37363534H
  001f1	66 c7 45 ec 38
	39		 mov	 WORD PTR _szFilterChar2$[ebp+8], 14648 ; 00003938H
  001f7	88 5d ee	 mov	 BYTE PTR _szFilterChar2$[ebp+10], bl
  001fa	e8 00 00 00 00	 call	 ?FilterChar@CSlangUtil@@IAEXPBDPAD1@Z ; CSlangUtil::FilterChar

; 347  : 
; 348  : 	memset(result, 0, max_len);

  001ff	56		 push	 esi
  00200	53		 push	 ebx
  00201	ff 75 c0	 push	 DWORD PTR _result$[ebp]
  00204	e8 00 00 00 00	 call	 _memset
  00209	83 c4 0c	 add	 esp, 12			; 0000000cH

; 349  : 	FilterChar(szPreString, result, szFilterChar2);

  0020c	8d 45 e4	 lea	 eax, DWORD PTR _szFilterChar2$[ebp]
  0020f	50		 push	 eax
  00210	ff 75 c0	 push	 DWORD PTR _result$[ebp]
  00213	8b cf		 mov	 ecx, edi
  00215	ff 75 ac	 push	 DWORD PTR _szPreString$[ebp]
  00218	e8 00 00 00 00	 call	 ?FilterChar@CSlangUtil@@IAEXPBDPAD1@Z ; CSlangUtil::FilterChar

; 350  : 
; 351  : 	if( bSetPreChat )

  0021d	38 5d 0c	 cmp	 BYTE PTR _bSetPreChat$[ebp], bl
  00220	74 23		 je	 SHORT $LN18@ConvertStr

; 352  : 	{
; 353  : 		memset( m_szPreChat, 0, sizeof(m_szPreChat) );

  00222	68 00 04 00 00	 push	 1024			; 00000400H
  00227	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
  0022a	53		 push	 ebx
  0022b	50		 push	 eax
  0022c	e8 00 00 00 00	 call	 _memset
  00231	83 c4 0c	 add	 esp, 12			; 0000000cH

; 354  : 		StringCbCopy( m_szPreChat, sizeof(m_szPreChat), result );

  00234	ff 75 c0	 push	 DWORD PTR _result$[ebp]
  00237	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
  0023a	68 00 04 00 00	 push	 1024			; 00000400H
  0023f	50		 push	 eax
  00240	e8 00 00 00 00	 call	 ?StringCbCopyA@@YGJPADIPBD@Z ; StringCbCopyA
$LN18@ConvertStr:

; 355  : 	}
; 356  : 
; 357  : 	if( pLocal )

  00245	8b 4d a4	 mov	 ecx, DWORD PTR _pLocal$[ebp]
  00248	3b cb		 cmp	 ecx, ebx
  0024a	74 0b		 je	 SHORT $LN17@ConvertStr

; 358  : 		pLocal->GetChangedString( szTempString );

  0024c	ff 75 c4	 push	 DWORD PTR _szTempString$[ebp]
  0024f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00251	ff 90 8c 00 00
	00		 call	 DWORD PTR [eax+140]
$LN17@ConvertStr:

; 359  : 
; 360  : 	bool bSecondFilter = false;
; 361  : 	memset(result, 0, max_len);

  00257	56		 push	 esi
  00258	53		 push	 ebx
  00259	ff 75 c0	 push	 DWORD PTR _result$[ebp]
  0025c	88 5d b6	 mov	 BYTE PTR _bSecondFilter$[ebp], bl
  0025f	e8 00 00 00 00	 call	 _memset
  00264	83 c4 0c	 add	 esp, 12			; 0000000cH

; 362  : 	if (IsSlang(szTempString)) 

  00267	ff 75 c4	 push	 DWORD PTR _szTempString$[ebp]
  0026a	8b cf		 mov	 ecx, edi
  0026c	e8 00 00 00 00	 call	 ?IsSlang@CSlangUtil@@IAE_NPBD@Z ; CSlangUtil::IsSlang
  00271	84 c0		 test	 al, al
  00273	74 53		 je	 SHORT $LN16@ConvertStr

; 363  : 	{
; 364  : 		memset(szPreException, 0, max_len);

  00275	56		 push	 esi
  00276	53		 push	 ebx
  00277	ff 75 b8	 push	 DWORD PTR _szPreException$[ebp]
  0027a	e8 00 00 00 00	 call	 _memset
  0027f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 365  : 		StringCbCopy( szPreException, max_len, szTempString );

  00282	ff 75 c4	 push	 DWORD PTR _szTempString$[ebp]
  00285	56		 push	 esi
  00286	ff 75 b8	 push	 DWORD PTR _szPreException$[ebp]
  00289	e8 00 00 00 00	 call	 ?StringCbCopyA@@YGJPADIPBD@Z ; StringCbCopyA

; 366  : 
; 367  : 		if( RePlaceSlang(szTempString, result, max_len) == false)

  0028e	56		 push	 esi
  0028f	ff 75 c0	 push	 DWORD PTR _result$[ebp]
  00292	8b cf		 mov	 ecx, edi
  00294	ff 75 c4	 push	 DWORD PTR _szTempString$[ebp]
  00297	e8 00 00 00 00	 call	 ?RePlaceSlang@CSlangUtil@@IAE_NPAD0H@Z ; CSlangUtil::RePlaceSlang
  0029c	84 c0		 test	 al, al

; 368  : 		{
; 369  : 			szCleanUpString.clear();
; 370  : 			delete[] result;
; 371  : 			delete[] string;
; 372  : 			delete[] szTempString;
; 373  : 			delete[] szPreString;
; 374  : 			return szCleanUpString.c_str();

  0029e	0f 84 d7 fe ff
	ff		 je	 $LN165@ConvertStr

; 375  : 		}
; 376  : 
; 377  : 		RePlaceException( szPreException, result, max_len );

  002a4	56		 push	 esi
  002a5	ff 75 c0	 push	 DWORD PTR _result$[ebp]
  002a8	8b cf		 mov	 ecx, edi
  002aa	ff 75 b8	 push	 DWORD PTR _szPreException$[ebp]
  002ad	e8 00 00 00 00	 call	 ?RePlaceException@CSlangUtil@@IAE_NPAD0H@Z ; CSlangUtil::RePlaceException

; 378  : 
; 379  : 		result[max_len-1] = 0;		// prevent overflow

  002b2	8b 45 c0	 mov	 eax, DWORD PTR _result$[ebp]

; 380  : 		szCleanUpString = result;

  002b5	50		 push	 eax
  002b6	b9 00 00 00 00	 mov	 ecx, OFFSET ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  002bb	88 5c 30 ff	 mov	 BYTE PTR [eax+esi-1], bl
  002bf	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 381  : 		bSecondFilter = true;

  002c4	c6 45 b6 01	 mov	 BYTE PTR _bSecondFilter$[ebp], 1
$LN16@ConvertStr:

; 382  : 	}
; 383  : 
; 384  : 	// ' ' 복원
; 385  : 	if(isFirstFilter)

  002c8	38 5d b7	 cmp	 BYTE PTR _isFirstFilter$[ebp], bl
  002cb	0f 84 36 01 00
	00		 je	 $LN9@ConvertStr

; 386  : 	{
; 387  : 		memset(string, 0, max_len);

  002d1	56		 push	 esi
  002d2	53		 push	 ebx
  002d3	ff 75 bc	 push	 DWORD PTR _string$[ebp]
  002d6	e8 00 00 00 00	 call	 _memset

; 388  : 		memset(szTempString, 0, max_len);

  002db	56		 push	 esi
  002dc	53		 push	 ebx
  002dd	ff 75 c4	 push	 DWORD PTR _szTempString$[ebp]
  002e0	e8 00 00 00 00	 call	 _memset
  002e5	83 c4 18	 add	 esp, 24			; 00000018H

; 389  : 
; 390  : 		//FilterChar(szOriginalStr, szTempString, &m_pFilterString[1]); // 공백 문자를 제외하고 필터링
; 391  : 		StringCbCopy( szTempString, max_len, szOriginalStr );

  002e8	ff 75 b0	 push	 DWORD PTR _szOriginalStr$GSCopy$[ebp]
  002eb	56		 push	 esi
  002ec	ff 75 c4	 push	 DWORD PTR _szTempString$[ebp]
  002ef	e8 00 00 00 00	 call	 ?StringCbCopyA@@YGJPADIPBD@Z ; StringCbCopyA

; 392  : 
; 393  : 		if(bSecondFilter)

  002f4	38 5d b6	 cmp	 BYTE PTR _bSecondFilter$[ebp], bl
  002f7	74 0d		 je	 SHORT $LN13@ConvertStr

; 394  : 		{
; 395  : 			memset(result, 0, max_len);

  002f9	56		 push	 esi
  002fa	53		 push	 ebx
  002fb	ff 75 c0	 push	 DWORD PTR _result$[ebp]
  002fe	e8 00 00 00 00	 call	 _memset
  00303	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN13@ConvertStr:

; 396  : 			FilterMultiByteChar(szTempString, max_len, string, max_len, m_pFilterMultiByteString);
; 397  : 			//FilterMultiByteChar(szTempString, max_len, result, max_len, m_pFilterMultiByteString);
; 398  : 			//FilterChar(result, string, szFilterChar2);
; 399  : 		}
; 400  : 		else
; 401  : 		{
; 402  : 			FilterMultiByteChar(szTempString, max_len, string, max_len, m_pFilterMultiByteString);

  00306	ff 77 1c	 push	 DWORD PTR [edi+28]
  00309	8b cf		 mov	 ecx, edi
  0030b	56		 push	 esi
  0030c	ff 75 bc	 push	 DWORD PTR _string$[ebp]
  0030f	56		 push	 esi
  00310	ff 75 c4	 push	 DWORD PTR _szTempString$[ebp]
  00313	e8 00 00 00 00	 call	 ?FilterMultiByteChar@CSlangUtil@@IAEXPBDHPADH1@Z ; CSlangUtil::FilterMultiByteChar

; 403  : 		}
; 404  : 		
; 405  : 		int iCheckArray = 0;
; 406  : 		int iFirstMultiByteArray = -2;
; 407  : 		int iCleanUpSize = szCleanUpString.size();

  00318	a1 10 00 00 00	 mov	 eax, DWORD PTR ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16

; 408  : 		for (int i = 0;  i <  max_len - 1; i++)

  0031d	4e		 dec	 esi
  0031e	89 5d b0	 mov	 DWORD PTR _iCheckArray$505255[ebp], ebx
  00321	89 45 a8	 mov	 DWORD PTR _iCleanUpSize$505257[ebp], eax
  00324	89 5d b8	 mov	 DWORD PTR _i$505258[ebp], ebx
  00327	89 75 a0	 mov	 DWORD PTR tv773[ebp], esi
  0032a	3b f3		 cmp	 esi, ebx
  0032c	0f 8e d5 00 00
	00		 jle	 $LN9@ConvertStr
  00332	83 c8 ff	 or	 eax, -1
  00335	2b 45 bc	 sub	 eax, DWORD PTR _string$[ebp]
  00338	89 45 a4	 mov	 DWORD PTR tv903[ebp], eax
  0033b	33 c0		 xor	 eax, eax
  0033d	40		 inc	 eax
  0033e	2b 45 bc	 sub	 eax, DWORD PTR _string$[ebp]
  00341	89 45 9c	 mov	 DWORD PTR tv906[ebp], eax
$LN11@ConvertStr:

; 409  : 		{
; 410  : 			if( iCheckArray == i)

  00344	8b 45 b8	 mov	 eax, DWORD PTR _i$505258[ebp]
  00347	39 45 b0	 cmp	 DWORD PTR _iCheckArray$505255[ebp], eax
  0034a	75 13		 jne	 SHORT $LN5@ConvertStr

; 411  : 			{
; 412  : 				if( i < iCleanUpSize)

  0034c	3b 45 a8	 cmp	 eax, DWORD PTR _iCleanUpSize$505257[ebp]
  0034f	7d 0e		 jge	 SHORT $LN5@ConvertStr

; 413  : 				{
; 414  : 					char sz = szCleanUpString.at(i);

  00351	50		 push	 eax
  00352	b9 00 00 00 00	 mov	 ecx, OFFSET ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00357	e8 00 00 00 00	 call	 ?at@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::at

; 415  : 
; 416  : #if defined( SRC_OVERSEAS ) && !defined( SRC_ID )
; 417  : 
; 418  : #if defined( MULTI_BYTE_CHECK )
; 419  : 					if( IsDBCSLeadByteEx( COUNTRY_CODE_PAGE, sz ) )
; 420  : #else
; 421  : 					if( false && IsDBCSLeadByteEx( COUNTRY_CODE_PAGE, sz ) )
; 422  : #endif
; 423  : 
; 424  : #else
; 425  : 					if( IsDBCSLeadByte(sz) )
; 426  : #endif
; 427  : 
; 428  : 					{
; 429  : 						iFirstMultiByteArray = i;
; 430  : 						iCheckArray +=2;
; 431  : 					}
; 432  : 					else
; 433  : 						iCheckArray +=1;

  0035c	ff 45 b0	 inc	 DWORD PTR _iCheckArray$505255[ebp]
$LN5@ConvertStr:

; 434  : 				}
; 435  : 			}
; 436  : 
; 437  : 			if( strchr(m_pFilterString, string[i]) && iFirstMultiByteArray != (i-1) )

  0035f	8b 75 b8	 mov	 esi, DWORD PTR _i$505258[ebp]
  00362	03 75 bc	 add	 esi, DWORD PTR _string$[ebp]
  00365	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00368	0f be 06	 movsx	 eax, BYTE PTR [esi]
  0036b	50		 push	 eax
  0036c	51		 push	 ecx
  0036d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  00373	59		 pop	 ecx
  00374	59		 pop	 ecx
  00375	85 c0		 test	 eax, eax
  00377	74 7f		 je	 SHORT $LN10@ConvertStr
  00379	8b 45 a4	 mov	 eax, DWORD PTR tv903[ebp]
  0037c	03 c6		 add	 eax, esi
  0037e	83 f8 fe	 cmp	 eax, -2			; fffffffeH
  00381	74 75		 je	 SHORT $LN10@ConvertStr

; 438  : 			{
; 439  : 				iCleanUpSize = szCleanUpString.size();

  00383	a1 10 00 00 00	 mov	 eax, DWORD PTR ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16

; 440  : 				if( i >= iCleanUpSize )

  00388	8b 4d b8	 mov	 ecx, DWORD PTR _i$505258[ebp]
  0038b	89 45 a8	 mov	 DWORD PTR _iCleanUpSize$505257[ebp], eax
  0038e	3b c8		 cmp	 ecx, eax
  00390	7c 32		 jl	 SHORT $LN3@ConvertStr

; 441  : 				{
; 442  : 					szCleanUpString = szCleanUpString + string[i];

  00392	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00395	50		 push	 eax
  00396	be 00 00 00 00	 mov	 esi, OFFSET ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  0039b	8d 45 c8	 lea	 eax, DWORD PTR $T505295[ebp]
  0039e	56		 push	 esi
  0039f	50		 push	 eax
  003a0	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  003a5	83 c4 0c	 add	 esp, 12			; 0000000cH
  003a8	50		 push	 eax
  003a9	8b ce		 mov	 ecx, esi
  003ab	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  003ae	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  003b3	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  003b7	53		 push	 ebx
  003b8	6a 01		 push	 1
  003ba	8d 4d c8	 lea	 ecx, DWORD PTR $T505295[ebp]
  003bd	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 443  : 				}
; 444  : 				else

  003c2	eb 34		 jmp	 SHORT $LN10@ConvertStr
$LN3@ConvertStr:

; 445  : 				{
; 446  : 					std::basic_string <char>::iterator str_Iter = ( szCleanUpString.begin()+ i );

  003c4	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H
  003cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  003d0	73 05		 jae	 SHORT $LN135@ConvertStr
  003d2	b8 00 00 00 00	 mov	 eax, OFFSET ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
$LN135@ConvertStr:
  003d7	03 c1		 add	 eax, ecx

; 447  : 					if(str_Iter._Ptr != NULL )

  003d9	3b c3		 cmp	 eax, ebx
  003db	74 13		 je	 SHORT $LN1@ConvertStr

; 448  : 						szCleanUpString.insert(str_Iter, string[i] );

  003dd	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]
  003e0	51		 push	 ecx
  003e1	50		 push	 eax
  003e2	8d 45 98	 lea	 eax, DWORD PTR $T511432[ebp]
  003e5	50		 push	 eax
  003e6	b9 00 00 00 00	 mov	 ecx, OFFSET ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  003eb	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
$LN1@ConvertStr:

; 449  : 					iCheckArray   = i+1;

  003f0	8b 45 9c	 mov	 eax, DWORD PTR tv906[ebp]
  003f3	03 c6		 add	 eax, esi
  003f5	89 45 b0	 mov	 DWORD PTR _iCheckArray$505255[ebp], eax
$LN10@ConvertStr:

; 408  : 		for (int i = 0;  i <  max_len - 1; i++)

  003f8	ff 45 b8	 inc	 DWORD PTR _i$505258[ebp]
  003fb	8b 45 b8	 mov	 eax, DWORD PTR _i$505258[ebp]
  003fe	3b 45 a0	 cmp	 eax, DWORD PTR tv773[ebp]
  00401	0f 8c 3d ff ff
	ff		 jl	 $LN11@ConvertStr
$LN9@ConvertStr:

; 450  : 				}
; 451  : 			}
; 452  : 
; 453  : 			/*
; 454  : 			if(string[i] == ' ' && iFirstMultiByteArray != (i-1)  ) // 멀티바이트 중간에 ' ' 넣지 못하도록 함.
; 455  : 			{
; 456  : 				iCleanUpSize = szCleanUpString.size();
; 457  : 				if( i >= iCleanUpSize ) continue;
; 458  : 
; 459  : 				std::basic_string <char>::iterator str_Iter = ( szCleanUpString.begin()+ i );
; 460  : 				if(str_Iter != NULL )
; 461  : 					szCleanUpString.insert(str_Iter, ' ');
; 462  : 				iCheckArray   = i+1;
; 463  : 			}
; 464  : 			*/
; 465  : 		}
; 466  : 	}
; 467  : 
; 468  : 	delete[] result;

  00407	ff 75 c0	 push	 DWORD PTR _result$[ebp]
  0040a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 469  : 	delete[] string;

  0040f	ff 75 bc	 push	 DWORD PTR _string$[ebp]
  00412	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 470  : 	delete[] szTempString;

  00417	ff 75 c4	 push	 DWORD PTR _szTempString$[ebp]
  0041a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 471  : 	delete[] szPreString;

  0041f	ff 75 ac	 push	 DWORD PTR _szPreString$[ebp]
  00422	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00427	83 c4 10	 add	 esp, 16			; 00000010H
$LN163@ConvertStr:

; 472  : 
; 473  :     return szCleanUpString.c_str();

  0042a	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H
  00431	a1 00 00 00 00	 mov	 eax, DWORD PTR ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00436	73 05		 jae	 SHORT $LN26@ConvertStr
  00438	b8 00 00 00 00	 mov	 eax, OFFSET ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
$LN26@ConvertStr:

; 474  : }

  0043d	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00442	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ConvertString@CSlangUtil@@QAEPBDPBD_N@Z$1:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR $T505295[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?ConvertString@CSlangUtil@@QAEPBDPBD_N@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 94	 mov	 ecx, DWORD PTR [edx-108]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ConvertString@CSlangUtil@@QAEPBDPBD_N@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ConvertString@CSlangUtil@@QAEPBDPBD_N@Z ENDP		; CSlangUtil::ConvertString
PUBLIC	??_C@_0EH@JFEDNPLM@?E?$KJ?$LH?$KB?$LN?$KM?5?$MA?$KH?G?h?5?G?T?$LM?v?5?3?5CSlangUtil?3?3C@ ; `string'
PUBLIC	??_C@_0M@DMGKCCIB@ClientError?$AA@		; `string'
PUBLIC	??_C@_0EH@HOHEGELP@?E?$KJ?$LH?$KB?$LN?$KM?5?$MA?$KH?G?h?5?G?T?$LM?v?5?3?5CSlangUtil?3?3C@ ; `string'
PUBLIC	??_C@_0CF@DINNOKCI@CSlangUtil?3?3ConvertStringWithPre@ ; `string'
PUBLIC	_szOriginalStr$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?ConvertStringWithPreLine@CSlangUtil@@QAEPBDPBD@Z ; CSlangUtil::ConvertStringWithPreLine
EXTRN	??1SP2Packet@@UAE@XZ:PROC			; SP2Packet::~SP2Packet
EXTRN	?SendLog@P2PNetwork@@YAXAAVSP2Packet@@@Z:PROC	; P2PNetwork::SendLog
EXTRN	??6SP2Packet@@QAEAAV0@_N@Z:PROC			; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@H@Z:PROC			; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@PAD@Z:PROC		; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@PBD@Z:PROC		; SP2Packet::operator<<
EXTRN	??0SP2Packet@@QAE@K@Z:PROC			; SP2Packet::SP2Packet
EXTRN	__imp__sprintf:PROC
EXTRN	__imp_?c_str@ioHashString@@QBEPBDXZ:PROC
EXTRN	?GetSingleton@ioMyInfo@@SAAAV1@XZ:PROC		; ioMyInfo::GetSingleton
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0EH@JFEDNPLM@?E?$KJ?$LH?$KB?$LN?$KM?5?$MA?$KH?G?h?5?G?T?$LM?v?5?3?5CSlangUtil?3?3C@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
??_C@_0EH@JFEDNPLM@?E?$KJ?$LH?$KB?$LN?$KM?5?$MA?$KH?G?h?5?G?T?$LM?v?5?3?5CSlangUtil?3?3C@ DB 0c5H
	DB	0a9H, 0b7H, 0a1H, 0bdH, 0acH, ' ', 0c0H, 0a7H, 0c7H, 0e8H, ' ', 0c7H
	DB	0d4H, 0bcH, 0f6H, ' : CSlangUtil::ConvertStringWithPreLine Typ'
	DB	'e B:%s - %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DMGKCCIB@ClientError?$AA@
CONST	SEGMENT
??_C@_0M@DMGKCCIB@ClientError?$AA@ DB 'ClientError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@HOHEGELP@?E?$KJ?$LH?$KB?$LN?$KM?5?$MA?$KH?G?h?5?G?T?$LM?v?5?3?5CSlangUtil?3?3C@
CONST	SEGMENT
??_C@_0EH@HOHEGELP@?E?$KJ?$LH?$KB?$LN?$KM?5?$MA?$KH?G?h?5?G?T?$LM?v?5?3?5CSlangUtil?3?3C@ DB 0c5H
	DB	0a9H, 0b7H, 0a1H, 0bdH, 0acH, ' ', 0c0H, 0a7H, 0c7H, 0e8H, ' ', 0c7H
	DB	0d4H, 0bcH, 0f6H, ' : CSlangUtil::ConvertStringWithPreLine Typ'
	DB	'e A:%s - %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DINNOKCI@CSlangUtil?3?3ConvertStringWithPre@
CONST	SEGMENT
??_C@_0CF@DINNOKCI@CSlangUtil?3?3ConvertStringWithPre@ DB 'CSlangUtil::Co'
	DB	'nvertStringWithPreLine', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ConvertStringWithPreLine@CSlangUtil@@QAEPBDPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConvertStringWithPreLine@CSlangUtil@@QAEPBDPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ConvertStringWithPreLine@CSlangUtil@@QAEPBDPBD@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?ConvertStringWithPreLine@CSlangUtil@@QAEPBDPBD@Z$2
__ehfuncinfo$?ConvertStringWithPreLine@CSlangUtil@@QAEPBDPBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?ConvertStringWithPreLine@CSlangUtil@@QAEPBDPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\slangutil.cpp
xdata$x	ENDS
;	COMDAT ?ConvertStringWithPreLine@CSlangUtil@@QAEPBDPBD@Z
_TEXT	SEGMENT
_iFilteredSize$ = -33116				; size = 4
tv419 = -33112						; size = 4
_this$GSCopy$ = -33108					; size = 4
tv421 = -33104						; size = 4
_szOriginalStr$GSCopy$ = -33104				; size = 4
_iRemovePos$505325 = -33100				; size = 4
_kPacket$505358 = -33096				; size = 32792
_kPacket$505342 = -33096				; size = 32792
_szCleanUpAppendString$ = -304				; size = 28
_szError$505356 = -276					; size = 260
_szError$505340 = -276					; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_szOriginalStr$ = 8					; size = 4
?ConvertStringWithPreLine@CSlangUtil@@QAEPBDPBD@Z PROC	; CSlangUtil::ConvertStringWithPreLine, COMDAT
; _this$ = ecx

; 477  : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ConvertStringWithPreLine@CSlangUtil@@QAEPBDPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 50 81 00 00	 mov	 eax, 33104		; 00008150H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 487  : 	{
; 488  : 		szCleanUpAppendString = szOriginalStr;

  00032	8b 45 08	 mov	 eax, DWORD PTR _szOriginalStr$[ebp]
  00035	33 db		 xor	 ebx, ebx
  00037	8b f1		 mov	 esi, ecx
  00039	89 b5 ac 7e ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  0003f	89 85 b0 7e ff
	ff		 mov	 DWORD PTR _szOriginalStr$GSCopy$[ebp], eax
  00045	c7 85 e4 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR _szCleanUpAppendString$[ebp+20], 15 ; 0000000fH
  0004f	89 9d e0 fe ff
	ff		 mov	 DWORD PTR _szCleanUpAppendString$[ebp+16], ebx
  00055	88 9d d0 fe ff
	ff		 mov	 BYTE PTR _szCleanUpAppendString$[ebp], bl
  0005b	8d 7e 20	 lea	 edi, DWORD PTR [esi+32]
  0005e	8b c7		 mov	 eax, edi
  00060	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00063	89 bd a8 7e ff
	ff		 mov	 DWORD PTR tv419[ebp], edi
  00069	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
$LL77@ConvertStr@2:

; 478  : 	std::string szCleanUpAppendString;
; 479  : 
; 480  : 	int iFilteredSize = strlen( m_szPreChat );

  0006c	8a 10		 mov	 dl, BYTE PTR [eax]
  0006e	40		 inc	 eax
  0006f	3a d3		 cmp	 dl, bl
  00071	75 f9		 jne	 SHORT $LL77@ConvertStr@2
  00073	2b c1		 sub	 eax, ecx
  00075	89 85 a4 7e ff
	ff		 mov	 DWORD PTR _iFilteredSize$[ebp], eax

; 481  : 	if( iFilteredSize > 0 )
; 482  : 	{
; 483  : 		szCleanUpAppendString = m_szPreChat;

  0007b	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _szCleanUpAppendString$[ebp]
  00081	3b c3		 cmp	 eax, ebx
  00083	7e 19		 jle	 SHORT $LN21@ConvertStr@2
  00085	57		 push	 edi
  00086	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 484  : 		szCleanUpAppendString += szOriginalStr;

  0008b	ff b5 b0 7e ff
	ff		 push	 DWORD PTR _szOriginalStr$GSCopy$[ebp]
  00091	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _szCleanUpAppendString$[ebp]
  00097	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 485  : 	}
; 486  : 	else

  0009c	eb 0b		 jmp	 SHORT $LN57@ConvertStr@2
$LN21@ConvertStr@2:

; 487  : 	{
; 488  : 		szCleanUpAppendString = szOriginalStr;

  0009e	ff b5 b0 7e ff
	ff		 push	 DWORD PTR _szOriginalStr$GSCopy$[ebp]
  000a4	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN57@ConvertStr@2:

; 489  : 	}
; 490  : 
; 491  : 	memset( m_szAppendLineResult, 0, sizeof(m_szAppendLineResult) );

  000a9	bf 00 04 00 00	 mov	 edi, 1024		; 00000400H
  000ae	57		 push	 edi
  000af	8d 86 20 04 00
	00		 lea	 eax, DWORD PTR [esi+1056]
  000b5	53		 push	 ebx
  000b6	50		 push	 eax
  000b7	89 85 b0 7e ff
	ff		 mov	 DWORD PTR tv421[ebp], eax
  000bd	e8 00 00 00 00	 call	 _memset

; 492  : 	StringCbCopy( m_szAppendLineResult,
; 493  : 				  sizeof(m_szAppendLineResult),
; 494  : 				  ConvertString( szCleanUpAppendString.c_str(), true ) );

  000c2	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _szCleanUpAppendString$[ebp]
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cb	83 bd e4 fe ff
	ff 10		 cmp	 DWORD PTR _szCleanUpAppendString$[ebp+20], 16 ; 00000010H
  000d2	73 06		 jae	 SHORT $LN64@ConvertStr@2
  000d4	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR _szCleanUpAppendString$[ebp]
$LN64@ConvertStr@2:
  000da	6a 01		 push	 1
  000dc	50		 push	 eax
  000dd	8b ce		 mov	 ecx, esi
  000df	e8 00 00 00 00	 call	 ?ConvertString@CSlangUtil@@QAEPBDPBD_N@Z ; CSlangUtil::ConvertString
  000e4	50		 push	 eax
  000e5	57		 push	 edi
  000e6	ff b5 b0 7e ff
	ff		 push	 DWORD PTR tv421[ebp]
  000ec	e8 00 00 00 00	 call	 ?StringCbCopyA@@YGJPADIPBD@Z ; StringCbCopyA

; 495  : 
; 496  : 	if( iFilteredSize > 0 )

  000f1	39 9d a4 7e ff
	ff		 cmp	 DWORD PTR _iFilteredSize$[ebp], ebx
  000f7	0f 8e f8 02 00
	00		 jle	 $LN1@ConvertStr@2

; 497  : 	{
; 498  : 		int iRemovePos = 0;
; 499  : 		int iMaxPos = strlen( m_szAppendLineResult );

  000fd	8b 85 b0 7e ff
	ff		 mov	 eax, DWORD PTR tv421[ebp]
  00103	89 9d b4 7e ff
	ff		 mov	 DWORD PTR _iRemovePos$505325[ebp], ebx
  00109	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL78@ConvertStr@2:
  0010c	8a 08		 mov	 cl, BYTE PTR [eax]
  0010e	40		 inc	 eax
  0010f	3a cb		 cmp	 cl, bl
  00111	75 f9		 jne	 SHORT $LL78@ConvertStr@2
  00113	2b c6		 sub	 eax, esi
  00115	8b f0		 mov	 esi, eax

; 500  : 
; 501  : 		int iCnt=0;

  00117	33 c0		 xor	 eax, eax

; 502  : 		while( iRemovePos < iMaxPos && iRemovePos < iFilteredSize )

  00119	3b f3		 cmp	 esi, ebx
  0011b	0f 8e 5e 01 00
	00		 jle	 $LN10@ConvertStr@2
$LL18@ConvertStr@2:
  00121	8b 8d b4 7e ff
	ff		 mov	 ecx, DWORD PTR _iRemovePos$505325[ebp]
  00127	3b 8d a4 7e ff
	ff		 cmp	 ecx, DWORD PTR _iFilteredSize$[ebp]
  0012d	7d 3c		 jge	 SHORT $LN17@ConvertStr@2

; 503  : 		{
; 504  : 
; 505  : #if defined( SRC_OVERSEAS ) && !defined( SRC_ID )
; 506  : 
; 507  : #if defined( MULTI_BYTE_CHECK )
; 508  : 			if( IsDBCSLeadByteEx( COUNTRY_CODE_PAGE, (BYTE)m_szAppendLineResult[iRemovePos] ) )
; 509  : #else
; 510  : 			if( false && IsDBCSLeadByteEx( COUNTRY_CODE_PAGE, (BYTE)m_szAppendLineResult[iRemovePos] ) )
; 511  : #endif
; 512  : 
; 513  : #else
; 514  : 			if( IsDBCSLeadByte( (BYTE)m_szAppendLineResult[iRemovePos] ) )
; 515  : #endif
; 516  : 
; 517  : 				iRemovePos += 2;
; 518  : 			else
; 519  : 				iRemovePos++;

  0012f	ff 85 b4 7e ff
	ff		 inc	 DWORD PTR _iRemovePos$505325[ebp]

; 520  : 
; 521  : 			if( iCnt++ > MAX_LOOP ) // 비상STOP

  00135	8b c8		 mov	 ecx, eax
  00137	40		 inc	 eax
  00138	3b cf		 cmp	 ecx, edi
  0013a	7f 0a		 jg	 SHORT $LN75@ConvertStr@2

; 502  : 		while( iRemovePos < iMaxPos && iRemovePos < iFilteredSize )

  0013c	39 b5 b4 7e ff
	ff		 cmp	 DWORD PTR _iRemovePos$505325[ebp], esi
  00142	7c dd		 jl	 SHORT $LL18@ConvertStr@2

; 577  : 
; 578  : 			if( iCnt++ > MAX_LOOP ) // 비상STOP

  00144	eb 25		 jmp	 SHORT $LN17@ConvertStr@2
$LN75@ConvertStr@2:

; 522  : 			{
; 523  : 				LOG.PrintTimeAndLog(0, "%s : %d : Over Max loop : %s", __FUNCTION__, __LINE__, m_szAppendLineResult );

  00146	ff b5 b0 7e ff
	ff		 push	 DWORD PTR tv421[ebp]
  0014c	68 0b 02 00 00	 push	 523			; 0000020bH
  00151	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DINNOKCI@CSlangUtil?3?3ConvertStringWithPre@
  00156	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GHLBKHJF@?$CFs?5?3?5?$CFd?5?3?5Over?5Max?5loop?5?3?5?$CFs?$AA@
  0015b	53		 push	 ebx
  0015c	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  00162	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00168	83 c4 18	 add	 esp, 24			; 00000018H
$LN17@ConvertStr@2:

; 524  : 				break;
; 525  : 			}
; 526  : 		}
; 527  : 
; 528  : 		if( iRemovePos > 0 )

  0016b	39 9d b4 7e ff
	ff		 cmp	 DWORD PTR _iRemovePos$505325[ebp], ebx
  00171	0f 8e 08 01 00
	00		 jle	 $LN10@ConvertStr@2

; 529  : 		{
; 530  : 			if( iRemovePos < iMaxPos )

  00177	39 b5 b4 7e ff
	ff		 cmp	 DWORD PTR _iRemovePos$505325[ebp], esi
  0017d	0f 8d ec 00 00
	00		 jge	 $LN12@ConvertStr@2

; 531  : 			{
; 532  : 				int iNewLength = iMaxPos - iRemovePos;

  00183	2b b5 b4 7e ff
	ff		 sub	 esi, DWORD PTR _iRemovePos$505325[ebp]

; 533  : 				if( iNewLength >= MAX_LOOP )

  00189	3b f7		 cmp	 esi, edi
  0018b	0f 8c ae 00 00
	00		 jl	 $LN11@ConvertStr@2

; 534  : 				{
; 535  : 					// 사이즈 오버?
; 536  : 					char szError[MAX_PATH] = "";

  00191	68 03 01 00 00	 push	 259			; 00000103H
  00196	8d 85 ed fe ff
	ff		 lea	 eax, DWORD PTR _szError$505340[ebp+1]
  0019c	53		 push	 ebx
  0019d	50		 push	 eax
  0019e	88 9d ec fe ff
	ff		 mov	 BYTE PTR _szError$505340[ebp], bl
  001a4	e8 00 00 00 00	 call	 _memset
  001a9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 537  : 					sprintf( szError, "크래쉬 위험 함수 : CSlangUtil::ConvertStringWithPreLine Type A:%s - %d", g_MyInfo.GetPublicID().c_str(), iNewLength ); //Except Extracting Hangeul

  001ac	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  001b1	56		 push	 esi
  001b2	8d 48 1c	 lea	 ecx, DWORD PTR [eax+28]
  001b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  001bb	50		 push	 eax
  001bc	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szError$505340[ebp]
  001c2	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@HOHEGELP@?E?$KJ?$LH?$KB?$LN?$KM?5?$MA?$KH?G?h?5?G?T?$LM?v?5?3?5CSlangUtil?3?3C@
  001c7	50		 push	 eax
  001c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf
  001ce	83 c4 10	 add	 esp, 16			; 00000010H

; 538  : 					SP2Packet kPacket( LUPK_LOG );

  001d1	68 00 90 00 00	 push	 36864			; 00009000H
  001d6	8d 8d b8 7e ff
	ff		 lea	 ecx, DWORD PTR _kPacket$505342[ebp]
  001dc	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 539  : 					kPacket << "ClientError";  // 로그 파일 타입

  001e1	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DMGKCCIB@ClientError?$AA@
  001e6	8d 8d b8 7e ff
	ff		 lea	 ecx, DWORD PTR _kPacket$505342[ebp]
  001ec	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001f0	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@PBD@Z ; SP2Packet::operator<<

; 540  : 					kPacket << szError;

  001f5	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szError$505340[ebp]
  001fb	50		 push	 eax
  001fc	8d 8d b8 7e ff
	ff		 lea	 ecx, DWORD PTR _kPacket$505342[ebp]
  00202	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@PAD@Z ; SP2Packet::operator<<

; 541  : 					kPacket << 317;  // 오류번호:317

  00207	68 3d 01 00 00	 push	 317			; 0000013dH
  0020c	8d 8d b8 7e ff
	ff		 lea	 ecx, DWORD PTR _kPacket$505342[ebp]
  00212	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 542  : 					kPacket << true; // write db

  00217	6a 01		 push	 1
  00219	8d 8d b8 7e ff
	ff		 lea	 ecx, DWORD PTR _kPacket$505342[ebp]
  0021f	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@_N@Z ; SP2Packet::operator<<

; 543  : 					P2PNetwork::SendLog(kPacket);

  00224	8d 85 b8 7e ff
	ff		 lea	 eax, DWORD PTR _kPacket$505342[ebp]
  0022a	50		 push	 eax
  0022b	e8 00 00 00 00	 call	 ?SendLog@P2PNetwork@@YAXAAVSP2Packet@@@Z ; P2PNetwork::SendLog
  00230	59		 pop	 ecx

; 544  : 
; 545  : 				}

  00231	8d 8d b8 7e ff
	ff		 lea	 ecx, DWORD PTR _kPacket$505342[ebp]
  00237	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  0023a	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN11@ConvertStr@2:

; 546  : 				memmove( m_szAppendLineResult, m_szAppendLineResult + iRemovePos, iNewLength );

  0023f	8b 8d b4 7e ff
	ff		 mov	 ecx, DWORD PTR _iRemovePos$505325[ebp]
  00245	8b 85 ac 7e ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  0024b	56		 push	 esi
  0024c	8d 84 08 20 04
	00 00		 lea	 eax, DWORD PTR [eax+ecx+1056]
  00253	50		 push	 eax
  00254	ff b5 b0 7e ff
	ff		 push	 DWORD PTR tv421[ebp]
  0025a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove

; 547  : 				m_szAppendLineResult[iNewLength] = 0;

  00260	8b 85 ac 7e ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  00266	88 9c 30 20 04
	00 00		 mov	 BYTE PTR [eax+esi+1056], bl

; 548  : 			}
; 549  : 			else

  0026d	eb 0d		 jmp	 SHORT $LN86@ConvertStr@2
$LN12@ConvertStr@2:

; 550  : 			{
; 551  : 				memset( m_szAppendLineResult, 0, sizeof(m_szAppendLineResult) );

  0026f	57		 push	 edi
  00270	53		 push	 ebx
  00271	ff b5 b0 7e ff
	ff		 push	 DWORD PTR tv421[ebp]
  00277	e8 00 00 00 00	 call	 _memset
$LN86@ConvertStr@2:
  0027c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@ConvertStr@2:

; 552  : 			}
; 553  : 		}
; 554  : 
; 555  : 		iRemovePos = 0;
; 556  : 		iMaxPos = strlen( m_szPreChat );

  0027f	8b 85 a8 7e ff
	ff		 mov	 eax, DWORD PTR tv419[ebp]
  00285	89 9d b4 7e ff
	ff		 mov	 DWORD PTR _iRemovePos$505325[ebp], ebx
  0028b	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL79@ConvertStr@2:
  0028e	8a 08		 mov	 cl, BYTE PTR [eax]
  00290	40		 inc	 eax
  00291	3a cb		 cmp	 cl, bl
  00293	75 f9		 jne	 SHORT $LL79@ConvertStr@2
  00295	2b c6		 sub	 eax, esi
  00297	8b f0		 mov	 esi, eax

; 557  : 
; 558  : 		iCnt=0;

  00299	33 c0		 xor	 eax, eax

; 559  : 		while( iRemovePos < iMaxPos && iRemovePos < iFilteredSize )

  0029b	3b f3		 cmp	 esi, ebx
  0029d	0f 8e 52 01 00
	00		 jle	 $LN1@ConvertStr@2
$LL9@ConvertStr@2:
  002a3	8b 8d b4 7e ff
	ff		 mov	 ecx, DWORD PTR _iRemovePos$505325[ebp]
  002a9	3b 8d a4 7e ff
	ff		 cmp	 ecx, DWORD PTR _iFilteredSize$[ebp]
  002af	7d 3c		 jge	 SHORT $LN8@ConvertStr@2

; 560  : 		{
; 561  : 
; 562  : #if defined( SRC_OVERSEAS ) && !defined( SRC_ID )
; 563  : 
; 564  : #if defined( MULTI_BYTE_CHECK )
; 565  : 			if( IsDBCSLeadByteEx( COUNTRY_CODE_PAGE, (BYTE)m_szPreChat[iRemovePos] ) )
; 566  : #else
; 567  : 			if( false && IsDBCSLeadByteEx( COUNTRY_CODE_PAGE, (BYTE)m_szPreChat[iRemovePos] ) )
; 568  : #endif
; 569  : 
; 570  : #else
; 571  : 			if( IsDBCSLeadByte( (BYTE)m_szPreChat[iRemovePos] ) )
; 572  : #endif
; 573  : 
; 574  : 				iRemovePos += 2;
; 575  : 			else
; 576  : 				iRemovePos++;

  002b1	ff 85 b4 7e ff
	ff		 inc	 DWORD PTR _iRemovePos$505325[ebp]

; 577  : 
; 578  : 			if( iCnt++ > MAX_LOOP ) // 비상STOP

  002b7	8b c8		 mov	 ecx, eax
  002b9	40		 inc	 eax
  002ba	3b cf		 cmp	 ecx, edi
  002bc	7f 0a		 jg	 SHORT $LN76@ConvertStr@2

; 559  : 		while( iRemovePos < iMaxPos && iRemovePos < iFilteredSize )

  002be	39 b5 b4 7e ff
	ff		 cmp	 DWORD PTR _iRemovePos$505325[ebp], esi
  002c4	7c dd		 jl	 SHORT $LL9@ConvertStr@2

; 577  : 
; 578  : 			if( iCnt++ > MAX_LOOP ) // 비상STOP

  002c6	eb 25		 jmp	 SHORT $LN8@ConvertStr@2
$LN76@ConvertStr@2:

; 579  : 			{
; 580  : 				LOG.PrintTimeAndLog(0, "%s : %d : Over Max loop : %s", __FUNCTION__, __LINE__, m_szAppendLineResult );

  002c8	ff b5 b0 7e ff
	ff		 push	 DWORD PTR tv421[ebp]
  002ce	68 44 02 00 00	 push	 580			; 00000244H
  002d3	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DINNOKCI@CSlangUtil?3?3ConvertStringWithPre@
  002d8	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GHLBKHJF@?$CFs?5?3?5?$CFd?5?3?5Over?5Max?5loop?5?3?5?$CFs?$AA@
  002dd	53		 push	 ebx
  002de	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  002e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  002ea	83 c4 18	 add	 esp, 24			; 00000018H
$LN8@ConvertStr@2:

; 581  : 				break;
; 582  : 			}
; 583  : 		}
; 584  : 
; 585  : 		if( iRemovePos > 0 )

  002ed	39 9d b4 7e ff
	ff		 cmp	 DWORD PTR _iRemovePos$505325[ebp], ebx
  002f3	0f 8e fc 00 00
	00		 jle	 $LN1@ConvertStr@2

; 586  : 		{
; 587  : 			if( iRemovePos < iMaxPos )

  002f9	39 b5 b4 7e ff
	ff		 cmp	 DWORD PTR _iRemovePos$505325[ebp], esi
  002ff	0f 8d e0 00 00
	00		 jge	 $LN3@ConvertStr@2

; 588  : 			{
; 589  : 				int iNewLength = iMaxPos - iRemovePos;

  00305	2b b5 b4 7e ff
	ff		 sub	 esi, DWORD PTR _iRemovePos$505325[ebp]

; 590  : 				if( iNewLength >= MAX_LOOP )

  0030b	3b f7		 cmp	 esi, edi
  0030d	0f 8c ae 00 00
	00		 jl	 $LN2@ConvertStr@2

; 591  : 				{
; 592  : 					// 사이즈 오버?
; 593  : 					char szError[MAX_PATH] = "";

  00313	68 03 01 00 00	 push	 259			; 00000103H
  00318	8d 85 ed fe ff
	ff		 lea	 eax, DWORD PTR _szError$505356[ebp+1]
  0031e	53		 push	 ebx
  0031f	50		 push	 eax
  00320	88 9d ec fe ff
	ff		 mov	 BYTE PTR _szError$505356[ebp], bl
  00326	e8 00 00 00 00	 call	 _memset
  0032b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 594  : 					sprintf( szError, "크래쉬 위험 함수 : CSlangUtil::ConvertStringWithPreLine Type B:%s - %d", g_MyInfo.GetPublicID().c_str(), iNewLength ); //Except Extracting Hangeul

  0032e	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00333	56		 push	 esi
  00334	8d 48 1c	 lea	 ecx, DWORD PTR [eax+28]
  00337	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  0033d	50		 push	 eax
  0033e	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szError$505356[ebp]
  00344	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@JFEDNPLM@?E?$KJ?$LH?$KB?$LN?$KM?5?$MA?$KH?G?h?5?G?T?$LM?v?5?3?5CSlangUtil?3?3C@
  00349	50		 push	 eax
  0034a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf
  00350	83 c4 10	 add	 esp, 16			; 00000010H

; 595  : 					SP2Packet kPacket( LUPK_LOG );

  00353	68 00 90 00 00	 push	 36864			; 00009000H
  00358	8d 8d b8 7e ff
	ff		 lea	 ecx, DWORD PTR _kPacket$505358[ebp]
  0035e	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 596  : 					kPacket << "ClientError";  // 로그 파일 타입

  00363	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DMGKCCIB@ClientError?$AA@
  00368	8d 8d b8 7e ff
	ff		 lea	 ecx, DWORD PTR _kPacket$505358[ebp]
  0036e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00372	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@PBD@Z ; SP2Packet::operator<<

; 597  : 					kPacket << szError;

  00377	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szError$505356[ebp]
  0037d	50		 push	 eax
  0037e	8d 8d b8 7e ff
	ff		 lea	 ecx, DWORD PTR _kPacket$505358[ebp]
  00384	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@PAD@Z ; SP2Packet::operator<<

; 598  : 					kPacket << 317;  // 오류번호:317

  00389	68 3d 01 00 00	 push	 317			; 0000013dH
  0038e	8d 8d b8 7e ff
	ff		 lea	 ecx, DWORD PTR _kPacket$505358[ebp]
  00394	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 599  : 					kPacket << true; // write db

  00399	6a 01		 push	 1
  0039b	8d 8d b8 7e ff
	ff		 lea	 ecx, DWORD PTR _kPacket$505358[ebp]
  003a1	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@_N@Z ; SP2Packet::operator<<

; 600  : 					P2PNetwork::SendLog(kPacket);					

  003a6	8d 85 b8 7e ff
	ff		 lea	 eax, DWORD PTR _kPacket$505358[ebp]
  003ac	50		 push	 eax
  003ad	e8 00 00 00 00	 call	 ?SendLog@P2PNetwork@@YAXAAVSP2Packet@@@Z ; P2PNetwork::SendLog
  003b2	59		 pop	 ecx

; 601  : 				}

  003b3	8d 8d b8 7e ff
	ff		 lea	 ecx, DWORD PTR _kPacket$505358[ebp]
  003b9	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  003bc	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN2@ConvertStr@2:

; 602  : 				memmove( m_szPreChat, m_szPreChat + iRemovePos, iNewLength );

  003c1	8b bd ac 7e ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  003c7	8b 85 b4 7e ff
	ff		 mov	 eax, DWORD PTR _iRemovePos$505325[ebp]
  003cd	56		 push	 esi
  003ce	8d 44 07 20	 lea	 eax, DWORD PTR [edi+eax+32]
  003d2	50		 push	 eax
  003d3	ff b5 a8 7e ff
	ff		 push	 DWORD PTR tv419[ebp]
  003d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove

; 603  : 				m_szPreChat[iNewLength] = 0;

  003df	88 5c 37 20	 mov	 BYTE PTR [edi+esi+32], bl

; 604  : 			}
; 605  : 			else

  003e3	eb 0d		 jmp	 SHORT $LN87@ConvertStr@2
$LN3@ConvertStr@2:

; 606  : 			{
; 607  : 				memset( m_szPreChat, 0, sizeof(m_szPreChat) );

  003e5	57		 push	 edi
  003e6	53		 push	 ebx
  003e7	ff b5 a8 7e ff
	ff		 push	 DWORD PTR tv419[ebp]
  003ed	e8 00 00 00 00	 call	 _memset
$LN87@ConvertStr@2:
  003f2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@ConvertStr@2:

; 608  : 			}
; 609  : 		}
; 610  : 	}
; 611  : 
; 612  : 	return m_szAppendLineResult;

  003f5	53		 push	 ebx
  003f6	6a 01		 push	 1
  003f8	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _szCleanUpAppendString$[ebp]
  003fe	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00403	8b 85 b0 7e ff
	ff		 mov	 eax, DWORD PTR tv421[ebp]

; 613  : }

  00409	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0040c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00413	59		 pop	 ecx
  00414	5f		 pop	 edi
  00415	5e		 pop	 esi
  00416	5b		 pop	 ebx
  00417	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0041a	33 cd		 xor	 ecx, ebp
  0041c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00421	c9		 leave
  00422	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ConvertStringWithPreLine@CSlangUtil@@QAEPBDPBD@Z$0:
  00000	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _szCleanUpAppendString$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?ConvertStringWithPreLine@CSlangUtil@@QAEPBDPBD@Z$1:
  0000b	8d 8d b8 7e ff
	ff		 lea	 ecx, DWORD PTR _kPacket$505342[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__unwindfunclet$?ConvertStringWithPreLine@CSlangUtil@@QAEPBDPBD@Z$2:
  00016	8d 8d b8 7e ff
	ff		 lea	 ecx, DWORD PTR _kPacket$505358[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?ConvertStringWithPreLine@CSlangUtil@@QAEPBDPBD@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 8a a0 7e ff
	ff		 mov	 ecx, DWORD PTR [edx-33120]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00038	33 c8		 xor	 ecx, eax
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ConvertStringWithPreLine@CSlangUtil@@QAEPBDPBD@Z
  00044	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ConvertStringWithPreLine@CSlangUtil@@QAEPBDPBD@Z ENDP	; CSlangUtil::ConvertStringWithPreLine
PUBLIC	??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z ; std::_Cons_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z
_TEXT	SEGMENT
$T511995 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z PROC ; std::_Cons_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T511995[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN7@Cons_val:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T511995[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z ENDP ; std::_Cons_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00@Z ; std::_Move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00@Z
_TEXT	SEGMENT
__Cat$512014 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00@Z PROC ; std::_Move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$512014[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00@Z ENDP ; std::_Move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 428  : 
; 429  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00016	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LL6@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	74 37		 je	 SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  0001e	56		 push	 esi
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00025	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z ; std::_Cons_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0002a	83 45 10 1c	 add	 DWORD PTR __Dest$[ebp], 28 ; 0000001cH
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00031	83 c6 1c	 add	 esi, 28			; 0000001cH
  00034	eb e3		 jmp	 SHORT $LL6@Uninit_mov
__catch$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00036	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00039	eb 0c		 jmp	 SHORT $LN34@Uninit_mov
$LL3@Uninit_mov:

; 434  : 		_Dest_val(_Al, _Next);

  0003b	6a 01		 push	 1
  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00044	83 c6 1c	 add	 esi, 28			; 0000001cH
$LN34@Uninit_mov:

; 435  : 	_RERAISE;

  00047	6a 00		 push	 0
  00049	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  0004c	75 ed		 jne	 SHORT $LL3@Uninit_mov
  0004e	6a 00		 push	 0
  00050	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN35@Uninit_mov:
$LN4@Uninit_mov:

; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00055	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 438  : 	}

  00058	e8 00 00 00 00	 call	 __EH_epilog3
  0005d	c3		 ret	 0
$LN33@Uninit_mov:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Cat$512100 = 12					; size = 1
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00003	ff 75 0c	 push	 DWORD PTR __Cat$512100[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1271 : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
_TEXT	ENDS
PUBLIC	?erase@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$512200 = 16					; size = 1
__Cat$512177 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 03		 mov	 DWORD PTR [ebx], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 2a		 je	 SHORT $LN1@erase@2

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00017	57		 push	 edi
  00018	ff 75 10	 push	 DWORD PTR __Cat$512177[ebp]
  0001b	50		 push	 eax
  0001c	51		 push	 ecx
  0001d	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  00020	e8 00 00 00 00	 call	 ??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00025	ff 75 10	 push	 DWORD PTR __Cat$512200[ebp]
  00028	8b f8		 mov	 edi, eax
  0002a	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0002d	50		 push	 eax
  0002e	ff 76 04	 push	 DWORD PTR [esi+4]
  00031	57		 push	 edi
  00032	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00037	83 c4 20	 add	 esp, 32			; 00000020H

; 1211 : 			this->_Mylast = _Ptr;

  0003a	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  0003d	5f		 pop	 edi
$LN1@erase@2:

; 1212 : 			}
; 1213 : 		return (_First);

  0003e	5e		 pop	 esi
  0003f	8b c3		 mov	 eax, ebx
  00041	5b		 pop	 ebx

; 1214 : 		}

  00042	5d		 pop	 ebp
  00043	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::erase
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$512210 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$512210[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ
_TEXT	SEGMENT
__Cat$512234 = -4					; size = 1
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00007	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0000a	74 21		 je	 SHORT $LN10@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  00012	ff 75 fc	 push	 DWORD PTR __Cat$512234[ebp]
  00015	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00018	50		 push	 eax
  00019	ff 76 04	 push	 DWORD PTR [esi+4]
  0001c	ff 36		 push	 DWORD PTR [esi]
  0001e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00023	ff 36		 push	 DWORD PTR [esi]
  00025	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002a	83 c4 14	 add	 esp, 20			; 00000014H
$LN10@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  0002d	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00030	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  00034	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00038	5e		 pop	 esi

; 1312 : 		}

  00039	c9		 leave
  0003a	c3		 ret	 0
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
_TEXT	ENDS
PUBLIC	?clear@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ
_TEXT	SEGMENT
$T512251 = -4						; size = 4
?clear@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T512251[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear
_TEXT	ENDS
PUBLIC	??$_Umove@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAV21@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAV21@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAV21@00@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAV21@00@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	??_7CSlangUtil@@6B@				; CSlangUtil::`vftable'
PUBLIC	??0CSlangUtil@@QAE@XZ				; CSlangUtil::CSlangUtil
PUBLIC	??_R4CSlangUtil@@6B@				; CSlangUtil::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSlangUtil@@@8				; CSlangUtil `RTTI Type Descriptor'
PUBLIC	??_R3CSlangUtil@@8				; CSlangUtil::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSlangUtil@@8				; CSlangUtil::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSlangUtil@@8			; CSlangUtil::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@?$Singleton@VCSlangUtil@@@@8	; Singleton<CSlangUtil>::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AV?$Singleton@VCSlangUtil@@@@@8		; Singleton<CSlangUtil> `RTTI Type Descriptor'
PUBLIC	??_R3?$Singleton@VCSlangUtil@@@@8		; Singleton<CSlangUtil>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$Singleton@VCSlangUtil@@@@8		; Singleton<CSlangUtil>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$Singleton@VCSlangUtil@@@@8	; Singleton<CSlangUtil>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_ECSlangUtil@@UAEPAXI@Z:PROC			; CSlangUtil::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$Singleton@VCSlangUtil@@@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R1A@?0A@EA@?$Singleton@VCSlangUtil@@@@8 DD FLAT:??_R0?AV?$Singleton@VCSlangUtil@@@@@8 ; Singleton<CSlangUtil>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Singleton@VCSlangUtil@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$Singleton@VCSlangUtil@@@@8
rdata$r	SEGMENT
??_R2?$Singleton@VCSlangUtil@@@@8 DD FLAT:??_R1A@?0A@EA@?$Singleton@VCSlangUtil@@@@8 ; Singleton<CSlangUtil>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$Singleton@VCSlangUtil@@@@8
rdata$r	SEGMENT
??_R3?$Singleton@VCSlangUtil@@@@8 DD 00H		; Singleton<CSlangUtil>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$Singleton@VCSlangUtil@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$Singleton@VCSlangUtil@@@@@8
_DATA	SEGMENT
??_R0?AV?$Singleton@VCSlangUtil@@@@@8 DD FLAT:??_7type_info@@6B@ ; Singleton<CSlangUtil> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$Singleton@VCSlangUtil@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@?$Singleton@VCSlangUtil@@@@8
rdata$r	SEGMENT
??_R13?0A@EA@?$Singleton@VCSlangUtil@@@@8 DD FLAT:??_R0?AV?$Singleton@VCSlangUtil@@@@@8 ; Singleton<CSlangUtil>::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Singleton@VCSlangUtil@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSlangUtil@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSlangUtil@@8 DD FLAT:??_R0?AVCSlangUtil@@@8 ; CSlangUtil::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSlangUtil@@8
rdata$r	ENDS
;	COMDAT ??_R2CSlangUtil@@8
rdata$r	SEGMENT
??_R2CSlangUtil@@8 DD FLAT:??_R1A@?0A@EA@CSlangUtil@@8	; CSlangUtil::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@?$Singleton@VCSlangUtil@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CSlangUtil@@8
rdata$r	SEGMENT
??_R3CSlangUtil@@8 DD 00H				; CSlangUtil::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CSlangUtil@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSlangUtil@@@8
_DATA	SEGMENT
??_R0?AVCSlangUtil@@@8 DD FLAT:??_7type_info@@6B@	; CSlangUtil `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSlangUtil@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CSlangUtil@@6B@
rdata$r	SEGMENT
??_R4CSlangUtil@@6B@ DD 00H				; CSlangUtil::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSlangUtil@@@8
	DD	FLAT:??_R3CSlangUtil@@8
rdata$r	ENDS
;	COMDAT ??_7CSlangUtil@@6B@
CONST	SEGMENT
??_7CSlangUtil@@6B@ DD FLAT:??_R4CSlangUtil@@6B@	; CSlangUtil::`vftable'
	DD	FLAT:??_ECSlangUtil@@UAEPAXI@Z
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\slangutil.cpp
CONST	ENDS
;	COMDAT ??0CSlangUtil@@QAE@XZ
_TEXT	SEGMENT
??0CSlangUtil@@QAE@XZ PROC				; CSlangUtil::CSlangUtil, COMDAT
; _this$ = ecx

; 10   : {

  00000	8b c1		 mov	 eax, ecx
  00002	a3 00 00 00 00	 mov	 DWORD PTR ?ms_Singleton@?$Singleton@VCSlangUtil@@@@1PAVCSlangUtil@@A, eax ; Singleton<CSlangUtil>::ms_Singleton
  00007	33 d2		 xor	 edx, edx
  00009	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CSlangUtil@@6B@
  0000f	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00012	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00015	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00018	89 90 20 08 00
	00		 mov	 DWORD PTR [eax+2080], edx
  0001e	89 90 24 08 00
	00		 mov	 DWORD PTR [eax+2084], edx
  00024	89 90 28 08 00
	00		 mov	 DWORD PTR [eax+2088], edx
  0002a	89 90 30 08 00
	00		 mov	 DWORD PTR [eax+2096], edx
  00030	89 90 34 08 00
	00		 mov	 DWORD PTR [eax+2100], edx
  00036	89 90 38 08 00
	00		 mov	 DWORD PTR [eax+2104], edx

; 11   : 	m_iMaxString = 0;

  0003c	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 12   : 
; 13   : 	m_pFilterString = NULL;

  0003f	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 14   : 	m_pFilterMultiByteString = NULL;

  00042	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 15   : }

  00045	c3		 ret	 0
??0CSlangUtil@@QAE@XZ ENDP				; CSlangUtil::CSlangUtil
_TEXT	ENDS
PUBLIC	?ClearSlangList@CSlangUtil@@IAEXXZ		; CSlangUtil::ClearSlangList
; Function compile flags: /Ogsp
;	COMDAT ?ClearSlangList@CSlangUtil@@IAEXXZ
_TEXT	SEGMENT
$T512547 = -4						; size = 4
$T512467 = -4						; size = 4
?ClearSlangList@CSlangUtil@@IAEXXZ PROC			; CSlangUtil::ClearSlangList, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 24   : 	m_iMaxString = 0;
; 25   : 
; 26   : 	m_vString.clear();

  00008	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000b	57		 push	 edi
  0000c	33 db		 xor	 ebx, ebx
  0000e	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	50		 push	 eax
  00017	52		 push	 edx
  00018	8d 45 fc	 lea	 eax, DWORD PTR $T512467[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?erase@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::erase

; 27   : 	m_vGuildNameLimit.clear();

  00021	8d 8e 30 08 00
	00		 lea	 ecx, DWORD PTR [esi+2096]
  00027	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0002a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002c	50		 push	 eax
  0002d	52		 push	 edx
  0002e	8d 45 fc	 lea	 eax, DWORD PTR $T512547[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ?erase@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::erase

; 28   : 
; 29   : 	SAFEDELETEARRAY(m_pFilterString);

  00037	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0003a	3b c3		 cmp	 eax, ebx
  0003c	74 0a		 je	 SHORT $LN2@ClearSlang
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00044	59		 pop	 ecx
  00045	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
$LN2@ClearSlang:

; 30   : 	SAFEDELETEARRAY(m_pFilterMultiByteString);

  00048	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0004b	3b c3		 cmp	 eax, ebx
  0004d	74 0a		 je	 SHORT $LN1@ClearSlang
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00055	59		 pop	 ecx
  00056	89 5e 1c	 mov	 DWORD PTR [esi+28], ebx
$LN1@ClearSlang:

; 31   : 
; 32   : 	memset( m_szPreChat, 0, sizeof(m_szPreChat) );

  00059	bf 00 04 00 00	 mov	 edi, 1024		; 00000400H
  0005e	57		 push	 edi
  0005f	8d 46 20	 lea	 eax, DWORD PTR [esi+32]
  00062	53		 push	 ebx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _memset

; 33   : 	memset( m_szAppendLineResult, 0, sizeof(m_szAppendLineResult) );

  00069	57		 push	 edi
  0006a	53		 push	 ebx
  0006b	81 c6 20 04 00
	00		 add	 esi, 1056		; 00000420H
  00071	56		 push	 esi
  00072	e8 00 00 00 00	 call	 _memset
  00077	83 c4 18	 add	 esp, 24			; 00000018H
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx

; 34   : }

  0007d	c9		 leave
  0007e	c3		 ret	 0
?ClearSlangList@CSlangUtil@@IAEXXZ ENDP			; CSlangUtil::ClearSlangList
_TEXT	ENDS
PUBLIC	?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
__Cat$512628 = 8					; size = 1
__Ptr$507951 = 8					; size = 4
__Count$ = 8						; size = 4
?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00011	81 fb 49 92 24
	09		 cmp	 ebx, 153391689		; 09249249H
  00017	76 0b		 jbe	 SHORT $LN5@reserve@2

; 748  : 			_Xlen();	// result too long

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN42@reserve@2:
$LN5@reserve@2:

; 749  : 		else if (capacity() < _Count)

  00024	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00027	2b 06		 sub	 eax, DWORD PTR [esi]
  00029	6a 1c		 push	 28			; 0000001cH
  0002b	99		 cdq
  0002c	59		 pop	 ecx
  0002d	f7 f9		 idiv	 ecx
  0002f	3b c3		 cmp	 eax, ebx
  00031	73 73		 jae	 SHORT $LN3@reserve@2

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00033	6a 00		 push	 0
  00035	53		 push	 ebx
  00036	e8 00 00 00 00	 call	 ??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  0003b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00041	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00044	52		 push	 edx
  00045	89 45 08	 mov	 DWORD PTR __Ptr$507951[ebp], eax
  00048	ff 75 08	 push	 DWORD PTR __Ptr$507951[ebp]
  0004b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004e	50		 push	 eax
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00055	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00057	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005a	83 c4 18	 add	 esp, 24			; 00000018H
  0005d	2b c1		 sub	 eax, ecx
  0005f	6a 1c		 push	 28			; 0000001cH
  00061	99		 cdq
  00062	5f		 pop	 edi
  00063	f7 ff		 idiv	 edi
  00065	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00069	8b f8		 mov	 edi, eax
  0006b	85 c9		 test	 ecx, ecx
  0006d	74 1a		 je	 SHORT $LN37@reserve@2

; 761  : 			if (this->_Myfirst != 0)
; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  0006f	ff 75 08	 push	 DWORD PTR __Cat$512628[ebp]
  00072	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00075	50		 push	 eax
  00076	ff 76 04	 push	 DWORD PTR [esi+4]
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  0007f	ff 36		 push	 DWORD PTR [esi]
  00081	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00086	83 c4 14	 add	 esp, 20			; 00000014H
$LN37@reserve@2:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00089	8b ce		 mov	 ecx, esi
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00091	6b db 1c	 imul	 ebx, 28			; 0000001cH

; 770  : 			this->_Mylast = _Ptr + _Size;

  00094	6b ff 1c	 imul	 edi, 28			; 0000001cH
  00097	8b 45 08	 mov	 eax, DWORD PTR __Ptr$507951[ebp]
  0009a	03 d8		 add	 ebx, eax
  0009c	03 f8		 add	 edi, eax
  0009e	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  000a1	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  000a4	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve@2:

; 772  : 			}
; 773  : 		}

  000a6	e8 00 00 00 00	 call	 __EH_epilog3
  000ab	c2 04 00	 ret	 4
__catch$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000ae	ff 75 08	 push	 DWORD PTR __Ptr$507951[ebp]
  000b1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000b6	59		 pop	 ecx

; 757  : 			_RERAISE;

  000b7	6a 00		 push	 0
  000b9	6a 00		 push	 0
  000bb	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@reserve@2:
$LN41@reserve@2:
  000c0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::reserve
PUBLIC	??1CSlangUtil@@UAE@XZ				; CSlangUtil::~CSlangUtil
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
xdata$x	SEGMENT
__unwindtable$??1CSlangUtil@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CSlangUtil@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CSlangUtil@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CSlangUtil@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CSlangUtil@@UAE@XZ$3
__ehfuncinfo$??1CSlangUtil@@UAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1CSlangUtil@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\slangutil.cpp
xdata$x	ENDS
;	COMDAT ??1CSlangUtil@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CSlangUtil@@UAE@XZ PROC				; CSlangUtil::~CSlangUtil, COMDAT
; _this$ = ecx

; 18   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1CSlangUtil@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSlangUtil@@6B@
  00017	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3

; 19   : 	ClearSlangList();

  0001e	e8 00 00 00 00	 call	 ?ClearSlangList@CSlangUtil@@IAEXXZ ; CSlangUtil::ClearSlangList

; 20   : }

  00023	8d 8e 30 08 00
	00		 lea	 ecx, DWORD PTR [esi+2096]
  00029	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0002d	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
  00032	8d 8e 20 08 00
	00		 lea	 ecx, DWORD PTR [esi+2080]
  00038	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0003c	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
  00041	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00044	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00048	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
  0004d	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_Singleton@?$Singleton@VCSlangUtil@@@@1PAVCSlangUtil@@A, 0 ; Singleton<CSlangUtil>::ms_Singleton
  00054	e8 00 00 00 00	 call	 __EH_epilog3
  00059	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CSlangUtil@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$Singleton@VCSlangUtil@@@@QAE@XZ ; Singleton<CSlangUtil>::~Singleton<CSlangUtil>
__unwindfunclet$??1CSlangUtil@@UAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 08	 add	 ecx, 8
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$??1CSlangUtil@@UAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 20 08 00
	00		 add	 ecx, 2080		; 00000820H
  0001f	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$??1CSlangUtil@@UAE@XZ$3:
  00024	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	81 c1 30 08 00
	00		 add	 ecx, 2096		; 00000830H
  0002d	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__ehhandler$??1CSlangUtil@@UAE@XZ:
  00032	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00036	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00039	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CSlangUtil@@UAE@XZ
  00048	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CSlangUtil@@UAE@XZ ENDP				; CSlangUtil::~CSlangUtil
PUBLIC	?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reserve
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 1c		 push	 28			; 0000001cH
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00030	2b c1		 sub	 eax, ecx
  00032	6a 1c		 push	 28			; 0000001cH
  00034	99		 cdq
  00035	59		 pop	 ecx
  00036	f7 f9		 idiv	 ecx
  00038	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003b	3b f8		 cmp	 edi, eax
  0003d	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003f	57		 push	 edi
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEII@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Grow_to
  00047	50		 push	 eax
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::reserve
$LN1@Reserve:
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 1298 : 		}

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reserve
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GCSlangUtil@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSlangUtil@@UAEPAXI@Z PROC				; CSlangUtil::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CSlangUtil@@UAE@XZ	; CSlangUtil::~CSlangUtil
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@3
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@3:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GCSlangUtil@@UAEPAXI@Z ENDP				; CSlangUtil::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
; Function compile flags: /Ogsp
;	COMDAT ?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back, COMDAT
; _this$ = ecx

; 631  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 632  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 27		 jae	 SHORT $LN4@push_back
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 21		 ja	 SHORT $LN4@push_back

; 633  : 			{	// push back an element
; 634  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 1c		 push	 28			; 0000001cH
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 635  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back

; 636  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reserve
$LN3@push_back:

; 637  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 638  : 			_Cons_val(this->_Alval,
; 639  : 				this->_Mylast,
; 640  : 				_STD forward<_Ty>(this->_Myfirst[_Idx]));

  00031	6b ff 1c	 imul	 edi, 28			; 0000001cH
  00034	03 3e		 add	 edi, DWORD PTR [esi]

; 641  : 			++this->_Mylast;
; 642  : 			}
; 643  : 		else

  00036	eb 0e		 jmp	 SHORT $LN1@push_back
$LN4@push_back:

; 644  : 			{	// push back a non-element
; 645  : 			if (this->_Mylast == this->_Myend)

  00038	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0003b	75 09		 jne	 SHORT $LN1@push_back

; 646  : 				_Reserve(1);

  0003d	6a 01		 push	 1
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reserve
$LN1@push_back:

; 647  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 648  : 			_Cons_val(this->_Alval,
; 649  : 				this->_Mylast,
; 650  : 				_STD forward<_Ty>(_Val));

  00046	57		 push	 edi
  00047	ff 76 04	 push	 DWORD PTR [esi+4]
  0004a	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z ; std::_Cons_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 651  : 			++this->_Mylast;

  00056	83 46 04 1c	 add	 DWORD PTR [esi+4], 28	; 0000001cH
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi

; 652  : 			}
; 653  : 		}

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
_TEXT	ENDS
PUBLIC	?SetSlangData@CSlangUtil@@IAEXPBD@Z		; CSlangUtil::SetSlangData
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetSlangData@CSlangUtil@@IAEXPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetSlangData@CSlangUtil@@IAEXPBD@Z$0
__ehfuncinfo$?SetSlangData@CSlangUtil@@IAEXPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetSlangData@CSlangUtil@@IAEXPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\slangutil.cpp
xdata$x	ENDS
;	COMDAT ?SetSlangData@CSlangUtil@@IAEXPBD@Z
_TEXT	SEGMENT
$T505091 = -44						; size = 28
__$EHRec$ = -12						; size = 12
_str$ = 8						; size = 4
?SetSlangData@CSlangUtil@@IAEXPBD@Z PROC		; CSlangUtil::SetSlangData, COMDAT
; _this$ = ecx

; 37   : {	

  00000	6a 20		 push	 32			; 00000020H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?SetSlangData@CSlangUtil@@IAEXPBD@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]

; 38   : 	m_vString.push_back( std::string(str) );

  0000f	83 65 e4 00	 and	 DWORD PTR $T505091[ebp+16], 0
  00013	8b f9		 mov	 edi, ecx
  00015	50		 push	 eax
  00016	8d 4d d4	 lea	 ecx, DWORD PTR $T505091[ebp]
  00019	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T505091[ebp+20], 15 ; 0000000fH
  00020	c6 45 d4 00	 mov	 BYTE PTR $T505091[ebp], 0
  00024	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00029	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002d	8d 45 d4	 lea	 eax, DWORD PTR $T505091[ebp]
  00030	50		 push	 eax
  00031	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  00034	e8 00 00 00 00	 call	 ?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
  00039	6a 00		 push	 0
  0003b	6a 01		 push	 1
  0003d	8d 4d d4	 lea	 ecx, DWORD PTR $T505091[ebp]
  00040	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 39   : 	m_iMaxString = (int) m_vString.size();

  00045	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00048	2b 47 08	 sub	 eax, DWORD PTR [edi+8]
  0004b	6a 1c		 push	 28			; 0000001cH
  0004d	99		 cdq
  0004e	59		 pop	 ecx
  0004f	f7 f9		 idiv	 ecx
  00051	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 40   : }

  00054	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00059	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetSlangData@CSlangUtil@@IAEXPBD@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR $T505091[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?SetSlangData@CSlangUtil@@IAEXPBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetSlangData@CSlangUtil@@IAEXPBD@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetSlangData@CSlangUtil@@IAEXPBD@Z ENDP		; CSlangUtil::SetSlangData
PUBLIC	??_C@_05HHFOOOHO@?$CFs?0?$CFs?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_03LJAEFNNE@max?$AA@			; `string'
PUBLIC	_this$GSCopy$
PUBLIC	?LoadSlangData@CSlangUtil@@QAEXXZ		; CSlangUtil::LoadSlangData
EXTRN	__imp_??1ioINILoader@@QAE@XZ:PROC
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
EXTRN	__imp_??0ioINILoader@@QAE@PBD_N@Z:PROC
EXTRN	__imp__wsprintfA:PROC
;	COMDAT ??_C@_05HHFOOOHO@?$CFs?0?$CFs?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
??_C@_05HHFOOOHO@?$CFs?0?$CFs?$AA@ DB '%s,%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03LJAEFNNE@max?$AA@
CONST	SEGMENT
??_C@_03LJAEFNNE@max?$AA@ DB 'max', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadSlangData@CSlangUtil@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadSlangData@CSlangUtil@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadSlangData@CSlangUtil@@QAEXXZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadSlangData@CSlangUtil@@QAEXXZ$2
__ehfuncinfo$?LoadSlangData@CSlangUtil@@QAEXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?LoadSlangData@CSlangUtil@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\slangutil.cpp
xdata$x	ENDS
;	COMDAT ?LoadSlangData@CSlangUtil@@QAEXXZ
_TEXT	SEGMENT
_iReplaceSize$506918 = -2180				; size = 4
tv12758 = -2176						; size = 4
tv12681 = -2176						; size = 4
tv12435 = -2176						; size = 4
$T513170 = -2176					; size = 4
_this$GSCopy$ = -2172					; size = 4
_i$507117 = -2168					; size = 4
_i$506949 = -2168					; size = 4
_iSlangSize$506917 = -2168				; size = 4
_iMax$ = -2164						; size = 4
_kLoader$ = -2160					; size = 784
_szReplaceWord$506915 = -1376				; size = 260
_szKeyName$ = -1116					; size = 260
_szKeyName$507121 = -856				; size = 260
_szKeyName$506953 = -856				; size = 260
_szSlangWord$506914 = -856				; size = 260
_chSlang$ = -596					; size = 260
_szBuff$ = -336						; size = 260
__t$513753 = -76					; size = 15
__t$513503 = -76					; size = 16
__t$513366 = -76					; size = 17
__t$512999 = -72					; size = 13
__t$513229 = -68					; size = 7
___encStr$507447 = -64					; size = 3
___encStr$507286 = -64					; size = 3
___encStr$507125 = -64					; size = 3
___encStr$506957 = -64					; size = 3
___encStr$506765 = -64					; size = 3
___encStr$506601 = -52					; size = 26
___encStr$506448 = -52					; size = 29
___encStr$506295 = -52					; size = 29
___encStr$506142 = -52					; size = 29
___encStr$505989 = -52					; size = 29
___encStr$505836 = -52					; size = 29
___encStr$505684 = -52					; size = 26
___encStr$505531 = -52					; size = 29
___encStr$505377 = -52					; size = 26
$T507596 = -48						; size = 28
$T507435 = -48						; size = 28
__$EHRec$ = -12						; size = 12
?LoadSlangData@CSlangUtil@@QAEXXZ PROC			; CSlangUtil::LoadSlangData, COMDAT
; _this$ = ecx

; 621  : {

  00000	68 78 08 00 00	 push	 2168			; 00000878H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?LoadSlangData@CSlangUtil@@QAEXXZ
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b f1		 mov	 esi, ecx

; 829  : 	iMax = kLoader.LoadInt("max", 0);

  00011	89 b5 84 f7 ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  00017	e8 00 00 00 00	 call	 ?ClearSlangList@CSlangUtil@@IAEXXZ ; CSlangUtil::ClearSlangList
  0001c	33 db		 xor	 ebx, ebx
  0001e	68 03 01 00 00	 push	 259			; 00000103H
  00023	8d 85 ad fd ff
	ff		 lea	 eax, DWORD PTR _chSlang$[ebp+1]
  00029	53		 push	 ebx
  0002a	50		 push	 eax
  0002b	88 9d ac fd ff
	ff		 mov	 BYTE PTR _chSlang$[ebp], bl
  00031	e8 00 00 00 00	 call	 _memset
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLocalType@ioLocalManagerParent@@SA?AW4LocalType@1@XZ
  0003f	b9 96 e0 94 26	 mov	 ecx, 647291030		; 2694e096H
  00044	3b c1		 cmp	 eax, ecx
  00046	0f 8f 9c 01 00
	00		 jg	 $LN1440@LoadSlangD

; 622  : 	ClearSlangList();
; 623  : 	
; 624  : 	// 유럽 국가별 금칙어 추가	JCLEE 140408
; 625  : 	char	chSlang[MAX_PATH] = {0,};
; 626  : 	int		iLocal = ioLocalManager::GetLocalType();
; 627  : 
; 628  : 	switch( iLocal )

  0004c	0f 84 4b 01 00
	00		 je	 $LN1034@LoadSlangD
  00052	2d 0f fc c3 13	 sub	 eax, 331611151		; 13c3fc0fH
  00057	0f 84 f9 00 00
	00		 je	 $LN1434@LoadSlangD
  0005d	48		 dec	 eax
  0005e	0f 84 a7 00 00
	00		 je	 $LN1334@LoadSlangD
  00064	2d 84 e4 d0 12	 sub	 eax, 315679876		; 12d0e484H
  00069	74 52		 je	 SHORT $LN1234@LoadSlangD
  0006b	48		 dec	 eax
  0006c	0f 85 8b 01 00
	00		 jne	 $LN634@LoadSlangD

; 650  : 
; 651  : 	case ioLocalManager::LCT_GERMANY :
; 652  : 		{
; 653  : 			wsprintf_e( chSlang, "config/sp2_chat_slang_de.ini" );

  00072	6a 07		 push	 7
  00074	c7 45 cc 8e 83
	85 8c		 mov	 DWORD PTR ___encStr$505836[ebp], -1937407090 ; 8c85838eH
  0007b	c7 45 d0 84 8b
	c4 99		 mov	 DWORD PTR ___encStr$505836[ebp+4], -1715172476 ; 99c48b84H
  00082	c7 45 d4 9d de
	b4 89		 mov	 DWORD PTR ___encStr$505836[ebp+8], -1984635235 ; 89b4de9dH
  00089	c7 45 d8 85 8d
	9f b5		 mov	 DWORD PTR ___encStr$505836[ebp+12], -1247834747 ; b59f8d85H
  00090	c7 45 dc 9e 80
	8a 84		 mov	 DWORD PTR ___encStr$505836[ebp+16], -2071297890 ; 848a809eH
  00097	c7 45 e0 8a b3
	8f 8f		 mov	 DWORD PTR ___encStr$505836[ebp+20], -1886407798 ; 8f8fb38aH
  0009e	c7 45 e4 c3 85
	85 83		 mov	 DWORD PTR ___encStr$505836[ebp+24], -2088401469 ; 838585c3H
  000a5	8d 45 cc	 lea	 eax, DWORD PTR ___encStr$505836[ebp]
  000a8	88 5d e8	 mov	 BYTE PTR ___encStr$505836[ebp+28], bl
  000ab	59		 pop	 ecx
$LL1473@LoadSlangD:
  000ac	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000b2	83 c0 04	 add	 eax, 4
  000b5	49		 dec	 ecx
  000b6	75 f4		 jne	 SHORT $LL1473@LoadSlangD

; 654  : 			//LOG.PrintTimeAndLog( 0, "CSlangUtil::LoadSlangData(), ioLocalManager::LCT_GERMANY");
; 655  : 		}
; 656  : 		break;

  000b8	e9 60 02 00 00	 jmp	 $LN2258@LoadSlangD
$LN1234@LoadSlangD:

; 643  : 
; 644  : 	case ioLocalManager::LCT_EU :
; 645  : 		{
; 646  : 			wsprintf_e( chSlang, "config/sp2_chat_slang.ini" );

  000bd	6a 06		 push	 6
  000bf	c7 45 cc 8e 83
	85 8c		 mov	 DWORD PTR ___encStr$505684[ebp], -1937407090 ; 8c85838eH
  000c6	c7 45 d0 84 8b
	c4 99		 mov	 DWORD PTR ___encStr$505684[ebp+4], -1715172476 ; 99c48b84H
  000cd	c7 45 d4 9d de
	b4 89		 mov	 DWORD PTR ___encStr$505684[ebp+8], -1984635235 ; 89b4de9dH
  000d4	c7 45 d8 85 8d
	9f b5		 mov	 DWORD PTR ___encStr$505684[ebp+12], -1247834747 ; b59f8d85H
  000db	c7 45 dc 9e 80
	8a 84		 mov	 DWORD PTR ___encStr$505684[ebp+16], -2071297890 ; 848a809eH
  000e2	c7 45 e0 8a c2
	82 84		 mov	 DWORD PTR ___encStr$505684[ebp+20], -2071805302 ; 8482c28aH
  000e9	8d 45 cc	 lea	 eax, DWORD PTR ___encStr$505684[ebp]
  000ec	66 c7 45 e4 84
	00		 mov	 WORD PTR ___encStr$505684[ebp+24], 132 ; 00000084H
  000f2	59		 pop	 ecx
$LL1465@LoadSlangD:
  000f3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000f9	83 c0 04	 add	 eax, 4
  000fc	49		 dec	 ecx
  000fd	75 f4		 jne	 SHORT $LL1465@LoadSlangD
$LN2260@LoadSlangD:
  000ff	80 75 e4 ed	 xor	 BYTE PTR ___encStr$505684[ebp+24], -19 ; ffffffedH
  00103	8d 45 cc	 lea	 eax, DWORD PTR ___encStr$505684[ebp]

; 647  : 			//LOG.PrintTimeAndLog( 0, "CSlangUtil::LoadSlangData(), ioLocalManager::LCT_EU");
; 648  : 		}
; 649  : 		break;

  00106	e9 15 02 00 00	 jmp	 $LN2259@LoadSlangD
$LN1334@LoadSlangD:

; 636  : 
; 637  : 	case ioLocalManager::LCT_MALAYSIA :
; 638  : 		{
; 639  : 			wsprintf_e( chSlang, "config/sp2_chat_slang_my.ini" );

  0010b	6a 07		 push	 7
  0010d	c7 45 cc 8e 83
	85 8c		 mov	 DWORD PTR ___encStr$505531[ebp], -1937407090 ; 8c85838eH
  00114	c7 45 d0 84 8b
	c4 99		 mov	 DWORD PTR ___encStr$505531[ebp+4], -1715172476 ; 99c48b84H
  0011b	c7 45 d4 9d de
	b4 89		 mov	 DWORD PTR ___encStr$505531[ebp+8], -1984635235 ; 89b4de9dH
  00122	c7 45 d8 85 8d
	9f b5		 mov	 DWORD PTR ___encStr$505531[ebp+12], -1247834747 ; b59f8d85H
  00129	c7 45 dc 9e 80
	8a 84		 mov	 DWORD PTR ___encStr$505531[ebp+16], -2071297890 ; 848a809eH
  00130	c7 45 e0 8a b3
	86 93		 mov	 DWORD PTR ___encStr$505531[ebp+20], -1819888758 ; 9386b38aH
  00137	c7 45 e4 c3 85
	85 83		 mov	 DWORD PTR ___encStr$505531[ebp+24], -2088401469 ; 838585c3H
  0013e	8d 45 cc	 lea	 eax, DWORD PTR ___encStr$505531[ebp]
  00141	88 5d e8	 mov	 BYTE PTR ___encStr$505531[ebp+28], bl
  00144	59		 pop	 ecx
$LL1457@LoadSlangD:
  00145	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0014b	83 c0 04	 add	 eax, 4
  0014e	49		 dec	 ecx
  0014f	75 f4		 jne	 SHORT $LL1457@LoadSlangD

; 640  : 			//LOG.PrintTimeAndLog( 0, "CSlangUtil::LoadSlangData(), ioLocalManager::LCT_EU");
; 641  : 		}
; 642  : 		break;

  00151	e9 c7 01 00 00	 jmp	 $LN2258@LoadSlangD
$LN1434@LoadSlangD:

; 629  : 	{
; 630  : 	case ioLocalManager::LCT_SINGAPORE :
; 631  : 		{
; 632  : 			wsprintf_e( chSlang, "config/sp2_chat_slang.ini" );

  00156	6a 06		 push	 6
  00158	c7 45 cc 8e 83
	85 8c		 mov	 DWORD PTR ___encStr$505377[ebp], -1937407090 ; 8c85838eH
  0015f	c7 45 d0 84 8b
	c4 99		 mov	 DWORD PTR ___encStr$505377[ebp+4], -1715172476 ; 99c48b84H
  00166	c7 45 d4 9d de
	b4 89		 mov	 DWORD PTR ___encStr$505377[ebp+8], -1984635235 ; 89b4de9dH
  0016d	c7 45 d8 85 8d
	9f b5		 mov	 DWORD PTR ___encStr$505377[ebp+12], -1247834747 ; b59f8d85H
  00174	c7 45 dc 9e 80
	8a 84		 mov	 DWORD PTR ___encStr$505377[ebp+16], -2071297890 ; 848a809eH
  0017b	c7 45 e0 8a c2
	82 84		 mov	 DWORD PTR ___encStr$505377[ebp+20], -2071805302 ; 8482c28aH
  00182	8d 45 cc	 lea	 eax, DWORD PTR ___encStr$505377[ebp]
  00185	66 c7 45 e4 84
	00		 mov	 WORD PTR ___encStr$505377[ebp+24], 132 ; 00000084H
  0018b	59		 pop	 ecx
$LL1449@LoadSlangD:
  0018c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00192	83 c0 04	 add	 eax, 4
  00195	49		 dec	 ecx
  00196	75 f4		 jne	 SHORT $LL1449@LoadSlangD

; 633  : 			//LOG.PrintTimeAndLog( 0, "CSlangUtil::LoadSlangData(), ioLocalManager::LCT_EU");
; 634  : 		}
; 635  : 		break;

  00198	e9 62 ff ff ff	 jmp	 $LN2260@LoadSlangD
$LN1034@LoadSlangD:

; 657  : 
; 658  : 	case ioLocalManager::LCT_FRANCE :
; 659  : 		{
; 660  : 			wsprintf_e( chSlang, "config/sp2_chat_slang_fr.ini" );

  0019d	6a 07		 push	 7
  0019f	c7 45 cc 8e 83
	85 8c		 mov	 DWORD PTR ___encStr$505989[ebp], -1937407090 ; 8c85838eH
  001a6	c7 45 d0 84 8b
	c4 99		 mov	 DWORD PTR ___encStr$505989[ebp+4], -1715172476 ; 99c48b84H
  001ad	c7 45 d4 9d de
	b4 89		 mov	 DWORD PTR ___encStr$505989[ebp+8], -1984635235 ; 89b4de9dH
  001b4	c7 45 d8 85 8d
	9f b5		 mov	 DWORD PTR ___encStr$505989[ebp+12], -1247834747 ; b59f8d85H
  001bb	c7 45 dc 9e 80
	8a 84		 mov	 DWORD PTR ___encStr$505989[ebp+16], -2071297890 ; 848a809eH
  001c2	c7 45 e0 8a b3
	8d 98		 mov	 DWORD PTR ___encStr$505989[ebp+20], -1735543926 ; 988db38aH
  001c9	c7 45 e4 c3 85
	85 83		 mov	 DWORD PTR ___encStr$505989[ebp+24], -2088401469 ; 838585c3H
  001d0	8d 45 cc	 lea	 eax, DWORD PTR ___encStr$505989[ebp]
  001d3	88 5d e8	 mov	 BYTE PTR ___encStr$505989[ebp+28], bl
  001d6	59		 pop	 ecx
$LL1481@LoadSlangD:
  001d7	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001dd	83 c0 04	 add	 eax, 4
  001e0	49		 dec	 ecx
  001e1	75 f4		 jne	 SHORT $LL1481@LoadSlangD

; 661  : 			//LOG.PrintTimeAndLog( 0, "CSlangUtil::LoadSlangData(), ioLocalManager::LCT_FRANCE");
; 662  : 		}
; 663  : 		break;

  001e3	e9 35 01 00 00	 jmp	 $LN2258@LoadSlangD
$LN1440@LoadSlangD:

; 622  : 	ClearSlangList();
; 623  : 	
; 624  : 	// 유럽 국가별 금칙어 추가	JCLEE 140408
; 625  : 	char	chSlang[MAX_PATH] = {0,};
; 626  : 	int		iLocal = ioLocalManager::GetLocalType();
; 627  : 
; 628  : 	switch( iLocal )

  001e8	2d 97 e0 94 26	 sub	 eax, 647291031		; 2694e097H
  001ed	0f 84 e4 00 00
	00		 je	 $LN934@LoadSlangD
  001f3	48		 dec	 eax
  001f4	0f 84 95 00 00
	00		 je	 $LN834@LoadSlangD
  001fa	48		 dec	 eax
  001fb	74 47		 je	 SHORT $LN734@LoadSlangD
$LN634@LoadSlangD:

; 685  : 
; 686  : 	default:
; 687  : 		{
; 688  : 			wsprintf_e( chSlang, "config/sp2_chat_slang.ini" );

  001fd	6a 06		 push	 6
  001ff	c7 45 cc 8e 83
	85 8c		 mov	 DWORD PTR ___encStr$506601[ebp], -1937407090 ; 8c85838eH
  00206	c7 45 d0 84 8b
	c4 99		 mov	 DWORD PTR ___encStr$506601[ebp+4], -1715172476 ; 99c48b84H
  0020d	c7 45 d4 9d de
	b4 89		 mov	 DWORD PTR ___encStr$506601[ebp+8], -1984635235 ; 89b4de9dH
  00214	c7 45 d8 85 8d
	9f b5		 mov	 DWORD PTR ___encStr$506601[ebp+12], -1247834747 ; b59f8d85H
  0021b	c7 45 dc 9e 80
	8a 84		 mov	 DWORD PTR ___encStr$506601[ebp+16], -2071297890 ; 848a809eH
  00222	c7 45 e0 8a c2
	82 84		 mov	 DWORD PTR ___encStr$506601[ebp+20], -2071805302 ; 8482c28aH
  00229	8d 45 cc	 lea	 eax, DWORD PTR ___encStr$506601[ebp]
  0022c	66 c7 45 e4 84
	00		 mov	 WORD PTR ___encStr$506601[ebp+24], 132 ; 00000084H
  00232	59		 pop	 ecx
$LL1513@LoadSlangD:
  00233	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00239	83 c0 04	 add	 eax, 4
  0023c	49		 dec	 ecx
  0023d	75 f4		 jne	 SHORT $LL1513@LoadSlangD

; 689  : 			//LOG.PrintTimeAndLog( 0, "CSlangUtil::LoadSlangData(), ioLocalManager:: %d", ioLocalManager::GetLocalType() );
; 690  : 		}
; 691  : 		break;

  0023f	e9 bb fe ff ff	 jmp	 $LN2260@LoadSlangD
$LN734@LoadSlangD:

; 678  : 
; 679  : 	case ioLocalManager::LCT_TURKEY :
; 680  : 		{
; 681  : 			wsprintf_e( chSlang, "config/sp2_chat_slang_tr.ini" );

  00244	6a 07		 push	 7
  00246	c7 45 cc 8e 83
	85 8c		 mov	 DWORD PTR ___encStr$506448[ebp], -1937407090 ; 8c85838eH
  0024d	c7 45 d0 84 8b
	c4 99		 mov	 DWORD PTR ___encStr$506448[ebp+4], -1715172476 ; 99c48b84H
  00254	c7 45 d4 9d de
	b4 89		 mov	 DWORD PTR ___encStr$506448[ebp+8], -1984635235 ; 89b4de9dH
  0025b	c7 45 d8 85 8d
	9f b5		 mov	 DWORD PTR ___encStr$506448[ebp+12], -1247834747 ; b59f8d85H
  00262	c7 45 dc 9e 80
	8a 84		 mov	 DWORD PTR ___encStr$506448[ebp+16], -2071297890 ; 848a809eH
  00269	c7 45 e0 8a b3
	9f 98		 mov	 DWORD PTR ___encStr$506448[ebp+20], -1734364278 ; 989fb38aH
  00270	c7 45 e4 c3 85
	85 83		 mov	 DWORD PTR ___encStr$506448[ebp+24], -2088401469 ; 838585c3H
  00277	8d 45 cc	 lea	 eax, DWORD PTR ___encStr$506448[ebp]
  0027a	88 5d e8	 mov	 BYTE PTR ___encStr$506448[ebp+28], bl
  0027d	59		 pop	 ecx
$LL1505@LoadSlangD:
  0027e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00284	83 c0 04	 add	 eax, 4
  00287	49		 dec	 ecx
  00288	75 f4		 jne	 SHORT $LL1505@LoadSlangD

; 682  : 			//LOG.PrintTimeAndLog( 0, "CSlangUtil::LoadSlangData(), ioLocalManager::LCT_TURKEY");
; 683  : 		}
; 684  : 		break;

  0028a	e9 8e 00 00 00	 jmp	 $LN2258@LoadSlangD
$LN834@LoadSlangD:

; 668  : 			//LOG.PrintTimeAndLog( 0, "CSlangUtil::LoadSlangData(), ioLocalManager::LCT_ITALIA");
; 669  : 		}
; 670  : 		break;
; 671  : 
; 672  : 	case ioLocalManager::LCT_POLAND :
; 673  : 		{
; 674  : 			wsprintf_e( chSlang, "config/sp2_chat_slang_pl.ini" );

  0028f	6a 07		 push	 7
  00291	c7 45 cc 8e 83
	85 8c		 mov	 DWORD PTR ___encStr$506295[ebp], -1937407090 ; 8c85838eH
  00298	c7 45 d0 84 8b
	c4 99		 mov	 DWORD PTR ___encStr$506295[ebp+4], -1715172476 ; 99c48b84H
  0029f	c7 45 d4 9d de
	b4 89		 mov	 DWORD PTR ___encStr$506295[ebp+8], -1984635235 ; 89b4de9dH
  002a6	c7 45 d8 85 8d
	9f b5		 mov	 DWORD PTR ___encStr$506295[ebp+12], -1247834747 ; b59f8d85H
  002ad	c7 45 dc 9e 80
	8a 84		 mov	 DWORD PTR ___encStr$506295[ebp+16], -2071297890 ; 848a809eH
  002b4	c7 45 e0 8a b3
	9b 86		 mov	 DWORD PTR ___encStr$506295[ebp+20], -2036616310 ; 869bb38aH
  002bb	c7 45 e4 c3 85
	85 83		 mov	 DWORD PTR ___encStr$506295[ebp+24], -2088401469 ; 838585c3H
  002c2	8d 45 cc	 lea	 eax, DWORD PTR ___encStr$506295[ebp]
  002c5	88 5d e8	 mov	 BYTE PTR ___encStr$506295[ebp+28], bl
  002c8	59		 pop	 ecx
$LL1497@LoadSlangD:
  002c9	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002cf	83 c0 04	 add	 eax, 4
  002d2	49		 dec	 ecx
  002d3	75 f4		 jne	 SHORT $LL1497@LoadSlangD

; 675  : 			//LOG.PrintTimeAndLog( 0, "CSlangUtil::LoadSlangData(), ioLocalManager::LCT_POLAND");
; 676  : 		}
; 677  : 		break;

  002d5	eb 46		 jmp	 SHORT $LN2258@LoadSlangD
$LN934@LoadSlangD:

; 664  : 
; 665  : 	case ioLocalManager::LCT_ITALIA :
; 666  : 		{
; 667  : 			wsprintf_e( chSlang, "config/sp2_chat_slang_it.ini" );

  002d7	6a 07		 push	 7
  002d9	c7 45 cc 8e 83
	85 8c		 mov	 DWORD PTR ___encStr$506142[ebp], -1937407090 ; 8c85838eH
  002e0	c7 45 d0 84 8b
	c4 99		 mov	 DWORD PTR ___encStr$506142[ebp+4], -1715172476 ; 99c48b84H
  002e7	c7 45 d4 9d de
	b4 89		 mov	 DWORD PTR ___encStr$506142[ebp+8], -1984635235 ; 89b4de9dH
  002ee	c7 45 d8 85 8d
	9f b5		 mov	 DWORD PTR ___encStr$506142[ebp+12], -1247834747 ; b59f8d85H
  002f5	c7 45 dc 9e 80
	8a 84		 mov	 DWORD PTR ___encStr$506142[ebp+16], -2071297890 ; 848a809eH
  002fc	c7 45 e0 8a b3
	82 9e		 mov	 DWORD PTR ___encStr$506142[ebp+20], -1635601526 ; 9e82b38aH
  00303	c7 45 e4 c3 85
	85 83		 mov	 DWORD PTR ___encStr$506142[ebp+24], -2088401469 ; 838585c3H
  0030a	8d 45 cc	 lea	 eax, DWORD PTR ___encStr$506142[ebp]
  0030d	88 5d e8	 mov	 BYTE PTR ___encStr$506142[ebp+28], bl
  00310	59		 pop	 ecx
$LL1489@LoadSlangD:
  00311	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00317	83 c0 04	 add	 eax, 4
  0031a	49		 dec	 ecx
  0031b	75 f4		 jne	 SHORT $LL1489@LoadSlangD
$LN2258@LoadSlangD:
  0031d	8d 45 cc	 lea	 eax, DWORD PTR ___encStr$506142[ebp]
$LN2259@LoadSlangD:
  00320	50		 push	 eax
  00321	8d 85 ac fd ff
	ff		 lea	 eax, DWORD PTR _chSlang$[ebp]
  00327	50		 push	 eax
  00328	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  0032e	59		 pop	 ecx
  0032f	59		 pop	 ecx

; 692  : 	}	
; 693  : 	
; 694  : 	ioINILoader kLoader( chSlang );

  00330	6a 01		 push	 1
  00332	8d 85 ac fd ff
	ff		 lea	 eax, DWORD PTR _chSlang$[ebp]
  00338	50		 push	 eax
  00339	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  0033f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioINILoader@@QAE@PBD_N@Z
  00345	6a 03		 push	 3
  00347	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 695  : 
; 696  : 	kLoader.SetTitle_e("slang_normal");

  0034a	c7 45 b8 9e 80
	8a 84		 mov	 DWORD PTR __t$512999[ebp], -2071297890 ; 848a809eH
  00351	c7 45 bc 8a b3
	85 85		 mov	 DWORD PTR __t$512999[ebp+4], -2054835318 ; 8585b38aH
  00358	c7 45 c0 9f 81
	8a 86		 mov	 DWORD PTR __t$512999[ebp+8], -2037743201 ; 868a819fH
  0035f	8d 45 b8	 lea	 eax, DWORD PTR __t$512999[ebp]
  00362	88 5d c4	 mov	 BYTE PTR __t$512999[ebp+12], bl
  00365	59		 pop	 ecx
$LL1619@LoadSlangD:
  00366	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0036c	83 c0 04	 add	 eax, 4
  0036f	49		 dec	 ecx
  00370	75 f4		 jne	 SHORT $LL1619@LoadSlangD
  00372	8d 45 b8	 lea	 eax, DWORD PTR __t$512999[ebp]
  00375	50		 push	 eax
  00376	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  0037c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitle@ioINILoader@@QAEXPBD@Z

; 697  : 	int iMax = kLoader.LoadInt("max", 0);

  00382	53		 push	 ebx
  00383	68 00 00 00 00	 push	 OFFSET ??_C@_03LJAEFNNE@max?$AA@
  00388	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  0038e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 698  : 
; 699  : 	char szBuff[MAX_PATH];
; 700  : 	char szKeyName[MAX_PATH];
; 701  : 	m_vString.clear();

  00394	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00397	8b 11		 mov	 edx, DWORD PTR [ecx]
  00399	89 85 8c f7 ff
	ff		 mov	 DWORD PTR _iMax$[ebp], eax
  0039f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  003a2	50		 push	 eax
  003a3	52		 push	 edx
  003a4	8d 85 80 f7 ff
	ff		 lea	 eax, DWORD PTR $T513170[ebp]
  003aa	50		 push	 eax
  003ab	e8 00 00 00 00	 call	 ?erase@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::erase

; 702  : 	int i = 0;
; 703  : 	for(i = 0; i < iMax; i++)

  003b0	33 f6		 xor	 esi, esi
  003b2	39 9d 8c f7 ff
	ff		 cmp	 DWORD PTR _iMax$[ebp], ebx
  003b8	0f 8e c4 01 00
	00		 jle	 $LN2188@LoadSlangD
$LN535@LoadSlangD:

; 704  : 	{
; 705  : 		memset(szBuff, 0, sizeof(szBuff));

  003be	bf 04 01 00 00	 mov	 edi, 260		; 00000104H
  003c3	57		 push	 edi
  003c4	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuff$[ebp]
  003ca	53		 push	 ebx
  003cb	50		 push	 eax
  003cc	e8 00 00 00 00	 call	 _memset

; 706  : 		memset(szKeyName, 0, sizeof(szKeyName));

  003d1	57		 push	 edi
  003d2	8d 85 a4 fb ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  003d8	53		 push	 ebx
  003d9	50		 push	 eax
  003da	e8 00 00 00 00	 call	 _memset
  003df	83 c4 18	 add	 esp, 24			; 00000018H

; 707  : 
; 708  : 		wsprintf_e(szKeyName, "%d", i+1);

  003e2	66 c7 45 c0 c8
	88		 mov	 WORD PTR ___encStr$506765[ebp], 35016 ; 000088c8H
  003e8	88 5d c2	 mov	 BYTE PTR ___encStr$506765[ebp+2], bl
  003eb	33 ff		 xor	 edi, edi
$LL1642@LoadSlangD:
  003ed	8b c7		 mov	 eax, edi
  003ef	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  003f4	79 05		 jns	 SHORT $LN2250@LoadSlangD
  003f6	48		 dec	 eax
  003f7	83 c8 fc	 or	 eax, -4			; fffffffcH
  003fa	40		 inc	 eax
$LN2250@LoadSlangD:
  003fb	b1 ed		 mov	 cl, -19			; ffffffedH
  003fd	2a c8		 sub	 cl, al
  003ff	30 4c 3d c0	 xor	 BYTE PTR ___encStr$506765[ebp+edi], cl
  00403	47		 inc	 edi
  00404	83 ff 02	 cmp	 edi, 2
  00407	7c e4		 jl	 SHORT $LL1642@LoadSlangD
  00409	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0040c	50		 push	 eax
  0040d	89 85 80 f7 ff
	ff		 mov	 DWORD PTR tv12435[ebp], eax
  00413	8d 45 c0	 lea	 eax, DWORD PTR ___encStr$506765[ebp]
  00416	50		 push	 eax
  00417	8d 85 a4 fb ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  0041d	50		 push	 eax
  0041e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00424	83 c4 0c	 add	 esp, 12			; 0000000cH

; 709  : 		kLoader.LoadString(szKeyName, "", szBuff, sizeof(szBuff));

  00427	68 04 01 00 00	 push	 260			; 00000104H
  0042c	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuff$[ebp]
  00432	50		 push	 eax
  00433	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00438	57		 push	 edi
  00439	8d 85 a4 fb ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  0043f	50		 push	 eax
  00440	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  00446	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 710  : 		if(!strcmp(szBuff, ""))

  0044c	33 c9		 xor	 ecx, ecx
  0044e	41		 inc	 ecx
  0044f	8d b5 b0 fe ff
	ff		 lea	 esi, DWORD PTR _szBuff$[ebp]
  00455	33 c0		 xor	 eax, eax
  00457	f3 a6		 repe cmpsb
  00459	74 05		 je	 SHORT $LN2241@LoadSlangD
  0045b	1b c0		 sbb	 eax, eax
  0045d	83 d8 ff	 sbb	 eax, -1
$LN2241@LoadSlangD:
  00460	3b c3		 cmp	 eax, ebx
  00462	0f 84 1a 01 00
	00		 je	 $LN2188@LoadSlangD

; 711  : 			break;
; 712  : 
; 713  : 		// 욕과 변경할 단어의 크기를 통일시킨다.
; 714  : 		char szSlangWord[MAX_PATH];
; 715  : 		char szReplaceWord[MAX_PATH];
; 716  : 		memset(szSlangWord, 0, sizeof(szSlangWord));

  00468	be 04 01 00 00	 mov	 esi, 260		; 00000104H
  0046d	56		 push	 esi
  0046e	8d 85 a8 fc ff
	ff		 lea	 eax, DWORD PTR _szSlangWord$506914[ebp]
  00474	53		 push	 ebx
  00475	50		 push	 eax
  00476	e8 00 00 00 00	 call	 _memset

; 717  : 		memset(szReplaceWord, 0, sizeof(szReplaceWord));

  0047b	56		 push	 esi
  0047c	8d 85 a0 fa ff
	ff		 lea	 eax, DWORD PTR _szReplaceWord$506915[ebp]
  00482	53		 push	 ebx
  00483	50		 push	 eax
  00484	e8 00 00 00 00	 call	 _memset

; 718  : 
; 719  : 		char *lptr = szBuff;
; 720  : 		lptr = GetField(lptr, ',', szSlangWord);		// get the first field	

  00489	8b 8d 84 f7 ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0048f	83 c4 18	 add	 esp, 24			; 00000018H
  00492	8d 85 a8 fc ff
	ff		 lea	 eax, DWORD PTR _szSlangWord$506914[ebp]
  00498	50		 push	 eax
  00499	6a 2c		 push	 44			; 0000002cH
  0049b	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuff$[ebp]
  004a1	50		 push	 eax
  004a2	e8 00 00 00 00	 call	 ?GetField@CSlangUtil@@IAEPADPBDHPAD@Z ; CSlangUtil::GetField

; 721  : 		lptr = GetField(lptr, ',', szReplaceWord);	// get the second field

  004a7	8d 8d a0 fa ff
	ff		 lea	 ecx, DWORD PTR _szReplaceWord$506915[ebp]
  004ad	51		 push	 ecx
  004ae	8b 8d 84 f7 ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  004b4	6a 2c		 push	 44			; 0000002cH
  004b6	50		 push	 eax
  004b7	e8 00 00 00 00	 call	 ?GetField@CSlangUtil@@IAEPADPBDHPAD@Z ; CSlangUtil::GetField

; 722  : 
; 723  : 		int iSlangSize = 0;
; 724  : 		int iReplaceSize = 0;
; 725  : 		StringCbLength(szSlangWord, sizeof(szSlangWord), (size_t *)&iSlangSize);

  004bc	8d 85 88 f7 ff
	ff		 lea	 eax, DWORD PTR _iSlangSize$506917[ebp]
  004c2	50		 push	 eax
  004c3	56		 push	 esi
  004c4	8d 85 a8 fc ff
	ff		 lea	 eax, DWORD PTR _szSlangWord$506914[ebp]
  004ca	50		 push	 eax
  004cb	89 9d 88 f7 ff
	ff		 mov	 DWORD PTR _iSlangSize$506917[ebp], ebx
  004d1	89 9d 7c f7 ff
	ff		 mov	 DWORD PTR _iReplaceSize$506918[ebp], ebx
  004d7	e8 00 00 00 00	 call	 ?StringCbLengthA@@YGJPBDIPAI@Z ; StringCbLengthA

; 726  : 		StringCbLength(szReplaceWord, sizeof(szReplaceWord), (size_t *)&iReplaceSize);

  004dc	8d 85 7c f7 ff
	ff		 lea	 eax, DWORD PTR _iReplaceSize$506918[ebp]
  004e2	50		 push	 eax
  004e3	56		 push	 esi
  004e4	8d 85 a0 fa ff
	ff		 lea	 eax, DWORD PTR _szReplaceWord$506915[ebp]
  004ea	50		 push	 eax
  004eb	e8 00 00 00 00	 call	 ?StringCbLengthA@@YGJPBDIPAI@Z ; StringCbLengthA

; 727  : 
; 728  : 		if(iSlangSize != iReplaceSize)

  004f0	8b 85 88 f7 ff
	ff		 mov	 eax, DWORD PTR _iSlangSize$506917[ebp]
  004f6	8b 8d 7c f7 ff
	ff		 mov	 ecx, DWORD PTR _iReplaceSize$506918[ebp]
  004fc	3b c1		 cmp	 eax, ecx
  004fe	74 2d		 je	 SHORT $LN426@LoadSlangD

; 729  : 		{
; 730  : 			if(iSlangSize > iReplaceSize)

  00500	7e 13		 jle	 SHORT $LN431@LoadSlangD

; 731  : 			{
; 732  : 				for (int i = 0; i < iSlangSize - iReplaceSize ; i++)

  00502	2b c1		 sub	 eax, ecx
  00504	3b c3		 cmp	 eax, ebx
  00506	7e 25		 jle	 SHORT $LN426@LoadSlangD
  00508	50		 push	 eax
  00509	8d 8c 0d a0 fa
	ff ff		 lea	 ecx, DWORD PTR _szReplaceWord$506915[ebp+ecx]
  00510	6a 20		 push	 32			; 00000020H
  00512	51		 push	 ecx

; 733  : 					szReplaceWord[iReplaceSize+i] = ' ';
; 734  : 			}
; 735  : 			else

  00513	eb 10		 jmp	 SHORT $LN2261@LoadSlangD
$LN431@LoadSlangD:

; 736  : 			{
; 737  : 				for (int i = 0; i < iReplaceSize - iSlangSize ; i++)

  00515	2b c8		 sub	 ecx, eax
  00517	3b cb		 cmp	 ecx, ebx
  00519	7e 12		 jle	 SHORT $LN426@LoadSlangD
  0051b	51		 push	 ecx
  0051c	8d 84 05 a0 fa
	ff ff		 lea	 eax, DWORD PTR _szReplaceWord$506915[ebp+eax]
  00523	53		 push	 ebx
  00524	50		 push	 eax
$LN2261@LoadSlangD:
  00525	e8 00 00 00 00	 call	 _memset
  0052a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN426@LoadSlangD:

; 738  : 					szReplaceWord[iSlangSize+i] = NULL;
; 739  : 				
; 740  : 				iReplaceSize-=(iReplaceSize - iSlangSize);
; 741  : 				// 마지막 글자가 한글의 시작 바이트라면 한글을 삭제함
; 742  : 				for (int i = 0; i < iReplaceSize ; i++)
; 743  : 				{
; 744  : 
; 745  : #if defined( SRC_OVERSEAS ) && !defined( SRC_ID )
; 746  : 
; 747  : #if defined( MULTI_BYTE_CHECK )
; 748  : 					if( IsDBCSLeadByteEx( COUNTRY_CODE_PAGE, szReplaceWord[i] ) )
; 749  : #else
; 750  : 					if( false && IsDBCSLeadByteEx( COUNTRY_CODE_PAGE, szReplaceWord[i] ) ) 
; 751  : #endif
; 752  : 
; 753  : #else
; 754  : 					if( IsDBCSLeadByte(szReplaceWord[i]) ) 
; 755  : #endif
; 756  : 
; 757  : 					{
; 758  : 						i++;
; 759  : 						if(iReplaceSize <= i)
; 760  : 							szReplaceWord[i-1] = ' ';
; 761  : 					}
; 762  : 				}
; 763  : 			}
; 764  : 		}
; 765  : 		memset(szBuff, 0, sizeof(szBuff));

  0052d	56		 push	 esi
  0052e	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuff$[ebp]
  00534	53		 push	 ebx
  00535	50		 push	 eax
  00536	e8 00 00 00 00	 call	 _memset

; 766  : 		StringCbPrintf(szBuff, sizeof(szBuff), "%s,%s", szSlangWord, szReplaceWord);

  0053b	8d 85 a0 fa ff
	ff		 lea	 eax, DWORD PTR _szReplaceWord$506915[ebp]
  00541	50		 push	 eax
  00542	8d 85 a8 fc ff
	ff		 lea	 eax, DWORD PTR _szSlangWord$506914[ebp]
  00548	50		 push	 eax
  00549	68 00 00 00 00	 push	 OFFSET ??_C@_05HHFOOOHO@?$CFs?0?$CFs?$AA@
  0054e	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuff$[ebp]
  00554	56		 push	 esi
  00555	50		 push	 eax
  00556	e8 00 00 00 00	 call	 ?StringCbPrintfA@@YAJPADIPBDZZ ; StringCbPrintfA

; 767  : 		//
; 768  : 
; 769  : 		SetSlangData(szBuff);

  0055b	8b 8d 84 f7 ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00561	83 c4 20	 add	 esp, 32			; 00000020H
  00564	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuff$[ebp]
  0056a	50		 push	 eax
  0056b	e8 00 00 00 00	 call	 ?SetSlangData@CSlangUtil@@IAEXPBD@Z ; CSlangUtil::SetSlangData
  00570	8b b5 80 f7 ff
	ff		 mov	 esi, DWORD PTR tv12435[ebp]
  00576	3b b5 8c f7 ff
	ff		 cmp	 esi, DWORD PTR _iMax$[ebp]
  0057c	0f 8c 3c fe ff
	ff		 jl	 $LN535@LoadSlangD
$LN2188@LoadSlangD:

; 770  : 	}
; 771  : 
; 772  : 	// filter
; 773  : 	kLoader.SetTitle_e("filter");

  00582	6a 04		 push	 4
  00584	c7 45 bc 8b 85
	87 9e		 mov	 DWORD PTR __t$513229[ebp], -1635285621 ; 9e87858bH
  0058b	81 75 bc ed ec
	eb ea		 xor	 DWORD PTR __t$513229[ebp], -353637139 ; eaebecedH
  00592	66 c7 45 c0 88
	9e		 mov	 WORD PTR __t$513229[ebp+4], 40584 ; 00009e88H
  00598	88 5d c2	 mov	 BYTE PTR __t$513229[ebp+6], bl
  0059b	5e		 pop	 esi
$LL1748@LoadSlangD:
  0059c	8b c6		 mov	 eax, esi
  0059e	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  005a3	79 05		 jns	 SHORT $LN2251@LoadSlangD
  005a5	48		 dec	 eax
  005a6	83 c8 fc	 or	 eax, -4			; fffffffcH
  005a9	40		 inc	 eax
$LN2251@LoadSlangD:
  005aa	b1 ed		 mov	 cl, -19			; ffffffedH
  005ac	2a c8		 sub	 cl, al
  005ae	30 4c 35 bc	 xor	 BYTE PTR __t$513229[ebp+esi], cl
  005b2	46		 inc	 esi
  005b3	83 fe 06	 cmp	 esi, 6
  005b6	7c e4		 jl	 SHORT $LL1748@LoadSlangD
  005b8	8d 45 bc	 lea	 eax, DWORD PTR __t$513229[ebp]
  005bb	50		 push	 eax
  005bc	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  005c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitle@ioINILoader@@QAEXPBD@Z

; 774  : 	iMax = kLoader.LoadInt( "max", 0);

  005c8	53		 push	 ebx
  005c9	68 00 00 00 00	 push	 OFFSET ??_C@_03LJAEFNNE@max?$AA@
  005ce	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  005d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  005da	89 85 8c f7 ff
	ff		 mov	 DWORD PTR _iMax$[ebp], eax

; 775  : 	if( iMax != 0 && iMax <= MAX_FILTER )

  005e0	3b c3		 cmp	 eax, ebx
  005e2	0f 84 f2 00 00
	00		 je	 $LN2246@LoadSlangD
  005e8	83 f8 64	 cmp	 eax, 100		; 00000064H
  005eb	0f 8f e9 00 00
	00		 jg	 $LN2246@LoadSlangD

; 776  : 	{
; 777  : 		SAFEDELETEARRAY(m_pFilterString);

  005f1	8b b5 84 f7 ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  005f7	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  005fa	3b c3		 cmp	 eax, ebx
  005fc	74 0a		 je	 SHORT $LN417@LoadSlangD
  005fe	50		 push	 eax
  005ff	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00604	59		 pop	 ecx
  00605	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
$LN417@LoadSlangD:

; 778  : 		m_pFilterString = new char[iMax+1];

  00608	8b bd 8c f7 ff
	ff		 mov	 edi, DWORD PTR _iMax$[ebp]
  0060e	47		 inc	 edi
  0060f	57		 push	 edi
  00610	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 779  : 		memset(m_pFilterString, 0, iMax+1);

  00615	57		 push	 edi
  00616	53		 push	 ebx
  00617	50		 push	 eax
  00618	89 46 18	 mov	 DWORD PTR [esi+24], eax
  0061b	e8 00 00 00 00	 call	 _memset
  00620	83 c4 10	 add	 esp, 16			; 00000010H

; 780  : 
; 781  : 		if( m_pFilterString == NULL ) return;

  00623	39 5e 18	 cmp	 DWORD PTR [esi+24], ebx
  00626	0f 84 ef 04 00
	00		 je	 $LN2190@LoadSlangD

; 782  : 		for (int i = 0; i < iMax ; i++)

  0062c	89 9d 88 f7 ff
	ff		 mov	 DWORD PTR _i$506949[ebp], ebx
  00632	39 9d 8c f7 ff
	ff		 cmp	 DWORD PTR _iMax$[ebp], ebx
  00638	0f 8e a2 00 00
	00		 jle	 $LN413@LoadSlangD
$LL415@LoadSlangD:

; 783  : 		{
; 784  : 			char szKeyName[MAX_PATH]="";

  0063e	68 03 01 00 00	 push	 259			; 00000103H
  00643	8d 85 a9 fc ff
	ff		 lea	 eax, DWORD PTR _szKeyName$506953[ebp+1]
  00649	53		 push	 ebx
  0064a	50		 push	 eax
  0064b	88 9d a8 fc ff
	ff		 mov	 BYTE PTR _szKeyName$506953[ebp], bl
  00651	e8 00 00 00 00	 call	 _memset
  00656	83 c4 0c	 add	 esp, 12			; 0000000cH

; 785  : 			StringCbPrintf_e( szKeyName , sizeof(szKeyName) , "%d", i+1);

  00659	66 c7 45 c0 c8
	88		 mov	 WORD PTR ___encStr$506957[ebp], 35016 ; 000088c8H
  0065f	88 5d c2	 mov	 BYTE PTR ___encStr$506957[ebp+2], bl
  00662	33 ff		 xor	 edi, edi
$LL1756@LoadSlangD:
  00664	8b c7		 mov	 eax, edi
  00666	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0066b	79 05		 jns	 SHORT $LN2252@LoadSlangD
  0066d	48		 dec	 eax
  0066e	83 c8 fc	 or	 eax, -4			; fffffffcH
  00671	40		 inc	 eax
$LN2252@LoadSlangD:
  00672	b1 ed		 mov	 cl, -19			; ffffffedH
  00674	2a c8		 sub	 cl, al
  00676	30 4c 3d c0	 xor	 BYTE PTR ___encStr$506957[ebp+edi], cl
  0067a	47		 inc	 edi
  0067b	83 ff 02	 cmp	 edi, 2
  0067e	7c e4		 jl	 SHORT $LL1756@LoadSlangD
  00680	8b bd 88 f7 ff
	ff		 mov	 edi, DWORD PTR _i$506949[ebp]
  00686	47		 inc	 edi
  00687	57		 push	 edi
  00688	8d 45 c0	 lea	 eax, DWORD PTR ___encStr$506957[ebp]
  0068b	50		 push	 eax
  0068c	8d 85 a8 fc ff
	ff		 lea	 eax, DWORD PTR _szKeyName$506953[ebp]
  00692	68 04 01 00 00	 push	 260			; 00000104H
  00697	50		 push	 eax
  00698	e8 00 00 00 00	 call	 ?StringCbPrintfA@@YAJPADIPBDZZ ; StringCbPrintfA
  0069d	83 c4 10	 add	 esp, 16			; 00000010H

; 786  : 			int iAsciiCode = kLoader.LoadInt(szKeyName, -1);

  006a0	6a ff		 push	 -1
  006a2	8d 85 a8 fc ff
	ff		 lea	 eax, DWORD PTR _szKeyName$506953[ebp]
  006a8	50		 push	 eax
  006a9	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  006af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 787  : 			if( iAsciiCode != -1)

  006b5	83 f8 ff	 cmp	 eax, -1
  006b8	74 0c		 je	 SHORT $LN414@LoadSlangD

; 788  : 				m_pFilterString[i] = iAsciiCode;

  006ba	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  006bd	8b 95 88 f7 ff
	ff		 mov	 edx, DWORD PTR _i$506949[ebp]
  006c3	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
$LN414@LoadSlangD:

; 782  : 		for (int i = 0; i < iMax ; i++)

  006c6	89 bd 88 f7 ff
	ff		 mov	 DWORD PTR _i$506949[ebp], edi
  006cc	3b bd 8c f7 ff
	ff		 cmp	 edi, DWORD PTR _iMax$[ebp]
  006d2	0f 8c 66 ff ff
	ff		 jl	 $LL415@LoadSlangD
  006d8	eb 06		 jmp	 SHORT $LN413@LoadSlangD
$LN2246@LoadSlangD:
  006da	8b b5 84 f7 ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
$LN413@LoadSlangD:

; 789  : 		}
; 790  : 	}
; 791  : 
; 792  : 	// filter multibyte
; 793  : 	kLoader.SetTitle_e("filter_multibyte");

  006e0	6a 04		 push	 4
  006e2	c7 45 b4 8b 85
	87 9e		 mov	 DWORD PTR __t$513366[ebp], -1635285621 ; 9e87858bH
  006e9	c7 45 b8 88 9e
	b4 87		 mov	 DWORD PTR __t$513366[ebp+4], -2018206072 ; 87b49e88H
  006f0	c7 45 bc 98 80
	9f 83		 mov	 DWORD PTR __t$513366[ebp+8], -2086698856 ; 839f8098H
  006f7	c7 45 c0 8f 95
	9f 8f		 mov	 DWORD PTR __t$513366[ebp+12], -1885366897 ; 8f9f958fH
  006fe	8d 45 b4	 lea	 eax, DWORD PTR __t$513366[ebp]
  00701	88 5d c4	 mov	 BYTE PTR __t$513366[ebp+16], bl
  00704	59		 pop	 ecx
$LL1865@LoadSlangD:
  00705	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0070b	83 c0 04	 add	 eax, 4
  0070e	49		 dec	 ecx
  0070f	75 f4		 jne	 SHORT $LL1865@LoadSlangD
  00711	8d 45 b4	 lea	 eax, DWORD PTR __t$513366[ebp]
  00714	50		 push	 eax
  00715	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  0071b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitle@ioINILoader@@QAEXPBD@Z

; 794  : 	iMax = kLoader.LoadInt( "max", 0);

  00721	53		 push	 ebx
  00722	68 00 00 00 00	 push	 OFFSET ??_C@_03LJAEFNNE@max?$AA@
  00727	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  0072d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00733	89 85 8c f7 ff
	ff		 mov	 DWORD PTR _iMax$[ebp], eax

; 795  : 	if( iMax != 0 && iMax <= MAX_FILTER )

  00739	3b c3		 cmp	 eax, ebx
  0073b	0f 84 ea 00 00
	00		 je	 $LN307@LoadSlangD
  00741	83 f8 64	 cmp	 eax, 100		; 00000064H
  00744	0f 8f e1 00 00
	00		 jg	 $LN307@LoadSlangD

; 796  : 	{
; 797  : 		SAFEDELETEARRAY(m_pFilterMultiByteString);

  0074a	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0074d	3b c3		 cmp	 eax, ebx
  0074f	74 0a		 je	 SHORT $LN311@LoadSlangD
  00751	50		 push	 eax
  00752	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00757	59		 pop	 ecx
  00758	89 5e 1c	 mov	 DWORD PTR [esi+28], ebx
$LN311@LoadSlangD:

; 798  : 		m_pFilterMultiByteString = new char[iMax+1];

  0075b	8b bd 8c f7 ff
	ff		 mov	 edi, DWORD PTR _iMax$[ebp]
  00761	47		 inc	 edi
  00762	57		 push	 edi
  00763	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 799  : 		memset(m_pFilterMultiByteString, 0, iMax+1);

  00768	57		 push	 edi
  00769	53		 push	 ebx
  0076a	50		 push	 eax
  0076b	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0076e	e8 00 00 00 00	 call	 _memset
  00773	83 c4 10	 add	 esp, 16			; 00000010H

; 800  : 
; 801  : 		if( m_pFilterMultiByteString == NULL ) return;

  00776	39 5e 1c	 cmp	 DWORD PTR [esi+28], ebx
  00779	0f 84 9c 03 00
	00		 je	 $LN2190@LoadSlangD

; 802  : 		for (int i = 0; i < iMax ; i++)

  0077f	89 9d 88 f7 ff
	ff		 mov	 DWORD PTR _i$507117[ebp], ebx
  00785	39 9d 8c f7 ff
	ff		 cmp	 DWORD PTR _iMax$[ebp], ebx
  0078b	0f 8e 9a 00 00
	00		 jle	 $LN307@LoadSlangD
$LL309@LoadSlangD:

; 803  : 		{
; 804  : 			char szKeyName[MAX_PATH]="";

  00791	68 03 01 00 00	 push	 259			; 00000103H
  00796	8d 85 a9 fc ff
	ff		 lea	 eax, DWORD PTR _szKeyName$507121[ebp+1]
  0079c	53		 push	 ebx
  0079d	50		 push	 eax
  0079e	88 9d a8 fc ff
	ff		 mov	 BYTE PTR _szKeyName$507121[ebp], bl
  007a4	e8 00 00 00 00	 call	 _memset
  007a9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 805  : 			StringCbPrintf_e( szKeyName , sizeof(szKeyName) , "%d", i+1);

  007ac	66 c7 45 c0 c8
	88		 mov	 WORD PTR ___encStr$507125[ebp], 35016 ; 000088c8H
  007b2	88 5d c2	 mov	 BYTE PTR ___encStr$507125[ebp+2], bl
  007b5	33 ff		 xor	 edi, edi
$LL1870@LoadSlangD:
  007b7	8b c7		 mov	 eax, edi
  007b9	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  007be	79 05		 jns	 SHORT $LN2253@LoadSlangD
  007c0	48		 dec	 eax
  007c1	83 c8 fc	 or	 eax, -4			; fffffffcH
  007c4	40		 inc	 eax
$LN2253@LoadSlangD:
  007c5	b1 ed		 mov	 cl, -19			; ffffffedH
  007c7	2a c8		 sub	 cl, al
  007c9	30 4c 3d c0	 xor	 BYTE PTR ___encStr$507125[ebp+edi], cl
  007cd	47		 inc	 edi
  007ce	83 ff 02	 cmp	 edi, 2
  007d1	7c e4		 jl	 SHORT $LL1870@LoadSlangD
  007d3	8b bd 88 f7 ff
	ff		 mov	 edi, DWORD PTR _i$507117[ebp]
  007d9	47		 inc	 edi
  007da	57		 push	 edi
  007db	8d 45 c0	 lea	 eax, DWORD PTR ___encStr$507125[ebp]
  007de	50		 push	 eax
  007df	8d 85 a8 fc ff
	ff		 lea	 eax, DWORD PTR _szKeyName$507121[ebp]
  007e5	68 04 01 00 00	 push	 260			; 00000104H
  007ea	50		 push	 eax
  007eb	e8 00 00 00 00	 call	 ?StringCbPrintfA@@YAJPADIPBDZZ ; StringCbPrintfA
  007f0	83 c4 10	 add	 esp, 16			; 00000010H

; 806  : 			int iAsciiCode = kLoader.LoadInt(szKeyName, -1);

  007f3	6a ff		 push	 -1
  007f5	8d 85 a8 fc ff
	ff		 lea	 eax, DWORD PTR _szKeyName$507121[ebp]
  007fb	50		 push	 eax
  007fc	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  00802	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 807  : 			if( iAsciiCode != -1)

  00808	83 f8 ff	 cmp	 eax, -1
  0080b	74 0c		 je	 SHORT $LN308@LoadSlangD

; 808  : 				m_pFilterMultiByteString[i] = iAsciiCode;

  0080d	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00810	8b 95 88 f7 ff
	ff		 mov	 edx, DWORD PTR _i$507117[ebp]
  00816	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
$LN308@LoadSlangD:

; 802  : 		for (int i = 0; i < iMax ; i++)

  00819	89 bd 88 f7 ff
	ff		 mov	 DWORD PTR _i$507117[ebp], edi
  0081f	3b bd 8c f7 ff
	ff		 cmp	 edi, DWORD PTR _iMax$[ebp]
  00825	0f 8c 66 ff ff
	ff		 jl	 $LL309@LoadSlangD
$LN307@LoadSlangD:

; 809  : 		}
; 810  : 	}
; 811  : 
; 812  : 	// guild name limit
; 813  : 	kLoader.SetTitle_e("guildname_limit");

  0082b	6a 03		 push	 3
  0082d	c7 45 b4 8a 99
	82 86		 mov	 DWORD PTR __t$513503[ebp], -2038261366 ; 8682998aH
  00834	c7 45 b8 89 82
	8a 87		 mov	 DWORD PTR __t$513503[ebp+4], -2020965751 ; 878a8289H
  0083b	c7 45 bc 88 b3
	87 83		 mov	 DWORD PTR __t$513503[ebp+8], -2088258680 ; 8387b388H
  00842	8d 45 b4	 lea	 eax, DWORD PTR __t$513503[ebp]
  00845	c7 45 c0 80 85
	9f 00		 mov	 DWORD PTR __t$513503[ebp+12], 10454400 ; 009f8580H
  0084c	59		 pop	 ecx
$LL1979@LoadSlangD:
  0084d	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00853	83 c0 04	 add	 eax, 4
  00856	49		 dec	 ecx
  00857	75 f4		 jne	 SHORT $LL1979@LoadSlangD
  00859	6a 0c		 push	 12			; 0000000cH
  0085b	5e		 pop	 esi
$LL1976@LoadSlangD:
  0085c	8b c6		 mov	 eax, esi
  0085e	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00863	79 05		 jns	 SHORT $LN2254@LoadSlangD
  00865	48		 dec	 eax
  00866	83 c8 fc	 or	 eax, -4			; fffffffcH
  00869	40		 inc	 eax
$LN2254@LoadSlangD:
  0086a	b1 ed		 mov	 cl, -19			; ffffffedH
  0086c	2a c8		 sub	 cl, al
  0086e	30 4c 35 b4	 xor	 BYTE PTR __t$513503[ebp+esi], cl
  00872	46		 inc	 esi
  00873	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00876	7c e4		 jl	 SHORT $LL1976@LoadSlangD
  00878	8d 45 b4	 lea	 eax, DWORD PTR __t$513503[ebp]
  0087b	50		 push	 eax
  0087c	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  00882	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitle@ioINILoader@@QAEXPBD@Z

; 814  : 	iMax = kLoader.LoadInt("max", 0);

  00888	53		 push	 ebx
  00889	68 00 00 00 00	 push	 OFFSET ??_C@_03LJAEFNNE@max?$AA@
  0088e	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  00894	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 815  : 	for(int i = 0; i < iMax; i++)

  0089a	33 f6		 xor	 esi, esi
  0089c	89 85 8c f7 ff
	ff		 mov	 DWORD PTR _iMax$[ebp], eax
  008a2	3b c3		 cmp	 eax, ebx
  008a4	0f 8e 0e 01 00
	00		 jle	 $LN2189@LoadSlangD
$LN206@LoadSlangD:

; 816  : 	{
; 817  : 		memset(szBuff, 0, sizeof(szBuff));

  008aa	bf 04 01 00 00	 mov	 edi, 260		; 00000104H
  008af	57		 push	 edi
  008b0	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuff$[ebp]
  008b6	53		 push	 ebx
  008b7	50		 push	 eax
  008b8	e8 00 00 00 00	 call	 _memset

; 818  : 		memset(szKeyName, 0, sizeof(szKeyName));

  008bd	57		 push	 edi
  008be	8d 85 a4 fb ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  008c4	53		 push	 ebx
  008c5	50		 push	 eax
  008c6	e8 00 00 00 00	 call	 _memset
  008cb	83 c4 18	 add	 esp, 24			; 00000018H

; 819  : 
; 820  : 		wsprintf_e(szKeyName, "%d", i+1);

  008ce	66 c7 45 c0 c8
	88		 mov	 WORD PTR ___encStr$507286[ebp], 35016 ; 000088c8H
  008d4	88 5d c2	 mov	 BYTE PTR ___encStr$507286[ebp+2], bl
  008d7	33 ff		 xor	 edi, edi
$LL1984@LoadSlangD:
  008d9	8b c7		 mov	 eax, edi
  008db	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  008e0	79 05		 jns	 SHORT $LN2255@LoadSlangD
  008e2	48		 dec	 eax
  008e3	83 c8 fc	 or	 eax, -4			; fffffffcH
  008e6	40		 inc	 eax
$LN2255@LoadSlangD:
  008e7	b1 ed		 mov	 cl, -19			; ffffffedH
  008e9	2a c8		 sub	 cl, al
  008eb	30 4c 3d c0	 xor	 BYTE PTR ___encStr$507286[ebp+edi], cl
  008ef	47		 inc	 edi
  008f0	83 ff 02	 cmp	 edi, 2
  008f3	7c e4		 jl	 SHORT $LL1984@LoadSlangD
  008f5	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  008f8	50		 push	 eax
  008f9	89 85 80 f7 ff
	ff		 mov	 DWORD PTR tv12681[ebp], eax
  008ff	8d 45 c0	 lea	 eax, DWORD PTR ___encStr$507286[ebp]
  00902	50		 push	 eax
  00903	8d 85 a4 fb ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  00909	50		 push	 eax
  0090a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00910	83 c4 0c	 add	 esp, 12			; 0000000cH

; 821  : 		kLoader.LoadString(szKeyName, "", szBuff, sizeof(szBuff));

  00913	68 04 01 00 00	 push	 260			; 00000104H
  00918	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuff$[ebp]
  0091e	50		 push	 eax
  0091f	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00924	57		 push	 edi
  00925	8d 85 a4 fb ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  0092b	50		 push	 eax
  0092c	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  00932	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 822  : 		if(!strcmp(szBuff, ""))

  00938	33 c9		 xor	 ecx, ecx
  0093a	41		 inc	 ecx
  0093b	8d b5 b0 fe ff
	ff		 lea	 esi, DWORD PTR _szBuff$[ebp]
  00941	33 c0		 xor	 eax, eax
  00943	f3 a6		 repe cmpsb
  00945	74 05		 je	 SHORT $LN2242@LoadSlangD
  00947	1b c0		 sbb	 eax, eax
  00949	83 d8 ff	 sbb	 eax, -1
$LN2242@LoadSlangD:
  0094c	3b c3		 cmp	 eax, ebx
  0094e	74 68		 je	 SHORT $LN2189@LoadSlangD

; 823  : 			break;
; 824  : 		m_vGuildNameLimit.push_back( std::string(szBuff) );

  00950	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuff$[ebp]
  00956	c7 45 e4 0f 00
	00 00		 mov	 DWORD PTR $T507435[ebp+20], 15 ; 0000000fH
  0095d	89 5d e0	 mov	 DWORD PTR $T507435[ebp+16], ebx
  00960	88 5d d0	 mov	 BYTE PTR $T507435[ebp], bl
  00963	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL2243@LoadSlangD:
  00966	8a 08		 mov	 cl, BYTE PTR [eax]
  00968	40		 inc	 eax
  00969	3a cb		 cmp	 cl, bl
  0096b	75 f9		 jne	 SHORT $LL2243@LoadSlangD
  0096d	2b c6		 sub	 eax, esi
  0096f	50		 push	 eax
  00970	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuff$[ebp]
  00976	50		 push	 eax
  00977	8d 4d d0	 lea	 ecx, DWORD PTR $T507435[ebp]
  0097a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0097f	8b 8d 84 f7 ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00985	8d 45 d0	 lea	 eax, DWORD PTR $T507435[ebp]
  00988	50		 push	 eax
  00989	81 c1 30 08 00
	00		 add	 ecx, 2096		; 00000830H
  0098f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00993	e8 00 00 00 00	 call	 ?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
  00998	53		 push	 ebx
  00999	6a 01		 push	 1
  0099b	8d 4d d0	 lea	 ecx, DWORD PTR $T507435[ebp]
  0099e	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  009a1	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  009a6	8b b5 80 f7 ff
	ff		 mov	 esi, DWORD PTR tv12681[ebp]
  009ac	3b b5 8c f7 ff
	ff		 cmp	 esi, DWORD PTR _iMax$[ebp]
  009b2	0f 8c f2 fe ff
	ff		 jl	 $LN206@LoadSlangD
$LN2189@LoadSlangD:

; 825  : 	}
; 826  : 
; 827  : 	// exception word
; 828  : 	kLoader.SetTitle_e("exception_word");

  009b8	6a 03		 push	 3
  009ba	c7 45 b4 88 94
	88 8f		 mov	 DWORD PTR __t$513753[ebp], -1886874488 ; 8f889488H
  009c1	c7 45 b8 9d 98
	82 85		 mov	 DWORD PTR __t$513753[ebp+4], -2055038819 ; 8582989dH
  009c8	c7 45 bc 83 b3
	9c 85		 mov	 DWORD PTR __t$513753[ebp+8], -2053327997 ; 859cb383H
  009cf	66 c7 45 c0 9f
	88		 mov	 WORD PTR __t$513753[ebp+12], 34975 ; 0000889fH
  009d5	8d 45 b4	 lea	 eax, DWORD PTR __t$513753[ebp]
  009d8	88 5d c2	 mov	 BYTE PTR __t$513753[ebp+14], bl
  009db	59		 pop	 ecx
$LL2127@LoadSlangD:
  009dc	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  009e2	83 c0 04	 add	 eax, 4
  009e5	49		 dec	 ecx
  009e6	75 f4		 jne	 SHORT $LL2127@LoadSlangD
  009e8	6a 0c		 push	 12			; 0000000cH
  009ea	5e		 pop	 esi
$LL2124@LoadSlangD:
  009eb	8b c6		 mov	 eax, esi
  009ed	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  009f2	79 05		 jns	 SHORT $LN2256@LoadSlangD
  009f4	48		 dec	 eax
  009f5	83 c8 fc	 or	 eax, -4			; fffffffcH
  009f8	40		 inc	 eax
$LN2256@LoadSlangD:
  009f9	b1 ed		 mov	 cl, -19			; ffffffedH
  009fb	2a c8		 sub	 cl, al
  009fd	30 4c 35 b4	 xor	 BYTE PTR __t$513753[ebp+esi], cl
  00a01	46		 inc	 esi
  00a02	83 fe 0e	 cmp	 esi, 14			; 0000000eH
  00a05	7c e4		 jl	 SHORT $LL2124@LoadSlangD
  00a07	8d 45 b4	 lea	 eax, DWORD PTR __t$513753[ebp]
  00a0a	50		 push	 eax
  00a0b	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  00a11	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitle@ioINILoader@@QAEXPBD@Z

; 829  : 	iMax = kLoader.LoadInt("max", 0);

  00a17	53		 push	 ebx
  00a18	68 00 00 00 00	 push	 OFFSET ??_C@_03LJAEFNNE@max?$AA@
  00a1d	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  00a23	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 830  : 	for(int i = 0; i < iMax; i++)

  00a29	33 f6		 xor	 esi, esi
  00a2b	89 85 8c f7 ff
	ff		 mov	 DWORD PTR _iMax$[ebp], eax
  00a31	3b c3		 cmp	 eax, ebx
  00a33	0f 8e e2 00 00
	00		 jle	 $LN2190@LoadSlangD
$LL103@LoadSlangD:

; 831  : 	{
; 832  : 		memset(szBuff, 0, sizeof(szBuff));

  00a39	bf 04 01 00 00	 mov	 edi, 260		; 00000104H
  00a3e	57		 push	 edi
  00a3f	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuff$[ebp]
  00a45	53		 push	 ebx
  00a46	50		 push	 eax
  00a47	e8 00 00 00 00	 call	 _memset

; 833  : 		memset(szKeyName, 0, sizeof(szKeyName));

  00a4c	57		 push	 edi
  00a4d	8d 85 a4 fb ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  00a53	53		 push	 ebx
  00a54	50		 push	 eax
  00a55	e8 00 00 00 00	 call	 _memset
  00a5a	83 c4 18	 add	 esp, 24			; 00000018H

; 834  : 
; 835  : 		wsprintf_e(szKeyName, "%d", i+1);

  00a5d	66 c7 45 c0 c8
	88		 mov	 WORD PTR ___encStr$507447[ebp], 35016 ; 000088c8H
  00a63	88 5d c2	 mov	 BYTE PTR ___encStr$507447[ebp+2], bl
  00a66	33 ff		 xor	 edi, edi
$LL2132@LoadSlangD:
  00a68	8b c7		 mov	 eax, edi
  00a6a	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00a6f	79 05		 jns	 SHORT $LN2257@LoadSlangD
  00a71	48		 dec	 eax
  00a72	83 c8 fc	 or	 eax, -4			; fffffffcH
  00a75	40		 inc	 eax
$LN2257@LoadSlangD:
  00a76	b1 ed		 mov	 cl, -19			; ffffffedH
  00a78	2a c8		 sub	 cl, al
  00a7a	30 4c 3d c0	 xor	 BYTE PTR ___encStr$507447[ebp+edi], cl
  00a7e	47		 inc	 edi
  00a7f	83 ff 02	 cmp	 edi, 2
  00a82	7c e4		 jl	 SHORT $LL2132@LoadSlangD
  00a84	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00a87	50		 push	 eax
  00a88	89 85 80 f7 ff
	ff		 mov	 DWORD PTR tv12758[ebp], eax
  00a8e	8d 45 c0	 lea	 eax, DWORD PTR ___encStr$507447[ebp]
  00a91	50		 push	 eax
  00a92	8d 85 a4 fb ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  00a98	50		 push	 eax
  00a99	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00a9f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 836  : 		kLoader.LoadString(szKeyName, "", szBuff, sizeof(szBuff));

  00aa2	68 04 01 00 00	 push	 260			; 00000104H
  00aa7	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuff$[ebp]
  00aad	50		 push	 eax
  00aae	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00ab3	57		 push	 edi
  00ab4	8d 85 a4 fb ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  00aba	50		 push	 eax
  00abb	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  00ac1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 837  : 		
; 838  : 		if(!strcmp(szBuff, ""))

  00ac7	33 c9		 xor	 ecx, ecx
  00ac9	41		 inc	 ecx
  00aca	8d b5 b0 fe ff
	ff		 lea	 esi, DWORD PTR _szBuff$[ebp]
  00ad0	33 c0		 xor	 eax, eax
  00ad2	f3 a6		 repe cmpsb
  00ad4	74 45		 je	 SHORT $LN2190@LoadSlangD

; 839  : 			break;
; 840  : 		
; 841  : 		m_vExceptionList.push_back( std::string(szBuff) );

  00ad6	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuff$[ebp]
  00adc	50		 push	 eax
  00add	8d 4d d0	 lea	 ecx, DWORD PTR $T507596[ebp]
  00ae0	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00ae5	8b 8d 84 f7 ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00aeb	50		 push	 eax
  00aec	81 c1 20 08 00
	00		 add	 ecx, 2080		; 00000820H
  00af2	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00af6	e8 00 00 00 00	 call	 ?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
  00afb	53		 push	 ebx
  00afc	6a 01		 push	 1
  00afe	8d 4d d0	 lea	 ecx, DWORD PTR $T507596[ebp]
  00b01	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00b04	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00b09	8b b5 80 f7 ff
	ff		 mov	 esi, DWORD PTR tv12758[ebp]
  00b0f	3b b5 8c f7 ff
	ff		 cmp	 esi, DWORD PTR _iMax$[ebp]
  00b15	0f 8c 1e ff ff
	ff		 jl	 $LL103@LoadSlangD
$LN2190@LoadSlangD:

; 842  : 	}
; 843  : }

  00b1b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00b1f	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  00b25	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioINILoader@@QAE@XZ
  00b2b	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00b30	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadSlangData@CSlangUtil@@QAEXXZ$0:
  00000	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioINILoader@@QAE@XZ
__unwindfunclet$?LoadSlangData@CSlangUtil@@QAEXXZ$1:
  0000c	8d 4d d0	 lea	 ecx, DWORD PTR $T507435[ebp]
  0000f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSlangData@CSlangUtil@@QAEXXZ$2:
  00014	8d 4d d0	 lea	 ecx, DWORD PTR $T507596[ebp]
  00017	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?LoadSlangData@CSlangUtil@@QAEXXZ:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00023	8b 8a 78 f7 ff
	ff		 mov	 ecx, DWORD PTR [edx-2184]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadSlangData@CSlangUtil@@QAEXXZ
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadSlangData@CSlangUtil@@QAEXXZ ENDP			; CSlangUtil::LoadSlangData
; Function compile flags: /Ogsp
;	COMDAT ??__FszCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@YAXXZ
text$yd	SEGMENT
??__FszCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@YAXXZ PROC ; `CSlangUtil::ConvertString'::`2'::`dynamic atexit destructor for 'szCleanUpString'', COMDAT
  00000	6a 00		 push	 0
  00002	6a 01		 push	 1
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET ?szCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00009	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0000e	c3		 ret	 0
??__FszCleanUpString@?1??ConvertString@CSlangUtil@@QAEPBDPBD_N@Z@YAXXZ ENDP ; `CSlangUtil::ConvertString'::`2'::`dynamic atexit destructor for 'szCleanUpString''
text$yd	ENDS
END
