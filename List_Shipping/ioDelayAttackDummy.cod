; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioDelayAttackDummy.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?return5@@YAIXZ					; return5
; Function compile flags: /Ogsp
;	COMDAT ?return5@@YAIXZ
_TEXT	SEGMENT
?return5@@YAIXZ PROC					; return5, COMDAT

; 18   : 	__forceinline unsigned int return5() { __asm mov eax, 5 };

  00000	b8 05 00 00 00	 mov	 eax, 5
  00005	c3		 ret	 0
?return5@@YAIXZ ENDP					; return5
_TEXT	ENDS
PUBLIC	?return10@@YAIXZ				; return10
; Function compile flags: /Ogsp
;	COMDAT ?return10@@YAIXZ
_TEXT	SEGMENT
?return10@@YAIXZ PROC					; return10, COMDAT

; 21   : 	__forceinline unsigned int return10() { __asm mov eax, 10 };

  00000	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00005	c3		 ret	 0
?return10@@YAIXZ ENDP					; return10
_TEXT	ENDS
PUBLIC	??_7ioDelayAttackDummy@@6BioWorldEventReceiver@@@ ; ioDelayAttackDummy::`vftable'
PUBLIC	??_7ioDelayAttackDummy@@6BioPlayEntity@@@	; ioDelayAttackDummy::`vftable'
PUBLIC	??0ioDelayAttackDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z ; ioDelayAttackDummy::ioDelayAttackDummy
PUBLIC	??_R4ioDelayAttackDummy@@6BioPlayEntity@@@	; ioDelayAttackDummy::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioDelayAttackDummy@@@8			; ioDelayAttackDummy `RTTI Type Descriptor'
PUBLIC	??_R3ioDelayAttackDummy@@8			; ioDelayAttackDummy::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioDelayAttackDummy@@8			; ioDelayAttackDummy::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioDelayAttackDummy@@8		; ioDelayAttackDummy::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioDummyChar@@8			; ioDummyChar::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioDummyChar@@@8				; ioDummyChar `RTTI Type Descriptor'
PUBLIC	??_R3ioDummyChar@@8				; ioDummyChar::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioDummyChar@@8				; ioDummyChar::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioPlayEntity@@8			; ioPlayEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioPlayEntity@@@8			; ioPlayEntity `RTTI Type Descriptor'
PUBLIC	??_R3ioPlayEntity@@8				; ioPlayEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioPlayEntity@@8				; ioPlayEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioGameEntity@@8			; ioGameEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioGameEntity@@@8			; ioGameEntity `RTTI Type Descriptor'
PUBLIC	??_R3ioGameEntity@@8				; ioGameEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioGameEntity@@8				; ioGameEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioEntityEvent@@8			; ioEntityEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioEntityEvent@@@8			; ioEntityEvent `RTTI Type Descriptor'
PUBLIC	??_R3ioEntityEvent@@8				; ioEntityEvent::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioEntityEvent@@8				; ioEntityEvent::`RTTI Base Class Array'
PUBLIC	??_R1BMI@?0A@EA@ioWorldEventReceiver@@8		; ioWorldEventReceiver::`RTTI Base Class Descriptor at (456,-1,0,64)'
PUBLIC	??_R0?AVioWorldEventReceiver@@@8		; ioWorldEventReceiver `RTTI Type Descriptor'
PUBLIC	??_R3ioWorldEventReceiver@@8			; ioWorldEventReceiver::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWorldEventReceiver@@8			; ioWorldEventReceiver::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioWorldEventReceiver@@8		; ioWorldEventReceiver::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?LoadProperty@ioDelayAttackDummy@@UAEXAAVioINILoader@@@Z ; ioDelayAttackDummy::LoadProperty
PUBLIC	?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z	; ioPlayEntity::SetTeam
PUBLIC	?ProcessState@ioDelayAttackDummy@@MAEXMK@Z	; ioDelayAttackDummy::ProcessState
PUBLIC	?ProcessDelayState@ioDelayAttackDummy@@MAEXM@Z	; ioDelayAttackDummy::ProcessDelayState
PUBLIC	?ProcessAttackState@ioDelayAttackDummy@@MAEXMK@Z ; ioDelayAttackDummy::ProcessAttackState
PUBLIC	?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ	; ioDummyChar::IsDummyCharMidSync
PUBLIC	?SetDieState@ioDelayAttackDummy@@UAEX_N@Z	; ioDelayAttackDummy::SetDieState
PUBLIC	?ProcessStartState@ioDelayAttackDummy@@MAEXM@Z	; ioDelayAttackDummy::ProcessStartState
PUBLIC	??_R4ioDelayAttackDummy@@6BioWorldEventReceiver@@@ ; ioDelayAttackDummy::`RTTI Complete Object Locator'
PUBLIC	??_EioDelayAttackDummy@@WBMI@AEPAXI@Z		; [thunk]:ioDelayAttackDummy::`vector deleting destructor'
EXTRN	??0ioDummyChar@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z:PROC ; ioDummyChar::ioDummyChar
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?AddEntityEvent@ioDummyChar@@UAEXPAVioEntity@@@Z:PROC ; ioDummyChar::AddEntityEvent
EXTRN	??_EioDelayAttackDummy@@UAEPAXI@Z:PROC		; ioDelayAttackDummy::`vector deleting destructor'
EXTRN	?Update@ioDummyChar@@UAEXMKK@Z:PROC		; ioDummyChar::Update
EXTRN	?UpdateAfter@ioDummyChar@@UAEXM@Z:PROC		; ioDummyChar::UpdateAfter
EXTRN	?GetTypeID@ioPlayEntity@@UBEHXZ:PROC		; ioPlayEntity::GetTypeID
EXTRN	?IsNeedCheckMapCollision@ioDummyChar@@UBE_NXZ:PROC ; ioDummyChar::IsNeedCheckMapCollision
EXTRN	?IsMountAvailable@ioDummyChar@@UBE_NXZ:PROC	; ioDummyChar::IsMountAvailable
EXTRN	?IsMountingAvailable@ioDummyChar@@UBE_NXZ:PROC	; ioDummyChar::IsMountingAvailable
EXTRN	?IsNowMountEnable@ioDummyChar@@UBE_NXZ:PROC	; ioDummyChar::IsNowMountEnable
EXTRN	?IsAllWeaponDefence@ioGameEntity@@UBE_NXZ:PROC	; ioGameEntity::IsAllWeaponDefence
EXTRN	?HasEntity@ioGameEntity@@UAE_NABVioHashString@@@Z:PROC ; ioGameEntity::HasEntity
EXTRN	?AddEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z:PROC ; ioGameEntity::AddEntity
EXTRN	?DestroyEntity@ioGameEntity@@UAE_NABVioHashString@@@Z:PROC ; ioGameEntity::DestroyEntity
EXTRN	?GetEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z:PROC ; ioGameEntity::GetEntity
EXTRN	?UpdateBound@ioGameEntity@@MBEXXZ:PROC		; ioGameEntity::UpdateBound
EXTRN	?UpdateBottomHeight@ioDummyChar@@MBEXXZ:PROC	; ioDummyChar::UpdateBottomHeight
EXTRN	?NeedUpdateBottomHeight@ioDummyChar@@UAEXXZ:PROC ; ioDummyChar::NeedUpdateBottomHeight
EXTRN	?SetWorldPosition@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::SetWorldPosition
EXTRN	?SetWorldOrientation@ioGameEntity@@UAEXABUD3DXQUATERNION@@@Z:PROC ; ioGameEntity::SetWorldOrientation
EXTRN	?SetWorldScale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::SetWorldScale
EXTRN	?Translate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::Translate
EXTRN	?TranslateByConveyer@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::TranslateByConveyer
EXTRN	?TranslateByWorldEntity@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::TranslateByWorldEntity
EXTRN	?MapCollisionPushingTranslate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::MapCollisionPushingTranslate
EXTRN	?DontMoveCollisionPushingTranslate@ioGameEntity@@UAEXPAV1@ABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::DontMoveCollisionPushingTranslate
EXTRN	?Rotate@ioGameEntity@@UAEXABUD3DXVECTOR3@@MW4TransformSpace@ioNode@@@Z:PROC ; ioGameEntity::Rotate
EXTRN	?Scale@ioGameEntity@@UAEXMMM@Z:PROC		; ioGameEntity::Scale
EXTRN	?Scale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::Scale
EXTRN	?GetWorldPosition@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ:PROC ; ioGameEntity::GetWorldPosition
EXTRN	?GetWorldOrientation@ioGameEntity@@UBEABUD3DXQUATERNION@@XZ:PROC ; ioGameEntity::GetWorldOrientation
EXTRN	?GetWorldScale@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ:PROC ; ioGameEntity::GetWorldScale
EXTRN	?ApplyWeapon@ioDummyChar@@UAE?AW4ApplyWeaponExp@@PAVioWeapon@@@Z:PROC ; ioDummyChar::ApplyWeapon
EXTRN	?IsCollisionAvailableWeapon@ioDummyChar@@UAE_NPAVioWeapon@@@Z:PROC ; ioDummyChar::IsCollisionAvailableWeapon
EXTRN	?IsCollisionAvailableRange@ioPlayEntity@@UAE_NPAVioWeapon@@@Z:PROC ; ioPlayEntity::IsCollisionAvailableRange
EXTRN	?IsEntityCollisionSkipState@ioDummyChar@@UBE_NPAVioGameEntity@@@Z:PROC ; ioDummyChar::IsEntityCollisionSkipState
EXTRN	?IsCharCollisionSkipState@ioDummyChar@@UBE_NW4TeamType@@H@Z:PROC ; ioDummyChar::IsCharCollisionSkipState
EXTRN	?IsWoundedCollision@ioPlayEntity@@UBE_NABVioOrientBox@@PAUD3DXVECTOR3@@@Z:PROC ; ioPlayEntity::IsWoundedCollision
EXTRN	?GetAttackCollisionBox@ioDummyChar@@UAE?AVioOrientBox@@W4AniCollisionType@@_N@Z:PROC ; ioDummyChar::GetAttackCollisionBox
EXTRN	?CheckSphereDistance@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAM@Z:PROC ; ioPlayEntity::CheckSphereDistance
EXTRN	?CheckSpherePoint@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAU2@@Z:PROC ; ioPlayEntity::CheckSpherePoint
EXTRN	?CheckCylinderPoint@ioPlayEntity@@UBE_NABVioCylinder@@ABUD3DXVECTOR3@@AAU3@@Z:PROC ; ioPlayEntity::CheckCylinderPoint
EXTRN	?GetSubType@ioDummyChar@@UBE?AW4PlaySubType@ioPlayEntity@@XZ:PROC ; ioDummyChar::GetSubType
EXTRN	?GetArmorType@ioDummyChar@@UBE?AW4ArmorType@@XZ:PROC ; ioDummyChar::GetArmorType
EXTRN	?DontMoveEntityLevel@ioDummyChar@@UBEHXZ:PROC	; ioDummyChar::DontMoveEntityLevel
EXTRN	?NotifyDontMoveCollisionPushingSkip@ioPlayEntity@@UAEXPAVioGameEntity@@@Z:PROC ; ioPlayEntity::NotifyDontMoveCollisionPushingSkip
EXTRN	?GetWorldEventReceiver@ioDummyChar@@UAEPAVioWorldEventReceiver@@XZ:PROC ; ioDummyChar::GetWorldEventReceiver
EXTRN	?Revival@ioPlayEntity@@UAEXXZ:PROC		; ioPlayEntity::Revival
EXTRN	?UpdateGauge@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::UpdateGauge
EXTRN	?RenderGauge@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::RenderGauge
EXTRN	?FillMaxHP@ioPlayEntity@@UAEXXZ:PROC		; ioPlayEntity::FillMaxHP
EXTRN	?ProcessRecovery@ioPlayEntity@@MAEXXZ:PROC	; ioPlayEntity::ProcessRecovery
EXTRN	?AddHeadDamageInfo@ioPlayEntity@@UAEXH_N@Z:PROC	; ioPlayEntity::AddHeadDamageInfo
EXTRN	?RenderHeadInfoList@ioPlayEntity@@UAEXHH@Z:PROC	; ioPlayEntity::RenderHeadInfoList
EXTRN	?UpdateHeadInfoList@ioPlayEntity@@MAEXK@Z:PROC	; ioPlayEntity::UpdateHeadInfoList
EXTRN	?InitDummyCharInfo@ioDummyChar@@UAEXHKABUD3DXVECTOR3@@0M_N@Z:PROC ; ioDummyChar::InitDummyCharInfo
EXTRN	?TestMapCollision@ioDummyChar@@UAE_NPAVioOpcodeShape@@PAVioPlayStage@@PBUD3DXMATRIX@@@Z:PROC ; ioDummyChar::TestMapCollision
EXTRN	?CheckEntityCollision@ioDummyChar@@UAEXPAVioPlayEntity@@@Z:PROC ; ioDummyChar::CheckEntityCollision
EXTRN	?GetDummyGrassType@ioDummyChar@@UAEHXZ:PROC	; ioDummyChar::GetDummyGrassType
EXTRN	?IsActivateWeapon@ioDummyChar@@UAE_NXZ:PROC	; ioDummyChar::IsActivateWeapon
EXTRN	?IsDummyVsDummyCollisionSkipState@ioDummyChar@@UAE_NPBV1@@Z:PROC ; ioDummyChar::IsDummyVsDummyCollisionSkipState
EXTRN	?ProcessPos@ioDummyChar@@MAEXM@Z:PROC		; ioDummyChar::ProcessPos
EXTRN	?ProcessMoveState@ioDummyChar@@MAEXM@Z:PROC	; ioDummyChar::ProcessMoveState
EXTRN	?ProcessDashState@ioDummyChar@@MAEXM@Z:PROC	; ioDummyChar::ProcessDashState
EXTRN	?ApplyDummyCharSync@ioDummyChar@@UAEXPAVioPlayStage@@AAVSP2Packet@@@Z:PROC ; ioDummyChar::ApplyDummyCharSync
EXTRN	?SetDelayState@ioDummyChar@@UAEX_N@Z:PROC	; ioDummyChar::SetDelayState
EXTRN	?SetMoveState@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::SetMoveState
EXTRN	?SetDieState@ioDummyChar@@UAEX_N0@Z:PROC	; ioDummyChar::SetDieState
EXTRN	?SetDashState@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::SetDashState
EXTRN	?SetAttackState@ioDummyChar@@UAEXXZ:PROC	; ioDummyChar::SetAttackState
EXTRN	?DropZoneCheck@ioDummyChar@@MAEXXZ:PROC		; ioDummyChar::DropZoneCheck
EXTRN	?SendAttackInfoToSkill@ioDummyChar@@MAEXXZ:PROC	; ioDummyChar::SendAttackInfoToSkill
EXTRN	?CheckCollisionWeapon@ioDummyChar@@UAEXPAVioBaseChar@@@Z:PROC ; ioDummyChar::CheckCollisionWeapon
EXTRN	?TranslateMountEntity@ioDummyChar@@MAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::TranslateMountEntity
EXTRN	?ClearMountEntity@ioDummyChar@@MAEXXZ:PROC	; ioDummyChar::ClearMountEntity
EXTRN	?UpdateMountedEntityList@ioDummyChar@@MAEXXZ:PROC ; ioDummyChar::UpdateMountedEntityList
EXTRN	?UpdateMountedWeaponList@ioDummyChar@@MAEXXZ:PROC ; ioDummyChar::UpdateMountedWeaponList
EXTRN	?SetWorldPositionMountEntity@ioDummyChar@@MAEXM@Z:PROC ; ioDummyChar::SetWorldPositionMountEntity
EXTRN	?DummyDieClearMountEntity@ioDummyChar@@MAEXXZ:PROC ; ioDummyChar::DummyDieClearMountEntity
EXTRN	?FillDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioDummyChar::FillDummyCharMidSync
EXTRN	?ApplyDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioDummyChar::ApplyDummyCharMidSync
EXTRN	?GetSkillMaxActiveCnt@ioDummyChar@@UAEHXZ:PROC	; ioDummyChar::GetSkillMaxActiveCnt
EXTRN	?GetSkillCurActiveCnt@ioDummyChar@@UAEHXZ:PROC	; ioDummyChar::GetSkillCurActiveCnt
EXTRN	?OnTelepotation@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::OnTelepotation
EXTRN	?OnFireZoneDamage@ioDummyChar@@UAEXMABVioHashString@@@Z:PROC ; ioDummyChar::OnFireZoneDamage
EXTRN	?OnPoisonZoneDamage@ioDummyChar@@UAEXXZ:PROC	; ioDummyChar::OnPoisonZoneDamage
;	COMDAT ??_R4ioDelayAttackDummy@@6BioWorldEventReceiver@@@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodelayattackdummy.cpp
rdata$r	SEGMENT
??_R4ioDelayAttackDummy@@6BioWorldEventReceiver@@@ DD 00H ; ioDelayAttackDummy::`RTTI Complete Object Locator'
	DD	01c8H
	DD	00H
	DD	FLAT:??_R0?AVioDelayAttackDummy@@@8
	DD	FLAT:??_R3ioDelayAttackDummy@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWorldEventReceiver@@8 DD FLAT:??_R0?AVioWorldEventReceiver@@@8 ; ioWorldEventReceiver::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R2ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R2ioWorldEventReceiver@@8 DD FLAT:??_R1A@?0A@EA@ioWorldEventReceiver@@8 ; ioWorldEventReceiver::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R3ioWorldEventReceiver@@8 DD 00H			; ioWorldEventReceiver::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWorldEventReceiver@@@8
_DATA	SEGMENT
??_R0?AVioWorldEventReceiver@@@8 DD FLAT:??_7type_info@@6B@ ; ioWorldEventReceiver `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWorldEventReceiver@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BMI@?0A@EA@ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R1BMI@?0A@EA@ioWorldEventReceiver@@8 DD FLAT:??_R0?AVioWorldEventReceiver@@@8 ; ioWorldEventReceiver::`RTTI Base Class Descriptor at (456,-1,0,64)'
	DD	00H
	DD	01c8H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R2ioEntityEvent@@8
rdata$r	SEGMENT
??_R2ioEntityEvent@@8 DD FLAT:??_R1A@?0A@EA@ioEntityEvent@@8 ; ioEntityEvent::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioEntityEvent@@8
rdata$r	SEGMENT
??_R3ioEntityEvent@@8 DD 00H				; ioEntityEvent::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioEntityEvent@@@8
_DATA	SEGMENT
??_R0?AVioEntityEvent@@@8 DD FLAT:??_7type_info@@6B@	; ioEntityEvent `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioEntityEvent@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioEntityEvent@@8 DD FLAT:??_R0?AVioEntityEvent@@@8 ; ioEntityEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2ioGameEntity@@8
rdata$r	SEGMENT
??_R2ioGameEntity@@8 DD FLAT:??_R1A@?0A@EA@ioGameEntity@@8 ; ioGameEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3ioGameEntity@@8
rdata$r	SEGMENT
??_R3ioGameEntity@@8 DD 00H				; ioGameEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioGameEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioGameEntity@@@8
_DATA	SEGMENT
??_R0?AVioGameEntity@@@8 DD FLAT:??_7type_info@@6B@	; ioGameEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioGameEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioGameEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioGameEntity@@8 DD FLAT:??_R0?AVioGameEntity@@@8 ; ioGameEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioGameEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2ioPlayEntity@@8
rdata$r	SEGMENT
??_R2ioPlayEntity@@8 DD FLAT:??_R1A@?0A@EA@ioPlayEntity@@8 ; ioPlayEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioGameEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3ioPlayEntity@@8
rdata$r	SEGMENT
??_R3ioPlayEntity@@8 DD 00H				; ioPlayEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ioPlayEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioPlayEntity@@@8
_DATA	SEGMENT
??_R0?AVioPlayEntity@@@8 DD FLAT:??_7type_info@@6B@	; ioPlayEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioPlayEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioPlayEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioPlayEntity@@8 DD FLAT:??_R0?AVioPlayEntity@@@8 ; ioPlayEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioPlayEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2ioDummyChar@@8
rdata$r	SEGMENT
??_R2ioDummyChar@@8 DD FLAT:??_R1A@?0A@EA@ioDummyChar@@8 ; ioDummyChar::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioPlayEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioGameEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
	DD	FLAT:??_R1BMI@?0A@EA@ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R3ioDummyChar@@8
rdata$r	SEGMENT
??_R3ioDummyChar@@8 DD 00H				; ioDummyChar::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2ioDummyChar@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioDummyChar@@@8
_DATA	SEGMENT
??_R0?AVioDummyChar@@@8 DD FLAT:??_7type_info@@6B@	; ioDummyChar `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioDummyChar@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioDummyChar@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioDummyChar@@8 DD FLAT:??_R0?AVioDummyChar@@@8 ; ioDummyChar::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioDummyChar@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioDelayAttackDummy@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioDelayAttackDummy@@8 DD FLAT:??_R0?AVioDelayAttackDummy@@@8 ; ioDelayAttackDummy::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioDelayAttackDummy@@8
rdata$r	ENDS
;	COMDAT ??_R2ioDelayAttackDummy@@8
rdata$r	SEGMENT
??_R2ioDelayAttackDummy@@8 DD FLAT:??_R1A@?0A@EA@ioDelayAttackDummy@@8 ; ioDelayAttackDummy::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioDummyChar@@8
	DD	FLAT:??_R1A@?0A@EA@ioPlayEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioGameEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
	DD	FLAT:??_R1BMI@?0A@EA@ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R3ioDelayAttackDummy@@8
rdata$r	SEGMENT
??_R3ioDelayAttackDummy@@8 DD 00H			; ioDelayAttackDummy::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2ioDelayAttackDummy@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioDelayAttackDummy@@@8
_DATA	SEGMENT
??_R0?AVioDelayAttackDummy@@@8 DD FLAT:??_7type_info@@6B@ ; ioDelayAttackDummy `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioDelayAttackDummy@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioDelayAttackDummy@@6BioPlayEntity@@@
rdata$r	SEGMENT
??_R4ioDelayAttackDummy@@6BioPlayEntity@@@ DD 00H	; ioDelayAttackDummy::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioDelayAttackDummy@@@8
	DD	FLAT:??_R3ioDelayAttackDummy@@8
rdata$r	ENDS
;	COMDAT ??_7ioDelayAttackDummy@@6BioWorldEventReceiver@@@
CONST	SEGMENT
??_7ioDelayAttackDummy@@6BioWorldEventReceiver@@@ DD FLAT:??_R4ioDelayAttackDummy@@6BioWorldEventReceiver@@@ ; ioDelayAttackDummy::`vftable'
	DD	FLAT:?OnTelepotation@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?OnFireZoneDamage@ioDummyChar@@UAEXMABVioHashString@@@Z
	DD	FLAT:?OnPoisonZoneDamage@ioDummyChar@@UAEXXZ
	DD	FLAT:??_EioDelayAttackDummy@@WBMI@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7ioDelayAttackDummy@@6BioPlayEntity@@@
CONST	SEGMENT
??_7ioDelayAttackDummy@@6BioPlayEntity@@@ DD FLAT:??_R4ioDelayAttackDummy@@6BioPlayEntity@@@ ; ioDelayAttackDummy::`vftable'
	DD	FLAT:?AddEntityEvent@ioDummyChar@@UAEXPAVioEntity@@@Z
	DD	FLAT:??_EioDelayAttackDummy@@UAEPAXI@Z
	DD	FLAT:?Update@ioDummyChar@@UAEXMKK@Z
	DD	FLAT:?UpdateAfter@ioDummyChar@@UAEXM@Z
	DD	FLAT:?GetTypeID@ioPlayEntity@@UBEHXZ
	DD	FLAT:?IsNeedCheckMapCollision@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsMountAvailable@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsMountingAvailable@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsNowMountEnable@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsAllWeaponDefence@ioGameEntity@@UBE_NXZ
	DD	FLAT:?HasEntity@ioGameEntity@@UAE_NABVioHashString@@@Z
	DD	FLAT:?AddEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z
	DD	FLAT:?DestroyEntity@ioGameEntity@@UAE_NABVioHashString@@@Z
	DD	FLAT:?GetEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z
	DD	FLAT:?UpdateBound@ioGameEntity@@MBEXXZ
	DD	FLAT:?UpdateBottomHeight@ioDummyChar@@MBEXXZ
	DD	FLAT:?NeedUpdateBottomHeight@ioDummyChar@@UAEXXZ
	DD	FLAT:?SetWorldPosition@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?SetWorldOrientation@ioGameEntity@@UAEXABUD3DXQUATERNION@@@Z
	DD	FLAT:?SetWorldScale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?Translate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?TranslateByConveyer@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?TranslateByWorldEntity@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?MapCollisionPushingTranslate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?DontMoveCollisionPushingTranslate@ioGameEntity@@UAEXPAV1@ABUD3DXVECTOR3@@@Z
	DD	FLAT:?Rotate@ioGameEntity@@UAEXABUD3DXVECTOR3@@MW4TransformSpace@ioNode@@@Z
	DD	FLAT:?Scale@ioGameEntity@@UAEXMMM@Z
	DD	FLAT:?Scale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?GetWorldPosition@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ
	DD	FLAT:?GetWorldOrientation@ioGameEntity@@UBEABUD3DXQUATERNION@@XZ
	DD	FLAT:?GetWorldScale@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ
	DD	FLAT:?ApplyWeapon@ioDummyChar@@UAE?AW4ApplyWeaponExp@@PAVioWeapon@@@Z
	DD	FLAT:?IsCollisionAvailableWeapon@ioDummyChar@@UAE_NPAVioWeapon@@@Z
	DD	FLAT:?IsCollisionAvailableRange@ioPlayEntity@@UAE_NPAVioWeapon@@@Z
	DD	FLAT:?IsEntityCollisionSkipState@ioDummyChar@@UBE_NPAVioGameEntity@@@Z
	DD	FLAT:?IsCharCollisionSkipState@ioDummyChar@@UBE_NW4TeamType@@H@Z
	DD	FLAT:?IsWoundedCollision@ioPlayEntity@@UBE_NABVioOrientBox@@PAUD3DXVECTOR3@@@Z
	DD	FLAT:?GetAttackCollisionBox@ioDummyChar@@UAE?AVioOrientBox@@W4AniCollisionType@@_N@Z
	DD	FLAT:?CheckSphereDistance@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAM@Z
	DD	FLAT:?CheckSpherePoint@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAU2@@Z
	DD	FLAT:?CheckCylinderPoint@ioPlayEntity@@UBE_NABVioCylinder@@ABUD3DXVECTOR3@@AAU3@@Z
	DD	FLAT:?GetSubType@ioDummyChar@@UBE?AW4PlaySubType@ioPlayEntity@@XZ
	DD	FLAT:?GetArmorType@ioDummyChar@@UBE?AW4ArmorType@@XZ
	DD	FLAT:?DontMoveEntityLevel@ioDummyChar@@UBEHXZ
	DD	FLAT:?NotifyDontMoveCollisionPushingSkip@ioPlayEntity@@UAEXPAVioGameEntity@@@Z
	DD	FLAT:?LoadProperty@ioDelayAttackDummy@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?GetWorldEventReceiver@ioDummyChar@@UAEPAVioWorldEventReceiver@@XZ
	DD	FLAT:?Revival@ioPlayEntity@@UAEXXZ
	DD	FLAT:?UpdateGauge@ioDummyChar@@UAEXXZ
	DD	FLAT:?RenderGauge@ioDummyChar@@UAEXXZ
	DD	FLAT:?FillMaxHP@ioPlayEntity@@UAEXXZ
	DD	FLAT:?ProcessRecovery@ioPlayEntity@@MAEXXZ
	DD	FLAT:?AddHeadDamageInfo@ioPlayEntity@@UAEXH_N@Z
	DD	FLAT:?RenderHeadInfoList@ioPlayEntity@@UAEXHH@Z
	DD	FLAT:?UpdateHeadInfoList@ioPlayEntity@@MAEXK@Z
	DD	FLAT:?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z
	DD	FLAT:?InitDummyCharInfo@ioDummyChar@@UAEXHKABUD3DXVECTOR3@@0M_N@Z
	DD	FLAT:?TestMapCollision@ioDummyChar@@UAE_NPAVioOpcodeShape@@PAVioPlayStage@@PBUD3DXMATRIX@@@Z
	DD	FLAT:?CheckEntityCollision@ioDummyChar@@UAEXPAVioPlayEntity@@@Z
	DD	FLAT:?GetDummyGrassType@ioDummyChar@@UAEHXZ
	DD	FLAT:?IsActivateWeapon@ioDummyChar@@UAE_NXZ
	DD	FLAT:?IsDummyVsDummyCollisionSkipState@ioDummyChar@@UAE_NPBV1@@Z
	DD	FLAT:?ProcessState@ioDelayAttackDummy@@MAEXMK@Z
	DD	FLAT:?ProcessPos@ioDummyChar@@MAEXM@Z
	DD	FLAT:?ProcessDelayState@ioDelayAttackDummy@@MAEXM@Z
	DD	FLAT:?ProcessMoveState@ioDummyChar@@MAEXM@Z
	DD	FLAT:?ProcessDashState@ioDummyChar@@MAEXM@Z
	DD	FLAT:?ProcessAttackState@ioDelayAttackDummy@@MAEXMK@Z
	DD	FLAT:?ApplyDummyCharSync@ioDummyChar@@UAEXPAVioPlayStage@@AAVSP2Packet@@@Z
	DD	FLAT:?SetDelayState@ioDummyChar@@UAEX_N@Z
	DD	FLAT:?SetMoveState@ioDummyChar@@UAEXXZ
	DD	FLAT:?SetDieState@ioDummyChar@@UAEX_N0@Z
	DD	FLAT:?SetDashState@ioDummyChar@@UAEXXZ
	DD	FLAT:?SetAttackState@ioDummyChar@@UAEXXZ
	DD	FLAT:?DropZoneCheck@ioDummyChar@@MAEXXZ
	DD	FLAT:?SendAttackInfoToSkill@ioDummyChar@@MAEXXZ
	DD	FLAT:?CheckCollisionWeapon@ioDummyChar@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?TranslateMountEntity@ioDummyChar@@MAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?ClearMountEntity@ioDummyChar@@MAEXXZ
	DD	FLAT:?UpdateMountedEntityList@ioDummyChar@@MAEXXZ
	DD	FLAT:?UpdateMountedWeaponList@ioDummyChar@@MAEXXZ
	DD	FLAT:?SetWorldPositionMountEntity@ioDummyChar@@MAEXM@Z
	DD	FLAT:?DummyDieClearMountEntity@ioDummyChar@@MAEXXZ
	DD	FLAT:?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ
	DD	FLAT:?FillDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?ApplyDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?GetSkillMaxActiveCnt@ioDummyChar@@UAEHXZ
	DD	FLAT:?GetSkillCurActiveCnt@ioDummyChar@@UAEHXZ
	DD	FLAT:?SetDieState@ioDelayAttackDummy@@UAEX_N@Z
	DD	FLAT:?ProcessStartState@ioDelayAttackDummy@@MAEXM@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0ioDelayAttackDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z
_TEXT	SEGMENT
_pGrp$ = 8						; size = 4
_pMode$ = 12						; size = 4
??0ioDelayAttackDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z PROC ; ioDelayAttackDummy::ioDelayAttackDummy, COMDAT
; _this$ = ecx

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 0c	 push	 DWORD PTR _pMode$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR _pGrp$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0ioDummyChar@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z ; ioDummyChar::ioDummyChar
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioDelayAttackDummy@@6BioPlayEntity@@@
  00017	c7 86 c8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+456], OFFSET ??_7ioDelayAttackDummy@@6BioWorldEventReceiver@@@

; 10   : 	
; 11   : }

  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0ioDelayAttackDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z ENDP ; ioDelayAttackDummy::ioDelayAttackDummy
_TEXT	ENDS
PUBLIC	??1ioDelayAttackDummy@@UAE@XZ			; ioDelayAttackDummy::~ioDelayAttackDummy
EXTRN	??1ioDummyChar@@UAE@XZ:PROC			; ioDummyChar::~ioDummyChar
; Function compile flags: /Ogsp
;	COMDAT ??1ioDelayAttackDummy@@UAE@XZ
_TEXT	SEGMENT
??1ioDelayAttackDummy@@UAE@XZ PROC			; ioDelayAttackDummy::~ioDelayAttackDummy, COMDAT
; _this$ = ecx

; 15   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioDelayAttackDummy@@6BioPlayEntity@@@
  00006	c7 81 c8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+456], OFFSET ??_7ioDelayAttackDummy@@6BioWorldEventReceiver@@@

; 16   : }

  00010	e9 00 00 00 00	 jmp	 ??1ioDummyChar@@UAE@XZ	; ioDummyChar::~ioDummyChar
??1ioDelayAttackDummy@@UAE@XZ ENDP			; ioDelayAttackDummy::~ioDelayAttackDummy
_TEXT	ENDS
EXTRN	?ProcessEffectUpdate@ioDummyChar@@IAEXM@Z:PROC	; ioDummyChar::ProcessEffectUpdate
EXTRN	?SendDieState@ioDummyChar@@QAEX_N@Z:PROC	; ioDummyChar::SendDieState
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	?CheckExtraAniJump@ioDummyChar@@IAEXXZ:PROC	; ioDummyChar::CheckExtraAniJump
EXTRN	?CheckReservedSliding@ioDummyChar@@QAEXXZ:PROC	; ioDummyChar::CheckReservedSliding
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?ProcessState@ioDelayAttackDummy@@MAEXMK@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
_dwPreTime$ = 12					; size = 4
?ProcessState@ioDelayAttackDummy@@MAEXMK@Z PROC		; ioDelayAttackDummy::ProcessState, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 33   : 	switch( m_State )

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	8b 86 30 02 00
	00		 mov	 eax, DWORD PTR [esi+560]
  00011	48		 dec	 eax
  00012	57		 push	 edi
  00013	74 3e		 je	 SHORT $LN4@ProcessSta
  00015	48		 dec	 eax
  00016	74 2b		 je	 SHORT $LN3@ProcessSta
  00018	83 e8 03	 sub	 eax, 3
  0001b	75 44		 jne	 SHORT $LN5@ProcessSta

; 41   : 	case DCS_ATTACK:
; 42   : 		CheckReservedSliding();

  0001d	e8 00 00 00 00	 call	 ?CheckReservedSliding@ioDummyChar@@QAEXXZ ; ioDummyChar::CheckReservedSliding

; 43   : 		CheckExtraAniJump();

  00022	8b ce		 mov	 ecx, esi
  00024	e8 00 00 00 00	 call	 ?CheckExtraAniJump@ioDummyChar@@IAEXXZ ; ioDummyChar::CheckExtraAniJump

; 44   : 		ProcessAttackState( fTimePerSec, dwPreTime );

  00029	ff 75 0c	 push	 DWORD PTR _dwPreTime$[ebp]
  0002c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	51		 push	 ecx
  00034	8b ce		 mov	 ecx, esi
  00036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003b	ff 90 0c 01 00
	00		 call	 DWORD PTR [eax+268]

; 45   : 		break;

  00041	eb 1e		 jmp	 SHORT $LN5@ProcessSta
$LN3@ProcessSta:

; 37   : 		break;
; 38   : 	case DCS_DELAY:
; 39   : 		ProcessDelayState( fTimePerSec );

  00043	8b 06		 mov	 eax, DWORD PTR [esi]
  00045	51		 push	 ecx
  00046	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004b	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]

; 40   : 		break;

  00051	eb 0e		 jmp	 SHORT $LN5@ProcessSta
$LN4@ProcessSta:

; 34   : 	{
; 35   : 	case DCS_START:
; 36   : 		ProcessStartState( fTimePerSec );

  00053	8b 06		 mov	 eax, DWORD PTR [esi]
  00055	51		 push	 ecx
  00056	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005b	ff 90 64 01 00
	00		 call	 DWORD PTR [eax+356]
$LN5@ProcessSta:

; 46   : 	}
; 47   : 
; 48   : 	if( m_dwLifeTime && (DWORD)(m_dwStartTime + m_dwLifeTime) < FRAMEGETTIME() && m_State != DCS_ATTACK )

  00061	83 be 10 0b 00
	00 00		 cmp	 DWORD PTR [esi+2832], 0
  00068	74 30		 je	 SHORT $LN9@ProcessSta
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00070	8b c8		 mov	 ecx, eax
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00078	8b 8e 14 0b 00
	00		 mov	 ecx, DWORD PTR [esi+2836]
  0007e	03 8e 10 0b 00
	00		 add	 ecx, DWORD PTR [esi+2832]
  00084	3b c8		 cmp	 ecx, eax
  00086	73 12		 jae	 SHORT $LN9@ProcessSta
  00088	83 be 30 02 00
	00 05		 cmp	 DWORD PTR [esi+560], 5
  0008f	74 09		 je	 SHORT $LN9@ProcessSta

; 49   : 		SendDieState( true );

  00091	6a 01		 push	 1
  00093	8b ce		 mov	 ecx, esi
  00095	e8 00 00 00 00	 call	 ?SendDieState@ioDummyChar@@QAEX_N@Z ; ioDummyChar::SendDieState
$LN9@ProcessSta:

; 50   : 
; 51   : 	ProcessPos( fTimePerSec );

  0009a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  0009f	8b 06		 mov	 eax, DWORD PTR [esi]
  000a1	51		 push	 ecx
  000a2	8b ce		 mov	 ecx, esi
  000a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a9	ff 90 fc 00 00
	00		 call	 DWORD PTR [eax+252]

; 52   : 	ProcessEffectUpdate( fTimePerSec );

  000af	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  000b4	51		 push	 ecx
  000b5	8b ce		 mov	 ecx, esi
  000b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bc	e8 00 00 00 00	 call	 ?ProcessEffectUpdate@ioDummyChar@@IAEXM@Z ; ioDummyChar::ProcessEffectUpdate
  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi

; 53   : }

  000c3	5d		 pop	 ebp
  000c4	c2 08 00	 ret	 8
?ProcessState@ioDelayAttackDummy@@MAEXMK@Z ENDP		; ioDelayAttackDummy::ProcessState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?ProcessStartState@ioDelayAttackDummy@@MAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessStartState@ioDelayAttackDummy@@MAEXM@Z PROC	; ioDelayAttackDummy::ProcessStartState, COMDAT
; _this$ = ecx

; 56   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 57   : 	DWORD dwCurTime = FRAMEGETTIME();

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00009	8b c8		 mov	 ecx, eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 58   : 
; 59   : 	if( m_dwStartAniEndTime == 0 || m_dwStartAniEndTime < dwCurTime )

  00011	8b 8e e4 06 00
	00		 mov	 ecx, DWORD PTR [esi+1764]
  00017	85 c9		 test	 ecx, ecx
  00019	74 04		 je	 SHORT $LN1@ProcessSta@2
  0001b	3b c8		 cmp	 ecx, eax
  0001d	73 0c		 jae	 SHORT $LN2@ProcessSta@2
$LN1@ProcessSta@2:

; 60   : 	{
; 61   : 		SetDelayState( false );

  0001f	8b 06		 mov	 eax, DWORD PTR [esi]
  00021	6a 00		 push	 0
  00023	8b ce		 mov	 ecx, esi
  00025	ff 90 14 01 00
	00		 call	 DWORD PTR [eax+276]
$LN2@ProcessSta@2:
  0002b	5e		 pop	 esi

; 62   : 		return;
; 63   : 	}
; 64   : }

  0002c	c2 04 00	 ret	 4
?ProcessStartState@ioDelayAttackDummy@@MAEXM@Z ENDP	; ioDelayAttackDummy::ProcessStartState
_TEXT	ENDS
PUBLIC	??1FireTime@@QAE@XZ				; FireTime::~FireTime
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1FireTime@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1FireTime@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1FireTime@@QAE@XZ$1
__ehfuncinfo$??1FireTime@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1FireTime@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1FireTime@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1FireTime@@QAE@XZ PROC				; FireTime::~FireTime, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1FireTime@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00017	8d 4f 44	 lea	 ecx, DWORD PTR [edi+68]
  0001a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00021	ff d6		 call	 esi
  00023	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  00026	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0002a	ff d6		 call	 esi
  0002c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00030	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00033	ff d6		 call	 esi
  00035	e8 00 00 00 00	 call	 __EH_epilog3
  0003a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1FireTime@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 14	 add	 ecx, 20			; 00000014H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1FireTime@@QAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 30	 add	 ecx, 48			; 00000030H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1FireTime@@QAE@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1FireTime@@QAE@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1FireTime@@QAE@XZ ENDP				; FireTime::~FireTime
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?_Nextnode@?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@PAU342@@Z ; std::_List_val<FireTime,std::allocator<FireTime> >::_Nextnode
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@PAU342@@Z PROC ; std::_List_val<FireTime,std::allocator<FireTime> >::_Nextnode, COMDAT

; 560  : 		{	// return reference to successor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 561  : 		return ((_Nodepref)(*_Pnode)._Next);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 562  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Nextnode@?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@PAU342@@Z ENDP ; std::_List_val<FireTime,std::allocator<FireTime> >::_Nextnode
_TEXT	ENDS
PUBLIC	?_Prevnode@?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@PAU342@@Z ; std::_List_val<FireTime,std::allocator<FireTime> >::_Prevnode
; Function compile flags: /Ogsp
;	COMDAT ?_Prevnode@?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@PAU342@@Z PROC ; std::_List_val<FireTime,std::allocator<FireTime> >::_Prevnode, COMDAT

; 565  : 		{	// return reference to predecessor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 566  : 		return ((_Nodepref)(*_Pnode)._Prev);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 567  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Prevnode@?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@PAU342@@Z ENDP ; std::_List_val<FireTime,std::allocator<FireTime> >::_Prevnode
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@I@Z ; std::allocator<std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??E?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator++, COMDAT
; _this$ = ecx

; 221  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 222  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 223  : 		if (this->_Getcont() == 0
; 224  : 			|| this->_Ptr == 0
; 225  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 226  : 			{	// report error
; 227  : 			_DEBUG_ERROR("list iterator not incrementable");
; 228  : 			_SCL_SECURE_OUT_OF_RANGE;
; 229  : 			}
; 230  : 
; 231  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 232  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 233  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 234  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 235  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 236  : 
; 237  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 238  : 		return (*this);
; 239  : 		}

  00008	c3		 ret	 0
??E?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator++
_TEXT	ENDS
PUBLIC	??E?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator++, COMDAT
; _this$ = ecx

; 242  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 243  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 244  : 		++*this;

  0000a	8b 12		 mov	 edx, DWORD PTR [edx]
  0000c	89 11		 mov	 DWORD PTR [ecx], edx

; 245  : 		return (_Tmp);
; 246  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
??E?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator++
_TEXT	ENDS
PUBLIC	??8?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator==, COMDAT
; _this$ = ecx

; 281  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 282  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 283  : 		if (this->_Getcont() == 0
; 284  : 			|| this->_Getcont() != _Right._Getcont())
; 285  : 			{	// report error
; 286  : 			_DEBUG_ERROR("list iterators incompatible");
; 287  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 288  : 			}
; 289  : 
; 290  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 291  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 292  : 			&& this->_Getcont() == _Right._Getcont());
; 293  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 294  : 
; 295  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 296  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator==
_TEXT	ENDS
PUBLIC	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> >,std::_Iterator_base0>::_Mynode
; Function compile flags: /Ogsp
;	COMDAT ?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 93   : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 94   : 		}

  00002	c3		 ret	 0
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
PUBLIC	?_Myval@?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@SAAAUFireTime@@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@@Z ; std::_List_val<FireTime,std::allocator<FireTime> >::_Myval
; Function compile flags: /Ogsp
;	COMDAT ?_Myval@?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@SAAAUFireTime@@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@SAAAUFireTime@@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@@Z PROC ; std::_List_val<FireTime,std::allocator<FireTime> >::_Myval, COMDAT

; 570  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 571  : 		return ((reference)(*_Pnode)._Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 572  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@SAAAUFireTime@@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@@Z ENDP ; std::_List_val<FireTime,std::allocator<FireTime> >::_Myval
_TEXT	ENDS
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@1@PBV?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> >,std::_Iterator_base0>
; Function compile flags: /Ogsp
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@1@PBV?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@1@PBV?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 41   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 42   : 		this->_Adopt(_Plist);
; 43   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_unchecked_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@1@PBV?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> >,std::_Iterator_base0>
_TEXT	ENDS
PUBLIC	??1_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE@XZ ; std::_List_nod<FireTime,std::allocator<FireTime> >::_Node::~_Node
; Function compile flags: /Ogsp
;	COMDAT ??1_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE@XZ PROC ; std::_List_nod<FireTime,std::allocator<FireTime> >::_Node::~_Node, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??1FireTime@@QAE@XZ
??1_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE@XZ ENDP ; std::_List_nod<FireTime,std::allocator<FireTime> >::_Node::~_Node
; Function compile flags: /Odsp
_TEXT	ENDS
;	COMDAT ??_EioDelayAttackDummy@@WBMI@AEPAXI@Z
_TEXT	SEGMENT
??_EioDelayAttackDummy@@WBMI@AEPAXI@Z PROC		; [thunk]:ioDelayAttackDummy::`vector deleting destructor', COMDAT
  00000	81 e9 c8 01 00
	00		 sub	 ecx, 456		; 000001c8H
  00006	e9 00 00 00 00	 jmp	 ??_EioDelayAttackDummy@@UAEPAXI@Z
??_EioDelayAttackDummy@@WBMI@AEPAXI@Z ENDP		; [thunk]:ioDelayAttackDummy::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	??0FireTime@@QAE@XZ				; FireTime::FireTime
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	SEGMENT
__unwindtable$??0FireTime@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FireTime@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FireTime@@QAE@XZ$1
__ehfuncinfo$??0FireTime@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FireTime@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0FireTime@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0FireTime@@QAE@XZ PROC				; FireTime::FireTime, COMDAT
; _this$ = ecx

; 219  : 	FireTime()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0FireTime@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0001a	ff d7		 call	 edi
  0001c	33 db		 xor	 ebx, ebx
  0001e	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00021	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00024	ff d7		 call	 edi
  00026	8d 4e 44	 lea	 ecx, DWORD PTR [esi+68]
  00029	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0002d	ff d7		 call	 edi

; 220  : 	{
; 221  : 		dwStart = 0;

  0002f	89 1e		 mov	 DWORD PTR [esi], ebx

; 222  : 		dwDuration = 0;

  00031	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 223  : 
; 224  : 		iAttributeIdx = 0;

  00034	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 225  : 		iResistanceIdx = 0;

  00037	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx

; 226  : 
; 227  : 		bLoopWoundedAni = false;

  0003a	88 5e 10	 mov	 BYTE PTR [esi+16], bl

; 228  : 		dwWoundedAniDuration = 0;

  0003d	89 5e 24	 mov	 DWORD PTR [esi+36], ebx

; 229  : 
; 230  : 		dwWeaponIdx = 0;

  00040	89 5e 28	 mov	 DWORD PTR [esi+40], ebx

; 231  : 		eCollisionType = ACT_NONE;

  00043	c7 46 2c 06 00
	00 00		 mov	 DWORD PTR [esi+44], 6

; 232  : 		eFireTimeType = FTT_NORMAL_ATTACK;

  0004a	89 5e 40	 mov	 DWORD PTR [esi+64], ebx

; 233  : 
; 234  : 		m_iExtraValue = 0;

  0004d	89 5e 54	 mov	 DWORD PTR [esi+84], ebx

; 235  : 	}

  00050	8b c6		 mov	 eax, esi
  00052	e8 00 00 00 00	 call	 __EH_epilog3
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FireTime@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 14	 add	 ecx, 20			; 00000014H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FireTime@@QAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 30	 add	 ecx, 48			; 00000030H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0FireTime@@QAE@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0FireTime@@QAE@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0FireTime@@QAE@XZ ENDP				; FireTime::FireTime
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodummychar.h
;	COMDAT ?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ
_TEXT	SEGMENT
?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ PROC		; ioDummyChar::IsDummyCharMidSync, COMDAT
; _this$ = ecx

; 742  : 	virtual bool IsDummyCharMidSync(){ return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ ENDP		; ioDummyChar::IsDummyCharMidSync
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z	; CEncrypt<unsigned long>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z PROC	; CEncrypt<unsigned long>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1256 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1257 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1258 : 		*value = *((DWORD*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 1259 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ENDP	; CEncrypt<unsigned long>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z	; CEncrypt<int>::DecryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z PROC	; CEncrypt<int>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 837  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 838  : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 839  : 		*value = *((int*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 840  : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ENDP	; CEncrypt<int>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ; CEncrypt<enum TeamType>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
;	COMDAT ?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z PROC ; CEncrypt<enum TeamType>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ENDP ; CEncrypt<enum TeamType>::EncryptValueToPool
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioDelayAttackDummy@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioDelayAttackDummy@@UAEPAXI@Z PROC			; ioDelayAttackDummy::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioDelayAttackDummy@@UAE@XZ ; ioDelayAttackDummy::~ioDelayAttackDummy
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioDelayAttackDummy@@UAEPAXI@Z ENDP			; ioDelayAttackDummy::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?CreateWeapon@ioDelayAttackDummy@@IAEXHABUD3DXVECTOR3@@0@Z ; ioDelayAttackDummy::CreateWeapon
EXTRN	?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z:PROC ; ioWeapon::SetPosition
EXTRN	?ExtendFireExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUFireTime@@ABUD3DXVECTOR3@@1ABVioHashString@@@Z:PROC ; ioBaseChar::ExtendFireExplicit
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
EXTRN	?SetWeaponIndexBase@ioBaseChar@@QAEXK@Z:PROC	; ioBaseChar::SetWeaponIndexBase
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?GetWeaponIndexBase@ioBaseChar@@QBEKXZ:PROC	; ioBaseChar::GetWeaponIndexBase
EXTRN	?GetOwner@ioDummyChar@@QBEPAVioBaseChar@@XZ:PROC ; ioDummyChar::GetOwner
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodelayattackdummy.cpp
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreateWeapon@ioDelayAttackDummy@@IAEXHABUD3DXVECTOR3@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateWeapon@ioDelayAttackDummy@@IAEXHABUD3DXVECTOR3@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateWeapon@ioDelayAttackDummy@@IAEXHABUD3DXVECTOR3@@0@Z$1
__ehfuncinfo$?CreateWeapon@ioDelayAttackDummy@@IAEXHABUD3DXVECTOR3@@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateWeapon@ioDelayAttackDummy@@IAEXHABUD3DXVECTOR3@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?CreateWeapon@ioDelayAttackDummy@@IAEXHABUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
_kFireTime$ = -120					; size = 88
$T531532 = -32						; size = 16
_pOwner$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nAttackIndex$ = 8					; size = 4
_vPos$ = 12						; size = 4
_vDir$ = 16						; size = 4
?CreateWeapon@ioDelayAttackDummy@@IAEXHABUD3DXVECTOR3@@0@Z PROC ; ioDelayAttackDummy::CreateWeapon, COMDAT
; _this$ = ecx

; 128  : {

  00000	6a 6c		 push	 108			; 0000006cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?CreateWeapon@ioDelayAttackDummy@@IAEXHABUD3DXVECTOR3@@0@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx

; 129  : 	ioBaseChar *pOwner = GetOwner();

  0000e	e8 00 00 00 00	 call	 ?GetOwner@ioDummyChar@@QBEPAVioBaseChar@@XZ ; ioDummyChar::GetOwner
  00013	8b c8		 mov	 ecx, eax

; 130  : 
; 131  : 	if ( !pOwner )

  00015	33 db		 xor	 ebx, ebx
  00017	89 4d f0	 mov	 DWORD PTR _pOwner$[ebp], ecx
  0001a	3b cb		 cmp	 ecx, ebx
  0001c	0f 84 ab 00 00
	00		 je	 $LN3@CreateWeap

; 132  : 		return;
; 133  : 
; 134  : 	m_dwBaseWeaponIndex = pOwner->GetWeaponIndexBase() + 1;

  00022	e8 00 00 00 00	 call	 ?GetWeaponIndexBase@ioBaseChar@@QBEKXZ ; ioBaseChar::GetWeaponIndexBase
  00027	40		 inc	 eax

; 135  : 
; 136  : 	FireTime kFireTime;

  00028	8d 4d 88	 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  0002b	89 87 30 06 00
	00		 mov	 DWORD PTR [edi+1584], eax
  00031	e8 00 00 00 00	 call	 ??0FireTime@@QAE@XZ	; FireTime::FireTime
  00036	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 137  : 	kFireTime.dwStart = FRAMEGETTIME();

  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0003f	8b c8		 mov	 ecx, eax
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00047	89 45 88	 mov	 DWORD PTR _kFireTime$[ebp], eax

; 138  : 
; 139  : 	kFireTime.iAttributeIdx = nAttackIndex;

  0004a	8b 45 08	 mov	 eax, DWORD PTR _nAttackIndex$[ebp]

; 140  : 	kFireTime.iResistanceIdx = 0;
; 141  : 	kFireTime.szWoundedAni  = "";

  0004d	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00052	56		 push	 esi
  00053	8d 4d 9c	 lea	 ecx, DWORD PTR _kFireTime$[ebp+20]
  00056	89 45 90	 mov	 DWORD PTR _kFireTime$[ebp+8], eax
  00059	89 5d 94	 mov	 DWORD PTR _kFireTime$[ebp+12], ebx
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 142  : 	kFireTime.dwWoundedAniDuration = 0;
; 143  : 	kFireTime.bLoopWoundedAni = false;
; 144  : 	kFireTime.dwWeaponIdx = m_dwBaseWeaponIndex;

  00062	8b 87 30 06 00
	00		 mov	 eax, DWORD PTR [edi+1584]

; 145  : 	kFireTime.eFireTimeType = FTT_DUMMY_CHAR_ATTACK;
; 146  : 
; 147  : 	pOwner->SetWeaponIndexBase( m_dwBaseWeaponIndex );

  00068	8b 4d f0	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  0006b	50		 push	 eax
  0006c	89 5d ac	 mov	 DWORD PTR _kFireTime$[ebp+36], ebx
  0006f	88 5d 98	 mov	 BYTE PTR _kFireTime$[ebp+16], bl
  00072	89 45 b0	 mov	 DWORD PTR _kFireTime$[ebp+40], eax
  00075	c7 45 c8 0b 00
	00 00		 mov	 DWORD PTR _kFireTime$[ebp+64], 11 ; 0000000bH
  0007c	e8 00 00 00 00	 call	 ?SetWeaponIndexBase@ioBaseChar@@QAEXK@Z ; ioBaseChar::SetWeaponIndexBase

; 148  : 
; 149  : 	ioWeapon *pWeapon = pOwner->ExtendFireExplicit( kFireTime, vPos, vDir, "" );

  00081	56		 push	 esi
  00082	8d 4d e0	 lea	 ecx, DWORD PTR $T531532[ebp]
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0008b	8b 4d f0	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  0008e	8d 45 e0	 lea	 eax, DWORD PTR $T531532[ebp]
  00091	50		 push	 eax
  00092	ff 75 10	 push	 DWORD PTR _vDir$[ebp]
  00095	8d 45 88	 lea	 eax, DWORD PTR _kFireTime$[ebp]
  00098	ff 75 0c	 push	 DWORD PTR _vPos$[ebp]
  0009b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 ?ExtendFireExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUFireTime@@ABUD3DXVECTOR3@@1ABVioHashString@@@Z ; ioBaseChar::ExtendFireExplicit
  000a5	8d 4d e0	 lea	 ecx, DWORD PTR $T531532[ebp]
  000a8	8b f0		 mov	 esi, eax
  000aa	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 150  : 	if ( pWeapon )

  000b3	3b f3		 cmp	 esi, ebx
  000b5	74 0a		 je	 SHORT $LN1@CreateWeap

; 151  : 	{
; 152  : 		pWeapon->SetPosition( vPos );

  000b7	ff 75 0c	 push	 DWORD PTR _vPos$[ebp]
  000ba	8b ce		 mov	 ecx, esi
  000bc	e8 00 00 00 00	 call	 ?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z ; ioWeapon::SetPosition
$LN1@CreateWeap:

; 153  : 	}	
; 154  : }

  000c1	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000c5	8d 4d 88	 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  000c8	e8 00 00 00 00	 call	 ??1FireTime@@QAE@XZ
$LN3@CreateWeap:
  000cd	e8 00 00 00 00	 call	 __EH_epilog3
  000d2	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateWeapon@ioDelayAttackDummy@@IAEXHABUD3DXVECTOR3@@0@Z$0:
  00000	8d 4d 88	 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1FireTime@@QAE@XZ
__unwindfunclet$?CreateWeapon@ioDelayAttackDummy@@IAEXHABUD3DXVECTOR3@@0@Z$1:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR $T531532[ebp]
  0000b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?CreateWeapon@ioDelayAttackDummy@@IAEXHABUD3DXVECTOR3@@0@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a 84	 mov	 ecx, DWORD PTR [edx-124]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateWeapon@ioDelayAttackDummy@@IAEXHABUD3DXVECTOR3@@0@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateWeapon@ioDelayAttackDummy@@IAEXHABUD3DXVECTOR3@@0@Z ENDP ; ioDelayAttackDummy::CreateWeapon
PUBLIC	__real@4f800000
PUBLIC	__$ArrayPad$
PUBLIC	?FireWeapon@ioDelayAttackDummy@@IAEXXZ		; ioDelayAttackDummy::FireWeapon
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT __real@4f800000
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodelayattackdummy.cpp
CONST	ENDS
;	COMDAT ?FireWeapon@ioDelayAttackDummy@@IAEXXZ
_TEXT	SEGMENT
tv175 = -44						; size = 4
_vPos$ = -40						; size = 12
_vDir$ = -28						; size = 12
$T530756 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?FireWeapon@ioDelayAttackDummy@@IAEXXZ PROC		; ioDelayAttackDummy::FireWeapon, COMDAT
; _this$ = ecx

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b d9		 mov	 ebx, ecx

; 158  : 	if ( m_nAttackIndex == NO_WEAPON_ATTRIBUTE )

  00013	83 bb 80 14 00
	00 00		 cmp	 DWORD PTR [ebx+5248], 0
  0001a	74 70		 je	 SHORT $LN2@FireWeapon

; 159  : 		return;
; 160  : 
; 161  : 	D3DXVECTOR3 vDir = GetWorldOrientation() * D3DXVECTOR3(0.0f,0.0f,-FLOAT1);

  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	b8 01 00 00 00	 mov	 eax, 1
  00023	0f 57 c0	 xorps	 xmm0, xmm0
  00026	89 45 d4	 mov	 DWORD PTR tv175[ebp], eax
  00029	db 45 d4	 fild	 DWORD PTR tv175[ebp]
  0002c	f3 0f 11 45 f0	 movss	 DWORD PTR $T530756[ebp], xmm0
  00031	f3 0f 11 45 f4	 movss	 DWORD PTR $T530756[ebp+4], xmm0
  00036	85 c0		 test	 eax, eax
  00038	79 06		 jns	 SHORT $LN8@FireWeapon
  0003a	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN8@FireWeapon:
  00040	8d 45 f0	 lea	 eax, DWORD PTR $T530756[ebp]
  00043	d9 e0		 fchs
  00045	50		 push	 eax
  00046	d9 5d f8	 fstp	 DWORD PTR $T530756[ebp+8]
  00049	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004b	ff 50 74	 call	 DWORD PTR [eax+116]
  0004e	50		 push	 eax
  0004f	8d 45 e4	 lea	 eax, DWORD PTR _vDir$[ebp]
  00052	50		 push	 eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 162  : 	D3DXVec3Normalize( &vDir, &vDir);

  0005c	8d 45 e4	 lea	 eax, DWORD PTR _vDir$[ebp]
  0005f	50		 push	 eax
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 163  : 	D3DXVECTOR3 vPos = GetWorldPosition();

  00066	8b 03		 mov	 eax, DWORD PTR [ebx]
  00068	8b cb		 mov	 ecx, ebx
  0006a	ff 50 70	 call	 DWORD PTR [eax+112]
  0006d	8b f0		 mov	 esi, eax
  0006f	8d 7d d8	 lea	 edi, DWORD PTR _vPos$[ebp]
  00072	a5		 movsd

; 164  : 
; 165  : 	CreateWeapon( m_nAttackIndex, vPos, vDir );

  00073	8d 45 e4	 lea	 eax, DWORD PTR _vDir$[ebp]
  00076	50		 push	 eax
  00077	8d 45 d8	 lea	 eax, DWORD PTR _vPos$[ebp]
  0007a	a5		 movsd
  0007b	50		 push	 eax
  0007c	ff b3 80 14 00
	00		 push	 DWORD PTR [ebx+5248]
  00082	8b cb		 mov	 ecx, ebx
  00084	a5		 movsd
  00085	e8 00 00 00 00	 call	 ?CreateWeapon@ioDelayAttackDummy@@IAEXHABUD3DXVECTOR3@@0@Z ; ioDelayAttackDummy::CreateWeapon
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
$LN2@FireWeapon:

; 166  : }

  0008c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008f	33 cd		 xor	 ecx, ebp
  00091	5b		 pop	 ebx
  00092	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00097	c9		 leave
  00098	c3		 ret	 0
?FireWeapon@ioDelayAttackDummy@@IAEXXZ ENDP		; ioDelayAttackDummy::FireWeapon
_TEXT	ENDS
PUBLIC	??E?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??E?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator++, COMDAT
; _this$ = ecx

; 369  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 370  : 		++(*(_Mybase *)this);

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 371  : 		return (*this);
; 372  : 		}

  00008	c3		 ret	 0
??E?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator++
_TEXT	ENDS
PUBLIC	??9?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator!=, COMDAT
; _this$ = ecx

; 299  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 300  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 301  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator!=
_TEXT	ENDS
PUBLIC	??D?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBEABUFireTime@@XZ ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBEABUFireTime@@XZ
_TEXT	SEGMENT
??D?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBEABUFireTime@@XZ PROC ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator*, COMDAT
; _this$ = ecx

; 202  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 203  : 		if (this->_Getcont() == 0
; 204  : 			|| this->_Ptr == 0
; 205  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 206  : 			{	// report error
; 207  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 208  : 			_SCL_SECURE_OUT_OF_RANGE;
; 209  : 			}
; 210  : 
; 211  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 212  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 213  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 214  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 215  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 216  : 
; 217  : 		return (_Mylist::_Myval(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 218  : 		}

  00005	c3		 ret	 0
??D?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBEABUFireTime@@XZ ENDP ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator*
_TEXT	ENDS
PUBLIC	??0?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@1@PBV?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@1@PBV?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@1@PBV?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >, COMDAT
; _this$ = ecx

; 184  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 185  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@1@PBV?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::_List_const_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BE@@ioINILoader@@QAEHAAY0BE@$$CBDH@Z ; ioINILoader::LoadInt_e<20>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadInt_e@$0BE@@ioINILoader@@QAEHAAY0BE@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BE@@ioINILoader@@QAEHAAY0BE@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<20>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 dd 01 00
	00		 je	 $LN96@LoadInt_e
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 c6 01 00
	00		 je	 $LN95@LoadInt_e
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 ae 01 00
	00		 je	 $LN94@LoadInt_e
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 96 01 00
	00		 je	 $LN93@LoadInt_e
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 7f 01 00
	00		 je	 $LN92@LoadInt_e
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 69 01 00
	00		 je	 $LN91@LoadInt_e
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 54 01 00
	00		 je	 $LN90@LoadInt_e
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 3e 01 00
	00		 je	 $LN89@LoadInt_e
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 27 01 00
	00		 je	 $LN88@LoadInt_e
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 11 01 00
	00		 je	 $LN87@LoadInt_e
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 fc 00 00
	00		 je	 $LN86@LoadInt_e
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 e6 00 00
	00		 je	 $LN85@LoadInt_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 cf 00 00
	00		 je	 $LN84@LoadInt_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 b9 00 00
	00		 je	 $LN83@LoadInt_e
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 a4 00 00
	00		 je	 $LN82@LoadInt_e
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 8e 00 00
	00		 je	 $LN81@LoadInt_e
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	74 7b		 je	 SHORT $LN80@LoadInt_e
  00129	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0012c	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012f	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00132	84 d2		 test	 dl, dl
  00134	74 69		 je	 SHORT $LN79@LoadInt_e
  00136	32 d3		 xor	 dl, bl
  00138	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013b	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0013e	84 d2		 test	 dl, dl
  00140	74 58		 je	 SHORT $LN78@LoadInt_e
  00142	32 d1		 xor	 dl, cl
  00144	80 78 13 00	 cmp	 BYTE PTR [eax+19], 0
  00148	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0014b	0f 84 b1 00 00
	00		 je	 $LN1@LoadInt_e
  00151	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00154	84 d2		 test	 dl, dl
  00156	74 3c		 je	 SHORT $LN76@LoadInt_e
  00158	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0015b	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015e	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00161	84 d2		 test	 dl, dl
  00163	74 2a		 je	 SHORT $LN75@LoadInt_e
  00165	32 d3		 xor	 dl, bl
  00167	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016a	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0016d	84 d2		 test	 dl, dl
  0016f	74 19		 je	 SHORT $LN74@LoadInt_e
  00171	8a 40 17	 mov	 al, BYTE PTR [eax+23]
  00174	32 d1		 xor	 dl, cl
  00176	88 55 fa	 mov	 BYTE PTR __k$[ebp+22], dl
  00179	84 c0		 test	 al, al
  0017b	74 07		 je	 SHORT $LN73@LoadInt_e
  0017d	34 ea		 xor	 al, -22			; ffffffeaH
  0017f	88 45 fb	 mov	 BYTE PTR __k$[ebp+23], al
  00182	eb 7e		 jmp	 SHORT $LN1@LoadInt_e
$LN73@LoadInt_e:
  00184	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00188	eb 78		 jmp	 SHORT $LN1@LoadInt_e
$LN74@LoadInt_e:
  0018a	88 4d fa	 mov	 BYTE PTR __k$[ebp+22], cl
  0018d	eb 73		 jmp	 SHORT $LN1@LoadInt_e
$LN75@LoadInt_e:
  0018f	88 5d f9	 mov	 BYTE PTR __k$[ebp+21], bl
  00192	eb 6e		 jmp	 SHORT $LN1@LoadInt_e
$LN76@LoadInt_e:
  00194	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00198	eb 68		 jmp	 SHORT $LN1@LoadInt_e
$LN78@LoadInt_e:
  0019a	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  0019d	eb 63		 jmp	 SHORT $LN1@LoadInt_e
$LN79@LoadInt_e:
  0019f	88 5d f5	 mov	 BYTE PTR __k$[ebp+17], bl
  001a2	eb 5e		 jmp	 SHORT $LN1@LoadInt_e
$LN80@LoadInt_e:
  001a4	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001a8	eb 58		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  001aa	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001ae	eb 52		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  001b0	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  001b3	eb 4d		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  001b5	88 5d f1	 mov	 BYTE PTR __k$[ebp+13], bl
  001b8	eb 48		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  001ba	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001be	eb 42		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  001c0	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001c4	eb 3c		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  001c6	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001c9	eb 37		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  001cb	88 5d ed	 mov	 BYTE PTR __k$[ebp+9], bl
  001ce	eb 32		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  001d0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001d4	eb 2c		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  001d6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001da	eb 26		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  001dc	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001df	eb 21		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  001e1	88 5d e9	 mov	 BYTE PTR __k$[ebp+5], bl
  001e4	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  001e6	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001ea	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  001ec	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001f0	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  001f2	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001f6	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  001f8	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001fc	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  001fe	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  00202	6a 04		 push	 4
  00204	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00207	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+19], 0
  0020b	5a		 pop	 edx
$LL104@LoadInt_e:
  0020c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00212	83 c0 04	 add	 eax, 4
  00215	4a		 dec	 edx
  00216	75 f4		 jne	 SHORT $LL104@LoadInt_e
  00218	6a 10		 push	 16			; 00000010H
  0021a	58		 pop	 eax
$LL101@LoadInt_e:
  0021b	8b c8		 mov	 ecx, eax
  0021d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00223	79 05		 jns	 SHORT $LN111@LoadInt_e
  00225	49		 dec	 ecx
  00226	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00229	41		 inc	 ecx
$LN111@LoadInt_e:
  0022a	b2 ed		 mov	 dl, -19			; ffffffedH
  0022c	2a d1		 sub	 dl, cl
  0022e	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00232	40		 inc	 eax
  00233	83 f8 13	 cmp	 eax, 19			; 00000013H
  00236	7c e3		 jl	 SHORT $LL101@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  00238	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0023b	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0023e	50		 push	 eax
  0023f	8b ce		 mov	 ecx, esi
  00241	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00247	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024a	5e		 pop	 esi
  0024b	33 cd		 xor	 ecx, ebp
  0024d	5b		 pop	 ebx
  0024e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00253	c9		 leave
  00254	c2 08 00	 ret	 8
??$LoadInt_e@$0BE@@ioINILoader@@QAEHAAY0BE@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<20>
_TEXT	ENDS
PUBLIC	??_G_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAEPAXI@Z ; std::_List_nod<FireTime,std::allocator<FireTime> >::_Node::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_G_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAEPAXI@Z PROC ; std::_List_nod<FireTime,std::allocator<FireTime> >::_Node::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00009	e8 00 00 00 00	 call	 ??1FireTime@@QAE@XZ
  0000e	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00012	74 07		 je	 SHORT $LN1@scalar@2
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001a	59		 pop	 ecx
$LN1@scalar@2:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??_G_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAEPAXI@Z ENDP ; std::_List_nod<FireTime,std::allocator<FireTime> >::_Node::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@K@@QAEKXZ				; CEncrypt<unsigned long>::operator unsigned long
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??B?$CEncrypt@K@@QAEKXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@K@@QAEKXZ PROC				; CEncrypt<unsigned long>::operator unsigned long, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@K@@QAEKXZ ENDP				; CEncrypt<unsigned long>::operator unsigned long
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@H@@QAEHXZ				; CEncrypt<int>::operator int
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@H@@QAEHXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@H@@QAEHXZ PROC				; CEncrypt<int>::operator int, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@H@@QAEHXZ ENDP				; CEncrypt<int>::operator int
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z ; CEncrypt<enum TeamType>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z PROC ; CEncrypt<enum TeamType>::operator=, COMDAT
; _this$ = ecx

; 2965 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2966 : 		type value = inValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 2967 : 		EncryptValueToPool((char*)&value);

  00009	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ; CEncrypt<enum TeamType>::EncryptValueToPool

; 2968 : #ifdef _NOTUSE
; 2969 : 		m_value = inValue;
; 2970 : 		Debug();
; 2971 : #endif
; 2972 : 		return value;

  00012	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 2973 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z ENDP ; CEncrypt<enum TeamType>::operator=
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?LoadInitProperty@ioDelayAttackDummy@@IAEXAAVioINILoader@@@Z ; ioDelayAttackDummy::LoadInitProperty
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodelayattackdummy.cpp
;	COMDAT ?LoadInitProperty@ioDelayAttackDummy@@IAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
__k$531780 = -28					; size = 20
__k$531655 = -28					; size = 20
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadInitProperty@ioDelayAttackDummy@@IAEXAAVioINILoader@@@Z PROC ; ioDelayAttackDummy::LoadInitProperty, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _rkLoader$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi

; 27   : 	m_nAttackIndex = rkLoader.LoadInt_e( "destroy_attack_type", NO_WEAPON_ATTRIBUTE );

  00016	6a 04		 push	 4
  00018	8b f9		 mov	 edi, ecx
  0001a	c7 45 e4 89 89
	98 9e		 mov	 DWORD PTR __k$531655[ebp], -1634170487 ; 9e988989H
  00021	c7 45 e8 9f 83
	92 b5		 mov	 DWORD PTR __k$531655[ebp+4], -1248689249 ; b592839fH
  00028	c7 45 ec 8c 98
	9f 8b		 mov	 DWORD PTR __k$531655[ebp+8], -1952474996 ; 8b9f988cH
  0002f	c7 45 f0 8e 87
	b4 9e		 mov	 DWORD PTR __k$531655[ebp+12], -1632335986 ; 9eb4878eH
  00036	8d 45 e4	 lea	 eax, DWORD PTR __k$531655[ebp]
  00039	c7 45 f4 94 9c
	8e 00		 mov	 DWORD PTR __k$531655[ebp+16], 9346196 ; 008e9c94H
  00040	59		 pop	 ecx
$LL106@LoadInitPr:
  00041	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00047	83 c0 04	 add	 eax, 4
  0004a	49		 dec	 ecx
  0004b	75 f4		 jne	 SHORT $LL106@LoadInitPr
  0004d	6a 10		 push	 16			; 00000010H
  0004f	5e		 pop	 esi
$LL103@LoadInitPr:
  00050	8b c6		 mov	 eax, esi
  00052	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00057	79 05		 jns	 SHORT $LN223@LoadInitPr
  00059	48		 dec	 eax
  0005a	83 c8 fc	 or	 eax, -4			; fffffffcH
  0005d	40		 inc	 eax
$LN223@LoadInitPr:
  0005e	b1 ed		 mov	 cl, -19			; ffffffedH
  00060	2a c8		 sub	 cl, al
  00062	30 4c 35 e4	 xor	 BYTE PTR __k$531655[ebp+esi], cl
  00066	46		 inc	 esi
  00067	83 fe 13	 cmp	 esi, 19			; 00000013H
  0006a	7c e4		 jl	 SHORT $LL103@LoadInitPr
  0006c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00072	6a 00		 push	 0
  00074	8d 45 e4	 lea	 eax, DWORD PTR __k$531655[ebp]
  00077	50		 push	 eax
  00078	8b cb		 mov	 ecx, ebx
  0007a	ff d6		 call	 esi
  0007c	6a 04		 push	 4
  0007e	89 87 80 14 00
	00		 mov	 DWORD PTR [edi+5248], eax

; 28   : 	m_dwAttackEndDuration = (DWORD)rkLoader.LoadInt_e( "attack_end_duration", 0 );

  00084	c7 45 e4 8c 98
	9f 8b		 mov	 DWORD PTR __k$531780[ebp], -1952474996 ; 8b9f988cH
  0008b	c7 45 e8 8e 87
	b4 8f		 mov	 DWORD PTR __k$531780[ebp+4], -1883994226 ; 8fb4878eH
  00092	c7 45 ec 83 88
	b4 8e		 mov	 DWORD PTR __k$531780[ebp+8], -1900771197 ; 8eb48883H
  00099	c7 45 f0 98 9e
	8a 9e		 mov	 DWORD PTR __k$531780[ebp+12], -1635082600 ; 9e8a9e98H
  000a0	8d 45 e4	 lea	 eax, DWORD PTR __k$531780[ebp]
  000a3	c7 45 f4 84 83
	85 00		 mov	 DWORD PTR __k$531780[ebp+16], 8749956 ; 00858384H
  000aa	59		 pop	 ecx
$LL212@LoadInitPr:
  000ab	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000b1	83 c0 04	 add	 eax, 4
  000b4	49		 dec	 ecx
  000b5	75 f4		 jne	 SHORT $LL212@LoadInitPr
  000b7	6a 10		 push	 16			; 00000010H
  000b9	58		 pop	 eax
$LL209@LoadInitPr:
  000ba	8b c8		 mov	 ecx, eax
  000bc	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000c2	79 05		 jns	 SHORT $LN224@LoadInitPr
  000c4	49		 dec	 ecx
  000c5	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000c8	41		 inc	 ecx
$LN224@LoadInitPr:
  000c9	b2 ed		 mov	 dl, -19			; ffffffedH
  000cb	2a d1		 sub	 dl, cl
  000cd	30 54 05 e4	 xor	 BYTE PTR __k$531780[ebp+eax], dl
  000d1	40		 inc	 eax
  000d2	83 f8 13	 cmp	 eax, 19			; 00000013H
  000d5	7c e3		 jl	 SHORT $LL209@LoadInitPr
  000d7	6a 00		 push	 0
  000d9	8d 45 e4	 lea	 eax, DWORD PTR __k$531780[ebp]
  000dc	50		 push	 eax
  000dd	8b cb		 mov	 ecx, ebx
  000df	ff d6		 call	 esi

; 29   : }

  000e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	89 87 84 14 00
	00		 mov	 DWORD PTR [edi+5252], eax
  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	33 cd		 xor	 ecx, ebp
  000ee	5b		 pop	 ebx
  000ef	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f4	c9		 leave
  000f5	c2 04 00	 ret	 4
?LoadInitProperty@ioDelayAttackDummy@@IAEXAAVioINILoader@@@Z ENDP ; ioDelayAttackDummy::LoadInitProperty
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?ProcessDelayState@ioDelayAttackDummy@@MAEXM@Z
_TEXT	SEGMENT
_value$531898 = -4					; size = 4
_value$531894 = -4					; size = 4
_fTimePerSec$ = 8					; size = 4
?ProcessDelayState@ioDelayAttackDummy@@MAEXM@Z PROC	; ioDelayAttackDummy::ProcessDelayState, COMDAT
; _this$ = ecx

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx

; 68   : 	DWORD dwCurTime = FRAMEGETTIME();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0000e	8b c8		 mov	 ecx, eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 69   : 
; 70   : 	if( m_dwDelayStartTime > 0 && m_dwDelayStartTime + m_dwDelayDuration < dwCurTime )

  00016	83 be 20 02 00
	00 00		 cmp	 DWORD PTR [esi+544], 0
  0001d	8b f8		 mov	 edi, eax
  0001f	76 45		 jbe	 SHORT $LN1@ProcessDel
  00021	8d 45 fc	 lea	 eax, DWORD PTR _value$531894[ebp]
  00024	50		 push	 eax
  00025	8d 8e 3c 07 00
	00		 lea	 ecx, DWORD PTR [esi+1852]
  0002b	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00030	8b 86 20 02 00
	00		 mov	 eax, DWORD PTR [esi+544]
  00036	03 45 fc	 add	 eax, DWORD PTR _value$531894[ebp]
  00039	3b c7		 cmp	 eax, edi
  0003b	73 29		 jae	 SHORT $LN1@ProcessDel

; 71   : 	{
; 72   : 		m_dwDelayStartTime = 0;

  0003d	83 a6 20 02 00
	00 00		 and	 DWORD PTR [esi+544], 0

; 73   : 		m_iReserveAttackCode = m_iTraceNormalAttack;

  00044	8d 45 fc	 lea	 eax, DWORD PTR _value$531898[ebp]
  00047	50		 push	 eax
  00048	8d 8e 3c 0a 00
	00		 lea	 ecx, DWORD PTR [esi+2620]
  0004e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool
  00053	8b 45 fc	 mov	 eax, DWORD PTR _value$531898[ebp]
  00056	89 86 74 05 00
	00		 mov	 DWORD PTR [esi+1396], eax

; 74   : 		SetAttackState();

  0005c	8b 06		 mov	 eax, DWORD PTR [esi]
  0005e	8b ce		 mov	 ecx, esi
  00060	ff 90 24 01 00
	00		 call	 DWORD PTR [eax+292]
$LN1@ProcessDel:
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi

; 75   : 	}
; 76   : }

  00068	c9		 leave
  00069	c2 04 00	 ret	 4
?ProcessDelayState@ioDelayAttackDummy@@MAEXM@Z ENDP	; ioDelayAttackDummy::ProcessDelayState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?SetDieState@ioDelayAttackDummy@@UAEX_N@Z
_TEXT	SEGMENT
_bEffect$ = 8						; size = 1
?SetDieState@ioDelayAttackDummy@@UAEX_N@Z PROC		; ioDelayAttackDummy::SetDieState, COMDAT
; _this$ = ecx

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 123  : 	ioDummyChar::SetDieState( bEffect );

  00004	6a 00		 push	 0
  00006	ff 75 08	 push	 DWORD PTR _bEffect$[ebp]
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?SetDieState@ioDummyChar@@UAEX_N0@Z ; ioDummyChar::SetDieState

; 124  : 	FireWeapon();

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?FireWeapon@ioDelayAttackDummy@@IAEXXZ ; ioDelayAttackDummy::FireWeapon
  00017	5e		 pop	 esi

; 125  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?SetDieState@ioDelayAttackDummy@@UAEX_N@Z ENDP		; ioDelayAttackDummy::SetDieState
_TEXT	ENDS
PUBLIC	??D?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBEAAUFireTime@@XZ ; std::_List_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??D?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBEAAUFireTime@@XZ
_TEXT	SEGMENT
??D?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBEAAUFireTime@@XZ PROC ; std::_List_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator*, COMDAT
; _this$ = ecx

; 360  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 361  : 		}

  00005	c3		 ret	 0
??D?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QBEAAUFireTime@@XZ ENDP ; std::_List_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::operator*
_TEXT	ENDS
PUBLIC	??0?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@1@PBV?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::_List_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@1@PBV?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@1@PBV?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::_List_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >, COMDAT
; _this$ = ecx

; 342  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 343  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@1@PBV?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >::_List_iterator<std::_List_val<FireTime,std::allocator<FireTime> > >
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	83 c1 08	 add	 ecx, 8

; 64   : 	}

  00009	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  0000a	e9 00 00 00 00	 jmp	 ??1FireTime@@QAE@XZ
??$_Destroy@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioplayentity.h
_TEXT	ENDS
;	COMDAT ?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z
_TEXT	SEGMENT
_value$531948 = 8					; size = 4
_eType$ = 8						; size = 4
?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z PROC		; ioPlayEntity::SetTeam, COMDAT
; _this$ = ecx

; 106  : 	virtual void SetTeam( TeamType eType ) { m_TeamType = eType; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _eType$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$531948[ebp], eax
  00009	8d 45 08	 lea	 eax, DWORD PTR _value$531948[ebp]
  0000c	50		 push	 eax
  0000d	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  00013	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ; CEncrypt<enum TeamType>::EncryptValueToPool
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z ENDP		; ioPlayEntity::SetTeam
_TEXT	ENDS
EXTRN	?LoadProperty@ioDummyChar@@UAEXAAVioINILoader@@@Z:PROC ; ioDummyChar::LoadProperty
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodelayattackdummy.cpp
;	COMDAT ?LoadProperty@ioDelayAttackDummy@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_rkLoader$ = 8						; size = 4
?LoadProperty@ioDelayAttackDummy@@UAEXAAVioINILoader@@@Z PROC ; ioDelayAttackDummy::LoadProperty, COMDAT
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 20   : 	ioDummyChar::LoadProperty( rkLoader );

  00004	ff 75 08	 push	 DWORD PTR _rkLoader$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?LoadProperty@ioDummyChar@@UAEXAAVioINILoader@@@Z ; ioDummyChar::LoadProperty

; 21   : 
; 22   : 	LoadInitProperty( rkLoader );

  0000e	ff 75 08	 push	 DWORD PTR _rkLoader$[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	e8 00 00 00 00	 call	 ?LoadInitProperty@ioDelayAttackDummy@@IAEXAAVioINILoader@@@Z ; ioDelayAttackDummy::LoadInitProperty
  00018	5e		 pop	 esi

; 23   : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?LoadProperty@ioDelayAttackDummy@@UAEXAAVioINILoader@@@Z ENDP ; ioDelayAttackDummy::LoadProperty
_TEXT	ENDS
PUBLIC	?begin@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@XZ ; std::list<FireTime,std::allocator<FireTime> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?begin@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@XZ PROC ; std::list<FireTime,std::allocator<FireTime> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Nextnode(this->_Myhead), this));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@XZ ENDP ; std::list<FireTime,std::allocator<FireTime> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@XZ ; std::list<FireTime,std::allocator<FireTime> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@XZ PROC ; std::list<FireTime,std::allocator<FireTime> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Myhead, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@XZ ENDP ; std::list<FireTime,std::allocator<FireTime> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@@Z ; std::list<FireTime,std::allocator<FireTime> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@@Z PROC ; std::list<FireTime,std::allocator<FireTime> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@@Z ENDP ; std::list<FireTime,std::allocator<FireTime> >::_Make_iter
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@@Z ; std::allocator<std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	83 c1 08	 add	 ecx, 8
  00009	e8 00 00 00 00	 call	 ??1FireTime@@QAE@XZ

; 214  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@0@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@0@@Z ; std::_Dest_val<std::allocator<std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>,std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@0@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@0@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@0@@Z PROC ; std::_Dest_val<std::allocator<std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>,std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	83 c1 08	 add	 ecx, 8

; 288  : 	}

  00009	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  0000a	e9 00 00 00 00	 jmp	 ??1FireTime@@QAE@XZ
??$_Dest_val@V?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@std@@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@0@PAU_Node@?$_List_nod@UFireTime@@V?$allocator@UFireTime@@@std@@@0@@Z ENDP ; std::_Dest_val<std::allocator<std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>,std::_List_nod<FireTime,std::allocator<FireTime> >::_Node>
_TEXT	ENDS
PUBLIC	?erase@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@@Z ; std::list<FireTime,std::allocator<FireTime> >::erase
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?erase@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@@Z PROC ; std::list<FireTime,std::allocator<FireTime> >::erase, COMDAT
; _this$ = ecx

; 1054 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1055 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1056 : 		if (_Where._Getcont() != this || _Where._Ptr == this->_Myhead)
; 1057 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1058 : 		_Nodeptr _Pnode = (_Where++)._Mynode();
; 1059 : 		_Orphan_ptr(*this, _Pnode);
; 1060 : 
; 1061 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1062 : 		_Nodeptr _Pnode = (_Where++)._Mynode();

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Where$[ebp]
  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	89 45 0c	 mov	 DWORD PTR __Where$[ebp], eax

; 1063 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1064 : 
; 1065 : 		if (_Pnode != this->_Myhead)

  0000f	3b 37		 cmp	 esi, DWORD PTR [edi]
  00011	74 21		 je	 SHORT $LN1@erase

; 1066 : 			{	// not list head, safe to erase
; 1067 : 			this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1068 : 				this->_Nextnode(_Pnode);

  00013	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00016	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00018	89 08		 mov	 DWORD PTR [eax], ecx

; 1069 : 			this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1070 : 				this->_Prevnode(_Pnode);

  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	8b 06		 mov	 eax, DWORD PTR [esi]
  0001f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1071 : 
; 1072 : 			_Dest_val(this->_Alnod, _Pnode);

  00022	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00025	e8 00 00 00 00	 call	 ??1FireTime@@QAE@XZ

; 1073 : 			this->_Alnod.deallocate(_Pnode, 1);

  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 1074 : 
; 1075 : 			--this->_Mysize;

  00030	ff 4f 04	 dec	 DWORD PTR [edi+4]
  00033	59		 pop	 ecx
$LN1@erase:

; 1076 : 			}
; 1077 : 		return (_Make_iter(_Where));

  00034	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  0003a	5f		 pop	 edi
  0003b	89 08		 mov	 DWORD PTR [eax], ecx
  0003d	5e		 pop	 esi

; 1078 : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
?erase@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@@Z ENDP ; std::list<FireTime,std::allocator<FireTime> >::erase
_TEXT	ENDS
EXTRN	?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z:PROC ; ioGameEntity::GetMidPositionByRate
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ProcessAttackState@ioDelayAttackDummy@@MAEXMK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessAttackState@ioDelayAttackDummy@@MAEXMK@Z$0
__ehfuncinfo$?ProcessAttackState@ioDelayAttackDummy@@MAEXMK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ProcessAttackState@ioDelayAttackDummy@@MAEXMK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodelayattackdummy.cpp
xdata$x	ENDS
;	COMDAT ?ProcessAttackState@ioDelayAttackDummy@@MAEXMK@Z
_TEXT	SEGMENT
$T532213 = -72						; size = 4
_pOwner$ = -68						; size = 4
_dwCurTime$ = -64					; size = 4
tv442 = -60						; size = 4
tv432 = -60						; size = 4
tv428 = -60						; size = 4
tv423 = -60						; size = 4
$T532211 = -56						; size = 16
$T530558 = -52						; size = 12
_vCurPos$ = -40						; size = 12
_vCurDir$ = -28						; size = 12
__$EHRec$ = -12						; size = 12
_fTimePerSec$ = 8					; size = 4
_dwPreTime$ = 12					; size = 4
?ProcessAttackState@ioDelayAttackDummy@@MAEXMK@Z PROC	; ioDelayAttackDummy::ProcessAttackState, COMDAT
; _this$ = ecx

; 79   : {

  00000	6a 3c		 push	 60			; 0000003cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?ProcessAttackState@ioDelayAttackDummy@@MAEXMK@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b f1		 mov	 esi, ecx

; 80   : 	ioBaseChar *pOwner = GetOwner();

  0000e	e8 00 00 00 00	 call	 ?GetOwner@ioDummyChar@@QBEPAVioBaseChar@@XZ ; ioDummyChar::GetOwner
  00013	89 45 bc	 mov	 DWORD PTR _pOwner$[ebp], eax

; 81   : 	if( !pOwner ) return;

  00016	85 c0		 test	 eax, eax
  00018	0f 84 35 01 00
	00		 je	 $LN2@ProcessAtt

; 82   : 
; 83   : 	DWORD dwCurTime = FRAMEGETTIME();

  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00024	8b c8		 mov	 ecx, eax
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0002c	89 45 c0	 mov	 DWORD PTR _dwCurTime$[ebp], eax

; 84   : 
; 85   : 	D3DXVECTOR3 vCurDir = GetWorldOrientation() * D3DXVECTOR3( 0.0f, 0.0f, -FLOAT1 );

  0002f	b8 01 00 00 00	 mov	 eax, 1
  00034	0f 57 c0	 xorps	 xmm0, xmm0
  00037	89 45 c4	 mov	 DWORD PTR tv442[ebp], eax
  0003a	db 45 c4	 fild	 DWORD PTR tv442[ebp]
  0003d	f3 0f 11 45 cc	 movss	 DWORD PTR $T530558[ebp], xmm0
  00042	f3 0f 11 45 d0	 movss	 DWORD PTR $T530558[ebp+4], xmm0
  00047	85 c0		 test	 eax, eax
  00049	79 06		 jns	 SHORT $LN60@ProcessAtt
  0004b	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN60@ProcessAtt:
  00051	8d 45 cc	 lea	 eax, DWORD PTR $T530558[ebp]
  00054	d9 e0		 fchs
  00056	50		 push	 eax
  00057	d9 5d d4	 fstp	 DWORD PTR $T530558[ebp+8]
  0005a	8b 06		 mov	 eax, DWORD PTR [esi]
  0005c	8b ce		 mov	 ecx, esi
  0005e	ff 50 74	 call	 DWORD PTR [eax+116]
  00061	50		 push	 eax
  00062	8d 45 e4	 lea	 eax, DWORD PTR _vCurDir$[ebp]
  00065	50		 push	 eax
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 86   : 	D3DXVec3Normalize( &vCurDir, &vCurDir );

  0006f	8d 45 e4	 lea	 eax, DWORD PTR _vCurDir$[ebp]
  00072	50		 push	 eax
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 87   : 
; 88   : 	D3DXVECTOR3 vCurPos = GetMidPositionByRate();

  00079	b8 05 00 00 00	 mov	 eax, 5
  0007e	8b c8		 mov	 ecx, eax
  00080	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00085	89 4d c4	 mov	 DWORD PTR tv432[ebp], ecx
  00088	db 45 c4	 fild	 DWORD PTR tv432[ebp]
  0008b	85 c9		 test	 ecx, ecx
  0008d	79 06		 jns	 SHORT $LN61@ProcessAtt
  0008f	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN61@ProcessAtt:
  00095	89 45 c4	 mov	 DWORD PTR tv428[ebp], eax
  00098	db 45 c4	 fild	 DWORD PTR tv428[ebp]
  0009b	85 c0		 test	 eax, eax
  0009d	79 06		 jns	 SHORT $LN62@ProcessAtt
  0009f	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN62@ProcessAtt:
  000a5	de f9		 fdivp	 ST(1), ST(0)
  000a7	51		 push	 ecx
  000a8	8d 45 d8	 lea	 eax, DWORD PTR _vCurPos$[ebp]
  000ab	8b ce		 mov	 ecx, esi
  000ad	d9 5d c4	 fstp	 DWORD PTR tv423[ebp]
  000b0	d9 45 c4	 fld	 DWORD PTR tv423[ebp]
  000b3	d9 1c 24	 fstp	 DWORD PTR [esp]
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 ?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z ; ioGameEntity::GetMidPositionByRate

; 89   : 
; 90   : 	DWORD dwLastFireTime = dwPreTime;
; 91   : 	FireTimeList::iterator iter = m_vAttackFireTimeList.begin();

  000bc	8b 86 78 05 00
	00		 mov	 eax, DWORD PTR [esi+1400]
  000c2	8b 38		 mov	 edi, DWORD PTR [eax]

; 92   : 	while( iter != m_vAttackFireTimeList.end() )

  000c4	3b f8		 cmp	 edi, eax
  000c6	74 68		 je	 SHORT $LN6@ProcessAtt
$LL7@ProcessAtt:

; 93   : 	{
; 94   : 		const FireTime &rkFire = *iter;
; 95   : 
; 96   : 		DWORD dwFireTime = rkFire.dwStart;

  000c8	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 97   : 		if( COMPARE( dwFireTime, dwPreTime, dwCurTime ) )

  000cb	3b 45 0c	 cmp	 eax, DWORD PTR _dwPreTime$[ebp]
  000ce	72 56		 jb	 SHORT $LN5@ProcessAtt
  000d0	3b 45 c0	 cmp	 eax, DWORD PTR _dwCurTime$[ebp]
  000d3	73 51		 jae	 SHORT $LN5@ProcessAtt

; 98   : 		{
; 99   : 			if( rkFire.iAttributeIdx != NO_WEAPON_ATTRIBUTE )

  000d5	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  000d9	74 37		 je	 SHORT $LN4@ProcessAtt

; 100  : 			{
; 101  : 				ioWeapon *pWeapon = NULL;
; 102  : 				pWeapon = pOwner->ExtendFireExplicit( rkFire, vCurPos, vCurDir, "" );

  000db	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  000e0	8d 4d c8	 lea	 ecx, DWORD PTR $T532211[ebp]
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  000e9	8b 4d bc	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  000ec	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  000f0	8d 45 c8	 lea	 eax, DWORD PTR $T532211[ebp]
  000f3	50		 push	 eax
  000f4	8d 45 e4	 lea	 eax, DWORD PTR _vCurDir$[ebp]
  000f7	50		 push	 eax
  000f8	8d 45 d8	 lea	 eax, DWORD PTR _vCurPos$[ebp]
  000fb	50		 push	 eax
  000fc	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 ?ExtendFireExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUFireTime@@ABUD3DXVECTOR3@@1ABVioHashString@@@Z ; ioBaseChar::ExtendFireExplicit
  00105	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00109	8d 4d c8	 lea	 ecx, DWORD PTR $T532211[ebp]
  0010c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
$LN4@ProcessAtt:

; 103  : 			}
; 104  : 
; 105  : 			iter = m_vAttackFireTimeList.erase( iter );

  00112	57		 push	 edi
  00113	8d 45 b8	 lea	 eax, DWORD PTR $T532213[ebp]
  00116	50		 push	 eax
  00117	8d 8e 78 05 00
	00		 lea	 ecx, DWORD PTR [esi+1400]
  0011d	e8 00 00 00 00	 call	 ?erase@?$list@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UFireTime@@V?$allocator@UFireTime@@@std@@@std@@@2@@Z ; std::list<FireTime,std::allocator<FireTime> >::erase
  00122	8b 38		 mov	 edi, DWORD PTR [eax]

; 106  : 		}
; 107  : 		else

  00124	eb 02		 jmp	 SHORT $LN54@ProcessAtt
$LN5@ProcessAtt:

; 108  : 		{
; 109  : 			++iter;

  00126	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN54@ProcessAtt:

; 92   : 	while( iter != m_vAttackFireTimeList.end() )

  00128	3b be 78 05 00
	00		 cmp	 edi, DWORD PTR [esi+1400]
  0012e	75 98		 jne	 SHORT $LL7@ProcessAtt
$LN6@ProcessAtt:

; 110  : 		}
; 111  : 	}
; 112  : 
; 113  : 	//
; 114  : 	if( m_dwAttackAniEndTime == 0 || m_dwAttackAniEndTime + m_dwAttackEndDuration < dwCurTime )

  00130	8b 86 e8 06 00
	00		 mov	 eax, DWORD PTR [esi+1768]
  00136	85 c0		 test	 eax, eax
  00138	74 0d		 je	 SHORT $LN1@ProcessAtt
  0013a	8b 8e 84 14 00
	00		 mov	 ecx, DWORD PTR [esi+5252]
  00140	03 c8		 add	 ecx, eax
  00142	3b 4d c0	 cmp	 ecx, DWORD PTR _dwCurTime$[ebp]
  00145	73 0c		 jae	 SHORT $LN2@ProcessAtt
$LN1@ProcessAtt:

; 115  : 	{
; 116  : 		SetDieState( true );

  00147	8b 06		 mov	 eax, DWORD PTR [esi]
  00149	6a 01		 push	 1
  0014b	8b ce		 mov	 ecx, esi
  0014d	ff 90 60 01 00
	00		 call	 DWORD PTR [eax+352]
$LN2@ProcessAtt:

; 117  : 		return;
; 118  : 	}
; 119  : }

  00153	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00158	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ProcessAttackState@ioDelayAttackDummy@@MAEXMK@Z$0:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR $T532211[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?ProcessAttackState@ioDelayAttackDummy@@MAEXMK@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ProcessAttackState@ioDelayAttackDummy@@MAEXMK@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ProcessAttackState@ioDelayAttackDummy@@MAEXMK@Z ENDP	; ioDelayAttackDummy::ProcessAttackState
END
