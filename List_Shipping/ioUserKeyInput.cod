; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioUserKeyInput.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??0tagUseKeyValue@ioUserKeyInput@@QAE@XZ	; ioUserKeyInput::tagUseKeyValue::tagUseKeyValue
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iouserkeyinput.cpp
;	COMDAT ??0tagUseKeyValue@ioUserKeyInput@@QAE@XZ
_TEXT	SEGMENT
??0tagUseKeyValue@ioUserKeyInput@@QAE@XZ PROC		; ioUserKeyInput::tagUseKeyValue::tagUseKeyValue, COMDAT
; _this$ = ecx

; 8    : {

  00000	8b c1		 mov	 eax, ecx

; 9    : 	m_wLeftKey			= KEY_NULL;

  00002	33 c9		 xor	 ecx, ecx
  00004	66 89 08	 mov	 WORD PTR [eax], cx

; 10   : 	m_wRightKey			= KEY_NULL;

  00007	66 89 48 02	 mov	 WORD PTR [eax+2], cx

; 11   : 	m_wUpKey			= KEY_NULL;

  0000b	66 89 48 04	 mov	 WORD PTR [eax+4], cx

; 12   : 	m_wDownKey			= KEY_NULL;

  0000f	66 89 48 06	 mov	 WORD PTR [eax+6], cx

; 13   : 	m_wLeftUpKey        = KEY_NULL;

  00013	66 89 48 08	 mov	 WORD PTR [eax+8], cx

; 14   : 	m_wLeftDownKey      = KEY_NULL;

  00017	66 89 48 0a	 mov	 WORD PTR [eax+10], cx

; 15   : 	m_wRightUpKey       = KEY_NULL;

  0001b	66 89 48 0c	 mov	 WORD PTR [eax+12], cx

; 16   : 	m_wRightDownKey     = KEY_NULL;

  0001f	66 89 48 0e	 mov	 WORD PTR [eax+14], cx

; 17   : 	m_wDefenseKey       = KEY_NULL;

  00023	66 89 48 10	 mov	 WORD PTR [eax+16], cx

; 18   : 	m_wJumpKey	        = KEY_NULL;

  00027	66 89 48 12	 mov	 WORD PTR [eax+18], cx

; 19   : 	m_wAttackKey        = KEY_NULL;

  0002b	66 89 48 14	 mov	 WORD PTR [eax+20], cx

; 20   : 	m_wWeaponSkillKey   = KEY_NULL;

  0002f	66 89 48 16	 mov	 WORD PTR [eax+22], cx

; 21   : 	m_wArmorSkillKey    = KEY_NULL;

  00033	66 89 48 18	 mov	 WORD PTR [eax+24], cx

; 22   : 	m_wHelmetSkillKey   = KEY_NULL;

  00037	66 89 48 1a	 mov	 WORD PTR [eax+26], cx

; 23   : 	m_wCloakSkillKey    = KEY_NULL;

  0003b	66 89 48 1c	 mov	 WORD PTR [eax+28], cx

; 24   : }

  0003f	c3		 ret	 0
??0tagUseKeyValue@ioUserKeyInput@@QAE@XZ ENDP		; ioUserKeyInput::tagUseKeyValue::tagUseKeyValue
_TEXT	ENDS
PUBLIC	?SetValue@tagUseKeyValue@ioUserKeyInput@@QAEXGGGGGGGGGGGGGGG@Z ; ioUserKeyInput::tagUseKeyValue::SetValue
; Function compile flags: /Ogsp
;	COMDAT ?SetValue@tagUseKeyValue@ioUserKeyInput@@QAEXGGGGGGGGGGGGGGG@Z
_TEXT	SEGMENT
_wLeft$ = 8						; size = 2
_wRight$ = 12						; size = 2
_wUp$ = 16						; size = 2
_wDown$ = 20						; size = 2
_wLeftUp$ = 24						; size = 2
_wLeftDown$ = 28					; size = 2
_wRightUp$ = 32						; size = 2
_wRightDown$ = 36					; size = 2
_wDefense$ = 40						; size = 2
_wJump$ = 44						; size = 2
_wAttack$ = 48						; size = 2
_wWeaponSkill$ = 52					; size = 2
_wArmorSkill$ = 56					; size = 2
_wHelmetSkill$ = 60					; size = 2
_wCloakSkill$ = 64					; size = 2
?SetValue@tagUseKeyValue@ioUserKeyInput@@QAEXGGGGGGGGGGGGGGG@Z PROC ; ioUserKeyInput::tagUseKeyValue::SetValue, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	m_wLeftKey			= wLeft;

  00003	66 8b 45 08	 mov	 ax, WORD PTR _wLeft$[ebp]
  00007	66 89 01	 mov	 WORD PTR [ecx], ax

; 32   : 	m_wRightKey			= wRight;

  0000a	66 8b 45 0c	 mov	 ax, WORD PTR _wRight$[ebp]
  0000e	66 89 41 02	 mov	 WORD PTR [ecx+2], ax

; 33   : 	m_wUpKey			= wUp;

  00012	66 8b 45 10	 mov	 ax, WORD PTR _wUp$[ebp]
  00016	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 34   : 	m_wDownKey			= wDown;

  0001a	66 8b 45 14	 mov	 ax, WORD PTR _wDown$[ebp]
  0001e	66 89 41 06	 mov	 WORD PTR [ecx+6], ax

; 35   : 	m_wLeftUpKey        = wLeftUp;

  00022	66 8b 45 18	 mov	 ax, WORD PTR _wLeftUp$[ebp]
  00026	66 89 41 08	 mov	 WORD PTR [ecx+8], ax

; 36   : 	m_wLeftDownKey      = wLeftDown;

  0002a	66 8b 45 1c	 mov	 ax, WORD PTR _wLeftDown$[ebp]
  0002e	66 89 41 0a	 mov	 WORD PTR [ecx+10], ax

; 37   : 	m_wRightUpKey       = wRightUp;

  00032	66 8b 45 20	 mov	 ax, WORD PTR _wRightUp$[ebp]
  00036	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax

; 38   : 	m_wRightDownKey     = wRightDown;

  0003a	66 8b 45 24	 mov	 ax, WORD PTR _wRightDown$[ebp]
  0003e	66 89 41 0e	 mov	 WORD PTR [ecx+14], ax

; 39   : 	m_wDefenseKey       = wDefense;

  00042	66 8b 45 28	 mov	 ax, WORD PTR _wDefense$[ebp]
  00046	66 89 41 10	 mov	 WORD PTR [ecx+16], ax

; 40   : 	m_wJumpKey	        = wJump;

  0004a	66 8b 45 2c	 mov	 ax, WORD PTR _wJump$[ebp]
  0004e	66 89 41 12	 mov	 WORD PTR [ecx+18], ax

; 41   : 	m_wAttackKey        = wAttack;

  00052	66 8b 45 30	 mov	 ax, WORD PTR _wAttack$[ebp]
  00056	66 89 41 14	 mov	 WORD PTR [ecx+20], ax

; 42   : 	m_wWeaponSkillKey   = wWeaponSkill;

  0005a	66 8b 45 34	 mov	 ax, WORD PTR _wWeaponSkill$[ebp]
  0005e	66 89 41 16	 mov	 WORD PTR [ecx+22], ax

; 43   : 	m_wArmorSkillKey    = wArmorSkill;

  00062	66 8b 45 38	 mov	 ax, WORD PTR _wArmorSkill$[ebp]
  00066	66 89 41 18	 mov	 WORD PTR [ecx+24], ax

; 44   : 	m_wHelmetSkillKey   = wHelmetSkill;

  0006a	66 8b 45 3c	 mov	 ax, WORD PTR _wHelmetSkill$[ebp]
  0006e	66 89 41 1a	 mov	 WORD PTR [ecx+26], ax

; 45   : 	m_wCloakSkillKey    = wCloakSkill;

  00072	66 8b 45 40	 mov	 ax, WORD PTR _wCloakSkill$[ebp]
  00076	66 89 41 1c	 mov	 WORD PTR [ecx+28], ax

; 46   : }

  0007a	5d		 pop	 ebp
  0007b	c2 3c 00	 ret	 60			; 0000003cH
?SetValue@tagUseKeyValue@ioUserKeyInput@@QAEXGGGGGGGGGGGGGGG@Z ENDP ; ioUserKeyInput::tagUseKeyValue::SetValue
_TEXT	ENDS
PUBLIC	?SetDefaultFirstKey@tagUseKeyValue@ioUserKeyInput@@QAEXXZ ; ioUserKeyInput::tagUseKeyValue::SetDefaultFirstKey
; Function compile flags: /Ogsp
;	COMDAT ?SetDefaultFirstKey@tagUseKeyValue@ioUserKeyInput@@QAEXXZ
_TEXT	SEGMENT
?SetDefaultFirstKey@tagUseKeyValue@ioUserKeyInput@@QAEXXZ PROC ; ioUserKeyInput::tagUseKeyValue::SetDefaultFirstKey, COMDAT
; _this$ = ecx

; 50   : 	SetValue(KEY_LEFTARROW, KEY_RIGHTARROW, KEY_UPARROW, KEY_DOWNARROW
; 51   : 		, KEY_NULL, KEY_NULL, KEY_NULL, KEY_NULL
; 52   : 		, KEY_S, KEY_A, KEY_D
; 53   : 		, KEY_NULL, KEY_NULL, KEY_NULL, KEY_NULL);

  00000	33 c0		 xor	 eax, eax
  00002	50		 push	 eax
  00003	50		 push	 eax
  00004	50		 push	 eax
  00005	50		 push	 eax
  00006	6a 64		 push	 100			; 00000064H
  00008	6a 61		 push	 97			; 00000061H
  0000a	6a 73		 push	 115			; 00000073H
  0000c	50		 push	 eax
  0000d	50		 push	 eax
  0000e	50		 push	 eax
  0000f	50		 push	 eax
  00010	68 89 00 00 00	 push	 137			; 00000089H
  00015	68 88 00 00 00	 push	 136			; 00000088H
  0001a	68 87 00 00 00	 push	 135			; 00000087H
  0001f	68 86 00 00 00	 push	 134			; 00000086H
  00024	e8 00 00 00 00	 call	 ?SetValue@tagUseKeyValue@ioUserKeyInput@@QAEXGGGGGGGGGGGGGGG@Z ; ioUserKeyInput::tagUseKeyValue::SetValue

; 54   : }

  00029	c3		 ret	 0
?SetDefaultFirstKey@tagUseKeyValue@ioUserKeyInput@@QAEXXZ ENDP ; ioUserKeyInput::tagUseKeyValue::SetDefaultFirstKey
_TEXT	ENDS
PUBLIC	?SetDefaultSecondKey@tagUseKeyValue@ioUserKeyInput@@QAEXXZ ; ioUserKeyInput::tagUseKeyValue::SetDefaultSecondKey
; Function compile flags: /Ogsp
;	COMDAT ?SetDefaultSecondKey@tagUseKeyValue@ioUserKeyInput@@QAEXXZ
_TEXT	SEGMENT
?SetDefaultSecondKey@tagUseKeyValue@ioUserKeyInput@@QAEXXZ PROC ; ioUserKeyInput::tagUseKeyValue::SetDefaultSecondKey, COMDAT
; _this$ = ecx

; 58   : 	SetValue(KEY_NUM4, KEY_NUM6, KEY_NUM8, KEY_NUM2
; 59   : 		, KEY_NUM7, KEY_NUM1, KEY_NUM9, KEY_NUM3
; 60   : 		, KEY_X, KEY_Z, KEY_C
; 61   : 		, KEY_NULL, KEY_NULL, KEY_NULL, KEY_NULL);

  00000	33 c0		 xor	 eax, eax
  00002	50		 push	 eax
  00003	50		 push	 eax
  00004	50		 push	 eax
  00005	50		 push	 eax
  00006	6a 63		 push	 99			; 00000063H
  00008	6a 7a		 push	 122			; 0000007aH
  0000a	6a 78		 push	 120			; 00000078H
  0000c	68 a5 00 00 00	 push	 165			; 000000a5H
  00011	68 ab 00 00 00	 push	 171			; 000000abH
  00016	68 a3 00 00 00	 push	 163			; 000000a3H
  0001b	68 a9 00 00 00	 push	 169			; 000000a9H
  00020	68 a4 00 00 00	 push	 164			; 000000a4H
  00025	68 aa 00 00 00	 push	 170			; 000000aaH
  0002a	68 a8 00 00 00	 push	 168			; 000000a8H
  0002f	68 a6 00 00 00	 push	 166			; 000000a6H
  00034	e8 00 00 00 00	 call	 ?SetValue@tagUseKeyValue@ioUserKeyInput@@QAEXGGGGGGGGGGGGGGG@Z ; ioUserKeyInput::tagUseKeyValue::SetValue

; 62   : }

  00039	c3		 ret	 0
?SetDefaultSecondKey@tagUseKeyValue@ioUserKeyInput@@QAEXXZ ENDP ; ioUserKeyInput::tagUseKeyValue::SetDefaultSecondKey
_TEXT	ENDS
PUBLIC	?SetDefaultJoyKey@tagUseKeyValue@ioUserKeyInput@@QAEXXZ ; ioUserKeyInput::tagUseKeyValue::SetDefaultJoyKey
; Function compile flags: /Ogsp
;	COMDAT ?SetDefaultJoyKey@tagUseKeyValue@ioUserKeyInput@@QAEXXZ
_TEXT	SEGMENT
?SetDefaultJoyKey@tagUseKeyValue@ioUserKeyInput@@QAEXXZ PROC ; ioUserKeyInput::tagUseKeyValue::SetDefaultJoyKey, COMDAT
; _this$ = ecx

; 66   : 	SetValue(KEY_LSTICKLEFT, KEY_LSTICKRIGHT, KEY_LSTICKUP, KEY_LSTICKDOWN
; 67   : 		, KEY_NULL, KEY_NULL, KEY_NULL, KEY_NULL
; 68   : 		, KEY_JOYBUTN1, KEY_JOYBUTN3, KEY_JOYBUTN2
; 69   : 		, KEY_NULL, KEY_NULL, KEY_NULL, KEY_NULL);

  00000	33 c0		 xor	 eax, eax
  00002	50		 push	 eax
  00003	50		 push	 eax
  00004	50		 push	 eax
  00005	50		 push	 eax
  00006	68 0d 01 00 00	 push	 269			; 0000010dH
  0000b	68 0e 01 00 00	 push	 270			; 0000010eH
  00010	68 0c 01 00 00	 push	 268			; 0000010cH
  00015	50		 push	 eax
  00016	50		 push	 eax
  00017	50		 push	 eax
  00018	50		 push	 eax
  00019	68 07 01 00 00	 push	 263			; 00000107H
  0001e	68 06 01 00 00	 push	 262			; 00000106H
  00023	68 05 01 00 00	 push	 261			; 00000105H
  00028	68 04 01 00 00	 push	 260			; 00000104H
  0002d	e8 00 00 00 00	 call	 ?SetValue@tagUseKeyValue@ioUserKeyInput@@QAEXGGGGGGGGGGGGGGG@Z ; ioUserKeyInput::tagUseKeyValue::SetValue

; 70   : }

  00032	c3		 ret	 0
?SetDefaultJoyKey@tagUseKeyValue@ioUserKeyInput@@QAEXXZ ENDP ; ioUserKeyInput::tagUseKeyValue::SetDefaultJoyKey
_TEXT	ENDS
PUBLIC	?Clear@tagUseKeyValue@ioUserKeyInput@@QAEXXZ	; ioUserKeyInput::tagUseKeyValue::Clear
; Function compile flags: /Ogsp
;	COMDAT ?Clear@tagUseKeyValue@ioUserKeyInput@@QAEXXZ
_TEXT	SEGMENT
?Clear@tagUseKeyValue@ioUserKeyInput@@QAEXXZ PROC	; ioUserKeyInput::tagUseKeyValue::Clear, COMDAT
; _this$ = ecx

; 74   : 	SetValue(KEY_NULL, KEY_NULL, KEY_NULL, KEY_NULL
; 75   : 		, KEY_NULL, KEY_NULL, KEY_NULL, KEY_NULL
; 76   : 		, KEY_NULL, KEY_NULL, KEY_NULL
; 77   : 		, KEY_NULL, KEY_NULL, KEY_NULL, KEY_NULL);

  00000	33 c0		 xor	 eax, eax
  00002	50		 push	 eax
  00003	50		 push	 eax
  00004	50		 push	 eax
  00005	50		 push	 eax
  00006	50		 push	 eax
  00007	50		 push	 eax
  00008	50		 push	 eax
  00009	50		 push	 eax
  0000a	50		 push	 eax
  0000b	50		 push	 eax
  0000c	50		 push	 eax
  0000d	50		 push	 eax
  0000e	50		 push	 eax
  0000f	50		 push	 eax
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ?SetValue@tagUseKeyValue@ioUserKeyInput@@QAEXGGGGGGGGGGGGGGG@Z ; ioUserKeyInput::tagUseKeyValue::SetValue

; 78   : }

  00016	c3		 ret	 0
?Clear@tagUseKeyValue@ioUserKeyInput@@QAEXXZ ENDP	; ioUserKeyInput::tagUseKeyValue::Clear
_TEXT	ENDS
PUBLIC	?IsEmpty@tagUseKeyValue@ioUserKeyInput@@QAE_NXZ	; ioUserKeyInput::tagUseKeyValue::IsEmpty
; Function compile flags: /Ogsp
;	COMDAT ?IsEmpty@tagUseKeyValue@ioUserKeyInput@@QAE_NXZ
_TEXT	SEGMENT
?IsEmpty@tagUseKeyValue@ioUserKeyInput@@QAE_NXZ PROC	; ioUserKeyInput::tagUseKeyValue::IsEmpty, COMDAT
; _this$ = ecx

; 82   : 	if( m_wLeftKey			== KEY_NULL &&
; 83   : 		m_wRightKey			== KEY_NULL &&
; 84   : 		m_wUpKey			== KEY_NULL &&
; 85   : 		m_wDownKey			== KEY_NULL &&
; 86   : 		m_wLeftUpKey        == KEY_NULL &&
; 87   : 		m_wLeftDownKey      == KEY_NULL &&
; 88   : 		m_wRightUpKey       == KEY_NULL &&
; 89   : 		m_wRightDownKey     == KEY_NULL &&
; 90   : 		m_wDefenseKey       == KEY_NULL &&
; 91   : 		m_wJumpKey	        == KEY_NULL &&
; 92   : 		m_wAttackKey        == KEY_NULL &&
; 93   : 		m_wWeaponSkillKey   == KEY_NULL &&
; 94   : 		m_wArmorSkillKey    == KEY_NULL &&
; 95   : 		m_wHelmetSkillKey   == KEY_NULL &&
; 96   : 		m_wCloakSkillKey    == KEY_NULL )

  00000	33 c0		 xor	 eax, eax
  00002	66 39 01	 cmp	 WORD PTR [ecx], ax
  00005	75 57		 jne	 SHORT $LN1@IsEmpty
  00007	66 39 41 02	 cmp	 WORD PTR [ecx+2], ax
  0000b	75 51		 jne	 SHORT $LN1@IsEmpty
  0000d	66 39 41 04	 cmp	 WORD PTR [ecx+4], ax
  00011	75 4b		 jne	 SHORT $LN1@IsEmpty
  00013	66 39 41 06	 cmp	 WORD PTR [ecx+6], ax
  00017	75 45		 jne	 SHORT $LN1@IsEmpty
  00019	66 39 41 08	 cmp	 WORD PTR [ecx+8], ax
  0001d	75 3f		 jne	 SHORT $LN1@IsEmpty
  0001f	66 39 41 0a	 cmp	 WORD PTR [ecx+10], ax
  00023	75 39		 jne	 SHORT $LN1@IsEmpty
  00025	66 39 41 0c	 cmp	 WORD PTR [ecx+12], ax
  00029	75 33		 jne	 SHORT $LN1@IsEmpty
  0002b	66 39 41 0e	 cmp	 WORD PTR [ecx+14], ax
  0002f	75 2d		 jne	 SHORT $LN1@IsEmpty
  00031	66 39 41 10	 cmp	 WORD PTR [ecx+16], ax
  00035	75 27		 jne	 SHORT $LN1@IsEmpty
  00037	66 39 41 12	 cmp	 WORD PTR [ecx+18], ax
  0003b	75 21		 jne	 SHORT $LN1@IsEmpty
  0003d	66 39 41 14	 cmp	 WORD PTR [ecx+20], ax
  00041	75 1b		 jne	 SHORT $LN1@IsEmpty
  00043	66 39 41 16	 cmp	 WORD PTR [ecx+22], ax
  00047	75 15		 jne	 SHORT $LN1@IsEmpty
  00049	66 39 41 18	 cmp	 WORD PTR [ecx+24], ax
  0004d	75 0f		 jne	 SHORT $LN1@IsEmpty
  0004f	66 39 41 1a	 cmp	 WORD PTR [ecx+26], ax
  00053	75 09		 jne	 SHORT $LN1@IsEmpty
  00055	66 39 41 1c	 cmp	 WORD PTR [ecx+28], ax
  00059	75 03		 jne	 SHORT $LN1@IsEmpty

; 97   : 		return true;

  0005b	b0 01		 mov	 al, 1

; 100  : }

  0005d	c3		 ret	 0
$LN1@IsEmpty:

; 98   : 
; 99   : 	return false;

  0005e	32 c0		 xor	 al, al

; 100  : }

  00060	c3		 ret	 0
?IsEmpty@tagUseKeyValue@ioUserKeyInput@@QAE_NXZ ENDP	; ioUserKeyInput::tagUseKeyValue::IsEmpty
_TEXT	ENDS
PUBLIC	?return100@@YAIXZ				; return100
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return100@@YAIXZ
_TEXT	SEGMENT
?return100@@YAIXZ PROC					; return100, COMDAT

; 25   : 	__forceinline unsigned int return100() { __asm mov eax, 100 };

  00000	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00005	c3		 ret	 0
?return100@@YAIXZ ENDP					; return100
_TEXT	ENDS
PUBLIC	?SetDashCheckDuration@ioUserKeyInput@@QAEXK@Z	; ioUserKeyInput::SetDashCheckDuration
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iouserkeyinput.cpp
;	COMDAT ?SetDashCheckDuration@ioUserKeyInput@@QAEXK@Z
_TEXT	SEGMENT
_dwDuration$ = 8					; size = 4
?SetDashCheckDuration@ioUserKeyInput@@QAEXK@Z PROC	; ioUserKeyInput::SetDashCheckDuration, COMDAT
; _this$ = ecx

; 174  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 175  : 	m_dwDashCheckDuration = dwDuration;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwDuration$[ebp]
  00006	89 81 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], eax

; 176  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetDashCheckDuration@ioUserKeyInput@@QAEXK@Z ENDP	; ioUserKeyInput::SetDashCheckDuration
_TEXT	ENDS
PUBLIC	?SetUpKeyValue@ioUserKeyInput@@QAEXABUtagUseKeyValue@1@@Z ; ioUserKeyInput::SetUpKeyValue
; Function compile flags: /Ogsp
;	COMDAT ?SetUpKeyValue@ioUserKeyInput@@QAEXABUtagUseKeyValue@1@@Z
_TEXT	SEGMENT
_rkUseKeyValue$ = 8					; size = 4
?SetUpKeyValue@ioUserKeyInput@@QAEXABUtagUseKeyValue@1@@Z PROC ; ioUserKeyInput::SetUpKeyValue, COMDAT
; _this$ = ecx

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 180  : 	m_Keys	= rkUseKeyValue;

  00004	8b 75 08	 mov	 esi, DWORD PTR _rkUseKeyValue$[ebp]
  00007	57		 push	 edi
  00008	8b c1		 mov	 eax, ecx
  0000a	6a 07		 push	 7
  0000c	8d 78 0e	 lea	 edi, DWORD PTR [eax+14]
  0000f	59		 pop	 ecx
  00010	f3 a5		 rep movsd

; 181  : 	m_KeptKeys.Clear();

  00012	8d 88 86 00 00
	00		 lea	 ecx, DWORD PTR [eax+134]
  00018	66 a5		 movsw
  0001a	e8 00 00 00 00	 call	 ?Clear@tagUseKeyValue@ioUserKeyInput@@QAEXXZ ; ioUserKeyInput::tagUseKeyValue::Clear
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi

; 182  : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?SetUpKeyValue@ioUserKeyInput@@QAEXABUtagUseKeyValue@1@@Z ENDP ; ioUserKeyInput::SetUpKeyValue
_TEXT	ENDS
PUBLIC	?SetUpJoyKeyValue@ioUserKeyInput@@QAEXABUtagUseKeyValue@1@@Z ; ioUserKeyInput::SetUpJoyKeyValue
; Function compile flags: /Ogsp
;	COMDAT ?SetUpJoyKeyValue@ioUserKeyInput@@QAEXABUtagUseKeyValue@1@@Z
_TEXT	SEGMENT
_rkUseKeyValue$ = 8					; size = 4
?SetUpJoyKeyValue@ioUserKeyInput@@QAEXABUtagUseKeyValue@1@@Z PROC ; ioUserKeyInput::SetUpJoyKeyValue, COMDAT
; _this$ = ecx

; 185  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 186  : 	m_JoyKeys = rkUseKeyValue;

  00004	8b 75 08	 mov	 esi, DWORD PTR _rkUseKeyValue$[ebp]
  00007	57		 push	 edi
  00008	6a 07		 push	 7
  0000a	8d 79 4a	 lea	 edi, DWORD PTR [ecx+74]
  0000d	59		 pop	 ecx
  0000e	f3 a5		 rep movsd
  00010	66 a5		 movsw
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi

; 187  : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?SetUpJoyKeyValue@ioUserKeyInput@@QAEXABUtagUseKeyValue@1@@Z ENDP ; ioUserKeyInput::SetUpJoyKeyValue
_TEXT	ENDS
PUBLIC	?SetUpSecondKeyValue@ioUserKeyInput@@QAEXABUtagUseKeyValue@1@@Z ; ioUserKeyInput::SetUpSecondKeyValue
; Function compile flags: /Ogsp
;	COMDAT ?SetUpSecondKeyValue@ioUserKeyInput@@QAEXABUtagUseKeyValue@1@@Z
_TEXT	SEGMENT
_rkUseKeyValue$ = 8					; size = 4
?SetUpSecondKeyValue@ioUserKeyInput@@QAEXABUtagUseKeyValue@1@@Z PROC ; ioUserKeyInput::SetUpSecondKeyValue, COMDAT
; _this$ = ecx

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 191  : 	m_SecondKeys = rkUseKeyValue;

  00004	8b 75 08	 mov	 esi, DWORD PTR _rkUseKeyValue$[ebp]
  00007	57		 push	 edi
  00008	8b c1		 mov	 eax, ecx
  0000a	6a 07		 push	 7
  0000c	8d 78 2c	 lea	 edi, DWORD PTR [eax+44]
  0000f	59		 pop	 ecx
  00010	f3 a5		 rep movsd

; 192  : 	m_KeptSecondKeys.Clear();

  00012	8d 88 a4 00 00
	00		 lea	 ecx, DWORD PTR [eax+164]
  00018	66 a5		 movsw
  0001a	e8 00 00 00 00	 call	 ?Clear@tagUseKeyValue@ioUserKeyInput@@QAEXXZ ; ioUserKeyInput::tagUseKeyValue::Clear
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi

; 193  : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?SetUpSecondKeyValue@ioUserKeyInput@@QAEXABUtagUseKeyValue@1@@Z ENDP ; ioUserKeyInput::SetUpSecondKeyValue
_TEXT	ENDS
PUBLIC	?SetUpAIKeyValue@ioUserKeyInput@@QAEX_N@Z	; ioUserKeyInput::SetUpAIKeyValue
; Function compile flags: /Ogsp
;	COMDAT ?SetUpAIKeyValue@ioUserKeyInput@@QAEX_N@Z
_TEXT	SEGMENT
_bAIProcess$ = 8					; size = 1
?SetUpAIKeyValue@ioUserKeyInput@@QAEX_N@Z PROC		; ioUserKeyInput::SetUpAIKeyValue, COMDAT
; _this$ = ecx

; 196  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 	m_bInputProcessAI = bAIProcess;

  00003	8a 45 08	 mov	 al, BYTE PTR _bAIProcess$[ebp]
  00006	8b d1		 mov	 edx, ecx

; 198  : 	m_AIKeys.Clear();

  00008	8d 4a 68	 lea	 ecx, DWORD PTR [edx+104]
  0000b	88 82 4b 01 00
	00		 mov	 BYTE PTR [edx+331], al
  00011	e8 00 00 00 00	 call	 ?Clear@tagUseKeyValue@ioUserKeyInput@@QAEXXZ ; ioUserKeyInput::tagUseKeyValue::Clear

; 199  : 
; 200  : 	m_Keys.Clear();

  00016	8d 4a 0e	 lea	 ecx, DWORD PTR [edx+14]
  00019	e8 00 00 00 00	 call	 ?Clear@tagUseKeyValue@ioUserKeyInput@@QAEXXZ ; ioUserKeyInput::tagUseKeyValue::Clear

; 201  : 	m_SecondKeys.Clear();

  0001e	8d 4a 2c	 lea	 ecx, DWORD PTR [edx+44]
  00021	e8 00 00 00 00	 call	 ?Clear@tagUseKeyValue@ioUserKeyInput@@QAEXXZ ; ioUserKeyInput::tagUseKeyValue::Clear

; 202  : 	m_JoyKeys.Clear();

  00026	8d 4a 4a	 lea	 ecx, DWORD PTR [edx+74]
  00029	e8 00 00 00 00	 call	 ?Clear@tagUseKeyValue@ioUserKeyInput@@QAEXXZ ; ioUserKeyInput::tagUseKeyValue::Clear

; 203  : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?SetUpAIKeyValue@ioUserKeyInput@@QAEX_N@Z ENDP		; ioUserKeyInput::SetUpAIKeyValue
_TEXT	ENDS
PUBLIC	?UpdateKeyInputNetwork@ioUserKeyInput@@QAEXXZ	; ioUserKeyInput::UpdateKeyInputNetwork
; Function compile flags: /Ogsp
;	COMDAT ?UpdateKeyInputNetwork@ioUserKeyInput@@QAEXXZ
_TEXT	SEGMENT
?UpdateKeyInputNetwork@ioUserKeyInput@@QAEXXZ PROC	; ioUserKeyInput::UpdateKeyInputNetwork, COMDAT
; _this$ = ecx

; 207  : 	if( m_bNetworkkeySetted )

  00000	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00004	74 05		 je	 SHORT $LN2@UpdateKeyI

; 208  : 	{
; 209  : 		m_bNetworkkeySetted = false;

  00006	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 215  : 	}
; 216  : }

  0000a	c3		 ret	 0
$LN2@UpdateKeyI:

; 210  : 	}
; 211  : 	else
; 212  : 	{
; 213  : 		m_PreDirKey = m_CurDirKey;

  0000b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 214  : 		m_PreActionKey = m_CurActionKey;

  00010	8b 81 00 01 00
	00		 mov	 eax, DWORD PTR [ecx+256]
  00016	89 81 04 01 00
	00		 mov	 DWORD PTR [ecx+260], eax

; 215  : 	}
; 216  : }

  0001c	c3		 ret	 0
?UpdateKeyInputNetwork@ioUserKeyInput@@QAEXXZ ENDP	; ioUserKeyInput::UpdateKeyInputNetwork
_TEXT	ENDS
PUBLIC	?SetNetworkKeyInput@ioUserKeyInput@@QAEXW4DirKeyInput@1@@Z ; ioUserKeyInput::SetNetworkKeyInput
; Function compile flags: /Ogsp
;	COMDAT ?SetNetworkKeyInput@ioUserKeyInput@@QAEXW4DirKeyInput@1@@Z
_TEXT	SEGMENT
_eDir$ = 8						; size = 4
?SetNetworkKeyInput@ioUserKeyInput@@QAEXW4DirKeyInput@1@@Z PROC ; ioUserKeyInput::SetNetworkKeyInput, COMDAT
; _this$ = ecx

; 219  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 220  : 	m_PreDirKey = m_CurDirKey;

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 221  : 	m_CurDirKey = eDir;

  00008	8b 45 08	 mov	 eax, DWORD PTR _eDir$[ebp]
  0000b	89 01		 mov	 DWORD PTR [ecx], eax

; 222  : 	m_bNetworkkeySetted = true;

  0000d	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 223  : }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?SetNetworkKeyInput@ioUserKeyInput@@QAEXW4DirKeyInput@1@@Z ENDP ; ioUserKeyInput::SetNetworkKeyInput
_TEXT	ENDS
PUBLIC	?SetNetworkActionKeyInput@ioUserKeyInput@@QAEXW4ActionKeyInput@1@@Z ; ioUserKeyInput::SetNetworkActionKeyInput
; Function compile flags: /Ogsp
;	COMDAT ?SetNetworkActionKeyInput@ioUserKeyInput@@QAEXW4ActionKeyInput@1@@Z
_TEXT	SEGMENT
_eAction$ = 8						; size = 4
?SetNetworkActionKeyInput@ioUserKeyInput@@QAEXW4ActionKeyInput@1@@Z PROC ; ioUserKeyInput::SetNetworkActionKeyInput, COMDAT
; _this$ = ecx

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 227  : 	m_PreActionKey = m_CurActionKey;

  00003	8b 91 00 01 00
	00		 mov	 edx, DWORD PTR [ecx+256]
  00009	89 91 04 01 00
	00		 mov	 DWORD PTR [ecx+260], edx

; 228  : 	m_CurActionKey = eAction;

  0000f	8b 55 08	 mov	 edx, DWORD PTR _eAction$[ebp]
  00012	89 91 00 01 00
	00		 mov	 DWORD PTR [ecx+256], edx

; 229  : 	m_bNetworkkeySetted = true;

  00018	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 230  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?SetNetworkActionKeyInput@ioUserKeyInput@@QAEXW4ActionKeyInput@1@@Z ENDP ; ioUserKeyInput::SetNetworkActionKeyInput
_TEXT	ENDS
PUBLIC	?SetAIDirKeyInput@ioUserKeyInput@@QAEXGGGGGGGG@Z ; ioUserKeyInput::SetAIDirKeyInput
; Function compile flags: /Ogsp
;	COMDAT ?SetAIDirKeyInput@ioUserKeyInput@@QAEXGGGGGGGG@Z
_TEXT	SEGMENT
_wLeftKey$ = 8						; size = 2
_wRightKey$ = 12					; size = 2
_wUpKey$ = 16						; size = 2
_wDownKey$ = 20						; size = 2
_wLeftUpKey$ = 24					; size = 2
_wLeftDownKey$ = 28					; size = 2
_wRightUpKey$ = 32					; size = 2
_wRightDownKey$ = 36					; size = 2
?SetAIDirKeyInput@ioUserKeyInput@@QAEXGGGGGGGG@Z PROC	; ioUserKeyInput::SetAIDirKeyInput, COMDAT
; _this$ = ecx

; 234  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 235  : 	m_AIKeys.m_wLeftKey		= wLeftKey;

  00003	66 8b 45 08	 mov	 ax, WORD PTR _wLeftKey$[ebp]
  00007	66 89 41 68	 mov	 WORD PTR [ecx+104], ax

; 236  : 	m_AIKeys.m_wRightKey	= wRightKey;

  0000b	66 8b 45 0c	 mov	 ax, WORD PTR _wRightKey$[ebp]
  0000f	66 89 41 6a	 mov	 WORD PTR [ecx+106], ax

; 237  : 	m_AIKeys.m_wUpKey		= wUpKey;

  00013	66 8b 45 10	 mov	 ax, WORD PTR _wUpKey$[ebp]
  00017	66 89 41 6c	 mov	 WORD PTR [ecx+108], ax

; 238  : 	m_AIKeys.m_wDownKey		= wDownKey;

  0001b	66 8b 45 14	 mov	 ax, WORD PTR _wDownKey$[ebp]
  0001f	66 89 41 6e	 mov	 WORD PTR [ecx+110], ax

; 239  : 	m_AIKeys.m_wLeftUpKey	= wLeftUpKey;

  00023	66 8b 45 18	 mov	 ax, WORD PTR _wLeftUpKey$[ebp]
  00027	66 89 41 70	 mov	 WORD PTR [ecx+112], ax

; 240  : 	m_AIKeys.m_wLeftDownKey	= wLeftDownKey;

  0002b	66 8b 45 1c	 mov	 ax, WORD PTR _wLeftDownKey$[ebp]
  0002f	66 89 41 72	 mov	 WORD PTR [ecx+114], ax

; 241  : 	m_AIKeys.m_wRightUpKey	= wRightUpKey;

  00033	66 8b 45 20	 mov	 ax, WORD PTR _wRightUpKey$[ebp]
  00037	66 89 41 74	 mov	 WORD PTR [ecx+116], ax

; 242  : 	m_AIKeys.m_wRightDownKey= wRightDownKey;

  0003b	66 8b 45 24	 mov	 ax, WORD PTR _wRightDownKey$[ebp]
  0003f	66 89 41 76	 mov	 WORD PTR [ecx+118], ax

; 243  : }

  00043	5d		 pop	 ebp
  00044	c2 20 00	 ret	 32			; 00000020H
?SetAIDirKeyInput@ioUserKeyInput@@QAEXGGGGGGGG@Z ENDP	; ioUserKeyInput::SetAIDirKeyInput
_TEXT	ENDS
PUBLIC	?SetAIActionKeyInput@ioUserKeyInput@@QAEXGGG@Z	; ioUserKeyInput::SetAIActionKeyInput
; Function compile flags: /Ogsp
;	COMDAT ?SetAIActionKeyInput@ioUserKeyInput@@QAEXGGG@Z
_TEXT	SEGMENT
_wDefenseKey$ = 8					; size = 2
_wJumpKey$ = 12						; size = 2
_wAttackKey$ = 16					; size = 2
?SetAIActionKeyInput@ioUserKeyInput@@QAEXGGG@Z PROC	; ioUserKeyInput::SetAIActionKeyInput, COMDAT
; _this$ = ecx

; 246  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 247  : 	m_AIKeys.m_wDefenseKey = wDefenseKey;

  00003	66 8b 45 08	 mov	 ax, WORD PTR _wDefenseKey$[ebp]
  00007	66 89 41 78	 mov	 WORD PTR [ecx+120], ax

; 248  : 	m_AIKeys.m_wJumpKey    = wJumpKey;

  0000b	66 8b 45 0c	 mov	 ax, WORD PTR _wJumpKey$[ebp]
  0000f	66 89 41 7a	 mov	 WORD PTR [ecx+122], ax

; 249  : 	m_AIKeys.m_wAttackKey  = wAttackKey;

  00013	66 8b 45 10	 mov	 ax, WORD PTR _wAttackKey$[ebp]
  00017	66 89 41 7c	 mov	 WORD PTR [ecx+124], ax

; 250  : }

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
?SetAIActionKeyInput@ioUserKeyInput@@QAEXGGG@Z ENDP	; ioUserKeyInput::SetAIActionKeyInput
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?ClearAttackKeyRepeat@ioUserKeyInput@@QAEXXZ	; ioUserKeyInput::ClearAttackKeyRepeat
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iouserkeyinput.cpp
;	COMDAT ?ClearAttackKeyRepeat@ioUserKeyInput@@QAEXXZ
_TEXT	SEGMENT
?ClearAttackKeyRepeat@ioUserKeyInput@@QAEXXZ PROC	; ioUserKeyInput::ClearAttackKeyRepeat, COMDAT
; _this$ = ecx

; 743  : 	m_iAttackRepeatCnt = 0;

  00000	83 a1 38 01 00
	00 00		 and	 DWORD PTR [ecx+312], 0

; 744  : 	m_dwLastAttackKeyRepeatTime = 0;

  00007	83 a1 30 01 00
	00 00		 and	 DWORD PTR [ecx+304], 0

; 745  : }

  0000e	c3		 ret	 0
?ClearAttackKeyRepeat@ioUserKeyInput@@QAEXXZ ENDP	; ioUserKeyInput::ClearAttackKeyRepeat
_TEXT	ENDS
PUBLIC	?GetAttackKeyRepeatCnt@ioUserKeyInput@@QBEHXZ	; ioUserKeyInput::GetAttackKeyRepeatCnt
; Function compile flags: /Ogsp
;	COMDAT ?GetAttackKeyRepeatCnt@ioUserKeyInput@@QBEHXZ
_TEXT	SEGMENT
?GetAttackKeyRepeatCnt@ioUserKeyInput@@QBEHXZ PROC	; ioUserKeyInput::GetAttackKeyRepeatCnt, COMDAT
; _this$ = ecx

; 749  : 	return m_iAttackRepeatCnt;

  00000	8b 81 38 01 00
	00		 mov	 eax, DWORD PTR [ecx+312]

; 750  : }

  00006	c3		 ret	 0
?GetAttackKeyRepeatCnt@ioUserKeyInput@@QBEHXZ ENDP	; ioUserKeyInput::GetAttackKeyRepeatCnt
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
PUBLIC	?IsDiagonalDir@ioUserKeyInput@@ABE_NW4DirKeyInput@1@@Z ; ioUserKeyInput::IsDiagonalDir
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iouserkeyinput.cpp
;	COMDAT ?IsDiagonalDir@ioUserKeyInput@@ABE_NW4DirKeyInput@1@@Z
_TEXT	SEGMENT
_eDir$ = 8						; size = 4
?IsDiagonalDir@ioUserKeyInput@@ABE_NW4DirKeyInput@1@@Z PROC ; ioUserKeyInput::IsDiagonalDir, COMDAT
; _this$ = ecx

; 753  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 754  : 	switch( eDir )

  00003	8b 45 08	 mov	 eax, DWORD PTR _eDir$[ebp]
  00006	6a 02		 push	 2
  00008	59		 pop	 ecx
  00009	2b c1		 sub	 eax, ecx
  0000b	74 10		 je	 SHORT $LN1@IsDiagonal
  0000d	2b c1		 sub	 eax, ecx
  0000f	74 0c		 je	 SHORT $LN1@IsDiagonal
  00011	2b c1		 sub	 eax, ecx
  00013	74 08		 je	 SHORT $LN1@IsDiagonal
  00015	2b c1		 sub	 eax, ecx
  00017	74 04		 je	 SHORT $LN1@IsDiagonal

; 761  : 	}
; 762  : 
; 763  : 	return false;

  00019	32 c0		 xor	 al, al
  0001b	eb 02		 jmp	 SHORT $LN4@IsDiagonal
$LN1@IsDiagonal:

; 755  : 	{
; 756  : 	case DKI_RIGHTUP:
; 757  : 	case DKI_RIGHTDOWN:
; 758  : 	case DKI_LEFTDOWN:
; 759  : 	case DKI_LEFTUP:
; 760  : 		return true;

  0001d	b0 01		 mov	 al, 1
$LN4@IsDiagonal:

; 764  : }

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?IsDiagonalDir@ioUserKeyInput@@ABE_NW4DirKeyInput@1@@Z ENDP ; ioUserKeyInput::IsDiagonalDir
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?SetSkillAction@ioUserKeyInput@@QAEXW4ActionKeyInput@1@@Z ; ioUserKeyInput::SetSkillAction
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iouserkeyinput.cpp
;	COMDAT ?SetSkillAction@ioUserKeyInput@@QAEXW4ActionKeyInput@1@@Z
_TEXT	SEGMENT
_eSkill$ = 8						; size = 4
?SetSkillAction@ioUserKeyInput@@QAEXW4ActionKeyInput@1@@Z PROC ; ioUserKeyInput::SetSkillAction, COMDAT
; _this$ = ecx

; 892  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 893  : 	switch( eSkill )

  00003	8b 45 08	 mov	 eax, DWORD PTR _eSkill$[ebp]
  00006	6a 04		 push	 4
  00008	5a		 pop	 edx
  00009	2b c2		 sub	 eax, edx
  0000b	74 49		 je	 SHORT $LN2@SetSkillAc
  0000d	48		 dec	 eax
  0000e	74 32		 je	 SHORT $LN4@SetSkillAc
  00010	48		 dec	 eax
  00011	74 15		 je	 SHORT $LN1@SetSkillAc
  00013	48		 dec	 eax
  00014	75 54		 jne	 SHORT $LN5@SetSkillAc

; 899  : 	case AKI_ZX:
; 900  : 		m_dwDefensePressTime = m_dwJumpPressTime = 0;

  00016	89 81 14 01 00
	00		 mov	 DWORD PTR [ecx+276], eax

; 901  : 		m_CurActionKey = AKI_ZX;

  0001c	c7 81 00 01 00
	00 07 00 00 00	 mov	 DWORD PTR [ecx+256], 7

; 902  : 		break;

  00026	eb 3c		 jmp	 SHORT $LN9@SetSkillAc
$LN1@SetSkillAc:

; 906  : 		break;
; 907  : 	case AKI_ZC:
; 908  : 		m_dwJumpPressTime = m_dwAttackPressTime = 0;

  00028	33 c0		 xor	 eax, eax
  0002a	89 81 18 01 00
	00		 mov	 DWORD PTR [ecx+280], eax
  00030	89 81 14 01 00
	00		 mov	 DWORD PTR [ecx+276], eax

; 909  : 		m_CurActionKey = AKI_ZC;

  00036	c7 81 00 01 00
	00 06 00 00 00	 mov	 DWORD PTR [ecx+256], 6

; 910  : 		break;

  00040	eb 28		 jmp	 SHORT $LN5@SetSkillAc
$LN4@SetSkillAc:

; 894  : 	{
; 895  : 	case AKI_ZXC:
; 896  : 		m_dwDefensePressTime = m_dwJumpPressTime = m_dwAttackPressTime = 0;

  00042	33 c0		 xor	 eax, eax
  00044	89 81 14 01 00
	00		 mov	 DWORD PTR [ecx+276], eax

; 897  : 		m_CurActionKey = AKI_ZXC;

  0004a	c7 81 00 01 00
	00 05 00 00 00	 mov	 DWORD PTR [ecx+256], 5

; 898  : 		break;

  00054	eb 08		 jmp	 SHORT $LN10@SetSkillAc
$LN2@SetSkillAc:

; 903  : 	case AKI_XC:
; 904  : 		m_dwDefensePressTime = m_dwAttackPressTime = 0;

  00056	33 c0		 xor	 eax, eax

; 905  : 		m_CurActionKey = AKI_XC;

  00058	89 91 00 01 00
	00		 mov	 DWORD PTR [ecx+256], edx
$LN10@SetSkillAc:

; 903  : 	case AKI_XC:
; 904  : 		m_dwDefensePressTime = m_dwAttackPressTime = 0;

  0005e	89 81 18 01 00
	00		 mov	 DWORD PTR [ecx+280], eax
$LN9@SetSkillAc:
  00064	89 81 10 01 00
	00		 mov	 DWORD PTR [ecx+272], eax
$LN5@SetSkillAc:

; 911  : 	}
; 912  : }

  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
?SetSkillAction@ioUserKeyInput@@QAEXW4ActionKeyInput@1@@Z ENDP ; ioUserKeyInput::SetSkillAction
_TEXT	ENDS
PUBLIC	?GetCurDirKey@ioUserKeyInput@@QBE?AW4DirKeyInput@1@XZ ; ioUserKeyInput::GetCurDirKey
; Function compile flags: /Ogsp
;	COMDAT ?GetCurDirKey@ioUserKeyInput@@QBE?AW4DirKeyInput@1@XZ
_TEXT	SEGMENT
?GetCurDirKey@ioUserKeyInput@@QBE?AW4DirKeyInput@1@XZ PROC ; ioUserKeyInput::GetCurDirKey, COMDAT
; _this$ = ecx

; 916  : 	return m_CurDirKey;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 917  : }

  00002	c3		 ret	 0
?GetCurDirKey@ioUserKeyInput@@QBE?AW4DirKeyInput@1@XZ ENDP ; ioUserKeyInput::GetCurDirKey
_TEXT	ENDS
PUBLIC	?GetCurFourDirKey@ioUserKeyInput@@QBE?AW4DirKeyInput@1@XZ ; ioUserKeyInput::GetCurFourDirKey
; Function compile flags: /Ogsp
;	COMDAT ?GetCurFourDirKey@ioUserKeyInput@@QBE?AW4DirKeyInput@1@XZ
_TEXT	SEGMENT
?GetCurFourDirKey@ioUserKeyInput@@QBE?AW4DirKeyInput@1@XZ PROC ; ioUserKeyInput::GetCurFourDirKey, COMDAT
; _this$ = ecx

; 921  : 	return m_FourDirKey;

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 922  : }

  00003	c3		 ret	 0
?GetCurFourDirKey@ioUserKeyInput@@QBE?AW4DirKeyInput@1@XZ ENDP ; ioUserKeyInput::GetCurFourDirKey
_TEXT	ENDS
PUBLIC	?GetPreDirKey@ioUserKeyInput@@QBE?AW4DirKeyInput@1@XZ ; ioUserKeyInput::GetPreDirKey
; Function compile flags: /Ogsp
;	COMDAT ?GetPreDirKey@ioUserKeyInput@@QBE?AW4DirKeyInput@1@XZ
_TEXT	SEGMENT
?GetPreDirKey@ioUserKeyInput@@QBE?AW4DirKeyInput@1@XZ PROC ; ioUserKeyInput::GetPreDirKey, COMDAT
; _this$ = ecx

; 926  : 	return m_PreDirKey;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 927  : }

  00003	c3		 ret	 0
?GetPreDirKey@ioUserKeyInput@@QBE?AW4DirKeyInput@1@XZ ENDP ; ioUserKeyInput::GetPreDirKey
_TEXT	ENDS
PUBLIC	?GetCurActionKey@ioUserKeyInput@@QBE?AW4ActionKeyInput@1@XZ ; ioUserKeyInput::GetCurActionKey
; Function compile flags: /Ogsp
;	COMDAT ?GetCurActionKey@ioUserKeyInput@@QBE?AW4ActionKeyInput@1@XZ
_TEXT	SEGMENT
?GetCurActionKey@ioUserKeyInput@@QBE?AW4ActionKeyInput@1@XZ PROC ; ioUserKeyInput::GetCurActionKey, COMDAT
; _this$ = ecx

; 931  : 	return m_CurActionKey;

  00000	8b 81 00 01 00
	00		 mov	 eax, DWORD PTR [ecx+256]

; 932  : }

  00006	c3		 ret	 0
?GetCurActionKey@ioUserKeyInput@@QBE?AW4ActionKeyInput@1@XZ ENDP ; ioUserKeyInput::GetCurActionKey
_TEXT	ENDS
PUBLIC	?GetCurDirMixKey@ioUserKeyInput@@QBE?AW4DirMixInput@1@XZ ; ioUserKeyInput::GetCurDirMixKey
; Function compile flags: /Ogsp
;	COMDAT ?GetCurDirMixKey@ioUserKeyInput@@QBE?AW4DirMixInput@1@XZ
_TEXT	SEGMENT
?GetCurDirMixKey@ioUserKeyInput@@QBE?AW4DirMixInput@1@XZ PROC ; ioUserKeyInput::GetCurDirMixKey, COMDAT
; _this$ = ecx

; 937  : 	return m_CurMixKey;

  00000	8b 81 08 01 00
	00		 mov	 eax, DWORD PTR [ecx+264]

; 938  : }

  00006	c3		 ret	 0
?GetCurDirMixKey@ioUserKeyInput@@QBE?AW4DirMixInput@1@XZ ENDP ; ioUserKeyInput::GetCurDirMixKey
_TEXT	ENDS
PUBLIC	?IsChangeDirection@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsChangeDirection
; Function compile flags: /Ogsp
;	COMDAT ?IsChangeDirection@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsChangeDirection@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsChangeDirection, COMDAT
; _this$ = ecx

; 942  : 	if( m_PreDirKey != m_CurDirKey )

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00005	0f 95 c0	 setne	 al

; 943  : 		return true;
; 944  : 
; 945  : 	return false;
; 946  : }

  00008	c3		 ret	 0
?IsChangeDirection@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsChangeDirection
_TEXT	ENDS
PUBLIC	?IsSettedDirection@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsSettedDirection
; Function compile flags: /Ogsp
;	COMDAT ?IsSettedDirection@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsSettedDirection@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsSettedDirection, COMDAT
; _this$ = ecx

; 950  : 	if( m_CurDirKey != DKI_NONE )

  00000	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00003	0f 95 c0	 setne	 al

; 951  : 		return true;
; 952  : 
; 953  : 	return false;
; 954  : }

  00006	c3		 ret	 0
?IsSettedDirection@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsSettedDirection
_TEXT	ENDS
PUBLIC	?IsDirDoubleClick@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsDirDoubleClick
; Function compile flags: /Ogsp
;	COMDAT ?IsDirDoubleClick@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsDirDoubleClick@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsDirDoubleClick, COMDAT
; _this$ = ecx

; 958  : 	return m_bDirDoubleClick;

  00000	8a 81 3d 01 00
	00		 mov	 al, BYTE PTR [ecx+317]

; 959  : }

  00006	c3		 ret	 0
?IsDirDoubleClick@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsDirDoubleClick
_TEXT	ENDS
PUBLIC	?IsDefenseKey@ioUserKeyInput@@QBE_NXZ		; ioUserKeyInput::IsDefenseKey
; Function compile flags: /Ogsp
;	COMDAT ?IsDefenseKey@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsDefenseKey@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsDefenseKey, COMDAT
; _this$ = ecx

; 963  : 	if( m_CurActionKey == AKI_DEFENSE )

  00000	83 b9 00 01 00
	00 01		 cmp	 DWORD PTR [ecx+256], 1
  00007	0f 94 c0	 sete	 al

; 964  : 		return true;
; 965  : 
; 966  : 	return false;
; 967  : }

  0000a	c3		 ret	 0
?IsDefenseKey@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsDefenseKey
_TEXT	ENDS
PUBLIC	?IsJumpKey@ioUserKeyInput@@QBE_NXZ		; ioUserKeyInput::IsJumpKey
; Function compile flags: /Ogsp
;	COMDAT ?IsJumpKey@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsJumpKey@ioUserKeyInput@@QBE_NXZ PROC			; ioUserKeyInput::IsJumpKey, COMDAT
; _this$ = ecx

; 971  : 	if( m_CurActionKey == AKI_JUMP )

  00000	83 b9 00 01 00
	00 02		 cmp	 DWORD PTR [ecx+256], 2
  00007	0f 94 c0	 sete	 al

; 972  : 		return true;
; 973  : 
; 974  : 	return false;
; 975  : }

  0000a	c3		 ret	 0
?IsJumpKey@ioUserKeyInput@@QBE_NXZ ENDP			; ioUserKeyInput::IsJumpKey
_TEXT	ENDS
PUBLIC	?IsAttackKey@ioUserKeyInput@@QBE_NXZ		; ioUserKeyInput::IsAttackKey
; Function compile flags: /Ogsp
;	COMDAT ?IsAttackKey@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsAttackKey@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsAttackKey, COMDAT
; _this$ = ecx

; 979  : 	if( m_CurActionKey == AKI_ATTACK )

  00000	83 b9 00 01 00
	00 03		 cmp	 DWORD PTR [ecx+256], 3
  00007	0f 94 c0	 sete	 al

; 980  : 		return true;
; 981  : 
; 982  : 	return false;
; 983  : }

  0000a	c3		 ret	 0
?IsAttackKey@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsAttackKey
_TEXT	ENDS
PUBLIC	?IsHelmetSkillKey@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsHelmetSkillKey
; Function compile flags: /Ogsp
;	COMDAT ?IsHelmetSkillKey@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsHelmetSkillKey@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsHelmetSkillKey, COMDAT
; _this$ = ecx

; 987  : 	if( m_CurActionKey == AKI_ZC )

  00000	83 b9 00 01 00
	00 06		 cmp	 DWORD PTR [ecx+256], 6
  00007	0f 94 c0	 sete	 al

; 988  : 		return true;
; 989  : 
; 990  : 	return false;
; 991  : }

  0000a	c3		 ret	 0
?IsHelmetSkillKey@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsHelmetSkillKey
_TEXT	ENDS
PUBLIC	?IsSpecialMotionKey@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsSpecialMotionKey
EXTRN	?IsSpecialMotionKeyPress@ioKeyManager@@QAE_NXZ:PROC ; ioKeyManager::IsSpecialMotionKeyPress
EXTRN	?GetSingleton@ioKeyManager@@SAAAV1@XZ:PROC	; ioKeyManager::GetSingleton
EXTRN	__imp_?m_pTopModalWnd@ioWnd@@2PAV1@A:DWORD
EXTRN	__imp_?IsShow@ioGUIManager@@QAE_NK@Z:PROC
EXTRN	?IsUIKeyBlock@ioSP2GUIManager@@QAE_NXZ:PROC	; ioSP2GUIManager::IsUIKeyBlock
EXTRN	?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ:PROC	; ioSP2GUIManager::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?IsSpecialMotionKey@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsSpecialMotionKey@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsSpecialMotionKey, COMDAT
; _this$ = ecx

; 1005 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1006 : 	if( g_GUIMgr.IsUIKeyBlock() )

  00003	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  00008	8b c8		 mov	 ecx, eax
  0000a	e8 00 00 00 00	 call	 ?IsUIKeyBlock@ioSP2GUIManager@@QAE_NXZ ; ioSP2GUIManager::IsUIKeyBlock
  0000f	84 c0		 test	 al, al
  00011	74 04		 je	 SHORT $LN6@IsSpecialM

; 1007 : 		return false;

  00013	32 c0		 xor	 al, al
  00015	5e		 pop	 esi

; 1025 : }

  00016	c3		 ret	 0
$LN6@IsSpecialM:
  00017	57		 push	 edi

; 1008 : 
; 1009 : 	if( g_GUIMgr.IsShow( TUTORIAL_WND ) )

  00018	68 a1 13 00 00	 push	 5025			; 000013a1H
  0001d	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  00022	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?IsShow@ioGUIManager@@QAE_NK@Z
  00028	8b c8		 mov	 ecx, eax
  0002a	ff d7		 call	 edi
  0002c	84 c0		 test	 al, al

; 1010 : 		return false;

  0002e	75 3e		 jne	 SHORT $LN1@IsSpecialM

; 1011 : 
; 1012 : 	if( g_GUIMgr.IsShow( PRACTICE_HELP_WND ) )

  00030	68 b1 17 00 00	 push	 6065			; 000017b1H
  00035	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  0003a	8b c8		 mov	 ecx, eax
  0003c	ff d7		 call	 edi
  0003e	84 c0		 test	 al, al

; 1013 : 		return false;

  00040	75 2c		 jne	 SHORT $LN1@IsSpecialM

; 1014 : 
; 1015 : 	if( ioWnd::m_pTopModalWnd )

  00042	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?m_pTopModalWnd@ioWnd@@2PAV1@A
  00047	83 38 00	 cmp	 DWORD PTR [eax], 0

; 1016 : 		return false;

  0004a	75 22		 jne	 SHORT $LN1@IsSpecialM

; 1017 : 
; 1018 : 	if( m_bInputProcessAI )

  0004c	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0

; 1019 : 		return false;

  00053	75 19		 jne	 SHORT $LN1@IsSpecialM

; 1020 : 
; 1021 : 	if( g_KeyManager.IsSpecialMotionKeyPress() && GetCurDirKey() == DKI_NONE )

  00055	e8 00 00 00 00	 call	 ?GetSingleton@ioKeyManager@@SAAAV1@XZ ; ioKeyManager::GetSingleton
  0005a	8b c8		 mov	 ecx, eax
  0005c	e8 00 00 00 00	 call	 ?IsSpecialMotionKeyPress@ioKeyManager@@QAE_NXZ ; ioKeyManager::IsSpecialMotionKeyPress
  00061	84 c0		 test	 al, al
  00063	74 09		 je	 SHORT $LN1@IsSpecialM
  00065	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00068	75 04		 jne	 SHORT $LN1@IsSpecialM

; 1022 : 		return true;

  0006a	b0 01		 mov	 al, 1
  0006c	eb 02		 jmp	 SHORT $LN11@IsSpecialM
$LN1@IsSpecialM:

; 1023 : 
; 1024 : 	return false;

  0006e	32 c0		 xor	 al, al
$LN11@IsSpecialM:
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi

; 1025 : }

  00072	c3		 ret	 0
?IsSpecialMotionKey@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsSpecialMotionKey
_TEXT	ENDS
PUBLIC	?GetSkillInput@ioUserKeyInput@@QBEHXZ		; ioUserKeyInput::GetSkillInput
; Function compile flags: /Ogsp
;	COMDAT ?GetSkillInput@ioUserKeyInput@@QBEHXZ
_TEXT	SEGMENT
?GetSkillInput@ioUserKeyInput@@QBEHXZ PROC		; ioUserKeyInput::GetSkillInput, COMDAT
; _this$ = ecx

; 1029 : 	switch( m_CurActionKey )

  00000	8b 81 00 01 00
	00		 mov	 eax, DWORD PTR [ecx+256]
  00006	83 e8 04	 sub	 eax, 4
  00009	74 19		 je	 SHORT $LN4@GetSkillIn
  0000b	48		 dec	 eax
  0000c	74 12		 je	 SHORT $LN3@GetSkillIn
  0000e	48		 dec	 eax
  0000f	74 0b		 je	 SHORT $LN2@GetSkillIn
  00011	48		 dec	 eax
  00012	74 04		 je	 SHORT $LN1@GetSkillIn

; 1039 : 	}
; 1040 : 
; 1041 : 	return -1;

  00014	83 c8 ff	 or	 eax, -1

; 1042 : }

  00017	c3		 ret	 0
$LN1@GetSkillIn:

; 1037 : 	case AKI_ZX:
; 1038 : 		return 3;

  00018	6a 03		 push	 3
  0001a	eb 02		 jmp	 SHORT $LN9@GetSkillIn
$LN2@GetSkillIn:

; 1035 : 	case AKI_ZC:
; 1036 : 		return 2;

  0001c	6a 02		 push	 2
$LN9@GetSkillIn:
  0001e	58		 pop	 eax

; 1042 : }

  0001f	c3		 ret	 0
$LN3@GetSkillIn:

; 1033 : 	case AKI_ZXC:
; 1034 : 		return 1;

  00020	33 c0		 xor	 eax, eax
  00022	40		 inc	 eax

; 1042 : }

  00023	c3		 ret	 0
$LN4@GetSkillIn:

; 1030 : 	{
; 1031 : 	case AKI_XC:
; 1032 : 		return 0;

  00024	33 c0		 xor	 eax, eax

; 1042 : }

  00026	c3		 ret	 0
?GetSkillInput@ioUserKeyInput@@QBEHXZ ENDP		; ioUserKeyInput::GetSkillInput
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetDirFirstKeyDownTime@ioUserKeyInput@@AAEKXZ	; ioUserKeyInput::GetDirFirstKeyDownTime
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogsp
;	COMDAT ?GetDirFirstKeyDownTime@ioUserKeyInput@@AAEKXZ
_TEXT	SEGMENT
_dwKeyTimeList$ = -36					; size = 32
__$ArrayPad$ = -4					; size = 4
?GetDirFirstKeyDownTime@ioUserKeyInput@@AAEKXZ PROC	; ioUserKeyInput::GetDirFirstKeyDownTime, COMDAT
; _this$ = ecx

; 1158 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1159 : 	int iKeyTimeCnt = 0;
; 1160 : 	DWORD dwKeyTimeList[8];
; 1161 : 
; 1162 : 	if( m_dwLeftPressTime > 0 )

  00010	8b 81 c4 00 00
	00		 mov	 eax, DWORD PTR [ecx+196]
  00016	33 d2		 xor	 edx, edx
  00018	85 c0		 test	 eax, eax
  0001a	74 04		 je	 SHORT $LN19@GetDirFirs

; 1163 : 	{
; 1164 : 		dwKeyTimeList[iKeyTimeCnt] = m_dwLeftPressTime;

  0001c	89 45 dc	 mov	 DWORD PTR _dwKeyTimeList$[ebp], eax

; 1165 : 		iKeyTimeCnt++;

  0001f	42		 inc	 edx
$LN19@GetDirFirs:

; 1166 : 	}
; 1167 : 
; 1168 : 	if( m_dwRightPressTime > 0 )

  00020	8b 81 c8 00 00
	00		 mov	 eax, DWORD PTR [ecx+200]
  00026	85 c0		 test	 eax, eax
  00028	74 05		 je	 SHORT $LN11@GetDirFirs

; 1169 : 	{
; 1170 : 		dwKeyTimeList[iKeyTimeCnt] = m_dwRightPressTime;

  0002a	89 44 95 dc	 mov	 DWORD PTR _dwKeyTimeList$[ebp+edx*4], eax

; 1171 : 		iKeyTimeCnt++;

  0002e	42		 inc	 edx
$LN11@GetDirFirs:

; 1172 : 	}
; 1173 : 
; 1174 : 	if( m_dwUpPressTime > 0 )

  0002f	8b 81 cc 00 00
	00		 mov	 eax, DWORD PTR [ecx+204]
  00035	85 c0		 test	 eax, eax
  00037	74 05		 je	 SHORT $LN10@GetDirFirs

; 1175 : 	{
; 1176 : 		dwKeyTimeList[iKeyTimeCnt] = m_dwUpPressTime;

  00039	89 44 95 dc	 mov	 DWORD PTR _dwKeyTimeList$[ebp+edx*4], eax

; 1177 : 		iKeyTimeCnt++;

  0003d	42		 inc	 edx
$LN10@GetDirFirs:

; 1178 : 	}
; 1179 : 
; 1180 : 	if( m_dwDownPressTime > 0 )

  0003e	8b 81 d0 00 00
	00		 mov	 eax, DWORD PTR [ecx+208]
  00044	85 c0		 test	 eax, eax
  00046	74 05		 je	 SHORT $LN9@GetDirFirs

; 1181 : 	{
; 1182 : 		dwKeyTimeList[iKeyTimeCnt] = m_dwDownPressTime;

  00048	89 44 95 dc	 mov	 DWORD PTR _dwKeyTimeList$[ebp+edx*4], eax

; 1183 : 		iKeyTimeCnt++;

  0004c	42		 inc	 edx
$LN9@GetDirFirs:

; 1184 : 	}
; 1185 : 
; 1186 : 	if( m_dwLeftUpPressTime > 0 )

  0004d	8b 81 d8 00 00
	00		 mov	 eax, DWORD PTR [ecx+216]
  00053	85 c0		 test	 eax, eax
  00055	74 05		 je	 SHORT $LN8@GetDirFirs

; 1187 : 	{
; 1188 : 		dwKeyTimeList[iKeyTimeCnt] = m_dwLeftUpPressTime;

  00057	89 44 95 dc	 mov	 DWORD PTR _dwKeyTimeList$[ebp+edx*4], eax

; 1189 : 		iKeyTimeCnt++;

  0005b	42		 inc	 edx
$LN8@GetDirFirs:

; 1190 : 	}
; 1191 : 
; 1192 : 	if( m_dwLeftDownPressTime > 0 )

  0005c	8b 81 dc 00 00
	00		 mov	 eax, DWORD PTR [ecx+220]
  00062	85 c0		 test	 eax, eax
  00064	74 05		 je	 SHORT $LN7@GetDirFirs

; 1193 : 	{
; 1194 : 		dwKeyTimeList[iKeyTimeCnt] = m_dwLeftDownPressTime;

  00066	89 44 95 dc	 mov	 DWORD PTR _dwKeyTimeList$[ebp+edx*4], eax

; 1195 : 		iKeyTimeCnt++;

  0006a	42		 inc	 edx
$LN7@GetDirFirs:

; 1196 : 	}
; 1197 : 
; 1198 : 	if( m_dwRightUpPressTime > 0 )

  0006b	8b 81 e0 00 00
	00		 mov	 eax, DWORD PTR [ecx+224]
  00071	85 c0		 test	 eax, eax
  00073	74 05		 je	 SHORT $LN6@GetDirFirs

; 1199 : 	{
; 1200 : 		dwKeyTimeList[iKeyTimeCnt] = m_dwRightUpPressTime;

  00075	89 44 95 dc	 mov	 DWORD PTR _dwKeyTimeList$[ebp+edx*4], eax

; 1201 : 		iKeyTimeCnt++;

  00079	42		 inc	 edx
$LN6@GetDirFirs:

; 1202 : 	}
; 1203 : 
; 1204 : 	if( m_dwRightDownPressTime > 0 )

  0007a	8b 89 e4 00 00
	00		 mov	 ecx, DWORD PTR [ecx+228]
  00080	85 c9		 test	 ecx, ecx
  00082	74 05		 je	 SHORT $LN5@GetDirFirs

; 1205 : 	{
; 1206 : 		dwKeyTimeList[iKeyTimeCnt] = m_dwRightDownPressTime;

  00084	89 4c 95 dc	 mov	 DWORD PTR _dwKeyTimeList$[ebp+edx*4], ecx

; 1207 : 		iKeyTimeCnt++;

  00088	42		 inc	 edx
$LN5@GetDirFirs:

; 1208 : 	}
; 1209 : 
; 1210 : 	DWORD dwFirstDownKeyTime = 0;

  00089	33 c0		 xor	 eax, eax

; 1211 : 	if( iKeyTimeCnt > 0 )

  0008b	85 d2		 test	 edx, edx
  0008d	7e 1a		 jle	 SHORT $LN1@GetDirFirs

; 1212 : 	{
; 1213 : 		dwFirstDownKeyTime = dwKeyTimeList[0];

  0008f	8b 45 dc	 mov	 eax, DWORD PTR _dwKeyTimeList$[ebp]

; 1214 : 		for( int i=1 ; i<iKeyTimeCnt ; i++ )

  00092	33 c9		 xor	 ecx, ecx
  00094	41		 inc	 ecx
  00095	3b d1		 cmp	 edx, ecx
  00097	7e 10		 jle	 SHORT $LN1@GetDirFirs
  00099	56		 push	 esi
$LL3@GetDirFirs:

; 1215 : 		{
; 1216 : 			dwFirstDownKeyTime = min( dwFirstDownKeyTime, dwKeyTimeList[i] );

  0009a	8b 74 8d dc	 mov	 esi, DWORD PTR _dwKeyTimeList$[ebp+ecx*4]
  0009e	3b c6		 cmp	 eax, esi
  000a0	41		 inc	 ecx
  000a1	0f 43 c6	 cmovae	 eax, esi
  000a4	3b ca		 cmp	 ecx, edx
  000a6	7c f2		 jl	 SHORT $LL3@GetDirFirs
  000a8	5e		 pop	 esi
$LN1@GetDirFirs:

; 1217 : 		}
; 1218 : 	}
; 1219 : 
; 1220 : 	return dwFirstDownKeyTime;
; 1221 : }

  000a9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ac	33 cd		 xor	 ecx, ebp
  000ae	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b3	c9		 leave
  000b4	c3		 ret	 0
?GetDirFirstKeyDownTime@ioUserKeyInput@@AAEKXZ ENDP	; ioUserKeyInput::GetDirFirstKeyDownTime
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetActionFirstKeyDownTime@ioUserKeyInput@@AAEKXZ ; ioUserKeyInput::GetActionFirstKeyDownTime
; Function compile flags: /Ogsp
;	COMDAT ?GetActionFirstKeyDownTime@ioUserKeyInput@@AAEKXZ
_TEXT	SEGMENT
_dwKeyTimeList$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
?GetActionFirstKeyDownTime@ioUserKeyInput@@AAEKXZ PROC	; ioUserKeyInput::GetActionFirstKeyDownTime, COMDAT
; _this$ = ecx

; 1224 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1225 : 	int iKeyTimeCnt = 0;
; 1226 : 	DWORD dwKeyTimeList[3];
; 1227 : 
; 1228 : 	if( m_dwDefensePressTime > 0 )

  00010	8b 81 10 01 00
	00		 mov	 eax, DWORD PTR [ecx+272]
  00016	56		 push	 esi
  00017	33 f6		 xor	 esi, esi
  00019	33 d2		 xor	 edx, edx
  0001b	46		 inc	 esi
  0001c	85 c0		 test	 eax, eax
  0001e	74 05		 je	 SHORT $LN18@GetActionF

; 1229 : 	{
; 1230 : 		dwKeyTimeList[iKeyTimeCnt] = m_dwDefensePressTime;

  00020	89 45 f0	 mov	 DWORD PTR _dwKeyTimeList$[ebp], eax

; 1231 : 		iKeyTimeCnt++;

  00023	8b d6		 mov	 edx, esi
$LN18@GetActionF:

; 1232 : 	}
; 1233 : 
; 1234 : 	if( m_dwJumpPressTime > 0 )

  00025	8b 81 14 01 00
	00		 mov	 eax, DWORD PTR [ecx+276]
  0002b	85 c0		 test	 eax, eax
  0002d	74 05		 je	 SHORT $LN10@GetActionF

; 1235 : 	{
; 1236 : 		dwKeyTimeList[iKeyTimeCnt] = m_dwJumpPressTime;

  0002f	89 44 95 f0	 mov	 DWORD PTR _dwKeyTimeList$[ebp+edx*4], eax

; 1237 : 		iKeyTimeCnt++;

  00033	42		 inc	 edx
$LN10@GetActionF:

; 1238 : 	}
; 1239 : 
; 1240 : 	if( m_dwAttackPressTime > 0 )

  00034	8b 81 18 01 00
	00		 mov	 eax, DWORD PTR [ecx+280]
  0003a	85 c0		 test	 eax, eax
  0003c	74 05		 je	 SHORT $LN9@GetActionF

; 1241 : 	{
; 1242 : 		dwKeyTimeList[iKeyTimeCnt] = m_dwAttackPressTime;

  0003e	89 44 95 f0	 mov	 DWORD PTR _dwKeyTimeList$[ebp+edx*4], eax

; 1243 : 		iKeyTimeCnt++;

  00042	42		 inc	 edx
$LN9@GetActionF:

; 1244 : 	}
; 1245 : 
; 1246 : 	if( m_dwWeaponPressTime > 0 )

  00043	8b 81 1c 01 00
	00		 mov	 eax, DWORD PTR [ecx+284]
  00049	85 c0		 test	 eax, eax
  0004b	74 05		 je	 SHORT $LN19@GetActionF

; 1247 : 	{
; 1248 : 		dwKeyTimeList[0] = m_dwWeaponPressTime;

  0004d	89 45 f0	 mov	 DWORD PTR _dwKeyTimeList$[ebp], eax

; 1249 : 		iKeyTimeCnt = 1;

  00050	8b d6		 mov	 edx, esi
$LN19@GetActionF:

; 1250 : 	}
; 1251 : 
; 1252 : 	if( m_dwArmorPressTime > 0 )

  00052	8b 81 20 01 00
	00		 mov	 eax, DWORD PTR [ecx+288]
  00058	85 c0		 test	 eax, eax
  0005a	74 05		 je	 SHORT $LN20@GetActionF

; 1253 : 	{
; 1254 : 		dwKeyTimeList[0] = m_dwArmorPressTime;

  0005c	89 45 f0	 mov	 DWORD PTR _dwKeyTimeList$[ebp], eax

; 1255 : 		iKeyTimeCnt = 1;

  0005f	8b d6		 mov	 edx, esi
$LN20@GetActionF:

; 1256 : 	}
; 1257 : 
; 1258 : 	if( m_dwHelmetPressTime > 0 )

  00061	8b 81 24 01 00
	00		 mov	 eax, DWORD PTR [ecx+292]
  00067	85 c0		 test	 eax, eax
  00069	74 05		 je	 SHORT $LN21@GetActionF

; 1259 : 	{
; 1260 : 		dwKeyTimeList[0] = m_dwHelmetPressTime;

  0006b	89 45 f0	 mov	 DWORD PTR _dwKeyTimeList$[ebp], eax

; 1261 : 		iKeyTimeCnt = 1;

  0006e	8b d6		 mov	 edx, esi
$LN21@GetActionF:

; 1262 : 	}
; 1263 : 
; 1264 : 	if( m_dwCloakPressTime > 0 )

  00070	8b 89 28 01 00
	00		 mov	 ecx, DWORD PTR [ecx+296]
  00076	85 c9		 test	 ecx, ecx
  00078	74 05		 je	 SHORT $LN22@GetActionF

; 1265 : 	{
; 1266 : 		dwKeyTimeList[0] = m_dwCloakPressTime;

  0007a	89 4d f0	 mov	 DWORD PTR _dwKeyTimeList$[ebp], ecx

; 1267 : 		iKeyTimeCnt = 1;

  0007d	8b d6		 mov	 edx, esi
$LN22@GetActionF:

; 1268 : 	}
; 1269 : 
; 1270 : 	DWORD dwFirstDownKeyTime = 0;

  0007f	33 c0		 xor	 eax, eax

; 1271 : 	if( iKeyTimeCnt > 0 )

  00081	85 d2		 test	 edx, edx
  00083	7e 17		 jle	 SHORT $LN1@GetActionF

; 1272 : 	{
; 1273 : 		dwFirstDownKeyTime = dwKeyTimeList[0];

  00085	8b 45 f0	 mov	 eax, DWORD PTR _dwKeyTimeList$[ebp]

; 1274 : 		for( int i=1 ; i<iKeyTimeCnt ; i++ )

  00088	8b ce		 mov	 ecx, esi
  0008a	3b d6		 cmp	 edx, esi
  0008c	7e 0e		 jle	 SHORT $LN1@GetActionF
$LL3@GetActionF:

; 1275 : 		{
; 1276 : 			dwFirstDownKeyTime = min( dwFirstDownKeyTime, dwKeyTimeList[i] );

  0008e	8b 74 8d f0	 mov	 esi, DWORD PTR _dwKeyTimeList$[ebp+ecx*4]
  00092	3b c6		 cmp	 eax, esi
  00094	41		 inc	 ecx
  00095	0f 43 c6	 cmovae	 eax, esi
  00098	3b ca		 cmp	 ecx, edx
  0009a	7c f2		 jl	 SHORT $LL3@GetActionF
$LN1@GetActionF:

; 1277 : 		}
; 1278 : 	}
; 1279 : 
; 1280 : 	return dwFirstDownKeyTime;
; 1281 : }

  0009c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009f	33 cd		 xor	 ecx, ebp
  000a1	5e		 pop	 esi
  000a2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a7	c9		 leave
  000a8	c3		 ret	 0
?GetActionFirstKeyDownTime@ioUserKeyInput@@AAEKXZ ENDP	; ioUserKeyInput::GetActionFirstKeyDownTime
_TEXT	ENDS
PUBLIC	?GetXformDir@ioUserKeyInput@@QAE?AW4DirKeyInput@1@W421@0@Z ; ioUserKeyInput::GetXformDir
; Function compile flags: /Ogsp
;	COMDAT ?GetXformDir@ioUserKeyInput@@QAE?AW4DirKeyInput@1@W421@0@Z
_TEXT	SEGMENT
_eNewUp$ = 8						; size = 4
_eXformDir$ = 12					; size = 4
?GetXformDir@ioUserKeyInput@@QAE?AW4DirKeyInput@1@W421@0@Z PROC ; ioUserKeyInput::GetXformDir, COMDAT
; _this$ = ecx

; 1284 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1285 : 	if( eNewUp == eXformDir )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _eNewUp$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR _eXformDir$[ebp]
  00009	3b c8		 cmp	 ecx, eax
  0000b	75 05		 jne	 SHORT $LN2@GetXformDi

; 1286 : 		return DKI_UP;

  0000d	33 c0		 xor	 eax, eax
  0000f	40		 inc	 eax
  00010	eb 10		 jmp	 SHORT $LN3@GetXformDi
$LN2@GetXformDi:

; 1287 : 
; 1288 : 	DirKeyInput eDiffDir = (DirKeyInput)(eNewUp - DKI_UP);

  00012	8d 51 ff	 lea	 edx, DWORD PTR [ecx-1]

; 1289 : 	if( eNewUp > eXformDir )

  00015	3b c8		 cmp	 ecx, eax
  00017	7e 07		 jle	 SHORT $LN1@GetXformDi

; 1290 : 		return (DirKeyInput)(DKI_LEFTUP + eXformDir - eDiffDir);

  00019	2b c2		 sub	 eax, edx
  0001b	83 c0 08	 add	 eax, 8
  0001e	eb 02		 jmp	 SHORT $LN3@GetXformDi
$LN1@GetXformDi:

; 1291 : 
; 1292 : 	return (DirKeyInput)(eXformDir - eDiffDir); // eNewUp > eXformDir

  00020	2b c2		 sub	 eax, edx
$LN3@GetXformDi:

; 1293 : }

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?GetXformDir@ioUserKeyInput@@QAE?AW4DirKeyInput@1@W421@0@Z ENDP ; ioUserKeyInput::GetXformDir
_TEXT	ENDS
PUBLIC	?IsOppositDir@ioUserKeyInput@@QAE_NW4DirKeyInput@1@0@Z ; ioUserKeyInput::IsOppositDir
; Function compile flags: /Ogsp
;	COMDAT ?IsOppositDir@ioUserKeyInput@@QAE_NW4DirKeyInput@1@0@Z
_TEXT	SEGMENT
_eCurDir$ = 8						; size = 4
_eCheckDir$ = 12					; size = 4
?IsOppositDir@ioUserKeyInput@@QAE_NW4DirKeyInput@1@0@Z PROC ; ioUserKeyInput::IsOppositDir, COMDAT
; _this$ = ecx

; 1296 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1297 : 	int iSumValue = abs( (int)eCurDir - (int)eCheckDir );

  00003	8b 45 08	 mov	 eax, DWORD PTR _eCurDir$[ebp]
  00006	2b 45 0c	 sub	 eax, DWORD PTR _eCheckDir$[ebp]
  00009	99		 cdq
  0000a	33 c2		 xor	 eax, edx
  0000c	2b c2		 sub	 eax, edx

; 1298 : 
; 1299 : 	if( iSumValue == 4 )

  0000e	83 f8 04	 cmp	 eax, 4
  00011	0f 94 c0	 sete	 al

; 1300 : 		return true;
; 1301 : 
; 1302 : 	return false;
; 1303 : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?IsOppositDir@ioUserKeyInput@@QAE_NW4DirKeyInput@1@0@Z ENDP ; ioUserKeyInput::IsOppositDir
_TEXT	ENDS
PUBLIC	??_C@_0CD@CIOHIMJI@ioUserKeyInput?3?3IsKeyDownExcepti@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?IsKeyDownException@ioUserKeyInput@@ABE_NXZ	; ioUserKeyInput::IsKeyDownException
EXTRN	?SetMsgBox@ioSP2GUIManager@@QAAXHPAVioWnd@@PBDZZ:PROC ; ioSP2GUIManager::SetMsgBox
EXTRN	__imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z:PROC
EXTRN	__imp_?GetSingleton@ioStringManager@@SAAAV1@XZ:PROC
EXTRN	?IsWebShow@ioApplication@@QBE_NXZ:PROC		; ioApplication::IsWebShow
EXTRN	?GetSingleton@ioApplication@@SAAAV1@XZ:PROC	; ioApplication::GetSingleton
;	COMDAT ??_C@_0CD@CIOHIMJI@ioUserKeyInput?3?3IsKeyDownExcepti@
CONST	SEGMENT
??_C@_0CD@CIOHIMJI@ioUserKeyInput?3?3IsKeyDownExcepti@ DB 'ioUserKeyInput'
	DB	'::IsKeyDownException', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ
_TEXT	SEGMENT
?IsKeyDownException@ioUserKeyInput@@ABE_NXZ PROC	; ioUserKeyInput::IsKeyDownException, COMDAT
; _this$ = ecx

; 1307 : 	if( g_App.IsWebShow() )

  00000	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton
  00005	8b c8		 mov	 ecx, eax
  00007	e8 00 00 00 00	 call	 ?IsWebShow@ioApplication@@QBE_NXZ ; ioApplication::IsWebShow
  0000c	84 c0		 test	 al, al
  0000e	74 3c		 je	 SHORT $LN2@IsKeyDownE

; 1308 : 	{
; 1309 : 		if( ioWnd::m_pTopModalWnd == NULL )

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?m_pTopModalWnd@ioWnd@@2PAV1@A
  00015	83 38 00	 cmp	 DWORD PTR [eax], 0
  00018	75 2f		 jne	 SHORT $LN1@IsKeyDownE

; 1310 : 		{
; 1311 : 			g_GUIMgr.SetMsgBox( MB_OK, NULL, STR(1) );

  0001a	6a 00		 push	 0
  0001c	6a 01		 push	 1
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@CIOHIMJI@ioUserKeyInput?3?3IsKeyDownExcepti@
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  0002e	8b c8		 mov	 ecx, eax
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00036	50		 push	 eax
  00037	6a 00		 push	 0
  00039	6a 00		 push	 0
  0003b	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ?SetMsgBox@ioSP2GUIManager@@QAAXHPAVioWnd@@PBDZZ ; ioSP2GUIManager::SetMsgBox
  00046	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@IsKeyDownE:

; 1312 : 		}		
; 1313 : 		return false;

  00049	32 c0		 xor	 al, al

; 1316 : }

  0004b	c3		 ret	 0
$LN2@IsKeyDownE:

; 1314 : 	}
; 1315 : 	return true;

  0004c	b0 01		 mov	 al, 1

; 1316 : }

  0004e	c3		 ret	 0
?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ENDP	; ioUserKeyInput::IsKeyDownException
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
; Function compile flags: /Ogsp
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 65   : 		{	// construct from pointers

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0
  00005	83 60 04 00	 and	 DWORD PTR [eax+4], 0

; 66   : 		}

  00009	c3		 ret	 0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
; Function compile flags: /Ogsp
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 111  : 		{	// construct orphaned iterator

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0
  00005	83 60 04 00	 and	 DWORD PTR [eax+4], 0

; 112  : 		}

  00009	c3		 ret	 0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
; Function compile flags: /Ogsp
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 129  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 130  : 		_Lockit _Lock(_LOCK_DEBUG);
; 131  : 		_Orphan_me();
; 132  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 133  : 		}

  00000	c3		 ret	 0
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
; Function compile flags: /Ogsp
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 136  : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 137  : 		if (_Parent != 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parent$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 04		 je	 SHORT $LN1@Adopt

; 138  : 			{	// have a parent, do adoption
; 139  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 140  : 
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 			if (_Myproxy != _Parent_proxy)
; 143  : 				{	// change parentage
; 144  : 				_Lockit _Lock(_LOCK_DEBUG);
; 145  : 				_Orphan_me();
; 146  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 147  : 				_Parent_proxy->_Myfirstiter = this;
; 148  : 				_Myproxy = _Parent_proxy;
; 149  : 				}
; 150  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 151  : 			_Myproxy = _Parent_proxy;

  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	89 01		 mov	 DWORD PTR [ecx], eax
$LN1@Adopt:

; 152  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 153  : 			}
; 154  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
_TEXT	ENDS
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
; Function compile flags: /Ogsp
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 163  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	75 01		 jne	 SHORT $LN3@Getcont

; 164  : 		}

  00006	c3		 ret	 0
$LN3@Getcont:

; 163  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00007	8b 00		 mov	 eax, DWORD PTR [eax]

; 164  : 		}

  00009	c3		 ret	 0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
PUBLIC	??_C@_0M@LKLHEBOI@unknown?5dir?$AA@		; `string'
PUBLIC	??_C@_0L@PFKKIMNO@DKI_LEFTUP?$AA@		; `string'
PUBLIC	??_C@_08FJDNJJAM@DKI_LEFT?$AA@			; `string'
PUBLIC	??_C@_0N@KJEGHBHF@DKI_LEFTDOWN?$AA@		; `string'
PUBLIC	??_C@_08KLDJABDF@DKI_DOWN?$AA@			; `string'
PUBLIC	??_C@_0O@POHMBCH@DKI_RIGHTDOWN?$AA@		; `string'
PUBLIC	??_C@_09IGJEFKHJ@DKI_RIGHT?$AA@			; `string'
PUBLIC	??_C@_0M@KFIPENMO@DKI_RIGHTUP?$AA@		; `string'
PUBLIC	??_C@_06KBAJBPIH@DKI_UP?$AA@			; `string'
PUBLIC	??_C@_08BBIKFIKA@DKI_NONE?$AA@			; `string'
PUBLIC	?GetDirKeyText@ioUserKeyInput@@QBEPBDXZ		; ioUserKeyInput::GetDirKeyText
;	COMDAT ??_C@_0M@LKLHEBOI@unknown?5dir?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iouserkeyinput.cpp
CONST	SEGMENT
??_C@_0M@LKLHEBOI@unknown?5dir?$AA@ DB 'unknown dir', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PFKKIMNO@DKI_LEFTUP?$AA@
CONST	SEGMENT
??_C@_0L@PFKKIMNO@DKI_LEFTUP?$AA@ DB 'DKI_LEFTUP', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FJDNJJAM@DKI_LEFT?$AA@
CONST	SEGMENT
??_C@_08FJDNJJAM@DKI_LEFT?$AA@ DB 'DKI_LEFT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KJEGHBHF@DKI_LEFTDOWN?$AA@
CONST	SEGMENT
??_C@_0N@KJEGHBHF@DKI_LEFTDOWN?$AA@ DB 'DKI_LEFTDOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KLDJABDF@DKI_DOWN?$AA@
CONST	SEGMENT
??_C@_08KLDJABDF@DKI_DOWN?$AA@ DB 'DKI_DOWN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@POHMBCH@DKI_RIGHTDOWN?$AA@
CONST	SEGMENT
??_C@_0O@POHMBCH@DKI_RIGHTDOWN?$AA@ DB 'DKI_RIGHTDOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09IGJEFKHJ@DKI_RIGHT?$AA@
CONST	SEGMENT
??_C@_09IGJEFKHJ@DKI_RIGHT?$AA@ DB 'DKI_RIGHT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KFIPENMO@DKI_RIGHTUP?$AA@
CONST	SEGMENT
??_C@_0M@KFIPENMO@DKI_RIGHTUP?$AA@ DB 'DKI_RIGHTUP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KBAJBPIH@DKI_UP?$AA@
CONST	SEGMENT
??_C@_06KBAJBPIH@DKI_UP?$AA@ DB 'DKI_UP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BBIKFIKA@DKI_NONE?$AA@
CONST	SEGMENT
??_C@_08BBIKFIKA@DKI_NONE?$AA@ DB 'DKI_NONE', 00H	; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?GetDirKeyText@ioUserKeyInput@@QBEPBDXZ
_TEXT	SEGMENT
?GetDirKeyText@ioUserKeyInput@@QBEPBDXZ PROC		; ioUserKeyInput::GetDirKeyText, COMDAT
; _this$ = ecx

; 2377 : 	switch( m_CurDirKey )

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 f8 08	 cmp	 eax, 8
  00005	77 3d		 ja	 SHORT $LN10@GetDirKeyT
  00007	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN14@GetDirKeyT[eax*4]
$LN9@GetDirKeyT:

; 2378 : 	{
; 2379 : 	case DKI_NONE:
; 2380 : 		return "DKI_NONE";

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08BBIKFIKA@DKI_NONE?$AA@

; 2400 : }

  00013	c3		 ret	 0
$LN8@GetDirKeyT:

; 2381 : 	case DKI_UP:
; 2382 : 		return "DKI_UP";

  00014	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06KBAJBPIH@DKI_UP?$AA@

; 2400 : }

  00019	c3		 ret	 0
$LN7@GetDirKeyT:

; 2383 : 	case DKI_RIGHTUP:
; 2384 : 		return "DKI_RIGHTUP";

  0001a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0M@KFIPENMO@DKI_RIGHTUP?$AA@

; 2400 : }

  0001f	c3		 ret	 0
$LN6@GetDirKeyT:

; 2385 : 	case DKI_RIGHT:
; 2386 : 		return "DKI_RIGHT";

  00020	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09IGJEFKHJ@DKI_RIGHT?$AA@

; 2400 : }

  00025	c3		 ret	 0
$LN5@GetDirKeyT:

; 2387 : 	case DKI_RIGHTDOWN:
; 2388 : 		return "DKI_RIGHTDOWN";

  00026	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0O@POHMBCH@DKI_RIGHTDOWN?$AA@

; 2400 : }

  0002b	c3		 ret	 0
$LN4@GetDirKeyT:

; 2389 : 	case DKI_DOWN:
; 2390 : 		return "DKI_DOWN";

  0002c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08KLDJABDF@DKI_DOWN?$AA@

; 2400 : }

  00031	c3		 ret	 0
$LN3@GetDirKeyT:

; 2391 : 	case DKI_LEFTDOWN:
; 2392 : 		return "DKI_LEFTDOWN";

  00032	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0N@KJEGHBHF@DKI_LEFTDOWN?$AA@

; 2400 : }

  00037	c3		 ret	 0
$LN2@GetDirKeyT:

; 2393 : 	case DKI_LEFT:
; 2394 : 		return "DKI_LEFT";

  00038	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08FJDNJJAM@DKI_LEFT?$AA@

; 2400 : }

  0003d	c3		 ret	 0
$LN1@GetDirKeyT:

; 2395 : 	case DKI_LEFTUP:
; 2396 : 		return "DKI_LEFTUP";

  0003e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0L@PFKKIMNO@DKI_LEFTUP?$AA@

; 2400 : }

  00043	c3		 ret	 0
$LN10@GetDirKeyT:

; 2397 : 	}
; 2398 : 
; 2399 : 	return "unknown dir";

  00044	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0M@LKLHEBOI@unknown?5dir?$AA@

; 2400 : }

  00049	c3		 ret	 0
  0004a	8b ff		 npad	 2
$LN14@GetDirKeyT:
  0004c	00 00 00 00	 DD	 $LN9@GetDirKeyT
  00050	00 00 00 00	 DD	 $LN8@GetDirKeyT
  00054	00 00 00 00	 DD	 $LN7@GetDirKeyT
  00058	00 00 00 00	 DD	 $LN6@GetDirKeyT
  0005c	00 00 00 00	 DD	 $LN5@GetDirKeyT
  00060	00 00 00 00	 DD	 $LN4@GetDirKeyT
  00064	00 00 00 00	 DD	 $LN3@GetDirKeyT
  00068	00 00 00 00	 DD	 $LN2@GetDirKeyT
  0006c	00 00 00 00	 DD	 $LN1@GetDirKeyT
?GetDirKeyText@ioUserKeyInput@@QBEPBDXZ ENDP		; ioUserKeyInput::GetDirKeyText
_TEXT	ENDS
PUBLIC	??_C@_0P@JJKOFCBF@unknown?5action?$AA@		; `string'
PUBLIC	??_C@_06JKAGOCOB@AKI_XC?$AA@			; `string'
PUBLIC	??_C@_06DALEPNBF@AKI_ZX?$AA@			; `string'
PUBLIC	??_C@_07LGLJEMNA@AKI_ZXC?$AA@			; `string'
PUBLIC	??_C@_06JJICDGIP@AKI_ZC?$AA@			; `string'
PUBLIC	??_C@_0L@OBNKOHHF@AKI_ATTACK?$AA@		; `string'
PUBLIC	??_C@_08KEMKFEJJ@AKI_JUMP?$AA@			; `string'
PUBLIC	??_C@_0M@HPAIFCEP@AKI_DEFENSE?$AA@		; `string'
PUBLIC	??_C@_08FLBNBNOP@AKI_NONE?$AA@			; `string'
PUBLIC	?GetActionKeyText@ioUserKeyInput@@QBEPBDXZ	; ioUserKeyInput::GetActionKeyText
;	COMDAT ??_C@_0P@JJKOFCBF@unknown?5action?$AA@
CONST	SEGMENT
??_C@_0P@JJKOFCBF@unknown?5action?$AA@ DB 'unknown action', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JKAGOCOB@AKI_XC?$AA@
CONST	SEGMENT
??_C@_06JKAGOCOB@AKI_XC?$AA@ DB 'AKI_XC', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DALEPNBF@AKI_ZX?$AA@
CONST	SEGMENT
??_C@_06DALEPNBF@AKI_ZX?$AA@ DB 'AKI_ZX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LGLJEMNA@AKI_ZXC?$AA@
CONST	SEGMENT
??_C@_07LGLJEMNA@AKI_ZXC?$AA@ DB 'AKI_ZXC', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJICDGIP@AKI_ZC?$AA@
CONST	SEGMENT
??_C@_06JJICDGIP@AKI_ZC?$AA@ DB 'AKI_ZC', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OBNKOHHF@AKI_ATTACK?$AA@
CONST	SEGMENT
??_C@_0L@OBNKOHHF@AKI_ATTACK?$AA@ DB 'AKI_ATTACK', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEMKFEJJ@AKI_JUMP?$AA@
CONST	SEGMENT
??_C@_08KEMKFEJJ@AKI_JUMP?$AA@ DB 'AKI_JUMP', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HPAIFCEP@AKI_DEFENSE?$AA@
CONST	SEGMENT
??_C@_0M@HPAIFCEP@AKI_DEFENSE?$AA@ DB 'AKI_DEFENSE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08FLBNBNOP@AKI_NONE?$AA@
CONST	SEGMENT
??_C@_08FLBNBNOP@AKI_NONE?$AA@ DB 'AKI_NONE', 00H	; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?GetActionKeyText@ioUserKeyInput@@QBEPBDXZ
_TEXT	SEGMENT
?GetActionKeyText@ioUserKeyInput@@QBEPBDXZ PROC		; ioUserKeyInput::GetActionKeyText, COMDAT
; _this$ = ecx

; 2404 : 	switch( m_CurActionKey )

  00000	8b 81 00 01 00
	00		 mov	 eax, DWORD PTR [ecx+256]
  00006	83 f8 07	 cmp	 eax, 7
  00009	77 37		 ja	 SHORT $LN9@GetActionK
  0000b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN13@GetActionK[eax*4]
$LN8@GetActionK:

; 2405 : 	{
; 2406 : 	case AKI_NONE:
; 2407 : 		return "AKI_NONE";

  00012	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08FLBNBNOP@AKI_NONE?$AA@

; 2425 : }

  00017	c3		 ret	 0
$LN7@GetActionK:

; 2408 : 	case AKI_DEFENSE:
; 2409 : 		return "AKI_DEFENSE";

  00018	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0M@HPAIFCEP@AKI_DEFENSE?$AA@

; 2425 : }

  0001d	c3		 ret	 0
$LN6@GetActionK:

; 2410 : 	case AKI_JUMP:
; 2411 : 		return "AKI_JUMP";

  0001e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08KEMKFEJJ@AKI_JUMP?$AA@

; 2425 : }

  00023	c3		 ret	 0
$LN5@GetActionK:

; 2412 : 	case AKI_ATTACK:
; 2413 : 		return "AKI_ATTACK";

  00024	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0L@OBNKOHHF@AKI_ATTACK?$AA@

; 2425 : }

  00029	c3		 ret	 0
$LN4@GetActionK:

; 2414 : 	case AKI_ZC:
; 2415 : 		return "AKI_ZC";

  0002a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06JJICDGIP@AKI_ZC?$AA@

; 2425 : }

  0002f	c3		 ret	 0
$LN3@GetActionK:

; 2416 : 	case AKI_ZXC:
; 2417 : 		return "AKI_ZXC";

  00030	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07LGLJEMNA@AKI_ZXC?$AA@

; 2425 : }

  00035	c3		 ret	 0
$LN2@GetActionK:

; 2418 : 	case AKI_ZX:
; 2419 : 		return "AKI_ZX";

  00036	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06DALEPNBF@AKI_ZX?$AA@

; 2425 : }

  0003b	c3		 ret	 0
$LN1@GetActionK:

; 2420 : 	case AKI_XC:
; 2421 : 		return "AKI_XC";

  0003c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06JKAGOCOB@AKI_XC?$AA@

; 2425 : }

  00041	c3		 ret	 0
$LN9@GetActionK:

; 2422 : 	}
; 2423 : 
; 2424 : 	return "unknown action";

  00042	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0P@JJKOFCBF@unknown?5action?$AA@

; 2425 : }

  00047	c3		 ret	 0
$LN13@GetActionK:
  00048	00 00 00 00	 DD	 $LN8@GetActionK
  0004c	00 00 00 00	 DD	 $LN7@GetActionK
  00050	00 00 00 00	 DD	 $LN6@GetActionK
  00054	00 00 00 00	 DD	 $LN5@GetActionK
  00058	00 00 00 00	 DD	 $LN1@GetActionK
  0005c	00 00 00 00	 DD	 $LN3@GetActionK
  00060	00 00 00 00	 DD	 $LN4@GetActionK
  00064	00 00 00 00	 DD	 $LN2@GetActionK
?GetActionKeyText@ioUserKeyInput@@QBEPBDXZ ENDP		; ioUserKeyInput::GetActionKeyText
_TEXT	ENDS
PUBLIC	?ChangeKeyValue@ioUserKeyInput@@AAEXXZ		; ioUserKeyInput::ChangeKeyValue
; Function compile flags: /Ogsp
;	COMDAT ?ChangeKeyValue@ioUserKeyInput@@AAEXXZ
_TEXT	SEGMENT
?ChangeKeyValue@ioUserKeyInput@@AAEXXZ PROC		; ioUserKeyInput::ChangeKeyValue, COMDAT
; _this$ = ecx

; 2428 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b d9		 mov	 ebx, ecx

; 2429 : 	if( g_GUIMgr.IsUIKeyBlock() )

  00005	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  0000a	8b c8		 mov	 ecx, eax
  0000c	e8 00 00 00 00	 call	 ?IsUIKeyBlock@ioSP2GUIManager@@QAE_NXZ ; ioSP2GUIManager::IsUIKeyBlock
  00011	84 c0		 test	 al, al
  00013	74 6b		 je	 SHORT $LN8@ChangeKeyV

; 2430 : 	{
; 2431 : 		if(!m_bChangeKeyValue)

  00015	80 bb 3e 01 00
	00 00		 cmp	 BYTE PTR [ebx+318], 0
  0001c	0f 85 bf 00 00
	00		 jne	 $LN1@ChangeKeyV

; 2432 : 		{
; 2433 : 			m_bChangeKeyValue = true;
; 2434 : 
; 2435 : 			if( m_KeptKeys.IsEmpty() )

  00022	8d bb 86 00 00
	00		 lea	 edi, DWORD PTR [ebx+134]
  00028	8b cf		 mov	 ecx, edi
  0002a	c6 83 3e 01 00
	00 01		 mov	 BYTE PTR [ebx+318], 1
  00031	e8 00 00 00 00	 call	 ?IsEmpty@tagUseKeyValue@ioUserKeyInput@@QAE_NXZ ; ioUserKeyInput::tagUseKeyValue::IsEmpty
  00036	84 c0		 test	 al, al
  00038	74 20		 je	 SHORT $LN11@ChangeKeyV

; 2436 : 			{
; 2437 : 				m_KeptKeys       = m_Keys;

  0003a	6a 07		 push	 7
  0003c	59		 pop	 ecx
  0003d	8d 73 0e	 lea	 esi, DWORD PTR [ebx+14]
  00040	f3 a5		 rep movsd

; 2438 : 				m_Keys.SetDefaultFirstKey();

  00042	8d 4b 0e	 lea	 ecx, DWORD PTR [ebx+14]
  00045	66 a5		 movsw
  00047	e8 00 00 00 00	 call	 ?SetDefaultFirstKey@tagUseKeyValue@ioUserKeyInput@@QAEXXZ ; ioUserKeyInput::tagUseKeyValue::SetDefaultFirstKey

; 2439 : 				m_Keys.m_wDefenseKey = KEY_NULL;

  0004c	33 c0		 xor	 eax, eax
  0004e	66 89 43 1e	 mov	 WORD PTR [ebx+30], ax

; 2440 : 				m_Keys.m_wJumpKey    = KEY_NULL;

  00052	66 89 43 20	 mov	 WORD PTR [ebx+32], ax

; 2441 : 				m_Keys.m_wAttackKey  = KEY_NULL;

  00056	66 89 43 22	 mov	 WORD PTR [ebx+34], ax
$LN11@ChangeKeyV:

; 2442 : 			}
; 2443 : 
; 2444 : 			if( m_KeptSecondKeys.IsEmpty() )

  0005a	8d bb a4 00 00
	00		 lea	 edi, DWORD PTR [ebx+164]
  00060	8b cf		 mov	 ecx, edi
  00062	e8 00 00 00 00	 call	 ?IsEmpty@tagUseKeyValue@ioUserKeyInput@@QAE_NXZ ; ioUserKeyInput::tagUseKeyValue::IsEmpty
  00067	84 c0		 test	 al, al
  00069	74 76		 je	 SHORT $LN1@ChangeKeyV

; 2445 : 			{
; 2446 : 				m_KeptSecondKeys = m_SecondKeys;

  0006b	6a 07		 push	 7
  0006d	59		 pop	 ecx
  0006e	8d 73 2c	 lea	 esi, DWORD PTR [ebx+44]
  00071	f3 a5		 rep movsd
  00073	66 a5		 movsw

; 2447 : 				m_SecondKeys.Clear();

  00075	8d 4b 2c	 lea	 ecx, DWORD PTR [ebx+44]
$LN14@ChangeKeyV:
  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx
  0007b	e9 00 00 00 00	 jmp	 ?Clear@tagUseKeyValue@ioUserKeyInput@@QAEXXZ ; ioUserKeyInput::tagUseKeyValue::Clear
$LN8@ChangeKeyV:

; 2448 : 			}
; 2449 : 		}
; 2450 : 	}
; 2451 : 	else
; 2452 : 	{
; 2453 : 		if( m_bChangeKeyValue )

  00080	80 bb 3e 01 00
	00 00		 cmp	 BYTE PTR [ebx+318], 0
  00087	74 58		 je	 SHORT $LN1@ChangeKeyV

; 2454 : 		{
; 2455 : 			m_bChangeKeyValue = false;
; 2456 : 
; 2457 : 			if(!m_KeptKeys.IsEmpty())

  00089	8d 8b 86 00 00
	00		 lea	 ecx, DWORD PTR [ebx+134]
  0008f	c6 83 3e 01 00
	00 00		 mov	 BYTE PTR [ebx+318], 0
  00096	e8 00 00 00 00	 call	 ?IsEmpty@tagUseKeyValue@ioUserKeyInput@@QAE_NXZ ; ioUserKeyInput::tagUseKeyValue::IsEmpty
  0009b	84 c0		 test	 al, al
  0009d	75 1b		 jne	 SHORT $LN2@ChangeKeyV

; 2458 : 			{
; 2459 : 				m_Keys = m_KeptKeys;

  0009f	6a 07		 push	 7
  000a1	59		 pop	 ecx
  000a2	8d 7b 0e	 lea	 edi, DWORD PTR [ebx+14]
  000a5	8d b3 86 00 00
	00		 lea	 esi, DWORD PTR [ebx+134]
  000ab	f3 a5		 rep movsd

; 2460 : 				m_KeptKeys.Clear();

  000ad	8d 8b 86 00 00
	00		 lea	 ecx, DWORD PTR [ebx+134]
  000b3	66 a5		 movsw
  000b5	e8 00 00 00 00	 call	 ?Clear@tagUseKeyValue@ioUserKeyInput@@QAEXXZ ; ioUserKeyInput::tagUseKeyValue::Clear
$LN2@ChangeKeyV:

; 2461 : 			}
; 2462 : 
; 2463 : 			if(!m_KeptSecondKeys.IsEmpty())

  000ba	8d 8b a4 00 00
	00		 lea	 ecx, DWORD PTR [ebx+164]
  000c0	e8 00 00 00 00	 call	 ?IsEmpty@tagUseKeyValue@ioUserKeyInput@@QAE_NXZ ; ioUserKeyInput::tagUseKeyValue::IsEmpty
  000c5	84 c0		 test	 al, al
  000c7	75 18		 jne	 SHORT $LN1@ChangeKeyV

; 2464 : 			{
; 2465 : 				m_SecondKeys = m_KeptSecondKeys;

  000c9	6a 07		 push	 7
  000cb	8d 7b 2c	 lea	 edi, DWORD PTR [ebx+44]
  000ce	59		 pop	 ecx
  000cf	8d b3 a4 00 00
	00		 lea	 esi, DWORD PTR [ebx+164]
  000d5	f3 a5		 rep movsd
  000d7	66 a5		 movsw

; 2466 : 				m_KeptSecondKeys.Clear();

  000d9	8d 8b a4 00 00
	00		 lea	 ecx, DWORD PTR [ebx+164]
  000df	eb 97		 jmp	 SHORT $LN14@ChangeKeyV
$LN1@ChangeKeyV:
  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx

; 2467 : 			}
; 2468 : 		}
; 2469 : 	}
; 2470 : }

  000e4	c3		 ret	 0
?ChangeKeyValue@ioUserKeyInput@@AAEXXZ ENDP		; ioUserKeyInput::ChangeKeyValue
_TEXT	ENDS
PUBLIC	?GetSingletonPtr@?$Singleton@VCDirectInput@@@@SAPAVCDirectInput@@XZ ; Singleton<CDirectInput>::GetSingletonPtr
EXTRN	?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A:DWORD ; Singleton<CDirectInput>::ms_Singleton
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
;	COMDAT ?GetSingletonPtr@?$Singleton@VCDirectInput@@@@SAPAVCDirectInput@@XZ
_TEXT	SEGMENT
?GetSingletonPtr@?$Singleton@VCDirectInput@@@@SAPAVCDirectInput@@XZ PROC ; Singleton<CDirectInput>::GetSingletonPtr, COMDAT

; 48   : 		return ( ms_Singleton );

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A ; Singleton<CDirectInput>::ms_Singleton

; 49   : 	}

  00005	c3		 ret	 0
?GetSingletonPtr@?$Singleton@VCDirectInput@@@@SAPAVCDirectInput@@XZ ENDP ; Singleton<CDirectInput>::GetSingletonPtr
_TEXT	ENDS
PUBLIC	??1?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::~_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ PROC ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::~_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::~_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
_TEXT	ENDS
PUBLIC	?empty@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE_NXZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::empty
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\deque
;	COMDAT ?empty@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE_NXZ PROC ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::empty, COMDAT
; _this$ = ecx

; 1160 : 		return (this->_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00005	0f 94 c0	 sete	 al

; 1161 : 		}

  00008	c3		 ret	 0
?empty@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE_NXZ ENDP ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::empty
_TEXT	ENDS
PUBLIC	??0?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAE@XZ ; std::allocator<ioUserKeyInput::tagDirKeyTime>::allocator<ioUserKeyInput::tagDirKeyTime>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAE@XZ PROC ; std::allocator<ioUserKeyInput::tagDirKeyTime>::allocator<ioUserKeyInput::tagDirKeyTime>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAE@XZ ENDP ; std::allocator<ioUserKeyInput::tagDirKeyTime>::allocator<ioUserKeyInput::tagDirKeyTime>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBEABKXZ ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBEABKXZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBEABKXZ PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBEABKXZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator++
_TEXT	ENDS
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@IBEXXZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\deque
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@ DB 'deque<T> too long', 00H ; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@IBEXXZ PROC ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Xlen, COMDAT
; _this$ = ecx

; 1580 : 		_Xlength_error("deque<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@IBEXXZ ENDP ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAE@ABV01@@Z ; std::allocator<ioUserKeyInput::tagDirKeyTime>::allocator<ioUserKeyInput::tagDirKeyTime>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAE@ABV01@@Z PROC ; std::allocator<ioUserKeyInput::tagDirKeyTime>::allocator<ioUserKeyInput::tagDirKeyTime>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<ioUserKeyInput::tagDirKeyTime>::allocator<ioUserKeyInput::tagDirKeyTime>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAEXPAUtagDirKeyTime@ioUserKeyInput@@I@Z ; std::allocator<ioUserKeyInput::tagDirKeyTime>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAEXPAUtagDirKeyTime@ioUserKeyInput@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAEXPAUtagDirKeyTime@ioUserKeyInput@@I@Z PROC ; std::allocator<ioUserKeyInput::tagDirKeyTime>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAEXPAUtagDirKeyTime@ioUserKeyInput@@I@Z ENDP ; std::allocator<ioUserKeyInput::tagDirKeyTime>::deallocate
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@QAEXPAPAUtagDirKeyTime@ioUserKeyInput@@I@Z ; std::allocator<ioUserKeyInput::tagDirKeyTime *>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@QAEXPAPAUtagDirKeyTime@ioUserKeyInput@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@QAEXPAPAUtagDirKeyTime@ioUserKeyInput@@I@Z PROC ; std::allocator<ioUserKeyInput::tagDirKeyTime *>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@QAEXPAPAUtagDirKeyTime@ioUserKeyInput@@I@Z ENDP ; std::allocator<ioUserKeyInput::tagDirKeyTime *>::deallocate
_TEXT	ENDS
PUBLIC	??Y?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAV01@H@Z ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator+=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\deque
;	COMDAT ??Y?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator+=, COMDAT
; _this$ = ecx

; 654  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 655  : 		this->_Myoff += _Off;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00008	01 48 08	 add	 DWORD PTR [eax+8], ecx

; 656  : 		return (*this);
; 657  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??Y?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator+=
_TEXT	ENDS
PUBLIC	??Z?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAV01@H@Z ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator-=
; Function compile flags: /Ogsp
;	COMDAT ??Z?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Z?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator-=, COMDAT
; _this$ = ecx

; 666  : 		{	// decrement by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 667  : 		return (*this += -_Off);

  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00008	29 48 08	 sub	 DWORD PTR [eax+8], ecx

; 668  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??Z?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator-=
_TEXT	ENDS
PUBLIC	??D?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEABUtagDirKeyTime@ioUserKeyInput@@XZ ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEABUtagDirKeyTime@ioUserKeyInput@@XZ
_TEXT	SEGMENT
??D?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEABUtagDirKeyTime@ioUserKeyInput@@XZ PROC ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator*, COMDAT
; _this$ = ecx

; 331  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	75 04		 jne	 SHORT $LN6@operator
  00006	33 d2		 xor	 edx, edx
  00008	eb 02		 jmp	 SHORT $LN7@operator
$LN6@operator:
  0000a	8b 10		 mov	 edx, DWORD PTR [eax]
$LN7@operator:

; 332  : 
; 333  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 334  : 		if (_Mycont == 0
; 335  : 			|| this->_Myoff < _Mycont->_Myoff
; 336  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 337  : 		{	// report error
; 338  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 339  : 		_SCL_SECURE_OUT_OF_RANGE;
; 340  : 		}
; 341  : 
; 342  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 343  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 344  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 345  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 346  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 347  : 
; 348  : 		__analysis_assume(_Mycont != 0);
; 349  : 
; 350  : 		size_type _Block = _Myoff / _DEQUESIZ;

  0000c	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000f	8b c8		 mov	 ecx, eax
  00011	56		 push	 esi

; 351  : 		size_type _Off = _Myoff & (_DEQUESIZ - 1);	// assume power of 2
; 352  : 
; 353  : 		if (_Mycont->_Mapsize <= _Block)

  00012	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00015	d1 e9		 shr	 ecx, 1
  00017	83 e0 01	 and	 eax, 1
  0001a	3b f1		 cmp	 esi, ecx
  0001c	77 02		 ja	 SHORT $LN1@operator

; 354  : 			_Block -= _Mycont->_Mapsize;

  0001e	2b ce		 sub	 ecx, esi
$LN1@operator:

; 355  : 		return ((_Mycont->_Map)[_Block][_Off]);

  00020	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00023	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  00026	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  00029	5e		 pop	 esi

; 356  : 		}

  0002a	c3		 ret	 0
??D?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEABUtagDirKeyTime@ioUserKeyInput@@XZ ENDP ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator*
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::deallocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QBEIXZ ; std::allocator<ioUserKeyInput::tagDirKeyTime>::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QBEIXZ PROC ; std::allocator<ioUserKeyInput::tagDirKeyTime>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QBEIXZ ENDP ; std::allocator<ioUserKeyInput::tagDirKeyTime>::max_size
_TEXT	ENDS
PUBLIC	?_Setcont@?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEXPBV?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@@Z ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Setcont
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\deque
;	COMDAT ?_Setcont@?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEXPBV?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@@Z
_TEXT	SEGMENT
__Pdeque$ = 8						; size = 4
?_Setcont@?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEXPBV?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@@Z PROC ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Setcont, COMDAT
; _this$ = ecx

; 541  : 		{	// set container pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 542  : 		this->_Adopt(_Pdeque);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pdeque$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 04		 je	 SHORT $LN3@Setcont
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@Setcont:

; 543  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Setcont@?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEXPBV?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@@Z ENDP ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Setcont
_TEXT	ENDS
PUBLIC	?_Compat@?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEXABV12@@Z ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Compat, COMDAT
; _this$ = ecx

; 538  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Compat
_TEXT	ENDS
PUBLIC	??$addressof@K@std@@YAPAKAAK@Z			; std::addressof<unsigned long>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@K@std@@YAPAKAAK@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@K@std@@YAPAKAAK@Z PROC			; std::addressof<unsigned long>, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@K@std@@YAPAKAAK@Z ENDP			; std::addressof<unsigned long>
_TEXT	ENDS
PUBLIC	??$forward@K@std@@YA$$QAKAAK@Z			; std::forward<unsigned long>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@K@std@@YA$$QAKAAK@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@K@std@@YA$$QAKAAK@Z PROC			; std::forward<unsigned long>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@K@std@@YA$$QAKAAK@Z ENDP			; std::forward<unsigned long>
_TEXT	ENDS
PUBLIC	??$?0UtagDirKeyTime@ioUserKeyInput@@@?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@QAE@ABV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@1@@Z ; std::allocator<ioUserKeyInput::tagDirKeyTime *>::allocator<ioUserKeyInput::tagDirKeyTime *><ioUserKeyInput::tagDirKeyTime>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$?0UtagDirKeyTime@ioUserKeyInput@@@?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@QAE@ABV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0UtagDirKeyTime@ioUserKeyInput@@@?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@QAE@ABV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@1@@Z PROC ; std::allocator<ioUserKeyInput::tagDirKeyTime *>::allocator<ioUserKeyInput::tagDirKeyTime *><ioUserKeyInput::tagDirKeyTime>, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

  00002	c2 04 00	 ret	 4
??$?0UtagDirKeyTime@ioUserKeyInput@@@?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@QAE@ABV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@1@@Z ENDP ; std::allocator<ioUserKeyInput::tagDirKeyTime *>::allocator<ioUserKeyInput::tagDirKeyTime *><ioUserKeyInput::tagDirKeyTime>
_TEXT	ENDS
PUBLIC	??$?0UtagDirKeyTime@ioUserKeyInput@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><ioUserKeyInput::tagDirKeyTime>
; Function compile flags: /Ogsp
;	COMDAT ??$?0UtagDirKeyTime@ioUserKeyInput@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0UtagDirKeyTime@ioUserKeyInput@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><ioUserKeyInput::tagDirKeyTime>, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

  00002	c2 04 00	 ret	 4
??$?0UtagDirKeyTime@ioUserKeyInput@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><ioUserKeyInput::tagDirKeyTime>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UtagDirKeyTime@ioUserKeyInput@@@std@@YAPAUtagDirKeyTime@ioUserKeyInput@@IPAU12@@Z ; std::_Allocate<ioUserKeyInput::tagDirKeyTime>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UtagDirKeyTime@ioUserKeyInput@@@std@@YAPAUtagDirKeyTime@ioUserKeyInput@@IPAU12@@Z
_TEXT	SEGMENT
$T508393 = -12						; size = 12
$T508398 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UtagDirKeyTime@ioUserKeyInput@@@std@@YAPAUtagDirKeyTime@ioUserKeyInput@@IPAU12@@Z PROC ; std::_Allocate<ioUserKeyInput::tagDirKeyTime>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3e		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate
  00017	8b c1		 mov	 eax, ecx
  00019	c1 e0 03	 shl	 eax, 3
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	59		 pop	 ecx
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	83 65 08 00	 and	 DWORD PTR $T508398[ebp], 0
  0002b	8d 45 08	 lea	 eax, DWORD PTR $T508398[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T508393[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00038	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003d	8d 45 f4	 lea	 eax, DWORD PTR $T508393[ebp]
  00040	50		 push	 eax
  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T508393[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00048	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004d	c9		 leave
  0004e	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UtagDirKeyTime@ioUserKeyInput@@@std@@YAPAUtagDirKeyTime@ioUserKeyInput@@IPAU12@@Z ENDP ; std::_Allocate<ioUserKeyInput::tagDirKeyTime>
_TEXT	ENDS
PUBLIC	??$_Allocate@PAUtagDirKeyTime@ioUserKeyInput@@@std@@YAPAPAUtagDirKeyTime@ioUserKeyInput@@IPAPAU12@@Z ; std::_Allocate<ioUserKeyInput::tagDirKeyTime *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@PAUtagDirKeyTime@ioUserKeyInput@@@std@@YAPAPAUtagDirKeyTime@ioUserKeyInput@@IPAPAU12@@Z
_TEXT	SEGMENT
$T508403 = -12						; size = 12
$T508407 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAUtagDirKeyTime@ioUserKeyInput@@@std@@YAPAPAUtagDirKeyTime@ioUserKeyInput@@IPAPAU12@@Z PROC ; std::_Allocate<ioUserKeyInput::tagDirKeyTime *>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3e		 je	 SHORT $LN5@Allocate@2

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate@2
  00017	8b c1		 mov	 eax, ecx
  00019	c1 e0 02	 shl	 eax, 2
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	59		 pop	 ecx
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 26		 jne	 SHORT $LN5@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	83 65 08 00	 and	 DWORD PTR $T508407[ebp], 0
  0002b	8d 45 08	 lea	 eax, DWORD PTR $T508407[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T508403[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00038	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003d	8d 45 f4	 lea	 eax, DWORD PTR $T508403[ebp]
  00040	50		 push	 eax
  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T508403[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00048	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:

; 40   : 	}

  0004d	c9		 leave
  0004e	c3		 ret	 0
$LN9@Allocate@2:
??$_Allocate@PAUtagDirKeyTime@ioUserKeyInput@@@std@@YAPAPAUtagDirKeyTime@ioUserKeyInput@@IPAPAU12@@Z ENDP ; std::_Allocate<ioUserKeyInput::tagDirKeyTime *>
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
_TEXT	SEGMENT
$T508412 = -12						; size = 12
$T508416 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z PROC ; std::_Allocate<std::_Container_proxy>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3e		 je	 SHORT $LN5@Allocate@3

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate@3
  00017	8b c1		 mov	 eax, ecx
  00019	c1 e0 03	 shl	 eax, 3
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	59		 pop	 ecx
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 26		 jne	 SHORT $LN5@Allocate@3
$LN1@Allocate@3:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	83 65 08 00	 and	 DWORD PTR $T508416[ebp], 0
  0002b	8d 45 08	 lea	 eax, DWORD PTR $T508416[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T508412[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00038	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003d	8d 45 f4	 lea	 eax, DWORD PTR $T508412[ebp]
  00040	50		 push	 eax
  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T508412[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00048	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@3:
$LN5@Allocate@3:

; 40   : 	}

  0004d	c9		 leave
  0004e	c3		 ret	 0
$LN9@Allocate@3:
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ENDP ; std::_Allocate<std::_Container_proxy>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@K@std@@QAEXPAK$$QAK@Z	; std::allocator<unsigned long>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@K@std@@QAEXPAK$$QAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@K@std@@QAEXPAK$$QAK@Z PROC	; std::allocator<unsigned long>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@construct:

; 203  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?construct@?$allocator@K@std@@QAEXPAK$$QAK@Z ENDP	; std::allocator<unsigned long>::construct
_TEXT	ENDS
PUBLIC	??$forward@ABUtagDirKeyTime@ioUserKeyInput@@@std@@YAABUtagDirKeyTime@ioUserKeyInput@@ABU12@@Z ; std::forward<ioUserKeyInput::tagDirKeyTime const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUtagDirKeyTime@ioUserKeyInput@@@std@@YAABUtagDirKeyTime@ioUserKeyInput@@ABU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUtagDirKeyTime@ioUserKeyInput@@@std@@YAABUtagDirKeyTime@ioUserKeyInput@@ABU12@@Z PROC ; std::forward<ioUserKeyInput::tagDirKeyTime const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUtagDirKeyTime@ioUserKeyInput@@@std@@YAABUtagDirKeyTime@ioUserKeyInput@@ABU12@@Z ENDP ; std::forward<ioUserKeyInput::tagDirKeyTime const &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUtagDirKeyTime@ioUserKeyInput@@@std@@YAPAUtagDirKeyTime@ioUserKeyInput@@PAU12@@Z ; std::_Val_type<ioUserKeyInput::tagDirKeyTime *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUtagDirKeyTime@ioUserKeyInput@@@std@@YAPAUtagDirKeyTime@ioUserKeyInput@@PAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUtagDirKeyTime@ioUserKeyInput@@@std@@YAPAUtagDirKeyTime@ioUserKeyInput@@PAU12@@Z PROC ; std::_Val_type<ioUserKeyInput::tagDirKeyTime *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUtagDirKeyTime@ioUserKeyInput@@@std@@YAPAUtagDirKeyTime@ioUserKeyInput@@PAU12@@Z ENDP ; std::_Val_type<ioUserKeyInput::tagDirKeyTime *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UtagDirKeyTime@ioUserKeyInput@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagDirKeyTime@ioUserKeyInput@@0@Z ; std::_Ptr_cat<ioUserKeyInput::tagDirKeyTime,ioUserKeyInput::tagDirKeyTime>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@UtagDirKeyTime@ioUserKeyInput@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagDirKeyTime@ioUserKeyInput@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UtagDirKeyTime@ioUserKeyInput@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagDirKeyTime@ioUserKeyInput@@0@Z PROC ; std::_Ptr_cat<ioUserKeyInput::tagDirKeyTime,ioUserKeyInput::tagDirKeyTime>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UtagDirKeyTime@ioUserKeyInput@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagDirKeyTime@ioUserKeyInput@@0@Z ENDP ; std::_Ptr_cat<ioUserKeyInput::tagDirKeyTime,ioUserKeyInput::tagDirKeyTime>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUtagDirKeyTime@ioUserKeyInput@@PAU12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagDirKeyTime@ioUserKeyInput@@0@Z ; std::_Ptr_cat<ioUserKeyInput::tagDirKeyTime *,ioUserKeyInput::tagDirKeyTime *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@PAUtagDirKeyTime@ioUserKeyInput@@PAU12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagDirKeyTime@ioUserKeyInput@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUtagDirKeyTime@ioUserKeyInput@@PAU12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagDirKeyTime@ioUserKeyInput@@0@Z PROC ; std::_Ptr_cat<ioUserKeyInput::tagDirKeyTime *,ioUserKeyInput::tagDirKeyTime *>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@PAUtagDirKeyTime@ioUserKeyInput@@PAU12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagDirKeyTime@ioUserKeyInput@@0@Z ENDP ; std::_Ptr_cat<ioUserKeyInput::tagDirKeyTime *,ioUserKeyInput::tagDirKeyTime *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUtagDirKeyTime@ioUserKeyInput@@PAU12@@std@@YAPAPAUtagDirKeyTime@ioUserKeyInput@@PAPAU12@00AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<ioUserKeyInput::tagDirKeyTime *,ioUserKeyInput::tagDirKeyTime *>
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@PAUtagDirKeyTime@ioUserKeyInput@@PAU12@@std@@YAPAPAUtagDirKeyTime@ioUserKeyInput@@PAPAU12@00AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PAUtagDirKeyTime@ioUserKeyInput@@PAU12@@std@@YAPAPAUtagDirKeyTime@ioUserKeyInput@@PAPAU12@00AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<ioUserKeyInput::tagDirKeyTime *,ioUserKeyInput::tagDirKeyTime *>, COMDAT

; 399  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 400  : 	_DEBUG_RANGE(_First, _Last);
; 401  : 	_DEBUG_POINTER(_Dest);
; 402  : 	size_t _Count = (size_t)(_Last - _First);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2

; 403  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 404  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 405  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninit_copy@PAUtagDirKeyTime@ioUserKeyInput@@PAU12@@std@@YAPAPAUtagDirKeyTime@ioUserKeyInput@@PAPAU12@00AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<ioUserKeyInput::tagDirKeyTime *,ioUserKeyInput::tagDirKeyTime *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAPAUtagDirKeyTime@ioUserKeyInput@@@std@@YAPAPAUtagDirKeyTime@ioUserKeyInput@@PAPAU12@@Z ; std::_Val_type<ioUserKeyInput::tagDirKeyTime * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAUtagDirKeyTime@ioUserKeyInput@@@std@@YAPAPAUtagDirKeyTime@ioUserKeyInput@@PAPAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAUtagDirKeyTime@ioUserKeyInput@@@std@@YAPAPAUtagDirKeyTime@ioUserKeyInput@@PAPAU12@@Z PROC ; std::_Val_type<ioUserKeyInput::tagDirKeyTime * *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAPAUtagDirKeyTime@ioUserKeyInput@@@std@@YAPAPAUtagDirKeyTime@ioUserKeyInput@@PAPAU12@@Z ENDP ; std::_Val_type<ioUserKeyInput::tagDirKeyTime * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@0AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ioUserKeyInput::tagDirKeyTime *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@0AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@0AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ioUserKeyInput::tagDirKeyTime *> >, COMDAT

; 105  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@0AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioUserKeyInput::tagDirKeyTime *> >
_TEXT	ENDS
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@0@0@Z ; std::_Ptr_cat<std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >,std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@0@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@0@0@Z PROC ; std::_Ptr_cat<std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >,std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> > >, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@0@0@Z ENDP ; std::_Ptr_cat<std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >,std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> > >
_TEXT	ENDS
PUBLIC	??$_Construct@UtagDirKeyTime@ioUserKeyInput@@ABU12@@std@@YAXPAUtagDirKeyTime@ioUserKeyInput@@ABU12@@Z ; std::_Construct<ioUserKeyInput::tagDirKeyTime,ioUserKeyInput::tagDirKeyTime const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UtagDirKeyTime@ioUserKeyInput@@ABU12@@std@@YAXPAUtagDirKeyTime@ioUserKeyInput@@ABU12@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UtagDirKeyTime@ioUserKeyInput@@ABU12@@std@@YAXPAUtagDirKeyTime@ioUserKeyInput@@ABU12@@Z PROC ; std::_Construct<ioUserKeyInput::tagDirKeyTime,ioUserKeyInput::tagDirKeyTime const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@Construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@Construct:

; 49   : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Construct@UtagDirKeyTime@ioUserKeyInput@@ABU12@@std@@YAXPAUtagDirKeyTime@ioUserKeyInput@@ABU12@@Z ENDP ; std::_Construct<ioUserKeyInput::tagDirKeyTime,ioUserKeyInput::tagDirKeyTime const &>
_TEXT	ENDS
PUBLIC	??$_Destroy@UtagDirKeyTime@ioUserKeyInput@@@std@@YAXPAUtagDirKeyTime@ioUserKeyInput@@@Z ; std::_Destroy<ioUserKeyInput::tagDirKeyTime>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@UtagDirKeyTime@ioUserKeyInput@@@std@@YAXPAUtagDirKeyTime@ioUserKeyInput@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UtagDirKeyTime@ioUserKeyInput@@@std@@YAXPAUtagDirKeyTime@ioUserKeyInput@@@Z PROC ; std::_Destroy<ioUserKeyInput::tagDirKeyTime>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UtagDirKeyTime@ioUserKeyInput@@@std@@YAXPAUtagDirKeyTime@ioUserKeyInput@@@Z ENDP ; std::_Destroy<ioUserKeyInput::tagDirKeyTime>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAUtagDirKeyTime@ioUserKeyInput@@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@@Z ; std::_Destroy<ioUserKeyInput::tagDirKeyTime *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@PAUtagDirKeyTime@ioUserKeyInput@@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAUtagDirKeyTime@ioUserKeyInput@@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@@Z PROC ; std::_Destroy<ioUserKeyInput::tagDirKeyTime *>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAUtagDirKeyTime@ioUserKeyInput@@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@@Z ENDP ; std::_Destroy<ioUserKeyInput::tagDirKeyTime *>
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z ; std::_Destroy<std::_Container_proxy>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z PROC ; std::_Destroy<std::_Container_proxy>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z ENDP ; std::_Destroy<std::_Container_proxy>
_TEXT	ENDS
PUBLIC	??E?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAV01@XZ ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\deque
;	COMDAT ??E?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator++, COMDAT
; _this$ = ecx

; 364  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 365  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 366  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 367  : 		if (_Mycont == 0
; 368  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 369  : 		{	// report error
; 370  : 		_DEBUG_ERROR("deque iterator not incrementable");
; 371  : 		_SCL_SECURE_OUT_OF_RANGE;
; 372  : 		}
; 373  : 
; 374  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 375  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 376  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 377  : 		_SCL_SECURE_VALIDATE_RANGE(
; 378  : 			this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 379  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 380  : 
; 381  : 		++_Myoff;

  00002	ff 40 08	 inc	 DWORD PTR [eax+8]

; 382  : 		return (*this);
; 383  : 		}

  00005	c3		 ret	 0
??E?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator++
_TEXT	ENDS
PUBLIC	??F?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAV01@XZ ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator--
; Function compile flags: /Ogsp
;	COMDAT ??F?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator--, COMDAT
; _this$ = ecx

; 393  : 		{	// predecrement

  00000	8b c1		 mov	 eax, ecx

; 394  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 395  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 396  : 		if (_Mycont == 0
; 397  : 			|| this->_Myoff <= _Mycont->_Myoff)
; 398  : 		{	// report error
; 399  : 		_DEBUG_ERROR("deque iterator not decrementable");
; 400  : 		_SCL_SECURE_OUT_OF_RANGE;
; 401  : 		}
; 402  : 
; 403  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 404  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 405  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 406  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff < this->_Myoff);
; 407  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 408  : 
; 409  : 		--_Myoff;

  00002	ff 48 08	 dec	 DWORD PTR [eax+8]

; 410  : 		return (*this);
; 411  : 		}

  00005	c3		 ret	 0
??F?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator--
_TEXT	ENDS
PUBLIC	??8?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator==, COMDAT
; _this$ = ecx

; 474  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 475  : 		_Compat(_Right);
; 476  : 		return (this->_Myoff == _Right._Myoff);

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	2b 41 08	 sub	 eax, DWORD PTR [ecx+8]
  0000c	f7 d8		 neg	 eax
  0000e	1b c0		 sbb	 eax, eax
  00010	40		 inc	 eax

; 477  : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??8?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator==
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAPAUtagDirKeyTime@ioUserKeyInput@@IPAU12@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@IABQAU12@@Z ; std::_Fill_n<ioUserKeyInput::tagDirKeyTime * *,unsigned int,ioUserKeyInput::tagDirKeyTime *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Fill_n@PAPAUtagDirKeyTime@ioUserKeyInput@@IPAU12@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@IABQAU12@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill_n@PAPAUtagDirKeyTime@ioUserKeyInput@@IPAU12@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@IABQAU12@@Z PROC ; std::_Fill_n<ioUserKeyInput::tagDirKeyTime * *,unsigned int,ioUserKeyInput::tagDirKeyTime *>, COMDAT

; 2723 : 	{	// copy _Val _Count times through [_Dest, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2724 : 	for (; 0 < _Count; --_Count, ++_Dest)

  00003	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00007	76 16		 jbe	 SHORT $LN1@Fill_n
  00009	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
$LL3@Fill_n:

; 2725 : 		*_Dest = _Val;

  0000c	8b 4d 10	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00011	ff 4d 0c	 dec	 DWORD PTR __Count$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx
  00016	83 c0 04	 add	 eax, 4
  00019	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  0001d	77 ed		 ja	 SHORT $LL3@Fill_n
$LN1@Fill_n:

; 2726 : 	}

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Fill_n@PAPAUtagDirKeyTime@ioUserKeyInput@@IPAU12@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@IABQAU12@@Z ENDP ; std::_Fill_n<ioUserKeyInput::tagDirKeyTime * *,unsigned int,ioUserKeyInput::tagDirKeyTime *>
_TEXT	ENDS
PUBLIC	??$move@AAUtagDirKeyTime@ioUserKeyInput@@@std@@YA$$QAUtagDirKeyTime@ioUserKeyInput@@AAU12@@Z ; std::move<ioUserKeyInput::tagDirKeyTime &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUtagDirKeyTime@ioUserKeyInput@@@std@@YA$$QAUtagDirKeyTime@ioUserKeyInput@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUtagDirKeyTime@ioUserKeyInput@@@std@@YA$$QAUtagDirKeyTime@ioUserKeyInput@@AAU12@@Z PROC ; std::move<ioUserKeyInput::tagDirKeyTime &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUtagDirKeyTime@ioUserKeyInput@@@std@@YA$$QAUtagDirKeyTime@ioUserKeyInput@@AAU12@@Z ENDP ; std::move<ioUserKeyInput::tagDirKeyTime &>
_TEXT	ENDS
PUBLIC	??$forward@UtagDirKeyTime@ioUserKeyInput@@@std@@YA$$QAUtagDirKeyTime@ioUserKeyInput@@AAU12@@Z ; std::forward<ioUserKeyInput::tagDirKeyTime>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@UtagDirKeyTime@ioUserKeyInput@@@std@@YA$$QAUtagDirKeyTime@ioUserKeyInput@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UtagDirKeyTime@ioUserKeyInput@@@std@@YA$$QAUtagDirKeyTime@ioUserKeyInput@@AAU12@@Z PROC ; std::forward<ioUserKeyInput::tagDirKeyTime>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UtagDirKeyTime@ioUserKeyInput@@@std@@YA$$QAUtagDirKeyTime@ioUserKeyInput@@AAU12@@Z ENDP ; std::forward<ioUserKeyInput::tagDirKeyTime>
_TEXT	ENDS
PUBLIC	??0tagDirKeyTime@ioUserKeyInput@@QAE@XZ		; ioUserKeyInput::tagDirKeyTime::tagDirKeyTime
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iouserkeyinput.h
;	COMDAT ??0tagDirKeyTime@ioUserKeyInput@@QAE@XZ
_TEXT	SEGMENT
??0tagDirKeyTime@ioUserKeyInput@@QAE@XZ PROC		; ioUserKeyInput::tagDirKeyTime::tagDirKeyTime, COMDAT
; _this$ = ecx

; 104  : 		tagDirKeyTime()

  00000	8b c1		 mov	 eax, ecx

; 105  : 		{
; 106  : 			m_DirKey = DKI_NONE;

  00002	83 20 00	 and	 DWORD PTR [eax], 0

; 107  : 			m_dwKeyTime = 0;

  00005	83 60 04 00	 and	 DWORD PTR [eax+4], 0

; 108  : 		}

  00009	c3		 ret	 0
??0tagDirKeyTime@ioUserKeyInput@@QAE@XZ ENDP		; ioUserKeyInput::tagDirKeyTime::tagDirKeyTime
_TEXT	ENDS
PUBLIC	?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::size
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@KV?$allocator@K@std@@@std@@IBE_NPBK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@KV?$allocator@K@std@@@std@@IBE_NPBK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@KV?$allocator@K@std@@@std@@IBE_NPBK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@KV?$allocator@K@std@@@std@@IBE_NPBK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@KV?$allocator@K@std@@@std@@IBEXPAK0@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@KV?$allocator@K@std@@@std@@IBEXPAK0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@KV?$allocator@K@std@@@std@@IBEXPAK0@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@KV?$allocator@K@std@@@std@@IBEXPAK0@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@KV?$allocator@K@std@@@std@@QAE@XZ ; std::_Vector_val<unsigned long,std::allocator<unsigned long> >::~_Vector_val<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::_Vector_val<unsigned long,std::allocator<unsigned long> >::~_Vector_val<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<unsigned long,std::allocator<unsigned long> >::~_Vector_val<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??0?$allocator@K@std@@QAE@XZ			; std::allocator<unsigned long>::allocator<unsigned long>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@K@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@K@std@@QAE@XZ PROC			; std::allocator<unsigned long>::allocator<unsigned long>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@K@std@@QAE@XZ ENDP			; std::allocator<unsigned long>::allocator<unsigned long>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@KV?$allocator@K@std@@@std@@IBEXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlen
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@KV?$allocator@K@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@KV?$allocator@K@std@@@std@@IBEXXZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@2:
$LN3@Xlen@2:
  0000b	cc		 int	 3
?_Xlen@?$vector@KV?$allocator@K@std@@@std@@IBEXXZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@K@std@@QAE@ABV01@@Z		; std::allocator<unsigned long>::allocator<unsigned long>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@K@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@K@std@@QAE@ABV01@@Z PROC			; std::allocator<unsigned long>::allocator<unsigned long>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@K@std@@QAE@ABV01@@Z ENDP			; std::allocator<unsigned long>::allocator<unsigned long>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@K@std@@QAEXPAKI@Z	; std::allocator<unsigned long>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@K@std@@QAEXPAKI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@K@std@@QAEXPAKI@Z PROC		; std::allocator<unsigned long>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@K@std@@QAEXPAKI@Z ENDP		; std::allocator<unsigned long>::deallocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@K@std@@QBEIXZ		; std::allocator<unsigned long>::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@K@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@K@std@@QBEIXZ PROC		; std::allocator<unsigned long>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@K@std@@QBEIXZ ENDP		; std::allocator<unsigned long>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAE@PAKPBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAE@PAKPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAE@PAKPBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAE@PAKPBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::_Compat
_TEXT	ENDS
PUBLIC	??$_Allocate@K@std@@YAPAKIPAK@Z			; std::_Allocate<unsigned long>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Allocate@K@std@@YAPAKIPAK@Z
_TEXT	SEGMENT
$T508541 = -12						; size = 12
$T508545 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@K@std@@YAPAKIPAK@Z PROC			; std::_Allocate<unsigned long>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3e		 je	 SHORT $LN5@Allocate@4

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate@4
  00017	8b c1		 mov	 eax, ecx
  00019	c1 e0 02	 shl	 eax, 2
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	59		 pop	 ecx
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 26		 jne	 SHORT $LN5@Allocate@4
$LN1@Allocate@4:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	83 65 08 00	 and	 DWORD PTR $T508545[ebp], 0
  0002b	8d 45 08	 lea	 eax, DWORD PTR $T508545[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T508541[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00038	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003d	8d 45 f4	 lea	 eax, DWORD PTR $T508541[ebp]
  00040	50		 push	 eax
  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T508541[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00048	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@4:
$LN5@Allocate@4:

; 40   : 	}

  0004d	c9		 leave
  0004e	c3		 ret	 0
$LN9@Allocate@4:
??$_Allocate@K@std@@YAPAKIPAK@Z ENDP			; std::_Allocate<unsigned long>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@KK@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAK0@Z ; std::_Ptr_cat<unsigned long,unsigned long>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@KK@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAK0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@KK@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAK0@Z PROC ; std::_Ptr_cat<unsigned long,unsigned long>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@KK@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAK0@Z ENDP ; std::_Ptr_cat<unsigned long,unsigned long>
_TEXT	ENDS
PUBLIC	??$_Move@PAKPAK@std@@YAPAKPAK00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<unsigned long *,unsigned long *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAKPAK@std@@YAPAKPAK00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAKPAK@std@@YAPAKPAK00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<unsigned long *,unsigned long *>, COMDAT

; 2522 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2523 : 	ptrdiff_t _Count = _Last - _First;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	57		 push	 edi

; 2524 : 	_CSTD memmove(&*_Dest, &*_First,
; 2525 : 		_Count * sizeof (*_First));

  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0000e	c1 fe 02	 sar	 esi, 2
  00011	c1 e6 02	 shl	 esi, 2
  00014	56		 push	 esi
  00015	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00018	57		 push	 edi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2526 : 	return (_Dest + _Count);

  00022	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 2527 : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Move@PAKPAK@std@@YAPAKPAK00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<unsigned long *,unsigned long *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<unsigned long> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned long> >, COMDAT

; 105  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??$_Val_type@PAK@std@@YAPAKPAK@Z		; std::_Val_type<unsigned long *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAK@std@@YAPAKPAK@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAK@std@@YAPAKPAK@Z PROC			; std::_Val_type<unsigned long *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAK@std@@YAPAKPAK@Z ENDP			; std::_Val_type<unsigned long *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@KKK@std@@YAPAKPAK00AAV?$allocator@K@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<unsigned long,unsigned long,unsigned long>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@KKK@std@@YAPAKPAK00AAV?$allocator@K@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@KKK@std@@YAPAKPAK00AAV?$allocator@K@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<unsigned long,unsigned long,unsigned long>, COMDAT

; 456  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 457  : 	_DEBUG_RANGE(_First, _Last);
; 458  : 	_DEBUG_POINTER(_Dest);
; 459  : 	size_t _Count = (size_t)(_Last - _First);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2

; 460  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 461  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 462  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninit_move@KKK@std@@YAPAKPAK00AAV?$allocator@K@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<unsigned long,unsigned long,unsigned long>
_TEXT	ENDS
PUBLIC	?IsLeftKeyPress@ioUserKeyInput@@QBE_NXZ		; ioUserKeyInput::IsLeftKeyPress
EXTRN	?IsKeyPress@CDirectInput@@QAI_NG@Z:PROC		; CDirectInput::IsKeyPress
EXTRN	?GetSingleton@CDirectInput@@SAAAV1@XZ:PROC	; CDirectInput::GetSingleton
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iouserkeyinput.cpp
;	COMDAT ?IsLeftKeyPress@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsLeftKeyPress@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsLeftKeyPress, COMDAT
; _this$ = ecx

; 1319 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1320 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 0b		 je	 SHORT $LN6@IsLeftKeyP

; 1321 : 	{
; 1322 : 		if( m_AIKeys.m_wLeftKey == KEY_PRESS )

  0000c	66 83 7e 68 02	 cmp	 WORD PTR [esi+104], 2
  00011	75 0d		 jne	 SHORT $LN2@IsLeftKeyP

; 1323 : 			return true;

  00013	b0 01		 mov	 al, 1
  00015	5e		 pop	 esi

; 1336 : }

  00016	c3		 ret	 0
$LN6@IsLeftKeyP:

; 1324 : 	}
; 1325 : 	else
; 1326 : 	{
; 1327 : 		if( !CDirectInput::GetSingletonPtr() )

  00017	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  0001e	75 04		 jne	 SHORT $LN3@IsLeftKeyP
$LN2@IsLeftKeyP:

; 1328 : 			return false;

  00020	32 c0		 xor	 al, al
  00022	5e		 pop	 esi

; 1336 : }

  00023	c3		 ret	 0
$LN3@IsLeftKeyP:

; 1329 : 
; 1330 : 		if( g_Input.IsKeyPress( m_Keys.m_wLeftKey ) ||
; 1331 : 			g_Input.IsKeyPress( m_SecondKeys.m_wLeftKey) ||
; 1332 : 			g_Input.IsKeyPress( m_JoyKeys.m_wLeftKey ) )

  00024	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00029	66 8b 56 0e	 mov	 dx, WORD PTR [esi+14]
  0002d	8b c8		 mov	 ecx, eax
  0002f	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00034	84 c0		 test	 al, al
  00036	75 28		 jne	 SHORT $LN1@IsLeftKeyP
  00038	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003d	66 8b 56 2c	 mov	 dx, WORD PTR [esi+44]
  00041	8b c8		 mov	 ecx, eax
  00043	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00048	84 c0		 test	 al, al
  0004a	75 14		 jne	 SHORT $LN1@IsLeftKeyP
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00051	66 8b 56 4a	 mov	 dx, WORD PTR [esi+74]
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  0005c	84 c0		 test	 al, al

; 1334 : 	}
; 1335 : 	return false;

  0005e	74 c0		 je	 SHORT $LN2@IsLeftKeyP
$LN1@IsLeftKeyP:

; 1333 : 			return IsKeyDownException();

  00060	8b ce		 mov	 ecx, esi
  00062	5e		 pop	 esi
  00063	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsLeftKeyPress@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsLeftKeyPress
_TEXT	ENDS
PUBLIC	?IsLeftKeyDown@ioUserKeyInput@@QBE_NXZ		; ioUserKeyInput::IsLeftKeyDown
EXTRN	?IsKeyDown@CDirectInput@@QAI_NG@Z:PROC		; CDirectInput::IsKeyDown
; Function compile flags: /Ogsp
;	COMDAT ?IsLeftKeyDown@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsLeftKeyDown@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsLeftKeyDown, COMDAT
; _this$ = ecx

; 1339 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1340 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 12		 je	 SHORT $LN7@IsLeftKeyD

; 1341 : 	{
; 1342 : 		if( m_AIKeys.m_wLeftKey == KEY_REPEAT || m_AIKeys.m_wLeftKey == KEY_PRESS )

  0000c	0f b7 46 68	 movzx	 eax, WORD PTR [esi+104]
  00010	83 f8 03	 cmp	 eax, 3
  00013	74 05		 je	 SHORT $LN5@IsLeftKeyD
  00015	83 f8 02	 cmp	 eax, 2
  00018	75 0d		 jne	 SHORT $LN2@IsLeftKeyD
$LN5@IsLeftKeyD:

; 1343 : 			return true;

  0001a	b0 01		 mov	 al, 1
  0001c	5e		 pop	 esi

; 1356 : }

  0001d	c3		 ret	 0
$LN7@IsLeftKeyD:

; 1344 : 	}
; 1345 : 	else
; 1346 : 	{
; 1347 : 		if( !CDirectInput::GetSingletonPtr() )

  0001e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  00025	75 04		 jne	 SHORT $LN3@IsLeftKeyD
$LN2@IsLeftKeyD:

; 1348 : 			return false;

  00027	32 c0		 xor	 al, al
  00029	5e		 pop	 esi

; 1356 : }

  0002a	c3		 ret	 0
$LN3@IsLeftKeyD:

; 1349 : 
; 1350 : 		if( g_Input.IsKeyDown( m_Keys.m_wLeftKey ) ||
; 1351 : 			g_Input.IsKeyDown( m_SecondKeys.m_wLeftKey) ||
; 1352 : 			g_Input.IsKeyDown( m_JoyKeys.m_wLeftKey ) )

  0002b	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00030	66 8b 56 0e	 mov	 dx, WORD PTR [esi+14]
  00034	8b c8		 mov	 ecx, eax
  00036	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0003b	84 c0		 test	 al, al
  0003d	75 28		 jne	 SHORT $LN1@IsLeftKeyD
  0003f	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00044	66 8b 56 2c	 mov	 dx, WORD PTR [esi+44]
  00048	8b c8		 mov	 ecx, eax
  0004a	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0004f	84 c0		 test	 al, al
  00051	75 14		 jne	 SHORT $LN1@IsLeftKeyD
  00053	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00058	66 8b 56 4a	 mov	 dx, WORD PTR [esi+74]
  0005c	8b c8		 mov	 ecx, eax
  0005e	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  00063	84 c0		 test	 al, al

; 1354 : 	}
; 1355 : 	return false;

  00065	74 c0		 je	 SHORT $LN2@IsLeftKeyD
$LN1@IsLeftKeyD:

; 1353 : 			return IsKeyDownException();

  00067	8b ce		 mov	 ecx, esi
  00069	5e		 pop	 esi
  0006a	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsLeftKeyDown@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsLeftKeyDown
_TEXT	ENDS
PUBLIC	?IsLeftKeyRelease@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsLeftKeyRelease
EXTRN	?GetKeyState@CDirectInput@@QAIGG@Z:PROC		; CDirectInput::GetKeyState
; Function compile flags: /Ogsp
;	COMDAT ?IsLeftKeyRelease@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsLeftKeyRelease@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsLeftKeyRelease, COMDAT
; _this$ = ecx

; 1359 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1360 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 07		 je	 SHORT $LN6@IsLeftKeyR

; 1361 : 	{
; 1362 : 		if( m_AIKeys.m_wLeftKey == KEY_RELEASE )

  0000c	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1

; 1363 : 			return true;

  00011	eb 4d		 jmp	 SHORT $LN11@IsLeftKeyR
$LN6@IsLeftKeyR:

; 1364 : 	}
; 1365 : 	else
; 1366 : 	{
; 1367 : 		if( !CDirectInput::GetSingletonPtr() )

  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  0001a	75 04		 jne	 SHORT $LN3@IsLeftKeyR
$LN2@IsLeftKeyR:

; 1368 : 			return false;

  0001c	32 c0		 xor	 al, al
  0001e	5e		 pop	 esi

; 1376 : }

  0001f	c3		 ret	 0
$LN3@IsLeftKeyR:

; 1369 : 
; 1370 : 		if( g_Input.GetKeyState( m_Keys.m_wLeftKey ) == KEY_RELEASE ||
; 1371 : 			g_Input.GetKeyState( m_SecondKeys.m_wLeftKey) == KEY_RELEASE || 
; 1372 : 			g_Input.GetKeyState( m_JoyKeys.m_wLeftKey ) == KEY_RELEASE )

  00020	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00025	66 8b 56 0e	 mov	 dx, WORD PTR [esi+14]
  00029	8b c8		 mov	 ecx, eax
  0002b	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00030	66 83 f8 01	 cmp	 ax, 1
  00034	74 2c		 je	 SHORT $LN1@IsLeftKeyR
  00036	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003b	66 8b 56 2c	 mov	 dx, WORD PTR [esi+44]
  0003f	8b c8		 mov	 ecx, eax
  00041	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00046	66 83 f8 01	 cmp	 ax, 1
  0004a	74 16		 je	 SHORT $LN1@IsLeftKeyR
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00051	66 8b 56 4a	 mov	 dx, WORD PTR [esi+74]
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0005c	66 83 f8 01	 cmp	 ax, 1
$LN11@IsLeftKeyR:

; 1374 : 	}
; 1375 : 	return false;

  00060	75 ba		 jne	 SHORT $LN2@IsLeftKeyR
$LN1@IsLeftKeyR:

; 1373 : 			return true;

  00062	b0 01		 mov	 al, 1
  00064	5e		 pop	 esi

; 1376 : }

  00065	c3		 ret	 0
?IsLeftKeyRelease@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsLeftKeyRelease
_TEXT	ENDS
PUBLIC	?IsRightKeyPress@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsRightKeyPress
; Function compile flags: /Ogsp
;	COMDAT ?IsRightKeyPress@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsRightKeyPress@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsRightKeyPress, COMDAT
; _this$ = ecx

; 1379 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1380 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 0b		 je	 SHORT $LN6@IsRightKey

; 1381 : 	{
; 1382 : 		if( m_AIKeys.m_wRightKey == KEY_PRESS )

  0000c	66 83 7e 6a 02	 cmp	 WORD PTR [esi+106], 2
  00011	75 0d		 jne	 SHORT $LN2@IsRightKey

; 1383 : 			return true;

  00013	b0 01		 mov	 al, 1
  00015	5e		 pop	 esi

; 1396 : }

  00016	c3		 ret	 0
$LN6@IsRightKey:

; 1384 : 	}
; 1385 : 	else
; 1386 : 	{
; 1387 : 		if( !CDirectInput::GetSingletonPtr() )

  00017	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  0001e	75 04		 jne	 SHORT $LN3@IsRightKey
$LN2@IsRightKey:

; 1388 : 			return false;

  00020	32 c0		 xor	 al, al
  00022	5e		 pop	 esi

; 1396 : }

  00023	c3		 ret	 0
$LN3@IsRightKey:

; 1389 : 
; 1390 : 		if( g_Input.IsKeyPress( m_Keys.m_wRightKey ) ||
; 1391 : 			g_Input.IsKeyPress( m_SecondKeys.m_wRightKey) ||
; 1392 : 			g_Input.IsKeyPress( m_JoyKeys.m_wRightKey ) )

  00024	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00029	66 8b 56 10	 mov	 dx, WORD PTR [esi+16]
  0002d	8b c8		 mov	 ecx, eax
  0002f	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00034	84 c0		 test	 al, al
  00036	75 28		 jne	 SHORT $LN1@IsRightKey
  00038	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003d	66 8b 56 2e	 mov	 dx, WORD PTR [esi+46]
  00041	8b c8		 mov	 ecx, eax
  00043	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00048	84 c0		 test	 al, al
  0004a	75 14		 jne	 SHORT $LN1@IsRightKey
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00051	66 8b 56 4c	 mov	 dx, WORD PTR [esi+76]
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  0005c	84 c0		 test	 al, al

; 1394 : 	}
; 1395 : 	return false;

  0005e	74 c0		 je	 SHORT $LN2@IsRightKey
$LN1@IsRightKey:

; 1393 : 			return IsKeyDownException();

  00060	8b ce		 mov	 ecx, esi
  00062	5e		 pop	 esi
  00063	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsRightKeyPress@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsRightKeyPress
_TEXT	ENDS
PUBLIC	?IsRightKeyDown@ioUserKeyInput@@QBE_NXZ		; ioUserKeyInput::IsRightKeyDown
; Function compile flags: /Ogsp
;	COMDAT ?IsRightKeyDown@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsRightKeyDown@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsRightKeyDown, COMDAT
; _this$ = ecx

; 1399 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1400 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 12		 je	 SHORT $LN7@IsRightKey@2

; 1401 : 	{
; 1402 : 		if( m_AIKeys.m_wRightKey == KEY_REPEAT || m_AIKeys.m_wRightKey == KEY_PRESS )

  0000c	0f b7 46 6a	 movzx	 eax, WORD PTR [esi+106]
  00010	83 f8 03	 cmp	 eax, 3
  00013	74 05		 je	 SHORT $LN5@IsRightKey@2
  00015	83 f8 02	 cmp	 eax, 2
  00018	75 0d		 jne	 SHORT $LN2@IsRightKey@2
$LN5@IsRightKey@2:

; 1403 : 			return true;

  0001a	b0 01		 mov	 al, 1
  0001c	5e		 pop	 esi

; 1416 : }

  0001d	c3		 ret	 0
$LN7@IsRightKey@2:

; 1404 : 	}
; 1405 : 	else
; 1406 : 	{
; 1407 : 		if( !CDirectInput::GetSingletonPtr() )

  0001e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  00025	75 04		 jne	 SHORT $LN3@IsRightKey@2
$LN2@IsRightKey@2:

; 1408 : 			return false;

  00027	32 c0		 xor	 al, al
  00029	5e		 pop	 esi

; 1416 : }

  0002a	c3		 ret	 0
$LN3@IsRightKey@2:

; 1409 : 
; 1410 : 		if( g_Input.IsKeyDown( m_Keys.m_wRightKey ) ||
; 1411 : 			g_Input.IsKeyDown( m_SecondKeys.m_wRightKey) ||
; 1412 : 			g_Input.IsKeyDown( m_JoyKeys.m_wRightKey) )

  0002b	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00030	66 8b 56 10	 mov	 dx, WORD PTR [esi+16]
  00034	8b c8		 mov	 ecx, eax
  00036	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0003b	84 c0		 test	 al, al
  0003d	75 28		 jne	 SHORT $LN1@IsRightKey@2
  0003f	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00044	66 8b 56 2e	 mov	 dx, WORD PTR [esi+46]
  00048	8b c8		 mov	 ecx, eax
  0004a	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0004f	84 c0		 test	 al, al
  00051	75 14		 jne	 SHORT $LN1@IsRightKey@2
  00053	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00058	66 8b 56 4c	 mov	 dx, WORD PTR [esi+76]
  0005c	8b c8		 mov	 ecx, eax
  0005e	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  00063	84 c0		 test	 al, al

; 1414 : 	}	
; 1415 : 	return false;

  00065	74 c0		 je	 SHORT $LN2@IsRightKey@2
$LN1@IsRightKey@2:

; 1413 : 			return IsKeyDownException();

  00067	8b ce		 mov	 ecx, esi
  00069	5e		 pop	 esi
  0006a	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsRightKeyDown@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsRightKeyDown
_TEXT	ENDS
PUBLIC	?IsRightKeyRelease@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsRightKeyRelease
; Function compile flags: /Ogsp
;	COMDAT ?IsRightKeyRelease@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsRightKeyRelease@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsRightKeyRelease, COMDAT
; _this$ = ecx

; 1419 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1420 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 07		 je	 SHORT $LN6@IsRightKey@3

; 1421 : 	{
; 1422 : 		if( m_AIKeys.m_wRightKey == KEY_RELEASE )

  0000c	66 83 7e 6a 01	 cmp	 WORD PTR [esi+106], 1

; 1423 : 			return true;

  00011	eb 4d		 jmp	 SHORT $LN11@IsRightKey@3
$LN6@IsRightKey@3:

; 1424 : 	}
; 1425 : 	else
; 1426 : 	{
; 1427 : 		if( !CDirectInput::GetSingletonPtr() )

  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  0001a	75 04		 jne	 SHORT $LN3@IsRightKey@3
$LN2@IsRightKey@3:

; 1428 : 			return false;

  0001c	32 c0		 xor	 al, al
  0001e	5e		 pop	 esi

; 1436 : }

  0001f	c3		 ret	 0
$LN3@IsRightKey@3:

; 1429 : 
; 1430 : 		if( g_Input.GetKeyState( m_Keys.m_wRightKey ) == KEY_RELEASE ||
; 1431 : 			g_Input.GetKeyState( m_SecondKeys.m_wRightKey) == KEY_RELEASE ||
; 1432 : 			g_Input.GetKeyState( m_JoyKeys.m_wRightKey) == KEY_RELEASE )

  00020	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00025	66 8b 56 10	 mov	 dx, WORD PTR [esi+16]
  00029	8b c8		 mov	 ecx, eax
  0002b	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00030	66 83 f8 01	 cmp	 ax, 1
  00034	74 2c		 je	 SHORT $LN1@IsRightKey@3
  00036	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003b	66 8b 56 2e	 mov	 dx, WORD PTR [esi+46]
  0003f	8b c8		 mov	 ecx, eax
  00041	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00046	66 83 f8 01	 cmp	 ax, 1
  0004a	74 16		 je	 SHORT $LN1@IsRightKey@3
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00051	66 8b 56 4c	 mov	 dx, WORD PTR [esi+76]
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0005c	66 83 f8 01	 cmp	 ax, 1
$LN11@IsRightKey@3:

; 1434 : 	}
; 1435 : 	return false;

  00060	75 ba		 jne	 SHORT $LN2@IsRightKey@3
$LN1@IsRightKey@3:

; 1433 : 			return true;

  00062	b0 01		 mov	 al, 1
  00064	5e		 pop	 esi

; 1436 : }

  00065	c3		 ret	 0
?IsRightKeyRelease@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsRightKeyRelease
_TEXT	ENDS
PUBLIC	?IsUpKeyPress@ioUserKeyInput@@QBE_NXZ		; ioUserKeyInput::IsUpKeyPress
; Function compile flags: /Ogsp
;	COMDAT ?IsUpKeyPress@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsUpKeyPress@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsUpKeyPress, COMDAT
; _this$ = ecx

; 1439 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1440 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 0b		 je	 SHORT $LN6@IsUpKeyPre

; 1441 : 	{
; 1442 : 		if( m_AIKeys.m_wUpKey == KEY_PRESS )

  0000c	66 83 7e 6c 02	 cmp	 WORD PTR [esi+108], 2
  00011	75 0d		 jne	 SHORT $LN2@IsUpKeyPre

; 1443 : 			return true;

  00013	b0 01		 mov	 al, 1
  00015	5e		 pop	 esi

; 1456 : }

  00016	c3		 ret	 0
$LN6@IsUpKeyPre:

; 1444 : 	}
; 1445 : 	else
; 1446 : 	{
; 1447 : 		if( !CDirectInput::GetSingletonPtr() )

  00017	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  0001e	75 04		 jne	 SHORT $LN3@IsUpKeyPre
$LN2@IsUpKeyPre:

; 1448 : 			return false;

  00020	32 c0		 xor	 al, al
  00022	5e		 pop	 esi

; 1456 : }

  00023	c3		 ret	 0
$LN3@IsUpKeyPre:

; 1449 : 
; 1450 : 		if( g_Input.IsKeyPress( m_Keys.m_wUpKey ) ||
; 1451 : 			g_Input.IsKeyPress( m_SecondKeys.m_wUpKey) ||
; 1452 : 			g_Input.IsKeyPress( m_JoyKeys.m_wUpKey) )

  00024	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00029	66 8b 56 12	 mov	 dx, WORD PTR [esi+18]
  0002d	8b c8		 mov	 ecx, eax
  0002f	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00034	84 c0		 test	 al, al
  00036	75 28		 jne	 SHORT $LN1@IsUpKeyPre
  00038	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003d	66 8b 56 30	 mov	 dx, WORD PTR [esi+48]
  00041	8b c8		 mov	 ecx, eax
  00043	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00048	84 c0		 test	 al, al
  0004a	75 14		 jne	 SHORT $LN1@IsUpKeyPre
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00051	66 8b 56 4e	 mov	 dx, WORD PTR [esi+78]
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  0005c	84 c0		 test	 al, al

; 1454 : 	}
; 1455 : 	return false;

  0005e	74 c0		 je	 SHORT $LN2@IsUpKeyPre
$LN1@IsUpKeyPre:

; 1453 : 			return IsKeyDownException();

  00060	8b ce		 mov	 ecx, esi
  00062	5e		 pop	 esi
  00063	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsUpKeyPress@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsUpKeyPress
_TEXT	ENDS
PUBLIC	?IsUpKeyDown@ioUserKeyInput@@QBE_NXZ		; ioUserKeyInput::IsUpKeyDown
; Function compile flags: /Ogsp
;	COMDAT ?IsUpKeyDown@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsUpKeyDown@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsUpKeyDown, COMDAT
; _this$ = ecx

; 1459 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1460 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 12		 je	 SHORT $LN7@IsUpKeyDow

; 1461 : 	{
; 1462 : 		if( m_AIKeys.m_wUpKey == KEY_REPEAT || m_AIKeys.m_wUpKey == KEY_PRESS )

  0000c	0f b7 46 6c	 movzx	 eax, WORD PTR [esi+108]
  00010	83 f8 03	 cmp	 eax, 3
  00013	74 05		 je	 SHORT $LN5@IsUpKeyDow
  00015	83 f8 02	 cmp	 eax, 2
  00018	75 0d		 jne	 SHORT $LN2@IsUpKeyDow
$LN5@IsUpKeyDow:

; 1463 : 			return true;

  0001a	b0 01		 mov	 al, 1
  0001c	5e		 pop	 esi

; 1476 : }

  0001d	c3		 ret	 0
$LN7@IsUpKeyDow:

; 1464 : 	}
; 1465 : 	else
; 1466 : 	{
; 1467 : 		if( !CDirectInput::GetSingletonPtr() )

  0001e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  00025	75 04		 jne	 SHORT $LN3@IsUpKeyDow
$LN2@IsUpKeyDow:

; 1468 : 			return false;

  00027	32 c0		 xor	 al, al
  00029	5e		 pop	 esi

; 1476 : }

  0002a	c3		 ret	 0
$LN3@IsUpKeyDow:

; 1469 : 
; 1470 : 		if( g_Input.IsKeyDown( m_Keys.m_wUpKey ) ||
; 1471 : 			g_Input.IsKeyDown( m_SecondKeys.m_wUpKey) ||
; 1472 : 			g_Input.IsKeyDown( m_JoyKeys.m_wUpKey) )

  0002b	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00030	66 8b 56 12	 mov	 dx, WORD PTR [esi+18]
  00034	8b c8		 mov	 ecx, eax
  00036	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0003b	84 c0		 test	 al, al
  0003d	75 28		 jne	 SHORT $LN1@IsUpKeyDow
  0003f	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00044	66 8b 56 30	 mov	 dx, WORD PTR [esi+48]
  00048	8b c8		 mov	 ecx, eax
  0004a	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0004f	84 c0		 test	 al, al
  00051	75 14		 jne	 SHORT $LN1@IsUpKeyDow
  00053	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00058	66 8b 56 4e	 mov	 dx, WORD PTR [esi+78]
  0005c	8b c8		 mov	 ecx, eax
  0005e	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  00063	84 c0		 test	 al, al

; 1474 : 	}
; 1475 : 	return false;

  00065	74 c0		 je	 SHORT $LN2@IsUpKeyDow
$LN1@IsUpKeyDow:

; 1473 : 			return IsKeyDownException();

  00067	8b ce		 mov	 ecx, esi
  00069	5e		 pop	 esi
  0006a	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsUpKeyDown@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsUpKeyDown
_TEXT	ENDS
PUBLIC	?IsUpKeyRelease@ioUserKeyInput@@QBE_NXZ		; ioUserKeyInput::IsUpKeyRelease
; Function compile flags: /Ogsp
;	COMDAT ?IsUpKeyRelease@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsUpKeyRelease@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsUpKeyRelease, COMDAT
; _this$ = ecx

; 1479 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1480 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 07		 je	 SHORT $LN6@IsUpKeyRel

; 1481 : 	{
; 1482 : 		if( m_AIKeys.m_wUpKey == KEY_RELEASE )

  0000c	66 83 7e 6c 01	 cmp	 WORD PTR [esi+108], 1

; 1483 : 			return true;

  00011	eb 4d		 jmp	 SHORT $LN11@IsUpKeyRel
$LN6@IsUpKeyRel:

; 1484 : 	}
; 1485 : 	else
; 1486 : 	{
; 1487 : 		if( !CDirectInput::GetSingletonPtr() )

  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  0001a	75 04		 jne	 SHORT $LN3@IsUpKeyRel
$LN2@IsUpKeyRel:

; 1488 : 			return false;

  0001c	32 c0		 xor	 al, al
  0001e	5e		 pop	 esi

; 1496 : }

  0001f	c3		 ret	 0
$LN3@IsUpKeyRel:

; 1489 : 
; 1490 : 		if( g_Input.GetKeyState( m_Keys.m_wUpKey ) == KEY_RELEASE ||
; 1491 : 			g_Input.GetKeyState( m_SecondKeys.m_wUpKey) == KEY_RELEASE ||
; 1492 : 			g_Input.GetKeyState( m_JoyKeys.m_wUpKey) == KEY_RELEASE )

  00020	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00025	66 8b 56 12	 mov	 dx, WORD PTR [esi+18]
  00029	8b c8		 mov	 ecx, eax
  0002b	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00030	66 83 f8 01	 cmp	 ax, 1
  00034	74 2c		 je	 SHORT $LN1@IsUpKeyRel
  00036	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003b	66 8b 56 30	 mov	 dx, WORD PTR [esi+48]
  0003f	8b c8		 mov	 ecx, eax
  00041	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00046	66 83 f8 01	 cmp	 ax, 1
  0004a	74 16		 je	 SHORT $LN1@IsUpKeyRel
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00051	66 8b 56 4e	 mov	 dx, WORD PTR [esi+78]
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0005c	66 83 f8 01	 cmp	 ax, 1
$LN11@IsUpKeyRel:

; 1494 : 	}
; 1495 : 	return false;

  00060	75 ba		 jne	 SHORT $LN2@IsUpKeyRel
$LN1@IsUpKeyRel:

; 1493 : 			return true;

  00062	b0 01		 mov	 al, 1
  00064	5e		 pop	 esi

; 1496 : }

  00065	c3		 ret	 0
?IsUpKeyRelease@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsUpKeyRelease
_TEXT	ENDS
PUBLIC	?IsDownKeyPress@ioUserKeyInput@@QBE_NXZ		; ioUserKeyInput::IsDownKeyPress
; Function compile flags: /Ogsp
;	COMDAT ?IsDownKeyPress@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsDownKeyPress@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsDownKeyPress, COMDAT
; _this$ = ecx

; 1499 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1500 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 0b		 je	 SHORT $LN6@IsDownKeyP

; 1501 : 	{
; 1502 : 		if( m_AIKeys.m_wDownKey == KEY_PRESS )

  0000c	66 83 7e 6e 02	 cmp	 WORD PTR [esi+110], 2
  00011	75 0d		 jne	 SHORT $LN2@IsDownKeyP

; 1503 : 			return true;

  00013	b0 01		 mov	 al, 1
  00015	5e		 pop	 esi

; 1516 : }

  00016	c3		 ret	 0
$LN6@IsDownKeyP:

; 1504 : 	}
; 1505 : 	else
; 1506 : 	{
; 1507 : 		if( !CDirectInput::GetSingletonPtr() )

  00017	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  0001e	75 04		 jne	 SHORT $LN3@IsDownKeyP
$LN2@IsDownKeyP:

; 1508 : 			return false;

  00020	32 c0		 xor	 al, al
  00022	5e		 pop	 esi

; 1516 : }

  00023	c3		 ret	 0
$LN3@IsDownKeyP:

; 1509 : 
; 1510 : 		if( g_Input.IsKeyPress( m_Keys.m_wDownKey ) ||
; 1511 : 			g_Input.IsKeyPress( m_SecondKeys.m_wDownKey) ||
; 1512 : 			g_Input.IsKeyPress( m_JoyKeys.m_wDownKey) )

  00024	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00029	66 8b 56 14	 mov	 dx, WORD PTR [esi+20]
  0002d	8b c8		 mov	 ecx, eax
  0002f	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00034	84 c0		 test	 al, al
  00036	75 28		 jne	 SHORT $LN1@IsDownKeyP
  00038	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003d	66 8b 56 32	 mov	 dx, WORD PTR [esi+50]
  00041	8b c8		 mov	 ecx, eax
  00043	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00048	84 c0		 test	 al, al
  0004a	75 14		 jne	 SHORT $LN1@IsDownKeyP
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00051	66 8b 56 50	 mov	 dx, WORD PTR [esi+80]
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  0005c	84 c0		 test	 al, al

; 1514 : 	}
; 1515 : 	return false;

  0005e	74 c0		 je	 SHORT $LN2@IsDownKeyP
$LN1@IsDownKeyP:

; 1513 : 			return IsKeyDownException();

  00060	8b ce		 mov	 ecx, esi
  00062	5e		 pop	 esi
  00063	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsDownKeyPress@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsDownKeyPress
_TEXT	ENDS
PUBLIC	?IsDownKeyDown@ioUserKeyInput@@QBE_NXZ		; ioUserKeyInput::IsDownKeyDown
; Function compile flags: /Ogsp
;	COMDAT ?IsDownKeyDown@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsDownKeyDown@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsDownKeyDown, COMDAT
; _this$ = ecx

; 1519 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1520 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 12		 je	 SHORT $LN7@IsDownKeyD

; 1521 : 	{
; 1522 : 		if( m_AIKeys.m_wDownKey == KEY_REPEAT || m_AIKeys.m_wDownKey == KEY_PRESS )

  0000c	0f b7 46 6e	 movzx	 eax, WORD PTR [esi+110]
  00010	83 f8 03	 cmp	 eax, 3
  00013	74 05		 je	 SHORT $LN5@IsDownKeyD
  00015	83 f8 02	 cmp	 eax, 2
  00018	75 0d		 jne	 SHORT $LN2@IsDownKeyD
$LN5@IsDownKeyD:

; 1523 : 			return true;

  0001a	b0 01		 mov	 al, 1
  0001c	5e		 pop	 esi

; 1536 : }

  0001d	c3		 ret	 0
$LN7@IsDownKeyD:

; 1524 : 	}
; 1525 : 	else
; 1526 : 	{
; 1527 : 		if( !CDirectInput::GetSingletonPtr() )

  0001e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  00025	75 04		 jne	 SHORT $LN3@IsDownKeyD
$LN2@IsDownKeyD:

; 1528 : 			return false;

  00027	32 c0		 xor	 al, al
  00029	5e		 pop	 esi

; 1536 : }

  0002a	c3		 ret	 0
$LN3@IsDownKeyD:

; 1529 : 
; 1530 : 		if( g_Input.IsKeyDown( m_Keys.m_wDownKey ) ||
; 1531 : 			g_Input.IsKeyDown( m_SecondKeys.m_wDownKey) ||
; 1532 : 			g_Input.IsKeyDown( m_JoyKeys.m_wDownKey) )

  0002b	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00030	66 8b 56 14	 mov	 dx, WORD PTR [esi+20]
  00034	8b c8		 mov	 ecx, eax
  00036	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0003b	84 c0		 test	 al, al
  0003d	75 28		 jne	 SHORT $LN1@IsDownKeyD
  0003f	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00044	66 8b 56 32	 mov	 dx, WORD PTR [esi+50]
  00048	8b c8		 mov	 ecx, eax
  0004a	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0004f	84 c0		 test	 al, al
  00051	75 14		 jne	 SHORT $LN1@IsDownKeyD
  00053	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00058	66 8b 56 50	 mov	 dx, WORD PTR [esi+80]
  0005c	8b c8		 mov	 ecx, eax
  0005e	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  00063	84 c0		 test	 al, al

; 1534 : 	}
; 1535 : 	return false;

  00065	74 c0		 je	 SHORT $LN2@IsDownKeyD
$LN1@IsDownKeyD:

; 1533 : 			return IsKeyDownException();

  00067	8b ce		 mov	 ecx, esi
  00069	5e		 pop	 esi
  0006a	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsDownKeyDown@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsDownKeyDown
_TEXT	ENDS
PUBLIC	?IsDownKeyRelease@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsDownKeyRelease
; Function compile flags: /Ogsp
;	COMDAT ?IsDownKeyRelease@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsDownKeyRelease@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsDownKeyRelease, COMDAT
; _this$ = ecx

; 1539 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1540 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 07		 je	 SHORT $LN6@IsDownKeyR

; 1541 : 	{
; 1542 : 		if( m_AIKeys.m_wDownKey == KEY_RELEASE )

  0000c	66 83 7e 6e 01	 cmp	 WORD PTR [esi+110], 1

; 1543 : 			return true;

  00011	eb 4d		 jmp	 SHORT $LN11@IsDownKeyR
$LN6@IsDownKeyR:

; 1544 : 	}
; 1545 : 	else
; 1546 : 	{
; 1547 : 		if( !CDirectInput::GetSingletonPtr() )

  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  0001a	75 04		 jne	 SHORT $LN3@IsDownKeyR
$LN2@IsDownKeyR:

; 1548 : 			return false;

  0001c	32 c0		 xor	 al, al
  0001e	5e		 pop	 esi

; 1556 : }

  0001f	c3		 ret	 0
$LN3@IsDownKeyR:

; 1549 : 
; 1550 : 		if( g_Input.GetKeyState( m_Keys.m_wDownKey ) == KEY_RELEASE ||
; 1551 : 			g_Input.GetKeyState( m_SecondKeys.m_wDownKey) == KEY_RELEASE ||
; 1552 : 			g_Input.GetKeyState( m_JoyKeys.m_wDownKey) == KEY_RELEASE )

  00020	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00025	66 8b 56 14	 mov	 dx, WORD PTR [esi+20]
  00029	8b c8		 mov	 ecx, eax
  0002b	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00030	66 83 f8 01	 cmp	 ax, 1
  00034	74 2c		 je	 SHORT $LN1@IsDownKeyR
  00036	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003b	66 8b 56 32	 mov	 dx, WORD PTR [esi+50]
  0003f	8b c8		 mov	 ecx, eax
  00041	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00046	66 83 f8 01	 cmp	 ax, 1
  0004a	74 16		 je	 SHORT $LN1@IsDownKeyR
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00051	66 8b 56 50	 mov	 dx, WORD PTR [esi+80]
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0005c	66 83 f8 01	 cmp	 ax, 1
$LN11@IsDownKeyR:

; 1554 : 	}
; 1555 : 	return false;

  00060	75 ba		 jne	 SHORT $LN2@IsDownKeyR
$LN1@IsDownKeyR:

; 1553 : 			return true;

  00062	b0 01		 mov	 al, 1
  00064	5e		 pop	 esi

; 1556 : }

  00065	c3		 ret	 0
?IsDownKeyRelease@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsDownKeyRelease
_TEXT	ENDS
PUBLIC	?IsLeftUpKeyPress@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsLeftUpKeyPress
; Function compile flags: /Ogsp
;	COMDAT ?IsLeftUpKeyPress@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsLeftUpKeyPress@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsLeftUpKeyPress, COMDAT
; _this$ = ecx

; 1559 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1560 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 0b		 je	 SHORT $LN6@IsLeftUpKe

; 1561 : 	{
; 1562 : 		if( m_AIKeys.m_wLeftUpKey == KEY_PRESS )

  0000c	66 83 7e 70 02	 cmp	 WORD PTR [esi+112], 2
  00011	75 0d		 jne	 SHORT $LN2@IsLeftUpKe

; 1563 : 			return true;

  00013	b0 01		 mov	 al, 1
  00015	5e		 pop	 esi

; 1579 : }

  00016	c3		 ret	 0
$LN6@IsLeftUpKe:

; 1564 : 	}
; 1565 : 	else
; 1566 : 	{
; 1567 : 		if( !CDirectInput::GetSingletonPtr() )

  00017	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  0001e	75 04		 jne	 SHORT $LN3@IsLeftUpKe
$LN2@IsLeftUpKe:

; 1568 : 			return false;

  00020	32 c0		 xor	 al, al
  00022	5e		 pop	 esi

; 1579 : }

  00023	c3		 ret	 0
$LN3@IsLeftUpKe:

; 1569 : 
; 1570 : 		if( g_Input.IsKeyPress( m_Keys.m_wLeftUpKey ) ||
; 1571 : 			g_Input.IsKeyPress( m_SecondKeys.m_wLeftUpKey) ||
; 1572 : 			g_Input.IsKeyPress( m_JoyKeys.m_wLeftUpKey) )

  00024	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00029	66 8b 56 16	 mov	 dx, WORD PTR [esi+22]
  0002d	8b c8		 mov	 ecx, eax
  0002f	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00034	84 c0		 test	 al, al
  00036	75 28		 jne	 SHORT $LN1@IsLeftUpKe
  00038	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003d	66 8b 56 34	 mov	 dx, WORD PTR [esi+52]
  00041	8b c8		 mov	 ecx, eax
  00043	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00048	84 c0		 test	 al, al
  0004a	75 14		 jne	 SHORT $LN1@IsLeftUpKe
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00051	66 8b 56 52	 mov	 dx, WORD PTR [esi+82]
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  0005c	84 c0		 test	 al, al

; 1575 : 		}
; 1576 : 	}
; 1577 : 
; 1578 : 	return false;

  0005e	74 c0		 je	 SHORT $LN2@IsLeftUpKe
$LN1@IsLeftUpKe:

; 1573 : 		{
; 1574 : 			return IsKeyDownException();

  00060	8b ce		 mov	 ecx, esi
  00062	5e		 pop	 esi
  00063	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsLeftUpKeyPress@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsLeftUpKeyPress
_TEXT	ENDS
PUBLIC	?IsLeftUpKeyDown@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsLeftUpKeyDown
; Function compile flags: /Ogsp
;	COMDAT ?IsLeftUpKeyDown@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsLeftUpKeyDown@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsLeftUpKeyDown, COMDAT
; _this$ = ecx

; 1582 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1583 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 12		 je	 SHORT $LN7@IsLeftUpKe@2

; 1584 : 	{
; 1585 : 		if( m_AIKeys.m_wLeftUpKey == KEY_REPEAT || m_AIKeys.m_wLeftUpKey == KEY_PRESS )

  0000c	0f b7 46 70	 movzx	 eax, WORD PTR [esi+112]
  00010	83 f8 03	 cmp	 eax, 3
  00013	74 05		 je	 SHORT $LN5@IsLeftUpKe@2
  00015	83 f8 02	 cmp	 eax, 2
  00018	75 0d		 jne	 SHORT $LN2@IsLeftUpKe@2
$LN5@IsLeftUpKe@2:

; 1586 : 			return true;

  0001a	b0 01		 mov	 al, 1
  0001c	5e		 pop	 esi

; 1599 : }

  0001d	c3		 ret	 0
$LN7@IsLeftUpKe@2:

; 1587 : 	}
; 1588 : 	else
; 1589 : 	{
; 1590 : 		if( !CDirectInput::GetSingletonPtr() )

  0001e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  00025	75 04		 jne	 SHORT $LN3@IsLeftUpKe@2
$LN2@IsLeftUpKe@2:

; 1591 : 			return false;

  00027	32 c0		 xor	 al, al
  00029	5e		 pop	 esi

; 1599 : }

  0002a	c3		 ret	 0
$LN3@IsLeftUpKe@2:

; 1592 : 
; 1593 : 		if( g_Input.IsKeyDown( m_Keys.m_wLeftUpKey ) ||
; 1594 : 			g_Input.IsKeyDown( m_SecondKeys.m_wLeftUpKey) ||
; 1595 : 			g_Input.IsKeyDown( m_JoyKeys.m_wLeftUpKey) )

  0002b	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00030	66 8b 56 16	 mov	 dx, WORD PTR [esi+22]
  00034	8b c8		 mov	 ecx, eax
  00036	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0003b	84 c0		 test	 al, al
  0003d	75 28		 jne	 SHORT $LN1@IsLeftUpKe@2
  0003f	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00044	66 8b 56 34	 mov	 dx, WORD PTR [esi+52]
  00048	8b c8		 mov	 ecx, eax
  0004a	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0004f	84 c0		 test	 al, al
  00051	75 14		 jne	 SHORT $LN1@IsLeftUpKe@2
  00053	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00058	66 8b 56 52	 mov	 dx, WORD PTR [esi+82]
  0005c	8b c8		 mov	 ecx, eax
  0005e	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  00063	84 c0		 test	 al, al

; 1597 : 	}
; 1598 : 	return false;

  00065	74 c0		 je	 SHORT $LN2@IsLeftUpKe@2
$LN1@IsLeftUpKe@2:

; 1596 : 			return IsKeyDownException();

  00067	8b ce		 mov	 ecx, esi
  00069	5e		 pop	 esi
  0006a	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsLeftUpKeyDown@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsLeftUpKeyDown
_TEXT	ENDS
PUBLIC	?IsLeftUpKeyRelease@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsLeftUpKeyRelease
; Function compile flags: /Ogsp
;	COMDAT ?IsLeftUpKeyRelease@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsLeftUpKeyRelease@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsLeftUpKeyRelease, COMDAT
; _this$ = ecx

; 1602 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1603 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 07		 je	 SHORT $LN6@IsLeftUpKe@3

; 1604 : 	{
; 1605 : 		if( m_AIKeys.m_wLeftUpKey == KEY_RELEASE )

  0000c	66 83 7e 70 01	 cmp	 WORD PTR [esi+112], 1

; 1606 : 			return true;

  00011	eb 4d		 jmp	 SHORT $LN11@IsLeftUpKe@3
$LN6@IsLeftUpKe@3:

; 1607 : 	}
; 1608 : 	else
; 1609 : 	{
; 1610 : 		if( !CDirectInput::GetSingletonPtr() )

  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  0001a	75 04		 jne	 SHORT $LN3@IsLeftUpKe@3
$LN2@IsLeftUpKe@3:

; 1611 : 			return false;

  0001c	32 c0		 xor	 al, al
  0001e	5e		 pop	 esi

; 1619 : }

  0001f	c3		 ret	 0
$LN3@IsLeftUpKe@3:

; 1612 : 
; 1613 : 		if( g_Input.GetKeyState( m_Keys.m_wLeftUpKey ) == KEY_RELEASE ||
; 1614 : 			g_Input.GetKeyState( m_SecondKeys.m_wLeftUpKey) == KEY_RELEASE ||
; 1615 : 			g_Input.GetKeyState( m_JoyKeys.m_wLeftUpKey) == KEY_RELEASE )

  00020	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00025	66 8b 56 16	 mov	 dx, WORD PTR [esi+22]
  00029	8b c8		 mov	 ecx, eax
  0002b	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00030	66 83 f8 01	 cmp	 ax, 1
  00034	74 2c		 je	 SHORT $LN1@IsLeftUpKe@3
  00036	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003b	66 8b 56 34	 mov	 dx, WORD PTR [esi+52]
  0003f	8b c8		 mov	 ecx, eax
  00041	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00046	66 83 f8 01	 cmp	 ax, 1
  0004a	74 16		 je	 SHORT $LN1@IsLeftUpKe@3
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00051	66 8b 56 52	 mov	 dx, WORD PTR [esi+82]
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0005c	66 83 f8 01	 cmp	 ax, 1
$LN11@IsLeftUpKe@3:

; 1617 : 	}
; 1618 : 	return false;

  00060	75 ba		 jne	 SHORT $LN2@IsLeftUpKe@3
$LN1@IsLeftUpKe@3:

; 1616 : 			return true;

  00062	b0 01		 mov	 al, 1
  00064	5e		 pop	 esi

; 1619 : }

  00065	c3		 ret	 0
?IsLeftUpKeyRelease@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsLeftUpKeyRelease
_TEXT	ENDS
PUBLIC	?IsLeftDownKeyPress@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsLeftDownKeyPress
; Function compile flags: /Ogsp
;	COMDAT ?IsLeftDownKeyPress@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsLeftDownKeyPress@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsLeftDownKeyPress, COMDAT
; _this$ = ecx

; 1622 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1623 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 0b		 je	 SHORT $LN6@IsLeftDown

; 1624 : 	{
; 1625 : 		if( m_AIKeys.m_wLeftDownKey == KEY_PRESS )

  0000c	66 83 7e 72 02	 cmp	 WORD PTR [esi+114], 2
  00011	75 0d		 jne	 SHORT $LN2@IsLeftDown

; 1626 : 			return true;

  00013	b0 01		 mov	 al, 1
  00015	5e		 pop	 esi

; 1639 : }

  00016	c3		 ret	 0
$LN6@IsLeftDown:

; 1627 : 	}
; 1628 : 	else
; 1629 : 	{
; 1630 : 		if( !CDirectInput::GetSingletonPtr() )

  00017	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  0001e	75 04		 jne	 SHORT $LN3@IsLeftDown
$LN2@IsLeftDown:

; 1631 : 			return false;

  00020	32 c0		 xor	 al, al
  00022	5e		 pop	 esi

; 1639 : }

  00023	c3		 ret	 0
$LN3@IsLeftDown:

; 1632 : 
; 1633 : 		if( g_Input.IsKeyPress( m_Keys.m_wLeftDownKey ) ||
; 1634 : 			g_Input.IsKeyPress( m_SecondKeys.m_wLeftDownKey) ||
; 1635 : 			g_Input.IsKeyPress( m_JoyKeys.m_wLeftDownKey) )

  00024	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00029	66 8b 56 18	 mov	 dx, WORD PTR [esi+24]
  0002d	8b c8		 mov	 ecx, eax
  0002f	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00034	84 c0		 test	 al, al
  00036	75 28		 jne	 SHORT $LN1@IsLeftDown
  00038	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003d	66 8b 56 36	 mov	 dx, WORD PTR [esi+54]
  00041	8b c8		 mov	 ecx, eax
  00043	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00048	84 c0		 test	 al, al
  0004a	75 14		 jne	 SHORT $LN1@IsLeftDown
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00051	66 8b 56 54	 mov	 dx, WORD PTR [esi+84]
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  0005c	84 c0		 test	 al, al

; 1637 : 	}
; 1638 : 	return false;

  0005e	74 c0		 je	 SHORT $LN2@IsLeftDown
$LN1@IsLeftDown:

; 1636 : 			return IsKeyDownException();

  00060	8b ce		 mov	 ecx, esi
  00062	5e		 pop	 esi
  00063	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsLeftDownKeyPress@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsLeftDownKeyPress
_TEXT	ENDS
PUBLIC	?IsLeftDownKeyDown@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsLeftDownKeyDown
; Function compile flags: /Ogsp
;	COMDAT ?IsLeftDownKeyDown@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsLeftDownKeyDown@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsLeftDownKeyDown, COMDAT
; _this$ = ecx

; 1642 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1643 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 12		 je	 SHORT $LN7@IsLeftDown@2

; 1644 : 	{
; 1645 : 		if( m_AIKeys.m_wLeftDownKey == KEY_REPEAT || m_AIKeys.m_wLeftDownKey == KEY_PRESS )

  0000c	0f b7 46 72	 movzx	 eax, WORD PTR [esi+114]
  00010	83 f8 03	 cmp	 eax, 3
  00013	74 05		 je	 SHORT $LN5@IsLeftDown@2
  00015	83 f8 02	 cmp	 eax, 2
  00018	75 0d		 jne	 SHORT $LN2@IsLeftDown@2
$LN5@IsLeftDown@2:

; 1646 : 			return true;	

  0001a	b0 01		 mov	 al, 1
  0001c	5e		 pop	 esi

; 1659 : }

  0001d	c3		 ret	 0
$LN7@IsLeftDown@2:

; 1647 : 	}
; 1648 : 	else
; 1649 : 	{
; 1650 : 		if( !CDirectInput::GetSingletonPtr() )

  0001e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  00025	75 04		 jne	 SHORT $LN3@IsLeftDown@2
$LN2@IsLeftDown@2:

; 1651 : 			return false;

  00027	32 c0		 xor	 al, al
  00029	5e		 pop	 esi

; 1659 : }

  0002a	c3		 ret	 0
$LN3@IsLeftDown@2:

; 1652 : 
; 1653 : 		if( g_Input.IsKeyDown( m_Keys.m_wLeftDownKey ) ||
; 1654 : 			g_Input.IsKeyDown( m_SecondKeys.m_wLeftDownKey) ||
; 1655 : 			g_Input.IsKeyDown( m_JoyKeys.m_wLeftDownKey) )

  0002b	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00030	66 8b 56 18	 mov	 dx, WORD PTR [esi+24]
  00034	8b c8		 mov	 ecx, eax
  00036	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0003b	84 c0		 test	 al, al
  0003d	75 28		 jne	 SHORT $LN1@IsLeftDown@2
  0003f	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00044	66 8b 56 36	 mov	 dx, WORD PTR [esi+54]
  00048	8b c8		 mov	 ecx, eax
  0004a	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0004f	84 c0		 test	 al, al
  00051	75 14		 jne	 SHORT $LN1@IsLeftDown@2
  00053	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00058	66 8b 56 54	 mov	 dx, WORD PTR [esi+84]
  0005c	8b c8		 mov	 ecx, eax
  0005e	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  00063	84 c0		 test	 al, al

; 1657 : 	}
; 1658 : 	return false;

  00065	74 c0		 je	 SHORT $LN2@IsLeftDown@2
$LN1@IsLeftDown@2:

; 1656 : 			return IsKeyDownException();

  00067	8b ce		 mov	 ecx, esi
  00069	5e		 pop	 esi
  0006a	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsLeftDownKeyDown@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsLeftDownKeyDown
_TEXT	ENDS
PUBLIC	?IsLeftDownKeyRelease@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsLeftDownKeyRelease
; Function compile flags: /Ogsp
;	COMDAT ?IsLeftDownKeyRelease@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsLeftDownKeyRelease@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsLeftDownKeyRelease, COMDAT
; _this$ = ecx

; 1662 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1663 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 07		 je	 SHORT $LN6@IsLeftDown@3

; 1664 : 	{
; 1665 : 		if( m_AIKeys.m_wLeftDownKey == KEY_RELEASE )

  0000c	66 83 7e 72 01	 cmp	 WORD PTR [esi+114], 1

; 1666 : 			return true;	

  00011	eb 4d		 jmp	 SHORT $LN11@IsLeftDown@3
$LN6@IsLeftDown@3:

; 1667 : 	}
; 1668 : 	else
; 1669 : 	{
; 1670 : 		if( !CDirectInput::GetSingletonPtr() )

  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  0001a	75 04		 jne	 SHORT $LN3@IsLeftDown@3
$LN2@IsLeftDown@3:

; 1671 : 			return false;

  0001c	32 c0		 xor	 al, al
  0001e	5e		 pop	 esi

; 1679 : }

  0001f	c3		 ret	 0
$LN3@IsLeftDown@3:

; 1672 : 
; 1673 : 		if( g_Input.GetKeyState( m_Keys.m_wLeftDownKey ) == KEY_RELEASE ||
; 1674 : 			g_Input.GetKeyState( m_SecondKeys.m_wLeftDownKey) == KEY_RELEASE ||
; 1675 : 			g_Input.GetKeyState( m_JoyKeys.m_wLeftDownKey) == KEY_RELEASE )

  00020	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00025	66 8b 56 18	 mov	 dx, WORD PTR [esi+24]
  00029	8b c8		 mov	 ecx, eax
  0002b	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00030	66 83 f8 01	 cmp	 ax, 1
  00034	74 2c		 je	 SHORT $LN1@IsLeftDown@3
  00036	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003b	66 8b 56 36	 mov	 dx, WORD PTR [esi+54]
  0003f	8b c8		 mov	 ecx, eax
  00041	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00046	66 83 f8 01	 cmp	 ax, 1
  0004a	74 16		 je	 SHORT $LN1@IsLeftDown@3
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00051	66 8b 56 54	 mov	 dx, WORD PTR [esi+84]
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0005c	66 83 f8 01	 cmp	 ax, 1
$LN11@IsLeftDown@3:

; 1677 : 	}
; 1678 : 	return false;

  00060	75 ba		 jne	 SHORT $LN2@IsLeftDown@3
$LN1@IsLeftDown@3:

; 1676 : 			return true;

  00062	b0 01		 mov	 al, 1
  00064	5e		 pop	 esi

; 1679 : }

  00065	c3		 ret	 0
?IsLeftDownKeyRelease@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsLeftDownKeyRelease
_TEXT	ENDS
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx

; 121  : 		{	// assign an iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 122  : 		if (_Myproxy != _Right._Myproxy)

  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	39 10		 cmp	 DWORD PTR [eax], edx
  0000c	74 0a		 je	 SHORT $LN4@operator@2

; 123  : 			_Adopt(_Right._Myproxy->_Mycont);

  0000e	8b 12		 mov	 edx, DWORD PTR [edx]
  00010	85 d2		 test	 edx, edx
  00012	74 04		 je	 SHORT $LN4@operator@2
  00014	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00016	89 08		 mov	 DWORD PTR [eax], ecx
$LN4@operator@2:

; 124  : 		return (*this);
; 125  : 		}

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
_TEXT	ENDS
PUBLIC	?IsRightUpKeyPress@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsRightUpKeyPress
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iouserkeyinput.cpp
;	COMDAT ?IsRightUpKeyPress@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsRightUpKeyPress@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsRightUpKeyPress, COMDAT
; _this$ = ecx

; 1682 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1683 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 0b		 je	 SHORT $LN6@IsRightUpK

; 1684 : 	{
; 1685 : 		if( m_AIKeys.m_wRightUpKey == KEY_PRESS )

  0000c	66 83 7e 74 02	 cmp	 WORD PTR [esi+116], 2
  00011	75 0d		 jne	 SHORT $LN2@IsRightUpK

; 1686 : 			return true;

  00013	b0 01		 mov	 al, 1
  00015	5e		 pop	 esi

; 1699 : }

  00016	c3		 ret	 0
$LN6@IsRightUpK:

; 1687 : 	}
; 1688 : 	else
; 1689 : 	{
; 1690 : 		if( !CDirectInput::GetSingletonPtr() )

  00017	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  0001e	75 04		 jne	 SHORT $LN3@IsRightUpK
$LN2@IsRightUpK:

; 1691 : 			return false;

  00020	32 c0		 xor	 al, al
  00022	5e		 pop	 esi

; 1699 : }

  00023	c3		 ret	 0
$LN3@IsRightUpK:

; 1692 : 
; 1693 : 		if( g_Input.IsKeyPress( m_Keys.m_wRightUpKey ) ||
; 1694 : 			g_Input.IsKeyPress( m_SecondKeys.m_wRightUpKey) ||
; 1695 : 			g_Input.IsKeyPress( m_JoyKeys.m_wRightUpKey) )

  00024	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00029	66 8b 56 1a	 mov	 dx, WORD PTR [esi+26]
  0002d	8b c8		 mov	 ecx, eax
  0002f	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00034	84 c0		 test	 al, al
  00036	75 28		 jne	 SHORT $LN1@IsRightUpK
  00038	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003d	66 8b 56 38	 mov	 dx, WORD PTR [esi+56]
  00041	8b c8		 mov	 ecx, eax
  00043	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00048	84 c0		 test	 al, al
  0004a	75 14		 jne	 SHORT $LN1@IsRightUpK
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00051	66 8b 56 56	 mov	 dx, WORD PTR [esi+86]
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  0005c	84 c0		 test	 al, al

; 1697 : 	}
; 1698 : 	return false;

  0005e	74 c0		 je	 SHORT $LN2@IsRightUpK
$LN1@IsRightUpK:

; 1696 : 			return IsKeyDownException();

  00060	8b ce		 mov	 ecx, esi
  00062	5e		 pop	 esi
  00063	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsRightUpKeyPress@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsRightUpKeyPress
_TEXT	ENDS
PUBLIC	?IsRightUpKeyDown@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsRightUpKeyDown
; Function compile flags: /Ogsp
;	COMDAT ?IsRightUpKeyDown@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsRightUpKeyDown@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsRightUpKeyDown, COMDAT
; _this$ = ecx

; 1702 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1703 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 12		 je	 SHORT $LN7@IsRightUpK@2

; 1704 : 	{
; 1705 : 		if( m_AIKeys.m_wRightUpKey == KEY_REPEAT || m_AIKeys.m_wRightUpKey == KEY_PRESS )

  0000c	0f b7 46 74	 movzx	 eax, WORD PTR [esi+116]
  00010	83 f8 03	 cmp	 eax, 3
  00013	74 05		 je	 SHORT $LN5@IsRightUpK@2
  00015	83 f8 02	 cmp	 eax, 2
  00018	75 0d		 jne	 SHORT $LN2@IsRightUpK@2
$LN5@IsRightUpK@2:

; 1706 : 			return true;

  0001a	b0 01		 mov	 al, 1
  0001c	5e		 pop	 esi

; 1719 : }

  0001d	c3		 ret	 0
$LN7@IsRightUpK@2:

; 1707 : 	}
; 1708 : 	else
; 1709 : 	{
; 1710 : 		if( !CDirectInput::GetSingletonPtr() )

  0001e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  00025	75 04		 jne	 SHORT $LN3@IsRightUpK@2
$LN2@IsRightUpK@2:

; 1711 : 			return false;

  00027	32 c0		 xor	 al, al
  00029	5e		 pop	 esi

; 1719 : }

  0002a	c3		 ret	 0
$LN3@IsRightUpK@2:

; 1712 : 
; 1713 : 		if( g_Input.IsKeyDown( m_Keys.m_wRightUpKey ) ||
; 1714 : 			g_Input.IsKeyDown( m_SecondKeys.m_wRightUpKey) ||
; 1715 : 			g_Input.IsKeyDown( m_JoyKeys.m_wRightUpKey) )

  0002b	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00030	66 8b 56 1a	 mov	 dx, WORD PTR [esi+26]
  00034	8b c8		 mov	 ecx, eax
  00036	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0003b	84 c0		 test	 al, al
  0003d	75 28		 jne	 SHORT $LN1@IsRightUpK@2
  0003f	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00044	66 8b 56 38	 mov	 dx, WORD PTR [esi+56]
  00048	8b c8		 mov	 ecx, eax
  0004a	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0004f	84 c0		 test	 al, al
  00051	75 14		 jne	 SHORT $LN1@IsRightUpK@2
  00053	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00058	66 8b 56 56	 mov	 dx, WORD PTR [esi+86]
  0005c	8b c8		 mov	 ecx, eax
  0005e	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  00063	84 c0		 test	 al, al

; 1717 : 	}
; 1718 : 	return false;

  00065	74 c0		 je	 SHORT $LN2@IsRightUpK@2
$LN1@IsRightUpK@2:

; 1716 : 			return IsKeyDownException();

  00067	8b ce		 mov	 ecx, esi
  00069	5e		 pop	 esi
  0006a	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsRightUpKeyDown@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsRightUpKeyDown
_TEXT	ENDS
PUBLIC	?IsRightUpKeyRelease@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsRightUpKeyRelease
; Function compile flags: /Ogsp
;	COMDAT ?IsRightUpKeyRelease@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsRightUpKeyRelease@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsRightUpKeyRelease, COMDAT
; _this$ = ecx

; 1722 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1723 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 07		 je	 SHORT $LN6@IsRightUpK@3

; 1724 : 	{
; 1725 : 		if( m_AIKeys.m_wRightUpKey == KEY_RELEASE )

  0000c	66 83 7e 74 01	 cmp	 WORD PTR [esi+116], 1

; 1726 : 			return true;	

  00011	eb 4d		 jmp	 SHORT $LN11@IsRightUpK@3
$LN6@IsRightUpK@3:

; 1727 : 	}
; 1728 : 	else
; 1729 : 	{
; 1730 : 		if( !CDirectInput::GetSingletonPtr() )

  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  0001a	75 04		 jne	 SHORT $LN3@IsRightUpK@3
$LN2@IsRightUpK@3:

; 1731 : 			return false;

  0001c	32 c0		 xor	 al, al
  0001e	5e		 pop	 esi

; 1739 : }

  0001f	c3		 ret	 0
$LN3@IsRightUpK@3:

; 1732 : 
; 1733 : 		if( g_Input.GetKeyState( m_Keys.m_wRightUpKey ) == KEY_RELEASE ||
; 1734 : 			g_Input.GetKeyState( m_SecondKeys.m_wRightUpKey) == KEY_RELEASE ||
; 1735 : 			g_Input.GetKeyState( m_JoyKeys.m_wRightUpKey) == KEY_RELEASE )

  00020	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00025	66 8b 56 1a	 mov	 dx, WORD PTR [esi+26]
  00029	8b c8		 mov	 ecx, eax
  0002b	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00030	66 83 f8 01	 cmp	 ax, 1
  00034	74 2c		 je	 SHORT $LN1@IsRightUpK@3
  00036	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003b	66 8b 56 38	 mov	 dx, WORD PTR [esi+56]
  0003f	8b c8		 mov	 ecx, eax
  00041	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00046	66 83 f8 01	 cmp	 ax, 1
  0004a	74 16		 je	 SHORT $LN1@IsRightUpK@3
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00051	66 8b 56 56	 mov	 dx, WORD PTR [esi+86]
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0005c	66 83 f8 01	 cmp	 ax, 1
$LN11@IsRightUpK@3:

; 1737 : 	}
; 1738 : 	return false;

  00060	75 ba		 jne	 SHORT $LN2@IsRightUpK@3
$LN1@IsRightUpK@3:

; 1736 : 			return true;

  00062	b0 01		 mov	 al, 1
  00064	5e		 pop	 esi

; 1739 : }

  00065	c3		 ret	 0
?IsRightUpKeyRelease@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsRightUpKeyRelease
_TEXT	ENDS
PUBLIC	?IsRightDownKeyPress@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsRightDownKeyPress
; Function compile flags: /Ogsp
;	COMDAT ?IsRightDownKeyPress@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsRightDownKeyPress@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsRightDownKeyPress, COMDAT
; _this$ = ecx

; 1742 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1743 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 0b		 je	 SHORT $LN6@IsRightDow

; 1744 : 	{
; 1745 : 		if( m_AIKeys.m_wRightDownKey == KEY_PRESS )

  0000c	66 83 7e 76 02	 cmp	 WORD PTR [esi+118], 2
  00011	75 0d		 jne	 SHORT $LN2@IsRightDow

; 1746 : 			return true;	

  00013	b0 01		 mov	 al, 1
  00015	5e		 pop	 esi

; 1759 : }

  00016	c3		 ret	 0
$LN6@IsRightDow:

; 1747 : 	}
; 1748 : 	else
; 1749 : 	{
; 1750 : 		if( !CDirectInput::GetSingletonPtr() )

  00017	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  0001e	75 04		 jne	 SHORT $LN3@IsRightDow
$LN2@IsRightDow:

; 1751 : 			return false;

  00020	32 c0		 xor	 al, al
  00022	5e		 pop	 esi

; 1759 : }

  00023	c3		 ret	 0
$LN3@IsRightDow:

; 1752 : 
; 1753 : 		if( g_Input.IsKeyPress( m_Keys.m_wRightDownKey ) ||
; 1754 : 			g_Input.IsKeyPress( m_SecondKeys.m_wRightDownKey) ||
; 1755 : 			g_Input.IsKeyPress( m_JoyKeys.m_wRightDownKey) )

  00024	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00029	66 8b 56 1c	 mov	 dx, WORD PTR [esi+28]
  0002d	8b c8		 mov	 ecx, eax
  0002f	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00034	84 c0		 test	 al, al
  00036	75 28		 jne	 SHORT $LN1@IsRightDow
  00038	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003d	66 8b 56 3a	 mov	 dx, WORD PTR [esi+58]
  00041	8b c8		 mov	 ecx, eax
  00043	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00048	84 c0		 test	 al, al
  0004a	75 14		 jne	 SHORT $LN1@IsRightDow
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00051	66 8b 56 58	 mov	 dx, WORD PTR [esi+88]
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  0005c	84 c0		 test	 al, al

; 1757 : 	}
; 1758 : 	return false;

  0005e	74 c0		 je	 SHORT $LN2@IsRightDow
$LN1@IsRightDow:

; 1756 : 			return IsKeyDownException();

  00060	8b ce		 mov	 ecx, esi
  00062	5e		 pop	 esi
  00063	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsRightDownKeyPress@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsRightDownKeyPress
_TEXT	ENDS
PUBLIC	?IsRightDownKeyDown@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsRightDownKeyDown
; Function compile flags: /Ogsp
;	COMDAT ?IsRightDownKeyDown@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsRightDownKeyDown@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsRightDownKeyDown, COMDAT
; _this$ = ecx

; 1762 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1763 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 12		 je	 SHORT $LN7@IsRightDow@2

; 1764 : 	{
; 1765 : 		if( m_AIKeys.m_wRightDownKey == KEY_REPEAT || m_AIKeys.m_wRightDownKey == KEY_PRESS )

  0000c	0f b7 46 76	 movzx	 eax, WORD PTR [esi+118]
  00010	83 f8 03	 cmp	 eax, 3
  00013	74 05		 je	 SHORT $LN5@IsRightDow@2
  00015	83 f8 02	 cmp	 eax, 2
  00018	75 0d		 jne	 SHORT $LN2@IsRightDow@2
$LN5@IsRightDow@2:

; 1766 : 			return true;

  0001a	b0 01		 mov	 al, 1
  0001c	5e		 pop	 esi

; 1779 : }

  0001d	c3		 ret	 0
$LN7@IsRightDow@2:

; 1767 : 	}
; 1768 : 	else
; 1769 : 	{
; 1770 : 		if( !CDirectInput::GetSingletonPtr() )

  0001e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  00025	75 04		 jne	 SHORT $LN3@IsRightDow@2
$LN2@IsRightDow@2:

; 1771 : 			return false;

  00027	32 c0		 xor	 al, al
  00029	5e		 pop	 esi

; 1779 : }

  0002a	c3		 ret	 0
$LN3@IsRightDow@2:

; 1772 : 
; 1773 : 		if( g_Input.IsKeyDown( m_Keys.m_wRightDownKey ) ||
; 1774 : 			g_Input.IsKeyDown( m_SecondKeys.m_wRightDownKey) ||
; 1775 : 			g_Input.IsKeyDown( m_JoyKeys.m_wRightDownKey) )

  0002b	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00030	66 8b 56 1c	 mov	 dx, WORD PTR [esi+28]
  00034	8b c8		 mov	 ecx, eax
  00036	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0003b	84 c0		 test	 al, al
  0003d	75 28		 jne	 SHORT $LN1@IsRightDow@2
  0003f	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00044	66 8b 56 3a	 mov	 dx, WORD PTR [esi+58]
  00048	8b c8		 mov	 ecx, eax
  0004a	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0004f	84 c0		 test	 al, al
  00051	75 14		 jne	 SHORT $LN1@IsRightDow@2
  00053	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00058	66 8b 56 58	 mov	 dx, WORD PTR [esi+88]
  0005c	8b c8		 mov	 ecx, eax
  0005e	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  00063	84 c0		 test	 al, al

; 1777 : 	}
; 1778 : 	return false;

  00065	74 c0		 je	 SHORT $LN2@IsRightDow@2
$LN1@IsRightDow@2:

; 1776 : 			return IsKeyDownException();

  00067	8b ce		 mov	 ecx, esi
  00069	5e		 pop	 esi
  0006a	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsRightDownKeyDown@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsRightDownKeyDown
_TEXT	ENDS
PUBLIC	?IsRightDownKeyRelease@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsRightDownKeyRelease
; Function compile flags: /Ogsp
;	COMDAT ?IsRightDownKeyRelease@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsRightDownKeyRelease@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsRightDownKeyRelease, COMDAT
; _this$ = ecx

; 1782 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1783 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 07		 je	 SHORT $LN6@IsRightDow@3

; 1784 : 	{
; 1785 : 		if( m_AIKeys.m_wRightDownKey == KEY_RELEASE )

  0000c	66 83 7e 76 01	 cmp	 WORD PTR [esi+118], 1

; 1786 : 			return true;

  00011	eb 4d		 jmp	 SHORT $LN11@IsRightDow@3
$LN6@IsRightDow@3:

; 1787 : 	}
; 1788 : 	else
; 1789 : 	{
; 1790 : 		if( !CDirectInput::GetSingletonPtr() )

  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  0001a	75 04		 jne	 SHORT $LN3@IsRightDow@3
$LN2@IsRightDow@3:

; 1791 : 			return false;

  0001c	32 c0		 xor	 al, al
  0001e	5e		 pop	 esi

; 1799 : }

  0001f	c3		 ret	 0
$LN3@IsRightDow@3:

; 1792 : 
; 1793 : 		if( g_Input.GetKeyState( m_Keys.m_wRightDownKey ) == KEY_RELEASE ||
; 1794 : 			g_Input.GetKeyState( m_SecondKeys.m_wRightDownKey) == KEY_RELEASE ||
; 1795 : 			g_Input.GetKeyState( m_JoyKeys.m_wRightDownKey) == KEY_RELEASE )

  00020	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00025	66 8b 56 1c	 mov	 dx, WORD PTR [esi+28]
  00029	8b c8		 mov	 ecx, eax
  0002b	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00030	66 83 f8 01	 cmp	 ax, 1
  00034	74 2c		 je	 SHORT $LN1@IsRightDow@3
  00036	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003b	66 8b 56 3a	 mov	 dx, WORD PTR [esi+58]
  0003f	8b c8		 mov	 ecx, eax
  00041	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00046	66 83 f8 01	 cmp	 ax, 1
  0004a	74 16		 je	 SHORT $LN1@IsRightDow@3
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00051	66 8b 56 58	 mov	 dx, WORD PTR [esi+88]
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0005c	66 83 f8 01	 cmp	 ax, 1
$LN11@IsRightDow@3:

; 1797 : 	}
; 1798 : 	return false;

  00060	75 ba		 jne	 SHORT $LN2@IsRightDow@3
$LN1@IsRightDow@3:

; 1796 : 			return true;

  00062	b0 01		 mov	 al, 1
  00064	5e		 pop	 esi

; 1799 : }

  00065	c3		 ret	 0
?IsRightDownKeyRelease@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsRightDownKeyRelease
_TEXT	ENDS
PUBLIC	?IsDefenseKeyPress@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsDefenseKeyPress
; Function compile flags: /Ogsp
;	COMDAT ?IsDefenseKeyPress@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsDefenseKeyPress@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsDefenseKeyPress, COMDAT
; _this$ = ecx

; 1802 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1803 : 	if( m_bInputProcessAI )

  00003	33 c0		 xor	 eax, eax
  00005	38 86 4b 01 00
	00		 cmp	 BYTE PTR [esi+331], al
  0000b	74 0b		 je	 SHORT $LN7@IsDefenseK

; 1804 : 	{
; 1805 : 		if( m_AIKeys.m_wDefenseKey == KEY_PRESS )

  0000d	66 83 7e 78 02	 cmp	 WORD PTR [esi+120], 2
  00012	75 0c		 jne	 SHORT $LN14@IsDefenseK

; 1806 : 			return true;

  00014	b0 01		 mov	 al, 1
  00016	5e		 pop	 esi

; 1821 : }

  00017	c3		 ret	 0
$LN7@IsDefenseK:

; 1807 : 	}
; 1808 : 	else	
; 1809 : 	{
; 1810 : 		if( !m_bEnableKeyInput ) return false;

  00018	38 86 3c 01 00
	00		 cmp	 BYTE PTR [esi+316], al
  0001e	75 04		 jne	 SHORT $LN4@IsDefenseK
$LN14@IsDefenseK:
  00020	32 c0		 xor	 al, al
  00022	5e		 pop	 esi

; 1821 : }

  00023	c3		 ret	 0
$LN4@IsDefenseK:

; 1811 : 
; 1812 : 		if( !CDirectInput::GetSingletonPtr() )

  00024	39 05 00 00 00
	00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, eax ; Singleton<CDirectInput>::ms_Singleton

; 1813 : 			return false;

  0002a	74 f4		 je	 SHORT $LN14@IsDefenseK

; 1814 : 
; 1815 : 		if( g_Input.IsKeyPress( m_Keys.m_wDefenseKey ) ||
; 1816 : 			g_Input.IsKeyPress( m_SecondKeys.m_wDefenseKey ) ||
; 1817 : 			g_Input.IsKeyPress( m_JoyKeys.m_wDefenseKey ) )

  0002c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00031	66 8b 56 1e	 mov	 dx, WORD PTR [esi+30]
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  0003c	84 c0		 test	 al, al
  0003e	75 28		 jne	 SHORT $LN1@IsDefenseK
  00040	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00045	66 8b 56 3c	 mov	 dx, WORD PTR [esi+60]
  00049	8b c8		 mov	 ecx, eax
  0004b	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00050	84 c0		 test	 al, al
  00052	75 14		 jne	 SHORT $LN1@IsDefenseK
  00054	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00059	66 8b 56 5a	 mov	 dx, WORD PTR [esi+90]
  0005d	8b c8		 mov	 ecx, eax
  0005f	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00064	84 c0		 test	 al, al

; 1819 : 	}
; 1820 : 	return false;

  00066	74 b8		 je	 SHORT $LN14@IsDefenseK
$LN1@IsDefenseK:

; 1818 : 			return IsKeyDownException();

  00068	8b ce		 mov	 ecx, esi
  0006a	5e		 pop	 esi
  0006b	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsDefenseKeyPress@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsDefenseKeyPress
_TEXT	ENDS
PUBLIC	?IsDefenseKeyDown@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsDefenseKeyDown
; Function compile flags: /Ogsp
;	COMDAT ?IsDefenseKeyDown@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsDefenseKeyDown@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsDefenseKeyDown, COMDAT
; _this$ = ecx

; 1824 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1825 : 	if( m_bInputProcessAI )

  00003	33 c0		 xor	 eax, eax
  00005	38 86 4b 01 00
	00		 cmp	 BYTE PTR [esi+331], al
  0000b	74 12		 je	 SHORT $LN8@IsDefenseK@2

; 1826 : 	{
; 1827 : 		if( m_AIKeys.m_wDefenseKey == KEY_REPEAT || m_AIKeys.m_wDefenseKey == KEY_PRESS )

  0000d	0f b7 46 78	 movzx	 eax, WORD PTR [esi+120]
  00011	83 f8 03	 cmp	 eax, 3
  00014	74 05		 je	 SHORT $LN6@IsDefenseK@2
  00016	83 f8 02	 cmp	 eax, 2
  00019	75 0c		 jne	 SHORT $LN15@IsDefenseK@2
$LN6@IsDefenseK@2:

; 1828 : 			return true;

  0001b	b0 01		 mov	 al, 1
  0001d	5e		 pop	 esi

; 1843 : }

  0001e	c3		 ret	 0
$LN8@IsDefenseK@2:

; 1829 : 	}
; 1830 : 	else
; 1831 : 	{
; 1832 : 		if( !m_bEnableKeyInput ) return false;

  0001f	38 86 3c 01 00
	00		 cmp	 BYTE PTR [esi+316], al
  00025	75 04		 jne	 SHORT $LN4@IsDefenseK@2
$LN15@IsDefenseK@2:
  00027	32 c0		 xor	 al, al
  00029	5e		 pop	 esi

; 1843 : }

  0002a	c3		 ret	 0
$LN4@IsDefenseK@2:

; 1833 : 
; 1834 : 		if( !CDirectInput::GetSingletonPtr() )

  0002b	39 05 00 00 00
	00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, eax ; Singleton<CDirectInput>::ms_Singleton

; 1835 : 			return false;

  00031	74 f4		 je	 SHORT $LN15@IsDefenseK@2

; 1836 : 
; 1837 : 		if( g_Input.IsKeyDown( m_Keys.m_wDefenseKey ) ||
; 1838 : 			g_Input.IsKeyDown( m_SecondKeys.m_wDefenseKey ) ||
; 1839 : 			g_Input.IsKeyDown( m_JoyKeys.m_wDefenseKey ) )

  00033	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00038	66 8b 56 1e	 mov	 dx, WORD PTR [esi+30]
  0003c	8b c8		 mov	 ecx, eax
  0003e	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  00043	84 c0		 test	 al, al
  00045	75 28		 jne	 SHORT $LN1@IsDefenseK@2
  00047	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0004c	66 8b 56 3c	 mov	 dx, WORD PTR [esi+60]
  00050	8b c8		 mov	 ecx, eax
  00052	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  00057	84 c0		 test	 al, al
  00059	75 14		 jne	 SHORT $LN1@IsDefenseK@2
  0005b	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00060	66 8b 56 5a	 mov	 dx, WORD PTR [esi+90]
  00064	8b c8		 mov	 ecx, eax
  00066	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0006b	84 c0		 test	 al, al

; 1841 : 	}
; 1842 : 	return false;

  0006d	74 b8		 je	 SHORT $LN15@IsDefenseK@2
$LN1@IsDefenseK@2:

; 1840 : 			return IsKeyDownException();

  0006f	8b ce		 mov	 ecx, esi
  00071	5e		 pop	 esi
  00072	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsDefenseKeyDown@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsDefenseKeyDown
_TEXT	ENDS
PUBLIC	?IsDefenseKeyRelease@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsDefenseKeyRelease
; Function compile flags: /Ogsp
;	COMDAT ?IsDefenseKeyRelease@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsDefenseKeyRelease@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsDefenseKeyRelease, COMDAT
; _this$ = ecx

; 1846 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1847 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 07		 je	 SHORT $LN6@IsDefenseK@3

; 1848 : 	{
; 1849 : 		if( m_AIKeys.m_wDefenseKey == KEY_RELEASE )

  0000c	66 83 7e 78 01	 cmp	 WORD PTR [esi+120], 1

; 1850 : 			return true;	

  00011	eb 4d		 jmp	 SHORT $LN11@IsDefenseK@3
$LN6@IsDefenseK@3:

; 1851 : 	}
; 1852 : 	else
; 1853 : 	{
; 1854 : 		if( !CDirectInput::GetSingletonPtr() )

  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  0001a	75 04		 jne	 SHORT $LN3@IsDefenseK@3
$LN2@IsDefenseK@3:

; 1855 : 			return false;

  0001c	32 c0		 xor	 al, al
  0001e	5e		 pop	 esi

; 1863 : }

  0001f	c3		 ret	 0
$LN3@IsDefenseK@3:

; 1856 : 
; 1857 : 		if( g_Input.GetKeyState( m_Keys.m_wDefenseKey ) == KEY_RELEASE ||
; 1858 : 			g_Input.GetKeyState( m_SecondKeys.m_wDefenseKey ) == KEY_RELEASE ||
; 1859 : 			g_Input.GetKeyState( m_JoyKeys.m_wDefenseKey ) == KEY_RELEASE )

  00020	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00025	66 8b 56 1e	 mov	 dx, WORD PTR [esi+30]
  00029	8b c8		 mov	 ecx, eax
  0002b	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00030	66 83 f8 01	 cmp	 ax, 1
  00034	74 2c		 je	 SHORT $LN1@IsDefenseK@3
  00036	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003b	66 8b 56 3c	 mov	 dx, WORD PTR [esi+60]
  0003f	8b c8		 mov	 ecx, eax
  00041	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00046	66 83 f8 01	 cmp	 ax, 1
  0004a	74 16		 je	 SHORT $LN1@IsDefenseK@3
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00051	66 8b 56 5a	 mov	 dx, WORD PTR [esi+90]
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0005c	66 83 f8 01	 cmp	 ax, 1
$LN11@IsDefenseK@3:

; 1861 : 	}
; 1862 : 	return false;

  00060	75 ba		 jne	 SHORT $LN2@IsDefenseK@3
$LN1@IsDefenseK@3:

; 1860 : 			return true;

  00062	b0 01		 mov	 al, 1
  00064	5e		 pop	 esi

; 1863 : }

  00065	c3		 ret	 0
?IsDefenseKeyRelease@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsDefenseKeyRelease
_TEXT	ENDS
PUBLIC	?IsDefenseKeyNone@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsDefenseKeyNone
; Function compile flags: /Ogsp
;	COMDAT ?IsDefenseKeyNone@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsDefenseKeyNone@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsDefenseKeyNone, COMDAT
; _this$ = ecx

; 1866 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1867 : 	if( m_bInputProcessAI )

  00003	33 c0		 xor	 eax, eax
  00005	38 86 4b 01 00
	00		 cmp	 BYTE PTR [esi+331], al
  0000b	74 0a		 je	 SHORT $LN5@IsDefenseK@4

; 1868 : 	{
; 1869 : 		if( m_AIKeys.m_wDefenseKey == KEY_NONE )

  0000d	66 39 46 78	 cmp	 WORD PTR [esi+120], ax
$LN10@IsDefenseK@4:
  00011	75 4b		 jne	 SHORT $LN1@IsDefenseK@4

; 1870 : 			return true;

  00013	b0 01		 mov	 al, 1
  00015	5e		 pop	 esi

; 1883 : }

  00016	c3		 ret	 0
$LN5@IsDefenseK@4:

; 1871 : 	}
; 1872 : 	else
; 1873 : 	{
; 1874 : 		if( !CDirectInput::GetSingletonPtr() )

  00017	39 05 00 00 00
	00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, eax ; Singleton<CDirectInput>::ms_Singleton

; 1875 : 			return false;

  0001d	74 3f		 je	 SHORT $LN1@IsDefenseK@4

; 1876 : 
; 1877 : 		if( g_Input.GetKeyState( m_Keys.m_wDefenseKey ) == KEY_NONE &&
; 1878 : 			g_Input.GetKeyState( m_SecondKeys.m_wDefenseKey ) == KEY_NONE &&
; 1879 : 			g_Input.GetKeyState( m_JoyKeys.m_wDefenseKey ) == KEY_NONE )

  0001f	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00024	66 8b 56 1e	 mov	 dx, WORD PTR [esi+30]
  00028	8b c8		 mov	 ecx, eax
  0002a	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0002f	66 85 c0	 test	 ax, ax
  00032	75 2a		 jne	 SHORT $LN1@IsDefenseK@4
  00034	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00039	66 8b 56 3c	 mov	 dx, WORD PTR [esi+60]
  0003d	8b c8		 mov	 ecx, eax
  0003f	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00044	66 85 c0	 test	 ax, ax
  00047	75 15		 jne	 SHORT $LN1@IsDefenseK@4
  00049	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0004e	66 8b 56 5a	 mov	 dx, WORD PTR [esi+90]
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00059	66 85 c0	 test	 ax, ax

; 1880 : 			return true;

  0005c	eb b3		 jmp	 SHORT $LN10@IsDefenseK@4
$LN1@IsDefenseK@4:

; 1881 : 	}
; 1882 : 	return false;

  0005e	32 c0		 xor	 al, al
  00060	5e		 pop	 esi

; 1883 : }

  00061	c3		 ret	 0
?IsDefenseKeyNone@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsDefenseKeyNone
_TEXT	ENDS
PUBLIC	?IsJumpKeyPress@ioUserKeyInput@@QBE_NXZ		; ioUserKeyInput::IsJumpKeyPress
; Function compile flags: /Ogsp
;	COMDAT ?IsJumpKeyPress@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsJumpKeyPress@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsJumpKeyPress, COMDAT
; _this$ = ecx

; 1887 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1888 : 	if( m_bInputProcessAI )

  00003	33 c0		 xor	 eax, eax
  00005	38 86 4b 01 00
	00		 cmp	 BYTE PTR [esi+331], al
  0000b	74 0b		 je	 SHORT $LN7@IsJumpKeyP

; 1889 : 	{
; 1890 : 		if( m_AIKeys.m_wJumpKey == KEY_PRESS )

  0000d	66 83 7e 7a 02	 cmp	 WORD PTR [esi+122], 2
  00012	75 0c		 jne	 SHORT $LN14@IsJumpKeyP

; 1891 : 			return true;

  00014	b0 01		 mov	 al, 1
  00016	5e		 pop	 esi

; 1906 : }

  00017	c3		 ret	 0
$LN7@IsJumpKeyP:

; 1892 : 	}
; 1893 : 	else
; 1894 : 	{
; 1895 : 		if( !m_bEnableKeyInput ) return false;

  00018	38 86 3c 01 00
	00		 cmp	 BYTE PTR [esi+316], al
  0001e	75 04		 jne	 SHORT $LN4@IsJumpKeyP
$LN14@IsJumpKeyP:
  00020	32 c0		 xor	 al, al
  00022	5e		 pop	 esi

; 1906 : }

  00023	c3		 ret	 0
$LN4@IsJumpKeyP:

; 1896 : 
; 1897 : 		if( !CDirectInput::GetSingletonPtr() )

  00024	39 05 00 00 00
	00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, eax ; Singleton<CDirectInput>::ms_Singleton

; 1898 : 			return false;

  0002a	74 f4		 je	 SHORT $LN14@IsJumpKeyP

; 1899 : 
; 1900 : 		if( g_Input.IsKeyPress( m_Keys.m_wJumpKey ) ||
; 1901 : 			g_Input.IsKeyPress( m_SecondKeys.m_wJumpKey ) ||
; 1902 : 			g_Input.IsKeyPress( m_JoyKeys.m_wJumpKey ) )

  0002c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00031	66 8b 56 20	 mov	 dx, WORD PTR [esi+32]
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  0003c	84 c0		 test	 al, al
  0003e	75 28		 jne	 SHORT $LN1@IsJumpKeyP
  00040	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00045	66 8b 56 3e	 mov	 dx, WORD PTR [esi+62]
  00049	8b c8		 mov	 ecx, eax
  0004b	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00050	84 c0		 test	 al, al
  00052	75 14		 jne	 SHORT $LN1@IsJumpKeyP
  00054	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00059	66 8b 56 5c	 mov	 dx, WORD PTR [esi+92]
  0005d	8b c8		 mov	 ecx, eax
  0005f	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00064	84 c0		 test	 al, al

; 1904 : 	}
; 1905 : 	return false;

  00066	74 b8		 je	 SHORT $LN14@IsJumpKeyP
$LN1@IsJumpKeyP:

; 1903 : 			return IsKeyDownException();

  00068	8b ce		 mov	 ecx, esi
  0006a	5e		 pop	 esi
  0006b	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsJumpKeyPress@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsJumpKeyPress
_TEXT	ENDS
PUBLIC	?IsJumpKeyDown@ioUserKeyInput@@QBE_NXZ		; ioUserKeyInput::IsJumpKeyDown
; Function compile flags: /Ogsp
;	COMDAT ?IsJumpKeyDown@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsJumpKeyDown@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsJumpKeyDown, COMDAT
; _this$ = ecx

; 1909 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1910 : 	if( m_bInputProcessAI )

  00003	33 c0		 xor	 eax, eax
  00005	38 86 4b 01 00
	00		 cmp	 BYTE PTR [esi+331], al
  0000b	74 12		 je	 SHORT $LN8@IsJumpKeyD

; 1911 : 	{
; 1912 : 		if( m_AIKeys.m_wJumpKey == KEY_REPEAT || m_AIKeys.m_wJumpKey == KEY_PRESS )

  0000d	0f b7 46 7a	 movzx	 eax, WORD PTR [esi+122]
  00011	83 f8 03	 cmp	 eax, 3
  00014	74 05		 je	 SHORT $LN6@IsJumpKeyD
  00016	83 f8 02	 cmp	 eax, 2
  00019	75 0c		 jne	 SHORT $LN15@IsJumpKeyD
$LN6@IsJumpKeyD:

; 1913 : 			return true;

  0001b	b0 01		 mov	 al, 1
  0001d	5e		 pop	 esi

; 1928 : }

  0001e	c3		 ret	 0
$LN8@IsJumpKeyD:

; 1914 : 	}
; 1915 : 	else	
; 1916 : 	{
; 1917 : 		if( !m_bEnableKeyInput ) return false;

  0001f	38 86 3c 01 00
	00		 cmp	 BYTE PTR [esi+316], al
  00025	75 04		 jne	 SHORT $LN4@IsJumpKeyD
$LN15@IsJumpKeyD:
  00027	32 c0		 xor	 al, al
  00029	5e		 pop	 esi

; 1928 : }

  0002a	c3		 ret	 0
$LN4@IsJumpKeyD:

; 1918 : 
; 1919 : 		if( !CDirectInput::GetSingletonPtr() )

  0002b	39 05 00 00 00
	00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, eax ; Singleton<CDirectInput>::ms_Singleton

; 1920 : 			return false;

  00031	74 f4		 je	 SHORT $LN15@IsJumpKeyD

; 1921 : 
; 1922 : 		if( g_Input.IsKeyDown( m_Keys.m_wJumpKey ) ||
; 1923 : 			g_Input.IsKeyDown( m_SecondKeys.m_wJumpKey ) ||
; 1924 : 			g_Input.IsKeyDown( m_JoyKeys.m_wJumpKey ) )

  00033	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00038	66 8b 56 20	 mov	 dx, WORD PTR [esi+32]
  0003c	8b c8		 mov	 ecx, eax
  0003e	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  00043	84 c0		 test	 al, al
  00045	75 28		 jne	 SHORT $LN1@IsJumpKeyD
  00047	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0004c	66 8b 56 3e	 mov	 dx, WORD PTR [esi+62]
  00050	8b c8		 mov	 ecx, eax
  00052	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  00057	84 c0		 test	 al, al
  00059	75 14		 jne	 SHORT $LN1@IsJumpKeyD
  0005b	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00060	66 8b 56 5c	 mov	 dx, WORD PTR [esi+92]
  00064	8b c8		 mov	 ecx, eax
  00066	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0006b	84 c0		 test	 al, al

; 1926 : 	}
; 1927 : 	return false;

  0006d	74 b8		 je	 SHORT $LN15@IsJumpKeyD
$LN1@IsJumpKeyD:

; 1925 : 			return IsKeyDownException();

  0006f	8b ce		 mov	 ecx, esi
  00071	5e		 pop	 esi
  00072	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsJumpKeyDown@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsJumpKeyDown
_TEXT	ENDS
PUBLIC	?IsJumpKeyRelease@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsJumpKeyRelease
; Function compile flags: /Ogsp
;	COMDAT ?IsJumpKeyRelease@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsJumpKeyRelease@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsJumpKeyRelease, COMDAT
; _this$ = ecx

; 1931 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1932 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 07		 je	 SHORT $LN6@IsJumpKeyR

; 1933 : 	{
; 1934 : 		if( m_AIKeys.m_wJumpKey == KEY_RELEASE )

  0000c	66 83 7e 7a 01	 cmp	 WORD PTR [esi+122], 1

; 1935 : 			return true;	

  00011	eb 4d		 jmp	 SHORT $LN11@IsJumpKeyR
$LN6@IsJumpKeyR:

; 1936 : 	}
; 1937 : 	else
; 1938 : 	{
; 1939 : 		if( !CDirectInput::GetSingletonPtr() )

  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  0001a	75 04		 jne	 SHORT $LN3@IsJumpKeyR
$LN2@IsJumpKeyR:

; 1940 : 			return false;

  0001c	32 c0		 xor	 al, al
  0001e	5e		 pop	 esi

; 1948 : }

  0001f	c3		 ret	 0
$LN3@IsJumpKeyR:

; 1941 : 
; 1942 : 		if( g_Input.GetKeyState( m_Keys.m_wJumpKey ) == KEY_RELEASE ||
; 1943 : 			g_Input.GetKeyState( m_SecondKeys.m_wJumpKey ) == KEY_RELEASE ||
; 1944 : 			g_Input.GetKeyState( m_JoyKeys.m_wJumpKey ) == KEY_RELEASE )

  00020	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00025	66 8b 56 20	 mov	 dx, WORD PTR [esi+32]
  00029	8b c8		 mov	 ecx, eax
  0002b	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00030	66 83 f8 01	 cmp	 ax, 1
  00034	74 2c		 je	 SHORT $LN1@IsJumpKeyR
  00036	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003b	66 8b 56 3e	 mov	 dx, WORD PTR [esi+62]
  0003f	8b c8		 mov	 ecx, eax
  00041	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00046	66 83 f8 01	 cmp	 ax, 1
  0004a	74 16		 je	 SHORT $LN1@IsJumpKeyR
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00051	66 8b 56 5c	 mov	 dx, WORD PTR [esi+92]
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0005c	66 83 f8 01	 cmp	 ax, 1
$LN11@IsJumpKeyR:

; 1946 : 	}
; 1947 : 	return false;

  00060	75 ba		 jne	 SHORT $LN2@IsJumpKeyR
$LN1@IsJumpKeyR:

; 1945 : 			return true;

  00062	b0 01		 mov	 al, 1
  00064	5e		 pop	 esi

; 1948 : }

  00065	c3		 ret	 0
?IsJumpKeyRelease@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsJumpKeyRelease
_TEXT	ENDS
PUBLIC	?IsJumpKeyNone@ioUserKeyInput@@QBE_NXZ		; ioUserKeyInput::IsJumpKeyNone
; Function compile flags: /Ogsp
;	COMDAT ?IsJumpKeyNone@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsJumpKeyNone@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsJumpKeyNone, COMDAT
; _this$ = ecx

; 1951 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1952 : 	if( m_bInputProcessAI )

  00003	33 c0		 xor	 eax, eax
  00005	38 86 4b 01 00
	00		 cmp	 BYTE PTR [esi+331], al
  0000b	74 0a		 je	 SHORT $LN5@IsJumpKeyN

; 1953 : 	{
; 1954 : 		if( m_AIKeys.m_wJumpKey == KEY_NONE )

  0000d	66 39 46 7a	 cmp	 WORD PTR [esi+122], ax
$LN10@IsJumpKeyN:
  00011	75 4b		 jne	 SHORT $LN1@IsJumpKeyN

; 1955 : 			return true;

  00013	b0 01		 mov	 al, 1
  00015	5e		 pop	 esi

; 1969 : }

  00016	c3		 ret	 0
$LN5@IsJumpKeyN:

; 1956 : 	}
; 1957 : 	else
; 1958 : 	{
; 1959 : 		if( !CDirectInput::GetSingletonPtr() )

  00017	39 05 00 00 00
	00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, eax ; Singleton<CDirectInput>::ms_Singleton

; 1960 : 			return false;

  0001d	74 3f		 je	 SHORT $LN1@IsJumpKeyN

; 1961 : 
; 1962 : 		if( g_Input.GetKeyState( m_Keys.m_wJumpKey ) == KEY_NONE &&
; 1963 : 			g_Input.GetKeyState( m_SecondKeys.m_wJumpKey ) == KEY_NONE &&
; 1964 : 			g_Input.GetKeyState( m_JoyKeys.m_wJumpKey ) == KEY_NONE )

  0001f	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00024	66 8b 56 20	 mov	 dx, WORD PTR [esi+32]
  00028	8b c8		 mov	 ecx, eax
  0002a	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0002f	66 85 c0	 test	 ax, ax
  00032	75 2a		 jne	 SHORT $LN1@IsJumpKeyN
  00034	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00039	66 8b 56 3e	 mov	 dx, WORD PTR [esi+62]
  0003d	8b c8		 mov	 ecx, eax
  0003f	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00044	66 85 c0	 test	 ax, ax
  00047	75 15		 jne	 SHORT $LN1@IsJumpKeyN
  00049	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0004e	66 8b 56 5c	 mov	 dx, WORD PTR [esi+92]
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00059	66 85 c0	 test	 ax, ax

; 1965 : 			return true;

  0005c	eb b3		 jmp	 SHORT $LN10@IsJumpKeyN
$LN1@IsJumpKeyN:

; 1966 : 	}
; 1967 : 
; 1968 : 	return false;

  0005e	32 c0		 xor	 al, al
  00060	5e		 pop	 esi

; 1969 : }

  00061	c3		 ret	 0
?IsJumpKeyNone@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsJumpKeyNone
_TEXT	ENDS
PUBLIC	?IsAttackKeyPress@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsAttackKeyPress
; Function compile flags: /Ogsp
;	COMDAT ?IsAttackKeyPress@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsAttackKeyPress@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsAttackKeyPress, COMDAT
; _this$ = ecx

; 1972 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1973 : 	if( m_bInputProcessAI )

  00003	33 c0		 xor	 eax, eax
  00005	38 86 4b 01 00
	00		 cmp	 BYTE PTR [esi+331], al
  0000b	74 0b		 je	 SHORT $LN7@IsAttackKe

; 1974 : 	{
; 1975 : 		if( m_AIKeys.m_wAttackKey == KEY_PRESS )

  0000d	66 83 7e 7c 02	 cmp	 WORD PTR [esi+124], 2
  00012	75 0c		 jne	 SHORT $LN14@IsAttackKe

; 1976 : 			return true;

  00014	b0 01		 mov	 al, 1
  00016	5e		 pop	 esi

; 1991 : }

  00017	c3		 ret	 0
$LN7@IsAttackKe:

; 1977 : 	}
; 1978 : 	else
; 1979 : 	{
; 1980 : 		if( !m_bEnableKeyInput ) return false;

  00018	38 86 3c 01 00
	00		 cmp	 BYTE PTR [esi+316], al
  0001e	75 04		 jne	 SHORT $LN4@IsAttackKe
$LN14@IsAttackKe:
  00020	32 c0		 xor	 al, al
  00022	5e		 pop	 esi

; 1991 : }

  00023	c3		 ret	 0
$LN4@IsAttackKe:

; 1981 : 
; 1982 : 		if( !CDirectInput::GetSingletonPtr() )

  00024	39 05 00 00 00
	00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, eax ; Singleton<CDirectInput>::ms_Singleton

; 1983 : 			return false;

  0002a	74 f4		 je	 SHORT $LN14@IsAttackKe

; 1984 : 
; 1985 : 		if( g_Input.IsKeyPress( m_Keys.m_wAttackKey ) ||
; 1986 : 			g_Input.IsKeyPress( m_SecondKeys.m_wAttackKey ) ||
; 1987 : 			g_Input.IsKeyPress( m_JoyKeys.m_wAttackKey ) )

  0002c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00031	66 8b 56 22	 mov	 dx, WORD PTR [esi+34]
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  0003c	84 c0		 test	 al, al
  0003e	75 28		 jne	 SHORT $LN1@IsAttackKe
  00040	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00045	66 8b 56 40	 mov	 dx, WORD PTR [esi+64]
  00049	8b c8		 mov	 ecx, eax
  0004b	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00050	84 c0		 test	 al, al
  00052	75 14		 jne	 SHORT $LN1@IsAttackKe
  00054	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00059	66 8b 56 5e	 mov	 dx, WORD PTR [esi+94]
  0005d	8b c8		 mov	 ecx, eax
  0005f	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00064	84 c0		 test	 al, al

; 1989 : 	}
; 1990 : 	return false;

  00066	74 b8		 je	 SHORT $LN14@IsAttackKe
$LN1@IsAttackKe:

; 1988 : 			return IsKeyDownException();

  00068	8b ce		 mov	 ecx, esi
  0006a	5e		 pop	 esi
  0006b	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsAttackKeyPress@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsAttackKeyPress
_TEXT	ENDS
PUBLIC	?IsAttackKeyDown@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsAttackKeyDown
; Function compile flags: /Ogsp
;	COMDAT ?IsAttackKeyDown@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsAttackKeyDown@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsAttackKeyDown, COMDAT
; _this$ = ecx

; 1994 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1995 : 	if( m_bInputProcessAI )

  00003	33 c0		 xor	 eax, eax
  00005	38 86 4b 01 00
	00		 cmp	 BYTE PTR [esi+331], al
  0000b	74 12		 je	 SHORT $LN8@IsAttackKe@2

; 1996 : 	{
; 1997 : 		if( m_AIKeys.m_wAttackKey == KEY_REPEAT || m_AIKeys.m_wAttackKey == KEY_PRESS )

  0000d	0f b7 46 7c	 movzx	 eax, WORD PTR [esi+124]
  00011	83 f8 03	 cmp	 eax, 3
  00014	74 05		 je	 SHORT $LN6@IsAttackKe@2
  00016	83 f8 02	 cmp	 eax, 2
  00019	75 0c		 jne	 SHORT $LN15@IsAttackKe@2
$LN6@IsAttackKe@2:

; 1998 : 			return true;

  0001b	b0 01		 mov	 al, 1
  0001d	5e		 pop	 esi

; 2013 : }

  0001e	c3		 ret	 0
$LN8@IsAttackKe@2:

; 1999 : 	}
; 2000 : 	else	
; 2001 : 	{
; 2002 : 		if( !m_bEnableKeyInput ) return false;

  0001f	38 86 3c 01 00
	00		 cmp	 BYTE PTR [esi+316], al
  00025	75 04		 jne	 SHORT $LN4@IsAttackKe@2
$LN15@IsAttackKe@2:
  00027	32 c0		 xor	 al, al
  00029	5e		 pop	 esi

; 2013 : }

  0002a	c3		 ret	 0
$LN4@IsAttackKe@2:

; 2003 : 
; 2004 : 		if( !CDirectInput::GetSingletonPtr() )

  0002b	39 05 00 00 00
	00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, eax ; Singleton<CDirectInput>::ms_Singleton

; 2005 : 			return false;

  00031	74 f4		 je	 SHORT $LN15@IsAttackKe@2

; 2006 : 
; 2007 : 		if( g_Input.IsKeyDown( m_Keys.m_wAttackKey ) ||
; 2008 : 			g_Input.IsKeyDown( m_SecondKeys.m_wAttackKey ) ||
; 2009 : 			g_Input.IsKeyDown( m_JoyKeys.m_wAttackKey ) )

  00033	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00038	66 8b 56 22	 mov	 dx, WORD PTR [esi+34]
  0003c	8b c8		 mov	 ecx, eax
  0003e	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  00043	84 c0		 test	 al, al
  00045	75 28		 jne	 SHORT $LN1@IsAttackKe@2
  00047	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0004c	66 8b 56 40	 mov	 dx, WORD PTR [esi+64]
  00050	8b c8		 mov	 ecx, eax
  00052	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  00057	84 c0		 test	 al, al
  00059	75 14		 jne	 SHORT $LN1@IsAttackKe@2
  0005b	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00060	66 8b 56 5e	 mov	 dx, WORD PTR [esi+94]
  00064	8b c8		 mov	 ecx, eax
  00066	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0006b	84 c0		 test	 al, al

; 2011 : 	}
; 2012 : 	return false;

  0006d	74 b8		 je	 SHORT $LN15@IsAttackKe@2
$LN1@IsAttackKe@2:

; 2010 : 			return IsKeyDownException();

  0006f	8b ce		 mov	 ecx, esi
  00071	5e		 pop	 esi
  00072	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsAttackKeyDown@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsAttackKeyDown
_TEXT	ENDS
PUBLIC	?IsAttackKeyRelease@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsAttackKeyRelease
; Function compile flags: /Ogsp
;	COMDAT ?IsAttackKeyRelease@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsAttackKeyRelease@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsAttackKeyRelease, COMDAT
; _this$ = ecx

; 2016 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2017 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 07		 je	 SHORT $LN6@IsAttackKe@3

; 2018 : 	{
; 2019 : 		if( m_AIKeys.m_wAttackKey == KEY_RELEASE )

  0000c	66 83 7e 7c 01	 cmp	 WORD PTR [esi+124], 1

; 2020 : 			return true;

  00011	eb 4d		 jmp	 SHORT $LN11@IsAttackKe@3
$LN6@IsAttackKe@3:

; 2021 : 	}
; 2022 : 	else
; 2023 : 	{
; 2024 : 		if( !CDirectInput::GetSingletonPtr() )

  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  0001a	75 04		 jne	 SHORT $LN3@IsAttackKe@3
$LN2@IsAttackKe@3:

; 2025 : 			return false;

  0001c	32 c0		 xor	 al, al
  0001e	5e		 pop	 esi

; 2033 : }

  0001f	c3		 ret	 0
$LN3@IsAttackKe@3:

; 2026 : 
; 2027 : 		if( g_Input.GetKeyState( m_Keys.m_wAttackKey ) == KEY_RELEASE ||
; 2028 : 			g_Input.GetKeyState( m_SecondKeys.m_wAttackKey ) == KEY_RELEASE ||
; 2029 : 			g_Input.GetKeyState( m_JoyKeys.m_wAttackKey ) == KEY_RELEASE )

  00020	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00025	66 8b 56 22	 mov	 dx, WORD PTR [esi+34]
  00029	8b c8		 mov	 ecx, eax
  0002b	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00030	66 83 f8 01	 cmp	 ax, 1
  00034	74 2c		 je	 SHORT $LN1@IsAttackKe@3
  00036	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003b	66 8b 56 40	 mov	 dx, WORD PTR [esi+64]
  0003f	8b c8		 mov	 ecx, eax
  00041	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00046	66 83 f8 01	 cmp	 ax, 1
  0004a	74 16		 je	 SHORT $LN1@IsAttackKe@3
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00051	66 8b 56 5e	 mov	 dx, WORD PTR [esi+94]
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0005c	66 83 f8 01	 cmp	 ax, 1
$LN11@IsAttackKe@3:

; 2031 : 	}
; 2032 : 	return false;

  00060	75 ba		 jne	 SHORT $LN2@IsAttackKe@3
$LN1@IsAttackKe@3:

; 2030 : 			return true;

  00062	b0 01		 mov	 al, 1
  00064	5e		 pop	 esi

; 2033 : }

  00065	c3		 ret	 0
?IsAttackKeyRelease@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsAttackKeyRelease
_TEXT	ENDS
PUBLIC	?IsAttackKeyNone@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsAttackKeyNone
; Function compile flags: /Ogsp
;	COMDAT ?IsAttackKeyNone@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsAttackKeyNone@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsAttackKeyNone, COMDAT
; _this$ = ecx

; 2036 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2037 : 	if( m_bInputProcessAI )

  00003	33 c0		 xor	 eax, eax
  00005	38 86 4b 01 00
	00		 cmp	 BYTE PTR [esi+331], al
  0000b	74 0a		 je	 SHORT $LN5@IsAttackKe@4

; 2038 : 	{
; 2039 : 		if( m_AIKeys.m_wAttackKey == KEY_NONE )

  0000d	66 39 46 7c	 cmp	 WORD PTR [esi+124], ax
$LN10@IsAttackKe@4:
  00011	75 4b		 jne	 SHORT $LN1@IsAttackKe@4

; 2040 : 			return true;

  00013	b0 01		 mov	 al, 1
  00015	5e		 pop	 esi

; 2053 : }

  00016	c3		 ret	 0
$LN5@IsAttackKe@4:

; 2041 : 	}
; 2042 : 	else
; 2043 : 	{
; 2044 : 		if( !CDirectInput::GetSingletonPtr() )

  00017	39 05 00 00 00
	00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, eax ; Singleton<CDirectInput>::ms_Singleton

; 2045 : 			return false;

  0001d	74 3f		 je	 SHORT $LN1@IsAttackKe@4

; 2046 : 
; 2047 : 		if( g_Input.GetKeyState( m_Keys.m_wAttackKey ) == KEY_NONE &&
; 2048 : 			g_Input.GetKeyState( m_SecondKeys.m_wAttackKey ) == KEY_NONE &&
; 2049 : 			g_Input.GetKeyState( m_JoyKeys.m_wAttackKey ) == KEY_NONE )

  0001f	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00024	66 8b 56 22	 mov	 dx, WORD PTR [esi+34]
  00028	8b c8		 mov	 ecx, eax
  0002a	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0002f	66 85 c0	 test	 ax, ax
  00032	75 2a		 jne	 SHORT $LN1@IsAttackKe@4
  00034	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00039	66 8b 56 40	 mov	 dx, WORD PTR [esi+64]
  0003d	8b c8		 mov	 ecx, eax
  0003f	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00044	66 85 c0	 test	 ax, ax
  00047	75 15		 jne	 SHORT $LN1@IsAttackKe@4
  00049	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0004e	66 8b 56 5e	 mov	 dx, WORD PTR [esi+94]
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00059	66 85 c0	 test	 ax, ax

; 2050 : 			return true;

  0005c	eb b3		 jmp	 SHORT $LN10@IsAttackKe@4
$LN1@IsAttackKe@4:

; 2051 : 	}
; 2052 : 	return false;

  0005e	32 c0		 xor	 al, al
  00060	5e		 pop	 esi

; 2053 : }

  00061	c3		 ret	 0
?IsAttackKeyNone@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsAttackKeyNone
_TEXT	ENDS
PUBLIC	?IsWeaponSkillKeyPress@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsWeaponSkillKeyPress
; Function compile flags: /Ogsp
;	COMDAT ?IsWeaponSkillKeyPress@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsWeaponSkillKeyPress@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsWeaponSkillKeyPress, COMDAT
; _this$ = ecx

; 2056 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2057 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 0b		 je	 SHORT $LN6@IsWeaponSk

; 2058 : 	{
; 2059 : 		if( m_AIKeys.m_wWeaponSkillKey == KEY_PRESS )

  0000c	66 83 7e 7e 02	 cmp	 WORD PTR [esi+126], 2
  00011	75 0d		 jne	 SHORT $LN2@IsWeaponSk

; 2060 : 			return true;

  00013	b0 01		 mov	 al, 1
  00015	5e		 pop	 esi

; 2073 : }

  00016	c3		 ret	 0
$LN6@IsWeaponSk:

; 2061 : 	}	
; 2062 : 	else
; 2063 : 	{
; 2064 : 		if( !CDirectInput::GetSingletonPtr() )

  00017	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  0001e	75 04		 jne	 SHORT $LN3@IsWeaponSk
$LN2@IsWeaponSk:

; 2065 : 			return false;

  00020	32 c0		 xor	 al, al
  00022	5e		 pop	 esi

; 2073 : }

  00023	c3		 ret	 0
$LN3@IsWeaponSk:

; 2066 : 
; 2067 : 		if( g_Input.IsKeyPress( m_Keys.m_wWeaponSkillKey ) ||
; 2068 : 			g_Input.IsKeyPress( m_SecondKeys.m_wWeaponSkillKey) ||
; 2069 : 			g_Input.IsKeyPress( m_JoyKeys.m_wWeaponSkillKey) )

  00024	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00029	66 8b 56 24	 mov	 dx, WORD PTR [esi+36]
  0002d	8b c8		 mov	 ecx, eax
  0002f	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00034	84 c0		 test	 al, al
  00036	75 28		 jne	 SHORT $LN1@IsWeaponSk
  00038	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003d	66 8b 56 42	 mov	 dx, WORD PTR [esi+66]
  00041	8b c8		 mov	 ecx, eax
  00043	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00048	84 c0		 test	 al, al
  0004a	75 14		 jne	 SHORT $LN1@IsWeaponSk
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00051	66 8b 56 60	 mov	 dx, WORD PTR [esi+96]
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  0005c	84 c0		 test	 al, al

; 2071 : 	}
; 2072 : 	return false;

  0005e	74 c0		 je	 SHORT $LN2@IsWeaponSk
$LN1@IsWeaponSk:

; 2070 : 			return IsKeyDownException();

  00060	8b ce		 mov	 ecx, esi
  00062	5e		 pop	 esi
  00063	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsWeaponSkillKeyPress@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsWeaponSkillKeyPress
_TEXT	ENDS
PUBLIC	?IsWeaponSkillKeyDown@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsWeaponSkillKeyDown
; Function compile flags: /Ogsp
;	COMDAT ?IsWeaponSkillKeyDown@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsWeaponSkillKeyDown@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsWeaponSkillKeyDown, COMDAT
; _this$ = ecx

; 2076 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2077 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 12		 je	 SHORT $LN7@IsWeaponSk@2

; 2078 : 	{
; 2079 : 		if( m_AIKeys.m_wWeaponSkillKey == KEY_REPEAT || m_AIKeys.m_wWeaponSkillKey == KEY_PRESS )

  0000c	0f b7 46 7e	 movzx	 eax, WORD PTR [esi+126]
  00010	83 f8 03	 cmp	 eax, 3
  00013	74 05		 je	 SHORT $LN5@IsWeaponSk@2
  00015	83 f8 02	 cmp	 eax, 2
  00018	75 0d		 jne	 SHORT $LN2@IsWeaponSk@2
$LN5@IsWeaponSk@2:

; 2080 : 			return true;

  0001a	b0 01		 mov	 al, 1
  0001c	5e		 pop	 esi

; 2093 : }

  0001d	c3		 ret	 0
$LN7@IsWeaponSk@2:

; 2081 : 	}
; 2082 : 	else
; 2083 : 	{
; 2084 : 		if( !CDirectInput::GetSingletonPtr() )

  0001e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  00025	75 04		 jne	 SHORT $LN3@IsWeaponSk@2
$LN2@IsWeaponSk@2:

; 2085 : 			return false;

  00027	32 c0		 xor	 al, al
  00029	5e		 pop	 esi

; 2093 : }

  0002a	c3		 ret	 0
$LN3@IsWeaponSk@2:

; 2086 : 
; 2087 : 		if( g_Input.IsKeyDown( m_Keys.m_wWeaponSkillKey ) ||
; 2088 : 			g_Input.IsKeyDown( m_SecondKeys.m_wWeaponSkillKey ) ||
; 2089 : 			g_Input.IsKeyDown( m_JoyKeys.m_wWeaponSkillKey ) )

  0002b	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00030	66 8b 56 24	 mov	 dx, WORD PTR [esi+36]
  00034	8b c8		 mov	 ecx, eax
  00036	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0003b	84 c0		 test	 al, al
  0003d	75 28		 jne	 SHORT $LN1@IsWeaponSk@2
  0003f	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00044	66 8b 56 42	 mov	 dx, WORD PTR [esi+66]
  00048	8b c8		 mov	 ecx, eax
  0004a	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0004f	84 c0		 test	 al, al
  00051	75 14		 jne	 SHORT $LN1@IsWeaponSk@2
  00053	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00058	66 8b 56 60	 mov	 dx, WORD PTR [esi+96]
  0005c	8b c8		 mov	 ecx, eax
  0005e	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  00063	84 c0		 test	 al, al

; 2091 : 	}
; 2092 : 	return false;

  00065	74 c0		 je	 SHORT $LN2@IsWeaponSk@2
$LN1@IsWeaponSk@2:

; 2090 : 			return IsKeyDownException();

  00067	8b ce		 mov	 ecx, esi
  00069	5e		 pop	 esi
  0006a	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsWeaponSkillKeyDown@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsWeaponSkillKeyDown
_TEXT	ENDS
PUBLIC	?IsWeaponSkillKeyRelease@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsWeaponSkillKeyRelease
; Function compile flags: /Ogsp
;	COMDAT ?IsWeaponSkillKeyRelease@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsWeaponSkillKeyRelease@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsWeaponSkillKeyRelease, COMDAT
; _this$ = ecx

; 2096 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2097 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 07		 je	 SHORT $LN6@IsWeaponSk@3

; 2098 : 	{
; 2099 : 		if( m_AIKeys.m_wWeaponSkillKey == KEY_RELEASE )

  0000c	66 83 7e 7e 01	 cmp	 WORD PTR [esi+126], 1

; 2100 : 			return true;

  00011	eb 4d		 jmp	 SHORT $LN11@IsWeaponSk@3
$LN6@IsWeaponSk@3:

; 2101 : 	}
; 2102 : 	else
; 2103 : 	{
; 2104 : 		if( !CDirectInput::GetSingletonPtr() )

  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  0001a	75 04		 jne	 SHORT $LN3@IsWeaponSk@3
$LN2@IsWeaponSk@3:

; 2105 : 			return false;

  0001c	32 c0		 xor	 al, al
  0001e	5e		 pop	 esi

; 2113 : }

  0001f	c3		 ret	 0
$LN3@IsWeaponSk@3:

; 2106 : 
; 2107 : 		if( g_Input.GetKeyState( m_Keys.m_wWeaponSkillKey ) == KEY_RELEASE ||
; 2108 : 			g_Input.GetKeyState( m_SecondKeys.m_wWeaponSkillKey ) == KEY_RELEASE ||
; 2109 : 			g_Input.GetKeyState( m_JoyKeys.m_wWeaponSkillKey ) == KEY_RELEASE )

  00020	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00025	66 8b 56 24	 mov	 dx, WORD PTR [esi+36]
  00029	8b c8		 mov	 ecx, eax
  0002b	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00030	66 83 f8 01	 cmp	 ax, 1
  00034	74 2c		 je	 SHORT $LN1@IsWeaponSk@3
  00036	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003b	66 8b 56 42	 mov	 dx, WORD PTR [esi+66]
  0003f	8b c8		 mov	 ecx, eax
  00041	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00046	66 83 f8 01	 cmp	 ax, 1
  0004a	74 16		 je	 SHORT $LN1@IsWeaponSk@3
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00051	66 8b 56 60	 mov	 dx, WORD PTR [esi+96]
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0005c	66 83 f8 01	 cmp	 ax, 1
$LN11@IsWeaponSk@3:

; 2111 : 	}
; 2112 : 	return false;

  00060	75 ba		 jne	 SHORT $LN2@IsWeaponSk@3
$LN1@IsWeaponSk@3:

; 2110 : 			return true;

  00062	b0 01		 mov	 al, 1
  00064	5e		 pop	 esi

; 2113 : }

  00065	c3		 ret	 0
?IsWeaponSkillKeyRelease@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsWeaponSkillKeyRelease
_TEXT	ENDS
PUBLIC	?IsWeaponSkillKeyNone@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsWeaponSkillKeyNone
; Function compile flags: /Ogsp
;	COMDAT ?IsWeaponSkillKeyNone@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsWeaponSkillKeyNone@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsWeaponSkillKeyNone, COMDAT
; _this$ = ecx

; 2116 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2117 : 	if( m_bInputProcessAI )

  00003	33 c0		 xor	 eax, eax
  00005	38 86 4b 01 00
	00		 cmp	 BYTE PTR [esi+331], al
  0000b	74 06		 je	 SHORT $LN6@IsWeaponSk@4

; 2118 : 	{
; 2119 : 		if( m_AIKeys.m_wWeaponSkillKey == KEY_NONE )

  0000d	66 39 46 7e	 cmp	 WORD PTR [esi+126], ax

; 2120 : 			return true;	

  00011	eb 49		 jmp	 SHORT $LN11@IsWeaponSk@4
$LN6@IsWeaponSk@4:

; 2121 : 	}
; 2122 : 	else
; 2123 : 	{
; 2124 : 		if( !CDirectInput::GetSingletonPtr() )

  00013	39 05 00 00 00
	00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, eax ; Singleton<CDirectInput>::ms_Singleton
  00019	75 04		 jne	 SHORT $LN3@IsWeaponSk@4
$LN2@IsWeaponSk@4:

; 2125 : 			return false;

  0001b	32 c0		 xor	 al, al
  0001d	5e		 pop	 esi

; 2133 : }

  0001e	c3		 ret	 0
$LN3@IsWeaponSk@4:

; 2126 : 
; 2127 : 		if( g_Input.GetKeyState( m_Keys.m_wWeaponSkillKey ) == KEY_NONE ||
; 2128 : 			g_Input.GetKeyState( m_SecondKeys.m_wWeaponSkillKey ) == KEY_NONE ||
; 2129 : 			g_Input.GetKeyState( m_JoyKeys.m_wWeaponSkillKey ) == KEY_NONE )

  0001f	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00024	66 8b 56 24	 mov	 dx, WORD PTR [esi+36]
  00028	8b c8		 mov	 ecx, eax
  0002a	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0002f	66 85 c0	 test	 ax, ax
  00032	74 2a		 je	 SHORT $LN1@IsWeaponSk@4
  00034	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00039	66 8b 56 42	 mov	 dx, WORD PTR [esi+66]
  0003d	8b c8		 mov	 ecx, eax
  0003f	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00044	66 85 c0	 test	 ax, ax
  00047	74 15		 je	 SHORT $LN1@IsWeaponSk@4
  00049	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0004e	66 8b 56 60	 mov	 dx, WORD PTR [esi+96]
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00059	66 85 c0	 test	 ax, ax
$LN11@IsWeaponSk@4:

; 2131 : 	}
; 2132 : 	return false;

  0005c	75 bd		 jne	 SHORT $LN2@IsWeaponSk@4
$LN1@IsWeaponSk@4:

; 2130 : 			return true;

  0005e	b0 01		 mov	 al, 1
  00060	5e		 pop	 esi

; 2133 : }

  00061	c3		 ret	 0
?IsWeaponSkillKeyNone@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsWeaponSkillKeyNone
_TEXT	ENDS
PUBLIC	?IsArmorSkillKeyPress@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsArmorSkillKeyPress
; Function compile flags: /Ogsp
;	COMDAT ?IsArmorSkillKeyPress@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsArmorSkillKeyPress@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsArmorSkillKeyPress, COMDAT
; _this$ = ecx

; 2136 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2137 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 0e		 je	 SHORT $LN6@IsArmorSki

; 2138 : 	{
; 2139 : 		if( m_AIKeys.m_wArmorSkillKey == KEY_PRESS )

  0000c	66 83 be 80 00
	00 00 02	 cmp	 WORD PTR [esi+128], 2
  00014	75 0d		 jne	 SHORT $LN2@IsArmorSki

; 2140 : 			return true;	

  00016	b0 01		 mov	 al, 1
  00018	5e		 pop	 esi

; 2153 : }

  00019	c3		 ret	 0
$LN6@IsArmorSki:

; 2141 : 	}
; 2142 : 	else
; 2143 : 	{
; 2144 : 		if( !CDirectInput::GetSingletonPtr() )

  0001a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  00021	75 04		 jne	 SHORT $LN3@IsArmorSki
$LN2@IsArmorSki:

; 2145 : 			return false;

  00023	32 c0		 xor	 al, al
  00025	5e		 pop	 esi

; 2153 : }

  00026	c3		 ret	 0
$LN3@IsArmorSki:

; 2146 : 
; 2147 : 		if( g_Input.IsKeyPress( m_Keys.m_wArmorSkillKey ) ||
; 2148 : 			g_Input.IsKeyPress( m_SecondKeys.m_wArmorSkillKey ) ||
; 2149 : 			g_Input.IsKeyPress( m_JoyKeys.m_wArmorSkillKey ) )

  00027	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0002c	66 8b 56 26	 mov	 dx, WORD PTR [esi+38]
  00030	8b c8		 mov	 ecx, eax
  00032	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00037	84 c0		 test	 al, al
  00039	75 28		 jne	 SHORT $LN1@IsArmorSki
  0003b	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00040	66 8b 56 44	 mov	 dx, WORD PTR [esi+68]
  00044	8b c8		 mov	 ecx, eax
  00046	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  0004b	84 c0		 test	 al, al
  0004d	75 14		 jne	 SHORT $LN1@IsArmorSki
  0004f	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00054	66 8b 56 62	 mov	 dx, WORD PTR [esi+98]
  00058	8b c8		 mov	 ecx, eax
  0005a	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  0005f	84 c0		 test	 al, al

; 2151 : 	}
; 2152 : 	return false;

  00061	74 c0		 je	 SHORT $LN2@IsArmorSki
$LN1@IsArmorSki:

; 2150 : 			return IsKeyDownException();

  00063	8b ce		 mov	 ecx, esi
  00065	5e		 pop	 esi
  00066	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsArmorSkillKeyPress@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsArmorSkillKeyPress
_TEXT	ENDS
PUBLIC	?IsArmorSkillKeyDown@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsArmorSkillKeyDown
; Function compile flags: /Ogsp
;	COMDAT ?IsArmorSkillKeyDown@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsArmorSkillKeyDown@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsArmorSkillKeyDown, COMDAT
; _this$ = ecx

; 2156 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2157 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 15		 je	 SHORT $LN7@IsArmorSki@2

; 2158 : 	{
; 2159 : 		if( m_AIKeys.m_wArmorSkillKey == KEY_REPEAT || m_AIKeys.m_wArmorSkillKey == KEY_PRESS )

  0000c	0f b7 86 80 00
	00 00		 movzx	 eax, WORD PTR [esi+128]
  00013	83 f8 03	 cmp	 eax, 3
  00016	74 05		 je	 SHORT $LN5@IsArmorSki@2
  00018	83 f8 02	 cmp	 eax, 2
  0001b	75 0d		 jne	 SHORT $LN2@IsArmorSki@2
$LN5@IsArmorSki@2:

; 2160 : 			return true;	

  0001d	b0 01		 mov	 al, 1
  0001f	5e		 pop	 esi

; 2173 : }

  00020	c3		 ret	 0
$LN7@IsArmorSki@2:

; 2161 : 	}
; 2162 : 	else
; 2163 : 	{
; 2164 : 		if( !CDirectInput::GetSingletonPtr() )

  00021	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  00028	75 04		 jne	 SHORT $LN3@IsArmorSki@2
$LN2@IsArmorSki@2:

; 2165 : 			return false;

  0002a	32 c0		 xor	 al, al
  0002c	5e		 pop	 esi

; 2173 : }

  0002d	c3		 ret	 0
$LN3@IsArmorSki@2:

; 2166 : 
; 2167 : 		if( g_Input.IsKeyDown( m_Keys.m_wArmorSkillKey ) ||
; 2168 : 			g_Input.IsKeyDown( m_SecondKeys.m_wArmorSkillKey) ||
; 2169 : 			g_Input.IsKeyDown( m_JoyKeys.m_wArmorSkillKey) )

  0002e	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00033	66 8b 56 26	 mov	 dx, WORD PTR [esi+38]
  00037	8b c8		 mov	 ecx, eax
  00039	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0003e	84 c0		 test	 al, al
  00040	75 28		 jne	 SHORT $LN1@IsArmorSki@2
  00042	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00047	66 8b 56 44	 mov	 dx, WORD PTR [esi+68]
  0004b	8b c8		 mov	 ecx, eax
  0004d	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  00052	84 c0		 test	 al, al
  00054	75 14		 jne	 SHORT $LN1@IsArmorSki@2
  00056	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0005b	66 8b 56 62	 mov	 dx, WORD PTR [esi+98]
  0005f	8b c8		 mov	 ecx, eax
  00061	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  00066	84 c0		 test	 al, al

; 2171 : 	}
; 2172 : 	return false;

  00068	74 c0		 je	 SHORT $LN2@IsArmorSki@2
$LN1@IsArmorSki@2:

; 2170 : 			return IsKeyDownException();

  0006a	8b ce		 mov	 ecx, esi
  0006c	5e		 pop	 esi
  0006d	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsArmorSkillKeyDown@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsArmorSkillKeyDown
_TEXT	ENDS
PUBLIC	?IsArmorSkillKeyRelease@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsArmorSkillKeyRelease
; Function compile flags: /Ogsp
;	COMDAT ?IsArmorSkillKeyRelease@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsArmorSkillKeyRelease@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsArmorSkillKeyRelease, COMDAT
; _this$ = ecx

; 2176 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2177 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 0a		 je	 SHORT $LN6@IsArmorSki@3

; 2178 : 	{
; 2179 : 		if( m_AIKeys.m_wArmorSkillKey == KEY_RELEASE )

  0000c	66 83 be 80 00
	00 00 01	 cmp	 WORD PTR [esi+128], 1

; 2180 : 			return true;	

  00014	eb 4d		 jmp	 SHORT $LN11@IsArmorSki@3
$LN6@IsArmorSki@3:

; 2181 : 	}
; 2182 : 	else
; 2183 : 	{
; 2184 : 		if( !CDirectInput::GetSingletonPtr() )

  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  0001d	75 04		 jne	 SHORT $LN3@IsArmorSki@3
$LN2@IsArmorSki@3:

; 2185 : 			return false;

  0001f	32 c0		 xor	 al, al
  00021	5e		 pop	 esi

; 2193 : }

  00022	c3		 ret	 0
$LN3@IsArmorSki@3:

; 2186 : 
; 2187 : 		if( g_Input.GetKeyState( m_Keys.m_wArmorSkillKey ) == KEY_RELEASE || 
; 2188 : 			g_Input.GetKeyState( m_SecondKeys.m_wArmorSkillKey ) == KEY_RELEASE ||
; 2189 : 			g_Input.GetKeyState( m_JoyKeys.m_wArmorSkillKey ) == KEY_RELEASE )

  00023	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00028	66 8b 56 26	 mov	 dx, WORD PTR [esi+38]
  0002c	8b c8		 mov	 ecx, eax
  0002e	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00033	66 83 f8 01	 cmp	 ax, 1
  00037	74 2c		 je	 SHORT $LN1@IsArmorSki@3
  00039	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003e	66 8b 56 44	 mov	 dx, WORD PTR [esi+68]
  00042	8b c8		 mov	 ecx, eax
  00044	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00049	66 83 f8 01	 cmp	 ax, 1
  0004d	74 16		 je	 SHORT $LN1@IsArmorSki@3
  0004f	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00054	66 8b 56 62	 mov	 dx, WORD PTR [esi+98]
  00058	8b c8		 mov	 ecx, eax
  0005a	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0005f	66 83 f8 01	 cmp	 ax, 1
$LN11@IsArmorSki@3:

; 2191 : 	}
; 2192 : 	return false;

  00063	75 ba		 jne	 SHORT $LN2@IsArmorSki@3
$LN1@IsArmorSki@3:

; 2190 : 			return true;

  00065	b0 01		 mov	 al, 1
  00067	5e		 pop	 esi

; 2193 : }

  00068	c3		 ret	 0
?IsArmorSkillKeyRelease@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsArmorSkillKeyRelease
_TEXT	ENDS
PUBLIC	?IsArmorSkillKeyNone@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsArmorSkillKeyNone
; Function compile flags: /Ogsp
;	COMDAT ?IsArmorSkillKeyNone@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsArmorSkillKeyNone@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsArmorSkillKeyNone, COMDAT
; _this$ = ecx

; 2196 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2197 : 	if( m_bInputProcessAI )

  00003	33 c0		 xor	 eax, eax
  00005	38 86 4b 01 00
	00		 cmp	 BYTE PTR [esi+331], al
  0000b	74 09		 je	 SHORT $LN6@IsArmorSki@4

; 2198 : 	{
; 2199 : 		if( m_AIKeys.m_wArmorSkillKey == KEY_NONE )

  0000d	66 39 86 80 00
	00 00		 cmp	 WORD PTR [esi+128], ax

; 2200 : 			return true;	

  00014	eb 49		 jmp	 SHORT $LN11@IsArmorSki@4
$LN6@IsArmorSki@4:

; 2201 : 	}
; 2202 : 	else
; 2203 : 	{
; 2204 : 		if( !CDirectInput::GetSingletonPtr() )

  00016	39 05 00 00 00
	00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, eax ; Singleton<CDirectInput>::ms_Singleton
  0001c	75 04		 jne	 SHORT $LN3@IsArmorSki@4
$LN2@IsArmorSki@4:

; 2205 : 			return false;

  0001e	32 c0		 xor	 al, al
  00020	5e		 pop	 esi

; 2213 : }

  00021	c3		 ret	 0
$LN3@IsArmorSki@4:

; 2206 : 
; 2207 : 		if( g_Input.GetKeyState( m_Keys.m_wArmorSkillKey ) == KEY_NONE ||
; 2208 : 			g_Input.GetKeyState( m_SecondKeys.m_wArmorSkillKey ) == KEY_NONE ||
; 2209 : 			g_Input.GetKeyState( m_JoyKeys.m_wArmorSkillKey ) == KEY_NONE )

  00022	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00027	66 8b 56 26	 mov	 dx, WORD PTR [esi+38]
  0002b	8b c8		 mov	 ecx, eax
  0002d	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00032	66 85 c0	 test	 ax, ax
  00035	74 2a		 je	 SHORT $LN1@IsArmorSki@4
  00037	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003c	66 8b 56 44	 mov	 dx, WORD PTR [esi+68]
  00040	8b c8		 mov	 ecx, eax
  00042	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00047	66 85 c0	 test	 ax, ax
  0004a	74 15		 je	 SHORT $LN1@IsArmorSki@4
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00051	66 8b 56 62	 mov	 dx, WORD PTR [esi+98]
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0005c	66 85 c0	 test	 ax, ax
$LN11@IsArmorSki@4:

; 2211 : 	}
; 2212 : 	return false;

  0005f	75 bd		 jne	 SHORT $LN2@IsArmorSki@4
$LN1@IsArmorSki@4:

; 2210 : 			return true;

  00061	b0 01		 mov	 al, 1
  00063	5e		 pop	 esi

; 2213 : }

  00064	c3		 ret	 0
?IsArmorSkillKeyNone@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsArmorSkillKeyNone
_TEXT	ENDS
PUBLIC	?IsHelmetSkillKeyPress@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsHelmetSkillKeyPress
; Function compile flags: /Ogsp
;	COMDAT ?IsHelmetSkillKeyPress@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsHelmetSkillKeyPress@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsHelmetSkillKeyPress, COMDAT
; _this$ = ecx

; 2216 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2217 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 0e		 je	 SHORT $LN6@IsHelmetSk

; 2218 : 	{
; 2219 : 		if( m_AIKeys.m_wHelmetSkillKey == KEY_PRESS )

  0000c	66 83 be 82 00
	00 00 02	 cmp	 WORD PTR [esi+130], 2
  00014	75 0d		 jne	 SHORT $LN2@IsHelmetSk

; 2220 : 			return true;	

  00016	b0 01		 mov	 al, 1
  00018	5e		 pop	 esi

; 2233 : }

  00019	c3		 ret	 0
$LN6@IsHelmetSk:

; 2221 : 	}
; 2222 : 	else
; 2223 : 	{
; 2224 : 		if( !CDirectInput::GetSingletonPtr() )

  0001a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  00021	75 04		 jne	 SHORT $LN3@IsHelmetSk
$LN2@IsHelmetSk:

; 2225 : 			return false;

  00023	32 c0		 xor	 al, al
  00025	5e		 pop	 esi

; 2233 : }

  00026	c3		 ret	 0
$LN3@IsHelmetSk:

; 2226 : 
; 2227 : 		if( g_Input.IsKeyPress( m_Keys.m_wHelmetSkillKey ) ||
; 2228 : 			g_Input.IsKeyPress( m_SecondKeys.m_wHelmetSkillKey) ||
; 2229 : 			g_Input.IsKeyPress( m_JoyKeys.m_wHelmetSkillKey) )

  00027	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0002c	66 8b 56 28	 mov	 dx, WORD PTR [esi+40]
  00030	8b c8		 mov	 ecx, eax
  00032	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00037	84 c0		 test	 al, al
  00039	75 28		 jne	 SHORT $LN1@IsHelmetSk
  0003b	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00040	66 8b 56 46	 mov	 dx, WORD PTR [esi+70]
  00044	8b c8		 mov	 ecx, eax
  00046	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  0004b	84 c0		 test	 al, al
  0004d	75 14		 jne	 SHORT $LN1@IsHelmetSk
  0004f	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00054	66 8b 56 64	 mov	 dx, WORD PTR [esi+100]
  00058	8b c8		 mov	 ecx, eax
  0005a	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  0005f	84 c0		 test	 al, al

; 2231 : 	}
; 2232 : 	return false;

  00061	74 c0		 je	 SHORT $LN2@IsHelmetSk
$LN1@IsHelmetSk:

; 2230 : 			return IsKeyDownException();

  00063	8b ce		 mov	 ecx, esi
  00065	5e		 pop	 esi
  00066	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsHelmetSkillKeyPress@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsHelmetSkillKeyPress
_TEXT	ENDS
PUBLIC	?IsHelmetSkillKeyDown@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsHelmetSkillKeyDown
; Function compile flags: /Ogsp
;	COMDAT ?IsHelmetSkillKeyDown@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsHelmetSkillKeyDown@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsHelmetSkillKeyDown, COMDAT
; _this$ = ecx

; 2236 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2237 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 0e		 je	 SHORT $LN7@IsHelmetSk@2

; 2238 : 	{
; 2239 : 		if( m_AIKeys.m_wHelmetSkillKey == KEY_REPEAT || m_AIKeys.m_wHelmetSkillKey == KEY_REPEAT )

  0000c	66 83 be 82 00
	00 00 03	 cmp	 WORD PTR [esi+130], 3
  00014	75 0d		 jne	 SHORT $LN2@IsHelmetSk@2

; 2240 : 			return true;	

  00016	b0 01		 mov	 al, 1
  00018	5e		 pop	 esi

; 2253 : }

  00019	c3		 ret	 0
$LN7@IsHelmetSk@2:

; 2241 : 	}
; 2242 : 	else
; 2243 : 	{
; 2244 : 		if( !CDirectInput::GetSingletonPtr() )

  0001a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  00021	75 04		 jne	 SHORT $LN3@IsHelmetSk@2
$LN2@IsHelmetSk@2:

; 2245 : 			return false;

  00023	32 c0		 xor	 al, al
  00025	5e		 pop	 esi

; 2253 : }

  00026	c3		 ret	 0
$LN3@IsHelmetSk@2:

; 2246 : 
; 2247 : 		if( g_Input.IsKeyDown( m_Keys.m_wHelmetSkillKey ) ||
; 2248 : 			g_Input.IsKeyDown( m_SecondKeys.m_wHelmetSkillKey) ||
; 2249 : 			g_Input.IsKeyDown( m_JoyKeys.m_wHelmetSkillKey) )

  00027	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0002c	66 8b 56 28	 mov	 dx, WORD PTR [esi+40]
  00030	8b c8		 mov	 ecx, eax
  00032	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  00037	84 c0		 test	 al, al
  00039	75 28		 jne	 SHORT $LN1@IsHelmetSk@2
  0003b	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00040	66 8b 56 46	 mov	 dx, WORD PTR [esi+70]
  00044	8b c8		 mov	 ecx, eax
  00046	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0004b	84 c0		 test	 al, al
  0004d	75 14		 jne	 SHORT $LN1@IsHelmetSk@2
  0004f	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00054	66 8b 56 64	 mov	 dx, WORD PTR [esi+100]
  00058	8b c8		 mov	 ecx, eax
  0005a	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0005f	84 c0		 test	 al, al

; 2251 : 	}
; 2252 : 	return false;

  00061	74 c0		 je	 SHORT $LN2@IsHelmetSk@2
$LN1@IsHelmetSk@2:

; 2250 : 			return IsKeyDownException();

  00063	8b ce		 mov	 ecx, esi
  00065	5e		 pop	 esi
  00066	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsHelmetSkillKeyDown@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsHelmetSkillKeyDown
_TEXT	ENDS
PUBLIC	?IsHelmetSkillKeyRelease@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsHelmetSkillKeyRelease
; Function compile flags: /Ogsp
;	COMDAT ?IsHelmetSkillKeyRelease@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsHelmetSkillKeyRelease@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsHelmetSkillKeyRelease, COMDAT
; _this$ = ecx

; 2256 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2257 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 0a		 je	 SHORT $LN6@IsHelmetSk@3

; 2258 : 	{
; 2259 : 		if( m_AIKeys.m_wHelmetSkillKey == KEY_RELEASE )

  0000c	66 83 be 82 00
	00 00 01	 cmp	 WORD PTR [esi+130], 1

; 2260 : 			return true;

  00014	eb 4d		 jmp	 SHORT $LN11@IsHelmetSk@3
$LN6@IsHelmetSk@3:

; 2261 : 	}
; 2262 : 	else
; 2263 : 	{
; 2264 : 		if( !CDirectInput::GetSingletonPtr() )

  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  0001d	75 04		 jne	 SHORT $LN3@IsHelmetSk@3
$LN2@IsHelmetSk@3:

; 2265 : 			return false;

  0001f	32 c0		 xor	 al, al
  00021	5e		 pop	 esi

; 2273 : }

  00022	c3		 ret	 0
$LN3@IsHelmetSk@3:

; 2266 : 
; 2267 : 		if( g_Input.GetKeyState( m_Keys.m_wHelmetSkillKey ) == KEY_RELEASE ||
; 2268 : 			g_Input.GetKeyState( m_SecondKeys.m_wHelmetSkillKey) == KEY_RELEASE ||
; 2269 : 			g_Input.GetKeyState( m_JoyKeys.m_wHelmetSkillKey) == KEY_RELEASE )

  00023	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00028	66 8b 56 28	 mov	 dx, WORD PTR [esi+40]
  0002c	8b c8		 mov	 ecx, eax
  0002e	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00033	66 83 f8 01	 cmp	 ax, 1
  00037	74 2c		 je	 SHORT $LN1@IsHelmetSk@3
  00039	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003e	66 8b 56 46	 mov	 dx, WORD PTR [esi+70]
  00042	8b c8		 mov	 ecx, eax
  00044	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00049	66 83 f8 01	 cmp	 ax, 1
  0004d	74 16		 je	 SHORT $LN1@IsHelmetSk@3
  0004f	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00054	66 8b 56 64	 mov	 dx, WORD PTR [esi+100]
  00058	8b c8		 mov	 ecx, eax
  0005a	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0005f	66 83 f8 01	 cmp	 ax, 1
$LN11@IsHelmetSk@3:

; 2271 : 	}
; 2272 : 	return false;

  00063	75 ba		 jne	 SHORT $LN2@IsHelmetSk@3
$LN1@IsHelmetSk@3:

; 2270 : 			return true;

  00065	b0 01		 mov	 al, 1
  00067	5e		 pop	 esi

; 2273 : }

  00068	c3		 ret	 0
?IsHelmetSkillKeyRelease@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsHelmetSkillKeyRelease
_TEXT	ENDS
PUBLIC	?IsHelmetSkillKeyNone@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsHelmetSkillKeyNone
; Function compile flags: /Ogsp
;	COMDAT ?IsHelmetSkillKeyNone@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsHelmetSkillKeyNone@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsHelmetSkillKeyNone, COMDAT
; _this$ = ecx

; 2276 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2277 : 	if( m_bInputProcessAI )

  00003	33 c0		 xor	 eax, eax
  00005	38 86 4b 01 00
	00		 cmp	 BYTE PTR [esi+331], al
  0000b	74 09		 je	 SHORT $LN6@IsHelmetSk@4

; 2278 : 	{
; 2279 : 		if( m_AIKeys.m_wHelmetSkillKey == KEY_NONE )

  0000d	66 39 86 82 00
	00 00		 cmp	 WORD PTR [esi+130], ax

; 2280 : 			return true;	

  00014	eb 49		 jmp	 SHORT $LN11@IsHelmetSk@4
$LN6@IsHelmetSk@4:

; 2281 : 	}
; 2282 : 	else
; 2283 : 	{
; 2284 : 		if( !CDirectInput::GetSingletonPtr() )

  00016	39 05 00 00 00
	00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, eax ; Singleton<CDirectInput>::ms_Singleton
  0001c	75 04		 jne	 SHORT $LN3@IsHelmetSk@4
$LN2@IsHelmetSk@4:

; 2285 : 			return false;

  0001e	32 c0		 xor	 al, al
  00020	5e		 pop	 esi

; 2293 : }

  00021	c3		 ret	 0
$LN3@IsHelmetSk@4:

; 2286 : 
; 2287 : 		if( g_Input.GetKeyState( m_Keys.m_wHelmetSkillKey ) == KEY_NONE ||
; 2288 : 			g_Input.GetKeyState( m_SecondKeys.m_wHelmetSkillKey ) == KEY_NONE ||
; 2289 : 			g_Input.GetKeyState( m_JoyKeys.m_wHelmetSkillKey ) == KEY_NONE )

  00022	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00027	66 8b 56 28	 mov	 dx, WORD PTR [esi+40]
  0002b	8b c8		 mov	 ecx, eax
  0002d	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00032	66 85 c0	 test	 ax, ax
  00035	74 2a		 je	 SHORT $LN1@IsHelmetSk@4
  00037	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003c	66 8b 56 46	 mov	 dx, WORD PTR [esi+70]
  00040	8b c8		 mov	 ecx, eax
  00042	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00047	66 85 c0	 test	 ax, ax
  0004a	74 15		 je	 SHORT $LN1@IsHelmetSk@4
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00051	66 8b 56 64	 mov	 dx, WORD PTR [esi+100]
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0005c	66 85 c0	 test	 ax, ax
$LN11@IsHelmetSk@4:

; 2291 : 	}
; 2292 : 	return false;

  0005f	75 bd		 jne	 SHORT $LN2@IsHelmetSk@4
$LN1@IsHelmetSk@4:

; 2290 : 			return true;

  00061	b0 01		 mov	 al, 1
  00063	5e		 pop	 esi

; 2293 : }

  00064	c3		 ret	 0
?IsHelmetSkillKeyNone@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsHelmetSkillKeyNone
_TEXT	ENDS
PUBLIC	?IsCloakSkillKeyPress@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsCloakSkillKeyPress
; Function compile flags: /Ogsp
;	COMDAT ?IsCloakSkillKeyPress@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsCloakSkillKeyPress@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsCloakSkillKeyPress, COMDAT
; _this$ = ecx

; 2296 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2297 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 0e		 je	 SHORT $LN6@IsCloakSki

; 2298 : 	{
; 2299 : 		if( m_AIKeys.m_wCloakSkillKey == KEY_PRESS )

  0000c	66 83 be 84 00
	00 00 02	 cmp	 WORD PTR [esi+132], 2
  00014	75 0d		 jne	 SHORT $LN2@IsCloakSki

; 2300 : 			return true;	

  00016	b0 01		 mov	 al, 1
  00018	5e		 pop	 esi

; 2313 : }

  00019	c3		 ret	 0
$LN6@IsCloakSki:

; 2301 : 	}
; 2302 : 	else
; 2303 : 	{
; 2304 : 		if( !CDirectInput::GetSingletonPtr() )

  0001a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  00021	75 04		 jne	 SHORT $LN3@IsCloakSki
$LN2@IsCloakSki:

; 2305 : 			return false;

  00023	32 c0		 xor	 al, al
  00025	5e		 pop	 esi

; 2313 : }

  00026	c3		 ret	 0
$LN3@IsCloakSki:

; 2306 : 
; 2307 : 		if( g_Input.IsKeyPress( m_Keys.m_wCloakSkillKey ) ||
; 2308 : 			g_Input.IsKeyPress( m_SecondKeys.m_wCloakSkillKey) ||
; 2309 : 			g_Input.IsKeyPress( m_JoyKeys.m_wCloakSkillKey) )

  00027	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0002c	66 8b 56 2a	 mov	 dx, WORD PTR [esi+42]
  00030	8b c8		 mov	 ecx, eax
  00032	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  00037	84 c0		 test	 al, al
  00039	75 28		 jne	 SHORT $LN1@IsCloakSki
  0003b	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00040	66 8b 56 48	 mov	 dx, WORD PTR [esi+72]
  00044	8b c8		 mov	 ecx, eax
  00046	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  0004b	84 c0		 test	 al, al
  0004d	75 14		 jne	 SHORT $LN1@IsCloakSki
  0004f	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00054	66 8b 56 66	 mov	 dx, WORD PTR [esi+102]
  00058	8b c8		 mov	 ecx, eax
  0005a	e8 00 00 00 00	 call	 ?IsKeyPress@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyPress
  0005f	84 c0		 test	 al, al

; 2311 : 	}
; 2312 : 	return false;

  00061	74 c0		 je	 SHORT $LN2@IsCloakSki
$LN1@IsCloakSki:

; 2310 : 			return IsKeyDownException();

  00063	8b ce		 mov	 ecx, esi
  00065	5e		 pop	 esi
  00066	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsCloakSkillKeyPress@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsCloakSkillKeyPress
_TEXT	ENDS
PUBLIC	?IsCloakSkillKeyDown@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsCloakSkillKeyDown
; Function compile flags: /Ogsp
;	COMDAT ?IsCloakSkillKeyDown@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsCloakSkillKeyDown@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsCloakSkillKeyDown, COMDAT
; _this$ = ecx

; 2316 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2317 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 15		 je	 SHORT $LN7@IsCloakSki@2

; 2318 : 	{
; 2319 : 		if( m_AIKeys.m_wCloakSkillKey == KEY_REPEAT || m_AIKeys.m_wCloakSkillKey == KEY_PRESS )

  0000c	0f b7 86 84 00
	00 00		 movzx	 eax, WORD PTR [esi+132]
  00013	83 f8 03	 cmp	 eax, 3
  00016	74 05		 je	 SHORT $LN5@IsCloakSki@2
  00018	83 f8 02	 cmp	 eax, 2
  0001b	75 0d		 jne	 SHORT $LN2@IsCloakSki@2
$LN5@IsCloakSki@2:

; 2320 : 			return true;

  0001d	b0 01		 mov	 al, 1
  0001f	5e		 pop	 esi

; 2333 : }

  00020	c3		 ret	 0
$LN7@IsCloakSki@2:

; 2321 : 	}
; 2322 : 	else
; 2323 : 	{
; 2324 : 		if( !CDirectInput::GetSingletonPtr() )

  00021	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  00028	75 04		 jne	 SHORT $LN3@IsCloakSki@2
$LN2@IsCloakSki@2:

; 2325 : 			return false;

  0002a	32 c0		 xor	 al, al
  0002c	5e		 pop	 esi

; 2333 : }

  0002d	c3		 ret	 0
$LN3@IsCloakSki@2:

; 2326 : 
; 2327 : 		if( g_Input.IsKeyDown( m_Keys.m_wCloakSkillKey ) ||
; 2328 : 			g_Input.IsKeyDown( m_SecondKeys.m_wCloakSkillKey) ||
; 2329 : 			g_Input.IsKeyDown( m_JoyKeys.m_wCloakSkillKey) )

  0002e	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00033	66 8b 56 2a	 mov	 dx, WORD PTR [esi+42]
  00037	8b c8		 mov	 ecx, eax
  00039	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  0003e	84 c0		 test	 al, al
  00040	75 28		 jne	 SHORT $LN1@IsCloakSki@2
  00042	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00047	66 8b 56 48	 mov	 dx, WORD PTR [esi+72]
  0004b	8b c8		 mov	 ecx, eax
  0004d	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  00052	84 c0		 test	 al, al
  00054	75 14		 jne	 SHORT $LN1@IsCloakSki@2
  00056	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0005b	66 8b 56 66	 mov	 dx, WORD PTR [esi+102]
  0005f	8b c8		 mov	 ecx, eax
  00061	e8 00 00 00 00	 call	 ?IsKeyDown@CDirectInput@@QAI_NG@Z ; CDirectInput::IsKeyDown
  00066	84 c0		 test	 al, al

; 2331 : 	}
; 2332 : 	return false;

  00068	74 c0		 je	 SHORT $LN2@IsCloakSki@2
$LN1@IsCloakSki@2:

; 2330 : 			return IsKeyDownException();

  0006a	8b ce		 mov	 ecx, esi
  0006c	5e		 pop	 esi
  0006d	e9 00 00 00 00	 jmp	 ?IsKeyDownException@ioUserKeyInput@@ABE_NXZ ; ioUserKeyInput::IsKeyDownException
?IsCloakSkillKeyDown@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsCloakSkillKeyDown
_TEXT	ENDS
PUBLIC	?IsCloakSkillKeyRelease@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsCloakSkillKeyRelease
; Function compile flags: /Ogsp
;	COMDAT ?IsCloakSkillKeyRelease@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsCloakSkillKeyRelease@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsCloakSkillKeyRelease, COMDAT
; _this$ = ecx

; 2336 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2337 : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	74 0a		 je	 SHORT $LN6@IsCloakSki@3

; 2338 : 	{
; 2339 : 		if( m_AIKeys.m_wCloakSkillKey == KEY_RELEASE )

  0000c	66 83 be 84 00
	00 00 01	 cmp	 WORD PTR [esi+132], 1

; 2340 : 			return true;	

  00014	eb 4d		 jmp	 SHORT $LN11@IsCloakSki@3
$LN6@IsCloakSki@3:

; 2341 : 	}
; 2342 : 	else
; 2343 : 	{
; 2344 : 		if( !CDirectInput::GetSingletonPtr() )

  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, 0 ; Singleton<CDirectInput>::ms_Singleton
  0001d	75 04		 jne	 SHORT $LN3@IsCloakSki@3
$LN2@IsCloakSki@3:

; 2345 : 			return false;

  0001f	32 c0		 xor	 al, al
  00021	5e		 pop	 esi

; 2353 : }

  00022	c3		 ret	 0
$LN3@IsCloakSki@3:

; 2346 : 
; 2347 : 		if( g_Input.GetKeyState( m_Keys.m_wCloakSkillKey ) == KEY_RELEASE ||
; 2348 : 			g_Input.GetKeyState( m_SecondKeys.m_wCloakSkillKey) == KEY_RELEASE ||
; 2349 : 			g_Input.GetKeyState( m_JoyKeys.m_wCloakSkillKey) == KEY_RELEASE )

  00023	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00028	66 8b 56 2a	 mov	 dx, WORD PTR [esi+42]
  0002c	8b c8		 mov	 ecx, eax
  0002e	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00033	66 83 f8 01	 cmp	 ax, 1
  00037	74 2c		 je	 SHORT $LN1@IsCloakSki@3
  00039	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003e	66 8b 56 48	 mov	 dx, WORD PTR [esi+72]
  00042	8b c8		 mov	 ecx, eax
  00044	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00049	66 83 f8 01	 cmp	 ax, 1
  0004d	74 16		 je	 SHORT $LN1@IsCloakSki@3
  0004f	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00054	66 8b 56 66	 mov	 dx, WORD PTR [esi+102]
  00058	8b c8		 mov	 ecx, eax
  0005a	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0005f	66 83 f8 01	 cmp	 ax, 1
$LN11@IsCloakSki@3:

; 2351 : 	}
; 2352 : 	return false;

  00063	75 ba		 jne	 SHORT $LN2@IsCloakSki@3
$LN1@IsCloakSki@3:

; 2350 : 			return true;

  00065	b0 01		 mov	 al, 1
  00067	5e		 pop	 esi

; 2353 : }

  00068	c3		 ret	 0
?IsCloakSkillKeyRelease@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsCloakSkillKeyRelease
_TEXT	ENDS
PUBLIC	?IsCloakSkillKeyNone@ioUserKeyInput@@QBE_NXZ	; ioUserKeyInput::IsCloakSkillKeyNone
; Function compile flags: /Ogsp
;	COMDAT ?IsCloakSkillKeyNone@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsCloakSkillKeyNone@ioUserKeyInput@@QBE_NXZ PROC	; ioUserKeyInput::IsCloakSkillKeyNone, COMDAT
; _this$ = ecx

; 2356 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2357 : 	if( m_bInputProcessAI )

  00003	33 c0		 xor	 eax, eax
  00005	38 86 4b 01 00
	00		 cmp	 BYTE PTR [esi+331], al
  0000b	74 09		 je	 SHORT $LN6@IsCloakSki@4

; 2358 : 	{
; 2359 : 		if( m_AIKeys.m_wCloakSkillKey == KEY_NONE )

  0000d	66 39 86 84 00
	00 00		 cmp	 WORD PTR [esi+132], ax

; 2360 : 			return true;

  00014	eb 49		 jmp	 SHORT $LN11@IsCloakSki@4
$LN6@IsCloakSki@4:

; 2361 : 	}
; 2362 : 	else
; 2363 : 	{
; 2364 : 		if( !CDirectInput::GetSingletonPtr() )

  00016	39 05 00 00 00
	00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, eax ; Singleton<CDirectInput>::ms_Singleton
  0001c	75 04		 jne	 SHORT $LN3@IsCloakSki@4
$LN2@IsCloakSki@4:

; 2365 : 			return false;

  0001e	32 c0		 xor	 al, al
  00020	5e		 pop	 esi

; 2373 : }

  00021	c3		 ret	 0
$LN3@IsCloakSki@4:

; 2366 : 
; 2367 : 		if( g_Input.GetKeyState( m_Keys.m_wCloakSkillKey ) == KEY_NONE ||
; 2368 : 			g_Input.GetKeyState( m_SecondKeys.m_wCloakSkillKey ) == KEY_NONE ||
; 2369 : 			g_Input.GetKeyState( m_JoyKeys.m_wCloakSkillKey ) == KEY_NONE )

  00022	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00027	66 8b 56 2a	 mov	 dx, WORD PTR [esi+42]
  0002b	8b c8		 mov	 ecx, eax
  0002d	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00032	66 85 c0	 test	 ax, ax
  00035	74 2a		 je	 SHORT $LN1@IsCloakSki@4
  00037	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0003c	66 8b 56 48	 mov	 dx, WORD PTR [esi+72]
  00040	8b c8		 mov	 ecx, eax
  00042	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00047	66 85 c0	 test	 ax, ax
  0004a	74 15		 je	 SHORT $LN1@IsCloakSki@4
  0004c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00051	66 8b 56 66	 mov	 dx, WORD PTR [esi+102]
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0005c	66 85 c0	 test	 ax, ax
$LN11@IsCloakSki@4:

; 2371 : 	}
; 2372 : 	return false;

  0005f	75 bd		 jne	 SHORT $LN2@IsCloakSki@4
$LN1@IsCloakSki@4:

; 2370 : 			return true;

  00061	b0 01		 mov	 al, 1
  00063	5e		 pop	 esi

; 2373 : }

  00064	c3		 ret	 0
?IsCloakSkillKeyNone@ioUserKeyInput@@QBE_NXZ ENDP	; ioUserKeyInput::IsCloakSkillKeyNone
_TEXT	ENDS
PUBLIC	?IsDirKeyRelease@ioUserKeyInput@@QAE_NW4DirKeyInput@1@@Z ; ioUserKeyInput::IsDirKeyRelease
; Function compile flags: /Ogsp
;	COMDAT ?IsDirKeyRelease@ioUserKeyInput@@QAE_NW4DirKeyInput@1@@Z
_TEXT	SEGMENT
_eCurDir$ = 8						; size = 4
?IsDirKeyRelease@ioUserKeyInput@@QAE_NW4DirKeyInput@1@@Z PROC ; ioUserKeyInput::IsDirKeyRelease, COMDAT
; _this$ = ecx

; 2473 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2474 : 	if( !CDirectInput::GetSingletonPtr() )

  00006	33 c9		 xor	 ecx, ecx
  00008	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?ms_Singleton@?$Singleton@VCDirectInput@@@@1PAVCDirectInput@@A, ecx ; Singleton<CDirectInput>::ms_Singleton
  0000e	75 07		 jne	 SHORT $LN51@IsDirKeyRe

; 2475 : 		return false;

  00010	32 c0		 xor	 al, al
  00012	e9 ae 02 00 00	 jmp	 $LN52@IsDirKeyRe
$LN51@IsDirKeyRe:

; 2476 : 
; 2477 : 	bool bRelease = false;
; 2478 : 
; 2479 : 	switch( eCurDir )

  00017	8b 45 08	 mov	 eax, DWORD PTR _eCurDir$[ebp]
  0001a	53		 push	 ebx
  0001b	32 db		 xor	 bl, bl
  0001d	48		 dec	 eax
  0001e	83 f8 07	 cmp	 eax, 7
  00021	0f 87 9b 02 00
	00		 ja	 $LN2@IsDirKeyRe
  00027	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN58@IsDirKeyRe[eax*4]
$LN48@IsDirKeyRe:

; 2480 : 	{
; 2481 : 	case DKI_UP:
; 2482 : 		if( m_bInputProcessAI )

  0002e	38 8e 4b 01 00
	00		 cmp	 BYTE PTR [esi+331], cl
  00034	74 0a		 je	 SHORT $LN47@IsDirKeyRe

; 2483 : 		{
; 2484 : 			if( m_AIKeys.m_wUpKey == KEY_RELEASE )

  00036	66 83 7e 6c 01	 cmp	 WORD PTR [esi+108], 1

; 2485 : 				bRelease = true;
; 2486 : 		}
; 2487 : 		else

  0003b	e9 7e 02 00 00	 jmp	 $LN56@IsDirKeyRe
$LN47@IsDirKeyRe:

; 2488 : 		{
; 2489 : 			if( g_Input.GetKeyState( m_Keys.m_wUpKey ) == KEY_RELEASE ||
; 2490 : 				g_Input.GetKeyState( m_SecondKeys.m_wUpKey) == KEY_RELEASE ||
; 2491 : 				g_Input.GetKeyState( m_JoyKeys.m_wUpKey) == KEY_RELEASE )

  00040	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00045	66 8b 56 12	 mov	 dx, WORD PTR [esi+18]
  00049	8b c8		 mov	 ecx, eax
  0004b	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00050	66 83 f8 01	 cmp	 ax, 1
  00054	0f 84 66 02 00
	00		 je	 $LN1@IsDirKeyRe
  0005a	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0005f	66 8b 56 30	 mov	 dx, WORD PTR [esi+48]
  00063	8b c8		 mov	 ecx, eax
  00065	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0006a	66 83 f8 01	 cmp	 ax, 1
  0006e	0f 84 4c 02 00
	00		 je	 $LN1@IsDirKeyRe
  00074	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00079	66 8b 56 4e	 mov	 dx, WORD PTR [esi+78]

; 2492 : 				bRelease = true;
; 2493 : 		}
; 2494 : 		break;

  0007d	e9 31 02 00 00	 jmp	 $LN57@IsDirKeyRe
$LN42@IsDirKeyRe:

; 2495 : 	case DKI_DOWN:
; 2496 : 		if( m_bInputProcessAI )

  00082	38 8e 4b 01 00
	00		 cmp	 BYTE PTR [esi+331], cl
  00088	74 0a		 je	 SHORT $LN41@IsDirKeyRe

; 2497 : 		{
; 2498 : 			if( m_AIKeys.m_wDownKey == KEY_RELEASE )

  0008a	66 83 7e 6e 01	 cmp	 WORD PTR [esi+110], 1

; 2499 : 				bRelease = true;
; 2500 : 		}
; 2501 : 		else

  0008f	e9 2a 02 00 00	 jmp	 $LN56@IsDirKeyRe
$LN41@IsDirKeyRe:

; 2502 : 		{
; 2503 : 			if( g_Input.GetKeyState( m_Keys.m_wDownKey ) == KEY_RELEASE ||
; 2504 : 				g_Input.GetKeyState( m_SecondKeys.m_wDownKey) == KEY_RELEASE ||
; 2505 : 				g_Input.GetKeyState( m_JoyKeys.m_wDownKey) == KEY_RELEASE )

  00094	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00099	66 8b 56 14	 mov	 dx, WORD PTR [esi+20]
  0009d	8b c8		 mov	 ecx, eax
  0009f	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  000a4	66 83 f8 01	 cmp	 ax, 1
  000a8	0f 84 12 02 00
	00		 je	 $LN1@IsDirKeyRe
  000ae	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  000b3	66 8b 56 32	 mov	 dx, WORD PTR [esi+50]
  000b7	8b c8		 mov	 ecx, eax
  000b9	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  000be	66 83 f8 01	 cmp	 ax, 1
  000c2	0f 84 f8 01 00
	00		 je	 $LN1@IsDirKeyRe
  000c8	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  000cd	66 8b 56 50	 mov	 dx, WORD PTR [esi+80]

; 2506 : 				bRelease = true;
; 2507 : 		}
; 2508 : 		break;

  000d1	e9 dd 01 00 00	 jmp	 $LN57@IsDirKeyRe
$LN36@IsDirKeyRe:

; 2509 : 	case DKI_LEFT:
; 2510 : 		if( m_bInputProcessAI )

  000d6	38 8e 4b 01 00
	00		 cmp	 BYTE PTR [esi+331], cl
  000dc	74 0a		 je	 SHORT $LN35@IsDirKeyRe

; 2511 : 		{
; 2512 : 			if( m_AIKeys.m_wLeftKey == KEY_RELEASE )

  000de	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1

; 2513 : 				bRelease = true;
; 2514 : 		}
; 2515 : 		else

  000e3	e9 d6 01 00 00	 jmp	 $LN56@IsDirKeyRe
$LN35@IsDirKeyRe:

; 2516 : 		{
; 2517 : 			if( g_Input.GetKeyState( m_Keys.m_wLeftKey ) == KEY_RELEASE ||
; 2518 : 				g_Input.GetKeyState( m_SecondKeys.m_wLeftKey) == KEY_RELEASE ||
; 2519 : 				g_Input.GetKeyState( m_JoyKeys.m_wLeftKey) == KEY_RELEASE )

  000e8	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  000ed	66 8b 56 0e	 mov	 dx, WORD PTR [esi+14]
  000f1	8b c8		 mov	 ecx, eax
  000f3	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  000f8	66 83 f8 01	 cmp	 ax, 1
  000fc	0f 84 be 01 00
	00		 je	 $LN1@IsDirKeyRe
  00102	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00107	66 8b 56 2c	 mov	 dx, WORD PTR [esi+44]
  0010b	8b c8		 mov	 ecx, eax
  0010d	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00112	66 83 f8 01	 cmp	 ax, 1
  00116	0f 84 a4 01 00
	00		 je	 $LN1@IsDirKeyRe
  0011c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00121	66 8b 56 4a	 mov	 dx, WORD PTR [esi+74]

; 2520 : 				bRelease = true;
; 2521 : 		}
; 2522 : 		break;

  00125	e9 89 01 00 00	 jmp	 $LN57@IsDirKeyRe
$LN30@IsDirKeyRe:

; 2523 : 	case DKI_RIGHT:
; 2524 : 		if( m_bInputProcessAI )

  0012a	38 8e 4b 01 00
	00		 cmp	 BYTE PTR [esi+331], cl
  00130	74 0a		 je	 SHORT $LN29@IsDirKeyRe

; 2525 : 		{
; 2526 : 			if( m_AIKeys.m_wRightKey == KEY_RELEASE )

  00132	66 83 7e 6a 01	 cmp	 WORD PTR [esi+106], 1

; 2527 : 				bRelease = true;
; 2528 : 		}
; 2529 : 		else

  00137	e9 82 01 00 00	 jmp	 $LN56@IsDirKeyRe
$LN29@IsDirKeyRe:

; 2530 : 		{
; 2531 : 			if( g_Input.GetKeyState( m_Keys.m_wRightKey ) == KEY_RELEASE ||
; 2532 : 				g_Input.GetKeyState( m_SecondKeys.m_wRightKey) == KEY_RELEASE ||
; 2533 : 				g_Input.GetKeyState( m_JoyKeys.m_wRightKey) == KEY_RELEASE )

  0013c	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00141	66 8b 56 10	 mov	 dx, WORD PTR [esi+16]
  00145	8b c8		 mov	 ecx, eax
  00147	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0014c	66 83 f8 01	 cmp	 ax, 1
  00150	0f 84 6a 01 00
	00		 je	 $LN1@IsDirKeyRe
  00156	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0015b	66 8b 56 2e	 mov	 dx, WORD PTR [esi+46]
  0015f	8b c8		 mov	 ecx, eax
  00161	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00166	66 83 f8 01	 cmp	 ax, 1
  0016a	0f 84 50 01 00
	00		 je	 $LN1@IsDirKeyRe
  00170	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00175	66 8b 56 4c	 mov	 dx, WORD PTR [esi+76]

; 2534 : 				bRelease = true;
; 2535 : 		}
; 2536 : 		break;

  00179	e9 35 01 00 00	 jmp	 $LN57@IsDirKeyRe
$LN24@IsDirKeyRe:

; 2537 : 	case DKI_RIGHTUP:
; 2538 : 		if( m_bInputProcessAI )

  0017e	38 8e 4b 01 00
	00		 cmp	 BYTE PTR [esi+331], cl
  00184	74 0a		 je	 SHORT $LN23@IsDirKeyRe

; 2539 : 		{
; 2540 : 			if( m_AIKeys.m_wRightUpKey == KEY_RELEASE )

  00186	66 83 7e 74 01	 cmp	 WORD PTR [esi+116], 1

; 2541 : 				bRelease = true;
; 2542 : 		}
; 2543 : 		else

  0018b	e9 2e 01 00 00	 jmp	 $LN56@IsDirKeyRe
$LN23@IsDirKeyRe:

; 2544 : 		{
; 2545 : 			if( g_Input.GetKeyState( m_Keys.m_wRightUpKey ) == KEY_RELEASE ||
; 2546 : 				g_Input.GetKeyState( m_SecondKeys.m_wRightUpKey) == KEY_RELEASE ||
; 2547 : 				g_Input.GetKeyState( m_JoyKeys.m_wRightUpKey) == KEY_RELEASE )

  00190	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00195	66 8b 56 1a	 mov	 dx, WORD PTR [esi+26]
  00199	8b c8		 mov	 ecx, eax
  0019b	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  001a0	66 83 f8 01	 cmp	 ax, 1
  001a4	0f 84 16 01 00
	00		 je	 $LN1@IsDirKeyRe
  001aa	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  001af	66 8b 56 38	 mov	 dx, WORD PTR [esi+56]
  001b3	8b c8		 mov	 ecx, eax
  001b5	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  001ba	66 83 f8 01	 cmp	 ax, 1
  001be	0f 84 fc 00 00
	00		 je	 $LN1@IsDirKeyRe
  001c4	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  001c9	66 8b 56 56	 mov	 dx, WORD PTR [esi+86]

; 2548 : 				bRelease = true;
; 2549 : 		}
; 2550 : 		break;

  001cd	e9 e1 00 00 00	 jmp	 $LN57@IsDirKeyRe
$LN18@IsDirKeyRe:

; 2551 : 	case DKI_RIGHTDOWN:
; 2552 : 		if( m_bInputProcessAI )

  001d2	38 8e 4b 01 00
	00		 cmp	 BYTE PTR [esi+331], cl
  001d8	74 0a		 je	 SHORT $LN17@IsDirKeyRe

; 2553 : 		{
; 2554 : 			if( m_AIKeys.m_wRightDownKey == KEY_RELEASE )

  001da	66 83 7e 76 01	 cmp	 WORD PTR [esi+118], 1

; 2555 : 				bRelease = true;
; 2556 : 		}
; 2557 : 		else

  001df	e9 da 00 00 00	 jmp	 $LN56@IsDirKeyRe
$LN17@IsDirKeyRe:

; 2558 : 		{
; 2559 : 			if( g_Input.GetKeyState( m_Keys.m_wRightDownKey ) == KEY_RELEASE ||
; 2560 : 				g_Input.GetKeyState( m_SecondKeys.m_wRightDownKey) == KEY_RELEASE ||
; 2561 : 				g_Input.GetKeyState( m_JoyKeys.m_wRightDownKey) == KEY_RELEASE )

  001e4	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  001e9	66 8b 56 1c	 mov	 dx, WORD PTR [esi+28]
  001ed	8b c8		 mov	 ecx, eax
  001ef	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  001f4	66 83 f8 01	 cmp	 ax, 1
  001f8	0f 84 c2 00 00
	00		 je	 $LN1@IsDirKeyRe
  001fe	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00203	66 8b 56 3a	 mov	 dx, WORD PTR [esi+58]
  00207	8b c8		 mov	 ecx, eax
  00209	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0020e	66 83 f8 01	 cmp	 ax, 1
  00212	0f 84 a8 00 00
	00		 je	 $LN1@IsDirKeyRe
  00218	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0021d	66 8b 56 58	 mov	 dx, WORD PTR [esi+88]

; 2562 : 				bRelease = true;
; 2563 : 		}
; 2564 : 		break;

  00221	e9 8d 00 00 00	 jmp	 $LN57@IsDirKeyRe
$LN12@IsDirKeyRe:

; 2565 : 	case DKI_LEFTDOWN:
; 2566 : 		if( m_bInputProcessAI )

  00226	38 8e 4b 01 00
	00		 cmp	 BYTE PTR [esi+331], cl
  0022c	74 0a		 je	 SHORT $LN11@IsDirKeyRe

; 2567 : 		{
; 2568 : 			if( m_AIKeys.m_wLeftDownKey == KEY_RELEASE )

  0022e	66 83 7e 72 01	 cmp	 WORD PTR [esi+114], 1

; 2569 : 				bRelease = true;
; 2570 : 		}
; 2571 : 		else

  00233	e9 86 00 00 00	 jmp	 $LN56@IsDirKeyRe
$LN11@IsDirKeyRe:

; 2572 : 		{
; 2573 : 			if( g_Input.GetKeyState( m_Keys.m_wLeftDownKey ) == KEY_RELEASE ||
; 2574 : 				g_Input.GetKeyState( m_SecondKeys.m_wLeftDownKey) == KEY_RELEASE ||
; 2575 : 				g_Input.GetKeyState( m_JoyKeys.m_wLeftDownKey) == KEY_RELEASE )

  00238	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  0023d	66 8b 56 18	 mov	 dx, WORD PTR [esi+24]
  00241	8b c8		 mov	 ecx, eax
  00243	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  00248	66 83 f8 01	 cmp	 ax, 1
  0024c	74 72		 je	 SHORT $LN1@IsDirKeyRe
  0024e	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00253	66 8b 56 36	 mov	 dx, WORD PTR [esi+54]
  00257	8b c8		 mov	 ecx, eax
  00259	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0025e	66 83 f8 01	 cmp	 ax, 1
  00262	74 5c		 je	 SHORT $LN1@IsDirKeyRe
  00264	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00269	66 8b 56 54	 mov	 dx, WORD PTR [esi+84]

; 2576 : 				bRelease = true;
; 2577 : 		}
; 2578 : 		break;

  0026d	eb 44		 jmp	 SHORT $LN57@IsDirKeyRe
$LN6@IsDirKeyRe:

; 2579 : 	case DKI_LEFTUP:
; 2580 : 		if( m_bInputProcessAI )

  0026f	38 8e 4b 01 00
	00		 cmp	 BYTE PTR [esi+331], cl
  00275	74 07		 je	 SHORT $LN5@IsDirKeyRe

; 2581 : 		{
; 2582 : 			if( m_AIKeys.m_wLeftUpKey == KEY_RELEASE )

  00277	66 83 7e 70 01	 cmp	 WORD PTR [esi+112], 1

; 2583 : 				bRelease = true;
; 2584 : 		}
; 2585 : 		else

  0027c	eb 40		 jmp	 SHORT $LN56@IsDirKeyRe
$LN5@IsDirKeyRe:

; 2586 : 		{
; 2587 : 			if( g_Input.GetKeyState( m_Keys.m_wLeftUpKey ) == KEY_RELEASE ||
; 2588 : 				g_Input.GetKeyState( m_SecondKeys.m_wLeftUpKey) == KEY_RELEASE ||
; 2589 : 				g_Input.GetKeyState( m_JoyKeys.m_wLeftUpKey) == KEY_RELEASE )

  0027e	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00283	66 8b 56 16	 mov	 dx, WORD PTR [esi+22]
  00287	8b c8		 mov	 ecx, eax
  00289	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  0028e	66 83 f8 01	 cmp	 ax, 1
  00292	74 2c		 je	 SHORT $LN1@IsDirKeyRe
  00294	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  00299	66 8b 56 34	 mov	 dx, WORD PTR [esi+52]
  0029d	8b c8		 mov	 ecx, eax
  0029f	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  002a4	66 83 f8 01	 cmp	 ax, 1
  002a8	74 16		 je	 SHORT $LN1@IsDirKeyRe
  002aa	e8 00 00 00 00	 call	 ?GetSingleton@CDirectInput@@SAAAV1@XZ ; CDirectInput::GetSingleton
  002af	66 8b 56 52	 mov	 dx, WORD PTR [esi+82]
$LN57@IsDirKeyRe:
  002b3	8b c8		 mov	 ecx, eax
  002b5	e8 00 00 00 00	 call	 ?GetKeyState@CDirectInput@@QAIGG@Z ; CDirectInput::GetKeyState
  002ba	66 83 f8 01	 cmp	 ax, 1
$LN56@IsDirKeyRe:
  002be	75 02		 jne	 SHORT $LN2@IsDirKeyRe
$LN1@IsDirKeyRe:

; 2590 : 				bRelease = true;

  002c0	b3 01		 mov	 bl, 1
$LN2@IsDirKeyRe:

; 2591 : 		}
; 2592 : 		break;
; 2593 : 	}
; 2594 : 
; 2595 : 	return bRelease;

  002c2	8a c3		 mov	 al, bl
  002c4	5b		 pop	 ebx
$LN52@IsDirKeyRe:
  002c5	5e		 pop	 esi

; 2596 : }

  002c6	5d		 pop	 ebp
  002c7	c2 04 00	 ret	 4
  002ca	8b ff		 npad	 2
$LN58@IsDirKeyRe:
  002cc	00 00 00 00	 DD	 $LN48@IsDirKeyRe
  002d0	00 00 00 00	 DD	 $LN24@IsDirKeyRe
  002d4	00 00 00 00	 DD	 $LN30@IsDirKeyRe
  002d8	00 00 00 00	 DD	 $LN18@IsDirKeyRe
  002dc	00 00 00 00	 DD	 $LN42@IsDirKeyRe
  002e0	00 00 00 00	 DD	 $LN12@IsDirKeyRe
  002e4	00 00 00 00	 DD	 $LN36@IsDirKeyRe
  002e8	00 00 00 00	 DD	 $LN6@IsDirKeyRe
?IsDirKeyRelease@ioUserKeyInput@@QAE_NW4DirKeyInput@1@@Z ENDP ; ioUserKeyInput::IsDirKeyRelease
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBEAAKXZ ; std::_Vector_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBEAAKXZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBEAAKXZ PROC ; std::_Vector_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBEAAKXZ ENDP ; std::_Vector_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator++
_TEXT	ENDS
PUBLIC	??1?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::~_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ PROC ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::~_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::~_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAEPAUtagDirKeyTime@ioUserKeyInput@@I@Z ; std::allocator<ioUserKeyInput::tagDirKeyTime>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAEPAUtagDirKeyTime@ioUserKeyInput@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAEPAUtagDirKeyTime@ioUserKeyInput@@I@Z PROC ; std::allocator<ioUserKeyInput::tagDirKeyTime>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UtagDirKeyTime@ioUserKeyInput@@@std@@YAPAUtagDirKeyTime@ioUserKeyInput@@IPAU12@@Z ; std::_Allocate<ioUserKeyInput::tagDirKeyTime>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAEPAUtagDirKeyTime@ioUserKeyInput@@I@Z ENDP ; std::allocator<ioUserKeyInput::tagDirKeyTime>::allocate
_TEXT	ENDS
PUBLIC	??D?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEAAUtagDirKeyTime@ioUserKeyInput@@XZ ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\deque
;	COMDAT ??D?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEAAUtagDirKeyTime@ioUserKeyInput@@XZ
_TEXT	SEGMENT
??D?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEAAUtagDirKeyTime@ioUserKeyInput@@XZ PROC ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator*, COMDAT
; _this$ = ecx

; 619  : 		return ((reference)**(_Mybase *)this);

  00000	e9 00 00 00 00	 jmp	 ??D?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEABUtagDirKeyTime@ioUserKeyInput@@XZ ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator*
??D?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEAAUtagDirKeyTime@ioUserKeyInput@@XZ ENDP ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator*
_TEXT	ENDS
PUBLIC	?max_size@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEIXZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEIXZ PROC ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::max_size, COMDAT
; _this$ = ecx

; 1155 : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 1156 : 		}

  00005	c3		 ret	 0
?max_size@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEIXZ ENDP ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@QAEPAPAUtagDirKeyTime@ioUserKeyInput@@I@Z ; std::allocator<ioUserKeyInput::tagDirKeyTime *>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@QAEPAPAUtagDirKeyTime@ioUserKeyInput@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@QAEPAPAUtagDirKeyTime@ioUserKeyInput@@I@Z PROC ; std::allocator<ioUserKeyInput::tagDirKeyTime *>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@PAUtagDirKeyTime@ioUserKeyInput@@@std@@YAPAPAUtagDirKeyTime@ioUserKeyInput@@IPAPAU12@@Z ; std::_Allocate<ioUserKeyInput::tagDirKeyTime *>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@QAEPAPAUtagDirKeyTime@ioUserKeyInput@@I@Z ENDP ; std::allocator<ioUserKeyInput::tagDirKeyTime *>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
; Function compile flags: /Ogsp
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\deque
;	COMDAT ??0?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z PROC ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >, COMDAT
; _this$ = ecx

; 310  : 	_Deque_const_iterator(size_type _Off, const _Container_base12 *_Pdeque)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 311  : 		{	// construct with offset _Off in *_Pdeque
; 312  : 		_Setcont((_Mydeque *)_Pdeque);

  00005	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdeque$[ebp]
  00008	83 20 00	 and	 DWORD PTR [eax], 0
  0000b	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  0000f	85 c9		 test	 ecx, ecx
  00011	74 04		 je	 SHORT $LN7@Deque_cons
  00013	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00015	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@Deque_cons:

; 313  : 		_Myoff = _Off;

  00017	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0001a	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 314  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ENDP ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
_TEXT	ENDS
PUBLIC	??G?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEHABV01@@Z ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator-
; Function compile flags: /Ogsp
;	COMDAT ??G?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator-, COMDAT
; _this$ = ecx

; 461  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 462  : 		_Compat(_Right);
; 463  : 		return (_Right._Myoff <= this->_Myoff
; 464  : 			? this->_Myoff - _Right._Myoff
; 465  : 			: -(difference_type)(_Right._Myoff - this->_Myoff));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00009	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000c	2b c2		 sub	 eax, edx

; 466  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??G?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator-
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@K@std@@KK@std@@YAXAAV?$allocator@K@0@PAK$$QAK@Z ; std::_Cons_val<std::allocator<unsigned long>,unsigned long,unsigned long>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@K@std@@KK@std@@YAXAAV?$allocator@K@0@PAK$$QAK@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@K@std@@KK@std@@YAXAAV?$allocator@K@0@PAK$$QAK@Z PROC ; std::_Cons_val<std::allocator<unsigned long>,unsigned long,unsigned long>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@Cons_val:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@K@std@@KK@std@@YAXAAV?$allocator@K@0@PAK$$QAK@Z ENDP ; std::_Cons_val<std::allocator<unsigned long>,unsigned long,unsigned long>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PAPAUtagDirKeyTime@ioUserKeyInput@@PAPAU12@V?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@@std@@YAPAPAUtagDirKeyTime@ioUserKeyInput@@PAPAU12@00AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@@Z ; std::_Uninitialized_copy<ioUserKeyInput::tagDirKeyTime * *,ioUserKeyInput::tagDirKeyTime * *,std::allocator<ioUserKeyInput::tagDirKeyTime *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@PAPAUtagDirKeyTime@ioUserKeyInput@@PAPAU12@V?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@@std@@YAPAPAUtagDirKeyTime@ioUserKeyInput@@PAPAU12@00AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@@Z
_TEXT	SEGMENT
__Cat$509081 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAPAUtagDirKeyTime@ioUserKeyInput@@PAPAU12@V?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@@std@@YAPAPAUtagDirKeyTime@ioUserKeyInput@@PAPAU12@00AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@@Z PROC ; std::_Uninitialized_copy<ioUserKeyInput::tagDirKeyTime * *,ioUserKeyInput::tagDirKeyTime * *,std::allocator<ioUserKeyInput::tagDirKeyTime *> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$509081[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUtagDirKeyTime@ioUserKeyInput@@PAU12@@std@@YAPAPAUtagDirKeyTime@ioUserKeyInput@@PAPAU12@00AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<ioUserKeyInput::tagDirKeyTime *,ioUserKeyInput::tagDirKeyTime *>
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@PAPAUtagDirKeyTime@ioUserKeyInput@@PAPAU12@V?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@@std@@YAPAPAUtagDirKeyTime@ioUserKeyInput@@PAPAU12@00AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@@Z ENDP ; std::_Uninitialized_copy<ioUserKeyInput::tagDirKeyTime * *,ioUserKeyInput::tagDirKeyTime * *,std::allocator<ioUserKeyInput::tagDirKeyTime *> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@0AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@@Z ; std::_Destroy_range<std::allocator<ioUserKeyInput::tagDirKeyTime *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@0AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@0AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ioUserKeyInput::tagDirKeyTime *> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@0AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioUserKeyInput::tagDirKeyTime *> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAEXPAUtagDirKeyTime@ioUserKeyInput@@ABU34@@Z ; std::allocator<ioUserKeyInput::tagDirKeyTime>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAEXPAUtagDirKeyTime@ioUserKeyInput@@ABU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAEXPAUtagDirKeyTime@ioUserKeyInput@@ABU34@@Z PROC ; std::allocator<ioUserKeyInput::tagDirKeyTime>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN5@construct@2
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN5@construct@2:

; 198  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?construct@?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAEXPAUtagDirKeyTime@ioUserKeyInput@@ABU34@@Z ENDP ; std::allocator<ioUserKeyInput::tagDirKeyTime>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAEXPAUtagDirKeyTime@ioUserKeyInput@@@Z ; std::allocator<ioUserKeyInput::tagDirKeyTime>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAEXPAUtagDirKeyTime@ioUserKeyInput@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAEXPAUtagDirKeyTime@ioUserKeyInput@@@Z PROC ; std::allocator<ioUserKeyInput::tagDirKeyTime>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAEXPAUtagDirKeyTime@ioUserKeyInput@@@Z ENDP ; std::allocator<ioUserKeyInput::tagDirKeyTime>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@QAEXPAPAUtagDirKeyTime@ioUserKeyInput@@@Z ; std::allocator<ioUserKeyInput::tagDirKeyTime *>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@QAEXPAPAUtagDirKeyTime@ioUserKeyInput@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@QAEXPAPAUtagDirKeyTime@ioUserKeyInput@@@Z PROC ; std::allocator<ioUserKeyInput::tagDirKeyTime *>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@QAEXPAPAUtagDirKeyTime@ioUserKeyInput@@@Z ENDP ; std::allocator<ioUserKeyInput::tagDirKeyTime *>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z ; std::allocator<std::_Container_proxy>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z PROC ; std::allocator<std::_Container_proxy>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@construct@3
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@construct@3:

; 203  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z ENDP ; std::allocator<std::_Container_proxy>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z ; std::allocator<std::_Container_proxy>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z PROC ; std::allocator<std::_Container_proxy>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z ENDP ; std::allocator<std::_Container_proxy>::destroy
_TEXT	ENDS
PUBLIC	??$_Uninit_def_fill_n@PAUtagDirKeyTime@ioUserKeyInput@@IPAU12@PAU12@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@IPBQAU12@AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_def_fill_n<ioUserKeyInput::tagDirKeyTime *,unsigned int,ioUserKeyInput::tagDirKeyTime *,ioUserKeyInput::tagDirKeyTime *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_def_fill_n@PAUtagDirKeyTime@ioUserKeyInput@@IPAU12@PAU12@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@IPBQAU12@AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
$T509150 = -4						; size = 4
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_def_fill_n@PAUtagDirKeyTime@ioUserKeyInput@@IPAU12@PAU12@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@IPBQAU12@AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_def_fill_n<ioUserKeyInput::tagDirKeyTime *,unsigned int,ioUserKeyInput::tagDirKeyTime *,ioUserKeyInput::tagDirKeyTime *>, COMDAT

; 660  : 	{	// copy _Count * _Valty() to raw _First, using _Al, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 661  : 	_Fill_n(_First, _Count, (_Valty)0);

  00004	83 65 fc 00	 and	 DWORD PTR $T509150[ebp], 0
  00008	8d 45 fc	 lea	 eax, DWORD PTR $T509150[ebp]
  0000b	50		 push	 eax
  0000c	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00012	e8 00 00 00 00	 call	 ??$_Fill_n@PAPAUtagDirKeyTime@ioUserKeyInput@@IPAU12@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@IABQAU12@@Z ; std::_Fill_n<ioUserKeyInput::tagDirKeyTime * *,unsigned int,ioUserKeyInput::tagDirKeyTime *>
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 662  : 	}

  0001a	c9		 leave
  0001b	c3		 ret	 0
??$_Uninit_def_fill_n@PAUtagDirKeyTime@ioUserKeyInput@@IPAU12@PAU12@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@IPBQAU12@AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_def_fill_n<ioUserKeyInput::tagDirKeyTime *,unsigned int,ioUserKeyInput::tagDirKeyTime *,ioUserKeyInput::tagDirKeyTime *>
_TEXT	ENDS
PUBLIC	??E?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAV01@XZ ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\deque
;	COMDAT ??E?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator++, COMDAT
; _this$ = ecx

; 628  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 629  : 		++*(_Mybase *)this;

  00002	ff 40 08	 inc	 DWORD PTR [eax+8]

; 630  : 		return (*this);
; 631  : 		}

  00005	c3		 ret	 0
??E?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator++
_TEXT	ENDS
PUBLIC	??F?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAV01@XZ ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator--
; Function compile flags: /Ogsp
;	COMDAT ??F?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator--, COMDAT
; _this$ = ecx

; 641  : 		{	// predecrement

  00000	8b c1		 mov	 eax, ecx

; 642  : 		--*(_Mybase *)this;

  00002	ff 48 08	 dec	 DWORD PTR [eax+8]

; 643  : 		return (*this);
; 644  : 		}

  00005	c3		 ret	 0
??F?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator--
_TEXT	ENDS
PUBLIC	??9?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator!=, COMDAT
; _this$ = ecx

; 480  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  : 		return (!(*this == _Right));

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00009	33 c9		 xor	 ecx, ecx
  0000b	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  0000e	0f 95 c0	 setne	 al

; 482  : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??9?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator!=
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAEXPAUtagDirKeyTime@ioUserKeyInput@@$$QAU34@@Z ; std::allocator<ioUserKeyInput::tagDirKeyTime>::construct
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAEXPAUtagDirKeyTime@ioUserKeyInput@@$$QAU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAEXPAUtagDirKeyTime@ioUserKeyInput@@$$QAU34@@Z PROC ; std::allocator<ioUserKeyInput::tagDirKeyTime>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@construct@4
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@construct@4:

; 203  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?construct@?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@QAEXPAUtagDirKeyTime@ioUserKeyInput@@$$QAU34@@Z ENDP ; std::allocator<ioUserKeyInput::tagDirKeyTime>::construct
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@KV?$allocator@K@std@@@std@@QAE@V?$allocator@K@1@@Z ; std::_Vector_val<unsigned long,std::allocator<unsigned long> >::_Vector_val<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@KV?$allocator@K@std@@@std@@QAE@V?$allocator@K@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@KV?$allocator@K@std@@@std@@QAE@V?$allocator@K@1@@Z PROC ; std::_Vector_val<unsigned long,std::allocator<unsigned long> >::_Vector_val<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@KV?$allocator@K@std@@@std@@QAE@V?$allocator@K@1@@Z ENDP ; std::_Vector_val<unsigned long,std::allocator<unsigned long> >::_Vector_val<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@KV?$allocator@K@std@@@std@@IBEII@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@KV?$allocator@K@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@KV?$allocator@K@std@@@std@@IBEII@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  0000d	c1 f8 02	 sar	 eax, 2
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00023	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?_Grow_to@?$vector@KV?$allocator@K@std@@@std@@IBEII@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAE@PAKPBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::_Vector_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAE@PAKPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAE@PAKPBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::_Vector_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAE@PAKPBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::_Vector_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@K@std@@QAEPAKI@Z		; std::allocator<unsigned long>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@K@std@@QAEPAKI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@K@std@@QAEPAKI@Z PROC		; std::allocator<unsigned long>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@K@std@@YAPAKIPAK@Z ; std::_Allocate<unsigned long>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@K@std@@QAEPAKI@Z ENDP		; std::allocator<unsigned long>::allocate
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator==
_TEXT	ENDS
PUBLIC	??$_Move@PAKPAK@std@@YAPAKPAK00@Z		; std::_Move<unsigned long *,unsigned long *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAKPAK@std@@YAPAKPAK00@Z
_TEXT	SEGMENT
__Cat$509249 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAKPAK@std@@YAPAKPAK00@Z PROC			; std::_Move<unsigned long *,unsigned long *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$509249[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAKPAK@std@@YAPAKPAK00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<unsigned long *,unsigned long *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAKPAK@std@@YAPAKPAK00@Z ENDP			; std::_Move<unsigned long *,unsigned long *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z ; std::_Destroy_range<std::allocator<unsigned long> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned long> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAKPAKV?$allocator@K@std@@@std@@YAPAKPAK00AAV?$allocator@K@0@@Z ; std::_Uninitialized_move<unsigned long *,unsigned long *,std::allocator<unsigned long> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAKPAKV?$allocator@K@std@@@std@@YAPAKPAK00AAV?$allocator@K@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAKPAKV?$allocator@K@std@@@std@@YAPAKPAK00AAV?$allocator@K@0@@Z PROC ; std::_Uninitialized_move<unsigned long *,unsigned long *,std::allocator<unsigned long> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2
  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 472  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAKPAKV?$allocator@K@std@@@std@@YAPAKPAK00AAV?$allocator@K@0@@Z ENDP ; std::_Uninitialized_move<unsigned long *,unsigned long *,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	?EvaluateRealKey@ioUserKeyInput@@AAEXXZ		; ioUserKeyInput::EvaluateRealKey
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iouserkeyinput.cpp
;	COMDAT ?EvaluateRealKey@ioUserKeyInput@@AAEXXZ
_TEXT	SEGMENT
?EvaluateRealKey@ioUserKeyInput@@AAEXXZ PROC		; ioUserKeyInput::EvaluateRealKey, COMDAT
; _this$ = ecx

; 313  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 314  : 	m_bUpKey		= false;

  00003	c7 86 3f 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+319], 0

; 315  : 	m_bRightUpKey	= false;
; 316  : 	m_bRightKey		= false;
; 317  : 	m_bRightDownKey	= false;
; 318  : 	m_bDownKey		= false;

  0000d	c7 86 43 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+323], 0

; 319  : 	m_bLeftDownKey	= false;
; 320  : 	m_bLeftKey		= false;
; 321  : 	m_bLeftUpKey	= false;
; 322  : 
; 323  : 	if( IsUpKeyDown() && !IsDownKeyDown() )

  00017	e8 00 00 00 00	 call	 ?IsUpKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsUpKeyDown
  0001c	84 c0		 test	 al, al
  0001e	74 12		 je	 SHORT $LN24@EvaluateRe
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?IsDownKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsDownKeyDown
  00027	84 c0		 test	 al, al
  00029	75 07		 jne	 SHORT $LN24@EvaluateRe

; 324  : 		m_bUpKey = true;

  0002b	c6 86 3f 01 00
	00 01		 mov	 BYTE PTR [esi+319], 1
$LN24@EvaluateRe:

; 325  : 	if( IsDownKeyDown() && !IsUpKeyDown() )

  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?IsDownKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsDownKeyDown
  00039	84 c0		 test	 al, al
  0003b	74 12		 je	 SHORT $LN23@EvaluateRe
  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ?IsUpKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsUpKeyDown
  00044	84 c0		 test	 al, al
  00046	75 07		 jne	 SHORT $LN23@EvaluateRe

; 326  : 		m_bDownKey = true;

  00048	c6 86 43 01 00
	00 01		 mov	 BYTE PTR [esi+323], 1
$LN23@EvaluateRe:

; 327  : 
; 328  : 	if( IsUpKeyDown() && IsDownKeyDown() )

  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?IsUpKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsUpKeyDown
  00056	84 c0		 test	 al, al
  00058	74 2d		 je	 SHORT $LN19@EvaluateRe
  0005a	8b ce		 mov	 ecx, esi
  0005c	e8 00 00 00 00	 call	 ?IsDownKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsDownKeyDown
  00061	84 c0		 test	 al, al
  00063	74 22		 je	 SHORT $LN19@EvaluateRe

; 329  : 	{
; 330  : 		if( m_dwUpPressTime > m_dwDownPressTime )

  00065	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  0006b	8b 8e d0 00 00
	00		 mov	 ecx, DWORD PTR [esi+208]
  00071	3b c1		 cmp	 eax, ecx
  00073	76 09		 jbe	 SHORT $LN27@EvaluateRe

; 331  : 			m_bUpKey = true;

  00075	c6 86 3f 01 00
	00 01		 mov	 BYTE PTR [esi+319], 1
  0007c	eb 09		 jmp	 SHORT $LN19@EvaluateRe
$LN27@EvaluateRe:

; 332  : 		else if( m_dwUpPressTime < m_dwDownPressTime )

  0007e	73 07		 jae	 SHORT $LN19@EvaluateRe

; 333  : 			m_bDownKey = true;

  00080	c6 86 43 01 00
	00 01		 mov	 BYTE PTR [esi+323], 1
$LN19@EvaluateRe:

; 334  : 	}
; 335  : 
; 336  : 	if( IsLeftKeyDown() && !IsRightKeyDown() )

  00087	8b ce		 mov	 ecx, esi
  00089	e8 00 00 00 00	 call	 ?IsLeftKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsLeftKeyDown
  0008e	84 c0		 test	 al, al
  00090	74 12		 je	 SHORT $LN18@EvaluateRe
  00092	8b ce		 mov	 ecx, esi
  00094	e8 00 00 00 00	 call	 ?IsRightKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsRightKeyDown
  00099	84 c0		 test	 al, al
  0009b	75 07		 jne	 SHORT $LN18@EvaluateRe

; 337  : 		m_bLeftKey = true;

  0009d	c6 86 45 01 00
	00 01		 mov	 BYTE PTR [esi+325], 1
$LN18@EvaluateRe:

; 338  : 	if( IsRightKeyDown() && !IsLeftKeyDown() )

  000a4	8b ce		 mov	 ecx, esi
  000a6	e8 00 00 00 00	 call	 ?IsRightKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsRightKeyDown
  000ab	84 c0		 test	 al, al
  000ad	74 12		 je	 SHORT $LN17@EvaluateRe
  000af	8b ce		 mov	 ecx, esi
  000b1	e8 00 00 00 00	 call	 ?IsLeftKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsLeftKeyDown
  000b6	84 c0		 test	 al, al
  000b8	75 07		 jne	 SHORT $LN17@EvaluateRe

; 339  : 		m_bRightKey = true;

  000ba	c6 86 41 01 00
	00 01		 mov	 BYTE PTR [esi+321], 1
$LN17@EvaluateRe:

; 340  : 
; 341  : 	if( IsLeftKeyDown() && IsRightKeyDown() )

  000c1	8b ce		 mov	 ecx, esi
  000c3	e8 00 00 00 00	 call	 ?IsLeftKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsLeftKeyDown
  000c8	84 c0		 test	 al, al
  000ca	74 2d		 je	 SHORT $LN13@EvaluateRe
  000cc	8b ce		 mov	 ecx, esi
  000ce	e8 00 00 00 00	 call	 ?IsRightKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsRightKeyDown
  000d3	84 c0		 test	 al, al
  000d5	74 22		 je	 SHORT $LN13@EvaluateRe

; 342  : 	{
; 343  : 		if( m_dwLeftPressTime > m_dwRightPressTime )

  000d7	8b 86 c4 00 00
	00		 mov	 eax, DWORD PTR [esi+196]
  000dd	8b 8e c8 00 00
	00		 mov	 ecx, DWORD PTR [esi+200]
  000e3	3b c1		 cmp	 eax, ecx
  000e5	76 09		 jbe	 SHORT $LN28@EvaluateRe

; 344  : 			m_bLeftKey = true;

  000e7	c6 86 45 01 00
	00 01		 mov	 BYTE PTR [esi+325], 1
  000ee	eb 09		 jmp	 SHORT $LN13@EvaluateRe
$LN28@EvaluateRe:

; 345  : 		else if( m_dwLeftPressTime < m_dwRightPressTime )

  000f0	73 07		 jae	 SHORT $LN13@EvaluateRe

; 346  : 			m_bRightKey = true;

  000f2	c6 86 41 01 00
	00 01		 mov	 BYTE PTR [esi+321], 1
$LN13@EvaluateRe:

; 347  : 	}
; 348  : 
; 349  : 	if( IsRightUpKeyDown() && !IsLeftDownKeyDown() )

  000f9	8b ce		 mov	 ecx, esi
  000fb	e8 00 00 00 00	 call	 ?IsRightUpKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsRightUpKeyDown
  00100	84 c0		 test	 al, al
  00102	74 12		 je	 SHORT $LN12@EvaluateRe
  00104	8b ce		 mov	 ecx, esi
  00106	e8 00 00 00 00	 call	 ?IsLeftDownKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsLeftDownKeyDown
  0010b	84 c0		 test	 al, al
  0010d	75 07		 jne	 SHORT $LN12@EvaluateRe

; 350  : 		m_bRightUpKey = true;

  0010f	c6 86 40 01 00
	00 01		 mov	 BYTE PTR [esi+320], 1
$LN12@EvaluateRe:

; 351  : 	if( IsRightDownKeyDown() && !IsLeftUpKeyDown() )

  00116	8b ce		 mov	 ecx, esi
  00118	e8 00 00 00 00	 call	 ?IsRightDownKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsRightDownKeyDown
  0011d	84 c0		 test	 al, al
  0011f	74 12		 je	 SHORT $LN11@EvaluateRe
  00121	8b ce		 mov	 ecx, esi
  00123	e8 00 00 00 00	 call	 ?IsLeftUpKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsLeftUpKeyDown
  00128	84 c0		 test	 al, al
  0012a	75 07		 jne	 SHORT $LN11@EvaluateRe

; 352  : 		m_bRightDownKey = true;

  0012c	c6 86 42 01 00
	00 01		 mov	 BYTE PTR [esi+322], 1
$LN11@EvaluateRe:

; 353  : 
; 354  : 	if( IsRightUpKeyDown() && IsLeftDownKeyDown() )

  00133	8b ce		 mov	 ecx, esi
  00135	e8 00 00 00 00	 call	 ?IsRightUpKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsRightUpKeyDown
  0013a	84 c0		 test	 al, al
  0013c	74 2d		 je	 SHORT $LN7@EvaluateRe
  0013e	8b ce		 mov	 ecx, esi
  00140	e8 00 00 00 00	 call	 ?IsLeftDownKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsLeftDownKeyDown
  00145	84 c0		 test	 al, al
  00147	74 22		 je	 SHORT $LN7@EvaluateRe

; 355  : 	{
; 356  : 		if( m_dwRightUpPressTime > m_dwLeftDownPressTime )

  00149	8b 86 e0 00 00
	00		 mov	 eax, DWORD PTR [esi+224]
  0014f	8b 8e dc 00 00
	00		 mov	 ecx, DWORD PTR [esi+220]
  00155	3b c1		 cmp	 eax, ecx
  00157	76 09		 jbe	 SHORT $LN29@EvaluateRe

; 357  : 			m_bRightUpKey = true;

  00159	c6 86 40 01 00
	00 01		 mov	 BYTE PTR [esi+320], 1
  00160	eb 09		 jmp	 SHORT $LN7@EvaluateRe
$LN29@EvaluateRe:

; 358  : 		else if( m_dwRightUpPressTime < m_dwLeftDownPressTime )

  00162	73 07		 jae	 SHORT $LN7@EvaluateRe

; 359  : 			m_bLeftDownKey = true;

  00164	c6 86 44 01 00
	00 01		 mov	 BYTE PTR [esi+324], 1
$LN7@EvaluateRe:

; 360  : 	}
; 361  : 
; 362  : 	if( IsLeftUpKeyDown() && !IsRightDownKeyDown() )

  0016b	8b ce		 mov	 ecx, esi
  0016d	e8 00 00 00 00	 call	 ?IsLeftUpKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsLeftUpKeyDown
  00172	84 c0		 test	 al, al
  00174	74 12		 je	 SHORT $LN6@EvaluateRe
  00176	8b ce		 mov	 ecx, esi
  00178	e8 00 00 00 00	 call	 ?IsRightDownKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsRightDownKeyDown
  0017d	84 c0		 test	 al, al
  0017f	75 07		 jne	 SHORT $LN6@EvaluateRe

; 363  : 		m_bLeftUpKey = true;

  00181	c6 86 46 01 00
	00 01		 mov	 BYTE PTR [esi+326], 1
$LN6@EvaluateRe:

; 364  : 	if( IsLeftDownKeyDown() && !IsRightUpKeyDown() )

  00188	8b ce		 mov	 ecx, esi
  0018a	e8 00 00 00 00	 call	 ?IsLeftDownKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsLeftDownKeyDown
  0018f	84 c0		 test	 al, al
  00191	74 12		 je	 SHORT $LN5@EvaluateRe
  00193	8b ce		 mov	 ecx, esi
  00195	e8 00 00 00 00	 call	 ?IsRightUpKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsRightUpKeyDown
  0019a	84 c0		 test	 al, al
  0019c	75 07		 jne	 SHORT $LN5@EvaluateRe

; 365  : 		m_bLeftDownKey = true;

  0019e	c6 86 44 01 00
	00 01		 mov	 BYTE PTR [esi+324], 1
$LN5@EvaluateRe:

; 366  : 
; 367  : 	if( IsLeftUpKeyDown() && IsRightDownKeyDown() )

  001a5	8b ce		 mov	 ecx, esi
  001a7	e8 00 00 00 00	 call	 ?IsLeftUpKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsLeftUpKeyDown
  001ac	84 c0		 test	 al, al
  001ae	74 2d		 je	 SHORT $LN1@EvaluateRe
  001b0	8b ce		 mov	 ecx, esi
  001b2	e8 00 00 00 00	 call	 ?IsRightDownKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsRightDownKeyDown
  001b7	84 c0		 test	 al, al
  001b9	74 22		 je	 SHORT $LN1@EvaluateRe

; 368  : 	{
; 369  : 		if( m_dwLeftUpPressTime > m_dwRightDownPressTime )

  001bb	8b 86 d8 00 00
	00		 mov	 eax, DWORD PTR [esi+216]
  001c1	8b 8e e4 00 00
	00		 mov	 ecx, DWORD PTR [esi+228]
  001c7	3b c1		 cmp	 eax, ecx
  001c9	76 09		 jbe	 SHORT $LN30@EvaluateRe

; 370  : 			m_bLeftUpKey = true;

  001cb	c6 86 46 01 00
	00 01		 mov	 BYTE PTR [esi+326], 1
  001d2	5e		 pop	 esi

; 373  : 	}
; 374  : }

  001d3	c3		 ret	 0
$LN30@EvaluateRe:

; 371  : 		else if( m_dwLeftUpPressTime < m_dwRightDownPressTime )

  001d4	73 07		 jae	 SHORT $LN1@EvaluateRe

; 372  : 			m_bRightDownKey = true;

  001d6	c6 86 42 01 00
	00 01		 mov	 BYTE PTR [esi+322], 1
$LN1@EvaluateRe:
  001dd	5e		 pop	 esi

; 373  : 	}
; 374  : }

  001de	c3		 ret	 0
?EvaluateRealKey@ioUserKeyInput@@AAEXXZ ENDP		; ioUserKeyInput::EvaluateRealKey
_TEXT	ENDS
PUBLIC	?EvaluateRealFourKey@ioUserKeyInput@@AAEXXZ	; ioUserKeyInput::EvaluateRealFourKey
; Function compile flags: /Ogsp
;	COMDAT ?EvaluateRealFourKey@ioUserKeyInput@@AAEXXZ
_TEXT	SEGMENT
?EvaluateRealFourKey@ioUserKeyInput@@AAEXXZ PROC	; ioUserKeyInput::EvaluateRealFourKey, COMDAT
; _this$ = ecx

; 377  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 378  : 	m_bFourUpKey = false;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi
  00007	89 86 47 01 00
	00		 mov	 DWORD PTR [esi+327], eax

; 379  : 	m_bFourRightKey	= false;
; 380  : 	m_bFourDownKey = false;
; 381  : 	m_bFourLeftKey = false;
; 382  : 
; 383  : 
; 384  : 	DWORD dwCurTime = 0;
; 385  : 	int iCheckIndex = 0;

  0000d	33 db		 xor	 ebx, ebx

; 386  : 
; 387  : 	if( IsUpKeyDown() )

  0000f	e8 00 00 00 00	 call	 ?IsUpKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsUpKeyDown

; 390  : 		dwCurTime = m_dwUpPressTime;
; 391  : 
; 392  : 		if( IsRightKeyDown() )

  00014	8b ce		 mov	 ecx, esi
  00016	84 c0		 test	 al, al
  00018	74 4e		 je	 SHORT $LN25@EvaluateRe@2

; 388  : 	{
; 389  : 		iCheckIndex = 1;

  0001a	8b be cc 00 00
	00		 mov	 edi, DWORD PTR [esi+204]
  00020	43		 inc	 ebx

; 390  : 		dwCurTime = m_dwUpPressTime;
; 391  : 
; 392  : 		if( IsRightKeyDown() )

  00021	e8 00 00 00 00	 call	 ?IsRightKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsRightKeyDown
  00026	84 c0		 test	 al, al
  00028	74 0f		 je	 SHORT $LN23@EvaluateRe@2

; 393  : 		{
; 394  : 			if( dwCurTime < m_dwRightPressTime )

  0002a	8b 86 c8 00 00
	00		 mov	 eax, DWORD PTR [esi+200]
  00030	3b f8		 cmp	 edi, eax
  00032	73 05		 jae	 SHORT $LN23@EvaluateRe@2

; 395  : 			{
; 396  : 				iCheckIndex = 2;

  00034	6a 02		 push	 2
  00036	5b		 pop	 ebx

; 397  : 				dwCurTime = m_dwRightPressTime;

  00037	8b f8		 mov	 edi, eax
$LN23@EvaluateRe@2:

; 398  : 			}
; 399  : 		}
; 400  : 
; 401  : 		if( IsDownKeyDown() )

  00039	8b ce		 mov	 ecx, esi
$LN31@EvaluateRe@2:
  0003b	e8 00 00 00 00	 call	 ?IsDownKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsDownKeyDown
  00040	84 c0		 test	 al, al
  00042	74 0f		 je	 SHORT $LN21@EvaluateRe@2

; 402  : 		{
; 403  : 			if( dwCurTime < m_dwDownPressTime )

  00044	8b 86 d0 00 00
	00		 mov	 eax, DWORD PTR [esi+208]
  0004a	3b f8		 cmp	 edi, eax
  0004c	73 05		 jae	 SHORT $LN21@EvaluateRe@2

; 404  : 			{
; 405  : 				iCheckIndex = 3;

  0004e	6a 03		 push	 3
  00050	5b		 pop	 ebx

; 406  : 				dwCurTime = m_dwDownPressTime;

  00051	8b f8		 mov	 edi, eax
$LN21@EvaluateRe@2:

; 407  : 			}
; 408  : 		}
; 409  : 
; 410  : 		if( IsLeftKeyDown() )

  00053	8b ce		 mov	 ecx, esi
$LN30@EvaluateRe@2:
  00055	e8 00 00 00 00	 call	 ?IsLeftKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsLeftKeyDown
  0005a	84 c0		 test	 al, al
  0005c	74 42		 je	 SHORT $LN7@EvaluateRe@2

; 411  : 		{
; 412  : 			if( dwCurTime < m_dwLeftPressTime )

  0005e	3b be c4 00 00
	00		 cmp	 edi, DWORD PTR [esi+196]
  00064	73 3a		 jae	 SHORT $LN7@EvaluateRe@2

; 413  : 			{
; 414  : 				iCheckIndex = 4;
; 415  : 			}
; 416  : 		}
; 417  : 	}

  00066	eb 35		 jmp	 SHORT $LN28@EvaluateRe@2
$LN25@EvaluateRe@2:

; 418  : 	else if( IsRightKeyDown() )

  00068	e8 00 00 00 00	 call	 ?IsRightKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsRightKeyDown

; 421  : 		dwCurTime = m_dwRightPressTime;
; 422  : 
; 423  : 		if( IsDownKeyDown() )

  0006d	8b ce		 mov	 ecx, esi
  0006f	84 c0		 test	 al, al
  00071	74 0b		 je	 SHORT $LN17@EvaluateRe@2

; 419  : 	{
; 420  : 		iCheckIndex = 2;

  00073	8b be c8 00 00
	00		 mov	 edi, DWORD PTR [esi+200]
  00079	6a 02		 push	 2
  0007b	5b		 pop	 ebx

; 424  : 		{
; 425  : 			if( dwCurTime < m_dwDownPressTime )
; 426  : 			{
; 427  : 				iCheckIndex = 3;
; 428  : 				dwCurTime = m_dwDownPressTime;
; 429  : 			}
; 430  : 		}
; 431  : 
; 432  : 		if( IsLeftKeyDown() )
; 433  : 		{
; 434  : 			if( dwCurTime < m_dwLeftPressTime )
; 435  : 			{
; 436  : 				iCheckIndex = 4;
; 437  : 			}
; 438  : 		}
; 439  : 	}

  0007c	eb bd		 jmp	 SHORT $LN31@EvaluateRe@2
$LN17@EvaluateRe@2:

; 440  : 	else if( IsDownKeyDown() )

  0007e	e8 00 00 00 00	 call	 ?IsDownKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsDownKeyDown

; 443  : 		dwCurTime = m_dwDownPressTime;
; 444  : 
; 445  : 		if( IsLeftKeyDown() )

  00083	8b ce		 mov	 ecx, esi
  00085	84 c0		 test	 al, al
  00087	74 0b		 je	 SHORT $LN11@EvaluateRe@2

; 441  : 	{
; 442  : 		iCheckIndex = 3;

  00089	8b be d0 00 00
	00		 mov	 edi, DWORD PTR [esi+208]
  0008f	6a 03		 push	 3
  00091	5b		 pop	 ebx

; 446  : 		{
; 447  : 			if( dwCurTime < m_dwLeftPressTime )
; 448  : 			{
; 449  : 				iCheckIndex = 4;
; 450  : 			}
; 451  : 		}
; 452  : 	}

  00092	eb c1		 jmp	 SHORT $LN30@EvaluateRe@2
$LN11@EvaluateRe@2:

; 453  : 	else if( IsLeftKeyDown() )

  00094	e8 00 00 00 00	 call	 ?IsLeftKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsLeftKeyDown
  00099	84 c0		 test	 al, al
  0009b	74 03		 je	 SHORT $LN7@EvaluateRe@2
$LN28@EvaluateRe@2:

; 454  : 	{
; 455  : 		iCheckIndex = 4;

  0009d	6a 04		 push	 4
  0009f	5b		 pop	 ebx
$LN7@EvaluateRe@2:

; 456  : 	}
; 457  : 
; 458  : 	switch( iCheckIndex )

  000a0	8b c3		 mov	 eax, ebx
  000a2	48		 dec	 eax
  000a3	74 24		 je	 SHORT $LN4@EvaluateRe@2
  000a5	48		 dec	 eax
  000a6	74 18		 je	 SHORT $LN3@EvaluateRe@2
  000a8	48		 dec	 eax
  000a9	74 0c		 je	 SHORT $LN2@EvaluateRe@2
  000ab	48		 dec	 eax
  000ac	75 22		 jne	 SHORT $LN5@EvaluateRe@2

; 469  : 	case 4:
; 470  : 		m_bFourLeftKey = true;

  000ae	c6 86 4a 01 00
	00 01		 mov	 BYTE PTR [esi+330], 1

; 471  : 		break;

  000b5	eb 19		 jmp	 SHORT $LN5@EvaluateRe@2
$LN2@EvaluateRe@2:

; 466  : 	case 3:
; 467  : 		m_bFourDownKey = true;

  000b7	c6 86 49 01 00
	00 01		 mov	 BYTE PTR [esi+329], 1

; 468  : 		break;

  000be	eb 10		 jmp	 SHORT $LN5@EvaluateRe@2
$LN3@EvaluateRe@2:

; 462  : 		break;
; 463  : 	case 2:
; 464  : 		m_bFourRightKey = true;

  000c0	c6 86 48 01 00
	00 01		 mov	 BYTE PTR [esi+328], 1

; 465  : 		break;

  000c7	eb 07		 jmp	 SHORT $LN5@EvaluateRe@2
$LN4@EvaluateRe@2:

; 459  : 	{
; 460  : 	case 1:
; 461  : 		m_bFourUpKey = true;

  000c9	c6 86 47 01 00
	00 01		 mov	 BYTE PTR [esi+327], 1
$LN5@EvaluateRe@2:
  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx

; 472  : 	}
; 473  : }

  000d3	c3		 ret	 0
?EvaluateRealFourKey@ioUserKeyInput@@AAEXXZ ENDP	; ioUserKeyInput::EvaluateRealFourKey
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	?FixDiagonalDirRelease@ioUserKeyInput@@AAEXW4DirKeyInput@1@@Z ; ioUserKeyInput::FixDiagonalDirRelease
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iouserkeyinput.cpp
CONST	ENDS
;	COMDAT ?FixDiagonalDirRelease@ioUserKeyInput@@AAEXW4DirKeyInput@1@@Z
_TEXT	SEGMENT
tv174 = -4						; size = 4
tv171 = 8						; size = 4
$T509294 = 8						; size = 4
_eNewDirKey$ = 8					; size = 4
?FixDiagonalDirRelease@ioUserKeyInput@@AAEXW4DirKeyInput@1@@Z PROC ; ioUserKeyInput::FixDiagonalDirRelease, COMDAT
; _this$ = ecx

; 640  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 641  : 	DWORD dwCurTime = FRAMEGETTIME();

  00005	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	8b f1		 mov	 esi, ecx
  0000f	ff d3		 call	 ebx
  00011	8b c8		 mov	 ecx, eax
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 642  : 	if( IsLeftKeyRelease() )

  00019	8b ce		 mov	 ecx, esi
  0001b	8b f8		 mov	 edi, eax
  0001d	e8 00 00 00 00	 call	 ?IsLeftKeyRelease@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsLeftKeyRelease
  00022	84 c0		 test	 al, al
  00024	74 06		 je	 SHORT $LN8@FixDiagona

; 643  : 	{
; 644  : 		m_dwLastDirKeyReleaseTime = dwCurTime;

  00026	89 be d4 00 00
	00		 mov	 DWORD PTR [esi+212], edi
$LN8@FixDiagona:

; 645  : 	}
; 646  : 
; 647  : 	if( IsRightKeyRelease() )

  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ?IsRightKeyRelease@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsRightKeyRelease
  00033	84 c0		 test	 al, al
  00035	74 06		 je	 SHORT $LN7@FixDiagona

; 648  : 	{
; 649  : 		m_dwLastDirKeyReleaseTime = dwCurTime;

  00037	89 be d4 00 00
	00		 mov	 DWORD PTR [esi+212], edi
$LN7@FixDiagona:

; 650  : 	}
; 651  : 
; 652  : 	if( IsUpKeyRelease() )

  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ?IsUpKeyRelease@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsUpKeyRelease
  00044	84 c0		 test	 al, al
  00046	74 06		 je	 SHORT $LN6@FixDiagona

; 653  : 	{
; 654  : 		m_dwLastDirKeyReleaseTime = dwCurTime;

  00048	89 be d4 00 00
	00		 mov	 DWORD PTR [esi+212], edi
$LN6@FixDiagona:

; 655  : 	}
; 656  : 
; 657  : 	if( IsDownKeyRelease() )

  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?IsDownKeyRelease@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsDownKeyRelease
  00055	84 c0		 test	 al, al
  00057	74 06		 je	 SHORT $LN5@FixDiagona

; 658  : 	{
; 659  : 		m_dwLastDirKeyReleaseTime = dwCurTime;

  00059	89 be d4 00 00
	00		 mov	 DWORD PTR [esi+212], edi
$LN5@FixDiagona:

; 660  : 	}
; 661  : 
; 662  : 	if( IsDiagonalDir( m_CurDirKey ) && !IsDiagonalDir( eNewDirKey ) )

  0005f	8b 16		 mov	 edx, DWORD PTR [esi]
  00061	52		 push	 edx
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?IsDiagonalDir@ioUserKeyInput@@ABE_NW4DirKeyInput@1@@Z ; ioUserKeyInput::IsDiagonalDir
  00069	8b 7d 08	 mov	 edi, DWORD PTR _eNewDirKey$[ebp]
  0006c	84 c0		 test	 al, al
  0006e	74 4f		 je	 SHORT $LN4@FixDiagona
  00070	57		 push	 edi
  00071	8b ce		 mov	 ecx, esi
  00073	e8 00 00 00 00	 call	 ?IsDiagonalDir@ioUserKeyInput@@ABE_NW4DirKeyInput@1@@Z ; ioUserKeyInput::IsDiagonalDir
  00078	84 c0		 test	 al, al
  0007a	75 43		 jne	 SHORT $LN4@FixDiagona

; 663  : 	{
; 664  : 		if( FRAMEGETTIME() - m_dwLastDirKeyReleaseTime < FLOAT100 )

  0007c	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00081	89 45 08	 mov	 DWORD PTR $T509294[ebp], eax
  00084	ff d3		 call	 ebx
  00086	8b c8		 mov	 ecx, eax
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0008e	2b 86 d4 00 00
	00		 sub	 eax, DWORD PTR [esi+212]
  00094	89 45 fc	 mov	 DWORD PTR tv174[ebp], eax
  00097	db 45 fc	 fild	 DWORD PTR tv174[ebp]
  0009a	79 06		 jns	 SHORT $LN13@FixDiagona
  0009c	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN13@FixDiagona:
  000a2	8b 45 08	 mov	 eax, DWORD PTR $T509294[ebp]
  000a5	db 45 08	 fild	 DWORD PTR $T509294[ebp]
  000a8	85 c0		 test	 eax, eax
  000aa	79 06		 jns	 SHORT $LN14@FixDiagona
  000ac	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN14@FixDiagona:

; 665  : 		{
; 666  : 			m_PreDirKey = m_CurDirKey;

  000b2	8b 06		 mov	 eax, DWORD PTR [esi]
  000b4	df f1		 fcomip	 ST(1)
  000b6	dd d8		 fstp	 ST(0)
  000b8	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 667  : 			// Not Update NewKey..
; 668  : 		}
; 669  : 		else

  000bb	77 07		 ja	 SHORT $LN1@FixDiagona

; 670  : 		{
; 671  : 			m_PreDirKey = m_CurDirKey;
; 672  : 			m_CurDirKey = eNewDirKey;
; 673  : 		}
; 674  : 	}
; 675  : 	else

  000bd	eb 03		 jmp	 SHORT $LN15@FixDiagona
$LN4@FixDiagona:

; 676  : 	{
; 677  : 		m_PreDirKey = m_CurDirKey;

  000bf	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN15@FixDiagona:

; 678  : 		m_CurDirKey = eNewDirKey;

  000c2	89 3e		 mov	 DWORD PTR [esi], edi
$LN1@FixDiagona:
  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	5b		 pop	 ebx

; 679  : 	}
; 680  : }

  000c7	c9		 leave
  000c8	c2 04 00	 ret	 4
?FixDiagonalDirRelease@ioUserKeyInput@@AAEXW4DirKeyInput@1@@Z ENDP ; ioUserKeyInput::FixDiagonalDirRelease
_TEXT	ENDS
PUBLIC	?CheckAttackKeyRepeat@ioUserKeyInput@@QAEXXZ	; ioUserKeyInput::CheckAttackKeyRepeat
; Function compile flags: /Ogsp
;	COMDAT ?CheckAttackKeyRepeat@ioUserKeyInput@@QAEXXZ
_TEXT	SEGMENT
?CheckAttackKeyRepeat@ioUserKeyInput@@QAEXXZ PROC	; ioUserKeyInput::CheckAttackKeyRepeat, COMDAT
; _this$ = ecx

; 724  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 725  : 	if( IsAttackKeyPress() )

  00003	e8 00 00 00 00	 call	 ?IsAttackKeyPress@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsAttackKeyPress
  00008	84 c0		 test	 al, al
  0000a	74 36		 je	 SHORT $LN3@CheckAttac

; 726  : 	{
; 727  : 		DWORD dwCurTime = FRAMEGETTIME();

  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00012	8b c8		 mov	 ecx, eax
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 728  : 		if( dwCurTime > m_dwLastAttackKeyRepeatTime + m_dwAttackKeyRepeatGap )

  0001a	8b 96 34 01 00
	00		 mov	 edx, DWORD PTR [esi+308]
  00020	03 96 30 01 00
	00		 add	 edx, DWORD PTR [esi+304]
  00026	3b c2		 cmp	 eax, edx
  00028	76 0c		 jbe	 SHORT $LN2@CheckAttac

; 729  : 		{
; 730  : 			m_iAttackRepeatCnt = 1;

  0002a	c7 86 38 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+312], 1

; 731  : 		}
; 732  : 		else

  00034	eb 06		 jmp	 SHORT $LN1@CheckAttac
$LN2@CheckAttac:

; 733  : 		{
; 734  : 			m_iAttackRepeatCnt++;

  00036	ff 86 38 01 00
	00		 inc	 DWORD PTR [esi+312]
$LN1@CheckAttac:

; 735  : 		}
; 736  : 
; 737  : 		m_dwLastAttackKeyRepeatTime = dwCurTime;

  0003c	89 86 30 01 00
	00		 mov	 DWORD PTR [esi+304], eax
$LN3@CheckAttac:
  00042	5e		 pop	 esi

; 738  : 	}
; 739  : }

  00043	c3		 ret	 0
?CheckAttackKeyRepeat@ioUserKeyInput@@QAEXXZ ENDP	; ioUserKeyInput::CheckAttackKeyRepeat
_TEXT	ENDS
PUBLIC	?EvaluateActionKey@ioUserKeyInput@@AAEXXZ	; ioUserKeyInput::EvaluateActionKey
; Function compile flags: /Ogsp
;	COMDAT ?EvaluateActionKey@ioUserKeyInput@@AAEXXZ
_TEXT	SEGMENT
?EvaluateActionKey@ioUserKeyInput@@AAEXXZ PROC		; ioUserKeyInput::EvaluateActionKey, COMDAT
; _this$ = ecx

; 767  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f1		 mov	 esi, ecx

; 768  : 	DWORD dwCurTime = FRAMEGETTIME();

  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0000b	8b c8		 mov	 ecx, eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00013	8b f8		 mov	 edi, eax

; 769  : 
; 770  : 	m_PreActionKey = m_CurActionKey;

  00015	8b 86 00 01 00
	00		 mov	 eax, DWORD PTR [esi+256]

; 771  : 	m_CurActionKey = AKI_NONE;

  0001b	33 db		 xor	 ebx, ebx

; 772  : 
; 773  : 	DWORD dwFirstTime = GetActionFirstKeyDownTime();

  0001d	8b ce		 mov	 ecx, esi
  0001f	89 86 04 01 00
	00		 mov	 DWORD PTR [esi+260], eax
  00025	89 9e 00 01 00
	00		 mov	 DWORD PTR [esi+256], ebx
  0002b	e8 00 00 00 00	 call	 ?GetActionFirstKeyDownTime@ioUserKeyInput@@AAEKXZ ; ioUserKeyInput::GetActionFirstKeyDownTime

; 774  : 	if( dwFirstTime == 0 )

  00030	3b c3		 cmp	 eax, ebx
  00032	75 0b		 jne	 SHORT $LN36@EvaluateAc

; 775  : 	{
; 776  : 		m_CurActionKey = AKI_NONE;

  00034	89 9e 00 01 00
	00		 mov	 DWORD PTR [esi+256], ebx

; 777  : 		/*
; 778  : 		if( IsDefenseKeyDown() )
; 779  : 		{
; 780  : 			m_CurActionKey = AKI_DEFENSE;
; 781  : 		}
; 782  : 		else
; 783  : 		{
; 784  : 			m_CurActionKey = AKI_NONE;
; 785  : 		}
; 786  : 		*/
; 787  : 		return;

  0003a	e9 f8 01 00 00	 jmp	 $LN6@EvaluateAc
$LN36@EvaluateAc:

; 788  : 	}
; 789  : 
; 790  : 	DWORD dwGap = dwCurTime - dwFirstTime;

  0003f	2b f8		 sub	 edi, eax

; 791  : 	if( dwGap > m_dwKeyCheckTime || m_bInputProcessAI )

  00041	3b be 0c 01 00
	00		 cmp	 edi, DWORD PTR [esi+268]
  00047	77 59		 ja	 SHORT $LN34@EvaluateAc
  00049	38 9e 4b 01 00
	00		 cmp	 BYTE PTR [esi+331], bl
  0004f	75 51		 jne	 SHORT $LN34@EvaluateAc

; 866  : 			}
; 867  : 		}
; 868  : 	}
; 869  : 	else
; 870  : 	{
; 871  : 		if( IsJumpKeyRelease() )

  00051	8b ce		 mov	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?IsJumpKeyRelease@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsJumpKeyRelease
  00058	84 c0		 test	 al, al
  0005a	74 20		 je	 SHORT $LN3@EvaluateAc

; 872  : 		{
; 873  : 			if( (m_dwDefensePressTime == 0 && m_dwAttackPressTime == 0) )

  0005c	39 9e 10 01 00
	00		 cmp	 DWORD PTR [esi+272], ebx
  00062	75 18		 jne	 SHORT $LN3@EvaluateAc
  00064	39 9e 18 01 00
	00		 cmp	 DWORD PTR [esi+280], ebx
  0006a	75 10		 jne	 SHORT $LN3@EvaluateAc

; 874  : 			{
; 875  : 				m_CurActionKey = AKI_JUMP;

  0006c	c7 86 00 01 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+256], 2

; 876  : 				m_dwJumpPressTime = 0;

  00076	89 9e 14 01 00
	00		 mov	 DWORD PTR [esi+276], ebx
$LN3@EvaluateAc:

; 877  : 			}
; 878  : 		}
; 879  : 
; 880  : 		if( IsAttackKeyRelease() )

  0007c	8b ce		 mov	 ecx, esi
  0007e	e8 00 00 00 00	 call	 ?IsAttackKeyRelease@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsAttackKeyRelease
  00083	84 c0		 test	 al, al
  00085	0f 84 ac 01 00
	00		 je	 $LN6@EvaluateAc

; 881  : 		{
; 882  : 			if( (m_dwDefensePressTime == 0 && m_dwJumpPressTime == 0) )

  0008b	39 9e 10 01 00
	00		 cmp	 DWORD PTR [esi+272], ebx
  00091	0f 85 a0 01 00
	00		 jne	 $LN6@EvaluateAc
  00097	39 9e 14 01 00
	00		 cmp	 DWORD PTR [esi+276], ebx

; 883  : 			{
; 884  : 				m_CurActionKey = AKI_ATTACK;
; 885  : 				m_dwAttackPressTime = 0;

  0009d	e9 83 01 00 00	 jmp	 $LN39@EvaluateAc
$LN34@EvaluateAc:

; 792  : 	{
; 793  : 		if( IsWeaponSkillKeyDown() )

  000a2	8b ce		 mov	 ecx, esi
  000a4	e8 00 00 00 00	 call	 ?IsWeaponSkillKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsWeaponSkillKeyDown
  000a9	84 c0		 test	 al, al
  000ab	74 15		 je	 SHORT $LN33@EvaluateAc
$LN15@EvaluateAc:

; 794  : 		{
; 795  : 			m_CurActionKey = AKI_XC;

  000ad	c7 86 00 01 00
	00 04 00 00 00	 mov	 DWORD PTR [esi+256], 4

; 796  : 			m_dwDefensePressTime = m_dwAttackPressTime = 0;
; 797  : 			m_dwWeaponPressTime = 0;

  000b7	89 9e 1c 01 00
	00		 mov	 DWORD PTR [esi+284], ebx
  000bd	e9 10 01 00 00	 jmp	 $LN40@EvaluateAc
$LN33@EvaluateAc:

; 798  : 		}
; 799  : 		else if( IsArmorSkillKeyDown() )

  000c2	8b ce		 mov	 ecx, esi
  000c4	e8 00 00 00 00	 call	 ?IsArmorSkillKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsArmorSkillKeyDown
  000c9	84 c0		 test	 al, al

; 800  : 		{
; 801  : 			m_CurActionKey = AKI_ZXC;
; 802  : 			m_dwArmorPressTime = 0;
; 803  : 			m_dwDefensePressTime = m_dwJumpPressTime = m_dwAttackPressTime = 0;

  000cb	0f 85 eb 00 00
	00		 jne	 $LN21@EvaluateAc

; 804  : 		}
; 805  : 		else if( IsHelmetSkillKeyDown() )

  000d1	8b ce		 mov	 ecx, esi
  000d3	e8 00 00 00 00	 call	 ?IsHelmetSkillKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsHelmetSkillKeyDown
  000d8	84 c0		 test	 al, al
  000da	74 1b		 je	 SHORT $LN29@EvaluateAc
$LN10@EvaluateAc:

; 806  : 		{
; 807  : 			m_CurActionKey = AKI_ZC;

  000dc	c7 86 00 01 00
	00 06 00 00 00	 mov	 DWORD PTR [esi+256], 6

; 808  : 			m_dwJumpPressTime = m_dwAttackPressTime = 0;

  000e6	89 9e 14 01 00
	00		 mov	 DWORD PTR [esi+276], ebx

; 809  : 			m_dwHelmetPressTime = 0;

  000ec	89 9e 24 01 00
	00		 mov	 DWORD PTR [esi+292], ebx
  000f2	e9 e1 00 00 00	 jmp	 $LN41@EvaluateAc
$LN29@EvaluateAc:

; 810  : 		}
; 811  : 		else if( IsCloakSkillKeyDown() )

  000f7	8b ce		 mov	 ecx, esi
  000f9	e8 00 00 00 00	 call	 ?IsCloakSkillKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsCloakSkillKeyDown
  000fe	84 c0		 test	 al, al

; 812  : 		{
; 813  : 			m_CurActionKey = AKI_ZX;
; 814  : 			m_dwCloakPressTime = 0;
; 815  : 			m_dwDefensePressTime = m_dwJumpPressTime = 0;

  00100	0f 85 98 00 00
	00		 jne	 $LN18@EvaluateAc

; 816  : 		}
; 817  : 		else if( IsDefenseKeyDown() || m_dwDefensePressTime > 0 )

  00106	8b ce		 mov	 ecx, esi
  00108	e8 00 00 00 00	 call	 ?IsDefenseKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsDefenseKeyDown
  0010d	84 c0		 test	 al, al
  0010f	75 38		 jne	 SHORT $LN24@EvaluateAc
  00111	39 9e 10 01 00
	00		 cmp	 DWORD PTR [esi+272], ebx
  00117	77 30		 ja	 SHORT $LN24@EvaluateAc

; 836  : 			}
; 837  : 		}
; 838  : 		else if( IsJumpKeyDown() || m_dwJumpPressTime > 0 )

  00119	8b ce		 mov	 ecx, esi
  0011b	e8 00 00 00 00	 call	 ?IsJumpKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsJumpKeyDown
  00120	84 c0		 test	 al, al
  00122	75 0c		 jne	 SHORT $LN12@EvaluateAc
  00124	39 9e 14 01 00
	00		 cmp	 DWORD PTR [esi+276], ebx
  0012a	0f 86 ae 00 00
	00		 jbe	 $LN16@EvaluateAc
$LN12@EvaluateAc:

; 839  : 		{
; 840  : 			if( IsAttackKeyDown() || m_dwAttackPressTime > 0 )

  00130	8b ce		 mov	 ecx, esi
  00132	e8 00 00 00 00	 call	 ?IsAttackKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsAttackKeyDown
  00137	84 c0		 test	 al, al
  00139	75 a1		 jne	 SHORT $LN10@EvaluateAc
  0013b	39 9e 18 01 00
	00		 cmp	 DWORD PTR [esi+280], ebx
  00141	0f 86 97 00 00
	00		 jbe	 $LN16@EvaluateAc

; 841  : 			{
; 842  : 				m_CurActionKey = AKI_ZC;
; 843  : 				m_dwJumpPressTime = m_dwAttackPressTime = 0;
; 844  : 				m_dwHelmetPressTime = 0;

  00147	eb 93		 jmp	 SHORT $LN10@EvaluateAc
$LN24@EvaluateAc:

; 818  : 		{
; 819  : 			if( (IsJumpKeyDown() || m_dwJumpPressTime > 0) && (IsAttackKeyDown() || m_dwAttackPressTime > 0) )

  00149	8b ce		 mov	 ecx, esi
  0014b	e8 00 00 00 00	 call	 ?IsJumpKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsJumpKeyDown
  00150	84 c0		 test	 al, al
  00152	75 08		 jne	 SHORT $LN22@EvaluateAc
  00154	39 9e 14 01 00
	00		 cmp	 DWORD PTR [esi+276], ebx
  0015a	76 13		 jbe	 SHORT $LN23@EvaluateAc
$LN22@EvaluateAc:
  0015c	8b ce		 mov	 ecx, esi
  0015e	e8 00 00 00 00	 call	 ?IsAttackKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsAttackKeyDown
  00163	84 c0		 test	 al, al
  00165	75 55		 jne	 SHORT $LN21@EvaluateAc
  00167	39 9e 18 01 00
	00		 cmp	 DWORD PTR [esi+280], ebx
  0016d	77 4d		 ja	 SHORT $LN21@EvaluateAc
$LN23@EvaluateAc:

; 824  : 			}
; 825  : 			else if( IsJumpKeyDown() || m_dwJumpPressTime > 0 )

  0016f	8b ce		 mov	 ecx, esi
  00171	e8 00 00 00 00	 call	 ?IsJumpKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsJumpKeyDown
  00176	84 c0		 test	 al, al
  00178	75 24		 jne	 SHORT $LN18@EvaluateAc
  0017a	39 9e 14 01 00
	00		 cmp	 DWORD PTR [esi+276], ebx
  00180	77 1c		 ja	 SHORT $LN18@EvaluateAc

; 830  : 			}
; 831  : 			else if( IsAttackKeyDown() || m_dwAttackPressTime > 0 )

  00182	8b ce		 mov	 ecx, esi
  00184	e8 00 00 00 00	 call	 ?IsAttackKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsAttackKeyDown
  00189	84 c0		 test	 al, al
  0018b	0f 85 1c ff ff
	ff		 jne	 $LN15@EvaluateAc
  00191	39 9e 18 01 00
	00		 cmp	 DWORD PTR [esi+280], ebx
  00197	76 45		 jbe	 SHORT $LN16@EvaluateAc

; 832  : 			{
; 833  : 				m_CurActionKey = AKI_XC;
; 834  : 				m_dwWeaponPressTime = 0;
; 835  : 				m_dwDefensePressTime = m_dwAttackPressTime = 0;

  00199	e9 0f ff ff ff	 jmp	 $LN15@EvaluateAc
$LN18@EvaluateAc:

; 826  : 			{
; 827  : 				m_CurActionKey = AKI_ZX;

  0019e	c7 86 00 01 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+256], 7

; 828  : 				m_dwCloakPressTime = 0;

  001a8	89 9e 28 01 00
	00		 mov	 DWORD PTR [esi+296], ebx

; 829  : 				m_dwDefensePressTime = m_dwJumpPressTime = 0;

  001ae	89 9e 14 01 00
	00		 mov	 DWORD PTR [esi+276], ebx
  001b4	89 9e 10 01 00
	00		 mov	 DWORD PTR [esi+272], ebx
  001ba	eb 22		 jmp	 SHORT $LN16@EvaluateAc
$LN21@EvaluateAc:

; 823  : 				m_dwArmorPressTime = 0;

  001bc	89 9e 20 01 00
	00		 mov	 DWORD PTR [esi+288], ebx
  001c2	89 9e 14 01 00
	00		 mov	 DWORD PTR [esi+276], ebx
  001c8	c7 86 00 01 00
	00 05 00 00 00	 mov	 DWORD PTR [esi+256], 5
$LN40@EvaluateAc:

; 820  : 			{
; 821  : 				m_CurActionKey = AKI_ZXC;
; 822  : 				m_dwDefensePressTime = m_dwJumpPressTime = m_dwAttackPressTime = 0;

  001d2	89 9e 10 01 00
	00		 mov	 DWORD PTR [esi+272], ebx
$LN41@EvaluateAc:
  001d8	89 9e 18 01 00
	00		 mov	 DWORD PTR [esi+280], ebx
$LN16@EvaluateAc:

; 845  : 			}
; 846  : 		}
; 847  : 
; 848  : 		if( m_CurActionKey == AKI_NONE )

  001de	39 9e 00 01 00
	00		 cmp	 DWORD PTR [esi+256], ebx
  001e4	75 51		 jne	 SHORT $LN6@EvaluateAc

; 849  : 		{
; 850  : 			if( !IsDefenseKeyNone() )

  001e6	8b ce		 mov	 ecx, esi
  001e8	e8 00 00 00 00	 call	 ?IsDefenseKeyNone@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsDefenseKeyNone
  001ed	84 c0		 test	 al, al
  001ef	75 10		 jne	 SHORT $LN8@EvaluateAc

; 851  : 			{
; 852  : 				m_CurActionKey = AKI_DEFENSE;

  001f1	c7 86 00 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+256], 1

; 853  : 				m_dwDefensePressTime = 0;

  001fb	89 9e 10 01 00
	00		 mov	 DWORD PTR [esi+272], ebx
$LN8@EvaluateAc:

; 854  : 			}
; 855  : 
; 856  : 			if( !IsJumpKeyNone() )

  00201	8b ce		 mov	 ecx, esi
  00203	e8 00 00 00 00	 call	 ?IsJumpKeyNone@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsJumpKeyNone
  00208	84 c0		 test	 al, al
  0020a	75 10		 jne	 SHORT $LN7@EvaluateAc

; 857  : 			{
; 858  : 				m_CurActionKey = AKI_JUMP;

  0020c	c7 86 00 01 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+256], 2

; 859  : 				m_dwJumpPressTime = 0;

  00216	89 9e 14 01 00
	00		 mov	 DWORD PTR [esi+276], ebx
$LN7@EvaluateAc:

; 860  : 			}
; 861  : 
; 862  : 			if( !IsAttackKeyNone() )

  0021c	8b ce		 mov	 ecx, esi
  0021e	e8 00 00 00 00	 call	 ?IsAttackKeyNone@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsAttackKeyNone
  00223	84 c0		 test	 al, al
$LN39@EvaluateAc:
  00225	75 10		 jne	 SHORT $LN6@EvaluateAc

; 863  : 			{
; 864  : 				m_CurActionKey = AKI_ATTACK;
; 865  : 				m_dwAttackPressTime = 0;

  00227	89 9e 18 01 00
	00		 mov	 DWORD PTR [esi+280], ebx
  0022d	c7 86 00 01 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+256], 3
$LN6@EvaluateAc:

; 886  : 			}
; 887  : 		}
; 888  : 	}
; 889  : }

  00237	5f		 pop	 edi
  00238	5e		 pop	 esi
  00239	5b		 pop	 ebx
  0023a	c3		 ret	 0
?EvaluateActionKey@ioUserKeyInput@@AAEXXZ ENDP		; ioUserKeyInput::EvaluateActionKey
_TEXT	ENDS
PUBLIC	?IsPickItemKey@ioUserKeyInput@@QBE_NXZ		; ioUserKeyInput::IsPickItemKey
; Function compile flags: /Ogsp
;	COMDAT ?IsPickItemKey@ioUserKeyInput@@QBE_NXZ
_TEXT	SEGMENT
?IsPickItemKey@ioUserKeyInput@@QBE_NXZ PROC		; ioUserKeyInput::IsPickItemKey, COMDAT
; _this$ = ecx

; 994  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 995  : 	if( m_bInputProcessAI )

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0

; 996  : 		return false;

  0000a	75 12		 jne	 SHORT $LN1@IsPickItem

; 997  : 
; 998  : 	if( IsJumpKeyDown() && GetCurDirKey() == DKI_NONE )

  0000c	e8 00 00 00 00	 call	 ?IsJumpKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsJumpKeyDown
  00011	84 c0		 test	 al, al
  00013	74 09		 je	 SHORT $LN1@IsPickItem
  00015	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00018	75 04		 jne	 SHORT $LN1@IsPickItem

; 999  : 		return true;

  0001a	b0 01		 mov	 al, 1
  0001c	5e		 pop	 esi

; 1002 : }

  0001d	c3		 ret	 0
$LN1@IsPickItem:

; 1000 : 
; 1001 : 	return false;

  0001e	32 c0		 xor	 al, al
  00020	5e		 pop	 esi

; 1002 : }

  00021	c3		 ret	 0
?IsPickItemKey@ioUserKeyInput@@QBE_NXZ ENDP		; ioUserKeyInput::IsPickItemKey
_TEXT	ENDS
PUBLIC	?CheckKeyPressTime@ioUserKeyInput@@AAEXXZ	; ioUserKeyInput::CheckKeyPressTime
; Function compile flags: /Ogsp
;	COMDAT ?CheckKeyPressTime@ioUserKeyInput@@AAEXXZ
_TEXT	SEGMENT
?CheckKeyPressTime@ioUserKeyInput@@AAEXXZ PROC		; ioUserKeyInput::CheckKeyPressTime, COMDAT
; _this$ = ecx

; 1045 : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 1046 : 	DWORD dwCurTime = FRAMEGETTIME();

  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0000a	8b c8		 mov	 ecx, eax
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 1047 : 
; 1048 : 	if( IsLeftKeyPress() )

  00012	8b ce		 mov	 ecx, esi
  00014	8b f8		 mov	 edi, eax
  00016	e8 00 00 00 00	 call	 ?IsLeftKeyPress@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsLeftKeyPress
  0001b	84 c0		 test	 al, al
  0001d	74 06		 je	 SHORT $LN15@CheckKeyPr

; 1049 : 		m_dwLeftPressTime = dwCurTime;

  0001f	89 be c4 00 00
	00		 mov	 DWORD PTR [esi+196], edi
$LN15@CheckKeyPr:

; 1050 : 
; 1051 : 	if( IsRightKeyPress() )

  00025	8b ce		 mov	 ecx, esi
  00027	e8 00 00 00 00	 call	 ?IsRightKeyPress@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsRightKeyPress
  0002c	84 c0		 test	 al, al
  0002e	74 06		 je	 SHORT $LN14@CheckKeyPr

; 1052 : 		m_dwRightPressTime = dwCurTime;

  00030	89 be c8 00 00
	00		 mov	 DWORD PTR [esi+200], edi
$LN14@CheckKeyPr:

; 1053 : 
; 1054 : 	if( IsUpKeyPress() )

  00036	8b ce		 mov	 ecx, esi
  00038	e8 00 00 00 00	 call	 ?IsUpKeyPress@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsUpKeyPress
  0003d	84 c0		 test	 al, al
  0003f	74 06		 je	 SHORT $LN13@CheckKeyPr

; 1055 : 		m_dwUpPressTime = dwCurTime;

  00041	89 be cc 00 00
	00		 mov	 DWORD PTR [esi+204], edi
$LN13@CheckKeyPr:

; 1056 : 
; 1057 : 	if( IsDownKeyPress() )

  00047	8b ce		 mov	 ecx, esi
  00049	e8 00 00 00 00	 call	 ?IsDownKeyPress@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsDownKeyPress
  0004e	84 c0		 test	 al, al
  00050	74 06		 je	 SHORT $LN12@CheckKeyPr

; 1058 : 		m_dwDownPressTime = dwCurTime;

  00052	89 be d0 00 00
	00		 mov	 DWORD PTR [esi+208], edi
$LN12@CheckKeyPr:

; 1059 : 
; 1060 : 	if( IsLeftUpKeyPress() )

  00058	8b ce		 mov	 ecx, esi
  0005a	e8 00 00 00 00	 call	 ?IsLeftUpKeyPress@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsLeftUpKeyPress
  0005f	84 c0		 test	 al, al
  00061	74 06		 je	 SHORT $LN11@CheckKeyPr

; 1061 : 		m_dwLeftUpPressTime = dwCurTime;

  00063	89 be d8 00 00
	00		 mov	 DWORD PTR [esi+216], edi
$LN11@CheckKeyPr:

; 1062 : 
; 1063 : 	if( IsLeftDownKeyPress() )

  00069	8b ce		 mov	 ecx, esi
  0006b	e8 00 00 00 00	 call	 ?IsLeftDownKeyPress@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsLeftDownKeyPress
  00070	84 c0		 test	 al, al
  00072	74 06		 je	 SHORT $LN10@CheckKeyPr

; 1064 : 		m_dwLeftDownPressTime = dwCurTime;

  00074	89 be dc 00 00
	00		 mov	 DWORD PTR [esi+220], edi
$LN10@CheckKeyPr:

; 1065 : 
; 1066 : 	if( IsRightUpKeyPress() )

  0007a	8b ce		 mov	 ecx, esi
  0007c	e8 00 00 00 00	 call	 ?IsRightUpKeyPress@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsRightUpKeyPress
  00081	84 c0		 test	 al, al
  00083	74 06		 je	 SHORT $LN9@CheckKeyPr

; 1067 : 		m_dwRightUpPressTime = dwCurTime;

  00085	89 be e0 00 00
	00		 mov	 DWORD PTR [esi+224], edi
$LN9@CheckKeyPr:

; 1068 : 
; 1069 : 	if( IsRightDownKeyPress() )

  0008b	8b ce		 mov	 ecx, esi
  0008d	e8 00 00 00 00	 call	 ?IsRightDownKeyPress@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsRightDownKeyPress
  00092	84 c0		 test	 al, al
  00094	74 06		 je	 SHORT $LN8@CheckKeyPr

; 1070 : 		m_dwRightDownPressTime = dwCurTime;

  00096	89 be e4 00 00
	00		 mov	 DWORD PTR [esi+228], edi
$LN8@CheckKeyPr:

; 1071 : 
; 1072 : 	if( IsDefenseKeyPress() )

  0009c	8b ce		 mov	 ecx, esi
  0009e	e8 00 00 00 00	 call	 ?IsDefenseKeyPress@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsDefenseKeyPress
  000a3	84 c0		 test	 al, al
  000a5	74 06		 je	 SHORT $LN7@CheckKeyPr

; 1073 : 		m_dwDefensePressTime = dwCurTime;

  000a7	89 be 10 01 00
	00		 mov	 DWORD PTR [esi+272], edi
$LN7@CheckKeyPr:

; 1074 : 
; 1075 : 	if( IsJumpKeyPress() )

  000ad	8b ce		 mov	 ecx, esi
  000af	e8 00 00 00 00	 call	 ?IsJumpKeyPress@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsJumpKeyPress
  000b4	84 c0		 test	 al, al
  000b6	74 06		 je	 SHORT $LN6@CheckKeyPr

; 1076 : 	{
; 1077 : 		m_dwJumpPressTime = dwCurTime;

  000b8	89 be 14 01 00
	00		 mov	 DWORD PTR [esi+276], edi
$LN6@CheckKeyPr:

; 1078 : 	}
; 1079 : 
; 1080 : 	if( IsAttackKeyPress() )

  000be	8b ce		 mov	 ecx, esi
  000c0	e8 00 00 00 00	 call	 ?IsAttackKeyPress@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsAttackKeyPress
  000c5	84 c0		 test	 al, al
  000c7	74 06		 je	 SHORT $LN5@CheckKeyPr

; 1081 : 		m_dwAttackPressTime = dwCurTime;

  000c9	89 be 18 01 00
	00		 mov	 DWORD PTR [esi+280], edi
$LN5@CheckKeyPr:

; 1082 : 
; 1083 : 	if( IsWeaponSkillKeyPress() )

  000cf	8b ce		 mov	 ecx, esi
  000d1	e8 00 00 00 00	 call	 ?IsWeaponSkillKeyPress@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsWeaponSkillKeyPress
  000d6	84 c0		 test	 al, al
  000d8	74 06		 je	 SHORT $LN4@CheckKeyPr

; 1084 : 		m_dwWeaponPressTime = dwCurTime;

  000da	89 be 1c 01 00
	00		 mov	 DWORD PTR [esi+284], edi
$LN4@CheckKeyPr:

; 1085 : 
; 1086 : 	if( IsArmorSkillKeyPress() )

  000e0	8b ce		 mov	 ecx, esi
  000e2	e8 00 00 00 00	 call	 ?IsArmorSkillKeyPress@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsArmorSkillKeyPress
  000e7	84 c0		 test	 al, al
  000e9	74 06		 je	 SHORT $LN3@CheckKeyPr

; 1087 : 		m_dwArmorPressTime = dwCurTime;

  000eb	89 be 20 01 00
	00		 mov	 DWORD PTR [esi+288], edi
$LN3@CheckKeyPr:

; 1088 : 
; 1089 : 	if( IsHelmetSkillKeyPress() )

  000f1	8b ce		 mov	 ecx, esi
  000f3	e8 00 00 00 00	 call	 ?IsHelmetSkillKeyPress@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsHelmetSkillKeyPress
  000f8	84 c0		 test	 al, al
  000fa	74 06		 je	 SHORT $LN2@CheckKeyPr

; 1090 : 		m_dwHelmetPressTime = dwCurTime;

  000fc	89 be 24 01 00
	00		 mov	 DWORD PTR [esi+292], edi
$LN2@CheckKeyPr:

; 1091 : 
; 1092 : 	if( IsCloakSkillKeyPress() )

  00102	8b ce		 mov	 ecx, esi
  00104	e8 00 00 00 00	 call	 ?IsCloakSkillKeyPress@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsCloakSkillKeyPress
  00109	84 c0		 test	 al, al
  0010b	74 06		 je	 SHORT $LN1@CheckKeyPr

; 1093 : 		m_dwCloakPressTime = dwCurTime;

  0010d	89 be 28 01 00
	00		 mov	 DWORD PTR [esi+296], edi
$LN1@CheckKeyPr:
  00113	5f		 pop	 edi
  00114	5e		 pop	 esi

; 1094 : }

  00115	c3		 ret	 0
?CheckKeyPressTime@ioUserKeyInput@@AAEXXZ ENDP		; ioUserKeyInput::CheckKeyPressTime
_TEXT	ENDS
PUBLIC	?ClearReleaseKeyPressTime@ioUserKeyInput@@AAEXXZ ; ioUserKeyInput::ClearReleaseKeyPressTime
; Function compile flags: /Ogsp
;	COMDAT ?ClearReleaseKeyPressTime@ioUserKeyInput@@AAEXXZ
_TEXT	SEGMENT
?ClearReleaseKeyPressTime@ioUserKeyInput@@AAEXXZ PROC	; ioUserKeyInput::ClearReleaseKeyPressTime, COMDAT
; _this$ = ecx

; 1097 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f1		 mov	 esi, ecx

; 1098 : 	DWORD dwCurTime = FRAMEGETTIME();

  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0000b	8b c8		 mov	 ecx, eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 1099 : 
; 1100 : 	if ( m_dwLeftPressTime > 0 && !IsLeftKeyDown() )

  00013	33 ff		 xor	 edi, edi
  00015	39 be c4 00 00
	00		 cmp	 DWORD PTR [esi+196], edi
  0001b	76 11		 jbe	 SHORT $LN18@ClearRelea
  0001d	8b ce		 mov	 ecx, esi
  0001f	e8 00 00 00 00	 call	 ?IsLeftKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsLeftKeyDown
  00024	84 c0		 test	 al, al
  00026	75 06		 jne	 SHORT $LN18@ClearRelea

; 1101 : 		m_dwLeftPressTime = 0;

  00028	89 be c4 00 00
	00		 mov	 DWORD PTR [esi+196], edi
$LN18@ClearRelea:

; 1102 : 
; 1103 : 	if( m_dwRightPressTime > 0 && !IsRightKeyDown() )

  0002e	39 be c8 00 00
	00		 cmp	 DWORD PTR [esi+200], edi
  00034	76 11		 jbe	 SHORT $LN17@ClearRelea
  00036	8b ce		 mov	 ecx, esi
  00038	e8 00 00 00 00	 call	 ?IsRightKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsRightKeyDown
  0003d	84 c0		 test	 al, al
  0003f	75 06		 jne	 SHORT $LN17@ClearRelea

; 1104 : 		m_dwRightPressTime = 0;

  00041	89 be c8 00 00
	00		 mov	 DWORD PTR [esi+200], edi
$LN17@ClearRelea:

; 1105 : 
; 1106 : 	if( m_dwUpPressTime > 0 && !IsUpKeyDown() )

  00047	39 be cc 00 00
	00		 cmp	 DWORD PTR [esi+204], edi
  0004d	76 11		 jbe	 SHORT $LN16@ClearRelea
  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?IsUpKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsUpKeyDown
  00056	84 c0		 test	 al, al
  00058	75 06		 jne	 SHORT $LN16@ClearRelea

; 1107 : 		m_dwUpPressTime = 0;

  0005a	89 be cc 00 00
	00		 mov	 DWORD PTR [esi+204], edi
$LN16@ClearRelea:

; 1108 : 
; 1109 : 	if( m_dwDownPressTime > 0 && !IsDownKeyDown() )

  00060	39 be d0 00 00
	00		 cmp	 DWORD PTR [esi+208], edi
  00066	76 11		 jbe	 SHORT $LN15@ClearRelea
  00068	8b ce		 mov	 ecx, esi
  0006a	e8 00 00 00 00	 call	 ?IsDownKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsDownKeyDown
  0006f	84 c0		 test	 al, al
  00071	75 06		 jne	 SHORT $LN15@ClearRelea

; 1110 : 		m_dwDownPressTime = 0;

  00073	89 be d0 00 00
	00		 mov	 DWORD PTR [esi+208], edi
$LN15@ClearRelea:

; 1111 : 
; 1112 : 	if( m_dwLeftUpPressTime > 0 && !IsLeftUpKeyDown() )

  00079	39 be d8 00 00
	00		 cmp	 DWORD PTR [esi+216], edi
  0007f	76 11		 jbe	 SHORT $LN14@ClearRelea
  00081	8b ce		 mov	 ecx, esi
  00083	e8 00 00 00 00	 call	 ?IsLeftUpKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsLeftUpKeyDown
  00088	84 c0		 test	 al, al
  0008a	75 06		 jne	 SHORT $LN14@ClearRelea

; 1113 : 		m_dwLeftUpPressTime  = 0;

  0008c	89 be d8 00 00
	00		 mov	 DWORD PTR [esi+216], edi
$LN14@ClearRelea:

; 1114 : 
; 1115 : 	if( m_dwLeftDownPressTime > 0 && !IsLeftDownKeyDown() )

  00092	39 be dc 00 00
	00		 cmp	 DWORD PTR [esi+220], edi
  00098	76 11		 jbe	 SHORT $LN13@ClearRelea
  0009a	8b ce		 mov	 ecx, esi
  0009c	e8 00 00 00 00	 call	 ?IsLeftDownKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsLeftDownKeyDown
  000a1	84 c0		 test	 al, al
  000a3	75 06		 jne	 SHORT $LN13@ClearRelea

; 1116 : 		m_dwLeftDownPressTime = 0;

  000a5	89 be dc 00 00
	00		 mov	 DWORD PTR [esi+220], edi
$LN13@ClearRelea:

; 1117 : 
; 1118 : 	if( m_dwRightUpPressTime > 0 && !IsRightUpKeyDown() )

  000ab	39 be e0 00 00
	00		 cmp	 DWORD PTR [esi+224], edi
  000b1	76 11		 jbe	 SHORT $LN12@ClearRelea
  000b3	8b ce		 mov	 ecx, esi
  000b5	e8 00 00 00 00	 call	 ?IsRightUpKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsRightUpKeyDown
  000ba	84 c0		 test	 al, al
  000bc	75 06		 jne	 SHORT $LN12@ClearRelea

; 1119 : 		m_dwRightUpPressTime = 0;

  000be	89 be e0 00 00
	00		 mov	 DWORD PTR [esi+224], edi
$LN12@ClearRelea:

; 1120 : 
; 1121 : 	if( m_dwRightDownPressTime > 0 && !IsRightDownKeyDown() )

  000c4	39 be e4 00 00
	00		 cmp	 DWORD PTR [esi+228], edi
  000ca	76 11		 jbe	 SHORT $LN11@ClearRelea
  000cc	8b ce		 mov	 ecx, esi
  000ce	e8 00 00 00 00	 call	 ?IsRightDownKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsRightDownKeyDown
  000d3	84 c0		 test	 al, al
  000d5	75 06		 jne	 SHORT $LN11@ClearRelea

; 1122 : 		m_dwRightDownPressTime = 0;

  000d7	89 be e4 00 00
	00		 mov	 DWORD PTR [esi+228], edi
$LN11@ClearRelea:

; 1123 : 
; 1124 : 	if( m_dwDefensePressTime > 0 && !IsDefenseKeyDown() )

  000dd	39 be 10 01 00
	00		 cmp	 DWORD PTR [esi+272], edi
  000e3	76 21		 jbe	 SHORT $LN9@ClearRelea
  000e5	8b ce		 mov	 ecx, esi
  000e7	e8 00 00 00 00	 call	 ?IsDefenseKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsDefenseKeyDown
  000ec	84 c0		 test	 al, al
  000ee	75 16		 jne	 SHORT $LN9@ClearRelea

; 1125 : 	{
; 1126 : 		if( (m_dwAttackPressTime == 0 && m_dwJumpPressTime == 0) )

  000f0	39 be 18 01 00
	00		 cmp	 DWORD PTR [esi+280], edi
  000f6	75 0e		 jne	 SHORT $LN9@ClearRelea
  000f8	39 be 14 01 00
	00		 cmp	 DWORD PTR [esi+276], edi
  000fe	75 0c		 jne	 SHORT $LN21@ClearRelea

; 1127 : 			m_dwDefensePressTime = 0;

  00100	89 be 10 01 00
	00		 mov	 DWORD PTR [esi+272], edi
$LN9@ClearRelea:

; 1128 : 	}
; 1129 : 
; 1130 : 	if( m_dwJumpPressTime > 0 && !IsJumpKeyDown() )

  00106	39 be 14 01 00
	00		 cmp	 DWORD PTR [esi+276], edi
$LN21@ClearRelea:
  0010c	76 21		 jbe	 SHORT $LN7@ClearRelea
  0010e	8b ce		 mov	 ecx, esi
  00110	e8 00 00 00 00	 call	 ?IsJumpKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsJumpKeyDown
  00115	84 c0		 test	 al, al
  00117	75 16		 jne	 SHORT $LN7@ClearRelea

; 1131 : 	{
; 1132 : 		if( (m_dwAttackPressTime == 0 && m_dwDefensePressTime == 0) )

  00119	39 be 18 01 00
	00		 cmp	 DWORD PTR [esi+280], edi
  0011f	75 14		 jne	 SHORT $LN22@ClearRelea
  00121	39 be 10 01 00
	00		 cmp	 DWORD PTR [esi+272], edi
  00127	75 06		 jne	 SHORT $LN7@ClearRelea

; 1133 : 		{
; 1134 : 			m_dwJumpPressTime = 0;

  00129	89 be 14 01 00
	00		 mov	 DWORD PTR [esi+276], edi
$LN7@ClearRelea:

; 1135 : 		}
; 1136 : 	}
; 1137 : 
; 1138 : 	if( m_dwAttackPressTime > 0 && !IsAttackKeyDown() )

  0012f	39 be 18 01 00
	00		 cmp	 DWORD PTR [esi+280], edi
$LN22@ClearRelea:
  00135	76 21		 jbe	 SHORT $LN5@ClearRelea
  00137	8b ce		 mov	 ecx, esi
  00139	e8 00 00 00 00	 call	 ?IsAttackKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsAttackKeyDown
  0013e	84 c0		 test	 al, al
  00140	75 16		 jne	 SHORT $LN5@ClearRelea

; 1139 : 	{
; 1140 : 		if( (m_dwDefensePressTime == 0 && m_dwJumpPressTime == 0) )

  00142	39 be 10 01 00
	00		 cmp	 DWORD PTR [esi+272], edi
  00148	75 0e		 jne	 SHORT $LN5@ClearRelea
  0014a	39 be 14 01 00
	00		 cmp	 DWORD PTR [esi+276], edi
  00150	75 06		 jne	 SHORT $LN5@ClearRelea

; 1141 : 			m_dwAttackPressTime = 0;

  00152	89 be 18 01 00
	00		 mov	 DWORD PTR [esi+280], edi
$LN5@ClearRelea:

; 1142 : 	}
; 1143 : 
; 1144 : 	if( m_dwWeaponPressTime > 0 && !IsWeaponSkillKeyDown() )

  00158	39 be 1c 01 00
	00		 cmp	 DWORD PTR [esi+284], edi
  0015e	76 11		 jbe	 SHORT $LN4@ClearRelea
  00160	8b ce		 mov	 ecx, esi
  00162	e8 00 00 00 00	 call	 ?IsWeaponSkillKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsWeaponSkillKeyDown
  00167	84 c0		 test	 al, al
  00169	75 06		 jne	 SHORT $LN4@ClearRelea

; 1145 : 		m_dwWeaponPressTime = 0;

  0016b	89 be 1c 01 00
	00		 mov	 DWORD PTR [esi+284], edi
$LN4@ClearRelea:

; 1146 : 
; 1147 : 	if( m_dwArmorPressTime > 0 && !IsArmorSkillKeyDown() )

  00171	39 be 20 01 00
	00		 cmp	 DWORD PTR [esi+288], edi
  00177	76 11		 jbe	 SHORT $LN3@ClearRelea
  00179	8b ce		 mov	 ecx, esi
  0017b	e8 00 00 00 00	 call	 ?IsArmorSkillKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsArmorSkillKeyDown
  00180	84 c0		 test	 al, al
  00182	75 06		 jne	 SHORT $LN3@ClearRelea

; 1148 : 		m_dwArmorPressTime = 0;

  00184	89 be 20 01 00
	00		 mov	 DWORD PTR [esi+288], edi
$LN3@ClearRelea:

; 1149 : 
; 1150 : 	if( m_dwHelmetPressTime > 0 && !IsHelmetSkillKeyDown() )

  0018a	39 be 24 01 00
	00		 cmp	 DWORD PTR [esi+292], edi
  00190	76 11		 jbe	 SHORT $LN2@ClearRelea
  00192	8b ce		 mov	 ecx, esi
  00194	e8 00 00 00 00	 call	 ?IsHelmetSkillKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsHelmetSkillKeyDown
  00199	84 c0		 test	 al, al
  0019b	75 06		 jne	 SHORT $LN2@ClearRelea

; 1151 : 		m_dwHelmetPressTime = 0;

  0019d	89 be 24 01 00
	00		 mov	 DWORD PTR [esi+292], edi
$LN2@ClearRelea:

; 1152 : 
; 1153 : 	if( m_dwCloakPressTime > 0 && !IsCloakSkillKeyDown() )

  001a3	39 be 28 01 00
	00		 cmp	 DWORD PTR [esi+296], edi
  001a9	76 11		 jbe	 SHORT $LN1@ClearRelea
  001ab	8b ce		 mov	 ecx, esi
  001ad	e8 00 00 00 00	 call	 ?IsCloakSkillKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsCloakSkillKeyDown
  001b2	84 c0		 test	 al, al
  001b4	75 06		 jne	 SHORT $LN1@ClearRelea

; 1154 : 		m_dwCloakPressTime = 0;

  001b6	89 be 28 01 00
	00		 mov	 DWORD PTR [esi+296], edi
$LN1@ClearRelea:
  001bc	5f		 pop	 edi
  001bd	5e		 pop	 esi
  001be	5b		 pop	 ebx

; 1155 : }

  001bf	c3		 ret	 0
?ClearReleaseKeyPressTime@ioUserKeyInput@@AAEXXZ ENDP	; ioUserKeyInput::ClearReleaseKeyPressTime
_TEXT	ENDS
PUBLIC	??0_Iterator_base12@std@@QAE@ABU01@@Z		; std::_Iterator_base12::_Iterator_base12
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 116  : 		{	// copy an iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	83 20 00	 and	 DWORD PTR [eax], 0
  00008	83 60 04 00	 and	 DWORD PTR [eax+4], 0

; 117  : 		*this = _Right;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00011	85 c9		 test	 ecx, ecx
  00013	74 0a		 je	 SHORT $LN6@Iterator_b
  00015	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00017	85 c9		 test	 ecx, ecx
  00019	74 04		 je	 SHORT $LN6@Iterator_b
  0001b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0001d	89 08		 mov	 DWORD PTR [eax], ecx
$LN6@Iterator_b:

; 118  : 		}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??0_Iterator_base12@std@@QAE@ABU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
PUBLIC	??0?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@ABV01@@Z ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  00010	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00013	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00016	5f		 pop	 edi
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
??0?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
_TEXT	ENDS
PUBLIC	??0?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@ABV01@@Z ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  00010	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00013	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00016	5f		 pop	 edi
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
??0?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
_TEXT	ENDS
PUBLIC	??0?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\deque
;	COMDAT ??0?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z PROC ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >, COMDAT
; _this$ = ecx

; 601  : 		{	// construct with offset _Off in *_Pdeque

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 0c	 push	 DWORD PTR __Pdeque$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR __Off$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >

; 602  : 		}

  00011	8b c6		 mov	 eax, esi
  00013	5e		 pop	 esi
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??0?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ENDP ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
_TEXT	ENDS
PUBLIC	?_Make_iter@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@V?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@V?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
?_Make_iter@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@V?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@@Z PROC ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Make_iter, COMDAT
; _this$ = ecx

; 1070 : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1071 : 		return (iterator(_Where._Myoff, this));

  00003	51		 push	 ecx
  00004	ff 75 14	 push	 DWORD PTR __Where$[ebp+8]
  00007	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1072 : 		}

  00012	5d		 pop	 ebp
  00013	c2 10 00	 ret	 16			; 00000010H
?_Make_iter@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@V?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@@Z ENDP ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Make_iter
_TEXT	ENDS
PUBLIC	??G?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEHABV?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@1@@Z ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator-
; Function compile flags: /Ogsp
;	COMDAT ??G?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEHABV?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEHABV?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@1@@Z PROC ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator-, COMDAT
; _this$ = ecx

; 677  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 678  : 		return (*(_Mybase *)this - _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00009	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000c	2b c2		 sub	 eax, edx

; 679  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??G?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEHABV?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@1@@Z ENDP ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator-
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@UtagDirKeyTime@ioUserKeyInput@@@std@@YAXAAV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@0@PAUtagDirKeyTime@ioUserKeyInput@@@Z ; std::_Dest_val<std::allocator<ioUserKeyInput::tagDirKeyTime>,ioUserKeyInput::tagDirKeyTime>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@UtagDirKeyTime@ioUserKeyInput@@@std@@YAXAAV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@0@PAUtagDirKeyTime@ioUserKeyInput@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@UtagDirKeyTime@ioUserKeyInput@@@std@@YAXAAV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@0@PAUtagDirKeyTime@ioUserKeyInput@@@Z PROC ; std::_Dest_val<std::allocator<ioUserKeyInput::tagDirKeyTime>,ioUserKeyInput::tagDirKeyTime>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@UtagDirKeyTime@ioUserKeyInput@@@std@@YAXAAV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@0@PAUtagDirKeyTime@ioUserKeyInput@@@Z ENDP ; std::_Dest_val<std::allocator<ioUserKeyInput::tagDirKeyTime>,ioUserKeyInput::tagDirKeyTime>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@UtagDirKeyTime@ioUserKeyInput@@ABU34@@std@@YAXAAV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@0@PAUtagDirKeyTime@ioUserKeyInput@@ABU23@@Z ; std::_Cons_val<std::allocator<ioUserKeyInput::tagDirKeyTime>,ioUserKeyInput::tagDirKeyTime,ioUserKeyInput::tagDirKeyTime const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@UtagDirKeyTime@ioUserKeyInput@@ABU34@@std@@YAXAAV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@0@PAUtagDirKeyTime@ioUserKeyInput@@ABU23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@UtagDirKeyTime@ioUserKeyInput@@ABU34@@std@@YAXAAV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@0@PAUtagDirKeyTime@ioUserKeyInput@@ABU23@@Z PROC ; std::_Cons_val<std::allocator<ioUserKeyInput::tagDirKeyTime>,ioUserKeyInput::tagDirKeyTime,ioUserKeyInput::tagDirKeyTime const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN9@Cons_val@2
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN9@Cons_val@2:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@UtagDirKeyTime@ioUserKeyInput@@ABU34@@std@@YAXAAV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@0@PAUtagDirKeyTime@ioUserKeyInput@@ABU23@@Z ENDP ; std::_Cons_val<std::allocator<ioUserKeyInput::tagDirKeyTime>,ioUserKeyInput::tagDirKeyTime,ioUserKeyInput::tagDirKeyTime const &>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_default_fill_n@PAPAUtagDirKeyTime@ioUserKeyInput@@IPAU12@V?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@IPBQAU12@AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@@Z ; std::_Uninitialized_default_fill_n<ioUserKeyInput::tagDirKeyTime * *,unsigned int,ioUserKeyInput::tagDirKeyTime *,std::allocator<ioUserKeyInput::tagDirKeyTime *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_default_fill_n@PAPAUtagDirKeyTime@ioUserKeyInput@@IPAU12@V?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@IPBQAU12@AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@@Z
_TEXT	SEGMENT
$T509443 = -4						; size = 4
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Pval$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_default_fill_n@PAPAUtagDirKeyTime@ioUserKeyInput@@IPAU12@V?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@IPBQAU12@AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@@Z PROC ; std::_Uninitialized_default_fill_n<ioUserKeyInput::tagDirKeyTime * *,unsigned int,ioUserKeyInput::tagDirKeyTime *,std::allocator<ioUserKeyInput::tagDirKeyTime *> >, COMDAT

; 670  : 	{	// copy _Count * _Val_type(_First)() to raw _First, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 671  : 	_Uninit_def_fill_n(_First, _Count, _Pval, _Al,
; 672  : 		_Val_type(_First), _Ptr_cat(_First, _First));

  00004	83 65 fc 00	 and	 DWORD PTR $T509443[ebp], 0
  00008	8d 45 fc	 lea	 eax, DWORD PTR $T509443[ebp]
  0000b	50		 push	 eax
  0000c	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00012	e8 00 00 00 00	 call	 ??$_Fill_n@PAPAUtagDirKeyTime@ioUserKeyInput@@IPAU12@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@IABQAU12@@Z ; std::_Fill_n<ioUserKeyInput::tagDirKeyTime * *,unsigned int,ioUserKeyInput::tagDirKeyTime *>
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 673  : 	}

  0001a	c9		 leave
  0001b	c3		 ret	 0
??$_Uninitialized_default_fill_n@PAPAUtagDirKeyTime@ioUserKeyInput@@IPAU12@V?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@IPBQAU12@AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@@Z ENDP ; std::_Uninitialized_default_fill_n<ioUserKeyInput::tagDirKeyTime * *,unsigned int,ioUserKeyInput::tagDirKeyTime *,std::allocator<ioUserKeyInput::tagDirKeyTime *> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@PAUtagDirKeyTime@ioUserKeyInput@@@std@@YAXAAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@PAPAUtagDirKeyTime@ioUserKeyInput@@@Z ; std::_Dest_val<std::allocator<ioUserKeyInput::tagDirKeyTime *>,ioUserKeyInput::tagDirKeyTime *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@PAUtagDirKeyTime@ioUserKeyInput@@@std@@YAXAAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@PAPAUtagDirKeyTime@ioUserKeyInput@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@PAUtagDirKeyTime@ioUserKeyInput@@@std@@YAXAAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@PAPAUtagDirKeyTime@ioUserKeyInput@@@Z PROC ; std::_Dest_val<std::allocator<ioUserKeyInput::tagDirKeyTime *>,ioUserKeyInput::tagDirKeyTime *>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@std@@PAUtagDirKeyTime@ioUserKeyInput@@@std@@YAXAAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@PAPAUtagDirKeyTime@ioUserKeyInput@@@Z ENDP ; std::_Dest_val<std::allocator<ioUserKeyInput::tagDirKeyTime *>,ioUserKeyInput::tagDirKeyTime *>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z PROC ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN7@Cons_val@3
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN7@Cons_val@3:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z ENDP ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z PROC ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z ENDP ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>
_TEXT	ENDS
PUBLIC	??$_Move_backward@V?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@V12@@std@@YA?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@0@V10@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >,std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move_backward@V?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@V12@@std@@YA?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@0@V10@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 12
__Last$ = 24						; size = 12
__Dest$ = 36						; size = 12
___formal$ = 48						; size = 1
??$_Move_backward@V?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@V12@@std@@YA?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@0@V10@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move_backward<std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >,std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> > >, COMDAT

; 2617 : 	{	// move [_First, _Last) backwards to [..., _Dest), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2618 : 	while (_First != _Last)

  00004	eb 22		 jmp	 SHORT $LN50@Move_backw
$LL2@Move_backw:

; 2619 : 		*--_Dest = _STD move(*--_Last);

  00006	ff 4d 20	 dec	 DWORD PTR __Last$[ebp+8]
  00009	8d 4d 18	 lea	 ecx, DWORD PTR __Last$[ebp]
  0000c	e8 00 00 00 00	 call	 ??D?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEABUtagDirKeyTime@ioUserKeyInput@@XZ ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator*
  00011	ff 4d 2c	 dec	 DWORD PTR __Dest$[ebp+8]
  00014	8d 4d 24	 lea	 ecx, DWORD PTR __Dest$[ebp]
  00017	8b f0		 mov	 esi, eax
  00019	e8 00 00 00 00	 call	 ??D?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEABUtagDirKeyTime@ioUserKeyInput@@XZ ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator*
  0001e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00020	89 08		 mov	 DWORD PTR [eax], ecx
  00022	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00025	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN50@Move_backw:

; 2618 : 	while (_First != _Last)

  00028	8b 45 14	 mov	 eax, DWORD PTR __First$[ebp+8]
  0002b	3b 45 20	 cmp	 eax, DWORD PTR __Last$[ebp+8]
  0002e	75 d6		 jne	 SHORT $LL2@Move_backw

; 2620 : 	return (_Dest);

  00030	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00033	8d 45 24	 lea	 eax, DWORD PTR __Dest$[ebp]
  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  0003e	8b 45 2c	 mov	 eax, DWORD PTR __Dest$[ebp+8]
  00041	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00044	8b c6		 mov	 eax, esi
  00046	5e		 pop	 esi

; 2621 : 	}

  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
??$_Move_backward@V?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@V12@@std@@YA?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@0@V10@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move_backward<std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >,std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> > >
_TEXT	ENDS
PUBLIC	??$_Move@V?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@V12@@std@@YA?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@0@V10@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >,std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@V?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@V12@@std@@YA?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@0@V10@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 12
__Last$ = 24						; size = 12
__Dest$ = 36						; size = 12
___formal$ = 48						; size = 1
??$_Move@V?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@V12@@std@@YA?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@0@V10@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >,std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> > >, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	eb 22		 jmp	 SHORT $LN52@Move
$LL12@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00006	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  00009	e8 00 00 00 00	 call	 ??D?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEABUtagDirKeyTime@ioUserKeyInput@@XZ ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator*
  0000e	8d 4d 24	 lea	 ecx, DWORD PTR __Dest$[ebp]
  00011	8b f0		 mov	 esi, eax
  00013	e8 00 00 00 00	 call	 ??D?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEABUtagDirKeyTime@ioUserKeyInput@@XZ ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator*
  00018	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001a	89 08		 mov	 DWORD PTR [eax], ecx
  0001c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00022	ff 45 2c	 inc	 DWORD PTR __Dest$[ebp+8]
  00025	ff 45 14	 inc	 DWORD PTR __First$[ebp+8]
$LN52@Move:

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00028	8b 45 14	 mov	 eax, DWORD PTR __First$[ebp+8]
  0002b	3b 45 20	 cmp	 eax, DWORD PTR __Last$[ebp+8]
  0002e	75 d6		 jne	 SHORT $LL12@Move

; 2515 : 	return (_Dest);

  00030	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00033	8d 45 24	 lea	 eax, DWORD PTR __Dest$[ebp]
  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  0003e	8b 45 2c	 mov	 eax, DWORD PTR __Dest$[ebp+8]
  00041	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00044	8b c6		 mov	 eax, esi
  00046	5e		 pop	 esi

; 2516 : 	}

  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
??$_Move@V?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@V12@@std@@YA?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@0@V10@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >,std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> > >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@UtagDirKeyTime@ioUserKeyInput@@U34@@std@@YAXAAV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@0@PAUtagDirKeyTime@ioUserKeyInput@@$$QAU23@@Z ; std::_Cons_val<std::allocator<ioUserKeyInput::tagDirKeyTime>,ioUserKeyInput::tagDirKeyTime,ioUserKeyInput::tagDirKeyTime>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@UtagDirKeyTime@ioUserKeyInput@@U34@@std@@YAXAAV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@0@PAUtagDirKeyTime@ioUserKeyInput@@$$QAU23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@UtagDirKeyTime@ioUserKeyInput@@U34@@std@@YAXAAV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@0@PAUtagDirKeyTime@ioUserKeyInput@@$$QAU23@@Z PROC ; std::_Cons_val<std::allocator<ioUserKeyInput::tagDirKeyTime>,ioUserKeyInput::tagDirKeyTime,ioUserKeyInput::tagDirKeyTime>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN7@Cons_val@4
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN7@Cons_val@4:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@UtagDirKeyTime@ioUserKeyInput@@U34@@std@@YAXAAV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@0@PAUtagDirKeyTime@ioUserKeyInput@@$$QAU23@@Z ENDP ; std::_Cons_val<std::allocator<ioUserKeyInput::tagDirKeyTime>,ioUserKeyInput::tagDirKeyTime,ioUserKeyInput::tagDirKeyTime>
_TEXT	ENDS
PUBLIC	??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ	; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@XZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@XZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@XZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@XZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@KV?$allocator@K@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@KV?$allocator@K@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@KV?$allocator@K@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@KV?$allocator@K@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@KV?$allocator@K@std@@@std@@IAEXPAK0@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@KV?$allocator@K@std@@@std@@IAEXPAK0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@KV?$allocator@K@std@@@std@@IAEXPAK0@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@KV?$allocator@K@std@@@std@@IAEXPAK0@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Destroy
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Umove@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove<unsigned long *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove<unsigned long *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAKPAKV?$allocator@K@std@@@std@@YAPAKPAK00AAV?$allocator@K@0@@Z ; std::_Uninitialized_move<unsigned long *,unsigned long *,std::allocator<unsigned long> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove<unsigned long *>
_TEXT	ENDS
PUBLIC	?EvaluateDirectionKey@ioUserKeyInput@@AAEXXZ	; ioUserKeyInput::EvaluateDirectionKey
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iouserkeyinput.cpp
;	COMDAT ?EvaluateDirectionKey@ioUserKeyInput@@AAEXXZ
_TEXT	SEGMENT
_dwFirstTime$ = -12					; size = 4
_eCurKey$ = -4						; size = 4
?EvaluateDirectionKey@ioUserKeyInput@@AAEXXZ PROC	; ioUserKeyInput::EvaluateDirectionKey, COMDAT
; _this$ = ecx

; 541  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 542  : 	DirKeyInput eCurKey = DKI_NONE;

  00008	33 db		 xor	 ebx, ebx
  0000a	57		 push	 edi
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 5d fc	 mov	 DWORD PTR _eCurKey$[ebp], ebx

; 543  : 	DirKeyInput eFourCurKey = DKI_NONE;
; 544  : 
; 545  : 	DWORD dwFirstTime = GetDirFirstKeyDownTime();

  00010	e8 00 00 00 00	 call	 ?GetDirFirstKeyDownTime@ioUserKeyInput@@AAEKXZ ; ioUserKeyInput::GetDirFirstKeyDownTime
  00015	89 45 f4	 mov	 DWORD PTR _dwFirstTime$[ebp], eax

; 546  : 	DWORD dwGap = FRAMEGETTIME() - dwFirstTime;

  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0001e	8b c8		 mov	 ecx, eax
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00026	8b f8		 mov	 edi, eax
  00028	2b 7d f4	 sub	 edi, DWORD PTR _dwFirstTime$[ebp]

; 547  : 
; 548  : 	EvaluateRealKey();

  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?EvaluateRealKey@ioUserKeyInput@@AAEXXZ ; ioUserKeyInput::EvaluateRealKey

; 549  : 	EvaluateRealFourKey();

  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?EvaluateRealFourKey@ioUserKeyInput@@AAEXXZ ; ioUserKeyInput::EvaluateRealFourKey

; 550  : 
; 551  : 	if( dwGap > 10 )

  00039	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  0003c	0f 86 d7 00 00
	00		 jbe	 $LN34@EvaluateDi

; 552  : 	{
; 553  : 		if( m_bLeftKey )

  00042	6a 03		 push	 3
  00044	5f		 pop	 edi
  00045	33 c0		 xor	 eax, eax
  00047	40		 inc	 eax
  00048	6a 05		 push	 5
  0004a	59		 pop	 ecx
  0004b	38 9e 45 01 00
	00		 cmp	 BYTE PTR [esi+325], bl
  00051	74 18		 je	 SHORT $LN33@EvaluateDi

; 554  : 		{
; 555  : 			if( m_bUpKey )

  00053	38 9e 3f 01 00
	00		 cmp	 BYTE PTR [esi+319], bl

; 556  : 			{
; 557  : 				eCurKey = DKI_LEFTUP;

  00059	75 54		 jne	 SHORT $LN41@EvaluateDi

; 558  : 			}
; 559  : 			else if( m_bDownKey )

  0005b	33 d2		 xor	 edx, edx
  0005d	38 9e 43 01 00
	00		 cmp	 BYTE PTR [esi+323], bl
  00063	0f 94 c2	 sete	 dl
  00066	83 c2 06	 add	 edx, 6

; 560  : 			{
; 561  : 				eCurKey = DKI_LEFTDOWN;
; 562  : 			}
; 563  : 			else
; 564  : 			{
; 565  : 				eCurKey = DKI_LEFT;
; 566  : 			}

  00069	eb 1d		 jmp	 SHORT $LN42@EvaluateDi
$LN33@EvaluateDi:

; 567  : 		}
; 568  : 		else if( m_bRightKey )

  0006b	38 9e 41 01 00
	00		 cmp	 BYTE PTR [esi+321], bl
  00071	74 1a		 je	 SHORT $LN27@EvaluateDi

; 569  : 		{
; 570  : 			if( m_bUpKey )

  00073	38 9e 3f 01 00
	00		 cmp	 BYTE PTR [esi+319], bl

; 571  : 			{
; 572  : 				eCurKey = DKI_RIGHTUP;

  00079	75 56		 jne	 SHORT $LN40@EvaluateDi

; 573  : 			}
; 574  : 			else if( m_bDownKey )

  0007b	33 d2		 xor	 edx, edx
  0007d	38 9e 43 01 00
	00		 cmp	 BYTE PTR [esi+323], bl
  00083	0f 95 c2	 setne	 dl
  00086	03 d7		 add	 edx, edi
$LN42@EvaluateDi:
  00088	89 55 fc	 mov	 DWORD PTR _eCurKey$[ebp], edx

; 575  : 			{
; 576  : 				eCurKey = DKI_RIGHTDOWN;
; 577  : 			}
; 578  : 			else
; 579  : 			{
; 580  : 				eCurKey = DKI_RIGHT;
; 581  : 			}

  0008b	eb 5c		 jmp	 SHORT $LN37@EvaluateDi
$LN27@EvaluateDi:

; 582  : 		}
; 583  : 		else if( m_bUpKey )

  0008d	38 9e 3f 01 00
	00		 cmp	 BYTE PTR [esi+319], bl
  00093	74 05		 je	 SHORT $LN21@EvaluateDi

; 584  : 		{
; 585  : 			eCurKey = DKI_UP;

  00095	89 45 fc	 mov	 DWORD PTR _eCurKey$[ebp], eax
  00098	eb 4f		 jmp	 SHORT $LN37@EvaluateDi
$LN21@EvaluateDi:

; 586  : 		}
; 587  : 		else if( m_bDownKey )

  0009a	38 9e 43 01 00
	00		 cmp	 BYTE PTR [esi+323], bl
  000a0	74 05		 je	 SHORT $LN19@EvaluateDi

; 588  : 		{
; 589  : 			eCurKey = DKI_DOWN;

  000a2	89 4d fc	 mov	 DWORD PTR _eCurKey$[ebp], ecx
  000a5	eb 42		 jmp	 SHORT $LN37@EvaluateDi
$LN19@EvaluateDi:

; 590  : 		}
; 591  : 		else if( m_bLeftUpKey )

  000a7	38 9e 46 01 00
	00		 cmp	 BYTE PTR [esi+326], bl
  000ad	74 09		 je	 SHORT $LN17@EvaluateDi
$LN41@EvaluateDi:

; 592  : 		{
; 593  : 			eCurKey = DKI_LEFTUP;

  000af	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _eCurKey$[ebp], 8
  000b6	eb 31		 jmp	 SHORT $LN37@EvaluateDi
$LN17@EvaluateDi:

; 594  : 		}
; 595  : 		else if( m_bLeftDownKey )

  000b8	38 9e 44 01 00
	00		 cmp	 BYTE PTR [esi+324], bl
  000be	74 09		 je	 SHORT $LN15@EvaluateDi

; 596  : 		{
; 597  : 			eCurKey = DKI_LEFTDOWN;

  000c0	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR _eCurKey$[ebp], 6
  000c7	eb 20		 jmp	 SHORT $LN37@EvaluateDi
$LN15@EvaluateDi:

; 598  : 		}
; 599  : 		else if( m_bRightUpKey )

  000c9	38 9e 40 01 00
	00		 cmp	 BYTE PTR [esi+320], bl
  000cf	74 09		 je	 SHORT $LN13@EvaluateDi
$LN40@EvaluateDi:

; 600  : 		{
; 601  : 			eCurKey = DKI_RIGHTUP;

  000d1	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _eCurKey$[ebp], 2
  000d8	eb 0f		 jmp	 SHORT $LN37@EvaluateDi
$LN13@EvaluateDi:

; 602  : 		}
; 603  : 		else if( m_bRightDownKey )

  000da	38 9e 42 01 00
	00		 cmp	 BYTE PTR [esi+322], bl
  000e0	74 07		 je	 SHORT $LN37@EvaluateDi

; 604  : 		{
; 605  : 			eCurKey = DKI_RIGHTDOWN;

  000e2	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _eCurKey$[ebp], 4
$LN37@EvaluateDi:

; 606  : 		}
; 607  : 
; 608  : 		// fourkey Check
; 609  : 		if( m_bFourUpKey )

  000e9	38 9e 47 01 00
	00		 cmp	 BYTE PTR [esi+327], bl
  000ef	74 07		 je	 SHORT $LN10@EvaluateDi

; 610  : 			eFourCurKey = DKI_UP;

  000f1	8b f8		 mov	 edi, eax
  000f3	e9 85 00 00 00	 jmp	 $LN2@EvaluateDi
$LN10@EvaluateDi:

; 611  : 		else if( m_bFourRightKey )

  000f8	38 9e 48 01 00
	00		 cmp	 BYTE PTR [esi+328], bl

; 612  : 			eFourCurKey = DKI_RIGHT;

  000fe	75 7d		 jne	 SHORT $LN2@EvaluateDi

; 613  : 		else if( m_bFourDownKey )

  00100	38 9e 49 01 00
	00		 cmp	 BYTE PTR [esi+329], bl
  00106	74 04		 je	 SHORT $LN6@EvaluateDi

; 614  : 			eFourCurKey = DKI_DOWN;

  00108	8b f9		 mov	 edi, ecx
  0010a	eb 71		 jmp	 SHORT $LN2@EvaluateDi
$LN6@EvaluateDi:

; 615  : 		else if( m_bFourLeftKey )

  0010c	38 9e 4a 01 00
	00		 cmp	 BYTE PTR [esi+330], bl
  00112	74 67		 je	 SHORT $LN39@EvaluateDi

; 616  : 			eFourCurKey = DKI_LEFT;

  00114	6a 07		 push	 7
  00116	5f		 pop	 edi

; 617  : 	}
; 618  : 	else

  00117	eb 64		 jmp	 SHORT $LN2@EvaluateDi
$LN34@EvaluateDi:

; 619  : 	{
; 620  : 		if( IsUpKeyDown()       ||
; 621  : 			IsDownKeyDown()     ||
; 622  : 			IsLeftKeyDown()     ||
; 623  : 			IsRightKeyDown()    ||
; 624  : 			IsLeftUpKeyDown()   ||
; 625  : 			IsLeftDownKeyDown() ||
; 626  : 			IsRightUpKeyDown()  ||
; 627  : 			IsRightDownKeyDown() )

  00119	8b ce		 mov	 ecx, esi
  0011b	e8 00 00 00 00	 call	 ?IsUpKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsUpKeyDown
  00120	84 c0		 test	 al, al
  00122	75 4d		 jne	 SHORT $LN1@EvaluateDi
  00124	8b ce		 mov	 ecx, esi
  00126	e8 00 00 00 00	 call	 ?IsDownKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsDownKeyDown
  0012b	84 c0		 test	 al, al
  0012d	75 42		 jne	 SHORT $LN1@EvaluateDi
  0012f	8b ce		 mov	 ecx, esi
  00131	e8 00 00 00 00	 call	 ?IsLeftKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsLeftKeyDown
  00136	84 c0		 test	 al, al
  00138	75 37		 jne	 SHORT $LN1@EvaluateDi
  0013a	8b ce		 mov	 ecx, esi
  0013c	e8 00 00 00 00	 call	 ?IsRightKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsRightKeyDown
  00141	84 c0		 test	 al, al
  00143	75 2c		 jne	 SHORT $LN1@EvaluateDi
  00145	8b ce		 mov	 ecx, esi
  00147	e8 00 00 00 00	 call	 ?IsLeftUpKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsLeftUpKeyDown
  0014c	84 c0		 test	 al, al
  0014e	75 21		 jne	 SHORT $LN1@EvaluateDi
  00150	8b ce		 mov	 ecx, esi
  00152	e8 00 00 00 00	 call	 ?IsLeftDownKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsLeftDownKeyDown
  00157	84 c0		 test	 al, al
  00159	75 16		 jne	 SHORT $LN1@EvaluateDi
  0015b	8b ce		 mov	 ecx, esi
  0015d	e8 00 00 00 00	 call	 ?IsRightUpKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsRightUpKeyDown
  00162	84 c0		 test	 al, al
  00164	75 0b		 jne	 SHORT $LN1@EvaluateDi
  00166	8b ce		 mov	 ecx, esi
  00168	e8 00 00 00 00	 call	 ?IsRightDownKeyDown@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsRightDownKeyDown
  0016d	84 c0		 test	 al, al
  0016f	74 0a		 je	 SHORT $LN39@EvaluateDi
$LN1@EvaluateDi:

; 628  : 		{
; 629  : 			eCurKey = m_CurDirKey;

  00171	8b 06		 mov	 eax, DWORD PTR [esi]

; 630  : 			eFourCurKey = m_FourDirKey;

  00173	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00176	89 45 fc	 mov	 DWORD PTR _eCurKey$[ebp], eax
  00179	eb 02		 jmp	 SHORT $LN2@EvaluateDi
$LN39@EvaluateDi:
  0017b	8b fb		 mov	 edi, ebx
$LN2@EvaluateDi:

; 631  : 		}
; 632  : 	}
; 633  : 
; 634  : 	FixDiagonalDirRelease( eCurKey );

  0017d	ff 75 fc	 push	 DWORD PTR _eCurKey$[ebp]
  00180	8b ce		 mov	 ecx, esi
  00182	e8 00 00 00 00	 call	 ?FixDiagonalDirRelease@ioUserKeyInput@@AAEXW4DirKeyInput@1@@Z ; ioUserKeyInput::FixDiagonalDirRelease

; 635  : 
; 636  : 	m_FourDirKey = eFourCurKey;	 

  00187	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  0018a	5f		 pop	 edi
  0018b	5e		 pop	 esi
  0018c	5b		 pop	 ebx

; 637  : }

  0018d	c9		 leave
  0018e	c3		 ret	 0
?EvaluateDirectionKey@ioUserKeyInput@@AAEXXZ ENDP	; ioUserKeyInput::EvaluateDirectionKey
_TEXT	ENDS
PUBLIC	?pop_front@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEXXZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::pop_front
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\deque
;	COMDAT ?pop_front@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_front@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEXXZ PROC ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::pop_front, COMDAT
; _this$ = ecx

; 1233 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1234 : 		if (empty())
; 1235 : 			_DEBUG_ERROR("deque empty before pop");
; 1236 : 		else
; 1237 : 			{	// something to erase, do it
; 1238 : 			_Orphan_off(this->_Myoff);
; 1239 : 			size_type _Block = this->_Myoff / _DEQUESIZ;
; 1240 : 			_Dest_val(this->_Alval,
; 1241 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1242 : 			if (this->_Mapsize * _DEQUESIZ <= ++this->_Myoff)
; 1243 : 				this->_Myoff = 0;
; 1244 : 			if (--this->_Mysize == 0)
; 1245 : 				this->_Myoff = 0;
; 1246 : 			}
; 1247 : 
; 1248 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1249 : 		if (!empty())

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	85 c0		 test	 eax, eax
  00005	74 1d		 je	 SHORT $LN1@pop_front

; 1250 : 			{	// something to erase, do it
; 1251 : 			size_type _Block = this->_Myoff / _DEQUESIZ;
; 1252 : 			_Dest_val(this->_Alval,
; 1253 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1254 : 			if (this->_Mapsize * _DEQUESIZ <= ++this->_Myoff)

  00007	ff 41 0c	 inc	 DWORD PTR [ecx+12]
  0000a	56		 push	 esi
  0000b	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  0000e	03 f6		 add	 esi, esi
  00010	3b 71 0c	 cmp	 esi, DWORD PTR [ecx+12]
  00013	5e		 pop	 esi
  00014	77 04		 ja	 SHORT $LN2@pop_front

; 1255 : 				this->_Myoff = 0;

  00016	83 61 0c 00	 and	 DWORD PTR [ecx+12], 0
$LN2@pop_front:

; 1256 : 			if (--this->_Mysize == 0)

  0001a	48		 dec	 eax
  0001b	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0001e	75 04		 jne	 SHORT $LN1@pop_front

; 1257 : 				this->_Myoff = 0;

  00020	83 61 0c 00	 and	 DWORD PTR [ecx+12], 0
$LN1@pop_front:

; 1258 : 			}
; 1259 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1260 : 		}

  00024	c3		 ret	 0
?pop_front@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEXXZ ENDP ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::pop_front
_TEXT	ENDS
PUBLIC	?begin@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@XZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@XZ PROC ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::begin, COMDAT
; _this$ = ecx

; 1050 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1051 : 		return (iterator(this->_Myoff, this));

  00003	51		 push	 ecx
  00004	ff 71 0c	 push	 DWORD PTR [ecx+12]
  00007	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1052 : 		}

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?begin@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@XZ ENDP ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::begin
_TEXT	ENDS
PUBLIC	?end@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@XZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@XZ PROC ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::end, COMDAT
; _this$ = ecx

; 1060 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1061 : 		return (iterator(this->_Myoff + this->_Mysize, this));

  00003	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00006	03 41 0c	 add	 eax, DWORD PTR [ecx+12]
  00009	51		 push	 ecx
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??0?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1062 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?end@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@XZ ENDP ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::end
_TEXT	ENDS
PUBLIC	?_Growmap@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@IAEXI@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Growmap
; Function compile flags: /Ogsp
;	COMDAT ?_Growmap@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
$T510035 = -12						; size = 4
$T509982 = -12						; size = 4
__Myptr$ = -12						; size = 4
$T509959 = -8						; size = 4
$T509919 = -8						; size = 4
__Newmap$ = -4						; size = 4
__Cat$510009 = 8					; size = 1
__Cat$509995 = 8					; size = 1
__Cat$509931 = 8					; size = 1
__Cat$509917 = 8					; size = 1
__Count$ = 8						; size = 4
?_Growmap@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@IAEXI@Z PROC ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Growmap, COMDAT
; _this$ = ecx

; 1589 : 		{	// grow map by _Count pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 1590 : 		if (max_size() / _DEQUESIZ - this->_Mapsize < _Count)

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	ba ff ff ff 0f	 mov	 edx, 268435455		; 0fffffffH
  00011	8b ca		 mov	 ecx, edx
  00013	2b c8		 sub	 ecx, eax
  00015	3b 4d 08	 cmp	 ecx, DWORD PTR __Count$[ebp]
  00018	73 0b		 jae	 SHORT $LN6@Growmap

; 1591 : 			_Xlen();	// result too long

  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN75@Growmap:
$LN6@Growmap:

; 1592 : 
; 1593 : 		size_type _Inc = this->_Mapsize / 2;	// try to grow by 50%

  00025	8b c8		 mov	 ecx, eax
  00027	d1 e9		 shr	 ecx, 1

; 1594 : 		if (_Inc < _DEQUEMAPSIZ)

  00029	83 f9 08	 cmp	 ecx, 8
  0002c	73 03		 jae	 SHORT $LN5@Growmap

; 1595 : 			_Inc = _DEQUEMAPSIZ;

  0002e	6a 08		 push	 8
  00030	59		 pop	 ecx
$LN5@Growmap:

; 1596 : 		if (_Count < _Inc && this->_Mapsize <= max_size() / _DEQUESIZ - _Inc)

  00031	39 4d 08	 cmp	 DWORD PTR __Count$[ebp], ecx
  00034	73 09		 jae	 SHORT $LN4@Growmap
  00036	2b d1		 sub	 edx, ecx
  00038	3b c2		 cmp	 eax, edx
  0003a	77 03		 ja	 SHORT $LN4@Growmap

; 1597 : 			_Count = _Inc;

  0003c	89 4d 08	 mov	 DWORD PTR __Count$[ebp], ecx
$LN4@Growmap:

; 1598 : 		size_type _Myboff = this->_Myoff / _DEQUESIZ;
; 1599 : 		_Mapptr _Newmap = this->_Almap.allocate(this->_Mapsize + _Count);

  0003f	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  00042	53		 push	 ebx
  00043	57		 push	 edi
  00044	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00047	6a 00		 push	 0
  00049	50		 push	 eax
  0004a	d1 ef		 shr	 edi, 1
  0004c	e8 00 00 00 00	 call	 ??$_Allocate@PAUtagDirKeyTime@ioUserKeyInput@@@std@@YAPAPAUtagDirKeyTime@ioUserKeyInput@@IPAPAU12@@Z ; std::_Allocate<ioUserKeyInput::tagDirKeyTime *>

; 1600 : 		_Mapptr _Myptr = _Newmap + _Myboff;
; 1601 : 
; 1602 : 		_Myptr = _Uninitialized_copy(this->_Map + _Myboff,
; 1603 : 			this->_Map + this->_Mapsize,
; 1604 : 			_Myptr, this->_Almap);	// copy initial to end

  00051	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00054	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00057	ff 75 08	 push	 DWORD PTR __Cat$509917[ebp]
  0005a	8d 14 91	 lea	 edx, DWORD PTR [ecx+edx*4]
  0005d	8b df		 mov	 ebx, edi
  0005f	c1 e3 02	 shl	 ebx, 2
  00062	03 cb		 add	 ecx, ebx
  00064	89 4d f8	 mov	 DWORD PTR $T509919[ebp], ecx
  00067	8d 4e 15	 lea	 ecx, DWORD PTR [esi+21]
  0006a	51		 push	 ecx
  0006b	89 45 fc	 mov	 DWORD PTR __Newmap$[ebp], eax
  0006e	03 c3		 add	 eax, ebx
  00070	50		 push	 eax
  00071	52		 push	 edx
  00072	ff 75 f8	 push	 DWORD PTR $T509919[ebp]
  00075	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUtagDirKeyTime@ioUserKeyInput@@PAU12@@std@@YAPAPAUtagDirKeyTime@ioUserKeyInput@@PAPAU12@00AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<ioUserKeyInput::tagDirKeyTime *,ioUserKeyInput::tagDirKeyTime *>

; 1605 : 		if (_Myboff <= _Count)

  0007a	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]

; 1606 : 			{	// increment greater than offset of initial block
; 1607 : 			_Myptr = _Uninitialized_copy(this->_Map,
; 1608 : 				this->_Map + _Myboff,
; 1609 : 				_Myptr, this->_Almap);	// copy rest of old

  0007d	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00080	83 c4 1c	 add	 esp, 28			; 0000001cH
  00083	89 45 f4	 mov	 DWORD PTR __Myptr$[ebp], eax
  00086	3b fa		 cmp	 edi, edx
  00088	77 3d		 ja	 SHORT $LN3@Growmap

; 1610 : 			_Uninitialized_default_fill_n(_Myptr, _Count - _Myboff,
; 1611 : 				(pointer *)0, this->_Almap);	// clear suffix of new

  0008a	83 65 f8 00	 and	 DWORD PTR $T509959[ebp], 0
  0008e	8d 45 f8	 lea	 eax, DWORD PTR $T509959[ebp]
  00091	50		 push	 eax
  00092	2b d7		 sub	 edx, edi
  00094	52		 push	 edx
  00095	ff 75 08	 push	 DWORD PTR __Cat$509931[ebp]
  00098	8d 56 15	 lea	 edx, DWORD PTR [esi+21]
  0009b	52		 push	 edx
  0009c	ff 75 f4	 push	 DWORD PTR __Myptr$[ebp]
  0009f	03 d9		 add	 ebx, ecx
  000a1	53		 push	 ebx
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUtagDirKeyTime@ioUserKeyInput@@PAU12@@std@@YAPAPAUtagDirKeyTime@ioUserKeyInput@@PAPAU12@00AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<ioUserKeyInput::tagDirKeyTime *,ioUserKeyInput::tagDirKeyTime *>
  000a8	83 c4 14	 add	 esp, 20			; 00000014H
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??$_Fill_n@PAPAUtagDirKeyTime@ioUserKeyInput@@IPAU12@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@IABQAU12@@Z ; std::_Fill_n<ioUserKeyInput::tagDirKeyTime * *,unsigned int,ioUserKeyInput::tagDirKeyTime *>

; 1612 : 			_Uninitialized_default_fill_n(_Newmap, _Myboff,
; 1613 : 				(pointer *)0, this->_Almap);	// clear prefix of new

  000b1	83 65 f4 00	 and	 DWORD PTR $T509982[ebp], 0
  000b5	8d 45 f4	 lea	 eax, DWORD PTR $T509982[ebp]
  000b8	50		 push	 eax
  000b9	57		 push	 edi
  000ba	ff 75 fc	 push	 DWORD PTR __Newmap$[ebp]
  000bd	e8 00 00 00 00	 call	 ??$_Fill_n@PAPAUtagDirKeyTime@ioUserKeyInput@@IPAU12@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@IABQAU12@@Z ; std::_Fill_n<ioUserKeyInput::tagDirKeyTime * *,unsigned int,ioUserKeyInput::tagDirKeyTime *>
  000c2	83 c4 18	 add	 esp, 24			; 00000018H

; 1614 : 			}
; 1615 : 		else

  000c5	eb 49		 jmp	 SHORT $LN64@Growmap
$LN3@Growmap:

; 1616 : 			{	// increment not greater than offset of initial block
; 1617 : 			_Uninitialized_copy(this->_Map,
; 1618 : 				this->_Map + _Count,
; 1619 : 				_Myptr, this->_Almap);	// copy more old

  000c7	ff 75 08	 push	 DWORD PTR __Cat$509995[ebp]
  000ca	8b fa		 mov	 edi, edx
  000cc	8d 56 15	 lea	 edx, DWORD PTR [esi+21]
  000cf	52		 push	 edx
  000d0	50		 push	 eax
  000d1	c1 e7 02	 shl	 edi, 2
  000d4	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  000d7	50		 push	 eax
  000d8	51		 push	 ecx
  000d9	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUtagDirKeyTime@ioUserKeyInput@@PAU12@@std@@YAPAPAUtagDirKeyTime@ioUserKeyInput@@PAPAU12@00AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<ioUserKeyInput::tagDirKeyTime *,ioUserKeyInput::tagDirKeyTime *>

; 1620 : 			_Myptr = _Uninitialized_copy(this->_Map + _Count,
; 1621 : 				this->_Map + _Myboff,
; 1622 : 				_Newmap, this->_Almap);	// copy rest of old

  000de	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 1623 : 			_Uninitialized_default_fill_n(_Myptr, _Count,
; 1624 : 				(pointer *)0, this->_Almap);	// clear rest to initial block

  000e1	83 65 f4 00	 and	 DWORD PTR $T510035[ebp], 0
  000e5	83 c4 14	 add	 esp, 20			; 00000014H
  000e8	03 d8		 add	 ebx, eax
  000ea	03 f8		 add	 edi, eax
  000ec	8d 45 f4	 lea	 eax, DWORD PTR $T510035[ebp]
  000ef	50		 push	 eax
  000f0	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  000f3	8d 46 15	 lea	 eax, DWORD PTR [esi+21]
  000f6	ff 75 08	 push	 DWORD PTR __Cat$510009[ebp]
  000f9	50		 push	 eax
  000fa	ff 75 fc	 push	 DWORD PTR __Newmap$[ebp]
  000fd	53		 push	 ebx
  000fe	57		 push	 edi
  000ff	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUtagDirKeyTime@ioUserKeyInput@@PAU12@@std@@YAPAPAUtagDirKeyTime@ioUserKeyInput@@PAPAU12@00AAV?$allocator@PAUtagDirKeyTime@ioUserKeyInput@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<ioUserKeyInput::tagDirKeyTime *,ioUserKeyInput::tagDirKeyTime *>
  00104	83 c4 14	 add	 esp, 20			; 00000014H
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 ??$_Fill_n@PAPAUtagDirKeyTime@ioUserKeyInput@@IPAU12@@std@@YAXPAPAUtagDirKeyTime@ioUserKeyInput@@IABQAU12@@Z ; std::_Fill_n<ioUserKeyInput::tagDirKeyTime * *,unsigned int,ioUserKeyInput::tagDirKeyTime *>
  0010d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN64@Growmap:

; 1625 : 			}
; 1626 : 
; 1627 : 		_Destroy_range(this->_Map + _Myboff, this->_Map + this->_Mapsize,
; 1628 : 			this->_Almap);
; 1629 : 		if (this->_Map != 0)

  00110	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00113	5f		 pop	 edi
  00114	5b		 pop	 ebx
  00115	85 c0		 test	 eax, eax
  00117	74 07		 je	 SHORT $LN72@Growmap

; 1630 : 			this->_Almap.deallocate(this->_Map,
; 1631 : 				this->_Mapsize);	// free storage for old

  00119	50		 push	 eax
  0011a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0011f	59		 pop	 ecx
$LN72@Growmap:

; 1632 : 
; 1633 : 		this->_Map = _Newmap;	// point at new

  00120	8b 45 fc	 mov	 eax, DWORD PTR __Newmap$[ebp]
  00123	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1634 : 		this->_Mapsize += _Count;

  00126	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00129	01 46 08	 add	 DWORD PTR [esi+8], eax
  0012c	5e		 pop	 esi

; 1635 : 		}

  0012d	c9		 leave
  0012e	c2 04 00	 ret	 4
$LN74@Growmap:
?_Growmap@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@IAEXI@Z ENDP ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Growmap
_TEXT	ENDS
PUBLIC	??0?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@1@@Z ; std::_Deque_val<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Deque_val<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
EXTRN	__imp_??1_Container_base12@std@@QAE@XZ:PROC
EXTRN	__imp_??0_Container_base12@std@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??0?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@1@@Z$0
__ehfuncinfo$??0?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\deque
xdata$x	ENDS
;	COMDAT ??0?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@1@@Z PROC ; std::_Deque_val<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Deque_val<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >, COMDAT
; _this$ = ecx

; 728  : 		{	// construct allocators from _Al

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Container_base12@std@@QAE@XZ
  00017	33 ff		 xor	 edi, edi

; 729  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 730  : 			_Alproxy(_Alval);
; 731  : 		this->_Myproxy = _Alproxy.allocate(1);

  00019	57		 push	 edi
  0001a	6a 01		 push	 1
  0001c	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  0001f	e8 00 00 00 00	 call	 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
  00024	59		 pop	 ecx
  00025	59		 pop	 ecx

; 732  : 		_Cons_val(_Alproxy, this->_Myproxy, _Container_proxy());

  00026	33 c9		 xor	 ecx, ecx
  00028	33 d2		 xor	 edx, edx
  0002a	89 06		 mov	 DWORD PTR [esi], eax
  0002c	3b c7		 cmp	 eax, edi
  0002e	74 05		 je	 SHORT $LN20@Deque_val
  00030	89 08		 mov	 DWORD PTR [eax], ecx
  00032	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN20@Deque_val:

; 733  : 		this->_Myproxy->_Mycont = this;

  00035	8b 06		 mov	 eax, DWORD PTR [esi]
  00037	89 30		 mov	 DWORD PTR [eax], esi

; 734  : 
; 735  : 		_Map = 0;

  00039	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 736  : 		_Mapsize = 0;

  0003c	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 737  : 		_Myoff = 0;

  0003f	89 7e 0c	 mov	 DWORD PTR [esi+12], edi

; 738  : 		_Mysize = 0;

  00042	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 739  : 		}

  00045	8b c6		 mov	 eax, esi
  00047	e8 00 00 00 00	 call	 __EH_epilog3
  0004c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
__ehhandler$??0?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@1@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@1@@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@1@@Z ENDP ; std::_Deque_val<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Deque_val<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
PUBLIC	??1?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ ; std::_Deque_val<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::~_Deque_val<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
EXTRN	__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??1?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\deque
xdata$x	ENDS
;	COMDAT ??1?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ PROC ; std::_Deque_val<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::~_Deque_val<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >, COMDAT
; _this$ = ecx

; 742  : 		{	// destroy proxy

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 743  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 744  : 			_Alproxy(_Alval);
; 745  : 		this->_Orphan_all();

  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ

; 746  : 		_Dest_val(_Alproxy, this->_Myproxy);
; 747  : 		_Alproxy.deallocate(this->_Myproxy, 1);

  0001b	ff 36		 push	 DWORD PTR [esi]
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 748  : 		this->_Myproxy = 0;

  00022	83 26 00	 and	 DWORD PTR [esi], 0

; 749  : 		}

  00025	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00029	59		 pop	 ecx
  0002a	8b ce		 mov	 ecx, esi
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
  00032	e8 00 00 00 00	 call	 __EH_epilog3
  00037	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
__ehhandler$??1?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_val<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::~_Deque_val<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
PUBLIC	??H?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator+
; Function compile flags: /Ogsp
;	COMDAT ??H?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
__Tmp$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator+, COMDAT
; _this$ = ecx

; 660  : 		{	// return this + integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi

; 661  : 		_Myiter _Tmp = *this;

  0000a	56		 push	 esi
  0000b	8d 4d f4	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12

; 662  : 		return (_Tmp += _Off);

  00013	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  00016	03 75 0c	 add	 esi, DWORD PTR __Off$[ebp]
  00019	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __Tmp$[ebp]
  0001f	50		 push	 eax
  00020	8b cf		 mov	 ecx, edi
  00022	89 75 fc	 mov	 DWORD PTR __Tmp$[ebp+8], esi
  00025	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  0002a	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002d	8b c7		 mov	 eax, edi
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi

; 663  : 		}

  00031	c9		 leave
  00032	c2 08 00	 ret	 8
??H?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator+
_TEXT	ENDS
PUBLIC	??G?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator-
; Function compile flags: /Ogsp
;	COMDAT ??G?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
__Tmp$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??G?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator-, COMDAT
; _this$ = ecx

; 671  : 		{	// return this - integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi

; 672  : 		_Myiter _Tmp = *this;

  0000a	56		 push	 esi
  0000b	8d 4d f4	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12

; 673  : 		return (_Tmp -= _Off);

  00013	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  00016	2b 75 0c	 sub	 esi, DWORD PTR __Off$[ebp]
  00019	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __Tmp$[ebp]
  0001f	50		 push	 eax
  00020	8b cf		 mov	 ecx, edi
  00022	89 75 fc	 mov	 DWORD PTR __Tmp$[ebp+8], esi
  00025	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  0002a	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002d	8b c7		 mov	 eax, edi
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi

; 674  : 		}

  00031	c9		 leave
  00032	c2 08 00	 ret	 8
??G?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator-
_TEXT	ENDS
PUBLIC	?pop_back@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEXXZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::pop_back
; Function compile flags: /Ogsp
;	COMDAT ?pop_back@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_back@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEXXZ PROC ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::pop_back, COMDAT
; _this$ = ecx

; 1273 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1274 : 		if (empty())
; 1275 : 			_DEBUG_ERROR("deque empty before pop");
; 1276 : 		else
; 1277 : 			{	// something to erase, do it
; 1278 : 			_Orphan_off(this->_Myoff + this->_Mysize - 1);
; 1279 : 			size_type _Newoff = this->_Mysize + this->_Myoff - 1;
; 1280 : 			size_type _Block = _Newoff / _DEQUESIZ;
; 1281 : 			if (this->_Mapsize <= _Block)
; 1282 : 				_Block -= this->_Mapsize;
; 1283 : 			_Dest_val(this->_Alval,
; 1284 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1285 : 			if (--this->_Mysize == 0)
; 1286 : 				this->_Myoff = 0;
; 1287 : 			}
; 1288 : 
; 1289 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1290 : 		if (!empty())

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	85 c0		 test	 eax, eax
  00005	74 0a		 je	 SHORT $LN1@pop_back

; 1291 : 			{	// something to erase, do it
; 1292 : 			size_type _Newoff = this->_Mysize + this->_Myoff - 1;
; 1293 : 			size_type _Block = _Newoff / _DEQUESIZ;
; 1294 : 			if (this->_Mapsize <= _Block)
; 1295 : 				_Block -= this->_Mapsize;
; 1296 : 			_Dest_val(this->_Alval,
; 1297 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1298 : 			if (--this->_Mysize == 0)

  00007	48		 dec	 eax
  00008	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000b	75 04		 jne	 SHORT $LN1@pop_back

; 1299 : 				this->_Myoff = 0;

  0000d	83 61 0c 00	 and	 DWORD PTR [ecx+12], 0
$LN1@pop_back:

; 1300 : 			}
; 1301 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1302 : 		}

  00011	c3		 ret	 0
?pop_back@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEXXZ ENDP ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::pop_back
_TEXT	ENDS
PUBLIC	??$_Move_backward@V?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@V12@@std@@YA?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@0@V10@00@Z ; std::_Move_backward<std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >,std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move_backward@V?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@V12@@std@@YA?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@0@V10@00@Z
_TEXT	SEGMENT
$T510266 = -4						; size = 4
$T510265 = -4						; size = 4
$T510264 = -4						; size = 4
__Cat$510273 = 8					; size = 1
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 12
__Last$ = 24						; size = 12
__Dest$ = 36						; size = 12
??$_Move_backward@V?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@V12@@std@@YA?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@0@V10@00@Z PROC ; std::_Move_backward<std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >,std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> > >, COMDAT

; 2638 : 	{	// move [_First, _Last) backwards to [..., _Dest), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 2639 : 	return (_Move_backward(_First, _Last,
; 2640 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00005	ff 75 08	 push	 DWORD PTR __Cat$510273[ebp]
  00008	8d 45 24	 lea	 eax, DWORD PTR __Dest$[ebp]
  0000b	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0000e	8b f4		 mov	 esi, esp
  00010	89 65 fc	 mov	 DWORD PTR $T510264[ebp], esp
  00013	50		 push	 eax
  00014	8b ce		 mov	 ecx, esi
  00016	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  0001b	8b 45 2c	 mov	 eax, DWORD PTR __Dest$[ebp+8]
  0001e	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00021	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00024	8b f4		 mov	 esi, esp
  00026	8d 45 18	 lea	 eax, DWORD PTR __Last$[ebp]
  00029	89 65 fc	 mov	 DWORD PTR $T510265[ebp], esp
  0002c	50		 push	 eax
  0002d	8b ce		 mov	 ecx, esi
  0002f	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  00034	8b 45 20	 mov	 eax, DWORD PTR __Last$[ebp+8]
  00037	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0003a	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003d	8b f4		 mov	 esi, esp
  0003f	8d 45 0c	 lea	 eax, DWORD PTR __First$[ebp]
  00042	89 65 fc	 mov	 DWORD PTR $T510266[ebp], esp
  00045	50		 push	 eax
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  0004d	8b 45 14	 mov	 eax, DWORD PTR __First$[ebp+8]
  00050	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00053	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00056	e8 00 00 00 00	 call	 ??$_Move_backward@V?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@V12@@std@@YA?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@0@V10@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >,std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> > >
  0005b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0005e	83 c4 2c	 add	 esp, 44			; 0000002cH

; 2641 : 	}

  00061	5e		 pop	 esi
  00062	c9		 leave
  00063	c3		 ret	 0
??$_Move_backward@V?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@V12@@std@@YA?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@0@V10@00@Z ENDP ; std::_Move_backward<std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >,std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> > >
_TEXT	ENDS
PUBLIC	??$_Move@V?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@V12@@std@@YA?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@0@V10@00@Z ; std::_Move<std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >,std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@V?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@V12@@std@@YA?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@0@V10@00@Z
_TEXT	SEGMENT
$T510351 = -4						; size = 4
$T510350 = -4						; size = 4
$T510349 = -4						; size = 4
__Cat$510358 = 8					; size = 1
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 12
__Last$ = 24						; size = 12
__Dest$ = 36						; size = 12
??$_Move@V?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@V12@@std@@YA?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@0@V10@00@Z PROC ; std::_Move<std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >,std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> > >, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00005	ff 75 08	 push	 DWORD PTR __Cat$510358[ebp]
  00008	8d 45 24	 lea	 eax, DWORD PTR __Dest$[ebp]
  0000b	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0000e	8b f4		 mov	 esi, esp
  00010	89 65 fc	 mov	 DWORD PTR $T510349[ebp], esp
  00013	50		 push	 eax
  00014	8b ce		 mov	 ecx, esi
  00016	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  0001b	8b 45 2c	 mov	 eax, DWORD PTR __Dest$[ebp+8]
  0001e	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00021	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00024	8b f4		 mov	 esi, esp
  00026	8d 45 18	 lea	 eax, DWORD PTR __Last$[ebp]
  00029	89 65 fc	 mov	 DWORD PTR $T510350[ebp], esp
  0002c	50		 push	 eax
  0002d	8b ce		 mov	 ecx, esi
  0002f	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  00034	8b 45 20	 mov	 eax, DWORD PTR __Last$[ebp+8]
  00037	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0003a	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003d	8b f4		 mov	 esi, esp
  0003f	8d 45 0c	 lea	 eax, DWORD PTR __First$[ebp]
  00042	89 65 fc	 mov	 DWORD PTR $T510351[ebp], esp
  00045	50		 push	 eax
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  0004d	8b 45 14	 mov	 eax, DWORD PTR __First$[ebp+8]
  00050	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00053	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00056	e8 00 00 00 00	 call	 ??$_Move@V?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@V12@@std@@YA?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@0@V10@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >,std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> > >
  0005b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0005e	83 c4 2c	 add	 esp, 44			; 0000002cH

; 2536 : 	}

  00061	5e		 pop	 esi
  00062	c9		 leave
  00063	c3		 ret	 0
??$_Move@V?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@V12@@std@@YA?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@0@V10@00@Z ENDP ; std::_Move<std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >,std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> > >
_TEXT	ENDS
PUBLIC	??$_Uninit_def_fill_n@PAUtagDirKeyTime@ioUserKeyInput@@HU12@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@U12@@std@@YAXPAUtagDirKeyTime@ioUserKeyInput@@HPBU12@AAV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_def_fill_n<ioUserKeyInput::tagDirKeyTime *,int,ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime>,ioUserKeyInput::tagDirKeyTime>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_def_fill_n@PAUtagDirKeyTime@ioUserKeyInput@@HU12@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@U12@@std@@YAXPAUtagDirKeyTime@ioUserKeyInput@@HPBU12@AAV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
$T510433 = -8						; size = 8
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
___formal$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_def_fill_n@PAUtagDirKeyTime@ioUserKeyInput@@HU12@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@U12@@std@@YAXPAUtagDirKeyTime@ioUserKeyInput@@HPBU12@AAV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_def_fill_n<ioUserKeyInput::tagDirKeyTime *,int,ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime>,ioUserKeyInput::tagDirKeyTime>, COMDAT

; 620  : 	{	// copy _Count * _Valty() to raw _First, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 621  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 622  : //	if (_Count < 0)
; 623  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 624  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 625  : 
; 626  : 	_FwdIt _Next = _First;
; 627  : 
; 628  : 	_TRY_BEGIN
; 629  : 	for (; 0 < _Count; --_Count, ++_First)

  00005	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00009	7e 27		 jle	 SHORT $LN4@Uninit_def

; 630  : 
; 631  : 		_Cons_val(_Al, _First, _Valty());

  0000b	83 65 f8 00	 and	 DWORD PTR $T510433[ebp], 0
  0000f	83 65 fc 00	 and	 DWORD PTR $T510433[ebp+4], 0
$LL6@Uninit_def:
  00013	8d 45 f8	 lea	 eax, DWORD PTR $T510433[ebp]
  00016	50		 push	 eax
  00017	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0001a	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0001d	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@UtagDirKeyTime@ioUserKeyInput@@U34@@std@@YAXAAV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@0@PAUtagDirKeyTime@ioUserKeyInput@@$$QAU23@@Z ; std::_Cons_val<std::allocator<ioUserKeyInput::tagDirKeyTime>,ioUserKeyInput::tagDirKeyTime,ioUserKeyInput::tagDirKeyTime>
  00022	83 45 08 08	 add	 DWORD PTR __First$[ebp], 8
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	ff 4d 0c	 dec	 DWORD PTR __Count$[ebp]
  0002c	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00030	7f e1		 jg	 SHORT $LL6@Uninit_def
$LN4@Uninit_def:

; 632  : 
; 633  : 	_CATCH_ALL
; 634  : 	for (; _Next != _First; ++_Next)
; 635  : 		_Dest_val(_Al, _Next);
; 636  : 	_RERAISE;
; 637  : 	_CATCH_END
; 638  : 	}

  00032	c9		 leave
  00033	c3		 ret	 0
??$_Uninit_def_fill_n@PAUtagDirKeyTime@ioUserKeyInput@@HU12@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@U12@@std@@YAXPAUtagDirKeyTime@ioUserKeyInput@@HPBU12@AAV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_def_fill_n<ioUserKeyInput::tagDirKeyTime *,int,ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime>,ioUserKeyInput::tagDirKeyTime>
_TEXT	ENDS
PUBLIC	?erase@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@0@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::erase
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?erase@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$510535 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@0@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$510535[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAKPAK@std@@YAPAKPAK00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<unsigned long *,unsigned long *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@0@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN12@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN12@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@KV?$allocator@K@std@@@std@@QAEXI@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::reserve
; Function compile flags: /Ogsp
;	COMDAT ?reserve@?$vector@KV?$allocator@K@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?reserve@?$vector@KV?$allocator@K@std@@@std@@QAEXI@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 747  : 		if (max_size() < _Count)

  00003	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN43@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  0001a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001d	2b 06		 sub	 eax, DWORD PTR [esi]
  0001f	c1 f8 02	 sar	 eax, 2
  00022	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00025	73 52		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00027	53		 push	 ebx
  00028	57		 push	 edi
  00029	6a 00		 push	 0
  0002b	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0002e	e8 00 00 00 00	 call	 ??$_Allocate@K@std@@YAPAKIPAK@Z ; std::_Allocate<unsigned long>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00033	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00035	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00038	52		 push	 edx
  00039	8b d8		 mov	 ebx, eax
  0003b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003e	53		 push	 ebx
  0003f	50		 push	 eax
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAKPAKV?$allocator@K@std@@@std@@YAPAKPAK00AAV?$allocator@K@0@@Z ; std::_Uninitialized_move<unsigned long *,unsigned long *,std::allocator<unsigned long> >

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);
; 757  : 			_RERAISE;
; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00046	8b 06		 mov	 eax, DWORD PTR [esi]
  00048	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0004b	2b f8		 sub	 edi, eax
  0004d	83 c4 18	 add	 esp, 24			; 00000018H
  00050	c1 ff 02	 sar	 edi, 2

; 761  : 			if (this->_Myfirst != 0)

  00053	85 c0		 test	 eax, eax
  00055	74 07		 je	 SHORT $LN39@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005d	59		 pop	 ecx
$LN39@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0005e	8b ce		 mov	 ecx, esi
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00066	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00069	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  0006c	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  0006f	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00072	5f		 pop	 edi

; 771  : 			this->_Myfirst = _Ptr;

  00073	89 1e		 mov	 DWORD PTR [esi], ebx
  00075	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00078	5b		 pop	 ebx
$LN3@reserve:
  00079	5e		 pop	 esi

; 772  : 			}
; 773  : 		}

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
$LN42@reserve:
?reserve@?$vector@KV?$allocator@K@std@@@std@@QAEXI@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::reserve
_TEXT	ENDS
PUBLIC	??A?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAUtagDirKeyTime@ioUserKeyInput@@I@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator[]
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\deque
;	COMDAT ??A?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAUtagDirKeyTime@ioUserKeyInput@@I@Z
_TEXT	SEGMENT
$T510689 = -24						; size = 12
$T510690 = -12						; size = 12
__Pos$ = 8						; size = 4
??A?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAUtagDirKeyTime@ioUserKeyInput@@I@Z PROC ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator[], COMDAT
; _this$ = ecx

; 1193 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 1194 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1195 : 		if (this->_Mysize <= _Pos)
; 1196 : 			_DEBUG_ERROR("deque subscript out of range");
; 1197 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1198 : 
; 1199 : 		return (*(begin() + _Pos));

  00006	ff 75 08	 push	 DWORD PTR __Pos$[ebp]
  00009	8d 45 f4	 lea	 eax, DWORD PTR $T510690[ebp]
  0000c	50		 push	 eax
  0000d	8d 45 e8	 lea	 eax, DWORD PTR $T510689[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ?begin@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@XZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::begin
  00016	8b c8		 mov	 ecx, eax
  00018	e8 00 00 00 00	 call	 ??H?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator+
  0001d	8b c8		 mov	 ecx, eax
  0001f	e8 00 00 00 00	 call	 ??D?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEABUtagDirKeyTime@ioUserKeyInput@@XZ ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator*

; 1200 : 		}

  00024	c9		 leave
  00025	c2 04 00	 ret	 4
??A?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAUtagDirKeyTime@ioUserKeyInput@@I@Z ENDP ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator[]
_TEXT	ENDS
PUBLIC	?back@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAUtagDirKeyTime@ioUserKeyInput@@XZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::back
; Function compile flags: /Ogsp
;	COMDAT ?back@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAUtagDirKeyTime@ioUserKeyInput@@XZ
_TEXT	SEGMENT
$T510728 = -24						; size = 12
$T510729 = -12						; size = 12
?back@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAUtagDirKeyTime@ioUserKeyInput@@XZ PROC ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::back, COMDAT
; _this$ = ecx

; 1213 : 		{	// return last element of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 1214 : 		return (*(end() - 1));

  00006	6a 01		 push	 1
  00008	8d 45 f4	 lea	 eax, DWORD PTR $T510729[ebp]
  0000b	50		 push	 eax
  0000c	8d 45 e8	 lea	 eax, DWORD PTR $T510728[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?end@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@XZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::end
  00015	8b c8		 mov	 ecx, eax
  00017	e8 00 00 00 00	 call	 ??G?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator-
  0001c	8b c8		 mov	 ecx, eax
  0001e	e8 00 00 00 00	 call	 ??D?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBEABUtagDirKeyTime@ioUserKeyInput@@XZ ; std::_Deque_const_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator*

; 1215 : 		}

  00023	c9		 leave
  00024	c3		 ret	 0
?back@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAUtagDirKeyTime@ioUserKeyInput@@XZ ENDP ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::back
_TEXT	ENDS
PUBLIC	?push_back@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEXABUtagDirKeyTime@ioUserKeyInput@@@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::push_back
; Function compile flags: /Ogsp
;	COMDAT ?push_back@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEXABUtagDirKeyTime@ioUserKeyInput@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEXABUtagDirKeyTime@ioUserKeyInput@@@Z PROC ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::push_back, COMDAT
; _this$ = ecx

; 1263 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx

; 1264 : 		this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ

; 1265 : 		_PUSH_BACK_BEGIN;

  0000e	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00011	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00014	03 c8		 add	 ecx, eax
  00016	f6 c1 01	 test	 cl, 1
  00019	75 13		 jne	 SHORT $LN3@push_back
  0001b	83 c0 02	 add	 eax, 2
  0001e	d1 e8		 shr	 eax, 1
  00020	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  00023	77 09		 ja	 SHORT $LN3@push_back
  00025	6a 01		 push	 1
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?_Growmap@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@IAEXI@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Growmap
$LN3@push_back:
  0002e	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00031	03 7e 10	 add	 edi, DWORD PTR [esi+16]
  00034	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00037	8b c7		 mov	 eax, edi
  00039	d1 e8		 shr	 eax, 1
  0003b	3b c8		 cmp	 ecx, eax
  0003d	77 02		 ja	 SHORT $LN2@push_back
  0003f	2b c1		 sub	 eax, ecx
$LN2@push_back:
  00041	8b d8		 mov	 ebx, eax
  00043	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00046	83 3c 98 00	 cmp	 DWORD PTR [eax+ebx*4], 0
  0004a	75 11		 jne	 SHORT $LN1@push_back
  0004c	6a 00		 push	 0
  0004e	6a 02		 push	 2
  00050	e8 00 00 00 00	 call	 ??$_Allocate@UtagDirKeyTime@ioUserKeyInput@@@std@@YAPAUtagDirKeyTime@ioUserKeyInput@@IPAU12@@Z ; std::_Allocate<ioUserKeyInput::tagDirKeyTime>
  00055	59		 pop	 ecx
  00056	59		 pop	 ecx
  00057	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005a	89 04 99	 mov	 DWORD PTR [ecx+ebx*4], eax
$LN1@push_back:

; 1266 : 		_Cons_val(this->_Alval,
; 1267 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);

  0005d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00060	8b 04 98	 mov	 eax, DWORD PTR [eax+ebx*4]
  00063	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  00066	83 e7 01	 and	 edi, 1
  00069	8d 04 f8	 lea	 eax, DWORD PTR [eax+edi*8]
  0006c	50		 push	 eax
  0006d	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@UtagDirKeyTime@ioUserKeyInput@@ABU34@@std@@YAXAAV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@0@PAUtagDirKeyTime@ioUserKeyInput@@ABU23@@Z ; std::_Cons_val<std::allocator<ioUserKeyInput::tagDirKeyTime>,ioUserKeyInput::tagDirKeyTime,ioUserKeyInput::tagDirKeyTime const &>
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1268 : 		_PUSH_BACK_END;

  00079	ff 46 10	 inc	 DWORD PTR [esi+16]
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx

; 1269 : 		}

  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
?push_back@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEXABUtagDirKeyTime@ioUserKeyInput@@@Z ENDP ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::push_back
_TEXT	ENDS
PUBLIC	?_Tidy@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@IAEXXZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@IAEXXZ PROC ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Tidy, COMDAT
; _this$ = ecx

; 1638 : 		{	// free all storage

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 1639 : 		while (!empty())

  00004	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00007	33 db		 xor	 ebx, ebx
  00009	3b c3		 cmp	 eax, ebx
  0000b	74 12		 je	 SHORT $LN5@Tidy@2
$LL6@Tidy@2:

; 1640 : 			pop_back();

  0000d	3b c3		 cmp	 eax, ebx
  0000f	74 09		 je	 SHORT $LN11@Tidy@2
  00011	48		 dec	 eax
  00012	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00015	75 03		 jne	 SHORT $LN11@Tidy@2
  00017	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
$LN11@Tidy@2:

; 1639 : 		while (!empty())

  0001a	39 5e 10	 cmp	 DWORD PTR [esi+16], ebx
  0001d	75 ee		 jne	 SHORT $LL6@Tidy@2
$LN5@Tidy@2:
  0001f	57		 push	 edi

; 1641 : 		for (size_type _Count = this->_Mapsize; 0 < _Count; )

  00020	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00023	eb 10		 jmp	 SHORT $LN36@Tidy@2
$LL4@Tidy@2:

; 1642 : 			{	// free storage for a block and destroy pointer
; 1643 : 			if (*(this->_Map + --_Count) != 0)

  00025	4f		 dec	 edi
  00026	8d 04 b8	 lea	 eax, DWORD PTR [eax+edi*4]
  00029	39 18		 cmp	 DWORD PTR [eax], ebx
  0002b	74 08		 je	 SHORT $LN36@Tidy@2

; 1644 : 				{	// free block and destroy its pointer
; 1645 : 				this->_Alval.deallocate(*(this->_Map + _Count), _DEQUESIZ);

  0002d	ff 30		 push	 DWORD PTR [eax]
  0002f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00034	59		 pop	 ecx
$LN36@Tidy@2:

; 1646 : 				_Dest_val(this->_Almap, this->_Map + _Count);
; 1647 : 				}
; 1648 : 			}
; 1649 : 
; 1650 : 		if (this->_Map != 0)

  00035	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00038	3b fb		 cmp	 edi, ebx
  0003a	77 e9		 ja	 SHORT $LL4@Tidy@2
  0003c	5f		 pop	 edi
  0003d	3b c3		 cmp	 eax, ebx
  0003f	74 07		 je	 SHORT $LN32@Tidy@2

; 1651 : 			this->_Almap.deallocate(this->_Map,
; 1652 : 				this->_Mapsize);	// free storage for map

  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00047	59		 pop	 ecx
$LN32@Tidy@2:

; 1653 : 		this->_Mapsize = 0;

  00048	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 1654 : 		this->_Map = 0;

  0004b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx

; 1655 : 		}

  00050	c3		 ret	 0
?_Tidy@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@IAEXXZ ENDP ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@V?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@0@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@V?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@0@Z
_TEXT	SEGMENT
$T510852 = -44						; size = 12
$T510851 = -44						; size = 12
$T510847 = -44						; size = 12
$T510843 = -44						; size = 12
$T510841 = -44						; size = 12
__Last$ = -32						; size = 12
__First$ = -20						; size = 12
$T510850 = -8						; size = 4
$T510849 = -8						; size = 4
$T510846 = -8						; size = 4
$T510845 = -8						; size = 4
$T510844 = -8						; size = 4
__Off$ = -4						; size = 4
$T510840 = -4						; size = 4
$T510839 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 12
__Last_arg$ = 24					; size = 12
?erase@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@V?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@0@Z PROC ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::erase, COMDAT
; _this$ = ecx

; 1423 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1424 : 		iterator _First = _Make_iter(_First_arg);

  00009	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0000c	8b f4		 mov	 esi, esp
  0000e	8d 45 0c	 lea	 eax, DWORD PTR __First_arg$[ebp]
  00011	8b f9		 mov	 edi, ecx
  00013	89 65 fc	 mov	 DWORD PTR $T510839[ebp], esp
  00016	50		 push	 eax
  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  0001e	8b 45 14	 mov	 eax, DWORD PTR __First_arg$[ebp+8]
  00021	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00024	8d 45 ec	 lea	 eax, DWORD PTR __First$[ebp]
  00027	50		 push	 eax
  00028	8b cf		 mov	 ecx, edi
  0002a	e8 00 00 00 00	 call	 ?_Make_iter@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@V?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Make_iter

; 1425 : 		iterator _Last = _Make_iter(_Last_arg);

  0002f	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00032	8b f4		 mov	 esi, esp
  00034	8d 45 18	 lea	 eax, DWORD PTR __Last_arg$[ebp]
  00037	89 65 fc	 mov	 DWORD PTR $T510840[ebp], esp
  0003a	50		 push	 eax
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  00042	8b 45 20	 mov	 eax, DWORD PTR __Last_arg$[ebp+8]
  00045	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00048	8d 45 e0	 lea	 eax, DWORD PTR __Last$[ebp]
  0004b	50		 push	 eax
  0004c	8b cf		 mov	 ecx, edi
  0004e	e8 00 00 00 00	 call	 ?_Make_iter@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@V?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Make_iter

; 1426 : 
; 1427 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1428 : 		if (_Last < _First
; 1429 : 			|| _First < begin() || end() < _Last)
; 1430 : 			_DEBUG_ERROR("deque erase iterator outside range");
; 1431 : 		_DEBUG_RANGE(_First, _Last);
; 1432 : 
; 1433 : 		size_type _Off = _First - begin();
; 1434 : 		size_type _Count = _Last - _First;
; 1435 : 		bool _Moved = 0 < _Off && _Off + _Count < this->_Mysize;
; 1436 : 
; 1437 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1438 : 		size_type _Off = _First - begin();

  00053	8d 45 d4	 lea	 eax, DWORD PTR $T510841[ebp]
  00056	50		 push	 eax
  00057	8b cf		 mov	 ecx, edi
  00059	e8 00 00 00 00	 call	 ?begin@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@XZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::begin
  0005e	8b 55 f4	 mov	 edx, DWORD PTR __First$[ebp+8]
  00061	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 1439 : 		size_type _Count = _Last - _First;

  00064	8b 5d e8	 mov	 ebx, DWORD PTR __Last$[ebp+8]
  00067	8b ca		 mov	 ecx, edx
  00069	2b c8		 sub	 ecx, eax

; 1440 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1441 : 
; 1442 : 		if (_Off < (size_type)(end() - _Last))

  0006b	8d 45 d4	 lea	 eax, DWORD PTR $T510843[ebp]
  0006e	89 4d fc	 mov	 DWORD PTR __Off$[ebp], ecx
  00071	8b f3		 mov	 esi, ebx
  00073	50		 push	 eax
  00074	8b cf		 mov	 ecx, edi
  00076	2b f2		 sub	 esi, edx
  00078	e8 00 00 00 00	 call	 ?end@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@XZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::end
  0007d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00080	2b c3		 sub	 eax, ebx
  00082	39 45 fc	 cmp	 DWORD PTR __Off$[ebp], eax
  00085	0f 92 c0	 setb	 al

; 1443 : 			{	// closer to front
; 1444 : 			_Move_backward(begin(), _First, _Last);	// copy over hole

  00088	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0008b	8b dc		 mov	 ebx, esp
  0008d	89 65 f8	 mov	 DWORD PTR $T510844[ebp], esp
  00090	8b cb		 mov	 ecx, ebx
  00092	84 c0		 test	 al, al
  00094	74 54		 je	 SHORT $LN8@erase@2
  00096	8d 45 e0	 lea	 eax, DWORD PTR __Last$[ebp]
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  0009f	8b 45 e8	 mov	 eax, DWORD PTR __Last$[ebp+8]
  000a2	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000a5	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  000a8	8b dc		 mov	 ebx, esp
  000aa	8d 45 ec	 lea	 eax, DWORD PTR __First$[ebp]
  000ad	89 65 f8	 mov	 DWORD PTR $T510845[ebp], esp
  000b0	50		 push	 eax
  000b1	8b cb		 mov	 ecx, ebx
  000b3	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  000b8	8b 45 f4	 mov	 eax, DWORD PTR __First$[ebp+8]
  000bb	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000be	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  000c1	8b c4		 mov	 eax, esp
  000c3	89 65 f8	 mov	 DWORD PTR $T510846[ebp], esp
  000c6	50		 push	 eax
  000c7	8b cf		 mov	 ecx, edi
  000c9	e8 00 00 00 00	 call	 ?begin@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@XZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::begin
  000ce	8d 45 d4	 lea	 eax, DWORD PTR $T510847[ebp]
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 ??$_Move_backward@V?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@V12@@std@@YA?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@0@V10@00@Z ; std::_Move_backward<std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >,std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> > >
  000d7	83 c4 28	 add	 esp, 40			; 00000028H

; 1445 : 			for (; 0 < _Count; --_Count)

  000da	85 f6		 test	 esi, esi
  000dc	74 67		 je	 SHORT $LN1@erase@2
$LL7@erase@2:

; 1446 : 				pop_front();	// pop copied elements

  000de	8b cf		 mov	 ecx, edi
  000e0	e8 00 00 00 00	 call	 ?pop_front@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEXXZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::pop_front
  000e5	4e		 dec	 esi
  000e6	75 f6		 jne	 SHORT $LL7@erase@2

; 1447 : 			}
; 1448 : 		else

  000e8	eb 5b		 jmp	 SHORT $LN1@erase@2
$LN8@erase@2:

; 1449 : 			{	// closer to back
; 1450 : 			_Move(_Last, end(), _First);	// copy over hole

  000ea	8d 45 ec	 lea	 eax, DWORD PTR __First$[ebp]
  000ed	50		 push	 eax
  000ee	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  000f3	8b 45 f4	 mov	 eax, DWORD PTR __First$[ebp+8]
  000f6	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000f9	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  000fc	8b c4		 mov	 eax, esp
  000fe	89 65 f8	 mov	 DWORD PTR $T510849[ebp], esp
  00101	50		 push	 eax
  00102	8b cf		 mov	 ecx, edi
  00104	e8 00 00 00 00	 call	 ?end@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@XZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::end
  00109	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0010c	8b dc		 mov	 ebx, esp
  0010e	8d 45 e0	 lea	 eax, DWORD PTR __Last$[ebp]
  00111	89 65 f8	 mov	 DWORD PTR $T510850[ebp], esp
  00114	50		 push	 eax
  00115	8b cb		 mov	 ecx, ebx
  00117	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  0011c	8b 45 e8	 mov	 eax, DWORD PTR __Last$[ebp+8]
  0011f	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  00122	8d 45 d4	 lea	 eax, DWORD PTR $T510851[ebp]
  00125	50		 push	 eax
  00126	e8 00 00 00 00	 call	 ??$_Move@V?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@V12@@std@@YA?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@0@V10@00@Z ; std::_Move<std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >,std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> > >
  0012b	83 c4 28	 add	 esp, 40			; 00000028H

; 1451 : 			for (; 0 < _Count; --_Count)

  0012e	85 f6		 test	 esi, esi
  00130	74 13		 je	 SHORT $LN1@erase@2
  00132	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
$LL3@erase@2:

; 1452 : 				pop_back();	// pop copied elements

  00135	85 c0		 test	 eax, eax
  00137	74 06		 je	 SHORT $LN2@erase@2
  00139	48		 dec	 eax
  0013a	75 03		 jne	 SHORT $LN2@erase@2
  0013c	21 47 0c	 and	 DWORD PTR [edi+12], eax
$LN2@erase@2:

; 1451 : 			for (; 0 < _Count; --_Count)

  0013f	4e		 dec	 esi
  00140	75 f3		 jne	 SHORT $LL3@erase@2
  00142	89 47 10	 mov	 DWORD PTR [edi+16], eax
$LN1@erase@2:

; 1453 : 			}
; 1454 : 
; 1455 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1456 : 		if (_Moved)
; 1457 : 			this->_Orphan_all();
; 1458 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1459 : 
; 1460 : 		return (begin() + _Off);

  00145	ff 75 fc	 push	 DWORD PTR __Off$[ebp]
  00148	8d 45 d4	 lea	 eax, DWORD PTR $T510852[ebp]
  0014b	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0014e	8b cf		 mov	 ecx, edi
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 ?begin@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@XZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::begin
  00156	8b c8		 mov	 ecx, eax
  00158	e8 00 00 00 00	 call	 ??H?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator+
  0015d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1461 : 		}

  00160	5f		 pop	 edi
  00161	5e		 pop	 esi
  00162	5b		 pop	 ebx
  00163	c9		 leave
  00164	c2 1c 00	 ret	 28			; 0000001cH
?erase@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@V?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@0@Z ENDP ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::erase
_TEXT	ENDS
PUBLIC	??$_Uninitialized_default_fill_n@PAUtagDirKeyTime@ioUserKeyInput@@HU12@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@YAXPAUtagDirKeyTime@ioUserKeyInput@@HPBU12@AAV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@0@@Z ; std::_Uninitialized_default_fill_n<ioUserKeyInput::tagDirKeyTime *,int,ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_default_fill_n@PAUtagDirKeyTime@ioUserKeyInput@@HU12@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@YAXPAUtagDirKeyTime@ioUserKeyInput@@HPBU12@AAV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@0@@Z
_TEXT	SEGMENT
__Cat$511136 = -4					; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Pval$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_default_fill_n@PAUtagDirKeyTime@ioUserKeyInput@@HU12@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@YAXPAUtagDirKeyTime@ioUserKeyInput@@HPBU12@AAV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@0@@Z PROC ; std::_Uninitialized_default_fill_n<ioUserKeyInput::tagDirKeyTime *,int,ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >, COMDAT

; 670  : 	{	// copy _Count * _Val_type(_First)() to raw _First, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 671  : 	_Uninit_def_fill_n(_First, _Count, _Pval, _Al,
; 672  : 		_Val_type(_First), _Ptr_cat(_First, _First));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$511136[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Pval$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_def_fill_n@PAUtagDirKeyTime@ioUserKeyInput@@HU12@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@U12@@std@@YAXPAUtagDirKeyTime@ioUserKeyInput@@HPBU12@AAV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_def_fill_n<ioUserKeyInput::tagDirKeyTime *,int,ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime>,ioUserKeyInput::tagDirKeyTime>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 673  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_default_fill_n@PAUtagDirKeyTime@ioUserKeyInput@@HU12@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@YAXPAUtagDirKeyTime@ioUserKeyInput@@HPBU12@AAV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@0@@Z ENDP ; std::_Uninitialized_default_fill_n<ioUserKeyInput::tagDirKeyTime *,int,ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
_TEXT	ENDS
PUBLIC	??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy
??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@KV?$allocator@K@std@@@std@@QAEXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@KV?$allocator@K@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T511153 = -4						; size = 4
?clear@?$vector@KV?$allocator@K@std@@@std@@QAEXXZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T511153[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@0@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@KV?$allocator@K@std@@@std@@QAEXXZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@KV?$allocator@K@std@@@std@@IAEXI@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@KV?$allocator@K@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@KV?$allocator@K@std@@@std@@IAEXI@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx

; 1292 : 		if (max_size() - _Count < _Size)

  0000d	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  00012	2b 55 08	 sub	 edx, DWORD PTR __Count$[ebp]
  00015	c1 f8 02	 sar	 eax, 2
  00018	3b d0		 cmp	 edx, eax
  0001a	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0002a	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  0002d	2b d1		 sub	 edx, ecx
  0002f	c1 fa 02	 sar	 edx, 2
  00032	3b c2		 cmp	 eax, edx
  00034	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@KV?$allocator@K@std@@@std@@IBEII@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Grow_to
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?reserve@?$vector@KV?$allocator@K@std@@@std@@QAEXI@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::reserve
$LN1@Reserve:
  00046	5e		 pop	 esi

; 1298 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@KV?$allocator@K@std@@@std@@IAEXI@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Reserve
_TEXT	ENDS
PUBLIC	?EnableKeyInput@ioUserKeyInput@@QAEX_N@Z	; ioUserKeyInput::EnableKeyInput
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iouserkeyinput.cpp
;	COMDAT ?EnableKeyInput@ioUserKeyInput@@QAEX_N@Z
_TEXT	SEGMENT
_bEnable$ = 8						; size = 1
?EnableKeyInput@ioUserKeyInput@@QAEX_N@Z PROC		; ioUserKeyInput::EnableKeyInput, COMDAT
; _this$ = ecx

; 253  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 254  : 	m_bEnableKeyInput = bEnable;

  00003	8a 45 08	 mov	 al, BYTE PTR _bEnable$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 255  : 
; 256  : 	if( !m_bInputProcessAI && !bEnable )

  0000a	33 db		 xor	 ebx, ebx
  0000c	88 86 3c 01 00
	00		 mov	 BYTE PTR [esi+316], al
  00012	38 9e 4b 01 00
	00		 cmp	 BYTE PTR [esi+331], bl
  00018	75 45		 jne	 SHORT $LN4@EnableKeyI
  0001a	3a c3		 cmp	 al, bl
  0001c	75 41		 jne	 SHORT $LN4@EnableKeyI

; 257  : 	{
; 258  : 		for( int i=0 ; i<3 ; i++ )

  0001e	57		 push	 edi
  0001f	33 ff		 xor	 edi, edi
$LL3@EnableKeyI:

; 259  : 		{
; 260  : 			m_DirKeyQueue[i].m_DirKey = DKI_NONE;

  00021	57		 push	 edi
  00022	8d 8e e8 00 00
	00		 lea	 ecx, DWORD PTR [esi+232]
  00028	e8 00 00 00 00	 call	 ??A?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAUtagDirKeyTime@ioUserKeyInput@@I@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator[]

; 261  : 			m_DirKeyQueue[i].m_dwKeyTime = 0;

  0002d	57		 push	 edi
  0002e	8d 8e e8 00 00
	00		 lea	 ecx, DWORD PTR [esi+232]
  00034	89 18		 mov	 DWORD PTR [eax], ebx
  00036	e8 00 00 00 00	 call	 ??A?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAUtagDirKeyTime@ioUserKeyInput@@I@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator[]
  0003b	47		 inc	 edi
  0003c	89 58 04	 mov	 DWORD PTR [eax+4], ebx
  0003f	83 ff 03	 cmp	 edi, 3
  00042	7c dd		 jl	 SHORT $LL3@EnableKeyI

; 262  : 		}
; 263  : 
; 264  : 		m_CurDirKey = DKI_NONE;

  00044	89 1e		 mov	 DWORD PTR [esi], ebx

; 265  : 		m_PreDirKey = DKI_NONE;

  00046	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 266  : 		m_FourDirKey = DKI_NONE;

  00049	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 267  : 
; 268  : 		m_CurActionKey = AKI_NONE;

  0004c	89 9e 00 01 00
	00		 mov	 DWORD PTR [esi+256], ebx

; 269  : 		m_PreActionKey = AKI_NONE;

  00052	89 9e 04 01 00
	00		 mov	 DWORD PTR [esi+260], ebx

; 270  : 		m_CurMixKey    = DMI_NONE;

  00058	89 9e 08 01 00
	00		 mov	 DWORD PTR [esi+264], ebx
  0005e	5f		 pop	 edi
$LN4@EnableKeyI:
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx

; 271  : 	}
; 272  : }

  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
?EnableKeyInput@ioUserKeyInput@@QAEX_N@Z ENDP		; ioUserKeyInput::EnableKeyInput
_TEXT	ENDS
PUBLIC	?EnableKeyInputMust@ioUserKeyInput@@QAEX_N@Z	; ioUserKeyInput::EnableKeyInputMust
; Function compile flags: /Ogsp
;	COMDAT ?EnableKeyInputMust@ioUserKeyInput@@QAEX_N@Z
_TEXT	SEGMENT
_bEnable$ = 8						; size = 1
?EnableKeyInputMust@ioUserKeyInput@@QAEX_N@Z PROC	; ioUserKeyInput::EnableKeyInputMust, COMDAT
; _this$ = ecx

; 275  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 276  : 	m_bEnableKeyInput = bEnable;

  00003	8a 45 08	 mov	 al, BYTE PTR _bEnable$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	88 86 3c 01 00
	00		 mov	 BYTE PTR [esi+316], al

; 277  : 	
; 278  : 	if( bEnable )

  0000f	84 c0		 test	 al, al
  00011	74 4b		 je	 SHORT $LN7@EnableKeyI@2

; 279  : 	{
; 280  : 		for( int i=0 ; i < 3 ; i++ )

  00013	53		 push	 ebx
  00014	57		 push	 edi
  00015	33 ff		 xor	 edi, edi
$LL3@EnableKeyI@2:

; 281  : 		{
; 282  : 			m_DirKeyQueue[i].m_DirKey = DKI_NONE;

  00017	57		 push	 edi
  00018	8d 8e e8 00 00
	00		 lea	 ecx, DWORD PTR [esi+232]
  0001e	e8 00 00 00 00	 call	 ??A?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAUtagDirKeyTime@ioUserKeyInput@@I@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator[]
  00023	83 20 00	 and	 DWORD PTR [eax], 0

; 283  : 			m_DirKeyQueue[i].m_dwKeyTime = 0;

  00026	57		 push	 edi
  00027	8d 8e e8 00 00
	00		 lea	 ecx, DWORD PTR [esi+232]
  0002d	e8 00 00 00 00	 call	 ??A?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAUtagDirKeyTime@ioUserKeyInput@@I@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator[]
  00032	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  00036	47		 inc	 edi
  00037	83 ff 03	 cmp	 edi, 3
  0003a	7c db		 jl	 SHORT $LL3@EnableKeyI@2

; 284  : 		}
; 285  : 
; 286  : 		m_CurDirKey = DKI_NONE;
; 287  : 		m_PreDirKey = DKI_NONE;
; 288  : 		m_FourDirKey = DKI_NONE;

  0003c	33 c0		 xor	 eax, eax
  0003e	5f		 pop	 edi
  0003f	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 289  : 
; 290  : 		m_CurActionKey = AKI_NONE;

  00042	89 86 00 01 00
	00		 mov	 DWORD PTR [esi+256], eax

; 291  : 		m_PreActionKey = AKI_NONE;

  00048	89 86 04 01 00
	00		 mov	 DWORD PTR [esi+260], eax

; 292  : 		m_CurMixKey    = DMI_NONE;

  0004e	89 86 08 01 00
	00		 mov	 DWORD PTR [esi+264], eax

; 293  : 		SetNetworkKeyInput( DKI_NONE );

  00054	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00057	89 06		 mov	 DWORD PTR [esi], eax
  00059	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1
  0005d	5b		 pop	 ebx
$LN7@EnableKeyI@2:
  0005e	5e		 pop	 esi

; 294  : 	}
; 295  : }

  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
?EnableKeyInputMust@ioUserKeyInput@@QAEX_N@Z ENDP	; ioUserKeyInput::EnableKeyInputMust
_TEXT	ENDS
PUBLIC	?ClearDirDoubleClick@ioUserKeyInput@@QAEXXZ	; ioUserKeyInput::ClearDirDoubleClick
; Function compile flags: /Ogsp
;	COMDAT ?ClearDirDoubleClick@ioUserKeyInput@@QAEXXZ
_TEXT	SEGMENT
?ClearDirDoubleClick@ioUserKeyInput@@QAEXXZ PROC	; ioUserKeyInput::ClearDirDoubleClick, COMDAT
; _this$ = ecx

; 683  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b d9		 mov	 ebx, ecx

; 684  : 	for( int i=0 ; i<3 ; i++ )

  00005	33 f6		 xor	 esi, esi
$LL3@ClearDirDo:

; 685  : 	{
; 686  : 		m_DirKeyQueue[i].m_DirKey = DKI_NONE;

  00007	56		 push	 esi
  00008	8d 8b e8 00 00
	00		 lea	 ecx, DWORD PTR [ebx+232]
  0000e	e8 00 00 00 00	 call	 ??A?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAUtagDirKeyTime@ioUserKeyInput@@I@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator[]
  00013	83 20 00	 and	 DWORD PTR [eax], 0

; 687  : 		m_DirKeyQueue[i].m_dwKeyTime = 0;

  00016	56		 push	 esi
  00017	8d 8b e8 00 00
	00		 lea	 ecx, DWORD PTR [ebx+232]
  0001d	e8 00 00 00 00	 call	 ??A?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAUtagDirKeyTime@ioUserKeyInput@@I@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator[]
  00022	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  00026	46		 inc	 esi
  00027	83 fe 03	 cmp	 esi, 3
  0002a	7c db		 jl	 SHORT $LL3@ClearDirDo

; 688  : 	}
; 689  : 
; 690  : 	m_bDirDoubleClick = false;;

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	c6 83 3d 01 00
	00 00		 mov	 BYTE PTR [ebx+317], 0
  00035	5b		 pop	 ebx

; 691  : }

  00036	c3		 ret	 0
?ClearDirDoubleClick@ioUserKeyInput@@QAEXXZ ENDP	; ioUserKeyInput::ClearDirDoubleClick
_TEXT	ENDS
PUBLIC	?CheckDashInput@ioUserKeyInput@@QAEXXZ		; ioUserKeyInput::CheckDashInput
; Function compile flags: /Ogsp
;	COMDAT ?CheckDashInput@ioUserKeyInput@@QAEXXZ
_TEXT	SEGMENT
_kKeyTime$ = -8						; size = 8
?CheckDashInput@ioUserKeyInput@@QAEXXZ PROC		; ioUserKeyInput::CheckDashInput, COMDAT
; _this$ = ecx

; 694  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 695  : 	if( m_DirKeyQueue.back().m_DirKey == m_CurDirKey )

  00009	8d 8e e8 00 00
	00		 lea	 ecx, DWORD PTR [esi+232]
  0000f	e8 00 00 00 00	 call	 ?back@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAUtagDirKeyTime@ioUserKeyInput@@XZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::back
  00014	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00016	39 08		 cmp	 DWORD PTR [eax], ecx
  00018	0f 84 93 00 00
	00		 je	 $LN1@CheckDashI

; 696  : 		return;
; 697  : 
; 698  : 	DirKeyTime kKeyTime;
; 699  : 	kKeyTime.m_DirKey = m_CurDirKey;

  0001e	53		 push	 ebx
  0001f	89 4d f8	 mov	 DWORD PTR _kKeyTime$[ebp], ecx

; 700  : 	kKeyTime.m_dwKeyTime = FRAMEGETTIME();

  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00028	8b c8		 mov	 ecx, eax
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 701  : 
; 702  : 	m_DirKeyQueue.pop_front();

  00030	8d 8e e8 00 00
	00		 lea	 ecx, DWORD PTR [esi+232]
  00036	89 45 fc	 mov	 DWORD PTR _kKeyTime$[ebp+4], eax
  00039	e8 00 00 00 00	 call	 ?pop_front@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEXXZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::pop_front

; 703  : 	m_DirKeyQueue.push_back( kKeyTime );

  0003e	8d 45 f8	 lea	 eax, DWORD PTR _kKeyTime$[ebp]
  00041	50		 push	 eax
  00042	8d 8e e8 00 00
	00		 lea	 ecx, DWORD PTR [esi+232]
  00048	e8 00 00 00 00	 call	 ?push_back@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEXABUtagDirKeyTime@ioUserKeyInput@@@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::push_back

; 704  : 
; 705  : 	if( m_CurDirKey != DKI_NONE )

  0004d	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0004f	85 db		 test	 ebx, ebx
  00051	74 56		 je	 SHORT $LN4@CheckDashI

; 706  : 	{
; 707  : 		if( m_DirKeyQueue[0].m_DirKey == m_CurDirKey &&
; 708  : 			m_DirKeyQueue[1].m_DirKey == DKI_NONE )

  00053	6a 00		 push	 0
  00055	8d 8e e8 00 00
	00		 lea	 ecx, DWORD PTR [esi+232]
  0005b	e8 00 00 00 00	 call	 ??A?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAUtagDirKeyTime@ioUserKeyInput@@I@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator[]
  00060	39 18		 cmp	 DWORD PTR [eax], ebx
  00062	75 4c		 jne	 SHORT $LN10@CheckDashI
  00064	6a 01		 push	 1
  00066	8d 8e e8 00 00
	00		 lea	 ecx, DWORD PTR [esi+232]
  0006c	e8 00 00 00 00	 call	 ??A?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAUtagDirKeyTime@ioUserKeyInput@@I@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator[]
  00071	83 38 00	 cmp	 DWORD PTR [eax], 0
  00074	75 3a		 jne	 SHORT $LN10@CheckDashI

; 709  : 		{
; 710  : 			DWORD dwGap = m_DirKeyQueue[2].m_dwKeyTime - m_DirKeyQueue[0].m_dwKeyTime;

  00076	6a 02		 push	 2
  00078	8d 8e e8 00 00
	00		 lea	 ecx, DWORD PTR [esi+232]
  0007e	e8 00 00 00 00	 call	 ??A?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAUtagDirKeyTime@ioUserKeyInput@@I@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator[]
  00083	6a 00		 push	 0
  00085	8d 8e e8 00 00
	00		 lea	 ecx, DWORD PTR [esi+232]
  0008b	8b d8		 mov	 ebx, eax
  0008d	e8 00 00 00 00	 call	 ??A?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEAAUtagDirKeyTime@ioUserKeyInput@@I@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator[]
  00092	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00095	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]

; 711  : 			if( dwGap < m_dwDashCheckDuration )

  00098	3b 8e 2c 01 00
	00		 cmp	 ecx, DWORD PTR [esi+300]
  0009e	73 10		 jae	 SHORT $LN10@CheckDashI

; 712  : 			{
; 713  : 				m_bDirDoubleClick = true;

  000a0	c6 86 3d 01 00
	00 01		 mov	 BYTE PTR [esi+317], 1

; 714  : 			}
; 715  : 		}
; 716  : 	}
; 717  : 	else

  000a7	eb 07		 jmp	 SHORT $LN10@CheckDashI
$LN4@CheckDashI:

; 718  : 	{
; 719  : 		m_bDirDoubleClick = false;

  000a9	c6 86 3d 01 00
	00 00		 mov	 BYTE PTR [esi+317], 0
$LN10@CheckDashI:
  000b0	5b		 pop	 ebx
$LN1@CheckDashI:
  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi

; 720  : 	}
; 721  : }

  000b3	c9		 leave
  000b4	c3		 ret	 0
?CheckDashInput@ioUserKeyInput@@QAEXXZ ENDP		; ioUserKeyInput::CheckDashInput
_TEXT	ENDS
PUBLIC	??1?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::~deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\deque
;	COMDAT ??1?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ PROC ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::~deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >, COMDAT
; _this$ = ecx

; 1021 : 		{	// destroy the deque

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1022 : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?_Tidy@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@IAEXXZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Tidy

; 1023 : 		}

  00008	8b ce		 mov	 ecx, esi
  0000a	5e		 pop	 esi
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ ; std::_Deque_val<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::~_Deque_val<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
??1?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ ENDP ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::~deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
_TEXT	ENDS
PUBLIC	?push_back@?$vector@KV?$allocator@K@std@@@std@@QAEX$$QAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@KV?$allocator@K@std@@@std@@QAEX$$QAK@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@KV?$allocator@K@std@@@std@@QAEX$$QAK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::push_back, COMDAT
; _this$ = ecx

; 631  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 632  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 27		 jae	 SHORT $LN4@push_back@2
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 21		 ja	 SHORT $LN4@push_back@2

; 633  : 			{	// push back an element
; 634  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 635  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back@2

; 636  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@KV?$allocator@K@std@@@std@@IAEXI@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Reserve
$LN3@push_back@2:

; 637  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 638  : 			_Cons_val(this->_Alval,
; 639  : 				this->_Mylast,
; 640  : 				_STD forward<_Ty>(this->_Myfirst[_Idx]));

  0002a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002d	85 c0		 test	 eax, eax
  0002f	74 20		 je	 SHORT $LN41@push_back@2
  00031	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00033	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]

; 641  : 			++this->_Mylast;
; 642  : 			}
; 643  : 		else

  00036	eb 17		 jmp	 SHORT $LN48@push_back@2
$LN4@push_back@2:

; 644  : 			{	// push back a non-element
; 645  : 			if (this->_Mylast == this->_Myend)

  00038	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0003b	75 09		 jne	 SHORT $LN1@push_back@2

; 646  : 				_Reserve(1);

  0003d	6a 01		 push	 1
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?_Reserve@?$vector@KV?$allocator@K@std@@@std@@IAEXI@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Reserve
$LN1@push_back@2:

; 647  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 648  : 			_Cons_val(this->_Alval,
; 649  : 				this->_Mylast,
; 650  : 				_STD forward<_Ty>(_Val));

  00046	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00049	85 c0		 test	 eax, eax
  0004b	74 04		 je	 SHORT $LN41@push_back@2
  0004d	8b 0f		 mov	 ecx, DWORD PTR [edi]
$LN48@push_back@2:
  0004f	89 08		 mov	 DWORD PTR [eax], ecx
$LN41@push_back@2:

; 651  : 			++this->_Mylast;

  00051	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi

; 652  : 			}
; 653  : 		}

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?push_back@?$vector@KV?$allocator@K@std@@@std@@QAEX$$QAK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::push_back
_TEXT	ENDS
PUBLIC	?resize@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEXI@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::resize
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\deque
;	COMDAT ?resize@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
$T511379 = -52						; size = 12
$T511377 = -40						; size = 12
$T511378 = -28						; size = 12
$T511375 = -16						; size = 12
$T511374 = -4						; size = 4
__Cat$511470 = 8					; size = 1
$T511376 = 8						; size = 4
__Newsize$ = 8						; size = 4
?resize@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEXI@Z PROC ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::resize, COMDAT
; _this$ = ecx

; 1123 : 		{	// determine new length, padding with _Ty() elements as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 1124 : 		if (_Newsize < this->_Mysize)

  0000a	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000d	57		 push	 edi
  0000e	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  00011	3b c7		 cmp	 eax, edi
  00013	76 62		 jbe	 SHORT $LN51@resize

; 1125 : 			erase(begin() + _Newsize, end());

  00015	8d 45 f0	 lea	 eax, DWORD PTR $T511375[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?end@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@XZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::end
  0001e	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00021	8b dc		 mov	 ebx, esp
  00023	8b f8		 mov	 edi, eax
  00025	89 65 fc	 mov	 DWORD PTR $T511374[ebp], esp
  00028	57		 push	 edi
  00029	8b cb		 mov	 ecx, ebx
  0002b	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  00030	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00033	ff 75 08	 push	 DWORD PTR __Newsize$[ebp]
  00036	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  00039	8d 45 e4	 lea	 eax, DWORD PTR $T511378[ebp]
  0003c	50		 push	 eax
  0003d	8d 45 d8	 lea	 eax, DWORD PTR $T511377[ebp]
  00040	50		 push	 eax
  00041	8b ce		 mov	 ecx, esi
  00043	e8 00 00 00 00	 call	 ?begin@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@XZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::begin
  00048	8b c8		 mov	 ecx, eax
  0004a	e8 00 00 00 00	 call	 ??H?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::operator+
  0004f	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00052	8b dc		 mov	 ebx, esp
  00054	8b f8		 mov	 edi, eax
  00056	89 65 08	 mov	 DWORD PTR $T511376[ebp], esp
  00059	57		 push	 edi
  0005a	8b cb		 mov	 ecx, ebx
  0005c	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  00061	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00064	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  00067	8d 45 cc	 lea	 eax, DWORD PTR $T511379[ebp]
  0006a	50		 push	 eax
  0006b	8b ce		 mov	 ecx, esi
  0006d	e8 00 00 00 00	 call	 ?erase@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE?AV?$_Deque_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@V?$_Deque_const_iterator@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@2@0@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::erase
  00072	e9 8d 00 00 00	 jmp	 $LN4@resize
$LN51@resize:

; 1126 : 		else if (this->_Mysize < _Newsize)

  00077	0f 83 87 00 00
	00		 jae	 $LN4@resize

; 1127 : 			{	// appemd default-constructed elements
; 1128 : 			this->_Orphan_all();

  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ

; 1129 : 			while (this->_Mysize < _Newsize)

  00083	39 7e 10	 cmp	 DWORD PTR [esi+16], edi
  00086	73 7c		 jae	 SHORT $LN4@resize
$LL5@resize:

; 1130 : 				{	// push_back default-constructed element
; 1131 : 				_PUSH_BACK_BEGIN;

  00088	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0008b	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0008e	03 c8		 add	 ecx, eax
  00090	f6 c1 01	 test	 cl, 1
  00093	75 13		 jne	 SHORT $LN3@resize
  00095	83 c0 02	 add	 eax, 2
  00098	d1 e8		 shr	 eax, 1
  0009a	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  0009d	77 09		 ja	 SHORT $LN3@resize
  0009f	6a 01		 push	 1
  000a1	8b ce		 mov	 ecx, esi
  000a3	e8 00 00 00 00	 call	 ?_Growmap@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@IAEXI@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Growmap
$LN3@resize:
  000a8	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  000ab	03 7e 10	 add	 edi, DWORD PTR [esi+16]
  000ae	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000b1	8b c7		 mov	 eax, edi
  000b3	d1 e8		 shr	 eax, 1
  000b5	3b c8		 cmp	 ecx, eax
  000b7	77 02		 ja	 SHORT $LN2@resize
  000b9	2b c1		 sub	 eax, ecx
$LN2@resize:
  000bb	8b d8		 mov	 ebx, eax
  000bd	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c0	83 3c 98 00	 cmp	 DWORD PTR [eax+ebx*4], 0
  000c4	75 11		 jne	 SHORT $LN1@resize
  000c6	6a 00		 push	 0
  000c8	6a 02		 push	 2
  000ca	e8 00 00 00 00	 call	 ??$_Allocate@UtagDirKeyTime@ioUserKeyInput@@@std@@YAPAUtagDirKeyTime@ioUserKeyInput@@IPAU12@@Z ; std::_Allocate<ioUserKeyInput::tagDirKeyTime>
  000cf	59		 pop	 ecx
  000d0	59		 pop	 ecx
  000d1	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000d4	89 04 99	 mov	 DWORD PTR [ecx+ebx*4], eax
$LN1@resize:

; 1132 : 				_Uninitialized_default_fill_n(
; 1133 : 					this->_Map[_Block] + _Newoff % _DEQUESIZ,
; 1134 : 					1, (_Ty *)0, this->_Alval);

  000d7	ff 75 08	 push	 DWORD PTR __Cat$511470[ebp]
  000da	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  000dd	6a 00		 push	 0
  000df	50		 push	 eax
  000e0	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000e3	8b 04 98	 mov	 eax, DWORD PTR [eax+ebx*4]
  000e6	6a 00		 push	 0
  000e8	83 e7 01	 and	 edi, 1
  000eb	8d 04 f8	 lea	 eax, DWORD PTR [eax+edi*8]
  000ee	6a 01		 push	 1
  000f0	50		 push	 eax
  000f1	e8 00 00 00 00	 call	 ??$_Uninit_def_fill_n@PAUtagDirKeyTime@ioUserKeyInput@@HU12@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@U12@@std@@YAXPAUtagDirKeyTime@ioUserKeyInput@@HPBU12@AAV?$allocator@UtagDirKeyTime@ioUserKeyInput@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_def_fill_n<ioUserKeyInput::tagDirKeyTime *,int,ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime>,ioUserKeyInput::tagDirKeyTime>
  000f6	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  000f9	83 c4 18	 add	 esp, 24			; 00000018H

; 1135 : 				_PUSH_BACK_END;

  000fc	ff 46 10	 inc	 DWORD PTR [esi+16]
  000ff	39 46 10	 cmp	 DWORD PTR [esi+16], eax
  00102	72 84		 jb	 SHORT $LL5@resize
$LN4@resize:

; 1136 : 				}
; 1137 : 			}
; 1138 : 		}

  00104	5f		 pop	 edi
  00105	5e		 pop	 esi
  00106	5b		 pop	 ebx
  00107	c9		 leave
  00108	c2 04 00	 ret	 4
?resize@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEXI@Z ENDP ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::resize
_TEXT	ENDS
PUBLIC	??1ioUserKeyInput@@QAE@XZ			; ioUserKeyInput::~ioUserKeyInput
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioUserKeyInput@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioUserKeyInput@@QAE@XZ$0
__ehfuncinfo$??1ioUserKeyInput@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ioUserKeyInput@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iouserkeyinput.cpp
xdata$x	ENDS
;	COMDAT ??1ioUserKeyInput@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioUserKeyInput@@QAE@XZ PROC				; ioUserKeyInput::~ioUserKeyInput, COMDAT
; _this$ = ecx

; 170  : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioUserKeyInput@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 171  : }

  00015	8d 8e 50 01 00
	00		 lea	 ecx, DWORD PTR [esi+336]
  0001b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy
  00020	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00024	8d 8e e8 00 00
	00		 lea	 ecx, DWORD PTR [esi+232]
  0002a	e8 00 00 00 00	 call	 ?_Tidy@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@IAEXXZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Tidy
  0002f	8d 8e e8 00 00
	00		 lea	 ecx, DWORD PTR [esi+232]
  00035	e8 00 00 00 00	 call	 ??1?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ ; std::_Deque_val<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::~_Deque_val<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
  0003a	e8 00 00 00 00	 call	 __EH_epilog3
  0003f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioUserKeyInput@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 e8 00 00
	00		 add	 ecx, 232		; 000000e8H
  00009	e9 00 00 00 00	 jmp	 ??1?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::~deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
__ehhandler$??1ioUserKeyInput@@QAE@XZ:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioUserKeyInput@@QAE@XZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioUserKeyInput@@QAE@XZ ENDP				; ioUserKeyInput::~ioUserKeyInput
PUBLIC	?EvaluateDirectionMixKey@ioUserKeyInput@@AAEXXZ	; ioUserKeyInput::EvaluateDirectionMixKey
; Function compile flags: /Ogsp
;	COMDAT ?EvaluateDirectionMixKey@ioUserKeyInput@@AAEXXZ
_TEXT	SEGMENT
tv306 = -8						; size = 4
$T511650 = -8						; size = 4
$T511506 = -8						; size = 4
$T511505 = -8						; size = 4
$T511504 = -8						; size = 4
$T511503 = -8						; size = 4
_bRight$505250 = -2					; size = 1
_bDown$505251 = -1					; size = 1
?EvaluateDirectionMixKey@ioUserKeyInput@@AAEXXZ PROC	; ioUserKeyInput::EvaluateDirectionMixKey, COMDAT
; _this$ = ecx

; 476  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 477  : 	m_CurMixKey = DMI_NONE;

  00008	83 a6 08 01 00
	00 00		 and	 DWORD PTR [esi+264], 0

; 478  : 
; 479  : 	DWORD dwCurTime = FRAMEGETTIME();

  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00015	8b c8		 mov	 ecx, eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 480  : 	if( m_dwMixStartTime + 50 < dwCurTime )

  0001d	8b 96 4c 01 00
	00		 mov	 edx, DWORD PTR [esi+332]
  00023	83 c2 32	 add	 edx, 50			; 00000032H
  00026	3b d0		 cmp	 edx, eax
  00028	73 7d		 jae	 SHORT $LN16@EvaluateDi@2

; 481  : 	{
; 482  : 		m_dwMixStartTime = dwCurTime;
; 483  : 
; 484  : 		bool bUp = false;
; 485  : 		bool bLeft = false;
; 486  : 		bool bRight = false;
; 487  : 		bool bDown = false;
; 488  : 
; 489  : 		DWORDVec::iterator iter = m_MixKeyVec.begin();

  0002a	8d 8e 50 01 00
	00		 lea	 ecx, DWORD PTR [esi+336]
  00030	8b 11		 mov	 edx, DWORD PTR [ecx]
  00032	53		 push	 ebx
  00033	32 db		 xor	 bl, bl
  00035	89 86 4c 01 00
	00		 mov	 DWORD PTR [esi+332], eax
  0003b	88 5d fe	 mov	 BYTE PTR _bRight$505250[ebp], bl
  0003e	88 5d ff	 mov	 BYTE PTR _bDown$505251[ebp], bl

; 490  : 		for( ; iter != m_MixKeyVec.end(); ++iter )

  00041	3b 96 54 01 00
	00		 cmp	 edx, DWORD PTR [esi+340]
  00047	74 48		 je	 SHORT $LN6@EvaluateDi@2
  00049	8b 86 54 01 00
	00		 mov	 eax, DWORD PTR [esi+340]
  0004f	57		 push	 edi
$LL69@EvaluateDi@2:

; 491  : 		{
; 492  : 			switch( *iter )

  00050	8b 3a		 mov	 edi, DWORD PTR [edx]
  00052	4f		 dec	 edi
  00053	74 1a		 je	 SHORT $LN14@EvaluateDi@2
  00055	4f		 dec	 edi
  00056	4f		 dec	 edi
  00057	74 12		 je	 SHORT $LN9@EvaluateDi@2
  00059	4f		 dec	 edi
  0005a	4f		 dec	 edi
  0005b	74 08		 je	 SHORT $LN8@EvaluateDi@2
  0005d	4f		 dec	 edi
  0005e	4f		 dec	 edi
  0005f	75 0e		 jne	 SHORT $LN14@EvaluateDi@2

; 493  : 			{
; 494  : 			case DKI_LEFT:
; 495  : 				bLeft = true;

  00061	b3 01		 mov	 bl, 1

; 496  : 				break;

  00063	eb 0a		 jmp	 SHORT $LN14@EvaluateDi@2
$LN8@EvaluateDi@2:

; 499  : 				break;
; 500  : 			case DKI_DOWN:
; 501  : 				bDown = true;

  00065	c6 45 ff 01	 mov	 BYTE PTR _bDown$505251[ebp], 1

; 502  : 				break;

  00069	eb 04		 jmp	 SHORT $LN14@EvaluateDi@2
$LN9@EvaluateDi@2:

; 497  : 			case DKI_RIGHT:
; 498  : 				bRight = true;

  0006b	c6 45 fe 01	 mov	 BYTE PTR _bRight$505250[ebp], 1
$LN14@EvaluateDi@2:

; 490  : 		for( ; iter != m_MixKeyVec.end(); ++iter )

  0006f	83 c2 04	 add	 edx, 4
  00072	3b d0		 cmp	 edx, eax
  00074	75 da		 jne	 SHORT $LL69@EvaluateDi@2

; 503  : 			case DKI_UP:
; 504  : 				bUp = true;
; 505  : 				break;
; 506  : 			}
; 507  : 		}
; 508  : 
; 509  : 		if( bLeft && bDown && bRight )

  00076	5f		 pop	 edi
  00077	84 db		 test	 bl, bl
  00079	74 16		 je	 SHORT $LN6@EvaluateDi@2
  0007b	80 7d ff 00	 cmp	 BYTE PTR _bDown$505251[ebp], 0
  0007f	74 10		 je	 SHORT $LN6@EvaluateDi@2
  00081	80 7d fe 00	 cmp	 BYTE PTR _bRight$505250[ebp], 0
  00085	74 0a		 je	 SHORT $LN6@EvaluateDi@2

; 510  : 		{
; 511  : 			m_CurMixKey = DMI_LEFT_UP_RIGHT;

  00087	c7 86 08 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+264], 1
$LN6@EvaluateDi@2:

; 512  : 		}
; 513  : 		m_MixKeyVec.clear();

  00091	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00094	8b 11		 mov	 edx, DWORD PTR [ecx]
  00096	50		 push	 eax
  00097	52		 push	 edx
  00098	8d 45 f8	 lea	 eax, DWORD PTR $T511650[ebp]
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ?erase@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@0@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::erase
  000a1	5b		 pop	 ebx

; 514  : 	}
; 515  : 	else

  000a2	e9 84 00 00 00	 jmp	 $LN1@EvaluateDi@2
$LN16@EvaluateDi@2:

; 516  : 	{
; 517  : 		if( IsLeftKeyRelease() )

  000a7	8b ce		 mov	 ecx, esi
  000a9	e8 00 00 00 00	 call	 ?IsLeftKeyRelease@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsLeftKeyRelease
  000ae	84 c0		 test	 al, al
  000b0	74 16		 je	 SHORT $LN4@EvaluateDi@2

; 518  : 		{
; 519  : 			m_MixKeyVec.push_back( DKI_LEFT );

  000b2	8d 45 f8	 lea	 eax, DWORD PTR $T511503[ebp]
  000b5	8d 8e 50 01 00
	00		 lea	 ecx, DWORD PTR [esi+336]
  000bb	50		 push	 eax
  000bc	c7 45 f8 07 00
	00 00		 mov	 DWORD PTR $T511503[ebp], 7
  000c3	e8 00 00 00 00	 call	 ?push_back@?$vector@KV?$allocator@K@std@@@std@@QAEX$$QAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::push_back
$LN4@EvaluateDi@2:

; 520  : 		}
; 521  : 
; 522  : 		if( IsRightKeyRelease() )

  000c8	8b ce		 mov	 ecx, esi
  000ca	e8 00 00 00 00	 call	 ?IsRightKeyRelease@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsRightKeyRelease
  000cf	84 c0		 test	 al, al
  000d1	74 16		 je	 SHORT $LN3@EvaluateDi@2

; 523  : 		{
; 524  : 			m_MixKeyVec.push_back( DKI_RIGHT );

  000d3	8d 45 f8	 lea	 eax, DWORD PTR $T511504[ebp]
  000d6	8d 8e 50 01 00
	00		 lea	 ecx, DWORD PTR [esi+336]
  000dc	50		 push	 eax
  000dd	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR $T511504[ebp], 3
  000e4	e8 00 00 00 00	 call	 ?push_back@?$vector@KV?$allocator@K@std@@@std@@QAEX$$QAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::push_back
$LN3@EvaluateDi@2:

; 525  : 		}
; 526  : 
; 527  : 		if( IsDownKeyRelease() )

  000e9	8b ce		 mov	 ecx, esi
  000eb	e8 00 00 00 00	 call	 ?IsDownKeyRelease@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsDownKeyRelease
  000f0	84 c0		 test	 al, al
  000f2	74 16		 je	 SHORT $LN2@EvaluateDi@2

; 528  : 		{
; 529  : 			m_MixKeyVec.push_back( DKI_DOWN );

  000f4	8d 45 f8	 lea	 eax, DWORD PTR $T511505[ebp]
  000f7	8d 8e 50 01 00
	00		 lea	 ecx, DWORD PTR [esi+336]
  000fd	50		 push	 eax
  000fe	c7 45 f8 05 00
	00 00		 mov	 DWORD PTR $T511505[ebp], 5
  00105	e8 00 00 00 00	 call	 ?push_back@?$vector@KV?$allocator@K@std@@@std@@QAEX$$QAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::push_back
$LN2@EvaluateDi@2:

; 530  : 		}
; 531  : 
; 532  : 		if( IsUpKeyRelease() )

  0010a	8b ce		 mov	 ecx, esi
  0010c	e8 00 00 00 00	 call	 ?IsUpKeyRelease@ioUserKeyInput@@QBE_NXZ ; ioUserKeyInput::IsUpKeyRelease
  00111	84 c0		 test	 al, al
  00113	74 16		 je	 SHORT $LN1@EvaluateDi@2

; 533  : 		{
; 534  : 			m_MixKeyVec.push_back( DKI_UP );

  00115	8d 45 f8	 lea	 eax, DWORD PTR $T511506[ebp]
  00118	8d 8e 50 01 00
	00		 lea	 ecx, DWORD PTR [esi+336]
  0011e	50		 push	 eax
  0011f	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR $T511506[ebp], 1
  00126	e8 00 00 00 00	 call	 ?push_back@?$vector@KV?$allocator@K@std@@@std@@QAEX$$QAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::push_back
$LN1@EvaluateDi@2:
  0012b	5e		 pop	 esi

; 535  : 		}		
; 536  : 	}
; 537  : 
; 538  : }

  0012c	c9		 leave
  0012d	c3		 ret	 0
?EvaluateDirectionMixKey@ioUserKeyInput@@AAEXXZ ENDP	; ioUserKeyInput::EvaluateDirectionMixKey
_TEXT	ENDS
PUBLIC	??0?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@I@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@I@Z$0
__ehfuncinfo$??0?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\deque
xdata$x	ENDS
;	COMDAT ??0?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@I@Z
_TEXT	SEGMENT
$T511678 = -20						; size = 4
$T511673 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
??0?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@I@Z PROC ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >, COMDAT
; _this$ = ecx

; 809  : 		{	// construct from _Count * _Ty()

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@I@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	51		 push	 ecx
  00012	89 65 ec	 mov	 DWORD PTR $T511673[ebp], esp
  00015	89 65 ec	 mov	 DWORD PTR $T511678[ebp], esp
  00018	e8 00 00 00 00	 call	 ??0?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@1@@Z ; std::_Deque_val<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::_Deque_val<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >

; 810  : 		resize(_Count);

  0001d	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00020	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00024	8b ce		 mov	 ecx, esi
  00026	e8 00 00 00 00	 call	 ?resize@?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAEXI@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::resize

; 811  : 		}

  0002b	8b c6		 mov	 eax, esi
  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@I@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Deque_val@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@XZ ; std::_Deque_val<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::~_Deque_val<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
__ehhandler$??0?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@I@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@I@Z ENDP ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
PUBLIC	??0ioUserKeyInput@@QAE@XZ			; ioUserKeyInput::ioUserKeyInput
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iouserkeyinput.cpp
;	COMDAT ??0ioUserKeyInput@@QAE@XZ
_TEXT	SEGMENT
??0ioUserKeyInput@@QAE@XZ PROC				; ioUserKeyInput::ioUserKeyInput, COMDAT
; _this$ = ecx

; 104  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi
  00005	8d 4e 0e	 lea	 ecx, DWORD PTR [esi+14]
  00008	e8 00 00 00 00	 call	 ??0tagUseKeyValue@ioUserKeyInput@@QAE@XZ ; ioUserKeyInput::tagUseKeyValue::tagUseKeyValue
  0000d	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  00010	e8 00 00 00 00	 call	 ??0tagUseKeyValue@ioUserKeyInput@@QAE@XZ ; ioUserKeyInput::tagUseKeyValue::tagUseKeyValue
  00015	8d 4e 4a	 lea	 ecx, DWORD PTR [esi+74]
  00018	e8 00 00 00 00	 call	 ??0tagUseKeyValue@ioUserKeyInput@@QAE@XZ ; ioUserKeyInput::tagUseKeyValue::tagUseKeyValue
  0001d	8d 4e 68	 lea	 ecx, DWORD PTR [esi+104]
  00020	e8 00 00 00 00	 call	 ??0tagUseKeyValue@ioUserKeyInput@@QAE@XZ ; ioUserKeyInput::tagUseKeyValue::tagUseKeyValue
  00025	8d 8e 86 00 00
	00		 lea	 ecx, DWORD PTR [esi+134]
  0002b	e8 00 00 00 00	 call	 ??0tagUseKeyValue@ioUserKeyInput@@QAE@XZ ; ioUserKeyInput::tagUseKeyValue::tagUseKeyValue
  00030	8d 8e a4 00 00
	00		 lea	 ecx, DWORD PTR [esi+164]
  00036	e8 00 00 00 00	 call	 ??0tagUseKeyValue@ioUserKeyInput@@QAE@XZ ; ioUserKeyInput::tagUseKeyValue::tagUseKeyValue
  0003b	6a 03		 push	 3
  0003d	8d 8e e8 00 00
	00		 lea	 ecx, DWORD PTR [esi+232]
  00043	e8 00 00 00 00	 call	 ??0?$deque@UtagDirKeyTime@ioUserKeyInput@@V?$allocator@UtagDirKeyTime@ioUserKeyInput@@@std@@@std@@QAE@I@Z ; std::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >::deque<ioUserKeyInput::tagDirKeyTime,std::allocator<ioUserKeyInput::tagDirKeyTime> >
  00048	33 d2		 xor	 edx, edx
  0004a	89 96 50 01 00
	00		 mov	 DWORD PTR [esi+336], edx
  00050	89 96 54 01 00
	00		 mov	 DWORD PTR [esi+340], edx
  00056	89 96 58 01 00
	00		 mov	 DWORD PTR [esi+344], edx

; 105  : 	m_CurDirKey = DKI_NONE;
; 106  : 	m_PreDirKey = DKI_NONE;
; 107  : 	m_FourDirKey = DKI_NONE;
; 108  : 	m_bNetworkkeySetted = false;
; 109  : 
; 110  : 	m_Keys.SetDefaultFirstKey();

  0005c	8d 4e 0e	 lea	 ecx, DWORD PTR [esi+14]
  0005f	89 16		 mov	 DWORD PTR [esi], edx
  00061	89 56 04	 mov	 DWORD PTR [esi+4], edx
  00064	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00067	88 56 0c	 mov	 BYTE PTR [esi+12], dl
  0006a	e8 00 00 00 00	 call	 ?SetDefaultFirstKey@tagUseKeyValue@ioUserKeyInput@@QAEXXZ ; ioUserKeyInput::tagUseKeyValue::SetDefaultFirstKey

; 111  : 	m_SecondKeys.SetDefaultSecondKey();

  0006f	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  00072	e8 00 00 00 00	 call	 ?SetDefaultSecondKey@tagUseKeyValue@ioUserKeyInput@@QAEXXZ ; ioUserKeyInput::tagUseKeyValue::SetDefaultSecondKey

; 112  : 	m_JoyKeys.SetDefaultJoyKey();

  00077	8d 4e 4a	 lea	 ecx, DWORD PTR [esi+74]
  0007a	e8 00 00 00 00	 call	 ?SetDefaultJoyKey@tagUseKeyValue@ioUserKeyInput@@QAEXXZ ; ioUserKeyInput::tagUseKeyValue::SetDefaultJoyKey

; 113  : 	m_AIKeys.Clear();

  0007f	8d 4e 68	 lea	 ecx, DWORD PTR [esi+104]
  00082	e8 00 00 00 00	 call	 ?Clear@tagUseKeyValue@ioUserKeyInput@@QAEXXZ ; ioUserKeyInput::tagUseKeyValue::Clear

; 114  : 
; 115  : 	m_KeptKeys.Clear();

  00087	8d 8e 86 00 00
	00		 lea	 ecx, DWORD PTR [esi+134]
  0008d	e8 00 00 00 00	 call	 ?Clear@tagUseKeyValue@ioUserKeyInput@@QAEXXZ ; ioUserKeyInput::tagUseKeyValue::Clear

; 116  : 	m_KeptSecondKeys.Clear();

  00092	8d 8e a4 00 00
	00		 lea	 ecx, DWORD PTR [esi+164]
  00098	e8 00 00 00 00	 call	 ?Clear@tagUseKeyValue@ioUserKeyInput@@QAEXXZ ; ioUserKeyInput::tagUseKeyValue::Clear
  0009d	5f		 pop	 edi

; 117  : 
; 118  : 	m_dwKeyCheckTime = 50;

  0009e	c7 86 0c 01 00
	00 32 00 00 00	 mov	 DWORD PTR [esi+268], 50	; 00000032H

; 119  : 
; 120  : 	m_dwLeftPressTime = 0;

  000a8	89 96 c4 00 00
	00		 mov	 DWORD PTR [esi+196], edx

; 121  : 	m_dwRightPressTime = 0;

  000ae	89 96 c8 00 00
	00		 mov	 DWORD PTR [esi+200], edx

; 122  : 	m_dwUpPressTime = 0;

  000b4	89 96 cc 00 00
	00		 mov	 DWORD PTR [esi+204], edx

; 123  : 	m_dwDownPressTime = 0;

  000ba	89 96 d0 00 00
	00		 mov	 DWORD PTR [esi+208], edx

; 124  : 	m_dwLastDirKeyReleaseTime = 0;

  000c0	89 96 d4 00 00
	00		 mov	 DWORD PTR [esi+212], edx

; 125  : 
; 126  : 	m_dwLeftUpPressTime    = 0;

  000c6	89 96 d8 00 00
	00		 mov	 DWORD PTR [esi+216], edx

; 127  : 	m_dwLeftDownPressTime  = 0;

  000cc	89 96 dc 00 00
	00		 mov	 DWORD PTR [esi+220], edx

; 128  : 	m_dwRightUpPressTime   = 0;

  000d2	89 96 e0 00 00
	00		 mov	 DWORD PTR [esi+224], edx

; 129  : 	m_dwRightDownPressTime = 0;

  000d8	89 96 e4 00 00
	00		 mov	 DWORD PTR [esi+228], edx

; 130  : 
; 131  : 	m_CurActionKey = AKI_NONE;

  000de	89 96 00 01 00
	00		 mov	 DWORD PTR [esi+256], edx

; 132  : 	m_PreActionKey = AKI_NONE;

  000e4	89 96 04 01 00
	00		 mov	 DWORD PTR [esi+260], edx

; 133  : 	m_CurMixKey    = DMI_NONE;

  000ea	89 96 08 01 00
	00		 mov	 DWORD PTR [esi+264], edx

; 134  : 
; 135  : 	m_dwDefensePressTime = 0;

  000f0	89 96 10 01 00
	00		 mov	 DWORD PTR [esi+272], edx

; 136  : 	m_dwJumpPressTime = 0;

  000f6	89 96 14 01 00
	00		 mov	 DWORD PTR [esi+276], edx

; 137  : 	m_dwAttackPressTime = 0;

  000fc	89 96 18 01 00
	00		 mov	 DWORD PTR [esi+280], edx

; 138  : 
; 139  : 	m_dwWeaponPressTime = 0;

  00102	89 96 1c 01 00
	00		 mov	 DWORD PTR [esi+284], edx

; 140  : 	m_dwArmorPressTime = 0;

  00108	89 96 20 01 00
	00		 mov	 DWORD PTR [esi+288], edx

; 141  : 	m_dwHelmetPressTime = 0;

  0010e	89 96 24 01 00
	00		 mov	 DWORD PTR [esi+292], edx

; 142  : 	m_dwCloakPressTime = 0;

  00114	89 96 28 01 00
	00		 mov	 DWORD PTR [esi+296], edx

; 143  : 
; 144  : 	m_dwDashCheckDuration = 800;

  0011a	c7 86 2c 01 00
	00 20 03 00 00	 mov	 DWORD PTR [esi+300], 800 ; 00000320H

; 145  : 
; 146  : 	m_dwLastAttackKeyRepeatTime = 0;

  00124	89 96 30 01 00
	00		 mov	 DWORD PTR [esi+304], edx

; 147  : 	m_dwAttackKeyRepeatGap = 200;

  0012a	c7 86 34 01 00
	00 c8 00 00 00	 mov	 DWORD PTR [esi+308], 200 ; 000000c8H

; 148  : 	m_iAttackRepeatCnt = 0;

  00134	89 96 38 01 00
	00		 mov	 DWORD PTR [esi+312], edx

; 149  : 
; 150  : 	m_bEnableKeyInput = true;

  0013a	c7 86 3c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+316], 1

; 151  : 	m_bDirDoubleClick = false;
; 152  : 
; 153  : 	m_bChangeKeyValue = false;
; 154  : 
; 155  : 	m_bUpKey		= false;
; 156  : 	m_bRightUpKey	= false;

  00144	89 96 40 01 00
	00		 mov	 DWORD PTR [esi+320], edx

; 157  : 	m_bRightKey		= false;
; 158  : 	m_bRightDownKey	= false;
; 159  : 	m_bDownKey		= false;
; 160  : 	m_bLeftDownKey	= false;

  0014a	66 89 96 44 01
	00 00		 mov	 WORD PTR [esi+324], dx

; 161  : 	m_bLeftKey		= false;
; 162  : 	m_bLeftUpKey	= false;

  00151	88 96 46 01 00
	00		 mov	 BYTE PTR [esi+326], dl

; 163  : 
; 164  : 	m_bInputProcessAI = false;

  00157	88 96 4b 01 00
	00		 mov	 BYTE PTR [esi+331], dl

; 165  : 
; 166  : 	m_dwMixStartTime = 0;

  0015d	89 96 4c 01 00
	00		 mov	 DWORD PTR [esi+332], edx

; 167  : }

  00163	8b c6		 mov	 eax, esi
  00165	5e		 pop	 esi
  00166	5b		 pop	 ebx
  00167	c3		 ret	 0
??0ioUserKeyInput@@QAE@XZ ENDP				; ioUserKeyInput::ioUserKeyInput
_TEXT	ENDS
PUBLIC	?UpdateKeyInput@ioUserKeyInput@@QAEXXZ		; ioUserKeyInput::UpdateKeyInput
; Function compile flags: /Ogsp
;	COMDAT ?UpdateKeyInput@ioUserKeyInput@@QAEXXZ
_TEXT	SEGMENT
?UpdateKeyInput@ioUserKeyInput@@QAEXXZ PROC		; ioUserKeyInput::UpdateKeyInput, COMDAT
; _this$ = ecx

; 298  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 299  : 	if( !m_bInputProcessAI && !m_bEnableKeyInput )	return;

  00003	80 be 4b 01 00
	00 00		 cmp	 BYTE PTR [esi+331], 0
  0000a	75 09		 jne	 SHORT $LN1@UpdateKeyI@2
  0000c	80 be 3c 01 00
	00 00		 cmp	 BYTE PTR [esi+316], 0
  00013	74 29		 je	 SHORT $LN2@UpdateKeyI@2
$LN1@UpdateKeyI@2:

; 300  : 
; 301  : 	CheckKeyPressTime();

  00015	e8 00 00 00 00	 call	 ?CheckKeyPressTime@ioUserKeyInput@@AAEXXZ ; ioUserKeyInput::CheckKeyPressTime

; 302  : 
; 303  : 	EvaluateDirectionMixKey();

  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 ?EvaluateDirectionMixKey@ioUserKeyInput@@AAEXXZ ; ioUserKeyInput::EvaluateDirectionMixKey

; 304  : 	EvaluateDirectionKey();

  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?EvaluateDirectionKey@ioUserKeyInput@@AAEXXZ ; ioUserKeyInput::EvaluateDirectionKey

; 305  : 	EvaluateActionKey();

  00028	8b ce		 mov	 ecx, esi
  0002a	e8 00 00 00 00	 call	 ?EvaluateActionKey@ioUserKeyInput@@AAEXXZ ; ioUserKeyInput::EvaluateActionKey

; 306  : 
; 307  : 	ChangeKeyValue();

  0002f	8b ce		 mov	 ecx, esi
  00031	e8 00 00 00 00	 call	 ?ChangeKeyValue@ioUserKeyInput@@AAEXXZ ; ioUserKeyInput::ChangeKeyValue

; 308  : 
; 309  : 	ClearReleaseKeyPressTime();

  00036	8b ce		 mov	 ecx, esi
  00038	5e		 pop	 esi
  00039	e9 00 00 00 00	 jmp	 ?ClearReleaseKeyPressTime@ioUserKeyInput@@AAEXXZ ; ioUserKeyInput::ClearReleaseKeyPressTime
$LN2@UpdateKeyI@2:
  0003e	5e		 pop	 esi

; 310  : }

  0003f	c3		 ret	 0
?UpdateKeyInput@ioUserKeyInput@@QAEXXZ ENDP		; ioUserKeyInput::UpdateKeyInput
_TEXT	ENDS
END
