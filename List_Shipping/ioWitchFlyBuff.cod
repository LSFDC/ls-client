; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioWitchFlyBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?return100@@YAIXZ				; return100
; Function compile flags: /Ogsp
;	COMDAT ?return100@@YAIXZ
_TEXT	SEGMENT
?return100@@YAIXZ PROC					; return100, COMDAT

; 25   : 	__forceinline unsigned int return100() { __asm mov eax, 100 };

  00000	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00005	c3		 ret	 0
?return100@@YAIXZ ENDP					; return100
_TEXT	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?ProcessBuff@ioWitchFlyBuff@@UAEXM@Z		; ioWitchFlyBuff::ProcessBuff
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
EXTRN	?CheckUseBuffSkill@ioBaseChar@@QAEXABVioHashString@@_N@Z:PROC ; ioBaseChar::CheckUseBuffSkill
EXTRN	?CheckCallingAreaWeapon@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingAreaWeapon
EXTRN	?CheckCallingProcess@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingProcess
EXTRN	?CheckSwitchType@ioBuff@@IAE_NM@Z:PROC		; ioBuff::CheckSwitchType
EXTRN	?ProcessBuff@ioBuff@@UAEXM@Z:PROC		; ioBuff::ProcessBuff
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iowitchflybuff.cpp
;	COMDAT ?ProcessBuff@ioWitchFlyBuff@@UAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioWitchFlyBuff@@UAEXM@Z PROC		; ioWitchFlyBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 95   : 	switch( m_iOperationType )

  00006	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  0000c	83 e8 00	 sub	 eax, 0
  0000f	74 38		 je	 SHORT $LN2@ProcessBuf
  00011	48		 dec	 eax
  00012	74 06		 je	 SHORT $LN3@ProcessBuf
  00014	48		 dec	 eax
  00015	74 15		 je	 SHORT $LN5@ProcessBuf
  00017	48		 dec	 eax
  00018	75 34		 jne	 SHORT $LN6@ProcessBuf
$LN3@ProcessBuf:

; 106  : 	case OT_DELAY:
; 107  : 	case OT_ACTIVE:
; 108  : 		ioBuff::ProcessBuff( fTimePerSec );

  0001a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  0001f	51		 push	 ecx
  00020	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00025	e8 00 00 00 00	 call	 ?ProcessBuff@ioBuff@@UAEXM@Z ; ioBuff::ProcessBuff

; 109  : 		break;

  0002a	eb 22		 jmp	 SHORT $LN6@ProcessBuf
$LN5@ProcessBuf:

; 96   : 	{
; 97   : 	case OT_SWITCH:
; 98   : 		if( !CheckSwitchType( fTimePerSec ) )

  0002c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00031	51		 push	 ecx
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	e8 00 00 00 00	 call	 ?CheckSwitchType@ioBuff@@IAE_NM@Z ; ioBuff::CheckSwitchType

; 99   : 		{
; 100  : 			SetReserveEndBuff();

  0003c	8b ce		 mov	 ecx, esi
  0003e	84 c0		 test	 al, al

; 101  : 			return;

  00040	74 2b		 je	 SHORT $LN12@ProcessBuf

; 102  : 		}
; 103  : 
; 104  : 		CheckCallingProcess();

  00042	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 105  : 		break;

  00047	eb 05		 jmp	 SHORT $LN6@ProcessBuf
$LN2@ProcessBuf:

; 110  : 	case OT_PASSIVE:
; 111  : 		CheckCallingAreaWeapon();

  00049	e8 00 00 00 00	 call	 ?CheckCallingAreaWeapon@ioBuff@@IAEXXZ ; ioBuff::CheckCallingAreaWeapon
$LN6@ProcessBuf:

; 112  : 		break;
; 113  : 	}
; 114  : 
; 115  : 	if( m_pOwner->GetState() != CS_WITCH_FLY )

  0004e	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00054	80 b9 10 03 00
	00 4e		 cmp	 BYTE PTR [ecx+784], 78	; 0000004eH
  0005b	74 15		 je	 SHORT $LN1@ProcessBuf

; 116  : 	{
; 117  : 		m_pOwner->CheckUseBuffSkill( m_Name, false );

  0005d	6a 00		 push	 0
  0005f	8d 86 34 02 00
	00		 lea	 eax, DWORD PTR [esi+564]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?CheckUseBuffSkill@ioBaseChar@@QAEXABVioHashString@@_N@Z ; ioBaseChar::CheckUseBuffSkill

; 118  : 		SetReserveEndBuff();

  0006b	8b ce		 mov	 ecx, esi
$LN12@ProcessBuf:
  0006d	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff
$LN1@ProcessBuf:
  00072	5e		 pop	 esi

; 119  : 		return;
; 120  : 	}
; 121  : }

  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
?ProcessBuff@ioWitchFlyBuff@@UAEXM@Z ENDP		; ioWitchFlyBuff::ProcessBuff
_TEXT	ENDS
PUBLIC	?EndBuff@ioWitchFlyBuff@@UAEXXZ			; ioWitchFlyBuff::EndBuff
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
; Function compile flags: /Ogsp
;	COMDAT ?EndBuff@ioWitchFlyBuff@@UAEXXZ
_TEXT	SEGMENT
?EndBuff@ioWitchFlyBuff@@UAEXXZ PROC			; ioWitchFlyBuff::EndBuff, COMDAT
; _this$ = ecx

; 125  : 	ioBuff::EndBuff();

  00000	e9 00 00 00 00	 jmp	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff
?EndBuff@ioWitchFlyBuff@@UAEXXZ ENDP			; ioWitchFlyBuff::EndBuff
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?size@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QBEIXZ ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QBEIXZ PROC ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 50		 push	 80			; 00000050H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QBEIXZ ENDP ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::size
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@IBEXXZ ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@IBEXXZ PROC ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@IBEXXZ ENDP ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::_Xlen
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UAttackAttribute@@@std@@QBEIXZ ; std::allocator<AttackAttribute>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UAttackAttribute@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UAttackAttribute@@@std@@QBEIXZ PROC ; std::allocator<AttackAttribute>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 33 33 33 03	 mov	 eax, 53687091		; 03333333H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UAttackAttribute@@@std@@QBEIXZ ENDP ; std::allocator<AttackAttribute>::max_size
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UAttackAttribute@@@std@@YAPAUAttackAttribute@@IPAU1@@Z ; std::_Allocate<AttackAttribute>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UAttackAttribute@@@std@@YAPAUAttackAttribute@@IPAU1@@Z
_TEXT	SEGMENT
$T527313 = -12						; size = 12
$T527318 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UAttackAttribute@@@std@@YAPAUAttackAttribute@@IPAU1@@Z PROC ; std::_Allocate<AttackAttribute>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 33 33 33
	03		 cmp	 ecx, 53687091		; 03333333H
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	6b c9 50	 imul	 ecx, 80			; 00000050H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T527318[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T527318[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T527313[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T527313[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T527313[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UAttackAttribute@@@std@@YAPAUAttackAttribute@@IPAU1@@Z ENDP ; std::_Allocate<AttackAttribute>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@AAPAUAttackAttribute@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >,AttackAttribute *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@AAPAUAttackAttribute@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@AAPAUAttackAttribute@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >,AttackAttribute *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@AAPAUAttackAttribute@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >,AttackAttribute *>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QBEABUAttackAttribute@@XZ ; std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QBEABUAttackAttribute@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QBEABUAttackAttribute@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QBEABUAttackAttribute@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 50	 add	 DWORD PTR [eax], 80	; 00000050H

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >::operator++
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 28	 add	 DWORD PTR [eax], 40	; 00000028H

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator++
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 0c	 add	 DWORD PTR [eax], 12	; 0000000cH

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator++
_TEXT	ENDS
PUBLIC	??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z ; std::forward<WeaponInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z PROC ; std::forward<WeaponInfo const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z ENDP ; std::forward<WeaponInfo const &>
_TEXT	ENDS
PUBLIC	??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z ; std::forward<ForceInfo const &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z PROC ; std::forward<ForceInfo const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z ENDP ; std::forward<ForceInfo const &>
_TEXT	ENDS
PUBLIC	??$forward@ABUAttackAttribute@@@std@@YAABUAttackAttribute@@ABU1@@Z ; std::forward<AttackAttribute const &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@ABUAttackAttribute@@@std@@YAABUAttackAttribute@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUAttackAttribute@@@std@@YAABUAttackAttribute@@ABU1@@Z PROC ; std::forward<AttackAttribute const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUAttackAttribute@@@std@@YAABUAttackAttribute@@ABU1@@Z ENDP ; std::forward<AttackAttribute const &>
_TEXT	ENDS
PUBLIC	??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z ; std::_Construct<ForceInfo,ForceInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z PROC ; std::_Construct<ForceInfo,ForceInfo const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN3@Construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN3@Construct:
  00013	5f		 pop	 edi

; 49   : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z ENDP ; std::_Construct<ForceInfo,ForceInfo const &>
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	??1WeaponInfo@@QAE@XZ				; WeaponInfo::~WeaponInfo
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1WeaponInfo@@QAE@XZ
_TEXT	SEGMENT
??1WeaponInfo@@QAE@XZ PROC				; WeaponInfo::~WeaponInfo, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??1WeaponInfo@@QAE@XZ ENDP				; WeaponInfo::~WeaponInfo
_TEXT	ENDS
PUBLIC	?GetName@ioBuff@@QBEABVioHashString@@XZ		; ioBuff::GetName
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
;	COMDAT ?GetName@ioBuff@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetName@ioBuff@@QBEABVioHashString@@XZ PROC		; ioBuff::GetName, COMDAT
; _this$ = ecx

; 440  : 	inline const ioHashString& GetName() const { return m_Name; }

  00000	8d 81 34 02 00
	00		 lea	 eax, DWORD PTR [ecx+564]
  00006	c3		 ret	 0
?GetName@ioBuff@@QBEABVioHashString@@XZ ENDP		; ioBuff::GetName
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::~_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::~_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::~_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UWeaponInfo@@@std@@QAE@XZ	; std::allocator<WeaponInfo>::allocator<WeaponInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UWeaponInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UWeaponInfo@@@std@@QAE@XZ PROC		; std::allocator<WeaponInfo>::allocator<WeaponInfo>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UWeaponInfo@@@std@@QAE@XZ ENDP		; std::allocator<WeaponInfo>::allocator<WeaponInfo>
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::~_Vector_val<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::~_Vector_val<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::~_Vector_val<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UForceInfo@@@std@@QAE@XZ		; std::allocator<ForceInfo>::allocator<ForceInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UForceInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UForceInfo@@@std@@QAE@XZ PROC		; std::allocator<ForceInfo>::allocator<ForceInfo>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UForceInfo@@@std@@QAE@XZ ENDP		; std::allocator<ForceInfo>::allocator<ForceInfo>
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@XZ ; std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> >::~_Vector_val<AttackAttribute,std::allocator<AttackAttribute> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> >::~_Vector_val<AttackAttribute,std::allocator<AttackAttribute> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> >::~_Vector_val<AttackAttribute,std::allocator<AttackAttribute> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UAttackAttribute@@@std@@QAE@XZ	; std::allocator<AttackAttribute>::allocator<AttackAttribute>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UAttackAttribute@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UAttackAttribute@@@std@@QAE@XZ PROC	; std::allocator<AttackAttribute>::allocator<AttackAttribute>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UAttackAttribute@@@std@@QAE@XZ ENDP	; std::allocator<AttackAttribute>::allocator<AttackAttribute>
_TEXT	ENDS
PUBLIC	??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z	; std::allocator<WeaponInfo>::allocator<WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z PROC	; std::allocator<WeaponInfo>::allocator<WeaponInfo>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<WeaponInfo>::allocator<WeaponInfo>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z ; std::allocator<WeaponInfo>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z PROC ; std::allocator<WeaponInfo>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z ENDP ; std::allocator<WeaponInfo>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z	; std::allocator<ForceInfo>::allocator<ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z PROC	; std::allocator<ForceInfo>::allocator<ForceInfo>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<ForceInfo>::allocator<ForceInfo>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z ; std::allocator<ForceInfo>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z PROC ; std::allocator<ForceInfo>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z ENDP ; std::allocator<ForceInfo>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@UAttackAttribute@@@std@@QAE@ABV01@@Z ; std::allocator<AttackAttribute>::allocator<AttackAttribute>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@UAttackAttribute@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UAttackAttribute@@@std@@QAE@ABV01@@Z PROC ; std::allocator<AttackAttribute>::allocator<AttackAttribute>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UAttackAttribute@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<AttackAttribute>::allocator<AttackAttribute>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UAttackAttribute@@@std@@QAEXPAUAttackAttribute@@I@Z ; std::allocator<AttackAttribute>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UAttackAttribute@@@std@@QAEXPAUAttackAttribute@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UAttackAttribute@@@std@@QAEXPAUAttackAttribute@@I@Z PROC ; std::allocator<AttackAttribute>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UAttackAttribute@@@std@@QAEXPAUAttackAttribute@@I@Z ENDP ; std::allocator<AttackAttribute>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QAE@PAUAttackAttribute@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QAE@PAUAttackAttribute@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QAE@PAUAttackAttribute@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QAE@PAUAttackAttribute@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >::_Compat
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UAttackAttribute@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUAttackAttribute@@0@Z ; std::_Ptr_cat<AttackAttribute,AttackAttribute>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UAttackAttribute@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUAttackAttribute@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UAttackAttribute@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUAttackAttribute@@0@Z PROC ; std::_Ptr_cat<AttackAttribute,AttackAttribute>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UAttackAttribute@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUAttackAttribute@@0@Z ENDP ; std::_Ptr_cat<AttackAttribute,AttackAttribute>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z ; std::_Ptr_cat<WeaponInfo,WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z PROC ; std::_Ptr_cat<WeaponInfo,WeaponInfo>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z ENDP ; std::_Ptr_cat<WeaponInfo,WeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z ; std::_Ptr_cat<ForceInfo,ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z PROC ; std::_Ptr_cat<ForceInfo,ForceInfo>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z ENDP ; std::_Ptr_cat<ForceInfo,ForceInfo>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 28		 push	 40			; 00000028H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 28		 push	 40			; 00000028H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::size
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::capacity
; Function compile flags: /Ogsp
;	COMDAT ?capacity@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 0c		 push	 12			; 0000000cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 0c		 push	 12			; 0000000cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::size
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@2:
$LN3@Xlen@2:
  0000b	cc		 int	 3
?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Xlen
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@3:
$LN3@Xlen@3:
  0000b	cc		 int	 3
?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Xlen
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ	; std::allocator<WeaponInfo>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ PROC	; std::allocator<WeaponInfo>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ ENDP	; std::allocator<WeaponInfo>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ	; std::allocator<ForceInfo>::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ PROC	; std::allocator<ForceInfo>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ ENDP	; std::allocator<ForceInfo>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Compat
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Compat
_TEXT	ENDS
PUBLIC	??$move@AAUAttackAttribute@@@std@@YA$$QAUAttackAttribute@@AAU1@@Z ; std::move<AttackAttribute &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUAttackAttribute@@@std@@YA$$QAUAttackAttribute@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUAttackAttribute@@@std@@YA$$QAUAttackAttribute@@AAU1@@Z PROC ; std::move<AttackAttribute &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUAttackAttribute@@@std@@YA$$QAUAttackAttribute@@AAU1@@Z ENDP ; std::move<AttackAttribute &>
_TEXT	ENDS
PUBLIC	??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ; std::_Allocate<WeaponInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z
_TEXT	SEGMENT
$T527481 = -12						; size = 12
$T527485 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z PROC ; std::_Allocate<WeaponInfo>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate@2

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 66 66 66
	06		 cmp	 ecx, 107374182		; 06666666H
  00015	77 0e		 ja	 SHORT $LN1@Allocate@2
  00017	6b c9 28	 imul	 ecx, 40			; 00000028H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T527485[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T527485[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T527481[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T527481[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T527481[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate@2:
??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ENDP ; std::_Allocate<WeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ; std::_Allocate<ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z
_TEXT	SEGMENT
$T527490 = -12						; size = 12
$T527494 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z PROC ; std::_Allocate<ForceInfo>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate@3

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 55 55 55
	15		 cmp	 ecx, 357913941		; 15555555H
  00015	77 0e		 ja	 SHORT $LN1@Allocate@3
  00017	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate@3
$LN1@Allocate@3:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T527494[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T527494[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T527490[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T527490[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T527490[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@3:
$LN5@Allocate@3:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate@3:
??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ENDP ; std::_Allocate<ForceInfo>
_TEXT	ENDS
PUBLIC	??$_Copy_impl@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<ForceInfo *,ForceInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Copy_impl@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_impl@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Copy_impl<ForceInfo *,ForceInfo *>, COMDAT

; 2142 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2143 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00009	74 18		 je	 SHORT $LN8@Copy_impl
  0000b	56		 push	 esi
  0000c	57		 push	 edi
$LL3@Copy_impl:

; 2144 : 		*_Dest = *_First;

  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00010	83 45 10 0c	 add	 DWORD PTR __Dest$[ebp], 12 ; 0000000cH
  00014	8b f0		 mov	 esi, eax
  00016	a5		 movsd
  00017	a5		 movsd
  00018	83 c0 0c	 add	 eax, 12			; 0000000cH
  0001b	a5		 movsd
  0001c	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001f	75 ec		 jne	 SHORT $LL3@Copy_impl
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
$LN8@Copy_impl:

; 2145 : 	return (_Dest);

  00023	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2146 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Copy_impl@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_impl<ForceInfo *,ForceInfo *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z ; std::_Destroy<ForceInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z PROC	; std::_Destroy<ForceInfo>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z ENDP	; std::_Destroy<ForceInfo>
_TEXT	ENDS
PUBLIC	??4WeaponInfo@@QAEAAU0@ABU0@@Z			; WeaponInfo::operator=
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??4WeaponInfo@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4WeaponInfo@@QAEAAU0@ABU0@@Z PROC			; WeaponInfo::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	8b 07		 mov	 eax, DWORD PTR [edi]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00011	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00014	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00017	50		 push	 eax
  00018	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  00021	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00024	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00027	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0002a	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0002d	8a 47 20	 mov	 al, BYTE PTR [edi+32]
  00030	88 46 20	 mov	 BYTE PTR [esi+32], al
  00033	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00036	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00039	5f		 pop	 edi
  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??4WeaponInfo@@QAEAAU0@ABU0@@Z ENDP			; WeaponInfo::operator=
_TEXT	ENDS
PUBLIC	??_GWeaponInfo@@QAEPAXI@Z			; WeaponInfo::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GWeaponInfo@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GWeaponInfo@@QAEPAXI@Z PROC				; WeaponInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0000f	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00013	74 07		 je	 SHORT $LN1@scalar@2
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	59		 pop	 ecx
$LN1@scalar@2:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GWeaponInfo@@QAEPAXI@Z ENDP				; WeaponInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$move@AAUWeaponInfo@@@std@@YA$$QAUWeaponInfo@@AAU1@@Z ; std::move<WeaponInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUWeaponInfo@@@std@@YA$$QAUWeaponInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUWeaponInfo@@@std@@YA$$QAUWeaponInfo@@AAU1@@Z PROC ; std::move<WeaponInfo &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUWeaponInfo@@@std@@YA$$QAUWeaponInfo@@AAU1@@Z ENDP ; std::move<WeaponInfo &>
_TEXT	ENDS
PUBLIC	??$move@AAUForceInfo@@@std@@YA$$QAUForceInfo@@AAU1@@Z ; std::move<ForceInfo &>
; Function compile flags: /Ogsp
;	COMDAT ??$move@AAUForceInfo@@@std@@YA$$QAUForceInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUForceInfo@@@std@@YA$$QAUForceInfo@@AAU1@@Z PROC ; std::move<ForceInfo &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUForceInfo@@@std@@YA$$QAUForceInfo@@AAU1@@Z ENDP ; std::move<ForceInfo &>
_TEXT	ENDS
PUBLIC	??$forward@AAUWeaponInfo@@@std@@YAAAUWeaponInfo@@AAU1@@Z ; std::forward<WeaponInfo &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@AAUWeaponInfo@@@std@@YAAAUWeaponInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUWeaponInfo@@@std@@YAAAUWeaponInfo@@AAU1@@Z PROC ; std::forward<WeaponInfo &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUWeaponInfo@@@std@@YAAAUWeaponInfo@@AAU1@@Z ENDP ; std::forward<WeaponInfo &>
_TEXT	ENDS
PUBLIC	??$forward@AAUForceInfo@@@std@@YAAAUForceInfo@@AAU1@@Z ; std::forward<ForceInfo &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@AAUForceInfo@@@std@@YAAAUForceInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUForceInfo@@@std@@YAAAUForceInfo@@AAU1@@Z PROC ; std::forward<ForceInfo &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUForceInfo@@@std@@YAAAUForceInfo@@AAU1@@Z ENDP ; std::forward<ForceInfo &>
_TEXT	ENDS
PUBLIC	??$construct@AAUForceInfo@@@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@AAU2@@Z ; std::allocator<ForceInfo>::construct<ForceInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUForceInfo@@@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUForceInfo@@@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@AAU2@@Z PROC ; std::allocator<ForceInfo>::construct<ForceInfo &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN3@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN3@construct:
  00013	5f		 pop	 edi

; 209  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$construct@AAUForceInfo@@@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@AAU2@@Z ENDP ; std::allocator<ForceInfo>::construct<ForceInfo &>
_TEXT	ENDS
PUBLIC	??0WeaponInfo@@QAE@ABU0@@Z			; WeaponInfo::WeaponInfo
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0WeaponInfo@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0WeaponInfo@@QAE@ABU0@@Z PROC				; WeaponInfo::WeaponInfo, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	8b 07		 mov	 eax, DWORD PTR [edi]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00011	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00014	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00017	50		 push	 eax
  00018	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00021	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00024	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00027	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0002a	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0002d	8a 47 20	 mov	 al, BYTE PTR [edi+32]
  00030	88 46 20	 mov	 BYTE PTR [esi+32], al
  00033	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00036	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00039	5f		 pop	 edi
  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??0WeaponInfo@@QAE@ABU0@@Z ENDP				; WeaponInfo::WeaponInfo
_TEXT	ENDS
PUBLIC	?StartBuff@ioWitchFlyBuff@@UAEXPAVioBaseChar@@@Z ; ioWitchFlyBuff::StartBuff
EXTRN	?SetWitchFlyStateSkill@ioBaseChar@@QAE_NABVioHashString@@ABUtagWitchFlyInfo@@@Z:PROC ; ioBaseChar::SetWitchFlyStateSkill
EXTRN	?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z:PROC	; ioBuff::StartBuff
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iowitchflybuff.cpp
;	COMDAT ?StartBuff@ioWitchFlyBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?StartBuff@ioWitchFlyBuff@@UAEXPAVioBaseChar@@@Z PROC	; ioWitchFlyBuff::StartBuff, COMDAT
; _this$ = ecx

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 76   : 	ioBuff::StartBuff( pOwner );

  00004	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z ; ioBuff::StartBuff

; 77   : 
; 78   : 	if( pOwner )

  0000e	83 7d 08 00	 cmp	 DWORD PTR _pOwner$[ebp], 0
  00012	74 16		 je	 SHORT $LN1@StartBuff

; 79   : 		pOwner->SetWitchFlyStateSkill( GetName(), m_AttackWitchFly );

  00014	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  00017	8d 86 6c 09 00
	00		 lea	 eax, DWORD PTR [esi+2412]
  0001d	50		 push	 eax
  0001e	81 c6 34 02 00
	00		 add	 esi, 564		; 00000234H
  00024	56		 push	 esi
  00025	e8 00 00 00 00	 call	 ?SetWitchFlyStateSkill@ioBaseChar@@QAE_NABVioHashString@@ABUtagWitchFlyInfo@@@Z ; ioBaseChar::SetWitchFlyStateSkill
$LN1@StartBuff:
  0002a	5e		 pop	 esi

; 80   : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?StartBuff@ioWitchFlyBuff@@UAEXPAVioBaseChar@@@Z ENDP	; ioWitchFlyBuff::StartBuff
_TEXT	ENDS
PUBLIC	?ApplyStartBuff@ioWitchFlyBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioWitchFlyBuff::ApplyStartBuff
EXTRN	?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z:PROC ; ioBuff::ApplyStartBuff
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioWitchFlyBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioWitchFlyBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioWitchFlyBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 84   : 	if( !ioBuff::ApplyStartBuff( pOwner, dwGlobalTime, dwGapTime ) )

  00004	ff 75 10	 push	 DWORD PTR _dwGapTime$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0000f	e8 00 00 00 00	 call	 ?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBuff::ApplyStartBuff
  00014	84 c0		 test	 al, al
  00016	74 1e		 je	 SHORT $LN3@ApplyStart
$LN2@ApplyStart:

; 85   : 		return false;
; 86   : 
; 87   : 	if( pOwner )

  00018	83 7d 08 00	 cmp	 DWORD PTR _pOwner$[ebp], 0
  0001c	74 16		 je	 SHORT $LN1@ApplyStart

; 88   : 		pOwner->SetWitchFlyStateSkill( GetName(), m_AttackWitchFly );

  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  00021	8d 86 6c 09 00
	00		 lea	 eax, DWORD PTR [esi+2412]
  00027	50		 push	 eax
  00028	81 c6 34 02 00
	00		 add	 esi, 564		; 00000234H
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?SetWitchFlyStateSkill@ioBaseChar@@QAE_NABVioHashString@@ABUtagWitchFlyInfo@@@Z ; ioBaseChar::SetWitchFlyStateSkill
$LN1@ApplyStart:

; 89   : 
; 90   : 	return true;

  00034	b0 01		 mov	 al, 1
$LN3@ApplyStart:
  00036	5e		 pop	 esi

; 91   : }

  00037	5d		 pop	 ebp
  00038	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioWitchFlyBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioWitchFlyBuff::ApplyStartBuff
_TEXT	ENDS
PUBLIC	?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end
_TEXT	ENDS
PUBLIC	?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end
_TEXT	ENDS
PUBLIC	?begin@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@XZ ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@XZ PROC ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@XZ ENDP ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@XZ ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@XZ PROC ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@XZ ENDP ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QBEIXZ ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QBEIXZ PROC ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 33 33 33 03	 mov	 eax, 53687091		; 03333333H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QBEIXZ ENDP ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UAttackAttribute@@@std@@QAEPAUAttackAttribute@@I@Z ; std::allocator<AttackAttribute>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UAttackAttribute@@@std@@QAEPAUAttackAttribute@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UAttackAttribute@@@std@@QAEPAUAttackAttribute@@I@Z PROC ; std::allocator<AttackAttribute>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UAttackAttribute@@@std@@YAPAUAttackAttribute@@IPAU1@@Z ; std::_Allocate<AttackAttribute>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UAttackAttribute@@@std@@QAEPAUAttackAttribute@@I@Z ENDP ; std::allocator<AttackAttribute>::allocate
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BB@@ioINILoader@@QAEXAAY0BB@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<17>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadString_e@$0BB@@ioINILoader@@QAEXAAY0BB@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
__k$ = -28						; size = 17
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BB@@ioINILoader@@QAEXAAY0BB@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<17>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 a7 01 00
	00		 je	 $LN96@LoadString
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 90 01 00
	00		 je	 $LN95@LoadString
  00039	b1 ec		 mov	 cl, -20			; ffffffecH
  0003b	32 d1		 xor	 dl, cl
  0003d	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00040	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00043	84 d2		 test	 dl, dl
  00045	0f 84 78 01 00
	00		 je	 $LN94@LoadString
  0004b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004e	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 61 01 00
	00		 je	 $LN93@LoadString
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 4a 01 00
	00		 je	 $LN92@LoadString
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 34 01 00
	00		 je	 $LN91@LoadString
  0007e	32 d1		 xor	 dl, cl
  00080	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  00083	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00086	84 d2		 test	 dl, dl
  00088	0f 84 1e 01 00
	00		 je	 $LN90@LoadString
  0008e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00091	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 07 01 00
	00		 je	 $LN89@LoadString
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 f0 00 00
	00		 je	 $LN88@LoadString
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 da 00 00
	00		 je	 $LN87@LoadString
  000c1	32 d1		 xor	 dl, cl
  000c3	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000c6	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c9	84 d2		 test	 dl, dl
  000cb	0f 84 c4 00 00
	00		 je	 $LN86@LoadString
  000d1	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 ad 00 00
	00		 je	 $LN85@LoadString
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 96 00 00
	00		 je	 $LN84@LoadString
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 80 00 00
	00		 je	 $LN83@LoadString
  00104	32 d1		 xor	 dl, cl
  00106	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	74 6e		 je	 SHORT $LN82@LoadString
  00110	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00113	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00116	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00119	84 d2		 test	 dl, dl
  0011b	74 5b		 je	 SHORT $LN81@LoadString
  0011d	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00120	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  00124	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00127	0f 84 a6 00 00
	00		 je	 $LN111@LoadString
  0012d	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00130	84 d2		 test	 dl, dl
  00132	74 3f		 je	 SHORT $LN79@LoadString
  00134	32 d1		 xor	 dl, cl
  00136	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00139	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0013c	84 d2		 test	 dl, dl
  0013e	74 2d		 je	 SHORT $LN78@LoadString
  00140	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00143	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  00146	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00149	84 d2		 test	 dl, dl
  0014b	74 1a		 je	 SHORT $LN77@LoadString
  0014d	8a 40 14	 mov	 al, BYTE PTR [eax+20]
  00150	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00153	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  00156	84 c0		 test	 al, al
  00158	74 07		 je	 SHORT $LN76@LoadString
  0015a	34 ed		 xor	 al, -19			; ffffffedH
  0015c	88 45 f8	 mov	 BYTE PTR __k$[ebp+20], al
  0015f	eb 72		 jmp	 SHORT $LN111@LoadString
$LN76@LoadString:
  00161	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00165	eb 6c		 jmp	 SHORT $LN111@LoadString
$LN77@LoadString:
  00167	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0016b	eb 66		 jmp	 SHORT $LN111@LoadString
$LN78@LoadString:
  0016d	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00171	eb 60		 jmp	 SHORT $LN111@LoadString
$LN79@LoadString:
  00173	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00176	eb 5b		 jmp	 SHORT $LN111@LoadString
$LN81@LoadString:
  00178	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0017c	eb 55		 jmp	 SHORT $LN111@LoadString
$LN82@LoadString:
  0017e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00182	eb 4f		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  00184	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  00187	eb 4a		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  00189	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0018d	eb 44		 jmp	 SHORT $LN111@LoadString
$LN85@LoadString:
  0018f	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00193	eb 3e		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  00195	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00199	eb 38		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  0019b	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  0019e	eb 33		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  001a0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001a4	eb 2d		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  001a6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001aa	eb 27		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  001ac	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001b0	eb 21		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  001b2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001b5	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  001b7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001bb	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  001bd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001c1	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  001c3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001c7	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  001c9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001cd	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  001cf	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  001d3	6a 04		 push	 4
  001d5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001d8	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+16], 0
  001dc	5a		 pop	 edx
$LL104@LoadString:
  001dd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001e3	83 c0 04	 add	 eax, 4
  001e6	4a		 dec	 edx
  001e7	75 f4		 jne	 SHORT $LL104@LoadString

; 163  : 		LoadString(_k, d, b, i);

  001e9	ff 75 14	 push	 DWORD PTR _i$[ebp]
  001ec	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001ef	57		 push	 edi
  001f0	56		 push	 esi
  001f1	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f4	50		 push	 eax
  001f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  001fb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fe	5f		 pop	 edi
  001ff	33 cd		 xor	 ecx, ebp
  00201	5e		 pop	 esi
  00202	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00207	c9		 leave
  00208	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BB@@ioINILoader@@QAEXAAY0BB@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<17>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<19>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<19>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 cf 01 00
	00		 je	 $LN96@LoadString@2
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 b8 01 00
	00		 je	 $LN95@LoadString@2
  00039	b1 ec		 mov	 cl, -20			; ffffffecH
  0003b	32 d1		 xor	 dl, cl
  0003d	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00040	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00043	84 d2		 test	 dl, dl
  00045	0f 84 a0 01 00
	00		 je	 $LN94@LoadString@2
  0004b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004e	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 89 01 00
	00		 je	 $LN93@LoadString@2
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 72 01 00
	00		 je	 $LN92@LoadString@2
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 5c 01 00
	00		 je	 $LN91@LoadString@2
  0007e	32 d1		 xor	 dl, cl
  00080	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  00083	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00086	84 d2		 test	 dl, dl
  00088	0f 84 46 01 00
	00		 je	 $LN90@LoadString@2
  0008e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00091	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 2f 01 00
	00		 je	 $LN89@LoadString@2
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 18 01 00
	00		 je	 $LN88@LoadString@2
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 02 01 00
	00		 je	 $LN87@LoadString@2
  000c1	32 d1		 xor	 dl, cl
  000c3	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000c6	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c9	84 d2		 test	 dl, dl
  000cb	0f 84 ec 00 00
	00		 je	 $LN86@LoadString@2
  000d1	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 d5 00 00
	00		 je	 $LN85@LoadString@2
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 be 00 00
	00		 je	 $LN84@LoadString@2
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 a8 00 00
	00		 je	 $LN83@LoadString@2
  00104	32 d1		 xor	 dl, cl
  00106	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 92 00 00
	00		 je	 $LN82@LoadString@2
  00114	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00117	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0011a	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011d	84 d2		 test	 dl, dl
  0011f	74 7f		 je	 SHORT $LN81@LoadString@2
  00121	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00124	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00127	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012a	84 d2		 test	 dl, dl
  0012c	74 6c		 je	 SHORT $LN80@LoadString@2
  0012e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00131	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00134	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00137	84 d2		 test	 dl, dl
  00139	74 5a		 je	 SHORT $LN79@LoadString@2
  0013b	32 d1		 xor	 dl, cl
  0013d	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00141	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	0f 84 b1 00 00
	00		 je	 $LN111@LoadString@2
  0014a	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0014d	84 d2		 test	 dl, dl
  0014f	74 3e		 je	 SHORT $LN77@LoadString@2
  00151	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00154	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  00157	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0015a	84 d2		 test	 dl, dl
  0015c	74 2b		 je	 SHORT $LN76@LoadString@2
  0015e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00161	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  00164	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00167	84 d2		 test	 dl, dl
  00169	74 19		 je	 SHORT $LN75@LoadString@2
  0016b	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  0016e	32 d1		 xor	 dl, cl
  00170	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  00173	84 c0		 test	 al, al
  00175	74 07		 je	 SHORT $LN74@LoadString@2
  00177	34 eb		 xor	 al, -21			; ffffffebH
  00179	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  0017c	eb 7d		 jmp	 SHORT $LN111@LoadString@2
$LN74@LoadString@2:
  0017e	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  00182	eb 77		 jmp	 SHORT $LN111@LoadString@2
$LN75@LoadString@2:
  00184	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  00187	eb 72		 jmp	 SHORT $LN111@LoadString@2
$LN76@LoadString@2:
  00189	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0018d	eb 6c		 jmp	 SHORT $LN111@LoadString@2
$LN77@LoadString@2:
  0018f	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00193	eb 66		 jmp	 SHORT $LN111@LoadString@2
$LN79@LoadString@2:
  00195	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00198	eb 61		 jmp	 SHORT $LN111@LoadString@2
$LN80@LoadString@2:
  0019a	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0019e	eb 5b		 jmp	 SHORT $LN111@LoadString@2
$LN81@LoadString@2:
  001a0	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001a4	eb 55		 jmp	 SHORT $LN111@LoadString@2
$LN82@LoadString@2:
  001a6	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001aa	eb 4f		 jmp	 SHORT $LN111@LoadString@2
$LN83@LoadString@2:
  001ac	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001af	eb 4a		 jmp	 SHORT $LN111@LoadString@2
$LN84@LoadString@2:
  001b1	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001b5	eb 44		 jmp	 SHORT $LN111@LoadString@2
$LN85@LoadString@2:
  001b7	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001bb	eb 3e		 jmp	 SHORT $LN111@LoadString@2
$LN86@LoadString@2:
  001bd	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001c1	eb 38		 jmp	 SHORT $LN111@LoadString@2
$LN87@LoadString@2:
  001c3	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001c6	eb 33		 jmp	 SHORT $LN111@LoadString@2
$LN88@LoadString@2:
  001c8	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001cc	eb 2d		 jmp	 SHORT $LN111@LoadString@2
$LN89@LoadString@2:
  001ce	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001d2	eb 27		 jmp	 SHORT $LN111@LoadString@2
$LN90@LoadString@2:
  001d4	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d8	eb 21		 jmp	 SHORT $LN111@LoadString@2
$LN91@LoadString@2:
  001da	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001dd	eb 1c		 jmp	 SHORT $LN111@LoadString@2
$LN92@LoadString@2:
  001df	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001e3	eb 16		 jmp	 SHORT $LN111@LoadString@2
$LN93@LoadString@2:
  001e5	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e9	eb 10		 jmp	 SHORT $LN111@LoadString@2
$LN94@LoadString@2:
  001eb	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001ef	eb 0a		 jmp	 SHORT $LN111@LoadString@2
$LN95@LoadString@2:
  001f1	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001f5	eb 04		 jmp	 SHORT $LN111@LoadString@2
$LN96@LoadString@2:
  001f7	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@2:
  001fb	6a 04		 push	 4
  001fd	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00200	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  00204	5a		 pop	 edx
$LL104@LoadString@2:
  00205	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0020b	83 c0 04	 add	 eax, 4
  0020e	4a		 dec	 edx
  0020f	75 f4		 jne	 SHORT $LL104@LoadString@2
  00211	6a 10		 push	 16			; 00000010H
  00213	58		 pop	 eax
$LL101@LoadString@2:
  00214	8b c8		 mov	 ecx, eax
  00216	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0021c	79 05		 jns	 SHORT $LN112@LoadString@2
  0021e	49		 dec	 ecx
  0021f	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00222	41		 inc	 ecx
$LN112@LoadString@2:
  00223	b2 ed		 mov	 dl, -19			; ffffffedH
  00225	2a d1		 sub	 dl, cl
  00227	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  0022b	40		 inc	 eax
  0022c	83 f8 12	 cmp	 eax, 18			; 00000012H
  0022f	7c e3		 jl	 SHORT $LL101@LoadString@2

; 163  : 		LoadString(_k, d, b, i);

  00231	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00234	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00237	57		 push	 edi
  00238	56		 push	 esi
  00239	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0023c	50		 push	 eax
  0023d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00243	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00246	5f		 pop	 edi
  00247	33 cd		 xor	 ecx, ebp
  00249	5e		 pop	 esi
  0024a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024f	c9		 leave
  00250	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<19>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BI@@ioINILoader@@QAEHAAY0BI@$$CBDH@Z ; ioINILoader::LoadInt_e<24>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BI@@ioINILoader@@QAEHAAY0BI@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BI@@ioINILoader@@QAEHAAY0BI@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<24>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 45 02 00
	00		 je	 $LN96@LoadInt_e
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 2e 02 00
	00		 je	 $LN95@LoadInt_e
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 16 02 00
	00		 je	 $LN94@LoadInt_e
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 fe 01 00
	00		 je	 $LN93@LoadInt_e
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 e7 01 00
	00		 je	 $LN92@LoadInt_e
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 d1 01 00
	00		 je	 $LN91@LoadInt_e
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 bc 01 00
	00		 je	 $LN90@LoadInt_e
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 a6 01 00
	00		 je	 $LN89@LoadInt_e
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 8f 01 00
	00		 je	 $LN88@LoadInt_e
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 79 01 00
	00		 je	 $LN87@LoadInt_e
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 64 01 00
	00		 je	 $LN86@LoadInt_e
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 4e 01 00
	00		 je	 $LN85@LoadInt_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 37 01 00
	00		 je	 $LN84@LoadInt_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 21 01 00
	00		 je	 $LN83@LoadInt_e
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 0c 01 00
	00		 je	 $LN82@LoadInt_e
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 f6 00 00
	00		 je	 $LN81@LoadInt_e
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 df 00 00
	00		 je	 $LN80@LoadInt_e
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 c9 00 00
	00		 je	 $LN79@LoadInt_e
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 b4 00 00
	00		 je	 $LN78@LoadInt_e
  0014e	32 d1		 xor	 dl, cl
  00150	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 9e 00 00
	00		 je	 $LN77@LoadInt_e
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 87 00 00
	00		 je	 $LN76@LoadInt_e
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	74 75		 je	 SHORT $LN75@LoadInt_e
  0017c	32 d3		 xor	 dl, bl
  0017e	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00181	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00184	84 d2		 test	 dl, dl
  00186	74 64		 je	 SHORT $LN74@LoadInt_e
  00188	32 d1		 xor	 dl, cl
  0018a	80 78 17 00	 cmp	 BYTE PTR [eax+23], 0
  0018e	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00191	0f 84 d3 00 00
	00		 je	 $LN1@LoadInt_e
  00197	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  0019a	84 d2		 test	 dl, dl
  0019c	74 48		 je	 SHORT $LN72@LoadInt_e
  0019e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001a1	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a4	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001a7	84 d2		 test	 dl, dl
  001a9	74 33		 je	 SHORT $LN71@LoadInt_e
  001ab	32 d3		 xor	 dl, bl
  001ad	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001b0	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001b3	84 d2		 test	 dl, dl
  001b5	74 1f		 je	 SHORT $LN70@LoadInt_e
  001b7	8a 40 1b	 mov	 al, BYTE PTR [eax+27]
  001ba	32 d1		 xor	 dl, cl
  001bc	88 55 fa	 mov	 BYTE PTR __k$[ebp+26], dl
  001bf	84 c0		 test	 al, al
  001c1	74 0a		 je	 SHORT $LN69@LoadInt_e
  001c3	34 ea		 xor	 al, -22			; ffffffeaH
  001c5	88 45 fb	 mov	 BYTE PTR __k$[ebp+27], al
  001c8	e9 9d 00 00 00	 jmp	 $LN1@LoadInt_e
$LN69@LoadInt_e:
  001cd	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001d1	e9 94 00 00 00	 jmp	 $LN1@LoadInt_e
$LN70@LoadInt_e:
  001d6	88 4d fa	 mov	 BYTE PTR __k$[ebp+26], cl
  001d9	e9 8c 00 00 00	 jmp	 $LN1@LoadInt_e
$LN71@LoadInt_e:
  001de	88 5d f9	 mov	 BYTE PTR __k$[ebp+25], bl
  001e1	e9 84 00 00 00	 jmp	 $LN1@LoadInt_e
$LN72@LoadInt_e:
  001e6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ea	eb 7e		 jmp	 SHORT $LN1@LoadInt_e
$LN74@LoadInt_e:
  001ec	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001ef	eb 79		 jmp	 SHORT $LN1@LoadInt_e
$LN75@LoadInt_e:
  001f1	88 5d f5	 mov	 BYTE PTR __k$[ebp+21], bl
  001f4	eb 74		 jmp	 SHORT $LN1@LoadInt_e
$LN76@LoadInt_e:
  001f6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001fa	eb 6e		 jmp	 SHORT $LN1@LoadInt_e
$LN77@LoadInt_e:
  001fc	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00200	eb 68		 jmp	 SHORT $LN1@LoadInt_e
$LN78@LoadInt_e:
  00202	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  00205	eb 63		 jmp	 SHORT $LN1@LoadInt_e
$LN79@LoadInt_e:
  00207	88 5d f1	 mov	 BYTE PTR __k$[ebp+17], bl
  0020a	eb 5e		 jmp	 SHORT $LN1@LoadInt_e
$LN80@LoadInt_e:
  0020c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00210	eb 58		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  00212	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00216	eb 52		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  00218	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  0021b	eb 4d		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  0021d	88 5d ed	 mov	 BYTE PTR __k$[ebp+13], bl
  00220	eb 48		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  00222	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00226	eb 42		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  00228	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0022c	eb 3c		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  0022e	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00231	eb 37		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  00233	88 5d e9	 mov	 BYTE PTR __k$[ebp+9], bl
  00236	eb 32		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  00238	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0023c	eb 2c		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  0023e	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00242	eb 26		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  00244	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00247	eb 21		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  00249	88 5d e5	 mov	 BYTE PTR __k$[ebp+5], bl
  0024c	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  0024e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00252	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  00254	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00258	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  0025a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0025e	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  00260	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00264	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  00266	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  0026a	6a 05		 push	 5
  0026c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0026f	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+23], 0
  00273	5a		 pop	 edx
$LL104@LoadInt_e:
  00274	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0027a	83 c0 04	 add	 eax, 4
  0027d	4a		 dec	 edx
  0027e	75 f4		 jne	 SHORT $LL104@LoadInt_e
  00280	6a 14		 push	 20			; 00000014H
  00282	58		 pop	 eax
$LL101@LoadInt_e:
  00283	8b c8		 mov	 ecx, eax
  00285	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0028b	79 05		 jns	 SHORT $LN111@LoadInt_e
  0028d	49		 dec	 ecx
  0028e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00291	41		 inc	 ecx
$LN111@LoadInt_e:
  00292	b2 ed		 mov	 dl, -19			; ffffffedH
  00294	2a d1		 sub	 dl, cl
  00296	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  0029a	40		 inc	 eax
  0029b	83 f8 17	 cmp	 eax, 23			; 00000017H
  0029e	7c e3		 jl	 SHORT $LL101@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  002a0	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  002a3	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  002a6	50		 push	 eax
  002a7	8b ce		 mov	 ecx, esi
  002a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  002af	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b2	5e		 pop	 esi
  002b3	33 cd		 xor	 ecx, ebp
  002b5	5b		 pop	 ebx
  002b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002bb	c9		 leave
  002bc	c2 08 00	 ret	 8
??$LoadInt_e@$0BI@@ioINILoader@@QAEHAAY0BI@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<24>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BG@@ioINILoader@@QAEHAAY0BG@$$CBDH@Z ; ioINILoader::LoadInt_e<22>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BG@@ioINILoader@@QAEHAAY0BG@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -32						; size = 22
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BG@@ioINILoader@@QAEHAAY0BG@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<22>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 15 02 00
	00		 je	 $LN96@LoadInt_e@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 fe 01 00
	00		 je	 $LN95@LoadInt_e@2
  00032	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00035	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 e7 01 00
	00		 je	 $LN94@LoadInt_e@2
  00043	b1 eb		 mov	 cl, -21			; ffffffebH
  00045	32 d1		 xor	 dl, cl
  00047	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 cf 01 00
	00		 je	 $LN93@LoadInt_e@2
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 b7 01 00
	00		 je	 $LN92@LoadInt_e@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 a0 01 00
	00		 je	 $LN91@LoadInt_e@2
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 8a 01 00
	00		 je	 $LN90@LoadInt_e@2
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 75 01 00
	00		 je	 $LN89@LoadInt_e@2
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 5f 01 00
	00		 je	 $LN88@LoadInt_e@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 48 01 00
	00		 je	 $LN87@LoadInt_e@2
  000ba	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bd	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	0f 84 32 01 00
	00		 je	 $LN86@LoadInt_e@2
  000cb	32 d1		 xor	 dl, cl
  000cd	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 1d 01 00
	00		 je	 $LN85@LoadInt_e@2
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 07 01 00
	00		 je	 $LN84@LoadInt_e@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 f0 00 00
	00		 je	 $LN83@LoadInt_e@2
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 da 00 00
	00		 je	 $LN82@LoadInt_e@2
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 c5 00 00
	00		 je	 $LN81@LoadInt_e@2
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 af 00 00
	00		 je	 $LN80@LoadInt_e@2
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 98 00 00
	00		 je	 $LN79@LoadInt_e@2
  0013e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00141	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00147	84 d2		 test	 dl, dl
  00149	0f 84 82 00 00
	00		 je	 $LN78@LoadInt_e@2
  0014f	32 d1		 xor	 dl, cl
  00151	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	74 71		 je	 SHORT $LN77@LoadInt_e@2
  0015b	32 d3		 xor	 dl, bl
  0015d	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00160	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00163	84 d2		 test	 dl, dl
  00165	74 5f		 je	 SHORT $LN76@LoadInt_e@2
  00167	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016a	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0016e	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00171	0f 84 c3 00 00
	00		 je	 $LN1@LoadInt_e@2
  00177	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0017a	84 d2		 test	 dl, dl
  0017c	74 43		 je	 SHORT $LN74@LoadInt_e@2
  0017e	32 d1		 xor	 dl, cl
  00180	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00183	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00186	84 d2		 test	 dl, dl
  00188	74 32		 je	 SHORT $LN73@LoadInt_e@2
  0018a	32 d3		 xor	 dl, bl
  0018c	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  0018f	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  00192	84 d2		 test	 dl, dl
  00194	74 20		 je	 SHORT $LN72@LoadInt_e@2
  00196	8a 40 19	 mov	 al, BYTE PTR [eax+25]
  00199	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0019c	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  0019f	84 c0		 test	 al, al
  001a1	74 0a		 je	 SHORT $LN71@LoadInt_e@2
  001a3	34 ec		 xor	 al, -20			; ffffffecH
  001a5	88 45 f9	 mov	 BYTE PTR __k$[ebp+25], al
  001a8	e9 8d 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN71@LoadInt_e@2:
  001ad	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+25], -20 ; ffffffecH
  001b1	e9 84 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN72@LoadInt_e@2:
  001b6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ba	eb 7e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN73@LoadInt_e@2:
  001bc	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001bf	eb 79		 jmp	 SHORT $LN1@LoadInt_e@2
$LN74@LoadInt_e@2:
  001c1	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001c4	eb 74		 jmp	 SHORT $LN1@LoadInt_e@2
$LN76@LoadInt_e@2:
  001c6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001ca	eb 6e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN77@LoadInt_e@2:
  001cc	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001cf	eb 69		 jmp	 SHORT $LN1@LoadInt_e@2
$LN78@LoadInt_e@2:
  001d1	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  001d4	eb 64		 jmp	 SHORT $LN1@LoadInt_e@2
$LN79@LoadInt_e@2:
  001d6	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  001da	eb 5e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN80@LoadInt_e@2:
  001dc	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001e0	eb 58		 jmp	 SHORT $LN1@LoadInt_e@2
$LN81@LoadInt_e@2:
  001e2	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001e5	eb 53		 jmp	 SHORT $LN1@LoadInt_e@2
$LN82@LoadInt_e@2:
  001e7	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  001ea	eb 4e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN83@LoadInt_e@2:
  001ec	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  001f0	eb 48		 jmp	 SHORT $LN1@LoadInt_e@2
$LN84@LoadInt_e@2:
  001f2	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001f6	eb 42		 jmp	 SHORT $LN1@LoadInt_e@2
$LN85@LoadInt_e@2:
  001f8	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  001fb	eb 3d		 jmp	 SHORT $LN1@LoadInt_e@2
$LN86@LoadInt_e@2:
  001fd	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00200	eb 38		 jmp	 SHORT $LN1@LoadInt_e@2
$LN87@LoadInt_e@2:
  00202	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00206	eb 32		 jmp	 SHORT $LN1@LoadInt_e@2
$LN88@LoadInt_e@2:
  00208	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0020c	eb 2c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN89@LoadInt_e@2:
  0020e	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00211	eb 27		 jmp	 SHORT $LN1@LoadInt_e@2
$LN90@LoadInt_e@2:
  00213	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00216	eb 22		 jmp	 SHORT $LN1@LoadInt_e@2
$LN91@LoadInt_e@2:
  00218	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0021c	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN92@LoadInt_e@2:
  0021e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00222	eb 16		 jmp	 SHORT $LN1@LoadInt_e@2
$LN93@LoadInt_e@2:
  00224	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00228	eb 10		 jmp	 SHORT $LN1@LoadInt_e@2
$LN94@LoadInt_e@2:
  0022a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0022e	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN95@LoadInt_e@2:
  00230	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00234	eb 04		 jmp	 SHORT $LN1@LoadInt_e@2
$LN96@LoadInt_e@2:
  00236	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@2:
  0023a	6a 05		 push	 5
  0023c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0023f	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+21], 0
  00243	5a		 pop	 edx
$LL104@LoadInt_e@2:
  00244	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0024a	83 c0 04	 add	 eax, 4
  0024d	4a		 dec	 edx
  0024e	75 f4		 jne	 SHORT $LL104@LoadInt_e@2

; 120  : 		return LoadInt(_k, i);

  00250	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00253	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00257	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0025a	50		 push	 eax
  0025b	8b ce		 mov	 ecx, esi
  0025d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00263	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00266	5e		 pop	 esi
  00267	33 cd		 xor	 ecx, ebp
  00269	5b		 pop	 ebx
  0026a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0026f	c9		 leave
  00270	c2 08 00	 ret	 8
??$LoadInt_e@$0BG@@ioINILoader@@QAEHAAY0BG@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<22>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BF@@ioINILoader@@QAEXAAY0BF@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<21>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BF@@ioINILoader@@QAEXAAY0BF@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -36					; size = 4
__k$ = -32						; size = 21
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BF@@ioINILoader@@QAEXAAY0BF@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<21>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d dc	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 f7 01 00
	00		 je	 $LN96@LoadString@3
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 e0 01 00
	00		 je	 $LN95@LoadString@3
  0003a	b1 ec		 mov	 cl, -20			; ffffffecH
  0003c	32 d1		 xor	 dl, cl
  0003e	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00041	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00044	84 d2		 test	 dl, dl
  00046	0f 84 c8 01 00
	00		 je	 $LN94@LoadString@3
  0004c	b3 eb		 mov	 bl, -21			; ffffffebH
  0004e	32 d3		 xor	 dl, bl
  00050	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  00053	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00056	84 d2		 test	 dl, dl
  00058	0f 84 b0 01 00
	00		 je	 $LN93@LoadString@3
  0005e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00061	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 99 01 00
	00		 je	 $LN92@LoadString@3
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 83 01 00
	00		 je	 $LN91@LoadString@3
  00080	32 d1		 xor	 dl, cl
  00082	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  00085	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00088	84 d2		 test	 dl, dl
  0008a	0f 84 6e 01 00
	00		 je	 $LN90@LoadString@3
  00090	32 d3		 xor	 dl, bl
  00092	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  00095	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00098	84 d2		 test	 dl, dl
  0009a	0f 84 58 01 00
	00		 je	 $LN89@LoadString@3
  000a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a3	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 41 01 00
	00		 je	 $LN88@LoadString@3
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 2b 01 00
	00		 je	 $LN87@LoadString@3
  000c2	32 d1		 xor	 dl, cl
  000c4	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 16 01 00
	00		 je	 $LN86@LoadString@3
  000d2	32 d3		 xor	 dl, bl
  000d4	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 00 01 00
	00		 je	 $LN85@LoadString@3
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 e9 00 00
	00		 je	 $LN84@LoadString@3
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 d3 00 00
	00		 je	 $LN83@LoadString@3
  00104	32 d1		 xor	 dl, cl
  00106	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 be 00 00
	00		 je	 $LN82@LoadString@3
  00114	32 d3		 xor	 dl, bl
  00116	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00119	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011c	84 d2		 test	 dl, dl
  0011e	0f 84 a8 00 00
	00		 je	 $LN81@LoadString@3
  00124	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00127	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	0f 84 91 00 00
	00		 je	 $LN80@LoadString@3
  00135	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00138	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  0013b	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013e	84 d2		 test	 dl, dl
  00140	74 7f		 je	 SHORT $LN79@LoadString@3
  00142	32 d1		 xor	 dl, cl
  00144	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00147	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0014a	84 d2		 test	 dl, dl
  0014c	74 6e		 je	 SHORT $LN78@LoadString@3
  0014e	32 d3		 xor	 dl, bl
  00150	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	74 5c		 je	 SHORT $LN77@LoadString@3
  0015a	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0015d	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	0f 84 ba 00 00
	00		 je	 $LN111@LoadString@3
  0016a	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0016d	84 d2		 test	 dl, dl
  0016f	74 40		 je	 SHORT $LN75@LoadString@3
  00171	32 d1		 xor	 dl, cl
  00173	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00176	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00179	84 d2		 test	 dl, dl
  0017b	74 2f		 je	 SHORT $LN74@LoadString@3
  0017d	32 d3		 xor	 dl, bl
  0017f	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00182	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00185	84 d2		 test	 dl, dl
  00187	74 1d		 je	 SHORT $LN73@LoadString@3
  00189	8a 40 18	 mov	 al, BYTE PTR [eax+24]
  0018c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0018f	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  00192	84 c0		 test	 al, al
  00194	74 0a		 je	 SHORT $LN72@LoadString@3
  00196	34 ed		 xor	 al, -19			; ffffffedH
  00198	88 45 f8	 mov	 BYTE PTR __k$[ebp+24], al
  0019b	e9 84 00 00 00	 jmp	 $LN111@LoadString@3
$LN72@LoadString@3:
  001a0	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001a4	eb 7e		 jmp	 SHORT $LN111@LoadString@3
$LN73@LoadString@3:
  001a6	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  001aa	eb 78		 jmp	 SHORT $LN111@LoadString@3
$LN74@LoadString@3:
  001ac	88 5d f6	 mov	 BYTE PTR __k$[ebp+22], bl
  001af	eb 73		 jmp	 SHORT $LN111@LoadString@3
$LN75@LoadString@3:
  001b1	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001b4	eb 6e		 jmp	 SHORT $LN111@LoadString@3
$LN77@LoadString@3:
  001b6	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  001ba	eb 68		 jmp	 SHORT $LN111@LoadString@3
$LN78@LoadString@3:
  001bc	88 5d f2	 mov	 BYTE PTR __k$[ebp+18], bl
  001bf	eb 63		 jmp	 SHORT $LN111@LoadString@3
$LN79@LoadString@3:
  001c1	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001c4	eb 5e		 jmp	 SHORT $LN111@LoadString@3
$LN80@LoadString@3:
  001c6	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001ca	eb 58		 jmp	 SHORT $LN111@LoadString@3
$LN81@LoadString@3:
  001cc	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001d0	eb 52		 jmp	 SHORT $LN111@LoadString@3
$LN82@LoadString@3:
  001d2	88 5d ee	 mov	 BYTE PTR __k$[ebp+14], bl
  001d5	eb 4d		 jmp	 SHORT $LN111@LoadString@3
$LN83@LoadString@3:
  001d7	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  001da	eb 48		 jmp	 SHORT $LN111@LoadString@3
$LN84@LoadString@3:
  001dc	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001e0	eb 42		 jmp	 SHORT $LN111@LoadString@3
$LN85@LoadString@3:
  001e2	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001e6	eb 3c		 jmp	 SHORT $LN111@LoadString@3
$LN86@LoadString@3:
  001e8	88 5d ea	 mov	 BYTE PTR __k$[ebp+10], bl
  001eb	eb 37		 jmp	 SHORT $LN111@LoadString@3
$LN87@LoadString@3:
  001ed	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  001f0	eb 32		 jmp	 SHORT $LN111@LoadString@3
$LN88@LoadString@3:
  001f2	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001f6	eb 2c		 jmp	 SHORT $LN111@LoadString@3
$LN89@LoadString@3:
  001f8	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001fc	eb 26		 jmp	 SHORT $LN111@LoadString@3
$LN90@LoadString@3:
  001fe	88 5d e6	 mov	 BYTE PTR __k$[ebp+6], bl
  00201	eb 21		 jmp	 SHORT $LN111@LoadString@3
$LN91@LoadString@3:
  00203	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  00206	eb 1c		 jmp	 SHORT $LN111@LoadString@3
$LN92@LoadString@3:
  00208	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0020c	eb 16		 jmp	 SHORT $LN111@LoadString@3
$LN93@LoadString@3:
  0020e	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00212	eb 10		 jmp	 SHORT $LN111@LoadString@3
$LN94@LoadString@3:
  00214	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00218	eb 0a		 jmp	 SHORT $LN111@LoadString@3
$LN95@LoadString@3:
  0021a	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0021e	eb 04		 jmp	 SHORT $LN111@LoadString@3
$LN96@LoadString@3:
  00220	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@3:
  00224	6a 05		 push	 5
  00226	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00229	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+20], 0
  0022d	5a		 pop	 edx
$LL104@LoadString@3:
  0022e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00234	83 c0 04	 add	 eax, 4
  00237	4a		 dec	 edx
  00238	75 f4		 jne	 SHORT $LL104@LoadString@3

; 163  : 		LoadString(_k, d, b, i);

  0023a	ff 75 14	 push	 DWORD PTR _i$[ebp]
  0023d	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00240	57		 push	 edi
  00241	56		 push	 esi
  00242	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00245	50		 push	 eax
  00246	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  0024c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024f	5f		 pop	 edi
  00250	5e		 pop	 esi
  00251	33 cd		 xor	 ecx, ebp
  00253	5b		 pop	 ebx
  00254	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00259	c9		 leave
  0025a	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BF@@ioINILoader@@QAEXAAY0BF@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<21>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<20>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
__k$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<20>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 dd 01 00
	00		 je	 $LN96@LoadString@4
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 c6 01 00
	00		 je	 $LN95@LoadString@4
  0003a	b3 ec		 mov	 bl, -20			; ffffffecH
  0003c	32 d3		 xor	 dl, bl
  0003e	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00041	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00044	84 d2		 test	 dl, dl
  00046	0f 84 ae 01 00
	00		 je	 $LN94@LoadString@4
  0004c	b1 eb		 mov	 cl, -21			; ffffffebH
  0004e	32 d1		 xor	 dl, cl
  00050	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00053	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00056	84 d2		 test	 dl, dl
  00058	0f 84 96 01 00
	00		 je	 $LN93@LoadString@4
  0005e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00061	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 7f 01 00
	00		 je	 $LN92@LoadString@4
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 69 01 00
	00		 je	 $LN91@LoadString@4
  00080	32 d3		 xor	 dl, bl
  00082	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  00085	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00088	84 d2		 test	 dl, dl
  0008a	0f 84 54 01 00
	00		 je	 $LN90@LoadString@4
  00090	32 d1		 xor	 dl, cl
  00092	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  00095	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00098	84 d2		 test	 dl, dl
  0009a	0f 84 3e 01 00
	00		 je	 $LN89@LoadString@4
  000a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a3	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 27 01 00
	00		 je	 $LN88@LoadString@4
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 11 01 00
	00		 je	 $LN87@LoadString@4
  000c2	32 d3		 xor	 dl, bl
  000c4	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 fc 00 00
	00		 je	 $LN86@LoadString@4
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 e6 00 00
	00		 je	 $LN85@LoadString@4
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 cf 00 00
	00		 je	 $LN84@LoadString@4
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 b9 00 00
	00		 je	 $LN83@LoadString@4
  00104	32 d3		 xor	 dl, bl
  00106	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 a4 00 00
	00		 je	 $LN82@LoadString@4
  00114	32 d1		 xor	 dl, cl
  00116	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00119	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011c	84 d2		 test	 dl, dl
  0011e	0f 84 8e 00 00
	00		 je	 $LN81@LoadString@4
  00124	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00127	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	74 7b		 je	 SHORT $LN80@LoadString@4
  00131	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00134	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00137	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013a	84 d2		 test	 dl, dl
  0013c	74 69		 je	 SHORT $LN79@LoadString@4
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	74 58		 je	 SHORT $LN78@LoadString@4
  0014a	32 d1		 xor	 dl, cl
  0014c	80 78 13 00	 cmp	 BYTE PTR [eax+19], 0
  00150	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	0f 84 b1 00 00
	00		 je	 $LN111@LoadString@4
  00159	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0015c	84 d2		 test	 dl, dl
  0015e	74 3c		 je	 SHORT $LN76@LoadString@4
  00160	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00163	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  00166	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00169	84 d2		 test	 dl, dl
  0016b	74 2a		 je	 SHORT $LN75@LoadString@4
  0016d	32 d3		 xor	 dl, bl
  0016f	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  00172	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00175	84 d2		 test	 dl, dl
  00177	74 19		 je	 SHORT $LN74@LoadString@4
  00179	8a 40 17	 mov	 al, BYTE PTR [eax+23]
  0017c	32 d1		 xor	 dl, cl
  0017e	88 55 fa	 mov	 BYTE PTR __k$[ebp+22], dl
  00181	84 c0		 test	 al, al
  00183	74 07		 je	 SHORT $LN73@LoadString@4
  00185	34 ea		 xor	 al, -22			; ffffffeaH
  00187	88 45 fb	 mov	 BYTE PTR __k$[ebp+23], al
  0018a	eb 7e		 jmp	 SHORT $LN111@LoadString@4
$LN73@LoadString@4:
  0018c	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00190	eb 78		 jmp	 SHORT $LN111@LoadString@4
$LN74@LoadString@4:
  00192	88 4d fa	 mov	 BYTE PTR __k$[ebp+22], cl
  00195	eb 73		 jmp	 SHORT $LN111@LoadString@4
$LN75@LoadString@4:
  00197	88 5d f9	 mov	 BYTE PTR __k$[ebp+21], bl
  0019a	eb 6e		 jmp	 SHORT $LN111@LoadString@4
$LN76@LoadString@4:
  0019c	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001a0	eb 68		 jmp	 SHORT $LN111@LoadString@4
$LN78@LoadString@4:
  001a2	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  001a5	eb 63		 jmp	 SHORT $LN111@LoadString@4
$LN79@LoadString@4:
  001a7	88 5d f5	 mov	 BYTE PTR __k$[ebp+17], bl
  001aa	eb 5e		 jmp	 SHORT $LN111@LoadString@4
$LN80@LoadString@4:
  001ac	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001b0	eb 58		 jmp	 SHORT $LN111@LoadString@4
$LN81@LoadString@4:
  001b2	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001b6	eb 52		 jmp	 SHORT $LN111@LoadString@4
$LN82@LoadString@4:
  001b8	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  001bb	eb 4d		 jmp	 SHORT $LN111@LoadString@4
$LN83@LoadString@4:
  001bd	88 5d f1	 mov	 BYTE PTR __k$[ebp+13], bl
  001c0	eb 48		 jmp	 SHORT $LN111@LoadString@4
$LN84@LoadString@4:
  001c2	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001c6	eb 42		 jmp	 SHORT $LN111@LoadString@4
$LN85@LoadString@4:
  001c8	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001cc	eb 3c		 jmp	 SHORT $LN111@LoadString@4
$LN86@LoadString@4:
  001ce	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001d1	eb 37		 jmp	 SHORT $LN111@LoadString@4
$LN87@LoadString@4:
  001d3	88 5d ed	 mov	 BYTE PTR __k$[ebp+9], bl
  001d6	eb 32		 jmp	 SHORT $LN111@LoadString@4
$LN88@LoadString@4:
  001d8	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001dc	eb 2c		 jmp	 SHORT $LN111@LoadString@4
$LN89@LoadString@4:
  001de	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001e2	eb 26		 jmp	 SHORT $LN111@LoadString@4
$LN90@LoadString@4:
  001e4	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001e7	eb 21		 jmp	 SHORT $LN111@LoadString@4
$LN91@LoadString@4:
  001e9	88 5d e9	 mov	 BYTE PTR __k$[ebp+5], bl
  001ec	eb 1c		 jmp	 SHORT $LN111@LoadString@4
$LN92@LoadString@4:
  001ee	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001f2	eb 16		 jmp	 SHORT $LN111@LoadString@4
$LN93@LoadString@4:
  001f4	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001f8	eb 10		 jmp	 SHORT $LN111@LoadString@4
$LN94@LoadString@4:
  001fa	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001fe	eb 0a		 jmp	 SHORT $LN111@LoadString@4
$LN95@LoadString@4:
  00200	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00204	eb 04		 jmp	 SHORT $LN111@LoadString@4
$LN96@LoadString@4:
  00206	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@4:
  0020a	6a 04		 push	 4
  0020c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0020f	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+19], 0
  00213	5a		 pop	 edx
$LL104@LoadString@4:
  00214	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0021a	83 c0 04	 add	 eax, 4
  0021d	4a		 dec	 edx
  0021e	75 f4		 jne	 SHORT $LL104@LoadString@4
  00220	6a 10		 push	 16			; 00000010H
  00222	58		 pop	 eax
$LL101@LoadString@4:
  00223	8b c8		 mov	 ecx, eax
  00225	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0022b	79 05		 jns	 SHORT $LN112@LoadString@4
  0022d	49		 dec	 ecx
  0022e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00231	41		 inc	 ecx
$LN112@LoadString@4:
  00232	b2 ed		 mov	 dl, -19			; ffffffedH
  00234	2a d1		 sub	 dl, cl
  00236	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  0023a	40		 inc	 eax
  0023b	83 f8 13	 cmp	 eax, 19			; 00000013H
  0023e	7c e3		 jl	 SHORT $LL101@LoadString@4

; 163  : 		LoadString(_k, d, b, i);

  00240	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00243	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00246	57		 push	 edi
  00247	56		 push	 esi
  00248	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0024b	50		 push	 eax
  0024c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00252	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00255	5f		 pop	 edi
  00256	5e		 pop	 esi
  00257	33 cd		 xor	 ecx, ebp
  00259	5b		 pop	 ebx
  0025a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025f	c9		 leave
  00260	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<20>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BJ@@ioINILoader@@QAEMAAY0BJ@$$CBDM@Z ; ioINILoader::LoadFloat_e<25>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BJ@@ioINILoader@@QAEMAAY0BJ@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -36						; size = 25
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BJ@@ioINILoader@@QAEMAAY0BJ@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<25>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 5f 02 00
	00		 je	 $LN96@LoadFloat_
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 48 02 00
	00		 je	 $LN95@LoadFloat_
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 30 02 00
	00		 je	 $LN94@LoadFloat_
  00044	b3 eb		 mov	 bl, -21			; ffffffebH
  00046	32 d3		 xor	 dl, bl
  00048	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 18 02 00
	00		 je	 $LN93@LoadFloat_
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 01 02 00
	00		 je	 $LN92@LoadFloat_
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 eb 01 00
	00		 je	 $LN91@LoadFloat_
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 d6 01 00
	00		 je	 $LN90@LoadFloat_
  00088	32 d3		 xor	 dl, bl
  0008a	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 c0 01 00
	00		 je	 $LN89@LoadFloat_
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 a9 01 00
	00		 je	 $LN88@LoadFloat_
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 93 01 00
	00		 je	 $LN87@LoadFloat_
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 7e 01 00
	00		 je	 $LN86@LoadFloat_
  000ca	32 d3		 xor	 dl, bl
  000cc	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 68 01 00
	00		 je	 $LN85@LoadFloat_
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 51 01 00
	00		 je	 $LN84@LoadFloat_
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 3b 01 00
	00		 je	 $LN83@LoadFloat_
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 26 01 00
	00		 je	 $LN82@LoadFloat_
  0010c	32 d3		 xor	 dl, bl
  0010e	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 10 01 00
	00		 je	 $LN81@LoadFloat_
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 f9 00 00
	00		 je	 $LN80@LoadFloat_
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 e3 00 00
	00		 je	 $LN79@LoadFloat_
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 ce 00 00
	00		 je	 $LN78@LoadFloat_
  0014e	32 d3		 xor	 dl, bl
  00150	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 b8 00 00
	00		 je	 $LN77@LoadFloat_
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 a1 00 00
	00		 je	 $LN76@LoadFloat_
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 8b 00 00
	00		 je	 $LN75@LoadFloat_
  00180	32 d1		 xor	 dl, cl
  00182	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	74 7a		 je	 SHORT $LN74@LoadFloat_
  0018c	32 d3		 xor	 dl, bl
  0018e	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00191	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00194	84 d2		 test	 dl, dl
  00196	74 68		 je	 SHORT $LN73@LoadFloat_
  00198	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0019b	80 78 18 00	 cmp	 BYTE PTR [eax+24], 0
  0019f	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001a2	0f 84 dc 00 00
	00		 je	 $LN1@LoadFloat_
  001a8	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ab	84 d2		 test	 dl, dl
  001ad	74 49		 je	 SHORT $LN71@LoadFloat_
  001af	32 d1		 xor	 dl, cl
  001b1	88 55 f5	 mov	 BYTE PTR __k$[ebp+25], dl
  001b4	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001b7	84 d2		 test	 dl, dl
  001b9	74 35		 je	 SHORT $LN70@LoadFloat_
  001bb	32 d3		 xor	 dl, bl
  001bd	88 55 f6	 mov	 BYTE PTR __k$[ebp+26], dl
  001c0	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001c3	84 d2		 test	 dl, dl
  001c5	74 20		 je	 SHORT $LN69@LoadFloat_
  001c7	8a 40 1c	 mov	 al, BYTE PTR [eax+28]
  001ca	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001cd	88 55 f7	 mov	 BYTE PTR __k$[ebp+27], dl
  001d0	84 c0		 test	 al, al
  001d2	74 0a		 je	 SHORT $LN68@LoadFloat_
  001d4	34 ed		 xor	 al, -19			; ffffffedH
  001d6	88 45 f8	 mov	 BYTE PTR __k$[ebp+28], al
  001d9	e9 a6 00 00 00	 jmp	 $LN1@LoadFloat_
$LN68@LoadFloat_:
  001de	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  001e2	e9 9d 00 00 00	 jmp	 $LN1@LoadFloat_
$LN69@LoadFloat_:
  001e7	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001eb	e9 94 00 00 00	 jmp	 $LN1@LoadFloat_
$LN70@LoadFloat_:
  001f0	88 5d f6	 mov	 BYTE PTR __k$[ebp+26], bl
  001f3	e9 8c 00 00 00	 jmp	 $LN1@LoadFloat_
$LN71@LoadFloat_:
  001f8	88 4d f5	 mov	 BYTE PTR __k$[ebp+25], cl
  001fb	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_
$LN73@LoadFloat_:
  00200	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00204	eb 7e		 jmp	 SHORT $LN1@LoadFloat_
$LN74@LoadFloat_:
  00206	88 5d f2	 mov	 BYTE PTR __k$[ebp+22], bl
  00209	eb 79		 jmp	 SHORT $LN1@LoadFloat_
$LN75@LoadFloat_:
  0020b	88 4d f1	 mov	 BYTE PTR __k$[ebp+21], cl
  0020e	eb 74		 jmp	 SHORT $LN1@LoadFloat_
$LN76@LoadFloat_:
  00210	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00214	eb 6e		 jmp	 SHORT $LN1@LoadFloat_
$LN77@LoadFloat_:
  00216	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0021a	eb 68		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  0021c	88 5d ee	 mov	 BYTE PTR __k$[ebp+18], bl
  0021f	eb 63		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  00221	88 4d ed	 mov	 BYTE PTR __k$[ebp+17], cl
  00224	eb 5e		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  00226	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0022a	eb 58		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  0022c	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00230	eb 52		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  00232	88 5d ea	 mov	 BYTE PTR __k$[ebp+14], bl
  00235	eb 4d		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  00237	88 4d e9	 mov	 BYTE PTR __k$[ebp+13], cl
  0023a	eb 48		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  0023c	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00240	eb 42		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  00242	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00246	eb 3c		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  00248	88 5d e6	 mov	 BYTE PTR __k$[ebp+10], bl
  0024b	eb 37		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  0024d	88 4d e5	 mov	 BYTE PTR __k$[ebp+9], cl
  00250	eb 32		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  00252	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00256	eb 2c		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  00258	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0025c	eb 26		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  0025e	88 5d e2	 mov	 BYTE PTR __k$[ebp+6], bl
  00261	eb 21		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  00263	88 4d e1	 mov	 BYTE PTR __k$[ebp+5], cl
  00266	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  00268	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0026c	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  0026e	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00272	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  00274	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00278	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  0027a	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0027e	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  00280	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  00284	6a 06		 push	 6
  00286	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  00289	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+24], 0
  0028d	5a		 pop	 edx
$LL104@LoadFloat_:
  0028e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00294	83 c0 04	 add	 eax, 4
  00297	4a		 dec	 edx
  00298	75 f4		 jne	 SHORT $LL104@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  0029a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0029f	51		 push	 ecx
  002a0	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a8	50		 push	 eax
  002a9	8b ce		 mov	 ecx, esi
  002ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  002b1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b4	5e		 pop	 esi
  002b5	33 cd		 xor	 ecx, ebp
  002b7	5b		 pop	 ebx
  002b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002bd	c9		 leave
  002be	c2 08 00	 ret	 8
??$LoadFloat_e@$0BJ@@ioINILoader@@QAEMAAY0BJ@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<25>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BG@@ioINILoader@@QAEMAAY0BG@$$CBDM@Z ; ioINILoader::LoadFloat_e<22>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BG@@ioINILoader@@QAEMAAY0BG@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -32						; size = 22
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BG@@ioINILoader@@QAEMAAY0BG@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<22>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 15 02 00
	00		 je	 $LN96@LoadFloat_@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 fe 01 00
	00		 je	 $LN95@LoadFloat_@2
  00032	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00035	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 e7 01 00
	00		 je	 $LN94@LoadFloat_@2
  00043	b1 eb		 mov	 cl, -21			; ffffffebH
  00045	32 d1		 xor	 dl, cl
  00047	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 cf 01 00
	00		 je	 $LN93@LoadFloat_@2
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 b7 01 00
	00		 je	 $LN92@LoadFloat_@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 a0 01 00
	00		 je	 $LN91@LoadFloat_@2
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 8a 01 00
	00		 je	 $LN90@LoadFloat_@2
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 75 01 00
	00		 je	 $LN89@LoadFloat_@2
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 5f 01 00
	00		 je	 $LN88@LoadFloat_@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 48 01 00
	00		 je	 $LN87@LoadFloat_@2
  000ba	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bd	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	0f 84 32 01 00
	00		 je	 $LN86@LoadFloat_@2
  000cb	32 d1		 xor	 dl, cl
  000cd	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 1d 01 00
	00		 je	 $LN85@LoadFloat_@2
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 07 01 00
	00		 je	 $LN84@LoadFloat_@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 f0 00 00
	00		 je	 $LN83@LoadFloat_@2
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 da 00 00
	00		 je	 $LN82@LoadFloat_@2
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 c5 00 00
	00		 je	 $LN81@LoadFloat_@2
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 af 00 00
	00		 je	 $LN80@LoadFloat_@2
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 98 00 00
	00		 je	 $LN79@LoadFloat_@2
  0013e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00141	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00147	84 d2		 test	 dl, dl
  00149	0f 84 82 00 00
	00		 je	 $LN78@LoadFloat_@2
  0014f	32 d1		 xor	 dl, cl
  00151	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	74 71		 je	 SHORT $LN77@LoadFloat_@2
  0015b	32 d3		 xor	 dl, bl
  0015d	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00160	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00163	84 d2		 test	 dl, dl
  00165	74 5f		 je	 SHORT $LN76@LoadFloat_@2
  00167	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016a	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0016e	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00171	0f 84 c3 00 00
	00		 je	 $LN1@LoadFloat_@2
  00177	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0017a	84 d2		 test	 dl, dl
  0017c	74 43		 je	 SHORT $LN74@LoadFloat_@2
  0017e	32 d1		 xor	 dl, cl
  00180	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00183	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00186	84 d2		 test	 dl, dl
  00188	74 32		 je	 SHORT $LN73@LoadFloat_@2
  0018a	32 d3		 xor	 dl, bl
  0018c	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  0018f	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  00192	84 d2		 test	 dl, dl
  00194	74 20		 je	 SHORT $LN72@LoadFloat_@2
  00196	8a 40 19	 mov	 al, BYTE PTR [eax+25]
  00199	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0019c	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  0019f	84 c0		 test	 al, al
  001a1	74 0a		 je	 SHORT $LN71@LoadFloat_@2
  001a3	34 ec		 xor	 al, -20			; ffffffecH
  001a5	88 45 f9	 mov	 BYTE PTR __k$[ebp+25], al
  001a8	e9 8d 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN71@LoadFloat_@2:
  001ad	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+25], -20 ; ffffffecH
  001b1	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN72@LoadFloat_@2:
  001b6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ba	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN73@LoadFloat_@2:
  001bc	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001bf	eb 79		 jmp	 SHORT $LN1@LoadFloat_@2
$LN74@LoadFloat_@2:
  001c1	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001c4	eb 74		 jmp	 SHORT $LN1@LoadFloat_@2
$LN76@LoadFloat_@2:
  001c6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001ca	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN77@LoadFloat_@2:
  001cc	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001cf	eb 69		 jmp	 SHORT $LN1@LoadFloat_@2
$LN78@LoadFloat_@2:
  001d1	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  001d4	eb 64		 jmp	 SHORT $LN1@LoadFloat_@2
$LN79@LoadFloat_@2:
  001d6	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  001da	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN80@LoadFloat_@2:
  001dc	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001e0	eb 58		 jmp	 SHORT $LN1@LoadFloat_@2
$LN81@LoadFloat_@2:
  001e2	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001e5	eb 53		 jmp	 SHORT $LN1@LoadFloat_@2
$LN82@LoadFloat_@2:
  001e7	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  001ea	eb 4e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN83@LoadFloat_@2:
  001ec	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  001f0	eb 48		 jmp	 SHORT $LN1@LoadFloat_@2
$LN84@LoadFloat_@2:
  001f2	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001f6	eb 42		 jmp	 SHORT $LN1@LoadFloat_@2
$LN85@LoadFloat_@2:
  001f8	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  001fb	eb 3d		 jmp	 SHORT $LN1@LoadFloat_@2
$LN86@LoadFloat_@2:
  001fd	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00200	eb 38		 jmp	 SHORT $LN1@LoadFloat_@2
$LN87@LoadFloat_@2:
  00202	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00206	eb 32		 jmp	 SHORT $LN1@LoadFloat_@2
$LN88@LoadFloat_@2:
  00208	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0020c	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN89@LoadFloat_@2:
  0020e	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00211	eb 27		 jmp	 SHORT $LN1@LoadFloat_@2
$LN90@LoadFloat_@2:
  00213	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00216	eb 22		 jmp	 SHORT $LN1@LoadFloat_@2
$LN91@LoadFloat_@2:
  00218	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0021c	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN92@LoadFloat_@2:
  0021e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00222	eb 16		 jmp	 SHORT $LN1@LoadFloat_@2
$LN93@LoadFloat_@2:
  00224	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00228	eb 10		 jmp	 SHORT $LN1@LoadFloat_@2
$LN94@LoadFloat_@2:
  0022a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0022e	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN95@LoadFloat_@2:
  00230	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00234	eb 04		 jmp	 SHORT $LN1@LoadFloat_@2
$LN96@LoadFloat_@2:
  00236	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@2:
  0023a	6a 05		 push	 5
  0023c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0023f	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+21], 0
  00243	5a		 pop	 edx
$LL104@LoadFloat_@2:
  00244	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0024a	83 c0 04	 add	 eax, 4
  0024d	4a		 dec	 edx
  0024e	75 f4		 jne	 SHORT $LL104@LoadFloat_@2

; 137  : 		return LoadFloat(_k, f);

  00250	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00255	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00259	51		 push	 ecx
  0025a	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0025d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00262	50		 push	 eax
  00263	8b ce		 mov	 ecx, esi
  00265	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0026b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0026e	5e		 pop	 esi
  0026f	33 cd		 xor	 ecx, ebp
  00271	5b		 pop	 ebx
  00272	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00277	c9		 leave
  00278	c2 08 00	 ret	 8
??$LoadFloat_e@$0BG@@ioINILoader@@QAEMAAY0BG@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<22>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BK@@ioINILoader@@QAEMAAY0BK@$$CBDM@Z ; ioINILoader::LoadFloat_e<26>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BK@@ioINILoader@@QAEMAAY0BK@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -36						; size = 26
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BK@@ioINILoader@@QAEMAAY0BK@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<26>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 79 02 00
	00		 je	 $LN96@LoadFloat_@3
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 62 02 00
	00		 je	 $LN95@LoadFloat_@3
  00032	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00035	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 4b 02 00
	00		 je	 $LN94@LoadFloat_@3
  00043	b1 eb		 mov	 cl, -21			; ffffffebH
  00045	32 d1		 xor	 dl, cl
  00047	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 33 02 00
	00		 je	 $LN93@LoadFloat_@3
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 1b 02 00
	00		 je	 $LN92@LoadFloat_@3
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 04 02 00
	00		 je	 $LN91@LoadFloat_@3
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 ee 01 00
	00		 je	 $LN90@LoadFloat_@3
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 d9 01 00
	00		 je	 $LN89@LoadFloat_@3
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 c3 01 00
	00		 je	 $LN88@LoadFloat_@3
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 ac 01 00
	00		 je	 $LN87@LoadFloat_@3
  000ba	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bd	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	0f 84 96 01 00
	00		 je	 $LN86@LoadFloat_@3
  000cb	32 d1		 xor	 dl, cl
  000cd	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 81 01 00
	00		 je	 $LN85@LoadFloat_@3
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 6b 01 00
	00		 je	 $LN84@LoadFloat_@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 54 01 00
	00		 je	 $LN83@LoadFloat_@3
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 3e 01 00
	00		 je	 $LN82@LoadFloat_@3
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 29 01 00
	00		 je	 $LN81@LoadFloat_@3
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 13 01 00
	00		 je	 $LN80@LoadFloat_@3
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 fc 00 00
	00		 je	 $LN79@LoadFloat_@3
  0013e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00141	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00147	84 d2		 test	 dl, dl
  00149	0f 84 e6 00 00
	00		 je	 $LN78@LoadFloat_@3
  0014f	32 d1		 xor	 dl, cl
  00151	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 d1 00 00
	00		 je	 $LN77@LoadFloat_@3
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 bb 00 00
	00		 je	 $LN76@LoadFloat_@3
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 a4 00 00
	00		 je	 $LN75@LoadFloat_@3
  00180	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00183	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  00186	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00189	84 d2		 test	 dl, dl
  0018b	0f 84 8e 00 00
	00		 je	 $LN74@LoadFloat_@3
  00191	32 d1		 xor	 dl, cl
  00193	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00196	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00199	84 d2		 test	 dl, dl
  0019b	74 7d		 je	 SHORT $LN73@LoadFloat_@3
  0019d	32 d3		 xor	 dl, bl
  0019f	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001a2	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a5	84 d2		 test	 dl, dl
  001a7	74 68		 je	 SHORT $LN72@LoadFloat_@3
  001a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001ac	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  001b0	88 55 f4	 mov	 BYTE PTR __k$[ebp+24], dl
  001b3	0f 84 e5 00 00
	00		 je	 $LN1@LoadFloat_@3
  001b9	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001bc	84 d2		 test	 dl, dl
  001be	74 49		 je	 SHORT $LN70@LoadFloat_@3
  001c0	32 d1		 xor	 dl, cl
  001c2	88 55 f6	 mov	 BYTE PTR __k$[ebp+26], dl
  001c5	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001c8	84 d2		 test	 dl, dl
  001ca	74 35		 je	 SHORT $LN69@LoadFloat_@3
  001cc	32 d3		 xor	 dl, bl
  001ce	88 55 f7	 mov	 BYTE PTR __k$[ebp+27], dl
  001d1	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001d4	84 d2		 test	 dl, dl
  001d6	74 20		 je	 SHORT $LN68@LoadFloat_@3
  001d8	8a 40 1d	 mov	 al, BYTE PTR [eax+29]
  001db	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001de	88 55 f8	 mov	 BYTE PTR __k$[ebp+28], dl
  001e1	84 c0		 test	 al, al
  001e3	74 0a		 je	 SHORT $LN67@LoadFloat_@3
  001e5	34 ec		 xor	 al, -20			; ffffffecH
  001e7	88 45 f9	 mov	 BYTE PTR __k$[ebp+29], al
  001ea	e9 af 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN67@LoadFloat_@3:
  001ef	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+29], -20 ; ffffffecH
  001f3	e9 a6 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN68@LoadFloat_@3:
  001f8	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  001fc	e9 9d 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN69@LoadFloat_@3:
  00201	88 5d f7	 mov	 BYTE PTR __k$[ebp+27], bl
  00204	e9 95 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN70@LoadFloat_@3:
  00209	88 4d f6	 mov	 BYTE PTR __k$[ebp+26], cl
  0020c	e9 8d 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN72@LoadFloat_@3:
  00211	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  00215	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN73@LoadFloat_@3:
  0021a	88 5d f3	 mov	 BYTE PTR __k$[ebp+23], bl
  0021d	eb 7f		 jmp	 SHORT $LN1@LoadFloat_@3
$LN74@LoadFloat_@3:
  0021f	88 4d f2	 mov	 BYTE PTR __k$[ebp+22], cl
  00222	eb 7a		 jmp	 SHORT $LN1@LoadFloat_@3
$LN75@LoadFloat_@3:
  00224	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  00228	eb 74		 jmp	 SHORT $LN1@LoadFloat_@3
$LN76@LoadFloat_@3:
  0022a	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0022e	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN77@LoadFloat_@3:
  00230	88 5d ef	 mov	 BYTE PTR __k$[ebp+19], bl
  00233	eb 69		 jmp	 SHORT $LN1@LoadFloat_@3
$LN78@LoadFloat_@3:
  00235	88 4d ee	 mov	 BYTE PTR __k$[ebp+18], cl
  00238	eb 64		 jmp	 SHORT $LN1@LoadFloat_@3
$LN79@LoadFloat_@3:
  0023a	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0023e	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN80@LoadFloat_@3:
  00240	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00244	eb 58		 jmp	 SHORT $LN1@LoadFloat_@3
$LN81@LoadFloat_@3:
  00246	88 5d eb	 mov	 BYTE PTR __k$[ebp+15], bl
  00249	eb 53		 jmp	 SHORT $LN1@LoadFloat_@3
$LN82@LoadFloat_@3:
  0024b	88 4d ea	 mov	 BYTE PTR __k$[ebp+14], cl
  0024e	eb 4e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN83@LoadFloat_@3:
  00250	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00254	eb 48		 jmp	 SHORT $LN1@LoadFloat_@3
$LN84@LoadFloat_@3:
  00256	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0025a	eb 42		 jmp	 SHORT $LN1@LoadFloat_@3
$LN85@LoadFloat_@3:
  0025c	88 5d e7	 mov	 BYTE PTR __k$[ebp+11], bl
  0025f	eb 3d		 jmp	 SHORT $LN1@LoadFloat_@3
$LN86@LoadFloat_@3:
  00261	88 4d e6	 mov	 BYTE PTR __k$[ebp+10], cl
  00264	eb 38		 jmp	 SHORT $LN1@LoadFloat_@3
$LN87@LoadFloat_@3:
  00266	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0026a	eb 32		 jmp	 SHORT $LN1@LoadFloat_@3
$LN88@LoadFloat_@3:
  0026c	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00270	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN89@LoadFloat_@3:
  00272	88 5d e3	 mov	 BYTE PTR __k$[ebp+7], bl
  00275	eb 27		 jmp	 SHORT $LN1@LoadFloat_@3
$LN90@LoadFloat_@3:
  00277	88 4d e2	 mov	 BYTE PTR __k$[ebp+6], cl
  0027a	eb 22		 jmp	 SHORT $LN1@LoadFloat_@3
$LN91@LoadFloat_@3:
  0027c	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00280	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN92@LoadFloat_@3:
  00282	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00286	eb 16		 jmp	 SHORT $LN1@LoadFloat_@3
$LN93@LoadFloat_@3:
  00288	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0028c	eb 10		 jmp	 SHORT $LN1@LoadFloat_@3
$LN94@LoadFloat_@3:
  0028e	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00292	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@3
$LN95@LoadFloat_@3:
  00294	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00298	eb 04		 jmp	 SHORT $LN1@LoadFloat_@3
$LN96@LoadFloat_@3:
  0029a	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@3:
  0029e	6a 06		 push	 6
  002a0	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002a3	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+25], 0
  002a7	5a		 pop	 edx
$LL104@LoadFloat_@3:
  002a8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002ae	83 c0 04	 add	 eax, 4
  002b1	4a		 dec	 edx
  002b2	75 f4		 jne	 SHORT $LL104@LoadFloat_@3

; 137  : 		return LoadFloat(_k, f);

  002b4	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  002b9	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  002bd	51		 push	 ecx
  002be	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c6	50		 push	 eax
  002c7	8b ce		 mov	 ecx, esi
  002c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  002cf	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002d2	5e		 pop	 esi
  002d3	33 cd		 xor	 ecx, ebp
  002d5	5b		 pop	 ebx
  002d6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002db	c9		 leave
  002dc	c2 08 00	 ret	 8
??$LoadFloat_e@$0BK@@ioINILoader@@QAEMAAY0BK@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<26>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BJ@@ioINILoader@@QAEHAAY0BJ@$$CBDH@Z ; ioINILoader::LoadInt_e<25>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BJ@@ioINILoader@@QAEHAAY0BJ@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -36						; size = 25
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BJ@@ioINILoader@@QAEHAAY0BJ@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<25>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 5f 02 00
	00		 je	 $LN96@LoadInt_e@3
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 48 02 00
	00		 je	 $LN95@LoadInt_e@3
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 30 02 00
	00		 je	 $LN94@LoadInt_e@3
  00044	b3 eb		 mov	 bl, -21			; ffffffebH
  00046	32 d3		 xor	 dl, bl
  00048	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 18 02 00
	00		 je	 $LN93@LoadInt_e@3
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 01 02 00
	00		 je	 $LN92@LoadInt_e@3
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 eb 01 00
	00		 je	 $LN91@LoadInt_e@3
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 d6 01 00
	00		 je	 $LN90@LoadInt_e@3
  00088	32 d3		 xor	 dl, bl
  0008a	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 c0 01 00
	00		 je	 $LN89@LoadInt_e@3
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 a9 01 00
	00		 je	 $LN88@LoadInt_e@3
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 93 01 00
	00		 je	 $LN87@LoadInt_e@3
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 7e 01 00
	00		 je	 $LN86@LoadInt_e@3
  000ca	32 d3		 xor	 dl, bl
  000cc	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 68 01 00
	00		 je	 $LN85@LoadInt_e@3
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 51 01 00
	00		 je	 $LN84@LoadInt_e@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 3b 01 00
	00		 je	 $LN83@LoadInt_e@3
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 26 01 00
	00		 je	 $LN82@LoadInt_e@3
  0010c	32 d3		 xor	 dl, bl
  0010e	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 10 01 00
	00		 je	 $LN81@LoadInt_e@3
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 f9 00 00
	00		 je	 $LN80@LoadInt_e@3
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 e3 00 00
	00		 je	 $LN79@LoadInt_e@3
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 ce 00 00
	00		 je	 $LN78@LoadInt_e@3
  0014e	32 d3		 xor	 dl, bl
  00150	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 b8 00 00
	00		 je	 $LN77@LoadInt_e@3
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 a1 00 00
	00		 je	 $LN76@LoadInt_e@3
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 8b 00 00
	00		 je	 $LN75@LoadInt_e@3
  00180	32 d1		 xor	 dl, cl
  00182	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	74 7a		 je	 SHORT $LN74@LoadInt_e@3
  0018c	32 d3		 xor	 dl, bl
  0018e	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00191	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00194	84 d2		 test	 dl, dl
  00196	74 68		 je	 SHORT $LN73@LoadInt_e@3
  00198	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0019b	80 78 18 00	 cmp	 BYTE PTR [eax+24], 0
  0019f	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001a2	0f 84 dc 00 00
	00		 je	 $LN1@LoadInt_e@3
  001a8	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ab	84 d2		 test	 dl, dl
  001ad	74 49		 je	 SHORT $LN71@LoadInt_e@3
  001af	32 d1		 xor	 dl, cl
  001b1	88 55 f5	 mov	 BYTE PTR __k$[ebp+25], dl
  001b4	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001b7	84 d2		 test	 dl, dl
  001b9	74 35		 je	 SHORT $LN70@LoadInt_e@3
  001bb	32 d3		 xor	 dl, bl
  001bd	88 55 f6	 mov	 BYTE PTR __k$[ebp+26], dl
  001c0	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001c3	84 d2		 test	 dl, dl
  001c5	74 20		 je	 SHORT $LN69@LoadInt_e@3
  001c7	8a 40 1c	 mov	 al, BYTE PTR [eax+28]
  001ca	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001cd	88 55 f7	 mov	 BYTE PTR __k$[ebp+27], dl
  001d0	84 c0		 test	 al, al
  001d2	74 0a		 je	 SHORT $LN68@LoadInt_e@3
  001d4	34 ed		 xor	 al, -19			; ffffffedH
  001d6	88 45 f8	 mov	 BYTE PTR __k$[ebp+28], al
  001d9	e9 a6 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN68@LoadInt_e@3:
  001de	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  001e2	e9 9d 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN69@LoadInt_e@3:
  001e7	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001eb	e9 94 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN70@LoadInt_e@3:
  001f0	88 5d f6	 mov	 BYTE PTR __k$[ebp+26], bl
  001f3	e9 8c 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN71@LoadInt_e@3:
  001f8	88 4d f5	 mov	 BYTE PTR __k$[ebp+25], cl
  001fb	e9 84 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN73@LoadInt_e@3:
  00200	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00204	eb 7e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN74@LoadInt_e@3:
  00206	88 5d f2	 mov	 BYTE PTR __k$[ebp+22], bl
  00209	eb 79		 jmp	 SHORT $LN1@LoadInt_e@3
$LN75@LoadInt_e@3:
  0020b	88 4d f1	 mov	 BYTE PTR __k$[ebp+21], cl
  0020e	eb 74		 jmp	 SHORT $LN1@LoadInt_e@3
$LN76@LoadInt_e@3:
  00210	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00214	eb 6e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN77@LoadInt_e@3:
  00216	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0021a	eb 68		 jmp	 SHORT $LN1@LoadInt_e@3
$LN78@LoadInt_e@3:
  0021c	88 5d ee	 mov	 BYTE PTR __k$[ebp+18], bl
  0021f	eb 63		 jmp	 SHORT $LN1@LoadInt_e@3
$LN79@LoadInt_e@3:
  00221	88 4d ed	 mov	 BYTE PTR __k$[ebp+17], cl
  00224	eb 5e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN80@LoadInt_e@3:
  00226	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0022a	eb 58		 jmp	 SHORT $LN1@LoadInt_e@3
$LN81@LoadInt_e@3:
  0022c	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00230	eb 52		 jmp	 SHORT $LN1@LoadInt_e@3
$LN82@LoadInt_e@3:
  00232	88 5d ea	 mov	 BYTE PTR __k$[ebp+14], bl
  00235	eb 4d		 jmp	 SHORT $LN1@LoadInt_e@3
$LN83@LoadInt_e@3:
  00237	88 4d e9	 mov	 BYTE PTR __k$[ebp+13], cl
  0023a	eb 48		 jmp	 SHORT $LN1@LoadInt_e@3
$LN84@LoadInt_e@3:
  0023c	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00240	eb 42		 jmp	 SHORT $LN1@LoadInt_e@3
$LN85@LoadInt_e@3:
  00242	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00246	eb 3c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN86@LoadInt_e@3:
  00248	88 5d e6	 mov	 BYTE PTR __k$[ebp+10], bl
  0024b	eb 37		 jmp	 SHORT $LN1@LoadInt_e@3
$LN87@LoadInt_e@3:
  0024d	88 4d e5	 mov	 BYTE PTR __k$[ebp+9], cl
  00250	eb 32		 jmp	 SHORT $LN1@LoadInt_e@3
$LN88@LoadInt_e@3:
  00252	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00256	eb 2c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN89@LoadInt_e@3:
  00258	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0025c	eb 26		 jmp	 SHORT $LN1@LoadInt_e@3
$LN90@LoadInt_e@3:
  0025e	88 5d e2	 mov	 BYTE PTR __k$[ebp+6], bl
  00261	eb 21		 jmp	 SHORT $LN1@LoadInt_e@3
$LN91@LoadInt_e@3:
  00263	88 4d e1	 mov	 BYTE PTR __k$[ebp+5], cl
  00266	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN92@LoadInt_e@3:
  00268	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0026c	eb 16		 jmp	 SHORT $LN1@LoadInt_e@3
$LN93@LoadInt_e@3:
  0026e	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00272	eb 10		 jmp	 SHORT $LN1@LoadInt_e@3
$LN94@LoadInt_e@3:
  00274	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00278	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@3
$LN95@LoadInt_e@3:
  0027a	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0027e	eb 04		 jmp	 SHORT $LN1@LoadInt_e@3
$LN96@LoadInt_e@3:
  00280	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@3:
  00284	6a 06		 push	 6
  00286	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  00289	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+24], 0
  0028d	5a		 pop	 edx
$LL104@LoadInt_e@3:
  0028e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00294	83 c0 04	 add	 eax, 4
  00297	4a		 dec	 edx
  00298	75 f4		 jne	 SHORT $LL104@LoadInt_e@3

; 120  : 		return LoadInt(_k, i);

  0029a	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0029d	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002a0	50		 push	 eax
  002a1	8b ce		 mov	 ecx, esi
  002a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  002a9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ac	5e		 pop	 esi
  002ad	33 cd		 xor	 ecx, ebp
  002af	5b		 pop	 ebx
  002b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b5	c9		 leave
  002b6	c2 08 00	 ret	 8
??$LoadInt_e@$0BJ@@ioINILoader@@QAEHAAY0BJ@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<25>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z ; ioINILoader::LoadFloat_e<24>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<24>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 45 02 00
	00		 je	 $LN96@LoadFloat_@4
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 2e 02 00
	00		 je	 $LN95@LoadFloat_@4
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 16 02 00
	00		 je	 $LN94@LoadFloat_@4
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 fe 01 00
	00		 je	 $LN93@LoadFloat_@4
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 e7 01 00
	00		 je	 $LN92@LoadFloat_@4
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 d1 01 00
	00		 je	 $LN91@LoadFloat_@4
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 bc 01 00
	00		 je	 $LN90@LoadFloat_@4
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 a6 01 00
	00		 je	 $LN89@LoadFloat_@4
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 8f 01 00
	00		 je	 $LN88@LoadFloat_@4
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 79 01 00
	00		 je	 $LN87@LoadFloat_@4
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 64 01 00
	00		 je	 $LN86@LoadFloat_@4
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 4e 01 00
	00		 je	 $LN85@LoadFloat_@4
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 37 01 00
	00		 je	 $LN84@LoadFloat_@4
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 21 01 00
	00		 je	 $LN83@LoadFloat_@4
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 0c 01 00
	00		 je	 $LN82@LoadFloat_@4
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 f6 00 00
	00		 je	 $LN81@LoadFloat_@4
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 df 00 00
	00		 je	 $LN80@LoadFloat_@4
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 c9 00 00
	00		 je	 $LN79@LoadFloat_@4
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 b4 00 00
	00		 je	 $LN78@LoadFloat_@4
  0014e	32 d1		 xor	 dl, cl
  00150	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 9e 00 00
	00		 je	 $LN77@LoadFloat_@4
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 87 00 00
	00		 je	 $LN76@LoadFloat_@4
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	74 75		 je	 SHORT $LN75@LoadFloat_@4
  0017c	32 d3		 xor	 dl, bl
  0017e	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00181	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00184	84 d2		 test	 dl, dl
  00186	74 64		 je	 SHORT $LN74@LoadFloat_@4
  00188	32 d1		 xor	 dl, cl
  0018a	80 78 17 00	 cmp	 BYTE PTR [eax+23], 0
  0018e	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00191	0f 84 d3 00 00
	00		 je	 $LN1@LoadFloat_@4
  00197	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  0019a	84 d2		 test	 dl, dl
  0019c	74 48		 je	 SHORT $LN72@LoadFloat_@4
  0019e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001a1	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a4	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001a7	84 d2		 test	 dl, dl
  001a9	74 33		 je	 SHORT $LN71@LoadFloat_@4
  001ab	32 d3		 xor	 dl, bl
  001ad	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001b0	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001b3	84 d2		 test	 dl, dl
  001b5	74 1f		 je	 SHORT $LN70@LoadFloat_@4
  001b7	8a 40 1b	 mov	 al, BYTE PTR [eax+27]
  001ba	32 d1		 xor	 dl, cl
  001bc	88 55 fa	 mov	 BYTE PTR __k$[ebp+26], dl
  001bf	84 c0		 test	 al, al
  001c1	74 0a		 je	 SHORT $LN69@LoadFloat_@4
  001c3	34 ea		 xor	 al, -22			; ffffffeaH
  001c5	88 45 fb	 mov	 BYTE PTR __k$[ebp+27], al
  001c8	e9 9d 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN69@LoadFloat_@4:
  001cd	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001d1	e9 94 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN70@LoadFloat_@4:
  001d6	88 4d fa	 mov	 BYTE PTR __k$[ebp+26], cl
  001d9	e9 8c 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN71@LoadFloat_@4:
  001de	88 5d f9	 mov	 BYTE PTR __k$[ebp+25], bl
  001e1	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN72@LoadFloat_@4:
  001e6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ea	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@4
$LN74@LoadFloat_@4:
  001ec	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001ef	eb 79		 jmp	 SHORT $LN1@LoadFloat_@4
$LN75@LoadFloat_@4:
  001f1	88 5d f5	 mov	 BYTE PTR __k$[ebp+21], bl
  001f4	eb 74		 jmp	 SHORT $LN1@LoadFloat_@4
$LN76@LoadFloat_@4:
  001f6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001fa	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@4
$LN77@LoadFloat_@4:
  001fc	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00200	eb 68		 jmp	 SHORT $LN1@LoadFloat_@4
$LN78@LoadFloat_@4:
  00202	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  00205	eb 63		 jmp	 SHORT $LN1@LoadFloat_@4
$LN79@LoadFloat_@4:
  00207	88 5d f1	 mov	 BYTE PTR __k$[ebp+17], bl
  0020a	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@4
$LN80@LoadFloat_@4:
  0020c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00210	eb 58		 jmp	 SHORT $LN1@LoadFloat_@4
$LN81@LoadFloat_@4:
  00212	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00216	eb 52		 jmp	 SHORT $LN1@LoadFloat_@4
$LN82@LoadFloat_@4:
  00218	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  0021b	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@4
$LN83@LoadFloat_@4:
  0021d	88 5d ed	 mov	 BYTE PTR __k$[ebp+13], bl
  00220	eb 48		 jmp	 SHORT $LN1@LoadFloat_@4
$LN84@LoadFloat_@4:
  00222	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00226	eb 42		 jmp	 SHORT $LN1@LoadFloat_@4
$LN85@LoadFloat_@4:
  00228	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0022c	eb 3c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN86@LoadFloat_@4:
  0022e	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00231	eb 37		 jmp	 SHORT $LN1@LoadFloat_@4
$LN87@LoadFloat_@4:
  00233	88 5d e9	 mov	 BYTE PTR __k$[ebp+9], bl
  00236	eb 32		 jmp	 SHORT $LN1@LoadFloat_@4
$LN88@LoadFloat_@4:
  00238	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0023c	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN89@LoadFloat_@4:
  0023e	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00242	eb 26		 jmp	 SHORT $LN1@LoadFloat_@4
$LN90@LoadFloat_@4:
  00244	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00247	eb 21		 jmp	 SHORT $LN1@LoadFloat_@4
$LN91@LoadFloat_@4:
  00249	88 5d e5	 mov	 BYTE PTR __k$[ebp+5], bl
  0024c	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN92@LoadFloat_@4:
  0024e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00252	eb 16		 jmp	 SHORT $LN1@LoadFloat_@4
$LN93@LoadFloat_@4:
  00254	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00258	eb 10		 jmp	 SHORT $LN1@LoadFloat_@4
$LN94@LoadFloat_@4:
  0025a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0025e	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@4
$LN95@LoadFloat_@4:
  00260	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00264	eb 04		 jmp	 SHORT $LN1@LoadFloat_@4
$LN96@LoadFloat_@4:
  00266	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@4:
  0026a	6a 05		 push	 5
  0026c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0026f	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+23], 0
  00273	5a		 pop	 edx
$LL104@LoadFloat_@4:
  00274	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0027a	83 c0 04	 add	 eax, 4
  0027d	4a		 dec	 edx
  0027e	75 f4		 jne	 SHORT $LL104@LoadFloat_@4
  00280	6a 14		 push	 20			; 00000014H
  00282	58		 pop	 eax
$LL101@LoadFloat_@4:
  00283	8b c8		 mov	 ecx, eax
  00285	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0028b	79 05		 jns	 SHORT $LN111@LoadFloat_@4
  0028d	49		 dec	 ecx
  0028e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00291	41		 inc	 ecx
$LN111@LoadFloat_@4:
  00292	b2 ed		 mov	 dl, -19			; ffffffedH
  00294	2a d1		 sub	 dl, cl
  00296	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  0029a	40		 inc	 eax
  0029b	83 f8 17	 cmp	 eax, 23			; 00000017H
  0029e	7c e3		 jl	 SHORT $LL101@LoadFloat_@4

; 137  : 		return LoadFloat(_k, f);

  002a0	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  002a5	51		 push	 ecx
  002a6	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  002a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ae	50		 push	 eax
  002af	8b ce		 mov	 ecx, esi
  002b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  002b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ba	5e		 pop	 esi
  002bb	33 cd		 xor	 ecx, ebp
  002bd	5b		 pop	 ebx
  002be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c3	c9		 leave
  002c4	c2 08 00	 ret	 8
??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<24>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BF@@ioINILoader@@QAEMAAY0BF@$$CBDM@Z ; ioINILoader::LoadFloat_e<21>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BF@@ioINILoader@@QAEMAAY0BF@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -32						; size = 21
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BF@@ioINILoader@@QAEMAAY0BF@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<21>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 f7 01 00
	00		 je	 $LN96@LoadFloat_@5
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 e0 01 00
	00		 je	 $LN95@LoadFloat_@5
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 c8 01 00
	00		 je	 $LN94@LoadFloat_@5
  00044	b3 eb		 mov	 bl, -21			; ffffffebH
  00046	32 d3		 xor	 dl, bl
  00048	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 b0 01 00
	00		 je	 $LN93@LoadFloat_@5
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 99 01 00
	00		 je	 $LN92@LoadFloat_@5
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 83 01 00
	00		 je	 $LN91@LoadFloat_@5
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 6e 01 00
	00		 je	 $LN90@LoadFloat_@5
  00088	32 d3		 xor	 dl, bl
  0008a	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 58 01 00
	00		 je	 $LN89@LoadFloat_@5
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 41 01 00
	00		 je	 $LN88@LoadFloat_@5
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 2b 01 00
	00		 je	 $LN87@LoadFloat_@5
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 16 01 00
	00		 je	 $LN86@LoadFloat_@5
  000ca	32 d3		 xor	 dl, bl
  000cc	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 00 01 00
	00		 je	 $LN85@LoadFloat_@5
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 e9 00 00
	00		 je	 $LN84@LoadFloat_@5
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 d3 00 00
	00		 je	 $LN83@LoadFloat_@5
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 be 00 00
	00		 je	 $LN82@LoadFloat_@5
  0010c	32 d3		 xor	 dl, bl
  0010e	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 a8 00 00
	00		 je	 $LN81@LoadFloat_@5
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 91 00 00
	00		 je	 $LN80@LoadFloat_@5
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	74 7f		 je	 SHORT $LN79@LoadFloat_@5
  0013a	32 d1		 xor	 dl, cl
  0013c	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  0013f	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00142	84 d2		 test	 dl, dl
  00144	74 6e		 je	 SHORT $LN78@LoadFloat_@5
  00146	32 d3		 xor	 dl, bl
  00148	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  0014b	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0014e	84 d2		 test	 dl, dl
  00150	74 5c		 je	 SHORT $LN77@LoadFloat_@5
  00152	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00155	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00159	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  0015c	0f 84 ba 00 00
	00		 je	 $LN1@LoadFloat_@5
  00162	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00165	84 d2		 test	 dl, dl
  00167	74 40		 je	 SHORT $LN75@LoadFloat_@5
  00169	32 d1		 xor	 dl, cl
  0016b	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  0016e	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00171	84 d2		 test	 dl, dl
  00173	74 2f		 je	 SHORT $LN74@LoadFloat_@5
  00175	32 d3		 xor	 dl, bl
  00177	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  0017a	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0017d	84 d2		 test	 dl, dl
  0017f	74 1d		 je	 SHORT $LN73@LoadFloat_@5
  00181	8a 40 18	 mov	 al, BYTE PTR [eax+24]
  00184	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00187	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  0018a	84 c0		 test	 al, al
  0018c	74 0a		 je	 SHORT $LN72@LoadFloat_@5
  0018e	34 ed		 xor	 al, -19			; ffffffedH
  00190	88 45 f8	 mov	 BYTE PTR __k$[ebp+24], al
  00193	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN72@LoadFloat_@5:
  00198	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  0019c	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@5
$LN73@LoadFloat_@5:
  0019e	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  001a2	eb 78		 jmp	 SHORT $LN1@LoadFloat_@5
$LN74@LoadFloat_@5:
  001a4	88 5d f6	 mov	 BYTE PTR __k$[ebp+22], bl
  001a7	eb 73		 jmp	 SHORT $LN1@LoadFloat_@5
$LN75@LoadFloat_@5:
  001a9	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001ac	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@5
$LN77@LoadFloat_@5:
  001ae	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  001b2	eb 68		 jmp	 SHORT $LN1@LoadFloat_@5
$LN78@LoadFloat_@5:
  001b4	88 5d f2	 mov	 BYTE PTR __k$[ebp+18], bl
  001b7	eb 63		 jmp	 SHORT $LN1@LoadFloat_@5
$LN79@LoadFloat_@5:
  001b9	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001bc	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@5
$LN80@LoadFloat_@5:
  001be	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001c2	eb 58		 jmp	 SHORT $LN1@LoadFloat_@5
$LN81@LoadFloat_@5:
  001c4	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001c8	eb 52		 jmp	 SHORT $LN1@LoadFloat_@5
$LN82@LoadFloat_@5:
  001ca	88 5d ee	 mov	 BYTE PTR __k$[ebp+14], bl
  001cd	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@5
$LN83@LoadFloat_@5:
  001cf	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  001d2	eb 48		 jmp	 SHORT $LN1@LoadFloat_@5
$LN84@LoadFloat_@5:
  001d4	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001d8	eb 42		 jmp	 SHORT $LN1@LoadFloat_@5
$LN85@LoadFloat_@5:
  001da	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001de	eb 3c		 jmp	 SHORT $LN1@LoadFloat_@5
$LN86@LoadFloat_@5:
  001e0	88 5d ea	 mov	 BYTE PTR __k$[ebp+10], bl
  001e3	eb 37		 jmp	 SHORT $LN1@LoadFloat_@5
$LN87@LoadFloat_@5:
  001e5	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  001e8	eb 32		 jmp	 SHORT $LN1@LoadFloat_@5
$LN88@LoadFloat_@5:
  001ea	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001ee	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@5
$LN89@LoadFloat_@5:
  001f0	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001f4	eb 26		 jmp	 SHORT $LN1@LoadFloat_@5
$LN90@LoadFloat_@5:
  001f6	88 5d e6	 mov	 BYTE PTR __k$[ebp+6], bl
  001f9	eb 21		 jmp	 SHORT $LN1@LoadFloat_@5
$LN91@LoadFloat_@5:
  001fb	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  001fe	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@5
$LN92@LoadFloat_@5:
  00200	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00204	eb 16		 jmp	 SHORT $LN1@LoadFloat_@5
$LN93@LoadFloat_@5:
  00206	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0020a	eb 10		 jmp	 SHORT $LN1@LoadFloat_@5
$LN94@LoadFloat_@5:
  0020c	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00210	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@5
$LN95@LoadFloat_@5:
  00212	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00216	eb 04		 jmp	 SHORT $LN1@LoadFloat_@5
$LN96@LoadFloat_@5:
  00218	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@5:
  0021c	6a 05		 push	 5
  0021e	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00221	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+20], 0
  00225	5a		 pop	 edx
$LL104@LoadFloat_@5:
  00226	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0022c	83 c0 04	 add	 eax, 4
  0022f	4a		 dec	 edx
  00230	75 f4		 jne	 SHORT $LL104@LoadFloat_@5

; 137  : 		return LoadFloat(_k, f);

  00232	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00237	51		 push	 ecx
  00238	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0023b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00240	50		 push	 eax
  00241	8b ce		 mov	 ecx, esi
  00243	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00249	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024c	5e		 pop	 esi
  0024d	33 cd		 xor	 ecx, ebp
  0024f	5b		 pop	 ebx
  00250	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00255	c9		 leave
  00256	c2 08 00	 ret	 8
??$LoadFloat_e@$0BF@@ioINILoader@@QAEMAAY0BF@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<21>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BH@@ioINILoader@@QAEMAAY0BH@$$CBDM@Z ; ioINILoader::LoadFloat_e<23>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BH@@ioINILoader@@QAEMAAY0BH@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -32						; size = 23
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BH@@ioINILoader@@QAEMAAY0BH@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<23>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 2d 02 00
	00		 je	 $LN96@LoadFloat_@6
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 16 02 00
	00		 je	 $LN95@LoadFloat_@6
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 fe 01 00
	00		 je	 $LN94@LoadFloat_@6
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 e7 01 00
	00		 je	 $LN93@LoadFloat_@6
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 cf 01 00
	00		 je	 $LN92@LoadFloat_@6
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 b9 01 00
	00		 je	 $LN91@LoadFloat_@6
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 a3 01 00
	00		 je	 $LN90@LoadFloat_@6
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 8d 01 00
	00		 je	 $LN89@LoadFloat_@6
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 77 01 00
	00		 je	 $LN88@LoadFloat_@6
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 61 01 00
	00		 je	 $LN87@LoadFloat_@6
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 4b 01 00
	00		 je	 $LN86@LoadFloat_@6
  000ca	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cd	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 35 01 00
	00		 je	 $LN85@LoadFloat_@6
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 1f 01 00
	00		 je	 $LN84@LoadFloat_@6
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 09 01 00
	00		 je	 $LN83@LoadFloat_@6
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 f3 00 00
	00		 je	 $LN82@LoadFloat_@6
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 dd 00 00
	00		 je	 $LN81@LoadFloat_@6
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 c7 00 00
	00		 je	 $LN80@LoadFloat_@6
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 b1 00 00
	00		 je	 $LN79@LoadFloat_@6
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 9b 00 00
	00		 je	 $LN78@LoadFloat_@6
  0014e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00151	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 85 00 00
	00		 je	 $LN77@LoadFloat_@6
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	74 73		 je	 SHORT $LN76@LoadFloat_@6
  0016b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016e	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00171	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00174	84 d2		 test	 dl, dl
  00176	74 61		 je	 SHORT $LN75@LoadFloat_@6
  00178	32 d1		 xor	 dl, cl
  0017a	80 78 16 00	 cmp	 BYTE PTR [eax+22], 0
  0017e	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00181	0f 84 cb 00 00
	00		 je	 $LN1@LoadFloat_@6
  00187	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0018a	84 d2		 test	 dl, dl
  0018c	74 46		 je	 SHORT $LN73@LoadFloat_@6
  0018e	32 d3		 xor	 dl, bl
  00190	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  00193	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  00196	84 d2		 test	 dl, dl
  00198	74 34		 je	 SHORT $LN72@LoadFloat_@6
  0019a	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0019d	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a0	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001a3	84 d2		 test	 dl, dl
  001a5	74 1f		 je	 SHORT $LN71@LoadFloat_@6
  001a7	8a 40 1a	 mov	 al, BYTE PTR [eax+26]
  001aa	32 d1		 xor	 dl, cl
  001ac	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001af	84 c0		 test	 al, al
  001b1	74 0a		 je	 SHORT $LN70@LoadFloat_@6
  001b3	34 eb		 xor	 al, -21			; ffffffebH
  001b5	88 45 fa	 mov	 BYTE PTR __k$[ebp+26], al
  001b8	e9 95 00 00 00	 jmp	 $LN1@LoadFloat_@6
$LN70@LoadFloat_@6:
  001bd	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+26], -21 ; ffffffebH
  001c1	e9 8c 00 00 00	 jmp	 $LN1@LoadFloat_@6
$LN71@LoadFloat_@6:
  001c6	88 4d f9	 mov	 BYTE PTR __k$[ebp+25], cl
  001c9	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@6
$LN72@LoadFloat_@6:
  001ce	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001d2	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@6
$LN73@LoadFloat_@6:
  001d4	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001d7	eb 79		 jmp	 SHORT $LN1@LoadFloat_@6
$LN75@LoadFloat_@6:
  001d9	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001dc	eb 74		 jmp	 SHORT $LN1@LoadFloat_@6
$LN76@LoadFloat_@6:
  001de	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001e2	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@6
$LN77@LoadFloat_@6:
  001e4	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001e7	eb 69		 jmp	 SHORT $LN1@LoadFloat_@6
$LN78@LoadFloat_@6:
  001e9	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  001ed	eb 63		 jmp	 SHORT $LN1@LoadFloat_@6
$LN79@LoadFloat_@6:
  001ef	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001f2	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@6
$LN80@LoadFloat_@6:
  001f4	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001f8	eb 58		 jmp	 SHORT $LN1@LoadFloat_@6
$LN81@LoadFloat_@6:
  001fa	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001fd	eb 53		 jmp	 SHORT $LN1@LoadFloat_@6
$LN82@LoadFloat_@6:
  001ff	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00203	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@6
$LN83@LoadFloat_@6:
  00205	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  00208	eb 48		 jmp	 SHORT $LN1@LoadFloat_@6
$LN84@LoadFloat_@6:
  0020a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0020e	eb 42		 jmp	 SHORT $LN1@LoadFloat_@6
$LN85@LoadFloat_@6:
  00210	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  00213	eb 3d		 jmp	 SHORT $LN1@LoadFloat_@6
$LN86@LoadFloat_@6:
  00215	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00219	eb 37		 jmp	 SHORT $LN1@LoadFloat_@6
$LN87@LoadFloat_@6:
  0021b	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  0021e	eb 32		 jmp	 SHORT $LN1@LoadFloat_@6
$LN88@LoadFloat_@6:
  00220	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00224	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@6
$LN89@LoadFloat_@6:
  00226	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00229	eb 27		 jmp	 SHORT $LN1@LoadFloat_@6
$LN90@LoadFloat_@6:
  0022b	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0022f	eb 21		 jmp	 SHORT $LN1@LoadFloat_@6
$LN91@LoadFloat_@6:
  00231	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  00234	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@6
$LN92@LoadFloat_@6:
  00236	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0023a	eb 16		 jmp	 SHORT $LN1@LoadFloat_@6
$LN93@LoadFloat_@6:
  0023c	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00240	eb 10		 jmp	 SHORT $LN1@LoadFloat_@6
$LN94@LoadFloat_@6:
  00242	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00246	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@6
$LN95@LoadFloat_@6:
  00248	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0024c	eb 04		 jmp	 SHORT $LN1@LoadFloat_@6
$LN96@LoadFloat_@6:
  0024e	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@6:
  00252	6a 05		 push	 5
  00254	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00257	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+22], 0
  0025b	5a		 pop	 edx
$LL104@LoadFloat_@6:
  0025c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00262	83 c0 04	 add	 eax, 4
  00265	4a		 dec	 edx
  00266	75 f4		 jne	 SHORT $LL104@LoadFloat_@6
  00268	6a 14		 push	 20			; 00000014H
  0026a	58		 pop	 eax
$LL101@LoadFloat_@6:
  0026b	8b c8		 mov	 ecx, eax
  0026d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00273	79 05		 jns	 SHORT $LN111@LoadFloat_@6
  00275	49		 dec	 ecx
  00276	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00279	41		 inc	 ecx
$LN111@LoadFloat_@6:
  0027a	b2 ed		 mov	 dl, -19			; ffffffedH
  0027c	2a d1		 sub	 dl, cl
  0027e	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  00282	40		 inc	 eax
  00283	83 f8 16	 cmp	 eax, 22			; 00000016H
  00286	7c e3		 jl	 SHORT $LL101@LoadFloat_@6

; 137  : 		return LoadFloat(_k, f);

  00288	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0028d	51		 push	 ecx
  0028e	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00291	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00296	50		 push	 eax
  00297	8b ce		 mov	 ecx, esi
  00299	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0029f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a2	5e		 pop	 esi
  002a3	33 cd		 xor	 ecx, ebp
  002a5	5b		 pop	 ebx
  002a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ab	c9		 leave
  002ac	c2 08 00	 ret	 8
??$LoadFloat_e@$0BH@@ioINILoader@@QAEMAAY0BH@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<23>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BH@@ioINILoader@@QAEHAAY0BH@$$CBDH@Z ; ioINILoader::LoadInt_e<23>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BH@@ioINILoader@@QAEHAAY0BH@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -32						; size = 23
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BH@@ioINILoader@@QAEHAAY0BH@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<23>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 2d 02 00
	00		 je	 $LN96@LoadInt_e@4
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 16 02 00
	00		 je	 $LN95@LoadInt_e@4
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 fe 01 00
	00		 je	 $LN94@LoadInt_e@4
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 e7 01 00
	00		 je	 $LN93@LoadInt_e@4
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 cf 01 00
	00		 je	 $LN92@LoadInt_e@4
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 b9 01 00
	00		 je	 $LN91@LoadInt_e@4
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 a3 01 00
	00		 je	 $LN90@LoadInt_e@4
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 8d 01 00
	00		 je	 $LN89@LoadInt_e@4
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 77 01 00
	00		 je	 $LN88@LoadInt_e@4
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 61 01 00
	00		 je	 $LN87@LoadInt_e@4
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 4b 01 00
	00		 je	 $LN86@LoadInt_e@4
  000ca	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cd	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 35 01 00
	00		 je	 $LN85@LoadInt_e@4
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 1f 01 00
	00		 je	 $LN84@LoadInt_e@4
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 09 01 00
	00		 je	 $LN83@LoadInt_e@4
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 f3 00 00
	00		 je	 $LN82@LoadInt_e@4
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 dd 00 00
	00		 je	 $LN81@LoadInt_e@4
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 c7 00 00
	00		 je	 $LN80@LoadInt_e@4
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 b1 00 00
	00		 je	 $LN79@LoadInt_e@4
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 9b 00 00
	00		 je	 $LN78@LoadInt_e@4
  0014e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00151	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 85 00 00
	00		 je	 $LN77@LoadInt_e@4
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	74 73		 je	 SHORT $LN76@LoadInt_e@4
  0016b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016e	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00171	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00174	84 d2		 test	 dl, dl
  00176	74 61		 je	 SHORT $LN75@LoadInt_e@4
  00178	32 d1		 xor	 dl, cl
  0017a	80 78 16 00	 cmp	 BYTE PTR [eax+22], 0
  0017e	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00181	0f 84 cb 00 00
	00		 je	 $LN1@LoadInt_e@4
  00187	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0018a	84 d2		 test	 dl, dl
  0018c	74 46		 je	 SHORT $LN73@LoadInt_e@4
  0018e	32 d3		 xor	 dl, bl
  00190	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  00193	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  00196	84 d2		 test	 dl, dl
  00198	74 34		 je	 SHORT $LN72@LoadInt_e@4
  0019a	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0019d	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a0	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001a3	84 d2		 test	 dl, dl
  001a5	74 1f		 je	 SHORT $LN71@LoadInt_e@4
  001a7	8a 40 1a	 mov	 al, BYTE PTR [eax+26]
  001aa	32 d1		 xor	 dl, cl
  001ac	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001af	84 c0		 test	 al, al
  001b1	74 0a		 je	 SHORT $LN70@LoadInt_e@4
  001b3	34 eb		 xor	 al, -21			; ffffffebH
  001b5	88 45 fa	 mov	 BYTE PTR __k$[ebp+26], al
  001b8	e9 95 00 00 00	 jmp	 $LN1@LoadInt_e@4
$LN70@LoadInt_e@4:
  001bd	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+26], -21 ; ffffffebH
  001c1	e9 8c 00 00 00	 jmp	 $LN1@LoadInt_e@4
$LN71@LoadInt_e@4:
  001c6	88 4d f9	 mov	 BYTE PTR __k$[ebp+25], cl
  001c9	e9 84 00 00 00	 jmp	 $LN1@LoadInt_e@4
$LN72@LoadInt_e@4:
  001ce	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001d2	eb 7e		 jmp	 SHORT $LN1@LoadInt_e@4
$LN73@LoadInt_e@4:
  001d4	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001d7	eb 79		 jmp	 SHORT $LN1@LoadInt_e@4
$LN75@LoadInt_e@4:
  001d9	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001dc	eb 74		 jmp	 SHORT $LN1@LoadInt_e@4
$LN76@LoadInt_e@4:
  001de	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001e2	eb 6e		 jmp	 SHORT $LN1@LoadInt_e@4
$LN77@LoadInt_e@4:
  001e4	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001e7	eb 69		 jmp	 SHORT $LN1@LoadInt_e@4
$LN78@LoadInt_e@4:
  001e9	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  001ed	eb 63		 jmp	 SHORT $LN1@LoadInt_e@4
$LN79@LoadInt_e@4:
  001ef	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001f2	eb 5e		 jmp	 SHORT $LN1@LoadInt_e@4
$LN80@LoadInt_e@4:
  001f4	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001f8	eb 58		 jmp	 SHORT $LN1@LoadInt_e@4
$LN81@LoadInt_e@4:
  001fa	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001fd	eb 53		 jmp	 SHORT $LN1@LoadInt_e@4
$LN82@LoadInt_e@4:
  001ff	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00203	eb 4d		 jmp	 SHORT $LN1@LoadInt_e@4
$LN83@LoadInt_e@4:
  00205	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  00208	eb 48		 jmp	 SHORT $LN1@LoadInt_e@4
$LN84@LoadInt_e@4:
  0020a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0020e	eb 42		 jmp	 SHORT $LN1@LoadInt_e@4
$LN85@LoadInt_e@4:
  00210	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  00213	eb 3d		 jmp	 SHORT $LN1@LoadInt_e@4
$LN86@LoadInt_e@4:
  00215	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00219	eb 37		 jmp	 SHORT $LN1@LoadInt_e@4
$LN87@LoadInt_e@4:
  0021b	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  0021e	eb 32		 jmp	 SHORT $LN1@LoadInt_e@4
$LN88@LoadInt_e@4:
  00220	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00224	eb 2c		 jmp	 SHORT $LN1@LoadInt_e@4
$LN89@LoadInt_e@4:
  00226	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00229	eb 27		 jmp	 SHORT $LN1@LoadInt_e@4
$LN90@LoadInt_e@4:
  0022b	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0022f	eb 21		 jmp	 SHORT $LN1@LoadInt_e@4
$LN91@LoadInt_e@4:
  00231	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  00234	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@4
$LN92@LoadInt_e@4:
  00236	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0023a	eb 16		 jmp	 SHORT $LN1@LoadInt_e@4
$LN93@LoadInt_e@4:
  0023c	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00240	eb 10		 jmp	 SHORT $LN1@LoadInt_e@4
$LN94@LoadInt_e@4:
  00242	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00246	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@4
$LN95@LoadInt_e@4:
  00248	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0024c	eb 04		 jmp	 SHORT $LN1@LoadInt_e@4
$LN96@LoadInt_e@4:
  0024e	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@4:
  00252	6a 05		 push	 5
  00254	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00257	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+22], 0
  0025b	5a		 pop	 edx
$LL104@LoadInt_e@4:
  0025c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00262	83 c0 04	 add	 eax, 4
  00265	4a		 dec	 edx
  00266	75 f4		 jne	 SHORT $LL104@LoadInt_e@4
  00268	6a 14		 push	 20			; 00000014H
  0026a	58		 pop	 eax
$LL101@LoadInt_e@4:
  0026b	8b c8		 mov	 ecx, eax
  0026d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00273	79 05		 jns	 SHORT $LN111@LoadInt_e@4
  00275	49		 dec	 ecx
  00276	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00279	41		 inc	 ecx
$LN111@LoadInt_e@4:
  0027a	b2 ed		 mov	 dl, -19			; ffffffedH
  0027c	2a d1		 sub	 dl, cl
  0027e	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  00282	40		 inc	 eax
  00283	83 f8 16	 cmp	 eax, 22			; 00000016H
  00286	7c e3		 jl	 SHORT $LL101@LoadInt_e@4

; 120  : 		return LoadInt(_k, i);

  00288	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0028b	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0028e	50		 push	 eax
  0028f	8b ce		 mov	 ecx, esi
  00291	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00297	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0029a	5e		 pop	 esi
  0029b	33 cd		 xor	 ecx, ebp
  0029d	5b		 pop	 ebx
  0029e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002a3	c9		 leave
  002a4	c2 08 00	 ret	 8
??$LoadInt_e@$0BH@@ioINILoader@@QAEHAAY0BH@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<23>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BD@@ioINILoader@@QAEMAAY0BD@$$CBDM@Z ; ioINILoader::LoadFloat_e<19>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BD@@ioINILoader@@QAEMAAY0BD@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BD@@ioINILoader@@QAEMAAY0BD@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<19>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 cf 01 00
	00		 je	 $LN96@LoadFloat_@7
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 b8 01 00
	00		 je	 $LN95@LoadFloat_@7
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 a0 01 00
	00		 je	 $LN94@LoadFloat_@7
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 89 01 00
	00		 je	 $LN93@LoadFloat_@7
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 72 01 00
	00		 je	 $LN92@LoadFloat_@7
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 5c 01 00
	00		 je	 $LN91@LoadFloat_@7
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 46 01 00
	00		 je	 $LN90@LoadFloat_@7
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 2f 01 00
	00		 je	 $LN89@LoadFloat_@7
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 18 01 00
	00		 je	 $LN88@LoadFloat_@7
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 02 01 00
	00		 je	 $LN87@LoadFloat_@7
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 ec 00 00
	00		 je	 $LN86@LoadFloat_@7
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 d5 00 00
	00		 je	 $LN85@LoadFloat_@7
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 be 00 00
	00		 je	 $LN84@LoadFloat_@7
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 a8 00 00
	00		 je	 $LN83@LoadFloat_@7
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 92 00 00
	00		 je	 $LN82@LoadFloat_@7
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 7f		 je	 SHORT $LN81@LoadFloat_@7
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 6c		 je	 SHORT $LN80@LoadFloat_@7
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012c	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0012f	84 d2		 test	 dl, dl
  00131	74 5a		 je	 SHORT $LN79@LoadFloat_@7
  00133	32 d1		 xor	 dl, cl
  00135	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00139	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013c	0f 84 b1 00 00
	00		 je	 $LN1@LoadFloat_@7
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 3e		 je	 SHORT $LN77@LoadFloat_@7
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 2b		 je	 SHORT $LN76@LoadFloat_@7
  00156	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00159	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0015f	84 d2		 test	 dl, dl
  00161	74 19		 je	 SHORT $LN75@LoadFloat_@7
  00163	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  00166	32 d1		 xor	 dl, cl
  00168	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016b	84 c0		 test	 al, al
  0016d	74 07		 je	 SHORT $LN74@LoadFloat_@7
  0016f	34 eb		 xor	 al, -21			; ffffffebH
  00171	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  00174	eb 7d		 jmp	 SHORT $LN1@LoadFloat_@7
$LN74@LoadFloat_@7:
  00176	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0017a	eb 77		 jmp	 SHORT $LN1@LoadFloat_@7
$LN75@LoadFloat_@7:
  0017c	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  0017f	eb 72		 jmp	 SHORT $LN1@LoadFloat_@7
$LN76@LoadFloat_@7:
  00181	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00185	eb 6c		 jmp	 SHORT $LN1@LoadFloat_@7
$LN77@LoadFloat_@7:
  00187	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0018b	eb 66		 jmp	 SHORT $LN1@LoadFloat_@7
$LN79@LoadFloat_@7:
  0018d	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00190	eb 61		 jmp	 SHORT $LN1@LoadFloat_@7
$LN80@LoadFloat_@7:
  00192	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00196	eb 5b		 jmp	 SHORT $LN1@LoadFloat_@7
$LN81@LoadFloat_@7:
  00198	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0019c	eb 55		 jmp	 SHORT $LN1@LoadFloat_@7
$LN82@LoadFloat_@7:
  0019e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001a2	eb 4f		 jmp	 SHORT $LN1@LoadFloat_@7
$LN83@LoadFloat_@7:
  001a4	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001a7	eb 4a		 jmp	 SHORT $LN1@LoadFloat_@7
$LN84@LoadFloat_@7:
  001a9	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001ad	eb 44		 jmp	 SHORT $LN1@LoadFloat_@7
$LN85@LoadFloat_@7:
  001af	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001b3	eb 3e		 jmp	 SHORT $LN1@LoadFloat_@7
$LN86@LoadFloat_@7:
  001b5	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001b9	eb 38		 jmp	 SHORT $LN1@LoadFloat_@7
$LN87@LoadFloat_@7:
  001bb	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001be	eb 33		 jmp	 SHORT $LN1@LoadFloat_@7
$LN88@LoadFloat_@7:
  001c0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001c4	eb 2d		 jmp	 SHORT $LN1@LoadFloat_@7
$LN89@LoadFloat_@7:
  001c6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001ca	eb 27		 jmp	 SHORT $LN1@LoadFloat_@7
$LN90@LoadFloat_@7:
  001cc	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d0	eb 21		 jmp	 SHORT $LN1@LoadFloat_@7
$LN91@LoadFloat_@7:
  001d2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001d5	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@7
$LN92@LoadFloat_@7:
  001d7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001db	eb 16		 jmp	 SHORT $LN1@LoadFloat_@7
$LN93@LoadFloat_@7:
  001dd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e1	eb 10		 jmp	 SHORT $LN1@LoadFloat_@7
$LN94@LoadFloat_@7:
  001e3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001e7	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@7
$LN95@LoadFloat_@7:
  001e9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001ed	eb 04		 jmp	 SHORT $LN1@LoadFloat_@7
$LN96@LoadFloat_@7:
  001ef	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@7:
  001f3	6a 04		 push	 4
  001f5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f8	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  001fc	5a		 pop	 edx
$LL104@LoadFloat_@7:
  001fd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00203	83 c0 04	 add	 eax, 4
  00206	4a		 dec	 edx
  00207	75 f4		 jne	 SHORT $LL104@LoadFloat_@7
  00209	6a 10		 push	 16			; 00000010H
  0020b	58		 pop	 eax
$LL101@LoadFloat_@7:
  0020c	8b c8		 mov	 ecx, eax
  0020e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00214	79 05		 jns	 SHORT $LN111@LoadFloat_@7
  00216	49		 dec	 ecx
  00217	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0021a	41		 inc	 ecx
$LN111@LoadFloat_@7:
  0021b	b2 ed		 mov	 dl, -19			; ffffffedH
  0021d	2a d1		 sub	 dl, cl
  0021f	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00223	40		 inc	 eax
  00224	83 f8 12	 cmp	 eax, 18			; 00000012H
  00227	7c e3		 jl	 SHORT $LL101@LoadFloat_@7

; 137  : 		return LoadFloat(_k, f);

  00229	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0022e	51		 push	 ecx
  0022f	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00232	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00237	50		 push	 eax
  00238	8b ce		 mov	 ecx, esi
  0023a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00240	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00243	33 cd		 xor	 ecx, ebp
  00245	5e		 pop	 esi
  00246	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024b	c9		 leave
  0024c	c2 08 00	 ret	 8
??$LoadFloat_e@$0BD@@ioINILoader@@QAEMAAY0BD@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<19>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z ; std::allocator<ForceInfo>::construct
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z PROC ; std::allocator<ForceInfo>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN5@construct@2
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN5@construct@2:
  00013	5f		 pop	 edi

; 198  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z ENDP ; std::allocator<ForceInfo>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
_TEXT	SEGMENT
$T527989 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z PROC ; std::_Construct<WeaponInfo,WeaponInfo const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T527989[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 08		 je	 SHORT $LN3@Construct@2
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@ABU0@@Z
$LN3@Construct@2:

; 49   : 	}

  00025	e8 00 00 00 00	 call	 __EH_epilog3
  0002a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T527989[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ENDP ; std::_Construct<WeaponInfo,WeaponInfo const &>
PUBLIC	??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z PROC ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z ENDP ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::_Vector_val<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z PROC ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::_Vector_val<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z ENDP ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::_Vector_val<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@V?$allocator@UAttackAttribute@@@1@@Z ; std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> >::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@V?$allocator@UAttackAttribute@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@V?$allocator@UAttackAttribute@@@1@@Z PROC ; std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> >::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@V?$allocator@UAttackAttribute@@@1@@Z ENDP ; std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> >::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QAE@PAUAttackAttribute@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >::_Vector_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QAE@PAUAttackAttribute@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QAE@PAUAttackAttribute@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >::_Vector_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QAE@PAUAttackAttribute@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >::_Vector_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >::operator==
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z ; std::allocator<WeaponInfo>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z PROC ; std::allocator<WeaponInfo>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ; std::_Allocate<WeaponInfo>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z ENDP ; std::allocator<WeaponInfo>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z ; std::allocator<ForceInfo>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z PROC ; std::allocator<ForceInfo>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ; std::_Allocate<ForceInfo>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z ENDP ; std::allocator<ForceInfo>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator==
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator==
_TEXT	ENDS
PUBLIC	??$_Copy_impl@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00@Z ; std::_Copy_impl<ForceInfo *,ForceInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Copy_impl@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$528105 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_impl@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00@Z PROC ; std::_Copy_impl<ForceInfo *,ForceInfo *>, COMDAT

; 2163 : 	{	// copy [_First, _Last) to [_Dest, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2164 : 	return (_Copy_impl(_First, _Last,
; 2165 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$528105[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_impl@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<ForceInfo *,ForceInfo *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2166 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Copy_impl@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00@Z ENDP ; std::_Copy_impl<ForceInfo *,ForceInfo *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z ; std::allocator<ForceInfo>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z PROC ; std::allocator<ForceInfo>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z ENDP ; std::allocator<ForceInfo>::destroy
_TEXT	ENDS
PUBLIC	??$_Copy_impl@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<WeaponInfo *,WeaponInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Copy_impl@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_impl@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Copy_impl<WeaponInfo *,WeaponInfo *>, COMDAT

; 2142 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2143 : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 10		 jmp	 SHORT $LN9@Copy_impl@2
$LL3@Copy_impl@2:

; 2144 : 		*_Dest = *_First;

  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ??4WeaponInfo@@QAEAAU0@ABU0@@Z
  00012	83 45 10 28	 add	 DWORD PTR __Dest$[ebp], 40 ; 00000028H
  00016	83 c6 28	 add	 esi, 40			; 00000028H
$LN9@Copy_impl@2:

; 2143 : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	75 eb		 jne	 SHORT $LL3@Copy_impl@2

; 2145 : 	return (_Dest);

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00021	5e		 pop	 esi

; 2146 : 	}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Copy_impl@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_impl<WeaponInfo *,WeaponInfo *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<WeaponInfo *,WeaponInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<WeaponInfo *,WeaponInfo *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 10		 jmp	 SHORT $LN11@Move
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ??4WeaponInfo@@QAEAAU0@ABU0@@Z
  00012	83 45 10 28	 add	 DWORD PTR __Dest$[ebp], 40 ; 00000028H
  00016	83 c6 28	 add	 esi, 40			; 00000028H
$LN11@Move:

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	75 eb		 jne	 SHORT $LL3@Move

; 2515 : 	return (_Dest);

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00021	5e		 pop	 esi

; 2516 : 	}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<WeaponInfo *,WeaponInfo *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ForceInfo *,ForceInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<ForceInfo *,ForceInfo *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00009	74 18		 je	 SHORT $LN10@Move@2
  0000b	56		 push	 esi
  0000c	57		 push	 edi
$LL3@Move@2:

; 2514 : 		*_Dest = _STD move(*_First);

  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00010	83 45 10 0c	 add	 DWORD PTR __Dest$[ebp], 12 ; 0000000cH
  00014	8b f0		 mov	 esi, eax
  00016	a5		 movsd
  00017	a5		 movsd
  00018	83 c0 0c	 add	 eax, 12			; 0000000cH
  0001b	a5		 movsd
  0001c	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001f	75 ec		 jne	 SHORT $LL3@Move@2
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
$LN10@Move@2:

; 2515 : 	return (_Dest);

  00023	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<ForceInfo *,ForceInfo *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z ; std::_Destroy<WeaponInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z PROC ; std::_Destroy<WeaponInfo>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	83 c1 08	 add	 ecx, 8

; 64   : 	}

  00009	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  0000a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z ENDP ; std::_Destroy<WeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@AAU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@AAU2@@Z ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@AAU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@AAU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN7@Cons_val
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN7@Cons_val:
  00013	5f		 pop	 edi

; 281  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@AAU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo &>
_TEXT	ENDS
PUBLIC	??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z ; std::allocator<WeaponInfo>::construct<WeaponInfo &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z
_TEXT	SEGMENT
$T528177 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z PROC ; std::allocator<WeaponInfo>::construct<WeaponInfo &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T528177[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct@3
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@ABU0@@Z
$LN3@construct@3:

; 209  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T528177[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z ENDP ; std::allocator<WeaponInfo>::construct<WeaponInfo &>
PUBLIC	?_Buy@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@IAE_NI@Z ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::_Buy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@IAE_NI@Z PROC ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy
$LN4@Buy:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff 33 33 33
	03		 cmp	 edi, 53687091		; 03333333H
  00022	76 0b		 jbe	 SHORT $LN2@Buy

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy:
$LN2@Buy:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@UAttackAttribute@@@std@@YAPAUAttackAttribute@@IPAU1@@Z ; std::_Allocate<AttackAttribute>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	6b ff 50	 imul	 edi, 80			; 00000050H
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy:
?_Buy@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN9@Cons_val@2
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN9@Cons_val@2:
  00013	5f		 pop	 edi

; 281  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z ; std::allocator<WeaponInfo>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z PROC ; std::allocator<WeaponInfo>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z ENDP ; std::allocator<WeaponInfo>::construct
_TEXT	ENDS
PUBLIC	??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??0?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@XZ ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::vector<AttackAttribute,std::allocator<AttackAttribute> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@XZ PROC ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::vector<AttackAttribute,std::allocator<AttackAttribute> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@XZ ENDP ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::vector<AttackAttribute,std::allocator<AttackAttribute> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@XZ ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@XZ PROC ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@XZ ENDP ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@XZ ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@XZ PROC ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@XZ ENDP ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@@Z ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@@Z PROC ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@@Z ENDP ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::_Make_iter
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >::operator!=
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy
; Function compile flags: /Ogsp
;	COMDAT ?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy@2

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy@2
$LN4@Buy@2:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff 66 66 66
	06		 cmp	 edi, 107374182		; 06666666H
  00022	76 0b		 jbe	 SHORT $LN2@Buy@2

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy@2:
$LN2@Buy@2:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ; std::_Allocate<WeaponInfo>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	6b ff 28	 imul	 edi, 40			; 00000028H
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy@2:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy@2:
?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy
; Function compile flags: /Ogsp
;	COMDAT ?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy@3

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy@3
$LN4@Buy@3:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff 55 55 55
	15		 cmp	 edi, 357913941		; 15555555H
  00022	76 0b		 jbe	 SHORT $LN2@Buy@3

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy@3:
$LN2@Buy@3:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ; std::_Allocate<ForceInfo>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	6b ff 0c	 imul	 edi, 12			; 0000000cH
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy@3:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy@3:
?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy
_TEXT	ENDS
PUBLIC	?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end
_TEXT	ENDS
PUBLIC	?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Make_iter
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator!=
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z ; std::_Dest_val<std::allocator<ForceInfo>,ForceInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z PROC ; std::_Dest_val<std::allocator<ForceInfo>,ForceInfo>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z ENDP ; std::_Dest_val<std::allocator<ForceInfo>,ForceInfo>
_TEXT	ENDS
PUBLIC	??$_Copy_impl@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00@Z ; std::_Copy_impl<WeaponInfo *,WeaponInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Copy_impl@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$528574 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_impl@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00@Z PROC ; std::_Copy_impl<WeaponInfo *,WeaponInfo *>, COMDAT

; 2163 : 	{	// copy [_First, _Last) to [_Dest, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2164 : 	return (_Copy_impl(_First, _Last,
; 2165 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$528574[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_impl@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<WeaponInfo *,WeaponInfo *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2166 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Copy_impl@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00@Z ENDP ; std::_Copy_impl<WeaponInfo *,WeaponInfo *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00@Z ; std::_Move<WeaponInfo *,WeaponInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$528581 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00@Z PROC ; std::_Move<WeaponInfo *,WeaponInfo *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$528581[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<WeaponInfo *,WeaponInfo *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00@Z ENDP ; std::_Move<WeaponInfo *,WeaponInfo *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00@Z ; std::_Move<ForceInfo *,ForceInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$528588 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00@Z PROC ; std::_Move<ForceInfo *,ForceInfo *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$528588[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ForceInfo *,ForceInfo *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00@Z ENDP ; std::_Move<ForceInfo *,ForceInfo *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z ; std::allocator<WeaponInfo>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z PROC ; std::allocator<WeaponInfo>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	83 c1 08	 add	 ecx, 8
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 214  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z ENDP ; std::allocator<WeaponInfo>::destroy
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 16		 jmp	 SHORT $LN24@Uninit_cop
$LL6@Uninit_cop:

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  00009	56		 push	 esi
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@AAU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@AAU2@@Z ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo &>
  00015	83 45 10 0c	 add	 DWORD PTR __Dest$[ebp], 12 ; 0000000cH
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	83 c6 0c	 add	 esi, 12			; 0000000cH
$LN24@Uninit_cop:

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001f	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00022	75 e5		 jne	 SHORT $LL6@Uninit_cop

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)
; 379  : 		_Dest_val(_Al, _Next);
; 380  : 	_RERAISE;
; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00024	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00027	5e		 pop	 esi

; 383  : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Uninit_copy@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z
_TEXT	SEGMENT
$T528657 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T528657[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val@3
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@ABU0@@Z
$LN7@Cons_val@3:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T528657[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo &>
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	eb 19		 jmp	 SHORT $LN35@Uninit_cop@2
$LL14@Uninit_cop@2:

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  00005	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00008	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000b	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>
  00013	83 45 10 0c	 add	 DWORD PTR __Dest$[ebp], 12 ; 0000000cH
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	83 45 08 0c	 add	 DWORD PTR __First$[ebp], 12 ; 0000000cH
$LN35@Uninit_cop@2:

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00021	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00024	75 df		 jne	 SHORT $LL14@Uninit_cop@2

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)
; 379  : 		_Dest_val(_Al, _Next);
; 380  : 	_RERAISE;
; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00026	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo const &>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ForceInfo> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z ; std::_Dest_val<std::allocator<WeaponInfo>,WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z PROC ; std::_Dest_val<std::allocator<WeaponInfo>,WeaponInfo>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	83 c1 08	 add	 ecx, 8

; 288  : 	}

  00009	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  0000a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z ENDP ; std::_Dest_val<std::allocator<WeaponInfo>,WeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@@Z ; std::_Uninitialized_copy<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$528785 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@@Z PROC ; std::_Uninitialized_copy<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$528785[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@@Z ENDP ; std::_Uninitialized_copy<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$3
__ehfuncinfo$??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 373  : 
; 374  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00016	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LL6@Uninit_cop@3:

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	74 37		 je	 SHORT $LN4@Uninit_cop@3

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  0001e	56		 push	 esi
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00025	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo &>
  0002a	83 45 10 28	 add	 DWORD PTR __Dest$[ebp], 40 ; 00000028H
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00031	83 c6 28	 add	 esi, 40			; 00000028H
  00034	eb e3		 jmp	 SHORT $LL6@Uninit_cop@3
__catch$??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00036	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00039	eb 0c		 jmp	 SHORT $LN32@Uninit_cop@3
$LL3@Uninit_cop@3:

; 379  : 		_Dest_val(_Al, _Next);

  0003b	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00044	83 c6 28	 add	 esi, 40			; 00000028H
$LN32@Uninit_cop@3:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00047	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  0004a	75 ef		 jne	 SHORT $LL3@Uninit_cop@3

; 380  : 	_RERAISE;

  0004c	6a 00		 push	 0
  0004e	6a 00		 push	 0
  00050	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN33@Uninit_cop@3:
$LN4@Uninit_cop@3:

; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00055	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00058	e8 00 00 00 00	 call	 __EH_epilog3
  0005d	c3		 ret	 0
$LN31@Uninit_cop@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$528853 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$528853[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$3
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 373  : 
; 374  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

$LL14@Uninit_cop@4:
  00016	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00019	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001c	74 34		 je	 SHORT $LN4@Uninit_cop@4

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  0001e	50		 push	 eax
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	e8 00 00 00 00	 call	 ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
  00027	83 45 10 28	 add	 DWORD PTR __Dest$[ebp], 40 ; 00000028H
  0002b	83 45 08 28	 add	 DWORD PTR __First$[ebp], 40 ; 00000028H
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
  00031	eb e3		 jmp	 SHORT $LL14@Uninit_cop@4
__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00033	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00036	eb 0c		 jmp	 SHORT $LN48@Uninit_cop@4
$LL3@Uninit_cop@4:

; 379  : 		_Dest_val(_Al, _Next);

  00038	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00041	83 c6 28	 add	 esi, 40			; 00000028H
$LN48@Uninit_cop@4:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00044	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00047	75 ef		 jne	 SHORT $LL3@Uninit_cop@4

; 380  : 	_RERAISE;

  00049	6a 00		 push	 0
  0004b	6a 00		 push	 0
  0004d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN49@Uninit_cop@4:
$LN4@Uninit_cop@4:

; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00052	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00055	e8 00 00 00 00	 call	 __EH_epilog3
  0005a	c3		 ret	 0
$LN47@Uninit_cop@4:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
PUBLIC	??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z ; std::_Destroy_range<std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ForceInfo> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<WeaponInfo> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0c		 jmp	 SHORT $LN20@Destroy_ra
$LL3@Destroy_ra:

; 97   : 		_Dest_val(_Al, _First);

  00009	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00012	83 c6 28	 add	 esi, 40			; 00000028H
$LN20@Destroy_ra:

; 96   : 	for (; _First != _Last; ++_First)

  00015	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00018	75 ef		 jne	 SHORT $LL3@Destroy_ra
  0001a	5e		 pop	 esi

; 98   : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAUForceInfo@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@PAU2@00@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<ForceInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAUForceInfo@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$529046 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUForceInfo@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@PAU2@00@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<ForceInfo *>, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$529046[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAUForceInfo@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@PAU2@00@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<ForceInfo *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Uninitialized_copy<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$529054 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@@Z PROC ; std::_Uninitialized_copy<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$529054[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@@Z ENDP ; std::_Uninitialized_copy<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$529067 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$529067[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > > >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$529076 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$529076[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z PROC ; std::_Destroy_range<std::allocator<WeaponInfo> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0c		 jmp	 SHORT $LN24@Destroy_ra@2
$LL7@Destroy_ra@2:
  00009	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00012	83 c6 28	 add	 esi, 40			; 00000028H
$LN24@Destroy_ra@2:
  00015	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00018	75 ef		 jne	 SHORT $LL7@Destroy_ra@2
  0001a	5e		 pop	 esi

; 89   : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	?erase@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@0@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::erase
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?erase@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$529277 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@0@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$529277[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ForceInfo *,ForceInfo *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@0@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::erase
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAUWeaponInfo@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@PAU2@00@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<WeaponInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@PAUWeaponInfo@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$529367 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUWeaponInfo@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@PAU2@00@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<WeaponInfo *>, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$529367[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAUWeaponInfo@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@PAU2@00@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<WeaponInfo *>
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$529381 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$529381[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > > >
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN21@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN21@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	?clear@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T529474 = -4						; size = 4
?clear@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T529474[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@0@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::clear
_TEXT	ENDS
PUBLIC	?erase@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@0@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$529600 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@0@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 03		 mov	 DWORD PTR [ebx], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 27		 je	 SHORT $LN1@erase@2

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00017	57		 push	 edi
  00018	ff 75 10	 push	 DWORD PTR __Cat$529600[ebp]
  0001b	50		 push	 eax
  0001c	51		 push	 ecx
  0001d	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  00020	e8 00 00 00 00	 call	 ??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<WeaponInfo *,WeaponInfo *>
  00025	8b f8		 mov	 edi, eax

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00027	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0002a	50		 push	 eax
  0002b	ff 76 04	 push	 DWORD PTR [esi+4]
  0002e	57		 push	 edi
  0002f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
  00034	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1211 : 			this->_Mylast = _Ptr;

  00037	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  0003a	5f		 pop	 edi
$LN1@erase@2:

; 1212 : 			}
; 1213 : 		return (_First);

  0003b	5e		 pop	 esi
  0003c	8b c3		 mov	 eax, ebx
  0003e	5b		 pop	 ebx

; 1214 : 		}

  0003f	5d		 pop	 ebp
  00040	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@0@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::erase
_TEXT	ENDS
PUBLIC	??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$529689 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	6a 0c		 push	 12			; 0000000cH
  00025	59		 pop	 ecx
  00026	99		 cdq
  00027	f7 f9		 idiv	 ecx
  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy
  00031	84 c0		 test	 al, al
  00033	74 1f		 je	 SHORT $LN7@vector

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00035	ff 75 08	 push	 DWORD PTR __Cat$529689[ebp]
  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003d	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003f	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00042	52		 push	 edx
  00043	51		 push	 ecx
  00044	50		 push	 eax
  00045	57		 push	 edi
  00046	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00049	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
  0004e	83 c4 14	 add	 esp, 20			; 00000014H
  00051	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector:

; 543  : 			_CATCH_END
; 544  : 		}

  00054	8b c6		 mov	 eax, esi
  00056	e8 00 00 00 00	 call	 __EH_epilog3
  0005b	c2 04 00	 ret	 4
__catch$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy

; 542  : 			_RERAISE;

  00066	33 db		 xor	 ebx, ebx
  00068	53		 push	 ebx
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector:
$LN37@vector:
  0006f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
PUBLIC	??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 1e		 je	 SHORT $LN6@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0000e	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00011	50		 push	 eax
  00012	ff 76 04	 push	 DWORD PTR [esi+4]
  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0001c	ff 36		 push	 DWORD PTR [esi]
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00023	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00026	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00029	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0002d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00031	5e		 pop	 esi

; 1312 : 		}

  00032	c3		 ret	 0
?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	??4?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
tv551 = 8						; size = 4
__Cat$530048 = 8					; size = 1
__Cat$529945 = 8					; size = 1
__Cat$529923 = 8					; size = 1
__Cat$529825 = 8					; size = 1
$T529790 = 8						; size = 4
__Right$ = 8						; size = 4
??4?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::operator=, COMDAT
; _this$ = ecx

; 709  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 710  : 		if (this != &_Right)

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	0f 84 e2 00 00
	00		 je	 $LN1@operator

; 711  : 			{	// worth doing
; 712  : 			this->_Orphan_all();

  00012	53		 push	 ebx
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 713  : 
; 714  : 			if (_Right.size() == 0)

  00019	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  0001c	8b c3		 mov	 eax, ebx
  0001e	2b 07		 sub	 eax, DWORD PTR [edi]
  00020	6a 0c		 push	 12			; 0000000cH
  00022	99		 cdq
  00023	59		 pop	 ecx
  00024	f7 f9		 idiv	 ecx
  00026	89 45 08	 mov	 DWORD PTR tv551[ebp], eax
  00029	85 c0		 test	 eax, eax

; 715  : 				clear();	// new sequence empty, erase existing sequence

  0002b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002e	75 14		 jne	 SHORT $LN8@operator
  00030	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00032	50		 push	 eax
  00033	51		 push	 ecx
  00034	8d 45 08	 lea	 eax, DWORD PTR $T529790[ebp]
  00037	50		 push	 eax
  00038	8b ce		 mov	 ecx, esi
  0003a	e8 00 00 00 00	 call	 ?erase@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@0@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::erase

; 716  : 			else if (_Right.size() <= size())

  0003f	e9 af 00 00 00	 jmp	 $LN106@operator
$LN8@operator:
  00044	2b 06		 sub	 eax, DWORD PTR [esi]
  00046	6a 0c		 push	 12			; 0000000cH
  00048	99		 cdq
  00049	59		 pop	 ecx
  0004a	f7 f9		 idiv	 ecx
  0004c	8b c8		 mov	 ecx, eax
  0004e	39 4d 08	 cmp	 DWORD PTR tv551[ebp], ecx
  00051	77 22		 ja	 SHORT $LN6@operator

; 717  : 				{	// enough elements, copy new and destroy old
; 718  : 				pointer _Ptr = _STD _Copy_impl(_Right._Myfirst, _Right._Mylast,
; 719  : 					this->_Myfirst);	// copy new

  00053	ff 75 08	 push	 DWORD PTR __Cat$529825[ebp]
  00056	ff 36		 push	 DWORD PTR [esi]
  00058	53		 push	 ebx
  00059	ff 37		 push	 DWORD PTR [edi]
  0005b	e8 00 00 00 00	 call	 ??$_Copy_impl@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<ForceInfo *,ForceInfo *>

; 720  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 721  : 				this->_Mylast = this->_Myfirst + _Right.size();

  00060	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00063	2b 07		 sub	 eax, DWORD PTR [edi]
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	99		 cdq
  00069	6a 0c		 push	 12			; 0000000cH
  0006b	59		 pop	 ecx
  0006c	f7 f9		 idiv	 ecx
  0006e	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00071	03 06		 add	 eax, DWORD PTR [esi]

; 722  : 				}
; 723  : 			else if (_Right.size() <= capacity())

  00073	eb 7b		 jmp	 SHORT $LN107@operator
$LN6@operator:
  00075	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00078	2b 06		 sub	 eax, DWORD PTR [esi]
  0007a	6a 0c		 push	 12			; 0000000cH
  0007c	99		 cdq
  0007d	5b		 pop	 ebx
  0007e	f7 fb		 idiv	 ebx
  00080	39 45 08	 cmp	 DWORD PTR tv551[ebp], eax
  00083	77 2e		 ja	 SHORT $LN4@operator

; 724  : 				{	// enough room, copy and construct new
; 725  : 				pointer _Ptr = _Right._Myfirst + size();
; 726  : 				_STD _Copy_impl(_Right._Myfirst, _Ptr, this->_Myfirst);

  00085	ff 75 08	 push	 DWORD PTR __Cat$529923[ebp]
  00088	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0008b	8b 07		 mov	 eax, DWORD PTR [edi]
  0008d	ff 36		 push	 DWORD PTR [esi]
  0008f	8d 1c 08	 lea	 ebx, DWORD PTR [eax+ecx]
  00092	53		 push	 ebx
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ??$_Copy_impl@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<ForceInfo *,ForceInfo *>

; 727  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);

  00099	ff 75 08	 push	 DWORD PTR __Cat$529945[ebp]
  0009c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009f	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  000a2	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  000a5	51		 push	 ecx
  000a6	50		 push	 eax
  000a7	57		 push	 edi
  000a8	53		 push	 ebx
  000a9	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >
  000ae	83 c4 24	 add	 esp, 36			; 00000024H

; 728  : 				}
; 729  : 			else

  000b1	eb 3d		 jmp	 SHORT $LN107@operator
$LN4@operator:

; 730  : 				{	// not enough room, allocate new array and construct new
; 731  : 				if (this->_Myfirst != 0)

  000b3	8b 06		 mov	 eax, DWORD PTR [esi]
  000b5	85 c0		 test	 eax, eax
  000b7	74 07		 je	 SHORT $LN92@operator

; 732  : 					{	// discard old array
; 733  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 734  : 					this->_Alval.deallocate(this->_Myfirst,
; 735  : 						this->_Myend - this->_Myfirst);

  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000bf	59		 pop	 ecx
$LN92@operator:

; 736  : 					}
; 737  : 				if (_Buy(_Right.size()))

  000c0	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000c3	2b 07		 sub	 eax, DWORD PTR [edi]
  000c5	6a 0c		 push	 12			; 0000000cH
  000c7	59		 pop	 ecx
  000c8	99		 cdq
  000c9	f7 f9		 idiv	 ecx
  000cb	8b ce		 mov	 ecx, esi
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy
  000d3	84 c0		 test	 al, al
  000d5	74 1c		 je	 SHORT $LN106@operator

; 738  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 739  : 						this->_Myfirst);

  000d7	ff 75 08	 push	 DWORD PTR __Cat$530048[ebp]
  000da	8b 06		 mov	 eax, DWORD PTR [esi]
  000dc	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000df	8b 3f		 mov	 edi, DWORD PTR [edi]
  000e1	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  000e4	52		 push	 edx
  000e5	50		 push	 eax
  000e6	51		 push	 ecx
  000e7	57		 push	 edi
  000e8	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >
  000ed	83 c4 14	 add	 esp, 20			; 00000014H
$LN107@operator:
  000f0	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN106@operator:
  000f3	5b		 pop	 ebx
$LN1@operator:
  000f4	5f		 pop	 edi

; 740  : 				}
; 741  : 			}
; 742  : 		return (*this);

  000f5	8b c6		 mov	 eax, esi
  000f7	5e		 pop	 esi

; 743  : 		}

  000f8	5d		 pop	 ebp
  000f9	c2 04 00	 ret	 4
??4?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::operator=
_TEXT	ENDS
PUBLIC	?clear@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T530065 = -4						; size = 4
?clear@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T530065[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@0@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::clear
_TEXT	ENDS
PUBLIC	??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$530195 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	6a 28		 push	 40			; 00000028H
  00025	59		 pop	 ecx
  00026	99		 cdq
  00027	f7 f9		 idiv	 ecx
  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy
  00031	84 c0		 test	 al, al
  00033	74 1f		 je	 SHORT $LN7@vector@2

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00035	ff 75 08	 push	 DWORD PTR __Cat$530195[ebp]
  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003d	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003f	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00042	52		 push	 edx
  00043	51		 push	 ecx
  00044	50		 push	 eax
  00045	57		 push	 edi
  00046	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00049	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
  0004e	83 c4 14	 add	 esp, 20			; 00000014H
  00051	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector@2:

; 543  : 			_CATCH_END
; 544  : 		}

  00054	8b c6		 mov	 eax, esi
  00056	e8 00 00 00 00	 call	 __EH_epilog3
  0005b	c2 04 00	 ret	 4
__catch$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy

; 542  : 			_RERAISE;

  00066	33 db		 xor	 ebx, ebx
  00068	53		 push	 ebx
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector@2:
$LN37@vector@2:
  0006f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
PUBLIC	??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??4?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
tv551 = 8						; size = 4
__Cat$530409 = 8					; size = 1
__Cat$530372 = 8					; size = 1
__Cat$530349 = 8					; size = 1
__Cat$530318 = 8					; size = 1
$T530285 = 8						; size = 4
__Right$ = 8						; size = 4
??4?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::operator=, COMDAT
; _this$ = ecx

; 709  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 710  : 		if (this != &_Right)

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	0f 84 03 01 00
	00		 je	 $LN1@operator@2

; 711  : 			{	// worth doing
; 712  : 			this->_Orphan_all();

  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 713  : 
; 714  : 			if (_Right.size() == 0)

  00018	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001b	2b 07		 sub	 eax, DWORD PTR [edi]
  0001d	6a 28		 push	 40			; 00000028H
  0001f	99		 cdq
  00020	59		 pop	 ecx
  00021	f7 f9		 idiv	 ecx
  00023	89 45 08	 mov	 DWORD PTR tv551[ebp], eax
  00026	85 c0		 test	 eax, eax

; 715  : 				clear();	// new sequence empty, erase existing sequence

  00028	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002b	75 14		 jne	 SHORT $LN8@operator@2
  0002d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002f	50		 push	 eax
  00030	51		 push	 ecx
  00031	8d 45 08	 lea	 eax, DWORD PTR $T530285[ebp]
  00034	50		 push	 eax
  00035	8b ce		 mov	 ecx, esi
  00037	e8 00 00 00 00	 call	 ?erase@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@0@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::erase

; 716  : 			else if (_Right.size() <= size())

  0003c	e9 d4 00 00 00	 jmp	 $LN1@operator@2
$LN8@operator@2:
  00041	53		 push	 ebx
  00042	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00044	2b c3		 sub	 eax, ebx
  00046	6a 28		 push	 40			; 00000028H
  00048	99		 cdq
  00049	59		 pop	 ecx
  0004a	f7 f9		 idiv	 ecx
  0004c	8b c8		 mov	 ecx, eax
  0004e	39 4d 08	 cmp	 DWORD PTR tv551[ebp], ecx
  00051	77 33		 ja	 SHORT $LN6@operator@2

; 717  : 				{	// enough elements, copy new and destroy old
; 718  : 				pointer _Ptr = _STD _Copy_impl(_Right._Myfirst, _Right._Mylast,
; 719  : 					this->_Myfirst);	// copy new

  00053	ff 75 08	 push	 DWORD PTR __Cat$530318[ebp]
  00056	53		 push	 ebx
  00057	ff 77 04	 push	 DWORD PTR [edi+4]
  0005a	ff 37		 push	 DWORD PTR [edi]
  0005c	e8 00 00 00 00	 call	 ??$_Copy_impl@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<WeaponInfo *,WeaponInfo *>

; 720  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old

  00061	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00064	51		 push	 ecx
  00065	ff 76 04	 push	 DWORD PTR [esi+4]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >

; 721  : 				this->_Mylast = this->_Myfirst + _Right.size();

  0006e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00071	2b 07		 sub	 eax, DWORD PTR [edi]
  00073	83 c4 1c	 add	 esp, 28			; 0000001cH
  00076	99		 cdq
  00077	6a 28		 push	 40			; 00000028H
  00079	59		 pop	 ecx
  0007a	f7 f9		 idiv	 ecx
  0007c	6b c0 28	 imul	 eax, 40			; 00000028H
  0007f	03 06		 add	 eax, DWORD PTR [esi]

; 722  : 				}
; 723  : 			else if (_Right.size() <= capacity())

  00081	e9 8b 00 00 00	 jmp	 $LN73@operator@2
$LN6@operator@2:
  00086	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00089	2b c3		 sub	 eax, ebx
  0008b	6a 28		 push	 40			; 00000028H
  0008d	99		 cdq
  0008e	5b		 pop	 ebx
  0008f	f7 fb		 idiv	 ebx
  00091	39 45 08	 cmp	 DWORD PTR tv551[ebp], eax
  00094	77 2e		 ja	 SHORT $LN4@operator@2

; 724  : 				{	// enough room, copy and construct new
; 725  : 				pointer _Ptr = _Right._Myfirst + size();
; 726  : 				_STD _Copy_impl(_Right._Myfirst, _Ptr, this->_Myfirst);

  00096	ff 75 08	 push	 DWORD PTR __Cat$530349[ebp]
  00099	6b c9 28	 imul	 ecx, 40			; 00000028H
  0009c	8b 07		 mov	 eax, DWORD PTR [edi]
  0009e	ff 36		 push	 DWORD PTR [esi]
  000a0	8d 1c 08	 lea	 ebx, DWORD PTR [eax+ecx]
  000a3	53		 push	 ebx
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ??$_Copy_impl@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<WeaponInfo *,WeaponInfo *>

; 727  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);

  000aa	ff 75 08	 push	 DWORD PTR __Cat$530372[ebp]
  000ad	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b0	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  000b3	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  000b6	51		 push	 ecx
  000b7	50		 push	 eax
  000b8	57		 push	 edi
  000b9	53		 push	 ebx
  000ba	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >
  000bf	83 c4 24	 add	 esp, 36			; 00000024H

; 728  : 				}
; 729  : 			else

  000c2	eb 4d		 jmp	 SHORT $LN73@operator@2
$LN4@operator@2:

; 730  : 				{	// not enough room, allocate new array and construct new
; 731  : 				if (this->_Myfirst != 0)

  000c4	8b 06		 mov	 eax, DWORD PTR [esi]
  000c6	85 c0		 test	 eax, eax
  000c8	74 17		 je	 SHORT $LN62@operator@2

; 732  : 					{	// discard old array
; 733  : 					_Destroy(this->_Myfirst, this->_Mylast);

  000ca	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  000cd	51		 push	 ecx
  000ce	ff 76 04	 push	 DWORD PTR [esi+4]
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >

; 734  : 					this->_Alval.deallocate(this->_Myfirst,
; 735  : 						this->_Myend - this->_Myfirst);

  000d7	ff 36		 push	 DWORD PTR [esi]
  000d9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000de	83 c4 10	 add	 esp, 16			; 00000010H
$LN62@operator@2:

; 736  : 					}
; 737  : 				if (_Buy(_Right.size()))

  000e1	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000e4	2b 07		 sub	 eax, DWORD PTR [edi]
  000e6	6a 28		 push	 40			; 00000028H
  000e8	59		 pop	 ecx
  000e9	99		 cdq
  000ea	f7 f9		 idiv	 ecx
  000ec	8b ce		 mov	 ecx, esi
  000ee	50		 push	 eax
  000ef	e8 00 00 00 00	 call	 ?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy
  000f4	84 c0		 test	 al, al
  000f6	74 1c		 je	 SHORT $LN72@operator@2

; 738  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 739  : 						this->_Myfirst);

  000f8	ff 75 08	 push	 DWORD PTR __Cat$530409[ebp]
  000fb	8b 06		 mov	 eax, DWORD PTR [esi]
  000fd	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00100	8b 3f		 mov	 edi, DWORD PTR [edi]
  00102	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00105	52		 push	 edx
  00106	50		 push	 eax
  00107	51		 push	 ecx
  00108	57		 push	 edi
  00109	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >
  0010e	83 c4 14	 add	 esp, 20			; 00000014H
$LN73@operator@2:
  00111	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN72@operator@2:
  00114	5b		 pop	 ebx
$LN1@operator@2:
  00115	5f		 pop	 edi

; 740  : 				}
; 741  : 			}
; 742  : 		return (*this);

  00116	8b c6		 mov	 eax, esi
  00118	5e		 pop	 esi

; 743  : 		}

  00119	5d		 pop	 ebp
  0011a	c2 04 00	 ret	 4
??4?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::operator=
_TEXT	ENDS
PUBLIC	??0AttackAttribute@@QAE@ABU0@@Z			; AttackAttribute::AttackAttribute
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0AttackAttribute@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$2
__ehfuncinfo$??0AttackAttribute@@QAE@ABU0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0AttackAttribute@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0AttackAttribute@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0AttackAttribute@@QAE@ABU0@@Z PROC			; AttackAttribute::AttackAttribute, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0AttackAttribute@@QAE@ABU0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00014	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  0001a	57		 push	 edi
  0001b	ff d3		 call	 ebx
  0001d	d9 47 10	 fld	 DWORD PTR [edi+16]
  00020	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00024	d9 5e 10	 fstp	 DWORD PTR [esi+16]
  00027	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  0002a	50		 push	 eax
  0002b	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0002e	ff d3		 call	 ebx
  00030	d9 47 24	 fld	 DWORD PTR [edi+36]
  00033	8d 47 28	 lea	 eax, DWORD PTR [edi+40]
  00036	d9 5e 24	 fstp	 DWORD PTR [esi+36]
  00039	50		 push	 eax
  0003a	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  0003d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00041	e8 00 00 00 00	 call	 ??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
  00046	8d 47 38	 lea	 eax, DWORD PTR [edi+56]
  00049	50		 push	 eax
  0004a	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  0004d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00051	e8 00 00 00 00	 call	 ??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
  00056	8b 47 48	 mov	 eax, DWORD PTR [edi+72]
  00059	89 46 48	 mov	 DWORD PTR [esi+72], eax
  0005c	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  0005f	89 46 4c	 mov	 DWORD PTR [esi+76], eax
  00062	8b c6		 mov	 eax, esi
  00064	e8 00 00 00 00	 call	 __EH_epilog3
  00069	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 28	 add	 ecx, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
__ehhandler$??0AttackAttribute@@QAE@ABU0@@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0AttackAttribute@@QAE@ABU0@@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0AttackAttribute@@QAE@ABU0@@Z ENDP			; AttackAttribute::AttackAttribute
PUBLIC	??$_Construct@UAttackAttribute@@ABU1@@std@@YAXPAUAttackAttribute@@ABU1@@Z ; std::_Construct<AttackAttribute,AttackAttribute const &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@UAttackAttribute@@ABU1@@std@@YAXPAUAttackAttribute@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UAttackAttribute@@ABU1@@std@@YAXPAUAttackAttribute@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UAttackAttribute@@ABU1@@std@@YAXPAUAttackAttribute@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UAttackAttribute@@ABU1@@std@@YAXPAUAttackAttribute@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UAttackAttribute@@ABU1@@std@@YAXPAUAttackAttribute@@ABU1@@Z
_TEXT	SEGMENT
$T530431 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UAttackAttribute@@ABU1@@std@@YAXPAUAttackAttribute@@ABU1@@Z PROC ; std::_Construct<AttackAttribute,AttackAttribute const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@UAttackAttribute@@ABU1@@std@@YAXPAUAttackAttribute@@ABU1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T530431[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 08		 je	 SHORT $LN3@Construct@3
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	e8 00 00 00 00	 call	 ??0AttackAttribute@@QAE@ABU0@@Z
$LN3@Construct@3:

; 49   : 	}

  00025	e8 00 00 00 00	 call	 __EH_epilog3
  0002a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UAttackAttribute@@ABU1@@std@@YAXPAUAttackAttribute@@ABU1@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T530431[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@UAttackAttribute@@ABU1@@std@@YAXPAUAttackAttribute@@ABU1@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UAttackAttribute@@ABU1@@std@@YAXPAUAttackAttribute@@ABU1@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UAttackAttribute@@ABU1@@std@@YAXPAUAttackAttribute@@ABU1@@Z ENDP ; std::_Construct<AttackAttribute,AttackAttribute const &>
PUBLIC	??0AttackAttribute@@QAE@XZ			; AttackAttribute::AttackAttribute
EXTRN	?Init@AttackAttribute@@QAEXXZ:PROC		; AttackAttribute::Init
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0AttackAttribute@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$3
__ehfuncinfo$??0AttackAttribute@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0AttackAttribute@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.h
xdata$x	ENDS
;	COMDAT ??0AttackAttribute@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0AttackAttribute@@QAE@XZ PROC				; AttackAttribute::AttackAttribute, COMDAT
; _this$ = ecx

; 107  : 	AttackAttribute()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0AttackAttribute@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	ff d7		 call	 edi
  00019	33 db		 xor	 ebx, ebx
  0001b	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0001e	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00021	ff d7		 call	 edi
  00023	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00026	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00029	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
  0002c	89 5e 38	 mov	 DWORD PTR [esi+56], ebx
  0002f	89 5e 3c	 mov	 DWORD PTR [esi+60], ebx
  00032	89 5e 40	 mov	 DWORD PTR [esi+64], ebx

; 108  : 	{
; 109  : 		Init();

  00035	8b ce		 mov	 ecx, esi
  00037	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0003b	e8 00 00 00 00	 call	 ?Init@AttackAttribute@@QAEXXZ ; AttackAttribute::Init

; 110  : 	}

  00040	8b c6		 mov	 eax, esi
  00042	e8 00 00 00 00	 call	 __EH_epilog3
  00047	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AttackAttribute@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@XZ$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 28	 add	 ecx, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
__unwindfunclet$??0AttackAttribute@@QAE@XZ$3:
  00020	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	83 c1 38	 add	 ecx, 56			; 00000038H
  00026	e9 00 00 00 00	 jmp	 ??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >
__ehhandler$??0AttackAttribute@@QAE@XZ:
  0002b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00032	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0AttackAttribute@@QAE@XZ
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0AttackAttribute@@QAE@XZ ENDP				; AttackAttribute::AttackAttribute
PUBLIC	??1AttackAttribute@@QAE@XZ			; AttackAttribute::~AttackAttribute
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1AttackAttribute@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1AttackAttribute@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1AttackAttribute@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1AttackAttribute@@QAE@XZ$2
__ehfuncinfo$??1AttackAttribute@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1AttackAttribute@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1AttackAttribute@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1AttackAttribute@@QAE@XZ PROC				; AttackAttribute::~AttackAttribute, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1AttackAttribute@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  00014	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0001b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
  00020	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00023	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00027	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
  0002c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00032	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00035	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00039	ff d7		 call	 edi
  0003b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0003f	8b ce		 mov	 ecx, esi
  00041	ff d7		 call	 edi
  00043	e8 00 00 00 00	 call	 __EH_epilog3
  00048	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1AttackAttribute@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1AttackAttribute@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1AttackAttribute@@QAE@XZ$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 28	 add	 ecx, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
__ehhandler$??1AttackAttribute@@QAE@XZ:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1AttackAttribute@@QAE@XZ
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1AttackAttribute@@QAE@XZ ENDP				; AttackAttribute::~AttackAttribute
PUBLIC	??4AttackAttribute@@QAEAAU0@ABU0@@Z		; AttackAttribute::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4AttackAttribute@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4AttackAttribute@@QAEAAU0@ABU0@@Z PROC		; AttackAttribute::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  0000f	57		 push	 edi
  00010	8b f1		 mov	 esi, ecx
  00012	ff d3		 call	 ebx
  00014	d9 47 10	 fld	 DWORD PTR [edi+16]
  00017	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  0001a	d9 5e 10	 fstp	 DWORD PTR [esi+16]
  0001d	50		 push	 eax
  0001e	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00021	ff d3		 call	 ebx
  00023	d9 47 24	 fld	 DWORD PTR [edi+36]
  00026	8d 47 28	 lea	 eax, DWORD PTR [edi+40]
  00029	d9 5e 24	 fstp	 DWORD PTR [esi+36]
  0002c	50		 push	 eax
  0002d	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00030	e8 00 00 00 00	 call	 ??4?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::operator=
  00035	8d 47 38	 lea	 eax, DWORD PTR [edi+56]
  00038	50		 push	 eax
  00039	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  0003c	e8 00 00 00 00	 call	 ??4?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::operator=
  00041	8b 47 48	 mov	 eax, DWORD PTR [edi+72]
  00044	89 46 48	 mov	 DWORD PTR [esi+72], eax
  00047	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  0004a	89 46 4c	 mov	 DWORD PTR [esi+76], eax
  0004d	5f		 pop	 edi
  0004e	8b c6		 mov	 eax, esi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
??4AttackAttribute@@QAEAAU0@ABU0@@Z ENDP		; AttackAttribute::operator=
_TEXT	ENDS
PUBLIC	??_GAttackAttribute@@QAEPAXI@Z			; AttackAttribute::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GAttackAttribute@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GAttackAttribute@@QAEPAXI@Z PROC			; AttackAttribute::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@3
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@3:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GAttackAttribute@@QAEPAXI@Z ENDP			; AttackAttribute::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UAttackAttribute@@@std@@QAEXPAUAttackAttribute@@ABU3@@Z ; std::allocator<AttackAttribute>::construct
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@UAttackAttribute@@@std@@QAEXPAUAttackAttribute@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UAttackAttribute@@@std@@QAEXPAUAttackAttribute@@ABU3@@Z PROC ; std::allocator<AttackAttribute>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UAttackAttribute@@ABU1@@std@@YAXPAUAttackAttribute@@ABU1@@Z ; std::_Construct<AttackAttribute,AttackAttribute const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@UAttackAttribute@@@std@@QAEXPAUAttackAttribute@@ABU3@@Z ENDP ; std::allocator<AttackAttribute>::construct
_TEXT	ENDS
PUBLIC	??$_Move@PAUAttackAttribute@@PAU1@@std@@YAPAUAttackAttribute@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<AttackAttribute *,AttackAttribute *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUAttackAttribute@@PAU1@@std@@YAPAUAttackAttribute@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUAttackAttribute@@PAU1@@std@@YAPAUAttackAttribute@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<AttackAttribute *,AttackAttribute *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 10		 jmp	 SHORT $LN11@Move@3
$LL3@Move@3:

; 2514 : 		*_Dest = _STD move(*_First);

  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ??4AttackAttribute@@QAEAAU0@ABU0@@Z
  00012	83 45 10 50	 add	 DWORD PTR __Dest$[ebp], 80 ; 00000050H
  00016	83 c6 50	 add	 esi, 80			; 00000050H
$LN11@Move@3:

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	75 eb		 jne	 SHORT $LL3@Move@3

; 2515 : 	return (_Dest);

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00021	5e		 pop	 esi

; 2516 : 	}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Move@PAUAttackAttribute@@PAU1@@std@@YAPAUAttackAttribute@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<AttackAttribute *,AttackAttribute *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UAttackAttribute@@@std@@YAXPAUAttackAttribute@@@Z ; std::_Destroy<AttackAttribute>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UAttackAttribute@@@std@@YAXPAUAttackAttribute@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UAttackAttribute@@@std@@YAXPAUAttackAttribute@@@Z PROC ; std::_Destroy<AttackAttribute>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 64   : 	}

  00006	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  00007	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
??$_Destroy@UAttackAttribute@@@std@@YAXPAUAttackAttribute@@@Z ENDP ; std::_Destroy<AttackAttribute>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UAttackAttribute@@@std@@UAttackAttribute@@ABU3@@std@@YAXAAV?$allocator@UAttackAttribute@@@0@PAUAttackAttribute@@ABU2@@Z ; std::_Cons_val<std::allocator<AttackAttribute>,AttackAttribute,AttackAttribute const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UAttackAttribute@@@std@@UAttackAttribute@@ABU3@@std@@YAXAAV?$allocator@UAttackAttribute@@@0@PAUAttackAttribute@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UAttackAttribute@@@std@@UAttackAttribute@@ABU3@@std@@YAXAAV?$allocator@UAttackAttribute@@@0@PAUAttackAttribute@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<AttackAttribute>,AttackAttribute,AttackAttribute const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UAttackAttribute@@ABU1@@std@@YAXPAUAttackAttribute@@ABU1@@Z ; std::_Construct<AttackAttribute,AttackAttribute const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@UAttackAttribute@@@std@@UAttackAttribute@@ABU3@@std@@YAXAAV?$allocator@UAttackAttribute@@@0@PAUAttackAttribute@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<AttackAttribute>,AttackAttribute,AttackAttribute const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUAttackAttribute@@PAU1@@std@@YAPAUAttackAttribute@@PAU1@00@Z ; std::_Move<AttackAttribute *,AttackAttribute *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUAttackAttribute@@PAU1@@std@@YAPAUAttackAttribute@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$530574 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUAttackAttribute@@PAU1@@std@@YAPAUAttackAttribute@@PAU1@00@Z PROC ; std::_Move<AttackAttribute *,AttackAttribute *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$530574[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAUAttackAttribute@@PAU1@@std@@YAPAUAttackAttribute@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<AttackAttribute *,AttackAttribute *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAUAttackAttribute@@PAU1@@std@@YAPAUAttackAttribute@@PAU1@00@Z ENDP ; std::_Move<AttackAttribute *,AttackAttribute *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UAttackAttribute@@@std@@QAEXPAUAttackAttribute@@@Z ; std::allocator<AttackAttribute>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UAttackAttribute@@@std@@QAEXPAUAttackAttribute@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UAttackAttribute@@@std@@QAEXPAUAttackAttribute@@@Z PROC ; std::allocator<AttackAttribute>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ

; 214  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?destroy@?$allocator@UAttackAttribute@@@std@@QAEXPAUAttackAttribute@@@Z ENDP ; std::allocator<AttackAttribute>::destroy
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UAttackAttribute@@@std@@UAttackAttribute@@@std@@YAXAAV?$allocator@UAttackAttribute@@@0@PAUAttackAttribute@@@Z ; std::_Dest_val<std::allocator<AttackAttribute>,AttackAttribute>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@UAttackAttribute@@@std@@UAttackAttribute@@@std@@YAXAAV?$allocator@UAttackAttribute@@@0@PAUAttackAttribute@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UAttackAttribute@@@std@@UAttackAttribute@@@std@@YAXAAV?$allocator@UAttackAttribute@@@0@PAUAttackAttribute@@@Z PROC ; std::_Dest_val<std::allocator<AttackAttribute>,AttackAttribute>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]

; 288  : 	}

  00006	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  00007	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
??$_Dest_val@V?$allocator@UAttackAttribute@@@std@@UAttackAttribute@@@std@@YAXAAV?$allocator@UAttackAttribute@@@0@PAUAttackAttribute@@@Z ENDP ; std::_Dest_val<std::allocator<AttackAttribute>,AttackAttribute>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@V?$allocator@UAttackAttribute@@@2@@std@@YAPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@0PAU1@AAV?$allocator@UAttackAttribute@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >,AttackAttribute *,std::allocator<AttackAttribute> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@V?$allocator@UAttackAttribute@@@2@@std@@YAPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@0PAU1@AAV?$allocator@UAttackAttribute@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@V?$allocator@UAttackAttribute@@@2@@std@@YAPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@0PAU1@AAV?$allocator@UAttackAttribute@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@V?$allocator@UAttackAttribute@@@2@@std@@YAPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@0PAU1@AAV?$allocator@UAttackAttribute@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@V?$allocator@UAttackAttribute@@@2@@std@@YAPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@0PAU1@AAV?$allocator@UAttackAttribute@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@V?$allocator@UAttackAttribute@@@2@@std@@YAPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@0PAU1@AAV?$allocator@UAttackAttribute@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@V?$allocator@UAttackAttribute@@@2@@std@@YAPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@0PAU1@AAV?$allocator@UAttackAttribute@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@V?$allocator@UAttackAttribute@@@2@@std@@YAPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@0PAU1@AAV?$allocator@UAttackAttribute@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@V?$allocator@UAttackAttribute@@@2@@std@@YAPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@0PAU1@AAV?$allocator@UAttackAttribute@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@V?$allocator@UAttackAttribute@@@2@@std@@YAPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@0PAU1@AAV?$allocator@UAttackAttribute@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@V?$allocator@UAttackAttribute@@@2@@std@@YAPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@0PAU1@AAV?$allocator@UAttackAttribute@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >,AttackAttribute *,std::allocator<AttackAttribute> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@V?$allocator@UAttackAttribute@@@2@@std@@YAPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@0PAU1@AAV?$allocator@UAttackAttribute@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 373  : 
; 374  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

$LL14@Uninit_cop@5:
  00016	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00019	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001c	74 32		 je	 SHORT $LN4@Uninit_cop@5

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  0001e	50		 push	 eax
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	e8 00 00 00 00	 call	 ??$_Construct@UAttackAttribute@@ABU1@@std@@YAXPAUAttackAttribute@@ABU1@@Z ; std::_Construct<AttackAttribute,AttackAttribute const &>
  00027	83 45 10 50	 add	 DWORD PTR __Dest$[ebp], 80 ; 00000050H
  0002b	83 45 08 50	 add	 DWORD PTR __First$[ebp], 80 ; 00000050H
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
  00031	eb e3		 jmp	 SHORT $LL14@Uninit_cop@5
__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@V?$allocator@UAttackAttribute@@@2@@std@@YAPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@0PAU1@AAV?$allocator@UAttackAttribute@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00033	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00036	eb 0a		 jmp	 SHORT $LN45@Uninit_cop@5
$LL3@Uninit_cop@5:

; 379  : 		_Dest_val(_Al, _Next);

  00038	8b ce		 mov	 ecx, esi
  0003a	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  0003f	83 c6 50	 add	 esi, 80			; 00000050H
$LN45@Uninit_cop@5:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00042	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00045	75 f1		 jne	 SHORT $LL3@Uninit_cop@5

; 380  : 	_RERAISE;

  00047	6a 00		 push	 0
  00049	6a 00		 push	 0
  0004b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN46@Uninit_cop@5:
$LN4@Uninit_cop@5:

; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00050	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00053	e8 00 00 00 00	 call	 __EH_epilog3
  00058	c3		 ret	 0
$LN44@Uninit_cop@5:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@V?$allocator@UAttackAttribute@@@2@@std@@YAPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@0PAU1@AAV?$allocator@UAttackAttribute@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@V?$allocator@UAttackAttribute@@@2@@std@@YAPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@0PAU1@AAV?$allocator@UAttackAttribute@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@V?$allocator@UAttackAttribute@@@2@@std@@YAPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@0PAU1@AAV?$allocator@UAttackAttribute@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >,AttackAttribute *,std::allocator<AttackAttribute> >
PUBLIC	??$_Destroy_range@V?$allocator@UAttackAttribute@@@std@@@std@@YAXPAUAttackAttribute@@0AAV?$allocator@UAttackAttribute@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<AttackAttribute> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UAttackAttribute@@@std@@@std@@YAXPAUAttackAttribute@@0AAV?$allocator@UAttackAttribute@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UAttackAttribute@@@std@@@std@@YAXPAUAttackAttribute@@0AAV?$allocator@UAttackAttribute@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<AttackAttribute> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0a		 jmp	 SHORT $LN17@Destroy_ra@3
$LL3@Destroy_ra@3:

; 97   : 		_Dest_val(_Al, _First);

  00009	8b ce		 mov	 ecx, esi
  0000b	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  00010	83 c6 50	 add	 esi, 80			; 00000050H
$LN17@Destroy_ra@3:

; 96   : 	for (; _First != _Last; ++_First)

  00013	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00016	75 f1		 jne	 SHORT $LL3@Destroy_ra@3
  00018	5e		 pop	 esi

; 98   : 	}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Destroy_range@V?$allocator@UAttackAttribute@@@std@@@std@@YAXPAUAttackAttribute@@0AAV?$allocator@UAttackAttribute@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<AttackAttribute> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@V?$allocator@UAttackAttribute@@@2@@std@@YAPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@0PAU1@AAV?$allocator@UAttackAttribute@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >,AttackAttribute *,std::allocator<AttackAttribute> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@V?$allocator@UAttackAttribute@@@2@@std@@YAPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@0PAU1@AAV?$allocator@UAttackAttribute@@@0@@Z
_TEXT	SEGMENT
__Cat$530732 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@V?$allocator@UAttackAttribute@@@2@@std@@YAPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@0PAU1@AAV?$allocator@UAttackAttribute@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >,AttackAttribute *,std::allocator<AttackAttribute> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$530732[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@V?$allocator@UAttackAttribute@@@2@@std@@YAPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@0PAU1@AAV?$allocator@UAttackAttribute@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >,AttackAttribute *,std::allocator<AttackAttribute> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@V?$allocator@UAttackAttribute@@@2@@std@@YAPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@0PAU1@AAV?$allocator@UAttackAttribute@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >,AttackAttribute *,std::allocator<AttackAttribute> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UAttackAttribute@@@std@@@std@@YAXPAUAttackAttribute@@0AAV?$allocator@UAttackAttribute@@@0@@Z ; std::_Destroy_range<std::allocator<AttackAttribute> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UAttackAttribute@@@std@@@std@@YAXPAUAttackAttribute@@0AAV?$allocator@UAttackAttribute@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UAttackAttribute@@@std@@@std@@YAXPAUAttackAttribute@@0AAV?$allocator@UAttackAttribute@@@0@@Z PROC ; std::_Destroy_range<std::allocator<AttackAttribute> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0a		 jmp	 SHORT $LN21@Destroy_ra@4
$LL7@Destroy_ra@4:
  00009	8b ce		 mov	 ecx, esi
  0000b	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  00010	83 c6 50	 add	 esi, 80			; 00000050H
$LN21@Destroy_ra@4:
  00013	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00016	75 f1		 jne	 SHORT $LL7@Destroy_ra@4
  00018	5e		 pop	 esi

; 89   : 	}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Destroy_range@V?$allocator@UAttackAttribute@@@std@@@std@@YAXPAUAttackAttribute@@0AAV?$allocator@UAttackAttribute@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<AttackAttribute> >
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@IAEPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@1@0PAU2@@Z ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@IAEPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$530799 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@IAEPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$530799[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@V?$allocator@UAttackAttribute@@@2@@std@@YAPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@0PAU1@AAV?$allocator@UAttackAttribute@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >,AttackAttribute *,std::allocator<AttackAttribute> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@IAEPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > > >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@IAEXPAUAttackAttribute@@0@Z ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@IAEXPAUAttackAttribute@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@IAEXPAUAttackAttribute@@0@Z PROC ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0a		 jmp	 SHORT $LN23@Destroy
$LL9@Destroy:
  00009	8b ce		 mov	 ecx, esi
  0000b	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  00010	83 c6 50	 add	 esi, 80			; 00000050H
$LN23@Destroy:
  00013	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00016	75 f1		 jne	 SHORT $LL9@Destroy
  00018	5e		 pop	 esi

; 1271 : 		}

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?_Destroy@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@IAEXPAUAttackAttribute@@0@Z ENDP ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::_Destroy
_TEXT	ENDS
PUBLIC	?erase@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@0@Z ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T531008 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$530952 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@0@Z PROC ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00004	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __First_arg$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 4d 10	 cmp	 ecx, DWORD PTR __Last_arg$[ebp]
  00012	74 37		 je	 SHORT $LN1@erase@3

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00017	53		 push	 ebx
  00018	57		 push	 edi
  00019	ff 75 10	 push	 DWORD PTR __Cat$530952[ebp]
  0001c	51		 push	 ecx
  0001d	50		 push	 eax
  0001e	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Move@PAUAttackAttribute@@PAU1@@std@@YAPAUAttackAttribute@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<AttackAttribute *,AttackAttribute *>

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00026	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00029	8b d8		 mov	 ebx, eax
  0002b	83 c4 10	 add	 esp, 16			; 00000010H
  0002e	89 5d fc	 mov	 DWORD PTR $T531008[ebp], ebx
  00031	3b df		 cmp	 ebx, edi
  00033	74 11		 je	 SHORT $LN36@erase@3
$LL52@erase@3:
  00035	8b 4d fc	 mov	 ecx, DWORD PTR $T531008[ebp]
  00038	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  0003d	83 45 fc 50	 add	 DWORD PTR $T531008[ebp], 80 ; 00000050H
  00041	39 7d fc	 cmp	 DWORD PTR $T531008[ebp], edi
  00044	75 ef		 jne	 SHORT $LL52@erase@3
$LN36@erase@3:

; 1211 : 			this->_Mylast = _Ptr;

  00046	5f		 pop	 edi
  00047	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0004a	5b		 pop	 ebx
$LN1@erase@3:

; 1212 : 			}
; 1213 : 		return (_First);

  0004b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0004e	5e		 pop	 esi

; 1214 : 		}

  0004f	c9		 leave
  00050	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@0@Z ENDP ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@IAEXXZ ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@IAEXXZ PROC ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 27		 je	 SHORT $LN24@Tidy@3

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	53		 push	 ebx
  00009	57		 push	 edi
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  00010	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00013	8b 3e		 mov	 edi, DWORD PTR [esi]
  00015	eb 0a		 jmp	 SHORT $LN28@Tidy@3
$LL12@Tidy@3:
  00017	8b cf		 mov	 ecx, edi
  00019	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  0001e	83 c7 50	 add	 edi, 80			; 00000050H
$LN28@Tidy@3:
  00021	3b fb		 cmp	 edi, ebx
  00023	75 f2		 jne	 SHORT $LL12@Tidy@3

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00025	ff 36		 push	 DWORD PTR [esi]
  00027	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002c	59		 pop	 ecx
  0002d	5f		 pop	 edi
  0002e	5b		 pop	 ebx
$LN24@Tidy@3:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  0002f	33 c0		 xor	 eax, eax
  00031	89 06		 mov	 DWORD PTR [esi], eax

; 1310 : 		this->_Mylast = 0;

  00033	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1311 : 		this->_Myend = 0;

  00036	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00039	5e		 pop	 esi

; 1312 : 		}

  0003a	c3		 ret	 0
?_Tidy@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@IAEXXZ ENDP ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@ABV01@@Z ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::vector<AttackAttribute,std::allocator<AttackAttribute> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$531240 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::vector<AttackAttribute,std::allocator<AttackAttribute> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	6a 50		 push	 80			; 00000050H
  00025	59		 pop	 ecx
  00026	99		 cdq
  00027	f7 f9		 idiv	 ecx
  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?_Buy@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@IAE_NI@Z ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::_Buy
  00031	84 c0		 test	 al, al
  00033	74 1f		 je	 SHORT $LN7@vector@3

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00035	ff 75 08	 push	 DWORD PTR __Cat$531240[ebp]
  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003d	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003f	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00042	52		 push	 edx
  00043	51		 push	 ecx
  00044	50		 push	 eax
  00045	57		 push	 edi
  00046	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00049	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@std@@PAUAttackAttribute@@V?$allocator@UAttackAttribute@@@2@@std@@YAPAUAttackAttribute@@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@0@0PAU1@AAV?$allocator@UAttackAttribute@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<AttackAttribute,std::allocator<AttackAttribute> > >,AttackAttribute *,std::allocator<AttackAttribute> >
  0004e	83 c4 14	 add	 esp, 20			; 00000014H
  00051	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector@3:

; 543  : 			_CATCH_END
; 544  : 		}

  00054	8b c6		 mov	 eax, esi
  00056	e8 00 00 00 00	 call	 __EH_epilog3
  0005b	c2 04 00	 ret	 4
__catch$??0?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@IAEXXZ ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::_Tidy

; 542  : 			_RERAISE;

  00066	33 db		 xor	 ebx, ebx
  00068	53		 push	 ebx
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector@3:
$LN37@vector@3:
  0006f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::vector<AttackAttribute,std::allocator<AttackAttribute> >
PUBLIC	??1?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@XZ ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::~vector<AttackAttribute,std::allocator<AttackAttribute> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@XZ PROC ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::~vector<AttackAttribute,std::allocator<AttackAttribute> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@IAEXXZ ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::_Tidy
??1?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@XZ ENDP ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::~vector<AttackAttribute,std::allocator<AttackAttribute> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAEXXZ ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T531269 = -4						; size = 4
?clear@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAEXXZ PROC ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T531269[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@0@Z ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAEXXZ ENDP ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::clear
_TEXT	ENDS
PUBLIC	??1tagWitchFlyInfo@@QAE@XZ			; tagWitchFlyInfo::~tagWitchFlyInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1tagWitchFlyInfo@@QAE@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??1tagWitchFlyInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1tagWitchFlyInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1tagWitchFlyInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1tagWitchFlyInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1tagWitchFlyInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1tagWitchFlyInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1tagWitchFlyInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1tagWitchFlyInfo@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1tagWitchFlyInfo@@QAE@XZ$6
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1tagWitchFlyInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1tagWitchFlyInfo@@QAE@XZ PROC				; tagWitchFlyInfo::~tagWitchFlyInfo, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1tagWitchFlyInfo@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	8d 8f e0 00 00
	00		 lea	 ecx, DWORD PTR [edi+224]
  00017	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  0001e	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@IAEXXZ ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::_Tidy
  00023	8d 8f 90 00 00
	00		 lea	 ecx, DWORD PTR [edi+144]
  00029	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0002d	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  00032	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00038	8d 4f 7c	 lea	 ecx, DWORD PTR [edi+124]
  0003b	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0003f	ff d6		 call	 esi
  00041	8d 4f 68	 lea	 ecx, DWORD PTR [edi+104]
  00044	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00048	ff d6		 call	 esi
  0004a	8d 4f 48	 lea	 ecx, DWORD PTR [edi+72]
  0004d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00051	ff d6		 call	 esi
  00053	8d 4f 34	 lea	 ecx, DWORD PTR [edi+52]
  00056	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0005a	ff d6		 call	 esi
  0005c	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  0005f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00063	ff d6		 call	 esi
  00065	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00069	8b cf		 mov	 ecx, edi
  0006b	ff d6		 call	 esi
  0006d	e8 00 00 00 00	 call	 __EH_epilog3
  00072	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1tagWitchFlyInfo@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1tagWitchFlyInfo@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1tagWitchFlyInfo@@QAE@XZ$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 34	 add	 ecx, 52			; 00000034H
  0001b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1tagWitchFlyInfo@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 48	 add	 ecx, 72			; 00000048H
  00027	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1tagWitchFlyInfo@@QAE@XZ$4:
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 c1 68	 add	 ecx, 104		; 00000068H
  00033	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1tagWitchFlyInfo@@QAE@XZ$5:
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	83 c1 7c	 add	 ecx, 124		; 0000007cH
  0003f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1tagWitchFlyInfo@@QAE@XZ$6:
  00045	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  0004e	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__ehhandler$??1tagWitchFlyInfo@@QAE@XZ:
  00053	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00057	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005a	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0005d	33 c8		 xor	 ecx, eax
  0005f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00064	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1tagWitchFlyInfo@@QAE@XZ
  00069	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1tagWitchFlyInfo@@QAE@XZ ENDP				; tagWitchFlyInfo::~tagWitchFlyInfo
PUBLIC	??0tagWitchFlyInfo@@QAE@ABU0@@Z			; tagWitchFlyInfo::tagWitchFlyInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0tagWitchFlyInfo@@QAE@ABU0@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0tagWitchFlyInfo@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0tagWitchFlyInfo@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0tagWitchFlyInfo@@QAE@ABU0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0tagWitchFlyInfo@@QAE@ABU0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0tagWitchFlyInfo@@QAE@ABU0@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0tagWitchFlyInfo@@QAE@ABU0@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0tagWitchFlyInfo@@QAE@ABU0@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0tagWitchFlyInfo@@QAE@ABU0@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0tagWitchFlyInfo@@QAE@ABU0@@Z$6
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0tagWitchFlyInfo@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0tagWitchFlyInfo@@QAE@ABU0@@Z PROC			; tagWitchFlyInfo::tagWitchFlyInfo, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0tagWitchFlyInfo@@QAE@ABU0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00014	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  0001a	57		 push	 edi
  0001b	ff d3		 call	 ebx
  0001d	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00020	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00024	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00027	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  0002a	50		 push	 eax
  0002b	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0002e	ff d3		 call	 ebx
  00030	d9 47 24	 fld	 DWORD PTR [edi+36]
  00033	d9 5e 24	 fstp	 DWORD PTR [esi+36]
  00036	8d 4e 34	 lea	 ecx, DWORD PTR [esi+52]
  00039	d9 47 28	 fld	 DWORD PTR [edi+40]
  0003c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00040	d9 5e 28	 fstp	 DWORD PTR [esi+40]
  00043	d9 47 2c	 fld	 DWORD PTR [edi+44]
  00046	d9 5e 2c	 fstp	 DWORD PTR [esi+44]
  00049	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  0004c	89 46 30	 mov	 DWORD PTR [esi+48], eax
  0004f	8d 47 34	 lea	 eax, DWORD PTR [edi+52]
  00052	50		 push	 eax
  00053	ff d3		 call	 ebx
  00055	d9 47 44	 fld	 DWORD PTR [edi+68]
  00058	8d 47 48	 lea	 eax, DWORD PTR [edi+72]
  0005b	d9 5e 44	 fstp	 DWORD PTR [esi+68]
  0005e	50		 push	 eax
  0005f	8d 4e 48	 lea	 ecx, DWORD PTR [esi+72]
  00062	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00066	ff d3		 call	 ebx
  00068	d9 47 58	 fld	 DWORD PTR [edi+88]
  0006b	d9 5e 58	 fstp	 DWORD PTR [esi+88]
  0006e	8d 4e 68	 lea	 ecx, DWORD PTR [esi+104]
  00071	d9 47 5c	 fld	 DWORD PTR [edi+92]
  00074	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00078	d9 5e 5c	 fstp	 DWORD PTR [esi+92]
  0007b	d9 47 60	 fld	 DWORD PTR [edi+96]
  0007e	d9 5e 60	 fstp	 DWORD PTR [esi+96]
  00081	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
  00084	89 46 64	 mov	 DWORD PTR [esi+100], eax
  00087	8d 47 68	 lea	 eax, DWORD PTR [edi+104]
  0008a	50		 push	 eax
  0008b	ff d3		 call	 ebx
  0008d	8b 47 78	 mov	 eax, DWORD PTR [edi+120]
  00090	89 46 78	 mov	 DWORD PTR [esi+120], eax
  00093	8d 47 7c	 lea	 eax, DWORD PTR [edi+124]
  00096	50		 push	 eax
  00097	8d 4e 7c	 lea	 ecx, DWORD PTR [esi+124]
  0009a	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0009e	ff d3		 call	 ebx
  000a0	d9 87 8c 00 00
	00		 fld	 DWORD PTR [edi+140]
  000a6	8d 87 90 00 00
	00		 lea	 eax, DWORD PTR [edi+144]
  000ac	d9 9e 8c 00 00
	00		 fstp	 DWORD PTR [esi+140]
  000b2	50		 push	 eax
  000b3	8d 8e 90 00 00
	00		 lea	 ecx, DWORD PTR [esi+144]
  000b9	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  000bd	e8 00 00 00 00	 call	 ??0AttackAttribute@@QAE@ABU0@@Z
  000c2	81 c7 e0 00 00
	00		 add	 edi, 224		; 000000e0H
  000c8	57		 push	 edi
  000c9	8d 8e e0 00 00
	00		 lea	 ecx, DWORD PTR [esi+224]
  000cf	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000d3	e8 00 00 00 00	 call	 ??0?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@ABV01@@Z ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::vector<AttackAttribute,std::allocator<AttackAttribute> >
  000d8	8b c6		 mov	 eax, esi
  000da	e8 00 00 00 00	 call	 __EH_epilog3
  000df	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0tagWitchFlyInfo@@QAE@ABU0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagWitchFlyInfo@@QAE@ABU0@@Z$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagWitchFlyInfo@@QAE@ABU0@@Z$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 34	 add	 ecx, 52			; 00000034H
  0001b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagWitchFlyInfo@@QAE@ABU0@@Z$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 48	 add	 ecx, 72			; 00000048H
  00027	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagWitchFlyInfo@@QAE@ABU0@@Z$4:
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 c1 68	 add	 ecx, 104		; 00000068H
  00033	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagWitchFlyInfo@@QAE@ABU0@@Z$5:
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	83 c1 7c	 add	 ecx, 124		; 0000007cH
  0003f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagWitchFlyInfo@@QAE@ABU0@@Z$6:
  00045	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  0004e	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__ehhandler$??0tagWitchFlyInfo@@QAE@ABU0@@Z:
  00053	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00057	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005a	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0005d	33 c8		 xor	 ecx, eax
  0005f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00064	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0tagWitchFlyInfo@@QAE@ABU0@@Z
  00069	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0tagWitchFlyInfo@@QAE@ABU0@@Z ENDP			; tagWitchFlyInfo::tagWitchFlyInfo
PUBLIC	??_7ioWitchFlyBuff@@6B@				; ioWitchFlyBuff::`vftable'
PUBLIC	??1ioWitchFlyBuff@@UAE@XZ			; ioWitchFlyBuff::~ioWitchFlyBuff
PUBLIC	??_R4ioWitchFlyBuff@@6B@			; ioWitchFlyBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioWitchFlyBuff@@@8			; ioWitchFlyBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioWitchFlyBuff@@8				; ioWitchFlyBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWitchFlyBuff@@8				; ioWitchFlyBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioWitchFlyBuff@@8			; ioWitchFlyBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioWitchFlyBuff@@UAEXAAVioINILoader@@@Z ; ioWitchFlyBuff::LoadProperty
PUBLIC	?Clone@ioWitchFlyBuff@@UAEPAVioBuff@@XZ		; ioWitchFlyBuff::Clone
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyExtraBuffInfo
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioWitchFlyBuff@@UAEPAXI@Z:PROC		; ioWitchFlyBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iowitchflybuff.cpp
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWitchFlyBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWitchFlyBuff@@8 DD FLAT:??_R0?AVioWitchFlyBuff@@@8 ; ioWitchFlyBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWitchFlyBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioWitchFlyBuff@@8
rdata$r	SEGMENT
??_R2ioWitchFlyBuff@@8 DD FLAT:??_R1A@?0A@EA@ioWitchFlyBuff@@8 ; ioWitchFlyBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioWitchFlyBuff@@8
rdata$r	SEGMENT
??_R3ioWitchFlyBuff@@8 DD 00H				; ioWitchFlyBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioWitchFlyBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWitchFlyBuff@@@8
_DATA	SEGMENT
??_R0?AVioWitchFlyBuff@@@8 DD FLAT:??_7type_info@@6B@	; ioWitchFlyBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWitchFlyBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioWitchFlyBuff@@6B@
rdata$r	SEGMENT
??_R4ioWitchFlyBuff@@6B@ DD 00H				; ioWitchFlyBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioWitchFlyBuff@@@8
	DD	FLAT:??_R3ioWitchFlyBuff@@8
rdata$r	ENDS
;	COMDAT ??_7ioWitchFlyBuff@@6B@
CONST	SEGMENT
??_7ioWitchFlyBuff@@6B@ DD FLAT:??_R4ioWitchFlyBuff@@6B@ ; ioWitchFlyBuff::`vftable'
	DD	FLAT:?LoadProperty@ioWitchFlyBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioWitchFlyBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioWitchFlyBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioWitchFlyBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioWitchFlyBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioWitchFlyBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioWitchFlyBuff@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioWitchFlyBuff@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioWitchFlyBuff@@UAE@XZ$0
__ehfuncinfo$??1ioWitchFlyBuff@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ioWitchFlyBuff@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioWitchFlyBuff@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioWitchFlyBuff@@UAE@XZ PROC				; ioWitchFlyBuff::~ioWitchFlyBuff, COMDAT
; _this$ = ecx

; 20   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioWitchFlyBuff@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioWitchFlyBuff@@6B@
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 21   : }

  0001b	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00021	e8 00 00 00 00	 call	 ??1tagWitchFlyInfo@@QAE@XZ
  00026	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  00031	e8 00 00 00 00	 call	 __EH_epilog3
  00036	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioWitchFlyBuff@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??1ioWitchFlyBuff@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioWitchFlyBuff@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioWitchFlyBuff@@UAE@XZ ENDP				; ioWitchFlyBuff::~ioWitchFlyBuff
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	?Init@tagWitchFlyInfo@@QAEXXZ			; tagWitchFlyInfo::Init
EXTRN	__imp_?Clear@ioHashString@@QAEXXZ:PROC
;	COMDAT __real@4f800000
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
CONST	ENDS
;	COMDAT ?Init@tagWitchFlyInfo@@QAEXXZ
_TEXT	SEGMENT
tv237 = -4						; size = 4
tv233 = -4						; size = 4
$T531445 = -4						; size = 4
?Init@tagWitchFlyInfo@@QAEXXZ PROC			; tagWitchFlyInfo::Init, COMDAT
; _this$ = ecx

; 1528 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1529 : 		m_WaitAni.Clear();

  00006	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?Clear@ioHashString@@QAEXXZ
  0000c	8b f1		 mov	 esi, ecx
  0000e	ff d7		 call	 edi

; 1530 : 		m_dwWaitDuration = 0;

  00010	83 66 10 00	 and	 DWORD PTR [esi+16], 0

; 1531 : 
; 1532 : 		m_DelayAni.Clear();

  00014	8d 4e 34	 lea	 ecx, DWORD PTR [esi+52]
  00017	ff d7		 call	 edi

; 1533 : 		m_fDelayAniRate = FLOAT1;

  00019	b8 01 00 00 00	 mov	 eax, 1
  0001e	89 45 fc	 mov	 DWORD PTR tv237[ebp], eax
  00021	db 45 fc	 fild	 DWORD PTR tv237[ebp]
  00024	85 c0		 test	 eax, eax
  00026	79 06		 jns	 SHORT $LN25@Init
  00028	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN25@Init:

; 1534 : 
; 1535 : 		m_MoveAni.Clear();

  0002e	8d 4e 48	 lea	 ecx, DWORD PTR [esi+72]
  00031	d9 5e 44	 fstp	 DWORD PTR [esi+68]
  00034	ff d7		 call	 edi

; 1536 : 		m_fMoveAniRate = FLOAT1;

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	89 45 fc	 mov	 DWORD PTR tv233[ebp], eax
  0003e	db 45 fc	 fild	 DWORD PTR tv233[ebp]
  00041	85 c0		 test	 eax, eax
  00043	79 06		 jns	 SHORT $LN26@Init
  00045	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN26@Init:

; 1537 : 
; 1538 : 		m_fStartAngle = 0.0f;

  0004b	0f 57 c0	 xorps	 xmm0, xmm0
  0004e	d9 5e 58	 fstp	 DWORD PTR [esi+88]

; 1539 : 		m_fStartMaxRange = 0.0f;
; 1540 : 		m_dwStartDuration = 0;

  00051	83 66 30 00	 and	 DWORD PTR [esi+48], 0

; 1541 : 
; 1542 : 		m_fMoveSpeed = 0.0f;
; 1543 : 		m_fUpDownSpeed = 0.0f;
; 1544 : 
; 1545 : 		m_dwRotateTime = 0;

  00055	83 66 64 00	 and	 DWORD PTR [esi+100], 0

; 1546 : 		m_dwChargeTime = 0;

  00059	83 66 78 00	 and	 DWORD PTR [esi+120], 0

; 1547 : 
; 1548 : 		m_fWitchFlyJumpAmt = 0.0f;
; 1549 : 
; 1550 : 		m_WitchComboList.clear();

  0005d	8d 8e e0 00 00
	00		 lea	 ecx, DWORD PTR [esi+224]
  00063	f3 0f 11 46 28	 movss	 DWORD PTR [esi+40], xmm0
  00068	f3 0f 11 46 2c	 movss	 DWORD PTR [esi+44], xmm0
  0006d	f3 0f 11 46 5c	 movss	 DWORD PTR [esi+92], xmm0
  00072	f3 0f 11 46 60	 movss	 DWORD PTR [esi+96], xmm0
  00077	f3 0f 11 86 8c
	00 00 00	 movss	 DWORD PTR [esi+140], xmm0
  0007f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00082	8b 11		 mov	 edx, DWORD PTR [ecx]
  00084	50		 push	 eax
  00085	52		 push	 edx
  00086	8d 45 fc	 lea	 eax, DWORD PTR $T531445[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ?erase@?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@@2@0@Z ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::erase
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi

; 1551 : 	}

  00091	c9		 leave
  00092	c3		 ret	 0
?Init@tagWitchFlyInfo@@QAEXXZ ENDP			; tagWitchFlyInfo::Init
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioWitchFlyBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioWitchFlyBuff@@UAEPAXI@Z PROC			; ioWitchFlyBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioWitchFlyBuff@@UAE@XZ ; ioWitchFlyBuff::~ioWitchFlyBuff
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@4
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@4:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioWitchFlyBuff@@UAEPAXI@Z ENDP			; ioWitchFlyBuff::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0ioWitchFlyBuff@@QAE@ABV0@@Z			; ioWitchFlyBuff::ioWitchFlyBuff
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iowitchflybuff.cpp
xdata$x	SEGMENT
__unwindtable$??0ioWitchFlyBuff@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioWitchFlyBuff@@QAE@ABV0@@Z$0
__ehfuncinfo$??0ioWitchFlyBuff@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioWitchFlyBuff@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioWitchFlyBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioWitchFlyBuff@@QAE@ABV0@@Z PROC			; ioWitchFlyBuff::ioWitchFlyBuff, COMDAT
; _this$ = ecx

; 16   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioWitchFlyBuff@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	81 c7 6c 09 00
	00		 add	 edi, 2412		; 0000096cH
  00024	57		 push	 edi
  00025	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  0002b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioWitchFlyBuff@@6B@
  00031	e8 00 00 00 00	 call	 ??0tagWitchFlyInfo@@QAE@ABU0@@Z

; 17   : }

  00036	8b c6		 mov	 eax, esi
  00038	e8 00 00 00 00	 call	 __EH_epilog3
  0003d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioWitchFlyBuff@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??0ioWitchFlyBuff@@QAE@ABV0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioWitchFlyBuff@@QAE@ABV0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioWitchFlyBuff@@QAE@ABV0@@Z ENDP			; ioWitchFlyBuff::ioWitchFlyBuff
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z:PROC ; LoadAttackAttribute
EXTRN	__imp__wsprintfA:PROC
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iowitchflybuff.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioWitchFlyBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
tv17894 = -300						; size = 4
tv17869 = -300						; size = 4
tv17854 = -300						; size = 4
tv17846 = -300						; size = 4
tv17836 = -300						; size = 4
_i$533506 = -300					; size = 4
_i$533248 = -300					; size = 4
_szBuf$ = -296						; size = 260
__k$533554 = -36					; size = 23
__k$533406 = -36					; size = 23
__k$533148 = -36					; size = 24
__k$532907 = -36					; size = 25
__k$532653 = -36					; size = 25
__k$532528 = -36					; size = 26
__k$532278 = -36					; size = 25
__k$531749 = -36					; size = 24
__k$533656 = -32					; size = 19
__k$533277 = -32					; size = 21
__k$533019 = -32					; size = 19
__k$532778 = -32					; size = 20
__k$532499 = -32					; size = 22
__k$532149 = -32					; size = 20
__k$532024 = -32					; size = 21
__k$531891 = -32					; size = 22
__k$531624 = -32					; size = 19
__k$531582 = -28					; size = 17
___encStr$523799 = -28					; size = 17
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioWitchFlyBuff@@UAEXAAVioINILoader@@@Z PROC ; ioWitchFlyBuff::LoadProperty, COMDAT
; _this$ = ecx

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 25   : 	ioBuff::LoadProperty( rkLoader );

  00019	57		 push	 edi
  0001a	8b f1		 mov	 esi, ecx
  0001c	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty

; 26   : 
; 27   : 	char szBuf[MAX_PATH];
; 28   : 
; 29   : 	m_AttackWitchFly.Init();

  00021	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00027	e8 00 00 00 00	 call	 ?Init@tagWitchFlyInfo@@QAEXXZ ; tagWitchFlyInfo::Init

; 30   : 
; 31   : 	rkLoader.LoadString_e( "witch_fly_effect", "", szBuf, MAX_PATH );

  0002c	33 db		 xor	 ebx, ebx
  0002e	6a 04		 push	 4
  00030	c7 45 e4 9a 85
	9f 89		 mov	 DWORD PTR __k$531582[ebp], -1986034278 ; 899f859aH
  00037	c7 45 e8 85 b3
	8d 86		 mov	 DWORD PTR __k$531582[ebp+4], -2037533819 ; 868db385H
  0003e	c7 45 ec 94 b3
	8e 8c		 mov	 DWORD PTR __k$531582[ebp+8], -1936804972 ; 8c8eb394H
  00045	c7 45 f0 8b 89
	88 9e		 mov	 DWORD PTR __k$531582[ebp+12], -1635219061 ; 9e88898bH
  0004c	8d 45 e4	 lea	 eax, DWORD PTR __k$531582[ebp]
  0004f	88 5d f4	 mov	 BYTE PTR __k$531582[ebp+16], bl
  00052	59		 pop	 ecx
$LL205@LoadProper:
  00053	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00059	83 c0 04	 add	 eax, 4
  0005c	49		 dec	 ecx
  0005d	75 f4		 jne	 SHORT $LL205@LoadProper
  0005f	68 04 01 00 00	 push	 260			; 00000104H
  00064	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0006a	50		 push	 eax
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00070	8d 45 e4	 lea	 eax, DWORD PTR __k$531582[ebp]
  00073	50		 push	 eax
  00074	8b cf		 mov	 ecx, edi
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 32   : 	m_AttackWitchFly.m_WitchFlyEffect = szBuf;

  0007c	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00082	50		 push	 eax
  00083	8d 8e d4 09 00
	00		 lea	 ecx, DWORD PTR [esi+2516]
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  0008f	6a 04		 push	 4

; 33   : 
; 34   : 	rkLoader.LoadString_e( "witch_fly_wait_ani", "", szBuf, MAX_PATH );

  00091	c7 45 e0 9a 85
	9f 89		 mov	 DWORD PTR __k$531624[ebp], -1986034278 ; 899f859aH
  00098	c7 45 e4 85 b3
	8d 86		 mov	 DWORD PTR __k$531624[ebp+4], -2037533819 ; 868db385H
  0009f	c7 45 e8 94 b3
	9c 8b		 mov	 DWORD PTR __k$531624[ebp+8], -1952664684 ; 8b9cb394H
  000a6	c7 45 ec 84 98
	b4 8b		 mov	 DWORD PTR __k$531624[ebp+12], -1951098748 ; 8bb49884H
  000ad	66 c7 45 f0 83
	85		 mov	 WORD PTR __k$531624[ebp+16], 34179 ; 00008583H
  000b3	8d 45 e0	 lea	 eax, DWORD PTR __k$531624[ebp]
  000b6	88 5d f2	 mov	 BYTE PTR __k$531624[ebp+18], bl
  000b9	59		 pop	 ecx
$LL311@LoadProper:
  000ba	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000c0	83 c0 04	 add	 eax, 4
  000c3	49		 dec	 ecx
  000c4	75 f4		 jne	 SHORT $LL311@LoadProper
  000c6	6a 10		 push	 16			; 00000010H
  000c8	58		 pop	 eax
$LL308@LoadProper:
  000c9	8b c8		 mov	 ecx, eax
  000cb	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000d1	79 05		 jns	 SHORT $LN2104@LoadProper
  000d3	49		 dec	 ecx
  000d4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000d7	41		 inc	 ecx
$LN2104@LoadProper:
  000d8	b2 ed		 mov	 dl, -19			; ffffffedH
  000da	2a d1		 sub	 dl, cl
  000dc	30 54 05 e0	 xor	 BYTE PTR __k$531624[ebp+eax], dl
  000e0	40		 inc	 eax
  000e1	83 f8 12	 cmp	 eax, 18			; 00000012H
  000e4	7c e3		 jl	 SHORT $LL308@LoadProper
  000e6	68 04 01 00 00	 push	 260			; 00000104H
  000eb	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000f1	50		 push	 eax
  000f2	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  000f7	8d 45 e0	 lea	 eax, DWORD PTR __k$531624[ebp]
  000fa	50		 push	 eax
  000fb	8b cf		 mov	 ecx, edi
  000fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 35   : 	m_AttackWitchFly.m_WaitAni = szBuf;

  00103	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00109	50		 push	 eax
  0010a	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00110	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  00116	6a 05		 push	 5

; 36   : 	m_AttackWitchFly.m_dwWaitDuration = (DWORD)rkLoader.LoadInt_e( "witch_fly_wait_duration", 0 );

  00118	c7 45 dc 9a 85
	9f 89		 mov	 DWORD PTR __k$531749[ebp], -1986034278 ; 899f859aH
  0011f	c7 45 e0 85 b3
	8d 86		 mov	 DWORD PTR __k$531749[ebp+4], -2037533819 ; 868db385H
  00126	c7 45 e4 94 b3
	9c 8b		 mov	 DWORD PTR __k$531749[ebp+8], -1952664684 ; 8b9cb394H
  0012d	c7 45 e8 84 98
	b4 8e		 mov	 DWORD PTR __k$531749[ebp+12], -1900767100 ; 8eb49884H
  00134	c7 45 ec 98 9e
	8a 9e		 mov	 DWORD PTR __k$531749[ebp+16], -1635082600 ; 9e8a9e98H
  0013b	8d 45 dc	 lea	 eax, DWORD PTR __k$531749[ebp]
  0013e	c7 45 f0 84 83
	85 00		 mov	 DWORD PTR __k$531749[ebp+20], 8749956 ; 00858384H
  00145	59		 pop	 ecx
$LL417@LoadProper:
  00146	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0014c	83 c0 04	 add	 eax, 4
  0014f	49		 dec	 ecx
  00150	75 f4		 jne	 SHORT $LL417@LoadProper
  00152	6a 14		 push	 20			; 00000014H
  00154	58		 pop	 eax
$LL414@LoadProper:
  00155	8b c8		 mov	 ecx, eax
  00157	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0015d	79 05		 jns	 SHORT $LN2105@LoadProper
  0015f	49		 dec	 ecx
  00160	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00163	41		 inc	 ecx
$LN2105@LoadProper:
  00164	b2 ed		 mov	 dl, -19			; ffffffedH
  00166	2a d1		 sub	 dl, cl
  00168	30 54 05 dc	 xor	 BYTE PTR __k$531749[ebp+eax], dl
  0016c	40		 inc	 eax
  0016d	83 f8 17	 cmp	 eax, 23			; 00000017H
  00170	7c e3		 jl	 SHORT $LL414@LoadProper
  00172	53		 push	 ebx
  00173	8d 45 dc	 lea	 eax, DWORD PTR __k$531749[ebp]
  00176	50		 push	 eax
  00177	8b cf		 mov	 ecx, edi
  00179	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  0017f	6a 04		 push	 4
  00181	89 86 7c 09 00
	00		 mov	 DWORD PTR [esi+2428], eax

; 37   : 
; 38   : 	wsprintf_e( szBuf, "witch_fly_attack" );

  00187	c7 45 e4 9a 85
	9f 89		 mov	 DWORD PTR ___encStr$523799[ebp], -1986034278 ; 899f859aH
  0018e	c7 45 e8 85 b3
	8d 86		 mov	 DWORD PTR ___encStr$523799[ebp+4], -2037533819 ; 868db385H
  00195	c7 45 ec 94 b3
	8a 9e		 mov	 DWORD PTR ___encStr$523799[ebp+8], -1635077228 ; 9e8ab394H
  0019c	c7 45 f0 99 8d
	88 81		 mov	 DWORD PTR ___encStr$523799[ebp+12], -2121757287 ; 81888d99H
  001a3	8d 45 e4	 lea	 eax, DWORD PTR ___encStr$523799[ebp]
  001a6	88 5d f4	 mov	 BYTE PTR ___encStr$523799[ebp+16], bl
  001a9	59		 pop	 ecx
$LL425@LoadProper:
  001aa	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001b0	83 c0 04	 add	 eax, 4
  001b3	49		 dec	 ecx
  001b4	75 f4		 jne	 SHORT $LL425@LoadProper
  001b6	8d 45 e4	 lea	 eax, DWORD PTR ___encStr$523799[ebp]
  001b9	50		 push	 eax
  001ba	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  001c0	50		 push	 eax
  001c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 39   : 	LoadAttackAttribute( szBuf, m_AttackWitchFly.m_WitchAttackAttribute, rkLoader );

  001c7	57		 push	 edi
  001c8	8d 86 fc 09 00
	00		 lea	 eax, DWORD PTR [esi+2556]
  001ce	50		 push	 eax
  001cf	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  001d5	50		 push	 eax
  001d6	e8 00 00 00 00	 call	 ?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z ; LoadAttackAttribute
  001db	83 c4 14	 add	 esp, 20			; 00000014H
  001de	6a 05		 push	 5

; 40   : 
; 41   : 	m_AttackWitchFly.m_dwChargeTime = (DWORD)rkLoader.LoadInt_e( "witch_fly_charge_time", 0 );

  001e0	c7 45 e0 9a 85
	9f 89		 mov	 DWORD PTR __k$531891[ebp], -1986034278 ; 899f859aH
  001e7	c7 45 e4 85 b3
	8d 86		 mov	 DWORD PTR __k$531891[ebp+4], -2037533819 ; 868db385H
  001ee	c7 45 e8 94 b3
	88 82		 mov	 DWORD PTR __k$531891[ebp+8], -2104970348 ; 8288b394H
  001f5	c7 45 ec 8c 9e
	8c 8f		 mov	 DWORD PTR __k$531891[ebp+12], -1886609780 ; 8f8c9e8cH
  001fc	c7 45 f0 b2 98
	82 87		 mov	 DWORD PTR __k$531891[ebp+16], -2021484366 ; 878298b2H
  00203	8d 45 e0	 lea	 eax, DWORD PTR __k$531891[ebp]
  00206	66 c7 45 f4 88
	00		 mov	 WORD PTR __k$531891[ebp+20], 136 ; 00000088H
  0020c	59		 pop	 ecx
$LL531@LoadProper:
  0020d	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00213	83 c0 04	 add	 eax, 4
  00216	49		 dec	 ecx
  00217	75 f4		 jne	 SHORT $LL531@LoadProper
  00219	80 75 f4 ed	 xor	 BYTE PTR __k$531891[ebp+20], -19 ; ffffffedH
  0021d	53		 push	 ebx
  0021e	8d 45 e0	 lea	 eax, DWORD PTR __k$531891[ebp]
  00221	50		 push	 eax
  00222	8b cf		 mov	 ecx, edi
  00224	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  0022a	6a 05		 push	 5
  0022c	89 86 e4 09 00
	00		 mov	 DWORD PTR [esi+2532], eax

; 42   : 	rkLoader.LoadString_e( "witch_fly_charge_ani", "", szBuf, MAX_PATH );

  00232	c7 45 e0 9a 85
	9f 89		 mov	 DWORD PTR __k$532024[ebp], -1986034278 ; 899f859aH
  00239	c7 45 e4 85 b3
	8d 86		 mov	 DWORD PTR __k$532024[ebp+4], -2037533819 ; 868db385H
  00240	c7 45 e8 94 b3
	88 82		 mov	 DWORD PTR __k$532024[ebp+8], -2104970348 ; 8288b394H
  00247	c7 45 ec 8c 9e
	8c 8f		 mov	 DWORD PTR __k$532024[ebp+12], -1886609780 ; 8f8c9e8cH
  0024e	c7 45 f0 b2 8d
	85 83		 mov	 DWORD PTR __k$532024[ebp+16], -2088399438 ; 83858db2H
  00255	8d 45 e0	 lea	 eax, DWORD PTR __k$532024[ebp]
  00258	88 5d f4	 mov	 BYTE PTR __k$532024[ebp+20], bl
  0025b	59		 pop	 ecx
$LL637@LoadProper:
  0025c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00262	83 c0 04	 add	 eax, 4
  00265	49		 dec	 ecx
  00266	75 f4		 jne	 SHORT $LL637@LoadProper
  00268	68 04 01 00 00	 push	 260			; 00000104H
  0026d	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00273	50		 push	 eax
  00274	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00279	8d 45 e0	 lea	 eax, DWORD PTR __k$532024[ebp]
  0027c	50		 push	 eax
  0027d	8b cf		 mov	 ecx, edi
  0027f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 43   : 	m_AttackWitchFly.m_ChargeAni = szBuf;

  00285	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0028b	50		 push	 eax
  0028c	8d 8e e8 09 00
	00		 lea	 ecx, DWORD PTR [esi+2536]
  00292	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  00298	6a 04		 push	 4

; 44   : 
; 45   : 	rkLoader.LoadString_e( "witch_fly_start_ani", "", szBuf, MAX_PATH );

  0029a	c7 45 e0 9a 85
	9f 89		 mov	 DWORD PTR __k$532149[ebp], -1986034278 ; 899f859aH
  002a1	c7 45 e4 85 b3
	8d 86		 mov	 DWORD PTR __k$532149[ebp+4], -2037533819 ; 868db385H
  002a8	c7 45 e8 94 b3
	98 9e		 mov	 DWORD PTR __k$532149[ebp+8], -1634159724 ; 9e98b394H
  002af	c7 45 ec 8c 9e
	9f b5		 mov	 DWORD PTR __k$532149[ebp+12], -1247830388 ; b59f9e8cH
  002b6	8d 45 e0	 lea	 eax, DWORD PTR __k$532149[ebp]
  002b9	c7 45 f0 8c 82
	82 00		 mov	 DWORD PTR __k$532149[ebp+16], 8553100 ; 0082828cH
  002c0	59		 pop	 ecx
$LL743@LoadProper:
  002c1	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002c7	83 c0 04	 add	 eax, 4
  002ca	49		 dec	 ecx
  002cb	75 f4		 jne	 SHORT $LL743@LoadProper
  002cd	6a 10		 push	 16			; 00000010H
  002cf	58		 pop	 eax
$LL740@LoadProper:
  002d0	8b c8		 mov	 ecx, eax
  002d2	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  002d8	79 05		 jns	 SHORT $LN2106@LoadProper
  002da	49		 dec	 ecx
  002db	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002de	41		 inc	 ecx
$LN2106@LoadProper:
  002df	b2 ed		 mov	 dl, -19			; ffffffedH
  002e1	2a d1		 sub	 dl, cl
  002e3	30 54 05 e0	 xor	 BYTE PTR __k$532149[ebp+eax], dl
  002e7	40		 inc	 eax
  002e8	83 f8 13	 cmp	 eax, 19			; 00000013H
  002eb	7c e3		 jl	 SHORT $LL740@LoadProper
  002ed	68 04 01 00 00	 push	 260			; 00000104H
  002f2	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  002f8	50		 push	 eax
  002f9	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  002fe	8d 45 e0	 lea	 eax, DWORD PTR __k$532149[ebp]
  00301	50		 push	 eax
  00302	8b cf		 mov	 ecx, edi
  00304	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 46   : 	m_AttackWitchFly.m_StartAni = szBuf;

  0030a	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00310	50		 push	 eax
  00311	8d 8e 80 09 00
	00		 lea	 ecx, DWORD PTR [esi+2432]
  00317	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 47   : 	m_AttackWitchFly.m_fStartAniRate = rkLoader.LoadFloat_e( "witch_fly_start_ani_rate", FLOAT1 );

  0031d	b8 01 00 00 00	 mov	 eax, 1
  00322	6a 06		 push	 6
  00324	c7 45 dc 9a 85
	9f 89		 mov	 DWORD PTR __k$532278[ebp], -1986034278 ; 899f859aH
  0032b	c7 45 e0 85 b3
	8d 86		 mov	 DWORD PTR __k$532278[ebp+4], -2037533819 ; 868db385H
  00332	c7 45 e4 94 b3
	98 9e		 mov	 DWORD PTR __k$532278[ebp+8], -1634159724 ; 9e98b394H
  00339	c7 45 e8 8c 9e
	9f b5		 mov	 DWORD PTR __k$532278[ebp+12], -1247830388 ; b59f9e8cH
  00340	c7 45 ec 8c 82
	82 b5		 mov	 DWORD PTR __k$532278[ebp+16], -1249738100 ; b582828cH
  00347	c7 45 f0 9f 8d
	9f 8f		 mov	 DWORD PTR __k$532278[ebp+20], -1885368929 ; 8f9f8d9fH
  0034e	8d 4d dc	 lea	 ecx, DWORD PTR __k$532278[ebp]
  00351	88 5d f4	 mov	 BYTE PTR __k$532278[ebp+24], bl
  00354	5a		 pop	 edx
$LL851@LoadProper:
  00355	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  0035b	83 c1 04	 add	 ecx, 4
  0035e	4a		 dec	 edx
  0035f	75 f4		 jne	 SHORT $LL851@LoadProper
  00361	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv17894[ebp], eax
  00367	db 85 d4 fe ff
	ff		 fild	 DWORD PTR tv17894[ebp]
  0036d	85 c0		 test	 eax, eax
  0036f	79 06		 jns	 SHORT $LN2107@LoadProper
  00371	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN2107@LoadProper:
  00377	51		 push	 ecx
  00378	8d 45 dc	 lea	 eax, DWORD PTR __k$532278[ebp]
  0037b	d9 1c 24	 fstp	 DWORD PTR [esp]
  0037e	50		 push	 eax
  0037f	8b cf		 mov	 ecx, edi
  00381	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00387	d9 9e 90 09 00
	00		 fstp	 DWORD PTR [esi+2448]
  0038d	6a 05		 push	 5

; 48   : 
; 49   : 	m_AttackWitchFly.m_fStartAngle = rkLoader.LoadFloat_e( "witch_fly_start_angle", 0.0f );

  0038f	c7 45 e0 9a 85
	9f 89		 mov	 DWORD PTR __k$532499[ebp], -1986034278 ; 899f859aH
  00396	c7 45 e4 85 b3
	8d 86		 mov	 DWORD PTR __k$532499[ebp+4], -2037533819 ; 868db385H
  0039d	c7 45 e8 94 b3
	98 9e		 mov	 DWORD PTR __k$532499[ebp+8], -1634159724 ; 9e98b394H
  003a4	c7 45 ec 8c 9e
	9f b5		 mov	 DWORD PTR __k$532499[ebp+12], -1247830388 ; b59f9e8cH
  003ab	c7 45 f0 8c 82
	8c 86		 mov	 DWORD PTR __k$532499[ebp+16], -2037611892 ; 868c828cH
  003b2	8d 45 e0	 lea	 eax, DWORD PTR __k$532499[ebp]
  003b5	66 c7 45 f4 88
	00		 mov	 WORD PTR __k$532499[ebp+20], 136 ; 00000088H
  003bb	59		 pop	 ecx
$LL957@LoadProper:
  003bc	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  003c2	83 c0 04	 add	 eax, 4
  003c5	49		 dec	 ecx
  003c6	75 f4		 jne	 SHORT $LL957@LoadProper
  003c8	0f 57 c0	 xorps	 xmm0, xmm0
  003cb	80 75 f4 ed	 xor	 BYTE PTR __k$532499[ebp+20], -19 ; ffffffedH
  003cf	51		 push	 ecx
  003d0	8d 45 e0	 lea	 eax, DWORD PTR __k$532499[ebp]
  003d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d8	50		 push	 eax
  003d9	8b cf		 mov	 ecx, edi
  003db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  003e1	d9 9e 94 09 00
	00		 fstp	 DWORD PTR [esi+2452]
  003e7	6a 06		 push	 6

; 50   : 	m_AttackWitchFly.m_fStartMaxRange = rkLoader.LoadFloat_e( "witch_fly_start_max_range", 0.0f );

  003e9	c7 45 dc 9a 85
	9f 89		 mov	 DWORD PTR __k$532528[ebp], -1986034278 ; 899f859aH
  003f0	c7 45 e0 85 b3
	8d 86		 mov	 DWORD PTR __k$532528[ebp+4], -2037533819 ; 868db385H
  003f7	c7 45 e4 94 b3
	98 9e		 mov	 DWORD PTR __k$532528[ebp+8], -1634159724 ; 9e98b394H
  003fe	c7 45 e8 8c 9e
	9f b5		 mov	 DWORD PTR __k$532528[ebp+12], -1247830388 ; b59f9e8cH
  00405	c7 45 ec 80 8d
	93 b5		 mov	 DWORD PTR __k$532528[ebp+16], -1248621184 ; b5938d80H
  0040c	c7 45 f0 9f 8d
	85 8d		 mov	 DWORD PTR __k$532528[ebp+20], -1920627297 ; 8d858d9fH
  00413	8d 45 dc	 lea	 eax, DWORD PTR __k$532528[ebp]
  00416	66 c7 45 f4 88
	00		 mov	 WORD PTR __k$532528[ebp+24], 136 ; 00000088H
  0041c	59		 pop	 ecx
$LL1063@LoadProper:
  0041d	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00423	83 c0 04	 add	 eax, 4
  00426	49		 dec	 ecx
  00427	75 f4		 jne	 SHORT $LL1063@LoadProper
  00429	0f 57 c0	 xorps	 xmm0, xmm0
  0042c	80 75 f4 ed	 xor	 BYTE PTR __k$532528[ebp+24], -19 ; ffffffedH
  00430	51		 push	 ecx
  00431	8d 45 dc	 lea	 eax, DWORD PTR __k$532528[ebp]
  00434	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00439	50		 push	 eax
  0043a	8b cf		 mov	 ecx, edi
  0043c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00442	d9 9e 98 09 00
	00		 fstp	 DWORD PTR [esi+2456]
  00448	6a 06		 push	 6

; 51   : 	m_AttackWitchFly.m_dwStartDuration = (DWORD)rkLoader.LoadInt_e( "witch_fly_start_duration", 0 );

  0044a	c7 45 dc 9a 85
	9f 89		 mov	 DWORD PTR __k$532653[ebp], -1986034278 ; 899f859aH
  00451	c7 45 e0 85 b3
	8d 86		 mov	 DWORD PTR __k$532653[ebp+4], -2037533819 ; 868db385H
  00458	c7 45 e4 94 b3
	98 9e		 mov	 DWORD PTR __k$532653[ebp+8], -1634159724 ; 9e98b394H
  0045f	c7 45 e8 8c 9e
	9f b5		 mov	 DWORD PTR __k$532653[ebp+12], -1247830388 ; b59f9e8cH
  00466	c7 45 ec 89 99
	99 8b		 mov	 DWORD PTR __k$532653[ebp+16], -1952867959 ; 8b999989H
  0046d	c7 45 f0 99 85
	84 84		 mov	 DWORD PTR __k$532653[ebp+20], -2071689831 ; 84848599H
  00474	8d 45 dc	 lea	 eax, DWORD PTR __k$532653[ebp]
  00477	88 5d f4	 mov	 BYTE PTR __k$532653[ebp+24], bl
  0047a	59		 pop	 ecx
$LL1169@LoadProper:
  0047b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00481	83 c0 04	 add	 eax, 4
  00484	49		 dec	 ecx
  00485	75 f4		 jne	 SHORT $LL1169@LoadProper
  00487	53		 push	 ebx
  00488	8d 45 dc	 lea	 eax, DWORD PTR __k$532653[ebp]
  0048b	50		 push	 eax
  0048c	8b cf		 mov	 ecx, edi
  0048e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00494	6a 04		 push	 4
  00496	89 86 9c 09 00
	00		 mov	 DWORD PTR [esi+2460], eax

; 52   : 
; 53   : 	rkLoader.LoadString_e( "witch_fly_delay_ani", "", szBuf, MAX_PATH );

  0049c	c7 45 e0 9a 85
	9f 89		 mov	 DWORD PTR __k$532778[ebp], -1986034278 ; 899f859aH
  004a3	c7 45 e4 85 b3
	8d 86		 mov	 DWORD PTR __k$532778[ebp+4], -2037533819 ; 868db385H
  004aa	c7 45 e8 94 b3
	8f 8f		 mov	 DWORD PTR __k$532778[ebp+8], -1886407788 ; 8f8fb394H
  004b1	c7 45 ec 81 8d
	92 b5		 mov	 DWORD PTR __k$532778[ebp+12], -1248686719 ; b5928d81H
  004b8	8d 45 e0	 lea	 eax, DWORD PTR __k$532778[ebp]
  004bb	c7 45 f0 8c 82
	82 00		 mov	 DWORD PTR __k$532778[ebp+16], 8553100 ; 0082828cH
  004c2	59		 pop	 ecx
$LL1275@LoadProper:
  004c3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  004c9	83 c0 04	 add	 eax, 4
  004cc	49		 dec	 ecx
  004cd	75 f4		 jne	 SHORT $LL1275@LoadProper
  004cf	6a 10		 push	 16			; 00000010H
  004d1	58		 pop	 eax
$LL1272@LoadProper:
  004d2	8b c8		 mov	 ecx, eax
  004d4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  004da	79 05		 jns	 SHORT $LN2108@LoadProper
  004dc	49		 dec	 ecx
  004dd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  004e0	41		 inc	 ecx
$LN2108@LoadProper:
  004e1	b2 ed		 mov	 dl, -19			; ffffffedH
  004e3	2a d1		 sub	 dl, cl
  004e5	30 54 05 e0	 xor	 BYTE PTR __k$532778[ebp+eax], dl
  004e9	40		 inc	 eax
  004ea	83 f8 13	 cmp	 eax, 19			; 00000013H
  004ed	7c e3		 jl	 SHORT $LL1272@LoadProper
  004ef	68 04 01 00 00	 push	 260			; 00000104H
  004f4	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  004fa	50		 push	 eax
  004fb	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00500	8d 45 e0	 lea	 eax, DWORD PTR __k$532778[ebp]
  00503	50		 push	 eax
  00504	8b cf		 mov	 ecx, edi
  00506	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 54   : 	m_AttackWitchFly.m_DelayAni = szBuf;

  0050c	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00512	50		 push	 eax
  00513	8d 8e a0 09 00
	00		 lea	 ecx, DWORD PTR [esi+2464]
  00519	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 55   : 	m_AttackWitchFly.m_fDelayAniRate = rkLoader.LoadFloat_e( "witch_fly_delay_ani_rate", FLOAT1 );

  0051f	b8 01 00 00 00	 mov	 eax, 1
  00524	6a 06		 push	 6
  00526	c7 45 dc 9a 85
	9f 89		 mov	 DWORD PTR __k$532907[ebp], -1986034278 ; 899f859aH
  0052d	c7 45 e0 85 b3
	8d 86		 mov	 DWORD PTR __k$532907[ebp+4], -2037533819 ; 868db385H
  00534	c7 45 e4 94 b3
	8f 8f		 mov	 DWORD PTR __k$532907[ebp+8], -1886407788 ; 8f8fb394H
  0053b	c7 45 e8 81 8d
	92 b5		 mov	 DWORD PTR __k$532907[ebp+12], -1248686719 ; b5928d81H
  00542	c7 45 ec 8c 82
	82 b5		 mov	 DWORD PTR __k$532907[ebp+16], -1249738100 ; b582828cH
  00549	c7 45 f0 9f 8d
	9f 8f		 mov	 DWORD PTR __k$532907[ebp+20], -1885368929 ; 8f9f8d9fH
  00550	8d 4d dc	 lea	 ecx, DWORD PTR __k$532907[ebp]
  00553	88 5d f4	 mov	 BYTE PTR __k$532907[ebp+24], bl
  00556	5a		 pop	 edx
$LL1383@LoadProper:
  00557	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  0055d	83 c1 04	 add	 ecx, 4
  00560	4a		 dec	 edx
  00561	75 f4		 jne	 SHORT $LL1383@LoadProper
  00563	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv17869[ebp], eax
  00569	db 85 d4 fe ff
	ff		 fild	 DWORD PTR tv17869[ebp]
  0056f	85 c0		 test	 eax, eax
  00571	79 06		 jns	 SHORT $LN2109@LoadProper
  00573	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN2109@LoadProper:
  00579	51		 push	 ecx
  0057a	8d 45 dc	 lea	 eax, DWORD PTR __k$532907[ebp]
  0057d	d9 1c 24	 fstp	 DWORD PTR [esp]
  00580	50		 push	 eax
  00581	8b cf		 mov	 ecx, edi
  00583	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00589	d9 9e b0 09 00
	00		 fstp	 DWORD PTR [esi+2480]
  0058f	6a 04		 push	 4

; 56   : 
; 57   : 	rkLoader.LoadString_e( "witch_fly_move_ani", "", szBuf, MAX_PATH );

  00591	c7 45 e0 9a 85
	9f 89		 mov	 DWORD PTR __k$533019[ebp], -1986034278 ; 899f859aH
  00598	c7 45 e4 85 b3
	8d 86		 mov	 DWORD PTR __k$533019[ebp+4], -2037533819 ; 868db385H
  0059f	c7 45 e8 94 b3
	86 85		 mov	 DWORD PTR __k$533019[ebp+8], -2054769772 ; 8586b394H
  005a6	c7 45 ec 9b 89
	b4 8b		 mov	 DWORD PTR __k$533019[ebp+12], -1951102565 ; 8bb4899bH
  005ad	66 c7 45 f0 83
	85		 mov	 WORD PTR __k$533019[ebp+16], 34179 ; 00008583H
  005b3	8d 45 e0	 lea	 eax, DWORD PTR __k$533019[ebp]
  005b6	88 5d f2	 mov	 BYTE PTR __k$533019[ebp+18], bl
  005b9	59		 pop	 ecx
$LL1489@LoadProper:
  005ba	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  005c0	83 c0 04	 add	 eax, 4
  005c3	49		 dec	 ecx
  005c4	75 f4		 jne	 SHORT $LL1489@LoadProper
  005c6	6a 10		 push	 16			; 00000010H
  005c8	58		 pop	 eax
$LL1486@LoadProper:
  005c9	8b c8		 mov	 ecx, eax
  005cb	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  005d1	79 05		 jns	 SHORT $LN2110@LoadProper
  005d3	49		 dec	 ecx
  005d4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  005d7	41		 inc	 ecx
$LN2110@LoadProper:
  005d8	b2 ed		 mov	 dl, -19			; ffffffedH
  005da	2a d1		 sub	 dl, cl
  005dc	30 54 05 e0	 xor	 BYTE PTR __k$533019[ebp+eax], dl
  005e0	40		 inc	 eax
  005e1	83 f8 12	 cmp	 eax, 18			; 00000012H
  005e4	7c e3		 jl	 SHORT $LL1486@LoadProper
  005e6	68 04 01 00 00	 push	 260			; 00000104H
  005eb	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  005f1	50		 push	 eax
  005f2	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  005f7	8d 45 e0	 lea	 eax, DWORD PTR __k$533019[ebp]
  005fa	50		 push	 eax
  005fb	8b cf		 mov	 ecx, edi
  005fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 58   : 	m_AttackWitchFly.m_MoveAni = szBuf;

  00603	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00609	50		 push	 eax
  0060a	8d 8e b4 09 00
	00		 lea	 ecx, DWORD PTR [esi+2484]
  00610	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 59   : 	m_AttackWitchFly.m_fMoveAniRate = rkLoader.LoadFloat_e( "witch_fly_move_ani_rate", FLOAT1 );

  00616	b8 01 00 00 00	 mov	 eax, 1
  0061b	6a 05		 push	 5
  0061d	c7 45 dc 9a 85
	9f 89		 mov	 DWORD PTR __k$533148[ebp], -1986034278 ; 899f859aH
  00624	c7 45 e0 85 b3
	8d 86		 mov	 DWORD PTR __k$533148[ebp+4], -2037533819 ; 868db385H
  0062b	c7 45 e4 94 b3
	86 85		 mov	 DWORD PTR __k$533148[ebp+8], -2054769772 ; 8586b394H
  00632	c7 45 e8 9b 89
	b4 8b		 mov	 DWORD PTR __k$533148[ebp+12], -1951102565 ; 8bb4899bH
  00639	c7 45 ec 83 85
	b4 98		 mov	 DWORD PTR __k$533148[ebp+16], -1732999805 ; 98b48583H
  00640	8d 4d dc	 lea	 ecx, DWORD PTR __k$533148[ebp]
  00643	c7 45 f0 8c 98
	8e 00		 mov	 DWORD PTR __k$533148[ebp+20], 9345164 ; 008e988cH
  0064a	5a		 pop	 edx
$LL1597@LoadProper:
  0064b	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  00651	83 c1 04	 add	 ecx, 4
  00654	4a		 dec	 edx
  00655	75 f4		 jne	 SHORT $LL1597@LoadProper
  00657	c7 85 d4 fe ff
	ff 14 00 00 00	 mov	 DWORD PTR _i$533248[ebp], 20 ; 00000014H
$LL1594@LoadProper:
  00661	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _i$533248[ebp]
  00667	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0066d	79 05		 jns	 SHORT $LN2111@LoadProper
  0066f	49		 dec	 ecx
  00670	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00673	41		 inc	 ecx
$LN2111@LoadProper:
  00674	b2 ed		 mov	 dl, -19			; ffffffedH
  00676	2a d1		 sub	 dl, cl
  00678	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _i$533248[ebp]
  0067e	30 54 0d dc	 xor	 BYTE PTR __k$533148[ebp+ecx], dl
  00682	ff 85 d4 fe ff
	ff		 inc	 DWORD PTR _i$533248[ebp]
  00688	83 bd d4 fe ff
	ff 17		 cmp	 DWORD PTR _i$533248[ebp], 23 ; 00000017H
  0068f	7c d0		 jl	 SHORT $LL1594@LoadProper
  00691	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv17854[ebp], eax
  00697	db 85 d4 fe ff
	ff		 fild	 DWORD PTR tv17854[ebp]
  0069d	85 c0		 test	 eax, eax
  0069f	79 06		 jns	 SHORT $LN2112@LoadProper
  006a1	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN2112@LoadProper:
  006a7	51		 push	 ecx
  006a8	8d 45 dc	 lea	 eax, DWORD PTR __k$533148[ebp]
  006ab	d9 1c 24	 fstp	 DWORD PTR [esp]
  006ae	50		 push	 eax
  006af	8b cf		 mov	 ecx, edi
  006b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  006b7	d9 9e c4 09 00
	00		 fstp	 DWORD PTR [esi+2500]

; 60   : 
; 61   : 	m_AttackWitchFly.m_fMoveSpeed = rkLoader.LoadFloat_e( "witch_fly_move_speed", FLOAT100 );

  006bd	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  006c2	6a 05		 push	 5
  006c4	c7 45 e0 9a 85
	9f 89		 mov	 DWORD PTR __k$533277[ebp], -1986034278 ; 899f859aH
  006cb	c7 45 e4 85 b3
	8d 86		 mov	 DWORD PTR __k$533277[ebp+4], -2037533819 ; 868db385H
  006d2	c7 45 e8 94 b3
	86 85		 mov	 DWORD PTR __k$533277[ebp+8], -2054769772 ; 8586b394H
  006d9	c7 45 ec 9b 89
	b4 99		 mov	 DWORD PTR __k$533277[ebp+12], -1716221541 ; 99b4899bH
  006e0	c7 45 f0 9d 89
	8e 8e		 mov	 DWORD PTR __k$533277[ebp+16], -1903261283 ; 8e8e899dH
  006e7	8d 4d e0	 lea	 ecx, DWORD PTR __k$533277[ebp]
  006ea	88 5d f4	 mov	 BYTE PTR __k$533277[ebp+20], bl
  006ed	5a		 pop	 edx
$LL1705@LoadProper:
  006ee	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  006f4	83 c1 04	 add	 ecx, 4
  006f7	4a		 dec	 edx
  006f8	75 f4		 jne	 SHORT $LL1705@LoadProper
  006fa	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv17846[ebp], eax
  00700	db 85 d4 fe ff
	ff		 fild	 DWORD PTR tv17846[ebp]
  00706	85 c0		 test	 eax, eax
  00708	79 06		 jns	 SHORT $LN2113@LoadProper
  0070a	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN2113@LoadProper:
  00710	51		 push	 ecx
  00711	8d 45 e0	 lea	 eax, DWORD PTR __k$533277[ebp]
  00714	d9 1c 24	 fstp	 DWORD PTR [esp]
  00717	50		 push	 eax
  00718	8b cf		 mov	 ecx, edi
  0071a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00720	d9 9e c8 09 00
	00		 fstp	 DWORD PTR [esi+2504]

; 62   : 	m_AttackWitchFly.m_fUpDownSpeed = rkLoader.LoadFloat_e( "witch_fly_updown_speed", FLOAT100 );

  00726	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  0072b	6a 05		 push	 5
  0072d	c7 45 dc 9a 85
	9f 89		 mov	 DWORD PTR __k$533406[ebp], -1986034278 ; 899f859aH
  00734	c7 45 e0 85 b3
	8d 86		 mov	 DWORD PTR __k$533406[ebp+4], -2037533819 ; 868db385H
  0073b	c7 45 e4 94 b3
	9e 9a		 mov	 DWORD PTR __k$533406[ebp+8], -1700875372 ; 9a9eb394H
  00742	c7 45 e8 89 83
	9c 84		 mov	 DWORD PTR __k$533406[ebp+12], -2070117495 ; 849c8389H
  00749	c7 45 ec b2 9f
	9b 8f		 mov	 DWORD PTR __k$533406[ebp+16], -1885626446 ; 8f9b9fb2H
  00750	66 c7 45 f0 88
	88		 mov	 WORD PTR __k$533406[ebp+20], 34952 ; 00008888H
  00756	8d 4d dc	 lea	 ecx, DWORD PTR __k$533406[ebp]
  00759	88 5d f2	 mov	 BYTE PTR __k$533406[ebp+22], bl
  0075c	5a		 pop	 edx
$LL1813@LoadProper:
  0075d	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  00763	83 c1 04	 add	 ecx, 4
  00766	4a		 dec	 edx
  00767	75 f4		 jne	 SHORT $LL1813@LoadProper
  00769	c7 85 d4 fe ff
	ff 14 00 00 00	 mov	 DWORD PTR _i$533506[ebp], 20 ; 00000014H
$LL1810@LoadProper:
  00773	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _i$533506[ebp]
  00779	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0077f	79 05		 jns	 SHORT $LN2114@LoadProper
  00781	49		 dec	 ecx
  00782	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00785	41		 inc	 ecx
$LN2114@LoadProper:
  00786	b2 ed		 mov	 dl, -19			; ffffffedH
  00788	2a d1		 sub	 dl, cl
  0078a	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _i$533506[ebp]
  00790	30 54 0d dc	 xor	 BYTE PTR __k$533406[ebp+ecx], dl
  00794	ff 85 d4 fe ff
	ff		 inc	 DWORD PTR _i$533506[ebp]
  0079a	83 bd d4 fe ff
	ff 16		 cmp	 DWORD PTR _i$533506[ebp], 22 ; 00000016H
  007a1	7c d0		 jl	 SHORT $LL1810@LoadProper
  007a3	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv17836[ebp], eax
  007a9	db 85 d4 fe ff
	ff		 fild	 DWORD PTR tv17836[ebp]
  007af	85 c0		 test	 eax, eax
  007b1	79 06		 jns	 SHORT $LN2115@LoadProper
  007b3	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN2115@LoadProper:
  007b9	51		 push	 ecx
  007ba	8d 45 dc	 lea	 eax, DWORD PTR __k$533406[ebp]
  007bd	d9 1c 24	 fstp	 DWORD PTR [esp]
  007c0	50		 push	 eax
  007c1	8b cf		 mov	 ecx, edi
  007c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  007c9	d9 9e cc 09 00
	00		 fstp	 DWORD PTR [esi+2508]
  007cf	6a 05		 push	 5

; 63   : 
; 64   : 	m_AttackWitchFly.m_dwRotateTime = (DWORD)rkLoader.LoadInt_e( "witch_fly_rotate_speed", 0 );

  007d1	c7 45 dc 9a 85
	9f 89		 mov	 DWORD PTR __k$533554[ebp], -1986034278 ; 899f859aH
  007d8	c7 45 e0 85 b3
	8d 86		 mov	 DWORD PTR __k$533554[ebp+4], -2037533819 ; 868db385H
  007df	c7 45 e4 94 b3
	99 85		 mov	 DWORD PTR __k$533554[ebp+8], -2053524588 ; 8599b394H
  007e6	c7 45 e8 99 8d
	9f 8f		 mov	 DWORD PTR __k$533554[ebp+12], -1885368935 ; 8f9f8d99H
  007ed	c7 45 ec b2 9f
	9b 8f		 mov	 DWORD PTR __k$533554[ebp+16], -1885626446 ; 8f9b9fb2H
  007f4	66 c7 45 f0 88
	88		 mov	 WORD PTR __k$533554[ebp+20], 34952 ; 00008888H
  007fa	8d 45 dc	 lea	 eax, DWORD PTR __k$533554[ebp]
  007fd	88 5d f2	 mov	 BYTE PTR __k$533554[ebp+22], bl
  00800	59		 pop	 ecx
$LL1919@LoadProper:
  00801	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00807	83 c0 04	 add	 eax, 4
  0080a	49		 dec	 ecx
  0080b	75 f4		 jne	 SHORT $LL1919@LoadProper
  0080d	6a 14		 push	 20			; 00000014H
  0080f	58		 pop	 eax
$LL1916@LoadProper:
  00810	8b c8		 mov	 ecx, eax
  00812	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00818	79 05		 jns	 SHORT $LN2116@LoadProper
  0081a	49		 dec	 ecx
  0081b	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0081e	41		 inc	 ecx
$LN2116@LoadProper:
  0081f	b2 ed		 mov	 dl, -19			; ffffffedH
  00821	2a d1		 sub	 dl, cl
  00823	30 54 05 dc	 xor	 BYTE PTR __k$533554[ebp+eax], dl
  00827	40		 inc	 eax
  00828	83 f8 16	 cmp	 eax, 22			; 00000016H
  0082b	7c e3		 jl	 SHORT $LL1916@LoadProper
  0082d	53		 push	 ebx
  0082e	8d 45 dc	 lea	 eax, DWORD PTR __k$533554[ebp]
  00831	50		 push	 eax
  00832	8b cf		 mov	 ecx, edi
  00834	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  0083a	6a 04		 push	 4
  0083c	89 86 d0 09 00
	00		 mov	 DWORD PTR [esi+2512], eax

; 65   : 
; 66   : 	m_AttackWitchFly.m_fWitchFlyJumpAmt = rkLoader.LoadFloat_e( "witch_fly_jump_amt", 0.0f );

  00842	c7 45 e0 9a 85
	9f 89		 mov	 DWORD PTR __k$533656[ebp], -1986034278 ; 899f859aH
  00849	c7 45 e4 85 b3
	8d 86		 mov	 DWORD PTR __k$533656[ebp+4], -2037533819 ; 868db385H
  00850	c7 45 e8 94 b3
	81 9f		 mov	 DWORD PTR __k$533656[ebp+8], -1618889836 ; 9f81b394H
  00857	c7 45 ec 80 9c
	b4 8b		 mov	 DWORD PTR __k$533656[ebp+12], -1951097728 ; 8bb49c80H
  0085e	66 c7 45 f0 80
	98		 mov	 WORD PTR __k$533656[ebp+16], 39040 ; 00009880H
  00864	8d 45 e0	 lea	 eax, DWORD PTR __k$533656[ebp]
  00867	88 5d f2	 mov	 BYTE PTR __k$533656[ebp+18], bl
  0086a	59		 pop	 ecx
$LL2025@LoadProper:
  0086b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00871	83 c0 04	 add	 eax, 4
  00874	49		 dec	 ecx
  00875	75 f4		 jne	 SHORT $LL2025@LoadProper
  00877	6a 10		 push	 16			; 00000010H
  00879	58		 pop	 eax
$LL2022@LoadProper:
  0087a	8b c8		 mov	 ecx, eax
  0087c	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00882	79 05		 jns	 SHORT $LN2117@LoadProper
  00884	49		 dec	 ecx
  00885	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00888	41		 inc	 ecx
$LN2117@LoadProper:
  00889	b2 ed		 mov	 dl, -19			; ffffffedH
  0088b	2a d1		 sub	 dl, cl
  0088d	30 54 05 e0	 xor	 BYTE PTR __k$533656[ebp+eax], dl
  00891	40		 inc	 eax
  00892	83 f8 12	 cmp	 eax, 18			; 00000012H
  00895	7c e3		 jl	 SHORT $LL2022@LoadProper
  00897	0f 57 c0	 xorps	 xmm0, xmm0
  0089a	51		 push	 ecx
  0089b	8d 45 e0	 lea	 eax, DWORD PTR __k$533656[ebp]
  0089e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a3	50		 push	 eax
  008a4	8b cf		 mov	 ecx, edi
  008a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  008ac	d9 9e f8 09 00
	00		 fstp	 DWORD PTR [esi+2552]

; 67   : }

  008b2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  008b5	5f		 pop	 edi
  008b6	5e		 pop	 esi
  008b7	33 cd		 xor	 ecx, ebp
  008b9	5b		 pop	 ebx
  008ba	e8 00 00 00 00	 call	 @__security_check_cookie@4
  008bf	c9		 leave
  008c0	c2 04 00	 ret	 4
?LoadProperty@ioWitchFlyBuff@@UAEXAAVioINILoader@@@Z ENDP ; ioWitchFlyBuff::LoadProperty
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioWitchFlyBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioWitchFlyBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioWitchFlyBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioWitchFlyBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioWitchFlyBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T533861 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioWitchFlyBuff@@UAEPAVioBuff@@XZ PROC		; ioWitchFlyBuff::Clone, COMDAT
; _this$ = ecx

; 70   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioWitchFlyBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 71   : 	return new ioWitchFlyBuff( *this );

  0000e	68 5c 0a 00 00	 push	 2652			; 00000a5cH
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T533861[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioWitchFlyBuff@@QAE@ABV0@@Z ; ioWitchFlyBuff::ioWitchFlyBuff
$LN3@Clone:

; 72   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioWitchFlyBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T533861[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioWitchFlyBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioWitchFlyBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioWitchFlyBuff@@UAEPAVioBuff@@XZ ENDP		; ioWitchFlyBuff::Clone
PUBLIC	??0tagWitchFlyInfo@@QAE@XZ			; tagWitchFlyInfo::tagWitchFlyInfo
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__ehfuncinfo$??0tagWitchFlyInfo@@QAE@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??0tagWitchFlyInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0tagWitchFlyInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0tagWitchFlyInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0tagWitchFlyInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0tagWitchFlyInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0tagWitchFlyInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0tagWitchFlyInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0tagWitchFlyInfo@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0tagWitchFlyInfo@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0tagWitchFlyInfo@@QAE@XZ$7
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	ENDS
;	COMDAT ??0tagWitchFlyInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0tagWitchFlyInfo@@QAE@XZ PROC				; tagWitchFlyInfo::tagWitchFlyInfo, COMDAT
; _this$ = ecx

; 1522 : 	tagWitchFlyInfo()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0tagWitchFlyInfo@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	ff d7		 call	 edi
  00019	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001d	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00020	ff d7		 call	 edi
  00022	8d 4e 34	 lea	 ecx, DWORD PTR [esi+52]
  00025	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00029	ff d7		 call	 edi
  0002b	8d 4e 48	 lea	 ecx, DWORD PTR [esi+72]
  0002e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00032	ff d7		 call	 edi
  00034	8d 4e 68	 lea	 ecx, DWORD PTR [esi+104]
  00037	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0003b	ff d7		 call	 edi
  0003d	8d 4e 7c	 lea	 ecx, DWORD PTR [esi+124]
  00040	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00044	ff d7		 call	 edi
  00046	8d 8e 90 00 00
	00		 lea	 ecx, DWORD PTR [esi+144]
  0004c	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00050	e8 00 00 00 00	 call	 ??0AttackAttribute@@QAE@XZ ; AttackAttribute::AttackAttribute
  00055	83 a6 e0 00 00
	00 00		 and	 DWORD PTR [esi+224], 0
  0005c	83 a6 e4 00 00
	00 00		 and	 DWORD PTR [esi+228], 0
  00063	83 a6 e8 00 00
	00 00		 and	 DWORD PTR [esi+232], 0

; 1523 : 	{
; 1524 : 		Init();

  0006a	8b ce		 mov	 ecx, esi
  0006c	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00070	e8 00 00 00 00	 call	 ?Init@tagWitchFlyInfo@@QAEXXZ ; tagWitchFlyInfo::Init

; 1525 : 	}

  00075	8b c6		 mov	 eax, esi
  00077	e8 00 00 00 00	 call	 __EH_epilog3
  0007c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0tagWitchFlyInfo@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagWitchFlyInfo@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagWitchFlyInfo@@QAE@XZ$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 34	 add	 ecx, 52			; 00000034H
  0001b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagWitchFlyInfo@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 48	 add	 ecx, 72			; 00000048H
  00027	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagWitchFlyInfo@@QAE@XZ$4:
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 c1 68	 add	 ecx, 104		; 00000068H
  00033	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagWitchFlyInfo@@QAE@XZ$5:
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	83 c1 7c	 add	 ecx, 124		; 0000007cH
  0003f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagWitchFlyInfo@@QAE@XZ$6:
  00045	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  0004e	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__unwindfunclet$??0tagWitchFlyInfo@@QAE@XZ$7:
  00053	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	81 c1 e0 00 00
	00		 add	 ecx, 224		; 000000e0H
  0005c	e9 00 00 00 00	 jmp	 ??1?$vector@UAttackAttribute@@V?$allocator@UAttackAttribute@@@std@@@std@@QAE@XZ ; std::vector<AttackAttribute,std::allocator<AttackAttribute> >::~vector<AttackAttribute,std::allocator<AttackAttribute> >
__ehhandler$??0tagWitchFlyInfo@@QAE@XZ:
  00061	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00065	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00068	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0006b	33 c8		 xor	 ecx, eax
  0006d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00072	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0tagWitchFlyInfo@@QAE@XZ
  00077	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0tagWitchFlyInfo@@QAE@XZ ENDP				; tagWitchFlyInfo::tagWitchFlyInfo
PUBLIC	??0ioWitchFlyBuff@@QAE@XZ			; ioWitchFlyBuff::ioWitchFlyBuff
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iowitchflybuff.cpp
xdata$x	SEGMENT
__unwindtable$??0ioWitchFlyBuff@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioWitchFlyBuff@@QAE@XZ$0
__ehfuncinfo$??0ioWitchFlyBuff@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioWitchFlyBuff@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioWitchFlyBuff@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioWitchFlyBuff@@QAE@XZ PROC				; ioWitchFlyBuff::ioWitchFlyBuff, COMDAT
; _this$ = ecx

; 10   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioWitchFlyBuff@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff
  00016	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001a	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioWitchFlyBuff@@6B@
  00026	e8 00 00 00 00	 call	 ??0tagWitchFlyInfo@@QAE@XZ ; tagWitchFlyInfo::tagWitchFlyInfo

; 11   : }

  0002b	8b c6		 mov	 eax, esi
  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioWitchFlyBuff@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??0ioWitchFlyBuff@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioWitchFlyBuff@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioWitchFlyBuff@@QAE@XZ ENDP				; ioWitchFlyBuff::ioWitchFlyBuff
END
