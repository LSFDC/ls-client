; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioDisableDashBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ	; ioBaseChar::GetCharName
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ PROC	; ioBaseChar::GetCharName, COMDAT
; _this$ = ecx

; 2594 : 	inline const ioHashString& GetCharName() const { return m_Name; }

  00000	8d 81 d4 02 00
	00		 lea	 eax, DWORD PTR [ecx+724]
  00006	c3		 ret	 0
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ ENDP	; ioBaseChar::GetCharName
_TEXT	ENDS
PUBLIC	??_7ioDisableDashBuff@@6B@			; ioDisableDashBuff::`vftable'
PUBLIC	??0ioDisableDashBuff@@QAE@XZ			; ioDisableDashBuff::ioDisableDashBuff
PUBLIC	??_R4ioDisableDashBuff@@6B@			; ioDisableDashBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioDisableDashBuff@@@8			; ioDisableDashBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioDisableDashBuff@@8			; ioDisableDashBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioDisableDashBuff@@8			; ioDisableDashBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioDisableDashBuff@@8		; ioDisableDashBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioDisableDashBuff@@UAEXAAVioINILoader@@@Z ; ioDisableDashBuff::LoadProperty
PUBLIC	?Clone@ioDisableDashBuff@@UAEPAVioBuff@@XZ	; ioDisableDashBuff::Clone
PUBLIC	?StartBuff@ioDisableDashBuff@@UAEXPAVioBaseChar@@@Z ; ioDisableDashBuff::StartBuff
PUBLIC	?ApplyStartBuff@ioDisableDashBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioDisableDashBuff::ApplyStartBuff
PUBLIC	?ProcessBuff@ioDisableDashBuff@@UAEXM@Z		; ioDisableDashBuff::ProcessBuff
PUBLIC	?SetAction@ioDisableDashBuff@@MAEXXZ		; ioDisableDashBuff::SetAction
PUBLIC	?ProcessDelay@ioDisableDashBuff@@MAEXM@Z	; ioDisableDashBuff::ProcessDelay
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyExtraBuffInfo
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioDisableDashBuff@@UAEPAXI@Z:PROC		; ioDisableDashBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodisabledashbuff.cpp
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioDisableDashBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioDisableDashBuff@@8 DD FLAT:??_R0?AVioDisableDashBuff@@@8 ; ioDisableDashBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioDisableDashBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioDisableDashBuff@@8
rdata$r	SEGMENT
??_R2ioDisableDashBuff@@8 DD FLAT:??_R1A@?0A@EA@ioDisableDashBuff@@8 ; ioDisableDashBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioDisableDashBuff@@8
rdata$r	SEGMENT
??_R3ioDisableDashBuff@@8 DD 00H			; ioDisableDashBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioDisableDashBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioDisableDashBuff@@@8
_DATA	SEGMENT
??_R0?AVioDisableDashBuff@@@8 DD FLAT:??_7type_info@@6B@ ; ioDisableDashBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioDisableDashBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioDisableDashBuff@@6B@
rdata$r	SEGMENT
??_R4ioDisableDashBuff@@6B@ DD 00H			; ioDisableDashBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioDisableDashBuff@@@8
	DD	FLAT:??_R3ioDisableDashBuff@@8
rdata$r	ENDS
;	COMDAT ??_7ioDisableDashBuff@@6B@
CONST	SEGMENT
??_7ioDisableDashBuff@@6B@ DD FLAT:??_R4ioDisableDashBuff@@6B@ ; ioDisableDashBuff::`vftable'
	DD	FLAT:?LoadProperty@ioDisableDashBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioDisableDashBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioDisableDashBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioDisableDashBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioDisableDashBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioDisableDashBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioDisableDashBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioDisableDashBuff@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioDisableDashBuff@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioDisableDashBuff@@QAE@XZ$0
__ehfuncinfo$??0ioDisableDashBuff@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioDisableDashBuff@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioDisableDashBuff@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioDisableDashBuff@@QAE@XZ PROC			; ioDisableDashBuff::ioDisableDashBuff, COMDAT
; _this$ = ecx

; 11   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioDisableDashBuff@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff
  00016	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001a	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioDisableDashBuff@@6B@
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 12   : }

  0002c	8b c6		 mov	 eax, esi
  0002e	e8 00 00 00 00	 call	 __EH_epilog3
  00033	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioDisableDashBuff@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??0ioDisableDashBuff@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioDisableDashBuff@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioDisableDashBuff@@QAE@XZ ENDP			; ioDisableDashBuff::ioDisableDashBuff
PUBLIC	??0ioDisableDashBuff@@QAE@ABV0@@Z		; ioDisableDashBuff::ioDisableDashBuff
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
EXTRN	__fltused:DWORD
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioDisableDashBuff@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioDisableDashBuff@@QAE@ABV0@@Z$0
__ehfuncinfo$??0ioDisableDashBuff@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioDisableDashBuff@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioDisableDashBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioDisableDashBuff@@QAE@ABV0@@Z PROC			; ioDisableDashBuff::ioDisableDashBuff, COMDAT
; _this$ = ecx

; 18   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioDisableDashBuff@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	8d 87 6c 09 00
	00		 lea	 eax, DWORD PTR [edi+2412]
  00024	50		 push	 eax
  00025	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  0002b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioDisableDashBuff@@6B@
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00037	d9 87 7c 09 00
	00		 fld	 DWORD PTR [edi+2428]
  0003d	d9 9e 7c 09 00
	00		 fstp	 DWORD PTR [esi+2428]

; 19   : }

  00043	8b c6		 mov	 eax, esi
  00045	e8 00 00 00 00	 call	 __EH_epilog3
  0004a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioDisableDashBuff@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??0ioDisableDashBuff@@QAE@ABV0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioDisableDashBuff@@QAE@ABV0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioDisableDashBuff@@QAE@ABV0@@Z ENDP			; ioDisableDashBuff::ioDisableDashBuff
PUBLIC	??1ioDisableDashBuff@@UAE@XZ			; ioDisableDashBuff::~ioDisableDashBuff
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioDisableDashBuff@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioDisableDashBuff@@UAE@XZ$0
__ehfuncinfo$??1ioDisableDashBuff@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ioDisableDashBuff@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioDisableDashBuff@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioDisableDashBuff@@UAE@XZ PROC			; ioDisableDashBuff::~ioDisableDashBuff, COMDAT
; _this$ = ecx

; 22   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioDisableDashBuff@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioDisableDashBuff@@6B@
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 23   : }

  0001b	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00027	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  00032	e8 00 00 00 00	 call	 __EH_epilog3
  00037	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioDisableDashBuff@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??1ioDisableDashBuff@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioDisableDashBuff@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioDisableDashBuff@@UAE@XZ ENDP			; ioDisableDashBuff::~ioDisableDashBuff
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioDisableDashBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioDisableDashBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioDisableDashBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioDisableDashBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioDisableDashBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T524498 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioDisableDashBuff@@UAEPAVioBuff@@XZ PROC		; ioDisableDashBuff::Clone, COMDAT
; _this$ = ecx

; 37   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioDisableDashBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 38   : 	return new ioDisableDashBuff( *this );

  0000e	68 80 09 00 00	 push	 2432			; 00000980H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T524498[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioDisableDashBuff@@QAE@ABV0@@Z ; ioDisableDashBuff::ioDisableDashBuff
$LN3@Clone:

; 39   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioDisableDashBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T524498[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioDisableDashBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioDisableDashBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioDisableDashBuff@@UAEPAVioBuff@@XZ ENDP		; ioDisableDashBuff::Clone
EXTRN	?CheckCallingAreaWeapon@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingAreaWeapon
EXTRN	?ProcessBuff@ioBuff@@UAEXM@Z:PROC		; ioBuff::ProcessBuff
EXTRN	?CheckCallingProcess@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingProcess
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
EXTRN	?CheckSwitchType@ioBuff@@IAE_NM@Z:PROC		; ioBuff::CheckSwitchType
; Function compile flags: /Ogsp
;	COMDAT ?ProcessBuff@ioDisableDashBuff@@UAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioDisableDashBuff@@UAEXM@Z PROC		; ioDisableDashBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 100  : 	switch( m_iOperationType )

  00006	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  0000c	83 e8 00	 sub	 eax, 0
  0000f	74 51		 je	 SHORT $LN1@ProcessBuf
  00011	48		 dec	 eax
  00012	74 3c		 je	 SHORT $LN2@ProcessBuf
  00014	48		 dec	 eax
  00015	74 15		 je	 SHORT $LN5@ProcessBuf
  00017	48		 dec	 eax
  00018	75 4d		 jne	 SHORT $LN6@ProcessBuf

; 111  : 	case OT_DELAY:
; 112  : 		ProcessDelay( fTimePerSec );

  0001a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  0001f	8b 06		 mov	 eax, DWORD PTR [esi]
  00021	51		 push	 ecx
  00022	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00027	ff 50 38	 call	 DWORD PTR [eax+56]

; 113  : 		break;

  0002a	eb 3b		 jmp	 SHORT $LN6@ProcessBuf
$LN5@ProcessBuf:

; 101  : 	{
; 102  : 	case OT_SWITCH:
; 103  : 		if( !CheckSwitchType( fTimePerSec ) )

  0002c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00031	51		 push	 ecx
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	e8 00 00 00 00	 call	 ?CheckSwitchType@ioBuff@@IAE_NM@Z ; ioBuff::CheckSwitchType

; 104  : 		{
; 105  : 			SetReserveEndBuff();

  0003c	8b ce		 mov	 ecx, esi
  0003e	84 c0		 test	 al, al
  00040	75 07		 jne	 SHORT $LN4@ProcessBuf
  00042	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 106  : 			return;

  00047	eb 1e		 jmp	 SHORT $LN6@ProcessBuf
$LN4@ProcessBuf:

; 107  : 		}
; 108  : 
; 109  : 		CheckCallingProcess();

  00049	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 110  : 		break;

  0004e	eb 17		 jmp	 SHORT $LN6@ProcessBuf
$LN2@ProcessBuf:

; 114  : 	case OT_ACTIVE:
; 115  : 		ioBuff::ProcessBuff( fTimePerSec );

  00050	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00055	51		 push	 ecx
  00056	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005b	e8 00 00 00 00	 call	 ?ProcessBuff@ioBuff@@UAEXM@Z ; ioBuff::ProcessBuff

; 116  : 		break;

  00060	eb 05		 jmp	 SHORT $LN6@ProcessBuf
$LN1@ProcessBuf:

; 117  : 	case OT_PASSIVE:
; 118  : 		CheckCallingAreaWeapon();

  00062	e8 00 00 00 00	 call	 ?CheckCallingAreaWeapon@ioBuff@@IAEXXZ ; ioBuff::CheckCallingAreaWeapon
$LN6@ProcessBuf:
  00067	5e		 pop	 esi

; 119  : 		break;
; 120  : 	}
; 121  : }

  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
?ProcessBuff@ioDisableDashBuff@@UAEXM@Z ENDP		; ioDisableDashBuff::ProcessBuff
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
_TEXT	ENDS
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z	; CEncrypt<unsigned long>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z PROC	; CEncrypt<unsigned long>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ENDP	; CEncrypt<unsigned long>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z	; CEncrypt<unsigned long>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z PROC	; CEncrypt<unsigned long>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1256 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1257 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1258 : 		*value = *((DWORD*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 1259 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ENDP	; CEncrypt<unsigned long>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z	; CEncrypt<bool>::EncryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z PROC	; CEncrypt<bool>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal@2
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal@2:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ENDP	; CEncrypt<bool>::EncryptValueToPool
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioDisableDashBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioDisableDashBuff@@UAEPAXI@Z PROC			; ioDisableDashBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioDisableDashBuff@@UAE@XZ ; ioDisableDashBuff::~ioDisableDashBuff
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioDisableDashBuff@@UAEPAXI@Z ENDP			; ioDisableDashBuff::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??G?$CEncrypt@K@@QAEKABK@Z			; CEncrypt<unsigned long>::operator-
; Function compile flags: /Ogsp
;	COMDAT ??G?$CEncrypt@K@@QAEKABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??G?$CEncrypt@K@@QAEKABK@Z PROC				; CEncrypt<unsigned long>::operator-, COMDAT
; _this$ = ecx

; 1274 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1275 : 		
; 1276 : 		type value;
; 1277 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1278 : #ifdef _NOTUSE
; 1279 : 		Debug();
; 1280 : #endif
; 1281 : 		return value - inValue;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _inValue$[ebp]
  00013	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1282 : 	}

  00015	c9		 leave
  00016	c2 04 00	 ret	 4
??G?$CEncrypt@K@@QAEKABK@Z ENDP				; CEncrypt<unsigned long>::operator-
_TEXT	ENDS
PUBLIC	??H?$CEncrypt@K@@QAEKABK@Z			; CEncrypt<unsigned long>::operator+
; Function compile flags: /Ogsp
;	COMDAT ??H?$CEncrypt@K@@QAEKABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??H?$CEncrypt@K@@QAEKABK@Z PROC				; CEncrypt<unsigned long>::operator+, COMDAT
; _this$ = ecx

; 1285 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1286 : 		type value;
; 1287 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1288 : #ifdef _NOTUSE
; 1289 : 		Debug();
; 1290 : #endif
; 1291 : 		return value + inValue;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	03 45 fc	 add	 eax, DWORD PTR _value$[ebp]

; 1292 : 	}

  00015	c9		 leave
  00016	c2 04 00	 ret	 4
??H?$CEncrypt@K@@QAEKABK@Z ENDP				; CEncrypt<unsigned long>::operator+
_TEXT	ENDS
PUBLIC	??Y?$CEncrypt@K@@QAEAAKABK@Z			; CEncrypt<unsigned long>::operator+=
; Function compile flags: /Ogsp
;	COMDAT ??Y?$CEncrypt@K@@QAEAAKABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??Y?$CEncrypt@K@@QAEAAKABK@Z PROC			; CEncrypt<unsigned long>::operator+=, COMDAT
; _this$ = ecx

; 1325 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 1326 : 		type value;
; 1327 : 		DecryptValueToPool(&value);

  00005	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00008	50		 push	 eax
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1328 : 		value += inValue;

  00010	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00013	8b 00		 mov	 eax, DWORD PTR [eax]
  00015	01 45 fc	 add	 DWORD PTR _value$[ebp], eax

; 1329 : 		EncryptValueToPool((char*)&value);

  00018	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  0001b	50		 push	 eax
  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 1330 : #ifdef _NOTUSE
; 1331 : 		m_value += inValue;
; 1332 : 		Debug();
; 1333 : #endif
; 1334 : 		return value;

  00023	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00026	5e		 pop	 esi

; 1335 : 	} 

  00027	c9		 leave
  00028	c2 04 00	 ret	 4
??Y?$CEncrypt@K@@QAEAAKABK@Z ENDP			; CEncrypt<unsigned long>::operator+=
_TEXT	ENDS
PUBLIC	??M?$CEncrypt@K@@QAE_NABK@Z			; CEncrypt<unsigned long>::operator<
; Function compile flags: /Ogsp
;	COMDAT ??M?$CEncrypt@K@@QAE_NABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??M?$CEncrypt@K@@QAE_NABK@Z PROC			; CEncrypt<unsigned long>::operator<, COMDAT
; _this$ = ecx

; 1401 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1402 : 		type value;
; 1403 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1404 : #ifdef _NOTUSE
; 1405 : 		Debug();
; 1406 : #endif
; 1407 : 		return (value < inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _value$[ebp]
  00013	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00015	1b c0		 sbb	 eax, eax
  00017	f7 d8		 neg	 eax

; 1408 : 	} 

  00019	c9		 leave
  0001a	c2 04 00	 ret	 4
??M?$CEncrypt@K@@QAE_NABK@Z ENDP			; CEncrypt<unsigned long>::operator<
_TEXT	ENDS
PUBLIC	??N?$CEncrypt@K@@QAE_NABK@Z			; CEncrypt<unsigned long>::operator<=
; Function compile flags: /Ogsp
;	COMDAT ??N?$CEncrypt@K@@QAE_NABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??N?$CEncrypt@K@@QAE_NABK@Z PROC			; CEncrypt<unsigned long>::operator<=, COMDAT
; _this$ = ecx

; 1431 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1432 : 		
; 1433 : 		type value;
; 1434 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1435 : #ifdef _NOTUSE
; 1436 : 		Debug();
; 1437 : #endif
; 1438 : 		return (value <= inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	3b 45 fc	 cmp	 eax, DWORD PTR _value$[ebp]
  00015	1b c0		 sbb	 eax, eax
  00017	40		 inc	 eax

; 1439 : 	}		

  00018	c9		 leave
  00019	c2 04 00	 ret	 4
??N?$CEncrypt@K@@QAE_NABK@Z ENDP			; CEncrypt<unsigned long>::operator<=
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0O@@ioINILoader@@QAEXAAY0O@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<14>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadString_e@$0O@@ioINILoader@@QAEXAAY0O@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -28					; size = 4
__k$ = -24						; size = 14
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0O@@ioINILoader@@QAEXAAY0O@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<14>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 64 01 00
	00		 je	 $LN96@LoadString
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 4d 01 00
	00		 je	 $LN95@LoadString
  00039	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003c	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  0003f	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00042	84 d2		 test	 dl, dl
  00044	0f 84 36 01 00
	00		 je	 $LN94@LoadString
  0004a	b1 eb		 mov	 cl, -21			; ffffffebH
  0004c	32 d1		 xor	 dl, cl
  0004e	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 1e 01 00
	00		 je	 $LN93@LoadString
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 07 01 00
	00		 je	 $LN92@LoadString
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 f0 00 00
	00		 je	 $LN91@LoadString
  0007e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00081	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  00084	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00087	84 d2		 test	 dl, dl
  00089	0f 84 da 00 00
	00		 je	 $LN90@LoadString
  0008f	32 d1		 xor	 dl, cl
  00091	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 c4 00 00
	00		 je	 $LN89@LoadString
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 ad 00 00
	00		 je	 $LN88@LoadString
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 96 00 00
	00		 je	 $LN87@LoadString
  000c1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000c4	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 80 00 00
	00		 je	 $LN86@LoadString
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	74 6e		 je	 SHORT $LN85@LoadString
  000de	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e1	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e4	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e7	84 d2		 test	 dl, dl
  000e9	74 5b		 je	 SHORT $LN84@LoadString
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f2	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f5	0f 84 95 00 00
	00		 je	 $LN111@LoadString
  000fb	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000fe	84 d2		 test	 dl, dl
  00100	74 3f		 je	 SHORT $LN82@LoadString
  00102	32 d1		 xor	 dl, cl
  00104	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  00107	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0010a	84 d2		 test	 dl, dl
  0010c	74 2d		 je	 SHORT $LN81@LoadString
  0010e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00111	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  00114	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00117	84 d2		 test	 dl, dl
  00119	74 1a		 je	 SHORT $LN80@LoadString
  0011b	8a 40 11	 mov	 al, BYTE PTR [eax+17]
  0011e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00121	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00124	84 c0		 test	 al, al
  00126	74 07		 je	 SHORT $LN79@LoadString
  00128	34 ec		 xor	 al, -20			; ffffffecH
  0012a	88 45 f9	 mov	 BYTE PTR __k$[ebp+17], al
  0012d	eb 61		 jmp	 SHORT $LN111@LoadString
$LN79@LoadString:
  0012f	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  00133	eb 5b		 jmp	 SHORT $LN111@LoadString
$LN80@LoadString:
  00135	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00139	eb 55		 jmp	 SHORT $LN111@LoadString
$LN81@LoadString:
  0013b	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0013f	eb 4f		 jmp	 SHORT $LN111@LoadString
$LN82@LoadString:
  00141	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  00144	eb 4a		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  00146	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0014a	eb 44		 jmp	 SHORT $LN111@LoadString
$LN85@LoadString:
  0014c	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00150	eb 3e		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  00152	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  00155	eb 39		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  00157	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0015b	eb 33		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  0015d	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00161	eb 2d		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  00163	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00167	eb 27		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  00169	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  0016c	eb 22		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  0016e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00172	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  00174	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00178	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  0017a	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0017e	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  00180	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00184	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  00186	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0018a	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  0018c	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  00190	6a 03		 push	 3
  00192	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  00195	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+13], 0
  00199	5a		 pop	 edx
$LL104@LoadString:
  0019a	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a0	83 c0 04	 add	 eax, 4
  001a3	4a		 dec	 edx
  001a4	75 f4		 jne	 SHORT $LL104@LoadString

; 163  : 		LoadString(_k, d, b, i);

  001a6	ff 75 14	 push	 DWORD PTR _i$[ebp]
  001a9	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001ac	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001b0	57		 push	 edi
  001b1	56		 push	 esi
  001b2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001b5	50		 push	 eax
  001b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  001bc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bf	5f		 pop	 edi
  001c0	33 cd		 xor	 ecx, ebp
  001c2	5e		 pop	 esi
  001c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c8	c9		 leave
  001c9	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0O@@ioINILoader@@QAEXAAY0O@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<14>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BD@@ioINILoader@@QAEMAAY0BD@$$CBDM@Z ; ioINILoader::LoadFloat_e<19>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BD@@ioINILoader@@QAEMAAY0BD@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BD@@ioINILoader@@QAEMAAY0BD@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<19>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 cf 01 00
	00		 je	 $LN96@LoadFloat_
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 b8 01 00
	00		 je	 $LN95@LoadFloat_
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 a0 01 00
	00		 je	 $LN94@LoadFloat_
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 89 01 00
	00		 je	 $LN93@LoadFloat_
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 72 01 00
	00		 je	 $LN92@LoadFloat_
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 5c 01 00
	00		 je	 $LN91@LoadFloat_
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 46 01 00
	00		 je	 $LN90@LoadFloat_
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 2f 01 00
	00		 je	 $LN89@LoadFloat_
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 18 01 00
	00		 je	 $LN88@LoadFloat_
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 02 01 00
	00		 je	 $LN87@LoadFloat_
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 ec 00 00
	00		 je	 $LN86@LoadFloat_
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 d5 00 00
	00		 je	 $LN85@LoadFloat_
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 be 00 00
	00		 je	 $LN84@LoadFloat_
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 a8 00 00
	00		 je	 $LN83@LoadFloat_
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 92 00 00
	00		 je	 $LN82@LoadFloat_
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 7f		 je	 SHORT $LN81@LoadFloat_
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 6c		 je	 SHORT $LN80@LoadFloat_
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012c	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0012f	84 d2		 test	 dl, dl
  00131	74 5a		 je	 SHORT $LN79@LoadFloat_
  00133	32 d1		 xor	 dl, cl
  00135	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00139	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013c	0f 84 b1 00 00
	00		 je	 $LN1@LoadFloat_
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 3e		 je	 SHORT $LN77@LoadFloat_
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 2b		 je	 SHORT $LN76@LoadFloat_
  00156	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00159	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0015f	84 d2		 test	 dl, dl
  00161	74 19		 je	 SHORT $LN75@LoadFloat_
  00163	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  00166	32 d1		 xor	 dl, cl
  00168	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016b	84 c0		 test	 al, al
  0016d	74 07		 je	 SHORT $LN74@LoadFloat_
  0016f	34 eb		 xor	 al, -21			; ffffffebH
  00171	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  00174	eb 7d		 jmp	 SHORT $LN1@LoadFloat_
$LN74@LoadFloat_:
  00176	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0017a	eb 77		 jmp	 SHORT $LN1@LoadFloat_
$LN75@LoadFloat_:
  0017c	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  0017f	eb 72		 jmp	 SHORT $LN1@LoadFloat_
$LN76@LoadFloat_:
  00181	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00185	eb 6c		 jmp	 SHORT $LN1@LoadFloat_
$LN77@LoadFloat_:
  00187	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0018b	eb 66		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  0018d	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00190	eb 61		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  00192	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00196	eb 5b		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  00198	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0019c	eb 55		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  0019e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001a2	eb 4f		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  001a4	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001a7	eb 4a		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  001a9	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001ad	eb 44		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  001af	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001b3	eb 3e		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  001b5	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001b9	eb 38		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  001bb	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001be	eb 33		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  001c0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001c4	eb 2d		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  001c6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001ca	eb 27		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  001cc	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d0	eb 21		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  001d2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001d5	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  001d7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001db	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  001dd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e1	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  001e3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001e7	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  001e9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001ed	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  001ef	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  001f3	6a 04		 push	 4
  001f5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f8	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  001fc	5a		 pop	 edx
$LL104@LoadFloat_:
  001fd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00203	83 c0 04	 add	 eax, 4
  00206	4a		 dec	 edx
  00207	75 f4		 jne	 SHORT $LL104@LoadFloat_
  00209	6a 10		 push	 16			; 00000010H
  0020b	58		 pop	 eax
$LL101@LoadFloat_:
  0020c	8b c8		 mov	 ecx, eax
  0020e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00214	79 05		 jns	 SHORT $LN111@LoadFloat_
  00216	49		 dec	 ecx
  00217	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0021a	41		 inc	 ecx
$LN111@LoadFloat_:
  0021b	b2 ed		 mov	 dl, -19			; ffffffedH
  0021d	2a d1		 sub	 dl, cl
  0021f	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00223	40		 inc	 eax
  00224	83 f8 12	 cmp	 eax, 18			; 00000012H
  00227	7c e3		 jl	 SHORT $LL101@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  00229	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0022e	51		 push	 ecx
  0022f	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00232	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00237	50		 push	 eax
  00238	8b ce		 mov	 ecx, esi
  0023a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00240	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00243	33 cd		 xor	 ecx, ebp
  00245	5e		 pop	 esi
  00246	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024b	c9		 leave
  0024c	c2 08 00	 ret	 8
??$LoadFloat_e@$0BD@@ioINILoader@@QAEMAAY0BD@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<19>
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@K@@QAEKK@Z			; CEncrypt<unsigned long>::operator=
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??4?$CEncrypt@K@@QAEKK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@K@@QAEKK@Z PROC				; CEncrypt<unsigned long>::operator=, COMDAT
; _this$ = ecx

; 1262 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1263 : 		
; 1264 : 		type value = inValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 1265 : 		EncryptValueToPool((char*)&value);

  00009	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 1266 : #ifdef _NOTUSE
; 1267 : 		m_value = inValue;
; 1268 : 		Debug();
; 1269 : #endif
; 1270 : 		return value;

  00012	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 1271 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@K@@QAEKK@Z ENDP				; CEncrypt<unsigned long>::operator=
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@_N@@QAE_N_N@Z			; CEncrypt<bool>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@_N@@QAE_N_N@Z
_TEXT	SEGMENT
_inValue$ = 8						; size = 1
_value$ = 11						; size = 1
??4?$CEncrypt@_N@@QAE_N_N@Z PROC			; CEncrypt<bool>::operator=, COMDAT
; _this$ = ecx

; 225  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 226  : 		type value = inValue;

  00003	8a 45 08	 mov	 al, BYTE PTR _inValue$[ebp]
  00006	88 45 0b	 mov	 BYTE PTR _value$[ebp], al

; 227  : 		EncryptValueToPool((char*)&value);

  00009	8d 45 0b	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 228  : #ifdef _NOTUSE
; 229  : 		m_value = inValue;
; 230  : 		Debug();
; 231  : #endif
; 232  : 		return value;

  00012	8a 45 0b	 mov	 al, BYTE PTR _value$[ebp]

; 233  : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@_N@@QAE_N_N@Z ENDP			; CEncrypt<bool>::operator=
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodisabledashbuff.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioDisableDashBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
tv1935 = -292						; size = 4
_szBuf$ = -288						; size = 260
__k$524754 = -28					; size = 19
__k$524625 = -24					; size = 14
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioDisableDashBuff@@UAEXAAVioINILoader@@@Z PROC ; ioDisableDashBuff::LoadProperty, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 27   : 	ioBuff::LoadProperty( rkLoader );

  00019	57		 push	 edi
  0001a	8b f1		 mov	 esi, ecx
  0001c	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty

; 28   : 
; 29   : 	char szBuf[MAX_PATH];
; 30   : 	rkLoader.LoadString_e( "dash_fail_ani", "", szBuf, MAX_PATH );

  00021	6a 03		 push	 3
  00023	c7 45 e8 89 8d
	98 82		 mov	 DWORD PTR __k$524625[ebp], -2103931511 ; 82988d89H
  0002a	c7 45 ec b2 8a
	8a 83		 mov	 DWORD PTR __k$524625[ebp+4], -2088072526 ; 838a8ab2H
  00031	c7 45 f0 81 b3
	8a 84		 mov	 DWORD PTR __k$524625[ebp+8], -2071284863 ; 848ab381H
  00038	8d 45 e8	 lea	 eax, DWORD PTR __k$524625[ebp]
  0003b	66 c7 45 f4 84
	00		 mov	 WORD PTR __k$524625[ebp+12], 132 ; 00000084H
  00041	59		 pop	 ecx
  00042	bb ed ec eb ea	 mov	 ebx, -353637139		; eaebecedH
$LL106@LoadProper:
  00047	31 18		 xor	 DWORD PTR [eax], ebx
  00049	83 c0 04	 add	 eax, 4
  0004c	49		 dec	 ecx
  0004d	75 f8		 jne	 SHORT $LL106@LoadProper
  0004f	80 75 f4 ed	 xor	 BYTE PTR __k$524625[ebp+12], -19 ; ffffffedH
  00053	68 04 01 00 00	 push	 260			; 00000104H
  00058	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0005e	50		 push	 eax
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00064	8d 45 e8	 lea	 eax, DWORD PTR __k$524625[ebp]
  00067	50		 push	 eax
  00068	8b cf		 mov	 ecx, edi
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 31   : 	m_DashFailAni = szBuf;

  00070	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00076	50		 push	 eax
  00077	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 32   : 
; 33   : 	m_fDashFailAniRate = rkLoader.LoadFloat_e( "dash_fail_ani_rate", FLOAT1 );

  00083	b8 01 00 00 00	 mov	 eax, 1
  00088	6a 04		 push	 4
  0008a	c7 45 e4 89 8d
	98 82		 mov	 DWORD PTR __k$524754[ebp], -2103931511 ; 82988d89H
  00091	c7 45 e8 b2 8a
	8a 83		 mov	 DWORD PTR __k$524754[ebp+4], -2088072526 ; 838a8ab2H
  00098	c7 45 ec 81 b3
	8a 84		 mov	 DWORD PTR __k$524754[ebp+8], -2071284863 ; 848ab381H
  0009f	c7 45 f0 84 b3
	99 8b		 mov	 DWORD PTR __k$524754[ebp+12], -1952861308 ; 8b99b384H
  000a6	66 c7 45 f4 99
	89		 mov	 WORD PTR __k$524754[ebp+16], 35225 ; 00008999H
  000ac	8d 4d e4	 lea	 ecx, DWORD PTR __k$524754[ebp]
  000af	c6 45 f6 00	 mov	 BYTE PTR __k$524754[ebp+18], 0
  000b3	5a		 pop	 edx
$LL214@LoadProper:
  000b4	31 19		 xor	 DWORD PTR [ecx], ebx
  000b6	83 c1 04	 add	 ecx, 4
  000b9	4a		 dec	 edx
  000ba	75 f8		 jne	 SHORT $LL214@LoadProper
  000bc	6a 10		 push	 16			; 00000010H
  000be	59		 pop	 ecx
$LL211@LoadProper:
  000bf	8b d1		 mov	 edx, ecx
  000c1	81 e2 03 00 00
	80		 and	 edx, -2147483645	; 80000003H
  000c7	79 05		 jns	 SHORT $LN225@LoadProper
  000c9	4a		 dec	 edx
  000ca	83 ca fc	 or	 edx, -4			; fffffffcH
  000cd	42		 inc	 edx
$LN225@LoadProper:
  000ce	b3 ed		 mov	 bl, -19			; ffffffedH
  000d0	2a da		 sub	 bl, dl
  000d2	30 5c 0d e4	 xor	 BYTE PTR __k$524754[ebp+ecx], bl
  000d6	41		 inc	 ecx
  000d7	83 f9 12	 cmp	 ecx, 18			; 00000012H
  000da	7c e3		 jl	 SHORT $LL211@LoadProper
  000dc	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv1935[ebp], eax
  000e2	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv1935[ebp]
  000e8	85 c0		 test	 eax, eax
  000ea	79 06		 jns	 SHORT $LN226@LoadProper
  000ec	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN226@LoadProper:
  000f2	51		 push	 ecx
  000f3	8d 45 e4	 lea	 eax, DWORD PTR __k$524754[ebp]
  000f6	d9 1c 24	 fstp	 DWORD PTR [esp]
  000f9	50		 push	 eax
  000fa	8b cf		 mov	 ecx, edi
  000fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00102	d9 9e 7c 09 00
	00		 fstp	 DWORD PTR [esi+2428]

; 34   : }

  00108	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010b	5f		 pop	 edi
  0010c	5e		 pop	 esi
  0010d	33 cd		 xor	 ecx, ebp
  0010f	5b		 pop	 ebx
  00110	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00115	c9		 leave
  00116	c2 04 00	 ret	 4
?LoadProperty@ioDisableDashBuff@@UAEXAAVioINILoader@@@Z ENDP ; ioDisableDashBuff::LoadProperty
_TEXT	ENDS
EXTRN	?GetBuffDuration@ioBuff@@IAEKXZ:PROC		; ioBuff::GetBuffDuration
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?StartBuff@ioDisableDashBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
$T524867 = -4						; size = 4
_value$524887 = 8					; size = 4
_value$524882 = 8					; size = 4
_value$524877 = 8					; size = 4
_value$524874 = 8					; size = 4
_pOwner$ = 8						; size = 4
_value$524891 = 11					; size = 1
?StartBuff@ioDisableDashBuff@@UAEXPAVioBaseChar@@@Z PROC ; ioDisableDashBuff::StartBuff, COMDAT
; _this$ = ecx

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 43   : #ifndef SHIPPING 
; 44   : 	if( Setting::ShowExtraInfo() )
; 45   : 	{
; 46   : 		LOG.PrintTimeAndLog( 0, "BuffCheck - %s, StartTime: %d", m_Name.c_str(), FRAMEGETTIME() );
; 47   : 	}
; 48   : #endif
; 49   : 
; 50   : 	if( !pOwner )

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _pOwner$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	85 db		 test	 ebx, ebx
  0000d	0f 84 be 00 00
	00		 je	 $LN1@StartBuff

; 51   : 		return;
; 52   : 
; 53   : 	DWORD dwCurTime = FRAMEGETTIME();

  00013	57		 push	 edi
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0001a	8b c8		 mov	 ecx, eax
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 54   : 	m_pOwner = pOwner;

  00022	89 9e 74 02 00
	00		 mov	 DWORD PTR [esi+628], ebx

; 55   : 	m_OwnerName = pOwner->GetCharName();

  00028	81 c3 d4 02 00
	00		 add	 ebx, 724		; 000002d4H
  0002e	53		 push	 ebx
  0002f	8d 8e 78 02 00
	00		 lea	 ecx, DWORD PTR [esi+632]
  00035	8b f8		 mov	 edi, eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 56   : 
; 57   : 	m_dwBuffStartTime = dwCurTime;

  0003d	8d 45 08	 lea	 eax, DWORD PTR _value$524874[ebp]
  00040	50		 push	 eax
  00041	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  00047	89 7d 08	 mov	 DWORD PTR _value$524874[ebp], edi
  0004a	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 58   : 	if( m_iOperationType == OT_DELAY )

  0004f	83 be d0 03 00
	00 03		 cmp	 DWORD PTR [esi+976], 3
  00056	75 12		 jne	 SHORT $LN2@StartBuff

; 59   : 		m_dwBuffStartTime += m_dwDelayDuration;

  00058	8d 86 d8 02 00
	00		 lea	 eax, DWORD PTR [esi+728]
  0005e	50		 push	 eax
  0005f	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  00065	e8 00 00 00 00	 call	 ??Y?$CEncrypt@K@@QAEAAKABK@Z ; CEncrypt<unsigned long>::operator+=
$LN2@StartBuff:

; 60   : 
; 61   : 	m_dwBuffEndTime = m_dwBuffStartTime + GetBuffDuration();

  0006a	8b ce		 mov	 ecx, esi
  0006c	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  00071	89 45 fc	 mov	 DWORD PTR $T524867[ebp], eax
  00074	8d 45 08	 lea	 eax, DWORD PTR _value$524877[ebp]
  00077	50		 push	 eax
  00078	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  0007e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00083	8b 45 08	 mov	 eax, DWORD PTR _value$524877[ebp]
  00086	03 45 fc	 add	 eax, DWORD PTR $T524867[ebp]
  00089	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  0008f	89 45 08	 mov	 DWORD PTR _value$524882[ebp], eax
  00092	8d 45 08	 lea	 eax, DWORD PTR _value$524882[ebp]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 62   : 	m_dwCheckTime = dwCurTime;

  0009b	8d 45 08	 lea	 eax, DWORD PTR _value$524887[ebp]
  0009e	50		 push	 eax
  0009f	8d 8e 3c 03 00
	00		 lea	 ecx, DWORD PTR [esi+828]
  000a5	89 7d 08	 mov	 DWORD PTR _value$524887[ebp], edi
  000a8	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 63   : 	
; 64   : 	m_bLive = true;

  000ad	8d 45 0b	 lea	 eax, DWORD PTR _value$524891[ebp]
  000b0	50		 push	 eax
  000b1	8d 8e 70 07 00
	00		 lea	 ecx, DWORD PTR [esi+1904]
  000b7	c6 45 0b 01	 mov	 BYTE PTR _value$524891[ebp], 1
  000bb	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 65   : 
; 66   : 	if( m_iOperationType != OT_DELAY )

  000c0	83 be d0 03 00
	00 03		 cmp	 DWORD PTR [esi+976], 3
  000c7	5f		 pop	 edi
  000c8	74 07		 je	 SHORT $LN1@StartBuff

; 67   : 	{
; 68   : 		SetAction();

  000ca	8b 06		 mov	 eax, DWORD PTR [esi]
  000cc	8b ce		 mov	 ecx, esi
  000ce	ff 50 34	 call	 DWORD PTR [eax+52]
$LN1@StartBuff:
  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx

; 69   : 	}
; 70   : }

  000d3	c9		 leave
  000d4	c2 04 00	 ret	 4
?StartBuff@ioDisableDashBuff@@UAEXPAVioBaseChar@@@Z ENDP ; ioDisableDashBuff::StartBuff
_TEXT	ENDS
EXTRN	?CalcGlobalGapTime@ioGlobalTimer@@QBEKK@Z:PROC	; ioGlobalTimer::CalcGlobalGapTime
EXTRN	?GetSingleton@ioGlobalTimer@@SAAAV1@XZ:PROC	; ioGlobalTimer::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioDisableDashBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_value$524912 = 8					; size = 4
_value$524907 = 8					; size = 4
_value$524902 = 8					; size = 4
_value$524898 = 8					; size = 4
_dwGlobalTimeGap$ = 8					; size = 4
_pOwner$ = 8						; size = 4
_value$524917 = 11					; size = 1
$T524894 = 12						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioDisableDashBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioDisableDashBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 74   : 	m_pOwner = pOwner;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pOwner$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 75   : 	DWORD dwGlobalTimeGap = g_GlobalTimer.CalcGlobalGapTime( dwGlobalTime );

  00009	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 86 74 02 00
	00		 mov	 DWORD PTR [esi+628], eax
  00014	e8 00 00 00 00	 call	 ?GetSingleton@ioGlobalTimer@@SAAAV1@XZ ; ioGlobalTimer::GetSingleton
  00019	8b c8		 mov	 ecx, eax
  0001b	e8 00 00 00 00	 call	 ?CalcGlobalGapTime@ioGlobalTimer@@QBEKK@Z ; ioGlobalTimer::CalcGlobalGapTime

; 76   : 
; 77   : 	if( m_iOperationType != OT_SWITCH )

  00020	83 be d0 03 00
	00 02		 cmp	 DWORD PTR [esi+976], 2
  00027	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0002d	89 45 08	 mov	 DWORD PTR _dwGlobalTimeGap$[ebp], eax
  00030	74 60		 je	 SHORT $LN10@ApplyStart

; 78   : 	{
; 79   : 		if( dwGlobalTimeGap > dwGapTime )

  00032	8b 7d 10	 mov	 edi, DWORD PTR _dwGapTime$[ebp]
  00035	3b c7		 cmp	 eax, edi
  00037	76 07		 jbe	 SHORT $LN2@ApplyStart

; 80   : 			return false;

  00039	32 c0		 xor	 al, al
  0003b	e9 93 00 00 00	 jmp	 $LN4@ApplyStart
$LN2@ApplyStart:

; 81   : 
; 82   : 		dwGapTime -= dwGlobalTimeGap;
; 83   : 		m_dwBuffEndTime = FRAMEGETTIME() + dwGapTime;

  00040	ff d3		 call	 ebx
  00042	8b c8		 mov	 ecx, eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0004a	2b 7d 08	 sub	 edi, DWORD PTR _dwGlobalTimeGap$[ebp]
  0004d	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  00053	03 c7		 add	 eax, edi
  00055	89 45 08	 mov	 DWORD PTR _value$524898[ebp], eax
  00058	8d 45 08	 lea	 eax, DWORD PTR _value$524898[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 84   : 		m_dwBuffStartTime = m_dwBuffEndTime - GetBuffDuration();

  00061	8b ce		 mov	 ecx, esi
  00063	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  00068	89 45 0c	 mov	 DWORD PTR $T524894[ebp], eax
  0006b	8d 45 08	 lea	 eax, DWORD PTR _value$524902[ebp]
  0006e	50		 push	 eax
  0006f	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  00075	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  0007a	8b 45 08	 mov	 eax, DWORD PTR _value$524902[ebp]
  0007d	2b 45 0c	 sub	 eax, DWORD PTR $T524894[ebp]
  00080	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  00086	89 45 08	 mov	 DWORD PTR _value$524907[ebp], eax
  00089	8d 45 08	 lea	 eax, DWORD PTR _value$524907[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool
$LN10@ApplyStart:

; 85   : 	}
; 86   : 
; 87   : 	m_dwCheckTime = FRAMEGETTIME();

  00092	ff d3		 call	 ebx
  00094	8b c8		 mov	 ecx, eax
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0009c	89 45 08	 mov	 DWORD PTR _value$524912[ebp], eax
  0009f	8d 45 08	 lea	 eax, DWORD PTR _value$524912[ebp]
  000a2	50		 push	 eax
  000a3	8d 8e 3c 03 00
	00		 lea	 ecx, DWORD PTR [esi+828]
  000a9	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 88   : 	m_bLive = true;

  000ae	8d 45 0b	 lea	 eax, DWORD PTR _value$524917[ebp]
  000b1	50		 push	 eax
  000b2	8d 8e 70 07 00
	00		 lea	 ecx, DWORD PTR [esi+1904]
  000b8	c6 45 0b 01	 mov	 BYTE PTR _value$524917[ebp], 1
  000bc	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 89   : 
; 90   : 	if( m_iOperationType != OT_DELAY )

  000c1	83 be d0 03 00
	00 03		 cmp	 DWORD PTR [esi+976], 3
  000c8	74 07		 je	 SHORT $LN1@ApplyStart

; 91   : 	{
; 92   : 		SetAction();

  000ca	8b 06		 mov	 eax, DWORD PTR [esi]
  000cc	8b ce		 mov	 ecx, esi
  000ce	ff 50 34	 call	 DWORD PTR [eax+52]
$LN1@ApplyStart:

; 93   : 	}
; 94   : 
; 95   : 	return true;

  000d1	b0 01		 mov	 al, 1
$LN4@ApplyStart:
  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
  000d5	5b		 pop	 ebx

; 96   : }

  000d6	5d		 pop	 ebp
  000d7	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioDisableDashBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioDisableDashBuff::ApplyStartBuff
_TEXT	ENDS
EXTRN	?SetDashFailValue@ioBaseChar@@QAEXABVioHashString@@M0@Z:PROC ; ioBaseChar::SetDashFailValue
EXTRN	?PlaySoundA@ioGameEntity@@QAEKABVioHashString@@_N@Z:PROC ; ioGameEntity::PlaySoundA
EXTRN	?AttachEffect@ioBaseChar@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@_N@Z:PROC ; ioBaseChar::AttachEffect
EXTRN	?GetEffectEventOwner@ioBuff@@IAEPAVioBaseChar@@XZ:PROC ; ioBuff::GetEffectEventOwner
EXTRN	?RotateByBuffCollision@ioBaseChar@@QAEXABVioHashString@@H@Z:PROC ; ioBaseChar::RotateByBuffCollision
EXTRN	__imp_??9ioHashString@@QBE_NABV0@@Z:PROC
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	?CheckChangeColor@ioBuff@@IAEX_N@Z:PROC		; ioBuff::CheckChangeColor
EXTRN	?CheckChangeSkill@ioBuff@@IAEX_N@Z:PROC		; ioBuff::CheckChangeSkill
EXTRN	?CheckInvisibleHelmet@ioBuff@@IAEX_N@Z:PROC	; ioBuff::CheckInvisibleHelmet
EXTRN	?CheckInvisibleCloak@ioBuff@@IAEX_N@Z:PROC	; ioBuff::CheckInvisibleCloak
EXTRN	?CheckInvisibleWeapon@ioBuff@@IAEX_N@Z:PROC	; ioBuff::CheckInvisibleWeapon
; Function compile flags: /Ogsp
;	COMDAT ?SetAction@ioDisableDashBuff@@MAEXXZ
_TEXT	SEGMENT
_value$524927 = -1					; size = 1
?SetAction@ioDisableDashBuff@@MAEXXZ PROC		; ioDisableDashBuff::SetAction, COMDAT
; _this$ = ecx

; 124  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 125  : 	CheckInvisibleWeapon( false );

  00006	33 ff		 xor	 edi, edi
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?CheckInvisibleWeapon@ioBuff@@IAEX_N@Z ; ioBuff::CheckInvisibleWeapon

; 126  : 	CheckInvisibleCloak( false );

  00010	57		 push	 edi
  00011	8b ce		 mov	 ecx, esi
  00013	e8 00 00 00 00	 call	 ?CheckInvisibleCloak@ioBuff@@IAEX_N@Z ; ioBuff::CheckInvisibleCloak

; 127  : 	CheckInvisibleHelmet( false );

  00018	57		 push	 edi
  00019	8b ce		 mov	 ecx, esi
  0001b	e8 00 00 00 00	 call	 ?CheckInvisibleHelmet@ioBuff@@IAEX_N@Z ; ioBuff::CheckInvisibleHelmet

; 128  : 
; 129  : 	CheckChangeSkill( true );

  00020	6a 01		 push	 1
  00022	8b ce		 mov	 ecx, esi
  00024	e8 00 00 00 00	 call	 ?CheckChangeSkill@ioBuff@@IAEX_N@Z ; ioBuff::CheckChangeSkill

; 130  : 
; 131  : 	CheckChangeColor( true );

  00029	6a 01		 push	 1
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?CheckChangeColor@ioBuff@@IAEX_N@Z ; ioBuff::CheckChangeColor

; 132  : 	//CheckBuffDesc();
; 133  : 
; 134  : 	if( m_CreatorLookType != CLT_NONE && !m_CreateChar.IsEmpty() )

  00032	39 be f4 08 00
	00		 cmp	 DWORD PTR [esi+2292], edi
  00038	74 3c		 je	 SHORT $LN2@SetAction
  0003a	8d be 88 02 00
	00		 lea	 edi, DWORD PTR [esi+648]
  00040	8b cf		 mov	 ecx, edi
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00048	84 c0		 test	 al, al
  0004a	75 2a		 jne	 SHORT $LN2@SetAction

; 135  : 	{
; 136  : 		if( m_CreateChar != m_pOwner->GetCharName() )

  0004c	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  00052	05 d4 02 00 00	 add	 eax, 724		; 000002d4H
  00057	50		 push	 eax
  00058	8b cf		 mov	 ecx, edi
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??9ioHashString@@QBE_NABV0@@Z
  00060	84 c0		 test	 al, al
  00062	74 12		 je	 SHORT $LN2@SetAction

; 137  : 			m_pOwner->RotateByBuffCollision( m_CreateChar, m_CreatorLookType );

  00064	ff b6 f4 08 00
	00		 push	 DWORD PTR [esi+2292]
  0006a	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00070	57		 push	 edi
  00071	e8 00 00 00 00	 call	 ?RotateByBuffCollision@ioBaseChar@@QAEXABVioHashString@@H@Z ; ioBaseChar::RotateByBuffCollision
$LN2@SetAction:

; 138  : 	}
; 139  : 
; 140  : 	m_pOwner->AttachEffect( m_BuffEffect, GetEffectEventOwner() );

  00076	6a 01		 push	 1
  00078	8b ce		 mov	 ecx, esi
  0007a	e8 00 00 00 00	 call	 ?GetEffectEventOwner@ioBuff@@IAEPAVioBaseChar@@XZ ; ioBuff::GetEffectEventOwner
  0007f	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00085	50		 push	 eax
  00086	8d 86 7c 05 00
	00		 lea	 eax, DWORD PTR [esi+1404]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?AttachEffect@ioBaseChar@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@_N@Z ; ioBaseChar::AttachEffect

; 141  : 
; 142  : 	if( !m_LoopSound.IsEmpty() )

  00092	8d be fc 05 00
	00		 lea	 edi, DWORD PTR [esi+1532]
  00098	8b cf		 mov	 ecx, edi
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  000a0	84 c0		 test	 al, al
  000a2	75 27		 jne	 SHORT $LN8@SetAction

; 143  : 	{
; 144  : 		m_LoopSoundID = m_pOwner->PlaySound( m_LoopSound, true );

  000a4	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  000aa	6a 01		 push	 1
  000ac	57		 push	 edi
  000ad	e8 00 00 00 00	 call	 ?PlaySoundA@ioGameEntity@@QAEKABVioHashString@@_N@Z ; ioGameEntity::PlaySoundA
  000b2	89 86 0c 06 00
	00		 mov	 DWORD PTR [esi+1548], eax

; 145  : 		m_bLoopSoundPlayed = true;

  000b8	8d 45 ff	 lea	 eax, DWORD PTR _value$524927[ebp]
  000bb	50		 push	 eax
  000bc	8d 8e 60 08 00
	00		 lea	 ecx, DWORD PTR [esi+2144]
  000c2	c6 45 ff 01	 mov	 BYTE PTR _value$524927[ebp], 1
  000c6	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool
$LN8@SetAction:

; 146  : 	}
; 147  : 
; 148  : 	m_pOwner->SetDashFailValue( m_DashFailAni, m_fDashFailAniRate, m_DescIcon );

  000cb	f3 0f 10 86 7c
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2428]
  000d3	8d 86 c4 02 00
	00		 lea	 eax, DWORD PTR [esi+708]
  000d9	50		 push	 eax
  000da	51		 push	 ecx
  000db	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  000e1	8d 86 6c 09 00
	00		 lea	 eax, DWORD PTR [esi+2412]
  000e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ec	50		 push	 eax
  000ed	e8 00 00 00 00	 call	 ?SetDashFailValue@ioBaseChar@@QAEXABVioHashString@@M0@Z ; ioBaseChar::SetDashFailValue
  000f2	5f		 pop	 edi

; 149  : 	m_bBuffStart = true;

  000f3	c6 86 d5 02 00
	00 01		 mov	 BYTE PTR [esi+725], 1
  000fa	5e		 pop	 esi

; 150  : }

  000fb	c9		 leave
  000fc	c3		 ret	 0
?SetAction@ioDisableDashBuff@@MAEXXZ ENDP		; ioDisableDashBuff::SetAction
_TEXT	ENDS
EXTRN	?CheckEnableDelayState@ioBuff@@IAE_NXZ:PROC	; ioBuff::CheckEnableDelayState
; Function compile flags: /Ogsp
;	COMDAT ?ProcessDelay@ioDisableDashBuff@@MAEXM@Z
_TEXT	SEGMENT
_value$524940 = -4					; size = 4
_value$524936 = -4					; size = 4
_value$524932 = -4					; size = 4
_fTimePerSec$ = 8					; size = 4
?ProcessDelay@ioDisableDashBuff@@MAEXM@Z PROC		; ioDisableDashBuff::ProcessDelay, COMDAT
; _this$ = ecx

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx

; 154  : 	DWORD dwCurTime = FRAMEGETTIME();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0000e	8b c8		 mov	 ecx, eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 155  : 
; 156  : 	if( CheckEnableDelayState() )

  00016	8b ce		 mov	 ecx, esi
  00018	8b f8		 mov	 edi, eax
  0001a	e8 00 00 00 00	 call	 ?CheckEnableDelayState@ioBuff@@IAE_NXZ ; ioBuff::CheckEnableDelayState
  0001f	84 c0		 test	 al, al
  00021	75 76		 jne	 SHORT $LN6@ProcessDel

; 157  : 		return;
; 158  : 
; 159  : 	if( GetBuffDuration() == 0 )

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  0002a	85 c0		 test	 eax, eax
  0002c	75 25		 jne	 SHORT $LN4@ProcessDel

; 160  : 	{
; 161  : 		if( !m_bBuffStart && m_dwBuffStartTime < dwCurTime )

  0002e	38 86 d5 02 00
	00		 cmp	 BYTE PTR [esi+725], al
  00034	75 63		 jne	 SHORT $LN6@ProcessDel
  00036	8d 45 fc	 lea	 eax, DWORD PTR _value$524932[ebp]
  00039	50		 push	 eax
  0003a	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  00040	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00045	39 7d fc	 cmp	 DWORD PTR _value$524932[ebp], edi
  00048	73 4f		 jae	 SHORT $LN6@ProcessDel

; 162  : 			SetAction();

  0004a	8b 06		 mov	 eax, DWORD PTR [esi]
  0004c	8b ce		 mov	 ecx, esi
  0004e	ff 50 34	 call	 DWORD PTR [eax+52]

; 163  : 		return;

  00051	eb 46		 jmp	 SHORT $LN6@ProcessDel
$LN4@ProcessDel:

; 164  : 	}
; 165  : 
; 166  : 	if( !m_bBuffStart && m_dwBuffStartTime < dwCurTime )

  00053	80 be d5 02 00
	00 00		 cmp	 BYTE PTR [esi+725], 0
  0005a	75 1b		 jne	 SHORT $LN2@ProcessDel
  0005c	8d 45 fc	 lea	 eax, DWORD PTR _value$524936[ebp]
  0005f	50		 push	 eax
  00060	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  00066	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  0006b	39 7d fc	 cmp	 DWORD PTR _value$524936[ebp], edi
  0006e	73 07		 jae	 SHORT $LN2@ProcessDel

; 167  : 		SetAction();

  00070	8b 06		 mov	 eax, DWORD PTR [esi]
  00072	8b ce		 mov	 ecx, esi
  00074	ff 50 34	 call	 DWORD PTR [eax+52]
$LN2@ProcessDel:

; 168  : 
; 169  : 	if( m_dwBuffEndTime <= dwCurTime )

  00077	8d 45 fc	 lea	 eax, DWORD PTR _value$524940[ebp]
  0007a	50		 push	 eax
  0007b	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  00081	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 170  : 	{
; 171  : 		SetReserveEndBuff();

  00086	8b ce		 mov	 ecx, esi
  00088	39 7d fc	 cmp	 DWORD PTR _value$524940[ebp], edi
  0008b	77 07		 ja	 SHORT $LN1@ProcessDel
  0008d	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 172  : 		return;

  00092	eb 05		 jmp	 SHORT $LN6@ProcessDel
$LN1@ProcessDel:

; 173  : 	}
; 174  : 
; 175  : 	CheckCallingProcess();

  00094	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess
$LN6@ProcessDel:
  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi

; 176  : }

  0009b	c9		 leave
  0009c	c2 04 00	 ret	 4
?ProcessDelay@ioDisableDashBuff@@MAEXM@Z ENDP		; ioDisableDashBuff::ProcessDelay
_TEXT	ENDS
END
