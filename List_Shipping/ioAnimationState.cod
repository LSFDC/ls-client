; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\GUI\ioAnimationState.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_7ioAnimationState@@6B@			; ioAnimationState::`vftable'
PUBLIC	??1ioAnimationState@@UAE@XZ			; ioAnimationState::~ioAnimationState
PUBLIC	??_R4ioAnimationState@@6B@			; ioAnimationState::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioAnimationState@@@8			; ioAnimationState `RTTI Type Descriptor'
PUBLIC	??_R3ioAnimationState@@8			; ioAnimationState::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioAnimationState@@8			; ioAnimationState::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioAnimationState@@8		; ioAnimationState::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??1FSMStateMgr@@UAE@XZ:PROC			; FSMStateMgr::~FSMStateMgr
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_EioAnimationState@@UAEPAXI@Z:PROC		; ioAnimationState::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@ioAnimationState@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\ioanimationstate.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@ioAnimationState@@8 DD FLAT:??_R0?AVioAnimationState@@@8 ; ioAnimationState::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioAnimationState@@8
rdata$r	ENDS
;	COMDAT ??_R2ioAnimationState@@8
rdata$r	SEGMENT
??_R2ioAnimationState@@8 DD FLAT:??_R1A@?0A@EA@ioAnimationState@@8 ; ioAnimationState::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioAnimationState@@8
rdata$r	SEGMENT
??_R3ioAnimationState@@8 DD 00H				; ioAnimationState::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioAnimationState@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioAnimationState@@@8
_DATA	SEGMENT
??_R0?AVioAnimationState@@@8 DD FLAT:??_7type_info@@6B@	; ioAnimationState `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioAnimationState@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioAnimationState@@6B@
rdata$r	SEGMENT
??_R4ioAnimationState@@6B@ DD 00H			; ioAnimationState::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioAnimationState@@@8
	DD	FLAT:??_R3ioAnimationState@@8
rdata$r	ENDS
;	COMDAT ??_7ioAnimationState@@6B@
CONST	SEGMENT
??_7ioAnimationState@@6B@ DD FLAT:??_R4ioAnimationState@@6B@ ; ioAnimationState::`vftable'
	DD	FLAT:??_EioAnimationState@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??1ioAnimationState@@UAE@XZ
_TEXT	SEGMENT
??1ioAnimationState@@UAE@XZ PROC			; ioAnimationState::~ioAnimationState, COMDAT
; _this$ = ecx

; 12   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioAnimationState@@6B@

; 13   : }

  00006	83 c1 04	 add	 ecx, 4
  00009	e9 00 00 00 00	 jmp	 ??1FSMStateMgr@@UAE@XZ	; FSMStateMgr::~FSMStateMgr
??1ioAnimationState@@UAE@XZ ENDP			; ioAnimationState::~ioAnimationState
_TEXT	ENDS
PUBLIC	?InitAniState@ioAnimationState@@QAEXXZ		; ioAnimationState::InitAniState
EXTRN	?SetCurState@FSMStateMgr@@QAEXH@Z:PROC		; FSMStateMgr::SetCurState
; Function compile flags: /Ogsp
;	COMDAT ?InitAniState@ioAnimationState@@QAEXXZ
_TEXT	SEGMENT
?InitAniState@ioAnimationState@@QAEXXZ PROC		; ioAnimationState::InitAniState, COMDAT
; _this$ = ecx

; 26   : 	m_ShowAniState.SetCurState( SAT_NONE );

  00000	6a 00		 push	 0
  00002	83 c1 04	 add	 ecx, 4
  00005	e8 00 00 00 00	 call	 ?SetCurState@FSMStateMgr@@QAEXH@Z ; FSMStateMgr::SetCurState

; 27   : }

  0000a	c3		 ret	 0
?InitAniState@ioAnimationState@@QAEXXZ ENDP		; ioAnimationState::InitAniState
_TEXT	ENDS
PUBLIC	?InitShowAniState@ioAnimationState@@IAEXXZ	; ioAnimationState::InitShowAniState
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?Add@FSMStateMgr@@QAEXPAVFSMState@@@Z:PROC	; FSMStateMgr::Add
EXTRN	?Add@FSMState@@QAEXHHH@Z:PROC			; FSMState::Add
EXTRN	??0FSMState@@QAE@H@Z:PROC			; FSMState::FSMState
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?InitShowAniState@ioAnimationState@@IAEXXZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?InitShowAniState@ioAnimationState@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?InitShowAniState@ioAnimationState@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitShowAniState@ioAnimationState@@IAEXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitShowAniState@ioAnimationState@@IAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitShowAniState@ioAnimationState@@IAEXXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitShowAniState@ioAnimationState@@IAEXXZ$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitShowAniState@ioAnimationState@@IAEXXZ$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitShowAniState@ioAnimationState@@IAEXXZ$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitShowAniState@ioAnimationState@@IAEXXZ$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitShowAniState@ioAnimationState@@IAEXXZ$7
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?InitShowAniState@ioAnimationState@@IAEXXZ
_TEXT	SEGMENT
$T505261 = -20						; size = 4
$T505257 = -20						; size = 4
$T505253 = -20						; size = 4
$T505249 = -20						; size = 4
$T505245 = -20						; size = 4
$T505241 = -20						; size = 4
$T505237 = -20						; size = 4
$T505233 = -20						; size = 4
tv256 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?InitShowAniState@ioAnimationState@@IAEXXZ PROC		; ioAnimationState::InitShowAniState, COMDAT
; _this$ = ecx

; 30   : {

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?InitShowAniState@ioAnimationState@@IAEXXZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 31   : 	//TODO: 추후 아래 enum 값을 세팅할 수 있도록 수정
; 32   : 
; 33   : 	enum { DELAY_DELAY = 165, DELAY_UP = 198, DELAY_DOWN = 66, DELAY_UP_STOP = 66, }; 
; 34   : 
; 35   : 	m_ShowAniState.SetCurState( SAT_NONE );

  0000c	83 c1 04	 add	 ecx, 4
  0000f	33 db		 xor	 ebx, ebx
  00011	53		 push	 ebx
  00012	89 4d f0	 mov	 DWORD PTR tv256[ebp], ecx
  00015	e8 00 00 00 00	 call	 ?SetCurState@FSMStateMgr@@QAEXH@Z ; FSMStateMgr::SetCurState

; 36   : 
; 37   : 	FSMState *pState = new FSMState(SAT_NONE);

  0001a	6a 38		 push	 56			; 00000038H
  0001c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00021	59		 pop	 ecx
  00022	89 45 ec	 mov	 DWORD PTR $T505233[ebp], eax
  00025	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00028	3b c3		 cmp	 eax, ebx
  0002a	74 0c		 je	 SHORT $LN11@InitShowAn
  0002c	53		 push	 ebx
  0002d	8b c8		 mov	 ecx, eax
  0002f	e8 00 00 00 00	 call	 ??0FSMState@@QAE@H@Z	; FSMState::FSMState
  00034	8b f0		 mov	 esi, eax
  00036	eb 02		 jmp	 SHORT $LN12@InitShowAn
$LN11@InitShowAn:
  00038	33 f6		 xor	 esi, esi
$LN12@InitShowAn:
  0003a	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1

; 38   : 	if( pState )

  0003e	6a 02		 push	 2
  00040	5f		 pop	 edi
  00041	3b f3		 cmp	 esi, ebx
  00043	74 25		 je	 SHORT $LN8@InitShowAn

; 39   : 	{
; 40   : 		pState->Add( SAT_DELAY,  SAT_DELAY );

  00045	6a ff		 push	 -1
  00047	57		 push	 edi
  00048	57		 push	 edi
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?Add@FSMState@@QAEXHHH@Z ; FSMState::Add

; 41   : 		pState->Add( SAT_START_ROUND, SAT_START_ROUND );

  00050	6a ff		 push	 -1
  00052	6a 01		 push	 1
  00054	6a 01		 push	 1
  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ?Add@FSMState@@QAEXHHH@Z ; FSMState::Add

; 42   : 		pState->Add( SAT_END,  SAT_END );

  0005d	6a ff		 push	 -1
  0005f	6a 07		 push	 7
  00061	6a 07		 push	 7
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?Add@FSMState@@QAEXHHH@Z ; FSMState::Add
$LN8@InitShowAn:

; 43   : 	}
; 44   : 	m_ShowAniState.Add( pState );

  0006a	8b 4d f0	 mov	 ecx, DWORD PTR tv256[ebp]
  0006d	56		 push	 esi
  0006e	e8 00 00 00 00	 call	 ?Add@FSMStateMgr@@QAEXPAVFSMState@@@Z ; FSMStateMgr::Add

; 45   : 
; 46   : 	pState = new FSMState(SAT_START_ROUND);

  00073	6a 38		 push	 56			; 00000038H
  00075	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007a	59		 pop	 ecx
  0007b	89 45 ec	 mov	 DWORD PTR $T505237[ebp], eax
  0007e	33 c9		 xor	 ecx, ecx
  00080	41		 inc	 ecx
  00081	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ecx
  00084	3b c3		 cmp	 eax, ebx
  00086	74 0c		 je	 SHORT $LN13@InitShowAn
  00088	51		 push	 ecx
  00089	8b c8		 mov	 ecx, eax
  0008b	e8 00 00 00 00	 call	 ??0FSMState@@QAE@H@Z	; FSMState::FSMState
  00090	8b f0		 mov	 esi, eax
  00092	eb 02		 jmp	 SHORT $LN14@InitShowAn
$LN13@InitShowAn:
  00094	33 f6		 xor	 esi, esi
$LN14@InitShowAn:
  00096	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1

; 47   : 	if( pState )

  0009a	3b f3		 cmp	 esi, ebx
  0009c	74 16		 je	 SHORT $LN7@InitShowAn

; 48   : 	{
; 49   : 		pState->Add( SAT_DELAY,  SAT_DELAY);

  0009e	6a ff		 push	 -1
  000a0	57		 push	 edi
  000a1	57		 push	 edi
  000a2	8b ce		 mov	 ecx, esi
  000a4	e8 00 00 00 00	 call	 ?Add@FSMState@@QAEXHHH@Z ; FSMState::Add

; 50   : 		pState->Add( SAT_NONE,  SAT_NONE );

  000a9	6a ff		 push	 -1
  000ab	53		 push	 ebx
  000ac	53		 push	 ebx
  000ad	8b ce		 mov	 ecx, esi
  000af	e8 00 00 00 00	 call	 ?Add@FSMState@@QAEXHHH@Z ; FSMState::Add
$LN7@InitShowAn:

; 51   : 	}
; 52   : 	m_ShowAniState.Add( pState );	

  000b4	8b 4d f0	 mov	 ecx, DWORD PTR tv256[ebp]
  000b7	56		 push	 esi
  000b8	e8 00 00 00 00	 call	 ?Add@FSMStateMgr@@QAEXPAVFSMState@@@Z ; FSMStateMgr::Add

; 53   : 
; 54   : 	pState = new FSMState(SAT_DELAY);

  000bd	6a 38		 push	 56			; 00000038H
  000bf	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c4	59		 pop	 ecx
  000c5	89 45 ec	 mov	 DWORD PTR $T505241[ebp], eax
  000c8	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  000cb	3b c3		 cmp	 eax, ebx
  000cd	74 0c		 je	 SHORT $LN15@InitShowAn
  000cf	57		 push	 edi
  000d0	8b c8		 mov	 ecx, eax
  000d2	e8 00 00 00 00	 call	 ??0FSMState@@QAE@H@Z	; FSMState::FSMState
  000d7	8b f0		 mov	 esi, eax
  000d9	eb 02		 jmp	 SHORT $LN16@InitShowAn
$LN15@InitShowAn:
  000db	33 f6		 xor	 esi, esi
$LN16@InitShowAn:
  000dd	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1

; 55   : 	if( pState )

  000e1	6a 03		 push	 3
  000e3	5b		 pop	 ebx
  000e4	85 f6		 test	 esi, esi
  000e6	74 0e		 je	 SHORT $LN6@InitShowAn

; 56   : 		pState->Add( SAT_DELAY,  SAT_UP , DELAY_DELAY);

  000e8	68 a5 00 00 00	 push	 165			; 000000a5H
  000ed	53		 push	 ebx
  000ee	57		 push	 edi
  000ef	8b ce		 mov	 ecx, esi
  000f1	e8 00 00 00 00	 call	 ?Add@FSMState@@QAEXHHH@Z ; FSMState::Add
$LN6@InitShowAn:

; 57   : 	m_ShowAniState.Add( pState );	

  000f6	8b 4d f0	 mov	 ecx, DWORD PTR tv256[ebp]
  000f9	56		 push	 esi
  000fa	e8 00 00 00 00	 call	 ?Add@FSMStateMgr@@QAEXPAVFSMState@@@Z ; FSMStateMgr::Add

; 58   : 
; 59   : 	pState = new FSMState(SAT_UP);

  000ff	6a 38		 push	 56			; 00000038H
  00101	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00106	59		 pop	 ecx
  00107	89 45 ec	 mov	 DWORD PTR $T505245[ebp], eax
  0010a	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0010d	85 c0		 test	 eax, eax
  0010f	74 0c		 je	 SHORT $LN17@InitShowAn
  00111	53		 push	 ebx
  00112	8b c8		 mov	 ecx, eax
  00114	e8 00 00 00 00	 call	 ??0FSMState@@QAE@H@Z	; FSMState::FSMState
  00119	8b f8		 mov	 edi, eax
  0011b	eb 02		 jmp	 SHORT $LN18@InitShowAn
$LN17@InitShowAn:
  0011d	33 ff		 xor	 edi, edi
$LN18@InitShowAn:
  0011f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1

; 60   : 	if( pState )

  00123	6a 04		 push	 4
  00125	5e		 pop	 esi
  00126	85 ff		 test	 edi, edi
  00128	74 0e		 je	 SHORT $LN5@InitShowAn

; 61   : 		pState->Add( SAT_UP,  SAT_DOWN , DELAY_UP);

  0012a	68 c6 00 00 00	 push	 198			; 000000c6H
  0012f	56		 push	 esi
  00130	53		 push	 ebx
  00131	8b cf		 mov	 ecx, edi
  00133	e8 00 00 00 00	 call	 ?Add@FSMState@@QAEXHHH@Z ; FSMState::Add
$LN5@InitShowAn:

; 62   : 	m_ShowAniState.Add( pState );

  00138	8b 4d f0	 mov	 ecx, DWORD PTR tv256[ebp]
  0013b	57		 push	 edi
  0013c	e8 00 00 00 00	 call	 ?Add@FSMStateMgr@@QAEXPAVFSMState@@@Z ; FSMStateMgr::Add

; 63   : 
; 64   : 	pState = new FSMState(SAT_DOWN);

  00141	6a 38		 push	 56			; 00000038H
  00143	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00148	59		 pop	 ecx
  00149	89 45 ec	 mov	 DWORD PTR $T505249[ebp], eax
  0014c	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  0014f	85 c0		 test	 eax, eax
  00151	74 0c		 je	 SHORT $LN19@InitShowAn
  00153	56		 push	 esi
  00154	8b c8		 mov	 ecx, eax
  00156	e8 00 00 00 00	 call	 ??0FSMState@@QAE@H@Z	; FSMState::FSMState
  0015b	8b d8		 mov	 ebx, eax
  0015d	eb 02		 jmp	 SHORT $LN20@InitShowAn
$LN19@InitShowAn:
  0015f	33 db		 xor	 ebx, ebx
$LN20@InitShowAn:
  00161	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1

; 65   : 	if( pState )

  00165	6a 05		 push	 5
  00167	5f		 pop	 edi
  00168	85 db		 test	 ebx, ebx
  0016a	74 0b		 je	 SHORT $LN4@InitShowAn

; 66   : 		pState->Add( SAT_DOWN,  SAT_UP_STOP , DELAY_DOWN );

  0016c	6a 42		 push	 66			; 00000042H
  0016e	57		 push	 edi
  0016f	56		 push	 esi
  00170	8b cb		 mov	 ecx, ebx
  00172	e8 00 00 00 00	 call	 ?Add@FSMState@@QAEXHHH@Z ; FSMState::Add
$LN4@InitShowAn:

; 67   : 	m_ShowAniState.Add( pState );

  00177	8b 4d f0	 mov	 ecx, DWORD PTR tv256[ebp]
  0017a	53		 push	 ebx
  0017b	e8 00 00 00 00	 call	 ?Add@FSMStateMgr@@QAEXPAVFSMState@@@Z ; FSMStateMgr::Add

; 68   : 
; 69   : 	pState = new FSMState(SAT_UP_STOP);

  00180	6a 38		 push	 56			; 00000038H
  00182	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00187	59		 pop	 ecx
  00188	89 45 ec	 mov	 DWORD PTR $T505253[ebp], eax
  0018b	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  0018e	85 c0		 test	 eax, eax
  00190	74 0c		 je	 SHORT $LN21@InitShowAn
  00192	57		 push	 edi
  00193	8b c8		 mov	 ecx, eax
  00195	e8 00 00 00 00	 call	 ??0FSMState@@QAE@H@Z	; FSMState::FSMState
  0019a	8b d8		 mov	 ebx, eax
  0019c	eb 02		 jmp	 SHORT $LN22@InitShowAn
$LN21@InitShowAn:
  0019e	33 db		 xor	 ebx, ebx
$LN22@InitShowAn:
  001a0	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   : 	if( pState )

  001a4	6a 06		 push	 6
  001a6	5e		 pop	 esi
  001a7	85 db		 test	 ebx, ebx
  001a9	74 0b		 je	 SHORT $LN3@InitShowAn

; 71   : 		pState->Add( SAT_UP_STOP,  SAT_STOP , DELAY_UP_STOP );

  001ab	6a 42		 push	 66			; 00000042H
  001ad	56		 push	 esi
  001ae	57		 push	 edi
  001af	8b cb		 mov	 ecx, ebx
  001b1	e8 00 00 00 00	 call	 ?Add@FSMState@@QAEXHHH@Z ; FSMState::Add
$LN3@InitShowAn:

; 72   : 	m_ShowAniState.Add( pState );

  001b6	8b 4d f0	 mov	 ecx, DWORD PTR tv256[ebp]
  001b9	53		 push	 ebx
  001ba	e8 00 00 00 00	 call	 ?Add@FSMStateMgr@@QAEXPAVFSMState@@@Z ; FSMStateMgr::Add

; 73   : 
; 74   : 	pState = new FSMState(SAT_STOP);

  001bf	6a 38		 push	 56			; 00000038H
  001c1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001c6	59		 pop	 ecx
  001c7	89 45 ec	 mov	 DWORD PTR $T505257[ebp], eax
  001ca	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  001cd	85 c0		 test	 eax, eax
  001cf	74 0c		 je	 SHORT $LN23@InitShowAn
  001d1	56		 push	 esi
  001d2	8b c8		 mov	 ecx, eax
  001d4	e8 00 00 00 00	 call	 ??0FSMState@@QAE@H@Z	; FSMState::FSMState
  001d9	8b f0		 mov	 esi, eax
  001db	eb 02		 jmp	 SHORT $LN24@InitShowAn
$LN23@InitShowAn:
  001dd	33 f6		 xor	 esi, esi
$LN24@InitShowAn:
  001df	83 cf ff	 or	 edi, -1
  001e2	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi

; 75   : 	if( pState )

  001e5	85 f6		 test	 esi, esi
  001e7	74 0c		 je	 SHORT $LN2@InitShowAn

; 76   : 		pState->Add( SAT_END,  SAT_END );

  001e9	57		 push	 edi
  001ea	6a 07		 push	 7
  001ec	6a 07		 push	 7
  001ee	8b ce		 mov	 ecx, esi
  001f0	e8 00 00 00 00	 call	 ?Add@FSMState@@QAEXHHH@Z ; FSMState::Add
$LN2@InitShowAn:

; 77   : 	m_ShowAniState.Add( pState );

  001f5	8b 4d f0	 mov	 ecx, DWORD PTR tv256[ebp]
  001f8	56		 push	 esi
  001f9	e8 00 00 00 00	 call	 ?Add@FSMStateMgr@@QAEXPAVFSMState@@@Z ; FSMStateMgr::Add

; 78   : 
; 79   : 	pState = new FSMState(SAT_END);

  001fe	6a 38		 push	 56			; 00000038H
  00200	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00205	59		 pop	 ecx
  00206	89 45 ec	 mov	 DWORD PTR $T505261[ebp], eax
  00209	6a 07		 push	 7
  0020b	59		 pop	 ecx
  0020c	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ecx
  0020f	85 c0		 test	 eax, eax
  00211	74 0c		 je	 SHORT $LN25@InitShowAn
  00213	51		 push	 ecx
  00214	8b c8		 mov	 ecx, eax
  00216	e8 00 00 00 00	 call	 ??0FSMState@@QAE@H@Z	; FSMState::FSMState
  0021b	8b f0		 mov	 esi, eax
  0021d	eb 02		 jmp	 SHORT $LN26@InitShowAn
$LN25@InitShowAn:
  0021f	33 f6		 xor	 esi, esi
$LN26@InitShowAn:
  00221	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi

; 80   : 	if( pState )

  00224	85 f6		 test	 esi, esi
  00226	74 18		 je	 SHORT $LN1@InitShowAn

; 81   : 	{
; 82   : 		pState->Add( SAT_NONE,  SAT_NONE );

  00228	57		 push	 edi
  00229	6a 00		 push	 0
  0022b	6a 00		 push	 0
  0022d	8b ce		 mov	 ecx, esi
  0022f	e8 00 00 00 00	 call	 ?Add@FSMState@@QAEXHHH@Z ; FSMState::Add

; 83   : 		pState->Add( SAT_START_ROUND, SAT_START_ROUND );

  00234	57		 push	 edi
  00235	6a 01		 push	 1
  00237	6a 01		 push	 1
  00239	8b ce		 mov	 ecx, esi
  0023b	e8 00 00 00 00	 call	 ?Add@FSMState@@QAEXHHH@Z ; FSMState::Add
$LN1@InitShowAn:

; 84   : 	}
; 85   : 	m_ShowAniState.Add( pState );

  00240	8b 4d f0	 mov	 ecx, DWORD PTR tv256[ebp]
  00243	56		 push	 esi
  00244	e8 00 00 00 00	 call	 ?Add@FSMStateMgr@@QAEXPAVFSMState@@@Z ; FSMStateMgr::Add

; 86   : }

  00249	e8 00 00 00 00	 call	 __EH_epilog3
  0024e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InitShowAniState@ioAnimationState@@IAEXXZ$0:
  00000	ff 75 ec	 push	 DWORD PTR $T505233[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__unwindfunclet$?InitShowAniState@ioAnimationState@@IAEXXZ$1:
  0000a	ff 75 ec	 push	 DWORD PTR $T505237[ebp]
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	59		 pop	 ecx
  00013	c3		 ret	 0
__unwindfunclet$?InitShowAniState@ioAnimationState@@IAEXXZ$2:
  00014	ff 75 ec	 push	 DWORD PTR $T505241[ebp]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	59		 pop	 ecx
  0001d	c3		 ret	 0
__unwindfunclet$?InitShowAniState@ioAnimationState@@IAEXXZ$3:
  0001e	ff 75 ec	 push	 DWORD PTR $T505245[ebp]
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	59		 pop	 ecx
  00027	c3		 ret	 0
__unwindfunclet$?InitShowAniState@ioAnimationState@@IAEXXZ$4:
  00028	ff 75 ec	 push	 DWORD PTR $T505249[ebp]
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	59		 pop	 ecx
  00031	c3		 ret	 0
__unwindfunclet$?InitShowAniState@ioAnimationState@@IAEXXZ$5:
  00032	ff 75 ec	 push	 DWORD PTR $T505253[ebp]
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	59		 pop	 ecx
  0003b	c3		 ret	 0
__unwindfunclet$?InitShowAniState@ioAnimationState@@IAEXXZ$6:
  0003c	ff 75 ec	 push	 DWORD PTR $T505257[ebp]
  0003f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00044	59		 pop	 ecx
  00045	c3		 ret	 0
__unwindfunclet$?InitShowAniState@ioAnimationState@@IAEXXZ$7:
  00046	ff 75 ec	 push	 DWORD PTR $T505261[ebp]
  00049	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004e	59		 pop	 ecx
  0004f	c3		 ret	 0
__ehhandler$?InitShowAniState@ioAnimationState@@IAEXXZ:
  00050	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00054	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00057	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0005a	33 c8		 xor	 ecx, eax
  0005c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00061	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?InitShowAniState@ioAnimationState@@IAEXXZ
  00066	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?InitShowAniState@ioAnimationState@@IAEXXZ ENDP		; ioAnimationState::InitShowAniState
PUBLIC	?return5@@YAIXZ					; return5
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return5@@YAIXZ
_TEXT	SEGMENT
?return5@@YAIXZ PROC					; return5, COMDAT

; 18   : 	__forceinline unsigned int return5() { __asm mov eax, 5 };

  00000	b8 05 00 00 00	 mov	 eax, 5
  00005	c3		 ret	 0
?return5@@YAIXZ ENDP					; return5
_TEXT	ENDS
PUBLIC	?return10@@YAIXZ				; return10
; Function compile flags: /Ogsp
;	COMDAT ?return10@@YAIXZ
_TEXT	SEGMENT
?return10@@YAIXZ PROC					; return10, COMDAT

; 21   : 	__forceinline unsigned int return10() { __asm mov eax, 10 };

  00000	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00005	c3		 ret	 0
?return10@@YAIXZ ENDP					; return10
_TEXT	ENDS
PUBLIC	?return1000000000@@YAIXZ			; return1000000000
; Function compile flags: /Ogsp
;	COMDAT ?return1000000000@@YAIXZ
_TEXT	SEGMENT
?return1000000000@@YAIXZ PROC				; return1000000000, COMDAT

; 30   : 	__forceinline unsigned int return1000000000() { __asm mov eax, 1000000000 };

  00000	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00005	c3		 ret	 0
?return1000000000@@YAIXZ ENDP				; return1000000000
_TEXT	ENDS
PUBLIC	?return_PI@@YAIXZ				; return_PI
; Function compile flags: /Ogsp
;	COMDAT ?return_PI@@YAIXZ
_TEXT	SEGMENT
?return_PI@@YAIXZ PROC					; return_PI, COMDAT

; 31   : 	__forceinline unsigned int return_PI() { __asm mov eax,   3141592654 };

  00000	b8 4e e6 40 bb	 mov	 eax, -1153374642	; bb40e64eH
  00005	c3		 ret	 0
?return_PI@@YAIXZ ENDP					; return_PI
_TEXT	ENDS
PUBLIC	?ChangeShowAniState@ioAnimationState@@QAEXW4ShowAniType@1@@Z ; ioAnimationState::ChangeShowAniState
EXTRN	?ChangeState@FSMStateMgr@@QAEHH@Z:PROC		; FSMStateMgr::ChangeState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\ioanimationstate.cpp
;	COMDAT ?ChangeShowAniState@ioAnimationState@@QAEXW4ShowAniType@1@@Z
_TEXT	SEGMENT
_eShowAniType$ = 8					; size = 4
?ChangeShowAniState@ioAnimationState@@QAEXW4ShowAniType@1@@Z PROC ; ioAnimationState::ChangeShowAniState, COMDAT
; _this$ = ecx

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   : 	m_ShowAniState.ChangeState( (int) eShowAniType );

  00003	83 c1 04	 add	 ecx, 4

; 91   : }

  00006	5d		 pop	 ebp

; 90   : 	m_ShowAniState.ChangeState( (int) eShowAniType );

  00007	e9 00 00 00 00	 jmp	 ?ChangeState@FSMStateMgr@@QAEHH@Z ; FSMStateMgr::ChangeState
?ChangeShowAniState@ioAnimationState@@QAEXW4ShowAniType@1@@Z ENDP ; ioAnimationState::ChangeShowAniState
_TEXT	ENDS
PUBLIC	_cosf
EXTRN	__fltused:DWORD
EXTRN	__CIcos:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv69 = 8						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	e8 00 00 00 00	 call	 __CIcos
  0000b	d9 5d 08	 fstp	 DWORD PTR tv69[ebp]
  0000e	d9 45 08	 fld	 DWORD PTR tv69[ebp]
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
PUBLIC	_sinf
EXTRN	__CIsin:PROC
; Function compile flags: /Ogsp
;	COMDAT _sinf
_TEXT	SEGMENT
tv69 = 8						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	e8 00 00 00 00	 call	 __CIsin
  0000b	d9 5d 08	 fstp	 DWORD PTR tv69[ebp]
  0000e	d9 45 08	 fld	 DWORD PTR tv69[ebp]
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
PUBLIC	?cos@@YAMM@Z					; cos
; Function compile flags: /Ogsp
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
tv73 = 8						; size = 4
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 512  :         {return (cosf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	e8 00 00 00 00	 call	 __CIcos
  0000b	d9 5d 08	 fstp	 DWORD PTR tv73[ebp]
  0000e	d9 45 08	 fld	 DWORD PTR tv73[ebp]
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
PUBLIC	?sin@@YAMM@Z					; sin
; Function compile flags: /Ogsp
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
tv73 = 8						; size = 4
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 538  :         {return (sinf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	e8 00 00 00 00	 call	 __CIsin
  0000b	d9 5d 08	 fstp	 DWORD PTR tv73[ebp]
  0000e	d9 45 08	 fld	 DWORD PTR tv73[ebp]
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
PUBLIC	?GetCurState@FSMStateMgr@@QBEHXZ		; FSMStateMgr::GetCurState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\fsmstatemgr.h
;	COMDAT ?GetCurState@FSMStateMgr@@QBEHXZ
_TEXT	SEGMENT
?GetCurState@FSMStateMgr@@QBEHXZ PROC			; FSMStateMgr::GetCurState, COMDAT
; _this$ = ecx

; 52   : 	inline int GetCurState() const { return m_iCurState; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetCurState@FSMStateMgr@@QBEHXZ ENDP			; FSMStateMgr::GetCurState
_TEXT	ENDS
PUBLIC	?GetCurTime@FSMStateMgr@@QBEKXZ			; FSMStateMgr::GetCurTime
; Function compile flags: /Ogsp
;	COMDAT ?GetCurTime@FSMStateMgr@@QBEKXZ
_TEXT	SEGMENT
?GetCurTime@FSMStateMgr@@QBEKXZ PROC			; FSMStateMgr::GetCurTime, COMDAT
; _this$ = ecx

; 55   : 	inline DWORD GetCurTime() const { return m_dwCurTime; }

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	c3		 ret	 0
?GetCurTime@FSMStateMgr@@QBEKXZ ENDP			; FSMStateMgr::GetCurTime
_TEXT	ENDS
PUBLIC	?GetDelay@FSMStateMgr@@QBEHXZ			; FSMStateMgr::GetDelay
; Function compile flags: /Ogsp
;	COMDAT ?GetDelay@FSMStateMgr@@QBEHXZ
_TEXT	SEGMENT
?GetDelay@FSMStateMgr@@QBEHXZ PROC			; FSMStateMgr::GetDelay, COMDAT
; _this$ = ecx

; 61   : 	inline int GetDelay() const { return m_iCurDelay; }

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	c3		 ret	 0
?GetDelay@FSMStateMgr@@QBEHXZ ENDP			; FSMStateMgr::GetDelay
_TEXT	ENDS
PUBLIC	?IsSkipUIByBlind@ioSP2GUIManager@@QBE_NXZ	; ioSP2GUIManager::IsSkipUIByBlind
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iosp2guimanager.h
;	COMDAT ?IsSkipUIByBlind@ioSP2GUIManager@@QBE_NXZ
_TEXT	SEGMENT
?IsSkipUIByBlind@ioSP2GUIManager@@QBE_NXZ PROC		; ioSP2GUIManager::IsSkipUIByBlind, COMDAT
; _this$ = ecx

; 236  : 	inline bool IsSkipUIByBlind() const { return m_bSkipUIByBlind; }	

  00000	8a 81 e0 04 00
	00		 mov	 al, BYTE PTR [ecx+1248]
  00006	c3		 ret	 0
?IsSkipUIByBlind@ioSP2GUIManager@@QBE_NXZ ENDP		; ioSP2GUIManager::IsSkipUIByBlind
_TEXT	ENDS
PUBLIC	??0ioAnimationState@@QAE@XZ			; ioAnimationState::ioAnimationState
EXTRN	??0FSMStateMgr@@QAE@XZ:PROC			; FSMStateMgr::FSMStateMgr
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\ioanimationstate.cpp
xdata$x	SEGMENT
__unwindtable$??0ioAnimationState@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioAnimationState@@QAE@XZ$0
__ehfuncinfo$??0ioAnimationState@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioAnimationState@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioAnimationState@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioAnimationState@@QAE@XZ PROC			; ioAnimationState::ioAnimationState, COMDAT
; _this$ = ecx

; 6    : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioAnimationState@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioAnimationState@@6B@
  0001a	e8 00 00 00 00	 call	 ??0FSMStateMgr@@QAE@XZ	; FSMStateMgr::FSMStateMgr
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 7    : 	InitShowAniState();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?InitShowAniState@ioAnimationState@@IAEXXZ ; ioAnimationState::InitShowAniState

; 8    : }

  0002a	8b c6		 mov	 eax, esi
  0002c	e8 00 00 00 00	 call	 __EH_epilog3
  00031	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioAnimationState@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1FSMStateMgr@@UAE@XZ	; FSMStateMgr::~FSMStateMgr
__ehhandler$??0ioAnimationState@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioAnimationState@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioAnimationState@@QAE@XZ ENDP			; ioAnimationState::ioAnimationState
; Function compile flags: /Ogsp
;	COMDAT ??_GioAnimationState@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioAnimationState@@UAEPAXI@Z PROC			; ioAnimationState::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioAnimationState@@UAE@XZ ; ioAnimationState::~ioAnimationState
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioAnimationState@@UAEPAXI@Z ENDP			; ioAnimationState::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?IsRender@ioAnimationState@@QAE_NXZ		; ioAnimationState::IsRender
; Function compile flags: /Ogsp
;	COMDAT ?IsRender@ioAnimationState@@QAE_NXZ
_TEXT	SEGMENT
?IsRender@ioAnimationState@@QAE_NXZ PROC		; ioAnimationState::IsRender, COMDAT
; _this$ = ecx

; 17   : 	if( m_ShowAniState.GetCurState() == SAT_DELAY || 
; 18   : 		m_ShowAniState.GetCurState() == SAT_START_ROUND ) 

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	83 f8 02	 cmp	 eax, 2
  00006	74 08		 je	 SHORT $LN1@IsRender
  00008	83 f8 01	 cmp	 eax, 1
  0000b	74 03		 je	 SHORT $LN1@IsRender

; 20   : 
; 21   : 	return true;

  0000d	b0 01		 mov	 al, 1

; 22   : }

  0000f	c3		 ret	 0
$LN1@IsRender:

; 19   : 		return false;

  00010	32 c0		 xor	 al, al

; 22   : }

  00012	c3		 ret	 0
?IsRender@ioAnimationState@@QAE_NXZ ENDP		; ioAnimationState::IsRender
_TEXT	ENDS
PUBLIC	?GetCurShowAniState@ioAnimationState@@QAEHXZ	; ioAnimationState::GetCurShowAniState
; Function compile flags: /Ogsp
;	COMDAT ?GetCurShowAniState@ioAnimationState@@QAEHXZ
_TEXT	SEGMENT
?GetCurShowAniState@ioAnimationState@@QAEHXZ PROC	; ioAnimationState::GetCurShowAniState, COMDAT
; _this$ = ecx

; 96   : 	return m_ShowAniState.GetCurState();

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 97   : }

  00003	c3		 ret	 0
?GetCurShowAniState@ioAnimationState@@QAEHXZ ENDP	; ioAnimationState::GetCurShowAniState
_TEXT	ENDS
PUBLIC	__real@4026000000000000
PUBLIC	__real@4f800000
PUBLIC	?UpdateShowAni@ioAnimationState@@QAE_NHHAAH@Z	; ioAnimationState::UpdateShowAni
EXTRN	?UpdateTime@FSMStateMgr@@QAEXXZ:PROC		; FSMStateMgr::UpdateTime
EXTRN	?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ:PROC	; ioSP2GUIManager::GetSingleton
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@4026000000000000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\fsmstatemgr.h
CONST	SEGMENT
__real@4026000000000000 DQ 04026000000000000r	; 11
CONST	ENDS
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\ioanimationstate.cpp
CONST	ENDS
;	COMDAT ?UpdateShowAni@ioAnimationState@@QAE_NHHAAH@Z
_TEXT	SEGMENT
tv296 = -12						; size = 8
tv282 = -12						; size = 8
tv263 = -12						; size = 8
tv548 = -4						; size = 4
tv540 = -4						; size = 4
tv536 = -4						; size = 4
tv532 = -4						; size = 4
tv529 = -4						; size = 4
tv525 = -4						; size = 4
tv521 = -4						; size = 4
tv517 = -4						; size = 4
tv511 = -4						; size = 4
_nDefX$ = 8						; size = 4
tv507 = 12						; size = 4
tv494 = 12						; size = 4
tv490 = 12						; size = 4
tv486 = 12						; size = 4
tv482 = 12						; size = 4
tv479 = 12						; size = 4
tv475 = 12						; size = 4
tv471 = 12						; size = 4
tv467 = 12						; size = 4
tv461 = 12						; size = 4
tv409 = 12						; size = 4
tv403 = 12						; size = 4
tv398 = 12						; size = 4
tv394 = 12						; size = 4
tv391 = 12						; size = 4
tv385 = 12						; size = 4
tv380 = 12						; size = 4
tv376 = 12						; size = 4
tv369 = 12						; size = 4
_nDefY$ = 12						; size = 4
_nCurrY$ = 16						; size = 4
?UpdateShowAni@ioAnimationState@@QAE_NHHAAH@Z PROC	; ioAnimationState::UpdateShowAni, COMDAT
; _this$ = ecx

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx

; 101  : 	if( !g_GUIMgr.IsSkipUIByBlind() && m_ShowAniState.GetCurState() == SAT_NONE )

  0000b	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  00010	33 db		 xor	 ebx, ebx
  00012	38 98 e0 04 00
	00		 cmp	 BYTE PTR [eax+1248], bl
  00018	75 0f		 jne	 SHORT $LN81@UpdateShow
  0001a	39 5e 08	 cmp	 DWORD PTR [esi+8], ebx
  0001d	75 0a		 jne	 SHORT $LN81@UpdateShow

; 102  : 		m_ShowAniState.ChangeState( SAT_END );

  0001f	6a 07		 push	 7
  00021	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00024	e8 00 00 00 00	 call	 ?ChangeState@FSMStateMgr@@QAEHH@Z ; FSMStateMgr::ChangeState
$LN81@UpdateShow:

; 103  : 
; 104  : 	if( !g_GUIMgr.IsSkipUIByBlind() && m_ShowAniState.GetCurState() == SAT_START_ROUND )

  00029	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  0002e	38 98 e0 04 00
	00		 cmp	 BYTE PTR [eax+1248], bl
  00034	75 10		 jne	 SHORT $LN9@UpdateShow
  00036	83 7e 08 01	 cmp	 DWORD PTR [esi+8], 1
  0003a	75 0a		 jne	 SHORT $LN9@UpdateShow

; 105  : 		m_ShowAniState.ChangeState( SAT_DELAY );

  0003c	6a 02		 push	 2
  0003e	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00041	e8 00 00 00 00	 call	 ?ChangeState@FSMStateMgr@@QAEHH@Z ; FSMStateMgr::ChangeState
$LN9@UpdateShow:

; 106  : 
; 107  : 	if( g_GUIMgr.IsSkipUIByBlind() && m_ShowAniState.GetCurState() == SAT_END )

  00046	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  0004b	38 98 e0 04 00
	00		 cmp	 BYTE PTR [eax+1248], bl
  00051	74 0f		 je	 SHORT $LN8@UpdateShow
  00053	83 7e 08 07	 cmp	 DWORD PTR [esi+8], 7
  00057	75 09		 jne	 SHORT $LN8@UpdateShow

; 108  : 		m_ShowAniState.ChangeState( SAT_NONE );

  00059	53		 push	 ebx
  0005a	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0005d	e8 00 00 00 00	 call	 ?ChangeState@FSMStateMgr@@QAEHH@Z ; FSMStateMgr::ChangeState
$LN8@UpdateShow:

; 109  : 
; 110  : 	m_ShowAniState.UpdateTime();

  00062	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00065	e8 00 00 00 00	 call	 ?UpdateTime@FSMStateMgr@@QAEXXZ ; FSMStateMgr::UpdateTime

; 111  : 
; 112  : 	if( m_ShowAniState.GetCurState() == SAT_UP )

  0006a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0006d	83 f8 03	 cmp	 eax, 3
  00070	0f 85 ba 00 00
	00		 jne	 $LN7@UpdateShow

; 113  : 	{
; 114  : 		enum { MINUS_Y_POS = 140 };
; 115  : 		int iStartYPos = MINUS_Y_POS + nDefY;
; 116  : 		nCurrY = nDefY - ( cos( (FLOAT_PI * FLOAT05 * m_ShowAniState.GetCurTime()  ) / m_ShowAniState.GetDelay() ) * iStartYPos );	

  00076	b8 4e e6 40 bb	 mov	 eax, -1153374642	; bb40e64eH
  0007b	8b c8		 mov	 ecx, eax
  0007d	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00082	8b d0		 mov	 edx, eax
  00084	b8 05 00 00 00	 mov	 eax, 5
  00089	8b f8		 mov	 edi, eax
  0008b	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00090	db 45 0c	 fild	 DWORD PTR _nDefY$[ebp]
  00093	89 7d fc	 mov	 DWORD PTR tv548[ebp], edi
  00096	db 45 fc	 fild	 DWORD PTR tv548[ebp]
  00099	85 ff		 test	 edi, edi
  0009b	79 06		 jns	 SHORT $LN82@UpdateShow
  0009d	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN82@UpdateShow:
  000a3	89 45 fc	 mov	 DWORD PTR tv540[ebp], eax
  000a6	db 45 fc	 fild	 DWORD PTR tv540[ebp]
  000a9	85 c0		 test	 eax, eax
  000ab	79 06		 jns	 SHORT $LN83@UpdateShow
  000ad	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN83@UpdateShow:
  000b3	de f9		 fdivp	 ST(1), ST(0)
  000b5	d9 5d fc	 fstp	 DWORD PTR tv536[ebp]
  000b8	d9 45 fc	 fld	 DWORD PTR tv536[ebp]
  000bb	89 4d fc	 mov	 DWORD PTR tv532[ebp], ecx
  000be	db 45 fc	 fild	 DWORD PTR tv532[ebp]
  000c1	85 c9		 test	 ecx, ecx
  000c3	79 06		 jns	 SHORT $LN84@UpdateShow
  000c5	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN84@UpdateShow:
  000cb	89 55 fc	 mov	 DWORD PTR tv529[ebp], edx
  000ce	db 45 fc	 fild	 DWORD PTR tv529[ebp]
  000d1	85 d2		 test	 edx, edx
  000d3	79 06		 jns	 SHORT $LN85@UpdateShow
  000d5	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN85@UpdateShow:
  000db	de f9		 fdivp	 ST(1), ST(0)
  000dd	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000e0	d9 5d fc	 fstp	 DWORD PTR tv525[ebp]
  000e3	d8 4d fc	 fmul	 DWORD PTR tv525[ebp]
  000e6	db 46 10	 fild	 DWORD PTR [esi+16]
  000e9	85 c0		 test	 eax, eax
  000eb	79 06		 jns	 SHORT $LN86@UpdateShow
  000ed	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN86@UpdateShow:
  000f3	de c9		 fmulp	 ST(1), ST(0)
  000f5	da 76 14	 fidiv	 DWORD PTR [esi+20]
  000f8	d9 5d fc	 fstp	 DWORD PTR tv517[ebp]
  000fb	d9 45 fc	 fld	 DWORD PTR tv517[ebp]
  000fe	d9 c9		 fxch	 ST(1)
  00100	dd 5d f4	 fstp	 QWORD PTR tv296[ebp]
  00103	e8 00 00 00 00	 call	 __CIcos
  00108	d9 5d fc	 fstp	 DWORD PTR tv511[ebp]
  0010b	8b 45 0c	 mov	 eax, DWORD PTR _nDefY$[ebp]
  0010e	d9 45 fc	 fld	 DWORD PTR tv511[ebp]
  00111	05 8c 00 00 00	 add	 eax, 140		; 0000008cH
  00116	89 45 0c	 mov	 DWORD PTR tv507[ebp], eax
  00119	da 4d 0c	 fimul	 DWORD PTR tv507[ebp]
  0011c	dc 6d f4	 fsubr	 QWORD PTR tv296[ebp]
$LN97@UpdateShow:
  0011f	e8 00 00 00 00	 call	 __ftol2_sse
  00124	8b 4d 10	 mov	 ecx, DWORD PTR _nCurrY$[ebp]
  00127	89 01		 mov	 DWORD PTR [ecx], eax
$LN98@UpdateShow:

; 117  : 		return true;

  00129	b0 01		 mov	 al, 1
  0012b	e9 74 01 00 00	 jmp	 $LN11@UpdateShow
$LN7@UpdateShow:

; 118  : 	}
; 119  : 	else if( m_ShowAniState.GetCurState() == SAT_DOWN )

  00130	83 f8 04	 cmp	 eax, 4
  00133	0f 85 a6 00 00
	00		 jne	 $LN5@UpdateShow

; 120  : 	{
; 121  : 		enum { MAX_OFFSET_YPOS = 11 };
; 122  : 		nCurrY = nDefY - ( sin( (FLOAT_PI * FLOAT05 * m_ShowAniState.GetCurTime()  ) / m_ShowAniState.GetDelay() ) * MAX_OFFSET_YPOS );	

  00139	b8 4e e6 40 bb	 mov	 eax, -1153374642	; bb40e64eH
  0013e	8b c8		 mov	 ecx, eax
  00140	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00145	8b d0		 mov	 edx, eax
  00147	b8 05 00 00 00	 mov	 eax, 5
  0014c	8b f8		 mov	 edi, eax
  0014e	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00153	db 45 0c	 fild	 DWORD PTR _nDefY$[ebp]
  00156	89 7d 0c	 mov	 DWORD PTR tv494[ebp], edi
  00159	db 45 0c	 fild	 DWORD PTR tv494[ebp]
  0015c	85 ff		 test	 edi, edi
  0015e	79 06		 jns	 SHORT $LN87@UpdateShow
  00160	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN87@UpdateShow:
  00166	89 45 0c	 mov	 DWORD PTR tv490[ebp], eax
  00169	db 45 0c	 fild	 DWORD PTR tv490[ebp]
  0016c	85 c0		 test	 eax, eax
  0016e	79 06		 jns	 SHORT $LN88@UpdateShow
  00170	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN88@UpdateShow:
  00176	de f9		 fdivp	 ST(1), ST(0)
  00178	d9 5d 0c	 fstp	 DWORD PTR tv486[ebp]
  0017b	d9 45 0c	 fld	 DWORD PTR tv486[ebp]
  0017e	89 4d 0c	 mov	 DWORD PTR tv482[ebp], ecx
  00181	db 45 0c	 fild	 DWORD PTR tv482[ebp]
  00184	85 c9		 test	 ecx, ecx
  00186	79 06		 jns	 SHORT $LN89@UpdateShow
  00188	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN89@UpdateShow:
  0018e	89 55 0c	 mov	 DWORD PTR tv479[ebp], edx
  00191	db 45 0c	 fild	 DWORD PTR tv479[ebp]
  00194	85 d2		 test	 edx, edx
  00196	79 06		 jns	 SHORT $LN90@UpdateShow
  00198	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN90@UpdateShow:
  0019e	de f9		 fdivp	 ST(1), ST(0)
  001a0	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  001a3	d9 5d 0c	 fstp	 DWORD PTR tv475[ebp]
  001a6	d8 4d 0c	 fmul	 DWORD PTR tv475[ebp]
  001a9	db 46 10	 fild	 DWORD PTR [esi+16]
  001ac	85 c0		 test	 eax, eax
  001ae	79 06		 jns	 SHORT $LN91@UpdateShow
  001b0	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN91@UpdateShow:
  001b6	de c9		 fmulp	 ST(1), ST(0)
  001b8	da 76 14	 fidiv	 DWORD PTR [esi+20]
  001bb	d9 5d 0c	 fstp	 DWORD PTR tv467[ebp]
  001be	d9 45 0c	 fld	 DWORD PTR tv467[ebp]
  001c1	d9 c9		 fxch	 ST(1)
  001c3	dd 5d f4	 fstp	 QWORD PTR tv282[ebp]
  001c6	e8 00 00 00 00	 call	 __CIsin
  001cb	d9 5d 0c	 fstp	 DWORD PTR tv461[ebp]
  001ce	d9 45 0c	 fld	 DWORD PTR tv461[ebp]
  001d1	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4026000000000000
  001d7	dc 6d f4	 fsubr	 QWORD PTR tv282[ebp]

; 123  : 		return true;

  001da	e9 40 ff ff ff	 jmp	 $LN97@UpdateShow
$LN5@UpdateShow:

; 124  : 	}
; 125  : 	else if( m_ShowAniState.GetCurState() == SAT_UP_STOP )

  001df	83 f8 05	 cmp	 eax, 5
  001e2	0f 85 a6 00 00
	00		 jne	 $LN3@UpdateShow

; 126  : 	{
; 127  : 		enum { MAX_OFFSET_YPOS = 11 };
; 128  : 		nCurrY = nDefY - ( cos( (FLOAT_PI * FLOAT05 * m_ShowAniState.GetCurTime()  ) / m_ShowAniState.GetDelay() ) * MAX_OFFSET_YPOS );

  001e8	b8 4e e6 40 bb	 mov	 eax, -1153374642	; bb40e64eH
  001ed	8b c8		 mov	 ecx, eax
  001ef	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  001f4	8b d0		 mov	 edx, eax
  001f6	b8 05 00 00 00	 mov	 eax, 5
  001fb	8b f8		 mov	 edi, eax
  001fd	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00202	db 45 0c	 fild	 DWORD PTR _nDefY$[ebp]
  00205	89 7d 0c	 mov	 DWORD PTR tv409[ebp], edi
  00208	db 45 0c	 fild	 DWORD PTR tv409[ebp]
  0020b	85 ff		 test	 edi, edi
  0020d	79 06		 jns	 SHORT $LN92@UpdateShow
  0020f	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN92@UpdateShow:
  00215	89 45 0c	 mov	 DWORD PTR tv403[ebp], eax
  00218	db 45 0c	 fild	 DWORD PTR tv403[ebp]
  0021b	85 c0		 test	 eax, eax
  0021d	79 06		 jns	 SHORT $LN93@UpdateShow
  0021f	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN93@UpdateShow:
  00225	de f9		 fdivp	 ST(1), ST(0)
  00227	d9 5d 0c	 fstp	 DWORD PTR tv398[ebp]
  0022a	d9 45 0c	 fld	 DWORD PTR tv398[ebp]
  0022d	89 4d 0c	 mov	 DWORD PTR tv394[ebp], ecx
  00230	db 45 0c	 fild	 DWORD PTR tv394[ebp]
  00233	85 c9		 test	 ecx, ecx
  00235	79 06		 jns	 SHORT $LN94@UpdateShow
  00237	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN94@UpdateShow:
  0023d	89 55 0c	 mov	 DWORD PTR tv391[ebp], edx
  00240	db 45 0c	 fild	 DWORD PTR tv391[ebp]
  00243	85 d2		 test	 edx, edx
  00245	79 06		 jns	 SHORT $LN95@UpdateShow
  00247	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN95@UpdateShow:
  0024d	de f9		 fdivp	 ST(1), ST(0)
  0024f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00252	d9 5d 0c	 fstp	 DWORD PTR tv385[ebp]
  00255	d8 4d 0c	 fmul	 DWORD PTR tv385[ebp]
  00258	db 46 10	 fild	 DWORD PTR [esi+16]
  0025b	85 c0		 test	 eax, eax
  0025d	79 06		 jns	 SHORT $LN96@UpdateShow
  0025f	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN96@UpdateShow:
  00265	de c9		 fmulp	 ST(1), ST(0)
  00267	da 76 14	 fidiv	 DWORD PTR [esi+20]
  0026a	d9 5d 0c	 fstp	 DWORD PTR tv376[ebp]
  0026d	d9 45 0c	 fld	 DWORD PTR tv376[ebp]
  00270	d9 c9		 fxch	 ST(1)
  00272	dd 5d f4	 fstp	 QWORD PTR tv263[ebp]
  00275	e8 00 00 00 00	 call	 __CIcos
  0027a	d9 5d 0c	 fstp	 DWORD PTR tv369[ebp]
  0027d	d9 45 0c	 fld	 DWORD PTR tv369[ebp]
  00280	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4026000000000000
  00286	dc 6d f4	 fsubr	 QWORD PTR tv263[ebp]

; 129  : 		return true;

  00289	e9 91 fe ff ff	 jmp	 $LN97@UpdateShow
$LN3@UpdateShow:

; 130  : 	}
; 131  : 	else if( m_ShowAniState.GetCurState() == SAT_STOP )

  0028e	83 f8 06	 cmp	 eax, 6
  00291	75 0f		 jne	 SHORT $LN1@UpdateShow

; 132  : 	{
; 133  : 		m_ShowAniState.ChangeState( SAT_END );

  00293	6a 07		 push	 7
  00295	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00298	e8 00 00 00 00	 call	 ?ChangeState@FSMStateMgr@@QAEHH@Z ; FSMStateMgr::ChangeState

; 134  : 		return true;

  0029d	e9 87 fe ff ff	 jmp	 $LN98@UpdateShow
$LN1@UpdateShow:

; 135  : 	}
; 136  : 
; 137  : 	return false;

  002a2	32 c0		 xor	 al, al
$LN11@UpdateShow:
  002a4	5f		 pop	 edi
  002a5	5e		 pop	 esi
  002a6	5b		 pop	 ebx

; 138  : }

  002a7	c9		 leave
  002a8	c2 0c 00	 ret	 12			; 0000000cH
?UpdateShowAni@ioAnimationState@@QAE_NHHAAH@Z ENDP	; ioAnimationState::UpdateShowAni
_TEXT	ENDS
END
