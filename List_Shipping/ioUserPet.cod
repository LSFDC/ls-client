; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioUserPet.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??1tagPetSlot@@QAE@XZ				; tagPetSlot::~tagPetSlot
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1tagPetSlot@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1tagPetSlot@@QAE@XZ$0
__ehfuncinfo$??1tagPetSlot@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1tagPetSlot@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1tagPetSlot@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1tagPetSlot@@QAE@XZ PROC				; tagPetSlot::~tagPetSlot, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1tagPetSlot@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001b	8d 4f 28	 lea	 ecx, DWORD PTR [edi+40]
  0001e	ff d6		 call	 esi
  00020	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00024	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  00027	ff d6		 call	 esi
  00029	e8 00 00 00 00	 call	 __EH_epilog3
  0002e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1tagPetSlot@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 18	 add	 ecx, 24			; 00000018H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1tagPetSlot@@QAE@XZ:
  0000c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00010	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00013	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00016	33 c8		 xor	 ecx, eax
  00018	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1tagPetSlot@@QAE@XZ
  00022	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1tagPetSlot@@QAE@XZ ENDP				; tagPetSlot::~tagPetSlot
PUBLIC	??0tagPetSlot@@QAE@ABU0@@Z			; tagPetSlot::tagPetSlot
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0tagPetSlot@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0tagPetSlot@@QAE@ABU0@@Z$0
__ehfuncinfo$??0tagPetSlot@@QAE@ABU0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0tagPetSlot@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0tagPetSlot@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0tagPetSlot@@QAE@ABU0@@Z PROC				; tagPetSlot::tagPetSlot, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0tagPetSlot@@QAE@ABU0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00014	8b 07		 mov	 eax, DWORD PTR [edi]
  00016	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  0001c	89 06		 mov	 DWORD PTR [esi], eax
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00024	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00027	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0002d	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00030	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00033	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00036	8a 47 14	 mov	 al, BYTE PTR [edi+20]
  00039	88 46 14	 mov	 BYTE PTR [esi+20], al
  0003c	8d 47 18	 lea	 eax, DWORD PTR [edi+24]
  0003f	50		 push	 eax
  00040	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00043	ff d3		 call	 ebx
  00045	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00049	83 c7 28	 add	 edi, 40			; 00000028H
  0004c	57		 push	 edi
  0004d	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00050	ff d3		 call	 ebx
  00052	8b c6		 mov	 eax, esi
  00054	e8 00 00 00 00	 call	 __EH_epilog3
  00059	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0tagPetSlot@@QAE@ABU0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 18	 add	 ecx, 24			; 00000018H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0tagPetSlot@@QAE@ABU0@@Z:
  0000c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00010	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00013	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00016	33 c8		 xor	 ecx, eax
  00018	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0tagPetSlot@@QAE@ABU0@@Z
  00022	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0tagPetSlot@@QAE@ABU0@@Z ENDP				; tagPetSlot::tagPetSlot
PUBLIC	??4tagPetSlot@@QAEAAU0@ABU0@@Z			; tagPetSlot::operator=
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??4tagPetSlot@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4tagPetSlot@@QAEAAU0@ABU0@@Z PROC			; tagPetSlot::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00011	8b 07		 mov	 eax, DWORD PTR [edi]
  00013	89 06		 mov	 DWORD PTR [esi], eax
  00015	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00018	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001b	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0001e	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00021	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00024	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00027	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002a	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0002d	8a 47 14	 mov	 al, BYTE PTR [edi+20]
  00030	88 46 14	 mov	 BYTE PTR [esi+20], al
  00033	8d 47 18	 lea	 eax, DWORD PTR [edi+24]
  00036	50		 push	 eax
  00037	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0003a	ff d3		 call	 ebx
  0003c	83 c7 28	 add	 edi, 40			; 00000028H
  0003f	57		 push	 edi
  00040	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00043	ff d3		 call	 ebx
  00045	5f		 pop	 edi
  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
??4tagPetSlot@@QAEAAU0@ABU0@@Z ENDP			; tagPetSlot::operator=
_TEXT	ENDS
PUBLIC	?size@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QBEIXZ ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QBEIXZ PROC ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 38		 push	 56			; 00000038H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::size
_TEXT	ENDS
PUBLIC	?empty@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QBE_NXZ ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::empty
; Function compile flags: /Ogsp
;	COMDAT ?empty@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QBE_NXZ PROC ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::empty, COMDAT
; _this$ = ecx

; 889  : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	40		 inc	 eax

; 890  : 		}

  0000a	c3		 ret	 0
?empty@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QBE_NXZ ENDP ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::empty
_TEXT	ENDS
PUBLIC	??A?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEAAUtagPetSlot@@I@Z ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEAAUtagPetSlot@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEAAUtagPetSlot@@I@Z PROC ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	6b c0 38	 imul	 eax, 56			; 00000038H
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEAAUtagPetSlot@@I@Z ENDP ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::operator[]
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IBE_NPBUtagPetSlot@@@Z ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IBE_NPBUtagPetSlot@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IBE_NPBUtagPetSlot@@@Z PROC ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IBE_NPBUtagPetSlot@@@Z ENDP ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IBEXPAUtagPetSlot@@0@Z ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IBEXPAUtagPetSlot@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IBEXPAUtagPetSlot@@0@Z PROC ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IBEXPAUtagPetSlot@@0@Z ENDP ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE@XZ ; std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> >::~_Vector_val<tagPetSlot,std::allocator<tagPetSlot> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> >::~_Vector_val<tagPetSlot,std::allocator<tagPetSlot> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> >::~_Vector_val<tagPetSlot,std::allocator<tagPetSlot> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UtagPetSlot@@@std@@QAE@XZ	; std::allocator<tagPetSlot>::allocator<tagPetSlot>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UtagPetSlot@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UtagPetSlot@@@std@@QAE@XZ PROC		; std::allocator<tagPetSlot>::allocator<tagPetSlot>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UtagPetSlot@@@std@@QAE@XZ ENDP		; std::allocator<tagPetSlot>::allocator<tagPetSlot>
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 38	 add	 DWORD PTR [eax], 56	; 00000038H

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator++
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QBEIXZ ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::capacity
; Function compile flags: /Ogsp
;	COMDAT ?capacity@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QBEIXZ PROC ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 38		 push	 56			; 00000038H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IBEXXZ ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IBEXXZ PROC ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IBEXXZ ENDP ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UtagPetSlot@@@std@@QAE@ABV01@@Z	; std::allocator<tagPetSlot>::allocator<tagPetSlot>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UtagPetSlot@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UtagPetSlot@@@std@@QAE@ABV01@@Z PROC	; std::allocator<tagPetSlot>::allocator<tagPetSlot>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UtagPetSlot@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<tagPetSlot>::allocator<tagPetSlot>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@I@Z ; std::allocator<tagPetSlot>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@I@Z PROC ; std::allocator<tagPetSlot>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@I@Z ENDP ; std::allocator<tagPetSlot>::deallocate
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEABUtagPetSlot@@XZ ; std::_Vector_const_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEABUtagPetSlot@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEABUtagPetSlot@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEABUtagPetSlot@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator*
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::_Compat
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UtagPetSlot@@@std@@QBEIXZ	; std::allocator<tagPetSlot>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UtagPetSlot@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UtagPetSlot@@@std@@QBEIXZ PROC	; std::allocator<tagPetSlot>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 24 49 92 04	 mov	 eax, 76695844		; 04924924H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UtagPetSlot@@@std@@QBEIXZ ENDP	; std::allocator<tagPetSlot>::max_size
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUtagPetSlot@@@std@@YAPBUtagPetSlot@@ABU1@@Z ; std::addressof<tagPetSlot const >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBUtagPetSlot@@@std@@YAPBUtagPetSlot@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUtagPetSlot@@@std@@YAPBUtagPetSlot@@ABU1@@Z PROC ; std::addressof<tagPetSlot const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUtagPetSlot@@@std@@YAPBUtagPetSlot@@ABU1@@Z ENDP ; std::addressof<tagPetSlot const >
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UtagPetSlot@@@std@@YAPAUtagPetSlot@@IPAU1@@Z ; std::_Allocate<tagPetSlot>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UtagPetSlot@@@std@@YAPAUtagPetSlot@@IPAU1@@Z
_TEXT	SEGMENT
$T506801 = -12						; size = 12
$T506806 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UtagPetSlot@@@std@@YAPAUtagPetSlot@@IPAU1@@Z PROC ; std::_Allocate<tagPetSlot>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 24 49 92
	04		 cmp	 ecx, 76695844		; 04924924H
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	6b c9 38	 imul	 ecx, 56			; 00000038H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T506806[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T506806[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T506801[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T506801[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T506801[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UtagPetSlot@@@std@@YAPAUtagPetSlot@@IPAU1@@Z ENDP ; std::_Allocate<tagPetSlot>
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator-
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??G?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator-, COMDAT
; _this$ = ecx

; 190  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 191  : 		_Compat(_Right);
; 192  : 		return (this->_Ptr - _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	6a 38		 push	 56			; 00000038H
  0000c	99		 cdq
  0000d	59		 pop	 ecx
  0000e	f7 f9		 idiv	 ecx

; 193  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??G?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator-
_TEXT	ENDS
PUBLIC	??$forward@AAUtagPetSlot@@@std@@YAAAUtagPetSlot@@AAU1@@Z ; std::forward<tagPetSlot &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUtagPetSlot@@@std@@YAAAUtagPetSlot@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUtagPetSlot@@@std@@YAAAUtagPetSlot@@AAU1@@Z PROC ; std::forward<tagPetSlot &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUtagPetSlot@@@std@@YAAAUtagPetSlot@@AAU1@@Z ENDP ; std::forward<tagPetSlot &>
_TEXT	ENDS
PUBLIC	??$forward@ABUtagPetSlot@@@std@@YAABUtagPetSlot@@ABU1@@Z ; std::forward<tagPetSlot const &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@ABUtagPetSlot@@@std@@YAABUtagPetSlot@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUtagPetSlot@@@std@@YAABUtagPetSlot@@ABU1@@Z PROC ; std::forward<tagPetSlot const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUtagPetSlot@@@std@@YAABUtagPetSlot@@ABU1@@Z ENDP ; std::forward<tagPetSlot const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UtagPetSlot@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagPetSlot@@0@Z ; std::_Ptr_cat<tagPetSlot,tagPetSlot>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UtagPetSlot@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagPetSlot@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UtagPetSlot@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagPetSlot@@0@Z PROC ; std::_Ptr_cat<tagPetSlot,tagPetSlot>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UtagPetSlot@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagPetSlot@@0@Z ENDP ; std::_Ptr_cat<tagPetSlot,tagPetSlot>
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??$_Construct@UtagPetSlot@@ABU1@@std@@YAXPAUtagPetSlot@@ABU1@@Z ; std::_Construct<tagPetSlot,tagPetSlot const &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@UtagPetSlot@@ABU1@@std@@YAXPAUtagPetSlot@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UtagPetSlot@@ABU1@@std@@YAXPAUtagPetSlot@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UtagPetSlot@@ABU1@@std@@YAXPAUtagPetSlot@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UtagPetSlot@@ABU1@@std@@YAXPAUtagPetSlot@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UtagPetSlot@@ABU1@@std@@YAXPAUtagPetSlot@@ABU1@@Z
_TEXT	SEGMENT
$T506828 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UtagPetSlot@@ABU1@@std@@YAXPAUtagPetSlot@@ABU1@@Z PROC ; std::_Construct<tagPetSlot,tagPetSlot const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@UtagPetSlot@@ABU1@@std@@YAXPAUtagPetSlot@@ABU1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T506828[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 08		 je	 SHORT $LN3@Construct
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	e8 00 00 00 00	 call	 ??0tagPetSlot@@QAE@ABU0@@Z
$LN3@Construct:

; 49   : 	}

  00025	e8 00 00 00 00	 call	 __EH_epilog3
  0002a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UtagPetSlot@@ABU1@@std@@YAXPAUtagPetSlot@@ABU1@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T506828[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@UtagPetSlot@@ABU1@@std@@YAXPAUtagPetSlot@@ABU1@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UtagPetSlot@@ABU1@@std@@YAXPAUtagPetSlot@@ABU1@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UtagPetSlot@@ABU1@@std@@YAXPAUtagPetSlot@@ABU1@@Z ENDP ; std::_Construct<tagPetSlot,tagPetSlot const &>
PUBLIC	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEPAUtagPetSlot@@XZ ; std::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::_Unchecked
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEPAUtagPetSlot@@XZ
_TEXT	SEGMENT
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEPAUtagPetSlot@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::_Unchecked, COMDAT
; _this$ = ecx

; 317  : 		return (_Unchecked_type(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 318  : 		}

  00002	c3		 ret	 0
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEPAUtagPetSlot@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::_Unchecked
_TEXT	ENDS
PUBLIC	??$move@AAUtagPetSlot@@@std@@YA$$QAUtagPetSlot@@AAU1@@Z ; std::move<tagPetSlot &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUtagPetSlot@@@std@@YA$$QAUtagPetSlot@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUtagPetSlot@@@std@@YA$$QAUtagPetSlot@@AAU1@@Z PROC ; std::move<tagPetSlot &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUtagPetSlot@@@std@@YA$$QAUtagPetSlot@@AAU1@@Z ENDP ; std::move<tagPetSlot &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUtagPetSlot@@@std@@YAPAUtagPetSlot@@PAU1@@Z ; std::_Val_type<tagPetSlot *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUtagPetSlot@@@std@@YAPAUtagPetSlot@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUtagPetSlot@@@std@@YAPAUtagPetSlot@@PAU1@@Z PROC ; std::_Val_type<tagPetSlot *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUtagPetSlot@@@std@@YAPAUtagPetSlot@@PAU1@@Z ENDP ; std::_Val_type<tagPetSlot *>
_TEXT	ENDS
PUBLIC	??$_Unchecked@PAUtagPetSlot@@@std@@YAPAUtagPetSlot@@PAU1@@Z ; std::_Unchecked<tagPetSlot *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Unchecked@PAUtagPetSlot@@@std@@YAPAUtagPetSlot@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUtagPetSlot@@@std@@YAPAUtagPetSlot@@PAU1@@Z PROC ; std::_Unchecked<tagPetSlot *>, COMDAT

; 266  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 267  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 268  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAUtagPetSlot@@@std@@YAPAUtagPetSlot@@PAU1@@Z ENDP ; std::_Unchecked<tagPetSlot *>
_TEXT	ENDS
PUBLIC	??$_Dist_type@PAUtagPetSlot@@@std@@YAPAHPAUtagPetSlot@@@Z ; std::_Dist_type<tagPetSlot *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dist_type@PAUtagPetSlot@@@std@@YAPAHPAUtagPetSlot@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAUtagPetSlot@@@std@@YAPAHPAUtagPetSlot@@@Z PROC ; std::_Dist_type<tagPetSlot *>, COMDAT

; 850  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 851  : 	}

  00002	c3		 ret	 0
??$_Dist_type@PAUtagPetSlot@@@std@@YAPAHPAUtagPetSlot@@@Z ENDP ; std::_Dist_type<tagPetSlot *>
_TEXT	ENDS
PUBLIC	??_GtagPetSlot@@QAEPAXI@Z			; tagPetSlot::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GtagPetSlot@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GtagPetSlot@@QAEPAXI@Z PROC				; tagPetSlot::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1tagPetSlot@@QAE@XZ
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@2:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GtagPetSlot@@QAEPAXI@Z ENDP				; tagPetSlot::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$forward@AAPAUtagPetSlot@@@std@@YAAAPAUtagPetSlot@@AAPAU1@@Z ; std::forward<tagPetSlot * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAPAUtagPetSlot@@@std@@YAAAPAUtagPetSlot@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAUtagPetSlot@@@std@@YAAAPAUtagPetSlot@@AAPAU1@@Z PROC ; std::forward<tagPetSlot * &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAUtagPetSlot@@@std@@YAAAPAUtagPetSlot@@AAPAU1@@Z ENDP ; std::forward<tagPetSlot * &>
_TEXT	ENDS
PUBLIC	??$?0AAPAUtagPetSlot@@AAPAU0@@?$_Pair_base@PAUtagPetSlot@@PAU1@@std@@QAE@AAPAUtagPetSlot@@0@Z ; std::_Pair_base<tagPetSlot *,tagPetSlot *>::_Pair_base<tagPetSlot *,tagPetSlot *><tagPetSlot * &,tagPetSlot * &>
; Function compile flags: /Ogsp
;	COMDAT ??$?0AAPAUtagPetSlot@@AAPAU0@@?$_Pair_base@PAUtagPetSlot@@PAU1@@std@@QAE@AAPAUtagPetSlot@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAUtagPetSlot@@AAPAU0@@?$_Pair_base@PAUtagPetSlot@@PAU1@@std@@QAE@AAPAUtagPetSlot@@0@Z PROC ; std::_Pair_base<tagPetSlot *,tagPetSlot *>::_Pair_base<tagPetSlot *,tagPetSlot *><tagPetSlot * &,tagPetSlot * &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00011	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 164  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAPAUtagPetSlot@@AAPAU0@@?$_Pair_base@PAUtagPetSlot@@PAU1@@std@@QAE@AAPAUtagPetSlot@@0@Z ENDP ; std::_Pair_base<tagPetSlot *,tagPetSlot *>::_Pair_base<tagPetSlot *,tagPetSlot *><tagPetSlot * &,tagPetSlot * &>
_TEXT	ENDS
PUBLIC	??$_Move@AAUtagPetSlot@@@std@@YA$$QAUtagPetSlot@@AAU1@@Z ; std::_Move<tagPetSlot &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@AAUtagPetSlot@@@std@@YA$$QAUtagPetSlot@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAUtagPetSlot@@@std@@YA$$QAUtagPetSlot@@AAU1@@Z PROC ; std::_Move<tagPetSlot &>, COMDAT

; 94   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAUtagPetSlot@@@std@@YA$$QAUtagPetSlot@@AAU1@@Z ENDP ; std::_Move<tagPetSlot &>
_TEXT	ENDS
PUBLIC	??$forward@UtagPetSlot@@@std@@YA$$QAUtagPetSlot@@AAU1@@Z ; std::forward<tagPetSlot>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@UtagPetSlot@@@std@@YA$$QAUtagPetSlot@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UtagPetSlot@@@std@@YA$$QAUtagPetSlot@@AAU1@@Z PROC ; std::forward<tagPetSlot>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UtagPetSlot@@@std@@YA$$QAUtagPetSlot@@AAU1@@Z ENDP ; std::forward<tagPetSlot>
_TEXT	ENDS
PUBLIC	??$_Move_backward@PAUtagPetSlot@@PAU1@@std@@YAPAUtagPetSlot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<tagPetSlot *,tagPetSlot *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move_backward@PAUtagPetSlot@@PAU1@@std@@YAPAUtagPetSlot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move_backward@PAUtagPetSlot@@PAU1@@std@@YAPAUtagPetSlot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move_backward<tagPetSlot *,tagPetSlot *>, COMDAT

; 2617 : 	{	// move [_First, _Last) backwards to [..., _Dest), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2618 : 	while (_First != _Last)

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	39 75 08	 cmp	 DWORD PTR __First$[ebp], esi
  0000a	74 15		 je	 SHORT $LN9@Move_backw
$LL2@Move_backw:

; 2619 : 		*--_Dest = _STD move(*--_Last);

  0000c	83 6d 10 38	 sub	 DWORD PTR __Dest$[ebp], 56 ; 00000038H
  00010	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00013	83 ee 38	 sub	 esi, 56			; 00000038H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??4tagPetSlot@@QAEAAU0@ABU0@@Z
  0001c	3b 75 08	 cmp	 esi, DWORD PTR __First$[ebp]
  0001f	75 eb		 jne	 SHORT $LL2@Move_backw
$LN9@Move_backw:

; 2620 : 	return (_Dest);

  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00024	5e		 pop	 esi

; 2621 : 	}

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Move_backward@PAUtagPetSlot@@PAU1@@std@@YAPAUtagPetSlot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move_backward<tagPetSlot *,tagPetSlot *>
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	??0tagPetSlot@@QAE@XZ				; tagPetSlot::tagPetSlot
EXTRN	__imp_?Clear@ioHashString@@QAEXXZ:PROC
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\petenumtype.h
xdata$x	SEGMENT
__unwindtable$??0tagPetSlot@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0tagPetSlot@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0tagPetSlot@@QAE@XZ$1
__ehfuncinfo$??0tagPetSlot@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0tagPetSlot@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0tagPetSlot@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0tagPetSlot@@QAE@XZ PROC				; tagPetSlot::tagPetSlot, COMDAT
; _this$ = ecx

; 218  : 	tagPetSlot()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0tagPetSlot@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0001a	ff d7		 call	 edi
  0001c	33 db		 xor	 ebx, ebx
  0001e	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00021	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00024	ff d7		 call	 edi

; 219  : 	{
; 220  : 		m_nPetCode = 0;
; 221  : 		m_PetRankType = 0;
; 222  : 		m_nIndex = 0;
; 223  : 		m_nCurLevel = 0;
; 224  : 		m_CurExp = 0;
; 225  : 		m_bEquip = false;
; 226  : 		m_Name.Clear();

  00026	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?Clear@ioHashString@@QAEXXZ
  0002c	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0002f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00033	89 1e		 mov	 DWORD PTR [esi], ebx
  00035	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00038	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0003b	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  0003e	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00041	88 5e 14	 mov	 BYTE PTR [esi+20], bl
  00044	ff d7		 call	 edi

; 227  : 		m_IconName.Clear();

  00046	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00049	ff d7		 call	 edi

; 228  : 	}

  0004b	8b c6		 mov	 eax, esi
  0004d	e8 00 00 00 00	 call	 __EH_epilog3
  00052	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0tagPetSlot@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 18	 add	 ecx, 24			; 00000018H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagPetSlot@@QAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 28	 add	 ecx, 40			; 00000028H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0tagPetSlot@@QAE@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0tagPetSlot@@QAE@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0tagPetSlot@@QAE@XZ ENDP				; tagPetSlot::tagPetSlot
PUBLIC	??RPetSlotSort@@QBE_NABUtagPetSlot@@0@Z		; PetSlotSort::operator()
; Function compile flags: /Ogsp
;	COMDAT ??RPetSlotSort@@QBE_NABUtagPetSlot@@0@Z
_TEXT	SEGMENT
_lhs$ = 8						; size = 4
_rhs$ = 12						; size = 4
??RPetSlotSort@@QBE_NABUtagPetSlot@@0@Z PROC		; PetSlotSort::operator(), COMDAT
; _this$ = ecx

; 239  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 240  : 		if( lhs.m_PetRankType > rhs.m_PetRankType )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lhs$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _rhs$[ebp]
  00009	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0000c	56		 push	 esi
  0000d	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00010	3b d6		 cmp	 edx, esi
  00012	7e 04		 jle	 SHORT $LN8@operator
$LN10@operator:

; 241  : 			return true;

  00014	b0 01		 mov	 al, 1
  00016	eb 19		 jmp	 SHORT $LN6@operator
$LN8@operator:

; 242  : 
; 243  : 		if( lhs.m_PetRankType == rhs.m_PetRankType )

  00018	75 15		 jne	 SHORT $LN4@operator

; 244  : 		{
; 245  : 			if( lhs.m_nPetCode < rhs.m_nPetCode )

  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
  0001c	8b 31		 mov	 esi, DWORD PTR [ecx]
  0001e	3b d6		 cmp	 edx, esi

; 246  : 				return true;	

  00020	7c f2		 jl	 SHORT $LN10@operator

; 247  : 
; 248  : 			if( lhs.m_nPetCode == rhs.m_nPetCode )

  00022	75 0b		 jne	 SHORT $LN4@operator

; 249  : 			{
; 250  : 				if( lhs.m_nCurLevel > rhs.m_nCurLevel )

  00024	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00027	3b 41 0c	 cmp	 eax, DWORD PTR [ecx+12]
  0002a	0f 9f c0	 setg	 al

; 251  : 					return true;	
; 252  : 				return false;

  0002d	eb 02		 jmp	 SHORT $LN6@operator
$LN4@operator:

; 253  : 			}
; 254  : 			return false;			
; 255  : 		}
; 256  : 		return false;

  0002f	32 c0		 xor	 al, al
$LN6@operator:
  00031	5e		 pop	 esi

; 257  : 	}

  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
??RPetSlotSort@@QBE_NABUtagPetSlot@@0@Z ENDP		; PetSlotSort::operator()
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?SetPetSlot@ioUserPet@@QAEXABUtagPetSlot@@@Z	; ioUserPet::SetPetSlot
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iouserpet.cpp
;	COMDAT ?SetPetSlot@ioUserPet@@QAEXABUtagPetSlot@@@Z
_TEXT	SEGMENT
_sPetSlot$ = 8						; size = 4
?SetPetSlot@ioUserPet@@QAEXABUtagPetSlot@@@Z PROC	; ioUserPet::SetPetSlot, COMDAT
; _this$ = ecx

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	int nSize = (int)m_PetSlotList.size();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	6a 38		 push	 56			; 00000038H
  0000d	99		 cdq
  0000e	5e		 pop	 esi
  0000f	f7 fe		 idiv	 esi

; 80   : 	for( int i=0; i < nSize; ++i )

  00011	33 db		 xor	 ebx, ebx
  00013	85 c0		 test	 eax, eax
  00015	7e 29		 jle	 SHORT $LN2@SetPetSlot
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	57		 push	 edi
  0001b	8b 7d 08	 mov	 edi, DWORD PTR _sPetSlot$[ebp]
  0001e	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  00021	8d 4a 08	 lea	 ecx, DWORD PTR [edx+8]
$LL16@SetPetSlot:

; 81   : 	{
; 82   : 		if( m_PetSlotList[i].m_nIndex == sPetSlot.m_nIndex )

  00024	39 31		 cmp	 DWORD PTR [ecx], esi
  00026	74 0a		 je	 SHORT $LN14@SetPetSlot

; 80   : 	for( int i=0; i < nSize; ++i )

  00028	43		 inc	 ebx
  00029	83 c1 38	 add	 ecx, 56			; 00000038H
  0002c	3b d8		 cmp	 ebx, eax
  0002e	7c f4		 jl	 SHORT $LL16@SetPetSlot

; 81   : 	{
; 82   : 		if( m_PetSlotList[i].m_nIndex == sPetSlot.m_nIndex )

  00030	eb 0d		 jmp	 SHORT $LN17@SetPetSlot
$LN14@SetPetSlot:

; 83   : 		{
; 84   : 			m_PetSlotList[i] = sPetSlot;

  00032	8b cb		 mov	 ecx, ebx
  00034	6b c9 38	 imul	 ecx, 56			; 00000038H
  00037	57		 push	 edi
  00038	03 ca		 add	 ecx, edx
  0003a	e8 00 00 00 00	 call	 ??4tagPetSlot@@QAEAAU0@ABU0@@Z
$LN17@SetPetSlot:
  0003f	5f		 pop	 edi
$LN2@SetPetSlot:
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx

; 85   : 			return;
; 86   : 		}
; 87   : 	}
; 88   : }

  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?SetPetSlot@ioUserPet@@QAEXABUtagPetSlot@@@Z ENDP	; ioUserPet::SetPetSlot
_TEXT	ENDS
PUBLIC	?SetPetEquip@ioUserPet@@QAEXH_N@Z		; ioUserPet::SetPetEquip
; Function compile flags: /Ogsp
;	COMDAT ?SetPetEquip@ioUserPet@@QAEXH_N@Z
_TEXT	SEGMENT
_nSlotIndex$ = 8					; size = 4
_bEquip$ = 12						; size = 1
?SetPetEquip@ioUserPet@@QAEXH_N@Z PROC			; ioUserPet::SetPetEquip, COMDAT
; _this$ = ecx

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 94   : 	int nSize = (int)m_PetSlotList.size();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00009	56		 push	 esi
  0000a	6a 38		 push	 56			; 00000038H
  0000c	99		 cdq
  0000d	5e		 pop	 esi
  0000e	f7 fe		 idiv	 esi

; 95   : 	for( int i=0; i<nSize; ++i )

  00010	85 c0		 test	 eax, eax
  00012	7e 2a		 jle	 SHORT $LN2@SetPetEqui

; 94   : 	int nSize = (int)m_PetSlotList.size();

  00014	33 d2		 xor	 edx, edx
  00016	8b f0		 mov	 esi, eax
  00018	53		 push	 ebx
$LL4@SetPetEqui:

; 96   : 	{
; 97   : 		m_PetSlotList[i].m_bEquip = false;

  00019	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0001c	c6 44 02 14 00	 mov	 BYTE PTR [edx+eax+20], 0

; 98   : 		if( m_PetSlotList[i].m_nIndex == nSlotIndex )

  00021	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00024	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  00028	3b 45 08	 cmp	 eax, DWORD PTR _nSlotIndex$[ebp]
  0002b	75 0a		 jne	 SHORT $LN3@SetPetEqui

; 99   : 			m_PetSlotList[i].m_bEquip = bEquip;

  0002d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00030	8a 5d 0c	 mov	 bl, BYTE PTR _bEquip$[ebp]
  00033	88 5c 02 14	 mov	 BYTE PTR [edx+eax+20], bl
$LN3@SetPetEqui:

; 95   : 	for( int i=0; i<nSize; ++i )

  00037	83 c2 38	 add	 edx, 56			; 00000038H
  0003a	4e		 dec	 esi
  0003b	75 dc		 jne	 SHORT $LL4@SetPetEqui
  0003d	5b		 pop	 ebx
$LN2@SetPetEqui:
  0003e	5e		 pop	 esi

; 100  : 	}
; 101  : }

  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
?SetPetEquip@ioUserPet@@QAEXH_N@Z ENDP			; ioUserPet::SetPetEquip
_TEXT	ENDS
PUBLIC	?ClearPetEquip@ioUserPet@@QAEXXZ		; ioUserPet::ClearPetEquip
; Function compile flags: /Ogsp
;	COMDAT ?ClearPetEquip@ioUserPet@@QAEXXZ
_TEXT	SEGMENT
?ClearPetEquip@ioUserPet@@QAEXXZ PROC			; ioUserPet::ClearPetEquip, COMDAT
; _this$ = ecx

; 106  : 	int nSize = (int)m_PetSlotList.size();

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	56		 push	 esi
  00007	6a 38		 push	 56			; 00000038H
  00009	99		 cdq
  0000a	5e		 pop	 esi
  0000b	f7 fe		 idiv	 esi

; 107  : 	for( int i=0; i<nSize; ++i )

  0000d	85 c0		 test	 eax, eax
  0000f	7e 10		 jle	 SHORT $LN1@ClearPetEq

; 106  : 	int nSize = (int)m_PetSlotList.size();

  00011	33 d2		 xor	 edx, edx
$LL3@ClearPetEq:

; 108  : 		m_PetSlotList[i].m_bEquip = false;

  00013	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00016	c6 44 32 14 00	 mov	 BYTE PTR [edx+esi+20], 0
  0001b	83 c2 38	 add	 edx, 56			; 00000038H
  0001e	48		 dec	 eax
  0001f	75 f2		 jne	 SHORT $LL3@ClearPetEq
$LN1@ClearPetEq:
  00021	5e		 pop	 esi

; 109  : }

  00022	c3		 ret	 0
?ClearPetEquip@ioUserPet@@QAEXXZ ENDP			; ioUserPet::ClearPetEquip
_TEXT	ENDS
PUBLIC	?GetPetSlot@ioUserPet@@QAE_NHAAUtagPetSlot@@@Z	; ioUserPet::GetPetSlot
; Function compile flags: /Ogsp
;	COMDAT ?GetPetSlot@ioUserPet@@QAE_NHAAUtagPetSlot@@@Z
_TEXT	SEGMENT
_nSlotIndex$ = 8					; size = 4
_sPetSlot$ = 12						; size = 4
?GetPetSlot@ioUserPet@@QAE_NHAAUtagPetSlot@@@Z PROC	; ioUserPet::GetPetSlot, COMDAT
; _this$ = ecx

; 114  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 115  : 	if ( m_PetSlotList.empty() )

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00009	3b d0		 cmp	 edx, eax
  0000b	75 04		 jne	 SHORT $LN5@GetPetSlot

; 116  : 		return false;

  0000d	32 c0		 xor	 al, al
  0000f	eb 29		 jmp	 SHORT $LN6@GetPetSlot
$LN5@GetPetSlot:
  00011	56		 push	 esi

; 117  : 
; 118  : 	int nSize = (int)m_PetSlotList.size();

  00012	2b c2		 sub	 eax, edx
  00014	57		 push	 edi
  00015	6a 38		 push	 56			; 00000038H
  00017	99		 cdq
  00018	5e		 pop	 esi
  00019	f7 fe		 idiv	 esi

; 119  : 	for( int i=0; i < nSize; ++i )

  0001b	33 d2		 xor	 edx, edx
  0001d	85 c0		 test	 eax, eax
  0001f	7e 15		 jle	 SHORT $LN2@GetPetSlot

; 117  : 
; 118  : 	int nSize = (int)m_PetSlotList.size();

  00021	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00024	8d 71 08	 lea	 esi, DWORD PTR [ecx+8]
$LL4@GetPetSlot:

; 120  : 	{
; 121  : 		if( m_PetSlotList[i].m_nIndex == nSlotIndex )

  00027	8b 3e		 mov	 edi, DWORD PTR [esi]
  00029	3b 7d 08	 cmp	 edi, DWORD PTR _nSlotIndex$[ebp]
  0002c	74 10		 je	 SHORT $LN17@GetPetSlot

; 119  : 	for( int i=0; i < nSize; ++i )

  0002e	42		 inc	 edx
  0002f	83 c6 38	 add	 esi, 56			; 00000038H
  00032	3b d0		 cmp	 edx, eax
  00034	7c f1		 jl	 SHORT $LL4@GetPetSlot
$LN2@GetPetSlot:

; 125  : 		}
; 126  : 	}
; 127  : 
; 128  : 	return false;

  00036	32 c0		 xor	 al, al
$LN19@GetPetSlot:
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
$LN6@GetPetSlot:

; 129  : }

  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN17@GetPetSlot:

; 122  : 		{
; 123  : 			sPetSlot = m_PetSlotList[i];

  0003e	6b d2 38	 imul	 edx, 56			; 00000038H
  00041	03 d1		 add	 edx, ecx
  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _sPetSlot$[ebp]
  00046	52		 push	 edx
  00047	e8 00 00 00 00	 call	 ??4tagPetSlot@@QAEAAU0@ABU0@@Z

; 124  : 			return true;

  0004c	b0 01		 mov	 al, 1
  0004e	eb e8		 jmp	 SHORT $LN19@GetPetSlot
?GetPetSlot@ioUserPet@@QAE_NHAAUtagPetSlot@@@Z ENDP	; ioUserPet::GetPetSlot
_TEXT	ENDS
PUBLIC	?GetPetSlotArray@ioUserPet@@QAE_NHAAUtagPetSlot@@@Z ; ioUserPet::GetPetSlotArray
; Function compile flags: /Ogsp
;	COMDAT ?GetPetSlotArray@ioUserPet@@QAE_NHAAUtagPetSlot@@@Z
_TEXT	SEGMENT
_nArray$ = 8						; size = 4
_sPetSlot$ = 12						; size = 4
?GetPetSlotArray@ioUserPet@@QAE_NHAAUtagPetSlot@@@Z PROC ; ioUserPet::GetPetSlotArray, COMDAT
; _this$ = ecx

; 133  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 134  : 	if ( m_PetSlotList.empty() )

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00009	3b d0		 cmp	 edx, eax
  0000b	75 04		 jne	 SHORT $LN2@GetPetSlot@2

; 135  : 		return false;

  0000d	32 c0		 xor	 al, al
  0000f	eb 2c		 jmp	 SHORT $LN3@GetPetSlot@2
$LN2@GetPetSlot@2:
  00011	56		 push	 esi

; 136  : 
; 137  : 	if( COMPARE( nArray, 0, (int)m_PetSlotList.size() ) )

  00012	8b 75 08	 mov	 esi, DWORD PTR _nArray$[ebp]
  00015	85 f6		 test	 esi, esi
  00017	78 21		 js	 SHORT $LN1@GetPetSlot@2
  00019	57		 push	 edi
  0001a	2b c2		 sub	 eax, edx
  0001c	6a 38		 push	 56			; 00000038H
  0001e	99		 cdq
  0001f	5f		 pop	 edi
  00020	f7 ff		 idiv	 edi
  00022	5f		 pop	 edi
  00023	3b f0		 cmp	 esi, eax
  00025	7d 13		 jge	 SHORT $LN1@GetPetSlot@2

; 138  : 	{
; 139  : 		sPetSlot = m_PetSlotList[nArray];

  00027	6b f6 38	 imul	 esi, 56			; 00000038H
  0002a	03 71 04	 add	 esi, DWORD PTR [ecx+4]
  0002d	8b 4d 0c	 mov	 ecx, DWORD PTR _sPetSlot$[ebp]
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 ??4tagPetSlot@@QAEAAU0@ABU0@@Z

; 140  : 		return true;

  00036	b0 01		 mov	 al, 1
  00038	eb 02		 jmp	 SHORT $LN11@GetPetSlot@2
$LN1@GetPetSlot@2:

; 141  : 	}
; 142  : 
; 143  : 	return false;

  0003a	32 c0		 xor	 al, al
$LN11@GetPetSlot@2:
  0003c	5e		 pop	 esi
$LN3@GetPetSlot@2:

; 144  : }

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
?GetPetSlotArray@ioUserPet@@QAE_NHAAUtagPetSlot@@@Z ENDP ; ioUserPet::GetPetSlotArray
_TEXT	ENDS
PUBLIC	?GetPetSlotEquip@ioUserPet@@QAE_NAAUtagPetSlot@@@Z ; ioUserPet::GetPetSlotEquip
; Function compile flags: /Ogsp
;	COMDAT ?GetPetSlotEquip@ioUserPet@@QAE_NAAUtagPetSlot@@@Z
_TEXT	SEGMENT
_sPetSlot$ = 8						; size = 4
?GetPetSlotEquip@ioUserPet@@QAE_NAAUtagPetSlot@@@Z PROC	; ioUserPet::GetPetSlotEquip, COMDAT
; _this$ = ecx

; 148  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 149  : 	if ( m_PetSlotList.empty() )

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00009	3b d0		 cmp	 edx, eax
  0000b	75 04		 jne	 SHORT $LN5@GetPetSlot@3

; 150  : 		return false;

  0000d	32 c0		 xor	 al, al
  0000f	eb 25		 jmp	 SHORT $LN6@GetPetSlot@3
$LN5@GetPetSlot@3:

; 151  : 
; 152  : 	int nSize = (int)m_PetSlotList.size();

  00011	2b c2		 sub	 eax, edx
  00013	56		 push	 esi
  00014	6a 38		 push	 56			; 00000038H
  00016	99		 cdq
  00017	5e		 pop	 esi
  00018	f7 fe		 idiv	 esi

; 153  : 	for( int i=0; i < nSize; ++i )

  0001a	33 d2		 xor	 edx, edx
  0001c	85 c0		 test	 eax, eax
  0001e	7e 13		 jle	 SHORT $LN2@GetPetSlot@3

; 151  : 
; 152  : 	int nSize = (int)m_PetSlotList.size();

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	8d 71 14	 lea	 esi, DWORD PTR [ecx+20]
$LL4@GetPetSlot@3:

; 154  : 	{
; 155  : 		if( m_PetSlotList[i].m_bEquip )

  00026	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00029	75 0f		 jne	 SHORT $LN17@GetPetSlot@3

; 153  : 	for( int i=0; i < nSize; ++i )

  0002b	42		 inc	 edx
  0002c	83 c6 38	 add	 esi, 56			; 00000038H
  0002f	3b d0		 cmp	 edx, eax
  00031	7c f3		 jl	 SHORT $LL4@GetPetSlot@3
$LN2@GetPetSlot@3:

; 159  : 		}
; 160  : 	}
; 161  : 
; 162  : 	return false;

  00033	32 c0		 xor	 al, al
$LN19@GetPetSlot@3:
  00035	5e		 pop	 esi
$LN6@GetPetSlot@3:

; 163  : }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
$LN17@GetPetSlot@3:

; 156  : 		{
; 157  : 			sPetSlot = m_PetSlotList[i];

  0003a	6b d2 38	 imul	 edx, 56			; 00000038H
  0003d	03 d1		 add	 edx, ecx
  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _sPetSlot$[ebp]
  00042	52		 push	 edx
  00043	e8 00 00 00 00	 call	 ??4tagPetSlot@@QAEAAU0@ABU0@@Z

; 158  : 			return true;

  00048	b0 01		 mov	 al, 1
  0004a	eb e9		 jmp	 SHORT $LN19@GetPetSlot@3
?GetPetSlotEquip@ioUserPet@@QAE_NAAUtagPetSlot@@@Z ENDP	; ioUserPet::GetPetSlotEquip
_TEXT	ENDS
PUBLIC	?GetPetSlotCnt@ioUserPet@@QAEHXZ		; ioUserPet::GetPetSlotCnt
; Function compile flags: /Ogsp
;	COMDAT ?GetPetSlotCnt@ioUserPet@@QAEHXZ
_TEXT	SEGMENT
?GetPetSlotCnt@ioUserPet@@QAEHXZ PROC			; ioUserPet::GetPetSlotCnt, COMDAT
; _this$ = ecx

; 169  : 	return (int)m_PetSlotList.size();

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	6a 38		 push	 56			; 00000038H
  00008	99		 cdq
  00009	59		 pop	 ecx
  0000a	f7 f9		 idiv	 ecx

; 170  : }

  0000c	c3		 ret	 0
?GetPetSlotCnt@ioUserPet@@QAEHXZ ENDP			; ioUserPet::GetPetSlotCnt
_TEXT	ENDS
PUBLIC	?IsSlotFull@ioUserPet@@QAE_NXZ			; ioUserPet::IsSlotFull
; Function compile flags: /Ogsp
;	COMDAT ?IsSlotFull@ioUserPet@@QAE_NXZ
_TEXT	SEGMENT
?IsSlotFull@ioUserPet@@QAE_NXZ PROC			; ioUserPet::IsSlotFull, COMDAT
; _this$ = ecx

; 175  : 	if( GetPetSlotCnt() >= MAX_SLOT_CNT )

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	6a 38		 push	 56			; 00000038H
  00008	99		 cdq
  00009	59		 pop	 ecx
  0000a	f7 f9		 idiv	 ecx
  0000c	83 f8 14	 cmp	 eax, 20			; 00000014H
  0000f	0f 9d c0	 setge	 al

; 176  : 		return true;
; 177  : 	return false;
; 178  : }

  00012	c3		 ret	 0
?IsSlotFull@ioUserPet@@QAE_NXZ ENDP			; ioUserPet::IsSlotFull
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 38	 add	 DWORD PTR [eax], 56	; 00000038H

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator++
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE@V?$allocator@UtagPetSlot@@@1@@Z ; std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> >::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE@V?$allocator@UtagPetSlot@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE@V?$allocator@UtagPetSlot@@@1@@Z PROC ; std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> >::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE@V?$allocator@UtagPetSlot@@@1@@Z ENDP ; std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> >::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> >
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEAAUtagPetSlot@@XZ ; std::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEAAUtagPetSlot@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEAAUtagPetSlot@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEAAUtagPetSlot@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator*
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator==
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QBEIXZ ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QBEIXZ PROC ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 24 49 92 04	 mov	 eax, 76695844		; 04924924H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IBEII@Z ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IBEII@Z PROC ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 38		 push	 56			; 00000038H
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba 24 49 92 04	 mov	 edx, 76695844		; 04924924H
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00026	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Grow_to@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IBEII@Z ENDP ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QAE@PAUtagPetSlot@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::_Vector_const_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QAE@PAUtagPetSlot@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QAE@PAUtagPetSlot@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::_Vector_const_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QAE@PAUtagPetSlot@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::_Vector_const_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UtagPetSlot@@@std@@QAEPAUtagPetSlot@@I@Z ; std::allocator<tagPetSlot>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UtagPetSlot@@@std@@QAEPAUtagPetSlot@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UtagPetSlot@@@std@@QAEPAUtagPetSlot@@I@Z PROC ; std::allocator<tagPetSlot>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UtagPetSlot@@@std@@YAPAUtagPetSlot@@IPAU1@@Z ; std::_Allocate<tagPetSlot>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UtagPetSlot@@@std@@QAEPAUtagPetSlot@@I@Z ENDP ; std::allocator<tagPetSlot>::allocate
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@ABU3@@Z ; std::allocator<tagPetSlot>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@ABU3@@Z PROC ; std::allocator<tagPetSlot>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UtagPetSlot@@ABU1@@std@@YAXPAUtagPetSlot@@ABU1@@Z ; std::_Construct<tagPetSlot,tagPetSlot const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@ABU3@@Z ENDP ; std::allocator<tagPetSlot>::construct
_TEXT	ENDS
PUBLIC	??G?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@1@@Z ; std::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator-
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??G?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator-, COMDAT
; _this$ = ecx

; 380  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  : 		return (*(_Mybase *)this - _Right);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	6a 38		 push	 56			; 00000038H
  0000c	99		 cdq
  0000d	59		 pop	 ecx
  0000e	f7 f9		 idiv	 ecx

; 382  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??G?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator-
_TEXT	ENDS
PUBLIC	??$_Unchecked@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@YAPAUtagPetSlot@@V?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Unchecked@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@YAPAUtagPetSlot@@V?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
??$_Unchecked@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@YAPAUtagPetSlot@@V?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >, COMDAT

; 393  : 	{	// convert to unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 394  : 	return (_Iter._Unchecked());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iter$[ebp]

; 395  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@YAPAUtagPetSlot@@V?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >
_TEXT	ENDS
PUBLIC	??$construct@AAUtagPetSlot@@@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@AAU2@@Z ; std::allocator<tagPetSlot>::construct<tagPetSlot &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$construct@AAUtagPetSlot@@@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUtagPetSlot@@@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAUtagPetSlot@@@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUtagPetSlot@@@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@AAUtagPetSlot@@@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@AAU2@@Z
_TEXT	SEGMENT
$T507107 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUtagPetSlot@@@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@AAU2@@Z PROC ; std::allocator<tagPetSlot>::construct<tagPetSlot &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$construct@AAUtagPetSlot@@@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@AAU2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T507107[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0tagPetSlot@@QAE@ABU0@@Z
$LN3@construct:

; 209  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUtagPetSlot@@@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@AAU2@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T507107[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$construct@AAUtagPetSlot@@@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@AAU2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUtagPetSlot@@@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@AAU2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUtagPetSlot@@@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@AAU2@@Z ENDP ; std::allocator<tagPetSlot>::construct<tagPetSlot &>
PUBLIC	??$_Move@PAUtagPetSlot@@PAU1@@std@@YAPAUtagPetSlot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<tagPetSlot *,tagPetSlot *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUtagPetSlot@@PAU1@@std@@YAPAUtagPetSlot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUtagPetSlot@@PAU1@@std@@YAPAUtagPetSlot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<tagPetSlot *,tagPetSlot *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 10		 jmp	 SHORT $LN11@Move
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ??4tagPetSlot@@QAEAAU0@ABU0@@Z
  00012	83 45 10 38	 add	 DWORD PTR __Dest$[ebp], 56 ; 00000038H
  00016	83 c6 38	 add	 esi, 56			; 00000038H
$LN11@Move:

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	75 eb		 jne	 SHORT $LL3@Move

; 2515 : 	return (_Dest);

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00021	5e		 pop	 esi

; 2516 : 	}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Move@PAUtagPetSlot@@PAU1@@std@@YAPAUtagPetSlot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<tagPetSlot *,tagPetSlot *>
_TEXT	ENDS
PUBLIC	??$?0AAPAUtagPetSlot@@AAPAU0@@?$pair@PAUtagPetSlot@@PAU1@@std@@QAE@AAPAUtagPetSlot@@0@Z ; std::pair<tagPetSlot *,tagPetSlot *>::pair<tagPetSlot *,tagPetSlot *><tagPetSlot * &,tagPetSlot * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0AAPAUtagPetSlot@@AAPAU0@@?$pair@PAUtagPetSlot@@PAU1@@std@@QAE@AAPAUtagPetSlot@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAUtagPetSlot@@AAPAU0@@?$pair@PAUtagPetSlot@@PAU1@@std@@QAE@AAPAUtagPetSlot@@0@Z PROC ; std::pair<tagPetSlot *,tagPetSlot *>::pair<tagPetSlot *,tagPetSlot *><tagPetSlot * &,tagPetSlot * &>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00011	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 248  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAPAUtagPetSlot@@AAPAU0@@?$pair@PAUtagPetSlot@@PAU1@@std@@QAE@AAPAUtagPetSlot@@0@Z ENDP ; std::pair<tagPetSlot *,tagPetSlot *>::pair<tagPetSlot *,tagPetSlot *><tagPetSlot * &,tagPetSlot * &>
_TEXT	ENDS
PUBLIC	??$_Destroy@UtagPetSlot@@@std@@YAXPAUtagPetSlot@@@Z ; std::_Destroy<tagPetSlot>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UtagPetSlot@@@std@@YAXPAUtagPetSlot@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UtagPetSlot@@@std@@YAXPAUtagPetSlot@@@Z PROC ; std::_Destroy<tagPetSlot>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 64   : 	}

  00006	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  00007	e9 00 00 00 00	 jmp	 ??1tagPetSlot@@QAE@XZ
??$_Destroy@UtagPetSlot@@@std@@YAXPAUtagPetSlot@@@Z ENDP ; std::_Destroy<tagPetSlot>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@$$QAU3@@Z ; std::allocator<tagPetSlot>::construct
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@$$QAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@$$QAU3@@Z$0
__ehfuncinfo$?construct@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@$$QAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@$$QAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@$$QAU3@@Z
_TEXT	SEGMENT
$T507164 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@$$QAU3@@Z PROC ; std::allocator<tagPetSlot>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?construct@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@$$QAU3@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T507164[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct@2
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0tagPetSlot@@QAE@ABU0@@Z
$LN3@construct@2:

; 203  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@$$QAU3@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T507164[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$?construct@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@$$QAU3@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@$$QAU3@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@$$QAU3@@Z ENDP ; std::allocator<tagPetSlot>::construct
PUBLIC	??$swap@UtagPetSlot@@@std@@YAXAAUtagPetSlot@@0@Z ; std::swap<tagPetSlot>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$swap@UtagPetSlot@@@std@@YAXAAUtagPetSlot@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$swap@UtagPetSlot@@@std@@YAXAAUtagPetSlot@@0@Z$0
__ehfuncinfo$??$swap@UtagPetSlot@@@std@@YAXAAUtagPetSlot@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$swap@UtagPetSlot@@@std@@YAXAAUtagPetSlot@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??$swap@UtagPetSlot@@@std@@YAXAAUtagPetSlot@@0@Z
_TEXT	SEGMENT
__Tmp$ = -68						; size = 56
__$EHRec$ = -12						; size = 12
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@UtagPetSlot@@@std@@YAXAAUtagPetSlot@@0@Z PROC	; std::swap<tagPetSlot>, COMDAT

; 101  : 	{	// exchange values stored at _Left and _Right

  00000	6a 38		 push	 56			; 00000038H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$swap@UtagPetSlot@@@std@@YAXAAUtagPetSlot@@0@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 102  : 	_Ty _Tmp = _Move(_Left);

  0000c	ff 75 08	 push	 DWORD PTR __Left$[ebp]
  0000f	8d 4d bc	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00012	e8 00 00 00 00	 call	 ??0tagPetSlot@@QAE@ABU0@@Z

; 103  : 	_Left = _Move(_Right);

  00017	ff 75 0c	 push	 DWORD PTR __Right$[ebp]
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00021	e8 00 00 00 00	 call	 ??4tagPetSlot@@QAEAAU0@ABU0@@Z

; 104  : 	_Right = _Move(_Tmp);

  00026	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00029	8d 45 bc	 lea	 eax, DWORD PTR __Tmp$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??4tagPetSlot@@QAEAAU0@ABU0@@Z

; 105  : 	}

  00032	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00036	8d 4d bc	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00039	e8 00 00 00 00	 call	 ??1tagPetSlot@@QAE@XZ
  0003e	e8 00 00 00 00	 call	 __EH_epilog3
  00043	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$swap@UtagPetSlot@@@std@@YAXAAUtagPetSlot@@0@Z$0:
  00000	8d 4d bc	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1tagPetSlot@@QAE@XZ
__ehhandler$??$swap@UtagPetSlot@@@std@@YAXAAUtagPetSlot@@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$swap@UtagPetSlot@@@std@@YAXAAUtagPetSlot@@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$swap@UtagPetSlot@@@std@@YAXAAUtagPetSlot@@0@Z ENDP	; std::swap<tagPetSlot>
PUBLIC	??$_Move_backward@PAUtagPetSlot@@PAU1@@std@@YAPAUtagPetSlot@@PAU1@00@Z ; std::_Move_backward<tagPetSlot *,tagPetSlot *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move_backward@PAUtagPetSlot@@PAU1@@std@@YAPAUtagPetSlot@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$507203 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move_backward@PAUtagPetSlot@@PAU1@@std@@YAPAUtagPetSlot@@PAU1@00@Z PROC ; std::_Move_backward<tagPetSlot *,tagPetSlot *>, COMDAT

; 2638 : 	{	// move [_First, _Last) backwards to [..., _Dest), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2639 : 	return (_Move_backward(_First, _Last,
; 2640 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$507203[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move_backward@PAUtagPetSlot@@PAU1@@std@@YAPAUtagPetSlot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<tagPetSlot *,tagPetSlot *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2641 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move_backward@PAUtagPetSlot@@PAU1@@std@@YAPAUtagPetSlot@@PAU1@00@Z ENDP ; std::_Move_backward<tagPetSlot *,tagPetSlot *>
_TEXT	ENDS
PUBLIC	??$_Push_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@HH$$QAU1@VPetSlotSort@@@Z ; std::_Push_heap<tagPetSlot *,int,tagPetSlot,PetSlotSort>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Push_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@HH$$QAU1@VPetSlotSort@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Push_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@HH$$QAU1@VPetSlotSort@@@Z PROC ; std::_Push_heap<tagPetSlot *,int,tagPetSlot,PetSlotSort>, COMDAT

; 2455 : 	{	// percolate _Hole to _Top or where _Val belongs, using operator<

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 2456 : 	for (_Diff _Idx = (_Hole - 1) / 2;

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Hole$[ebp]
  00008	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  0000b	99		 cdq
  0000c	2b c2		 sub	 eax, edx
  0000e	8b f0		 mov	 esi, eax
  00010	d1 fe		 sar	 esi, 1

; 2457 : 		_Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val);
; 2458 : 		_Idx = (_Hole - 1) / 2)

  00012	39 7d 10	 cmp	 DWORD PTR __Top$[ebp], edi
  00015	7d 39		 jge	 SHORT $LN1@Push_heap
  00017	53		 push	 ebx
$LL3@Push_heap:
  00018	ff 75 14	 push	 DWORD PTR __Val$[ebp]
  0001b	8b de		 mov	 ebx, esi
  0001d	6b db 38	 imul	 ebx, 56			; 00000038H
  00020	03 5d 08	 add	 ebx, DWORD PTR __First$[ebp]
  00023	8d 4d 18	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 ??RPetSlotSort@@QBE_NABUtagPetSlot@@0@Z ; PetSlotSort::operator()
  0002c	84 c0		 test	 al, al
  0002e	74 1f		 je	 SHORT $LN12@Push_heap

; 2459 : 		{	// move _Hole up to parent
; 2460 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  00030	8b cf		 mov	 ecx, edi
  00032	6b c9 38	 imul	 ecx, 56			; 00000038H
  00035	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  00038	53		 push	 ebx
  00039	e8 00 00 00 00	 call	 ??4tagPetSlot@@QAEAAU0@ABU0@@Z
  0003e	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00041	99		 cdq
  00042	2b c2		 sub	 eax, edx

; 2461 : 		_Hole = _Idx;

  00044	8b fe		 mov	 edi, esi
  00046	d1 f8		 sar	 eax, 1
  00048	8b f0		 mov	 esi, eax
  0004a	39 7d 10	 cmp	 DWORD PTR __Top$[ebp], edi
  0004d	7c c9		 jl	 SHORT $LL3@Push_heap
$LN12@Push_heap:
  0004f	5b		 pop	 ebx
$LN1@Push_heap:

; 2462 : 		}
; 2463 : 
; 2464 : 	*(_First + _Hole) = _Move(_Val);	// drop _Val into final hole

  00050	ff 75 14	 push	 DWORD PTR __Val$[ebp]
  00053	8b cf		 mov	 ecx, edi
  00055	6b c9 38	 imul	 ecx, 56			; 00000038H
  00058	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  0005b	e8 00 00 00 00	 call	 ??4tagPetSlot@@QAEAAU0@ABU0@@Z
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi

; 2465 : 	}

  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
??$_Push_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@HH$$QAU1@VPetSlotSort@@@Z ENDP ; std::_Push_heap<tagPetSlot *,int,tagPetSlot,PetSlotSort>
_TEXT	ENDS
PUBLIC	??0?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE@XZ ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::vector<tagPetSlot,std::allocator<tagPetSlot> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE@XZ PROC ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::vector<tagPetSlot,std::allocator<tagPetSlot> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::vector<tagPetSlot,std::allocator<tagPetSlot> >
_TEXT	ENDS
PUBLIC	??C?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEPAUtagPetSlot@@XZ ; std::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator->
; Function compile flags: /Ogsp
;	COMDAT ??C?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEPAUtagPetSlot@@XZ
_TEXT	SEGMENT
??C?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEPAUtagPetSlot@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator->, COMDAT
; _this$ = ecx

; 327  : 		return (&**this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 328  : 		}

  00002	c3		 ret	 0
??C?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBEPAUtagPetSlot@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator->
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QAE@PAUtagPetSlot@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QAE@PAUtagPetSlot@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QAE@PAUtagPetSlot@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@QAE@PAUtagPetSlot@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@AAU3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@AAU2@@Z ; std::_Cons_val<std::allocator<tagPetSlot>,tagPetSlot,tagPetSlot &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@AAU3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@AAU3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@AAU2@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@AAU3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@AAU3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@AAU3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@AAU2@@Z
_TEXT	SEGMENT
$T507285 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@AAU3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<tagPetSlot>,tagPetSlot,tagPetSlot &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@AAU3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@AAU2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T507285[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0tagPetSlot@@QAE@ABU0@@Z
$LN7@Cons_val:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@AAU3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@AAU2@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T507285[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@AAU3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@AAU2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@AAU3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@AAU2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@AAU3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<tagPetSlot>,tagPetSlot,tagPetSlot &>
PUBLIC	??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@ABU3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@ABU2@@Z ; std::_Cons_val<std::allocator<tagPetSlot>,tagPetSlot,tagPetSlot const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@ABU3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@ABU3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<tagPetSlot>,tagPetSlot,tagPetSlot const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UtagPetSlot@@ABU1@@std@@YAXPAUtagPetSlot@@ABU1@@Z ; std::_Construct<tagPetSlot,tagPetSlot const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@ABU3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<tagPetSlot>,tagPetSlot,tagPetSlot const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUtagPetSlot@@PAU1@@std@@YAPAUtagPetSlot@@PAU1@00@Z ; std::_Move<tagPetSlot *,tagPetSlot *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUtagPetSlot@@PAU1@@std@@YAPAUtagPetSlot@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$507311 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUtagPetSlot@@PAU1@@std@@YAPAUtagPetSlot@@PAU1@00@Z PROC ; std::_Move<tagPetSlot *,tagPetSlot *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$507311[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAUtagPetSlot@@PAU1@@std@@YAPAUtagPetSlot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<tagPetSlot *,tagPetSlot *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAUtagPetSlot@@PAU1@@std@@YAPAUtagPetSlot@@PAU1@00@Z ENDP ; std::_Move<tagPetSlot *,tagPetSlot *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@@Z ; std::allocator<tagPetSlot>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@@Z PROC ; std::allocator<tagPetSlot>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??1tagPetSlot@@QAE@XZ

; 214  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?destroy@?$allocator@UtagPetSlot@@@std@@QAEXPAUtagPetSlot@@@Z ENDP ; std::allocator<tagPetSlot>::destroy
_TEXT	ENDS
PUBLIC	??$iter_swap@PAUtagPetSlot@@PAU1@@std@@YAXPAUtagPetSlot@@0@Z ; std::iter_swap<tagPetSlot *,tagPetSlot *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$iter_swap@PAUtagPetSlot@@PAU1@@std@@YAXPAUtagPetSlot@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAUtagPetSlot@@PAU1@@std@@YAXPAUtagPetSlot@@0@Z PROC ; std::iter_swap<tagPetSlot *,tagPetSlot *>, COMDAT

; 2133 : 	{	// swap *_Left and *_Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2135 : 	}

  00003	5d		 pop	 ebp

; 2134 : 	swap(*_Left, *_Right);

  00004	e9 00 00 00 00	 jmp	 ??$swap@UtagPetSlot@@@std@@YAXAAUtagPetSlot@@0@Z ; std::swap<tagPetSlot>
??$iter_swap@PAUtagPetSlot@@PAU1@@std@@YAXPAUtagPetSlot@@0@Z ENDP ; std::iter_swap<tagPetSlot *,tagPetSlot *>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAUtagPetSlot@@VPetSlotSort@@U1@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z ; std::_Insertion_sort1<tagPetSlot *,PetSlotSort,tagPetSlot>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Insertion_sort1@PAUtagPetSlot@@VPetSlotSort@@U1@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insertion_sort1@PAUtagPetSlot@@VPetSlotSort@@U1@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z$0
__ehfuncinfo$??$_Insertion_sort1@PAUtagPetSlot@@VPetSlotSort@@U1@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Insertion_sort1@PAUtagPetSlot@@VPetSlotSort@@U1@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Insertion_sort1@PAUtagPetSlot@@VPetSlotSort@@U1@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z
_TEXT	SEGMENT
__Val$506405 = -72					; size = 56
__Next1$506404 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Cat$507344 = 12					; size = 1
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
??$_Insertion_sort1@PAUtagPetSlot@@VPetSlotSort@@U1@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z PROC ; std::_Insertion_sort1<tagPetSlot *,PetSlotSort,tagPetSlot>, COMDAT

; 3650 : 	{	// insertion sort [_First, _Last), using _Pred

  00000	6a 3c		 push	 60			; 0000003cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Insertion_sort1@PAUtagPetSlot@@VPetSlotSort@@U1@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 3651 : 	if (_First != _Last)

  0000c	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0000f	3b 5d 0c	 cmp	 ebx, DWORD PTR __Last$[ebp]
  00012	0f 84 9a 00 00
	00		 je	 $LN6@Insertion_

; 3652 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  00018	8d 73 38	 lea	 esi, DWORD PTR [ebx+56]
  0001b	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001e	0f 84 8e 00 00
	00		 je	 $LN6@Insertion_
  00024	8d 7e c8	 lea	 edi, DWORD PTR [esi-56]
$LL7@Insertion_:

; 3653 : 			{	// order next element
; 3654 : 			_BidIt _Next1 = _Next;
; 3655 : 			_Ty _Val = _Move(*_Next);

  00027	56		 push	 esi
  00028	8d 4d b8	 lea	 ecx, DWORD PTR __Val$506405[ebp]
  0002b	89 75 f0	 mov	 DWORD PTR __Next1$506404[ebp], esi
  0002e	e8 00 00 00 00	 call	 ??0tagPetSlot@@QAE@ABU0@@Z
  00033	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 3656 : 
; 3657 : 			if (_DEBUG_LT_PRED(_Pred, _Val, *_First))

  00037	53		 push	 ebx
  00038	8d 45 b8	 lea	 eax, DWORD PTR __Val$506405[ebp]
  0003b	50		 push	 eax
  0003c	8d 4d 10	 lea	 ecx, DWORD PTR __Pred$[ebp]
  0003f	e8 00 00 00 00	 call	 ??RPetSlotSort@@QBE_NABUtagPetSlot@@0@Z ; PetSlotSort::operator()
  00044	84 c0		 test	 al, al
  00046	74 1e		 je	 SHORT $LN5@Insertion_

; 3658 : 				{	// found new earliest element, move to front
; 3659 : 				_Move_backward(_First, _Next, ++_Next1);

  00048	ff 75 0c	 push	 DWORD PTR __Cat$507344[ebp]
  0004b	8d 47 70	 lea	 eax, DWORD PTR [edi+112]
  0004e	50		 push	 eax
  0004f	56		 push	 esi
  00050	53		 push	 ebx
  00051	e8 00 00 00 00	 call	 ??$_Move_backward@PAUtagPetSlot@@PAU1@@std@@YAPAUtagPetSlot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<tagPetSlot *,tagPetSlot *>
  00056	83 c4 10	 add	 esp, 16			; 00000010H

; 3660 : 				*_First = _Move(_Val);

  00059	8d 45 b8	 lea	 eax, DWORD PTR __Val$506405[ebp]
  0005c	50		 push	 eax
  0005d	8b cb		 mov	 ecx, ebx
  0005f	e8 00 00 00 00	 call	 ??4tagPetSlot@@QAEAAU0@ABU0@@Z

; 3661 : 				}
; 3662 : 			else

  00064	eb 31		 jmp	 SHORT $LN4@Insertion_
$LN5@Insertion_:

; 3663 : 				{	// look for insertion point after first
; 3664 : 				for (_BidIt _First1 = _Next1;
; 3665 : 					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);
; 3666 : 					_Next1 = _First1)

  00066	8b df		 mov	 ebx, edi
  00068	57		 push	 edi
  00069	eb 0d		 jmp	 SHORT $LN30@Insertion_
$LL3@Insertion_:

; 3667 : 					*_Next1 = _Move(*_First1);	// move hole down

  0006b	53		 push	 ebx
  0006c	e8 00 00 00 00	 call	 ??4tagPetSlot@@QAEAAU0@ABU0@@Z
  00071	89 5d f0	 mov	 DWORD PTR __Next1$506404[ebp], ebx
  00074	83 eb 38	 sub	 ebx, 56			; 00000038H
  00077	53		 push	 ebx
$LN30@Insertion_:

; 3663 : 				{	// look for insertion point after first
; 3664 : 				for (_BidIt _First1 = _Next1;
; 3665 : 					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);
; 3666 : 					_Next1 = _First1)

  00078	8d 45 b8	 lea	 eax, DWORD PTR __Val$506405[ebp]
  0007b	50		 push	 eax
  0007c	8d 4d 10	 lea	 ecx, DWORD PTR __Pred$[ebp]
  0007f	e8 00 00 00 00	 call	 ??RPetSlotSort@@QBE_NABUtagPetSlot@@0@Z ; PetSlotSort::operator()

; 3668 : 				*_Next1 = _Move(_Val);	// insert element in hole

  00084	8b 4d f0	 mov	 ecx, DWORD PTR __Next1$506404[ebp]
  00087	84 c0		 test	 al, al
  00089	75 e0		 jne	 SHORT $LL3@Insertion_
  0008b	8d 45 b8	 lea	 eax, DWORD PTR __Val$506405[ebp]
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ??4tagPetSlot@@QAEAAU0@ABU0@@Z
  00094	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
$LN4@Insertion_:

; 3669 : 				}
; 3670 : 			}

  00097	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0009b	8d 4d b8	 lea	 ecx, DWORD PTR __Val$506405[ebp]
  0009e	e8 00 00 00 00	 call	 ??1tagPetSlot@@QAE@XZ
  000a3	83 c6 38	 add	 esi, 56			; 00000038H
  000a6	83 c7 38	 add	 edi, 56			; 00000038H
  000a9	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  000ac	0f 85 75 ff ff
	ff		 jne	 $LL7@Insertion_
$LN6@Insertion_:

; 3671 : 	}

  000b2	e8 00 00 00 00	 call	 __EH_epilog3
  000b7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insertion_sort1@PAUtagPetSlot@@VPetSlotSort@@U1@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR __Val$506405[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1tagPetSlot@@QAE@XZ
__ehhandler$??$_Insertion_sort1@PAUtagPetSlot@@VPetSlotSort@@U1@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insertion_sort1@PAUtagPetSlot@@VPetSlotSort@@U1@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insertion_sort1@PAUtagPetSlot@@VPetSlotSort@@U1@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z ENDP ; std::_Insertion_sort1<tagPetSlot *,PetSlotSort,tagPetSlot>
PUBLIC	??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@U3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@$$QAU2@@Z ; std::_Cons_val<std::allocator<tagPetSlot>,tagPetSlot,tagPetSlot>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@U3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@$$QAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@U3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@$$QAU2@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@U3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@$$QAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@U3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@$$QAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@U3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@$$QAU2@@Z
_TEXT	SEGMENT
$T507387 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@U3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<tagPetSlot>,tagPetSlot,tagPetSlot>, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@U3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@$$QAU2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T507387[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val@2
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0tagPetSlot@@QAE@ABU0@@Z
$LN7@Cons_val@2:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@U3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@$$QAU2@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T507387[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@U3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@$$QAU2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@U3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@$$QAU2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@U3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<tagPetSlot>,tagPetSlot,tagPetSlot>
PUBLIC	??$_Med3@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@00VPetSlotSort@@@Z ; std::_Med3<tagPetSlot *,PetSlotSort>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Med3@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@00VPetSlotSort@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Med3@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@00VPetSlotSort@@@Z PROC ; std::_Med3<tagPetSlot *,PetSlotSort>, COMDAT

; 3683 : 	{	// sort median of three elements to middle

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3684 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Mid$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000b	57		 push	 edi
  0000c	56		 push	 esi
  0000d	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00010	e8 00 00 00 00	 call	 ??RPetSlotSort@@QBE_NABUtagPetSlot@@0@Z ; PetSlotSort::operator()
  00015	84 c0		 test	 al, al
  00017	74 09		 je	 SHORT $LN6@Med3

; 3685 : 		_STD iter_swap(_Mid, _First);

  00019	57		 push	 edi
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ??$swap@UtagPetSlot@@@std@@YAXAAUtagPetSlot@@0@Z ; std::swap<tagPetSlot>
  00020	59		 pop	 ecx
  00021	59		 pop	 ecx
$LN6@Med3:

; 3686 : 	if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid))

  00022	56		 push	 esi
  00023	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  00026	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00029	e8 00 00 00 00	 call	 ??RPetSlotSort@@QBE_NABUtagPetSlot@@0@Z ; PetSlotSort::operator()
  0002e	84 c0		 test	 al, al
  00030	74 0b		 je	 SHORT $LN8@Med3

; 3687 : 		_STD iter_swap(_Last, _Mid);

  00032	56		 push	 esi
  00033	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  00036	e8 00 00 00 00	 call	 ??$swap@UtagPetSlot@@@std@@YAXAAUtagPetSlot@@0@Z ; std::swap<tagPetSlot>
  0003b	59		 pop	 ecx
  0003c	59		 pop	 ecx
$LN8@Med3:

; 3688 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  0003d	57		 push	 edi
  0003e	56		 push	 esi
  0003f	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00042	e8 00 00 00 00	 call	 ??RPetSlotSort@@QBE_NABUtagPetSlot@@0@Z ; PetSlotSort::operator()
  00047	84 c0		 test	 al, al
  00049	74 09		 je	 SHORT $LN10@Med3

; 3689 : 		_STD iter_swap(_Mid, _First);

  0004b	57		 push	 edi
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 ??$swap@UtagPetSlot@@@std@@YAXAAUtagPetSlot@@0@Z ; std::swap<tagPetSlot>
  00052	59		 pop	 ecx
  00053	59		 pop	 ecx
$LN10@Med3:
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi

; 3690 : 	}

  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
??$_Med3@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@00VPetSlotSort@@@Z ENDP ; std::_Med3<tagPetSlot *,PetSlotSort>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@HH$$QAU1@VPetSlotSort@@@Z ; std::_Adjust_heap<tagPetSlot *,int,tagPetSlot,PetSlotSort>
; Function compile flags: /Ogsp
;	COMDAT ??$_Adjust_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@HH$$QAU1@VPetSlotSort@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Top$ = 12						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Adjust_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@HH$$QAU1@VPetSlotSort@@@Z PROC ; std::_Adjust_heap<tagPetSlot *,int,tagPetSlot,PetSlotSort>, COMDAT

; 2565 : 	{	// percolate _Hole to _Bottom, then push _Val, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2566 : 	_Diff _Top = _Hole;
; 2567 : 	_Diff _Idx = 2 * _Hole + 2;
; 2568 : 
; 2569 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Hole$[ebp]
  0000c	89 7d 0c	 mov	 DWORD PTR __Top$[ebp], edi
  0000f	8d 74 3f 02	 lea	 esi, DWORD PTR [edi+edi+2]
  00013	eb 33		 jmp	 SHORT $LN16@Adjust_hea
$LL5@Adjust_hea:

; 2570 : 		{	// move _Hole down to larger child
; 2571 : 		if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1))))

  00015	8b c6		 mov	 eax, esi
  00017	6b c0 38	 imul	 eax, 56			; 00000038H
  0001a	03 c3		 add	 eax, ebx
  0001c	8d 48 c8	 lea	 ecx, DWORD PTR [eax-56]
  0001f	51		 push	 ecx
  00020	50		 push	 eax
  00021	8d 4d 18	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00024	e8 00 00 00 00	 call	 ??RPetSlotSort@@QBE_NABUtagPetSlot@@0@Z ; PetSlotSort::operator()
  00029	84 c0		 test	 al, al
  0002b	74 01		 je	 SHORT $LN2@Adjust_hea

; 2572 : 			--_Idx;

  0002d	4e		 dec	 esi
$LN2@Adjust_hea:

; 2573 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  0002e	8b c6		 mov	 eax, esi
  00030	6b c0 38	 imul	 eax, 56			; 00000038H
  00033	8b cf		 mov	 ecx, edi
  00035	6b c9 38	 imul	 ecx, 56			; 00000038H
  00038	03 c3		 add	 eax, ebx
  0003a	50		 push	 eax
  0003b	03 cb		 add	 ecx, ebx
  0003d	e8 00 00 00 00	 call	 ??4tagPetSlot@@QAEAAU0@ABU0@@Z

; 2574 : 		_Hole = _Idx;

  00042	8b fe		 mov	 edi, esi
  00044	8d 74 36 02	 lea	 esi, DWORD PTR [esi+esi+2]
$LN16@Adjust_hea:

; 2566 : 	_Diff _Top = _Hole;
; 2567 : 	_Diff _Idx = 2 * _Hole + 2;
; 2568 : 
; 2569 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

  00048	3b 75 10	 cmp	 esi, DWORD PTR __Bottom$[ebp]
  0004b	7c c8		 jl	 SHORT $LL5@Adjust_hea

; 2575 : 		}
; 2576 : 
; 2577 : 	if (_Idx == _Bottom)

  0004d	75 1b		 jne	 SHORT $LN1@Adjust_hea

; 2578 : 		{	// only child at bottom, move _Hole down to it
; 2579 : 		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));

  0004f	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  00052	6b c0 38	 imul	 eax, 56			; 00000038H
  00055	8b cf		 mov	 ecx, edi
  00057	6b c9 38	 imul	 ecx, 56			; 00000038H
  0005a	8d 44 18 c8	 lea	 eax, DWORD PTR [eax+ebx-56]
  0005e	50		 push	 eax
  0005f	03 cb		 add	 ecx, ebx
  00061	e8 00 00 00 00	 call	 ??4tagPetSlot@@QAEAAU0@ABU0@@Z

; 2580 : 		_Hole = _Bottom - 1;

  00066	8b 7d 10	 mov	 edi, DWORD PTR __Bottom$[ebp]
  00069	4f		 dec	 edi
$LN1@Adjust_hea:

; 2581 : 		}
; 2582 : 	_Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);

  0006a	ff 75 18	 push	 DWORD PTR __Pred$[ebp]
  0006d	ff 75 14	 push	 DWORD PTR __Val$[ebp]
  00070	ff 75 0c	 push	 DWORD PTR __Top$[ebp]
  00073	57		 push	 edi
  00074	53		 push	 ebx
  00075	e8 00 00 00 00	 call	 ??$_Push_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@HH$$QAU1@VPetSlotSort@@@Z ; std::_Push_heap<tagPetSlot *,int,tagPetSlot,PetSlotSort>
  0007a	83 c4 14	 add	 esp, 20			; 00000014H
  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx

; 2583 : 	}

  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
??$_Adjust_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@HH$$QAU1@VPetSlotSort@@@Z ENDP ; std::_Adjust_heap<tagPetSlot *,int,tagPetSlot,PetSlotSort>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@00$$QAU1@VPetSlotSort@@PAH@Z ; std::_Pop_heap<tagPetSlot *,int,tagPetSlot,PetSlotSort>
; Function compile flags: /Ogsp
;	COMDAT ??$_Pop_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@00$$QAU1@VPetSlotSort@@PAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
___formal$ = 28						; size = 4
??$_Pop_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@00$$QAU1@VPetSlotSort@@PAH@Z PROC ; std::_Pop_heap<tagPetSlot *,int,tagPetSlot,PetSlotSort>, COMDAT

; 2591 : 	{	// pop *_First to *_Dest and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2592 : 	*_Dest = _Move(*_First);

  00003	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00006	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00009	e8 00 00 00 00	 call	 ??4tagPetSlot@@QAEAAU0@ABU0@@Z

; 2593 : 	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),
; 2594 : 		_Move(_Val), _Pred);

  0000e	ff 75 18	 push	 DWORD PTR __Pred$[ebp]
  00011	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00014	ff 75 14	 push	 DWORD PTR __Val$[ebp]
  00017	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0001a	6a 38		 push	 56			; 00000038H
  0001c	59		 pop	 ecx
  0001d	99		 cdq
  0001e	f7 f9		 idiv	 ecx
  00020	50		 push	 eax
  00021	6a 00		 push	 0
  00023	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00026	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@HH$$QAU1@VPetSlotSort@@@Z ; std::_Adjust_heap<tagPetSlot *,int,tagPetSlot,PetSlotSort>
  0002b	83 c4 14	 add	 esp, 20			; 00000014H

; 2595 : 	}

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??$_Pop_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@00$$QAU1@VPetSlotSort@@PAH@Z ENDP ; std::_Pop_heap<tagPetSlot *,int,tagPetSlot,PetSlotSort>
_TEXT	ENDS
PUBLIC	?begin@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@XZ ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@XZ PROC ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@XZ ENDP ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@XZ ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@XZ PROC ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@XZ ENDP ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@@Z ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@@Z PROC ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@@Z ENDP ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$_Insertion_sort@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@@Z ; std::_Insertion_sort<tagPetSlot *,PetSlotSort>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Insertion_sort@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Insertion_sort@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@@Z PROC ; std::_Insertion_sort<tagPetSlot *,PetSlotSort>, COMDAT

; 3676 : 	{	// insertion sort [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3677 : 	_Insertion_sort1(_First, _Last, _Pred, _Val_type(_First));

  00003	6a 00		 push	 0
  00005	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00008	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Insertion_sort1@PAUtagPetSlot@@VPetSlotSort@@U1@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z ; std::_Insertion_sort1<tagPetSlot *,PetSlotSort,tagPetSlot>
  00013	83 c4 10	 add	 esp, 16			; 00000010H

; 3678 : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Insertion_sort@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@@Z ENDP ; std::_Insertion_sort<tagPetSlot *,PetSlotSort>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@@Z ; std::_Dest_val<std::allocator<tagPetSlot>,tagPetSlot>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@@Z PROC ; std::_Dest_val<std::allocator<tagPetSlot>,tagPetSlot>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]

; 288  : 	}

  00006	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  00007	e9 00 00 00 00	 jmp	 ??1tagPetSlot@@QAE@XZ
??$_Dest_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@@Z ENDP ; std::_Dest_val<std::allocator<tagPetSlot>,tagPetSlot>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUtagPetSlot@@PAU1@V?$allocator@UtagPetSlot@@@std@@U1@@std@@YAPAUtagPetSlot@@PAU1@00AAV?$allocator@UtagPetSlot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<tagPetSlot *,tagPetSlot *,std::allocator<tagPetSlot>,tagPetSlot>
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUtagPetSlot@@PAU1@V?$allocator@UtagPetSlot@@@std@@U1@@std@@YAPAUtagPetSlot@@PAU1@00AAV?$allocator@UtagPetSlot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUtagPetSlot@@PAU1@V?$allocator@UtagPetSlot@@@std@@U1@@std@@YAPAUtagPetSlot@@PAU1@00AAV?$allocator@UtagPetSlot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUtagPetSlot@@PAU1@V?$allocator@UtagPetSlot@@@std@@U1@@std@@YAPAUtagPetSlot@@PAU1@00AAV?$allocator@UtagPetSlot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUtagPetSlot@@PAU1@V?$allocator@UtagPetSlot@@@std@@U1@@std@@YAPAUtagPetSlot@@PAU1@00AAV?$allocator@UtagPetSlot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUtagPetSlot@@PAU1@V?$allocator@UtagPetSlot@@@std@@U1@@std@@YAPAUtagPetSlot@@PAU1@00AAV?$allocator@UtagPetSlot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAUtagPetSlot@@PAU1@V?$allocator@UtagPetSlot@@@std@@U1@@std@@YAPAUtagPetSlot@@PAU1@00AAV?$allocator@UtagPetSlot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUtagPetSlot@@PAU1@V?$allocator@UtagPetSlot@@@std@@U1@@std@@YAPAUtagPetSlot@@PAU1@00AAV?$allocator@UtagPetSlot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUtagPetSlot@@PAU1@V?$allocator@UtagPetSlot@@@std@@U1@@std@@YAPAUtagPetSlot@@PAU1@00AAV?$allocator@UtagPetSlot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAUtagPetSlot@@PAU1@V?$allocator@UtagPetSlot@@@std@@U1@@std@@YAPAUtagPetSlot@@PAU1@00AAV?$allocator@UtagPetSlot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUtagPetSlot@@PAU1@V?$allocator@UtagPetSlot@@@std@@U1@@std@@YAPAUtagPetSlot@@PAU1@00AAV?$allocator@UtagPetSlot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<tagPetSlot *,tagPetSlot *,std::allocator<tagPetSlot>,tagPetSlot>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_move@PAUtagPetSlot@@PAU1@V?$allocator@UtagPetSlot@@@std@@U1@@std@@YAPAUtagPetSlot@@PAU1@00AAV?$allocator@UtagPetSlot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 428  : 
; 429  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00016	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LL6@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	74 35		 je	 SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  0001e	56		 push	 esi
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00025	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@U3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@$$QAU2@@Z ; std::_Cons_val<std::allocator<tagPetSlot>,tagPetSlot,tagPetSlot>
  0002a	83 45 10 38	 add	 DWORD PTR __Dest$[ebp], 56 ; 00000038H
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00031	83 c6 38	 add	 esi, 56			; 00000038H
  00034	eb e3		 jmp	 SHORT $LL6@Uninit_mov
__catch$??$_Uninit_move@PAUtagPetSlot@@PAU1@V?$allocator@UtagPetSlot@@@std@@U1@@std@@YAPAUtagPetSlot@@PAU1@00AAV?$allocator@UtagPetSlot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00036	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00039	eb 0a		 jmp	 SHORT $LN29@Uninit_mov
$LL3@Uninit_mov:

; 434  : 		_Dest_val(_Al, _Next);

  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ??1tagPetSlot@@QAE@XZ
  00042	83 c6 38	 add	 esi, 56			; 00000038H
$LN29@Uninit_mov:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00045	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00048	75 f1		 jne	 SHORT $LL3@Uninit_mov

; 435  : 	_RERAISE;

  0004a	6a 00		 push	 0
  0004c	6a 00		 push	 0
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN30@Uninit_mov:
$LN4@Uninit_mov:

; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00053	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 438  : 	}

  00056	e8 00 00 00 00	 call	 __EH_epilog3
  0005b	c3		 ret	 0
$LN28@Uninit_mov:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUtagPetSlot@@PAU1@V?$allocator@UtagPetSlot@@@std@@U1@@std@@YAPAUtagPetSlot@@PAU1@00AAV?$allocator@UtagPetSlot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUtagPetSlot@@PAU1@V?$allocator@UtagPetSlot@@@std@@U1@@std@@YAPAUtagPetSlot@@PAU1@00AAV?$allocator@UtagPetSlot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUtagPetSlot@@PAU1@V?$allocator@UtagPetSlot@@@std@@U1@@std@@YAPAUtagPetSlot@@PAU1@00AAV?$allocator@UtagPetSlot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<tagPetSlot *,tagPetSlot *,std::allocator<tagPetSlot>,tagPetSlot>
PUBLIC	??$_Median@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@00VPetSlotSort@@@Z ; std::_Median<tagPetSlot *,PetSlotSort>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Median@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@00VPetSlotSort@@@Z
_TEXT	SEGMENT
tv200 = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
tv203 = 16						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Median@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@00VPetSlotSort@@@Z PROC ; std::_Median<tagPetSlot *,PetSlotSort>, COMDAT

; 3695 : 	{	// sort median element to middle

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3696 : 	if (40 < _Last - _First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000a	56		 push	 esi
  0000b	8b c3		 mov	 eax, ebx
  0000d	2b c1		 sub	 eax, ecx
  0000f	6a 38		 push	 56			; 00000038H
  00011	99		 cdq
  00012	5e		 pop	 esi
  00013	f7 fe		 idiv	 esi
  00015	83 f8 28	 cmp	 eax, 40			; 00000028H
  00018	7e 68		 jle	 SHORT $LN2@Median

; 3697 : 		{	// median of nine
; 3698 : 		size_t _Step = (_Last - _First + 1) / 8;

  0001a	40		 inc	 eax
  0001b	99		 cdq
  0001c	83 e2 07	 and	 edx, 7
  0001f	03 c2		 add	 eax, edx
  00021	57		 push	 edi

; 3699 : 		_Med3(_First, _First + _Step, _First + 2 * _Step, _Pred);

  00022	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00025	c1 f8 03	 sar	 eax, 3
  00028	8b f8		 mov	 edi, eax
  0002a	8b f0		 mov	 esi, eax
  0002c	6b ff 70	 imul	 edi, 112		; 00000070H
  0002f	6b f6 38	 imul	 esi, 56			; 00000038H
  00032	8d 14 0f	 lea	 edx, DWORD PTR [edi+ecx]
  00035	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  00038	52		 push	 edx
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	89 45 08	 mov	 DWORD PTR tv200[ebp], eax
  0003e	e8 00 00 00 00	 call	 ??$_Med3@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@00VPetSlotSort@@@Z ; std::_Med3<tagPetSlot *,PetSlotSort>

; 3700 : 		_Med3(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00043	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00046	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  00049	8d 0c 06	 lea	 ecx, DWORD PTR [esi+eax]
  0004c	51		 push	 ecx
  0004d	50		 push	 eax
  0004e	2b c6		 sub	 eax, esi
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$_Med3@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@00VPetSlotSort@@@Z ; std::_Med3<tagPetSlot *,PetSlotSort>

; 3701 : 		_Med3(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);

  00056	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00059	89 5d 10	 mov	 DWORD PTR tv203[ebp], ebx
  0005c	29 75 10	 sub	 DWORD PTR tv203[ebp], esi
  0005f	53		 push	 ebx
  00060	ff 75 10	 push	 DWORD PTR tv203[ebp]
  00063	2b df		 sub	 ebx, edi
  00065	53		 push	 ebx
  00066	e8 00 00 00 00	 call	 ??$_Med3@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@00VPetSlotSort@@@Z ; std::_Med3<tagPetSlot *,PetSlotSort>

; 3702 : 		_Med3(_First + _Step, _Mid, _Last - _Step, _Pred);

  0006b	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0006e	ff 75 10	 push	 DWORD PTR tv203[ebp]
  00071	ff 75 0c	 push	 DWORD PTR __Mid$[ebp]
  00074	ff 75 08	 push	 DWORD PTR tv200[ebp]
  00077	e8 00 00 00 00	 call	 ??$_Med3@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@00VPetSlotSort@@@Z ; std::_Med3<tagPetSlot *,PetSlotSort>
  0007c	83 c4 40	 add	 esp, 64			; 00000040H
  0007f	5f		 pop	 edi

; 3703 : 		}
; 3704 : 	else

  00080	eb 10		 jmp	 SHORT $LN1@Median
$LN2@Median:

; 3705 : 		_Med3(_First, _Mid, _Last, _Pred);

  00082	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00085	53		 push	 ebx
  00086	ff 75 0c	 push	 DWORD PTR __Mid$[ebp]
  00089	51		 push	 ecx
  0008a	e8 00 00 00 00	 call	 ??$_Med3@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@00VPetSlotSort@@@Z ; std::_Med3<tagPetSlot *,PetSlotSort>
  0008f	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@Median:
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx

; 3706 : 	}

  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
??$_Median@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@00VPetSlotSort@@@Z ENDP ; std::_Median<tagPetSlot *,PetSlotSort>
_TEXT	ENDS
PUBLIC	??$_Make_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@PAH0@Z ; std::_Make_heap<tagPetSlot *,int,tagPetSlot,PetSlotSort>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Make_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@PAH0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Make_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@PAH0@Z$0
__ehfuncinfo$??$_Make_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@PAH0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Make_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@PAH0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Make_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@PAH0@Z
_TEXT	SEGMENT
__Val$506370 = -68					; size = 56
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
??$_Make_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@PAH0@Z PROC ; std::_Make_heap<tagPetSlot *,int,tagPetSlot,PetSlotSort>, COMDAT

; 2658 : 	{	// make nontrivial [_First, _Last) into a heap, using _Pred

  00000	6a 38		 push	 56			; 00000038H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Make_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@PAH0@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 2659 : 	_Diff _Bottom = _Last - _First;

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000f	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00012	6a 38		 push	 56			; 00000038H
  00014	99		 cdq
  00015	59		 pop	 ecx
  00016	f7 f9		 idiv	 ecx
  00018	8b d8		 mov	 ebx, eax

; 2660 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

  0001a	99		 cdq
  0001b	2b c2		 sub	 eax, edx
  0001d	8b f0		 mov	 esi, eax
  0001f	d1 fe		 sar	 esi, 1
  00021	85 f6		 test	 esi, esi
  00023	7e 3d		 jle	 SHORT $LN1@Make_heap

; 2659 : 	_Diff _Bottom = _Last - _First;

  00025	8b fe		 mov	 edi, esi
  00027	6b ff 38	 imul	 edi, 56			; 00000038H
  0002a	03 7d 08	 add	 edi, DWORD PTR __First$[ebp]
$LN2@Make_heap:

; 2661 : 		{	// reheap top half, bottom to top
; 2662 : 		--_Hole;

  0002d	83 ef 38	 sub	 edi, 56			; 00000038H

; 2663 : 		_Ty _Val = _Move(*(_First + _Hole));

  00030	57		 push	 edi
  00031	8d 4d bc	 lea	 ecx, DWORD PTR __Val$506370[ebp]
  00034	4e		 dec	 esi
  00035	e8 00 00 00 00	 call	 ??0tagPetSlot@@QAE@ABU0@@Z

; 2664 : 		_Adjust_heap(_First, _Hole, _Bottom,
; 2665 : 			_Move(_Val), _Pred);

  0003a	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  0003d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00041	8d 45 bc	 lea	 eax, DWORD PTR __Val$506370[ebp]
  00044	50		 push	 eax
  00045	53		 push	 ebx
  00046	56		 push	 esi
  00047	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0004a	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@HH$$QAU1@VPetSlotSort@@@Z ; std::_Adjust_heap<tagPetSlot *,int,tagPetSlot,PetSlotSort>

; 2666 : 		}

  0004f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00053	83 c4 14	 add	 esp, 20			; 00000014H
  00056	8d 4d bc	 lea	 ecx, DWORD PTR __Val$506370[ebp]
  00059	e8 00 00 00 00	 call	 ??1tagPetSlot@@QAE@XZ
  0005e	85 f6		 test	 esi, esi
  00060	7f cb		 jg	 SHORT $LN2@Make_heap
$LN1@Make_heap:

; 2667 : 	}

  00062	e8 00 00 00 00	 call	 __EH_epilog3
  00067	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Make_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@PAH0@Z$0:
  00000	8d 4d bc	 lea	 ecx, DWORD PTR __Val$506370[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1tagPetSlot@@QAE@XZ
__ehhandler$??$_Make_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@PAH0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Make_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@PAH0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Make_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@PAH0@Z ENDP ; std::_Make_heap<tagPetSlot *,int,tagPetSlot,PetSlotSort>
PUBLIC	??$_Pop_heap_0@PAUtagPetSlot@@U1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z ; std::_Pop_heap_0<tagPetSlot *,tagPetSlot,PetSlotSort>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Pop_heap_0@PAUtagPetSlot@@U1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Pop_heap_0@PAUtagPetSlot@@U1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z$0
__ehfuncinfo$??$_Pop_heap_0@PAUtagPetSlot@@U1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Pop_heap_0@PAUtagPetSlot@@U1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Pop_heap_0@PAUtagPetSlot@@U1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z
_TEXT	SEGMENT
__Val$ = -68						; size = 56
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
??$_Pop_heap_0@PAUtagPetSlot@@U1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z PROC ; std::_Pop_heap_0<tagPetSlot *,tagPetSlot,PetSlotSort>, COMDAT

; 2601 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

  00000	6a 38		 push	 56			; 00000038H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Pop_heap_0@PAUtagPetSlot@@U1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 2602 : 	_Ty _Val = _Move(*(_Last - 1));

  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000f	83 c6 c8	 add	 esi, -56		; ffffffc8H
  00012	56		 push	 esi
  00013	8d 4d bc	 lea	 ecx, DWORD PTR __Val$[ebp]
  00016	e8 00 00 00 00	 call	 ??0tagPetSlot@@QAE@ABU0@@Z
  0001b	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 2603 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2604 : 		_Move(_Val), _Pred, _Dist_type(_First));

  0001f	6a 00		 push	 0
  00021	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00024	8d 45 bc	 lea	 eax, DWORD PTR __Val$[ebp]
  00027	50		 push	 eax
  00028	56		 push	 esi
  00029	56		 push	 esi
  0002a	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0002d	e8 00 00 00 00	 call	 ??$_Pop_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@00$$QAU1@VPetSlotSort@@PAH@Z ; std::_Pop_heap<tagPetSlot *,int,tagPetSlot,PetSlotSort>

; 2605 : 	}

  00032	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00036	83 c4 18	 add	 esp, 24			; 00000018H
  00039	8d 4d bc	 lea	 ecx, DWORD PTR __Val$[ebp]
  0003c	e8 00 00 00 00	 call	 ??1tagPetSlot@@QAE@XZ
  00041	e8 00 00 00 00	 call	 __EH_epilog3
  00046	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Pop_heap_0@PAUtagPetSlot@@U1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z$0:
  00000	8d 4d bc	 lea	 ecx, DWORD PTR __Val$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1tagPetSlot@@QAE@XZ
__ehhandler$??$_Pop_heap_0@PAUtagPetSlot@@U1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Pop_heap_0@PAUtagPetSlot@@U1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Pop_heap_0@PAUtagPetSlot@@U1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z ENDP ; std::_Pop_heap_0<tagPetSlot *,tagPetSlot,PetSlotSort>
PUBLIC	??$_Destroy_range@V?$allocator@UtagPetSlot@@@std@@@std@@YAXPAUtagPetSlot@@0AAV?$allocator@UtagPetSlot@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<tagPetSlot> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UtagPetSlot@@@std@@@std@@YAXPAUtagPetSlot@@0AAV?$allocator@UtagPetSlot@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UtagPetSlot@@@std@@@std@@YAXPAUtagPetSlot@@0AAV?$allocator@UtagPetSlot@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<tagPetSlot> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0a		 jmp	 SHORT $LN17@Destroy_ra
$LL3@Destroy_ra:

; 97   : 		_Dest_val(_Al, _First);

  00009	8b ce		 mov	 ecx, esi
  0000b	e8 00 00 00 00	 call	 ??1tagPetSlot@@QAE@XZ
  00010	83 c6 38	 add	 esi, 56			; 00000038H
$LN17@Destroy_ra:

; 96   : 	for (; _First != _Last; ++_First)

  00013	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00016	75 f1		 jne	 SHORT $LL3@Destroy_ra
  00018	5e		 pop	 esi

; 98   : 	}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Destroy_range@V?$allocator@UtagPetSlot@@@std@@@std@@YAXPAUtagPetSlot@@0AAV?$allocator@UtagPetSlot@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<tagPetSlot> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUtagPetSlot@@PAU1@V?$allocator@UtagPetSlot@@@std@@@std@@YAPAUtagPetSlot@@PAU1@00AAV?$allocator@UtagPetSlot@@@0@@Z ; std::_Uninitialized_move<tagPetSlot *,tagPetSlot *,std::allocator<tagPetSlot> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUtagPetSlot@@PAU1@V?$allocator@UtagPetSlot@@@std@@@std@@YAPAUtagPetSlot@@PAU1@00AAV?$allocator@UtagPetSlot@@@0@@Z
_TEXT	SEGMENT
__Cat$507640 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUtagPetSlot@@PAU1@V?$allocator@UtagPetSlot@@@std@@@std@@YAPAUtagPetSlot@@PAU1@00AAV?$allocator@UtagPetSlot@@@0@@Z PROC ; std::_Uninitialized_move<tagPetSlot *,tagPetSlot *,std::allocator<tagPetSlot> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$507640[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUtagPetSlot@@PAU1@V?$allocator@UtagPetSlot@@@std@@U1@@std@@YAPAUtagPetSlot@@PAU1@00AAV?$allocator@UtagPetSlot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<tagPetSlot *,tagPetSlot *,std::allocator<tagPetSlot>,tagPetSlot>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAUtagPetSlot@@PAU1@V?$allocator@UtagPetSlot@@@std@@@std@@YAPAUtagPetSlot@@PAU1@00AAV?$allocator@UtagPetSlot@@@0@@Z ENDP ; std::_Uninitialized_move<tagPetSlot *,tagPetSlot *,std::allocator<tagPetSlot> >
_TEXT	ENDS
PUBLIC	??$_Unguarded_partition@PAUtagPetSlot@@VPetSlotSort@@@std@@YA?AU?$pair@PAUtagPetSlot@@PAU1@@0@PAUtagPetSlot@@0VPetSlotSort@@@Z ; std::_Unguarded_partition<tagPetSlot *,PetSlotSort>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Unguarded_partition@PAUtagPetSlot@@VPetSlotSort@@@std@@YA?AU?$pair@PAUtagPetSlot@@PAU1@@0@PAUtagPetSlot@@0VPetSlotSort@@@Z
_TEXT	SEGMENT
tv352 = -8						; size = 4
tv264 = -8						; size = 4
__Glast$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Unguarded_partition@PAUtagPetSlot@@VPetSlotSort@@@std@@YA?AU?$pair@PAUtagPetSlot@@PAU1@@0@PAUtagPetSlot@@0VPetSlotSort@@@Z PROC ; std::_Unguarded_partition<tagPetSlot *,PetSlotSort>, COMDAT

; 3712 : 	{	// partition [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 3713 : 	_RanIt _Mid = _First + (_Last - _First) / 2;

  00005	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00008	53		 push	 ebx
  00009	8b 5d 0c	 mov	 ebx, DWORD PTR __First$[ebp]
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b c1		 mov	 eax, ecx
  00010	2b c3		 sub	 eax, ebx
  00012	6a 38		 push	 56			; 00000038H
  00014	5e		 pop	 esi
  00015	99		 cdq
  00016	f7 fe		 idiv	 esi

; 3714 : 	_Median(_First, _Mid, _Last - 1, _Pred);

  00018	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0001b	83 c1 c8	 add	 ecx, -56		; ffffffc8H
  0001e	51		 push	 ecx
  0001f	99		 cdq
  00020	2b c2		 sub	 eax, edx
  00022	8b f0		 mov	 esi, eax
  00024	d1 fe		 sar	 esi, 1
  00026	6b f6 38	 imul	 esi, 56			; 00000038H
  00029	03 f3		 add	 esi, ebx
  0002b	56		 push	 esi
  0002c	53		 push	 ebx
  0002d	e8 00 00 00 00	 call	 ??$_Median@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@00VPetSlotSort@@@Z ; std::_Median<tagPetSlot *,PetSlotSort>
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 3715 : 	_RanIt _Pfirst = _Mid;
; 3716 : 	_RanIt _Plast = _Pfirst + 1;

  00035	8d 7e 38	 lea	 edi, DWORD PTR [esi+56]
  00038	eb 27		 jmp	 SHORT $LN72@Unguarded_
$LL27@Unguarded_:

; 3717 : 
; 3718 : 	while (_First < _Pfirst
; 3719 : 		&& !_DEBUG_LT_PRED(_Pred, *(_Pfirst - 1), *_Pfirst)
; 3720 : 		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))

  0003a	8d 46 c8	 lea	 eax, DWORD PTR [esi-56]
  0003d	56		 push	 esi
  0003e	50		 push	 eax
  0003f	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00042	89 45 f8	 mov	 DWORD PTR tv264[ebp], eax
  00045	e8 00 00 00 00	 call	 ??RPetSlotSort@@QBE_NABUtagPetSlot@@0@Z ; PetSlotSort::operator()
  0004a	84 c0		 test	 al, al
  0004c	75 38		 jne	 SHORT $LN73@Unguarded_
  0004e	ff 75 f8	 push	 DWORD PTR tv264[ebp]
  00051	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00054	56		 push	 esi
  00055	e8 00 00 00 00	 call	 ??RPetSlotSort@@QBE_NABUtagPetSlot@@0@Z ; PetSlotSort::operator()
  0005a	84 c0		 test	 al, al
  0005c	75 28		 jne	 SHORT $LN73@Unguarded_

; 3721 : 		--_Pfirst;

  0005e	8b 75 f8	 mov	 esi, DWORD PTR tv264[ebp]
$LN72@Unguarded_:

; 3717 : 
; 3718 : 	while (_First < _Pfirst
; 3719 : 		&& !_DEBUG_LT_PRED(_Pred, *(_Pfirst - 1), *_Pfirst)
; 3720 : 		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))

  00061	3b de		 cmp	 ebx, esi
  00063	72 d5		 jb	 SHORT $LL27@Unguarded_

; 3725 : 		++_Plast;

  00065	eb 1f		 jmp	 SHORT $LN73@Unguarded_
$LL25@Unguarded_:

; 3722 : 	while (_Plast < _Last
; 3723 : 		&& !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst)
; 3724 : 		&& !_Pred(*_Pfirst, *_Plast))

  00067	56		 push	 esi
  00068	57		 push	 edi
  00069	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  0006c	e8 00 00 00 00	 call	 ??RPetSlotSort@@QBE_NABUtagPetSlot@@0@Z ; PetSlotSort::operator()
  00071	84 c0		 test	 al, al
  00073	75 16		 jne	 SHORT $LN24@Unguarded_
  00075	57		 push	 edi
  00076	56		 push	 esi
  00077	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  0007a	e8 00 00 00 00	 call	 ??RPetSlotSort@@QBE_NABUtagPetSlot@@0@Z ; PetSlotSort::operator()
  0007f	84 c0		 test	 al, al
  00081	75 08		 jne	 SHORT $LN24@Unguarded_

; 3725 : 		++_Plast;

  00083	83 c7 38	 add	 edi, 56			; 00000038H
$LN73@Unguarded_:

; 3722 : 	while (_Plast < _Last
; 3723 : 		&& !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst)
; 3724 : 		&& !_Pred(*_Pfirst, *_Plast))

  00086	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  00089	72 dc		 jb	 SHORT $LL25@Unguarded_
$LN24@Unguarded_:

; 3726 : 
; 3727 : 	_RanIt _Gfirst = _Plast;

  0008b	8b df		 mov	 ebx, edi

; 3728 : 	_RanIt _Glast = _Pfirst;

  0008d	89 75 fc	 mov	 DWORD PTR __Glast$[ebp], esi

; 3729 : 
; 3730 : 	for (; ; )
; 3731 : 		{	// partition
; 3732 : 		for (; _Gfirst < _Last; ++_Gfirst)

  00090	eb 2d		 jmp	 SHORT $LN75@Unguarded_
$LL21@Unguarded_:

; 3733 : 			if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst))

  00092	53		 push	 ebx
  00093	56		 push	 esi
  00094	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00097	e8 00 00 00 00	 call	 ??RPetSlotSort@@QBE_NABUtagPetSlot@@0@Z ; PetSlotSort::operator()
  0009c	84 c0		 test	 al, al
  0009e	75 1c		 jne	 SHORT $LN20@Unguarded_

; 3734 : 				;
; 3735 : 			else if (_Pred(*_Gfirst, *_Pfirst))

  000a0	56		 push	 esi
  000a1	53		 push	 ebx
  000a2	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000a5	e8 00 00 00 00	 call	 ??RPetSlotSort@@QBE_NABUtagPetSlot@@0@Z ; PetSlotSort::operator()
  000aa	84 c0		 test	 al, al
  000ac	75 16		 jne	 SHORT $LN69@Unguarded_

; 3736 : 				break;
; 3737 : 			else
; 3738 : 				_STD iter_swap(_Plast++, _Gfirst);

  000ae	8b c7		 mov	 eax, edi
  000b0	53		 push	 ebx
  000b1	83 c7 38	 add	 edi, 56			; 00000038H
  000b4	50		 push	 eax
$LN76@Unguarded_:
  000b5	e8 00 00 00 00	 call	 ??$swap@UtagPetSlot@@@std@@YAXAAUtagPetSlot@@0@Z ; std::swap<tagPetSlot>
  000ba	59		 pop	 ecx
  000bb	59		 pop	 ecx
$LN20@Unguarded_:

; 3729 : 
; 3730 : 	for (; ; )
; 3731 : 		{	// partition
; 3732 : 		for (; _Gfirst < _Last; ++_Gfirst)

  000bc	83 c3 38	 add	 ebx, 56			; 00000038H
$LN75@Unguarded_:
  000bf	3b 5d 10	 cmp	 ebx, DWORD PTR __Last$[ebp]
  000c2	72 ce		 jb	 SHORT $LL21@Unguarded_
$LN69@Unguarded_:

; 3739 : 		for (; _First < _Glast; --_Glast)

  000c4	8b 45 fc	 mov	 eax, DWORD PTR __Glast$[ebp]
  000c7	39 45 0c	 cmp	 DWORD PTR __First$[ebp], eax
  000ca	73 44		 jae	 SHORT $LN71@Unguarded_
  000cc	83 c0 c8	 add	 eax, -56		; ffffffc8H
  000cf	89 45 f8	 mov	 DWORD PTR tv352[ebp], eax
$LL70@Unguarded_:

; 3740 : 			if (_DEBUG_LT_PRED(_Pred, *(_Glast - 1), *_Pfirst))

  000d2	56		 push	 esi
  000d3	ff 75 f8	 push	 DWORD PTR tv352[ebp]
  000d6	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000d9	e8 00 00 00 00	 call	 ??RPetSlotSort@@QBE_NABUtagPetSlot@@0@Z ; PetSlotSort::operator()
  000de	84 c0		 test	 al, al
  000e0	75 1e		 jne	 SHORT $LN13@Unguarded_

; 3741 : 				;
; 3742 : 			else if (_Pred(*_Pfirst, *(_Glast - 1)))

  000e2	ff 75 f8	 push	 DWORD PTR tv352[ebp]
  000e5	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000e8	56		 push	 esi
  000e9	e8 00 00 00 00	 call	 ??RPetSlotSort@@QBE_NABUtagPetSlot@@0@Z ; PetSlotSort::operator()
  000ee	84 c0		 test	 al, al
  000f0	75 1e		 jne	 SHORT $LN71@Unguarded_

; 3743 : 				break;
; 3744 : 			else
; 3745 : 				_STD iter_swap(--_Pfirst, _Glast - 1);

  000f2	ff 75 f8	 push	 DWORD PTR tv352[ebp]
  000f5	83 ee 38	 sub	 esi, 56			; 00000038H
  000f8	56		 push	 esi
  000f9	e8 00 00 00 00	 call	 ??$swap@UtagPetSlot@@@std@@YAXAAUtagPetSlot@@0@Z ; std::swap<tagPetSlot>
  000fe	59		 pop	 ecx
  000ff	59		 pop	 ecx
$LN13@Unguarded_:

; 3739 : 		for (; _First < _Glast; --_Glast)

  00100	83 6d fc 38	 sub	 DWORD PTR __Glast$[ebp], 56 ; 00000038H
  00104	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00107	83 6d f8 38	 sub	 DWORD PTR tv352[ebp], 56 ; 00000038H
  0010b	3b 45 fc	 cmp	 eax, DWORD PTR __Glast$[ebp]
  0010e	72 c2		 jb	 SHORT $LL70@Unguarded_
$LN71@Unguarded_:

; 3746 : 		if (_Glast == _First && _Gfirst == _Last)

  00110	8b 45 fc	 mov	 eax, DWORD PTR __Glast$[ebp]
  00113	3b 45 0c	 cmp	 eax, DWORD PTR __First$[ebp]
  00116	75 1f		 jne	 SHORT $LN6@Unguarded_
  00118	3b 5d 10	 cmp	 ebx, DWORD PTR __Last$[ebp]
  0011b	74 4d		 je	 SHORT $LN64@Unguarded_

; 3748 : 
; 3749 : 		if (_Glast == _First)
; 3750 : 			{	// no room at bottom, rotate pivot upward
; 3751 : 			if (_Plast != _Gfirst)

  0011d	3b fb		 cmp	 edi, ebx
  0011f	74 09		 je	 SHORT $LN46@Unguarded_

; 3752 : 				_STD iter_swap(_Pfirst, _Plast);

  00121	57		 push	 edi
  00122	56		 push	 esi
  00123	e8 00 00 00 00	 call	 ??$swap@UtagPetSlot@@@std@@YAXAAUtagPetSlot@@0@Z ; std::swap<tagPetSlot>
  00128	59		 pop	 ecx
  00129	59		 pop	 ecx
$LN46@Unguarded_:

; 3753 : 			++_Plast;
; 3754 : 			_STD iter_swap(_Pfirst++, _Gfirst++);

  0012a	53		 push	 ebx
  0012b	56		 push	 esi
  0012c	83 c7 38	 add	 edi, 56			; 00000038H
  0012f	83 c6 38	 add	 esi, 56			; 00000038H
  00132	83 c3 38	 add	 ebx, 56			; 00000038H
  00135	eb 20		 jmp	 SHORT $LN74@Unguarded_
$LN6@Unguarded_:

; 3755 : 			}
; 3756 : 		else if (_Gfirst == _Last)
; 3757 : 			{	// no room at top, rotate pivot downward
; 3758 : 			if (--_Glast != --_Pfirst)

  00137	83 e8 38	 sub	 eax, 56			; 00000038H
  0013a	89 45 fc	 mov	 DWORD PTR __Glast$[ebp], eax
  0013d	3b 5d 10	 cmp	 ebx, DWORD PTR __Last$[ebp]
  00140	75 21		 jne	 SHORT $LN3@Unguarded_
  00142	83 ee 38	 sub	 esi, 56			; 00000038H
  00145	3b c6		 cmp	 eax, esi
  00147	74 09		 je	 SHORT $LN50@Unguarded_

; 3759 : 				_STD iter_swap(_Glast, _Pfirst);

  00149	56		 push	 esi
  0014a	50		 push	 eax
  0014b	e8 00 00 00 00	 call	 ??$swap@UtagPetSlot@@@std@@YAXAAUtagPetSlot@@0@Z ; std::swap<tagPetSlot>
  00150	59		 pop	 ecx
  00151	59		 pop	 ecx
$LN50@Unguarded_:

; 3760 : 			_STD iter_swap(_Pfirst, --_Plast);

  00152	83 ef 38	 sub	 edi, 56			; 00000038H
  00155	57		 push	 edi
  00156	56		 push	 esi
$LN74@Unguarded_:
  00157	e8 00 00 00 00	 call	 ??$swap@UtagPetSlot@@@std@@YAXAAUtagPetSlot@@0@Z ; std::swap<tagPetSlot>
  0015c	59		 pop	 ecx
  0015d	59		 pop	 ecx

; 3761 : 			}
; 3762 : 		else

  0015e	e9 5c ff ff ff	 jmp	 $LN75@Unguarded_
$LN3@Unguarded_:

; 3763 : 			_STD iter_swap(_Gfirst++, --_Glast);

  00163	50		 push	 eax
  00164	53		 push	 ebx

; 3764 : 		}

  00165	e9 4b ff ff ff	 jmp	 $LN76@Unguarded_
$LN64@Unguarded_:

; 3747 : 			return (_STD pair<_RanIt, _RanIt>(_Pfirst, _Plast));

  0016a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0016d	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00170	5f		 pop	 edi
  00171	89 30		 mov	 DWORD PTR [eax], esi
  00173	5e		 pop	 esi
  00174	5b		 pop	 ebx

; 3765 : 	}

  00175	c9		 leave
  00176	c3		 ret	 0
??$_Unguarded_partition@PAUtagPetSlot@@VPetSlotSort@@@std@@YA?AU?$pair@PAUtagPetSlot@@PAU1@@0@PAUtagPetSlot@@0VPetSlotSort@@@Z ENDP ; std::_Unguarded_partition<tagPetSlot *,PetSlotSort>
_TEXT	ENDS
PUBLIC	??$make_heap@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@@Z ; std::make_heap<tagPetSlot *,PetSlotSort>
; Function compile flags: /Ogsp
;	COMDAT ??$make_heap@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$make_heap@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@@Z PROC ; std::make_heap<tagPetSlot *,PetSlotSort>, COMDAT

; 2672 : 	{	// make [_First, _Last) into a heap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2673 : 	_DEBUG_RANGE(_First, _Last);
; 2674 : 	_DEBUG_POINTER(_Pred);
; 2675 : 	if (1 < _Last - _First)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00009	6a 38		 push	 56			; 00000038H
  0000b	99		 cdq
  0000c	59		 pop	 ecx
  0000d	f7 f9		 idiv	 ecx
  0000f	83 f8 01	 cmp	 eax, 1
  00012	7e 15		 jle	 SHORT $LN1@make_heap

; 2676 : 		_Make_heap(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2677 : 			_Dist_type(_First), _Val_type(_First));

  00014	6a 00		 push	 0
  00016	6a 00		 push	 0
  00018	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  0001b	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0001e	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Make_heap@PAUtagPetSlot@@HU1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@PAH0@Z ; std::_Make_heap<tagPetSlot *,int,tagPetSlot,PetSlotSort>
  00026	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@make_heap:

; 2678 : 	}

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??$make_heap@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@@Z ENDP ; std::make_heap<tagPetSlot *,PetSlotSort>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@@Z ; std::_Pop_heap<tagPetSlot *,PetSlotSort>
; Function compile flags: /Ogsp
;	COMDAT ??$_Pop_heap@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Pop_heap@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@@Z PROC ; std::_Pop_heap<tagPetSlot *,PetSlotSort>, COMDAT

; 2610 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2611 : 	_Pop_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2612 : 		_Val_type(_First));

  00003	6a 00		 push	 0
  00005	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00008	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Pop_heap_0@PAUtagPetSlot@@U1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z ; std::_Pop_heap_0<tagPetSlot *,tagPetSlot,PetSlotSort>
  00013	83 c4 10	 add	 esp, 16			; 00000010H

; 2613 : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Pop_heap@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@@Z ENDP ; std::_Pop_heap<tagPetSlot *,PetSlotSort>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UtagPetSlot@@@std@@@std@@YAXPAUtagPetSlot@@0AAV?$allocator@UtagPetSlot@@@0@@Z ; std::_Destroy_range<std::allocator<tagPetSlot> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UtagPetSlot@@@std@@@std@@YAXPAUtagPetSlot@@0AAV?$allocator@UtagPetSlot@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UtagPetSlot@@@std@@@std@@YAXPAUtagPetSlot@@0AAV?$allocator@UtagPetSlot@@@0@@Z PROC ; std::_Destroy_range<std::allocator<tagPetSlot> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0a		 jmp	 SHORT $LN21@Destroy_ra@2
$LL7@Destroy_ra@2:
  00009	8b ce		 mov	 ecx, esi
  0000b	e8 00 00 00 00	 call	 ??1tagPetSlot@@QAE@XZ
  00010	83 c6 38	 add	 esi, 56			; 00000038H
$LN21@Destroy_ra@2:
  00013	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00016	75 f1		 jne	 SHORT $LL7@Destroy_ra@2
  00018	5e		 pop	 esi

; 89   : 	}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Destroy_range@V?$allocator@UtagPetSlot@@@std@@@std@@YAXPAUtagPetSlot@@0AAV?$allocator@UtagPetSlot@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<tagPetSlot> >
_TEXT	ENDS
PUBLIC	??$_Umove@PAUtagPetSlot@@@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IAEPAUtagPetSlot@@PAU2@00@Z ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Umove<tagPetSlot *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAUtagPetSlot@@@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IAEPAUtagPetSlot@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUtagPetSlot@@@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IAEPAUtagPetSlot@@PAU2@00@Z PROC ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Umove<tagPetSlot *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUtagPetSlot@@PAU1@V?$allocator@UtagPetSlot@@@std@@@std@@YAPAUtagPetSlot@@PAU1@00AAV?$allocator@UtagPetSlot@@@0@@Z ; std::_Uninitialized_move<tagPetSlot *,tagPetSlot *,std::allocator<tagPetSlot> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUtagPetSlot@@@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IAEPAUtagPetSlot@@PAU2@00@Z ENDP ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Umove<tagPetSlot *>
_TEXT	ENDS
PUBLIC	??$_Sort_heap@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@@Z ; std::_Sort_heap<tagPetSlot *,PetSlotSort>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Sort_heap@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Sort_heap@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@@Z PROC ; std::_Sort_heap<tagPetSlot *,PetSlotSort>, COMDAT

; 2700 : 	{	// order heap by repeatedly popping, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2701 : 	for (; 1 < _Last - _First; --_Last)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	2b 4d 08	 sub	 ecx, DWORD PTR __First$[ebp]
  00009	57		 push	 edi
  0000a	8b c1		 mov	 eax, ecx
  0000c	6a 38		 push	 56			; 00000038H
  0000e	99		 cdq
  0000f	5f		 pop	 edi
  00010	f7 ff		 idiv	 edi
  00012	83 f8 01	 cmp	 eax, 1
  00015	7e 29		 jle	 SHORT $LN1@Sort_heap
  00017	8b f9		 mov	 edi, ecx
$LL3@Sort_heap:

; 2702 : 		_Pop_heap(_First, _Last, _Pred);

  00019	6a 00		 push	 0
  0001b	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  0001e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00021	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00024	e8 00 00 00 00	 call	 ??$_Pop_heap_0@PAUtagPetSlot@@U1@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z ; std::_Pop_heap_0<tagPetSlot *,tagPetSlot,PetSlotSort>
  00029	83 c4 10	 add	 esp, 16			; 00000010H
  0002c	83 ef 38	 sub	 edi, 56			; 00000038H
  0002f	8b c7		 mov	 eax, edi
  00031	6a 38		 push	 56			; 00000038H
  00033	99		 cdq
  00034	59		 pop	 ecx
  00035	f7 f9		 idiv	 ecx
  00037	83 6d 0c 38	 sub	 DWORD PTR __Last$[ebp], 56 ; 00000038H
  0003b	83 f8 01	 cmp	 eax, 1
  0003e	7f d9		 jg	 SHORT $LL3@Sort_heap
$LN1@Sort_heap:
  00040	5f		 pop	 edi

; 2703 : 	}

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
??$_Sort_heap@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@@Z ENDP ; std::_Sort_heap<tagPetSlot *,PetSlotSort>
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IAEXPAUtagPetSlot@@0@Z ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IAEXPAUtagPetSlot@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IAEXPAUtagPetSlot@@0@Z PROC ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0a		 jmp	 SHORT $LN23@Destroy
$LL9@Destroy:
  00009	8b ce		 mov	 ecx, esi
  0000b	e8 00 00 00 00	 call	 ??1tagPetSlot@@QAE@XZ
  00010	83 c6 38	 add	 esi, 56			; 00000038H
$LN23@Destroy:
  00013	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00016	75 f1		 jne	 SHORT $LL9@Destroy
  00018	5e		 pop	 esi

; 1271 : 		}

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?_Destroy@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IAEXPAUtagPetSlot@@0@Z ENDP ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IAEXXZ ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IAEXXZ PROC ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 27		 je	 SHORT $LN24@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	53		 push	 ebx
  00009	57		 push	 edi
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  00010	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00013	8b 3e		 mov	 edi, DWORD PTR [esi]
  00015	eb 0a		 jmp	 SHORT $LN28@Tidy
$LL12@Tidy:
  00017	8b cf		 mov	 ecx, edi
  00019	e8 00 00 00 00	 call	 ??1tagPetSlot@@QAE@XZ
  0001e	83 c7 38	 add	 edi, 56			; 00000038H
$LN28@Tidy:
  00021	3b fb		 cmp	 edi, ebx
  00023	75 f2		 jne	 SHORT $LL12@Tidy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00025	ff 36		 push	 DWORD PTR [esi]
  00027	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002c	59		 pop	 ecx
  0002d	5f		 pop	 edi
  0002e	5b		 pop	 ebx
$LN24@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  0002f	33 c0		 xor	 eax, eax
  00031	89 06		 mov	 DWORD PTR [esi], eax

; 1310 : 		this->_Mylast = 0;

  00033	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1311 : 		this->_Myend = 0;

  00036	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00039	5e		 pop	 esi

; 1312 : 		}

  0003a	c3		 ret	 0
?_Tidy@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IAEXXZ ENDP ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXI@Z ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$505509 = -24					; size = 4
$T508108 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXI@Z PROC ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	81 7d 08 24 49
	92 04		 cmp	 DWORD PTR __Count$[ebp], 76695844 ; 04924924H
  00015	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN59@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00022	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00025	2b 06		 sub	 eax, DWORD PTR [esi]
  00027	6a 38		 push	 56			; 00000038H
  00029	99		 cdq
  0002a	59		 pop	 ecx
  0002b	f7 f9		 idiv	 ecx
  0002d	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00030	0f 83 80 00 00
	00		 jae	 $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00036	6a 00		 push	 0
  00038	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0003b	e8 00 00 00 00	 call	 ??$_Allocate@UtagPetSlot@@@std@@YAPAUtagPetSlot@@IPAU1@@Z ; std::_Allocate<tagPetSlot>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00040	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00042	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00046	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00049	52		 push	 edx
  0004a	89 45 e8	 mov	 DWORD PTR __Ptr$505509[ebp], eax
  0004d	ff 75 e8	 push	 DWORD PTR __Ptr$505509[ebp]
  00050	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00053	50		 push	 eax
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUtagPetSlot@@PAU1@V?$allocator@UtagPetSlot@@@std@@@std@@YAPAUtagPetSlot@@PAU1@00AAV?$allocator@UtagPetSlot@@@0@@Z ; std::_Uninitialized_move<tagPetSlot *,tagPetSlot *,std::allocator<tagPetSlot> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  0005a	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  0005d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005f	83 c4 18	 add	 esp, 24			; 00000018H
  00062	8b c3		 mov	 eax, ebx
  00064	2b c1		 sub	 eax, ecx
  00066	6a 38		 push	 56			; 00000038H
  00068	99		 cdq
  00069	5f		 pop	 edi
  0006a	f7 ff		 idiv	 edi
  0006c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00070	8b f8		 mov	 edi, eax
  00072	85 c9		 test	 ecx, ecx
  00074	74 20		 je	 SHORT $LN51@reserve

; 761  : 			if (this->_Myfirst != 0)
; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  00076	89 4d ec	 mov	 DWORD PTR $T508108[ebp], ecx
  00079	3b cb		 cmp	 ecx, ebx
  0007b	74 11		 je	 SHORT $LN37@reserve
$LN39@reserve:
  0007d	8b 4d ec	 mov	 ecx, DWORD PTR $T508108[ebp]
  00080	e8 00 00 00 00	 call	 ??1tagPetSlot@@QAE@XZ
  00085	83 45 ec 38	 add	 DWORD PTR $T508108[ebp], 56 ; 00000038H
  00089	39 5d ec	 cmp	 DWORD PTR $T508108[ebp], ebx
  0008c	75 ef		 jne	 SHORT $LN39@reserve
$LN37@reserve:

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  0008e	ff 36		 push	 DWORD PTR [esi]
  00090	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00095	59		 pop	 ecx
$LN51@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00096	8b ce		 mov	 ecx, esi
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;
; 770  : 			this->_Mylast = _Ptr + _Size;

  0009e	6b ff 38	 imul	 edi, 56			; 00000038H
  000a1	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  000a4	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$505509[ebp]
  000a7	6b c0 38	 imul	 eax, 56			; 00000038H
  000aa	03 c1		 add	 eax, ecx
  000ac	03 f9		 add	 edi, ecx
  000ae	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000b1	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  000b4	89 0e		 mov	 DWORD PTR [esi], ecx
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  000b6	e8 00 00 00 00	 call	 __EH_epilog3
  000bb	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000be	ff 75 e8	 push	 DWORD PTR __Ptr$505509[ebp]
  000c1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c6	59		 pop	 ecx

; 757  : 			_RERAISE;

  000c7	6a 00		 push	 0
  000c9	6a 00		 push	 0
  000cb	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN60@reserve:
$LN58@reserve:
  000d0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXI@Z ENDP ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::reserve
PUBLIC	??$sort_heap@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@@Z ; std::sort_heap<tagPetSlot *,PetSlotSort>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$sort_heap@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$sort_heap@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@@Z PROC ; std::sort_heap<tagPetSlot *,PetSlotSort>, COMDAT

; 2708 : 	{	// order heap by repeatedly popping, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2709 : 	_DEBUG_RANGE(_First, _Last);
; 2710 : 	_DEBUG_POINTER(_Pred);
; 2711 : 	_DEBUG_HEAP_PRED(_First, _Last, _Pred);
; 2712 : 	_Sort_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);

  00003	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00009	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000c	e8 00 00 00 00	 call	 ??$_Sort_heap@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@@Z ; std::_Sort_heap<tagPetSlot *,PetSlotSort>
  00011	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2713 : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$sort_heap@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@@Z ENDP ; std::sort_heap<tagPetSlot *,PetSlotSort>
_TEXT	ENDS
PUBLIC	??1?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE@XZ ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::~vector<tagPetSlot,std::allocator<tagPetSlot> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE@XZ PROC ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::~vector<tagPetSlot,std::allocator<tagPetSlot> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IAEXXZ ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Tidy
??1?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::~vector<tagPetSlot,std::allocator<tagPetSlot> >
_TEXT	ENDS
PUBLIC	?erase@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@@Z ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Cat$508199 = 12					; size = 1
__Where$ = 12						; size = 4
?erase@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@@Z PROC ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::erase, COMDAT
; _this$ = ecx

; 1179 : 		{	// erase element at where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1180 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1181 : 			_VIPTR(_Where));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	ff 75 0c	 push	 DWORD PTR __Cat$508199[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	50		 push	 eax
  0000f	ff 76 04	 push	 DWORD PTR [esi+4]
  00012	83 c0 38	 add	 eax, 56			; 00000038H
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??$_Move@PAUtagPetSlot@@PAU1@@std@@YAPAUtagPetSlot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<tagPetSlot *,tagPetSlot *>

; 1182 : 		_Destroy(this->_Mylast - 1, this->_Mylast);

  0001b	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0001e	83 c4 10	 add	 esp, 16			; 00000010H
  00021	8d 5f c8	 lea	 ebx, DWORD PTR [edi-56]
  00024	eb 0a		 jmp	 SHORT $LN37@erase
$LL15@erase:
  00026	8b cb		 mov	 ecx, ebx
  00028	e8 00 00 00 00	 call	 ??1tagPetSlot@@QAE@XZ
  0002d	83 c3 38	 add	 ebx, 56			; 00000038H
$LN37@erase:
  00030	3b df		 cmp	 ebx, edi
  00032	75 f2		 jne	 SHORT $LL15@erase

; 1183 : 		--this->_Mylast;

  00034	83 46 04 c8	 add	 DWORD PTR [esi+4], -56	; ffffffc8H

; 1184 : 		return (_Make_iter(_Where));

  00038	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	89 08		 mov	 DWORD PTR [eax], ecx
  00042	5b		 pop	 ebx

; 1185 : 		}

  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
?erase@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@@Z ENDP ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::erase
_TEXT	ENDS
PUBLIC	?erase@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@0@Z ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T508455 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$508399 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@0@Z PROC ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00004	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __First_arg$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 4d 10	 cmp	 ecx, DWORD PTR __Last_arg$[ebp]
  00012	74 37		 je	 SHORT $LN1@erase@2

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00017	53		 push	 ebx
  00018	57		 push	 edi
  00019	ff 75 10	 push	 DWORD PTR __Cat$508399[ebp]
  0001c	51		 push	 ecx
  0001d	50		 push	 eax
  0001e	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Move@PAUtagPetSlot@@PAU1@@std@@YAPAUtagPetSlot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<tagPetSlot *,tagPetSlot *>

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00026	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00029	8b d8		 mov	 ebx, eax
  0002b	83 c4 10	 add	 esp, 16			; 00000010H
  0002e	89 5d fc	 mov	 DWORD PTR $T508455[ebp], ebx
  00031	3b df		 cmp	 ebx, edi
  00033	74 11		 je	 SHORT $LN36@erase@2
$LL52@erase@2:
  00035	8b 4d fc	 mov	 ecx, DWORD PTR $T508455[ebp]
  00038	e8 00 00 00 00	 call	 ??1tagPetSlot@@QAE@XZ
  0003d	83 45 fc 38	 add	 DWORD PTR $T508455[ebp], 56 ; 00000038H
  00041	39 7d fc	 cmp	 DWORD PTR $T508455[ebp], edi
  00044	75 ef		 jne	 SHORT $LL52@erase@2
$LN36@erase@2:

; 1211 : 			this->_Mylast = _Ptr;

  00046	5f		 pop	 edi
  00047	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0004a	5b		 pop	 ebx
$LN1@erase@2:

; 1212 : 			}
; 1213 : 		return (_First);

  0004b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0004e	5e		 pop	 esi

; 1214 : 		}

  0004f	c9		 leave
  00050	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@0@Z ENDP ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::erase
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IAEXI@Z ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IAEXI@Z PROC ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 38		 push	 56			; 00000038H
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 24 49 92 04	 mov	 eax, 76695844		; 04924924H
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00030	2b c1		 sub	 eax, ecx
  00032	6a 38		 push	 56			; 00000038H
  00034	99		 cdq
  00035	59		 pop	 ecx
  00036	f7 f9		 idiv	 ecx
  00038	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003b	3b f8		 cmp	 edi, eax
  0003d	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003f	57		 push	 edi
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IBEII@Z ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Grow_to
  00047	50		 push	 eax
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?reserve@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXI@Z ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::reserve
$LN1@Reserve:
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 1298 : 		}

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IAEXI@Z ENDP ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Reserve
_TEXT	ENDS
PUBLIC	??$_Sort@PAUtagPetSlot@@HVPetSlotSort@@@std@@YAXPAUtagPetSlot@@0HVPetSlotSort@@@Z ; std::_Sort<tagPetSlot *,int,PetSlotSort>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Sort@PAUtagPetSlot@@HVPetSlotSort@@@std@@YAXPAUtagPetSlot@@0HVPetSlotSort@@@Z
_TEXT	SEGMENT
__Mid$506018 = -8					; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort@PAUtagPetSlot@@HVPetSlotSort@@@std@@YAXPAUtagPetSlot@@0HVPetSlotSort@@@Z PROC ; std::_Sort<tagPetSlot *,int,PetSlotSort>, COMDAT

; 3771 : 	{	// order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx

; 3772 : 	_Diff _Count;
; 3773 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

  00006	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00009	57		 push	 edi
  0000a	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000d	8b c7		 mov	 eax, edi
  0000f	2b c3		 sub	 eax, ebx
  00011	6a 38		 push	 56			; 00000038H
  00013	99		 cdq
  00014	59		 pop	 ecx
  00015	f7 f9		 idiv	 ecx
  00017	83 f8 20	 cmp	 eax, 32			; 00000020H
  0001a	0f 8e 9c 00 00
	00		 jle	 $LN22@Sort
  00020	56		 push	 esi
  00021	8b 75 10	 mov	 esi, DWORD PTR __Ideal$[ebp]
$LL7@Sort:
  00024	85 f6		 test	 esi, esi
  00026	7e 75		 jle	 SHORT $LN6@Sort

; 3774 : 		{	// divide and conquer by quicksort
; 3775 : 		_STD pair<_RanIt, _RanIt> _Mid =
; 3776 : 			_Unguarded_partition(_First, _Last, _Pred);

  00028	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0002b	8d 45 f8	 lea	 eax, DWORD PTR __Mid$506018[ebp]
  0002e	57		 push	 edi
  0002f	53		 push	 ebx
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$_Unguarded_partition@PAUtagPetSlot@@VPetSlotSort@@@std@@YA?AU?$pair@PAUtagPetSlot@@PAU1@@0@PAUtagPetSlot@@0VPetSlotSort@@@Z ; std::_Unguarded_partition<tagPetSlot *,PetSlotSort>

; 3777 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions

  00036	8b c6		 mov	 eax, esi
  00038	99		 cdq
  00039	2b c2		 sub	 eax, edx
  0003b	d1 f8		 sar	 eax, 1
  0003d	8b f0		 mov	 esi, eax
  0003f	99		 cdq
  00040	2b c2		 sub	 eax, edx
  00042	d1 f8		 sar	 eax, 1
  00044	03 f0		 add	 esi, eax
  00046	83 c4 10	 add	 esp, 16			; 00000010H

; 3778 : 
; 3779 : 		if (_Mid.first - _First < _Last - _Mid.second)

  00049	8b c7		 mov	 eax, edi
  0004b	2b 45 fc	 sub	 eax, DWORD PTR __Mid$506018[ebp+4]
  0004e	6a 38		 push	 56			; 00000038H
  00050	99		 cdq
  00051	59		 pop	 ecx
  00052	f7 f9		 idiv	 ecx
  00054	6a 38		 push	 56			; 00000038H
  00056	8b c8		 mov	 ecx, eax
  00058	8b 45 f8	 mov	 eax, DWORD PTR __Mid$506018[ebp]
  0005b	2b c3		 sub	 eax, ebx
  0005d	5b		 pop	 ebx
  0005e	99		 cdq
  0005f	f7 fb		 idiv	 ebx

; 3780 : 			{	// loop on second half
; 3781 : 			_Sort(_First, _Mid.first, _Ideal, _Pred);

  00061	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00064	56		 push	 esi
  00065	3b c1		 cmp	 eax, ecx
  00067	7d 13		 jge	 SHORT $LN5@Sort
  00069	ff 75 f8	 push	 DWORD PTR __Mid$506018[ebp]
  0006c	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0006f	e8 00 00 00 00	 call	 ??$_Sort@PAUtagPetSlot@@HVPetSlotSort@@@std@@YAXPAUtagPetSlot@@0HVPetSlotSort@@@Z ; std::_Sort<tagPetSlot *,int,PetSlotSort>

; 3782 : 			_First = _Mid.second;

  00074	8b 5d fc	 mov	 ebx, DWORD PTR __Mid$506018[ebp+4]
  00077	89 5d 08	 mov	 DWORD PTR __First$[ebp], ebx

; 3783 : 			}
; 3784 : 		else

  0007a	eb 0f		 jmp	 SHORT $LN23@Sort
$LN5@Sort:

; 3785 : 			{	// loop on first half
; 3786 : 			_Sort(_Mid.second, _Last, _Ideal, _Pred);

  0007c	57		 push	 edi
  0007d	ff 75 fc	 push	 DWORD PTR __Mid$506018[ebp+4]
  00080	e8 00 00 00 00	 call	 ??$_Sort@PAUtagPetSlot@@HVPetSlotSort@@@std@@YAXPAUtagPetSlot@@0HVPetSlotSort@@@Z ; std::_Sort<tagPetSlot *,int,PetSlotSort>

; 3787 : 			_Last = _Mid.first;

  00085	8b 7d f8	 mov	 edi, DWORD PTR __Mid$506018[ebp]
  00088	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
$LN23@Sort:

; 3772 : 	_Diff _Count;
; 3773 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

  0008b	83 c4 10	 add	 esp, 16			; 00000010H
  0008e	8b c7		 mov	 eax, edi
  00090	2b c3		 sub	 eax, ebx
  00092	6a 38		 push	 56			; 00000038H
  00094	99		 cdq
  00095	59		 pop	 ecx
  00096	f7 f9		 idiv	 ecx
  00098	83 f8 20	 cmp	 eax, 32			; 00000020H
  0009b	7f 87		 jg	 SHORT $LL7@Sort
$LN6@Sort:
  0009d	5e		 pop	 esi

; 3788 : 			}
; 3789 : 		}
; 3790 : 
; 3791 : 	if (_ISORT_MAX < _Count)

  0009e	83 f8 20	 cmp	 eax, 32			; 00000020H
  000a1	7e 19		 jle	 SHORT $LN22@Sort

; 3792 : 		{	// heap sort if too many divisions
; 3793 : 		_STD make_heap(_First, _Last, _Pred);

  000a3	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000a6	57		 push	 edi
  000a7	53		 push	 ebx
  000a8	e8 00 00 00 00	 call	 ??$make_heap@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@@Z ; std::make_heap<tagPetSlot *,PetSlotSort>

; 3794 : 		_STD sort_heap(_First, _Last, _Pred);

  000ad	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000b0	57		 push	 edi
  000b1	53		 push	 ebx
  000b2	e8 00 00 00 00	 call	 ??$_Sort_heap@PAUtagPetSlot@@VPetSlotSort@@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@@Z ; std::_Sort_heap<tagPetSlot *,PetSlotSort>
  000b7	83 c4 18	 add	 esp, 24			; 00000018H
  000ba	eb 14		 jmp	 SHORT $LN16@Sort
$LN22@Sort:

; 3795 : 		}
; 3796 : 	else if (1 < _Count)

  000bc	83 f8 01	 cmp	 eax, 1
  000bf	7e 0f		 jle	 SHORT $LN16@Sort

; 3797 : 		_Insertion_sort(_First, _Last, _Pred);	// small

  000c1	6a 00		 push	 0
  000c3	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000c6	57		 push	 edi
  000c7	53		 push	 ebx
  000c8	e8 00 00 00 00	 call	 ??$_Insertion_sort1@PAUtagPetSlot@@VPetSlotSort@@U1@@std@@YAXPAUtagPetSlot@@0VPetSlotSort@@0@Z ; std::_Insertion_sort1<tagPetSlot *,PetSlotSort,tagPetSlot>
  000cd	83 c4 10	 add	 esp, 16			; 00000010H
$LN16@Sort:
  000d0	5f		 pop	 edi
  000d1	5b		 pop	 ebx

; 3798 : 	}

  000d2	c9		 leave
  000d3	c3		 ret	 0
??$_Sort@PAUtagPetSlot@@HVPetSlotSort@@@std@@YAXPAUtagPetSlot@@0HVPetSlotSort@@@Z ENDP ; std::_Sort<tagPetSlot *,int,PetSlotSort>
_TEXT	ENDS
PUBLIC	?DeletePetSlotData@ioUserPet@@QAE_NH@Z		; ioUserPet::DeletePetSlotData
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iouserpet.cpp
;	COMDAT ?DeletePetSlotData@ioUserPet@@QAE_NH@Z
_TEXT	SEGMENT
$T508563 = 8						; size = 4
_nSlotIndex$ = 8					; size = 4
?DeletePetSlotData@ioUserPet@@QAE_NH@Z PROC		; ioUserPet::DeletePetSlotData, COMDAT
; _this$ = ecx

; 60   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 61   : 	PetSlotList::iterator iter = m_PetSlotList.begin();

  00005	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]

; 62   : 	while( iter != m_PetSlotList.end() )

  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	56		 push	 esi
  0000e	eb 0b		 jmp	 SHORT $LN41@DeletePetS
$LL4@DeletePetS:

; 63   : 	{
; 64   : 		if( iter->m_nIndex == nSlotIndex )

  00010	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00013	3b 75 08	 cmp	 esi, DWORD PTR _nSlotIndex$[ebp]
  00016	74 0e		 je	 SHORT $LN40@DeletePetS

; 68   : 		}
; 69   : 		else
; 70   : 			++iter;

  00018	83 c2 38	 add	 edx, 56			; 00000038H
$LN41@DeletePetS:

; 62   : 	while( iter != m_PetSlotList.end() )

  0001b	3b d0		 cmp	 edx, eax
  0001d	75 f1		 jne	 SHORT $LL4@DeletePetS

; 71   : 	}
; 72   : 
; 73   : 	return false;

  0001f	32 c0		 xor	 al, al
$LN5@DeletePetS:
  00021	5e		 pop	 esi

; 74   : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN40@DeletePetS:

; 65   : 		{
; 66   : 			iter = m_PetSlotList.erase( iter );

  00026	52		 push	 edx
  00027	8d 45 08	 lea	 eax, DWORD PTR $T508563[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?erase@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@@Z ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::erase

; 67   : 			return true;

  00030	b0 01		 mov	 al, 1
  00032	eb ed		 jmp	 SHORT $LN5@DeletePetS
?DeletePetSlotData@ioUserPet@@QAE_NH@Z ENDP		; ioUserPet::DeletePetSlotData
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXABUtagPetSlot@@@Z ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXABUtagPetSlot@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXABUtagPetSlot@@@Z PROC ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 37		 jae	 SHORT $LN4@push_back
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 31		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 38		 push	 56			; 00000038H
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IAEXI@Z ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00031	6b ff 38	 imul	 edi, 56			; 00000038H
  00034	03 3e		 add	 edi, DWORD PTR [esi]
  00036	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00039	57		 push	 edi
  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UtagPetSlot@@@std@@UtagPetSlot@@AAU3@@std@@YAXAAV?$allocator@UtagPetSlot@@@0@PAUtagPetSlot@@AAU2@@Z ; std::_Cons_val<std::allocator<tagPetSlot>,tagPetSlot,tagPetSlot &>
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00046	eb 19		 jmp	 SHORT $LN26@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00048	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0004b	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004d	6a 01		 push	 1
  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IAEXI@Z ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00056	57		 push	 edi
  00057	ff 76 04	 push	 DWORD PTR [esi+4]
  0005a	e8 00 00 00 00	 call	 ??$_Construct@UtagPetSlot@@ABU1@@std@@YAXPAUtagPetSlot@@ABU1@@Z ; std::_Construct<tagPetSlot,tagPetSlot const &>
  0005f	59		 pop	 ecx
  00060	59		 pop	 ecx
$LN26@push_back:

; 996  : 			++this->_Mylast;

  00061	83 46 04 38	 add	 DWORD PTR [esi+4], 56	; 00000038H
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
?push_back@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXABUtagPetSlot@@@Z ENDP ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::push_back
_TEXT	ENDS
PUBLIC	?clear@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXXZ ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T508698 = -4						; size = 4
?clear@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXXZ PROC ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T508698[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@0@Z ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXXZ ENDP ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::clear
_TEXT	ENDS
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@VPetSlotSort@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@0@0VPetSlotSort@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >,PetSlotSort>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@VPetSlotSort@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@0@0VPetSlotSort@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$sort@V?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@VPetSlotSort@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@0@0VPetSlotSort@@@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >,PetSlotSort>, COMDAT

; 3803 : 	{	// order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3804 : 	_DEBUG_RANGE(_First, _Last);
; 3805 : 	_DEBUG_POINTER(_Pred);
; 3806 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);

  00003	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0000c	6a 38		 push	 56			; 00000038H
  0000e	59		 pop	 ecx
  0000f	99		 cdq
  00010	f7 f9		 idiv	 ecx
  00012	50		 push	 eax
  00013	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00016	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00019	e8 00 00 00 00	 call	 ??$_Sort@PAUtagPetSlot@@HVPetSlotSort@@@std@@YAXPAUtagPetSlot@@0HVPetSlotSort@@@Z ; std::_Sort<tagPetSlot *,int,PetSlotSort>
  0001e	83 c4 10	 add	 esp, 16			; 00000010H

; 3807 : 	}

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??$sort@V?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@VPetSlotSort@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@0@0VPetSlotSort@@@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >,PetSlotSort>
_TEXT	ENDS
PUBLIC	??_7ioUserPet@@6B@				; ioUserPet::`vftable'
PUBLIC	??0ioUserPet@@QAE@XZ				; ioUserPet::ioUserPet
PUBLIC	??_R4ioUserPet@@6B@				; ioUserPet::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioUserPet@@@8				; ioUserPet `RTTI Type Descriptor'
PUBLIC	??_R3ioUserPet@@8				; ioUserPet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioUserPet@@8				; ioUserPet::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioUserPet@@8			; ioUserPet::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EioUserPet@@UAEPAXI@Z:PROC			; ioUserPet::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@ioUserPet@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
rdata$r	SEGMENT
??_R1A@?0A@EA@ioUserPet@@8 DD FLAT:??_R0?AVioUserPet@@@8 ; ioUserPet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioUserPet@@8
rdata$r	ENDS
;	COMDAT ??_R2ioUserPet@@8
rdata$r	SEGMENT
??_R2ioUserPet@@8 DD FLAT:??_R1A@?0A@EA@ioUserPet@@8	; ioUserPet::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioUserPet@@8
rdata$r	SEGMENT
??_R3ioUserPet@@8 DD 00H				; ioUserPet::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioUserPet@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioUserPet@@@8
_DATA	SEGMENT
??_R0?AVioUserPet@@@8 DD FLAT:??_7type_info@@6B@	; ioUserPet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioUserPet@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioUserPet@@6B@
rdata$r	SEGMENT
??_R4ioUserPet@@6B@ DD 00H				; ioUserPet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioUserPet@@@8
	DD	FLAT:??_R3ioUserPet@@8
rdata$r	ENDS
;	COMDAT ??_7ioUserPet@@6B@
CONST	SEGMENT
??_7ioUserPet@@6B@ DD FLAT:??_R4ioUserPet@@6B@		; ioUserPet::`vftable'
	DD	FLAT:??_EioUserPet@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioUserPet@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioUserPet@@QAE@XZ$0
__ehfuncinfo$??0ioUserPet@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioUserPet@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iouserpet.cpp
xdata$x	ENDS
;	COMDAT ??0ioUserPet@@QAE@XZ
_TEXT	SEGMENT
$T508874 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioUserPet@@QAE@XZ PROC				; ioUserPet::ioUserPet, COMDAT
; _this$ = ecx

; 7    : {

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioUserPet@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00014	33 c0		 xor	 eax, eax
  00016	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioUserPet@@6B@
  0001c	89 01		 mov	 DWORD PTR [ecx], eax
  0001e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00021	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 8    : 	m_PetSlotList.clear();

  00024	50		 push	 eax
  00025	50		 push	 eax
  00026	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00029	8d 45 ec	 lea	 eax, DWORD PTR $T508874[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?erase@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@0@Z ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::erase

; 9    : }

  00032	8b c6		 mov	 eax, esi
  00034	e8 00 00 00 00	 call	 __EH_epilog3
  00039	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioUserPet@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE@XZ ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::~vector<tagPetSlot,std::allocator<tagPetSlot> >
__ehhandler$??0ioUserPet@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioUserPet@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioUserPet@@QAE@XZ ENDP				; ioUserPet::ioUserPet
PUBLIC	??1ioUserPet@@UAE@XZ				; ioUserPet::~ioUserPet
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??1ioUserPet@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioUserPet@@UAE@XZ$0
__ehfuncinfo$??1ioUserPet@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ioUserPet@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iouserpet.cpp
xdata$x	ENDS
;	COMDAT ??1ioUserPet@@UAE@XZ
_TEXT	SEGMENT
$T508975 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioUserPet@@UAE@XZ PROC				; ioUserPet::~ioUserPet, COMDAT
; _this$ = ecx

; 12   : {

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioUserPet@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioUserPet@@6B@
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 13   : 	m_PetSlotList.clear();

  00019	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  0001c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00021	50		 push	 eax
  00022	51		 push	 ecx
  00023	8d 45 ec	 lea	 eax, DWORD PTR $T508975[ebp]
  00026	50		 push	 eax
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?erase@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@0@Z ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::erase

; 14   : }

  0002e	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@IAEXXZ ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::_Tidy
  00039	e8 00 00 00 00	 call	 __EH_epilog3
  0003e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioUserPet@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE@XZ ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::~vector<tagPetSlot,std::allocator<tagPetSlot> >
__ehhandler$??1ioUserPet@@UAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioUserPet@@UAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioUserPet@@UAE@XZ ENDP				; ioUserPet::~ioUserPet
PUBLIC	?ApplyPetSlotData@ioUserPet@@QAEXAAVSP2Packet@@@Z ; ioUserPet::ApplyPetSlotData
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	?GetPetIcon@ioPetInfoManager@@QAE?AVioHashString@@HW4PetRankType@@@Z:PROC ; ioPetInfoManager::GetPetIcon
EXTRN	?GetPetName@ioPetInfoManager@@QAE?AVioHashString@@HW4PetRankType@@@Z:PROC ; ioPetInfoManager::GetPetName
EXTRN	?GetSingleton@ioPetInfoManager@@SAAAV1@XZ:PROC	; ioPetInfoManager::GetSingleton
EXTRN	??5SP2Packet@@QAEAAV0@AA_N@Z:PROC		; SP2Packet::operator>>
EXTRN	??5SP2Packet@@QAEAAV0@AAH@Z:PROC		; SP2Packet::operator>>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$?ApplyPetSlotData@ioUserPet@@QAEXAAVSP2Packet@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ApplyPetSlotData@ioUserPet@@QAEXAAVSP2Packet@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ApplyPetSlotData@ioUserPet@@QAEXAAVSP2Packet@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?ApplyPetSlotData@ioUserPet@@QAEXAAVSP2Packet@@@Z$2
__ehfuncinfo$?ApplyPetSlotData@ioUserPet@@QAEXAAVSP2Packet@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?ApplyPetSlotData@ioUserPet@@QAEXAAVSP2Packet@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iouserpet.cpp
xdata$x	ENDS
;	COMDAT ?ApplyPetSlotData@ioUserPet@@QAEXAAVSP2Packet@@@Z
_TEXT	SEGMENT
_sPetSlot$505088 = -112					; size = 56
$T508998 = -56						; size = 16
$T508997 = -40						; size = 16
_this$ = -24						; size = 4
_nSize$ = -20						; size = 4
$T509066 = -16						; size = 4
_i$505084 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T508999 = 8						; size = 1
_rkPacket$ = 8						; size = 4
?ApplyPetSlotData@ioUserPet@@QAEXAAVSP2Packet@@@Z PROC	; ioUserPet::ApplyPetSlotData, COMDAT
; _this$ = ecx

; 19   : {

  00000	6a 64		 push	 100			; 00000064H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?ApplyPetSlotData@ioUserPet@@QAEXAAVSP2Packet@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d e8	 mov	 DWORD PTR _this$[ebp], edi

; 20   : 	m_PetSlotList.clear();

  00011	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  00014	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00017	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00019	50		 push	 eax
  0001a	51		 push	 ecx
  0001b	8d 45 f0	 lea	 eax, DWORD PTR $T509066[ebp]
  0001e	50		 push	 eax
  0001f	8b ce		 mov	 ecx, esi
  00021	e8 00 00 00 00	 call	 ?erase@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@2@0@Z ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::erase

; 21   : 
; 22   : 	int nSize;
; 23   : 	rkPacket >> nSize;

  00026	8b 4d 08	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  00029	8d 45 ec	 lea	 eax, DWORD PTR _nSize$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 24   : 
; 25   : 	for( int i=0; i < nSize; ++i )

  00032	83 65 f0 00	 and	 DWORD PTR _i$505084[ebp], 0
  00036	83 7d ec 00	 cmp	 DWORD PTR _nSize$[ebp], 0
  0003a	0f 8e f0 00 00
	00		 jle	 $LN3@ApplyPetSl
  00040	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  00046	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??1ioHashString@@QAE@XZ
$LL5@ApplyPetSl:

; 26   : 	{
; 27   : 		PetSlot sPetSlot;

  0004c	8d 4d 90	 lea	 ecx, DWORD PTR _sPetSlot$505088[ebp]
  0004f	e8 00 00 00 00	 call	 ??0tagPetSlot@@QAE@XZ	; tagPetSlot::tagPetSlot

; 28   : 
; 29   : 		rkPacket >> sPetSlot.m_nPetCode >> sPetSlot.m_PetRankType 
; 30   : 				 >> sPetSlot.m_nIndex >> sPetSlot.m_nCurLevel >> sPetSlot.m_CurExp >> sPetSlot.m_bEquip;

  00054	8b 4d 08	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  00057	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0005b	8d 45 a4	 lea	 eax, DWORD PTR _sPetSlot$505088[ebp+20]
  0005e	50		 push	 eax
  0005f	8d 45 a0	 lea	 eax, DWORD PTR _sPetSlot$505088[ebp+16]
  00062	50		 push	 eax
  00063	8d 45 9c	 lea	 eax, DWORD PTR _sPetSlot$505088[ebp+12]
  00066	50		 push	 eax
  00067	8d 45 98	 lea	 eax, DWORD PTR _sPetSlot$505088[ebp+8]
  0006a	50		 push	 eax
  0006b	8d 45 94	 lea	 eax, DWORD PTR _sPetSlot$505088[ebp+4]
  0006e	50		 push	 eax
  0006f	8d 45 90	 lea	 eax, DWORD PTR _sPetSlot$505088[ebp]
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>
  00078	8b c8		 mov	 ecx, eax
  0007a	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>
  0007f	8b c8		 mov	 ecx, eax
  00081	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>
  00086	8b c8		 mov	 ecx, eax
  00088	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>
  0008d	8b c8		 mov	 ecx, eax
  0008f	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>
  00094	8b c8		 mov	 ecx, eax
  00096	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AA_N@Z ; SP2Packet::operator>>

; 31   : 		
; 32   : 		sPetSlot.m_Name = g_PetInfoMgr.GetPetName( sPetSlot.m_nPetCode, (PetRankType)sPetSlot.m_PetRankType );

  0009b	ff 75 94	 push	 DWORD PTR _sPetSlot$505088[ebp+4]
  0009e	8d 45 d8	 lea	 eax, DWORD PTR $T508997[ebp]
  000a1	ff 75 90	 push	 DWORD PTR _sPetSlot$505088[ebp]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ?GetSingleton@ioPetInfoManager@@SAAAV1@XZ ; ioPetInfoManager::GetSingleton
  000aa	8b c8		 mov	 ecx, eax
  000ac	e8 00 00 00 00	 call	 ?GetPetName@ioPetInfoManager@@QAE?AVioHashString@@HW4PetRankType@@@Z ; ioPetInfoManager::GetPetName
  000b1	50		 push	 eax
  000b2	8d 4d a8	 lea	 ecx, DWORD PTR _sPetSlot$505088[ebp+24]
  000b5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000b9	ff d7		 call	 edi
  000bb	8d 4d d8	 lea	 ecx, DWORD PTR $T508997[ebp]
  000be	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000c2	ff d3		 call	 ebx

; 33   : 		sPetSlot.m_IconName = g_PetInfoMgr.GetPetIcon( sPetSlot.m_nPetCode, (PetRankType)sPetSlot.m_PetRankType );

  000c4	ff 75 94	 push	 DWORD PTR _sPetSlot$505088[ebp+4]
  000c7	8d 45 c8	 lea	 eax, DWORD PTR $T508998[ebp]
  000ca	ff 75 90	 push	 DWORD PTR _sPetSlot$505088[ebp]
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ?GetSingleton@ioPetInfoManager@@SAAAV1@XZ ; ioPetInfoManager::GetSingleton
  000d3	8b c8		 mov	 ecx, eax
  000d5	e8 00 00 00 00	 call	 ?GetPetIcon@ioPetInfoManager@@QAE?AVioHashString@@HW4PetRankType@@@Z ; ioPetInfoManager::GetPetIcon
  000da	50		 push	 eax
  000db	8d 4d b8	 lea	 ecx, DWORD PTR _sPetSlot$505088[ebp+40]
  000de	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000e2	ff d7		 call	 edi
  000e4	8d 4d c8	 lea	 ecx, DWORD PTR $T508998[ebp]
  000e7	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000eb	ff d3		 call	 ebx

; 34   : 		
; 35   : 		if ( sPetSlot.m_Name.IsEmpty() || sPetSlot.m_IconName.IsEmpty() )

  000ed	8d 4d a8	 lea	 ecx, DWORD PTR _sPetSlot$505088[ebp+24]
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  000f6	84 c0		 test	 al, al
  000f8	75 18		 jne	 SHORT $LN1@ApplyPetSl
  000fa	8d 4d b8	 lea	 ecx, DWORD PTR _sPetSlot$505088[ebp+40]
  000fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00103	84 c0		 test	 al, al
  00105	75 0b		 jne	 SHORT $LN1@ApplyPetSl

; 37   : 
; 38   : 		m_PetSlotList.push_back( sPetSlot );

  00107	8d 45 90	 lea	 eax, DWORD PTR _sPetSlot$505088[ebp]
  0010a	50		 push	 eax
  0010b	8b ce		 mov	 ecx, esi
  0010d	e8 00 00 00 00	 call	 ?push_back@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXABUtagPetSlot@@@Z ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::push_back
$LN1@ApplyPetSl:

; 36   : 			continue;

  00112	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00116	8d 4d 90	 lea	 ecx, DWORD PTR _sPetSlot$505088[ebp]
  00119	e8 00 00 00 00	 call	 ??1tagPetSlot@@QAE@XZ
  0011e	ff 45 f0	 inc	 DWORD PTR _i$505084[ebp]
  00121	8b 45 f0	 mov	 eax, DWORD PTR _i$505084[ebp]
  00124	3b 45 ec	 cmp	 eax, DWORD PTR _nSize$[ebp]
  00127	0f 8c 1f ff ff
	ff		 jl	 $LL5@ApplyPetSl

; 24   : 
; 25   : 	for( int i=0; i < nSize; ++i )

  0012d	8b 7d e8	 mov	 edi, DWORD PTR _this$[ebp]
$LN3@ApplyPetSl:

; 39   : 	}
; 40   : 
; 41   : 	std::sort( m_PetSlotList.begin(), m_PetSlotList.end(), PetSlotSort() );

  00130	ff 75 08	 push	 DWORD PTR $T508999[ebp]
  00133	8b 7f 08	 mov	 edi, DWORD PTR [edi+8]
  00136	8b 36		 mov	 esi, DWORD PTR [esi]
  00138	57		 push	 edi
  00139	56		 push	 esi
  0013a	e8 00 00 00 00	 call	 ??$sort@V?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@VPetSlotSort@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@0@0VPetSlotSort@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >,PetSlotSort>
  0013f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 42   : }

  00142	e8 00 00 00 00	 call	 __EH_epilog3
  00147	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ApplyPetSlotData@ioUserPet@@QAEXAAVSP2Packet@@@Z$0:
  00000	8d 4d 90	 lea	 ecx, DWORD PTR _sPetSlot$505088[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1tagPetSlot@@QAE@XZ
__unwindfunclet$?ApplyPetSlotData@ioUserPet@@QAEXAAVSP2Packet@@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T508997[ebp]
  0000b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?ApplyPetSlotData@ioUserPet@@QAEXAAVSP2Packet@@@Z$2:
  00011	8d 4d c8	 lea	 ecx, DWORD PTR $T508998[ebp]
  00014	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?ApplyPetSlotData@ioUserPet@@QAEXAAVSP2Packet@@@Z:
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ApplyPetSlotData@ioUserPet@@QAEXAAVSP2Packet@@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ApplyPetSlotData@ioUserPet@@QAEXAAVSP2Packet@@@Z ENDP	; ioUserPet::ApplyPetSlotData
PUBLIC	?AddPetSlotData@ioUserPet@@QAEXABUtagPetSlot@@@Z ; ioUserPet::AddPetSlotData
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$?AddPetSlotData@ioUserPet@@QAEXABUtagPetSlot@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddPetSlotData@ioUserPet@@QAEXABUtagPetSlot@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?AddPetSlotData@ioUserPet@@QAEXABUtagPetSlot@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?AddPetSlotData@ioUserPet@@QAEXABUtagPetSlot@@@Z$2
__ehfuncinfo$?AddPetSlotData@ioUserPet@@QAEXABUtagPetSlot@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?AddPetSlotData@ioUserPet@@QAEXABUtagPetSlot@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iouserpet.cpp
xdata$x	ENDS
;	COMDAT ?AddPetSlotData@ioUserPet@@QAEXABUtagPetSlot@@@Z
_TEXT	SEGMENT
_sPetSlot$ = -88					; size = 56
$T509146 = -32						; size = 16
$T509145 = -32						; size = 16
tv160 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_sNewSlot$ = 8						; size = 4
?AddPetSlotData@ioUserPet@@QAEXABUtagPetSlot@@@Z PROC	; ioUserPet::AddPetSlotData, COMDAT
; _this$ = ecx

; 47   : {	

  00000	6a 4c		 push	 76			; 0000004cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?AddPetSlotData@ioUserPet@@QAEXABUtagPetSlot@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 48   : 	if ( IsSlotFull() )

  0000c	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000f	83 c1 04	 add	 ecx, 4
  00012	2b 01		 sub	 eax, DWORD PTR [ecx]
  00014	6a 38		 push	 56			; 00000038H
  00016	89 4d f0	 mov	 DWORD PTR tv160[ebp], ecx
  00019	99		 cdq
  0001a	59		 pop	 ecx
  0001b	f7 f9		 idiv	 ecx
  0001d	83 f8 14	 cmp	 eax, 20			; 00000014H
  00020	0f 8d 84 00 00
	00		 jge	 $LN2@AddPetSlot

; 49   : 		return;
; 50   : 
; 51   : 	PetSlot sPetSlot = sNewSlot;

  00026	8b 75 08	 mov	 esi, DWORD PTR _sNewSlot$[ebp]
  00029	56		 push	 esi
  0002a	8d 4d a8	 lea	 ecx, DWORD PTR _sPetSlot$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0tagPetSlot@@QAE@ABU0@@Z

; 52   : 	sPetSlot.m_Name = g_PetInfoMgr.GetPetName( sNewSlot.m_nPetCode, (PetRankType)sNewSlot.m_PetRankType );

  00032	ff 76 04	 push	 DWORD PTR [esi+4]
  00035	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00039	ff 36		 push	 DWORD PTR [esi]
  0003b	8d 45 e0	 lea	 eax, DWORD PTR $T509145[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?GetSingleton@ioPetInfoManager@@SAAAV1@XZ ; ioPetInfoManager::GetSingleton
  00044	8b c8		 mov	 ecx, eax
  00046	e8 00 00 00 00	 call	 ?GetPetName@ioPetInfoManager@@QAE?AVioHashString@@HW4PetRankType@@@Z ; ioPetInfoManager::GetPetName
  0004b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  00051	50		 push	 eax
  00052	8d 4d c0	 lea	 ecx, DWORD PTR _sPetSlot$[ebp+24]
  00055	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00059	ff d7		 call	 edi
  0005b	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00061	8d 4d e0	 lea	 ecx, DWORD PTR $T509145[ebp]
  00064	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00068	ff d3		 call	 ebx

; 53   : 	sPetSlot.m_IconName = g_PetInfoMgr.GetPetIcon( sNewSlot.m_nPetCode, (PetRankType)sNewSlot.m_PetRankType );

  0006a	ff 76 04	 push	 DWORD PTR [esi+4]
  0006d	8d 45 e0	 lea	 eax, DWORD PTR $T509146[ebp]
  00070	ff 36		 push	 DWORD PTR [esi]
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ?GetSingleton@ioPetInfoManager@@SAAAV1@XZ ; ioPetInfoManager::GetSingleton
  00078	8b c8		 mov	 ecx, eax
  0007a	e8 00 00 00 00	 call	 ?GetPetIcon@ioPetInfoManager@@QAE?AVioHashString@@HW4PetRankType@@@Z ; ioPetInfoManager::GetPetIcon
  0007f	50		 push	 eax
  00080	8d 4d d0	 lea	 ecx, DWORD PTR _sPetSlot$[ebp+40]
  00083	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00087	ff d7		 call	 edi
  00089	8d 4d e0	 lea	 ecx, DWORD PTR $T509146[ebp]
  0008c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00090	ff d3		 call	 ebx

; 54   : 
; 55   : 	m_PetSlotList.push_back( sPetSlot );

  00092	8b 4d f0	 mov	 ecx, DWORD PTR tv160[ebp]
  00095	8d 45 a8	 lea	 eax, DWORD PTR _sPetSlot$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?push_back@?$vector@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@QAEXABUtagPetSlot@@@Z ; std::vector<tagPetSlot,std::allocator<tagPetSlot> >::push_back

; 56   : }

  0009e	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000a2	8d 4d a8	 lea	 ecx, DWORD PTR _sPetSlot$[ebp]
  000a5	e8 00 00 00 00	 call	 ??1tagPetSlot@@QAE@XZ
$LN2@AddPetSlot:
  000aa	e8 00 00 00 00	 call	 __EH_epilog3
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddPetSlotData@ioUserPet@@QAEXABUtagPetSlot@@@Z$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR _sPetSlot$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1tagPetSlot@@QAE@XZ
__unwindfunclet$?AddPetSlotData@ioUserPet@@QAEXABUtagPetSlot@@@Z$1:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR $T509145[ebp]
  0000b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?AddPetSlotData@ioUserPet@@QAEXABUtagPetSlot@@@Z$2:
  00011	8d 4d e0	 lea	 ecx, DWORD PTR $T509146[ebp]
  00014	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?AddPetSlotData@ioUserPet@@QAEXABUtagPetSlot@@@Z:
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddPetSlotData@ioUserPet@@QAEXABUtagPetSlot@@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddPetSlotData@ioUserPet@@QAEXABUtagPetSlot@@@Z ENDP	; ioUserPet::AddPetSlotData
PUBLIC	?SlotSort@ioUserPet@@QAE_NXZ			; ioUserPet::SlotSort
; Function compile flags: /Ogsp
;	COMDAT ?SlotSort@ioUserPet@@QAE_NXZ
_TEXT	SEGMENT
$T509176 = -4						; size = 1
?SlotSort@ioUserPet@@QAE_NXZ PROC			; ioUserPet::SlotSort, COMDAT
; _this$ = ecx

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 183  : 	if ( m_PetSlotList.empty() )

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0000a	75 04		 jne	 SHORT $LN1@SlotSort

; 184  : 		return false;

  0000c	32 c0		 xor	 al, al

; 189  : }

  0000e	c9		 leave
  0000f	c3		 ret	 0
$LN1@SlotSort:

; 185  : 
; 186  : 	std::sort( m_PetSlotList.begin(), m_PetSlotList.end(), PetSlotSort() );

  00010	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00013	ff 75 fc	 push	 DWORD PTR $T509176[ebp]
  00016	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00019	50		 push	 eax
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??$sort@V?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@std@@VPetSlotSort@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UtagPetSlot@@V?$allocator@UtagPetSlot@@@std@@@std@@@0@0VPetSlotSort@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<tagPetSlot,std::allocator<tagPetSlot> > >,PetSlotSort>
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 187  : 
; 188  : 	return true;

  00023	b0 01		 mov	 al, 1

; 189  : }

  00025	c9		 leave
  00026	c3		 ret	 0
?SlotSort@ioUserPet@@QAE_NXZ ENDP			; ioUserPet::SlotSort
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioUserPet@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioUserPet@@UAEPAXI@Z PROC				; ioUserPet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioUserPet@@UAE@XZ	; ioUserPet::~ioUserPet
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@3
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@3:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioUserPet@@UAEPAXI@Z ENDP				; ioUserPet::`scalar deleting destructor'
_TEXT	ENDS
END
