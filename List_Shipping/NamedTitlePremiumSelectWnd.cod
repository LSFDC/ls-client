; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\GUI\NamedTitlePremiumSelectWnd.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_7PullDownEventListener@@6B@			; PullDownEventListener::`vftable'
PUBLIC	??0PullDownEventListener@@QAE@XZ		; PullDownEventListener::PullDownEventListener
PUBLIC	??_R4PullDownEventListener@@6B@			; PullDownEventListener::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPullDownEventListener@@@8		; PullDownEventListener `RTTI Type Descriptor'
PUBLIC	??_R3PullDownEventListener@@8			; PullDownEventListener::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PullDownEventListener@@8			; PullDownEventListener::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PullDownEventListener@@8		; PullDownEventListener::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__purecall:PROC
;	COMDAT ??_R1A@?0A@EA@PullDownEventListener@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PullDownEventListener@@8 DD FLAT:??_R0?AVPullDownEventListener@@@8 ; PullDownEventListener::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PullDownEventListener@@8
rdata$r	ENDS
;	COMDAT ??_R2PullDownEventListener@@8
rdata$r	SEGMENT
??_R2PullDownEventListener@@8 DD FLAT:??_R1A@?0A@EA@PullDownEventListener@@8 ; PullDownEventListener::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3PullDownEventListener@@8
rdata$r	SEGMENT
??_R3PullDownEventListener@@8 DD 00H			; PullDownEventListener::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2PullDownEventListener@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPullDownEventListener@@@8
_DATA	SEGMENT
??_R0?AVPullDownEventListener@@@8 DD FLAT:??_7type_info@@6B@ ; PullDownEventListener `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPullDownEventListener@@', 00H
_DATA	ENDS
;	COMDAT ??_R4PullDownEventListener@@6B@
rdata$r	SEGMENT
??_R4PullDownEventListener@@6B@ DD 00H			; PullDownEventListener::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPullDownEventListener@@@8
	DD	FLAT:??_R3PullDownEventListener@@8
rdata$r	ENDS
;	COMDAT ??_7PullDownEventListener@@6B@
CONST	SEGMENT
??_7PullDownEventListener@@6B@ DD FLAT:??_R4PullDownEventListener@@6B@ ; PullDownEventListener::`vftable'
	DD	FLAT:__purecall
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0PullDownEventListener@@QAE@XZ
_TEXT	SEGMENT
??0PullDownEventListener@@QAE@XZ PROC			; PullDownEventListener::PullDownEventListener, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7PullDownEventListener@@6B@
  00008	c3		 ret	 0
??0PullDownEventListener@@QAE@XZ ENDP			; PullDownEventListener::PullDownEventListener
_TEXT	ENDS
PUBLIC	??_7NamedTitlePremiumSelectWnd@@6BPullDownEventListener@@@ ; NamedTitlePremiumSelectWnd::`vftable'
PUBLIC	??_7NamedTitlePremiumSelectWnd@@6BioWnd@@@	; NamedTitlePremiumSelectWnd::`vftable'
PUBLIC	??1NamedTitlePremiumSelectWnd@@UAE@XZ		; NamedTitlePremiumSelectWnd::~NamedTitlePremiumSelectWnd
PUBLIC	??_R4NamedTitlePremiumSelectWnd@@6BioWnd@@@	; NamedTitlePremiumSelectWnd::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVNamedTitlePremiumSelectWnd@@@8		; NamedTitlePremiumSelectWnd `RTTI Type Descriptor'
PUBLIC	??_R3NamedTitlePremiumSelectWnd@@8		; NamedTitlePremiumSelectWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NamedTitlePremiumSelectWnd@@8		; NamedTitlePremiumSelectWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NamedTitlePremiumSelectWnd@@8	; NamedTitlePremiumSelectWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioWnd@@8				; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioWnd@@@8				; ioWnd `RTTI Type Descriptor'
PUBLIC	??_R3ioWnd@@8					; ioWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWnd@@8					; ioWnd::`RTTI Base Class Array'
PUBLIC	??_R1BGA@?0A@EA@PullDownEventListener@@8	; PullDownEventListener::`RTTI Base Class Descriptor at (352,-1,0,64)'
PUBLIC	?AddRenderImage@NamedTitlePremiumSelectWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z ; NamedTitlePremiumSelectWnd::AddRenderImage
PUBLIC	?OnRender@NamedTitlePremiumSelectWnd@@MAEXXZ	; NamedTitlePremiumSelectWnd::OnRender
PUBLIC	?iwm_command@NamedTitlePremiumSelectWnd@@UAEXPAVioWnd@@HK@Z ; NamedTitlePremiumSelectWnd::iwm_command
PUBLIC	?iwm_show@NamedTitlePremiumSelectWnd@@UAEXXZ	; NamedTitlePremiumSelectWnd::iwm_show
PUBLIC	?iwm_hide@NamedTitlePremiumSelectWnd@@UAEXXZ	; NamedTitlePremiumSelectWnd::iwm_hide
PUBLIC	??_R4NamedTitlePremiumSelectWnd@@6BPullDownEventListener@@@ ; NamedTitlePremiumSelectWnd::`RTTI Complete Object Locator'
PUBLIC	?iwm_pulldown_event@NamedTitlePremiumSelectWnd@@UAEXABVPullDownEvent@@@Z ; NamedTitlePremiumSelectWnd::iwm_pulldown_event
EXTRN	__imp_??1ioWnd@@UAE@XZ:PROC
EXTRN	??1ioComplexStringPrinter@@QAE@XZ:PROC		; ioComplexStringPrinter::~ioComplexStringPrinter
EXTRN	?ClearList@ioComplexStringPrinter@@QAEXXZ:PROC	; ioComplexStringPrinter::ClearList
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z:PROC ; ioWnd::AddRenderFrame
EXTRN	?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z:PROC ; ioWnd::AddTooltipHelp
EXTRN	?ParseExtraInfo@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::ParseExtraInfo
EXTRN	?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC ; ioWnd::AddNamedRenderImage
EXTRN	?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z:PROC ; ioWnd::RemoveNamedRenderImage
EXTRN	?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z:PROC ; ioWnd::GetNamedRenderImage
EXTRN	?SetWindowAlpha@ioWnd@@UAEXH@Z:PROC		; ioWnd::SetWindowAlpha
EXTRN	?SetActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetActive
EXTRN	?SetInActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetInActive
EXTRN	?ClearElementImageList@ioWnd@@UAEXXZ:PROC	; ioWnd::ClearElementImageList
EXTRN	?SetSize@ioWnd@@UAEXHH@Z:PROC			; ioWnd::SetSize
EXTRN	?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z:PROC	; ioWnd::SetPositionToDefault
EXTRN	?IsNeedProcess@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsNeedProcess
EXTRN	?IsCanMouseReaction@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsCanMouseReaction
EXTRN	?AddChild@ioWnd@@UAEXPAV1@@Z:PROC		; ioWnd::AddChild
EXTRN	?DeleteChild@ioWnd@@UAEXK@Z:PROC		; ioWnd::DeleteChild
EXTRN	?DeleteAllChild@ioWnd@@UAEXXZ:PROC		; ioWnd::DeleteAllChild
EXTRN	?OnRenderShowAndHide@ioWnd@@MAE_NXZ:PROC	; ioWnd::OnRenderShowAndHide
EXTRN	?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z:PROC ; ioWnd::OnRenderShowAndHideByDefault
EXTRN	?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByTop
EXTRN	?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByDown
EXTRN	?OnRenderAfterChild@ioWnd@@MAEXXZ:PROC		; ioWnd::OnRenderAfterChild
EXTRN	?OnProcess@ioWnd@@MAEXM@Z:PROC			; ioWnd::OnProcess
EXTRN	?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z:PROC	; ioWnd::OnMouseProcess
EXTRN	?CheckFrameReSize@ioWnd@@MAEXHHHH@Z:PROC	; ioWnd::CheckFrameReSize
EXTRN	?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z:PROC ; ioWnd::RenderImageList
EXTRN	?iwm_create@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_create
EXTRN	?iwm_destroy@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_destroy
EXTRN	?iwm_lbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_lbuttondown
EXTRN	?iwm_lbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_lbuttonup
EXTRN	?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z:PROC ; ioWnd::iwm_lbuttonDBLCLK
EXTRN	?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttondown
EXTRN	?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttonup
EXTRN	?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseover
EXTRN	?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mousemove
EXTRN	?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseleave
EXTRN	?iwm_vscroll@ioWnd@@UAEXKH@Z:PROC		; ioWnd::iwm_vscroll
EXTRN	?iwm_wheel@ioWnd@@UAEXH@Z:PROC			; ioWnd::iwm_wheel
EXTRN	?iwm_esc@ioWnd@@UAE_NXZ:PROC			; ioWnd::iwm_esc
EXTRN	?iwm_spacebar@ioWnd@@UAE_NXZ:PROC		; ioWnd::iwm_spacebar
EXTRN	?iwm_gototop@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_gototop
EXTRN	?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragenter
EXTRN	?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragover
EXTRN	?iwm_dragleave@ioWnd@@UAEXXZ:PROC		; ioWnd::iwm_dragleave
EXTRN	?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z:PROC ; ioWnd::iwm_dropitem
EXTRN	?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z:PROC ; ioWnd::iwm_dropdone
EXTRN	?IsEXType@ioWnd@@UBE_NXZ:PROC			; ioWnd::IsEXType
EXTRN	?GetWndType@ioWnd@@UBEKXZ:PROC			; ioWnd::GetWndType
EXTRN	?RenderWnd@ioWnd@@UAEXXZ:PROC			; ioWnd::RenderWnd
EXTRN	?SetIDEX@ioWnd@@UAEXAAK_N@Z:PROC		; ioWnd::SetIDEX
EXTRN	?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC	; ioWnd::ParseXML
EXTRN	?GetHeaderFileName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetHeaderFileName
EXTRN	?GetTemplateName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetTemplateName
EXTRN	?GetDefClassName@ioWnd@@UBEPBDXZ:PROC		; ioWnd::GetDefClassName
EXTRN	?_Clone@ioWnd@@UAEPAV1@XZ:PROC			; ioWnd::_Clone
EXTRN	?Copy@ioWnd@@UAEXPAV1@@Z:PROC			; ioWnd::Copy
EXTRN	?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z:PROC	; ioWnd::Save
EXTRN	?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::SetSaveData
EXTRN	?SetPosX@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosX
EXTRN	?SetPosY@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosY
EXTRN	?SetWidth@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetWidth
EXTRN	?SetHeight@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetHeight
EXTRN	?GetNumFixedRenderFrame@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderFrame
EXTRN	?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderFrameType
EXTRN	?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderFrame
EXTRN	?GetNumFixedRenderImage@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderImage
EXTRN	?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderImageType
EXTRN	?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderImage
EXTRN	?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z:PROC ; ioWnd::AddEffect
EXTRN	?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z:PROC ; ioWnd::GetEffect
EXTRN	??_ENamedTitlePremiumSelectWnd@@UAEPAXI@Z:PROC	; NamedTitlePremiumSelectWnd::`vector deleting destructor'
;	COMDAT ??_R4NamedTitlePremiumSelectWnd@@6BPullDownEventListener@@@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\namedtitlepremiumselectwnd.cpp
rdata$r	SEGMENT
??_R4NamedTitlePremiumSelectWnd@@6BPullDownEventListener@@@ DD 00H ; NamedTitlePremiumSelectWnd::`RTTI Complete Object Locator'
	DD	0160H
	DD	00H
	DD	FLAT:??_R0?AVNamedTitlePremiumSelectWnd@@@8
	DD	FLAT:??_R3NamedTitlePremiumSelectWnd@@8
rdata$r	ENDS
;	COMDAT ??_R1BGA@?0A@EA@PullDownEventListener@@8
rdata$r	SEGMENT
??_R1BGA@?0A@EA@PullDownEventListener@@8 DD FLAT:??_R0?AVPullDownEventListener@@@8 ; PullDownEventListener::`RTTI Base Class Descriptor at (352,-1,0,64)'
	DD	00H
	DD	0160H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PullDownEventListener@@8
rdata$r	ENDS
;	COMDAT ??_R2ioWnd@@8
rdata$r	SEGMENT
??_R2ioWnd@@8 DD FLAT:??_R1A@?0A@EA@ioWnd@@8		; ioWnd::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWnd@@8
rdata$r	SEGMENT
??_R3ioWnd@@8 DD 00H					; ioWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWnd@@@8
_DATA	SEGMENT
??_R0?AVioWnd@@@8 DD FLAT:??_7type_info@@6B@		; ioWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWnd@@8 DD FLAT:??_R0?AVioWnd@@@8	; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@NamedTitlePremiumSelectWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@NamedTitlePremiumSelectWnd@@8 DD FLAT:??_R0?AVNamedTitlePremiumSelectWnd@@@8 ; NamedTitlePremiumSelectWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NamedTitlePremiumSelectWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2NamedTitlePremiumSelectWnd@@8
rdata$r	SEGMENT
??_R2NamedTitlePremiumSelectWnd@@8 DD FLAT:??_R1A@?0A@EA@NamedTitlePremiumSelectWnd@@8 ; NamedTitlePremiumSelectWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
	DD	FLAT:??_R1BGA@?0A@EA@PullDownEventListener@@8
rdata$r	ENDS
;	COMDAT ??_R3NamedTitlePremiumSelectWnd@@8
rdata$r	SEGMENT
??_R3NamedTitlePremiumSelectWnd@@8 DD 00H		; NamedTitlePremiumSelectWnd::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2NamedTitlePremiumSelectWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVNamedTitlePremiumSelectWnd@@@8
_DATA	SEGMENT
??_R0?AVNamedTitlePremiumSelectWnd@@@8 DD FLAT:??_7type_info@@6B@ ; NamedTitlePremiumSelectWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNamedTitlePremiumSelectWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R4NamedTitlePremiumSelectWnd@@6BioWnd@@@
rdata$r	SEGMENT
??_R4NamedTitlePremiumSelectWnd@@6BioWnd@@@ DD 00H	; NamedTitlePremiumSelectWnd::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVNamedTitlePremiumSelectWnd@@@8
	DD	FLAT:??_R3NamedTitlePremiumSelectWnd@@8
rdata$r	ENDS
;	COMDAT ??_7NamedTitlePremiumSelectWnd@@6BPullDownEventListener@@@
CONST	SEGMENT
??_7NamedTitlePremiumSelectWnd@@6BPullDownEventListener@@@ DD FLAT:??_R4NamedTitlePremiumSelectWnd@@6BPullDownEventListener@@@ ; NamedTitlePremiumSelectWnd::`vftable'
	DD	FLAT:?iwm_pulldown_event@NamedTitlePremiumSelectWnd@@UAEXABVPullDownEvent@@@Z
CONST	ENDS
;	COMDAT ??_7NamedTitlePremiumSelectWnd@@6BioWnd@@@
CONST	SEGMENT
??_7NamedTitlePremiumSelectWnd@@6BioWnd@@@ DD FLAT:??_R4NamedTitlePremiumSelectWnd@@6BioWnd@@@ ; NamedTitlePremiumSelectWnd::`vftable'
	DD	FLAT:?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
	DD	FLAT:?AddRenderImage@NamedTitlePremiumSelectWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z
	DD	FLAT:?ParseExtraInfo@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z
	DD	FLAT:?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z
	DD	FLAT:?SetWindowAlpha@ioWnd@@UAEXH@Z
	DD	FLAT:?SetActive@ioWnd@@UAEXXZ
	DD	FLAT:?SetInActive@ioWnd@@UAEXXZ
	DD	FLAT:?ClearElementImageList@ioWnd@@UAEXXZ
	DD	FLAT:?SetSize@ioWnd@@UAEXHH@Z
	DD	FLAT:?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z
	DD	FLAT:?IsNeedProcess@ioWnd@@UBE_NXZ
	DD	FLAT:?IsCanMouseReaction@ioWnd@@UBE_NXZ
	DD	FLAT:?AddChild@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?DeleteChild@ioWnd@@UAEXK@Z
	DD	FLAT:?DeleteAllChild@ioWnd@@UAEXXZ
	DD	FLAT:?OnRenderShowAndHide@ioWnd@@MAE_NXZ
	DD	FLAT:?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRender@NamedTitlePremiumSelectWnd@@MAEXXZ
	DD	FLAT:?OnRenderAfterChild@ioWnd@@MAEXXZ
	DD	FLAT:?OnProcess@ioWnd@@MAEXM@Z
	DD	FLAT:?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z
	DD	FLAT:?CheckFrameReSize@ioWnd@@MAEXHHHH@Z
	DD	FLAT:?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z
	DD	FLAT:?iwm_create@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_destroy@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_lbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_command@NamedTitlePremiumSelectWnd@@UAEXPAVioWnd@@HK@Z
	DD	FLAT:?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_vscroll@ioWnd@@UAEXKH@Z
	DD	FLAT:?iwm_wheel@ioWnd@@UAEXH@Z
	DD	FLAT:?iwm_show@NamedTitlePremiumSelectWnd@@UAEXXZ
	DD	FLAT:?iwm_hide@NamedTitlePremiumSelectWnd@@UAEXXZ
	DD	FLAT:?iwm_esc@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_spacebar@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_gototop@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragleave@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z
	DD	FLAT:?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z
	DD	FLAT:?IsEXType@ioWnd@@UBE_NXZ
	DD	FLAT:?GetWndType@ioWnd@@UBEKXZ
	DD	FLAT:?RenderWnd@ioWnd@@UAEXXZ
	DD	FLAT:?SetIDEX@ioWnd@@UAEXAAK_N@Z
	DD	FLAT:?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?GetHeaderFileName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetTemplateName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetDefClassName@ioWnd@@UBEPBDXZ
	DD	FLAT:?_Clone@ioWnd@@UAEPAV1@XZ
	DD	FLAT:?Copy@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z
	DD	FLAT:?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?SetPosX@ioWnd@@UAEXH@Z
	DD	FLAT:?SetPosY@ioWnd@@UAEXH@Z
	DD	FLAT:?SetWidth@ioWnd@@UAEXH@Z
	DD	FLAT:?SetHeight@ioWnd@@UAEXH@Z
	DD	FLAT:?GetNumFixedRenderFrame@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?GetNumFixedRenderImage@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z
	DD	FLAT:?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z
	DD	FLAT:??_ENamedTitlePremiumSelectWnd@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1NamedTitlePremiumSelectWnd@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1NamedTitlePremiumSelectWnd@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1NamedTitlePremiumSelectWnd@@UAE@XZ$1
__ehfuncinfo$??1NamedTitlePremiumSelectWnd@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1NamedTitlePremiumSelectWnd@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1NamedTitlePremiumSelectWnd@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1NamedTitlePremiumSelectWnd@@UAE@XZ PROC		; NamedTitlePremiumSelectWnd::~NamedTitlePremiumSelectWnd, COMDAT
; _this$ = ecx

; 17   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1NamedTitlePremiumSelectWnd@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NamedTitlePremiumSelectWnd@@6BioWnd@@@
  00017	c7 86 60 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+352], OFFSET ??_7NamedTitlePremiumSelectWnd@@6BPullDownEventListener@@@

; 18   : 	SAFEDELETE(m_pIcon);

  00021	8b 8e 68 01 00
	00		 mov	 ecx, DWORD PTR [esi+360]
  00027	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0002e	85 c9		 test	 ecx, ecx
  00030	74 0e		 je	 SHORT $LN2@NamedTitle
  00032	8b 01		 mov	 eax, DWORD PTR [ecx]
  00034	6a 01		 push	 1
  00036	ff 50 40	 call	 DWORD PTR [eax+64]
  00039	83 a6 68 01 00
	00 00		 and	 DWORD PTR [esi+360], 0
$LN2@NamedTitle:

; 19   : 	SAFEDELETE(m_pBackEffect);

  00040	8b 8e 6c 01 00
	00		 mov	 ecx, DWORD PTR [esi+364]
  00046	85 c9		 test	 ecx, ecx
  00048	74 0e		 je	 SHORT $LN1@NamedTitle
  0004a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004c	6a 01		 push	 1
  0004e	ff 50 40	 call	 DWORD PTR [eax+64]
  00051	83 a6 6c 01 00
	00 00		 and	 DWORD PTR [esi+364], 0
$LN1@NamedTitle:

; 20   : 	m_ItemTitle.ClearList();

  00058	8d 8e 74 01 00
	00		 lea	 ecx, DWORD PTR [esi+372]
  0005e	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList

; 21   : }

  00063	8d 8e 74 01 00
	00		 lea	 ecx, DWORD PTR [esi+372]
  00069	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0006d	e8 00 00 00 00	 call	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
  00072	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00076	8b ce		 mov	 ecx, esi
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
  0007e	e8 00 00 00 00	 call	 __EH_epilog3
  00083	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1NamedTitlePremiumSelectWnd@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
__unwindfunclet$??1NamedTitlePremiumSelectWnd@@UAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	81 c1 74 01 00
	00		 add	 ecx, 372		; 00000174H
  00012	e9 00 00 00 00	 jmp	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
__ehhandler$??1NamedTitlePremiumSelectWnd@@UAE@XZ:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1NamedTitlePremiumSelectWnd@@UAE@XZ
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1NamedTitlePremiumSelectWnd@@UAE@XZ ENDP		; NamedTitlePremiumSelectWnd::~NamedTitlePremiumSelectWnd
PUBLIC	??_C@_0CF@DINKKCCO@NamedTitlePremiumSelectWnd?3?3iwm_@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	?GetSingletonPtr@ioEtcInvenSubManualMgr@@SAPAV1@XZ:PROC ; ioEtcInvenSubManualMgr::GetSingletonPtr
EXTRN	__imp_?SetTitleColor@ioWnd@@QAEXKK@Z:PROC
EXTRN	__imp_?SetTitleText@ioWnd@@QAEXPBD0H@Z:PROC
EXTRN	__imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z:PROC
EXTRN	__imp_?GetSingleton@ioStringManager@@SAAAV1@XZ:PROC
EXTRN	__imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z:PROC
;	COMDAT ??_C@_0CF@DINKKCCO@NamedTitlePremiumSelectWnd?3?3iwm_@
CONST	SEGMENT
??_C@_0CF@DINKKCCO@NamedTitlePremiumSelectWnd?3?3iwm_@ DB 'NamedTitlePrem'
	DB	'iumSelectWnd::iwm_show', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?iwm_show@NamedTitlePremiumSelectWnd@@UAEXXZ
_TEXT	SEGMENT
?iwm_show@NamedTitlePremiumSelectWnd@@UAEXXZ PROC	; NamedTitlePremiumSelectWnd::iwm_show, COMDAT
; _this$ = ecx

; 24   : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 25   : 	ioWnd *pSelectBtn = FindChildWnd( ID_SELECT_BTN );

  00002	6a 02		 push	 2
  00004	8b f9		 mov	 edi, ecx
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  0000c	8b f0		 mov	 esi, eax

; 26   : 	if( pSelectBtn )

  0000e	85 f6		 test	 esi, esi
  00010	74 3b		 je	 SHORT $LN1@iwm_show

; 27   : 	{
; 28   : 		pSelectBtn->SetTitleText( STR(1) );

  00012	6a 00		 push	 0
  00014	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00019	50		 push	 eax
  0001a	6a 00		 push	 0
  0001c	6a 01		 push	 1
  0001e	50		 push	 eax
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DINKKCCO@NamedTitlePremiumSelectWnd?3?3iwm_@
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  0002a	8b c8		 mov	 ecx, eax
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00032	50		 push	 eax
  00033	8b ce		 mov	 ecx, esi
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitleText@ioWnd@@QAEXPBD0H@Z

; 29   : 		pSelectBtn->SetTitleColor( TCT_DEFAULT_DARKGRAY, 0xFF000000 );

  0003b	68 00 00 00 ff	 push	 -16777216		; ff000000H
  00040	68 3a 3a 3a ff	 push	 -12961222		; ff3a3a3aH
  00045	8b ce		 mov	 ecx, esi
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitleColor@ioWnd@@QAEXKK@Z
$LN1@iwm_show:

; 30   : 	}
; 31   : 
; 32   : 	m_pManual = ioEtcInvenSubManualMgr::GetSingletonPtr();

  0004d	e8 00 00 00 00	 call	 ?GetSingletonPtr@ioEtcInvenSubManualMgr@@SAPAV1@XZ ; ioEtcInvenSubManualMgr::GetSingletonPtr
  00052	89 87 70 01 00
	00		 mov	 DWORD PTR [edi+368], eax
  00058	5f		 pop	 edi
  00059	5e		 pop	 esi

; 33   : }

  0005a	c3		 ret	 0
?iwm_show@NamedTitlePremiumSelectWnd@@UAEXXZ ENDP	; NamedTitlePremiumSelectWnd::iwm_show
_TEXT	ENDS
EXTRN	__imp_?HideChildWnd@ioWnd@@QAEXK_N@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?iwm_hide@NamedTitlePremiumSelectWnd@@UAEXXZ
_TEXT	SEGMENT
?iwm_hide@NamedTitlePremiumSelectWnd@@UAEXXZ PROC	; NamedTitlePremiumSelectWnd::iwm_hide, COMDAT
; _this$ = ecx

; 37   : 	HideChildWnd( ID_LIST_WND );

  00000	6a 00		 push	 0
  00002	6a 64		 push	 100			; 00000064H
  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z

; 38   : }

  0000a	c3		 ret	 0
?iwm_hide@NamedTitlePremiumSelectWnd@@UAEXXZ ENDP	; NamedTitlePremiumSelectWnd::iwm_hide
_TEXT	ENDS
PUBLIC	??1tagNamedTitleSortInfo@@QAE@XZ		; tagNamedTitleSortInfo::~tagNamedTitleSortInfo
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1tagNamedTitleSortInfo@@QAE@XZ
_TEXT	SEGMENT
??1tagNamedTitleSortInfo@@QAE@XZ PROC			; tagNamedTitleSortInfo::~tagNamedTitleSortInfo, COMDAT
; _this$ = ecx
  00000	83 c1 04	 add	 ecx, 4
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??1tagNamedTitleSortInfo@@QAE@XZ ENDP			; tagNamedTitleSortInfo::~tagNamedTitleSortInfo
_TEXT	ENDS
PUBLIC	__real@3f266666
PUBLIC	??_C@_0CJ@CGEOKLMG@NamedTitlePremiumSelectWnd?3?3Chec@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	?CheckRecvBtn@NamedTitlePremiumSelectWnd@@IAEXXZ ; NamedTitlePremiumSelectWnd::CheckRecvBtn
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	?SetPrevMsgListBoxWithTitle@ioSP2GUIManager@@QAEXPAVioWnd@@H0PAVioComplexStringPrinter@@PBD222W4TextAlignType@@@Z:PROC ; ioSP2GUIManager::SetPrevMsgListBoxWithTitle
EXTRN	?AddTextPiece@ioComplexStringPrinter@@QAAXMPBDZZ:PROC ; ioComplexStringPrinter::AddTextPiece
EXTRN	?SetTextColor@ioComplexStringPrinter@@QAEXK@Z:PROC ; ioComplexStringPrinter::SetTextColor
EXTRN	?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z:PROC ; ioComplexStringPrinter::SetBkColor
EXTRN	?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z:PROC ; ioComplexStringPrinter::SetTextStyle
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??0ioComplexStringPrinter@@QAE@XZ:PROC		; ioComplexStringPrinter::ioComplexStringPrinter
EXTRN	?SetMsgBox@ioSP2GUIManager@@QAAXHPAVioWnd@@PBDZZ:PROC ; ioSP2GUIManager::SetMsgBox
EXTRN	?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ:PROC	; ioSP2GUIManager::GetSingleton
EXTRN	__fltused:DWORD
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT ??_C@_0CJ@CGEOKLMG@NamedTitlePremiumSelectWnd?3?3Chec@
CONST	SEGMENT
??_C@_0CJ@CGEOKLMG@NamedTitlePremiumSelectWnd?3?3Chec@ DB 'NamedTitlePrem'
	DB	'iumSelectWnd::CheckRecvBtn', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CheckRecvBtn@NamedTitlePremiumSelectWnd@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckRecvBtn@NamedTitlePremiumSelectWnd@@IAEXXZ$0
__ehfuncinfo$?CheckRecvBtn@NamedTitlePremiumSelectWnd@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CheckRecvBtn@NamedTitlePremiumSelectWnd@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?CheckRecvBtn@NamedTitlePremiumSelectWnd@@IAEXXZ
_TEXT	SEGMENT
_this$GSCopy$ = -404					; size = 4
_kPrinter$ = -400					; size = 384
__$EHRec$ = -12						; size = 12
?CheckRecvBtn@NamedTitlePremiumSelectWnd@@IAEXXZ PROC	; NamedTitlePremiumSelectWnd::CheckRecvBtn, COMDAT
; _this$ = ecx

; 287  : {

  00000	68 88 01 00 00	 push	 392			; 00000188H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?CheckRecvBtn@NamedTitlePremiumSelectWnd@@IAEXXZ
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b c1		 mov	 eax, ecx

; 288  : 	if ( m_dwCode <= 0 )

  00011	33 f6		 xor	 esi, esi

; 292  : 	}
; 293  : 
; 294  : 	ioComplexStringPrinter kPrinter[MAX_MSG_LIST_SIZE];

  00013	89 85 6c fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], eax
  00019	39 b0 94 01 00
	00		 cmp	 DWORD PTR [eax+404], esi
  0001f	77 31		 ja	 SHORT $LN1@CheckRecvB

; 289  : 	{
; 290  : 		g_GUIMgr.SetMsgBox( MB_OK, NULL, STR(1) );

  00021	56		 push	 esi
  00022	6a 01		 push	 1
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@CGEOKLMG@NamedTitlePremiumSelectWnd?3?3Chec@
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00034	8b c8		 mov	 ecx, eax
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  0003c	50		 push	 eax
  0003d	56		 push	 esi
  0003e	56		 push	 esi
  0003f	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?SetMsgBox@ioSP2GUIManager@@QAAXHPAVioWnd@@PBDZZ ; ioSP2GUIManager::SetMsgBox
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 291  : 		return;

  0004d	e9 4c 01 00 00	 jmp	 $LN2@CheckRecvB
$LN1@CheckRecvB:

; 292  : 	}
; 293  : 
; 294  : 	ioComplexStringPrinter kPrinter[MAX_MSG_LIST_SIZE];

  00052	68 00 00 00 00	 push	 OFFSET ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
  00057	68 00 00 00 00	 push	 OFFSET ??0ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::ioComplexStringPrinter
  0005c	6a 0c		 push	 12			; 0000000cH
  0005e	6a 20		 push	 32			; 00000020H
  00060	8d 85 70 fe ff
	ff		 lea	 eax, DWORD PTR _kPrinter$[ebp]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z

; 295  : 	kPrinter[0].SetTextStyle( TS_NORMAL );

  0006c	56		 push	 esi
  0006d	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00073	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  00076	e8 00 00 00 00	 call	 ?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z ; ioComplexStringPrinter::SetTextStyle

; 296  : 	kPrinter[0].SetBkColor( 0, 0, 0 );

  0007b	56		 push	 esi
  0007c	56		 push	 esi
  0007d	56		 push	 esi
  0007e	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00084	e8 00 00 00 00	 call	 ?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z ; ioComplexStringPrinter::SetBkColor

; 297  : 	kPrinter[0].SetTextColor( TCT_DEFAULT_DARKGRAY );

  00089	68 3a 3a 3a ff	 push	 -12961222		; ff3a3a3aH
  0008e	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00094	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 298  : 	kPrinter[0].AddTextPiece( FONT_SIZE_13, STR(2) );

  00099	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  0009f	56		 push	 esi
  000a0	6a 02		 push	 2
  000a2	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
  000a7	56		 push	 esi
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@CGEOKLMG@NamedTitlePremiumSelectWnd?3?3Chec@
  000ad	ff d7		 call	 edi
  000af	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  000b5	8b c8		 mov	 ecx, eax
  000b7	ff d3		 call	 ebx
  000b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  000c1	50		 push	 eax
  000c2	51		 push	 ecx
  000c3	8d 85 70 fe ff
	ff		 lea	 eax, DWORD PTR _kPrinter$[ebp]
  000c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAAXMPBDZZ ; ioComplexStringPrinter::AddTextPiece
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 299  : 
; 300  : 	kPrinter[1].SetTextStyle( TS_NORMAL );

  000d7	6a 00		 push	 0
  000d9	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$[ebp+32]
  000df	e8 00 00 00 00	 call	 ?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z ; ioComplexStringPrinter::SetTextStyle

; 301  : 	kPrinter[1].SetBkColor( 0, 0, 0 );

  000e4	33 c0		 xor	 eax, eax
  000e6	50		 push	 eax
  000e7	50		 push	 eax
  000e8	50		 push	 eax
  000e9	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$[ebp+32]
  000ef	e8 00 00 00 00	 call	 ?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z ; ioComplexStringPrinter::SetBkColor

; 302  : 	kPrinter[1].SetTextColor( TCT_DEFAULT_GRAY );

  000f4	68 6e 6e 6e ff	 push	 -9539986		; ff6e6e6eH
  000f9	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$[ebp+32]
  000ff	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 303  : 	kPrinter[1].AddTextPiece( FONT_SIZE_13, STR(3) );

  00104	6a 00		 push	 0
  00106	6a 03		 push	 3
  00108	56		 push	 esi
  00109	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@CGEOKLMG@NamedTitlePremiumSelectWnd?3?3Chec@
  0010e	ff d7		 call	 edi
  00110	8b c8		 mov	 ecx, eax
  00112	ff d3		 call	 ebx
  00114	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  0011c	50		 push	 eax
  0011d	51		 push	 ecx
  0011e	8d 85 90 fe ff
	ff		 lea	 eax, DWORD PTR _kPrinter$[ebp+32]
  00124	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAAXMPBDZZ ; ioComplexStringPrinter::AddTextPiece
  0012f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 304  : 
; 305  : 	g_GUIMgr.SetPrevMsgListBoxWithTitle( NULL, MB_YESNO, this, kPrinter, STR(4), "", STR(5), STR(6) );

  00132	6a 01		 push	 1
  00134	6a 00		 push	 0
  00136	6a 06		 push	 6
  00138	56		 push	 esi
  00139	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@CGEOKLMG@NamedTitlePremiumSelectWnd?3?3Chec@
  0013e	ff d7		 call	 edi
  00140	8b c8		 mov	 ecx, eax
  00142	ff d3		 call	 ebx
  00144	50		 push	 eax
  00145	6a 00		 push	 0
  00147	6a 05		 push	 5
  00149	56		 push	 esi
  0014a	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@CGEOKLMG@NamedTitlePremiumSelectWnd?3?3Chec@
  0014f	ff d7		 call	 edi
  00151	8b c8		 mov	 ecx, eax
  00153	ff d3		 call	 ebx
  00155	50		 push	 eax
  00156	56		 push	 esi
  00157	6a 00		 push	 0
  00159	6a 04		 push	 4
  0015b	56		 push	 esi
  0015c	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@CGEOKLMG@NamedTitlePremiumSelectWnd?3?3Chec@
  00161	ff d7		 call	 edi
  00163	8b c8		 mov	 ecx, eax
  00165	ff d3		 call	 ebx
  00167	50		 push	 eax
  00168	8d 85 70 fe ff
	ff		 lea	 eax, DWORD PTR _kPrinter$[ebp]
  0016e	50		 push	 eax
  0016f	ff b5 6c fe ff
	ff		 push	 DWORD PTR _this$GSCopy$[ebp]
  00175	6a 04		 push	 4
  00177	6a 00		 push	 0
  00179	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  0017e	8b c8		 mov	 ecx, eax
  00180	e8 00 00 00 00	 call	 ?SetPrevMsgListBoxWithTitle@ioSP2GUIManager@@QAEXPAVioWnd@@H0PAVioComplexStringPrinter@@PBD222W4TextAlignType@@@Z ; ioSP2GUIManager::SetPrevMsgListBoxWithTitle

; 306  : }

  00185	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00189	68 00 00 00 00	 push	 OFFSET ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
  0018e	6a 0c		 push	 12			; 0000000cH
  00190	6a 20		 push	 32			; 00000020H
  00192	8d 85 70 fe ff
	ff		 lea	 eax, DWORD PTR _kPrinter$[ebp]
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
$LN2@CheckRecvB:
  0019e	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001a3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CheckRecvBtn@NamedTitlePremiumSelectWnd@@IAEXXZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
  00005	6a 0c		 push	 12			; 0000000cH
  00007	6a 20		 push	 32			; 00000020H
  00009	8d 85 70 fe ff
	ff		 lea	 eax, DWORD PTR _kPrinter$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00015	c3		 ret	 0
__ehhandler$?CheckRecvBtn@NamedTitlePremiumSelectWnd@@IAEXXZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 8a 68 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-408]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CheckRecvBtn@NamedTitlePremiumSelectWnd@@IAEXXZ
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CheckRecvBtn@NamedTitlePremiumSelectWnd@@IAEXXZ ENDP	; NamedTitlePremiumSelectWnd::CheckRecvBtn
PUBLIC	?GetSingleton@?$Singleton@VioEtcItemManager@@@@SAAAVioEtcItemManager@@XZ ; Singleton<ioEtcItemManager>::GetSingleton
EXTRN	?ms_Singleton@?$Singleton@VioEtcItemManager@@@@1PAVioEtcItemManager@@A:DWORD ; Singleton<ioEtcItemManager>::ms_Singleton
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
;	COMDAT ?GetSingleton@?$Singleton@VioEtcItemManager@@@@SAAAVioEtcItemManager@@XZ
_TEXT	SEGMENT
?GetSingleton@?$Singleton@VioEtcItemManager@@@@SAAAVioEtcItemManager@@XZ PROC ; Singleton<ioEtcItemManager>::GetSingleton, COMDAT

; 42   : 		assert( ms_Singleton );
; 43   : 		return (*ms_Singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VioEtcItemManager@@@@1PAVioEtcItemManager@@A ; Singleton<ioEtcItemManager>::ms_Singleton

; 44   : 	}

  00005	c3		 ret	 0
?GetSingleton@?$Singleton@VioEtcItemManager@@@@SAAAVioEtcItemManager@@XZ ENDP ; Singleton<ioEtcItemManager>::GetSingleton
_TEXT	ENDS
PUBLIC	?size@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QBEIXZ ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 14		 push	 20			; 00000014H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::size
_TEXT	ENDS
PUBLIC	?empty@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QBE_NXZ ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::empty
; Function compile flags: /Ogsp
;	COMDAT ?empty@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QBE_NXZ PROC ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::empty, COMDAT
; _this$ = ecx

; 889  : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	40		 inc	 eax

; 890  : 		}

  0000a	c3		 ret	 0
?empty@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QBE_NXZ ENDP ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::empty
_TEXT	ENDS
PUBLIC	??A?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEAAUtagNamedTitleSortInfo@@I@Z ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEAAUtagNamedTitleSortInfo@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEAAUtagNamedTitleSortInfo@@I@Z PROC ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	6b c0 14	 imul	 eax, 20			; 00000014H
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEAAUtagNamedTitleSortInfo@@I@Z ENDP ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::operator[]
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IBE_NPBUtagNamedTitleSortInfo@@@Z ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Inside
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IBE_NPBUtagNamedTitleSortInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IBE_NPBUtagNamedTitleSortInfo@@@Z PROC ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IBE_NPBUtagNamedTitleSortInfo@@@Z ENDP ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Inside
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IBEXPAUtagNamedTitleSortInfo@@0@Z ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Orphan_range
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IBEXPAUtagNamedTitleSortInfo@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IBEXPAUtagNamedTitleSortInfo@@0@Z PROC ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IBEXPAUtagNamedTitleSortInfo@@0@Z ENDP ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::~_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::~_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::~_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UtagNamedTitleSortInfo@@@std@@QAE@XZ ; std::allocator<tagNamedTitleSortInfo>::allocator<tagNamedTitleSortInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UtagNamedTitleSortInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UtagNamedTitleSortInfo@@@std@@QAE@XZ PROC ; std::allocator<tagNamedTitleSortInfo>::allocator<tagNamedTitleSortInfo>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UtagNamedTitleSortInfo@@@std@@QAE@XZ ENDP ; std::allocator<tagNamedTitleSortInfo>::allocator<tagNamedTitleSortInfo>
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QBEIXZ ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 14		 push	 20			; 00000014H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IBEXXZ ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UtagNamedTitleSortInfo@@@std@@QAE@ABV01@@Z ; std::allocator<tagNamedTitleSortInfo>::allocator<tagNamedTitleSortInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UtagNamedTitleSortInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UtagNamedTitleSortInfo@@@std@@QAE@ABV01@@Z PROC ; std::allocator<tagNamedTitleSortInfo>::allocator<tagNamedTitleSortInfo>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UtagNamedTitleSortInfo@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<tagNamedTitleSortInfo>::allocator<tagNamedTitleSortInfo>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@I@Z ; std::allocator<tagNamedTitleSortInfo>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@I@Z PROC ; std::allocator<tagNamedTitleSortInfo>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@I@Z ENDP ; std::allocator<tagNamedTitleSortInfo>::deallocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UtagNamedTitleSortInfo@@@std@@QBEIXZ ; std::allocator<tagNamedTitleSortInfo>::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@UtagNamedTitleSortInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UtagNamedTitleSortInfo@@@std@@QBEIXZ PROC ; std::allocator<tagNamedTitleSortInfo>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UtagNamedTitleSortInfo@@@std@@QBEIXZ ENDP ; std::allocator<tagNamedTitleSortInfo>::max_size
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 490  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 491  : 		return (_CSTD strlen(_First));

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@length:
  00009	8a 08		 mov	 cl, BYTE PTR [eax]
  0000b	40		 inc	 eax
  0000c	84 c9		 test	 cl, cl
  0000e	75 f9		 jne	 SHORT $LL3@length
  00010	2b c2		 sub	 eax, edx

; 492  : 		}

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
EXTRN	_memcpy:PROC
; Function compile flags: /Ogsp
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 496  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 		}

  00003	5d		 pop	 ebp

; 497  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogsp
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 516  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 518  : 		}

  00003	5d		 pop	 ebp

; 517  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 526  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 527  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]
  00008	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000b	88 01		 mov	 BYTE PTR [ecx], al

; 528  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUtagNamedTitleSortInfo@@@std@@YAPBUtagNamedTitleSortInfo@@ABU1@@Z ; std::addressof<tagNamedTitleSortInfo const >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBUtagNamedTitleSortInfo@@@std@@YAPBUtagNamedTitleSortInfo@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUtagNamedTitleSortInfo@@@std@@YAPBUtagNamedTitleSortInfo@@ABU1@@Z PROC ; std::addressof<tagNamedTitleSortInfo const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUtagNamedTitleSortInfo@@@std@@YAPBUtagNamedTitleSortInfo@@ABU1@@Z ENDP ; std::addressof<tagNamedTitleSortInfo const >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UtagNamedTitleSortInfo@@@std@@YAPAUtagNamedTitleSortInfo@@IPAU1@@Z ; std::_Allocate<tagNamedTitleSortInfo>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UtagNamedTitleSortInfo@@@std@@YAPAUtagNamedTitleSortInfo@@IPAU1@@Z
_TEXT	SEGMENT
$T508539 = -12						; size = 12
$T508544 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UtagNamedTitleSortInfo@@@std@@YAPAUtagNamedTitleSortInfo@@IPAU1@@Z PROC ; std::_Allocate<tagNamedTitleSortInfo>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 cc cc cc
	0c		 cmp	 ecx, 214748364		; 0cccccccH
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	6b c9 14	 imul	 ecx, 20			; 00000014H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T508544[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T508544[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T508539[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T508539[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T508539[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UtagNamedTitleSortInfo@@@std@@YAPAUtagNamedTitleSortInfo@@IPAU1@@Z ENDP ; std::_Allocate<tagNamedTitleSortInfo>
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >::_Compat
_TEXT	ENDS
PUBLIC	??$forward@AAUtagNamedTitleSortInfo@@@std@@YAAAUtagNamedTitleSortInfo@@AAU1@@Z ; std::forward<tagNamedTitleSortInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUtagNamedTitleSortInfo@@@std@@YAAAUtagNamedTitleSortInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUtagNamedTitleSortInfo@@@std@@YAAAUtagNamedTitleSortInfo@@AAU1@@Z PROC ; std::forward<tagNamedTitleSortInfo &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUtagNamedTitleSortInfo@@@std@@YAAAUtagNamedTitleSortInfo@@AAU1@@Z ENDP ; std::forward<tagNamedTitleSortInfo &>
_TEXT	ENDS
PUBLIC	??$forward@ABUtagNamedTitleSortInfo@@@std@@YAABUtagNamedTitleSortInfo@@ABU1@@Z ; std::forward<tagNamedTitleSortInfo const &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@ABUtagNamedTitleSortInfo@@@std@@YAABUtagNamedTitleSortInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUtagNamedTitleSortInfo@@@std@@YAABUtagNamedTitleSortInfo@@ABU1@@Z PROC ; std::forward<tagNamedTitleSortInfo const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUtagNamedTitleSortInfo@@@std@@YAABUtagNamedTitleSortInfo@@ABU1@@Z ENDP ; std::forward<tagNamedTitleSortInfo const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UtagNamedTitleSortInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagNamedTitleSortInfo@@0@Z ; std::_Ptr_cat<tagNamedTitleSortInfo,tagNamedTitleSortInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UtagNamedTitleSortInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagNamedTitleSortInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UtagNamedTitleSortInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagNamedTitleSortInfo@@0@Z PROC ; std::_Ptr_cat<tagNamedTitleSortInfo,tagNamedTitleSortInfo>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UtagNamedTitleSortInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagNamedTitleSortInfo@@0@Z ENDP ; std::_Ptr_cat<tagNamedTitleSortInfo,tagNamedTitleSortInfo>
_TEXT	ENDS
PUBLIC	??0tagNamedTitleSortInfo@@QAE@ABU0@@Z		; tagNamedTitleSortInfo::tagNamedTitleSortInfo
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0tagNamedTitleSortInfo@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0tagNamedTitleSortInfo@@QAE@ABU0@@Z PROC		; tagNamedTitleSortInfo::tagNamedTitleSortInfo, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	83 c0 04	 add	 eax, 4
  0000e	89 0e		 mov	 DWORD PTR [esi], ecx
  00010	50		 push	 eax
  00011	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??0tagNamedTitleSortInfo@@QAE@ABU0@@Z ENDP		; tagNamedTitleSortInfo::tagNamedTitleSortInfo
_TEXT	ENDS
PUBLIC	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@QBEPAUtagNamedTitleSortInfo@@XZ ; std::_Vector_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >::_Unchecked
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@QBEPAUtagNamedTitleSortInfo@@XZ
_TEXT	SEGMENT
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@QBEPAUtagNamedTitleSortInfo@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >::_Unchecked, COMDAT
; _this$ = ecx

; 317  : 		return (_Unchecked_type(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 318  : 		}

  00002	c3		 ret	 0
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@QBEPAUtagNamedTitleSortInfo@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >::_Unchecked
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUtagNamedTitleSortInfo@@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@@Z ; std::_Val_type<tagNamedTitleSortInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUtagNamedTitleSortInfo@@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUtagNamedTitleSortInfo@@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@@Z PROC ; std::_Val_type<tagNamedTitleSortInfo *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUtagNamedTitleSortInfo@@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@@Z ENDP ; std::_Val_type<tagNamedTitleSortInfo *>
_TEXT	ENDS
PUBLIC	??$_Unchecked@PAUtagNamedTitleSortInfo@@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@@Z ; std::_Unchecked<tagNamedTitleSortInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Unchecked@PAUtagNamedTitleSortInfo@@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUtagNamedTitleSortInfo@@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@@Z PROC ; std::_Unchecked<tagNamedTitleSortInfo *>, COMDAT

; 266  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 267  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 268  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAUtagNamedTitleSortInfo@@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@@Z ENDP ; std::_Unchecked<tagNamedTitleSortInfo *>
_TEXT	ENDS
PUBLIC	??$_Dist_type@PAUtagNamedTitleSortInfo@@@std@@YAPAHPAUtagNamedTitleSortInfo@@@Z ; std::_Dist_type<tagNamedTitleSortInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dist_type@PAUtagNamedTitleSortInfo@@@std@@YAPAHPAUtagNamedTitleSortInfo@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAUtagNamedTitleSortInfo@@@std@@YAPAHPAUtagNamedTitleSortInfo@@@Z PROC ; std::_Dist_type<tagNamedTitleSortInfo *>, COMDAT

; 850  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 851  : 	}

  00002	c3		 ret	 0
??$_Dist_type@PAUtagNamedTitleSortInfo@@@std@@YAPAHPAUtagNamedTitleSortInfo@@@Z ENDP ; std::_Dist_type<tagNamedTitleSortInfo *>
_TEXT	ENDS
PUBLIC	??4tagNamedTitleSortInfo@@QAEAAU0@ABU0@@Z	; tagNamedTitleSortInfo::operator=
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??4tagNamedTitleSortInfo@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4tagNamedTitleSortInfo@@QAEAAU0@ABU0@@Z PROC		; tagNamedTitleSortInfo::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	83 c0 04	 add	 eax, 4
  0000e	89 0e		 mov	 DWORD PTR [esi], ecx
  00010	50		 push	 eax
  00011	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??4tagNamedTitleSortInfo@@QAEAAU0@ABU0@@Z ENDP		; tagNamedTitleSortInfo::operator=
_TEXT	ENDS
PUBLIC	??_GtagNamedTitleSortInfo@@QAEPAXI@Z		; tagNamedTitleSortInfo::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GtagNamedTitleSortInfo@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GtagNamedTitleSortInfo@@QAEPAXI@Z PROC		; tagNamedTitleSortInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0000f	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00013	74 07		 je	 SHORT $LN1@scalar@2
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	59		 pop	 ecx
$LN1@scalar@2:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GtagNamedTitleSortInfo@@QAEPAXI@Z ENDP		; tagNamedTitleSortInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$forward@AAPAUtagNamedTitleSortInfo@@@std@@YAAAPAUtagNamedTitleSortInfo@@AAPAU1@@Z ; std::forward<tagNamedTitleSortInfo * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAPAUtagNamedTitleSortInfo@@@std@@YAAAPAUtagNamedTitleSortInfo@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAUtagNamedTitleSortInfo@@@std@@YAAAPAUtagNamedTitleSortInfo@@AAPAU1@@Z PROC ; std::forward<tagNamedTitleSortInfo * &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAUtagNamedTitleSortInfo@@@std@@YAAAPAUtagNamedTitleSortInfo@@AAPAU1@@Z ENDP ; std::forward<tagNamedTitleSortInfo * &>
_TEXT	ENDS
PUBLIC	??$?0AAPAUtagNamedTitleSortInfo@@AAPAU0@@?$_Pair_base@PAUtagNamedTitleSortInfo@@PAU1@@std@@QAE@AAPAUtagNamedTitleSortInfo@@0@Z ; std::_Pair_base<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *>::_Pair_base<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *><tagNamedTitleSortInfo * &,tagNamedTitleSortInfo * &>
; Function compile flags: /Ogsp
;	COMDAT ??$?0AAPAUtagNamedTitleSortInfo@@AAPAU0@@?$_Pair_base@PAUtagNamedTitleSortInfo@@PAU1@@std@@QAE@AAPAUtagNamedTitleSortInfo@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAUtagNamedTitleSortInfo@@AAPAU0@@?$_Pair_base@PAUtagNamedTitleSortInfo@@PAU1@@std@@QAE@AAPAUtagNamedTitleSortInfo@@0@Z PROC ; std::_Pair_base<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *>::_Pair_base<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *><tagNamedTitleSortInfo * &,tagNamedTitleSortInfo * &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00011	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 164  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAPAUtagNamedTitleSortInfo@@AAPAU0@@?$_Pair_base@PAUtagNamedTitleSortInfo@@PAU1@@std@@QAE@AAPAUtagNamedTitleSortInfo@@0@Z ENDP ; std::_Pair_base<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *>::_Pair_base<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *><tagNamedTitleSortInfo * &,tagNamedTitleSortInfo * &>
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	??$_Move@AAUtagNamedTitleSortInfo@@@std@@YA$$QAUtagNamedTitleSortInfo@@AAU1@@Z ; std::_Move<tagNamedTitleSortInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$_Move@AAUtagNamedTitleSortInfo@@@std@@YA$$QAUtagNamedTitleSortInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAUtagNamedTitleSortInfo@@@std@@YA$$QAUtagNamedTitleSortInfo@@AAU1@@Z PROC ; std::_Move<tagNamedTitleSortInfo &>, COMDAT

; 94   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAUtagNamedTitleSortInfo@@@std@@YA$$QAUtagNamedTitleSortInfo@@AAU1@@Z ENDP ; std::_Move<tagNamedTitleSortInfo &>
_TEXT	ENDS
PUBLIC	??$forward@UtagNamedTitleSortInfo@@@std@@YA$$QAUtagNamedTitleSortInfo@@AAU1@@Z ; std::forward<tagNamedTitleSortInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@UtagNamedTitleSortInfo@@@std@@YA$$QAUtagNamedTitleSortInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UtagNamedTitleSortInfo@@@std@@YA$$QAUtagNamedTitleSortInfo@@AAU1@@Z PROC ; std::forward<tagNamedTitleSortInfo>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UtagNamedTitleSortInfo@@@std@@YA$$QAUtagNamedTitleSortInfo@@AAU1@@Z ENDP ; std::forward<tagNamedTitleSortInfo>
_TEXT	ENDS
PUBLIC	??$move@AAUtagNamedTitleSortInfo@@@std@@YA$$QAUtagNamedTitleSortInfo@@AAU1@@Z ; std::move<tagNamedTitleSortInfo &>
; Function compile flags: /Ogsp
;	COMDAT ??$move@AAUtagNamedTitleSortInfo@@@std@@YA$$QAUtagNamedTitleSortInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUtagNamedTitleSortInfo@@@std@@YA$$QAUtagNamedTitleSortInfo@@AAU1@@Z PROC ; std::move<tagNamedTitleSortInfo &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUtagNamedTitleSortInfo@@@std@@YA$$QAUtagNamedTitleSortInfo@@AAU1@@Z ENDP ; std::move<tagNamedTitleSortInfo &>
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?Init@tagNamedTitleSlot@@QAEXXZ			; tagNamedTitleSlot::Init
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\namedtitleenumtype.h
;	COMDAT ?Init@tagNamedTitleSlot@@QAEXXZ
_TEXT	SEGMENT
?Init@tagNamedTitleSlot@@QAEXXZ PROC			; tagNamedTitleSlot::Init, COMDAT
; _this$ = ecx

; 70   : 		m_dwCode = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 01		 mov	 DWORD PTR [ecx], eax

; 71   : 		m_nLevel = 0;

  00004	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 72   : 		m_nValue = 0;

  00007	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0000a	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 73   : 		
; 74   : 		m_byPremium = 0;

  0000d	66 89 41 10	 mov	 WORD PTR [ecx+16], ax

; 75   : 		m_byEquip = 0;
; 76   : 		m_byStatus = TITLE_DISABLE;

  00011	88 41 12	 mov	 BYTE PTR [ecx+18], al

; 77   : 	}

  00014	c3		 ret	 0
?Init@tagNamedTitleSlot@@QAEXXZ ENDP			; tagNamedTitleSlot::Init
_TEXT	ENDS
PUBLIC	?Init@tagNamedTitleSortInfo@@QAEXXZ		; tagNamedTitleSortInfo::Init
EXTRN	__imp_?Clear@ioHashString@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?Init@tagNamedTitleSortInfo@@QAEXXZ
_TEXT	SEGMENT
?Init@tagNamedTitleSortInfo@@QAEXXZ PROC		; tagNamedTitleSortInfo::Init, COMDAT
; _this$ = ecx

; 96   : 		m_dwCode = 0;

  00000	83 21 00	 and	 DWORD PTR [ecx], 0

; 97   : 		m_szNamedTitle.Clear();

  00003	83 c1 04	 add	 ecx, 4
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_?Clear@ioHashString@@QAEXXZ
?Init@tagNamedTitleSortInfo@@QAEXXZ ENDP		; tagNamedTitleSortInfo::Init
_TEXT	ENDS
PUBLIC	??RNamedTitleSortFunc@@QBE_NABUtagNamedTitleSortInfo@@0@Z ; NamedTitleSortFunc::operator()
EXTRN	__imp_?c_str@ioHashString@@QBEPBDXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??RNamedTitleSortFunc@@QBE_NABUtagNamedTitleSortInfo@@0@Z
_TEXT	SEGMENT
_lhs$ = 8						; size = 4
_rhs$ = 12						; size = 4
??RNamedTitleSortFunc@@QBE_NABUtagNamedTitleSortInfo@@0@Z PROC ; NamedTitleSortFunc::operator(), COMDAT
; _this$ = ecx

; 106  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 107  : 		if( strcmp( lhs.m_szNamedTitle.c_str(), rhs.m_szNamedTitle.c_str() ) < 0 )

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _rhs$[ebp]
  00006	56		 push	 esi
  00007	83 c1 04	 add	 ecx, 4
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _lhs$[ebp]
  00013	83 c1 04	 add	 ecx, 4
  00016	8b f0		 mov	 esi, eax
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL4@operator:
  0001e	8a 08		 mov	 cl, BYTE PTR [eax]
  00020	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00022	75 1a		 jne	 SHORT $LN5@operator
  00024	84 c9		 test	 cl, cl
  00026	74 12		 je	 SHORT $LN6@operator
  00028	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0002b	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0002e	75 0e		 jne	 SHORT $LN5@operator
  00030	83 c0 02	 add	 eax, 2
  00033	83 c6 02	 add	 esi, 2
  00036	84 c9		 test	 cl, cl
  00038	75 e4		 jne	 SHORT $LL4@operator
$LN6@operator:
  0003a	33 c0		 xor	 eax, eax
  0003c	eb 05		 jmp	 SHORT $LN7@operator
$LN5@operator:
  0003e	1b c0		 sbb	 eax, eax
  00040	83 d8 ff	 sbb	 eax, -1
$LN7@operator:
  00043	85 c0		 test	 eax, eax
  00045	0f 98 c0	 sets	 al
  00048	5e		 pop	 esi

; 108  : 			return true;
; 109  : 
; 110  : 		return false;	
; 111  : 	}

  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
??RNamedTitleSortFunc@@QBE_NABUtagNamedTitleSortInfo@@0@Z ENDP ; NamedTitleSortFunc::operator()
_TEXT	ENDS
PUBLIC	?GetInventorySubManual@ioEtcItem@@QBEHXZ	; ioEtcItem::GetInventorySubManual
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioetcitem.h
;	COMDAT ?GetInventorySubManual@ioEtcItem@@QBEHXZ
_TEXT	SEGMENT
?GetInventorySubManual@ioEtcItem@@QBEHXZ PROC		; ioEtcItem::GetInventorySubManual, COMDAT
; _this$ = ecx

; 435  : 	inline int     GetInventorySubManual() const { return m_iInventorySubManual; }

  00000	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
  00003	c3		 ret	 0
?GetInventorySubManual@ioEtcItem@@QBEHXZ ENDP		; ioEtcItem::GetInventorySubManual
_TEXT	ENDS
PUBLIC	?GetName@ioEtcItem@@QBEABVioHashString@@XZ	; ioEtcItem::GetName
; Function compile flags: /Ogsp
;	COMDAT ?GetName@ioEtcItem@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetName@ioEtcItem@@QBEABVioHashString@@XZ PROC		; ioEtcItem::GetName, COMDAT
; _this$ = ecx

; 465  : 	inline const ioHashString& GetName() const { return m_Name; }

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetName@ioEtcItem@@QBEABVioHashString@@XZ ENDP		; ioEtcItem::GetName
_TEXT	ENDS
PUBLIC	?GetIconName@ioEtcItem@@QBEABVioHashString@@XZ	; ioEtcItem::GetIconName
; Function compile flags: /Ogsp
;	COMDAT ?GetIconName@ioEtcItem@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetIconName@ioEtcItem@@QBEABVioHashString@@XZ PROC	; ioEtcItem::GetIconName, COMDAT
; _this$ = ecx

; 467  : 	inline const ioHashString& GetIconName() const { return m_IconName; }

  00000	8d 81 60 01 00
	00		 lea	 eax, DWORD PTR [ecx+352]
  00006	c3		 ret	 0
?GetIconName@ioEtcItem@@QBEABVioHashString@@XZ ENDP	; ioEtcItem::GetIconName
_TEXT	ENDS
PUBLIC	?GetEventCaller@PullDownEvent@@QBEPBVioPullDownList@@XZ ; PullDownEvent::GetEventCaller
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iopulldowneventlistener.h
;	COMDAT ?GetEventCaller@PullDownEvent@@QBEPBVioPullDownList@@XZ
_TEXT	SEGMENT
?GetEventCaller@PullDownEvent@@QBEPBVioPullDownList@@XZ PROC ; PullDownEvent::GetEventCaller, COMDAT
; _this$ = ecx

; 32   : 	const ioPullDownList* GetEventCaller() const { return pEventCaller; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetEventCaller@PullDownEvent@@QBEPBVioPullDownList@@XZ ENDP ; PullDownEvent::GetEventCaller
_TEXT	ENDS
PUBLIC	?IsPulldownClick@ClickPullDownEvent@@QBE_NXZ	; ClickPullDownEvent::IsPulldownClick
; Function compile flags: /Ogsp
;	COMDAT ?IsPulldownClick@ClickPullDownEvent@@QBE_NXZ
_TEXT	SEGMENT
?IsPulldownClick@ClickPullDownEvent@@QBE_NXZ PROC	; ClickPullDownEvent::IsPulldownClick, COMDAT
; _this$ = ecx

; 121  : 		if( NONE_SELECT != iClickIdx && NONE_SELECT == iClickImageIdx )

  00000	83 79 0c ff	 cmp	 DWORD PTR [ecx+12], -1
  00004	74 09		 je	 SHORT $LN1@IsPulldown
  00006	83 79 10 ff	 cmp	 DWORD PTR [ecx+16], -1
  0000a	75 03		 jne	 SHORT $LN1@IsPulldown

; 122  : 			return true;

  0000c	b0 01		 mov	 al, 1

; 125  : 	}

  0000e	c3		 ret	 0
$LN1@IsPulldown:

; 123  : 
; 124  : 		return false;

  0000f	32 c0		 xor	 al, al

; 125  : 	}

  00011	c3		 ret	 0
?IsPulldownClick@ClickPullDownEvent@@QBE_NXZ ENDP	; ClickPullDownEvent::IsPulldownClick
_TEXT	ENDS
PUBLIC	?GetUserNamedTitle@ioMyInfo@@QAEPAVioUserNamedTitle@@XZ ; ioMyInfo::GetUserNamedTitle
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomyinfo.h
;	COMDAT ?GetUserNamedTitle@ioMyInfo@@QAEPAVioUserNamedTitle@@XZ
_TEXT	SEGMENT
?GetUserNamedTitle@ioMyInfo@@QAEPAVioUserNamedTitle@@XZ PROC ; ioMyInfo::GetUserNamedTitle, COMDAT
; _this$ = ecx

; 646  : 	ioUserNamedTitle* GetUserNamedTitle() { return &m_pUserNamedTitle; }

  00000	8d 81 e8 02 00
	00		 lea	 eax, DWORD PTR [ecx+744]
  00006	c3		 ret	 0
?GetUserNamedTitle@ioMyInfo@@QAEPAVioUserNamedTitle@@XZ ENDP ; ioMyInfo::GetUserNamedTitle
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1512 : 		return (this->_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1513 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?empty@?$vector@UtagTextPiece@ioComplexStringPrinter@@V?$allocator@UtagTextPiece@ioComplexStringPrinter@@@std@@@std@@QBE_NXZ ; std::vector<ioComplexStringPrinter::tagTextPiece,std::allocator<ioComplexStringPrinter::tagTextPiece> >::empty
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?empty@?$vector@UtagTextPiece@ioComplexStringPrinter@@V?$allocator@UtagTextPiece@ioComplexStringPrinter@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UtagTextPiece@ioComplexStringPrinter@@V?$allocator@UtagTextPiece@ioComplexStringPrinter@@@std@@@std@@QBE_NXZ PROC ; std::vector<ioComplexStringPrinter::tagTextPiece,std::allocator<ioComplexStringPrinter::tagTextPiece> >::empty, COMDAT
; _this$ = ecx

; 889  : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	40		 inc	 eax

; 890  : 		}

  0000a	c3		 ret	 0
?empty@?$vector@UtagTextPiece@ioComplexStringPrinter@@V?$allocator@UtagTextPiece@ioComplexStringPrinter@@@std@@@std@@QBE_NXZ ENDP ; std::vector<ioComplexStringPrinter::tagTextPiece,std::allocator<ioComplexStringPrinter::tagTextPiece> >::empty
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2010 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2011 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2012 : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 2010 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2011 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2012 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 459  : 		}

  00000	c3		 ret	 0
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2004 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2005 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr@2
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2006 : 		}

  00008	c3		 ret	 0
$LN3@Myptr@2:

; 2004 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2005 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2006 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2016 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@2:
$LN3@Xlen@2:
  0000b	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
EXTRN	__imp_?_Xout_of_range@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2021 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN4@Xran:
$LN3@Xran:
  0000b	cc		 int	 3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1973 : 		{	// test if _Ptr points inside string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1974 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + this->_Mysize <= _Ptr)

  00003	83 7d 08 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  00007	74 2c		 je	 SHORT $LN2@Inside@2
  00009	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0000c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0000f	72 04		 jb	 SHORT $LN8@Inside@2
  00011	8b 01		 mov	 eax, DWORD PTR [ecx]
  00013	eb 02		 jmp	 SHORT $LN9@Inside@2
$LN8@Inside@2:
  00015	8b c1		 mov	 eax, ecx
$LN9@Inside@2:
  00017	39 45 08	 cmp	 DWORD PTR __Ptr$[ebp], eax
  0001a	72 19		 jb	 SHORT $LN2@Inside@2
  0001c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0001f	72 04		 jb	 SHORT $LN12@Inside@2
  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	eb 02		 jmp	 SHORT $LN13@Inside@2
$LN12@Inside@2:
  00025	8b c1		 mov	 eax, ecx
$LN13@Inside@2:
  00027	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0002a	03 c8		 add	 ecx, eax
  0002c	3b 4d 08	 cmp	 ecx, DWORD PTR __Ptr$[ebp]
  0002f	76 04		 jbe	 SHORT $LN2@Inside@2

; 1976 : 		else
; 1977 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	eb 02		 jmp	 SHORT $LN1@Inside@2
$LN2@Inside@2:

; 1975 : 			return (false);	// don't ask

  00035	32 c0		 xor	 al, al
$LN1@Inside@2:

; 1978 : 		}

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 220  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T508695 = -12						; size = 12
$T508699 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;

  00003	33 c0		 xor	 eax, eax
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 32   : 
; 33   : 	if (_Count <= 0)

  00008	39 45 08	 cmp	 DWORD PTR __Count$[ebp], eax

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000b	76 39		 jbe	 SHORT $LN5@Allocate@2

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000d	83 7d 08 ff	 cmp	 DWORD PTR __Count$[ebp], -1
  00011	77 0d		 ja	 SHORT $LN1@Allocate@2
  00013	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00016	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001b	59		 pop	 ecx
  0001c	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0001e	75 26		 jne	 SHORT $LN5@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00020	83 65 08 00	 and	 DWORD PTR $T508699[ebp], 0
  00024	8d 45 08	 lea	 eax, DWORD PTR $T508699[ebp]
  00027	50		 push	 eax
  00028	8d 4d f4	 lea	 ecx, DWORD PTR $T508695[ebp]
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00031	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00036	8d 45 f4	 lea	 eax, DWORD PTR $T508695[ebp]
  00039	50		 push	 eax
  0003a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T508695[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00041	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:

; 40   : 	}

  00046	c9		 leave
  00047	c3		 ret	 0
$LN9@Allocate@2:
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??0NamedTitlePremiumSelectWnd@@QAE@XZ		; NamedTitlePremiumSelectWnd::NamedTitlePremiumSelectWnd
EXTRN	__imp_??0ioWnd@@QAE@XZ:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\namedtitlepremiumselectwnd.cpp
xdata$x	SEGMENT
__unwindtable$??0NamedTitlePremiumSelectWnd@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0NamedTitlePremiumSelectWnd@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0NamedTitlePremiumSelectWnd@@QAE@XZ$1
__ehfuncinfo$??0NamedTitlePremiumSelectWnd@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0NamedTitlePremiumSelectWnd@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0NamedTitlePremiumSelectWnd@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0NamedTitlePremiumSelectWnd@@QAE@XZ PROC		; NamedTitlePremiumSelectWnd::NamedTitlePremiumSelectWnd, COMDAT
; _this$ = ecx

; 8    : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0NamedTitlePremiumSelectWnd@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioWnd@@QAE@XZ
  00017	c7 86 60 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+352], OFFSET ??_7PullDownEventListener@@6B@
  00021	33 db		 xor	 ebx, ebx
  00023	8d 8e 74 01 00
	00		 lea	 ecx, DWORD PTR [esi+372]
  00029	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NamedTitlePremiumSelectWnd@@6BioWnd@@@
  00032	c7 86 60 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+352], OFFSET ??_7NamedTitlePremiumSelectWnd@@6BPullDownEventListener@@@
  0003c	e8 00 00 00 00	 call	 ??0ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::ioComplexStringPrinter

; 9    : 	m_pIcon = NULL;
; 10   : 	m_pBackEffect = NULL;
; 11   : 	m_pManual = NULL;	
; 12   : 	m_ItemTitle.ClearList();

  00041	8d 8e 74 01 00
	00		 lea	 ecx, DWORD PTR [esi+372]
  00047	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0004b	89 9e 68 01 00
	00		 mov	 DWORD PTR [esi+360], ebx
  00051	89 9e 6c 01 00
	00		 mov	 DWORD PTR [esi+364], ebx
  00057	89 9e 70 01 00
	00		 mov	 DWORD PTR [esi+368], ebx
  0005d	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList

; 13   : 	m_dwCode = 0;

  00062	89 9e 94 01 00
	00		 mov	 DWORD PTR [esi+404], ebx

; 14   : }

  00068	8b c6		 mov	 eax, esi
  0006a	e8 00 00 00 00	 call	 __EH_epilog3
  0006f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0NamedTitlePremiumSelectWnd@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
__unwindfunclet$??0NamedTitlePremiumSelectWnd@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	81 c1 74 01 00
	00		 add	 ecx, 372		; 00000174H
  00012	e9 00 00 00 00	 jmp	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
__ehhandler$??0NamedTitlePremiumSelectWnd@@QAE@XZ:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0NamedTitlePremiumSelectWnd@@QAE@XZ
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0NamedTitlePremiumSelectWnd@@QAE@XZ ENDP		; NamedTitlePremiumSelectWnd::NamedTitlePremiumSelectWnd
; Function compile flags: /Ogsp
;	COMDAT ??_GNamedTitlePremiumSelectWnd@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GNamedTitlePremiumSelectWnd@@UAEPAXI@Z PROC		; NamedTitlePremiumSelectWnd::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1NamedTitlePremiumSelectWnd@@UAE@XZ ; NamedTitlePremiumSelectWnd::~NamedTitlePremiumSelectWnd
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@3
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@3:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GNamedTitlePremiumSelectWnd@@UAEPAXI@Z ENDP		; NamedTitlePremiumSelectWnd::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@43310000
PUBLIC	__real@3f59999a
PUBLIC	?ShowSelectWnd@NamedTitlePremiumSelectWnd@@QAEXK@Z ; NamedTitlePremiumSelectWnd::ShowSelectWnd
EXTRN	__imp_?ShowWnd@ioWnd@@QAEXXZ:PROC
EXTRN	__imp_?SetPrintTextStyle@ioUITitle@@QAEXW4PrintTextStyle@1@@Z:PROC
EXTRN	__imp_?SetWidthCutSize@ioUITitle@@QAEXM@Z:PROC
EXTRN	__imp_?GetTitle@ioWnd@@QBEPAVioUITitle@@XZ:PROC
EXTRN	__imp_?CreateImageByFullName@ioUIImageSetManager@@QAEPAVioUIRenderImage@@ABVioHashString@@_N@Z:PROC
EXTRN	__imp_?GetSingleton@ioUIImageSetManager@@SAAAV1@XZ:PROC
EXTRN	?FindEtcItem@ioEtcItemManager@@QAEPAVioEtcItem@@K@Z:PROC ; ioEtcItemManager::FindEtcItem
;	COMDAT __real@43310000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioetcitem.h
CONST	SEGMENT
__real@43310000 DD 043310000r			; 177
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\namedtitlepremiumselectwnd.cpp
CONST	ENDS
;	COMDAT ?ShowSelectWnd@NamedTitlePremiumSelectWnd@@QAEXK@Z
_TEXT	SEGMENT
_dwEtcItemCode$ = 8					; size = 4
?ShowSelectWnd@NamedTitlePremiumSelectWnd@@QAEXK@Z PROC	; NamedTitlePremiumSelectWnd::ShowSelectWnd, COMDAT
; _this$ = ecx

; 150  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 151  : 	m_dwEtcItemCode = dwEtcItemCode;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwEtcItemCode$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 152  : 
; 153  : 	SAFEDELETE(m_pIcon);

  0000a	8b 8e 68 01 00
	00		 mov	 ecx, DWORD PTR [esi+360]
  00010	57		 push	 edi
  00011	33 ff		 xor	 edi, edi
  00013	89 86 64 01 00
	00		 mov	 DWORD PTR [esi+356], eax
  00019	3b cf		 cmp	 ecx, edi
  0001b	74 0d		 je	 SHORT $LN4@ShowSelect
  0001d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001f	6a 01		 push	 1
  00021	ff 50 40	 call	 DWORD PTR [eax+64]
  00024	89 be 68 01 00
	00		 mov	 DWORD PTR [esi+360], edi
$LN4@ShowSelect:

; 154  : 	HideChildWnd( ID_LIST_WND );

  0002a	57		 push	 edi
  0002b	6a 64		 push	 100			; 00000064H
  0002d	8b ce		 mov	 ecx, esi
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z

; 155  : 	m_dwCode = 0;
; 156  : 
; 157  : 	ioEtcItem *pEtcItem = g_EtcItemMgr.FindEtcItem( m_dwEtcItemCode );

  00035	ff b6 64 01 00
	00		 push	 DWORD PTR [esi+356]
  0003b	89 be 94 01 00
	00		 mov	 DWORD PTR [esi+404], edi
  00041	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_Singleton@?$Singleton@VioEtcItemManager@@@@1PAVioEtcItemManager@@A ; Singleton<ioEtcItemManager>::ms_Singleton
  00047	e8 00 00 00 00	 call	 ?FindEtcItem@ioEtcItemManager@@QAEPAVioEtcItem@@K@Z ; ioEtcItemManager::FindEtcItem
  0004c	8b d8		 mov	 ebx, eax

; 158  : 	if( !pEtcItem ) 

  0004e	3b df		 cmp	 ebx, edi
  00050	0f 84 af 00 00
	00		 je	 $LN5@ShowSelect

; 159  : 		return;
; 160  : 
; 161  : 	m_pIcon = g_UIImageSetMgr.CreateImageByFullName( pEtcItem->GetIconName() );

  00056	8d 83 60 01 00
	00		 lea	 eax, DWORD PTR [ebx+352]
  0005c	57		 push	 edi
  0005d	50		 push	 eax
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioUIImageSetManager@@SAAAV1@XZ
  00064	8b c8		 mov	 ecx, eax
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CreateImageByFullName@ioUIImageSetManager@@QAEPAVioUIRenderImage@@ABVioHashString@@_N@Z

; 162  : 
; 163  : 	m_ItemTitle.ClearList();

  0006c	8d be 74 01 00
	00		 lea	 edi, DWORD PTR [esi+372]
  00072	8b cf		 mov	 ecx, edi
  00074	89 86 68 01 00
	00		 mov	 DWORD PTR [esi+360], eax
  0007a	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList

; 164  : 	m_ItemTitle.SetTextStyle( TS_NORMAL );

  0007f	6a 00		 push	 0
  00081	8b cf		 mov	 ecx, edi
  00083	e8 00 00 00 00	 call	 ?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z ; ioComplexStringPrinter::SetTextStyle

; 165  : 	m_ItemTitle.SetBkColor( 0, 0, 0 );	

  00088	33 c0		 xor	 eax, eax
  0008a	50		 push	 eax
  0008b	50		 push	 eax
  0008c	50		 push	 eax
  0008d	8b cf		 mov	 ecx, edi
  0008f	e8 00 00 00 00	 call	 ?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z ; ioComplexStringPrinter::SetBkColor

; 166  : 	m_ItemTitle.SetTextColor( TCT_DEFAULT_DARKGRAY );

  00094	68 3a 3a 3a ff	 push	 -12961222		; ff3a3a3aH
  00099	8b cf		 mov	 ecx, edi
  0009b	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 167  : 	m_ItemTitle.AddTextPiece( FONT_SIZE_17, pEtcItem->GetName().c_str() );

  000a0	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  000a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  000b1	50		 push	 eax
  000b2	51		 push	 ecx
  000b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b8	57		 push	 edi
  000b9	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAAXMPBDZZ ; ioComplexStringPrinter::AddTextPiece
  000be	83 c4 0c	 add	 esp, 12			; 0000000cH

; 168  : 
; 169  : 	ioWnd *pSelectBtn = FindChildWnd( ID_SELECT_BTN );

  000c1	6a 02		 push	 2
  000c3	8b ce		 mov	 ecx, esi
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z

; 170  : 	if( pSelectBtn )

  000cb	85 c0		 test	 eax, eax
  000cd	74 2e		 je	 SHORT $LN1@ShowSelect

; 171  : 	{
; 172  : 		ioUITitle *pUITitle = pSelectBtn->GetTitle();

  000cf	8b c8		 mov	 ecx, eax
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetTitle@ioWnd@@QBEPAVioUITitle@@XZ
  000d7	8b f8		 mov	 edi, eax

; 173  : 		if( pUITitle )

  000d9	85 ff		 test	 edi, edi
  000db	74 20		 je	 SHORT $LN1@ShowSelect

; 174  : 		{
; 175  : 			pUITitle->SetWidthCutSize( 177.0f );

  000dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43310000
  000e5	51		 push	 ecx
  000e6	8b cf		 mov	 ecx, edi
  000e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWidthCutSize@ioUITitle@@QAEXM@Z

; 176  : 			pUITitle->SetPrintTextStyle( ioUITitle::PTS_WIDTHCUT );

  000f3	6a 02		 push	 2
  000f5	8b cf		 mov	 ecx, edi
  000f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetPrintTextStyle@ioUITitle@@QAEXW4PrintTextStyle@1@@Z
$LN1@ShowSelect:

; 177  : 		}
; 178  : 	}
; 179  : 
; 180  : 	ShowWnd();

  000fd	8b ce		 mov	 ecx, esi
  000ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowWnd@ioWnd@@QAEXXZ
$LN5@ShowSelect:
  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx

; 181  : }

  00108	5d		 pop	 ebp
  00109	c2 04 00	 ret	 4
?ShowSelectWnd@NamedTitlePremiumSelectWnd@@QAEXK@Z ENDP	; NamedTitlePremiumSelectWnd::ShowSelectWnd
_TEXT	ENDS
PUBLIC	__real@434c0000
PUBLIC	?PrintManual@NamedTitlePremiumSelectWnd@@IAEXHHM@Z ; NamedTitlePremiumSelectWnd::PrintManual
EXTRN	?PrintFullTextWidthCut@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@ME@Z:PROC ; ioComplexStringPrinter::PrintFullTextWidthCut
;	COMDAT __real@434c0000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioetcitem.h
CONST	SEGMENT
__real@434c0000 DD 0434c0000r			; 204
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PrintManual@NamedTitlePremiumSelectWnd@@IAEXHHM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PrintManual@NamedTitlePremiumSelectWnd@@IAEXHHM@Z$0
__ehfuncinfo$?PrintManual@NamedTitlePremiumSelectWnd@@IAEXHHM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PrintManual@NamedTitlePremiumSelectWnd@@IAEXHHM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\namedtitlepremiumselectwnd.cpp
xdata$x	ENDS
;	COMDAT ?PrintManual@NamedTitlePremiumSelectWnd@@IAEXHHM@Z
_TEXT	SEGMENT
_kPrinter$ = -48					; size = 32
_iMaxLine$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
tv196 = 8						; size = 4
_nXPos$ = 8						; size = 4
_nYPos$ = 12						; size = 4
_fScale$ = 16						; size = 4
?PrintManual@NamedTitlePremiumSelectWnd@@IAEXHHM@Z PROC	; NamedTitlePremiumSelectWnd::PrintManual, COMDAT
; _this$ = ecx

; 186  : {

  00000	6a 24		 push	 36			; 00000024H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?PrintManual@NamedTitlePremiumSelectWnd@@IAEXHHM@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 187  : 	if( !m_pManual )

  0000e	83 be 70 01 00
	00 00		 cmp	 DWORD PTR [esi+368], 0
  00015	0f 84 c9 00 00
	00		 je	 $LN6@PrintManua

; 188  : 		return;
; 189  : 
; 190  : 	ioEtcItem *pItem = g_EtcItemMgr.FindEtcItem( m_dwEtcItemCode );

  0001b	ff b6 64 01 00
	00		 push	 DWORD PTR [esi+356]
  00021	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_Singleton@?$Singleton@VioEtcItemManager@@@@1PAVioEtcItemManager@@A ; Singleton<ioEtcItemManager>::ms_Singleton
  00027	e8 00 00 00 00	 call	 ?FindEtcItem@ioEtcItemManager@@QAEPAVioEtcItem@@K@Z ; ioEtcItemManager::FindEtcItem

; 191  : 	if( !pItem ) 

  0002c	85 c0		 test	 eax, eax
  0002e	0f 84 b0 00 00
	00		 je	 $LN6@PrintManua

; 192  : 		return;
; 193  : 
; 194  : 	int iSubManual = pItem->GetInventorySubManual() - 1;

  00034	8b 78 4c	 mov	 edi, DWORD PTR [eax+76]

; 195  : 	ioComplexStringPrinter kPrinter;

  00037	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  0003a	4f		 dec	 edi
  0003b	e8 00 00 00 00	 call	 ??0ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::ioComplexStringPrinter

; 196  : 	int iMaxLine = m_pManual->GetMaxLine( iSubManual );

  00040	8b 8e 70 01 00
	00		 mov	 ecx, DWORD PTR [esi+368]
  00046	8b 01		 mov	 eax, DWORD PTR [ecx]
  00048	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	57		 push	 edi
  0004d	ff 50 08	 call	 DWORD PTR [eax+8]

; 197  : 	for(int iLine = 1; iLine < iMaxLine; iLine++)

  00050	33 db		 xor	 ebx, ebx
  00052	43		 inc	 ebx
  00053	89 45 f0	 mov	 DWORD PTR _iMaxLine$[ebp], eax
  00056	3b c3		 cmp	 eax, ebx
  00058	7e 7e		 jle	 SHORT $LN1@PrintManua
  0005a	66 0f 6e 45 08	 movd	 xmm0, DWORD PTR _nXPos$[ebp]
  0005f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00062	f3 0f 11 45 08	 movss	 DWORD PTR tv196[ebp], xmm0
$LL3@PrintManua:

; 198  : 	{
; 199  : 		m_pManual->SetPrinter( iSubManual, iLine, fScale, kPrinter);

  00067	8b 8e 70 01 00
	00		 mov	 ecx, DWORD PTR [esi+368]
  0006d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fScale$[ebp]
  00072	8b 01		 mov	 eax, DWORD PTR [ecx]
  00074	8d 55 d0	 lea	 edx, DWORD PTR _kPrinter$[ebp]
  00077	52		 push	 edx
  00078	51		 push	 ecx
  00079	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007e	53		 push	 ebx
  0007f	57		 push	 edi
  00080	ff 50 10	 call	 DWORD PTR [eax+16]

; 200  : 		nYPos += m_pManual->GetSpaceLine( iSubManual, iLine);

  00083	8b 8e 70 01 00
	00		 mov	 ecx, DWORD PTR [esi+368]
  00089	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008b	53		 push	 ebx
  0008c	57		 push	 edi
  0008d	ff 50 0c	 call	 DWORD PTR [eax+12]

; 201  : 		kPrinter.PrintFullTextWidthCut( nXPos, nYPos, TAT_LEFT, DESC_WIDTH );

  00090	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@434c0000
  00098	01 45 0c	 add	 DWORD PTR _nYPos$[ebp], eax
  0009b	68 ff 00 00 00	 push	 255			; 000000ffH
  000a0	51		 push	 ecx
  000a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a6	66 0f 6e 45 0c	 movd	 xmm0, DWORD PTR _nYPos$[ebp]
  000ab	6a 00		 push	 0
  000ad	51		 push	 ecx
  000ae	51		 push	 ecx
  000af	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000b2	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000b8	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv196[ebp]
  000bd	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  000c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c5	e8 00 00 00 00	 call	 ?PrintFullTextWidthCut@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@ME@Z ; ioComplexStringPrinter::PrintFullTextWidthCut

; 202  : 		kPrinter.ClearList();

  000ca	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  000cd	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList
  000d2	43		 inc	 ebx
  000d3	3b 5d f0	 cmp	 ebx, DWORD PTR _iMaxLine$[ebp]
  000d6	7c 8f		 jl	 SHORT $LL3@PrintManua
$LN1@PrintManua:

; 203  : 	}
; 204  : }

  000d8	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000dc	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  000df	e8 00 00 00 00	 call	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
$LN6@PrintManua:
  000e4	e8 00 00 00 00	 call	 __EH_epilog3
  000e9	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PrintManual@NamedTitlePremiumSelectWnd@@IAEXHHM@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
__ehhandler$?PrintManual@NamedTitlePremiumSelectWnd@@IAEXHHM@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PrintManual@NamedTitlePremiumSelectWnd@@IAEXHHM@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PrintManual@NamedTitlePremiumSelectWnd@@IAEXHHM@Z ENDP	; NamedTitlePremiumSelectWnd::PrintManual
PUBLIC	??0?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE@V?$allocator@UtagNamedTitleSortInfo@@@1@@Z ; std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE@V?$allocator@UtagNamedTitleSortInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE@V?$allocator@UtagNamedTitleSortInfo@@@1@@Z PROC ; std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE@V?$allocator@UtagNamedTitleSortInfo@@@1@@Z ENDP ; std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QBEIXZ ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IBEII@Z ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IBEII@Z PROC ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 14		 push	 20			; 00000014H
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba cc cc cc 0c	 mov	 edx, 214748364		; 0cccccccH
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00026	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Grow_to@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IBEII@Z ENDP ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@QAE@PAUtagNamedTitleSortInfo@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@QAE@PAUtagNamedTitleSortInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@QAE@PAUtagNamedTitleSortInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@QAE@PAUtagNamedTitleSortInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEPAUtagNamedTitleSortInfo@@I@Z ; std::allocator<tagNamedTitleSortInfo>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEPAUtagNamedTitleSortInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEPAUtagNamedTitleSortInfo@@I@Z PROC ; std::allocator<tagNamedTitleSortInfo>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UtagNamedTitleSortInfo@@@std@@YAPAUtagNamedTitleSortInfo@@IPAU1@@Z ; std::_Allocate<tagNamedTitleSortInfo>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEPAUtagNamedTitleSortInfo@@I@Z ENDP ; std::allocator<tagNamedTitleSortInfo>::allocate
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z	; operator==<12>
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iohashstring.h
;	COMDAT ??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z PROC	; operator==<12>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 32 01 00
	00		 je	 $LN96@operator@2
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 1b 01 00
	00		 je	 $LN95@operator@2
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 04 01 00
	00		 je	 $LN94@operator@2
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 ec 00 00
	00		 je	 $LN93@operator@2
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 d5 00 00
	00		 je	 $LN92@operator@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 be 00 00
	00		 je	 $LN91@operator@2
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 a8 00 00
	00		 je	 $LN90@operator@2
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 92 00 00
	00		 je	 $LN89@operator@2
  00099	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009c	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  0009f	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a2	84 d2		 test	 dl, dl
  000a4	74 7f		 je	 SHORT $LN88@operator@2
  000a6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a9	88 55 f4	 mov	 BYTE PTR __t$[ebp+8], dl
  000ac	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000af	84 d2		 test	 dl, dl
  000b1	74 6c		 je	 SHORT $LN87@operator@2
  000b3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b6	88 55 f5	 mov	 BYTE PTR __t$[ebp+9], dl
  000b9	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000bc	84 d2		 test	 dl, dl
  000be	74 5a		 je	 SHORT $LN86@operator@2
  000c0	32 d1		 xor	 dl, cl
  000c2	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000c6	88 55 f6	 mov	 BYTE PTR __t$[ebp+10], dl
  000c9	0f 84 89 00 00
	00		 je	 $LN1@operator@2
  000cf	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d2	84 d2		 test	 dl, dl
  000d4	74 3e		 je	 SHORT $LN84@operator@2
  000d6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d9	88 55 f8	 mov	 BYTE PTR __t$[ebp+12], dl
  000dc	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000df	84 d2		 test	 dl, dl
  000e1	74 2b		 je	 SHORT $LN83@operator@2
  000e3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e6	88 55 f9	 mov	 BYTE PTR __t$[ebp+13], dl
  000e9	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000ec	84 d2		 test	 dl, dl
  000ee	74 19		 je	 SHORT $LN82@operator@2
  000f0	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000f3	32 d1		 xor	 dl, cl
  000f5	88 55 fa	 mov	 BYTE PTR __t$[ebp+14], dl
  000f8	84 c0		 test	 al, al
  000fa	74 07		 je	 SHORT $LN81@operator@2
  000fc	34 ea		 xor	 al, -22			; ffffffeaH
  000fe	88 45 fb	 mov	 BYTE PTR __t$[ebp+15], al
  00101	eb 55		 jmp	 SHORT $LN1@operator@2
$LN81@operator@2:
  00103	c6 45 fb ea	 mov	 BYTE PTR __t$[ebp+15], -22 ; ffffffeaH
  00107	eb 4f		 jmp	 SHORT $LN1@operator@2
$LN82@operator@2:
  00109	88 4d fa	 mov	 BYTE PTR __t$[ebp+14], cl
  0010c	eb 4a		 jmp	 SHORT $LN1@operator@2
$LN83@operator@2:
  0010e	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+13], -20 ; ffffffecH
  00112	eb 44		 jmp	 SHORT $LN1@operator@2
$LN84@operator@2:
  00114	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  00118	eb 3e		 jmp	 SHORT $LN1@operator@2
$LN86@operator@2:
  0011a	88 4d f6	 mov	 BYTE PTR __t$[ebp+10], cl
  0011d	eb 39		 jmp	 SHORT $LN1@operator@2
$LN87@operator@2:
  0011f	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  00123	eb 33		 jmp	 SHORT $LN1@operator@2
$LN88@operator@2:
  00125	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  00129	eb 2d		 jmp	 SHORT $LN1@operator@2
$LN89@operator@2:
  0012b	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  0012f	eb 27		 jmp	 SHORT $LN1@operator@2
$LN90@operator@2:
  00131	88 4d f2	 mov	 BYTE PTR __t$[ebp+6], cl
  00134	eb 22		 jmp	 SHORT $LN1@operator@2
$LN91@operator@2:
  00136	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  0013a	eb 1c		 jmp	 SHORT $LN1@operator@2
$LN92@operator@2:
  0013c	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00140	eb 16		 jmp	 SHORT $LN1@operator@2
$LN93@operator@2:
  00142	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00146	eb 10		 jmp	 SHORT $LN1@operator@2
$LN94@operator@2:
  00148	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  0014c	eb 0a		 jmp	 SHORT $LN1@operator@2
$LN95@operator@2:
  0014e	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  00152	eb 04		 jmp	 SHORT $LN1@operator@2
$LN96@operator@2:
  00154	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@2:
  00158	6a 02		 push	 2
  0015a	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  0015d	c6 45 f7 00	 mov	 BYTE PTR __t$[ebp+11], 0
  00161	5a		 pop	 edx
$LL104@operator@2:
  00162	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00168	83 c0 04	 add	 eax, 4
  0016b	4a		 dec	 edx
  0016c	75 f4		 jne	 SHORT $LL104@operator@2
  0016e	6a 08		 push	 8
  00170	58		 pop	 eax
$LL101@operator@2:
  00171	8b c8		 mov	 ecx, eax
  00173	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00179	79 05		 jns	 SHORT $LN115@operator@2
  0017b	49		 dec	 ecx
  0017c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0017f	41		 inc	 ecx
$LN115@operator@2:
  00180	b2 ed		 mov	 dl, -19			; ffffffedH
  00182	2a d1		 sub	 dl, cl
  00184	30 54 05 ec	 xor	 BYTE PTR __t$[ebp+eax], dl
  00188	40		 inc	 eax
  00189	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0018c	7c e3		 jl	 SHORT $LL101@operator@2
  0018e	8b cf		 mov	 ecx, edi
  00190	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  00193	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@2:
  00199	8a 08		 mov	 cl, BYTE PTR [eax]
  0019b	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0019d	75 1a		 jne	 SHORT $LN112@operator@2
  0019f	84 c9		 test	 cl, cl
  001a1	74 12		 je	 SHORT $LN113@operator@2
  001a3	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  001a6	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  001a9	75 0e		 jne	 SHORT $LN112@operator@2
  001ab	83 c0 02	 add	 eax, 2
  001ae	83 c6 02	 add	 esi, 2
  001b1	84 c9		 test	 cl, cl
  001b3	75 e4		 jne	 SHORT $LL111@operator@2
$LN113@operator@2:
  001b5	33 c0		 xor	 eax, eax
  001b7	eb 05		 jmp	 SHORT $LN114@operator@2
$LN112@operator@2:
  001b9	1b c0		 sbb	 eax, eax
  001bb	83 d8 ff	 sbb	 eax, -1
$LN114@operator@2:
  001be	33 c9		 xor	 ecx, ecx
  001c0	85 c0		 test	 eax, eax
  001c2	0f 94 c0	 sete	 al

; 148  : }

  001c5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c8	5f		 pop	 edi
  001c9	33 cd		 xor	 ecx, ebp
  001cb	5e		 pop	 esi
  001cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d1	c9		 leave
  001d2	c3		 ret	 0
??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z ENDP	; operator==<12>
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >::operator-
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??G?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >::operator-, COMDAT
; _this$ = ecx

; 190  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 191  : 		_Compat(_Right);
; 192  : 		return (this->_Ptr - _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	6a 14		 push	 20			; 00000014H
  0000c	99		 cdq
  0000d	59		 pop	 ecx
  0000e	f7 f9		 idiv	 ecx

; 193  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??G?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >::operator-
_TEXT	ENDS
PUBLIC	??$_Unchecked@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@YAPAUtagNamedTitleSortInfo@@V?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Unchecked@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@YAPAUtagNamedTitleSortInfo@@V?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
??$_Unchecked@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@YAPAUtagNamedTitleSortInfo@@V?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >, COMDAT

; 393  : 	{	// convert to unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 394  : 	return (_Iter._Unchecked());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iter$[ebp]

; 395  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@YAPAUtagNamedTitleSortInfo@@V?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >
_TEXT	ENDS
PUBLIC	??$construct@AAUtagNamedTitleSortInfo@@@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@AAU2@@Z ; std::allocator<tagNamedTitleSortInfo>::construct<tagNamedTitleSortInfo &>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@AAUtagNamedTitleSortInfo@@@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUtagNamedTitleSortInfo@@@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAUtagNamedTitleSortInfo@@@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUtagNamedTitleSortInfo@@@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@AAUtagNamedTitleSortInfo@@@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@AAU2@@Z
_TEXT	SEGMENT
$T508849 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUtagNamedTitleSortInfo@@@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@AAU2@@Z PROC ; std::allocator<tagNamedTitleSortInfo>::construct<tagNamedTitleSortInfo &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$construct@AAUtagNamedTitleSortInfo@@@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@AAU2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	89 45 f0	 mov	 DWORD PTR $T508849[ebp], eax
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c0		 test	 eax, eax
  00018	74 14		 je	 SHORT $LN3@construct
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0001d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001f	83 c1 04	 add	 ecx, 4
  00022	51		 push	 ecx
  00023	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00026	89 10		 mov	 DWORD PTR [eax], edx
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
$LN3@construct:

; 209  : 		}

  0002e	e8 00 00 00 00	 call	 __EH_epilog3
  00033	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUtagNamedTitleSortInfo@@@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@AAU2@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T508849[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$construct@AAUtagNamedTitleSortInfo@@@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@AAU2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUtagNamedTitleSortInfo@@@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@AAU2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUtagNamedTitleSortInfo@@@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@AAU2@@Z ENDP ; std::allocator<tagNamedTitleSortInfo>::construct<tagNamedTitleSortInfo &>
PUBLIC	??$_Construct@UtagNamedTitleSortInfo@@ABU1@@std@@YAXPAUtagNamedTitleSortInfo@@ABU1@@Z ; std::_Construct<tagNamedTitleSortInfo,tagNamedTitleSortInfo const &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??$_Construct@UtagNamedTitleSortInfo@@ABU1@@std@@YAXPAUtagNamedTitleSortInfo@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UtagNamedTitleSortInfo@@ABU1@@std@@YAXPAUtagNamedTitleSortInfo@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UtagNamedTitleSortInfo@@ABU1@@std@@YAXPAUtagNamedTitleSortInfo@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UtagNamedTitleSortInfo@@ABU1@@std@@YAXPAUtagNamedTitleSortInfo@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UtagNamedTitleSortInfo@@ABU1@@std@@YAXPAUtagNamedTitleSortInfo@@ABU1@@Z
_TEXT	SEGMENT
$T508872 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UtagNamedTitleSortInfo@@ABU1@@std@@YAXPAUtagNamedTitleSortInfo@@ABU1@@Z PROC ; std::_Construct<tagNamedTitleSortInfo,tagNamedTitleSortInfo const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@UtagNamedTitleSortInfo@@ABU1@@std@@YAXPAUtagNamedTitleSortInfo@@ABU1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	89 45 08	 mov	 DWORD PTR __Vptr$[ebp], eax

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 45 f0	 mov	 DWORD PTR $T508872[ebp], eax
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c0		 test	 eax, eax
  0001b	74 14		 je	 SHORT $LN3@Construct
  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  00020	8b 11		 mov	 edx, DWORD PTR [ecx]
  00022	83 c1 04	 add	 ecx, 4
  00025	51		 push	 ecx
  00026	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00029	89 10		 mov	 DWORD PTR [eax], edx
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
$LN3@Construct:

; 49   : 	}

  00031	e8 00 00 00 00	 call	 __EH_epilog3
  00036	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UtagNamedTitleSortInfo@@ABU1@@std@@YAXPAUtagNamedTitleSortInfo@@ABU1@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T508872[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@UtagNamedTitleSortInfo@@ABU1@@std@@YAXPAUtagNamedTitleSortInfo@@ABU1@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UtagNamedTitleSortInfo@@ABU1@@std@@YAXPAUtagNamedTitleSortInfo@@ABU1@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UtagNamedTitleSortInfo@@ABU1@@std@@YAXPAUtagNamedTitleSortInfo@@ABU1@@Z ENDP ; std::_Construct<tagNamedTitleSortInfo,tagNamedTitleSortInfo const &>
PUBLIC	??$?0AAPAUtagNamedTitleSortInfo@@AAPAU0@@?$pair@PAUtagNamedTitleSortInfo@@PAU1@@std@@QAE@AAPAUtagNamedTitleSortInfo@@0@Z ; std::pair<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *>::pair<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *><tagNamedTitleSortInfo * &,tagNamedTitleSortInfo * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0AAPAUtagNamedTitleSortInfo@@AAPAU0@@?$pair@PAUtagNamedTitleSortInfo@@PAU1@@std@@QAE@AAPAUtagNamedTitleSortInfo@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAUtagNamedTitleSortInfo@@AAPAU0@@?$pair@PAUtagNamedTitleSortInfo@@PAU1@@std@@QAE@AAPAUtagNamedTitleSortInfo@@0@Z PROC ; std::pair<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *>::pair<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *><tagNamedTitleSortInfo * &,tagNamedTitleSortInfo * &>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00011	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 248  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAPAUtagNamedTitleSortInfo@@AAPAU0@@?$pair@PAUtagNamedTitleSortInfo@@PAU1@@std@@QAE@AAPAUtagNamedTitleSortInfo@@0@Z ENDP ; std::pair<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *>::pair<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *><tagNamedTitleSortInfo * &,tagNamedTitleSortInfo * &>
_TEXT	ENDS
PUBLIC	??$_Destroy@UtagNamedTitleSortInfo@@@std@@YAXPAUtagNamedTitleSortInfo@@@Z ; std::_Destroy<tagNamedTitleSortInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UtagNamedTitleSortInfo@@@std@@YAXPAUtagNamedTitleSortInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UtagNamedTitleSortInfo@@@std@@YAXPAUtagNamedTitleSortInfo@@@Z PROC ; std::_Destroy<tagNamedTitleSortInfo>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	83 c1 04	 add	 ecx, 4

; 64   : 	}

  00009	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  0000a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Destroy@UtagNamedTitleSortInfo@@@std@@YAXPAUtagNamedTitleSortInfo@@@Z ENDP ; std::_Destroy<tagNamedTitleSortInfo>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@$$QAU3@@Z ; std::allocator<tagNamedTitleSortInfo>::construct
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@$$QAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@$$QAU3@@Z$0
__ehfuncinfo$?construct@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@$$QAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@$$QAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@$$QAU3@@Z
_TEXT	SEGMENT
$T508929 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@$$QAU3@@Z PROC ; std::allocator<tagNamedTitleSortInfo>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?construct@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@$$QAU3@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	89 45 f0	 mov	 DWORD PTR $T508929[ebp], eax
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c0		 test	 eax, eax
  00018	74 14		 je	 SHORT $LN3@construct@2
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0001d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001f	83 c1 04	 add	 ecx, 4
  00022	51		 push	 ecx
  00023	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00026	89 10		 mov	 DWORD PTR [eax], edx
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
$LN3@construct@2:

; 203  : 		}

  0002e	e8 00 00 00 00	 call	 __EH_epilog3
  00033	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@$$QAU3@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T508929[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$?construct@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@$$QAU3@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@$$QAU3@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@$$QAU3@@Z ENDP ; std::allocator<tagNamedTitleSortInfo>::construct
PUBLIC	??$swap@UtagNamedTitleSortInfo@@@std@@YAXAAUtagNamedTitleSortInfo@@0@Z ; std::swap<tagNamedTitleSortInfo>
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\namedtitlepremiumselectwnd.cpp
xdata$x	SEGMENT
__unwindtable$??$swap@UtagNamedTitleSortInfo@@@std@@YAXAAUtagNamedTitleSortInfo@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$swap@UtagNamedTitleSortInfo@@@std@@YAXAAUtagNamedTitleSortInfo@@0@Z$0
__ehfuncinfo$??$swap@UtagNamedTitleSortInfo@@@std@@YAXAAUtagNamedTitleSortInfo@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$swap@UtagNamedTitleSortInfo@@@std@@YAXAAUtagNamedTitleSortInfo@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	ENDS
;	COMDAT ??$swap@UtagNamedTitleSortInfo@@@std@@YAXAAUtagNamedTitleSortInfo@@0@Z
_TEXT	SEGMENT
__Tmp$ = -32						; size = 20
__$EHRec$ = -12						; size = 12
tv133 = 8						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@UtagNamedTitleSortInfo@@@std@@YAXAAUtagNamedTitleSortInfo@@0@Z PROC ; std::swap<tagNamedTitleSortInfo>, COMDAT

; 101  : 	{	// exchange values stored at _Left and _Right

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$swap@UtagNamedTitleSortInfo@@@std@@YAXAAUtagNamedTitleSortInfo@@0@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 102  : 	_Ty _Tmp = _Move(_Left);

  0000c	8b 75 08	 mov	 esi, DWORD PTR __Left$[ebp]
  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  00014	53		 push	 ebx
  00015	8d 4d e4	 lea	 ecx, DWORD PTR __Tmp$[ebp+4]
  00018	89 45 e0	 mov	 DWORD PTR __Tmp$[ebp], eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z

; 103  : 	_Left = _Move(_Right);

  00021	8b 7d 0c	 mov	 edi, DWORD PTR __Right$[ebp]
  00024	8b 07		 mov	 eax, DWORD PTR [edi]
  00026	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002a	89 06		 mov	 DWORD PTR [esi], eax
  0002c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  00032	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00035	50		 push	 eax
  00036	8b cb		 mov	 ecx, ebx
  00038	89 45 08	 mov	 DWORD PTR tv133[ebp], eax
  0003b	ff d6		 call	 esi

; 104  : 	_Right = _Move(_Tmp);

  0003d	8b 45 e0	 mov	 eax, DWORD PTR __Tmp$[ebp]
  00040	8b 4d 08	 mov	 ecx, DWORD PTR tv133[ebp]
  00043	89 07		 mov	 DWORD PTR [edi], eax
  00045	8d 45 e4	 lea	 eax, DWORD PTR __Tmp$[ebp+4]
  00048	50		 push	 eax
  00049	ff d6		 call	 esi

; 105  : 	}

  0004b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0004f	8d 4d e4	 lea	 ecx, DWORD PTR __Tmp$[ebp+4]
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00058	e8 00 00 00 00	 call	 __EH_epilog3
  0005d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$swap@UtagNamedTitleSortInfo@@@std@@YAXAAUtagNamedTitleSortInfo@@0@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1tagNamedTitleSortInfo@@QAE@XZ
__ehhandler$??$swap@UtagNamedTitleSortInfo@@@std@@YAXAAUtagNamedTitleSortInfo@@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$swap@UtagNamedTitleSortInfo@@@std@@YAXAAUtagNamedTitleSortInfo@@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$swap@UtagNamedTitleSortInfo@@@std@@YAXAAUtagNamedTitleSortInfo@@0@Z ENDP ; std::swap<tagNamedTitleSortInfo>
PUBLIC	??$_Push_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@HH$$QAU1@VNamedTitleSortFunc@@@Z ; std::_Push_heap<tagNamedTitleSortInfo *,int,tagNamedTitleSortInfo,NamedTitleSortFunc>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Push_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@HH$$QAU1@VNamedTitleSortFunc@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Push_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@HH$$QAU1@VNamedTitleSortFunc@@@Z PROC ; std::_Push_heap<tagNamedTitleSortInfo *,int,tagNamedTitleSortInfo,NamedTitleSortFunc>, COMDAT

; 2455 : 	{	// percolate _Hole to _Top or where _Val belongs, using operator<

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2456 : 	for (_Diff _Idx = (_Hole - 1) / 2;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Hole$[ebp]
  00007	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  0000a	99		 cdq
  0000b	2b c2		 sub	 eax, edx
  0000d	57		 push	 edi
  0000e	8b f8		 mov	 edi, eax
  00010	d1 ff		 sar	 edi, 1

; 2457 : 		_Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val);
; 2458 : 		_Idx = (_Hole - 1) / 2)

  00012	39 75 10	 cmp	 DWORD PTR __Top$[ebp], esi
  00015	7d 44		 jge	 SHORT $LN1@Push_heap
  00017	53		 push	 ebx
$LL3@Push_heap:
  00018	ff 75 14	 push	 DWORD PTR __Val$[ebp]
  0001b	8b df		 mov	 ebx, edi
  0001d	6b db 14	 imul	 ebx, 20			; 00000014H
  00020	03 5d 08	 add	 ebx, DWORD PTR __First$[ebp]
  00023	8d 4d 18	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 ??RNamedTitleSortFunc@@QBE_NABUtagNamedTitleSortInfo@@0@Z ; NamedTitleSortFunc::operator()
  0002c	84 c0		 test	 al, al
  0002e	74 2a		 je	 SHORT $LN16@Push_heap

; 2459 : 		{	// move _Hole up to parent
; 2460 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  00030	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00032	6b f6 14	 imul	 esi, 20			; 00000014H
  00035	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00038	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx
  0003b	83 c3 04	 add	 ebx, 4
  0003e	53		 push	 ebx
  0003f	8d 4c 30 04	 lea	 ecx, DWORD PTR [eax+esi+4]
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  00049	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  0004c	99		 cdq
  0004d	2b c2		 sub	 eax, edx

; 2461 : 		_Hole = _Idx;

  0004f	8b f7		 mov	 esi, edi
  00051	d1 f8		 sar	 eax, 1
  00053	8b f8		 mov	 edi, eax
  00055	39 75 10	 cmp	 DWORD PTR __Top$[ebp], esi
  00058	7c be		 jl	 SHORT $LL3@Push_heap
$LN16@Push_heap:
  0005a	5b		 pop	 ebx
$LN1@Push_heap:

; 2462 : 		}
; 2463 : 
; 2464 : 	*(_First + _Hole) = _Move(_Val);	// drop _Val into final hole

  0005b	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  0005e	6b f6 14	 imul	 esi, 20			; 00000014H
  00061	03 75 08	 add	 esi, DWORD PTR __First$[ebp]
  00064	8b 08		 mov	 ecx, DWORD PTR [eax]
  00066	83 c0 04	 add	 eax, 4
  00069	89 0e		 mov	 DWORD PTR [esi], ecx
  0006b	50		 push	 eax
  0006c	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi

; 2465 : 	}

  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
??$_Push_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@HH$$QAU1@VNamedTitleSortFunc@@@Z ENDP ; std::_Push_heap<tagNamedTitleSortInfo *,int,tagNamedTitleSortInfo,NamedTitleSortFunc>
_TEXT	ENDS
PUBLIC	??$_Move_backward@PAUtagNamedTitleSortInfo@@PAU1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move_backward@PAUtagNamedTitleSortInfo@@PAU1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move_backward@PAUtagNamedTitleSortInfo@@PAU1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move_backward<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *>, COMDAT

; 2617 : 	{	// move [_First, _Last) backwards to [..., _Dest), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2618 : 	while (_First != _Last)

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0000b	39 75 08	 cmp	 DWORD PTR __First$[ebp], esi
  0000e	74 1c		 je	 SHORT $LN1@Move_backw
$LL2@Move_backw:

; 2619 : 		*--_Dest = _STD move(*--_Last);

  00010	83 ee 14	 sub	 esi, 20			; 00000014H
  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	83 ef 14	 sub	 edi, 20			; 00000014H
  00018	89 07		 mov	 DWORD PTR [edi], eax
  0001a	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001d	50		 push	 eax
  0001e	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  00027	3b 75 08	 cmp	 esi, DWORD PTR __First$[ebp]
  0002a	75 e4		 jne	 SHORT $LL2@Move_backw
$LN1@Move_backw:

; 2620 : 	return (_Dest);

  0002c	8b c7		 mov	 eax, edi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi

; 2621 : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??$_Move_backward@PAUtagNamedTitleSortInfo@@PAU1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move_backward<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *>
_TEXT	ENDS
PUBLIC	??0tagNamedTitleSlot@@QAE@XZ			; tagNamedTitleSlot::tagNamedTitleSlot
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\namedtitleenumtype.h
;	COMDAT ??0tagNamedTitleSlot@@QAE@XZ
_TEXT	SEGMENT
??0tagNamedTitleSlot@@QAE@XZ PROC			; tagNamedTitleSlot::tagNamedTitleSlot, COMDAT
; _this$ = ecx

; 63   : 	tagNamedTitleSlot()

  00000	8b c1		 mov	 eax, ecx

; 64   : 	{
; 65   : 		Init();

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0000f	66 89 48 10	 mov	 WORD PTR [eax+16], cx
  00013	88 48 12	 mov	 BYTE PTR [eax+18], cl

; 66   : 	}

  00016	c3		 ret	 0
??0tagNamedTitleSlot@@QAE@XZ ENDP			; tagNamedTitleSlot::tagNamedTitleSlot
_TEXT	ENDS
PUBLIC	??0tagNamedTitleSortInfo@@QAE@XZ		; tagNamedTitleSortInfo::tagNamedTitleSortInfo
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0tagNamedTitleSortInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0tagNamedTitleSortInfo@@QAE@XZ$0
__ehfuncinfo$??0tagNamedTitleSortInfo@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0tagNamedTitleSortInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0tagNamedTitleSortInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0tagNamedTitleSortInfo@@QAE@XZ PROC			; tagNamedTitleSortInfo::tagNamedTitleSortInfo, COMDAT
; _this$ = ecx

; 89   : 	tagNamedTitleSortInfo()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0tagNamedTitleSortInfo@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 90   : 	{
; 91   : 		Init();

  0001e	83 26 00	 and	 DWORD PTR [esi], 0
  00021	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Clear@ioHashString@@QAEXXZ

; 92   : 	}

  0002a	8b c6		 mov	 eax, esi
  0002c	e8 00 00 00 00	 call	 __EH_epilog3
  00031	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0tagNamedTitleSortInfo@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0tagNamedTitleSortInfo@@QAE@XZ:
  0000c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00010	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00013	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00016	33 c8		 xor	 ecx, eax
  00018	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0tagNamedTitleSortInfo@@QAE@XZ
  00022	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0tagNamedTitleSortInfo@@QAE@XZ ENDP			; tagNamedTitleSortInfo::tagNamedTitleSortInfo
PUBLIC	?IsEmpty@ioComplexStringPrinter@@QBE_NXZ	; ioComplexStringPrinter::IsEmpty
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocomplexstringprinter.h
;	COMDAT ?IsEmpty@ioComplexStringPrinter@@QBE_NXZ
_TEXT	SEGMENT
?IsEmpty@ioComplexStringPrinter@@QBE_NXZ PROC		; ioComplexStringPrinter::IsEmpty, COMDAT
; _this$ = ecx

; 124  : 	inline bool IsEmpty() const { return m_vPieceList.empty(); }

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	2b 41 10	 sub	 eax, DWORD PTR [ecx+16]
  00006	f7 d8		 neg	 eax
  00008	1b c0		 sbb	 eax, eax
  0000a	40		 inc	 eax
  0000b	c3		 ret	 0
?IsEmpty@ioComplexStringPrinter@@QBE_NXZ ENDP		; ioComplexStringPrinter::IsEmpty
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1497 : 		return (_Myptr());

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN5@c_str
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1498 : 		}

  00008	c3		 ret	 0

; 1497 : 		return (_Myptr());

$LN5@c_str:
  00009	8b c1		 mov	 eax, ecx

; 1498 : 		}

  0000b	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 454  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 455  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogsp
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1953 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1954 : 		_Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0000a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000d	72 02		 jb	 SHORT $LN5@Eos
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN5@Eos:
  00011	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1955 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1517 : 		size_type _Num = this->_Alval.max_size();
; 1518 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	6a fe		 push	 -2			; fffffffeH
  00002	58		 pop	 eax

; 1519 : 		}

  00003	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	??_R0?AVioPullDownItem@@@8			; ioPullDownItem `RTTI Type Descriptor'
PUBLIC	??_R0?AVNamedTitlePullDown@@@8			; NamedTitlePullDown `RTTI Type Descriptor'
PUBLIC	??_R0?AVPullDownEvent@@@8			; PullDownEvent `RTTI Type Descriptor'
PUBLIC	??_R0?AVClickPullDownEvent@@@8			; ClickPullDownEvent `RTTI Type Descriptor'
EXTRN	?GetPullDown@ioPullDownList@@QBEPAVioPullDownItem@@H@Z:PROC ; ioPullDownList::GetPullDown
EXTRN	__imp_??8type_info@@QBE_NABV0@@Z:PROC
EXTRN	___RTtypeid:PROC
EXTRN	___RTDynamicCast:PROC
;	COMDAT ??_R0?AVioPullDownItem@@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
_DATA	SEGMENT
??_R0?AVioPullDownItem@@@8 DD FLAT:??_7type_info@@6B@	; ioPullDownItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioPullDownItem@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVNamedTitlePullDown@@@8
_DATA	SEGMENT
??_R0?AVNamedTitlePullDown@@@8 DD FLAT:??_7type_info@@6B@ ; NamedTitlePullDown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNamedTitlePullDown@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVPullDownEvent@@@8
_DATA	SEGMENT
??_R0?AVPullDownEvent@@@8 DD FLAT:??_7type_info@@6B@	; PullDownEvent `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPullDownEvent@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVClickPullDownEvent@@@8
_DATA	SEGMENT
??_R0?AVClickPullDownEvent@@@8 DD FLAT:??_7type_info@@6B@ ; ClickPullDownEvent `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVClickPullDownEvent@@', 00H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\namedtitlepremiumselectwnd.cpp
_DATA	ENDS
;	COMDAT ?iwm_pulldown_event@NamedTitlePremiumSelectWnd@@UAEXABVPullDownEvent@@@Z
_TEXT	SEGMENT
_Event$ = 8						; size = 4
?iwm_pulldown_event@NamedTitlePremiumSelectWnd@@UAEXABVPullDownEvent@@@Z PROC ; NamedTitlePremiumSelectWnd::iwm_pulldown_event, COMDAT
; _this$ = ecx

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 76   : 	if( CLASSTYPEQUALS( ClickPullDownEvent ) == CLASSTYPEQUALS( Event ) )

  00005	ff 75 08	 push	 DWORD PTR _Event$[ebp]
  00008	8b f9		 mov	 edi, ecx
  0000a	e8 00 00 00 00	 call	 ___RTtypeid
  0000f	59		 pop	 ecx
  00010	be 00 00 00 00	 mov	 esi, OFFSET ??_R0?AVClickPullDownEvent@@@8
  00015	50		 push	 eax
  00016	8b ce		 mov	 ecx, esi
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??8type_info@@QBE_NABV0@@Z
  0001e	84 c0		 test	 al, al
  00020	0f 84 94 00 00
	00		 je	 $LN1@iwm_pulldo

; 77   : 	{
; 78   : 		const ClickPullDownEvent& ClickEvent = dynamic_cast<const ClickPullDownEvent&>( Event );

  00026	6a 01		 push	 1
  00028	56		 push	 esi
  00029	68 00 00 00 00	 push	 OFFSET ??_R0?AVPullDownEvent@@@8
  0002e	6a 00		 push	 0
  00030	ff 75 08	 push	 DWORD PTR _Event$[ebp]
  00033	e8 00 00 00 00	 call	 ___RTDynamicCast

; 79   : 		if( ClickEvent.IsPulldownClick() )

  00038	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0003b	83 c4 14	 add	 esp, 20			; 00000014H
  0003e	83 fa ff	 cmp	 edx, -1
  00041	74 77		 je	 SHORT $LN1@iwm_pulldo
  00043	83 78 10 ff	 cmp	 DWORD PTR [eax+16], -1
  00047	75 71		 jne	 SHORT $LN1@iwm_pulldo

; 80   : 		{			
; 81   : 			const ioPullDownList* pList = ClickEvent.GetEventCaller();

  00049	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 82   : 			if( !pList )

  0004c	85 c0		 test	 eax, eax
  0004e	74 6a		 je	 SHORT $LN1@iwm_pulldo

; 83   : 				return;
; 84   : 
; 85   : 			const NamedTitlePullDown* pItem = dynamic_cast<const NamedTitlePullDown*>( pList->GetPullDown( ClickEvent.iClickIdx ) );

  00050	6a 00		 push	 0
  00052	68 00 00 00 00	 push	 OFFSET ??_R0?AVNamedTitlePullDown@@@8
  00057	68 00 00 00 00	 push	 OFFSET ??_R0?AVioPullDownItem@@@8
  0005c	6a 00		 push	 0
  0005e	52		 push	 edx
  0005f	8b c8		 mov	 ecx, eax
  00061	e8 00 00 00 00	 call	 ?GetPullDown@ioPullDownList@@QBEPAVioPullDownItem@@H@Z ; ioPullDownList::GetPullDown
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ___RTDynamicCast
  0006c	8b f0		 mov	 esi, eax
  0006e	83 c4 14	 add	 esp, 20			; 00000014H

; 86   : 			if( !pItem )

  00071	85 f6		 test	 esi, esi
  00073	74 45		 je	 SHORT $LN1@iwm_pulldo

; 87   : 				return;
; 88   : 
; 89   : 			m_dwCode = pItem->m_dwCode;

  00075	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]

; 90   : 
; 91   : 			ioWnd *pSelectBtn = FindChildWnd( ID_SELECT_BTN );

  00078	6a 02		 push	 2
  0007a	8d 8f a0 fe ff
	ff		 lea	 ecx, DWORD PTR [edi-352]
  00080	89 47 34	 mov	 DWORD PTR [edi+52], eax
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  00089	8b f8		 mov	 edi, eax

; 92   : 			if( pSelectBtn )

  0008b	85 ff		 test	 edi, edi
  0008d	74 2b		 je	 SHORT $LN1@iwm_pulldo

; 93   : 			{
; 94   : 				pSelectBtn->SetTitleText( pItem->m_szTitle.c_str() );

  0008f	8d 46 48	 lea	 eax, DWORD PTR [esi+72]
  00092	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00096	72 02		 jb	 SHORT $LN17@iwm_pulldo
  00098	8b 00		 mov	 eax, DWORD PTR [eax]
$LN17@iwm_pulldo:
  0009a	6a 00		 push	 0
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  000a1	50		 push	 eax
  000a2	8b cf		 mov	 ecx, edi
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitleText@ioWnd@@QAEXPBD0H@Z

; 95   : 				pSelectBtn->SetTitleColor( pItem->m_dwTitleColor, 0xFF000000 );

  000aa	68 00 00 00 ff	 push	 -16777216		; ff000000H
  000af	ff 76 64	 push	 DWORD PTR [esi+100]
  000b2	8b cf		 mov	 ecx, edi
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitleColor@ioWnd@@QAEXKK@Z
$LN1@iwm_pulldo:
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi

; 96   : 			}
; 97   : 		}
; 98   : 	}
; 99   : }

  000bc	5d		 pop	 ebp
  000bd	c2 04 00	 ret	 4
?iwm_pulldown_event@NamedTitlePremiumSelectWnd@@UAEXABVPullDownEvent@@@Z ENDP ; NamedTitlePremiumSelectWnd::iwm_pulldown_event
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?AddRenderImage@NamedTitlePremiumSelectWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -24					; size = 4
__t$509238 = -20					; size = 12
__$ArrayPad$ = -4					; size = 4
_szType$ = 8						; size = 4
_pImage$ = 12						; size = 4
?AddRenderImage@NamedTitlePremiumSelectWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z PROC ; NamedTitlePremiumSelectWnd::AddRenderImage, COMDAT
; _this$ = ecx

; 102  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _pImage$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _szType$[ebp]

; 103  : 	if( szType == "back_effect" )

  00019	6a 02		 push	 2
  0001b	89 4d e8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0001e	c7 45 ec 8f 8d
	88 81		 mov	 DWORD PTR __t$509238[ebp], -2121757297 ; 81888d8fH
  00025	c7 45 f0 b2 89
	8d 8c		 mov	 DWORD PTR __t$509238[ebp+4], -1936881230 ; 8c8d89b2H
  0002c	8d 45 ec	 lea	 eax, DWORD PTR __t$509238[ebp]
  0002f	c7 45 f4 88 8f
	9f 00		 mov	 DWORD PTR __t$509238[ebp+8], 10456968 ; 009f8f88H
  00036	59		 pop	 ecx
$LL111@AddRenderI:
  00037	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0003d	83 c0 04	 add	 eax, 4
  00040	49		 dec	 ecx
  00041	75 f4		 jne	 SHORT $LL111@AddRenderI
  00043	6a 08		 push	 8
  00045	58		 pop	 eax
$LL108@AddRenderI:
  00046	8b c8		 mov	 ecx, eax
  00048	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0004e	79 05		 jns	 SHORT $LN122@AddRenderI
  00050	49		 dec	 ecx
  00051	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00054	41		 inc	 ecx
$LN122@AddRenderI:
  00055	b2 ed		 mov	 dl, -19			; ffffffedH
  00057	2a d1		 sub	 dl, cl
  00059	30 54 05 ec	 xor	 BYTE PTR __t$509238[ebp+eax], dl
  0005d	40		 inc	 eax
  0005e	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00061	7c e3		 jl	 SHORT $LL108@AddRenderI
  00063	8b cf		 mov	 ecx, edi
  00065	8d 75 ec	 lea	 esi, DWORD PTR __t$509238[ebp]
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL118@AddRenderI:
  0006e	8a 08		 mov	 cl, BYTE PTR [eax]
  00070	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00072	75 1a		 jne	 SHORT $LN119@AddRenderI
  00074	84 c9		 test	 cl, cl
  00076	74 12		 je	 SHORT $LN120@AddRenderI
  00078	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0007b	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0007e	75 0e		 jne	 SHORT $LN119@AddRenderI
  00080	83 c0 02	 add	 eax, 2
  00083	83 c6 02	 add	 esi, 2
  00086	84 c9		 test	 cl, cl
  00088	75 e4		 jne	 SHORT $LL118@AddRenderI
$LN120@AddRenderI:
  0008a	33 c0		 xor	 eax, eax
  0008c	eb 05		 jmp	 SHORT $LN121@AddRenderI
$LN119@AddRenderI:
  0008e	1b c0		 sbb	 eax, eax
  00090	83 d8 ff	 sbb	 eax, -1
$LN121@AddRenderI:
  00093	85 c0		 test	 eax, eax
  00095	75 23		 jne	 SHORT $LN3@AddRenderI

; 104  : 	{
; 105  : 		SAFEDELETE( m_pBackEffect );

  00097	8b 75 e8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0009a	8b 8e 6c 01 00
	00		 mov	 ecx, DWORD PTR [esi+364]
  000a0	85 c9		 test	 ecx, ecx
  000a2	74 0e		 je	 SHORT $LN2@AddRenderI
  000a4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a6	6a 01		 push	 1
  000a8	ff 50 40	 call	 DWORD PTR [eax+64]
  000ab	83 a6 6c 01 00
	00 00		 and	 DWORD PTR [esi+364], 0
$LN2@AddRenderI:

; 106  : 		m_pBackEffect = pImage;

  000b2	89 9e 6c 01 00
	00		 mov	 DWORD PTR [esi+364], ebx

; 107  : 	}
; 108  : 	else

  000b8	eb 0b		 jmp	 SHORT $LN1@AddRenderI
$LN3@AddRenderI:

; 109  : 		ioWnd::AddRenderImage( szType, pImage );

  000ba	8b 4d e8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  000bd	53		 push	 ebx
  000be	57		 push	 edi
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
$LN1@AddRenderI:

; 110  : }

  000c5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	33 cd		 xor	 ecx, ebp
  000cc	5b		 pop	 ebx
  000cd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d2	c9		 leave
  000d3	c2 08 00	 ret	 8
?AddRenderImage@NamedTitlePremiumSelectWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z ENDP ; NamedTitlePremiumSelectWnd::AddRenderImage
_TEXT	ENDS
PUBLIC	__real@3f19999a
EXTRN	?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z:PROC ; ioComplexStringPrinter::PrintFullText
EXTRN	__imp_?GetDerivedPosY@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?GetDerivedPosX@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?OnRender@ioWnd@@MAEXXZ:PROC
;	COMDAT __real@3f19999a
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\namedtitlepremiumselectwnd.cpp
CONST	ENDS
;	COMDAT ?OnRender@NamedTitlePremiumSelectWnd@@MAEXXZ
_TEXT	SEGMENT
tv252 = -4						; size = 4
?OnRender@NamedTitlePremiumSelectWnd@@MAEXXZ PROC	; NamedTitlePremiumSelectWnd::OnRender, COMDAT
; _this$ = ecx

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx

; 116  : 	ioWnd::OnRender();

  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnRender@ioWnd@@MAEXXZ

; 117  : 
; 118  : 	int nXPos = GetDerivedPosX();

  0000f	8b ce		 mov	 ecx, esi
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosX@ioWnd@@QBEHXZ

; 119  : 	int nYPos = GetDerivedPosY();

  00017	8b ce		 mov	 ecx, esi
  00019	8b f8		 mov	 edi, eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ

; 120  : 
; 121  : 	enum
; 122  : 	{
; 123  : 		TITLE_X_OFFSET	= 128,
; 124  : 		TITLE_Y_OFFSET	= 152,
; 125  : 
; 126  : 		ICON_X		= 129,
; 127  : 		ICON_Y		= 105,
; 128  : 
; 129  : 		MANUAL_X = 27,
; 130  : 		MANUAL_Y = 187,
; 131  : 	};
; 132  : 
; 133  : 	// Back
; 134  : 	if( m_pBackEffect )

  00021	33 d2		 xor	 edx, edx
  00023	8b d8		 mov	 ebx, eax
  00025	39 96 6c 01 00
	00		 cmp	 DWORD PTR [esi+364], edx
  0002b	74 39		 je	 SHORT $LN3@OnRender

; 135  : 		m_pBackEffect->Render( nXPos+ICON_X, nYPos+ICON_Y, UI_RENDER_MULTIPLY );

  0002d	8b 86 6c 01 00
	00		 mov	 eax, DWORD PTR [esi+364]
  00033	8b 08		 mov	 ecx, DWORD PTR [eax]
  00035	52		 push	 edx
  00036	52		 push	 edx
  00037	52		 push	 edx
  00038	6a 08		 push	 8
  0003a	51		 push	 ecx
  0003b	0f 57 c0	 xorps	 xmm0, xmm0
  0003e	51		 push	 ecx
  0003f	8d 53 69	 lea	 edx, DWORD PTR [ebx+105]
  00042	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00046	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0004c	8d 97 81 00 00
	00		 lea	 edx, DWORD PTR [edi+129]
  00052	0f 57 c0	 xorps	 xmm0, xmm0
  00055	8b c8		 mov	 ecx, eax
  00057	8b 00		 mov	 eax, DWORD PTR [eax]
  00059	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0005d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00062	ff 10		 call	 DWORD PTR [eax]
  00064	33 d2		 xor	 edx, edx
$LN3@OnRender:

; 136  : 	
; 137  : 	// Icon
; 138  : 	if( m_pIcon )

  00066	39 96 68 01 00
	00		 cmp	 DWORD PTR [esi+360], edx
  0006c	74 33		 je	 SHORT $LN2@OnRender

; 139  : 		m_pIcon->Render( nXPos+ICON_X, nYPos+ICON_Y, UI_RENDER_NORMAL, TFO_BILINEAR );

  0006e	8b 8e 68 01 00
	00		 mov	 ecx, DWORD PTR [esi+360]
  00074	8b 01		 mov	 eax, DWORD PTR [ecx]
  00076	52		 push	 edx
  00077	52		 push	 edx
  00078	6a 01		 push	 1
  0007a	52		 push	 edx
  0007b	0f 57 c0	 xorps	 xmm0, xmm0
  0007e	51		 push	 ecx
  0007f	8d 53 69	 lea	 edx, DWORD PTR [ebx+105]
  00082	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00086	51		 push	 ecx
  00087	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0008d	8d 97 81 00 00
	00		 lea	 edx, DWORD PTR [edi+129]
  00093	0f 57 c0	 xorps	 xmm0, xmm0
  00096	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0009a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009f	ff 10		 call	 DWORD PTR [eax]
$LN2@OnRender:

; 140  : 
; 141  : 	if( !m_ItemTitle.IsEmpty() )

  000a1	8b 8e 80 01 00
	00		 mov	 ecx, DWORD PTR [esi+384]
  000a7	3b 8e 84 01 00
	00		 cmp	 ecx, DWORD PTR [esi+388]
  000ad	74 39		 je	 SHORT $LN1@OnRender

; 142  : 		m_ItemTitle.PrintFullText( nXPos+TITLE_X_OFFSET, nYPos+TITLE_Y_OFFSET, TAT_CENTER );

  000af	68 ff 00 00 00	 push	 255			; 000000ffH
  000b4	6a 01		 push	 1
  000b6	51		 push	 ecx
  000b7	0f 57 c0	 xorps	 xmm0, xmm0
  000ba	51		 push	 ecx
  000bb	8d 83 98 00 00
	00		 lea	 eax, DWORD PTR [ebx+152]
  000c1	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000c5	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000cb	8d 87 80 00 00
	00		 lea	 eax, DWORD PTR [edi+128]
  000d1	0f 57 c0	 xorps	 xmm0, xmm0
  000d4	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000d8	8d 8e 74 01 00
	00		 lea	 ecx, DWORD PTR [esi+372]
  000de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e3	e8 00 00 00 00	 call	 ?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z ; ioComplexStringPrinter::PrintFullText
$LN1@OnRender:

; 143  : 
; 144  : 	PrintManual( nXPos+MANUAL_X, nYPos+MANUAL_Y, FONT_SIZE_12 );

  000e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  000f0	51		 push	 ecx
  000f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f6	81 c3 bb 00 00
	00		 add	 ebx, 187		; 000000bbH
  000fc	53		 push	 ebx
  000fd	83 c7 1b	 add	 edi, 27			; 0000001bH
  00100	57		 push	 edi
  00101	8b ce		 mov	 ecx, esi
  00103	e8 00 00 00 00	 call	 ?PrintManual@NamedTitlePremiumSelectWnd@@IAEXHHM@Z ; NamedTitlePremiumSelectWnd::PrintManual
  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx

; 145  : }

  0010b	c9		 leave
  0010c	c3		 ret	 0
?OnRender@NamedTitlePremiumSelectWnd@@MAEXXZ ENDP	; NamedTitlePremiumSelectWnd::OnRender
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SendNamedTitleChange@NamedTitlePremiumSelectWnd@@IAEXXZ ; NamedTitlePremiumSelectWnd::SendNamedTitleChange
EXTRN	??1SP2Packet@@UAE@XZ:PROC			; SP2Packet::~SP2Packet
EXTRN	?SendToServer@TCPNetwork@@YAXAAVSP2Packet@@@Z:PROC ; TCPNetwork::SendToServer
EXTRN	??6SP2Packet@@QAEAAV0@K@Z:PROC			; SP2Packet::operator<<
EXTRN	??0SP2Packet@@QAE@K@Z:PROC			; SP2Packet::SP2Packet
EXTRN	?MouseBusy@TCPNetwork@@YAX_N@Z:PROC		; TCPNetwork::MouseBusy
EXTRN	__imp_?HideWnd@ioWnd@@QAEXXZ:PROC
EXTRN	?GetNamedTitleSlot@ioUserNamedTitle@@QAE_NKAAUtagNamedTitleSlot@@@Z:PROC ; ioUserNamedTitle::GetNamedTitleSlot
EXTRN	?GetSingleton@ioMyInfo@@SAAAV1@XZ:PROC		; ioMyInfo::GetSingleton
EXTRN	__chkstk:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\namedtitleenumtype.h
xdata$x	SEGMENT
__unwindtable$?SendNamedTitleChange@NamedTitlePremiumSelectWnd@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendNamedTitleChange@NamedTitlePremiumSelectWnd@@IAEXXZ$0
__ehfuncinfo$?SendNamedTitleChange@NamedTitlePremiumSelectWnd@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendNamedTitleChange@NamedTitlePremiumSelectWnd@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\namedtitlepremiumselectwnd.cpp
xdata$x	ENDS
;	COMDAT ?SendNamedTitleChange@NamedTitlePremiumSelectWnd@@IAEXXZ
_TEXT	SEGMENT
_sNamedTitleSlot$ = -32832				; size = 24
_kPacket$ = -32808					; size = 32792
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?SendNamedTitleChange@NamedTitlePremiumSelectWnd@@IAEXXZ PROC ; NamedTitlePremiumSelectWnd::SendNamedTitleChange, COMDAT
; _this$ = ecx

; 267  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SendNamedTitleChange@NamedTitlePremiumSelectWnd@@IAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 34 80 00 00	 mov	 eax, 32820		; 00008034H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	50		 push	 eax
  00028	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00031	8b f1		 mov	 esi, ecx

; 268  : 	ioUserNamedTitle *pUserNamedTitle = g_MyInfo.GetUserNamedTitle();

  00033	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00038	8d 88 e8 02 00
	00		 lea	 ecx, DWORD PTR [eax+744]

; 269  : 	if ( !pUserNamedTitle )

  0003e	33 db		 xor	 ebx, ebx
  00040	3b cb		 cmp	 ecx, ebx
  00042	0f 84 9d 00 00
	00		 je	 $LN3@SendNamedT

; 270  : 		return;
; 271  : 
; 272  : 	NamedTitleSlot sNamedTitleSlot;
; 273  : 	if ( !pUserNamedTitle->GetNamedTitleSlot( m_dwCode, sNamedTitleSlot ) )

  00048	8d 85 c0 7f ff
	ff		 lea	 eax, DWORD PTR _sNamedTitleSlot$[ebp]
  0004e	50		 push	 eax
  0004f	ff b6 94 01 00
	00		 push	 DWORD PTR [esi+404]
  00055	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00059	89 9d c0 7f ff
	ff		 mov	 DWORD PTR _sNamedTitleSlot$[ebp], ebx
  0005f	89 9d c4 7f ff
	ff		 mov	 DWORD PTR _sNamedTitleSlot$[ebp+4], ebx
  00065	66 0f 13 85 c8
	7f ff ff	 movlpd	 QWORD PTR _sNamedTitleSlot$[ebp+8], xmm0
  0006d	66 89 9d d0 7f
	ff ff		 mov	 WORD PTR _sNamedTitleSlot$[ebp+16], bx
  00074	88 9d d2 7f ff
	ff		 mov	 BYTE PTR _sNamedTitleSlot$[ebp+18], bl
  0007a	e8 00 00 00 00	 call	 ?GetNamedTitleSlot@ioUserNamedTitle@@QAE_NKAAUtagNamedTitleSlot@@@Z ; ioUserNamedTitle::GetNamedTitleSlot
  0007f	84 c0		 test	 al, al
  00081	74 62		 je	 SHORT $LN3@SendNamedT

; 274  : 		return;
; 275  : 
; 276  : 	HideWnd();

  00083	8b ce		 mov	 ecx, esi
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideWnd@ioWnd@@QAEXXZ

; 277  : 
; 278  : 	TCPNetwork::MouseBusy( true );

  0008b	6a 01		 push	 1
  0008d	e8 00 00 00 00	 call	 ?MouseBusy@TCPNetwork@@YAX_N@Z ; TCPNetwork::MouseBusy

; 279  : 
; 280  : 	SP2Packet kPacket( CTPK_ETCITEM_USE );

  00092	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$[ebp]
  00098	c7 04 24 59 01
	00 00		 mov	 DWORD PTR [esp], 345	; 00000159H
  0009f	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 281  : 	kPacket << m_dwEtcItemCode;

  000a4	ff b6 64 01 00
	00		 push	 DWORD PTR [esi+356]
  000aa	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$[ebp]
  000b0	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  000b3	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@K@Z ; SP2Packet::operator<<

; 282  : 	kPacket << m_dwCode;

  000b8	ff b6 94 01 00
	00		 push	 DWORD PTR [esi+404]
  000be	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$[ebp]
  000c4	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@K@Z ; SP2Packet::operator<<

; 283  : 	TCPNetwork::SendToServer( kPacket );

  000c9	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$[ebp]
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 ?SendToServer@TCPNetwork@@YAXAAVSP2Packet@@@Z ; TCPNetwork::SendToServer

; 284  : }

  000d5	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000d9	59		 pop	 ecx
  000da	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$[ebp]
  000e0	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN3@SendNamedT:
  000e5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ef	59		 pop	 ecx
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx
  000f2	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f5	33 cd		 xor	 ecx, ebp
  000f7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fc	c9		 leave
  000fd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SendNamedTitleChange@NamedTitlePremiumSelectWnd@@IAEXXZ$0:
  00000	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?SendNamedTitleChange@NamedTitlePremiumSelectWnd@@IAEXXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a c0 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32832]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SendNamedTitleChange@NamedTitlePremiumSelectWnd@@IAEXXZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SendNamedTitleChange@NamedTitlePremiumSelectWnd@@IAEXXZ ENDP ; NamedTitlePremiumSelectWnd::SendNamedTitleChange
PUBLIC	??0?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE@XZ ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@QAE@PAUtagNamedTitleSortInfo@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >::_Vector_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@QAE@PAUtagNamedTitleSortInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@QAE@PAUtagNamedTitleSortInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >::_Vector_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@QAE@PAUtagNamedTitleSortInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >::_Vector_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UtagNamedTitleSortInfo@@@std@@UtagNamedTitleSortInfo@@AAU3@@std@@YAXAAV?$allocator@UtagNamedTitleSortInfo@@@0@PAUtagNamedTitleSortInfo@@AAU2@@Z ; std::_Cons_val<std::allocator<tagNamedTitleSortInfo>,tagNamedTitleSortInfo,tagNamedTitleSortInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UtagNamedTitleSortInfo@@@std@@UtagNamedTitleSortInfo@@AAU3@@std@@YAXAAV?$allocator@UtagNamedTitleSortInfo@@@0@PAUtagNamedTitleSortInfo@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UtagNamedTitleSortInfo@@@std@@UtagNamedTitleSortInfo@@AAU3@@std@@YAXAAV?$allocator@UtagNamedTitleSortInfo@@@0@PAUtagNamedTitleSortInfo@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<tagNamedTitleSortInfo>,tagNamedTitleSortInfo,tagNamedTitleSortInfo &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  0000c	e8 00 00 00 00	 call	 ??$construct@AAUtagNamedTitleSortInfo@@@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@AAU2@@Z ; std::allocator<tagNamedTitleSortInfo>::construct<tagNamedTitleSortInfo &>

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@UtagNamedTitleSortInfo@@@std@@UtagNamedTitleSortInfo@@AAU3@@std@@YAXAAV?$allocator@UtagNamedTitleSortInfo@@@0@PAUtagNamedTitleSortInfo@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<tagNamedTitleSortInfo>,tagNamedTitleSortInfo,tagNamedTitleSortInfo &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@ABU3@@Z ; std::allocator<tagNamedTitleSortInfo>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@ABU3@@Z PROC ; std::allocator<tagNamedTitleSortInfo>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UtagNamedTitleSortInfo@@ABU1@@std@@YAXPAUtagNamedTitleSortInfo@@ABU1@@Z ; std::_Construct<tagNamedTitleSortInfo,tagNamedTitleSortInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@ABU3@@Z ENDP ; std::allocator<tagNamedTitleSortInfo>::construct
_TEXT	ENDS
PUBLIC	??G?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@1@@Z ; std::_Vector_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >::operator-
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??G?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >::operator-, COMDAT
; _this$ = ecx

; 380  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  : 		return (*(_Mybase *)this - _Right);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	6a 14		 push	 20			; 00000014H
  0000c	99		 cdq
  0000d	59		 pop	 ecx
  0000e	f7 f9		 idiv	 ecx

; 382  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??G?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >::operator-
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@@Z ; std::allocator<tagNamedTitleSortInfo>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@@Z PROC ; std::allocator<tagNamedTitleSortInfo>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	83 c1 04	 add	 ecx, 4
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 214  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?destroy@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@@Z ENDP ; std::allocator<tagNamedTitleSortInfo>::destroy
_TEXT	ENDS
PUBLIC	??$iter_swap@PAUtagNamedTitleSortInfo@@PAU1@@std@@YAXPAUtagNamedTitleSortInfo@@0@Z ; std::iter_swap<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$iter_swap@PAUtagNamedTitleSortInfo@@PAU1@@std@@YAXPAUtagNamedTitleSortInfo@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAUtagNamedTitleSortInfo@@PAU1@@std@@YAXPAUtagNamedTitleSortInfo@@0@Z PROC ; std::iter_swap<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *>, COMDAT

; 2133 : 	{	// swap *_Left and *_Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2135 : 	}

  00003	5d		 pop	 ebp

; 2134 : 	swap(*_Left, *_Right);

  00004	e9 00 00 00 00	 jmp	 ??$swap@UtagNamedTitleSortInfo@@@std@@YAXAAUtagNamedTitleSortInfo@@0@Z ; std::swap<tagNamedTitleSortInfo>
??$iter_swap@PAUtagNamedTitleSortInfo@@PAU1@@std@@YAXPAUtagNamedTitleSortInfo@@0@Z ENDP ; std::iter_swap<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UtagNamedTitleSortInfo@@@std@@UtagNamedTitleSortInfo@@U3@@std@@YAXAAV?$allocator@UtagNamedTitleSortInfo@@@0@PAUtagNamedTitleSortInfo@@$$QAU2@@Z ; std::_Cons_val<std::allocator<tagNamedTitleSortInfo>,tagNamedTitleSortInfo,tagNamedTitleSortInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UtagNamedTitleSortInfo@@@std@@UtagNamedTitleSortInfo@@U3@@std@@YAXAAV?$allocator@UtagNamedTitleSortInfo@@@0@PAUtagNamedTitleSortInfo@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UtagNamedTitleSortInfo@@@std@@UtagNamedTitleSortInfo@@U3@@std@@YAXAAV?$allocator@UtagNamedTitleSortInfo@@@0@PAUtagNamedTitleSortInfo@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<tagNamedTitleSortInfo>,tagNamedTitleSortInfo,tagNamedTitleSortInfo>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  0000c	e8 00 00 00 00	 call	 ?construct@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@$$QAU3@@Z ; std::allocator<tagNamedTitleSortInfo>::construct

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@UtagNamedTitleSortInfo@@@std@@UtagNamedTitleSortInfo@@U3@@std@@YAXAAV?$allocator@UtagNamedTitleSortInfo@@@0@PAUtagNamedTitleSortInfo@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<tagNamedTitleSortInfo>,tagNamedTitleSortInfo,tagNamedTitleSortInfo>
_TEXT	ENDS
PUBLIC	??$_Med3@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@00VNamedTitleSortFunc@@@Z ; std::_Med3<tagNamedTitleSortInfo *,NamedTitleSortFunc>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Med3@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@00VNamedTitleSortFunc@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Med3@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@00VNamedTitleSortFunc@@@Z PROC ; std::_Med3<tagNamedTitleSortInfo *,NamedTitleSortFunc>, COMDAT

; 3683 : 	{	// sort median of three elements to middle

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3684 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Mid$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000b	57		 push	 edi
  0000c	56		 push	 esi
  0000d	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00010	e8 00 00 00 00	 call	 ??RNamedTitleSortFunc@@QBE_NABUtagNamedTitleSortInfo@@0@Z ; NamedTitleSortFunc::operator()
  00015	84 c0		 test	 al, al
  00017	74 09		 je	 SHORT $LN6@Med3

; 3685 : 		_STD iter_swap(_Mid, _First);

  00019	57		 push	 edi
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ??$swap@UtagNamedTitleSortInfo@@@std@@YAXAAUtagNamedTitleSortInfo@@0@Z ; std::swap<tagNamedTitleSortInfo>
  00020	59		 pop	 ecx
  00021	59		 pop	 ecx
$LN6@Med3:

; 3686 : 	if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid))

  00022	56		 push	 esi
  00023	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  00026	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00029	e8 00 00 00 00	 call	 ??RNamedTitleSortFunc@@QBE_NABUtagNamedTitleSortInfo@@0@Z ; NamedTitleSortFunc::operator()
  0002e	84 c0		 test	 al, al
  00030	74 0b		 je	 SHORT $LN8@Med3

; 3687 : 		_STD iter_swap(_Last, _Mid);

  00032	56		 push	 esi
  00033	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  00036	e8 00 00 00 00	 call	 ??$swap@UtagNamedTitleSortInfo@@@std@@YAXAAUtagNamedTitleSortInfo@@0@Z ; std::swap<tagNamedTitleSortInfo>
  0003b	59		 pop	 ecx
  0003c	59		 pop	 ecx
$LN8@Med3:

; 3688 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  0003d	57		 push	 edi
  0003e	56		 push	 esi
  0003f	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00042	e8 00 00 00 00	 call	 ??RNamedTitleSortFunc@@QBE_NABUtagNamedTitleSortInfo@@0@Z ; NamedTitleSortFunc::operator()
  00047	84 c0		 test	 al, al
  00049	74 09		 je	 SHORT $LN10@Med3

; 3689 : 		_STD iter_swap(_Mid, _First);

  0004b	57		 push	 edi
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 ??$swap@UtagNamedTitleSortInfo@@@std@@YAXAAUtagNamedTitleSortInfo@@0@Z ; std::swap<tagNamedTitleSortInfo>
  00052	59		 pop	 ecx
  00053	59		 pop	 ecx
$LN10@Med3:
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi

; 3690 : 	}

  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
??$_Med3@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@00VNamedTitleSortFunc@@@Z ENDP ; std::_Med3<tagNamedTitleSortInfo *,NamedTitleSortFunc>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@HH$$QAU1@VNamedTitleSortFunc@@@Z ; std::_Adjust_heap<tagNamedTitleSortInfo *,int,tagNamedTitleSortInfo,NamedTitleSortFunc>
; Function compile flags: /Ogsp
;	COMDAT ??$_Adjust_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@HH$$QAU1@VNamedTitleSortFunc@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Top$ = 12						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Adjust_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@HH$$QAU1@VNamedTitleSortFunc@@@Z PROC ; std::_Adjust_heap<tagNamedTitleSortInfo *,int,tagNamedTitleSortInfo,NamedTitleSortFunc>, COMDAT

; 2565 : 	{	// percolate _Hole to _Bottom, then push _Val, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2566 : 	_Diff _Top = _Hole;

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Hole$[ebp]
  00007	56		 push	 esi

; 2567 : 	_Diff _Idx = 2 * _Hole + 2;
; 2568 : 
; 2569 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	57		 push	 edi
  0000c	89 5d 0c	 mov	 DWORD PTR __Top$[ebp], ebx
  0000f	8d 7c 1b 02	 lea	 edi, DWORD PTR [ebx+ebx+2]
  00013	eb 3d		 jmp	 SHORT $LN20@Adjust_hea
$LL5@Adjust_hea:

; 2570 : 		{	// move _Hole down to larger child
; 2571 : 		if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1))))

  00015	8b c7		 mov	 eax, edi
  00017	6b c0 14	 imul	 eax, 20			; 00000014H
  0001a	03 c6		 add	 eax, esi
  0001c	8d 48 ec	 lea	 ecx, DWORD PTR [eax-20]
  0001f	51		 push	 ecx
  00020	50		 push	 eax
  00021	8d 4d 18	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00024	e8 00 00 00 00	 call	 ??RNamedTitleSortFunc@@QBE_NABUtagNamedTitleSortInfo@@0@Z ; NamedTitleSortFunc::operator()
  00029	84 c0		 test	 al, al
  0002b	74 01		 je	 SHORT $LN2@Adjust_hea

; 2572 : 			--_Idx;

  0002d	4f		 dec	 edi
$LN2@Adjust_hea:

; 2573 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  0002e	8b c7		 mov	 eax, edi
  00030	6b db 14	 imul	 ebx, 20			; 00000014H
  00033	6b c0 14	 imul	 eax, 20			; 00000014H
  00036	03 c6		 add	 eax, esi
  00038	8b 10		 mov	 edx, DWORD PTR [eax]
  0003a	8d 0c 33	 lea	 ecx, DWORD PTR [ebx+esi]
  0003d	83 c0 04	 add	 eax, 4
  00040	89 11		 mov	 DWORD PTR [ecx], edx
  00042	50		 push	 eax
  00043	83 c1 04	 add	 ecx, 4
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 2574 : 		_Hole = _Idx;

  0004c	8b df		 mov	 ebx, edi
  0004e	8d 7c 3f 02	 lea	 edi, DWORD PTR [edi+edi+2]
$LN20@Adjust_hea:

; 2567 : 	_Diff _Idx = 2 * _Hole + 2;
; 2568 : 
; 2569 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

  00052	3b 7d 10	 cmp	 edi, DWORD PTR __Bottom$[ebp]
  00055	7c be		 jl	 SHORT $LL5@Adjust_hea

; 2575 : 		}
; 2576 : 
; 2577 : 	if (_Idx == _Bottom)

  00057	75 25		 jne	 SHORT $LN1@Adjust_hea

; 2578 : 		{	// only child at bottom, move _Hole down to it
; 2579 : 		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));

  00059	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  0005c	6b db 14	 imul	 ebx, 20			; 00000014H
  0005f	6b c0 14	 imul	 eax, 20			; 00000014H
  00062	8d 44 30 ec	 lea	 eax, DWORD PTR [eax+esi-20]
  00066	8b 10		 mov	 edx, DWORD PTR [eax]
  00068	8d 0c 33	 lea	 ecx, DWORD PTR [ebx+esi]
  0006b	83 c0 04	 add	 eax, 4
  0006e	89 11		 mov	 DWORD PTR [ecx], edx
  00070	50		 push	 eax
  00071	83 c1 04	 add	 ecx, 4
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 2580 : 		_Hole = _Bottom - 1;

  0007a	8b 5d 10	 mov	 ebx, DWORD PTR __Bottom$[ebp]
  0007d	4b		 dec	 ebx
$LN1@Adjust_hea:

; 2581 : 		}
; 2582 : 	_Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);

  0007e	ff 75 18	 push	 DWORD PTR __Pred$[ebp]
  00081	ff 75 14	 push	 DWORD PTR __Val$[ebp]
  00084	ff 75 0c	 push	 DWORD PTR __Top$[ebp]
  00087	53		 push	 ebx
  00088	56		 push	 esi
  00089	e8 00 00 00 00	 call	 ??$_Push_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@HH$$QAU1@VNamedTitleSortFunc@@@Z ; std::_Push_heap<tagNamedTitleSortInfo *,int,tagNamedTitleSortInfo,NamedTitleSortFunc>
  0008e	83 c4 14	 add	 esp, 20			; 00000014H
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx

; 2583 : 	}

  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
??$_Adjust_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@HH$$QAU1@VNamedTitleSortFunc@@@Z ENDP ; std::_Adjust_heap<tagNamedTitleSortInfo *,int,tagNamedTitleSortInfo,NamedTitleSortFunc>
_TEXT	ENDS
PUBLIC	??$_Move_backward@PAUtagNamedTitleSortInfo@@PAU1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00@Z ; std::_Move_backward<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move_backward@PAUtagNamedTitleSortInfo@@PAU1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$509402 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move_backward@PAUtagNamedTitleSortInfo@@PAU1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00@Z PROC ; std::_Move_backward<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *>, COMDAT

; 2638 : 	{	// move [_First, _Last) backwards to [..., _Dest), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2639 : 	return (_Move_backward(_First, _Last,
; 2640 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$509402[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move_backward@PAUtagNamedTitleSortInfo@@PAU1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2641 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move_backward@PAUtagNamedTitleSortInfo@@PAU1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00@Z ENDP ; std::_Move_backward<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@00$$QAU1@VNamedTitleSortFunc@@PAH@Z ; std::_Pop_heap<tagNamedTitleSortInfo *,int,tagNamedTitleSortInfo,NamedTitleSortFunc>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Pop_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@00$$QAU1@VNamedTitleSortFunc@@PAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
___formal$ = 28						; size = 4
??$_Pop_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@00$$QAU1@VNamedTitleSortFunc@@PAH@Z PROC ; std::_Pop_heap<tagNamedTitleSortInfo *,int,tagNamedTitleSortInfo,NamedTitleSortFunc>, COMDAT

; 2591 : 	{	// pop *_First to *_Dest and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2592 : 	*_Dest = _Move(*_First);

  00003	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000c	89 08		 mov	 DWORD PTR [eax], ecx
  0000e	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00011	51		 push	 ecx
  00012	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 2593 : 	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),
; 2594 : 		_Move(_Val), _Pred);

  0001b	ff 75 18	 push	 DWORD PTR __Pred$[ebp]
  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00021	ff 75 14	 push	 DWORD PTR __Val$[ebp]
  00024	2b c6		 sub	 eax, esi
  00026	6a 14		 push	 20			; 00000014H
  00028	59		 pop	 ecx
  00029	99		 cdq
  0002a	f7 f9		 idiv	 ecx
  0002c	50		 push	 eax
  0002d	6a 00		 push	 0
  0002f	56		 push	 esi
  00030	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@HH$$QAU1@VNamedTitleSortFunc@@@Z ; std::_Adjust_heap<tagNamedTitleSortInfo *,int,tagNamedTitleSortInfo,NamedTitleSortFunc>
  00035	83 c4 14	 add	 esp, 20			; 00000014H
  00038	5e		 pop	 esi

; 2595 : 	}

  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
??$_Pop_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@00$$QAU1@VNamedTitleSortFunc@@PAH@Z ENDP ; std::_Pop_heap<tagNamedTitleSortInfo *,int,tagNamedTitleSortInfo,NamedTitleSortFunc>
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1988 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1989 : 		if (!_Built)

  00003	80 7d 08 00	 cmp	 BYTE PTR __Built$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 20		 je	 SHORT $LN9@Tidy

; 1990 : 			;
; 1991 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00010	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00014	72 1a		 jb	 SHORT $LN9@Tidy

; 1992 : 			{	// copy any leftovers to small buffer and deallocate
; 1993 : 			_Elem *_Ptr = this->_Bx._Ptr;

  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 1994 : 			if (0 < _Newsize)

  00019	85 ff		 test	 edi, edi
  0001b	74 0b		 je	 SHORT $LN7@Tidy

; 1995 : 				_Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);

  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _memcpy
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@Tidy:

; 1996 : 			this->_Alval.deallocate(_Ptr, this->_Myres + 1);

  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	59		 pop	 ecx
  0002f	5b		 pop	 ebx
$LN9@Tidy:

; 1997 : 			}
; 1998 : 		this->_Myres = this->_BUF_SIZE - 1;
; 1999 : 		_Eos(_Newsize);

  00030	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00033	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0003a	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi

; 2000 : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1109 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1110 : 		if (this->_Mysize < _Off)

  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0000d	3b c1		 cmp	 eax, ecx
  0000f	73 0b		 jae	 SHORT $LN3@erase

; 1111 : 			_Xran();	// _Off off end

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN28@erase:
$LN3@erase:

; 1112 : 		if (this->_Mysize - _Off < _Count)

  0001c	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0001f	2b c1		 sub	 eax, ecx
  00021	3b c3		 cmp	 eax, ebx

; 1113 : 			_Count = this->_Mysize - _Off;	// trim _Count

  00023	0f 42 d8	 cmovb	 ebx, eax

; 1114 : 		if (0 < _Count)

  00026	85 db		 test	 ebx, ebx
  00028	74 47		 je	 SHORT $LN25@erase

; 1115 : 			{	// move elements down
; 1116 : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 1117 : 				this->_Mysize - _Off - _Count);

  0002a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0002d	57		 push	 edi
  0002e	83 fa 10	 cmp	 edx, 16			; 00000010H
  00031	72 04		 jb	 SHORT $LN11@erase
  00033	8b 3e		 mov	 edi, DWORD PTR [esi]
  00035	eb 02		 jmp	 SHORT $LN12@erase
$LN11@erase:
  00037	8b fe		 mov	 edi, esi
$LN12@erase:
  00039	83 fa 10	 cmp	 edx, 16			; 00000010H
  0003c	72 04		 jb	 SHORT $LN15@erase
  0003e	8b 16		 mov	 edx, DWORD PTR [esi]
  00040	eb 02		 jmp	 SHORT $LN16@erase
$LN15@erase:
  00042	8b d6		 mov	 edx, esi
$LN16@erase:
  00044	2b c3		 sub	 eax, ebx
  00046	03 f9		 add	 edi, ecx
  00048	50		 push	 eax
  00049	03 fb		 add	 edi, ebx
  0004b	03 d1		 add	 edx, ecx
  0004d	57		 push	 edi
  0004e	52		 push	 edx
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove

; 1118 : 			size_type _Newsize = this->_Mysize - _Count;

  00055	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005b	2b c3		 sub	 eax, ebx

; 1119 : 			_Eos(_Newsize);

  0005d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00061	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00064	5f		 pop	 edi
  00065	72 04		 jb	 SHORT $LN23@erase
  00067	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00069	eb 02		 jmp	 SHORT $LN24@erase
$LN23@erase:
  0006b	8b ce		 mov	 ecx, esi
$LN24@erase:
  0006d	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
$LN25@erase:

; 1120 : 			}
; 1121 : 		return (*this);

  00071	8b c6		 mov	 eax, esi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx

; 1122 : 		}

  00075	5d		 pop	 ebp
  00076	c2 08 00	 ret	 8
$LN27@erase:
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
tv296 = -20						; size = 4
__Newres$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1919 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi

; 1920 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  00014	83 cf 0f	 or	 edi, 15			; 0000000fH

; 1921 : 		if (max_size() < _Newres)

  00017	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0001a	76 05		 jbe	 SHORT $LN9@Copy

; 1922 : 			_Newres = _Newsize;	// undo roundup if too big

  0001c	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0001f	eb 27		 jmp	 SHORT $LN5@Copy
$LN9@Copy:

; 1923 : 		else if (this->_Myres / 2 <= _Newres / 3)

  00021	33 d2		 xor	 edx, edx
  00023	6a 03		 push	 3
  00025	8b c7		 mov	 eax, edi
  00027	5b		 pop	 ebx
  00028	f7 f3		 div	 ebx
  0002a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0002d	89 4d ec	 mov	 DWORD PTR tv296[ebp], ecx
  00030	d1 6d ec	 shr	 DWORD PTR tv296[ebp], 1
  00033	8b 55 ec	 mov	 edx, DWORD PTR tv296[ebp]
  00036	3b d0		 cmp	 edx, eax
  00038	76 0e		 jbe	 SHORT $LN5@Copy

; 1924 : 			;
; 1925 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

  0003a	6a fe		 push	 -2			; fffffffeH
  0003c	5f		 pop	 edi
  0003d	8b c7		 mov	 eax, edi
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	77 03		 ja	 SHORT $LN5@Copy

; 1926 : 			_Newres = this->_Myres
; 1927 : 				+ this->_Myres / 2;	// grow exponentially if possible

  00045	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]
$LN5@Copy:

; 1928 : 		else
; 1929 : 			_Newres = max_size();	// settle for max_size()
; 1930 : 
; 1931 : 		_Elem *_Ptr;
; 1932 : 		_TRY_BEGIN

  00048	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0

; 1933 : 			_Ptr = this->_Alval.allocate(_Newres + 1);

  0004c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0004f	6a 00		 push	 0
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00057	59		 pop	 ecx
  00058	59		 pop	 ecx
  00059	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0005c	eb 27		 jmp	 SHORT $LN19@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 1934 : 		_CATCH_ALL
; 1935 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0005e	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00061	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00064	89 45 ec	 mov	 DWORD PTR __Newres$[ebp], eax

; 1936 : 			_TRY_BEGIN
; 1937 : 				_Ptr = this->_Alval.allocate(_Newres + 1);

  00067	40		 inc	 eax
  00068	6a 00		 push	 0
  0006a	50		 push	 eax
  0006b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0006f	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00074	59		 pop	 ecx
  00075	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00078	59		 pop	 ecx

; 1941 : 			_CATCH_END
; 1942 : 		_CATCH_END

  00079	b8 00 00 00 00	 mov	 eax, $LN63@Copy
  0007e	c3		 ret	 0
$LN63@Copy:
  0007f	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
  00082	8b 7d ec	 mov	 edi, DWORD PTR __Newres$[ebp]
$LN19@Copy:

; 1943 : 
; 1944 : 		if (0 < _Oldlen)

  00085	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  00088	85 db		 test	 ebx, ebx
  0008a	74 19		 je	 SHORT $LN52@Copy

; 1945 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  0008c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00090	72 04		 jb	 SHORT $LN50@Copy
  00092	8b 06		 mov	 eax, DWORD PTR [esi]
  00094	eb 02		 jmp	 SHORT $LN51@Copy
$LN50@Copy:
  00096	8b c6		 mov	 eax, esi
$LN51@Copy:
  00098	53		 push	 ebx
  00099	50		 push	 eax
  0009a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0009d	e8 00 00 00 00	 call	 _memcpy
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN52@Copy:

; 1946 : 		_Tidy(true);

  000a5	6a 00		 push	 0
  000a7	6a 01		 push	 1
  000a9	8b ce		 mov	 ecx, esi
  000ab	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1947 : 		this->_Bx._Ptr = _Ptr;

  000b0	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000b3	89 06		 mov	 DWORD PTR [esi], eax

; 1948 : 		this->_Myres = _Newres;
; 1949 : 		_Eos(_Oldlen);

  000b5	83 ff 10	 cmp	 edi, 16			; 00000010H
  000b8	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000bb	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000be	0f 42 c6	 cmovb	 eax, esi
  000c1	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 1950 : 		}

  000c5	e8 00 00 00 00	 call	 __EH_epilog3
  000ca	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 1938 : 			_CATCH_ALL
; 1939 : 			_Tidy(true);	// failed again, discard storage and reraise

  000cd	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	33 f6		 xor	 esi, esi
  000d2	56		 push	 esi
  000d3	6a 01		 push	 1
  000d5	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1940 : 			_RERAISE;

  000da	56		 push	 esi
  000db	56		 push	 esi
  000dc	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN67@Copy:
$LN66@Copy:
  000e1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?begin@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@2@XZ ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@2@XZ PROC ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@2@XZ ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@2@XZ PROC ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::end
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UtagNamedTitleSortInfo@@@std@@UtagNamedTitleSortInfo@@ABU3@@std@@YAXAAV?$allocator@UtagNamedTitleSortInfo@@@0@PAUtagNamedTitleSortInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<tagNamedTitleSortInfo>,tagNamedTitleSortInfo,tagNamedTitleSortInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UtagNamedTitleSortInfo@@@std@@UtagNamedTitleSortInfo@@ABU3@@std@@YAXAAV?$allocator@UtagNamedTitleSortInfo@@@0@PAUtagNamedTitleSortInfo@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UtagNamedTitleSortInfo@@@std@@UtagNamedTitleSortInfo@@ABU3@@std@@YAXAAV?$allocator@UtagNamedTitleSortInfo@@@0@PAUtagNamedTitleSortInfo@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<tagNamedTitleSortInfo>,tagNamedTitleSortInfo,tagNamedTitleSortInfo const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UtagNamedTitleSortInfo@@ABU1@@std@@YAXPAUtagNamedTitleSortInfo@@ABU1@@Z ; std::_Construct<tagNamedTitleSortInfo,tagNamedTitleSortInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@UtagNamedTitleSortInfo@@@std@@UtagNamedTitleSortInfo@@ABU3@@std@@YAXAAV?$allocator@UtagNamedTitleSortInfo@@@0@PAUtagNamedTitleSortInfo@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<tagNamedTitleSortInfo>,tagNamedTitleSortInfo,tagNamedTitleSortInfo const &>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UtagNamedTitleSortInfo@@@std@@UtagNamedTitleSortInfo@@@std@@YAXAAV?$allocator@UtagNamedTitleSortInfo@@@0@PAUtagNamedTitleSortInfo@@@Z ; std::_Dest_val<std::allocator<tagNamedTitleSortInfo>,tagNamedTitleSortInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@UtagNamedTitleSortInfo@@@std@@UtagNamedTitleSortInfo@@@std@@YAXAAV?$allocator@UtagNamedTitleSortInfo@@@0@PAUtagNamedTitleSortInfo@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UtagNamedTitleSortInfo@@@std@@UtagNamedTitleSortInfo@@@std@@YAXAAV?$allocator@UtagNamedTitleSortInfo@@@0@PAUtagNamedTitleSortInfo@@@Z PROC ; std::_Dest_val<std::allocator<tagNamedTitleSortInfo>,tagNamedTitleSortInfo>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	83 c1 04	 add	 ecx, 4

; 288  : 	}

  00009	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  0000a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Dest_val@V?$allocator@UtagNamedTitleSortInfo@@@std@@UtagNamedTitleSortInfo@@@std@@YAXAAV?$allocator@UtagNamedTitleSortInfo@@@0@PAUtagNamedTitleSortInfo@@@Z ENDP ; std::_Dest_val<std::allocator<tagNamedTitleSortInfo>,tagNamedTitleSortInfo>
_TEXT	ENDS
PUBLIC	??$_Median@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@00VNamedTitleSortFunc@@@Z ; std::_Median<tagNamedTitleSortInfo *,NamedTitleSortFunc>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Median@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@00VNamedTitleSortFunc@@@Z
_TEXT	SEGMENT
tv200 = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
tv203 = 16						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Median@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@00VNamedTitleSortFunc@@@Z PROC ; std::_Median<tagNamedTitleSortInfo *,NamedTitleSortFunc>, COMDAT

; 3695 : 	{	// sort median element to middle

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3696 : 	if (40 < _Last - _First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000a	56		 push	 esi
  0000b	8b c3		 mov	 eax, ebx
  0000d	2b c1		 sub	 eax, ecx
  0000f	6a 14		 push	 20			; 00000014H
  00011	99		 cdq
  00012	5e		 pop	 esi
  00013	f7 fe		 idiv	 esi
  00015	83 f8 28	 cmp	 eax, 40			; 00000028H
  00018	7e 68		 jle	 SHORT $LN2@Median

; 3697 : 		{	// median of nine
; 3698 : 		size_t _Step = (_Last - _First + 1) / 8;

  0001a	40		 inc	 eax
  0001b	99		 cdq
  0001c	83 e2 07	 and	 edx, 7
  0001f	03 c2		 add	 eax, edx
  00021	57		 push	 edi

; 3699 : 		_Med3(_First, _First + _Step, _First + 2 * _Step, _Pred);

  00022	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00025	c1 f8 03	 sar	 eax, 3
  00028	8b f8		 mov	 edi, eax
  0002a	8b f0		 mov	 esi, eax
  0002c	6b ff 28	 imul	 edi, 40			; 00000028H
  0002f	6b f6 14	 imul	 esi, 20			; 00000014H
  00032	8d 14 0f	 lea	 edx, DWORD PTR [edi+ecx]
  00035	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  00038	52		 push	 edx
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	89 45 08	 mov	 DWORD PTR tv200[ebp], eax
  0003e	e8 00 00 00 00	 call	 ??$_Med3@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@00VNamedTitleSortFunc@@@Z ; std::_Med3<tagNamedTitleSortInfo *,NamedTitleSortFunc>

; 3700 : 		_Med3(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00043	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00046	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  00049	8d 0c 06	 lea	 ecx, DWORD PTR [esi+eax]
  0004c	51		 push	 ecx
  0004d	50		 push	 eax
  0004e	2b c6		 sub	 eax, esi
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$_Med3@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@00VNamedTitleSortFunc@@@Z ; std::_Med3<tagNamedTitleSortInfo *,NamedTitleSortFunc>

; 3701 : 		_Med3(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);

  00056	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00059	89 5d 10	 mov	 DWORD PTR tv203[ebp], ebx
  0005c	29 75 10	 sub	 DWORD PTR tv203[ebp], esi
  0005f	53		 push	 ebx
  00060	ff 75 10	 push	 DWORD PTR tv203[ebp]
  00063	2b df		 sub	 ebx, edi
  00065	53		 push	 ebx
  00066	e8 00 00 00 00	 call	 ??$_Med3@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@00VNamedTitleSortFunc@@@Z ; std::_Med3<tagNamedTitleSortInfo *,NamedTitleSortFunc>

; 3702 : 		_Med3(_First + _Step, _Mid, _Last - _Step, _Pred);

  0006b	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0006e	ff 75 10	 push	 DWORD PTR tv203[ebp]
  00071	ff 75 0c	 push	 DWORD PTR __Mid$[ebp]
  00074	ff 75 08	 push	 DWORD PTR tv200[ebp]
  00077	e8 00 00 00 00	 call	 ??$_Med3@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@00VNamedTitleSortFunc@@@Z ; std::_Med3<tagNamedTitleSortInfo *,NamedTitleSortFunc>
  0007c	83 c4 40	 add	 esp, 64			; 00000040H
  0007f	5f		 pop	 edi

; 3703 : 		}
; 3704 : 	else

  00080	eb 10		 jmp	 SHORT $LN1@Median
$LN2@Median:

; 3705 : 		_Med3(_First, _Mid, _Last, _Pred);

  00082	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00085	53		 push	 ebx
  00086	ff 75 0c	 push	 DWORD PTR __Mid$[ebp]
  00089	51		 push	 ecx
  0008a	e8 00 00 00 00	 call	 ??$_Med3@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@00VNamedTitleSortFunc@@@Z ; std::_Med3<tagNamedTitleSortInfo *,NamedTitleSortFunc>
  0008f	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@Median:
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx

; 3706 : 	}

  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
??$_Median@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@00VNamedTitleSortFunc@@@Z ENDP ; std::_Median<tagNamedTitleSortInfo *,NamedTitleSortFunc>
_TEXT	ENDS
PUBLIC	??$_Make_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@PAH0@Z ; std::_Make_heap<tagNamedTitleSortInfo *,int,tagNamedTitleSortInfo,NamedTitleSortFunc>
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\namedtitlepremiumselectwnd.cpp
xdata$x	SEGMENT
__unwindtable$??$_Make_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@PAH0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Make_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@PAH0@Z$0
__ehfuncinfo$??$_Make_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@PAH0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Make_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@PAH0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Make_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@PAH0@Z
_TEXT	SEGMENT
__Val$507810 = -32					; size = 20
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
??$_Make_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@PAH0@Z PROC ; std::_Make_heap<tagNamedTitleSortInfo *,int,tagNamedTitleSortInfo,NamedTitleSortFunc>, COMDAT

; 2658 : 	{	// make nontrivial [_First, _Last) into a heap, using _Pred

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Make_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@PAH0@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 2659 : 	_Diff _Bottom = _Last - _First;

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000f	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00012	6a 14		 push	 20			; 00000014H
  00014	99		 cdq
  00015	59		 pop	 ecx
  00016	f7 f9		 idiv	 ecx
  00018	8b d8		 mov	 ebx, eax

; 2660 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

  0001a	99		 cdq
  0001b	2b c2		 sub	 eax, edx
  0001d	8b f8		 mov	 edi, eax
  0001f	d1 ff		 sar	 edi, 1
  00021	85 ff		 test	 edi, edi
  00023	7e 47		 jle	 SHORT $LN1@Make_heap

; 2659 : 	_Diff _Bottom = _Last - _First;

  00025	8b f7		 mov	 esi, edi
  00027	6b f6 14	 imul	 esi, 20			; 00000014H
  0002a	03 75 08	 add	 esi, DWORD PTR __First$[ebp]
$LN2@Make_heap:

; 2661 : 		{	// reheap top half, bottom to top
; 2662 : 		--_Hole;

  0002d	83 ee 14	 sub	 esi, 20			; 00000014H

; 2663 : 		_Ty _Val = _Move(*(_First + _Hole));

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	89 45 e0	 mov	 DWORD PTR __Val$507810[ebp], eax
  00035	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00038	50		 push	 eax
  00039	8d 4d e4	 lea	 ecx, DWORD PTR __Val$507810[ebp+4]
  0003c	4f		 dec	 edi
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z

; 2664 : 		_Adjust_heap(_First, _Hole, _Bottom,
; 2665 : 			_Move(_Val), _Pred);

  00043	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00046	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	8d 45 e0	 lea	 eax, DWORD PTR __Val$507810[ebp]
  0004d	50		 push	 eax
  0004e	53		 push	 ebx
  0004f	57		 push	 edi
  00050	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00053	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@HH$$QAU1@VNamedTitleSortFunc@@@Z ; std::_Adjust_heap<tagNamedTitleSortInfo *,int,tagNamedTitleSortInfo,NamedTitleSortFunc>

; 2666 : 		}

  00058	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	83 c4 14	 add	 esp, 20			; 00000014H
  0005f	8d 4d e4	 lea	 ecx, DWORD PTR __Val$507810[ebp+4]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00068	85 ff		 test	 edi, edi
  0006a	7f c1		 jg	 SHORT $LN2@Make_heap
$LN1@Make_heap:

; 2667 : 	}

  0006c	e8 00 00 00 00	 call	 __EH_epilog3
  00071	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Make_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@PAH0@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Val$507810[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1tagNamedTitleSortInfo@@QAE@XZ
__ehhandler$??$_Make_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@PAH0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Make_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@PAH0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Make_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@PAH0@Z ENDP ; std::_Make_heap<tagNamedTitleSortInfo *,int,tagNamedTitleSortInfo,NamedTitleSortFunc>
PUBLIC	??$_Insertion_sort1@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@U1@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z ; std::_Insertion_sort1<tagNamedTitleSortInfo *,NamedTitleSortFunc,tagNamedTitleSortInfo>
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\namedtitlepremiumselectwnd.cpp
xdata$x	SEGMENT
__unwindtable$??$_Insertion_sort1@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@U1@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insertion_sort1@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@U1@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z$0
__ehfuncinfo$??$_Insertion_sort1@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@U1@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Insertion_sort1@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@U1@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Insertion_sort1@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@U1@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z
_TEXT	SEGMENT
__Val$507854 = -36					; size = 20
tv210 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Cat$509741 = 8					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
??$_Insertion_sort1@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@U1@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z PROC ; std::_Insertion_sort1<tagNamedTitleSortInfo *,NamedTitleSortFunc,tagNamedTitleSortInfo>, COMDAT

; 3650 : 	{	// insertion sort [_First, _Last), using _Pred

  00000	6a 18		 push	 24			; 00000018H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Insertion_sort1@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@U1@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 3651 : 	if (_First != _Last)

  0000c	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000f	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00012	0f 84 b1 00 00
	00		 je	 $LN6@Insertion_

; 3652 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  00018	83 c6 14	 add	 esi, 20			; 00000014H
  0001b	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001e	0f 84 a5 00 00
	00		 je	 $LN6@Insertion_
  00024	8d 46 ec	 lea	 eax, DWORD PTR [esi-20]
  00027	89 45 f0	 mov	 DWORD PTR tv210[ebp], eax
$LN7@Insertion_:

; 3653 : 			{	// order next element
; 3654 : 			_BidIt _Next1 = _Next;
; 3655 : 			_Ty _Val = _Move(*_Next);

  0002a	8b 06		 mov	 eax, DWORD PTR [esi]
  0002c	8b 5d f0	 mov	 ebx, DWORD PTR tv210[ebp]
  0002f	89 45 dc	 mov	 DWORD PTR __Val$507854[ebp], eax
  00032	83 c3 28	 add	 ebx, 40			; 00000028H
  00035	8d 43 f0	 lea	 eax, DWORD PTR [ebx-16]
  00038	50		 push	 eax
  00039	8d 4d e0	 lea	 ecx, DWORD PTR __Val$507854[ebp+4]
  0003c	8b fe		 mov	 edi, esi
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z

; 3656 : 
; 3657 : 			if (_DEBUG_LT_PRED(_Pred, _Val, *_First))

  00044	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00047	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0004b	8d 45 dc	 lea	 eax, DWORD PTR __Val$507854[ebp]
  0004e	50		 push	 eax
  0004f	8d 4d 10	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00052	e8 00 00 00 00	 call	 ??RNamedTitleSortFunc@@QBE_NABUtagNamedTitleSortInfo@@0@Z ; NamedTitleSortFunc::operator()
  00057	84 c0		 test	 al, al
  00059	74 13		 je	 SHORT $LN5@Insertion_

; 3658 : 				{	// found new earliest element, move to front
; 3659 : 				_Move_backward(_First, _Next, ++_Next1);

  0005b	ff 75 08	 push	 DWORD PTR __Cat$509741[ebp]
  0005e	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00061	53		 push	 ebx
  00062	56		 push	 esi
  00063	57		 push	 edi
  00064	e8 00 00 00 00	 call	 ??$_Move_backward@PAUtagNamedTitleSortInfo@@PAU1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *>
  00069	83 c4 10	 add	 esp, 16			; 00000010H

; 3660 : 				*_First = _Move(_Val);
; 3661 : 				}
; 3662 : 			else

  0006c	eb 2c		 jmp	 SHORT $LN1@Insertion_
$LN5@Insertion_:

; 3663 : 				{	// look for insertion point after first
; 3664 : 				for (_BidIt _First1 = _Next1;
; 3665 : 					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);
; 3666 : 					_Next1 = _First1)

  0006e	8b 5d f0	 mov	 ebx, DWORD PTR tv210[ebp]
  00071	eb 16		 jmp	 SHORT $LN43@Insertion_
$LL3@Insertion_:

; 3667 : 					*_Next1 = _Move(*_First1);	// move hole down

  00073	8b 03		 mov	 eax, DWORD PTR [ebx]
  00075	89 07		 mov	 DWORD PTR [edi], eax
  00077	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  0007a	50		 push	 eax
  0007b	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  00084	8b fb		 mov	 edi, ebx
  00086	83 eb 14	 sub	 ebx, 20			; 00000014H
$LN43@Insertion_:

; 3663 : 				{	// look for insertion point after first
; 3664 : 				for (_BidIt _First1 = _Next1;
; 3665 : 					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);
; 3666 : 					_Next1 = _First1)

  00089	53		 push	 ebx
  0008a	8d 45 dc	 lea	 eax, DWORD PTR __Val$507854[ebp]
  0008d	50		 push	 eax
  0008e	8d 4d 10	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00091	e8 00 00 00 00	 call	 ??RNamedTitleSortFunc@@QBE_NABUtagNamedTitleSortInfo@@0@Z ; NamedTitleSortFunc::operator()
  00096	84 c0		 test	 al, al
  00098	75 d9		 jne	 SHORT $LL3@Insertion_
$LN1@Insertion_:

; 3668 : 				*_Next1 = _Move(_Val);	// insert element in hole

  0009a	8b 45 dc	 mov	 eax, DWORD PTR __Val$507854[ebp]
  0009d	89 07		 mov	 DWORD PTR [edi], eax
  0009f	8d 45 e0	 lea	 eax, DWORD PTR __Val$507854[ebp+4]
  000a2	50		 push	 eax
  000a3	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 3669 : 				}
; 3670 : 			}

  000ac	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000b0	8d 4d e0	 lea	 ecx, DWORD PTR __Val$507854[ebp+4]
  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  000b9	83 45 f0 14	 add	 DWORD PTR tv210[ebp], 20 ; 00000014H
  000bd	83 c6 14	 add	 esi, 20			; 00000014H
  000c0	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  000c3	0f 85 61 ff ff
	ff		 jne	 $LN7@Insertion_
$LN6@Insertion_:

; 3671 : 	}

  000c9	e8 00 00 00 00	 call	 __EH_epilog3
  000ce	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insertion_sort1@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@U1@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Val$507854[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1tagNamedTitleSortInfo@@QAE@XZ
__ehhandler$??$_Insertion_sort1@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@U1@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insertion_sort1@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@U1@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insertion_sort1@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@U1@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z ENDP ; std::_Insertion_sort1<tagNamedTitleSortInfo *,NamedTitleSortFunc,tagNamedTitleSortInfo>
PUBLIC	??$_Pop_heap_0@PAUtagNamedTitleSortInfo@@U1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z ; std::_Pop_heap_0<tagNamedTitleSortInfo *,tagNamedTitleSortInfo,NamedTitleSortFunc>
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\namedtitlepremiumselectwnd.cpp
xdata$x	SEGMENT
__unwindtable$??$_Pop_heap_0@PAUtagNamedTitleSortInfo@@U1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Pop_heap_0@PAUtagNamedTitleSortInfo@@U1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z$0
__ehfuncinfo$??$_Pop_heap_0@PAUtagNamedTitleSortInfo@@U1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Pop_heap_0@PAUtagNamedTitleSortInfo@@U1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Pop_heap_0@PAUtagNamedTitleSortInfo@@U1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z
_TEXT	SEGMENT
__Val$ = -32						; size = 20
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
??$_Pop_heap_0@PAUtagNamedTitleSortInfo@@U1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z PROC ; std::_Pop_heap_0<tagNamedTitleSortInfo *,tagNamedTitleSortInfo,NamedTitleSortFunc>, COMDAT

; 2601 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Pop_heap_0@PAUtagNamedTitleSortInfo@@U1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 2602 : 	_Ty _Val = _Move(*(_Last - 1));

  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000f	83 c6 ec	 add	 esi, -20		; ffffffecH
  00012	8b 06		 mov	 eax, DWORD PTR [esi]
  00014	89 45 e0	 mov	 DWORD PTR __Val$[ebp], eax
  00017	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	8d 4d e4	 lea	 ecx, DWORD PTR __Val$[ebp+4]
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00024	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 2603 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2604 : 		_Move(_Val), _Pred, _Dist_type(_First));

  00028	6a 00		 push	 0
  0002a	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  0002d	8d 45 e0	 lea	 eax, DWORD PTR __Val$[ebp]
  00030	50		 push	 eax
  00031	56		 push	 esi
  00032	56		 push	 esi
  00033	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00036	e8 00 00 00 00	 call	 ??$_Pop_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@00$$QAU1@VNamedTitleSortFunc@@PAH@Z ; std::_Pop_heap<tagNamedTitleSortInfo *,int,tagNamedTitleSortInfo,NamedTitleSortFunc>

; 2605 : 	}

  0003b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0003f	83 c4 18	 add	 esp, 24			; 00000018H
  00042	8d 4d e4	 lea	 ecx, DWORD PTR __Val$[ebp+4]
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0004b	e8 00 00 00 00	 call	 __EH_epilog3
  00050	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Pop_heap_0@PAUtagNamedTitleSortInfo@@U1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Val$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1tagNamedTitleSortInfo@@QAE@XZ
__ehhandler$??$_Pop_heap_0@PAUtagNamedTitleSortInfo@@U1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Pop_heap_0@PAUtagNamedTitleSortInfo@@U1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Pop_heap_0@PAUtagNamedTitleSortInfo@@U1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z ENDP ; std::_Pop_heap_0<tagNamedTitleSortInfo *,tagNamedTitleSortInfo,NamedTitleSortFunc>
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 550  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 551  : 		_Tidy();

  00002	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  00006	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
  0000d	c6 00 00	 mov	 BYTE PTR [eax], 0

; 552  : 		}

  00010	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 754  : 		_Tidy(true);

  00000	6a 00		 push	 0
  00002	6a 01		 push	 1
  00004	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 755  : 		}

  00009	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
; Function compile flags: /Ogsp
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1959 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1960 : 		if (max_size() < _Newsize)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00007	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0000a	76 0b		 jbe	 SHORT $LN6@Grow

; 1961 : 			_Xlen();	// result too long

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN31@Grow:
$LN6@Grow:

; 1962 : 		if (this->_Myres < _Newsize)

  00017	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0001a	3b c6		 cmp	 eax, esi
  0001c	73 0b		 jae	 SHORT $LN5@Grow

; 1963 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  0001e	ff 71 10	 push	 DWORD PTR [ecx+16]
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00027	eb 2e		 jmp	 SHORT $LN28@Grow
$LN5@Grow:

; 1964 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00029	33 d2		 xor	 edx, edx
  0002b	38 55 0c	 cmp	 BYTE PTR __Trim$[ebp], dl
  0002e	74 17		 je	 SHORT $LN3@Grow
  00030	83 fe 10	 cmp	 esi, 16			; 00000010H
  00033	73 12		 jae	 SHORT $LN3@Grow

; 1965 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1966 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

  00035	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00038	3b f0		 cmp	 esi, eax
  0003a	0f 42 c6	 cmovb	 eax, esi
  0003d	50		 push	 eax
  0003e	6a 01		 push	 1
  00040	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00045	eb 10		 jmp	 SHORT $LN28@Grow
$LN3@Grow:

; 1967 : 		else if (_Newsize == 0)

  00047	3b f2		 cmp	 esi, edx
  00049	75 0c		 jne	 SHORT $LN28@Grow

; 1968 : 			_Eos(0);	// new size is zero, just null terminate

  0004b	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0004e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00051	72 02		 jb	 SHORT $LN26@Grow
  00053	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN26@Grow:
  00055	88 11		 mov	 BYTE PTR [ecx], dl
$LN28@Grow:

; 1969 : 		return (0 < _Newsize);	// return true only if more work to do

  00057	33 c0		 xor	 eax, eax
  00059	3b c6		 cmp	 eax, esi
  0005b	1b c0		 sbb	 eax, eax
  0005d	f7 d8		 neg	 eax
  0005f	5e		 pop	 esi

; 1970 : 		}

  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
$LN30@Grow:
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	??_7SinglePullDownItem@@6B@			; SinglePullDownItem::`vftable'
PUBLIC	??0SinglePullDownItem@@QAE@XZ			; SinglePullDownItem::SinglePullDownItem
PUBLIC	??_R4SinglePullDownItem@@6B@			; SinglePullDownItem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSinglePullDownItem@@@8			; SinglePullDownItem `RTTI Type Descriptor'
PUBLIC	??_R3SinglePullDownItem@@8			; SinglePullDownItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SinglePullDownItem@@8			; SinglePullDownItem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SinglePullDownItem@@8		; SinglePullDownItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioPullDownItem@@8			; ioPullDownItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3ioPullDownItem@@8				; ioPullDownItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioPullDownItem@@8				; ioPullDownItem::`RTTI Base Class Array'
EXTRN	??0ioPullDownItem@@QAE@XZ:PROC			; ioPullDownItem::ioPullDownItem
EXTRN	?OnRender@SinglePullDownItem@@UAEXHH@Z:PROC	; SinglePullDownItem::OnRender
EXTRN	?OnImageListRender@ioPullDownItem@@UAEXHH@Z:PROC ; ioPullDownItem::OnImageListRender
EXTRN	??_ESinglePullDownItem@@UAEPAXI@Z:PROC		; SinglePullDownItem::`vector deleting destructor'
;	COMDAT ??_R2ioPullDownItem@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R2ioPullDownItem@@8 DD FLAT:??_R1A@?0A@EA@ioPullDownItem@@8 ; ioPullDownItem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioPullDownItem@@8
rdata$r	SEGMENT
??_R3ioPullDownItem@@8 DD 00H				; ioPullDownItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioPullDownItem@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioPullDownItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioPullDownItem@@8 DD FLAT:??_R0?AVioPullDownItem@@@8 ; ioPullDownItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioPullDownItem@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SinglePullDownItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SinglePullDownItem@@8 DD FLAT:??_R0?AVSinglePullDownItem@@@8 ; SinglePullDownItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SinglePullDownItem@@8
rdata$r	ENDS
;	COMDAT ??_R2SinglePullDownItem@@8
rdata$r	SEGMENT
??_R2SinglePullDownItem@@8 DD FLAT:??_R1A@?0A@EA@SinglePullDownItem@@8 ; SinglePullDownItem::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioPullDownItem@@8
rdata$r	ENDS
;	COMDAT ??_R3SinglePullDownItem@@8
rdata$r	SEGMENT
??_R3SinglePullDownItem@@8 DD 00H			; SinglePullDownItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SinglePullDownItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSinglePullDownItem@@@8
_DATA	SEGMENT
??_R0?AVSinglePullDownItem@@@8 DD FLAT:??_7type_info@@6B@ ; SinglePullDownItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSinglePullDownItem@@', 00H
_DATA	ENDS
;	COMDAT ??_R4SinglePullDownItem@@6B@
rdata$r	SEGMENT
??_R4SinglePullDownItem@@6B@ DD 00H			; SinglePullDownItem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSinglePullDownItem@@@8
	DD	FLAT:??_R3SinglePullDownItem@@8
rdata$r	ENDS
;	COMDAT ??_7SinglePullDownItem@@6B@
CONST	SEGMENT
??_7SinglePullDownItem@@6B@ DD FLAT:??_R4SinglePullDownItem@@6B@ ; SinglePullDownItem::`vftable'
	DD	FLAT:?OnRender@SinglePullDownItem@@UAEXHH@Z
	DD	FLAT:?OnImageListRender@ioPullDownItem@@UAEXHH@Z
	DD	FLAT:??_ESinglePullDownItem@@UAEPAXI@Z
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\iopulldownitem.h
CONST	ENDS
;	COMDAT ??0SinglePullDownItem@@QAE@XZ
_TEXT	SEGMENT
??0SinglePullDownItem@@QAE@XZ PROC			; SinglePullDownItem::SinglePullDownItem, COMDAT
; _this$ = ecx

; 63   : 	SinglePullDownItem()

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0ioPullDownItem@@QAE@XZ ; ioPullDownItem::ioPullDownItem
  00008	33 c0		 xor	 eax, eax
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SinglePullDownItem@@6B@
  00010	89 46 58	 mov	 DWORD PTR [esi+88], eax
  00013	c7 46 5c 0f 00
	00 00		 mov	 DWORD PTR [esi+92], 15	; 0000000fH
  0001a	88 46 48	 mov	 BYTE PTR [esi+72], al

; 64   : 	{
; 65   : 		m_eType				= PDIT_SINGLE;
; 66   : 		m_dwTitleColor		= TCT_DEFAULT_DARKGRAY;
; 67   : 		m_dwTitleOverColor	= TCT_DEFAULT_WHITE;

  0001d	83 4e 68 ff	 or	 DWORD PTR [esi+104], -1
  00021	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00024	c7 46 64 3a 3a
	3a ff		 mov	 DWORD PTR [esi+100], -12961222 ; ff3a3a3aH

; 68   : 	}

  0002b	8b c6		 mov	 eax, esi
  0002d	5e		 pop	 esi
  0002e	c3		 ret	 0
??0SinglePullDownItem@@QAE@XZ ENDP			; SinglePullDownItem::SinglePullDownItem
_TEXT	ENDS
PUBLIC	??1SinglePullDownItem@@UAE@XZ			; SinglePullDownItem::~SinglePullDownItem
EXTRN	??1ioPullDownItem@@UAE@XZ:PROC			; ioPullDownItem::~ioPullDownItem
; Function compile flags: /Ogsp
;	COMDAT ??1SinglePullDownItem@@UAE@XZ
_TEXT	SEGMENT
??1SinglePullDownItem@@UAE@XZ PROC			; SinglePullDownItem::~SinglePullDownItem, COMDAT
; _this$ = ecx

; 69   : 	virtual ~SinglePullDownItem(){}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	6a 00		 push	 0
  00005	6a 01		 push	 1
  00007	8d 4e 48	 lea	 ecx, DWORD PTR [esi+72]
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SinglePullDownItem@@6B@
  00010	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00015	8b ce		 mov	 ecx, esi
  00017	5e		 pop	 esi
  00018	e9 00 00 00 00	 jmp	 ??1ioPullDownItem@@UAE@XZ ; ioPullDownItem::~ioPullDownItem
??1SinglePullDownItem@@UAE@XZ ENDP			; SinglePullDownItem::~SinglePullDownItem
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GSinglePullDownItem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSinglePullDownItem@@UAEPAXI@Z PROC			; SinglePullDownItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1SinglePullDownItem@@UAE@XZ ; SinglePullDownItem::~SinglePullDownItem
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@4
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@4:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GSinglePullDownItem@@UAEPAXI@Z ENDP			; SinglePullDownItem::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7NamedTitlePullDown@@6B@			; NamedTitlePullDown::`vftable'
PUBLIC	??0NamedTitlePullDown@@QAE@XZ			; NamedTitlePullDown::NamedTitlePullDown
PUBLIC	??_R4NamedTitlePullDown@@6B@			; NamedTitlePullDown::`RTTI Complete Object Locator'
PUBLIC	??_R3NamedTitlePullDown@@8			; NamedTitlePullDown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NamedTitlePullDown@@8			; NamedTitlePullDown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NamedTitlePullDown@@8		; NamedTitlePullDown::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_ENamedTitlePullDown@@UAEPAXI@Z:PROC		; NamedTitlePullDown::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@NamedTitlePullDown@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\namedtitlepremiumselectwnd.h
rdata$r	SEGMENT
??_R1A@?0A@EA@NamedTitlePullDown@@8 DD FLAT:??_R0?AVNamedTitlePullDown@@@8 ; NamedTitlePullDown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NamedTitlePullDown@@8
rdata$r	ENDS
;	COMDAT ??_R2NamedTitlePullDown@@8
rdata$r	SEGMENT
??_R2NamedTitlePullDown@@8 DD FLAT:??_R1A@?0A@EA@NamedTitlePullDown@@8 ; NamedTitlePullDown::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SinglePullDownItem@@8
	DD	FLAT:??_R1A@?0A@EA@ioPullDownItem@@8
rdata$r	ENDS
;	COMDAT ??_R3NamedTitlePullDown@@8
rdata$r	SEGMENT
??_R3NamedTitlePullDown@@8 DD 00H			; NamedTitlePullDown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2NamedTitlePullDown@@8
rdata$r	ENDS
;	COMDAT ??_R4NamedTitlePullDown@@6B@
rdata$r	SEGMENT
??_R4NamedTitlePullDown@@6B@ DD 00H			; NamedTitlePullDown::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVNamedTitlePullDown@@@8
	DD	FLAT:??_R3NamedTitlePullDown@@8
rdata$r	ENDS
;	COMDAT ??_7NamedTitlePullDown@@6B@
CONST	SEGMENT
??_7NamedTitlePullDown@@6B@ DD FLAT:??_R4NamedTitlePullDown@@6B@ ; NamedTitlePullDown::`vftable'
	DD	FLAT:?OnRender@SinglePullDownItem@@UAEXHH@Z
	DD	FLAT:?OnImageListRender@ioPullDownItem@@UAEXHH@Z
	DD	FLAT:??_ENamedTitlePullDown@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0NamedTitlePullDown@@QAE@XZ
_TEXT	SEGMENT
??0NamedTitlePullDown@@QAE@XZ PROC			; NamedTitlePullDown::NamedTitlePullDown, COMDAT
; _this$ = ecx

; 61   : 	NamedTitlePullDown()

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0SinglePullDownItem@@QAE@XZ ; SinglePullDownItem::SinglePullDownItem

; 62   : 	{
; 63   : 		m_dwCode = 0;

  00008	83 66 6c 00	 and	 DWORD PTR [esi+108], 0
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NamedTitlePullDown@@6B@

; 64   : 	}

  00012	8b c6		 mov	 eax, esi
  00014	5e		 pop	 esi
  00015	c3		 ret	 0
??0NamedTitlePullDown@@QAE@XZ ENDP			; NamedTitlePullDown::NamedTitlePullDown
_TEXT	ENDS
PUBLIC	??1NamedTitlePullDown@@UAE@XZ			; NamedTitlePullDown::~NamedTitlePullDown
; Function compile flags: /Ogsp
;	COMDAT ??1NamedTitlePullDown@@UAE@XZ
_TEXT	SEGMENT
??1NamedTitlePullDown@@UAE@XZ PROC			; NamedTitlePullDown::~NamedTitlePullDown, COMDAT
; _this$ = ecx

; 65   : 	virtual ~NamedTitlePullDown(){}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7NamedTitlePullDown@@6B@
  00006	e9 00 00 00 00	 jmp	 ??1SinglePullDownItem@@UAE@XZ ; SinglePullDownItem::~SinglePullDownItem
??1NamedTitlePullDown@@UAE@XZ ENDP			; NamedTitlePullDown::~NamedTitlePullDown
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GNamedTitlePullDown@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GNamedTitlePullDown@@UAEPAXI@Z PROC			; NamedTitlePullDown::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NamedTitlePullDown@@6B@
  0000c	e8 00 00 00 00	 call	 ??1SinglePullDownItem@@UAE@XZ ; SinglePullDownItem::~SinglePullDownItem
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 07		 je	 SHORT $LN1@scalar@5
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	59		 pop	 ecx
$LN1@scalar@5:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??_GNamedTitlePullDown@@UAEPAXI@Z ENDP			; NamedTitlePullDown::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@YAXPAUtagNamedTitleSortInfo@@0AAV?$allocator@UtagNamedTitleSortInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<tagNamedTitleSortInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@YAXPAUtagNamedTitleSortInfo@@0AAV?$allocator@UtagNamedTitleSortInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@YAXPAUtagNamedTitleSortInfo@@0AAV?$allocator@UtagNamedTitleSortInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<tagNamedTitleSortInfo> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0c		 jmp	 SHORT $LN20@Destroy_ra
$LL3@Destroy_ra:

; 97   : 		_Dest_val(_Al, _First);

  00009	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00012	83 c6 14	 add	 esi, 20			; 00000014H
$LN20@Destroy_ra:

; 96   : 	for (; _First != _Last; ++_First)

  00015	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00018	75 ef		 jne	 SHORT $LL3@Destroy_ra
  0001a	5e		 pop	 esi

; 98   : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Destroy_range@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@YAXPAUtagNamedTitleSortInfo@@0AAV?$allocator@UtagNamedTitleSortInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<tagNamedTitleSortInfo> >
_TEXT	ENDS
PUBLIC	??$_Unguarded_partition@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YA?AU?$pair@PAUtagNamedTitleSortInfo@@PAU1@@0@PAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z ; std::_Unguarded_partition<tagNamedTitleSortInfo *,NamedTitleSortFunc>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Unguarded_partition@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YA?AU?$pair@PAUtagNamedTitleSortInfo@@PAU1@@0@PAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z
_TEXT	SEGMENT
tv320 = -8						; size = 4
tv264 = -8						; size = 4
__Glast$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Unguarded_partition@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YA?AU?$pair@PAUtagNamedTitleSortInfo@@PAU1@@0@PAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z PROC ; std::_Unguarded_partition<tagNamedTitleSortInfo *,NamedTitleSortFunc>, COMDAT

; 3712 : 	{	// partition [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 3713 : 	_RanIt _Mid = _First + (_Last - _First) / 2;

  00005	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00008	53		 push	 ebx
  00009	8b 5d 0c	 mov	 ebx, DWORD PTR __First$[ebp]
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b c1		 mov	 eax, ecx
  00010	2b c3		 sub	 eax, ebx
  00012	6a 14		 push	 20			; 00000014H
  00014	5e		 pop	 esi
  00015	99		 cdq
  00016	f7 fe		 idiv	 esi

; 3714 : 	_Median(_First, _Mid, _Last - 1, _Pred);

  00018	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0001b	83 c1 ec	 add	 ecx, -20		; ffffffecH
  0001e	51		 push	 ecx
  0001f	99		 cdq
  00020	2b c2		 sub	 eax, edx
  00022	8b f0		 mov	 esi, eax
  00024	d1 fe		 sar	 esi, 1
  00026	6b f6 14	 imul	 esi, 20			; 00000014H
  00029	03 f3		 add	 esi, ebx
  0002b	56		 push	 esi
  0002c	53		 push	 ebx
  0002d	e8 00 00 00 00	 call	 ??$_Median@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@00VNamedTitleSortFunc@@@Z ; std::_Median<tagNamedTitleSortInfo *,NamedTitleSortFunc>
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 3715 : 	_RanIt _Pfirst = _Mid;
; 3716 : 	_RanIt _Plast = _Pfirst + 1;

  00035	8d 7e 14	 lea	 edi, DWORD PTR [esi+20]
  00038	eb 27		 jmp	 SHORT $LN72@Unguarded_
$LL27@Unguarded_:

; 3717 : 
; 3718 : 	while (_First < _Pfirst
; 3719 : 		&& !_DEBUG_LT_PRED(_Pred, *(_Pfirst - 1), *_Pfirst)
; 3720 : 		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))

  0003a	8d 46 ec	 lea	 eax, DWORD PTR [esi-20]
  0003d	56		 push	 esi
  0003e	50		 push	 eax
  0003f	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00042	89 45 f8	 mov	 DWORD PTR tv264[ebp], eax
  00045	e8 00 00 00 00	 call	 ??RNamedTitleSortFunc@@QBE_NABUtagNamedTitleSortInfo@@0@Z ; NamedTitleSortFunc::operator()
  0004a	84 c0		 test	 al, al
  0004c	75 38		 jne	 SHORT $LN73@Unguarded_
  0004e	ff 75 f8	 push	 DWORD PTR tv264[ebp]
  00051	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00054	56		 push	 esi
  00055	e8 00 00 00 00	 call	 ??RNamedTitleSortFunc@@QBE_NABUtagNamedTitleSortInfo@@0@Z ; NamedTitleSortFunc::operator()
  0005a	84 c0		 test	 al, al
  0005c	75 28		 jne	 SHORT $LN73@Unguarded_

; 3721 : 		--_Pfirst;

  0005e	8b 75 f8	 mov	 esi, DWORD PTR tv264[ebp]
$LN72@Unguarded_:

; 3717 : 
; 3718 : 	while (_First < _Pfirst
; 3719 : 		&& !_DEBUG_LT_PRED(_Pred, *(_Pfirst - 1), *_Pfirst)
; 3720 : 		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))

  00061	3b de		 cmp	 ebx, esi
  00063	72 d5		 jb	 SHORT $LL27@Unguarded_

; 3725 : 		++_Plast;

  00065	eb 1f		 jmp	 SHORT $LN73@Unguarded_
$LL25@Unguarded_:

; 3722 : 	while (_Plast < _Last
; 3723 : 		&& !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst)
; 3724 : 		&& !_Pred(*_Pfirst, *_Plast))

  00067	56		 push	 esi
  00068	57		 push	 edi
  00069	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  0006c	e8 00 00 00 00	 call	 ??RNamedTitleSortFunc@@QBE_NABUtagNamedTitleSortInfo@@0@Z ; NamedTitleSortFunc::operator()
  00071	84 c0		 test	 al, al
  00073	75 16		 jne	 SHORT $LN24@Unguarded_
  00075	57		 push	 edi
  00076	56		 push	 esi
  00077	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  0007a	e8 00 00 00 00	 call	 ??RNamedTitleSortFunc@@QBE_NABUtagNamedTitleSortInfo@@0@Z ; NamedTitleSortFunc::operator()
  0007f	84 c0		 test	 al, al
  00081	75 08		 jne	 SHORT $LN24@Unguarded_

; 3725 : 		++_Plast;

  00083	83 c7 14	 add	 edi, 20			; 00000014H
$LN73@Unguarded_:

; 3722 : 	while (_Plast < _Last
; 3723 : 		&& !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst)
; 3724 : 		&& !_Pred(*_Pfirst, *_Plast))

  00086	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  00089	72 dc		 jb	 SHORT $LL25@Unguarded_
$LN24@Unguarded_:

; 3726 : 
; 3727 : 	_RanIt _Gfirst = _Plast;

  0008b	8b df		 mov	 ebx, edi

; 3728 : 	_RanIt _Glast = _Pfirst;

  0008d	89 75 fc	 mov	 DWORD PTR __Glast$[ebp], esi

; 3729 : 
; 3730 : 	for (; ; )
; 3731 : 		{	// partition
; 3732 : 		for (; _Gfirst < _Last; ++_Gfirst)

  00090	eb 2d		 jmp	 SHORT $LN75@Unguarded_
$LL21@Unguarded_:

; 3733 : 			if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst))

  00092	53		 push	 ebx
  00093	56		 push	 esi
  00094	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00097	e8 00 00 00 00	 call	 ??RNamedTitleSortFunc@@QBE_NABUtagNamedTitleSortInfo@@0@Z ; NamedTitleSortFunc::operator()
  0009c	84 c0		 test	 al, al
  0009e	75 1c		 jne	 SHORT $LN20@Unguarded_

; 3734 : 				;
; 3735 : 			else if (_Pred(*_Gfirst, *_Pfirst))

  000a0	56		 push	 esi
  000a1	53		 push	 ebx
  000a2	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000a5	e8 00 00 00 00	 call	 ??RNamedTitleSortFunc@@QBE_NABUtagNamedTitleSortInfo@@0@Z ; NamedTitleSortFunc::operator()
  000aa	84 c0		 test	 al, al
  000ac	75 16		 jne	 SHORT $LN69@Unguarded_

; 3736 : 				break;
; 3737 : 			else
; 3738 : 				_STD iter_swap(_Plast++, _Gfirst);

  000ae	8b c7		 mov	 eax, edi
  000b0	53		 push	 ebx
  000b1	83 c7 14	 add	 edi, 20			; 00000014H
  000b4	50		 push	 eax
$LN76@Unguarded_:
  000b5	e8 00 00 00 00	 call	 ??$swap@UtagNamedTitleSortInfo@@@std@@YAXAAUtagNamedTitleSortInfo@@0@Z ; std::swap<tagNamedTitleSortInfo>
  000ba	59		 pop	 ecx
  000bb	59		 pop	 ecx
$LN20@Unguarded_:

; 3729 : 
; 3730 : 	for (; ; )
; 3731 : 		{	// partition
; 3732 : 		for (; _Gfirst < _Last; ++_Gfirst)

  000bc	83 c3 14	 add	 ebx, 20			; 00000014H
$LN75@Unguarded_:
  000bf	3b 5d 10	 cmp	 ebx, DWORD PTR __Last$[ebp]
  000c2	72 ce		 jb	 SHORT $LL21@Unguarded_
$LN69@Unguarded_:

; 3739 : 		for (; _First < _Glast; --_Glast)

  000c4	8b 45 fc	 mov	 eax, DWORD PTR __Glast$[ebp]
  000c7	39 45 0c	 cmp	 DWORD PTR __First$[ebp], eax
  000ca	73 44		 jae	 SHORT $LN71@Unguarded_
  000cc	83 c0 ec	 add	 eax, -20		; ffffffecH
  000cf	89 45 f8	 mov	 DWORD PTR tv320[ebp], eax
$LL70@Unguarded_:

; 3740 : 			if (_DEBUG_LT_PRED(_Pred, *(_Glast - 1), *_Pfirst))

  000d2	56		 push	 esi
  000d3	ff 75 f8	 push	 DWORD PTR tv320[ebp]
  000d6	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000d9	e8 00 00 00 00	 call	 ??RNamedTitleSortFunc@@QBE_NABUtagNamedTitleSortInfo@@0@Z ; NamedTitleSortFunc::operator()
  000de	84 c0		 test	 al, al
  000e0	75 1e		 jne	 SHORT $LN13@Unguarded_

; 3741 : 				;
; 3742 : 			else if (_Pred(*_Pfirst, *(_Glast - 1)))

  000e2	ff 75 f8	 push	 DWORD PTR tv320[ebp]
  000e5	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000e8	56		 push	 esi
  000e9	e8 00 00 00 00	 call	 ??RNamedTitleSortFunc@@QBE_NABUtagNamedTitleSortInfo@@0@Z ; NamedTitleSortFunc::operator()
  000ee	84 c0		 test	 al, al
  000f0	75 1e		 jne	 SHORT $LN71@Unguarded_

; 3743 : 				break;
; 3744 : 			else
; 3745 : 				_STD iter_swap(--_Pfirst, _Glast - 1);

  000f2	ff 75 f8	 push	 DWORD PTR tv320[ebp]
  000f5	83 ee 14	 sub	 esi, 20			; 00000014H
  000f8	56		 push	 esi
  000f9	e8 00 00 00 00	 call	 ??$swap@UtagNamedTitleSortInfo@@@std@@YAXAAUtagNamedTitleSortInfo@@0@Z ; std::swap<tagNamedTitleSortInfo>
  000fe	59		 pop	 ecx
  000ff	59		 pop	 ecx
$LN13@Unguarded_:

; 3739 : 		for (; _First < _Glast; --_Glast)

  00100	83 6d fc 14	 sub	 DWORD PTR __Glast$[ebp], 20 ; 00000014H
  00104	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00107	83 6d f8 14	 sub	 DWORD PTR tv320[ebp], 20 ; 00000014H
  0010b	3b 45 fc	 cmp	 eax, DWORD PTR __Glast$[ebp]
  0010e	72 c2		 jb	 SHORT $LL70@Unguarded_
$LN71@Unguarded_:

; 3746 : 		if (_Glast == _First && _Gfirst == _Last)

  00110	8b 45 fc	 mov	 eax, DWORD PTR __Glast$[ebp]
  00113	3b 45 0c	 cmp	 eax, DWORD PTR __First$[ebp]
  00116	75 1f		 jne	 SHORT $LN6@Unguarded_
  00118	3b 5d 10	 cmp	 ebx, DWORD PTR __Last$[ebp]
  0011b	74 4d		 je	 SHORT $LN64@Unguarded_

; 3748 : 
; 3749 : 		if (_Glast == _First)
; 3750 : 			{	// no room at bottom, rotate pivot upward
; 3751 : 			if (_Plast != _Gfirst)

  0011d	3b fb		 cmp	 edi, ebx
  0011f	74 09		 je	 SHORT $LN46@Unguarded_

; 3752 : 				_STD iter_swap(_Pfirst, _Plast);

  00121	57		 push	 edi
  00122	56		 push	 esi
  00123	e8 00 00 00 00	 call	 ??$swap@UtagNamedTitleSortInfo@@@std@@YAXAAUtagNamedTitleSortInfo@@0@Z ; std::swap<tagNamedTitleSortInfo>
  00128	59		 pop	 ecx
  00129	59		 pop	 ecx
$LN46@Unguarded_:

; 3753 : 			++_Plast;
; 3754 : 			_STD iter_swap(_Pfirst++, _Gfirst++);

  0012a	53		 push	 ebx
  0012b	56		 push	 esi
  0012c	83 c7 14	 add	 edi, 20			; 00000014H
  0012f	83 c6 14	 add	 esi, 20			; 00000014H
  00132	83 c3 14	 add	 ebx, 20			; 00000014H
  00135	eb 20		 jmp	 SHORT $LN74@Unguarded_
$LN6@Unguarded_:

; 3755 : 			}
; 3756 : 		else if (_Gfirst == _Last)
; 3757 : 			{	// no room at top, rotate pivot downward
; 3758 : 			if (--_Glast != --_Pfirst)

  00137	83 e8 14	 sub	 eax, 20			; 00000014H
  0013a	89 45 fc	 mov	 DWORD PTR __Glast$[ebp], eax
  0013d	3b 5d 10	 cmp	 ebx, DWORD PTR __Last$[ebp]
  00140	75 21		 jne	 SHORT $LN3@Unguarded_
  00142	83 ee 14	 sub	 esi, 20			; 00000014H
  00145	3b c6		 cmp	 eax, esi
  00147	74 09		 je	 SHORT $LN50@Unguarded_

; 3759 : 				_STD iter_swap(_Glast, _Pfirst);

  00149	56		 push	 esi
  0014a	50		 push	 eax
  0014b	e8 00 00 00 00	 call	 ??$swap@UtagNamedTitleSortInfo@@@std@@YAXAAUtagNamedTitleSortInfo@@0@Z ; std::swap<tagNamedTitleSortInfo>
  00150	59		 pop	 ecx
  00151	59		 pop	 ecx
$LN50@Unguarded_:

; 3760 : 			_STD iter_swap(_Pfirst, --_Plast);

  00152	83 ef 14	 sub	 edi, 20			; 00000014H
  00155	57		 push	 edi
  00156	56		 push	 esi
$LN74@Unguarded_:
  00157	e8 00 00 00 00	 call	 ??$swap@UtagNamedTitleSortInfo@@@std@@YAXAAUtagNamedTitleSortInfo@@0@Z ; std::swap<tagNamedTitleSortInfo>
  0015c	59		 pop	 ecx
  0015d	59		 pop	 ecx

; 3761 : 			}
; 3762 : 		else

  0015e	e9 5c ff ff ff	 jmp	 $LN75@Unguarded_
$LN3@Unguarded_:

; 3763 : 			_STD iter_swap(_Gfirst++, --_Glast);

  00163	50		 push	 eax
  00164	53		 push	 ebx

; 3764 : 		}

  00165	e9 4b ff ff ff	 jmp	 $LN76@Unguarded_
$LN64@Unguarded_:

; 3747 : 			return (_STD pair<_RanIt, _RanIt>(_Pfirst, _Plast));

  0016a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0016d	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00170	5f		 pop	 edi
  00171	89 30		 mov	 DWORD PTR [eax], esi
  00173	5e		 pop	 esi
  00174	5b		 pop	 ebx

; 3765 : 	}

  00175	c9		 leave
  00176	c3		 ret	 0
??$_Unguarded_partition@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YA?AU?$pair@PAUtagNamedTitleSortInfo@@PAU1@@0@PAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z ENDP ; std::_Unguarded_partition<tagNamedTitleSortInfo *,NamedTitleSortFunc>
_TEXT	ENDS
PUBLIC	??$make_heap@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z ; std::make_heap<tagNamedTitleSortInfo *,NamedTitleSortFunc>
; Function compile flags: /Ogsp
;	COMDAT ??$make_heap@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$make_heap@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z PROC ; std::make_heap<tagNamedTitleSortInfo *,NamedTitleSortFunc>, COMDAT

; 2672 : 	{	// make [_First, _Last) into a heap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2673 : 	_DEBUG_RANGE(_First, _Last);
; 2674 : 	_DEBUG_POINTER(_Pred);
; 2675 : 	if (1 < _Last - _First)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00009	6a 14		 push	 20			; 00000014H
  0000b	99		 cdq
  0000c	59		 pop	 ecx
  0000d	f7 f9		 idiv	 ecx
  0000f	83 f8 01	 cmp	 eax, 1
  00012	7e 15		 jle	 SHORT $LN1@make_heap

; 2676 : 		_Make_heap(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2677 : 			_Dist_type(_First), _Val_type(_First));

  00014	6a 00		 push	 0
  00016	6a 00		 push	 0
  00018	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  0001b	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0001e	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Make_heap@PAUtagNamedTitleSortInfo@@HU1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@PAH0@Z ; std::_Make_heap<tagNamedTitleSortInfo *,int,tagNamedTitleSortInfo,NamedTitleSortFunc>
  00026	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@make_heap:

; 2678 : 	}

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??$make_heap@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z ENDP ; std::make_heap<tagNamedTitleSortInfo *,NamedTitleSortFunc>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z ; std::_Insertion_sort<tagNamedTitleSortInfo *,NamedTitleSortFunc>
; Function compile flags: /Ogsp
;	COMDAT ??$_Insertion_sort@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Insertion_sort@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z PROC ; std::_Insertion_sort<tagNamedTitleSortInfo *,NamedTitleSortFunc>, COMDAT

; 3676 : 	{	// insertion sort [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3677 : 	_Insertion_sort1(_First, _Last, _Pred, _Val_type(_First));

  00003	6a 00		 push	 0
  00005	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00008	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Insertion_sort1@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@U1@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z ; std::_Insertion_sort1<tagNamedTitleSortInfo *,NamedTitleSortFunc,tagNamedTitleSortInfo>
  00013	83 c4 10	 add	 esp, 16			; 00000010H

; 3678 : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Insertion_sort@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z ENDP ; std::_Insertion_sort<tagNamedTitleSortInfo *,NamedTitleSortFunc>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUtagNamedTitleSortInfo@@PAU1@V?$allocator@UtagNamedTitleSortInfo@@@std@@U1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00AAV?$allocator@UtagNamedTitleSortInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *,std::allocator<tagNamedTitleSortInfo>,tagNamedTitleSortInfo>
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\namedtitlepremiumselectwnd.cpp
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUtagNamedTitleSortInfo@@PAU1@V?$allocator@UtagNamedTitleSortInfo@@@std@@U1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00AAV?$allocator@UtagNamedTitleSortInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUtagNamedTitleSortInfo@@PAU1@V?$allocator@UtagNamedTitleSortInfo@@@std@@U1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00AAV?$allocator@UtagNamedTitleSortInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUtagNamedTitleSortInfo@@PAU1@V?$allocator@UtagNamedTitleSortInfo@@@std@@U1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00AAV?$allocator@UtagNamedTitleSortInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUtagNamedTitleSortInfo@@PAU1@V?$allocator@UtagNamedTitleSortInfo@@@std@@U1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00AAV?$allocator@UtagNamedTitleSortInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUtagNamedTitleSortInfo@@PAU1@V?$allocator@UtagNamedTitleSortInfo@@@std@@U1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00AAV?$allocator@UtagNamedTitleSortInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$3
__ehfuncinfo$??$_Uninit_move@PAUtagNamedTitleSortInfo@@PAU1@V?$allocator@UtagNamedTitleSortInfo@@@std@@U1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00AAV?$allocator@UtagNamedTitleSortInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUtagNamedTitleSortInfo@@PAU1@V?$allocator@UtagNamedTitleSortInfo@@@std@@U1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00AAV?$allocator@UtagNamedTitleSortInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUtagNamedTitleSortInfo@@PAU1@V?$allocator@UtagNamedTitleSortInfo@@@std@@U1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00AAV?$allocator@UtagNamedTitleSortInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAUtagNamedTitleSortInfo@@PAU1@V?$allocator@UtagNamedTitleSortInfo@@@std@@U1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00AAV?$allocator@UtagNamedTitleSortInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUtagNamedTitleSortInfo@@PAU1@V?$allocator@UtagNamedTitleSortInfo@@@std@@U1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00AAV?$allocator@UtagNamedTitleSortInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *,std::allocator<tagNamedTitleSortInfo>,tagNamedTitleSortInfo>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_move@PAUtagNamedTitleSortInfo@@PAU1@V?$allocator@UtagNamedTitleSortInfo@@@std@@U1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00AAV?$allocator@UtagNamedTitleSortInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 428  : 
; 429  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00016	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LL6@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	74 34		 je	 SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  0001e	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00021	56		 push	 esi
  00022	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00025	e8 00 00 00 00	 call	 ?construct@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@$$QAU3@@Z ; std::allocator<tagNamedTitleSortInfo>::construct
  0002a	83 45 10 14	 add	 DWORD PTR __Dest$[ebp], 20 ; 00000014H
  0002e	83 c6 14	 add	 esi, 20			; 00000014H
  00031	eb e6		 jmp	 SHORT $LL6@Uninit_mov
__catch$??$_Uninit_move@PAUtagNamedTitleSortInfo@@PAU1@V?$allocator@UtagNamedTitleSortInfo@@@std@@U1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00AAV?$allocator@UtagNamedTitleSortInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00033	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00036	eb 0c		 jmp	 SHORT $LN36@Uninit_mov
$LL3@Uninit_mov:

; 434  : 		_Dest_val(_Al, _Next);

  00038	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00041	83 c6 14	 add	 esi, 20			; 00000014H
$LN36@Uninit_mov:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00044	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00047	75 ef		 jne	 SHORT $LL3@Uninit_mov

; 435  : 	_RERAISE;

  00049	6a 00		 push	 0
  0004b	6a 00		 push	 0
  0004d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN37@Uninit_mov:
$LN4@Uninit_mov:

; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00052	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 438  : 	}

  00055	e8 00 00 00 00	 call	 __EH_epilog3
  0005a	c3		 ret	 0
$LN35@Uninit_mov:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUtagNamedTitleSortInfo@@PAU1@V?$allocator@UtagNamedTitleSortInfo@@@std@@U1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00AAV?$allocator@UtagNamedTitleSortInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUtagNamedTitleSortInfo@@PAU1@V?$allocator@UtagNamedTitleSortInfo@@@std@@U1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00AAV?$allocator@UtagNamedTitleSortInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUtagNamedTitleSortInfo@@PAU1@V?$allocator@UtagNamedTitleSortInfo@@@std@@U1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00AAV?$allocator@UtagNamedTitleSortInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *,std::allocator<tagNamedTitleSortInfo>,tagNamedTitleSortInfo>
PUBLIC	??$_Pop_heap@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z ; std::_Pop_heap<tagNamedTitleSortInfo *,NamedTitleSortFunc>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Pop_heap@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Pop_heap@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z PROC ; std::_Pop_heap<tagNamedTitleSortInfo *,NamedTitleSortFunc>, COMDAT

; 2610 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2611 : 	_Pop_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2612 : 		_Val_type(_First));

  00003	6a 00		 push	 0
  00005	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00008	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Pop_heap_0@PAUtagNamedTitleSortInfo@@U1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z ; std::_Pop_heap_0<tagNamedTitleSortInfo *,tagNamedTitleSortInfo,NamedTitleSortFunc>
  00013	83 c4 10	 add	 esp, 16			; 00000010H

; 2613 : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Pop_heap@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z ENDP ; std::_Pop_heap<tagNamedTitleSortInfo *,NamedTitleSortFunc>
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 893  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 894  : 		if (_Right.size() < _Roff)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  00010	57		 push	 edi
  00011	3b c1		 cmp	 eax, ecx
  00013	73 0b		 jae	 SHORT $LN5@assign

; 895  : 			_Xran();	// _Roff off end

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN34@assign:
$LN5@assign:

; 896  : 		size_type _Num = _Right.size() - _Roff;

  00020	2b c1		 sub	 eax, ecx
  00022	8b f8		 mov	 edi, eax

; 897  : 		if (_Count < _Num)

  00024	39 7d 10	 cmp	 DWORD PTR __Count$[ebp], edi

; 898  : 			_Num = _Count;	// trim _Num to size

  00027	0f 42 7d 10	 cmovb	 edi, DWORD PTR __Count$[ebp]

; 899  : 
; 900  : 		if (this == &_Right)

  0002b	3b f3		 cmp	 esi, ebx
  0002d	75 1a		 jne	 SHORT $LN3@assign

; 901  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002f	03 f9		 add	 edi, ecx
  00031	6a ff		 push	 -1
  00033	57		 push	 edi
  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0003b	ff 75 0c	 push	 DWORD PTR __Roff$[ebp]
  0003e	8b ce		 mov	 ecx, esi
  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00047	eb 47		 jmp	 SHORT $LN31@assign
$LN3@assign:

; 902  : 		else if (_Grow(_Num))

  00049	6a 00		 push	 0
  0004b	57		 push	 edi
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00053	84 c0		 test	 al, al
  00055	74 39		 je	 SHORT $LN31@assign

; 903  : 			{	// make room and assign new stuff
; 904  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  00057	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  0005b	72 04		 jb	 SHORT $LN17@assign
  0005d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0005f	eb 02		 jmp	 SHORT $LN18@assign
$LN17@assign:
  00061	8b c3		 mov	 eax, ebx
$LN18@assign:
  00063	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00067	72 04		 jb	 SHORT $LN21@assign
  00069	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0006b	eb 02		 jmp	 SHORT $LN22@assign
$LN21@assign:
  0006d	8b ce		 mov	 ecx, esi
$LN22@assign:
  0006f	03 45 0c	 add	 eax, DWORD PTR __Roff$[ebp]
  00072	57		 push	 edi
  00073	50		 push	 eax
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _memcpy
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 905  : 			_Eos(_Num);

  0007d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00081	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00084	72 04		 jb	 SHORT $LN29@assign
  00086	8b 06		 mov	 eax, DWORD PTR [esi]
  00088	eb 02		 jmp	 SHORT $LN30@assign
$LN29@assign:
  0008a	8b c6		 mov	 eax, esi
$LN30@assign:
  0008c	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN31@assign:

; 906  : 			}
; 907  : 		return (*this);

  00090	5f		 pop	 edi
  00091	8b c6		 mov	 eax, esi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx

; 908  : 		}

  00095	5d		 pop	 ebp
  00096	c2 0c 00	 ret	 12			; 0000000cH
$LN33@assign:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 911  : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 912  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 913  : 		if (_Count != 0)
; 914  : 			_DEBUG_POINTER(_Ptr);
; 915  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 916  : 
; 917  : 		if (_Inside(_Ptr))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  00007	56		 push	 esi
  00008	53		 push	 ebx
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
  00010	84 c0		 test	 al, al
  00012	74 1c		 je	 SHORT $LN2@assign@2

; 918  : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00014	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00018	72 04		 jb	 SHORT $LN7@assign@2
  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	eb 02		 jmp	 SHORT $LN8@assign@2
$LN7@assign@2:
  0001e	8b c6		 mov	 eax, esi
$LN8@assign@2:
  00020	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00023	2b d8		 sub	 ebx, eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0002e	eb 3f		 jmp	 SHORT $LN3@assign@2
$LN2@assign@2:
  00030	57		 push	 edi

; 919  : 
; 920  : 		if (_Grow(_Count))

  00031	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00034	6a 00		 push	 0
  00036	57		 push	 edi
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0003e	84 c0		 test	 al, al
  00040	74 2a		 je	 SHORT $LN21@assign@2

; 921  : 			{	// make room and assign new stuff
; 922  : 			_Traits::copy(_Myptr(), _Ptr, _Count);

  00042	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00046	72 04		 jb	 SHORT $LN11@assign@2
  00048	8b 06		 mov	 eax, DWORD PTR [esi]
  0004a	eb 02		 jmp	 SHORT $LN12@assign@2
$LN11@assign@2:
  0004c	8b c6		 mov	 eax, esi
$LN12@assign@2:
  0004e	57		 push	 edi
  0004f	53		 push	 ebx
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _memcpy
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 923  : 			_Eos(_Count);

  00059	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0005d	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00060	72 04		 jb	 SHORT $LN19@assign@2
  00062	8b 06		 mov	 eax, DWORD PTR [esi]
  00064	eb 02		 jmp	 SHORT $LN20@assign@2
$LN19@assign@2:
  00066	8b c6		 mov	 eax, esi
$LN20@assign@2:
  00068	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN21@assign@2:

; 924  : 			}
; 925  : 		return (*this);

  0006c	8b c6		 mov	 eax, esi
  0006e	5f		 pop	 edi
$LN3@assign@2:
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx

; 926  : 		}

  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@YAXPAUtagNamedTitleSortInfo@@0AAV?$allocator@UtagNamedTitleSortInfo@@@0@@Z ; std::_Destroy_range<std::allocator<tagNamedTitleSortInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@YAXPAUtagNamedTitleSortInfo@@0AAV?$allocator@UtagNamedTitleSortInfo@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@YAXPAUtagNamedTitleSortInfo@@0AAV?$allocator@UtagNamedTitleSortInfo@@@0@@Z PROC ; std::_Destroy_range<std::allocator<tagNamedTitleSortInfo> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0c		 jmp	 SHORT $LN24@Destroy_ra@2
$LL7@Destroy_ra@2:
  00009	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00012	83 c6 14	 add	 esi, 20			; 00000014H
$LN24@Destroy_ra@2:
  00015	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00018	75 ef		 jne	 SHORT $LL7@Destroy_ra@2
  0001a	5e		 pop	 esi

; 89   : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Destroy_range@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@YAXPAUtagNamedTitleSortInfo@@0AAV?$allocator@UtagNamedTitleSortInfo@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<tagNamedTitleSortInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUtagNamedTitleSortInfo@@PAU1@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00AAV?$allocator@UtagNamedTitleSortInfo@@@0@@Z ; std::_Uninitialized_move<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *,std::allocator<tagNamedTitleSortInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUtagNamedTitleSortInfo@@PAU1@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00AAV?$allocator@UtagNamedTitleSortInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$510460 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUtagNamedTitleSortInfo@@PAU1@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00AAV?$allocator@UtagNamedTitleSortInfo@@@0@@Z PROC ; std::_Uninitialized_move<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *,std::allocator<tagNamedTitleSortInfo> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$510460[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUtagNamedTitleSortInfo@@PAU1@V?$allocator@UtagNamedTitleSortInfo@@@std@@U1@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00AAV?$allocator@UtagNamedTitleSortInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *,std::allocator<tagNamedTitleSortInfo>,tagNamedTitleSortInfo>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAUtagNamedTitleSortInfo@@PAU1@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00AAV?$allocator@UtagNamedTitleSortInfo@@@0@@Z ENDP ; std::_Uninitialized_move<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *,std::allocator<tagNamedTitleSortInfo> >
_TEXT	ENDS
PUBLIC	??$_Sort_heap@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z ; std::_Sort_heap<tagNamedTitleSortInfo *,NamedTitleSortFunc>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Sort_heap@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Sort_heap@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z PROC ; std::_Sort_heap<tagNamedTitleSortInfo *,NamedTitleSortFunc>, COMDAT

; 2700 : 	{	// order heap by repeatedly popping, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2701 : 	for (; 1 < _Last - _First; --_Last)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	2b 4d 08	 sub	 ecx, DWORD PTR __First$[ebp]
  00009	57		 push	 edi
  0000a	8b c1		 mov	 eax, ecx
  0000c	6a 14		 push	 20			; 00000014H
  0000e	99		 cdq
  0000f	5f		 pop	 edi
  00010	f7 ff		 idiv	 edi
  00012	83 f8 01	 cmp	 eax, 1
  00015	7e 29		 jle	 SHORT $LN1@Sort_heap
  00017	8b f9		 mov	 edi, ecx
$LL3@Sort_heap:

; 2702 : 		_Pop_heap(_First, _Last, _Pred);

  00019	6a 00		 push	 0
  0001b	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  0001e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00021	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00024	e8 00 00 00 00	 call	 ??$_Pop_heap_0@PAUtagNamedTitleSortInfo@@U1@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z ; std::_Pop_heap_0<tagNamedTitleSortInfo *,tagNamedTitleSortInfo,NamedTitleSortFunc>
  00029	83 c4 10	 add	 esp, 16			; 00000010H
  0002c	83 ef 14	 sub	 edi, 20			; 00000014H
  0002f	8b c7		 mov	 eax, edi
  00031	6a 14		 push	 20			; 00000014H
  00033	99		 cdq
  00034	59		 pop	 ecx
  00035	f7 f9		 idiv	 ecx
  00037	83 6d 0c 14	 sub	 DWORD PTR __Last$[ebp], 20 ; 00000014H
  0003b	83 f8 01	 cmp	 eax, 1
  0003e	7f d9		 jg	 SHORT $LL3@Sort_heap
$LN1@Sort_heap:
  00040	5f		 pop	 edi

; 2703 : 	}

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
??$_Sort_heap@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z ENDP ; std::_Sort_heap<tagNamedTitleSortInfo *,NamedTitleSortFunc>
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 929  : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 930  : 		_DEBUG_POINTER(_Ptr);
; 931  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00009	53		 push	 ebx
$LL5@assign@3:
  0000a	8a 18		 mov	 bl, BYTE PTR [eax]
  0000c	40		 inc	 eax
  0000d	84 db		 test	 bl, bl
  0000f	75 f9		 jne	 SHORT $LL5@assign@3
  00011	2b c2		 sub	 eax, edx
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00017	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0001c	5b		 pop	 ebx

; 932  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IAEXPAUtagNamedTitleSortInfo@@0@Z ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IAEXPAUtagNamedTitleSortInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IAEXPAUtagNamedTitleSortInfo@@0@Z PROC ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@YAXPAUtagNamedTitleSortInfo@@0AAV?$allocator@UtagNamedTitleSortInfo@@@0@@Z ; std::_Destroy_range<std::allocator<tagNamedTitleSortInfo> >
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?_Destroy@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IAEXPAUtagNamedTitleSortInfo@@0@Z ENDP ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Umove@PAUtagNamedTitleSortInfo@@@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IAEPAUtagNamedTitleSortInfo@@PAU2@00@Z ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Umove<tagNamedTitleSortInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAUtagNamedTitleSortInfo@@@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IAEPAUtagNamedTitleSortInfo@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUtagNamedTitleSortInfo@@@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IAEPAUtagNamedTitleSortInfo@@PAU2@00@Z PROC ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Umove<tagNamedTitleSortInfo *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUtagNamedTitleSortInfo@@PAU1@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00AAV?$allocator@UtagNamedTitleSortInfo@@@0@@Z ; std::_Uninitialized_move<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *,std::allocator<tagNamedTitleSortInfo> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUtagNamedTitleSortInfo@@@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IAEPAUtagNamedTitleSortInfo@@PAU2@00@Z ENDP ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Umove<tagNamedTitleSortInfo *>
_TEXT	ENDS
PUBLIC	??$sort_heap@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z ; std::sort_heap<tagNamedTitleSortInfo *,NamedTitleSortFunc>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$sort_heap@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$sort_heap@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z PROC ; std::sort_heap<tagNamedTitleSortInfo *,NamedTitleSortFunc>, COMDAT

; 2708 : 	{	// order heap by repeatedly popping, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2709 : 	_DEBUG_RANGE(_First, _Last);
; 2710 : 	_DEBUG_POINTER(_Pred);
; 2711 : 	_DEBUG_HEAP_PRED(_First, _Last, _Pred);
; 2712 : 	_Sort_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);

  00003	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00009	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000c	e8 00 00 00 00	 call	 ??$_Sort_heap@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z ; std::_Sort_heap<tagNamedTitleSortInfo *,NamedTitleSortFunc>
  00011	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2713 : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$sort_heap@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z ENDP ; std::sort_heap<tagNamedTitleSortInfo *,NamedTitleSortFunc>
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 768  : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 770  : 		}

  00003	5d		 pop	 ebp

; 769  : 		return (assign(_Ptr));

  00004	e9 00 00 00 00	 jmp	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IAEXXZ ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 1e		 je	 SHORT $LN6@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0000e	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00011	50		 push	 eax
  00012	ff 76 04	 push	 DWORD PTR [esi+4]
  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@YAXPAUtagNamedTitleSortInfo@@0AAV?$allocator@UtagNamedTitleSortInfo@@@0@@Z ; std::_Destroy_range<std::allocator<tagNamedTitleSortInfo> >

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0001c	ff 36		 push	 DWORD PTR [esi]
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00023	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00026	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00029	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0002d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00031	5e		 pop	 esi

; 1312 : 		}

  00032	c3		 ret	 0
?_Tidy@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEXI@Z ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
__Ptr$506829 = 8					; size = 4
__Count$ = 8						; size = 4
?reserve@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEXI@Z PROC ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00011	81 fb cc cc cc
	0c		 cmp	 ebx, 214748364		; 0cccccccH
  00017	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN38@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00024	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00027	2b 06		 sub	 eax, DWORD PTR [esi]
  00029	6a 14		 push	 20			; 00000014H
  0002b	99		 cdq
  0002c	59		 pop	 ecx
  0002d	f7 f9		 idiv	 ecx
  0002f	3b c3		 cmp	 eax, ebx
  00031	73 70		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00033	6a 00		 push	 0
  00035	53		 push	 ebx
  00036	e8 00 00 00 00	 call	 ??$_Allocate@UtagNamedTitleSortInfo@@@std@@YAPAUtagNamedTitleSortInfo@@IPAU1@@Z ; std::_Allocate<tagNamedTitleSortInfo>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  0003b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00041	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00044	52		 push	 edx
  00045	89 45 08	 mov	 DWORD PTR __Ptr$506829[ebp], eax
  00048	ff 75 08	 push	 DWORD PTR __Ptr$506829[ebp]
  0004b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004e	50		 push	 eax
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUtagNamedTitleSortInfo@@PAU1@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@YAPAUtagNamedTitleSortInfo@@PAU1@00AAV?$allocator@UtagNamedTitleSortInfo@@@0@@Z ; std::_Uninitialized_move<tagNamedTitleSortInfo *,tagNamedTitleSortInfo *,std::allocator<tagNamedTitleSortInfo> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00055	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00057	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005a	83 c4 18	 add	 esp, 24			; 00000018H
  0005d	2b c1		 sub	 eax, ecx
  0005f	6a 14		 push	 20			; 00000014H
  00061	99		 cdq
  00062	5f		 pop	 edi
  00063	f7 ff		 idiv	 edi
  00065	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00069	8b f8		 mov	 edi, eax
  0006b	85 c9		 test	 ecx, ecx
  0006d	74 17		 je	 SHORT $LN33@reserve

; 761  : 			if (this->_Myfirst != 0)
; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  0006f	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00072	50		 push	 eax
  00073	ff 76 04	 push	 DWORD PTR [esi+4]
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@YAXPAUtagNamedTitleSortInfo@@0AAV?$allocator@UtagNamedTitleSortInfo@@@0@@Z ; std::_Destroy_range<std::allocator<tagNamedTitleSortInfo> >

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  0007c	ff 36		 push	 DWORD PTR [esi]
  0007e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00083	83 c4 10	 add	 esp, 16			; 00000010H
$LN33@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00086	8b ce		 mov	 ecx, esi
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  0008e	6b db 14	 imul	 ebx, 20			; 00000014H

; 770  : 			this->_Mylast = _Ptr + _Size;

  00091	6b ff 14	 imul	 edi, 20			; 00000014H
  00094	8b 45 08	 mov	 eax, DWORD PTR __Ptr$506829[ebp]
  00097	03 d8		 add	 ebx, eax
  00099	03 f8		 add	 edi, eax
  0009b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0009e	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  000a1	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  000a3	e8 00 00 00 00	 call	 __EH_epilog3
  000a8	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000ab	ff 75 08	 push	 DWORD PTR __Ptr$506829[ebp]
  000ae	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000b3	59		 pop	 ecx

; 757  : 			_RERAISE;

  000b4	6a 00		 push	 0
  000b6	6a 00		 push	 0
  000b8	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN39@reserve:
$LN37@reserve:
  000bd	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEXI@Z ENDP ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::reserve
PUBLIC	??$_Sort@PAUtagNamedTitleSortInfo@@HVNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0HVNamedTitleSortFunc@@@Z ; std::_Sort<tagNamedTitleSortInfo *,int,NamedTitleSortFunc>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Sort@PAUtagNamedTitleSortInfo@@HVNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0HVNamedTitleSortFunc@@@Z
_TEXT	SEGMENT
__Mid$507476 = -8					; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort@PAUtagNamedTitleSortInfo@@HVNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0HVNamedTitleSortFunc@@@Z PROC ; std::_Sort<tagNamedTitleSortInfo *,int,NamedTitleSortFunc>, COMDAT

; 3771 : 	{	// order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx

; 3772 : 	_Diff _Count;
; 3773 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

  00006	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00009	57		 push	 edi
  0000a	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000d	8b c7		 mov	 eax, edi
  0000f	2b c3		 sub	 eax, ebx
  00011	6a 14		 push	 20			; 00000014H
  00013	99		 cdq
  00014	59		 pop	 ecx
  00015	f7 f9		 idiv	 ecx
  00017	83 f8 20	 cmp	 eax, 32			; 00000020H
  0001a	0f 8e 9c 00 00
	00		 jle	 $LN22@Sort
  00020	56		 push	 esi
  00021	8b 75 10	 mov	 esi, DWORD PTR __Ideal$[ebp]
$LL7@Sort:
  00024	85 f6		 test	 esi, esi
  00026	7e 75		 jle	 SHORT $LN6@Sort

; 3774 : 		{	// divide and conquer by quicksort
; 3775 : 		_STD pair<_RanIt, _RanIt> _Mid =
; 3776 : 			_Unguarded_partition(_First, _Last, _Pred);

  00028	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0002b	8d 45 f8	 lea	 eax, DWORD PTR __Mid$507476[ebp]
  0002e	57		 push	 edi
  0002f	53		 push	 ebx
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$_Unguarded_partition@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YA?AU?$pair@PAUtagNamedTitleSortInfo@@PAU1@@0@PAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z ; std::_Unguarded_partition<tagNamedTitleSortInfo *,NamedTitleSortFunc>

; 3777 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions

  00036	8b c6		 mov	 eax, esi
  00038	99		 cdq
  00039	2b c2		 sub	 eax, edx
  0003b	d1 f8		 sar	 eax, 1
  0003d	8b f0		 mov	 esi, eax
  0003f	99		 cdq
  00040	2b c2		 sub	 eax, edx
  00042	d1 f8		 sar	 eax, 1
  00044	03 f0		 add	 esi, eax
  00046	83 c4 10	 add	 esp, 16			; 00000010H

; 3778 : 
; 3779 : 		if (_Mid.first - _First < _Last - _Mid.second)

  00049	8b c7		 mov	 eax, edi
  0004b	2b 45 fc	 sub	 eax, DWORD PTR __Mid$507476[ebp+4]
  0004e	6a 14		 push	 20			; 00000014H
  00050	99		 cdq
  00051	59		 pop	 ecx
  00052	f7 f9		 idiv	 ecx
  00054	6a 14		 push	 20			; 00000014H
  00056	8b c8		 mov	 ecx, eax
  00058	8b 45 f8	 mov	 eax, DWORD PTR __Mid$507476[ebp]
  0005b	2b c3		 sub	 eax, ebx
  0005d	5b		 pop	 ebx
  0005e	99		 cdq
  0005f	f7 fb		 idiv	 ebx

; 3780 : 			{	// loop on second half
; 3781 : 			_Sort(_First, _Mid.first, _Ideal, _Pred);

  00061	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00064	56		 push	 esi
  00065	3b c1		 cmp	 eax, ecx
  00067	7d 13		 jge	 SHORT $LN5@Sort
  00069	ff 75 f8	 push	 DWORD PTR __Mid$507476[ebp]
  0006c	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0006f	e8 00 00 00 00	 call	 ??$_Sort@PAUtagNamedTitleSortInfo@@HVNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0HVNamedTitleSortFunc@@@Z ; std::_Sort<tagNamedTitleSortInfo *,int,NamedTitleSortFunc>

; 3782 : 			_First = _Mid.second;

  00074	8b 5d fc	 mov	 ebx, DWORD PTR __Mid$507476[ebp+4]
  00077	89 5d 08	 mov	 DWORD PTR __First$[ebp], ebx

; 3783 : 			}
; 3784 : 		else

  0007a	eb 0f		 jmp	 SHORT $LN23@Sort
$LN5@Sort:

; 3785 : 			{	// loop on first half
; 3786 : 			_Sort(_Mid.second, _Last, _Ideal, _Pred);

  0007c	57		 push	 edi
  0007d	ff 75 fc	 push	 DWORD PTR __Mid$507476[ebp+4]
  00080	e8 00 00 00 00	 call	 ??$_Sort@PAUtagNamedTitleSortInfo@@HVNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0HVNamedTitleSortFunc@@@Z ; std::_Sort<tagNamedTitleSortInfo *,int,NamedTitleSortFunc>

; 3787 : 			_Last = _Mid.first;

  00085	8b 7d f8	 mov	 edi, DWORD PTR __Mid$507476[ebp]
  00088	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
$LN23@Sort:

; 3772 : 	_Diff _Count;
; 3773 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

  0008b	83 c4 10	 add	 esp, 16			; 00000010H
  0008e	8b c7		 mov	 eax, edi
  00090	2b c3		 sub	 eax, ebx
  00092	6a 14		 push	 20			; 00000014H
  00094	99		 cdq
  00095	59		 pop	 ecx
  00096	f7 f9		 idiv	 ecx
  00098	83 f8 20	 cmp	 eax, 32			; 00000020H
  0009b	7f 87		 jg	 SHORT $LL7@Sort
$LN6@Sort:
  0009d	5e		 pop	 esi

; 3788 : 			}
; 3789 : 		}
; 3790 : 
; 3791 : 	if (_ISORT_MAX < _Count)

  0009e	83 f8 20	 cmp	 eax, 32			; 00000020H
  000a1	7e 19		 jle	 SHORT $LN22@Sort

; 3792 : 		{	// heap sort if too many divisions
; 3793 : 		_STD make_heap(_First, _Last, _Pred);

  000a3	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000a6	57		 push	 edi
  000a7	53		 push	 ebx
  000a8	e8 00 00 00 00	 call	 ??$make_heap@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z ; std::make_heap<tagNamedTitleSortInfo *,NamedTitleSortFunc>

; 3794 : 		_STD sort_heap(_First, _Last, _Pred);

  000ad	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000b0	57		 push	 edi
  000b1	53		 push	 ebx
  000b2	e8 00 00 00 00	 call	 ??$_Sort_heap@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@@Z ; std::_Sort_heap<tagNamedTitleSortInfo *,NamedTitleSortFunc>
  000b7	83 c4 18	 add	 esp, 24			; 00000018H
  000ba	eb 14		 jmp	 SHORT $LN16@Sort
$LN22@Sort:

; 3795 : 		}
; 3796 : 	else if (1 < _Count)

  000bc	83 f8 01	 cmp	 eax, 1
  000bf	7e 0f		 jle	 SHORT $LN16@Sort

; 3797 : 		_Insertion_sort(_First, _Last, _Pred);	// small

  000c1	6a 00		 push	 0
  000c3	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000c6	57		 push	 edi
  000c7	53		 push	 ebx
  000c8	e8 00 00 00 00	 call	 ??$_Insertion_sort1@PAUtagNamedTitleSortInfo@@VNamedTitleSortFunc@@U1@@std@@YAXPAUtagNamedTitleSortInfo@@0VNamedTitleSortFunc@@0@Z ; std::_Insertion_sort1<tagNamedTitleSortInfo *,NamedTitleSortFunc,tagNamedTitleSortInfo>
  000cd	83 c4 10	 add	 esp, 16			; 00000010H
$LN16@Sort:
  000d0	5f		 pop	 edi
  000d1	5b		 pop	 ebx

; 3798 : 	}

  000d2	c9		 leave
  000d3	c3		 ret	 0
??$_Sort@PAUtagNamedTitleSortInfo@@HVNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0HVNamedTitleSortFunc@@@Z ENDP ; std::_Sort<tagNamedTitleSortInfo *,int,NamedTitleSortFunc>
_TEXT	ENDS
PUBLIC	??1?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE@XZ ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::~vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::~vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IAEXXZ ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Tidy
??1?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::~vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IAEXI@Z ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 14		 push	 20			; 00000014H
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00030	2b c1		 sub	 eax, ecx
  00032	6a 14		 push	 20			; 00000014H
  00034	99		 cdq
  00035	59		 pop	 ecx
  00036	f7 f9		 idiv	 ecx
  00038	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003b	3b f8		 cmp	 edi, eax
  0003d	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003f	57		 push	 edi
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IBEII@Z ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Grow_to
  00047	50		 push	 eax
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?reserve@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEXI@Z ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::reserve
$LN1@Reserve:
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 1298 : 		}

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Reserve
_TEXT	ENDS
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@VNamedTitleSortFunc@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@0@0VNamedTitleSortFunc@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >,NamedTitleSortFunc>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@VNamedTitleSortFunc@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@0@0VNamedTitleSortFunc@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$sort@V?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@VNamedTitleSortFunc@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@0@0VNamedTitleSortFunc@@@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >,NamedTitleSortFunc>, COMDAT

; 3803 : 	{	// order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3804 : 	_DEBUG_RANGE(_First, _Last);
; 3805 : 	_DEBUG_POINTER(_Pred);
; 3806 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);

  00003	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0000c	6a 14		 push	 20			; 00000014H
  0000e	59		 pop	 ecx
  0000f	99		 cdq
  00010	f7 f9		 idiv	 ecx
  00012	50		 push	 eax
  00013	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00016	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00019	e8 00 00 00 00	 call	 ??$_Sort@PAUtagNamedTitleSortInfo@@HVNamedTitleSortFunc@@@std@@YAXPAUtagNamedTitleSortInfo@@0HVNamedTitleSortFunc@@@Z ; std::_Sort<tagNamedTitleSortInfo *,int,NamedTitleSortFunc>
  0001e	83 c4 10	 add	 esp, 16			; 00000010H

; 3807 : 	}

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??$sort@V?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@VNamedTitleSortFunc@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@0@0VNamedTitleSortFunc@@@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >,NamedTitleSortFunc>
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEXABUtagNamedTitleSortInfo@@@Z ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEXABUtagNamedTitleSortInfo@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEXABUtagNamedTitleSortInfo@@@Z PROC ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 33		 jae	 SHORT $LN4@push_back
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 2d		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 14		 push	 20			; 00000014H
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IAEXI@Z ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00031	6b ff 14	 imul	 edi, 20			; 00000014H
  00034	03 3e		 add	 edi, DWORD PTR [esi]
  00036	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00039	57		 push	 edi
  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	e8 00 00 00 00	 call	 ??$construct@AAUtagNamedTitleSortInfo@@@?$allocator@UtagNamedTitleSortInfo@@@std@@QAEXPAUtagNamedTitleSortInfo@@AAU2@@Z ; std::allocator<tagNamedTitleSortInfo>::construct<tagNamedTitleSortInfo &>

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00042	eb 19		 jmp	 SHORT $LN30@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00044	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00047	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  00049	6a 01		 push	 1
  0004b	8b ce		 mov	 ecx, esi
  0004d	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IAEXI@Z ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00052	57		 push	 edi
  00053	ff 76 04	 push	 DWORD PTR [esi+4]
  00056	e8 00 00 00 00	 call	 ??$_Construct@UtagNamedTitleSortInfo@@ABU1@@std@@YAXPAUtagNamedTitleSortInfo@@ABU1@@Z ; std::_Construct<tagNamedTitleSortInfo,tagNamedTitleSortInfo const &>
  0005b	59		 pop	 ecx
  0005c	59		 pop	 ecx
$LN30@push_back:

; 996  : 			++this->_Mylast;

  0005d	83 46 04 14	 add	 DWORD PTR [esi+4], 20	; 00000014H
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?push_back@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEXABUtagNamedTitleSortInfo@@@Z ENDP ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::push_back
_TEXT	ENDS
PUBLIC	?GetNamedTitleList@NamedTitlePremiumSelectWnd@@IAEXPAVioPullDownList@@@Z ; NamedTitlePremiumSelectWnd::GetNamedTitleList
EXTRN	?GetNamedTitleTextColor@ioNamedTitleInfoManager@@QAEKKHEE@Z:PROC ; ioNamedTitleInfoManager::GetNamedTitleTextColor
EXTRN	?GetNamedTitleName@ioNamedTitleInfoManager@@QAE?AVioHashString@@K@Z:PROC ; ioNamedTitleInfoManager::GetNamedTitleName
EXTRN	?GetSingleton@ioNamedTitleInfoManager@@SAAAV1@XZ:PROC ; ioNamedTitleInfoManager::GetSingleton
EXTRN	?GetNamedTitleSlotArray@ioUserNamedTitle@@QAE_NHAAUtagNamedTitleSlot@@@Z:PROC ; ioUserNamedTitle::GetNamedTitleSlotArray
EXTRN	?GetNamedTitleSlotCnt@ioUserNamedTitle@@QAEHXZ:PROC ; ioUserNamedTitle::GetNamedTitleSlotCnt
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetNamedTitleList@NamedTitlePremiumSelectWnd@@IAEXPAVioPullDownList@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetNamedTitleList@NamedTitlePremiumSelectWnd@@IAEXPAVioPullDownList@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetNamedTitleList@NamedTitlePremiumSelectWnd@@IAEXPAVioPullDownList@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetNamedTitleList@NamedTitlePremiumSelectWnd@@IAEXPAVioPullDownList@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetNamedTitleList@NamedTitlePremiumSelectWnd@@IAEXPAVioPullDownList@@@Z$3
__ehfuncinfo$?GetNamedTitleList@NamedTitlePremiumSelectWnd@@IAEXPAVioPullDownList@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?GetNamedTitleList@NamedTitlePremiumSelectWnd@@IAEXPAVioPullDownList@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\namedtitlepremiumselectwnd.cpp
xdata$x	ENDS
;	COMDAT ?GetNamedTitleList@NamedTitlePremiumSelectWnd@@IAEXPAVioPullDownList@@@Z
_TEXT	SEGMENT
_sNamedTitleSlot$506564 = -104				; size = 24
_sNamedTitleSlot$506711 = -80				; size = 24
_sNamedTitleSortInfo$506567 = -76			; size = 20
$T510734 = -56						; size = 16
_SortList$ = -40					; size = 16
$T510739 = -24						; size = 4
_pUserNamedTitle$ = -20					; size = 4
_i$506706 = -16						; size = 4
_i$506560 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T510735 = 8						; size = 1
_pList$ = 8						; size = 4
?GetNamedTitleList@NamedTitlePremiumSelectWnd@@IAEXPAVioPullDownList@@@Z PROC ; NamedTitlePremiumSelectWnd::GetNamedTitleList, COMDAT
; _this$ = ecx

; 207  : {

  00000	6a 5c		 push	 92			; 0000005cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?GetNamedTitleList@NamedTitlePremiumSelectWnd@@IAEXPAVioPullDownList@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 208  : 	if( !pList )

  0000c	33 db		 xor	 ebx, ebx
  0000e	39 5d 08	 cmp	 DWORD PTR _pList$[ebp], ebx
  00011	0f 84 bc 01 00
	00		 je	 $LN75@GetNamedTi

; 209  : 		return;
; 210  : 	
; 211  : 	ioUserNamedTitle *pUserNamedTitle = g_MyInfo.GetUserNamedTitle();

  00017	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  0001c	8d b8 e8 02 00
	00		 lea	 edi, DWORD PTR [eax+744]
  00022	89 7d ec	 mov	 DWORD PTR _pUserNamedTitle$[ebp], edi

; 212  : 	if ( !pUserNamedTitle )

  00025	3b fb		 cmp	 edi, ebx
  00027	0f 84 a6 01 00
	00		 je	 $LN75@GetNamedTi

; 213  : 		return;
; 214  : 
; 215  : 	std::vector<NamedTitleSortInfo> SortList;

  0002d	89 5d d8	 mov	 DWORD PTR _SortList$[ebp], ebx
  00030	89 5d dc	 mov	 DWORD PTR _SortList$[ebp+4], ebx
  00033	89 5d e0	 mov	 DWORD PTR _SortList$[ebp+8], ebx

; 216  : 
; 217  : 	for ( int i=0; i<pUserNamedTitle->GetNamedTitleSlotCnt(); i++ )

  00036	8b cf		 mov	 ecx, edi
  00038	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0003b	89 5d f0	 mov	 DWORD PTR _i$506560[ebp], ebx
  0003e	e8 00 00 00 00	 call	 ?GetNamedTitleSlotCnt@ioUserNamedTitle@@QAEHXZ ; ioUserNamedTitle::GetNamedTitleSlotCnt
  00043	85 c0		 test	 eax, eax
  00045	0f 8e 94 00 00
	00		 jle	 $LN8@GetNamedTi
  0004b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
$LL10@GetNamedTi:

; 218  : 	{
; 219  : 		NamedTitleSlot sNamedTitleSlot;
; 220  : 		if ( !pUserNamedTitle->GetNamedTitleSlotArray( i, sNamedTitleSlot ) )

  00051	8d 45 98	 lea	 eax, DWORD PTR _sNamedTitleSlot$506564[ebp]
  00054	50		 push	 eax
  00055	ff 75 f0	 push	 DWORD PTR _i$506560[ebp]
  00058	66 0f 57 c0	 xorpd	 xmm0, xmm0
  0005c	8b cf		 mov	 ecx, edi
  0005e	89 5d 98	 mov	 DWORD PTR _sNamedTitleSlot$506564[ebp], ebx
  00061	89 5d 9c	 mov	 DWORD PTR _sNamedTitleSlot$506564[ebp+4], ebx
  00064	66 0f 13 45 a0	 movlpd	 QWORD PTR _sNamedTitleSlot$506564[ebp+8], xmm0
  00069	66 89 5d a8	 mov	 WORD PTR _sNamedTitleSlot$506564[ebp+16], bx
  0006d	88 5d aa	 mov	 BYTE PTR _sNamedTitleSlot$506564[ebp+18], bl
  00070	e8 00 00 00 00	 call	 ?GetNamedTitleSlotArray@ioUserNamedTitle@@QAE_NHAAUtagNamedTitleSlot@@@Z ; ioUserNamedTitle::GetNamedTitleSlotArray
  00075	84 c0		 test	 al, al
  00077	74 53		 je	 SHORT $LN9@GetNamedTi

; 221  : 			continue;
; 222  : 		
; 223  : 		if ( sNamedTitleSlot.m_byPremium )

  00079	38 5d a8	 cmp	 BYTE PTR _sNamedTitleSlot$506564[ebp+16], bl
  0007c	75 4e		 jne	 SHORT $LN9@GetNamedTi

; 224  : 			continue;
; 225  : 
; 226  : 		NamedTitleSortInfo sNamedTitleSortInfo;

  0007e	8d 4d b4	 lea	 ecx, DWORD PTR _sNamedTitleSortInfo$506567[ebp]
  00081	e8 00 00 00 00	 call	 ??0tagNamedTitleSortInfo@@QAE@XZ ; tagNamedTitleSortInfo::tagNamedTitleSortInfo

; 227  : 		sNamedTitleSortInfo.m_dwCode = sNamedTitleSlot.m_dwCode;

  00086	8b 45 98	 mov	 eax, DWORD PTR _sNamedTitleSlot$506564[ebp]

; 228  : 		sNamedTitleSortInfo.m_szNamedTitle = g_NamedTitleInfoMgr.GetNamedTitleName( sNamedTitleSlot.m_dwCode );

  00089	50		 push	 eax
  0008a	89 45 b4	 mov	 DWORD PTR _sNamedTitleSortInfo$506567[ebp], eax
  0008d	8d 45 c8	 lea	 eax, DWORD PTR $T510734[ebp]
  00090	50		 push	 eax
  00091	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00095	e8 00 00 00 00	 call	 ?GetSingleton@ioNamedTitleInfoManager@@SAAAV1@XZ ; ioNamedTitleInfoManager::GetSingleton
  0009a	8b c8		 mov	 ecx, eax
  0009c	e8 00 00 00 00	 call	 ?GetNamedTitleName@ioNamedTitleInfoManager@@QAE?AVioHashString@@K@Z ; ioNamedTitleInfoManager::GetNamedTitleName
  000a1	50		 push	 eax
  000a2	8d 4d b8	 lea	 ecx, DWORD PTR _sNamedTitleSortInfo$506567[ebp+4]
  000a5	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  000af	8d 4d c8	 lea	 ecx, DWORD PTR $T510734[ebp]
  000b2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000b6	ff d6		 call	 esi

; 229  : 		SortList.push_back( sNamedTitleSortInfo );

  000b8	8d 45 b4	 lea	 eax, DWORD PTR _sNamedTitleSortInfo$506567[ebp]
  000bb	50		 push	 eax
  000bc	8d 4d d8	 lea	 ecx, DWORD PTR _SortList$[ebp]
  000bf	e8 00 00 00 00	 call	 ?push_back@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAEXABUtagNamedTitleSortInfo@@@Z ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::push_back

; 230  : 	}

  000c4	8d 4d b8	 lea	 ecx, DWORD PTR _sNamedTitleSortInfo$506567[ebp+4]
  000c7	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  000ca	ff d6		 call	 esi
$LN9@GetNamedTi:

; 216  : 
; 217  : 	for ( int i=0; i<pUserNamedTitle->GetNamedTitleSlotCnt(); i++ )

  000cc	ff 45 f0	 inc	 DWORD PTR _i$506560[ebp]
  000cf	8b cf		 mov	 ecx, edi
  000d1	e8 00 00 00 00	 call	 ?GetNamedTitleSlotCnt@ioUserNamedTitle@@QAEHXZ ; ioUserNamedTitle::GetNamedTitleSlotCnt
  000d6	39 45 f0	 cmp	 DWORD PTR _i$506560[ebp], eax
  000d9	0f 8c 72 ff ff
	ff		 jl	 $LL10@GetNamedTi
$LN8@GetNamedTi:

; 231  : 
; 232  : 	if ( SortList.empty() )

  000df	8b 45 d8	 mov	 eax, DWORD PTR _SortList$[ebp]
  000e2	3b 45 dc	 cmp	 eax, DWORD PTR _SortList$[ebp+4]

; 233  : 		return;

  000e5	0f 84 dc 00 00
	00		 je	 $LN2@GetNamedTi

; 234  : 
; 235  : 	std::sort( SortList.begin(), SortList.end(), NamedTitleSortFunc() );

  000eb	ff 75 08	 push	 DWORD PTR $T510735[ebp]
  000ee	ff 75 dc	 push	 DWORD PTR _SortList$[ebp+4]
  000f1	50		 push	 eax
  000f2	e8 00 00 00 00	 call	 ??$sort@V?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@std@@VNamedTitleSortFunc@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@@0@0VNamedTitleSortFunc@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> > >,NamedTitleSortFunc>

; 236  : 
; 237  : 	for ( int i=0; i<(int)SortList.size(); i++ )

  000f7	8b 45 dc	 mov	 eax, DWORD PTR _SortList$[ebp+4]
  000fa	2b 45 d8	 sub	 eax, DWORD PTR _SortList$[ebp]
  000fd	83 c4 0c	 add	 esp, 12			; 0000000cH
  00100	6a 14		 push	 20			; 00000014H
  00102	99		 cdq
  00103	59		 pop	 ecx
  00104	f7 f9		 idiv	 ecx
  00106	89 5d f0	 mov	 DWORD PTR _i$506706[ebp], ebx
  00109	85 c0		 test	 eax, eax
  0010b	0f 8e b6 00 00
	00		 jle	 $LN2@GetNamedTi

; 234  : 
; 235  : 	std::sort( SortList.begin(), SortList.end(), NamedTitleSortFunc() );

  00111	33 ff		 xor	 edi, edi
$LL4@GetNamedTi:

; 238  : 	{
; 239  : 		NamedTitleSlot sNamedTitleSlot;
; 240  : 		if ( !pUserNamedTitle->GetNamedTitleSlot( SortList[i].m_dwCode, sNamedTitleSlot ) )

  00113	8b 45 d8	 mov	 eax, DWORD PTR _SortList$[ebp]
  00116	8d 4d b0	 lea	 ecx, DWORD PTR _sNamedTitleSlot$506711[ebp]
  00119	51		 push	 ecx
  0011a	8b 4d ec	 mov	 ecx, DWORD PTR _pUserNamedTitle$[ebp]
  0011d	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00121	89 5d b0	 mov	 DWORD PTR _sNamedTitleSlot$506711[ebp], ebx
  00124	89 5d b4	 mov	 DWORD PTR _sNamedTitleSlot$506711[ebp+4], ebx
  00127	66 0f 13 45 b8	 movlpd	 QWORD PTR _sNamedTitleSlot$506711[ebp+8], xmm0
  0012c	66 89 5d c0	 mov	 WORD PTR _sNamedTitleSlot$506711[ebp+16], bx
  00130	88 5d c2	 mov	 BYTE PTR _sNamedTitleSlot$506711[ebp+18], bl
  00133	ff 34 38	 push	 DWORD PTR [eax+edi]
  00136	e8 00 00 00 00	 call	 ?GetNamedTitleSlot@ioUserNamedTitle@@QAE_NKAAUtagNamedTitleSlot@@@Z ; ioUserNamedTitle::GetNamedTitleSlot
  0013b	84 c0		 test	 al, al
  0013d	74 6d		 je	 SHORT $LN3@GetNamedTi

; 241  : 			continue;
; 242  : 
; 243  : 		NamedTitlePullDown* pPullDown = new NamedTitlePullDown;

  0013f	6a 70		 push	 112			; 00000070H
  00141	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00146	8b f0		 mov	 esi, eax
  00148	59		 pop	 ecx
  00149	89 75 e8	 mov	 DWORD PTR $T510739[ebp], esi
  0014c	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00150	3b f3		 cmp	 esi, ebx
  00152	74 12		 je	 SHORT $LN15@GetNamedTi
  00154	8b ce		 mov	 ecx, esi
  00156	e8 00 00 00 00	 call	 ??0SinglePullDownItem@@QAE@XZ ; SinglePullDownItem::SinglePullDownItem
  0015b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NamedTitlePullDown@@6B@
  00161	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  00164	eb 02		 jmp	 SHORT $LN16@GetNamedTi
$LN15@GetNamedTi:
  00166	33 f6		 xor	 esi, esi
$LN16@GetNamedTi:

; 244  : 		
; 245  : 		pPullDown->m_dwCode = sNamedTitleSlot.m_dwCode;

  00168	8b 45 b0	 mov	 eax, DWORD PTR _sNamedTitleSlot$506711[ebp]
  0016b	89 46 6c	 mov	 DWORD PTR [esi+108], eax

; 246  : 		pPullDown->m_szTitle			= SortList[i].m_szNamedTitle.c_str();

  0016e	8b 4d d8	 mov	 ecx, DWORD PTR _SortList$[ebp]
  00171	8d 4c 39 04	 lea	 ecx, DWORD PTR [ecx+edi+4]
  00175	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00178	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  0017e	50		 push	 eax
  0017f	8d 4e 48	 lea	 ecx, DWORD PTR [esi+72]
  00182	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 247  : 		pPullDown->m_dwTitleColor		= g_NamedTitleInfoMgr.GetNamedTitleTextColor( sNamedTitleSlot.m_dwCode, sNamedTitleSlot.m_nLevel, false, sNamedTitleSlot.m_byEquip );

  00187	ff 75 c1	 push	 DWORD PTR _sNamedTitleSlot$506711[ebp+17]
  0018a	53		 push	 ebx
  0018b	ff 75 b4	 push	 DWORD PTR _sNamedTitleSlot$506711[ebp+4]
  0018e	ff 75 b0	 push	 DWORD PTR _sNamedTitleSlot$506711[ebp]
  00191	e8 00 00 00 00	 call	 ?GetSingleton@ioNamedTitleInfoManager@@SAAAV1@XZ ; ioNamedTitleInfoManager::GetSingleton
  00196	8b c8		 mov	 ecx, eax
  00198	e8 00 00 00 00	 call	 ?GetNamedTitleTextColor@ioNamedTitleInfoManager@@QAEKKHEE@Z ; ioNamedTitleInfoManager::GetNamedTitleTextColor

; 248  : 		pList->AddList( pPullDown );

  0019d	8b 4d 08	 mov	 ecx, DWORD PTR _pList$[ebp]
  001a0	89 46 64	 mov	 DWORD PTR [esi+100], eax
  001a3	8b 01		 mov	 eax, DWORD PTR [ecx]
  001a5	56		 push	 esi
  001a6	ff 90 34 01 00
	00		 call	 DWORD PTR [eax+308]
$LN3@GetNamedTi:

; 236  : 
; 237  : 	for ( int i=0; i<(int)SortList.size(); i++ )

  001ac	8b 45 dc	 mov	 eax, DWORD PTR _SortList$[ebp+4]
  001af	2b 45 d8	 sub	 eax, DWORD PTR _SortList$[ebp]
  001b2	6a 14		 push	 20			; 00000014H
  001b4	99		 cdq
  001b5	59		 pop	 ecx
  001b6	f7 f9		 idiv	 ecx
  001b8	ff 45 f0	 inc	 DWORD PTR _i$506706[ebp]
  001bb	83 c7 14	 add	 edi, 20			; 00000014H
  001be	39 45 f0	 cmp	 DWORD PTR _i$506706[ebp], eax
  001c1	0f 8c 4c ff ff
	ff		 jl	 $LL4@GetNamedTi
$LN2@GetNamedTi:

; 249  : 	}
; 250  : }

  001c7	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001cb	8d 4d d8	 lea	 ecx, DWORD PTR _SortList$[ebp]
  001ce	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@IAEXXZ ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::_Tidy
$LN75@GetNamedTi:
  001d3	e8 00 00 00 00	 call	 __EH_epilog3
  001d8	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetNamedTitleList@NamedTitlePremiumSelectWnd@@IAEXPAVioPullDownList@@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _SortList$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@UtagNamedTitleSortInfo@@V?$allocator@UtagNamedTitleSortInfo@@@std@@@std@@QAE@XZ ; std::vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >::~vector<tagNamedTitleSortInfo,std::allocator<tagNamedTitleSortInfo> >
__unwindfunclet$?GetNamedTitleList@NamedTitlePremiumSelectWnd@@IAEXPAVioPullDownList@@@Z$1:
  00008	8d 4d b4	 lea	 ecx, DWORD PTR _sNamedTitleSortInfo$506567[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1tagNamedTitleSortInfo@@QAE@XZ
__unwindfunclet$?GetNamedTitleList@NamedTitlePremiumSelectWnd@@IAEXPAVioPullDownList@@@Z$2:
  00010	8d 4d c8	 lea	 ecx, DWORD PTR $T510734[ebp]
  00013	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?GetNamedTitleList@NamedTitlePremiumSelectWnd@@IAEXPAVioPullDownList@@@Z$3:
  00019	ff 75 e8	 push	 DWORD PTR $T510739[ebp]
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00021	59		 pop	 ecx
  00022	c3		 ret	 0
__ehhandler$?GetNamedTitleList@NamedTitlePremiumSelectWnd@@IAEXPAVioPullDownList@@@Z:
  00023	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00027	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002a	8b 4a 94	 mov	 ecx, DWORD PTR [edx-108]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetNamedTitleList@NamedTitlePremiumSelectWnd@@IAEXPAVioPullDownList@@@Z
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetNamedTitleList@NamedTitlePremiumSelectWnd@@IAEXPAVioPullDownList@@@Z ENDP ; NamedTitlePremiumSelectWnd::GetNamedTitleList
PUBLIC	??_R0?AVioPullDownList@@@8			; ioPullDownList `RTTI Type Descriptor'
PUBLIC	?ShowNamedTitleList@NamedTitlePremiumSelectWnd@@IAEXXZ ; NamedTitlePremiumSelectWnd::ShowNamedTitleList
;	COMDAT ??_R0?AVioPullDownList@@@8
_DATA	SEGMENT
??_R0?AVioPullDownList@@@8 DD FLAT:??_7type_info@@6B@	; ioPullDownList `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioPullDownList@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ShowNamedTitleList@NamedTitlePremiumSelectWnd@@IAEXXZ
_TEXT	SEGMENT
?ShowNamedTitleList@NamedTitlePremiumSelectWnd@@IAEXXZ PROC ; NamedTitlePremiumSelectWnd::ShowNamedTitleList, COMDAT
; _this$ = ecx

; 253  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 254  : 	ioWnd *pWnd = FindChildWnd( ID_SELECT_BTN );

  00002	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  00008	57		 push	 edi
  00009	6a 02		 push	 2
  0000b	8b f9		 mov	 edi, ecx
  0000d	ff d6		 call	 esi
  0000f	8b d8		 mov	 ebx, eax

; 255  : 	if ( !pWnd )

  00011	85 db		 test	 ebx, ebx
  00013	74 36		 je	 SHORT $LN1@ShowNamedT

; 256  : 		return;
; 257  : 
; 258  : 	ioPullDownList *pListWnd = dynamic_cast<ioPullDownList*>( FindChildWnd( ID_LIST_WND ) );

  00015	6a 00		 push	 0
  00017	68 00 00 00 00	 push	 OFFSET ??_R0?AVioPullDownList@@@8
  0001c	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  00021	6a 00		 push	 0
  00023	6a 64		 push	 100			; 00000064H
  00025	8b cf		 mov	 ecx, edi
  00027	ff d6		 call	 esi
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ___RTDynamicCast
  0002f	8b f0		 mov	 esi, eax
  00031	83 c4 14	 add	 esp, 20			; 00000014H

; 259  : 	if( pListWnd )

  00034	85 f6		 test	 esi, esi
  00036	74 13		 je	 SHORT $LN1@ShowNamedT

; 260  : 	{
; 261  : 		pListWnd->OpenList( pWnd );

  00038	8b 06		 mov	 eax, DWORD PTR [esi]
  0003a	53		 push	 ebx
  0003b	8b ce		 mov	 ecx, esi
  0003d	ff 90 30 01 00
	00		 call	 DWORD PTR [eax+304]

; 262  : 		GetNamedTitleList( pListWnd );

  00043	56		 push	 esi
  00044	8b cf		 mov	 ecx, edi
  00046	e8 00 00 00 00	 call	 ?GetNamedTitleList@NamedTitlePremiumSelectWnd@@IAEXPAVioPullDownList@@@Z ; NamedTitlePremiumSelectWnd::GetNamedTitleList
$LN1@ShowNamedT:

; 263  : 	}
; 264  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	c3		 ret	 0
?ShowNamedTitleList@NamedTitlePremiumSelectWnd@@IAEXXZ ENDP ; NamedTitlePremiumSelectWnd::ShowNamedTitleList
_TEXT	ENDS
EXTRN	__imp_?IsShow@ioWnd@@QBE_NXZ:PROC
EXTRN	__imp_?GetID@ioWnd@@QBEKXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?iwm_command@NamedTitlePremiumSelectWnd@@UAEXPAVioWnd@@HK@Z
_TEXT	SEGMENT
_pWnd$ = 8						; size = 4
_cmd$ = 12						; size = 4
_param$ = 16						; size = 4
?iwm_command@NamedTitlePremiumSelectWnd@@UAEXPAVioWnd@@HK@Z PROC ; NamedTitlePremiumSelectWnd::iwm_command, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 42   : 	DWORD dwID = pWnd->GetID();

  00007	8b 4d 08	 mov	 ecx, DWORD PTR _pWnd$[ebp]
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetID@ioWnd@@QBEKXZ

; 43   : 	switch( dwID )

  00010	48		 dec	 eax
  00011	74 6b		 je	 SHORT $LN10@iwm_comman
  00013	48		 dec	 eax
  00014	74 1c		 je	 SHORT $LN8@iwm_comman
  00016	2d 10 27 00 00	 sub	 eax, 10000		; 00002710H
  0001b	75 6e		 jne	 SHORT $LN9@iwm_comman

; 64   : 	case MESSAGE_BOX3:
; 65   : 		if( cmd == IOBN_BTNUP )

  0001d	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  00021	75 68		 jne	 SHORT $LN9@iwm_comman

; 66   : 		{
; 67   : 			if( param == IDYES )

  00023	83 7d 10 06	 cmp	 DWORD PTR _param$[ebp], 6
  00027	75 62		 jne	 SHORT $LN9@iwm_comman

; 68   : 				SendNamedTitleChange();

  00029	8b cf		 mov	 ecx, edi
  0002b	e8 00 00 00 00	 call	 ?SendNamedTitleChange@NamedTitlePremiumSelectWnd@@IAEXXZ ; NamedTitlePremiumSelectWnd::SendNamedTitleChange

; 69   : 		}
; 70   : 		break;

  00030	eb 59		 jmp	 SHORT $LN9@iwm_comman
$LN8@iwm_comman:

; 49   : 		}
; 50   : 		break;
; 51   : 	case ID_SELECT_BTN:
; 52   : 		if( cmd == IOBN_BTNUP )

  00032	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  00036	75 53		 jne	 SHORT $LN9@iwm_comman

; 53   : 		{
; 54   : 			ioPullDownList *pListWnd = dynamic_cast<ioPullDownList*>( FindChildWnd( ID_LIST_WND ) );

  00038	6a 00		 push	 0
  0003a	68 00 00 00 00	 push	 OFFSET ??_R0?AVioPullDownList@@@8
  0003f	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  00044	6a 00		 push	 0
  00046	6a 64		 push	 100			; 00000064H
  00048	8b cf		 mov	 ecx, edi
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ___RTDynamicCast
  00056	8b f0		 mov	 esi, eax
  00058	83 c4 14	 add	 esp, 20			; 00000014H

; 55   : 			if ( !pListWnd )

  0005b	85 f6		 test	 esi, esi
  0005d	74 2c		 je	 SHORT $LN9@iwm_comman

; 56   : 				return;
; 57   : 
; 58   : 			if( pListWnd->IsShow() )

  0005f	8b ce		 mov	 ecx, esi
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  00067	84 c0		 test	 al, al
  00069	74 0a		 je	 SHORT $LN5@iwm_comman

; 59   : 				pListWnd->HideWnd();

  0006b	8b ce		 mov	 ecx, esi
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideWnd@ioWnd@@QAEXXZ

; 60   : 			else

  00073	eb 16		 jmp	 SHORT $LN9@iwm_comman
$LN5@iwm_comman:

; 61   : 				ShowNamedTitleList();

  00075	8b cf		 mov	 ecx, edi
  00077	e8 00 00 00 00	 call	 ?ShowNamedTitleList@NamedTitlePremiumSelectWnd@@IAEXXZ ; NamedTitlePremiumSelectWnd::ShowNamedTitleList

; 62   : 		}
; 63   : 		break;

  0007c	eb 0d		 jmp	 SHORT $LN9@iwm_comman
$LN10@iwm_comman:

; 44   : 	{
; 45   : 	case ID_RECV_BTN:
; 46   : 		if( cmd == IOBN_BTNUP )

  0007e	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  00082	75 07		 jne	 SHORT $LN9@iwm_comman

; 47   : 		{
; 48   : 			CheckRecvBtn();

  00084	8b cf		 mov	 ecx, edi
  00086	e8 00 00 00 00	 call	 ?CheckRecvBtn@NamedTitlePremiumSelectWnd@@IAEXXZ ; NamedTitlePremiumSelectWnd::CheckRecvBtn
$LN9@iwm_comman:
  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi

; 71   : 	}
; 72   : }

  0008d	5d		 pop	 ebp
  0008e	c2 0c 00	 ret	 12			; 0000000cH
?iwm_command@NamedTitlePremiumSelectWnd@@UAEXPAVioWnd@@HK@Z ENDP ; NamedTitlePremiumSelectWnd::iwm_command
_TEXT	ENDS
END
