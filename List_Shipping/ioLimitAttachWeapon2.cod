; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioLimitAttachWeapon2.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
PUBLIC	?m_ActionStopType@ioLimitAttachWeapon2@@2W4ActionStopType@@A ; ioLimitAttachWeapon2::m_ActionStopType
PUBLIC	?m_DieActionStopType@ioLimitAttachWeapon2@@2W4ActionStopType@@A ; ioLimitAttachWeapon2::m_DieActionStopType
_BSS	SEGMENT
?m_ActionStopType@ioLimitAttachWeapon2@@2W4ActionStopType@@A DD 01H DUP (?) ; ioLimitAttachWeapon2::m_ActionStopType
?m_DieActionStopType@ioLimitAttachWeapon2@@2W4ActionStopType@@A DD 01H DUP (?) ; ioLimitAttachWeapon2::m_DieActionStopType
_BSS	ENDS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?return1000@@YAIXZ				; return1000
; Function compile flags: /Ogsp
;	COMDAT ?return1000@@YAIXZ
_TEXT	SEGMENT
?return1000@@YAIXZ PROC					; return1000, COMDAT

; 29   : 	__forceinline unsigned int return1000() { __asm mov eax, 1000 };

  00000	b8 e8 03 00 00	 mov	 eax, 1000		; 000003e8H
  00005	c3		 ret	 0
?return1000@@YAIXZ ENDP					; return1000
_TEXT	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ; ioBaseChar::GetTargetRot
; Function compile flags: /Ogsp
;	COMDAT ?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ
_TEXT	SEGMENT
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ PROC	; ioBaseChar::GetTargetRot, COMDAT
; _this$ = ecx

; 2599 : 	inline const D3DXQUATERNION& GetTargetRot() const { return m_qtTargetRot; }

  00000	8d 81 a4 06 00
	00		 lea	 eax, DWORD PTR [ecx+1700]
  00006	c3		 ret	 0
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ENDP	; ioBaseChar::GetTargetRot
_TEXT	ENDS
PUBLIC	?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ	; ioBaseChar::GetCreator
; Function compile flags: /Ogsp
;	COMDAT ?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ
_TEXT	SEGMENT
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ PROC	; ioBaseChar::GetCreator, COMDAT
; _this$ = ecx

; 4013 : 	inline ioPlayStage* GetCreator() { return m_pCreator; }

  00000	8b 81 44 03 00
	00		 mov	 eax, DWORD PTR [ecx+836]
  00006	c3		 ret	 0
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ ENDP	; ioBaseChar::GetCreator
_TEXT	ENDS
PUBLIC	??_C@_0DM@JDEFBPJK@ioLimitAttachWeapon2?3?3?$HOioMissile@ ; `string'
PUBLIC	??_7ioLimitAttachWeapon2@@6B@			; ioLimitAttachWeapon2::`vftable'
PUBLIC	??1ioLimitAttachWeapon2@@UAE@XZ			; ioLimitAttachWeapon2::~ioLimitAttachWeapon2
PUBLIC	??_R4ioLimitAttachWeapon2@@6B@			; ioLimitAttachWeapon2::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioLimitAttachWeapon2@@@8		; ioLimitAttachWeapon2 `RTTI Type Descriptor'
PUBLIC	??_R3ioLimitAttachWeapon2@@8			; ioLimitAttachWeapon2::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioLimitAttachWeapon2@@8			; ioLimitAttachWeapon2::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioLimitAttachWeapon2@@8		; ioLimitAttachWeapon2::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioWeapon@@8			; ioWeapon::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioWeapon@@@8				; ioWeapon `RTTI Type Descriptor'
PUBLIC	??_R3ioWeapon@@8				; ioWeapon::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWeapon@@8				; ioWeapon::`RTTI Base Class Array'
PUBLIC	?InitResource@ioLimitAttachWeapon2@@UAE_NXZ	; ioLimitAttachWeapon2::InitResource
PUBLIC	?DestroyResource@ioLimitAttachWeapon2@@UAEXPAVioPlayStage@@@Z ; ioLimitAttachWeapon2::DestroyResource
PUBLIC	?LoadProperty@ioLimitAttachWeapon2@@UAEXAAVioINILoader@@@Z ; ioLimitAttachWeapon2::LoadProperty
PUBLIC	?SetStartPosition@ioLimitAttachWeapon2@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z ; ioLimitAttachWeapon2::SetStartPosition
PUBLIC	?Process@ioLimitAttachWeapon2@@UAEXMPAVioPlayStage@@@Z ; ioLimitAttachWeapon2::Process
PUBLIC	?IsCollision@ioLimitAttachWeapon2@@UAE_NPAVioPlayEntity@@_N@Z ; ioLimitAttachWeapon2::IsCollision
PUBLIC	?GetAttackDir@ioLimitAttachWeapon2@@UBE?AUD3DXVECTOR3@@PBVioPlayEntity@@@Z ; ioLimitAttachWeapon2::GetAttackDir
PUBLIC	?GetLocalAttackBox@ioLimitAttachWeapon2@@UBEABVioOrientBox@@XZ ; ioLimitAttachWeapon2::GetLocalAttackBox
PUBLIC	?GetType@ioLimitAttachWeapon2@@UBE?AW4WeaponType@ioWeapon@@XZ ; ioLimitAttachWeapon2::GetType
PUBLIC	?GetActionStopType@ioLimitAttachWeapon2@@UBE?AW4ActionStopType@@XZ ; ioLimitAttachWeapon2::GetActionStopType
PUBLIC	?GetDieActionStopType@ioLimitAttachWeapon2@@UBE?AW4ActionStopType@@XZ ; ioLimitAttachWeapon2::GetDieActionStopType
PUBLIC	?UpdateWorldAttackBox@ioLimitAttachWeapon2@@MAEXM_N@Z ; ioLimitAttachWeapon2::UpdateWorldAttackBox
PUBLIC	?GetAttribute@ioLimitAttachWeapon2@@MBEPBUWeaponAttribute@@XZ ; ioLimitAttachWeapon2::GetAttribute
EXTRN	??1ioWeapon@@UAE@XZ:PROC			; ioWeapon::~ioWeapon
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	__imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ:PROC
EXTRN	__imp_?LOG@@3VCLog@@A:BYTE
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?IsAlreadyCollisioned@ioWeapon@@UAE_NPAVioPlayEntity@@@Z:PROC ; ioWeapon::IsAlreadyCollisioned
EXTRN	?AddCollisionEntity@ioWeapon@@UAEXPAVioPlayEntity@@@Z:PROC ; ioWeapon::AddCollisionEntity
EXTRN	?SetOwnerDamageRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerDamageRate
EXTRN	?SetOwnerChargeDamageRate@ioWeapon@@UAEXM@Z:PROC ; ioWeapon::SetOwnerChargeDamageRate
EXTRN	?SetOwnerChargeForceRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerChargeForceRate
EXTRN	?SetOwnerChargeRangeRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerChargeRangeRate
EXTRN	?SetOwnerChargeSpeedRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerChargeSpeedRate
EXTRN	?SetOwnerChargeBlowRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerChargeBlowRate
EXTRN	?SetOwnerChargeFloatRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerChargeFloatRate
EXTRN	?SetOwnerChargeScaleRate@ioWeapon@@UAEXM@Z:PROC	; ioWeapon::SetOwnerChargeScaleRate
EXTRN	?SetOwnerChargeExplosionRate@ioWeapon@@UAEXM@Z:PROC ; ioWeapon::SetOwnerChargeExplosionRate
EXTRN	?SetOwnerChargeWoundedTimeRate@ioWeapon@@UAEXM@Z:PROC ; ioWeapon::SetOwnerChargeWoundedTimeRate
EXTRN	?SetOwnerChargeLiveTimeRate@ioWeapon@@UAEXM@Z:PROC ; ioWeapon::SetOwnerChargeLiveTimeRate
EXTRN	?SetOwnerChargeBuffLiveTimeRate@ioWeapon@@UAEXM@Z:PROC ; ioWeapon::SetOwnerChargeBuffLiveTimeRate
EXTRN	?SetWeaponIndex@ioWeapon@@UAEXK@Z:PROC		; ioWeapon::SetWeaponIndex
EXTRN	?SetGrapplingTargetName@ioWeapon@@UAEXABVioHashString@@@Z:PROC ; ioWeapon::SetGrapplingTargetName
EXTRN	?SetCreateItem@ioWeapon@@UAEXABVioHashString@@@Z:PROC ; ioWeapon::SetCreateItem
EXTRN	?SetTeam@ioWeapon@@UAEXPAVioPlayStage@@W4TeamType@@@Z:PROC ; ioWeapon::SetTeam
EXTRN	?CallReserveAreaWeapon@ioWeapon@@UAEXXZ:PROC	; ioWeapon::CallReserveAreaWeapon
EXTRN	?SetWeaponDead@ioWeapon@@UAEXXZ:PROC		; ioWeapon::SetWeaponDead
EXTRN	?PlayExplosionSound@ioWeapon@@UAEXXZ:PROC	; ioWeapon::PlayExplosionSound
EXTRN	?PlayWoundedSound@ioWeapon@@UAEXPAVioPlayEntity@@@Z:PROC ; ioWeapon::PlayWoundedSound
EXTRN	?PlayDefensedSound@ioWeapon@@UAEXPAVioPlayEntity@@@Z:PROC ; ioWeapon::PlayDefensedSound
EXTRN	?PlayLoopSound@ioWeapon@@UAEXXZ:PROC		; ioWeapon::PlayLoopSound
EXTRN	?StopLoopSound@ioWeapon@@UAEXXZ:PROC		; ioWeapon::StopLoopSound
EXTRN	?GetTargetAirBuffList@ioWeapon@@UBEABV?$vector@UBuffInfoStruct@@V?$allocator@UBuffInfoStruct@@@std@@@std@@XZ:PROC ; ioWeapon::GetTargetAirBuffList
EXTRN	?GetTargetBuffList@ioWeapon@@UBEABV?$vector@UBuffInfoStruct@@V?$allocator@UBuffInfoStruct@@@std@@@std@@XZ:PROC ; ioWeapon::GetTargetBuffList
EXTRN	?GetTargetDownBuffList@ioWeapon@@UBEABV?$vector@UBuffInfoStruct@@V?$allocator@UBuffInfoStruct@@@std@@@std@@XZ:PROC ; ioWeapon::GetTargetDownBuffList
EXTRN	?GetPosition@ioWeapon@@UBEABUD3DXVECTOR3@@XZ:PROC ; ioWeapon::GetPosition
EXTRN	?GetBlowType@ioWeapon@@UBE?AW4BlowTargetType@@XZ:PROC ; ioWeapon::GetBlowType
EXTRN	?GetPushPower@ioWeapon@@UBEMM@Z:PROC		; ioWeapon::GetPushPower
EXTRN	?GetBlowPower@ioWeapon@@UBEMM@Z:PROC		; ioWeapon::GetBlowPower
EXTRN	?GetAirPushPower@ioWeapon@@UBEMM@Z:PROC		; ioWeapon::GetAirPushPower
EXTRN	?GetAirBlowPower@ioWeapon@@UBEMM@Z:PROC		; ioWeapon::GetAirBlowPower
EXTRN	?GetDefensePushPower@ioWeapon@@UBEMM@Z:PROC	; ioWeapon::GetDefensePushPower
EXTRN	?GetCollisionEnableTime@ioWeapon@@UBEKXZ:PROC	; ioWeapon::GetCollisionEnableTime
EXTRN	?SetSylphid@ioWeapon@@UAEHXZ:PROC		; ioWeapon::SetSylphid
EXTRN	?ApplyExtraReserveWeaponByWeaponInfo@ioWeapon@@UAEXPAV1@@Z:PROC ; ioWeapon::ApplyExtraReserveWeaponByWeaponInfo
EXTRN	?SetResistanceAttr@ioWeapon@@UAEXH@Z:PROC	; ioWeapon::SetResistanceAttr
EXTRN	?SetStartCollisionBox@ioWeapon@@UAEXXZ:PROC	; ioWeapon::SetStartCollisionBox
EXTRN	?SetLiveTime@ioWeapon@@UAEXK@Z:PROC		; ioWeapon::SetLiveTime
EXTRN	?SetMoveDir@ioWeapon@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioWeapon::SetMoveDir
EXTRN	?SetMoveSpeed@ioWeapon@@UAEXM@Z:PROC		; ioWeapon::SetMoveSpeed
EXTRN	?SetFloatPower@ioWeapon@@UAEXM@Z:PROC		; ioWeapon::SetFloatPower
EXTRN	?TestMapCollision@ioWeapon@@UAE_NPAVioOpcodeShape@@PAVioPlayStage@@PBUD3DXMATRIX@@@Z:PROC ; ioWeapon::TestMapCollision
EXTRN	?CheckPreCollision@ioWeapon@@UAEXPAVioPlayEntity@@PAVioPlayStage@@@Z:PROC ; ioWeapon::CheckPreCollision
EXTRN	?CheckStructAndDummy@ioWeapon@@UAEXPAVioPlayEntity@@PAVioPlayStage@@@Z:PROC ; ioWeapon::CheckStructAndDummy
EXTRN	?GetDamage@ioWeapon@@UAEMPAVioPlayEntity@@@Z:PROC ; ioWeapon::GetDamage
EXTRN	?GetBaseDamage@ioWeapon@@UAEMPAVioPlayEntity@@@Z:PROC ; ioWeapon::GetBaseDamage
EXTRN	?GetPushAngle@ioWeapon@@UBEMXZ:PROC		; ioWeapon::GetPushAngle
EXTRN	?IsResistanceMagic@ioWeapon@@UAEHPAVioBaseChar@@@Z:PROC ; ioWeapon::IsResistanceMagic
EXTRN	?IsResistanceBomb@ioWeapon@@UAEHPAVioBaseChar@@@Z:PROC ; ioWeapon::IsResistanceBomb
EXTRN	?IsCanMineExplosion@ioWeapon@@UAE_NXZ:PROC	; ioWeapon::IsCanMineExplosion
EXTRN	?CheckGrapplingState@ioWeapon@@UAE?AW4GrapplingType@@XZ:PROC ; ioWeapon::CheckGrapplingState
EXTRN	?CheckCurAttribute@ioWeapon@@UAEXPBVioPlayEntity@@@Z:PROC ; ioWeapon::CheckCurAttribute
EXTRN	?CheckItemNotDrop@ioWeapon@@UAE_NPAVioBaseChar@@@Z:PROC ; ioWeapon::CheckItemNotDrop
EXTRN	?GetWorldAttackBoxList@ioWeapon@@UAEXAAV?$vector@VioOrientBox@@V?$allocator@VioOrientBox@@@std@@@std@@@Z:PROC ; ioWeapon::GetWorldAttackBoxList
EXTRN	?GetLiveTime@ioWeapon@@UAEKXZ:PROC		; ioWeapon::GetLiveTime
EXTRN	?GetMoveDir@ioWeapon@@UAE?AUD3DXVECTOR3@@XZ:PROC ; ioWeapon::GetMoveDir
EXTRN	?CheckWeaponCollision@ioWeapon@@UAEXXZ:PROC	; ioWeapon::CheckWeaponCollision
EXTRN	?GetRefreshDuration@ioWeapon@@UAEKXZ:PROC	; ioWeapon::GetRefreshDuration
EXTRN	?GetIgnoreDuration@ioWeapon@@UAEKXZ:PROC	; ioWeapon::GetIgnoreDuration
EXTRN	?GetIgnoreTimeTypeDuration@ioWeapon@@UAEKXZ:PROC ; ioWeapon::GetIgnoreTimeTypeDuration
EXTRN	?GetIgnoreTimeType@ioWeapon@@UAEKXZ:PROC	; ioWeapon::GetIgnoreTimeType
EXTRN	?ApplyWeaponSync@ioWeapon@@UAEXAAVSP2Packet@@PAVioPlayStage@@@Z:PROC ; ioWeapon::ApplyWeaponSync
EXTRN	?IsSkillDependency@ioWeapon@@UAE_NABVioHashString@@@Z:PROC ; ioWeapon::IsSkillDependency
EXTRN	?SetSkillDependencyAction@ioWeapon@@UAEXXZ:PROC	; ioWeapon::SetSkillDependencyAction
EXTRN	?CalcFinalDamage@ioWeapon@@MAEMXZ:PROC		; ioWeapon::CalcFinalDamage
EXTRN	?CalcFinalBoundDamage@ioWeapon@@MAEMXZ:PROC	; ioWeapon::CalcFinalBoundDamage
EXTRN	?CheckPiercing@ioWeapon@@MAE_N_N@Z:PROC		; ioWeapon::CheckPiercing
EXTRN	?ClearCollisionList@ioWeapon@@MAEXXZ:PROC	; ioWeapon::ClearCollisionList
EXTRN	?CheckCreateWeaponList@ioWeapon@@MAEXXZ:PROC	; ioWeapon::CheckCreateWeaponList
EXTRN	?CreateCollisionAreaWeapon@ioWeapon@@MAEXXZ:PROC ; ioWeapon::CreateCollisionAreaWeapon
EXTRN	?SetMapCollision@ioWeapon@@UAEXXZ:PROC		; ioWeapon::SetMapCollision
EXTRN	?IsIgnoreMapCollision@ioWeapon@@UBE_NXZ:PROC	; ioWeapon::IsIgnoreMapCollision
EXTRN	?IsIgnoreTestMapCollision@ioWeapon@@UBE_NXZ:PROC ; ioWeapon::IsIgnoreTestMapCollision
EXTRN	?IsIgnoreMapCollisionEffect@ioWeapon@@UBE_NXZ:PROC ; ioWeapon::IsIgnoreMapCollisionEffect
EXTRN	?AddEffectEvent@ioWeapon@@MAEXPAVioEffect@@@Z:PROC ; ioWeapon::AddEffectEvent
EXTRN	??_EioLimitAttachWeapon2@@UAEPAXI@Z:PROC	; ioLimitAttachWeapon2::`vector deleting destructor'
;	COMDAT ??_R2ioWeapon@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iolimitattachweapon2.cpp
rdata$r	SEGMENT
??_R2ioWeapon@@8 DD FLAT:??_R1A@?0A@EA@ioWeapon@@8	; ioWeapon::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWeapon@@8
rdata$r	SEGMENT
??_R3ioWeapon@@8 DD 00H					; ioWeapon::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWeapon@@@8
_DATA	SEGMENT
??_R0?AVioWeapon@@@8 DD FLAT:??_7type_info@@6B@		; ioWeapon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWeapon@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWeapon@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWeapon@@8 DD FLAT:??_R0?AVioWeapon@@@8	; ioWeapon::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioLimitAttachWeapon2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioLimitAttachWeapon2@@8 DD FLAT:??_R0?AVioLimitAttachWeapon2@@@8 ; ioLimitAttachWeapon2::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioLimitAttachWeapon2@@8
rdata$r	ENDS
;	COMDAT ??_R2ioLimitAttachWeapon2@@8
rdata$r	SEGMENT
??_R2ioLimitAttachWeapon2@@8 DD FLAT:??_R1A@?0A@EA@ioLimitAttachWeapon2@@8 ; ioLimitAttachWeapon2::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R3ioLimitAttachWeapon2@@8
rdata$r	SEGMENT
??_R3ioLimitAttachWeapon2@@8 DD 00H			; ioLimitAttachWeapon2::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioLimitAttachWeapon2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioLimitAttachWeapon2@@@8
_DATA	SEGMENT
??_R0?AVioLimitAttachWeapon2@@@8 DD FLAT:??_7type_info@@6B@ ; ioLimitAttachWeapon2 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioLimitAttachWeapon2@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioLimitAttachWeapon2@@6B@
rdata$r	SEGMENT
??_R4ioLimitAttachWeapon2@@6B@ DD 00H			; ioLimitAttachWeapon2::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioLimitAttachWeapon2@@@8
	DD	FLAT:??_R3ioLimitAttachWeapon2@@8
rdata$r	ENDS
;	COMDAT ??_C@_0DM@JDEFBPJK@ioLimitAttachWeapon2?3?3?$HOioMissile@
CONST	SEGMENT
??_C@_0DM@JDEFBPJK@ioLimitAttachWeapon2?3?3?$HOioMissile@ DB 'ioLimitAtta'
	DB	'chWeapon2::~ioMissileWeapon - UnReleased Resouce', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7ioLimitAttachWeapon2@@6B@
CONST	SEGMENT
??_7ioLimitAttachWeapon2@@6B@ DD FLAT:??_R4ioLimitAttachWeapon2@@6B@ ; ioLimitAttachWeapon2::`vftable'
	DD	FLAT:?IsAlreadyCollisioned@ioWeapon@@UAE_NPAVioPlayEntity@@@Z
	DD	FLAT:?AddCollisionEntity@ioWeapon@@UAEXPAVioPlayEntity@@@Z
	DD	FLAT:?SetOwnerDamageRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeDamageRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeForceRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeRangeRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeSpeedRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeBlowRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeFloatRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeScaleRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeExplosionRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeWoundedTimeRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeLiveTimeRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetOwnerChargeBuffLiveTimeRate@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioWeapon@@UAEXK@Z
	DD	FLAT:?SetGrapplingTargetName@ioWeapon@@UAEXABVioHashString@@@Z
	DD	FLAT:?SetCreateItem@ioWeapon@@UAEXABVioHashString@@@Z
	DD	FLAT:?SetTeam@ioWeapon@@UAEXPAVioPlayStage@@W4TeamType@@@Z
	DD	FLAT:?CallReserveAreaWeapon@ioWeapon@@UAEXXZ
	DD	FLAT:?SetWeaponDead@ioWeapon@@UAEXXZ
	DD	FLAT:?PlayExplosionSound@ioWeapon@@UAEXXZ
	DD	FLAT:?PlayWoundedSound@ioWeapon@@UAEXPAVioPlayEntity@@@Z
	DD	FLAT:?PlayDefensedSound@ioWeapon@@UAEXPAVioPlayEntity@@@Z
	DD	FLAT:?PlayLoopSound@ioWeapon@@UAEXXZ
	DD	FLAT:?StopLoopSound@ioWeapon@@UAEXXZ
	DD	FLAT:?GetTargetAirBuffList@ioWeapon@@UBEABV?$vector@UBuffInfoStruct@@V?$allocator@UBuffInfoStruct@@@std@@@std@@XZ
	DD	FLAT:?GetTargetBuffList@ioWeapon@@UBEABV?$vector@UBuffInfoStruct@@V?$allocator@UBuffInfoStruct@@@std@@@std@@XZ
	DD	FLAT:?GetTargetDownBuffList@ioWeapon@@UBEABV?$vector@UBuffInfoStruct@@V?$allocator@UBuffInfoStruct@@@std@@@std@@XZ
	DD	FLAT:?GetPosition@ioWeapon@@UBEABUD3DXVECTOR3@@XZ
	DD	FLAT:?GetBlowType@ioWeapon@@UBE?AW4BlowTargetType@@XZ
	DD	FLAT:?GetPushPower@ioWeapon@@UBEMM@Z
	DD	FLAT:?GetBlowPower@ioWeapon@@UBEMM@Z
	DD	FLAT:?GetAirPushPower@ioWeapon@@UBEMM@Z
	DD	FLAT:?GetAirBlowPower@ioWeapon@@UBEMM@Z
	DD	FLAT:?GetDefensePushPower@ioWeapon@@UBEMM@Z
	DD	FLAT:?GetCollisionEnableTime@ioWeapon@@UBEKXZ
	DD	FLAT:?SetSylphid@ioWeapon@@UAEHXZ
	DD	FLAT:?ApplyExtraReserveWeaponByWeaponInfo@ioWeapon@@UAEXPAV1@@Z
	DD	FLAT:?InitResource@ioLimitAttachWeapon2@@UAE_NXZ
	DD	FLAT:?DestroyResource@ioLimitAttachWeapon2@@UAEXPAVioPlayStage@@@Z
	DD	FLAT:?LoadProperty@ioLimitAttachWeapon2@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?SetResistanceAttr@ioWeapon@@UAEXH@Z
	DD	FLAT:?SetStartCollisionBox@ioWeapon@@UAEXXZ
	DD	FLAT:?SetLiveTime@ioWeapon@@UAEXK@Z
	DD	FLAT:?SetMoveDir@ioWeapon@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?SetMoveSpeed@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetFloatPower@ioWeapon@@UAEXM@Z
	DD	FLAT:?SetStartPosition@ioLimitAttachWeapon2@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z
	DD	FLAT:?Process@ioLimitAttachWeapon2@@UAEXMPAVioPlayStage@@@Z
	DD	FLAT:?IsCollision@ioLimitAttachWeapon2@@UAE_NPAVioPlayEntity@@_N@Z
	DD	FLAT:?TestMapCollision@ioWeapon@@UAE_NPAVioOpcodeShape@@PAVioPlayStage@@PBUD3DXMATRIX@@@Z
	DD	FLAT:?CheckPreCollision@ioWeapon@@UAEXPAVioPlayEntity@@PAVioPlayStage@@@Z
	DD	FLAT:?CheckStructAndDummy@ioWeapon@@UAEXPAVioPlayEntity@@PAVioPlayStage@@@Z
	DD	FLAT:?GetDamage@ioWeapon@@UAEMPAVioPlayEntity@@@Z
	DD	FLAT:?GetBaseDamage@ioWeapon@@UAEMPAVioPlayEntity@@@Z
	DD	FLAT:?GetPushAngle@ioWeapon@@UBEMXZ
	DD	FLAT:?IsResistanceMagic@ioWeapon@@UAEHPAVioBaseChar@@@Z
	DD	FLAT:?IsResistanceBomb@ioWeapon@@UAEHPAVioBaseChar@@@Z
	DD	FLAT:?IsCanMineExplosion@ioWeapon@@UAE_NXZ
	DD	FLAT:?CheckGrapplingState@ioWeapon@@UAE?AW4GrapplingType@@XZ
	DD	FLAT:?CheckCurAttribute@ioWeapon@@UAEXPBVioPlayEntity@@@Z
	DD	FLAT:?CheckItemNotDrop@ioWeapon@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetWorldAttackBoxList@ioWeapon@@UAEXAAV?$vector@VioOrientBox@@V?$allocator@VioOrientBox@@@std@@@std@@@Z
	DD	FLAT:?GetAttackDir@ioLimitAttachWeapon2@@UBE?AUD3DXVECTOR3@@PBVioPlayEntity@@@Z
	DD	FLAT:?GetLocalAttackBox@ioLimitAttachWeapon2@@UBEABVioOrientBox@@XZ
	DD	FLAT:?GetLiveTime@ioWeapon@@UAEKXZ
	DD	FLAT:?GetMoveDir@ioWeapon@@UAE?AUD3DXVECTOR3@@XZ
	DD	FLAT:?CheckWeaponCollision@ioWeapon@@UAEXXZ
	DD	FLAT:?GetType@ioLimitAttachWeapon2@@UBE?AW4WeaponType@ioWeapon@@XZ
	DD	FLAT:?GetActionStopType@ioLimitAttachWeapon2@@UBE?AW4ActionStopType@@XZ
	DD	FLAT:?GetDieActionStopType@ioLimitAttachWeapon2@@UBE?AW4ActionStopType@@XZ
	DD	FLAT:?GetRefreshDuration@ioWeapon@@UAEKXZ
	DD	FLAT:?GetIgnoreDuration@ioWeapon@@UAEKXZ
	DD	FLAT:?GetIgnoreTimeTypeDuration@ioWeapon@@UAEKXZ
	DD	FLAT:?GetIgnoreTimeType@ioWeapon@@UAEKXZ
	DD	FLAT:?ApplyWeaponSync@ioWeapon@@UAEXAAVSP2Packet@@PAVioPlayStage@@@Z
	DD	FLAT:?IsSkillDependency@ioWeapon@@UAE_NABVioHashString@@@Z
	DD	FLAT:?SetSkillDependencyAction@ioWeapon@@UAEXXZ
	DD	FLAT:?UpdateWorldAttackBox@ioLimitAttachWeapon2@@MAEXM_N@Z
	DD	FLAT:?GetAttribute@ioLimitAttachWeapon2@@MBEPBUWeaponAttribute@@XZ
	DD	FLAT:?CalcFinalDamage@ioWeapon@@MAEMXZ
	DD	FLAT:?CalcFinalBoundDamage@ioWeapon@@MAEMXZ
	DD	FLAT:?CheckPiercing@ioWeapon@@MAE_N_N@Z
	DD	FLAT:?ClearCollisionList@ioWeapon@@MAEXXZ
	DD	FLAT:?CheckCreateWeaponList@ioWeapon@@MAEXXZ
	DD	FLAT:?CreateCollisionAreaWeapon@ioWeapon@@MAEXXZ
	DD	FLAT:?SetMapCollision@ioWeapon@@UAEXXZ
	DD	FLAT:?IsIgnoreMapCollision@ioWeapon@@UBE_NXZ
	DD	FLAT:?IsIgnoreTestMapCollision@ioWeapon@@UBE_NXZ
	DD	FLAT:?IsIgnoreMapCollisionEffect@ioWeapon@@UBE_NXZ
	DD	FLAT:?AddEffectEvent@ioWeapon@@MAEXPAVioEffect@@@Z
	DD	FLAT:??_EioLimitAttachWeapon2@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1ioLimitAttachWeapon2@@UAE@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??1ioLimitAttachWeapon2@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1ioLimitAttachWeapon2@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioLimitAttachWeapon2@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioLimitAttachWeapon2@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1ioLimitAttachWeapon2@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1ioLimitAttachWeapon2@@UAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1ioLimitAttachWeapon2@@UAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1ioLimitAttachWeapon2@@UAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1ioLimitAttachWeapon2@@UAE@XZ$6
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioLimitAttachWeapon2@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioLimitAttachWeapon2@@UAE@XZ PROC			; ioLimitAttachWeapon2::~ioLimitAttachWeapon2, COMDAT
; _this$ = ecx

; 31   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioLimitAttachWeapon2@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7ioLimitAttachWeapon2@@6B@

; 32   : 	if( m_pFireBall )

  00017	83 bf 30 09 00
	00 00		 cmp	 DWORD PTR [edi+2352], 0
  0001e	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  00025	74 16		 je	 SHORT $LN1@ioLimitAtt

; 33   : 	{
; 34   : 		LOG.PrintTimeAndLog( 0, "ioLimitAttachWeapon2::~ioMissileWeapon - UnReleased Resouce" );

  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@JDEFBPJK@ioLimitAttachWeapon2?3?3?$HOioMissile@
  0002c	6a 00		 push	 0
  0002e	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@ioLimitAtt:

; 35   : 	}
; 36   : }

  0003d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00043	8d 8f e8 08 00
	00		 lea	 ecx, DWORD PTR [edi+2280]
  00049	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0004d	ff d6		 call	 esi
  0004f	8d 8f d8 08 00
	00		 lea	 ecx, DWORD PTR [edi+2264]
  00055	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00059	ff d6		 call	 esi
  0005b	8d 8f c8 08 00
	00		 lea	 ecx, DWORD PTR [edi+2248]
  00061	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00065	ff d6		 call	 esi
  00067	8d 8f b8 08 00
	00		 lea	 ecx, DWORD PTR [edi+2232]
  0006d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00071	ff d6		 call	 esi
  00073	8d 8f a4 08 00
	00		 lea	 ecx, DWORD PTR [edi+2212]
  00079	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0007d	ff d6		 call	 esi
  0007f	8d 8f 94 08 00
	00		 lea	 ecx, DWORD PTR [edi+2196]
  00085	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00089	ff d6		 call	 esi
  0008b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0008f	8b cf		 mov	 ecx, edi
  00091	e8 00 00 00 00	 call	 ??1ioWeapon@@UAE@XZ	; ioWeapon::~ioWeapon
  00096	e8 00 00 00 00	 call	 __EH_epilog3
  0009b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioLimitAttachWeapon2@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioWeapon@@UAE@XZ	; ioWeapon::~ioWeapon
__unwindfunclet$??1ioLimitAttachWeapon2@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 94 08 00
	00		 add	 ecx, 2196		; 00000894H
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioLimitAttachWeapon2@@UAE@XZ$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 a4 08 00
	00		 add	 ecx, 2212		; 000008a4H
  00020	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioLimitAttachWeapon2@@UAE@XZ$3:
  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	81 c1 b8 08 00
	00		 add	 ecx, 2232		; 000008b8H
  0002f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioLimitAttachWeapon2@@UAE@XZ$4:
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	81 c1 c8 08 00
	00		 add	 ecx, 2248		; 000008c8H
  0003e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioLimitAttachWeapon2@@UAE@XZ$5:
  00044	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	81 c1 d8 08 00
	00		 add	 ecx, 2264		; 000008d8H
  0004d	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioLimitAttachWeapon2@@UAE@XZ$6:
  00053	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	81 c1 e8 08 00
	00		 add	 ecx, 2280		; 000008e8H
  0005c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1ioLimitAttachWeapon2@@UAE@XZ:
  00062	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00066	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00069	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0006c	33 c8		 xor	 ecx, eax
  0006e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00073	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioLimitAttachWeapon2@@UAE@XZ
  00078	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioLimitAttachWeapon2@@UAE@XZ ENDP			; ioLimitAttachWeapon2::~ioLimitAttachWeapon2
PUBLIC	?Init@ioLimitAttachWeapon2@@IAEXXZ		; ioLimitAttachWeapon2::Init
EXTRN	__imp_?VEC3_ZERO@ioMath@@2UD3DXVECTOR3@@A:BYTE
; Function compile flags: /Ogsp
;	COMDAT ?Init@ioLimitAttachWeapon2@@IAEXXZ
_TEXT	SEGMENT
?Init@ioLimitAttachWeapon2@@IAEXXZ PROC			; ioLimitAttachWeapon2::Init, COMDAT
; _this$ = ecx

; 39   : {

  00000	56		 push	 esi

; 40   : 	m_vCurPosition = ioMath::VEC3_ZERO;

  00001	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?VEC3_ZERO@ioMath@@2UD3DXVECTOR3@@A
  00007	57		 push	 edi
  00008	8d b9 0c 09 00
	00		 lea	 edi, DWORD PTR [ecx+2316]
  0000e	a5		 movsd
  0000f	a5		 movsd
  00010	a5		 movsd

; 41   : 	m_vPrePosition = ioMath::VEC3_ZERO;

  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?VEC3_ZERO@ioMath@@2UD3DXVECTOR3@@A
  00017	8d b9 18 09 00
	00		 lea	 edi, DWORD PTR [ecx+2328]
  0001d	a5		 movsd
  0001e	a5		 movsd
  0001f	a5		 movsd
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 42   : }

  00022	c3		 ret	 0
?Init@ioLimitAttachWeapon2@@IAEXXZ ENDP			; ioLimitAttachWeapon2::Init
_TEXT	ENDS
EXTRN	?EndEffectGrace@ioMapEffect@@QAEXXZ:PROC	; ioMapEffect::EndEffectGrace
EXTRN	?EndEffectForce@ioMapEffect@@QAEXXZ:PROC	; ioMapEffect::EndEffectForce
EXTRN	?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z:PROC ; ioPlayStage::FindMapEffect
EXTRN	__imp_?StopSound@ioSoundManager@@QAEXABVioHashString@@K@Z:PROC
EXTRN	__imp_?GetSingleton@ioSoundManager@@SAAAV1@XZ:PROC
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	__imp_?DestroyEffect@ioEffectFactory@@QAEXPAVioEffect@@@Z:PROC
EXTRN	__imp_?GetSingleton@ioEffectFactory@@SAAAV1@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?DestroyResource@ioLimitAttachWeapon2@@UAEXPAVioPlayStage@@@Z
_TEXT	SEGMENT
_pStage$ = 8						; size = 4
?DestroyResource@ioLimitAttachWeapon2@@UAEXPAVioPlayStage@@@Z PROC ; ioLimitAttachWeapon2::DestroyResource, COMDAT
; _this$ = ecx

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 170  : 	if( m_pFireBall )

  00007	8b 86 30 09 00
	00		 mov	 eax, DWORD PTR [esi+2352]
  0000d	57		 push	 edi
  0000e	85 c0		 test	 eax, eax
  00010	74 16		 je	 SHORT $LN10@DestroyRes

; 171  : 	{
; 172  : 		g_EffectFactory.DestroyEffect( m_pFireBall );

  00012	50		 push	 eax
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioEffectFactory@@SAAAV1@XZ
  00019	8b c8		 mov	 ecx, eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?DestroyEffect@ioEffectFactory@@QAEXPAVioEffect@@@Z

; 173  : 		m_pFireBall = NULL;

  00021	83 a6 30 09 00
	00 00		 and	 DWORD PTR [esi+2352], 0
$LN10@DestroyRes:

; 174  : 	}
; 175  : 
; 176  : 	if( !m_szSkillSoundName.IsEmpty() )

  00028	8d be a4 08 00
	00		 lea	 edi, DWORD PTR [esi+2212]
  0002e	8b cf		 mov	 ecx, edi
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00036	84 c0		 test	 al, al
  00038	75 15		 jne	 SHORT $LN9@DestroyRes

; 177  : 	{
; 178  : 		g_SoundMgr.StopSound( m_szSkillSoundName, m_SkillSoundID );

  0003a	ff b6 b4 08 00
	00		 push	 DWORD PTR [esi+2228]
  00040	57		 push	 edi
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioSoundManager@@SAAAV1@XZ
  00047	8b c8		 mov	 ecx, eax
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?StopSound@ioSoundManager@@QAEXABVioHashString@@K@Z
$LN9@DestroyRes:

; 179  : 		//g_SoundMgr.StopSound( m_szSkillSoundName, 0 );
; 180  : 	}
; 181  : 
; 182  : 	if( m_dwWeaponEffectStand != -1 )

  0004f	8b 86 f8 08 00
	00		 mov	 eax, DWORD PTR [esi+2296]
  00055	8b 5d 08	 mov	 ebx, DWORD PTR _pStage$[ebp]
  00058	83 cf ff	 or	 edi, -1
  0005b	3b c7		 cmp	 eax, edi
  0005d	74 19		 je	 SHORT $LN8@DestroyRes

; 183  : 	{
; 184  : 		ioMapEffect *pMapEffect = pStage->FindMapEffect( m_dwWeaponEffectStand );

  0005f	50		 push	 eax
  00060	8b cb		 mov	 ecx, ebx
  00062	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect

; 185  : 		if( pMapEffect )	pMapEffect->EndEffectForce();

  00067	85 c0		 test	 eax, eax
  00069	74 07		 je	 SHORT $LN7@DestroyRes
  0006b	8b c8		 mov	 ecx, eax
  0006d	e8 00 00 00 00	 call	 ?EndEffectForce@ioMapEffect@@QAEXXZ ; ioMapEffect::EndEffectForce
$LN7@DestroyRes:

; 186  : 		m_dwWeaponEffectStand = -1;

  00072	89 be f8 08 00
	00		 mov	 DWORD PTR [esi+2296], edi
$LN8@DestroyRes:

; 187  : 	}
; 188  : 
; 189  : 	if( m_dwWeaponEffectMove != -1 )

  00078	8b 86 fc 08 00
	00		 mov	 eax, DWORD PTR [esi+2300]
  0007e	3b c7		 cmp	 eax, edi
  00080	74 19		 je	 SHORT $LN6@DestroyRes

; 190  : 	{
; 191  : 		ioMapEffect *pMapEffect = pStage->FindMapEffect( m_dwWeaponEffectMove );

  00082	50		 push	 eax
  00083	8b cb		 mov	 ecx, ebx
  00085	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect

; 192  : 		if( pMapEffect )	pMapEffect->EndEffectForce();

  0008a	85 c0		 test	 eax, eax
  0008c	74 07		 je	 SHORT $LN5@DestroyRes
  0008e	8b c8		 mov	 ecx, eax
  00090	e8 00 00 00 00	 call	 ?EndEffectForce@ioMapEffect@@QAEXXZ ; ioMapEffect::EndEffectForce
$LN5@DestroyRes:

; 193  : 		m_dwWeaponEffectMove = -1;

  00095	89 be fc 08 00
	00		 mov	 DWORD PTR [esi+2300], edi
$LN6@DestroyRes:

; 194  : 	}
; 195  : 
; 196  : 	if( m_dwWeaponEffectJump != -1 )

  0009b	8b 86 00 09 00
	00		 mov	 eax, DWORD PTR [esi+2304]
  000a1	3b c7		 cmp	 eax, edi
  000a3	74 19		 je	 SHORT $LN4@DestroyRes

; 197  : 	{
; 198  : 		ioMapEffect *pMapEffect = pStage->FindMapEffect( m_dwWeaponEffectJump );

  000a5	50		 push	 eax
  000a6	8b cb		 mov	 ecx, ebx
  000a8	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect

; 199  : 		if( pMapEffect )	pMapEffect->EndEffectForce();

  000ad	85 c0		 test	 eax, eax
  000af	74 07		 je	 SHORT $LN3@DestroyRes
  000b1	8b c8		 mov	 ecx, eax
  000b3	e8 00 00 00 00	 call	 ?EndEffectForce@ioMapEffect@@QAEXXZ ; ioMapEffect::EndEffectForce
$LN3@DestroyRes:

; 200  : 		m_dwWeaponEffectJump = -1;

  000b8	89 be 00 09 00
	00		 mov	 DWORD PTR [esi+2304], edi
$LN4@DestroyRes:

; 201  : 	}
; 202  : 
; 203  : 	if( m_dwWeaponEffectEnd != -1 )

  000be	8b 86 04 09 00
	00		 mov	 eax, DWORD PTR [esi+2308]
  000c4	3b c7		 cmp	 eax, edi
  000c6	74 19		 je	 SHORT $LN2@DestroyRes

; 204  : 	{
; 205  : 		ioMapEffect *pMapEffect = pStage->FindMapEffect( m_dwWeaponEffectEnd );

  000c8	50		 push	 eax
  000c9	8b cb		 mov	 ecx, ebx
  000cb	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect

; 206  : 		if( pMapEffect )	pMapEffect->EndEffectGrace();

  000d0	85 c0		 test	 eax, eax
  000d2	74 07		 je	 SHORT $LN1@DestroyRes
  000d4	8b c8		 mov	 ecx, eax
  000d6	e8 00 00 00 00	 call	 ?EndEffectGrace@ioMapEffect@@QAEXXZ ; ioMapEffect::EndEffectGrace
$LN1@DestroyRes:

; 207  : 		m_dwWeaponEffectEnd = -1;

  000db	89 be 04 09 00
	00		 mov	 DWORD PTR [esi+2308], edi
$LN2@DestroyRes:
  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx

; 208  : 	}
; 209  : 
; 210  : }

  000e4	5d		 pop	 ebp
  000e5	c2 04 00	 ret	 4
?DestroyResource@ioLimitAttachWeapon2@@UAEXPAVioPlayStage@@@Z ENDP ; ioLimitAttachWeapon2::DestroyResource
_TEXT	ENDS
EXTRN	?GetAttackDir@ioWeapon@@UBE?AUD3DXVECTOR3@@PBVioPlayEntity@@@Z:PROC ; ioWeapon::GetAttackDir
; Function compile flags: /Ogsp
;	COMDAT ?GetAttackDir@ioLimitAttachWeapon2@@UBE?AUD3DXVECTOR3@@PBVioPlayEntity@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_pEntity$ = 12						; size = 4
?GetAttackDir@ioLimitAttachWeapon2@@UBE?AUD3DXVECTOR3@@PBVioPlayEntity@@@Z PROC ; ioLimitAttachWeapon2::GetAttackDir, COMDAT
; _this$ = ecx

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  : 	return ioWeapon::GetAttackDir(pEntity);

  00003	ff 75 0c	 push	 DWORD PTR _pEntity$[ebp]
  00006	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00009	e8 00 00 00 00	 call	 ?GetAttackDir@ioWeapon@@UBE?AUD3DXVECTOR3@@PBVioPlayEntity@@@Z ; ioWeapon::GetAttackDir
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 215  : }

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?GetAttackDir@ioLimitAttachWeapon2@@UBE?AUD3DXVECTOR3@@PBVioPlayEntity@@@Z ENDP ; ioLimitAttachWeapon2::GetAttackDir
_TEXT	ENDS
EXTRN	?GetLocalAttackBox@ioWeapon@@UBEABVioOrientBox@@XZ:PROC ; ioWeapon::GetLocalAttackBox
EXTRN	__imp_?GetCollisionBox@ioEffect@@QBEABVioOrientBox@@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?GetLocalAttackBox@ioLimitAttachWeapon2@@UBEABVioOrientBox@@XZ
_TEXT	SEGMENT
?GetLocalAttackBox@ioLimitAttachWeapon2@@UBEABVioOrientBox@@XZ PROC ; ioLimitAttachWeapon2::GetLocalAttackBox, COMDAT
; _this$ = ecx

; 219  : 	if( m_pFireBall )

  00000	8b 81 30 09 00
	00		 mov	 eax, DWORD PTR [ecx+2352]
  00006	85 c0		 test	 eax, eax
  00008	74 08		 je	 SHORT $LN1@GetLocalAt

; 220  : 		return m_pFireBall->GetCollisionBox();

  0000a	8b c8		 mov	 ecx, eax
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_?GetCollisionBox@ioEffect@@QBEABVioOrientBox@@XZ
$LN1@GetLocalAt:

; 221  : 
; 222  : 	return ioWeapon::GetLocalAttackBox();

  00012	e9 00 00 00 00	 jmp	 ?GetLocalAttackBox@ioWeapon@@UBEABVioOrientBox@@XZ ; ioWeapon::GetLocalAttackBox
?GetLocalAttackBox@ioLimitAttachWeapon2@@UBEABVioOrientBox@@XZ ENDP ; ioLimitAttachWeapon2::GetLocalAttackBox
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetType@ioLimitAttachWeapon2@@UBE?AW4WeaponType@ioWeapon@@XZ
_TEXT	SEGMENT
?GetType@ioLimitAttachWeapon2@@UBE?AW4WeaponType@ioWeapon@@XZ PROC ; ioLimitAttachWeapon2::GetType, COMDAT
; _this$ = ecx

; 227  : 	return WT_LIMIT_ATTACH2;

  00000	6a 2a		 push	 42			; 0000002aH
  00002	58		 pop	 eax

; 228  : }

  00003	c3		 ret	 0
?GetType@ioLimitAttachWeapon2@@UBE?AW4WeaponType@ioWeapon@@XZ ENDP ; ioLimitAttachWeapon2::GetType
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetActionStopType@ioLimitAttachWeapon2@@UBE?AW4ActionStopType@@XZ
_TEXT	SEGMENT
?GetActionStopType@ioLimitAttachWeapon2@@UBE?AW4ActionStopType@@XZ PROC ; ioLimitAttachWeapon2::GetActionStopType, COMDAT
; _this$ = ecx

; 232  : 	return m_ActionStopType;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_ActionStopType@ioLimitAttachWeapon2@@2W4ActionStopType@@A ; ioLimitAttachWeapon2::m_ActionStopType

; 233  : }

  00005	c3		 ret	 0
?GetActionStopType@ioLimitAttachWeapon2@@UBE?AW4ActionStopType@@XZ ENDP ; ioLimitAttachWeapon2::GetActionStopType
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetDieActionStopType@ioLimitAttachWeapon2@@UBE?AW4ActionStopType@@XZ
_TEXT	SEGMENT
?GetDieActionStopType@ioLimitAttachWeapon2@@UBE?AW4ActionStopType@@XZ PROC ; ioLimitAttachWeapon2::GetDieActionStopType, COMDAT
; _this$ = ecx

; 237  : 	return m_DieActionStopType;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_DieActionStopType@ioLimitAttachWeapon2@@2W4ActionStopType@@A ; ioLimitAttachWeapon2::m_DieActionStopType

; 238  : }

  00005	c3		 ret	 0
?GetDieActionStopType@ioLimitAttachWeapon2@@UBE?AW4ActionStopType@@XZ ENDP ; ioLimitAttachWeapon2::GetDieActionStopType
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetAttribute@ioLimitAttachWeapon2@@MBEPBUWeaponAttribute@@XZ
_TEXT	SEGMENT
?GetAttribute@ioLimitAttachWeapon2@@MBEPBUWeaponAttribute@@XZ PROC ; ioLimitAttachWeapon2::GetAttribute, COMDAT
; _this$ = ecx

; 271  : 	if( m_bResistance )

  00000	80 b9 3c 06 00
	00 00		 cmp	 BYTE PTR [ecx+1596], 0
  00007	74 07		 je	 SHORT $LN1@GetAttribu

; 272  : 	{
; 273  : 		if( m_pResistanceAttr )

  00009	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000c	85 c0		 test	 eax, eax

; 274  : 			return m_pResistanceAttr;

  0000e	75 03		 jne	 SHORT $LN3@GetAttribu
$LN1@GetAttribu:

; 275  : 	}
; 276  : 
; 277  : 	return m_pConstAttr;

  00010	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
$LN3@GetAttribu:

; 278  : }

  00013	c3		 ret	 0
?GetAttribute@ioLimitAttachWeapon2@@MBEPBUWeaponAttribute@@XZ ENDP ; ioLimitAttachWeapon2::GetAttribute
_TEXT	ENDS
PUBLIC	?IsJumpStateOnBuff@ioLimitAttachWeapon2@@IAE_NXZ ; ioLimitAttachWeapon2::IsJumpStateOnBuff
EXTRN	?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ:PROC	; ioWeapon::GetOwner
; Function compile flags: /Ogsp
;	COMDAT ?IsJumpStateOnBuff@ioLimitAttachWeapon2@@IAE_NXZ
_TEXT	SEGMENT
?IsJumpStateOnBuff@ioLimitAttachWeapon2@@IAE_NXZ PROC	; ioLimitAttachWeapon2::IsJumpStateOnBuff, COMDAT
; _this$ = ecx

; 472  : 	ioBaseChar* pOwner = GetOwner();

  00000	e8 00 00 00 00	 call	 ?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ ; ioWeapon::GetOwner

; 473  : 	if( pOwner && pOwner->GetState() == CS_JUMP )	return true;

  00005	85 c0		 test	 eax, eax
  00007	74 0c		 je	 SHORT $LN1@IsJumpStat
  00009	80 b8 10 03 00
	00 04		 cmp	 BYTE PTR [eax+784], 4
  00010	75 03		 jne	 SHORT $LN1@IsJumpStat
  00012	b0 01		 mov	 al, 1

; 475  : }

  00014	c3		 ret	 0
$LN1@IsJumpStat:

; 474  : 	return false;

  00015	32 c0		 xor	 al, al

; 475  : }

  00017	c3		 ret	 0
?IsJumpStateOnBuff@ioLimitAttachWeapon2@@IAE_NXZ ENDP	; ioLimitAttachWeapon2::IsJumpStateOnBuff
_TEXT	ENDS
PUBLIC	?IsMoveStateOnBuff@ioLimitAttachWeapon2@@IAE_NXZ ; ioLimitAttachWeapon2::IsMoveStateOnBuff
; Function compile flags: /Ogsp
;	COMDAT ?IsMoveStateOnBuff@ioLimitAttachWeapon2@@IAE_NXZ
_TEXT	SEGMENT
?IsMoveStateOnBuff@ioLimitAttachWeapon2@@IAE_NXZ PROC	; ioLimitAttachWeapon2::IsMoveStateOnBuff, COMDAT
; _this$ = ecx

; 479  : 	ioBaseChar* pOwner = GetOwner();

  00000	e8 00 00 00 00	 call	 ?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ ; ioWeapon::GetOwner

; 480  : 	if( pOwner && pOwner->GetState() == CS_RUN )	return true;

  00005	85 c0		 test	 eax, eax
  00007	74 0c		 je	 SHORT $LN1@IsMoveStat
  00009	80 b8 10 03 00
	00 01		 cmp	 BYTE PTR [eax+784], 1
  00010	75 03		 jne	 SHORT $LN1@IsMoveStat
  00012	b0 01		 mov	 al, 1

; 482  : }

  00014	c3		 ret	 0
$LN1@IsMoveStat:

; 481  : 	return false;

  00015	32 c0		 xor	 al, al

; 482  : }

  00017	c3		 ret	 0
?IsMoveStateOnBuff@ioLimitAttachWeapon2@@IAE_NXZ ENDP	; ioLimitAttachWeapon2::IsMoveStateOnBuff
_TEXT	ENDS
PUBLIC	?IsDelayStateOnBuff@ioLimitAttachWeapon2@@IAE_NXZ ; ioLimitAttachWeapon2::IsDelayStateOnBuff
; Function compile flags: /Ogsp
;	COMDAT ?IsDelayStateOnBuff@ioLimitAttachWeapon2@@IAE_NXZ
_TEXT	SEGMENT
?IsDelayStateOnBuff@ioLimitAttachWeapon2@@IAE_NXZ PROC	; ioLimitAttachWeapon2::IsDelayStateOnBuff, COMDAT
; _this$ = ecx

; 485  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 486  : 	if( !IsJumpStateOnBuff() && !IsMoveStateOnBuff() )	return true;

  00003	e8 00 00 00 00	 call	 ?IsJumpStateOnBuff@ioLimitAttachWeapon2@@IAE_NXZ ; ioLimitAttachWeapon2::IsJumpStateOnBuff
  00008	84 c0		 test	 al, al
  0000a	75 0f		 jne	 SHORT $LN1@IsDelaySta
  0000c	8b ce		 mov	 ecx, esi
  0000e	e8 00 00 00 00	 call	 ?IsMoveStateOnBuff@ioLimitAttachWeapon2@@IAE_NXZ ; ioLimitAttachWeapon2::IsMoveStateOnBuff
  00013	84 c0		 test	 al, al
  00015	75 04		 jne	 SHORT $LN1@IsDelaySta
  00017	fe c0		 inc	 al
  00019	5e		 pop	 esi

; 488  : }

  0001a	c3		 ret	 0
$LN1@IsDelaySta:

; 487  : 	return false;

  0001b	32 c0		 xor	 al, al
  0001d	5e		 pop	 esi

; 488  : }

  0001e	c3		 ret	 0
?IsDelayStateOnBuff@ioLimitAttachWeapon2@@IAE_NXZ ENDP	; ioLimitAttachWeapon2::IsDelayStateOnBuff
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??0D3DXQUATERNION@@QAE@XZ			; D3DXQUATERNION::D3DXQUATERNION
; Function compile flags: /Ogsp
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT
??0D3DXQUATERNION@@QAE@XZ PROC				; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 429  :     D3DXQUATERNION() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXQUATERNION@@QAE@XZ ENDP				; D3DXQUATERNION::D3DXQUATERNION
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator+
; Function compile flags: /Ogsp
;	COMDAT ??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+, COMDAT
; _this$ = ecx

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0000a	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	0f 5a c9	 cvtps2pd xmm1, xmm1
  00017	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0001b	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00020	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00024	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00028	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  0002d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00030	0f 5a c9	 cvtps2pd xmm1, xmm1
  00033	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00037	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0003c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00040	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00045	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  0004a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00050	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00054	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00058	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 382  : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+
_TEXT	ENDS
PUBLIC	??9D3DXVECTOR3@@QBEHABU0@@Z			; D3DXVECTOR3::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9D3DXVECTOR3@@QBEHABU0@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??9D3DXVECTOR3@@QBEHABU0@@Z PROC			; D3DXVECTOR3::operator!=, COMDAT
; _this$ = ecx

; 419  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 420  :     return x != v.x || y != v.y || z != v.z;

  00003	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000a	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  0000e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00011	0f 5a c9	 cvtps2pd xmm1, xmm1
  00014	66 0f 2e c1	 ucomisd xmm0, xmm1
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 38		 jp	 SHORT $LN3@operator
  0001e	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00023	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  00028	0f 5a c0	 cvtps2pd xmm0, xmm0
  0002b	0f 5a c9	 cvtps2pd xmm1, xmm1
  0002e	66 0f 2e c1	 ucomisd xmm0, xmm1
  00032	9f		 lahf
  00033	f6 c4 44	 test	 ah, 68			; 00000044H
  00036	7a 1e		 jp	 SHORT $LN3@operator
  00038	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0003d	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  00042	0f 5a c0	 cvtps2pd xmm0, xmm0
  00045	0f 5a c9	 cvtps2pd xmm1, xmm1
  00048	66 0f 2e c1	 ucomisd xmm0, xmm1
  0004c	9f		 lahf
  0004d	f6 c4 44	 test	 ah, 68			; 00000044H
  00050	7a 04		 jp	 SHORT $LN3@operator
  00052	33 c0		 xor	 eax, eax
  00054	eb 03		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00056	33 c0		 xor	 eax, eax
  00058	40		 inc	 eax
$LN4@operator:

; 421  : }

  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
??9D3DXVECTOR3@@QBEHABU0@@Z ENDP			; D3DXVECTOR3::operator!=
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ	; ioGameEntity::GetGroup
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
;	COMDAT ?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ
_TEXT	SEGMENT
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ PROC	; ioGameEntity::GetGroup, COMDAT
; _this$ = ecx

; 166  : 	inline ioEntityGroup* GetGroup() const { return m_pGroup; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ ENDP	; ioGameEntity::GetGroup
_TEXT	ENDS
PUBLIC	??_R0?AVioGameEntity@@@8			; ioGameEntity `RTTI Type Descriptor'
PUBLIC	??_R0?AVioPlayEntity@@@8			; ioPlayEntity `RTTI Type Descriptor'
PUBLIC	?ToPlayEntity@@YAPAVioPlayEntity@@PAVioGameEntity@@@Z ; ToPlayEntity
EXTRN	___RTDynamicCast:PROC
;	COMDAT ??_R0?AVioGameEntity@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioplayentity.h
_DATA	SEGMENT
??_R0?AVioGameEntity@@@8 DD FLAT:??_7type_info@@6B@	; ioGameEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioGameEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVioPlayEntity@@@8
_DATA	SEGMENT
??_R0?AVioPlayEntity@@@8 DD FLAT:??_7type_info@@6B@	; ioPlayEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioPlayEntity@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ToPlayEntity@@YAPAVioPlayEntity@@PAVioGameEntity@@@Z
_TEXT	SEGMENT
_pObj$ = 8						; size = 4
?ToPlayEntity@@YAPAVioPlayEntity@@PAVioGameEntity@@@Z PROC ; ToPlayEntity, COMDAT

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 122  : 	if( !pObj || pObj->GetTypeID() != ioGameEntity::GET_PLAY_ENTITY )

  00004	8b 75 08	 mov	 esi, DWORD PTR _pObj$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 25		 je	 SHORT $LN1@ToPlayEnti
  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 50 10	 call	 DWORD PTR [eax+16]
  00012	83 f8 01	 cmp	 eax, 1
  00015	75 19		 jne	 SHORT $LN1@ToPlayEnti

; 124  : 
; 125  : 	return dynamic_cast< ioPlayEntity* >( pObj );

  00017	6a 00		 push	 0
  00019	68 00 00 00 00	 push	 OFFSET ??_R0?AVioPlayEntity@@@8
  0001e	68 00 00 00 00	 push	 OFFSET ??_R0?AVioGameEntity@@@8
  00023	6a 00		 push	 0
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ___RTDynamicCast
  0002b	83 c4 14	 add	 esp, 20			; 00000014H
  0002e	eb 02		 jmp	 SHORT $LN3@ToPlayEnti
$LN1@ToPlayEnti:

; 123  : 		return NULL;

  00030	33 c0		 xor	 eax, eax
$LN3@ToPlayEnti:
  00032	5e		 pop	 esi

; 126  : }

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?ToPlayEntity@@YAPAVioPlayEntity@@PAVioGameEntity@@@Z ENDP ; ToPlayEntity
_TEXT	ENDS
PUBLIC	?GetEffect@ioMapEffect@@QBEPAVioEffect@@XZ	; ioMapEffect::GetEffect
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomapeffect.h
;	COMDAT ?GetEffect@ioMapEffect@@QBEPAVioEffect@@XZ
_TEXT	SEGMENT
?GetEffect@ioMapEffect@@QBEPAVioEffect@@XZ PROC		; ioMapEffect::GetEffect, COMDAT
; _this$ = ecx

; 40   : 	inline ioEffect* GetEffect() const { return m_pEffect; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetEffect@ioMapEffect@@QBEPAVioEffect@@XZ ENDP		; ioMapEffect::GetEffect
_TEXT	ENDS
PUBLIC	?IsLive@ioWeapon@@QBE_NXZ			; ioWeapon::IsLive
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioweapon.h
;	COMDAT ?IsLive@ioWeapon@@QBE_NXZ
_TEXT	SEGMENT
?IsLive@ioWeapon@@QBE_NXZ PROC				; ioWeapon::IsLive, COMDAT
; _this$ = ecx

; 533  : 	inline bool IsLive() const { return m_bLive; }

  00000	8a 81 82 05 00
	00		 mov	 al, BYTE PTR [ecx+1410]
  00006	c3		 ret	 0
?IsLive@ioWeapon@@QBE_NXZ ENDP				; ioWeapon::IsLive
_TEXT	ENDS
PUBLIC	?GetParentSceneNode@ioWeapon@@QBEPAVioSceneNode@@XZ ; ioWeapon::GetParentSceneNode
; Function compile flags: /Ogsp
;	COMDAT ?GetParentSceneNode@ioWeapon@@QBEPAVioSceneNode@@XZ
_TEXT	SEGMENT
?GetParentSceneNode@ioWeapon@@QBEPAVioSceneNode@@XZ PROC ; ioWeapon::GetParentSceneNode, COMDAT
; _this$ = ecx

; 797  : 	ioSceneNode* GetParentSceneNode() const { return m_pSceneNode; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetParentSceneNode@ioWeapon@@QBEPAVioSceneNode@@XZ ENDP ; ioWeapon::GetParentSceneNode
_TEXT	ENDS
PUBLIC	??_R0?AVioBaseChar@@@8				; ioBaseChar `RTTI Type Descriptor'
PUBLIC	?ToBaseChar@@YAPAVioBaseChar@@PAVioGameEntity@@@Z ; ToBaseChar
;	COMDAT ??_R0?AVioBaseChar@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
_DATA	SEGMENT
??_R0?AVioBaseChar@@@8 DD FLAT:??_7type_info@@6B@	; ioBaseChar `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBaseChar@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ToBaseChar@@YAPAVioBaseChar@@PAVioGameEntity@@@Z
_TEXT	SEGMENT
_pObj$ = 8						; size = 4
?ToBaseChar@@YAPAVioBaseChar@@PAVioGameEntity@@@Z PROC	; ToBaseChar, COMDAT

; 4326 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4327 : 	ioPlayEntity *pPlay = ToPlayEntity( pObj );

  00004	ff 75 08	 push	 DWORD PTR _pObj$[ebp]
  00007	e8 00 00 00 00	 call	 ?ToPlayEntity@@YAPAVioPlayEntity@@PAVioGameEntity@@@Z ; ToPlayEntity
  0000c	8b f0		 mov	 esi, eax
  0000e	59		 pop	 ecx

; 4328 : 	if( !pPlay || pPlay->GetSubType() != ioPlayEntity::PST_CHAR )

  0000f	85 f6		 test	 esi, esi
  00011	74 25		 je	 SHORT $LN1@ToBaseChar
  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	8b ce		 mov	 ecx, esi
  00017	ff 90 a4 00 00
	00		 call	 DWORD PTR [eax+164]
  0001d	85 c0		 test	 eax, eax
  0001f	75 17		 jne	 SHORT $LN1@ToBaseChar

; 4330 : 
; 4331 : 	return dynamic_cast< ioBaseChar* >( pPlay );

  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET ??_R0?AVioBaseChar@@@8
  00027	68 00 00 00 00	 push	 OFFSET ??_R0?AVioPlayEntity@@@8
  0002c	50		 push	 eax
  0002d	56		 push	 esi
  0002e	e8 00 00 00 00	 call	 ___RTDynamicCast
  00033	83 c4 14	 add	 esp, 20			; 00000014H
  00036	eb 02		 jmp	 SHORT $LN3@ToBaseChar
$LN1@ToBaseChar:

; 4329 : 		return NULL;

  00038	33 c0		 xor	 eax, eax
$LN3@ToBaseChar:
  0003a	5e		 pop	 esi

; 4332 : }

  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?ToBaseChar@@YAPAVioBaseChar@@PAVioGameEntity@@@Z ENDP	; ToBaseChar
_TEXT	ENDS
PUBLIC	??0ioLimitAttachWeapon2@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z ; ioLimitAttachWeapon2::ioLimitAttachWeapon2
EXTRN	?SetPeculiarity@ioWeapon@@QAEXK@Z:PROC		; ioWeapon::SetPeculiarity
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	??0ioWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z:PROC ; ioWeapon::ioWeapon
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
xdata$x	SEGMENT
__ehfuncinfo$??0ioLimitAttachWeapon2@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0ioLimitAttachWeapon2@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0ioLimitAttachWeapon2@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioLimitAttachWeapon2@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioLimitAttachWeapon2@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioLimitAttachWeapon2@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ioLimitAttachWeapon2@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0ioLimitAttachWeapon2@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0ioLimitAttachWeapon2@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0ioLimitAttachWeapon2@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z$6
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iolimitattachweapon2.cpp
xdata$x	ENDS
;	COMDAT ??0ioLimitAttachWeapon2@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
_pAttr$ = 12						; size = 4
??0ioLimitAttachWeapon2@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z PROC ; ioLimitAttachWeapon2::ioLimitAttachWeapon2, COMDAT
; _this$ = ecx

; 15   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioLimitAttachWeapon2@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b d9		 mov	 ebx, ecx
  0000e	89 5d f0	 mov	 DWORD PTR _this$[ebp], ebx
  00011	ff 75 0c	 push	 DWORD PTR _pAttr$[ebp]
  00014	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00017	e8 00 00 00 00	 call	 ??0ioWeapon@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z ; ioWeapon::ioWeapon
  0001c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00022	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00026	8d 8b 94 08 00
	00		 lea	 ecx, DWORD PTR [ebx+2196]
  0002c	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7ioLimitAttachWeapon2@@6B@
  00032	ff d6		 call	 esi
  00034	8d 8b a4 08 00
	00		 lea	 ecx, DWORD PTR [ebx+2212]
  0003a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0003e	ff d6		 call	 esi
  00040	8d 8b b8 08 00
	00		 lea	 ecx, DWORD PTR [ebx+2232]
  00046	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0004a	ff d6		 call	 esi
  0004c	8d 8b c8 08 00
	00		 lea	 ecx, DWORD PTR [ebx+2248]
  00052	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00056	ff d6		 call	 esi
  00058	8d 8b d8 08 00
	00		 lea	 ecx, DWORD PTR [ebx+2264]
  0005e	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00062	ff d6		 call	 esi
  00064	8d 8b e8 08 00
	00		 lea	 ecx, DWORD PTR [ebx+2280]
  0006a	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0006e	ff d6		 call	 esi

; 16   : 	m_dwWeaponEffectStand	= -1;
; 17   : 	m_dwWeaponEffectMove	= -1;
; 18   : 	m_dwWeaponEffectJump	= -1;
; 19   : 	m_dwWeaponEffectEnd		= -1;
; 20   : 
; 21   : 	m_SkillSoundID = 0;

  00070	83 a3 b4 08 00
	00 00		 and	 DWORD PTR [ebx+2228], 0
  00077	83 c8 ff	 or	 eax, -1
  0007a	89 83 f8 08 00
	00		 mov	 DWORD PTR [ebx+2296], eax
  00080	89 83 fc 08 00
	00		 mov	 DWORD PTR [ebx+2300], eax
  00086	89 83 00 09 00
	00		 mov	 DWORD PTR [ebx+2304], eax
  0008c	89 83 04 09 00
	00		 mov	 DWORD PTR [ebx+2308], eax

; 22   : 
; 23   : 	m_vPreScale = ioMath::VEC3_ZERO;

  00092	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?VEC3_ZERO@ioMath@@2UD3DXVECTOR3@@A
  00098	8d bb 24 09 00
	00		 lea	 edi, DWORD PTR [ebx+2340]
  0009e	a5		 movsd
  0009f	a5		 movsd

; 24   : 
; 25   : 	Init();

  000a0	8b cb		 mov	 ecx, ebx
  000a2	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000a6	a5		 movsd
  000a7	e8 00 00 00 00	 call	 ?Init@ioLimitAttachWeapon2@@IAEXXZ ; ioLimitAttachWeapon2::Init

; 26   : 	SetPeculiarity( WP_DIVIDE_ACTION );

  000ac	68 00 01 00 00	 push	 256			; 00000100H
  000b1	e8 00 00 00 00	 call	 ?SetPeculiarity@ioWeapon@@QAEXK@Z ; ioWeapon::SetPeculiarity

; 27   : 	m_pFireBall = NULL;

  000b6	83 a3 30 09 00
	00 00		 and	 DWORD PTR [ebx+2352], 0

; 28   : }

  000bd	8b c3		 mov	 eax, ebx
  000bf	e8 00 00 00 00	 call	 __EH_epilog3
  000c4	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioLimitAttachWeapon2@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioWeapon@@UAE@XZ	; ioWeapon::~ioWeapon
__unwindfunclet$??0ioLimitAttachWeapon2@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 94 08 00
	00		 add	 ecx, 2196		; 00000894H
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioLimitAttachWeapon2@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 a4 08 00
	00		 add	 ecx, 2212		; 000008a4H
  00020	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioLimitAttachWeapon2@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z$3:
  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	81 c1 b8 08 00
	00		 add	 ecx, 2232		; 000008b8H
  0002f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioLimitAttachWeapon2@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z$4:
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	81 c1 c8 08 00
	00		 add	 ecx, 2248		; 000008c8H
  0003e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioLimitAttachWeapon2@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z$5:
  00044	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	81 c1 d8 08 00
	00		 add	 ecx, 2264		; 000008d8H
  0004d	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioLimitAttachWeapon2@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z$6:
  00053	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	81 c1 e8 08 00
	00		 add	 ecx, 2280		; 000008e8H
  0005c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0ioLimitAttachWeapon2@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z:
  00062	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00066	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00069	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0006c	33 c8		 xor	 ecx, eax
  0006e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00073	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioLimitAttachWeapon2@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z
  00078	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioLimitAttachWeapon2@@QAE@PAVioBaseChar@@PBUWeaponAttribute@@@Z ENDP ; ioLimitAttachWeapon2::ioLimitAttachWeapon2
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GioLimitAttachWeapon2@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioLimitAttachWeapon2@@UAEPAXI@Z PROC		; ioLimitAttachWeapon2::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioLimitAttachWeapon2@@UAE@XZ ; ioLimitAttachWeapon2::~ioLimitAttachWeapon2
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioLimitAttachWeapon2@@UAEPAXI@Z ENDP		; ioLimitAttachWeapon2::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@4f800000
EXTRN	?SetOrientation@ioWeapon@@QAEXABUD3DXQUATERNION@@@Z:PROC ; ioWeapon::SetOrientation
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z:PROC
EXTRN	?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z:PROC ; ioWeapon::SetPosition
EXTRN	__imp_?HasLinkedSystem@ioEffect@@QBE_NXZ:PROC
EXTRN	__imp_?GetSkeletonName@ioEffect@@QBE?AVioHashString@@XZ:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetStartPosition@ioLimitAttachWeapon2@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetStartPosition@ioLimitAttachWeapon2@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z$0
__ehfuncinfo$?SetStartPosition@ioLimitAttachWeapon2@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetStartPosition@ioLimitAttachWeapon2@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iolimitattachweapon2.cpp
xdata$x	ENDS
;	COMDAT ?SetStartPosition@ioLimitAttachWeapon2@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z
_TEXT	SEGMENT
$T532624 = -64						; size = 16
tv219 = -48						; size = 4
$T532627 = -48						; size = 4
$T532623 = -41						; size = 1
$T530661 = -40						; size = 12
$T530660 = -28						; size = 12
__$EHRec$ = -12						; size = 12
_vPos$ = 8						; size = 4
_pStage$ = 12						; size = 4
?SetStartPosition@ioLimitAttachWeapon2@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z PROC ; ioLimitAttachWeapon2::SetStartPosition, COMDAT
; _this$ = ecx

; 107  : {

  00000	6a 34		 push	 52			; 00000034H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?SetStartPosition@ioLimitAttachWeapon2@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	83 65 d0 00	 and	 DWORD PTR $T532627[ebp], 0
  00010	8b 75 08	 mov	 esi, DWORD PTR _vPos$[ebp]
  00013	8b d9		 mov	 ebx, ecx

; 108  : 	if( m_pFireBall && m_pFireBall->GetSkeletonName().IsEmpty() && m_pFireBall->HasLinkedSystem() )

  00015	8b 8b 30 09 00
	00		 mov	 ecx, DWORD PTR [ebx+2352]
  0001b	85 c9		 test	 ecx, ecx
  0001d	74 35		 je	 SHORT $LN4@SetStartPo
  0001f	8d 45 c0	 lea	 eax, DWORD PTR $T532624[ebp]
  00022	50		 push	 eax
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSkeletonName@ioEffect@@QBE?AVioHashString@@XZ
  00029	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002d	8b c8		 mov	 ecx, eax
  0002f	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR $T532627[ebp], 1
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0003c	84 c0		 test	 al, al
  0003e	74 14		 je	 SHORT $LN4@SetStartPo
  00040	8b 8b 30 09 00
	00		 mov	 ecx, DWORD PTR [ebx+2352]
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HasLinkedSystem@ioEffect@@QBE_NXZ
  0004c	c6 45 d7 01	 mov	 BYTE PTR $T532623[ebp], 1
  00050	84 c0		 test	 al, al
  00052	75 04		 jne	 SHORT $LN5@SetStartPo
$LN4@SetStartPo:
  00054	c6 45 d7 00	 mov	 BYTE PTR $T532623[ebp], 0
$LN5@SetStartPo:
  00058	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	f6 45 d0 01	 test	 BYTE PTR $T532627[ebp], 1
  00060	74 09		 je	 SHORT $LN8@SetStartPo
  00062	8d 4d c0	 lea	 ecx, DWORD PTR $T532624[ebp]
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
$LN8@SetStartPo:
  0006b	80 7d d7 00	 cmp	 BYTE PTR $T532623[ebp], 0
  0006f	75 6c		 jne	 SHORT $LN2@SetStartPo

; 109  : 		return;
; 110  : 
; 111  : 	SetPosition( vPos );

  00071	56		 push	 esi
  00072	8b cb		 mov	 ecx, ebx
  00074	e8 00 00 00 00	 call	 ?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z ; ioWeapon::SetPosition

; 112  : 
; 113  : 	m_vMoveDir = GetOwner()->GetTargetRot() * D3DXVECTOR3( 0.0f, 0.0f, -FLOAT1 );

  00079	b8 01 00 00 00	 mov	 eax, 1
  0007e	0f 57 c0	 xorps	 xmm0, xmm0
  00081	89 45 d0	 mov	 DWORD PTR tv219[ebp], eax
  00084	db 45 d0	 fild	 DWORD PTR tv219[ebp]
  00087	f3 0f 11 45 e4	 movss	 DWORD PTR $T530660[ebp], xmm0
  0008c	f3 0f 11 45 e8	 movss	 DWORD PTR $T530660[ebp+4], xmm0
  00091	85 c0		 test	 eax, eax
  00093	79 06		 jns	 SHORT $LN19@SetStartPo
  00095	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN19@SetStartPo:
  0009b	d9 e0		 fchs
  0009d	8b cb		 mov	 ecx, ebx
  0009f	d9 5d ec	 fstp	 DWORD PTR $T530660[ebp+8]
  000a2	e8 00 00 00 00	 call	 ?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ ; ioWeapon::GetOwner
  000a7	8d 4d e4	 lea	 ecx, DWORD PTR $T530660[ebp]
  000aa	51		 push	 ecx
  000ab	05 a4 06 00 00	 add	 eax, 1700		; 000006a4H
  000b0	50		 push	 eax
  000b1	8d 45 d8	 lea	 eax, DWORD PTR $T530661[ebp]
  000b4	50		 push	 eax
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  000bb	8b f0		 mov	 esi, eax
  000bd	8d bb 34 09 00
	00		 lea	 edi, DWORD PTR [ebx+2356]
  000c3	a5		 movsd
  000c4	a5		 movsd
  000c5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 114  : 	SetOrientation( GetOwner()->GetTargetRot() );

  000c8	8b cb		 mov	 ecx, ebx
  000ca	a5		 movsd
  000cb	e8 00 00 00 00	 call	 ?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ ; ioWeapon::GetOwner
  000d0	05 a4 06 00 00	 add	 eax, 1700		; 000006a4H
  000d5	50		 push	 eax
  000d6	8b cb		 mov	 ecx, ebx
  000d8	e8 00 00 00 00	 call	 ?SetOrientation@ioWeapon@@QAEXABUD3DXQUATERNION@@@Z ; ioWeapon::SetOrientation
$LN2@SetStartPo:

; 115  : }

  000dd	e8 00 00 00 00	 call	 __EH_epilog3_GS
  000e2	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetStartPosition@ioLimitAttachWeapon2@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z$0:
  00000	8b 45 d0	 mov	 eax, DWORD PTR $T532627[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0d 00 00
	00		 je	 $LN7@SetStartPo
  0000c	83 65 d0 fe	 and	 DWORD PTR $T532627[ebp], -2 ; fffffffeH
  00010	8d 4d c0	 lea	 ecx, DWORD PTR $T532624[ebp]
  00013	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
$LN7@SetStartPo:
  00019	c3		 ret	 0
__ehhandler$?SetStartPosition@ioLimitAttachWeapon2@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z:
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetStartPosition@ioLimitAttachWeapon2@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetStartPosition@ioLimitAttachWeapon2@@UAEXABUD3DXVECTOR3@@PAVioPlayStage@@@Z ENDP ; ioLimitAttachWeapon2::SetStartPosition
EXTRN	__imp_?SetNull@ioOrientBox@@QAEXXZ:PROC
EXTRN	__imp_?Transform@ioOrientBox@@QAEXABUD3DXVECTOR3@@0ABUD3DXQUATERNION@@@Z:PROC
EXTRN	?GetScale@ioWeapon@@QBEABUD3DXVECTOR3@@XZ:PROC	; ioWeapon::GetScale
EXTRN	__imp_?IsNull@ioOrientBox@@QBE_NXZ:PROC
EXTRN	__imp_?SetExtents@ioOrientBox@@QAEXHM@Z:PROC
EXTRN	__imp_?GetExtents@ioOrientBox@@QBEMH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?UpdateWorldAttackBox@ioLimitAttachWeapon2@@MAEXM_N@Z
_TEXT	SEGMENT
tv359 = -8						; size = 4
tv365 = -4						; size = 4
tv341 = -4						; size = 4
_fTimePerSec$ = 8					; size = 4
tv351 = 12						; size = 4
_fMapCollisionRate$ = 12				; size = 4
_bSetNull$ = 12						; size = 1
?UpdateWorldAttackBox@ioLimitAttachWeapon2@@MAEXM_N@Z PROC ; ioLimitAttachWeapon2::UpdateWorldAttackBox, COMDAT
; _this$ = ecx

; 241  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	8b d9		 mov	 ebx, ecx

; 242  : 	if( !IsLive() || bSetNull )

  00008	80 bb 82 05 00
	00 00		 cmp	 BYTE PTR [ebx+1410], 0
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	0f 84 0c 01 00
	00		 je	 $LN2@UpdateWorl
  00017	80 7d 0c 00	 cmp	 BYTE PTR _bSetNull$[ebp], 0
  0001b	0f 85 02 01 00
	00		 jne	 $LN2@UpdateWorl

; 246  : 		return;
; 247  : 	}
; 248  : 
; 249  : 	m_WorldAttackBox = GetLocalAttackBox();

  00021	8b 03		 mov	 eax, DWORD PTR [ebx]
  00023	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  00029	6a 11		 push	 17			; 00000011H
  0002b	8b f0		 mov	 esi, eax

; 250  : 
; 251  : 	float fMapCollisionRate = GetAttribute()->m_fMapCollisionBoxRate;

  0002d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0002f	59		 pop	 ecx
  00030	8d bb e8 04 00
	00		 lea	 edi, DWORD PTR [ebx+1256]
  00036	f3 a5		 rep movsd
  00038	8b cb		 mov	 ecx, ebx
  0003a	ff 90 3c 01 00
	00		 call	 DWORD PTR [eax+316]

; 252  : 	m_WorldAttackBoxForMap = m_WorldAttackBox;

  00040	6a 11		 push	 17			; 00000011H
  00042	d9 80 a8 01 00
	00		 fld	 DWORD PTR [eax+424]
  00048	59		 pop	 ecx
  00049	8d bb 2c 05 00
	00		 lea	 edi, DWORD PTR [ebx+1324]
  0004f	d9 5d 0c	 fstp	 DWORD PTR _fMapCollisionRate$[ebp]
  00052	8d b3 e8 04 00
	00		 lea	 esi, DWORD PTR [ebx+1256]
  00058	f3 a5		 rep movsd

; 253  : 	m_WorldAttackBoxForMap.SetExtents( 0, m_WorldAttackBox.GetExtents(0)*fMapCollisionRate );

  0005a	6a 00		 push	 0
  0005c	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetExtents@ioOrientBox@@QBEMH@Z
  00068	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?SetExtents@ioOrientBox@@QAEXHM@Z
  0006e	d8 4d 0c	 fmul	 DWORD PTR _fMapCollisionRate$[ebp]
  00071	51		 push	 ecx
  00072	8d 8b 2c 05 00
	00		 lea	 ecx, DWORD PTR [ebx+1324]
  00078	d9 5d fc	 fstp	 DWORD PTR tv365[ebp]
  0007b	d9 45 fc	 fld	 DWORD PTR tv365[ebp]
  0007e	89 4d fc	 mov	 DWORD PTR tv341[ebp], ecx
  00081	d9 1c 24	 fstp	 DWORD PTR [esp]
  00084	6a 00		 push	 0
  00086	ff d6		 call	 esi

; 254  : 	m_WorldAttackBoxForMap.SetExtents( 1, m_WorldAttackBox.GetExtents(1)*fMapCollisionRate );

  00088	6a 01		 push	 1
  0008a	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetExtents@ioOrientBox@@QBEMH@Z
  00096	d8 4d 0c	 fmul	 DWORD PTR _fMapCollisionRate$[ebp]
  00099	51		 push	 ecx
  0009a	8b 4d fc	 mov	 ecx, DWORD PTR tv341[ebp]
  0009d	d9 5d f8	 fstp	 DWORD PTR tv359[ebp]
  000a0	d9 45 f8	 fld	 DWORD PTR tv359[ebp]
  000a3	d9 1c 24	 fstp	 DWORD PTR [esp]
  000a6	6a 01		 push	 1
  000a8	ff d6		 call	 esi

; 255  : 	m_WorldAttackBoxForMap.SetExtents( 2, m_WorldAttackBox.GetExtents(2)*fMapCollisionRate );

  000aa	6a 02		 push	 2
  000ac	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetExtents@ioOrientBox@@QBEMH@Z
  000b8	d8 4d 0c	 fmul	 DWORD PTR _fMapCollisionRate$[ebp]
  000bb	51		 push	 ecx
  000bc	8b 4d fc	 mov	 ecx, DWORD PTR tv341[ebp]
  000bf	d9 5d 0c	 fstp	 DWORD PTR tv351[ebp]
  000c2	d9 45 0c	 fld	 DWORD PTR tv351[ebp]
  000c5	d9 1c 24	 fstp	 DWORD PTR [esp]
  000c8	6a 02		 push	 2
  000ca	ff d6		 call	 esi

; 256  : 
; 257  : 	if( !m_WorldAttackBox.IsNull() )

  000cc	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsNull@ioOrientBox@@QBE_NXZ
  000d8	84 c0		 test	 al, al
  000da	75 5d		 jne	 SHORT $LN1@UpdateWorl

; 258  : 	{
; 259  : 		m_WorldAttackBox.Transform( GetPosition(),
; 260  : 									GetScale(),
; 261  : 									GetParentSceneNode()->GetDerivedOrientation() );

  000dc	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000df	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e1	ff 50 78	 call	 DWORD PTR [eax+120]
  000e4	50		 push	 eax
  000e5	8b cb		 mov	 ecx, ebx
  000e7	e8 00 00 00 00	 call	 ?GetScale@ioWeapon@@QBEABUD3DXVECTOR3@@XZ ; ioWeapon::GetScale
  000ec	50		 push	 eax
  000ed	8b 03		 mov	 eax, DWORD PTR [ebx]
  000ef	8b cb		 mov	 ecx, ebx
  000f1	ff 50 70	 call	 DWORD PTR [eax+112]
  000f4	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?Transform@ioOrientBox@@QAEXABUD3DXVECTOR3@@0ABUD3DXQUATERNION@@@Z
  000fa	50		 push	 eax
  000fb	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  00101	ff d6		 call	 esi

; 262  : 
; 263  : 		m_WorldAttackBoxForMap.Transform( GetPosition(),
; 264  : 										  GetScale(),
; 265  : 										  GetParentSceneNode()->GetDerivedOrientation() );

  00103	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00106	8b 01		 mov	 eax, DWORD PTR [ecx]
  00108	ff 50 78	 call	 DWORD PTR [eax+120]
  0010b	50		 push	 eax
  0010c	8b cb		 mov	 ecx, ebx
  0010e	e8 00 00 00 00	 call	 ?GetScale@ioWeapon@@QBEABUD3DXVECTOR3@@XZ ; ioWeapon::GetScale
  00113	50		 push	 eax
  00114	8b 03		 mov	 eax, DWORD PTR [ebx]
  00116	8b cb		 mov	 ecx, ebx
  00118	ff 50 70	 call	 DWORD PTR [eax+112]
  0011b	8b 4d fc	 mov	 ecx, DWORD PTR tv341[ebp]
  0011e	50		 push	 eax
  0011f	ff d6		 call	 esi
  00121	eb 16		 jmp	 SHORT $LN1@UpdateWorl
$LN2@UpdateWorl:

; 243  : 	{
; 244  : 		m_WorldAttackBox.SetNull();

  00123	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?SetNull@ioOrientBox@@QAEXXZ
  00129	8d 8b e8 04 00
	00		 lea	 ecx, DWORD PTR [ebx+1256]
  0012f	ff d6		 call	 esi

; 245  : 		m_WorldAttackBoxForMap.SetNull();

  00131	8d 8b 2c 05 00
	00		 lea	 ecx, DWORD PTR [ebx+1324]
  00137	ff d6		 call	 esi
$LN1@UpdateWorl:
  00139	5f		 pop	 edi
  0013a	5e		 pop	 esi
  0013b	5b		 pop	 ebx

; 266  : 	}
; 267  : }

  0013c	c9		 leave
  0013d	c2 08 00	 ret	 8
?UpdateWorldAttackBox@ioLimitAttachWeapon2@@MAEXM_N@Z ENDP ; ioLimitAttachWeapon2::UpdateWorldAttackBox
_TEXT	ENDS
PUBLIC	_bMapCollision$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	?GetWorldAttackBox@ioWeapon@@QBEABVioOrientBox@@_N@Z:PROC ; ioWeapon::GetWorldAttackBox
EXTRN	?HasBuff@ioBaseChar@@QBE_NABVioHashString@@@Z:PROC ; ioBaseChar::HasBuff
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?IsCollision@ioLimitAttachWeapon2@@UAE_NPAVioPlayEntity@@_N@Z
_TEXT	SEGMENT
_bMapCollision$GSCopy$ = -24				; size = 1
_bCollision$ = -20					; size = 1
_vColPoint$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_pEntity$ = 8						; size = 4
_bMapCollision$ = 12					; size = 1
?IsCollision@ioLimitAttachWeapon2@@UAE_NPAVioPlayEntity@@_N@Z PROC ; ioLimitAttachWeapon2::IsCollision, COMDAT
; _this$ = ecx

; 281  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 282  : 	bool bCollision = false;
; 283  : 
; 284  : 	ioBaseChar* pTarget = ToBaseChar( pEntity );
; 285  : 	if( pTarget && !m_szReduceColByBuffName.IsEmpty() )

  00010	8a 45 0c	 mov	 al, BYTE PTR _bMapCollision$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _pEntity$[ebp]
  00019	57		 push	 edi
  0001a	8b f1		 mov	 esi, ecx
  0001c	88 45 e8	 mov	 BYTE PTR _bMapCollision$GSCopy$[ebp], al
  0001f	c6 45 ec 00	 mov	 BYTE PTR _bCollision$[ebp], 0
  00023	e8 00 00 00 00	 call	 ?ToBaseChar@@YAPAVioBaseChar@@PAVioGameEntity@@@Z ; ToBaseChar
  00028	8b d8		 mov	 ebx, eax
  0002a	59		 pop	 ecx
  0002b	85 db		 test	 ebx, ebx
  0002d	74 29		 je	 SHORT $LN6@IsCollisio
  0002f	8d 8e 94 08 00
	00		 lea	 ecx, DWORD PTR [esi+2196]
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0003b	84 c0		 test	 al, al
  0003d	75 19		 jne	 SHORT $LN6@IsCollisio

; 286  : 	{
; 287  : 		if( pTarget->HasBuff(m_szReduceColByBuffName) )

  0003f	8d 86 94 08 00
	00		 lea	 eax, DWORD PTR [esi+2196]
  00045	50		 push	 eax
  00046	8b cb		 mov	 ecx, ebx
  00048	e8 00 00 00 00	 call	 ?HasBuff@ioBaseChar@@QBE_NABVioHashString@@@Z ; ioBaseChar::HasBuff
  0004d	84 c0		 test	 al, al
  0004f	74 07		 je	 SHORT $LN6@IsCollisio

; 288  : 			return false;

  00051	32 c0		 xor	 al, al
  00053	e9 8b 00 00 00	 jmp	 $LN8@IsCollisio
$LN6@IsCollisio:

; 289  : 	}
; 290  : 
; 291  : 	D3DXVECTOR3 vColPoint( 0.0f, 0.0f, 0.0f );

  00058	0f 57 c0	 xorps	 xmm0, xmm0

; 292  : 	if( pEntity->IsWoundedCollision( GetWorldAttackBox(bMapCollision), &vColPoint ) )

  0005b	8b 1f		 mov	 ebx, DWORD PTR [edi]
  0005d	8d 45 f0	 lea	 eax, DWORD PTR _vColPoint$[ebp]
  00060	50		 push	 eax
  00061	ff 75 e8	 push	 DWORD PTR _bMapCollision$GSCopy$[ebp]
  00064	8b ce		 mov	 ecx, esi
  00066	f3 0f 11 45 f0	 movss	 DWORD PTR _vColPoint$[ebp], xmm0
  0006b	f3 0f 11 45 f4	 movss	 DWORD PTR _vColPoint$[ebp+4], xmm0
  00070	f3 0f 11 45 f8	 movss	 DWORD PTR _vColPoint$[ebp+8], xmm0
  00075	e8 00 00 00 00	 call	 ?GetWorldAttackBox@ioWeapon@@QBEABVioOrientBox@@_N@Z ; ioWeapon::GetWorldAttackBox
  0007a	50		 push	 eax
  0007b	8b cf		 mov	 ecx, edi
  0007d	ff 93 90 00 00
	00		 call	 DWORD PTR [ebx+144]
  00083	84 c0		 test	 al, al
  00085	74 4c		 je	 SHORT $LN12@IsCollisio

; 293  : 	{
; 294  : 		bCollision = true;
; 295  : 	}
; 296  : 
; 297  : 	if( bCollision )
; 298  : 	{
; 299  : 		if( m_bIgnoreColOnDelay && IsDelayStateOnBuff() )	bCollision = false;

  00087	80 be 08 09 00
	00 00		 cmp	 BYTE PTR [esi+2312], 0
  0008e	c6 45 ec 01	 mov	 BYTE PTR _bCollision$[ebp], 1
  00092	74 0f		 je	 SHORT $LN3@IsCollisio
  00094	8b ce		 mov	 ecx, esi
  00096	e8 00 00 00 00	 call	 ?IsDelayStateOnBuff@ioLimitAttachWeapon2@@IAE_NXZ ; ioLimitAttachWeapon2::IsDelayStateOnBuff
  0009b	84 c0		 test	 al, al
  0009d	74 04		 je	 SHORT $LN3@IsCollisio
  0009f	c6 45 ec 00	 mov	 BYTE PTR _bCollision$[ebp], 0
$LN3@IsCollisio:

; 300  : 		if( m_bIgnoreColOnMove && IsMoveStateOnBuff() )		bCollision = false;

  000a3	80 be 09 09 00
	00 00		 cmp	 BYTE PTR [esi+2313], 0
  000aa	74 0f		 je	 SHORT $LN2@IsCollisio
  000ac	8b ce		 mov	 ecx, esi
  000ae	e8 00 00 00 00	 call	 ?IsMoveStateOnBuff@ioLimitAttachWeapon2@@IAE_NXZ ; ioLimitAttachWeapon2::IsMoveStateOnBuff
  000b3	84 c0		 test	 al, al
  000b5	74 04		 je	 SHORT $LN2@IsCollisio
  000b7	c6 45 ec 00	 mov	 BYTE PTR _bCollision$[ebp], 0
$LN2@IsCollisio:

; 301  : 		if( m_bIgnoreColOnJump && IsJumpStateOnBuff() )		bCollision = false;

  000bb	80 be 0a 09 00
	00 00		 cmp	 BYTE PTR [esi+2314], 0
  000c2	74 0f		 je	 SHORT $LN12@IsCollisio
  000c4	8b ce		 mov	 ecx, esi
  000c6	e8 00 00 00 00	 call	 ?IsJumpStateOnBuff@ioLimitAttachWeapon2@@IAE_NXZ ; ioLimitAttachWeapon2::IsJumpStateOnBuff
  000cb	84 c0		 test	 al, al
  000cd	74 04		 je	 SHORT $LN12@IsCollisio
  000cf	c6 45 ec 00	 mov	 BYTE PTR _bCollision$[ebp], 0
$LN12@IsCollisio:

; 302  : 	}
; 303  : 
; 304  : 	CheckPiercing( bCollision );

  000d3	ff 75 ec	 push	 DWORD PTR _bCollision$[ebp]
  000d6	8b 06		 mov	 eax, DWORD PTR [esi]
  000d8	8b ce		 mov	 ecx, esi
  000da	ff 90 48 01 00
	00		 call	 DWORD PTR [eax+328]

; 305  : 
; 306  : 	return bCollision;

  000e0	8a 45 ec	 mov	 al, BYTE PTR _bCollision$[ebp]
$LN8@IsCollisio:

; 307  : }

  000e3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	33 cd		 xor	 ecx, ebp
  000ea	5b		 pop	 ebx
  000eb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f0	c9		 leave
  000f1	c2 08 00	 ret	 8
?IsCollision@ioLimitAttachWeapon2@@UAE_NPAVioPlayEntity@@_N@Z ENDP ; ioLimitAttachWeapon2::IsCollision
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	?UpdateCurPosition@ioLimitAttachWeapon2@@IAEXPAVioBaseChar@@@Z ; ioLimitAttachWeapon2::UpdateCurPosition
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABU0@0@Z:PROC
EXTRN	__imp_?GetBiped@ioEntityGroup@@QAEPAVioBiped@@ABVioHashString@@@Z:PROC
EXTRN	__imp_?GetFirstLinkOffset@ioEffect@@QAE_NAAVioHashString@@AAUD3DXVECTOR3@@AAUD3DXQUATERNION@@@Z:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
xdata$x	SEGMENT
__unwindtable$?UpdateCurPosition@ioLimitAttachWeapon2@@IAEXPAVioBaseChar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UpdateCurPosition@ioLimitAttachWeapon2@@IAEXPAVioBaseChar@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?UpdateCurPosition@ioLimitAttachWeapon2@@IAEXPAVioBaseChar@@@Z$1
__ehfuncinfo$?UpdateCurPosition@ioLimitAttachWeapon2@@IAEXPAVioBaseChar@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?UpdateCurPosition@ioLimitAttachWeapon2@@IAEXPAVioBaseChar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iolimitattachweapon2.cpp
xdata$x	ENDS
;	COMDAT ?UpdateCurPosition@ioLimitAttachWeapon2@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_qtLinkRotOffset$ = -100				; size = 16
_szLinkBiped$ = -84					; size = 16
_this$GSCopy$ = -68					; size = 4
$T532695 = -64						; size = 4
$T532690 = -57						; size = 1
$T532691 = -56						; size = 16
$T530762 = -52						; size = 12
_vLinkPosOffset$ = -40					; size = 12
$T530763 = -28						; size = 12
$T530761 = -28						; size = 12
$T530760 = -28						; size = 12
$T530759 = -28						; size = 12
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
?UpdateCurPosition@ioLimitAttachWeapon2@@IAEXPAVioBaseChar@@@Z PROC ; ioLimitAttachWeapon2::UpdateCurPosition, COMDAT
; _this$ = ecx

; 310  : {

  00000	6a 58		 push	 88			; 00000058H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?UpdateCurPosition@ioLimitAttachWeapon2@@IAEXPAVioBaseChar@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 5d 08	 mov	 ebx, DWORD PTR _pOwner$[ebp]

; 329  : 	{
; 330  : 		SetPosition( pOwner->GetWorldPosition() );

  0000f	33 f6		 xor	 esi, esi
  00011	8b f9		 mov	 edi, ecx
  00013	89 7d bc	 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00016	89 75 c0	 mov	 DWORD PTR $T532695[ebp], esi
  00019	3b de		 cmp	 ebx, esi
  0001b	0f 84 d5 01 00
	00		 je	 $LN4@UpdateCurP

; 311  : 	if( !pOwner || !m_pFireBall ) return;

  00021	39 b7 30 09 00
	00		 cmp	 DWORD PTR [edi+2352], esi
  00027	0f 84 c9 01 00
	00		 je	 $LN4@UpdateCurP

; 312  : 
; 313  : 	ioHashString szLinkBiped;

  0002d	8d 4d ac	 lea	 ecx, DWORD PTR _szLinkBiped$[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 314  : 	D3DXVECTOR3 vLinkPosOffset;
; 315  : 	D3DXQUATERNION qtLinkRotOffset;
; 316  : 
; 317  : 	if( m_pFireBall->GetSkeletonName().IsEmpty() && m_pFireBall->GetFirstLinkOffset(szLinkBiped, vLinkPosOffset, qtLinkRotOffset ) )

  00036	8b 8f 30 09 00
	00		 mov	 ecx, DWORD PTR [edi+2352]
  0003c	8d 45 c8	 lea	 eax, DWORD PTR $T532691[ebp]
  0003f	50		 push	 eax
  00040	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSkeletonName@ioEffect@@QBE?AVioHashString@@XZ
  00049	8b c8		 mov	 ecx, eax
  0004b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0004f	c7 45 c0 01 00
	00 00		 mov	 DWORD PTR $T532695[ebp], 1
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0005c	84 c0		 test	 al, al
  0005e	74 20		 je	 SHORT $LN8@UpdateCurP
  00060	8b 8f 30 09 00
	00		 mov	 ecx, DWORD PTR [edi+2352]
  00066	8d 45 9c	 lea	 eax, DWORD PTR _qtLinkRotOffset$[ebp]
  00069	50		 push	 eax
  0006a	8d 45 d8	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]
  0006d	50		 push	 eax
  0006e	8d 45 ac	 lea	 eax, DWORD PTR _szLinkBiped$[ebp]
  00071	50		 push	 eax
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetFirstLinkOffset@ioEffect@@QAE_NAAVioHashString@@AAUD3DXVECTOR3@@AAUD3DXQUATERNION@@@Z
  00078	c6 45 c7 01	 mov	 BYTE PTR $T532690[ebp], 1
  0007c	84 c0		 test	 al, al
  0007e	75 04		 jne	 SHORT $LN9@UpdateCurP
$LN8@UpdateCurP:
  00080	c6 45 c7 00	 mov	 BYTE PTR $T532690[ebp], 0
$LN9@UpdateCurP:
  00084	8d 4d c8	 lea	 ecx, DWORD PTR $T532691[ebp]
  00087	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00090	80 7d c7 00	 cmp	 BYTE PTR $T532690[ebp], 0
  00094	0f 84 40 01 00
	00		 je	 $LN3@UpdateCurP

; 318  : 	{
; 319  : 		ioBiped *pLinked = pOwner->GetGroup()->GetBiped( szLinkBiped );

  0009a	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0009d	8d 45 ac	 lea	 eax, DWORD PTR _szLinkBiped$[ebp]
  000a0	50		 push	 eax
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetBiped@ioEntityGroup@@QAEPAVioBiped@@ABVioHashString@@@Z
  000a7	8b f8		 mov	 edi, eax

; 320  : 		if( pLinked )

  000a9	3b fe		 cmp	 edi, esi
  000ab	0f 84 38 01 00
	00		 je	 $LN1@UpdateCurP

; 321  : 		{
; 322  : 			vLinkPosOffset = pLinked->GetDerivedOrientation() * vLinkPosOffset + pLinked->GetDerivedPosition();

  000b1	8b 07		 mov	 eax, DWORD PTR [edi]
  000b3	8b cf		 mov	 ecx, edi
  000b5	ff 50 7c	 call	 DWORD PTR [eax+124]
  000b8	8b f0		 mov	 esi, eax
  000ba	8d 45 d8	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]
  000bd	50		 push	 eax
  000be	8b 07		 mov	 eax, DWORD PTR [edi]
  000c0	8b cf		 mov	 ecx, edi
  000c2	ff 50 78	 call	 DWORD PTR [eax+120]
  000c5	50		 push	 eax
  000c6	8d 45 e4	 lea	 eax, DWORD PTR $T530759[ebp]
  000c9	50		 push	 eax
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  000d0	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  000d4	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  000d8	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  000dd	f3 0f 10 58 08	 movss	 xmm3, DWORD PTR [eax+8]

; 323  : 			vLinkPosOffset = vLinkPosOffset * pOwner->GetWorldScale();

  000e2	8b 03		 mov	 eax, DWORD PTR [ebx]
  000e4	0f 5a c9	 cvtps2pd xmm1, xmm1
  000e7	0f 5a c0	 cvtps2pd xmm0, xmm0
  000ea	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000ee	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  000f3	0f 5a d2	 cvtps2pd xmm2, xmm2
  000f6	0f 5a c9	 cvtps2pd xmm1, xmm1
  000f9	f2 0f 58 ca	 addsd	 xmm1, xmm2
  000fd	f3 0f 10 56 08	 movss	 xmm2, DWORD PTR [esi+8]
  00102	0f 5a d2	 cvtps2pd xmm2, xmm2
  00105	0f 5a db	 cvtps2pd xmm3, xmm3
  00108	f2 0f 58 d3	 addsd	 xmm2, xmm3
  0010c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00110	f3 0f 11 45 e4	 movss	 DWORD PTR $T530760[ebp], xmm0
  00115	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  00119	f3 0f 11 4d e8	 movss	 DWORD PTR $T530760[ebp+4], xmm1
  0011e	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  00122	f3 0f 11 55 ec	 movss	 DWORD PTR $T530760[ebp+8], xmm2
  00127	8d 75 e4	 lea	 esi, DWORD PTR $T530760[ebp]
  0012a	8d 7d d8	 lea	 edi, DWORD PTR _vLinkPosOffset$[ebp]
  0012d	a5		 movsd
  0012e	a5		 movsd
  0012f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00132	8b cb		 mov	 ecx, ebx
  00134	a5		 movsd
  00135	ff 50 78	 call	 DWORD PTR [eax+120]
  00138	50		 push	 eax
  00139	8d 45 d8	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]
  0013c	50		 push	 eax
  0013d	8d 45 e4	 lea	 eax, DWORD PTR $T530761[ebp]
  00140	50		 push	 eax
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABU0@0@Z
  00147	8b f0		 mov	 esi, eax

; 324  : 			vLinkPosOffset = pOwner->GetWorldOrientation() * vLinkPosOffset + pOwner->GetWorldPosition();

  00149	8b 03		 mov	 eax, DWORD PTR [ebx]
  0014b	8d 7d d8	 lea	 edi, DWORD PTR _vLinkPosOffset$[ebp]
  0014e	a5		 movsd
  0014f	a5		 movsd
  00150	83 c4 0c	 add	 esp, 12			; 0000000cH
  00153	8b cb		 mov	 ecx, ebx
  00155	a5		 movsd
  00156	ff 50 70	 call	 DWORD PTR [eax+112]
  00159	8b f0		 mov	 esi, eax
  0015b	8d 45 d8	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]
  0015e	50		 push	 eax
  0015f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00161	8b cb		 mov	 ecx, ebx
  00163	ff 50 74	 call	 DWORD PTR [eax+116]
  00166	50		 push	 eax
  00167	8d 45 cc	 lea	 eax, DWORD PTR $T530762[ebp]
  0016a	50		 push	 eax
  0016b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  00171	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00175	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00179	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  0017e	0f 5a c9	 cvtps2pd xmm1, xmm1
  00181	0f 5a c0	 cvtps2pd xmm0, xmm0
  00184	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00188	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  0018d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00190	0f 5a d2	 cvtps2pd xmm2, xmm2
  00193	f2 0f 58 ca	 addsd	 xmm1, xmm2
  00197	83 c4 0c	 add	 esp, 12			; 0000000cH
  0019a	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0019e	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  001a2	f3 0f 10 56 08	 movss	 xmm2, DWORD PTR [esi+8]
  001a7	f3 0f 10 58 08	 movss	 xmm3, DWORD PTR [eax+8]

; 325  : 			SetPosition( vLinkPosOffset );

  001ac	8b 4d bc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001af	0f 5a d2	 cvtps2pd xmm2, xmm2
  001b2	0f 5a db	 cvtps2pd xmm3, xmm3
  001b5	f2 0f 58 d3	 addsd	 xmm2, xmm3
  001b9	f3 0f 11 45 e4	 movss	 DWORD PTR $T530763[ebp], xmm0
  001be	f3 0f 11 4d e8	 movss	 DWORD PTR $T530763[ebp+4], xmm1
  001c3	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  001c7	f3 0f 11 55 ec	 movss	 DWORD PTR $T530763[ebp+8], xmm2
  001cc	8d 75 e4	 lea	 esi, DWORD PTR $T530763[ebp]
  001cf	8d 7d d8	 lea	 edi, DWORD PTR _vLinkPosOffset$[ebp]
  001d2	a5		 movsd
  001d3	a5		 movsd
  001d4	a5		 movsd
  001d5	8d 45 d8	 lea	 eax, DWORD PTR _vLinkPosOffset$[ebp]

; 326  : 		}
; 327  : 	}
; 328  : 	else

  001d8	eb 09		 jmp	 SHORT $LN29@UpdateCurP
$LN3@UpdateCurP:

; 329  : 	{
; 330  : 		SetPosition( pOwner->GetWorldPosition() );

  001da	8b 03		 mov	 eax, DWORD PTR [ebx]
  001dc	8b cb		 mov	 ecx, ebx
  001de	ff 50 70	 call	 DWORD PTR [eax+112]
  001e1	8b cf		 mov	 ecx, edi
$LN29@UpdateCurP:
  001e3	50		 push	 eax
  001e4	e8 00 00 00 00	 call	 ?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z ; ioWeapon::SetPosition
$LN1@UpdateCurP:

; 331  : 	}
; 332  : }

  001e9	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001ed	8d 4d ac	 lea	 ecx, DWORD PTR _szLinkBiped$[ebp]
  001f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
$LN4@UpdateCurP:
  001f6	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001fb	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UpdateCurPosition@ioLimitAttachWeapon2@@IAEXPAVioBaseChar@@@Z$0:
  00000	8d 4d ac	 lea	 ecx, DWORD PTR _szLinkBiped$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?UpdateCurPosition@ioLimitAttachWeapon2@@IAEXPAVioBaseChar@@@Z$1:
  00009	8b 45 c0	 mov	 eax, DWORD PTR $T532695[ebp]
  0000c	83 e0 01	 and	 eax, 1
  0000f	0f 84 0d 00 00
	00		 je	 $LN12@UpdateCurP
  00015	83 65 c0 fe	 and	 DWORD PTR $T532695[ebp], -2 ; fffffffeH
  00019	8d 4d c8	 lea	 ecx, DWORD PTR $T532691[ebp]
  0001c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
$LN12@UpdateCurP:
  00022	c3		 ret	 0
__ehhandler$?UpdateCurPosition@ioLimitAttachWeapon2@@IAEXPAVioBaseChar@@@Z:
  00023	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00027	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002a	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00037	33 c8		 xor	 ecx, eax
  00039	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?UpdateCurPosition@ioLimitAttachWeapon2@@IAEXPAVioBaseChar@@@Z
  00043	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?UpdateCurPosition@ioLimitAttachWeapon2@@IAEXPAVioBaseChar@@@Z ENDP ; ioLimitAttachWeapon2::UpdateCurPosition
PUBLIC	_pOwner$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?UpdateWeaponEffect@ioLimitAttachWeapon2@@IAEXPAVioBaseChar@@@Z ; ioLimitAttachWeapon2::UpdateWeaponEffect
EXTRN	?SetWorldOrientation@ioMapEffect@@QAEXABUD3DXQUATERNION@@@Z:PROC ; ioMapEffect::SetWorldOrientation
EXTRN	__imp_?CalcDirectionQuaternion@ioMath@@SAXAAUD3DXQUATERNION@@ABUD3DXVECTOR3@@@Z:PROC
EXTRN	?SetWorldPosition@ioMapEffect@@QAEXABUD3DXVECTOR3@@@Z:PROC ; ioMapEffect::SetWorldPosition
EXTRN	?GetUniqueID@ioMapEffect@@QBEKXZ:PROC		; ioMapEffect::GetUniqueID
EXTRN	?CreateMapEffectBySkill@ioBaseChar@@QAEPAVioMapEffect@@ABVioHashString@@ABUD3DXVECTOR3@@AAU4@@Z:PROC ; ioBaseChar::CreateMapEffectBySkill
; Function compile flags: /Ogsp
;	COMDAT ?UpdateWeaponEffect@ioLimitAttachWeapon2@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_qtCharRot$530829 = -64					; size = 16
_pOwner$GSCopy$ = -48					; size = 4
tv829 = -44						; size = 4
_pStage$ = -44						; size = 4
_m_vAttackDir$530830 = -40				; size = 12
$T530832 = -28						; size = 12
_vScale$530774 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_pOwner$ = 8						; size = 4
?UpdateWeaponEffect@ioLimitAttachWeapon2@@IAEXPAVioBaseChar@@@Z PROC ; ioLimitAttachWeapon2::UpdateWeaponEffect, COMDAT
; _this$ = ecx

; 335  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _pOwner$[ebp]
  00015	8b d9		 mov	 ebx, ecx

; 464  : 		}
; 465  : 		
; 466  : 		if( m_vPreScale != vScale )	m_vPreScale = vScale;

  00017	89 75 d0	 mov	 DWORD PTR _pOwner$GSCopy$[ebp], esi
  0001a	85 f6		 test	 esi, esi
  0001c	0f 84 ac 04 00
	00		 je	 $LN41@UpdateWeap

; 336  : 	if( !pOwner )	return;
; 337  : 	if( m_szWeaponEffectStand.IsEmpty() || m_szWeaponEffectMove.IsEmpty() || m_szWeaponEffectJump.IsEmpty() )	return;

  00022	8d 8b b8 08 00
	00		 lea	 ecx, DWORD PTR [ebx+2232]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0002e	84 c0		 test	 al, al
  00030	0f 85 98 04 00
	00		 jne	 $LN41@UpdateWeap
  00036	8d 8b c8 08 00
	00		 lea	 ecx, DWORD PTR [ebx+2248]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00042	84 c0		 test	 al, al
  00044	0f 85 84 04 00
	00		 jne	 $LN41@UpdateWeap
  0004a	8d 8b d8 08 00
	00		 lea	 ecx, DWORD PTR [ebx+2264]
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00056	84 c0		 test	 al, al
  00058	0f 85 70 04 00
	00		 jne	 $LN41@UpdateWeap

; 338  : 
; 339  : 	ioPlayStage* pStage = pOwner->GetCreator();

  0005e	8b 86 44 03 00
	00		 mov	 eax, DWORD PTR [esi+836]
  00064	89 45 d4	 mov	 DWORD PTR _pStage$[ebp], eax

; 340  : 
; 341  : 	if( pStage )

  00067	85 c0		 test	 eax, eax
  00069	0f 84 5f 04 00
	00		 je	 $LN41@UpdateWeap

; 342  : 	{
; 343  : 		D3DXVECTOR3 vScale = pOwner->GetWorldScale();

  0006f	8b 06		 mov	 eax, DWORD PTR [esi]
  00071	57		 push	 edi
  00072	8b ce		 mov	 ecx, esi
  00074	ff 50 78	 call	 DWORD PTR [eax+120]
  00077	8b f0		 mov	 esi, eax
  00079	8d 7d f0	 lea	 edi, DWORD PTR _vScale$530774[ebp]
  0007c	a5		 movsd
  0007d	a5		 movsd

; 344  : 
; 345  : 		if( IsDelayStateOnBuff() )

  0007e	8b cb		 mov	 ecx, ebx
  00080	a5		 movsd
  00081	e8 00 00 00 00	 call	 ?IsDelayStateOnBuff@ioLimitAttachWeapon2@@IAE_NXZ ; ioLimitAttachWeapon2::IsDelayStateOnBuff
  00086	83 cf ff	 or	 edi, -1
  00089	84 c0		 test	 al, al
  0008b	0f 84 23 01 00
	00		 je	 $LN39@UpdateWeap

; 346  : 		{
; 347  : 			if( m_dwWeaponEffectStand == -1 )

  00091	8b 83 f8 08 00
	00		 mov	 eax, DWORD PTR [ebx+2296]
  00097	3b c7		 cmp	 eax, edi
  00099	75 35		 jne	 SHORT $LN38@UpdateWeap

; 348  : 			{
; 349  : 				ioMapEffect* pWeaponStandEffect = NULL;
; 350  : 				pWeaponStandEffect = pOwner->CreateMapEffectBySkill( m_szWeaponEffectStand, GetPosition(), vScale );

  0009b	8d 45 f0	 lea	 eax, DWORD PTR _vScale$530774[ebp]
  0009e	50		 push	 eax
  0009f	8b 03		 mov	 eax, DWORD PTR [ebx]
  000a1	8b cb		 mov	 ecx, ebx
  000a3	ff 50 70	 call	 DWORD PTR [eax+112]
  000a6	8b 4d d0	 mov	 ecx, DWORD PTR _pOwner$GSCopy$[ebp]
  000a9	50		 push	 eax
  000aa	8d 83 b8 08 00
	00		 lea	 eax, DWORD PTR [ebx+2232]
  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 ?CreateMapEffectBySkill@ioBaseChar@@QAEPAVioMapEffect@@ABVioHashString@@ABUD3DXVECTOR3@@AAU4@@Z ; ioBaseChar::CreateMapEffectBySkill

; 351  : 				if( pWeaponStandEffect )	m_dwWeaponEffectStand = pWeaponStandEffect->GetUniqueID();

  000b6	85 c0		 test	 eax, eax
  000b8	0f 84 a5 00 00
	00		 je	 $LN82@UpdateWeap
  000be	8b c8		 mov	 ecx, eax
  000c0	e8 00 00 00 00	 call	 ?GetUniqueID@ioMapEffect@@QBEKXZ ; ioMapEffect::GetUniqueID
  000c5	89 83 f8 08 00
	00		 mov	 DWORD PTR [ebx+2296], eax

; 352  : 			}
; 353  : 			else

  000cb	e9 93 00 00 00	 jmp	 $LN82@UpdateWeap
$LN38@UpdateWeap:

; 354  : 			{
; 355  : 				ioMapEffect *pWeaponStandEffect = pStage->FindMapEffect( m_dwWeaponEffectStand );

  000d0	8b 4d d4	 mov	 ecx, DWORD PTR _pStage$[ebp]
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect
  000d9	8b f0		 mov	 esi, eax

; 356  : 				if( pWeaponStandEffect )

  000db	85 f6		 test	 esi, esi
  000dd	0f 84 80 00 00
	00		 je	 $LN82@UpdateWeap

; 357  : 				{
; 358  : 					pWeaponStandEffect->SetWorldPosition( GetPosition() );

  000e3	8b 03		 mov	 eax, DWORD PTR [ebx]
  000e5	8b cb		 mov	 ecx, ebx
  000e7	ff 50 70	 call	 DWORD PTR [eax+112]
  000ea	50		 push	 eax
  000eb	8b ce		 mov	 ecx, esi
  000ed	e8 00 00 00 00	 call	 ?SetWorldPosition@ioMapEffect@@QAEXABUD3DXVECTOR3@@@Z ; ioMapEffect::SetWorldPosition

; 359  : 					ioEffect *pEffect = pWeaponStandEffect->GetEffect();

  000f2	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 360  : 
; 361  : 					if( pEffect && m_vPreScale != vScale )

  000f5	85 f6		 test	 esi, esi
  000f7	74 6a		 je	 SHORT $LN82@UpdateWeap
  000f9	f3 0f 10 83 24
	09 00 00	 movss	 xmm0, DWORD PTR [ebx+2340]
  00101	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _vScale$530774[ebp]
  00106	0f 5a c0	 cvtps2pd xmm0, xmm0
  00109	0f 5a c9	 cvtps2pd xmm1, xmm1
  0010c	66 0f 2e c1	 ucomisd xmm0, xmm1
  00110	9f		 lahf
  00111	f6 c4 44	 test	 ah, 68			; 00000044H
  00114	7a 3a		 jp	 SHORT $LN52@UpdateWeap
  00116	f3 0f 10 83 28
	09 00 00	 movss	 xmm0, DWORD PTR [ebx+2344]
  0011e	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _vScale$530774[ebp+4]
  00123	0f 5a c0	 cvtps2pd xmm0, xmm0
  00126	0f 5a c9	 cvtps2pd xmm1, xmm1
  00129	66 0f 2e c1	 ucomisd xmm0, xmm1
  0012d	9f		 lahf
  0012e	f6 c4 44	 test	 ah, 68			; 00000044H
  00131	7a 1d		 jp	 SHORT $LN52@UpdateWeap
  00133	f3 0f 10 83 2c
	09 00 00	 movss	 xmm0, DWORD PTR [ebx+2348]
  0013b	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _vScale$530774[ebp+8]
  00140	0f 5a c0	 cvtps2pd xmm0, xmm0
  00143	0f 5a c9	 cvtps2pd xmm1, xmm1
  00146	66 0f 2e c1	 ucomisd xmm0, xmm1
  0014a	9f		 lahf
  0014b	f6 c4 44	 test	 ah, 68			; 00000044H
  0014e	7b 13		 jnp	 SHORT $LN82@UpdateWeap
$LN52@UpdateWeap:

; 362  : 						pEffect->GetParentNode()->SetScale(vScale);

  00150	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00153	8b 01		 mov	 eax, DWORD PTR [ecx]
  00155	ff 50 30	 call	 DWORD PTR [eax+48]
  00158	8b 10		 mov	 edx, DWORD PTR [eax]
  0015a	8d 4d f0	 lea	 ecx, DWORD PTR _vScale$530774[ebp]
  0015d	51		 push	 ecx
  0015e	8b c8		 mov	 ecx, eax
  00160	ff 52 20	 call	 DWORD PTR [edx+32]
$LN82@UpdateWeap:

; 363  : 				}
; 364  : 					
; 365  : 			}
; 366  : 
; 367  : 			if( m_dwWeaponEffectMove != -1 )

  00163	8b 83 fc 08 00
	00		 mov	 eax, DWORD PTR [ebx+2300]
  00169	3b c7		 cmp	 eax, edi
  0016b	74 1a		 je	 SHORT $LN88@UpdateWeap

; 368  : 			{
; 369  : 				ioMapEffect *pWeaponMoveEffect = pStage->FindMapEffect( m_dwWeaponEffectMove );

  0016d	8b 4d d4	 mov	 ecx, DWORD PTR _pStage$[ebp]
  00170	50		 push	 eax
  00171	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect

; 370  : 				if( pWeaponMoveEffect )	pWeaponMoveEffect->EndEffectForce();

  00176	85 c0		 test	 eax, eax
  00178	74 07		 je	 SHORT $LN32@UpdateWeap
  0017a	8b c8		 mov	 ecx, eax
  0017c	e8 00 00 00 00	 call	 ?EndEffectForce@ioMapEffect@@QAEXXZ ; ioMapEffect::EndEffectForce
$LN32@UpdateWeap:

; 371  : 				m_dwWeaponEffectMove = -1;

  00181	89 bb fc 08 00
	00		 mov	 DWORD PTR [ebx+2300], edi
$LN88@UpdateWeap:

; 372  : 			}
; 373  : 
; 374  : 			if( m_dwWeaponEffectJump != -1 )

  00187	8b 83 00 09 00
	00		 mov	 eax, DWORD PTR [ebx+2304]
  0018d	3b c7		 cmp	 eax, edi
  0018f	0f 84 5a 02 00
	00		 je	 $LN80@UpdateWeap

; 375  : 			{
; 376  : 				ioMapEffect *pWeaponJumpEffect = pStage->FindMapEffect( m_dwWeaponEffectJump );

  00195	8b 4d d4	 mov	 ecx, DWORD PTR _pStage$[ebp]
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect

; 377  : 				if( pWeaponJumpEffect )	pWeaponJumpEffect->EndEffectForce();

  0019e	85 c0		 test	 eax, eax
  001a0	74 07		 je	 SHORT $LN30@UpdateWeap
  001a2	8b c8		 mov	 ecx, eax
  001a4	e8 00 00 00 00	 call	 ?EndEffectForce@ioMapEffect@@QAEXXZ ; ioMapEffect::EndEffectForce
$LN30@UpdateWeap:

; 378  : 				m_dwWeaponEffectJump = -1;

  001a9	89 bb 00 09 00
	00		 mov	 DWORD PTR [ebx+2304], edi

; 379  : 			}
; 380  : 		}

  001af	e9 3b 02 00 00	 jmp	 $LN80@UpdateWeap
$LN39@UpdateWeap:

; 381  : 		else if( IsMoveStateOnBuff() )

  001b4	8b cb		 mov	 ecx, ebx
  001b6	e8 00 00 00 00	 call	 ?IsMoveStateOnBuff@ioLimitAttachWeapon2@@IAE_NXZ ; ioLimitAttachWeapon2::IsMoveStateOnBuff
  001bb	84 c0		 test	 al, al
  001bd	0f 84 03 01 00
	00		 je	 $LN28@UpdateWeap

; 382  : 		{
; 383  : 			if( m_dwWeaponEffectStand != -1 )

  001c3	8b 83 f8 08 00
	00		 mov	 eax, DWORD PTR [ebx+2296]
  001c9	3b c7		 cmp	 eax, edi
  001cb	74 1a		 je	 SHORT $LN85@UpdateWeap

; 384  : 			{
; 385  : 				ioMapEffect *pWeaponStandEffect = pStage->FindMapEffect( m_dwWeaponEffectStand );

  001cd	8b 4d d4	 mov	 ecx, DWORD PTR _pStage$[ebp]
  001d0	50		 push	 eax
  001d1	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect

; 386  : 				if( pWeaponStandEffect )	pWeaponStandEffect->EndEffectForce();

  001d6	85 c0		 test	 eax, eax
  001d8	74 07		 je	 SHORT $LN26@UpdateWeap
  001da	8b c8		 mov	 ecx, eax
  001dc	e8 00 00 00 00	 call	 ?EndEffectForce@ioMapEffect@@QAEXXZ ; ioMapEffect::EndEffectForce
$LN26@UpdateWeap:

; 387  : 				m_dwWeaponEffectStand = -1;

  001e1	89 bb f8 08 00
	00		 mov	 DWORD PTR [ebx+2296], edi
$LN85@UpdateWeap:

; 388  : 			}
; 389  : 
; 390  : 			if( m_dwWeaponEffectMove == -1 )

  001e7	8b 83 fc 08 00
	00		 mov	 eax, DWORD PTR [ebx+2300]
  001ed	3b c7		 cmp	 eax, edi
  001ef	75 35		 jne	 SHORT $LN25@UpdateWeap

; 391  : 			{
; 392  : 				ioMapEffect* pWeaponMoveEffect = NULL;
; 393  : 				pWeaponMoveEffect = pOwner->CreateMapEffectBySkill( m_szWeaponEffectMove, GetPosition(), vScale );

  001f1	8d 45 f0	 lea	 eax, DWORD PTR _vScale$530774[ebp]
  001f4	50		 push	 eax
  001f5	8b 03		 mov	 eax, DWORD PTR [ebx]
  001f7	8b cb		 mov	 ecx, ebx
  001f9	ff 50 70	 call	 DWORD PTR [eax+112]
  001fc	8b 4d d0	 mov	 ecx, DWORD PTR _pOwner$GSCopy$[ebp]
  001ff	50		 push	 eax
  00200	8d 83 c8 08 00
	00		 lea	 eax, DWORD PTR [ebx+2248]
  00206	50		 push	 eax
  00207	e8 00 00 00 00	 call	 ?CreateMapEffectBySkill@ioBaseChar@@QAEPAVioMapEffect@@ABVioHashString@@ABUD3DXVECTOR3@@AAU4@@Z ; ioBaseChar::CreateMapEffectBySkill

; 394  : 				if( pWeaponMoveEffect )	m_dwWeaponEffectMove = pWeaponMoveEffect->GetUniqueID();

  0020c	85 c0		 test	 eax, eax
  0020e	0f 84 73 ff ff
	ff		 je	 $LN88@UpdateWeap
  00214	8b c8		 mov	 ecx, eax
  00216	e8 00 00 00 00	 call	 ?GetUniqueID@ioMapEffect@@QBEKXZ ; ioMapEffect::GetUniqueID
  0021b	89 83 fc 08 00
	00		 mov	 DWORD PTR [ebx+2300], eax

; 395  : 			}
; 396  : 			else

  00221	e9 61 ff ff ff	 jmp	 $LN88@UpdateWeap
$LN25@UpdateWeap:

; 397  : 			{
; 398  : 				ioMapEffect *pWeaponMoveEffect = pStage->FindMapEffect( m_dwWeaponEffectMove );

  00226	8b 4d d4	 mov	 ecx, DWORD PTR _pStage$[ebp]
  00229	50		 push	 eax
  0022a	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect
  0022f	8b f0		 mov	 esi, eax

; 399  : 				if( pWeaponMoveEffect )

  00231	85 f6		 test	 esi, esi
  00233	0f 84 4e ff ff
	ff		 je	 $LN88@UpdateWeap

; 400  : 				{
; 401  : 					pWeaponMoveEffect->SetWorldPosition( GetPosition() );

  00239	8b 03		 mov	 eax, DWORD PTR [ebx]
  0023b	8b cb		 mov	 ecx, ebx
  0023d	ff 50 70	 call	 DWORD PTR [eax+112]
  00240	50		 push	 eax
  00241	8b ce		 mov	 ecx, esi
  00243	e8 00 00 00 00	 call	 ?SetWorldPosition@ioMapEffect@@QAEXABUD3DXVECTOR3@@@Z ; ioMapEffect::SetWorldPosition

; 402  : 					
; 403  : 					ioEffect *pEffect = pWeaponMoveEffect->GetEffect();

  00248	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 404  : 
; 405  : 					if( pEffect && m_vPreScale != vScale )

  0024b	85 f6		 test	 esi, esi
  0024d	0f 84 34 ff ff
	ff		 je	 $LN88@UpdateWeap
  00253	f3 0f 10 83 24
	09 00 00	 movss	 xmm0, DWORD PTR [ebx+2340]
  0025b	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _vScale$530774[ebp]
  00260	0f 5a c0	 cvtps2pd xmm0, xmm0
  00263	0f 5a c9	 cvtps2pd xmm1, xmm1
  00266	66 0f 2e c1	 ucomisd xmm0, xmm1
  0026a	9f		 lahf
  0026b	f6 c4 44	 test	 ah, 68			; 00000044H
  0026e	7a 3e		 jp	 SHORT $LN58@UpdateWeap
  00270	f3 0f 10 83 28
	09 00 00	 movss	 xmm0, DWORD PTR [ebx+2344]
  00278	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _vScale$530774[ebp+4]
  0027d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00280	0f 5a c9	 cvtps2pd xmm1, xmm1
  00283	66 0f 2e c1	 ucomisd xmm0, xmm1
  00287	9f		 lahf
  00288	f6 c4 44	 test	 ah, 68			; 00000044H
  0028b	7a 21		 jp	 SHORT $LN58@UpdateWeap
  0028d	f3 0f 10 83 2c
	09 00 00	 movss	 xmm0, DWORD PTR [ebx+2348]
  00295	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _vScale$530774[ebp+8]
  0029a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0029d	0f 5a c9	 cvtps2pd xmm1, xmm1
  002a0	66 0f 2e c1	 ucomisd xmm0, xmm1
  002a4	9f		 lahf
  002a5	f6 c4 44	 test	 ah, 68			; 00000044H
  002a8	0f 8b d9 fe ff
	ff		 jnp	 $LN88@UpdateWeap
$LN58@UpdateWeap:

; 406  : 						pEffect->GetParentNode()->SetScale(vScale);

  002ae	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  002b1	8b 01		 mov	 eax, DWORD PTR [ecx]
  002b3	ff 50 30	 call	 DWORD PTR [eax+48]
  002b6	8b 10		 mov	 edx, DWORD PTR [eax]
  002b8	8d 4d f0	 lea	 ecx, DWORD PTR _vScale$530774[ebp]
  002bb	51		 push	 ecx
  002bc	8b c8		 mov	 ecx, eax
  002be	ff 52 20	 call	 DWORD PTR [edx+32]

; 407  : 				}
; 408  : 			}
; 409  : 
; 410  : 			if( m_dwWeaponEffectJump != -1 )
; 411  : 			{
; 412  : 				ioMapEffect *pWeaponJumpEffect = pStage->FindMapEffect( m_dwWeaponEffectJump );
; 413  : 				if( pWeaponJumpEffect )	pWeaponJumpEffect->EndEffectForce();
; 414  : 				m_dwWeaponEffectJump = -1;
; 415  : 			}
; 416  : 		}

  002c1	e9 c1 fe ff ff	 jmp	 $LN88@UpdateWeap
$LN28@UpdateWeap:

; 417  : 		else if( IsJumpStateOnBuff() )

  002c6	8b cb		 mov	 ecx, ebx
  002c8	e8 00 00 00 00	 call	 ?IsJumpStateOnBuff@ioLimitAttachWeapon2@@IAE_NXZ ; ioLimitAttachWeapon2::IsJumpStateOnBuff
  002cd	84 c0		 test	 al, al
  002cf	0f 84 1a 01 00
	00		 je	 $LN80@UpdateWeap

; 418  : 		{
; 419  : 			if( m_dwWeaponEffectStand != -1 )

  002d5	8b 83 f8 08 00
	00		 mov	 eax, DWORD PTR [ebx+2296]
  002db	3b c7		 cmp	 eax, edi
  002dd	74 1a		 je	 SHORT $LN86@UpdateWeap

; 420  : 			{
; 421  : 				ioMapEffect *pWeaponStandEffect = pStage->FindMapEffect( m_dwWeaponEffectStand );

  002df	8b 4d d4	 mov	 ecx, DWORD PTR _pStage$[ebp]
  002e2	50		 push	 eax
  002e3	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect

; 422  : 				if( pWeaponStandEffect )	pWeaponStandEffect->EndEffectForce();

  002e8	85 c0		 test	 eax, eax
  002ea	74 07		 je	 SHORT $LN15@UpdateWeap
  002ec	8b c8		 mov	 ecx, eax
  002ee	e8 00 00 00 00	 call	 ?EndEffectForce@ioMapEffect@@QAEXXZ ; ioMapEffect::EndEffectForce
$LN15@UpdateWeap:

; 423  : 				m_dwWeaponEffectStand = -1;

  002f3	89 bb f8 08 00
	00		 mov	 DWORD PTR [ebx+2296], edi
$LN86@UpdateWeap:

; 424  : 			}
; 425  : 
; 426  : 			if( m_dwWeaponEffectMove != -1 )

  002f9	8b 83 fc 08 00
	00		 mov	 eax, DWORD PTR [ebx+2300]
  002ff	3b c7		 cmp	 eax, edi
  00301	74 1a		 je	 SHORT $LN89@UpdateWeap

; 427  : 			{
; 428  : 				ioMapEffect *pWeaponMoveEffect = pStage->FindMapEffect( m_dwWeaponEffectMove );

  00303	8b 4d d4	 mov	 ecx, DWORD PTR _pStage$[ebp]
  00306	50		 push	 eax
  00307	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect

; 429  : 				if( pWeaponMoveEffect )	pWeaponMoveEffect->EndEffectForce();

  0030c	85 c0		 test	 eax, eax
  0030e	74 07		 je	 SHORT $LN13@UpdateWeap
  00310	8b c8		 mov	 ecx, eax
  00312	e8 00 00 00 00	 call	 ?EndEffectForce@ioMapEffect@@QAEXXZ ; ioMapEffect::EndEffectForce
$LN13@UpdateWeap:

; 430  : 				m_dwWeaponEffectMove = -1;

  00317	89 bb fc 08 00
	00		 mov	 DWORD PTR [ebx+2300], edi
$LN89@UpdateWeap:

; 431  : 			}
; 432  : 
; 433  : 			if( m_dwWeaponEffectJump == -1 )

  0031d	8b 83 00 09 00
	00		 mov	 eax, DWORD PTR [ebx+2304]
  00323	3b c7		 cmp	 eax, edi
  00325	75 35		 jne	 SHORT $LN12@UpdateWeap

; 434  : 			{
; 435  : 				ioMapEffect* pWeaponJumpEffect = NULL;
; 436  : 				pWeaponJumpEffect = pOwner->CreateMapEffectBySkill( m_szWeaponEffectJump, GetPosition(), vScale );

  00327	8d 45 f0	 lea	 eax, DWORD PTR _vScale$530774[ebp]
  0032a	50		 push	 eax
  0032b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0032d	8b cb		 mov	 ecx, ebx
  0032f	ff 50 70	 call	 DWORD PTR [eax+112]
  00332	8b 4d d0	 mov	 ecx, DWORD PTR _pOwner$GSCopy$[ebp]
  00335	50		 push	 eax
  00336	8d 83 d8 08 00
	00		 lea	 eax, DWORD PTR [ebx+2264]
  0033c	50		 push	 eax
  0033d	e8 00 00 00 00	 call	 ?CreateMapEffectBySkill@ioBaseChar@@QAEPAVioMapEffect@@ABVioHashString@@ABUD3DXVECTOR3@@AAU4@@Z ; ioBaseChar::CreateMapEffectBySkill

; 437  : 				if( pWeaponJumpEffect )	m_dwWeaponEffectJump = pWeaponJumpEffect->GetUniqueID();

  00342	85 c0		 test	 eax, eax
  00344	0f 84 a5 00 00
	00		 je	 $LN80@UpdateWeap
  0034a	8b c8		 mov	 ecx, eax
  0034c	e8 00 00 00 00	 call	 ?GetUniqueID@ioMapEffect@@QBEKXZ ; ioMapEffect::GetUniqueID
  00351	89 83 00 09 00
	00		 mov	 DWORD PTR [ebx+2304], eax

; 438  : 			}
; 439  : 			else

  00357	e9 93 00 00 00	 jmp	 $LN80@UpdateWeap
$LN12@UpdateWeap:

; 440  : 			{
; 441  : 				ioMapEffect *pWeaponJumpEffect = pStage->FindMapEffect( m_dwWeaponEffectJump );

  0035c	8b 4d d4	 mov	 ecx, DWORD PTR _pStage$[ebp]
  0035f	50		 push	 eax
  00360	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect
  00365	8b f0		 mov	 esi, eax

; 442  : 				if( pWeaponJumpEffect )

  00367	85 f6		 test	 esi, esi
  00369	0f 84 80 00 00
	00		 je	 $LN80@UpdateWeap

; 443  : 				{
; 444  : 					pWeaponJumpEffect->SetWorldPosition( GetPosition() );

  0036f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00371	8b cb		 mov	 ecx, ebx
  00373	ff 50 70	 call	 DWORD PTR [eax+112]
  00376	50		 push	 eax
  00377	8b ce		 mov	 ecx, esi
  00379	e8 00 00 00 00	 call	 ?SetWorldPosition@ioMapEffect@@QAEXABUD3DXVECTOR3@@@Z ; ioMapEffect::SetWorldPosition

; 445  : 
; 446  : 					ioEffect *pEffect = pWeaponJumpEffect->GetEffect();

  0037e	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 447  : 
; 448  : 					if( pEffect && m_vPreScale != vScale  )

  00381	85 f6		 test	 esi, esi
  00383	74 6a		 je	 SHORT $LN80@UpdateWeap
  00385	f3 0f 10 83 24
	09 00 00	 movss	 xmm0, DWORD PTR [ebx+2340]
  0038d	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _vScale$530774[ebp]
  00392	0f 5a c0	 cvtps2pd xmm0, xmm0
  00395	0f 5a c9	 cvtps2pd xmm1, xmm1
  00398	66 0f 2e c1	 ucomisd xmm0, xmm1
  0039c	9f		 lahf
  0039d	f6 c4 44	 test	 ah, 68			; 00000044H
  003a0	7a 3a		 jp	 SHORT $LN64@UpdateWeap
  003a2	f3 0f 10 83 28
	09 00 00	 movss	 xmm0, DWORD PTR [ebx+2344]
  003aa	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _vScale$530774[ebp+4]
  003af	0f 5a c0	 cvtps2pd xmm0, xmm0
  003b2	0f 5a c9	 cvtps2pd xmm1, xmm1
  003b5	66 0f 2e c1	 ucomisd xmm0, xmm1
  003b9	9f		 lahf
  003ba	f6 c4 44	 test	 ah, 68			; 00000044H
  003bd	7a 1d		 jp	 SHORT $LN64@UpdateWeap
  003bf	f3 0f 10 83 2c
	09 00 00	 movss	 xmm0, DWORD PTR [ebx+2348]
  003c7	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _vScale$530774[ebp+8]
  003cc	0f 5a c0	 cvtps2pd xmm0, xmm0
  003cf	0f 5a c9	 cvtps2pd xmm1, xmm1
  003d2	66 0f 2e c1	 ucomisd xmm0, xmm1
  003d6	9f		 lahf
  003d7	f6 c4 44	 test	 ah, 68			; 00000044H
  003da	7b 13		 jnp	 SHORT $LN80@UpdateWeap
$LN64@UpdateWeap:

; 449  : 						pEffect->GetParentNode()->SetScale(vScale);

  003dc	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  003df	8b 01		 mov	 eax, DWORD PTR [ecx]
  003e1	ff 50 30	 call	 DWORD PTR [eax+48]
  003e4	8b 10		 mov	 edx, DWORD PTR [eax]
  003e6	8d 4d f0	 lea	 ecx, DWORD PTR _vScale$530774[ebp]
  003e9	51		 push	 ecx
  003ea	8b c8		 mov	 ecx, eax
  003ec	ff 52 20	 call	 DWORD PTR [edx+32]
$LN80@UpdateWeap:

; 450  : 				}
; 451  : 			}
; 452  : 		}
; 453  : 
; 454  : 		ioMapEffect *pWeaponEffect = NULL;
; 455  : 		if( m_dwWeaponEffectStand != -1 )		pWeaponEffect = pStage->FindMapEffect( m_dwWeaponEffectStand );

  003ef	8b 83 f8 08 00
	00		 mov	 eax, DWORD PTR [ebx+2296]
  003f5	3b c7		 cmp	 eax, edi
  003f7	75 14		 jne	 SHORT $LN92@UpdateWeap

; 456  : 		else if( m_dwWeaponEffectMove != -1 )	pWeaponEffect = pStage->FindMapEffect( m_dwWeaponEffectMove );

  003f9	8b 83 fc 08 00
	00		 mov	 eax, DWORD PTR [ebx+2300]
  003ff	3b c7		 cmp	 eax, edi
  00401	75 0a		 jne	 SHORT $LN92@UpdateWeap

; 457  : 		else if( m_dwWeaponEffectJump != -1 )	pWeaponEffect = pStage->FindMapEffect( m_dwWeaponEffectJump );

  00403	8b 83 00 09 00
	00		 mov	 eax, DWORD PTR [ebx+2304]
  00409	3b c7		 cmp	 eax, edi
  0040b	74 67		 je	 SHORT $LN81@UpdateWeap
$LN92@UpdateWeap:
  0040d	8b 4d d4	 mov	 ecx, DWORD PTR _pStage$[ebp]
  00410	50		 push	 eax
  00411	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect
  00416	8b f0		 mov	 esi, eax

; 458  : 		if( pWeaponEffect )

  00418	85 f6		 test	 esi, esi
  0041a	74 58		 je	 SHORT $LN81@UpdateWeap

; 459  : 		{
; 460  : 			D3DXQUATERNION qtCharRot;
; 461  : 			D3DXVECTOR3 m_vAttackDir = pOwner->GetTargetRot() * D3DXVECTOR3(0.0f, 0.0f, FLOAT1);

  0041c	b8 01 00 00 00	 mov	 eax, 1
  00421	0f 57 c0	 xorps	 xmm0, xmm0
  00424	89 45 d4	 mov	 DWORD PTR tv829[ebp], eax
  00427	db 45 d4	 fild	 DWORD PTR tv829[ebp]
  0042a	f3 0f 11 45 e4	 movss	 DWORD PTR $T530832[ebp], xmm0
  0042f	f3 0f 11 45 e8	 movss	 DWORD PTR $T530832[ebp+4], xmm0
  00434	85 c0		 test	 eax, eax
  00436	79 06		 jns	 SHORT $LN91@UpdateWeap
  00438	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN91@UpdateWeap:
  0043e	8d 45 e4	 lea	 eax, DWORD PTR $T530832[ebp]
  00441	d9 5d ec	 fstp	 DWORD PTR $T530832[ebp+8]
  00444	50		 push	 eax
  00445	8b 45 d0	 mov	 eax, DWORD PTR _pOwner$GSCopy$[ebp]
  00448	05 a4 06 00 00	 add	 eax, 1700		; 000006a4H
  0044d	50		 push	 eax
  0044e	8d 45 d8	 lea	 eax, DWORD PTR _m_vAttackDir$530830[ebp]
  00451	50		 push	 eax
  00452	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z

; 462  : 			ioMath::CalcDirectionQuaternion( qtCharRot, m_vAttackDir );			

  00458	8d 45 d8	 lea	 eax, DWORD PTR _m_vAttackDir$530830[ebp]
  0045b	50		 push	 eax
  0045c	8d 45 c0	 lea	 eax, DWORD PTR _qtCharRot$530829[ebp]
  0045f	50		 push	 eax
  00460	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CalcDirectionQuaternion@ioMath@@SAXAAUD3DXQUATERNION@@ABUD3DXVECTOR3@@@Z
  00466	83 c4 14	 add	 esp, 20			; 00000014H

; 463  : 			pWeaponEffect->SetWorldOrientation( qtCharRot );

  00469	8d 45 c0	 lea	 eax, DWORD PTR _qtCharRot$530829[ebp]
  0046c	50		 push	 eax
  0046d	8b ce		 mov	 ecx, esi
  0046f	e8 00 00 00 00	 call	 ?SetWorldOrientation@ioMapEffect@@QAEXABUD3DXQUATERNION@@@Z ; ioMapEffect::SetWorldOrientation
$LN81@UpdateWeap:

; 464  : 		}
; 465  : 		
; 466  : 		if( m_vPreScale != vScale )	m_vPreScale = vScale;

  00474	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _vScale$530774[ebp]
  00479	8d bb 24 09 00
	00		 lea	 edi, DWORD PTR [ebx+2340]
  0047f	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00483	0f 5a c0	 cvtps2pd xmm0, xmm0
  00486	0f 5a c9	 cvtps2pd xmm1, xmm1
  00489	66 0f 2e c1	 ucomisd xmm0, xmm1
  0048d	9f		 lahf
  0048e	f6 c4 44	 test	 ah, 68			; 00000044H
  00491	7a 34		 jp	 SHORT $LN76@UpdateWeap
  00493	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  00498	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _vScale$530774[ebp+4]
  0049d	0f 5a c0	 cvtps2pd xmm0, xmm0
  004a0	0f 5a c9	 cvtps2pd xmm1, xmm1
  004a3	66 0f 2e c1	 ucomisd xmm0, xmm1
  004a7	9f		 lahf
  004a8	f6 c4 44	 test	 ah, 68			; 00000044H
  004ab	7a 1a		 jp	 SHORT $LN76@UpdateWeap
  004ad	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  004b2	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _vScale$530774[ebp+8]
  004b7	0f 5a c0	 cvtps2pd xmm0, xmm0
  004ba	0f 5a c9	 cvtps2pd xmm1, xmm1
  004bd	66 0f 2e c1	 ucomisd xmm0, xmm1
  004c1	9f		 lahf
  004c2	f6 c4 44	 test	 ah, 68			; 00000044H
  004c5	7b 06		 jnp	 SHORT $LN90@UpdateWeap
$LN76@UpdateWeap:
  004c7	8d 75 f0	 lea	 esi, DWORD PTR _vScale$530774[ebp]
  004ca	a5		 movsd
  004cb	a5		 movsd
  004cc	a5		 movsd
$LN90@UpdateWeap:
  004cd	5f		 pop	 edi
$LN41@UpdateWeap:

; 467  : 	}
; 468  : }

  004ce	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004d1	5e		 pop	 esi
  004d2	33 cd		 xor	 ecx, ebp
  004d4	5b		 pop	 ebx
  004d5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004da	c9		 leave
  004db	c2 04 00	 ret	 4
?UpdateWeaponEffect@ioLimitAttachWeapon2@@IAEXPAVioBaseChar@@@Z ENDP ; ioLimitAttachWeapon2::UpdateWeaponEffect
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?WeaponEndEffect@ioLimitAttachWeapon2@@IAEXPAVioPlayStage@@@Z ; ioLimitAttachWeapon2::WeaponEndEffect
EXTRN	?CreateMapEffect@ioPlayStage@@QAEPAVioMapEffect@@ABVioHashString@@ABUD3DXVECTOR3@@1@Z:PROC ; ioPlayStage::CreateMapEffect
; Function compile flags: /Ogsp
;	COMDAT ?WeaponEndEffect@ioLimitAttachWeapon2@@IAEXPAVioPlayStage@@@Z
_TEXT	SEGMENT
tv181 = -20						; size = 4
tv178 = -20						; size = 4
tv175 = -20						; size = 4
_vScale$530856 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_pStage$ = 8						; size = 4
?WeaponEndEffect@ioLimitAttachWeapon2@@IAEXPAVioPlayStage@@@Z PROC ; ioLimitAttachWeapon2::WeaponEndEffect, COMDAT
; _this$ = ecx

; 491  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b 7d 08	 mov	 edi, DWORD PTR _pStage$[ebp]
  00015	8b f1		 mov	 esi, ecx

; 492  : 	if( !pStage )	return;

  00017	85 ff		 test	 edi, edi
  00019	0f 84 8e 00 00
	00		 je	 $LN1@WeaponEndE

; 493  : 	if( m_szWeaponEffectEnd.IsEmpty() )	return;

  0001f	53		 push	 ebx
  00020	8d 9e e8 08 00
	00		 lea	 ebx, DWORD PTR [esi+2280]
  00026	8b cb		 mov	 ecx, ebx
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0002e	84 c0		 test	 al, al
  00030	75 7a		 jne	 SHORT $LN15@WeaponEndE

; 494  : 
; 495  : 	if( m_dwWeaponEffectEnd == -1 )

  00032	83 be 04 09 00
	00 ff		 cmp	 DWORD PTR [esi+2308], -1
  00039	75 71		 jne	 SHORT $LN15@WeaponEndE

; 496  : 	{
; 497  : 		D3DXVECTOR3 vScale = D3DXVECTOR3( FLOAT1, FLOAT1, FLOAT1 );

  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	8b c8		 mov	 ecx, eax
  00042	b8 01 00 00 00	 mov	 eax, 1
  00047	8b d0		 mov	 edx, eax
  00049	b8 01 00 00 00	 mov	 eax, 1
  0004e	89 45 ec	 mov	 DWORD PTR tv181[ebp], eax
  00051	db 45 ec	 fild	 DWORD PTR tv181[ebp]
  00054	85 c0		 test	 eax, eax
  00056	79 06		 jns	 SHORT $LN16@WeaponEndE
  00058	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN16@WeaponEndE:
  0005e	89 55 ec	 mov	 DWORD PTR tv178[ebp], edx
  00061	d9 5d f0	 fstp	 DWORD PTR _vScale$530856[ebp]
  00064	db 45 ec	 fild	 DWORD PTR tv178[ebp]
  00067	85 d2		 test	 edx, edx
  00069	79 06		 jns	 SHORT $LN17@WeaponEndE
  0006b	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN17@WeaponEndE:
  00071	89 4d ec	 mov	 DWORD PTR tv175[ebp], ecx
  00074	d9 5d f4	 fstp	 DWORD PTR _vScale$530856[ebp+4]
  00077	db 45 ec	 fild	 DWORD PTR tv175[ebp]
  0007a	85 c9		 test	 ecx, ecx
  0007c	79 06		 jns	 SHORT $LN18@WeaponEndE
  0007e	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN18@WeaponEndE:

; 498  : 
; 499  : 		ioMapEffect* pWeaponEffect = NULL;
; 500  : 		pWeaponEffect = pStage->CreateMapEffect( m_szWeaponEffectEnd, GetPosition(), vScale );

  00084	8d 45 f0	 lea	 eax, DWORD PTR _vScale$530856[ebp]
  00087	d9 5d f8	 fstp	 DWORD PTR _vScale$530856[ebp+8]
  0008a	50		 push	 eax
  0008b	8b 06		 mov	 eax, DWORD PTR [esi]
  0008d	8b ce		 mov	 ecx, esi
  0008f	ff 50 70	 call	 DWORD PTR [eax+112]
  00092	50		 push	 eax
  00093	53		 push	 ebx
  00094	8b cf		 mov	 ecx, edi
  00096	e8 00 00 00 00	 call	 ?CreateMapEffect@ioPlayStage@@QAEPAVioMapEffect@@ABVioHashString@@ABUD3DXVECTOR3@@1@Z ; ioPlayStage::CreateMapEffect

; 501  : 		if( pWeaponEffect )	m_dwWeaponEffectEnd = pWeaponEffect->GetUniqueID();

  0009b	85 c0		 test	 eax, eax
  0009d	74 0d		 je	 SHORT $LN15@WeaponEndE
  0009f	8b c8		 mov	 ecx, eax
  000a1	e8 00 00 00 00	 call	 ?GetUniqueID@ioMapEffect@@QBEKXZ ; ioMapEffect::GetUniqueID
  000a6	89 86 04 09 00
	00		 mov	 DWORD PTR [esi+2308], eax
$LN15@WeaponEndE:
  000ac	5b		 pop	 ebx
$LN1@WeaponEndE:

; 502  : 	}
; 503  : }

  000ad	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b0	5f		 pop	 edi
  000b1	33 cd		 xor	 ecx, ebp
  000b3	5e		 pop	 esi
  000b4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b9	c9		 leave
  000ba	c2 04 00	 ret	 4
?WeaponEndEffect@ioLimitAttachWeapon2@@IAEXPAVioPlayStage@@@Z ENDP ; ioLimitAttachWeapon2::WeaponEndEffect
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$09@ioINILoader@@QAEHAAY09$$CBDH@Z	; ioINILoader::LoadInt_e<10>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadInt_e@$09@ioINILoader@@QAEHAAY09$$CBDH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$09@ioINILoader@@QAEHAAY09$$CBDH@Z PROC	; ioINILoader::LoadInt_e<10>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	84 d2		 test	 dl, dl
  00017	0f 84 0d 01 00
	00		 je	 $LN96@LoadInt_e
  0001d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00020	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00023	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00026	84 d2		 test	 dl, dl
  00028	0f 84 f6 00 00
	00		 je	 $LN95@LoadInt_e
  0002e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00031	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00034	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00037	84 d2		 test	 dl, dl
  00039	0f 84 df 00 00
	00		 je	 $LN94@LoadInt_e
  0003f	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00042	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00045	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00048	84 d2		 test	 dl, dl
  0004a	0f 84 c8 00 00
	00		 je	 $LN93@LoadInt_e
  00050	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00053	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00056	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00059	84 d2		 test	 dl, dl
  0005b	0f 84 b1 00 00
	00		 je	 $LN92@LoadInt_e
  00061	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00064	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00067	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006a	84 d2		 test	 dl, dl
  0006c	0f 84 9a 00 00
	00		 je	 $LN91@LoadInt_e
  00072	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00075	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00078	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007b	84 d2		 test	 dl, dl
  0007d	0f 84 83 00 00
	00		 je	 $LN90@LoadInt_e
  00083	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00086	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00089	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008c	84 d2		 test	 dl, dl
  0008e	74 70		 je	 SHORT $LN89@LoadInt_e
  00090	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00093	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  00096	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  00099	84 d2		 test	 dl, dl
  0009b	74 5d		 je	 SHORT $LN88@LoadInt_e
  0009d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a0	80 78 09 00	 cmp	 BYTE PTR [eax+9], 0
  000a4	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000a7	0f 84 81 00 00
	00		 je	 $LN1@LoadInt_e
  000ad	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000b0	84 d2		 test	 dl, dl
  000b2	74 40		 je	 SHORT $LN86@LoadInt_e
  000b4	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000b7	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000ba	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000bd	84 d2		 test	 dl, dl
  000bf	74 2d		 je	 SHORT $LN85@LoadInt_e
  000c1	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000c4	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000c7	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000ca	84 d2		 test	 dl, dl
  000cc	74 1a		 je	 SHORT $LN84@LoadInt_e
  000ce	8a 40 0d	 mov	 al, BYTE PTR [eax+13]
  000d1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d4	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000d7	84 c0		 test	 al, al
  000d9	74 07		 je	 SHORT $LN83@LoadInt_e
  000db	34 ec		 xor	 al, -20			; ffffffecH
  000dd	88 45 f9	 mov	 BYTE PTR __k$[ebp+13], al
  000e0	eb 4c		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  000e2	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  000e6	eb 46		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  000e8	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  000ec	eb 40		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  000ee	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  000f2	eb 3a		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  000f4	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  000f8	eb 34		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  000fa	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  000fe	eb 2e		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  00100	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00104	eb 28		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  00106	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0010a	eb 22		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  0010c	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00110	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  00112	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00116	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  00118	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0011c	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  0011e	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00122	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  00124	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00128	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  0012a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  0012e	6a 02		 push	 2
  00130	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00133	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+9], 0
  00137	5a		 pop	 edx
$LL104@LoadInt_e:
  00138	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0013e	83 c0 04	 add	 eax, 4
  00141	4a		 dec	 edx
  00142	75 f4		 jne	 SHORT $LL104@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  00144	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00147	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0014b	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014e	50		 push	 eax
  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00155	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00158	33 cd		 xor	 ecx, ebp
  0015a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015f	c9		 leave
  00160	c2 08 00	 ret	 8
??$LoadInt_e@$09@ioINILoader@@QAEHAAY09$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<10>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BJ@@ioINILoader@@QAEXAAY0BJ@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<25>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BJ@@ioINILoader@@QAEXAAY0BJ@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -40					; size = 4
__k$ = -36						; size = 25
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BJ@@ioINILoader@@QAEXAAY0BJ@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<25>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d d8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 5f 02 00
	00		 je	 $LN96@LoadString
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 48 02 00
	00		 je	 $LN95@LoadString
  0003a	b1 ec		 mov	 cl, -20			; ffffffecH
  0003c	32 d1		 xor	 dl, cl
  0003e	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00041	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00044	84 d2		 test	 dl, dl
  00046	0f 84 30 02 00
	00		 je	 $LN94@LoadString
  0004c	b3 eb		 mov	 bl, -21			; ffffffebH
  0004e	32 d3		 xor	 dl, bl
  00050	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  00053	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00056	84 d2		 test	 dl, dl
  00058	0f 84 18 02 00
	00		 je	 $LN93@LoadString
  0005e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00061	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 01 02 00
	00		 je	 $LN92@LoadString
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 eb 01 00
	00		 je	 $LN91@LoadString
  00080	32 d1		 xor	 dl, cl
  00082	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  00085	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00088	84 d2		 test	 dl, dl
  0008a	0f 84 d6 01 00
	00		 je	 $LN90@LoadString
  00090	32 d3		 xor	 dl, bl
  00092	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  00095	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00098	84 d2		 test	 dl, dl
  0009a	0f 84 c0 01 00
	00		 je	 $LN89@LoadString
  000a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a3	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 a9 01 00
	00		 je	 $LN88@LoadString
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 93 01 00
	00		 je	 $LN87@LoadString
  000c2	32 d1		 xor	 dl, cl
  000c4	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 7e 01 00
	00		 je	 $LN86@LoadString
  000d2	32 d3		 xor	 dl, bl
  000d4	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 68 01 00
	00		 je	 $LN85@LoadString
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 51 01 00
	00		 je	 $LN84@LoadString
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 3b 01 00
	00		 je	 $LN83@LoadString
  00104	32 d1		 xor	 dl, cl
  00106	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 26 01 00
	00		 je	 $LN82@LoadString
  00114	32 d3		 xor	 dl, bl
  00116	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00119	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011c	84 d2		 test	 dl, dl
  0011e	0f 84 10 01 00
	00		 je	 $LN81@LoadString
  00124	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00127	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	0f 84 f9 00 00
	00		 je	 $LN80@LoadString
  00135	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00138	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  0013b	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013e	84 d2		 test	 dl, dl
  00140	0f 84 e3 00 00
	00		 je	 $LN79@LoadString
  00146	32 d1		 xor	 dl, cl
  00148	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  0014b	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0014e	84 d2		 test	 dl, dl
  00150	0f 84 ce 00 00
	00		 je	 $LN78@LoadString
  00156	32 d3		 xor	 dl, bl
  00158	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  0015b	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0015e	84 d2		 test	 dl, dl
  00160	0f 84 b8 00 00
	00		 je	 $LN77@LoadString
  00166	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00169	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  0016c	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0016f	84 d2		 test	 dl, dl
  00171	0f 84 a1 00 00
	00		 je	 $LN76@LoadString
  00177	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0017a	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  0017d	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00180	84 d2		 test	 dl, dl
  00182	0f 84 8b 00 00
	00		 je	 $LN75@LoadString
  00188	32 d1		 xor	 dl, cl
  0018a	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  0018d	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00190	84 d2		 test	 dl, dl
  00192	74 7a		 je	 SHORT $LN74@LoadString
  00194	32 d3		 xor	 dl, bl
  00196	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00199	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0019c	84 d2		 test	 dl, dl
  0019e	74 68		 je	 SHORT $LN73@LoadString
  001a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001a3	80 78 18 00	 cmp	 BYTE PTR [eax+24], 0
  001a7	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001aa	0f 84 dc 00 00
	00		 je	 $LN111@LoadString
  001b0	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001b3	84 d2		 test	 dl, dl
  001b5	74 49		 je	 SHORT $LN71@LoadString
  001b7	32 d1		 xor	 dl, cl
  001b9	88 55 f5	 mov	 BYTE PTR __k$[ebp+25], dl
  001bc	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001bf	84 d2		 test	 dl, dl
  001c1	74 35		 je	 SHORT $LN70@LoadString
  001c3	32 d3		 xor	 dl, bl
  001c5	88 55 f6	 mov	 BYTE PTR __k$[ebp+26], dl
  001c8	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001cb	84 d2		 test	 dl, dl
  001cd	74 20		 je	 SHORT $LN69@LoadString
  001cf	8a 40 1c	 mov	 al, BYTE PTR [eax+28]
  001d2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001d5	88 55 f7	 mov	 BYTE PTR __k$[ebp+27], dl
  001d8	84 c0		 test	 al, al
  001da	74 0a		 je	 SHORT $LN68@LoadString
  001dc	34 ed		 xor	 al, -19			; ffffffedH
  001de	88 45 f8	 mov	 BYTE PTR __k$[ebp+28], al
  001e1	e9 a6 00 00 00	 jmp	 $LN111@LoadString
$LN68@LoadString:
  001e6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  001ea	e9 9d 00 00 00	 jmp	 $LN111@LoadString
$LN69@LoadString:
  001ef	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001f3	e9 94 00 00 00	 jmp	 $LN111@LoadString
$LN70@LoadString:
  001f8	88 5d f6	 mov	 BYTE PTR __k$[ebp+26], bl
  001fb	e9 8c 00 00 00	 jmp	 $LN111@LoadString
$LN71@LoadString:
  00200	88 4d f5	 mov	 BYTE PTR __k$[ebp+25], cl
  00203	e9 84 00 00 00	 jmp	 $LN111@LoadString
$LN73@LoadString:
  00208	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  0020c	eb 7e		 jmp	 SHORT $LN111@LoadString
$LN74@LoadString:
  0020e	88 5d f2	 mov	 BYTE PTR __k$[ebp+22], bl
  00211	eb 79		 jmp	 SHORT $LN111@LoadString
$LN75@LoadString:
  00213	88 4d f1	 mov	 BYTE PTR __k$[ebp+21], cl
  00216	eb 74		 jmp	 SHORT $LN111@LoadString
$LN76@LoadString:
  00218	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0021c	eb 6e		 jmp	 SHORT $LN111@LoadString
$LN77@LoadString:
  0021e	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00222	eb 68		 jmp	 SHORT $LN111@LoadString
$LN78@LoadString:
  00224	88 5d ee	 mov	 BYTE PTR __k$[ebp+18], bl
  00227	eb 63		 jmp	 SHORT $LN111@LoadString
$LN79@LoadString:
  00229	88 4d ed	 mov	 BYTE PTR __k$[ebp+17], cl
  0022c	eb 5e		 jmp	 SHORT $LN111@LoadString
$LN80@LoadString:
  0022e	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00232	eb 58		 jmp	 SHORT $LN111@LoadString
$LN81@LoadString:
  00234	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00238	eb 52		 jmp	 SHORT $LN111@LoadString
$LN82@LoadString:
  0023a	88 5d ea	 mov	 BYTE PTR __k$[ebp+14], bl
  0023d	eb 4d		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  0023f	88 4d e9	 mov	 BYTE PTR __k$[ebp+13], cl
  00242	eb 48		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  00244	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00248	eb 42		 jmp	 SHORT $LN111@LoadString
$LN85@LoadString:
  0024a	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0024e	eb 3c		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  00250	88 5d e6	 mov	 BYTE PTR __k$[ebp+10], bl
  00253	eb 37		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  00255	88 4d e5	 mov	 BYTE PTR __k$[ebp+9], cl
  00258	eb 32		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  0025a	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0025e	eb 2c		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  00260	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00264	eb 26		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  00266	88 5d e2	 mov	 BYTE PTR __k$[ebp+6], bl
  00269	eb 21		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  0026b	88 4d e1	 mov	 BYTE PTR __k$[ebp+5], cl
  0026e	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  00270	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00274	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  00276	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0027a	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  0027c	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00280	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  00282	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00286	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  00288	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  0028c	6a 06		 push	 6
  0028e	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  00291	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+24], 0
  00295	5a		 pop	 edx
$LL104@LoadString:
  00296	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0029c	83 c0 04	 add	 eax, 4
  0029f	4a		 dec	 edx
  002a0	75 f4		 jne	 SHORT $LL104@LoadString

; 163  : 		LoadString(_k, d, b, i);

  002a2	ff 75 14	 push	 DWORD PTR _i$[ebp]
  002a5	8b 4d d8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  002a8	57		 push	 edi
  002a9	56		 push	 esi
  002aa	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002ad	50		 push	 eax
  002ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  002b4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b7	5f		 pop	 edi
  002b8	5e		 pop	 esi
  002b9	33 cd		 xor	 ecx, ebp
  002bb	5b		 pop	 ebx
  002bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c1	c9		 leave
  002c2	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BJ@@ioINILoader@@QAEXAAY0BJ@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<25>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0M@@ioINILoader@@QAEXAAY0M@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<12>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0M@@ioINILoader@@QAEXAAY0M@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -24					; size = 4
__k$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0M@@ioINILoader@@QAEXAAY0M@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<12>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 32 01 00
	00		 je	 $LN96@LoadString@2
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 1b 01 00
	00		 je	 $LN95@LoadString@2
  00039	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003c	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  0003f	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00042	84 d2		 test	 dl, dl
  00044	0f 84 04 01 00
	00		 je	 $LN94@LoadString@2
  0004a	b1 eb		 mov	 cl, -21			; ffffffebH
  0004c	32 d1		 xor	 dl, cl
  0004e	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 ec 00 00
	00		 je	 $LN93@LoadString@2
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 d5 00 00
	00		 je	 $LN92@LoadString@2
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 be 00 00
	00		 je	 $LN91@LoadString@2
  0007e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00081	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00084	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00087	84 d2		 test	 dl, dl
  00089	0f 84 a8 00 00
	00		 je	 $LN90@LoadString@2
  0008f	32 d1		 xor	 dl, cl
  00091	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 92 00 00
	00		 je	 $LN89@LoadString@2
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	74 7f		 je	 SHORT $LN88@LoadString@2
  000ac	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000af	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000b2	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b5	84 d2		 test	 dl, dl
  000b7	74 6c		 je	 SHORT $LN87@LoadString@2
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	74 5a		 je	 SHORT $LN86@LoadString@2
  000c6	32 d1		 xor	 dl, cl
  000c8	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000cc	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	0f 84 89 00 00
	00		 je	 $LN111@LoadString@2
  000d5	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d8	84 d2		 test	 dl, dl
  000da	74 3e		 je	 SHORT $LN84@LoadString@2
  000dc	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000df	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000e2	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000e5	84 d2		 test	 dl, dl
  000e7	74 2b		 je	 SHORT $LN83@LoadString@2
  000e9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ec	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000ef	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f2	84 d2		 test	 dl, dl
  000f4	74 19		 je	 SHORT $LN82@LoadString@2
  000f6	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000f9	32 d1		 xor	 dl, cl
  000fb	88 55 fa	 mov	 BYTE PTR __k$[ebp+14], dl
  000fe	84 c0		 test	 al, al
  00100	74 07		 je	 SHORT $LN81@LoadString@2
  00102	34 ea		 xor	 al, -22			; ffffffeaH
  00104	88 45 fb	 mov	 BYTE PTR __k$[ebp+15], al
  00107	eb 55		 jmp	 SHORT $LN111@LoadString@2
$LN81@LoadString@2:
  00109	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0010d	eb 4f		 jmp	 SHORT $LN111@LoadString@2
$LN82@LoadString@2:
  0010f	88 4d fa	 mov	 BYTE PTR __k$[ebp+14], cl
  00112	eb 4a		 jmp	 SHORT $LN111@LoadString@2
$LN83@LoadString@2:
  00114	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00118	eb 44		 jmp	 SHORT $LN111@LoadString@2
$LN84@LoadString@2:
  0011a	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0011e	eb 3e		 jmp	 SHORT $LN111@LoadString@2
$LN86@LoadString@2:
  00120	88 4d f6	 mov	 BYTE PTR __k$[ebp+10], cl
  00123	eb 39		 jmp	 SHORT $LN111@LoadString@2
$LN87@LoadString@2:
  00125	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00129	eb 33		 jmp	 SHORT $LN111@LoadString@2
$LN88@LoadString@2:
  0012b	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0012f	eb 2d		 jmp	 SHORT $LN111@LoadString@2
$LN89@LoadString@2:
  00131	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00135	eb 27		 jmp	 SHORT $LN111@LoadString@2
$LN90@LoadString@2:
  00137	88 4d f2	 mov	 BYTE PTR __k$[ebp+6], cl
  0013a	eb 22		 jmp	 SHORT $LN111@LoadString@2
$LN91@LoadString@2:
  0013c	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00140	eb 1c		 jmp	 SHORT $LN111@LoadString@2
$LN92@LoadString@2:
  00142	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00146	eb 16		 jmp	 SHORT $LN111@LoadString@2
$LN93@LoadString@2:
  00148	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0014c	eb 10		 jmp	 SHORT $LN111@LoadString@2
$LN94@LoadString@2:
  0014e	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00152	eb 0a		 jmp	 SHORT $LN111@LoadString@2
$LN95@LoadString@2:
  00154	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00158	eb 04		 jmp	 SHORT $LN111@LoadString@2
$LN96@LoadString@2:
  0015a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@2:
  0015e	6a 02		 push	 2
  00160	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00163	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+11], 0
  00167	5a		 pop	 edx
$LL104@LoadString@2:
  00168	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0016e	83 c0 04	 add	 eax, 4
  00171	4a		 dec	 edx
  00172	75 f4		 jne	 SHORT $LL104@LoadString@2
  00174	6a 08		 push	 8
  00176	58		 pop	 eax
$LL101@LoadString@2:
  00177	8b c8		 mov	 ecx, eax
  00179	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0017f	79 05		 jns	 SHORT $LN112@LoadString@2
  00181	49		 dec	 ecx
  00182	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00185	41		 inc	 ecx
$LN112@LoadString@2:
  00186	b2 ed		 mov	 dl, -19			; ffffffedH
  00188	2a d1		 sub	 dl, cl
  0018a	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  0018e	40		 inc	 eax
  0018f	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00192	7c e3		 jl	 SHORT $LL101@LoadString@2

; 163  : 		LoadString(_k, d, b, i);

  00194	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00197	8b 4d e8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0019a	57		 push	 edi
  0019b	56		 push	 esi
  0019c	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0019f	50		 push	 eax
  001a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  001a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a9	5f		 pop	 edi
  001aa	33 cd		 xor	 ecx, ebp
  001ac	5e		 pop	 esi
  001ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b2	c9		 leave
  001b3	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0M@@ioINILoader@@QAEXAAY0M@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<12>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<20>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
__k$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<20>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 dd 01 00
	00		 je	 $LN96@LoadString@3
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 c6 01 00
	00		 je	 $LN95@LoadString@3
  0003a	b3 ec		 mov	 bl, -20			; ffffffecH
  0003c	32 d3		 xor	 dl, bl
  0003e	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00041	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00044	84 d2		 test	 dl, dl
  00046	0f 84 ae 01 00
	00		 je	 $LN94@LoadString@3
  0004c	b1 eb		 mov	 cl, -21			; ffffffebH
  0004e	32 d1		 xor	 dl, cl
  00050	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00053	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00056	84 d2		 test	 dl, dl
  00058	0f 84 96 01 00
	00		 je	 $LN93@LoadString@3
  0005e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00061	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 7f 01 00
	00		 je	 $LN92@LoadString@3
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 69 01 00
	00		 je	 $LN91@LoadString@3
  00080	32 d3		 xor	 dl, bl
  00082	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  00085	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00088	84 d2		 test	 dl, dl
  0008a	0f 84 54 01 00
	00		 je	 $LN90@LoadString@3
  00090	32 d1		 xor	 dl, cl
  00092	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  00095	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00098	84 d2		 test	 dl, dl
  0009a	0f 84 3e 01 00
	00		 je	 $LN89@LoadString@3
  000a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a3	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 27 01 00
	00		 je	 $LN88@LoadString@3
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 11 01 00
	00		 je	 $LN87@LoadString@3
  000c2	32 d3		 xor	 dl, bl
  000c4	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 fc 00 00
	00		 je	 $LN86@LoadString@3
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 e6 00 00
	00		 je	 $LN85@LoadString@3
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 cf 00 00
	00		 je	 $LN84@LoadString@3
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 b9 00 00
	00		 je	 $LN83@LoadString@3
  00104	32 d3		 xor	 dl, bl
  00106	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 a4 00 00
	00		 je	 $LN82@LoadString@3
  00114	32 d1		 xor	 dl, cl
  00116	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00119	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011c	84 d2		 test	 dl, dl
  0011e	0f 84 8e 00 00
	00		 je	 $LN81@LoadString@3
  00124	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00127	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	74 7b		 je	 SHORT $LN80@LoadString@3
  00131	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00134	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00137	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013a	84 d2		 test	 dl, dl
  0013c	74 69		 je	 SHORT $LN79@LoadString@3
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	74 58		 je	 SHORT $LN78@LoadString@3
  0014a	32 d1		 xor	 dl, cl
  0014c	80 78 13 00	 cmp	 BYTE PTR [eax+19], 0
  00150	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	0f 84 b1 00 00
	00		 je	 $LN111@LoadString@3
  00159	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0015c	84 d2		 test	 dl, dl
  0015e	74 3c		 je	 SHORT $LN76@LoadString@3
  00160	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00163	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  00166	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00169	84 d2		 test	 dl, dl
  0016b	74 2a		 je	 SHORT $LN75@LoadString@3
  0016d	32 d3		 xor	 dl, bl
  0016f	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  00172	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00175	84 d2		 test	 dl, dl
  00177	74 19		 je	 SHORT $LN74@LoadString@3
  00179	8a 40 17	 mov	 al, BYTE PTR [eax+23]
  0017c	32 d1		 xor	 dl, cl
  0017e	88 55 fa	 mov	 BYTE PTR __k$[ebp+22], dl
  00181	84 c0		 test	 al, al
  00183	74 07		 je	 SHORT $LN73@LoadString@3
  00185	34 ea		 xor	 al, -22			; ffffffeaH
  00187	88 45 fb	 mov	 BYTE PTR __k$[ebp+23], al
  0018a	eb 7e		 jmp	 SHORT $LN111@LoadString@3
$LN73@LoadString@3:
  0018c	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00190	eb 78		 jmp	 SHORT $LN111@LoadString@3
$LN74@LoadString@3:
  00192	88 4d fa	 mov	 BYTE PTR __k$[ebp+22], cl
  00195	eb 73		 jmp	 SHORT $LN111@LoadString@3
$LN75@LoadString@3:
  00197	88 5d f9	 mov	 BYTE PTR __k$[ebp+21], bl
  0019a	eb 6e		 jmp	 SHORT $LN111@LoadString@3
$LN76@LoadString@3:
  0019c	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001a0	eb 68		 jmp	 SHORT $LN111@LoadString@3
$LN78@LoadString@3:
  001a2	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  001a5	eb 63		 jmp	 SHORT $LN111@LoadString@3
$LN79@LoadString@3:
  001a7	88 5d f5	 mov	 BYTE PTR __k$[ebp+17], bl
  001aa	eb 5e		 jmp	 SHORT $LN111@LoadString@3
$LN80@LoadString@3:
  001ac	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001b0	eb 58		 jmp	 SHORT $LN111@LoadString@3
$LN81@LoadString@3:
  001b2	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001b6	eb 52		 jmp	 SHORT $LN111@LoadString@3
$LN82@LoadString@3:
  001b8	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  001bb	eb 4d		 jmp	 SHORT $LN111@LoadString@3
$LN83@LoadString@3:
  001bd	88 5d f1	 mov	 BYTE PTR __k$[ebp+13], bl
  001c0	eb 48		 jmp	 SHORT $LN111@LoadString@3
$LN84@LoadString@3:
  001c2	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001c6	eb 42		 jmp	 SHORT $LN111@LoadString@3
$LN85@LoadString@3:
  001c8	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001cc	eb 3c		 jmp	 SHORT $LN111@LoadString@3
$LN86@LoadString@3:
  001ce	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001d1	eb 37		 jmp	 SHORT $LN111@LoadString@3
$LN87@LoadString@3:
  001d3	88 5d ed	 mov	 BYTE PTR __k$[ebp+9], bl
  001d6	eb 32		 jmp	 SHORT $LN111@LoadString@3
$LN88@LoadString@3:
  001d8	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001dc	eb 2c		 jmp	 SHORT $LN111@LoadString@3
$LN89@LoadString@3:
  001de	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001e2	eb 26		 jmp	 SHORT $LN111@LoadString@3
$LN90@LoadString@3:
  001e4	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001e7	eb 21		 jmp	 SHORT $LN111@LoadString@3
$LN91@LoadString@3:
  001e9	88 5d e9	 mov	 BYTE PTR __k$[ebp+5], bl
  001ec	eb 1c		 jmp	 SHORT $LN111@LoadString@3
$LN92@LoadString@3:
  001ee	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001f2	eb 16		 jmp	 SHORT $LN111@LoadString@3
$LN93@LoadString@3:
  001f4	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001f8	eb 10		 jmp	 SHORT $LN111@LoadString@3
$LN94@LoadString@3:
  001fa	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001fe	eb 0a		 jmp	 SHORT $LN111@LoadString@3
$LN95@LoadString@3:
  00200	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00204	eb 04		 jmp	 SHORT $LN111@LoadString@3
$LN96@LoadString@3:
  00206	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@3:
  0020a	6a 04		 push	 4
  0020c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0020f	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+19], 0
  00213	5a		 pop	 edx
$LL104@LoadString@3:
  00214	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0021a	83 c0 04	 add	 eax, 4
  0021d	4a		 dec	 edx
  0021e	75 f4		 jne	 SHORT $LL104@LoadString@3
  00220	6a 10		 push	 16			; 00000010H
  00222	58		 pop	 eax
$LL101@LoadString@3:
  00223	8b c8		 mov	 ecx, eax
  00225	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0022b	79 05		 jns	 SHORT $LN112@LoadString@3
  0022d	49		 dec	 ecx
  0022e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00231	41		 inc	 ecx
$LN112@LoadString@3:
  00232	b2 ed		 mov	 dl, -19			; ffffffedH
  00234	2a d1		 sub	 dl, cl
  00236	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  0023a	40		 inc	 eax
  0023b	83 f8 13	 cmp	 eax, 19			; 00000013H
  0023e	7c e3		 jl	 SHORT $LL101@LoadString@3

; 163  : 		LoadString(_k, d, b, i);

  00240	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00243	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00246	57		 push	 edi
  00247	56		 push	 esi
  00248	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0024b	50		 push	 eax
  0024c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00252	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00255	5f		 pop	 edi
  00256	5e		 pop	 esi
  00257	33 cd		 xor	 ecx, ebp
  00259	5b		 pop	 ebx
  0025a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025f	c9		 leave
  00260	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<20>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<19>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<19>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 cf 01 00
	00		 je	 $LN96@LoadString@4
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 b8 01 00
	00		 je	 $LN95@LoadString@4
  00039	b1 ec		 mov	 cl, -20			; ffffffecH
  0003b	32 d1		 xor	 dl, cl
  0003d	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00040	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00043	84 d2		 test	 dl, dl
  00045	0f 84 a0 01 00
	00		 je	 $LN94@LoadString@4
  0004b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004e	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 89 01 00
	00		 je	 $LN93@LoadString@4
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 72 01 00
	00		 je	 $LN92@LoadString@4
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 5c 01 00
	00		 je	 $LN91@LoadString@4
  0007e	32 d1		 xor	 dl, cl
  00080	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  00083	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00086	84 d2		 test	 dl, dl
  00088	0f 84 46 01 00
	00		 je	 $LN90@LoadString@4
  0008e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00091	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 2f 01 00
	00		 je	 $LN89@LoadString@4
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 18 01 00
	00		 je	 $LN88@LoadString@4
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 02 01 00
	00		 je	 $LN87@LoadString@4
  000c1	32 d1		 xor	 dl, cl
  000c3	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000c6	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c9	84 d2		 test	 dl, dl
  000cb	0f 84 ec 00 00
	00		 je	 $LN86@LoadString@4
  000d1	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 d5 00 00
	00		 je	 $LN85@LoadString@4
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 be 00 00
	00		 je	 $LN84@LoadString@4
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 a8 00 00
	00		 je	 $LN83@LoadString@4
  00104	32 d1		 xor	 dl, cl
  00106	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 92 00 00
	00		 je	 $LN82@LoadString@4
  00114	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00117	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0011a	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011d	84 d2		 test	 dl, dl
  0011f	74 7f		 je	 SHORT $LN81@LoadString@4
  00121	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00124	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00127	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012a	84 d2		 test	 dl, dl
  0012c	74 6c		 je	 SHORT $LN80@LoadString@4
  0012e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00131	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00134	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00137	84 d2		 test	 dl, dl
  00139	74 5a		 je	 SHORT $LN79@LoadString@4
  0013b	32 d1		 xor	 dl, cl
  0013d	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00141	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	0f 84 b1 00 00
	00		 je	 $LN111@LoadString@4
  0014a	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0014d	84 d2		 test	 dl, dl
  0014f	74 3e		 je	 SHORT $LN77@LoadString@4
  00151	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00154	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  00157	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0015a	84 d2		 test	 dl, dl
  0015c	74 2b		 je	 SHORT $LN76@LoadString@4
  0015e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00161	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  00164	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00167	84 d2		 test	 dl, dl
  00169	74 19		 je	 SHORT $LN75@LoadString@4
  0016b	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  0016e	32 d1		 xor	 dl, cl
  00170	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  00173	84 c0		 test	 al, al
  00175	74 07		 je	 SHORT $LN74@LoadString@4
  00177	34 eb		 xor	 al, -21			; ffffffebH
  00179	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  0017c	eb 7d		 jmp	 SHORT $LN111@LoadString@4
$LN74@LoadString@4:
  0017e	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  00182	eb 77		 jmp	 SHORT $LN111@LoadString@4
$LN75@LoadString@4:
  00184	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  00187	eb 72		 jmp	 SHORT $LN111@LoadString@4
$LN76@LoadString@4:
  00189	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0018d	eb 6c		 jmp	 SHORT $LN111@LoadString@4
$LN77@LoadString@4:
  0018f	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00193	eb 66		 jmp	 SHORT $LN111@LoadString@4
$LN79@LoadString@4:
  00195	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00198	eb 61		 jmp	 SHORT $LN111@LoadString@4
$LN80@LoadString@4:
  0019a	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0019e	eb 5b		 jmp	 SHORT $LN111@LoadString@4
$LN81@LoadString@4:
  001a0	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001a4	eb 55		 jmp	 SHORT $LN111@LoadString@4
$LN82@LoadString@4:
  001a6	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001aa	eb 4f		 jmp	 SHORT $LN111@LoadString@4
$LN83@LoadString@4:
  001ac	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001af	eb 4a		 jmp	 SHORT $LN111@LoadString@4
$LN84@LoadString@4:
  001b1	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001b5	eb 44		 jmp	 SHORT $LN111@LoadString@4
$LN85@LoadString@4:
  001b7	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001bb	eb 3e		 jmp	 SHORT $LN111@LoadString@4
$LN86@LoadString@4:
  001bd	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001c1	eb 38		 jmp	 SHORT $LN111@LoadString@4
$LN87@LoadString@4:
  001c3	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001c6	eb 33		 jmp	 SHORT $LN111@LoadString@4
$LN88@LoadString@4:
  001c8	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001cc	eb 2d		 jmp	 SHORT $LN111@LoadString@4
$LN89@LoadString@4:
  001ce	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001d2	eb 27		 jmp	 SHORT $LN111@LoadString@4
$LN90@LoadString@4:
  001d4	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d8	eb 21		 jmp	 SHORT $LN111@LoadString@4
$LN91@LoadString@4:
  001da	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001dd	eb 1c		 jmp	 SHORT $LN111@LoadString@4
$LN92@LoadString@4:
  001df	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001e3	eb 16		 jmp	 SHORT $LN111@LoadString@4
$LN93@LoadString@4:
  001e5	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e9	eb 10		 jmp	 SHORT $LN111@LoadString@4
$LN94@LoadString@4:
  001eb	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001ef	eb 0a		 jmp	 SHORT $LN111@LoadString@4
$LN95@LoadString@4:
  001f1	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001f5	eb 04		 jmp	 SHORT $LN111@LoadString@4
$LN96@LoadString@4:
  001f7	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@4:
  001fb	6a 04		 push	 4
  001fd	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00200	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  00204	5a		 pop	 edx
$LL104@LoadString@4:
  00205	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0020b	83 c0 04	 add	 eax, 4
  0020e	4a		 dec	 edx
  0020f	75 f4		 jne	 SHORT $LL104@LoadString@4
  00211	6a 10		 push	 16			; 00000010H
  00213	58		 pop	 eax
$LL101@LoadString@4:
  00214	8b c8		 mov	 ecx, eax
  00216	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0021c	79 05		 jns	 SHORT $LN112@LoadString@4
  0021e	49		 dec	 ecx
  0021f	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00222	41		 inc	 ecx
$LN112@LoadString@4:
  00223	b2 ed		 mov	 dl, -19			; ffffffedH
  00225	2a d1		 sub	 dl, cl
  00227	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  0022b	40		 inc	 eax
  0022c	83 f8 12	 cmp	 eax, 18			; 00000012H
  0022f	7c e3		 jl	 SHORT $LL101@LoadString@4

; 163  : 		LoadString(_k, d, b, i);

  00231	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00234	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00237	57		 push	 edi
  00238	56		 push	 esi
  00239	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0023c	50		 push	 eax
  0023d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00243	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00246	5f		 pop	 edi
  00247	33 cd		 xor	 ecx, ebp
  00249	5e		 pop	 esi
  0024a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024f	c9		 leave
  00250	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<19>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BC@@ioINILoader@@QAEXAAY0BC@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<18>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BC@@ioINILoader@@QAEXAAY0BC@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
__k$ = -28						; size = 18
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BC@@ioINILoader@@QAEXAAY0BC@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<18>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 be 01 00
	00		 je	 $LN96@LoadString@5
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 a7 01 00
	00		 je	 $LN95@LoadString@5
  00039	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003c	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  0003f	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00042	84 d2		 test	 dl, dl
  00044	0f 84 90 01 00
	00		 je	 $LN94@LoadString@5
  0004a	b1 eb		 mov	 cl, -21			; ffffffebH
  0004c	32 d1		 xor	 dl, cl
  0004e	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 78 01 00
	00		 je	 $LN93@LoadString@5
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 61 01 00
	00		 je	 $LN92@LoadString@5
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 4a 01 00
	00		 je	 $LN91@LoadString@5
  0007e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00081	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  00084	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00087	84 d2		 test	 dl, dl
  00089	0f 84 34 01 00
	00		 je	 $LN90@LoadString@5
  0008f	32 d1		 xor	 dl, cl
  00091	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 1e 01 00
	00		 je	 $LN89@LoadString@5
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 07 01 00
	00		 je	 $LN88@LoadString@5
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 f0 00 00
	00		 je	 $LN87@LoadString@5
  000c1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000c4	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 da 00 00
	00		 je	 $LN86@LoadString@5
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 c4 00 00
	00		 je	 $LN85@LoadString@5
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 ad 00 00
	00		 je	 $LN84@LoadString@5
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 96 00 00
	00		 je	 $LN83@LoadString@5
  00104	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00107	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  0010a	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010d	84 d2		 test	 dl, dl
  0010f	0f 84 80 00 00
	00		 je	 $LN82@LoadString@5
  00115	32 d1		 xor	 dl, cl
  00117	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0011a	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011d	84 d2		 test	 dl, dl
  0011f	74 6e		 je	 SHORT $LN81@LoadString@5
  00121	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00124	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00127	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012a	84 d2		 test	 dl, dl
  0012c	74 5b		 je	 SHORT $LN80@LoadString@5
  0012e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00131	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  00135	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00138	0f 84 ac 00 00
	00		 je	 $LN111@LoadString@5
  0013e	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00141	84 d2		 test	 dl, dl
  00143	74 3f		 je	 SHORT $LN78@LoadString@5
  00145	32 d1		 xor	 dl, cl
  00147	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0014a	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0014d	84 d2		 test	 dl, dl
  0014f	74 2d		 je	 SHORT $LN77@LoadString@5
  00151	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00154	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  00157	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0015a	84 d2		 test	 dl, dl
  0015c	74 1a		 je	 SHORT $LN76@LoadString@5
  0015e	8a 40 15	 mov	 al, BYTE PTR [eax+21]
  00161	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00164	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  00167	84 c0		 test	 al, al
  00169	74 07		 je	 SHORT $LN75@LoadString@5
  0016b	34 ec		 xor	 al, -20			; ffffffecH
  0016d	88 45 f9	 mov	 BYTE PTR __k$[ebp+21], al
  00170	eb 78		 jmp	 SHORT $LN111@LoadString@5
$LN75@LoadString@5:
  00172	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  00176	eb 72		 jmp	 SHORT $LN111@LoadString@5
$LN76@LoadString@5:
  00178	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0017c	eb 6c		 jmp	 SHORT $LN111@LoadString@5
$LN77@LoadString@5:
  0017e	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00182	eb 66		 jmp	 SHORT $LN111@LoadString@5
$LN78@LoadString@5:
  00184	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  00187	eb 61		 jmp	 SHORT $LN111@LoadString@5
$LN80@LoadString@5:
  00189	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0018d	eb 5b		 jmp	 SHORT $LN111@LoadString@5
$LN81@LoadString@5:
  0018f	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00193	eb 55		 jmp	 SHORT $LN111@LoadString@5
$LN82@LoadString@5:
  00195	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  00198	eb 50		 jmp	 SHORT $LN111@LoadString@5
$LN83@LoadString@5:
  0019a	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  0019e	eb 4a		 jmp	 SHORT $LN111@LoadString@5
$LN84@LoadString@5:
  001a0	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001a4	eb 44		 jmp	 SHORT $LN111@LoadString@5
$LN85@LoadString@5:
  001a6	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001aa	eb 3e		 jmp	 SHORT $LN111@LoadString@5
$LN86@LoadString@5:
  001ac	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001af	eb 39		 jmp	 SHORT $LN111@LoadString@5
$LN87@LoadString@5:
  001b1	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  001b5	eb 33		 jmp	 SHORT $LN111@LoadString@5
$LN88@LoadString@5:
  001b7	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001bb	eb 2d		 jmp	 SHORT $LN111@LoadString@5
$LN89@LoadString@5:
  001bd	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001c1	eb 27		 jmp	 SHORT $LN111@LoadString@5
$LN90@LoadString@5:
  001c3	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001c6	eb 22		 jmp	 SHORT $LN111@LoadString@5
$LN91@LoadString@5:
  001c8	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  001cc	eb 1c		 jmp	 SHORT $LN111@LoadString@5
$LN92@LoadString@5:
  001ce	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001d2	eb 16		 jmp	 SHORT $LN111@LoadString@5
$LN93@LoadString@5:
  001d4	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001d8	eb 10		 jmp	 SHORT $LN111@LoadString@5
$LN94@LoadString@5:
  001da	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001de	eb 0a		 jmp	 SHORT $LN111@LoadString@5
$LN95@LoadString@5:
  001e0	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001e4	eb 04		 jmp	 SHORT $LN111@LoadString@5
$LN96@LoadString@5:
  001e6	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@5:
  001ea	6a 04		 push	 4
  001ec	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001ef	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+17], 0
  001f3	5a		 pop	 edx
$LL104@LoadString@5:
  001f4	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001fa	83 c0 04	 add	 eax, 4
  001fd	4a		 dec	 edx
  001fe	75 f4		 jne	 SHORT $LL104@LoadString@5

; 163  : 		LoadString(_k, d, b, i);

  00200	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00203	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00206	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0020a	57		 push	 edi
  0020b	56		 push	 esi
  0020c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0020f	50		 push	 eax
  00210	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00216	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00219	5f		 pop	 edi
  0021a	33 cd		 xor	 ecx, ebp
  0021c	5e		 pop	 esi
  0021d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00222	c9		 leave
  00223	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BC@@ioINILoader@@QAEXAAY0BC@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<18>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BK@@ioINILoader@@QAE_NAAY0BK@$$CBD_N@Z ; ioINILoader::LoadBool_e<26>
EXTRN	__imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0BK@@ioINILoader@@QAE_NAAY0BK@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -36						; size = 26
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BK@@ioINILoader@@QAE_NAAY0BK@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<26>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 79 02 00
	00		 je	 $LN96@LoadBool_e
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 62 02 00
	00		 je	 $LN95@LoadBool_e
  00032	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00035	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 4b 02 00
	00		 je	 $LN94@LoadBool_e
  00043	b1 eb		 mov	 cl, -21			; ffffffebH
  00045	32 d1		 xor	 dl, cl
  00047	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 33 02 00
	00		 je	 $LN93@LoadBool_e
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 1b 02 00
	00		 je	 $LN92@LoadBool_e
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 04 02 00
	00		 je	 $LN91@LoadBool_e
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 ee 01 00
	00		 je	 $LN90@LoadBool_e
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 d9 01 00
	00		 je	 $LN89@LoadBool_e
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 c3 01 00
	00		 je	 $LN88@LoadBool_e
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 ac 01 00
	00		 je	 $LN87@LoadBool_e
  000ba	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bd	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	0f 84 96 01 00
	00		 je	 $LN86@LoadBool_e
  000cb	32 d1		 xor	 dl, cl
  000cd	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 81 01 00
	00		 je	 $LN85@LoadBool_e
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 6b 01 00
	00		 je	 $LN84@LoadBool_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 54 01 00
	00		 je	 $LN83@LoadBool_e
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 3e 01 00
	00		 je	 $LN82@LoadBool_e
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 29 01 00
	00		 je	 $LN81@LoadBool_e
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 13 01 00
	00		 je	 $LN80@LoadBool_e
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 fc 00 00
	00		 je	 $LN79@LoadBool_e
  0013e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00141	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00147	84 d2		 test	 dl, dl
  00149	0f 84 e6 00 00
	00		 je	 $LN78@LoadBool_e
  0014f	32 d1		 xor	 dl, cl
  00151	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 d1 00 00
	00		 je	 $LN77@LoadBool_e
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 bb 00 00
	00		 je	 $LN76@LoadBool_e
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 a4 00 00
	00		 je	 $LN75@LoadBool_e
  00180	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00183	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  00186	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00189	84 d2		 test	 dl, dl
  0018b	0f 84 8e 00 00
	00		 je	 $LN74@LoadBool_e
  00191	32 d1		 xor	 dl, cl
  00193	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00196	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00199	84 d2		 test	 dl, dl
  0019b	74 7d		 je	 SHORT $LN73@LoadBool_e
  0019d	32 d3		 xor	 dl, bl
  0019f	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001a2	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a5	84 d2		 test	 dl, dl
  001a7	74 68		 je	 SHORT $LN72@LoadBool_e
  001a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001ac	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  001b0	88 55 f4	 mov	 BYTE PTR __k$[ebp+24], dl
  001b3	0f 84 e5 00 00
	00		 je	 $LN1@LoadBool_e
  001b9	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001bc	84 d2		 test	 dl, dl
  001be	74 49		 je	 SHORT $LN70@LoadBool_e
  001c0	32 d1		 xor	 dl, cl
  001c2	88 55 f6	 mov	 BYTE PTR __k$[ebp+26], dl
  001c5	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001c8	84 d2		 test	 dl, dl
  001ca	74 35		 je	 SHORT $LN69@LoadBool_e
  001cc	32 d3		 xor	 dl, bl
  001ce	88 55 f7	 mov	 BYTE PTR __k$[ebp+27], dl
  001d1	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001d4	84 d2		 test	 dl, dl
  001d6	74 20		 je	 SHORT $LN68@LoadBool_e
  001d8	8a 40 1d	 mov	 al, BYTE PTR [eax+29]
  001db	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001de	88 55 f8	 mov	 BYTE PTR __k$[ebp+28], dl
  001e1	84 c0		 test	 al, al
  001e3	74 0a		 je	 SHORT $LN67@LoadBool_e
  001e5	34 ec		 xor	 al, -20			; ffffffecH
  001e7	88 45 f9	 mov	 BYTE PTR __k$[ebp+29], al
  001ea	e9 af 00 00 00	 jmp	 $LN1@LoadBool_e
$LN67@LoadBool_e:
  001ef	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+29], -20 ; ffffffecH
  001f3	e9 a6 00 00 00	 jmp	 $LN1@LoadBool_e
$LN68@LoadBool_e:
  001f8	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  001fc	e9 9d 00 00 00	 jmp	 $LN1@LoadBool_e
$LN69@LoadBool_e:
  00201	88 5d f7	 mov	 BYTE PTR __k$[ebp+27], bl
  00204	e9 95 00 00 00	 jmp	 $LN1@LoadBool_e
$LN70@LoadBool_e:
  00209	88 4d f6	 mov	 BYTE PTR __k$[ebp+26], cl
  0020c	e9 8d 00 00 00	 jmp	 $LN1@LoadBool_e
$LN72@LoadBool_e:
  00211	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  00215	e9 84 00 00 00	 jmp	 $LN1@LoadBool_e
$LN73@LoadBool_e:
  0021a	88 5d f3	 mov	 BYTE PTR __k$[ebp+23], bl
  0021d	eb 7f		 jmp	 SHORT $LN1@LoadBool_e
$LN74@LoadBool_e:
  0021f	88 4d f2	 mov	 BYTE PTR __k$[ebp+22], cl
  00222	eb 7a		 jmp	 SHORT $LN1@LoadBool_e
$LN75@LoadBool_e:
  00224	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  00228	eb 74		 jmp	 SHORT $LN1@LoadBool_e
$LN76@LoadBool_e:
  0022a	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0022e	eb 6e		 jmp	 SHORT $LN1@LoadBool_e
$LN77@LoadBool_e:
  00230	88 5d ef	 mov	 BYTE PTR __k$[ebp+19], bl
  00233	eb 69		 jmp	 SHORT $LN1@LoadBool_e
$LN78@LoadBool_e:
  00235	88 4d ee	 mov	 BYTE PTR __k$[ebp+18], cl
  00238	eb 64		 jmp	 SHORT $LN1@LoadBool_e
$LN79@LoadBool_e:
  0023a	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0023e	eb 5e		 jmp	 SHORT $LN1@LoadBool_e
$LN80@LoadBool_e:
  00240	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00244	eb 58		 jmp	 SHORT $LN1@LoadBool_e
$LN81@LoadBool_e:
  00246	88 5d eb	 mov	 BYTE PTR __k$[ebp+15], bl
  00249	eb 53		 jmp	 SHORT $LN1@LoadBool_e
$LN82@LoadBool_e:
  0024b	88 4d ea	 mov	 BYTE PTR __k$[ebp+14], cl
  0024e	eb 4e		 jmp	 SHORT $LN1@LoadBool_e
$LN83@LoadBool_e:
  00250	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00254	eb 48		 jmp	 SHORT $LN1@LoadBool_e
$LN84@LoadBool_e:
  00256	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0025a	eb 42		 jmp	 SHORT $LN1@LoadBool_e
$LN85@LoadBool_e:
  0025c	88 5d e7	 mov	 BYTE PTR __k$[ebp+11], bl
  0025f	eb 3d		 jmp	 SHORT $LN1@LoadBool_e
$LN86@LoadBool_e:
  00261	88 4d e6	 mov	 BYTE PTR __k$[ebp+10], cl
  00264	eb 38		 jmp	 SHORT $LN1@LoadBool_e
$LN87@LoadBool_e:
  00266	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0026a	eb 32		 jmp	 SHORT $LN1@LoadBool_e
$LN88@LoadBool_e:
  0026c	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00270	eb 2c		 jmp	 SHORT $LN1@LoadBool_e
$LN89@LoadBool_e:
  00272	88 5d e3	 mov	 BYTE PTR __k$[ebp+7], bl
  00275	eb 27		 jmp	 SHORT $LN1@LoadBool_e
$LN90@LoadBool_e:
  00277	88 4d e2	 mov	 BYTE PTR __k$[ebp+6], cl
  0027a	eb 22		 jmp	 SHORT $LN1@LoadBool_e
$LN91@LoadBool_e:
  0027c	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00280	eb 1c		 jmp	 SHORT $LN1@LoadBool_e
$LN92@LoadBool_e:
  00282	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00286	eb 16		 jmp	 SHORT $LN1@LoadBool_e
$LN93@LoadBool_e:
  00288	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0028c	eb 10		 jmp	 SHORT $LN1@LoadBool_e
$LN94@LoadBool_e:
  0028e	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00292	eb 0a		 jmp	 SHORT $LN1@LoadBool_e
$LN95@LoadBool_e:
  00294	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00298	eb 04		 jmp	 SHORT $LN1@LoadBool_e
$LN96@LoadBool_e:
  0029a	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e:
  0029e	6a 06		 push	 6
  002a0	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002a3	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+25], 0
  002a7	5a		 pop	 edx
$LL104@LoadBool_e:
  002a8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002ae	83 c0 04	 add	 eax, 4
  002b1	4a		 dec	 edx
  002b2	75 f4		 jne	 SHORT $LL104@LoadBool_e

; 103  : 		return LoadBool(_k, b);

  002b4	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  002b7	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  002bb	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002be	50		 push	 eax
  002bf	8b ce		 mov	 ecx, esi
  002c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  002c7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ca	5e		 pop	 esi
  002cb	33 cd		 xor	 ecx, ebp
  002cd	5b		 pop	 ebx
  002ce	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002d3	c9		 leave
  002d4	c2 08 00	 ret	 8
??$LoadBool_e@$0BK@@ioINILoader@@QAE_NAAY0BK@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<26>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BJ@@ioINILoader@@QAE_NAAY0BJ@$$CBD_N@Z ; ioINILoader::LoadBool_e<25>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0BJ@@ioINILoader@@QAE_NAAY0BJ@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -36						; size = 25
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BJ@@ioINILoader@@QAE_NAAY0BJ@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<25>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 5f 02 00
	00		 je	 $LN96@LoadBool_e@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 48 02 00
	00		 je	 $LN95@LoadBool_e@2
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 30 02 00
	00		 je	 $LN94@LoadBool_e@2
  00044	b3 eb		 mov	 bl, -21			; ffffffebH
  00046	32 d3		 xor	 dl, bl
  00048	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 18 02 00
	00		 je	 $LN93@LoadBool_e@2
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 01 02 00
	00		 je	 $LN92@LoadBool_e@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 eb 01 00
	00		 je	 $LN91@LoadBool_e@2
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 d6 01 00
	00		 je	 $LN90@LoadBool_e@2
  00088	32 d3		 xor	 dl, bl
  0008a	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 c0 01 00
	00		 je	 $LN89@LoadBool_e@2
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 a9 01 00
	00		 je	 $LN88@LoadBool_e@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 93 01 00
	00		 je	 $LN87@LoadBool_e@2
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 7e 01 00
	00		 je	 $LN86@LoadBool_e@2
  000ca	32 d3		 xor	 dl, bl
  000cc	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 68 01 00
	00		 je	 $LN85@LoadBool_e@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 51 01 00
	00		 je	 $LN84@LoadBool_e@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 3b 01 00
	00		 je	 $LN83@LoadBool_e@2
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 26 01 00
	00		 je	 $LN82@LoadBool_e@2
  0010c	32 d3		 xor	 dl, bl
  0010e	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 10 01 00
	00		 je	 $LN81@LoadBool_e@2
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 f9 00 00
	00		 je	 $LN80@LoadBool_e@2
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 e3 00 00
	00		 je	 $LN79@LoadBool_e@2
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 ce 00 00
	00		 je	 $LN78@LoadBool_e@2
  0014e	32 d3		 xor	 dl, bl
  00150	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 b8 00 00
	00		 je	 $LN77@LoadBool_e@2
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 a1 00 00
	00		 je	 $LN76@LoadBool_e@2
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 8b 00 00
	00		 je	 $LN75@LoadBool_e@2
  00180	32 d1		 xor	 dl, cl
  00182	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	74 7a		 je	 SHORT $LN74@LoadBool_e@2
  0018c	32 d3		 xor	 dl, bl
  0018e	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00191	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00194	84 d2		 test	 dl, dl
  00196	74 68		 je	 SHORT $LN73@LoadBool_e@2
  00198	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0019b	80 78 18 00	 cmp	 BYTE PTR [eax+24], 0
  0019f	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001a2	0f 84 dc 00 00
	00		 je	 $LN1@LoadBool_e@2
  001a8	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ab	84 d2		 test	 dl, dl
  001ad	74 49		 je	 SHORT $LN71@LoadBool_e@2
  001af	32 d1		 xor	 dl, cl
  001b1	88 55 f5	 mov	 BYTE PTR __k$[ebp+25], dl
  001b4	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001b7	84 d2		 test	 dl, dl
  001b9	74 35		 je	 SHORT $LN70@LoadBool_e@2
  001bb	32 d3		 xor	 dl, bl
  001bd	88 55 f6	 mov	 BYTE PTR __k$[ebp+26], dl
  001c0	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001c3	84 d2		 test	 dl, dl
  001c5	74 20		 je	 SHORT $LN69@LoadBool_e@2
  001c7	8a 40 1c	 mov	 al, BYTE PTR [eax+28]
  001ca	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001cd	88 55 f7	 mov	 BYTE PTR __k$[ebp+27], dl
  001d0	84 c0		 test	 al, al
  001d2	74 0a		 je	 SHORT $LN68@LoadBool_e@2
  001d4	34 ed		 xor	 al, -19			; ffffffedH
  001d6	88 45 f8	 mov	 BYTE PTR __k$[ebp+28], al
  001d9	e9 a6 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN68@LoadBool_e@2:
  001de	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  001e2	e9 9d 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN69@LoadBool_e@2:
  001e7	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001eb	e9 94 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN70@LoadBool_e@2:
  001f0	88 5d f6	 mov	 BYTE PTR __k$[ebp+26], bl
  001f3	e9 8c 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN71@LoadBool_e@2:
  001f8	88 4d f5	 mov	 BYTE PTR __k$[ebp+25], cl
  001fb	e9 84 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN73@LoadBool_e@2:
  00200	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00204	eb 7e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN74@LoadBool_e@2:
  00206	88 5d f2	 mov	 BYTE PTR __k$[ebp+22], bl
  00209	eb 79		 jmp	 SHORT $LN1@LoadBool_e@2
$LN75@LoadBool_e@2:
  0020b	88 4d f1	 mov	 BYTE PTR __k$[ebp+21], cl
  0020e	eb 74		 jmp	 SHORT $LN1@LoadBool_e@2
$LN76@LoadBool_e@2:
  00210	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00214	eb 6e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN77@LoadBool_e@2:
  00216	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0021a	eb 68		 jmp	 SHORT $LN1@LoadBool_e@2
$LN78@LoadBool_e@2:
  0021c	88 5d ee	 mov	 BYTE PTR __k$[ebp+18], bl
  0021f	eb 63		 jmp	 SHORT $LN1@LoadBool_e@2
$LN79@LoadBool_e@2:
  00221	88 4d ed	 mov	 BYTE PTR __k$[ebp+17], cl
  00224	eb 5e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN80@LoadBool_e@2:
  00226	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0022a	eb 58		 jmp	 SHORT $LN1@LoadBool_e@2
$LN81@LoadBool_e@2:
  0022c	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00230	eb 52		 jmp	 SHORT $LN1@LoadBool_e@2
$LN82@LoadBool_e@2:
  00232	88 5d ea	 mov	 BYTE PTR __k$[ebp+14], bl
  00235	eb 4d		 jmp	 SHORT $LN1@LoadBool_e@2
$LN83@LoadBool_e@2:
  00237	88 4d e9	 mov	 BYTE PTR __k$[ebp+13], cl
  0023a	eb 48		 jmp	 SHORT $LN1@LoadBool_e@2
$LN84@LoadBool_e@2:
  0023c	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00240	eb 42		 jmp	 SHORT $LN1@LoadBool_e@2
$LN85@LoadBool_e@2:
  00242	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00246	eb 3c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN86@LoadBool_e@2:
  00248	88 5d e6	 mov	 BYTE PTR __k$[ebp+10], bl
  0024b	eb 37		 jmp	 SHORT $LN1@LoadBool_e@2
$LN87@LoadBool_e@2:
  0024d	88 4d e5	 mov	 BYTE PTR __k$[ebp+9], cl
  00250	eb 32		 jmp	 SHORT $LN1@LoadBool_e@2
$LN88@LoadBool_e@2:
  00252	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00256	eb 2c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN89@LoadBool_e@2:
  00258	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0025c	eb 26		 jmp	 SHORT $LN1@LoadBool_e@2
$LN90@LoadBool_e@2:
  0025e	88 5d e2	 mov	 BYTE PTR __k$[ebp+6], bl
  00261	eb 21		 jmp	 SHORT $LN1@LoadBool_e@2
$LN91@LoadBool_e@2:
  00263	88 4d e1	 mov	 BYTE PTR __k$[ebp+5], cl
  00266	eb 1c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN92@LoadBool_e@2:
  00268	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0026c	eb 16		 jmp	 SHORT $LN1@LoadBool_e@2
$LN93@LoadBool_e@2:
  0026e	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00272	eb 10		 jmp	 SHORT $LN1@LoadBool_e@2
$LN94@LoadBool_e@2:
  00274	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00278	eb 0a		 jmp	 SHORT $LN1@LoadBool_e@2
$LN95@LoadBool_e@2:
  0027a	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0027e	eb 04		 jmp	 SHORT $LN1@LoadBool_e@2
$LN96@LoadBool_e@2:
  00280	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e@2:
  00284	6a 06		 push	 6
  00286	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  00289	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+24], 0
  0028d	5a		 pop	 edx
$LL104@LoadBool_e@2:
  0028e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00294	83 c0 04	 add	 eax, 4
  00297	4a		 dec	 edx
  00298	75 f4		 jne	 SHORT $LL104@LoadBool_e@2

; 103  : 		return LoadBool(_k, b);

  0029a	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  0029d	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002a0	50		 push	 eax
  002a1	8b ce		 mov	 ecx, esi
  002a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  002a9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ac	5e		 pop	 esi
  002ad	33 cd		 xor	 ecx, ebp
  002af	5b		 pop	 ebx
  002b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b5	c9		 leave
  002b6	c2 08 00	 ret	 8
??$LoadBool_e@$0BJ@@ioINILoader@@QAE_NAAY0BJ@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<25>
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	_rkLoader$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioWeapon@@UAEXAAVioINILoader@@@Z:PROC ; ioWeapon::LoadProperty
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iolimitattachweapon2.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioLimitAttachWeapon2@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_rkLoader$GSCopy$ = -300				; size = 4
_szBuf$ = -296						; size = 260
__k$534174 = -36					; size = 25
__k$534062 = -36					; size = 25
__k$533937 = -36					; size = 26
__k$533187 = -36					; size = 25
__k$533674 = -32					; size = 19
__k$533562 = -32					; size = 19
__k$533511 = -32					; size = 20
__k$533799 = -28					; size = 18
__k$533312 = -24					; size = 12
__k$533049 = -20					; size = 10
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioLimitAttachWeapon2@@UAEXAAVioINILoader@@@Z PROC ; ioLimitAttachWeapon2::LoadProperty, COMDAT
; _this$ = ecx

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 58   : 	ioWeapon::LoadProperty( rkLoader );

  00019	57		 push	 edi
  0001a	8b f1		 mov	 esi, ecx

; 75   : 	rkLoader.LoadString_e( "weapon_effect_end", "", szBuf, MAX_PATH );

  0001c	89 bd d4 fe ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], edi
  00022	e8 00 00 00 00	 call	 ?LoadProperty@ioWeapon@@UAEXAAVioINILoader@@@Z ; ioWeapon::LoadProperty
  00027	6a 02		 push	 2
  00029	c7 45 ec 81 85
	9d 8f		 mov	 DWORD PTR __k$533049[ebp], -1885502079 ; 8f9d8581H
  00030	c7 45 f0 b2 98
	82 87		 mov	 DWORD PTR __k$533049[ebp+4], -2021484366 ; 878298b2H
  00037	8d 45 ec	 lea	 eax, DWORD PTR __k$533049[ebp]
  0003a	66 c7 45 f4 88
	00		 mov	 WORD PTR __k$533049[ebp+8], 136 ; 00000088H
  00040	59		 pop	 ecx
$LL106@LoadProper:

; 59   : 
; 60   : 	char szBuf[MAX_PATH];
; 61   : 	m_dwLiveTime = rkLoader.LoadInt_e( "live_time", 0 );

  00041	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00047	83 c0 04	 add	 eax, 4
  0004a	49		 dec	 ecx
  0004b	75 f4		 jne	 SHORT $LL106@LoadProper
  0004d	80 75 f4 ed	 xor	 BYTE PTR __k$533049[ebp+8], -19 ; ffffffedH
  00051	51		 push	 ecx
  00052	8d 45 ec	 lea	 eax, DWORD PTR __k$533049[ebp]
  00055	50		 push	 eax
  00056	8b cf		 mov	 ecx, edi
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  0005e	6a 06		 push	 6
  00060	89 86 d8 04 00
	00		 mov	 DWORD PTR [esi+1240], eax

; 62   : 
; 63   : 	rkLoader.LoadString_e( "reduce_collision_by_buff", "", szBuf, MAX_PATH );

  00066	c7 45 dc 9f 89
	8f 9f		 mov	 DWORD PTR __k$533187[ebp], -1617983073 ; 9f8f899fH
  0006d	c7 45 e0 8e 89
	b4 89		 mov	 DWORD PTR __k$533187[ebp+4], -1984657010 ; 89b4898eH
  00074	c7 45 e4 82 80
	87 83		 mov	 DWORD PTR __k$533187[ebp+8], -2088271742 ; 83878082H
  0007b	c7 45 e8 9e 85
	84 84		 mov	 DWORD PTR __k$533187[ebp+12], -2071689826 ; 8484859eH
  00082	c7 45 ec b2 8e
	92 b5		 mov	 DWORD PTR __k$533187[ebp+16], -1248686414 ; b5928eb2H
  00089	c7 45 f0 8f 99
	8d 8c		 mov	 DWORD PTR __k$533187[ebp+20], -1936877169 ; 8c8d998fH
  00090	8d 45 dc	 lea	 eax, DWORD PTR __k$533187[ebp]
  00093	c6 45 f4 00	 mov	 BYTE PTR __k$533187[ebp+24], 0
  00097	59		 pop	 ecx
$LL212@LoadProper:
  00098	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0009e	83 c0 04	 add	 eax, 4
  000a1	49		 dec	 ecx
  000a2	75 f4		 jne	 SHORT $LL212@LoadProper
  000a4	68 04 01 00 00	 push	 260			; 00000104H
  000a9	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000af	50		 push	 eax
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  000b5	8d 45 dc	 lea	 eax, DWORD PTR __k$533187[ebp]
  000b8	8b cf		 mov	 ecx, edi
  000ba	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z
  000c0	50		 push	 eax
  000c1	ff d7		 call	 edi

; 64   : 	m_szReduceColByBuffName = szBuf;

  000c3	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  000c9	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000cf	50		 push	 eax
  000d0	8d 8e 94 08 00
	00		 lea	 ecx, DWORD PTR [esi+2196]
  000d6	ff d3		 call	 ebx
  000d8	6a 02		 push	 2

; 65   : 
; 66   : 	rkLoader.LoadString_e( "skill_sound", "", szBuf, MAX_PATH );

  000da	c7 45 e8 9e 87
	82 86		 mov	 DWORD PTR __k$533312[ebp], -2038265954 ; 8682879eH
  000e1	c7 45 ec 81 b3
	98 85		 mov	 DWORD PTR __k$533312[ebp+4], -2053590143 ; 8598b381H
  000e8	8d 45 e8	 lea	 eax, DWORD PTR __k$533312[ebp]
  000eb	c7 45 f0 98 82
	8f 00		 mov	 DWORD PTR __k$533312[ebp+8], 9405080 ; 008f8298H
  000f2	59		 pop	 ecx
$LL318@LoadProper:
  000f3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000f9	83 c0 04	 add	 eax, 4
  000fc	49		 dec	 ecx
  000fd	75 f4		 jne	 SHORT $LL318@LoadProper
  000ff	6a 08		 push	 8
  00101	58		 pop	 eax
$LL315@LoadProper:
  00102	8b c8		 mov	 ecx, eax
  00104	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0010a	79 05		 jns	 SHORT $LN1103@LoadProper
  0010c	49		 dec	 ecx
  0010d	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00110	41		 inc	 ecx
$LN1103@LoadProper:
  00111	b2 ed		 mov	 dl, -19			; ffffffedH
  00113	2a d1		 sub	 dl, cl
  00115	30 54 05 e8	 xor	 BYTE PTR __k$533312[ebp+eax], dl
  00119	40		 inc	 eax
  0011a	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0011d	7c e3		 jl	 SHORT $LL315@LoadProper
  0011f	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00125	68 04 01 00 00	 push	 260			; 00000104H
  0012a	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00130	50		 push	 eax
  00131	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00136	8d 45 e8	 lea	 eax, DWORD PTR __k$533312[ebp]
  00139	50		 push	 eax
  0013a	ff d7		 call	 edi

; 67   : 	m_szSkillSoundName = szBuf;

  0013c	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00142	50		 push	 eax
  00143	8d 8e a4 08 00
	00		 lea	 ecx, DWORD PTR [esi+2212]
  00149	ff d3		 call	 ebx
  0014b	6a 04		 push	 4

; 68   : 
; 69   : 	rkLoader.LoadString_e( "weapon_effect_stand", "", szBuf, MAX_PATH );

  0014d	c7 45 e0 9a 89
	8a 9a		 mov	 DWORD PTR __k$533511[ebp], -1702196838 ; 9a8a899aH
  00154	c7 45 e4 82 82
	b4 8f		 mov	 DWORD PTR __k$533511[ebp+4], -1883995518 ; 8fb48282H
  0015b	c7 45 e8 8b 8a
	8e 89		 mov	 DWORD PTR __k$533511[ebp+8], -1987147125 ; 898e8a8bH
  00162	c7 45 ec 99 b3
	98 9e		 mov	 DWORD PTR __k$533511[ebp+12], -1634159719 ; 9e98b399H
  00169	8d 45 e0	 lea	 eax, DWORD PTR __k$533511[ebp]
  0016c	c7 45 f0 8c 82
	8f 00		 mov	 DWORD PTR __k$533511[ebp+16], 9405068 ; 008f828cH
  00173	59		 pop	 ecx
$LL424@LoadProper:
  00174	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0017a	83 c0 04	 add	 eax, 4
  0017d	49		 dec	 ecx
  0017e	75 f4		 jne	 SHORT $LL424@LoadProper
  00180	6a 10		 push	 16			; 00000010H
  00182	58		 pop	 eax
$LL421@LoadProper:
  00183	8b c8		 mov	 ecx, eax
  00185	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0018b	79 05		 jns	 SHORT $LN1104@LoadProper
  0018d	49		 dec	 ecx
  0018e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00191	41		 inc	 ecx
$LN1104@LoadProper:
  00192	b2 ed		 mov	 dl, -19			; ffffffedH
  00194	2a d1		 sub	 dl, cl
  00196	30 54 05 e0	 xor	 BYTE PTR __k$533511[ebp+eax], dl
  0019a	40		 inc	 eax
  0019b	83 f8 13	 cmp	 eax, 19			; 00000013H
  0019e	7c e3		 jl	 SHORT $LL421@LoadProper
  001a0	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  001a6	68 04 01 00 00	 push	 260			; 00000104H
  001ab	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  001b1	50		 push	 eax
  001b2	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  001b7	8d 45 e0	 lea	 eax, DWORD PTR __k$533511[ebp]
  001ba	50		 push	 eax
  001bb	ff d7		 call	 edi

; 70   : 	m_szWeaponEffectStand = szBuf;

  001bd	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  001c3	50		 push	 eax
  001c4	8d 8e b8 08 00
	00		 lea	 ecx, DWORD PTR [esi+2232]
  001ca	ff d3		 call	 ebx
  001cc	6a 04		 push	 4

; 71   : 	rkLoader.LoadString_e( "weapon_effect_move", "", szBuf, MAX_PATH );

  001ce	c7 45 e0 9a 89
	8a 9a		 mov	 DWORD PTR __k$533562[ebp], -1702196838 ; 9a8a899aH
  001d5	c7 45 e4 82 82
	b4 8f		 mov	 DWORD PTR __k$533562[ebp+4], -1883995518 ; 8fb48282H
  001dc	c7 45 e8 8b 8a
	8e 89		 mov	 DWORD PTR __k$533562[ebp+8], -1987147125 ; 898e8a8bH
  001e3	c7 45 ec 99 b3
	86 85		 mov	 DWORD PTR __k$533562[ebp+12], -2054769767 ; 8586b399H
  001ea	66 c7 45 f0 9b
	89		 mov	 WORD PTR __k$533562[ebp+16], 35227 ; 0000899bH
  001f0	8d 45 e0	 lea	 eax, DWORD PTR __k$533562[ebp]
  001f3	c6 45 f2 00	 mov	 BYTE PTR __k$533562[ebp+18], 0
  001f7	59		 pop	 ecx
$LL530@LoadProper:
  001f8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001fe	83 c0 04	 add	 eax, 4
  00201	49		 dec	 ecx
  00202	75 f4		 jne	 SHORT $LL530@LoadProper
  00204	6a 10		 push	 16			; 00000010H
  00206	58		 pop	 eax
$LL527@LoadProper:
  00207	8b c8		 mov	 ecx, eax
  00209	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0020f	79 05		 jns	 SHORT $LN1105@LoadProper
  00211	49		 dec	 ecx
  00212	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00215	41		 inc	 ecx
$LN1105@LoadProper:
  00216	b2 ed		 mov	 dl, -19			; ffffffedH
  00218	2a d1		 sub	 dl, cl
  0021a	30 54 05 e0	 xor	 BYTE PTR __k$533562[ebp+eax], dl
  0021e	40		 inc	 eax
  0021f	83 f8 12	 cmp	 eax, 18			; 00000012H
  00222	7c e3		 jl	 SHORT $LL527@LoadProper
  00224	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0022a	68 04 01 00 00	 push	 260			; 00000104H
  0022f	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00235	50		 push	 eax
  00236	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0023b	8d 45 e0	 lea	 eax, DWORD PTR __k$533562[ebp]
  0023e	50		 push	 eax
  0023f	ff d7		 call	 edi

; 72   : 	m_szWeaponEffectMove = szBuf;

  00241	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00247	50		 push	 eax
  00248	8d 8e c8 08 00
	00		 lea	 ecx, DWORD PTR [esi+2248]
  0024e	ff d3		 call	 ebx
  00250	6a 04		 push	 4

; 73   : 	rkLoader.LoadString_e( "weapon_effect_jump", "", szBuf, MAX_PATH );

  00252	c7 45 e0 9a 89
	8a 9a		 mov	 DWORD PTR __k$533674[ebp], -1702196838 ; 9a8a899aH
  00259	c7 45 e4 82 82
	b4 8f		 mov	 DWORD PTR __k$533674[ebp+4], -1883995518 ; 8fb48282H
  00260	c7 45 e8 8b 8a
	8e 89		 mov	 DWORD PTR __k$533674[ebp+8], -1987147125 ; 898e8a8bH
  00267	c7 45 ec 99 b3
	81 9f		 mov	 DWORD PTR __k$533674[ebp+12], -1618889831 ; 9f81b399H
  0026e	66 c7 45 f0 80
	9c		 mov	 WORD PTR __k$533674[ebp+16], 40064 ; 00009c80H
  00274	8d 45 e0	 lea	 eax, DWORD PTR __k$533674[ebp]
  00277	c6 45 f2 00	 mov	 BYTE PTR __k$533674[ebp+18], 0
  0027b	59		 pop	 ecx
$LL636@LoadProper:
  0027c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00282	83 c0 04	 add	 eax, 4
  00285	49		 dec	 ecx
  00286	75 f4		 jne	 SHORT $LL636@LoadProper
  00288	6a 10		 push	 16			; 00000010H
  0028a	58		 pop	 eax
$LL633@LoadProper:
  0028b	8b c8		 mov	 ecx, eax
  0028d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00293	79 05		 jns	 SHORT $LN1106@LoadProper
  00295	49		 dec	 ecx
  00296	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00299	41		 inc	 ecx
$LN1106@LoadProper:
  0029a	b2 ed		 mov	 dl, -19			; ffffffedH
  0029c	2a d1		 sub	 dl, cl
  0029e	30 54 05 e0	 xor	 BYTE PTR __k$533674[ebp+eax], dl
  002a2	40		 inc	 eax
  002a3	83 f8 12	 cmp	 eax, 18			; 00000012H
  002a6	7c e3		 jl	 SHORT $LL633@LoadProper
  002a8	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  002ae	68 04 01 00 00	 push	 260			; 00000104H
  002b3	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  002b9	50		 push	 eax
  002ba	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  002bf	8d 45 e0	 lea	 eax, DWORD PTR __k$533674[ebp]
  002c2	50		 push	 eax
  002c3	ff d7		 call	 edi

; 74   : 	m_szWeaponEffectJump = szBuf;

  002c5	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  002cb	50		 push	 eax
  002cc	8d 8e d8 08 00
	00		 lea	 ecx, DWORD PTR [esi+2264]
  002d2	ff d3		 call	 ebx
  002d4	6a 04		 push	 4

; 75   : 	rkLoader.LoadString_e( "weapon_effect_end", "", szBuf, MAX_PATH );

  002d6	c7 45 e4 9a 89
	8a 9a		 mov	 DWORD PTR __k$533799[ebp], -1702196838 ; 9a8a899aH
  002dd	c7 45 e8 82 82
	b4 8f		 mov	 DWORD PTR __k$533799[ebp+4], -1883995518 ; 8fb48282H
  002e4	c7 45 ec 8b 8a
	8e 89		 mov	 DWORD PTR __k$533799[ebp+8], -1987147125 ; 898e8a8bH
  002eb	c7 45 f0 99 b3
	8e 84		 mov	 DWORD PTR __k$533799[ebp+12], -2071022695 ; 848eb399H
  002f2	8d 45 e4	 lea	 eax, DWORD PTR __k$533799[ebp]
  002f5	66 c7 45 f4 89
	00		 mov	 WORD PTR __k$533799[ebp+16], 137 ; 00000089H
  002fb	59		 pop	 ecx
$LL742@LoadProper:
  002fc	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00302	83 c0 04	 add	 eax, 4
  00305	49		 dec	 ecx
  00306	75 f4		 jne	 SHORT $LL742@LoadProper
  00308	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0030e	80 75 f4 ed	 xor	 BYTE PTR __k$533799[ebp+16], -19 ; ffffffedH
  00312	68 04 01 00 00	 push	 260			; 00000104H
  00317	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0031d	50		 push	 eax
  0031e	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00323	8d 45 e4	 lea	 eax, DWORD PTR __k$533799[ebp]
  00326	50		 push	 eax
  00327	ff d7		 call	 edi

; 76   : 	m_szWeaponEffectEnd = szBuf;

  00329	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0032f	50		 push	 eax
  00330	8d 8e e8 08 00
	00		 lea	 ecx, DWORD PTR [esi+2280]
  00336	ff d3		 call	 ebx
  00338	6a 06		 push	 6

; 77   : 
; 78   : 	m_bIgnoreColOnDelay	= rkLoader.LoadBool_e( "ignore_collision_on_delay", false );

  0033a	c7 45 dc 84 8b
	85 85		 mov	 DWORD PTR __k$533937[ebp], -2054845564 ; 85858b84H
  00341	c7 45 e0 9f 89
	b4 89		 mov	 DWORD PTR __k$533937[ebp+4], -1984656993 ; 89b4899fH
  00348	c7 45 e4 82 80
	87 83		 mov	 DWORD PTR __k$533937[ebp+8], -2088271742 ; 83878082H
  0034f	c7 45 e8 9e 85
	84 84		 mov	 DWORD PTR __k$533937[ebp+12], -2071689826 ; 8484859eH
  00356	c7 45 ec b2 83
	85 b5		 mov	 DWORD PTR __k$533937[ebp+16], -1249541198 ; b58583b2H
  0035d	c7 45 f0 89 89
	87 8b		 mov	 DWORD PTR __k$533937[ebp+20], -1954051703 ; 8b878989H
  00364	8d 45 dc	 lea	 eax, DWORD PTR __k$533937[ebp]
  00367	66 c7 45 f4 94
	00		 mov	 WORD PTR __k$533937[ebp+24], 148 ; 00000094H
  0036d	59		 pop	 ecx
$LL848@LoadProper:
  0036e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00374	83 c0 04	 add	 eax, 4
  00377	49		 dec	 ecx
  00378	75 f4		 jne	 SHORT $LL848@LoadProper
  0037a	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00380	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  00386	80 75 f4 ed	 xor	 BYTE PTR __k$533937[ebp+24], -19 ; ffffffedH
  0038a	33 db		 xor	 ebx, ebx
  0038c	53		 push	 ebx
  0038d	8d 45 dc	 lea	 eax, DWORD PTR __k$533937[ebp]
  00390	50		 push	 eax
  00391	ff d7		 call	 edi
  00393	6a 06		 push	 6
  00395	88 86 08 09 00
	00		 mov	 BYTE PTR [esi+2312], al

; 79   : 	m_bIgnoreColOnMove	= rkLoader.LoadBool_e( "ignore_collision_on_move", false );

  0039b	c7 45 dc 84 8b
	85 85		 mov	 DWORD PTR __k$534062[ebp], -2054845564 ; 85858b84H
  003a2	c7 45 e0 9f 89
	b4 89		 mov	 DWORD PTR __k$534062[ebp+4], -1984656993 ; 89b4899fH
  003a9	c7 45 e4 82 80
	87 83		 mov	 DWORD PTR __k$534062[ebp+8], -2088271742 ; 83878082H
  003b0	c7 45 e8 9e 85
	84 84		 mov	 DWORD PTR __k$534062[ebp+12], -2071689826 ; 8484859eH
  003b7	c7 45 ec b2 83
	85 b5		 mov	 DWORD PTR __k$534062[ebp+16], -1249541198 ; b58583b2H
  003be	c7 45 f0 80 83
	9d 8f		 mov	 DWORD PTR __k$534062[ebp+20], -1885502592 ; 8f9d8380H
  003c5	8d 45 dc	 lea	 eax, DWORD PTR __k$534062[ebp]
  003c8	88 5d f4	 mov	 BYTE PTR __k$534062[ebp+24], bl
  003cb	59		 pop	 ecx
$LL954@LoadProper:
  003cc	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  003d2	83 c0 04	 add	 eax, 4
  003d5	49		 dec	 ecx
  003d6	75 f4		 jne	 SHORT $LL954@LoadProper
  003d8	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  003de	53		 push	 ebx
  003df	8d 45 dc	 lea	 eax, DWORD PTR __k$534062[ebp]
  003e2	50		 push	 eax
  003e3	ff d7		 call	 edi
  003e5	6a 06		 push	 6
  003e7	88 86 09 09 00
	00		 mov	 BYTE PTR [esi+2313], al

; 80   : 	m_bIgnoreColOnJump	= rkLoader.LoadBool_e( "ignore_collision_on_jump", false );

  003ed	c7 45 dc 84 8b
	85 85		 mov	 DWORD PTR __k$534174[ebp], -2054845564 ; 85858b84H
  003f4	c7 45 e0 9f 89
	b4 89		 mov	 DWORD PTR __k$534174[ebp+4], -1984656993 ; 89b4899fH
  003fb	c7 45 e4 82 80
	87 83		 mov	 DWORD PTR __k$534174[ebp+8], -2088271742 ; 83878082H
  00402	c7 45 e8 9e 85
	84 84		 mov	 DWORD PTR __k$534174[ebp+12], -2071689826 ; 8484859eH
  00409	c7 45 ec b2 83
	85 b5		 mov	 DWORD PTR __k$534174[ebp+16], -1249541198 ; b58583b2H
  00410	c7 45 f0 87 99
	86 9a		 mov	 DWORD PTR __k$534174[ebp+20], -1702454905 ; 9a869987H
  00417	8d 45 dc	 lea	 eax, DWORD PTR __k$534174[ebp]
  0041a	88 5d f4	 mov	 BYTE PTR __k$534174[ebp+24], bl
  0041d	59		 pop	 ecx
$LL1060@LoadProper:
  0041e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00424	83 c0 04	 add	 eax, 4
  00427	49		 dec	 ecx
  00428	75 f4		 jne	 SHORT $LL1060@LoadProper
  0042a	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00430	53		 push	 ebx
  00431	8d 45 dc	 lea	 eax, DWORD PTR __k$534174[ebp]
  00434	50		 push	 eax
  00435	ff d7		 call	 edi

; 81   : }

  00437	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0043a	5f		 pop	 edi
  0043b	88 86 0a 09 00
	00		 mov	 BYTE PTR [esi+2314], al
  00441	5e		 pop	 esi
  00442	33 cd		 xor	 ecx, ebp
  00444	5b		 pop	 ebx
  00445	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0044a	c9		 leave
  0044b	c2 04 00	 ret	 4
?LoadProperty@ioLimitAttachWeapon2@@UAEXAAVioINILoader@@@Z ENDP ; ioLimitAttachWeapon2::LoadProperty
_TEXT	ENDS
PUBLIC	?CreateFireBall@ioLimitAttachWeapon2@@IAE_NABVioHashString@@@Z ; ioLimitAttachWeapon2::CreateFireBall
EXTRN	__imp_?PlaySoundA@ioSoundManager@@QAEKABVioHashString@@PAVioSceneNode@@K@Z:PROC
EXTRN	__imp_?CreateEffect@ioEffectFactory@@QAEPAVioEffect@@ABVioHashString@@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?CreateFireBall@ioLimitAttachWeapon2@@IAE_NABVioHashString@@@Z
_TEXT	SEGMENT
_szFileName$ = 8					; size = 4
?CreateFireBall@ioLimitAttachWeapon2@@IAE_NABVioHashString@@@Z PROC ; ioLimitAttachWeapon2::CreateFireBall, COMDAT
; _this$ = ecx

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 85   : 	ioBaseChar *pOwner = GetOwner();

  00007	e8 00 00 00 00	 call	 ?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ ; ioWeapon::GetOwner
  0000c	8b d8		 mov	 ebx, eax

; 86   : 	if( !pOwner )	return false;

  0000e	85 db		 test	 ebx, ebx
  00010	75 07		 jne	 SHORT $LN4@CreateFire
$LN14@CreateFire:
  00012	32 c0		 xor	 al, al
  00014	e9 8a 00 00 00	 jmp	 $LN5@CreateFire
$LN4@CreateFire:

; 87   : 
; 88   : 	m_pFireBall = g_EffectFactory.CreateEffect( szFileName );

  00019	ff 75 08	 push	 DWORD PTR _szFileName$[ebp]
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioEffectFactory@@SAAAV1@XZ
  00022	8b c8		 mov	 ecx, eax
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CreateEffect@ioEffectFactory@@QAEPAVioEffect@@ABVioHashString@@@Z
  0002a	89 86 30 09 00
	00		 mov	 DWORD PTR [esi+2352], eax

; 89   : 	if( !m_pFireBall )	return false;

  00030	85 c0		 test	 eax, eax
  00032	74 de		 je	 SHORT $LN14@CreateFire

; 90   : 
; 91   : 	if( !m_szSkillSoundName.IsEmpty() )

  00034	57		 push	 edi
  00035	8d be a4 08 00
	00		 lea	 edi, DWORD PTR [esi+2212]
  0003b	8b cf		 mov	 ecx, edi
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00043	84 c0		 test	 al, al
  00045	75 24		 jne	 SHORT $LN13@CreateFire

; 92   : 	{
; 93   : 		ioEntityGroup *pGrp = pOwner->GetGroup();

  00047	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]

; 94   : 		if(pGrp)

  0004a	85 c9		 test	 ecx, ecx
  0004c	74 1d		 je	 SHORT $LN13@CreateFire

; 95   : 			m_SkillSoundID = g_SoundMgr.PlaySound( m_szSkillSoundName, pGrp->GetParentSceneNode() );

  0004e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00050	6a 04		 push	 4
  00052	ff 50 34	 call	 DWORD PTR [eax+52]
  00055	50		 push	 eax
  00056	57		 push	 edi
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioSoundManager@@SAAAV1@XZ
  0005d	8b c8		 mov	 ecx, eax
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PlaySoundA@ioSoundManager@@QAEKABVioHashString@@PAVioSceneNode@@K@Z
  00065	89 86 b4 08 00
	00		 mov	 DWORD PTR [esi+2228], eax
$LN13@CreateFire:

; 96   : 	}
; 97   : 
; 98   : 	GetParentSceneNode()->AttachObject( m_pFireBall );

  0006b	8b 86 30 09 00
	00		 mov	 eax, DWORD PTR [esi+2352]
  00071	5f		 pop	 edi
  00072	85 c0		 test	 eax, eax
  00074	74 05		 je	 SHORT $LN7@CreateFire
  00076	83 c0 14	 add	 eax, 20			; 00000014H
  00079	eb 02		 jmp	 SHORT $LN8@CreateFire
$LN7@CreateFire:
  0007b	33 c0		 xor	 eax, eax
$LN8@CreateFire:
  0007d	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00080	8b 11		 mov	 edx, DWORD PTR [ecx]
  00082	50		 push	 eax
  00083	ff 92 ac 00 00
	00		 call	 DWORD PTR [edx+172]

; 99   : 	UpdateCurPosition( pOwner );

  00089	53		 push	 ebx
  0008a	8b ce		 mov	 ecx, esi
  0008c	e8 00 00 00 00	 call	 ?UpdateCurPosition@ioLimitAttachWeapon2@@IAEXPAVioBaseChar@@@Z ; ioLimitAttachWeapon2::UpdateCurPosition

; 100  : 
; 101  : 	AddEffectEvent( m_pFireBall );

  00091	ff b6 30 09 00
	00		 push	 DWORD PTR [esi+2352]
  00097	8b 06		 mov	 eax, DWORD PTR [esi]
  00099	8b ce		 mov	 ecx, esi
  0009b	ff 90 68 01 00
	00		 call	 DWORD PTR [eax+360]

; 102  : 
; 103  : 	return true;

  000a1	b0 01		 mov	 al, 1
$LN5@CreateFire:
  000a3	5e		 pop	 esi
  000a4	5b		 pop	 ebx

; 104  : }

  000a5	5d		 pop	 ebp
  000a6	c2 04 00	 ret	 4
?CreateFireBall@ioLimitAttachWeapon2@@IAE_NABVioHashString@@@Z ENDP ; ioLimitAttachWeapon2::CreateFireBall
_TEXT	ENDS
PUBLIC	_pStage$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?Process@ioLimitAttachWeapon2@@UAEXMPAVioPlayStage@@@Z
_TEXT	SEGMENT
tv349 = -36						; size = 4
_pStage$GSCopy$ = -36					; size = 4
tv329 = -32						; size = 4
tv326 = -32						; size = 4
_pOwner$ = -32						; size = 4
$T530676 = -28						; size = 12
$T530675 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_fTimePerSec$ = 8					; size = 4
_pStage$ = 12						; size = 4
?Process@ioLimitAttachWeapon2@@UAEXMPAVioPlayStage@@@Z PROC ; ioLimitAttachWeapon2::Process, COMDAT
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _pStage$[ebp]
  00013	53		 push	 ebx
  00014	8b d9		 mov	 ebx, ecx

; 131  : 	{
; 132  : 		if( !pOwner->HasBuff( m_CreateBuffName ) )

  00016	89 45 dc	 mov	 DWORD PTR _pStage$GSCopy$[ebp], eax
  00019	8b 03		 mov	 eax, DWORD PTR [ebx]
  0001b	6a 00		 push	 0
  0001d	ff 90 48 01 00
	00		 call	 DWORD PTR [eax+328]
  00023	84 c0		 test	 al, al
  00025	0f 84 23 01 00
	00		 je	 $LN1@Process

; 119  : 	if( !CheckPiercing() )
; 120  : 		return;
; 121  : 
; 122  : 	ioBaseChar *pOwner = GetOwner();

  0002b	56		 push	 esi
  0002c	8b cb		 mov	 ecx, ebx
  0002e	e8 00 00 00 00	 call	 ?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ ; ioWeapon::GetOwner
  00033	8b f0		 mov	 esi, eax
  00035	89 75 e0	 mov	 DWORD PTR _pOwner$[ebp], esi

; 123  : 	if( !pOwner )

  00038	85 f6		 test	 esi, esi
  0003a	75 23		 jne	 SHORT $LN6@Process

; 124  : 	{
; 125  : 		UpdateWorldAttackBox( fTimePerSec, true );

  0003c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00041	8b 03		 mov	 eax, DWORD PTR [ebx]
  00043	6a 01		 push	 1
  00045	51		 push	 ecx
  00046	8b cb		 mov	 ecx, ebx
  00048	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004d	ff 90 38 01 00
	00		 call	 DWORD PTR [eax+312]

; 126  : 		SetWeaponDead();

  00053	8b 03		 mov	 eax, DWORD PTR [ebx]
  00055	8b cb		 mov	 ecx, ebx
  00057	ff 50 4c	 call	 DWORD PTR [eax+76]

; 127  : 		return;

  0005a	e9 ee 00 00 00	 jmp	 $LN20@Process
$LN6@Process:
  0005f	57		 push	 edi

; 128  : 	}
; 129  : 
; 130  : 	if( !m_CreateBuffName.IsEmpty() )

  00060	8d bb 60 06 00
	00		 lea	 edi, DWORD PTR [ebx+1632]
  00066	8b cf		 mov	 ecx, edi
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0006e	84 c0		 test	 al, al
  00070	0f 85 e7 00 00
	00		 jne	 $LN5@Process

; 131  : 	{
; 132  : 		if( !pOwner->HasBuff( m_CreateBuffName ) )

  00076	57		 push	 edi
  00077	8b ce		 mov	 ecx, esi
  00079	e8 00 00 00 00	 call	 ?HasBuff@ioBaseChar@@QBE_NABVioHashString@@@Z ; ioBaseChar::HasBuff
  0007e	84 c0		 test	 al, al
  00080	0f 84 f9 00 00
	00		 je	 $LN24@Process
$LN2@Process:

; 148  : 		}
; 149  : 	}
; 150  : 
; 151  : 	UpdateCurPosition( pOwner );

  00086	56		 push	 esi
  00087	8b cb		 mov	 ecx, ebx
  00089	e8 00 00 00 00	 call	 ?UpdateCurPosition@ioLimitAttachWeapon2@@IAEXPAVioBaseChar@@@Z ; ioLimitAttachWeapon2::UpdateCurPosition

; 152  : 
; 153  : 	m_vMoveDir = GetOwner()->GetTargetRot() * D3DXVECTOR3( 0.0f, 0.0f, -FLOAT1 );

  0008e	b8 01 00 00 00	 mov	 eax, 1
  00093	0f 57 c0	 xorps	 xmm0, xmm0
  00096	89 45 dc	 mov	 DWORD PTR tv349[ebp], eax
  00099	db 45 dc	 fild	 DWORD PTR tv349[ebp]
  0009c	f3 0f 11 45 f0	 movss	 DWORD PTR $T530675[ebp], xmm0
  000a1	f3 0f 11 45 f4	 movss	 DWORD PTR $T530675[ebp+4], xmm0
  000a6	85 c0		 test	 eax, eax
  000a8	79 06		 jns	 SHORT $LN22@Process
  000aa	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN22@Process:
  000b0	d9 e0		 fchs
  000b2	8b cb		 mov	 ecx, ebx
  000b4	d9 5d f8	 fstp	 DWORD PTR $T530675[ebp+8]
  000b7	e8 00 00 00 00	 call	 ?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ ; ioWeapon::GetOwner
  000bc	8d 4d f0	 lea	 ecx, DWORD PTR $T530675[ebp]
  000bf	51		 push	 ecx
  000c0	05 a4 06 00 00	 add	 eax, 1700		; 000006a4H
  000c5	50		 push	 eax
  000c6	8d 45 e4	 lea	 eax, DWORD PTR $T530676[ebp]
  000c9	50		 push	 eax
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  000d0	8b f0		 mov	 esi, eax
  000d2	8d bb 34 09 00
	00		 lea	 edi, DWORD PTR [ebx+2356]
  000d8	a5		 movsd
  000d9	a5		 movsd
  000da	83 c4 0c	 add	 esp, 12			; 0000000cH

; 154  : 	SetOrientation( GetOwner()->GetTargetRot() );

  000dd	8b cb		 mov	 ecx, ebx
  000df	a5		 movsd
  000e0	e8 00 00 00 00	 call	 ?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ ; ioWeapon::GetOwner
  000e5	05 a4 06 00 00	 add	 eax, 1700		; 000006a4H
  000ea	50		 push	 eax
  000eb	8b cb		 mov	 ecx, ebx
  000ed	e8 00 00 00 00	 call	 ?SetOrientation@ioWeapon@@QAEXABUD3DXQUATERNION@@@Z ; ioWeapon::SetOrientation

; 155  : 
; 156  : 	UpdateWorldAttackBox( fTimePerSec, false );

  000f2	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  000f7	8b 03		 mov	 eax, DWORD PTR [ebx]
  000f9	6a 00		 push	 0
  000fb	51		 push	 ecx
  000fc	8b cb		 mov	 ecx, ebx
  000fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00103	ff 90 38 01 00
	00		 call	 DWORD PTR [eax+312]

; 157  : 
; 158  : 	UpdateWeaponEffect( pOwner );

  00109	ff 75 e0	 push	 DWORD PTR _pOwner$[ebp]
  0010c	8b cb		 mov	 ecx, ebx
  0010e	e8 00 00 00 00	 call	 ?UpdateWeaponEffect@ioLimitAttachWeapon2@@IAEXPAVioBaseChar@@@Z ; ioLimitAttachWeapon2::UpdateWeaponEffect

; 159  : 
; 160  : 	if( m_pFireBall )

  00113	83 bb 30 09 00
	00 00		 cmp	 DWORD PTR [ebx+2352], 0
  0011a	74 30		 je	 SHORT $LN21@Process

; 161  : 	{
; 162  : 		m_pFireBall->Update( fTimePerSec * FLOAT1000 );

  0011c	b8 e8 03 00 00	 mov	 eax, 1000		; 000003e8H
  00121	8b 8b 30 09 00
	00		 mov	 ecx, DWORD PTR [ebx+2352]
  00127	83 c1 14	 add	 ecx, 20			; 00000014H
  0012a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0012c	89 45 e0	 mov	 DWORD PTR tv329[ebp], eax
  0012f	db 45 e0	 fild	 DWORD PTR tv329[ebp]
  00132	85 c0		 test	 eax, eax
  00134	79 06		 jns	 SHORT $LN23@Process
  00136	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN23@Process:
  0013c	d8 4d 08	 fmul	 DWORD PTR _fTimePerSec$[ebp]
  0013f	51		 push	 ecx
  00140	d9 5d e0	 fstp	 DWORD PTR tv326[ebp]
  00143	d9 45 e0	 fld	 DWORD PTR tv326[ebp]
  00146	d9 1c 24	 fstp	 DWORD PTR [esp]
  00149	ff 52 40	 call	 DWORD PTR [edx+64]
$LN21@Process:
  0014c	5f		 pop	 edi
$LN20@Process:
  0014d	5e		 pop	 esi
$LN1@Process:

; 163  : 	}
; 164  : 
; 165  : 	
; 166  : }

  0014e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00151	33 cd		 xor	 ecx, ebp
  00153	5b		 pop	 ebx
  00154	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00159	c9		 leave
  0015a	c2 08 00	 ret	 8
$LN5@Process:

; 133  : 		{
; 134  : 			UpdateWorldAttackBox( fTimePerSec, true );
; 135  : 			WeaponEndEffect( pStage );
; 136  : 			SetWeaponDead();
; 137  : 			return;
; 138  : 		}
; 139  : 	}
; 140  : 	else
; 141  : 	{
; 142  : 		if( m_dwCreatedTime + m_dwLiveTime < FRAMEGETTIME() )

  0015d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00163	8b c8		 mov	 ecx, eax
  00165	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0016b	8b 8b d8 04 00
	00		 mov	 ecx, DWORD PTR [ebx+1240]
  00171	03 8b d4 04 00
	00		 add	 ecx, DWORD PTR [ebx+1236]
  00177	3b c8		 cmp	 ecx, eax
  00179	0f 83 07 ff ff
	ff		 jae	 $LN2@Process
$LN24@Process:

; 143  : 		{
; 144  : 			UpdateWorldAttackBox( fTimePerSec, true );

  0017f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00184	8b 03		 mov	 eax, DWORD PTR [ebx]
  00186	6a 01		 push	 1
  00188	51		 push	 ecx
  00189	8b cb		 mov	 ecx, ebx
  0018b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00190	ff 90 38 01 00
	00		 call	 DWORD PTR [eax+312]

; 145  : 			WeaponEndEffect( pStage );

  00196	ff 75 dc	 push	 DWORD PTR _pStage$GSCopy$[ebp]
  00199	8b cb		 mov	 ecx, ebx
  0019b	e8 00 00 00 00	 call	 ?WeaponEndEffect@ioLimitAttachWeapon2@@IAEXPAVioPlayStage@@@Z ; ioLimitAttachWeapon2::WeaponEndEffect

; 146  : 			SetWeaponDead();

  001a0	8b 03		 mov	 eax, DWORD PTR [ebx]
  001a2	8b cb		 mov	 ecx, ebx
  001a4	ff 50 4c	 call	 DWORD PTR [eax+76]

; 147  : 			return;

  001a7	eb a3		 jmp	 SHORT $LN21@Process
?Process@ioLimitAttachWeapon2@@UAEXMPAVioPlayStage@@@Z ENDP ; ioLimitAttachWeapon2::Process
_TEXT	ENDS
EXTRN	?InitResource@ioWeapon@@UAE_NXZ:PROC		; ioWeapon::InitResource
; Function compile flags: /Ogsp
;	COMDAT ?InitResource@ioLimitAttachWeapon2@@UAE_NXZ
_TEXT	SEGMENT
?InitResource@ioLimitAttachWeapon2@@UAE_NXZ PROC	; ioLimitAttachWeapon2::InitResource, COMDAT
; _this$ = ecx

; 45   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 46   : 	if( ioWeapon::InitResource() )

  00003	e8 00 00 00 00	 call	 ?InitResource@ioWeapon@@UAE_NXZ ; ioWeapon::InitResource
  00008	84 c0		 test	 al, al
  0000a	74 2a		 je	 SHORT $LN1@InitResour

; 47   : 	{
; 48   : 		Init();

  0000c	8b ce		 mov	 ecx, esi
  0000e	e8 00 00 00 00	 call	 ?Init@ioLimitAttachWeapon2@@IAEXXZ ; ioLimitAttachWeapon2::Init

; 49   : 		DestroyResource();

  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	6a 00		 push	 0
  00017	ff 90 9c 00 00
	00		 call	 DWORD PTR [eax+156]

; 50   : 		return CreateFireBall( GetAttribute()->m_WeaponEffect );

  0001d	8b 06		 mov	 eax, DWORD PTR [esi]
  0001f	8b ce		 mov	 ecx, esi
  00021	ff 90 3c 01 00
	00		 call	 DWORD PTR [eax+316]
  00027	05 34 01 00 00	 add	 eax, 308		; 00000134H
  0002c	50		 push	 eax
  0002d	8b ce		 mov	 ecx, esi
  0002f	e8 00 00 00 00	 call	 ?CreateFireBall@ioLimitAttachWeapon2@@IAE_NABVioHashString@@@Z ; ioLimitAttachWeapon2::CreateFireBall
  00034	5e		 pop	 esi

; 54   : }

  00035	c3		 ret	 0
$LN1@InitResour:

; 51   : 	}
; 52   : 
; 53   : 	return false;

  00036	32 c0		 xor	 al, al
  00038	5e		 pop	 esi

; 54   : }

  00039	c3		 ret	 0
?InitResource@ioLimitAttachWeapon2@@UAE_NXZ ENDP	; ioLimitAttachWeapon2::InitResource
_TEXT	ENDS
END
