; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioBullFightItem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ	; ioBaseChar::GetCharName
; Function compile flags: /Ogsp
;	COMDAT ?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ PROC	; ioBaseChar::GetCharName, COMDAT
; _this$ = ecx

; 2594 : 	inline const ioHashString& GetCharName() const { return m_Name; }

  00000	8d 81 d4 02 00
	00		 lea	 eax, DWORD PTR [ecx+724]
  00006	c3		 ret	 0
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ ENDP	; ioBaseChar::GetCharName
_TEXT	ENDS
PUBLIC	?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ; ioBaseChar::GetTargetRot
; Function compile flags: /Ogsp
;	COMDAT ?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ
_TEXT	SEGMENT
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ PROC	; ioBaseChar::GetTargetRot, COMDAT
; _this$ = ecx

; 2599 : 	inline const D3DXQUATERNION& GetTargetRot() const { return m_qtTargetRot; }

  00000	8d 81 a4 06 00
	00		 lea	 eax, DWORD PTR [ecx+1700]
  00006	c3		 ret	 0
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ENDP	; ioBaseChar::GetTargetRot
_TEXT	ENDS
PUBLIC	?SetChargingState@ioBaseChar@@QAEX_N@Z		; ioBaseChar::SetChargingState
; Function compile flags: /Ogsp
;	COMDAT ?SetChargingState@ioBaseChar@@QAEX_N@Z
_TEXT	SEGMENT
_bState$ = 8						; size = 1
?SetChargingState@ioBaseChar@@QAEX_N@Z PROC		; ioBaseChar::SetChargingState, COMDAT
; _this$ = ecx

; 2937 : 	inline void SetChargingState( bool bState ) { m_bChargingState = bState; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _bState$[ebp]
  00006	88 81 54 20 00
	00		 mov	 BYTE PTR [ecx+8276], al
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetChargingState@ioBaseChar@@QAEX_N@Z ENDP		; ioBaseChar::SetChargingState
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_R0?AVioWeapon@@@8				; ioWeapon `RTTI Type Descriptor'
PUBLIC	??_R0?AVioZoneEffectWeapon@@@8			; ioZoneEffectWeapon `RTTI Type Descriptor'
PUBLIC	?ToZoneEffectWeapon@@YAPAVioZoneEffectWeapon@@PAVioWeapon@@@Z ; ToZoneEffectWeapon
EXTRN	___RTDynamicCast:PROC
;	COMDAT ??_R0?AVioWeapon@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iozoneeffectweapon.h
_DATA	SEGMENT
??_R0?AVioWeapon@@@8 DD FLAT:??_7type_info@@6B@		; ioWeapon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWeapon@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVioZoneEffectWeapon@@@8
_DATA	SEGMENT
??_R0?AVioZoneEffectWeapon@@@8 DD FLAT:??_7type_info@@6B@ ; ioZoneEffectWeapon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioZoneEffectWeapon@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ToZoneEffectWeapon@@YAPAVioZoneEffectWeapon@@PAVioWeapon@@@Z
_TEXT	SEGMENT
_pWeapon$ = 8						; size = 4
?ToZoneEffectWeapon@@YAPAVioZoneEffectWeapon@@PAVioWeapon@@@Z PROC ; ToZoneEffectWeapon, COMDAT

; 217  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 218  : 	if( !pWeapon || pWeapon->GetType() != ioWeapon::WT_ZONE_EFFECT )

  00004	8b 75 08	 mov	 esi, DWORD PTR _pWeapon$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 28		 je	 SHORT $LN1@ToZoneEffe
  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 90 10 01 00
	00		 call	 DWORD PTR [eax+272]
  00015	83 f8 08	 cmp	 eax, 8
  00018	75 19		 jne	 SHORT $LN1@ToZoneEffe

; 220  : 
; 221  : 	return dynamic_cast< ioZoneEffectWeapon* >( pWeapon );

  0001a	6a 00		 push	 0
  0001c	68 00 00 00 00	 push	 OFFSET ??_R0?AVioZoneEffectWeapon@@@8
  00021	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWeapon@@@8
  00026	6a 00		 push	 0
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ___RTDynamicCast
  0002e	83 c4 14	 add	 esp, 20			; 00000014H
  00031	eb 02		 jmp	 SHORT $LN3@ToZoneEffe
$LN1@ToZoneEffe:

; 219  : 		return NULL;

  00033	33 c0		 xor	 eax, eax
$LN3@ToZoneEffe:
  00035	5e		 pop	 esi

; 222  : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?ToZoneEffectWeapon@@YAPAVioZoneEffectWeapon@@PAVioWeapon@@@Z ENDP ; ToZoneEffectWeapon
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?GetSubType@ioBullFightItem@@UBE?AW4WeaponSubType@ioWeaponItem@@XZ ; ioBullFightItem::GetSubType
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobullfightitem.cpp
;	COMDAT ?GetSubType@ioBullFightItem@@UBE?AW4WeaponSubType@ioWeaponItem@@XZ
_TEXT	SEGMENT
?GetSubType@ioBullFightItem@@UBE?AW4WeaponSubType@ioWeaponItem@@XZ PROC ; ioBullFightItem::GetSubType, COMDAT
; _this$ = ecx

; 89   : 	return WST_BULLFIGHT_ITEM;

  00000	6a 7d		 push	 125			; 0000007dH
  00002	58		 pop	 eax

; 90   : }

  00003	c3		 ret	 0
?GetSubType@ioBullFightItem@@UBE?AW4WeaponSubType@ioWeaponItem@@XZ ENDP ; ioBullFightItem::GetSubType
_TEXT	ENDS
PUBLIC	??_C@_07BJEBJFJ@CS_NONE?$AA@			; `string'
PUBLIC	??_C@_0M@BNDKOBDN@CS_CHARGING?$AA@		; `string'
PUBLIC	??_C@_0BB@OBNOKHFA@CS_NORMAL_ATTACK?$AA@	; `string'
PUBLIC	??_C@_0BB@MMGCBIEO@CS_CHARGE_ATTACK?$AA@	; `string'
PUBLIC	??_C@_0P@DPNNHLKD@CS_EXTEND_MOVE?$AA@		; `string'
PUBLIC	??_C@_0BB@HILPIBAP@CS_EXTEND_ATTACK?$AA@	; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?GetAttackStateText@ioBullFightItem@@UBEPBDXZ	; ioBullFightItem::GetAttackStateText
;	COMDAT ??_C@_07BJEBJFJ@CS_NONE?$AA@
CONST	SEGMENT
??_C@_07BJEBJFJ@CS_NONE?$AA@ DB 'CS_NONE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BNDKOBDN@CS_CHARGING?$AA@
CONST	SEGMENT
??_C@_0M@BNDKOBDN@CS_CHARGING?$AA@ DB 'CS_CHARGING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OBNOKHFA@CS_NORMAL_ATTACK?$AA@
CONST	SEGMENT
??_C@_0BB@OBNOKHFA@CS_NORMAL_ATTACK?$AA@ DB 'CS_NORMAL_ATTACK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MMGCBIEO@CS_CHARGE_ATTACK?$AA@
CONST	SEGMENT
??_C@_0BB@MMGCBIEO@CS_CHARGE_ATTACK?$AA@ DB 'CS_CHARGE_ATTACK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DPNNHLKD@CS_EXTEND_MOVE?$AA@
CONST	SEGMENT
??_C@_0P@DPNNHLKD@CS_EXTEND_MOVE?$AA@ DB 'CS_EXTEND_MOVE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HILPIBAP@CS_EXTEND_ATTACK?$AA@
CONST	SEGMENT
??_C@_0BB@HILPIBAP@CS_EXTEND_ATTACK?$AA@ DB 'CS_EXTEND_ATTACK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?GetAttackStateText@ioBullFightItem@@UBEPBDXZ
_TEXT	SEGMENT
?GetAttackStateText@ioBullFightItem@@UBEPBDXZ PROC	; ioBullFightItem::GetAttackStateText, COMDAT
; _this$ = ecx

; 96   : 	switch( m_ChargeState )

  00000	8b 81 48 1a 00
	00		 mov	 eax, DWORD PTR [ecx+6728]
  00006	83 e8 00	 sub	 eax, 0
  00009	74 33		 je	 SHORT $LN6@GetAttackS
  0000b	48		 dec	 eax
  0000c	74 2a		 je	 SHORT $LN5@GetAttackS
  0000e	48		 dec	 eax
  0000f	74 21		 je	 SHORT $LN4@GetAttackS
  00011	48		 dec	 eax
  00012	74 18		 je	 SHORT $LN3@GetAttackS
  00014	48		 dec	 eax
  00015	74 0f		 je	 SHORT $LN2@GetAttackS
  00017	48		 dec	 eax
  00018	74 06		 je	 SHORT $LN1@GetAttackS

; 110  : 	}
; 111  : 
; 112  : 	return "";

  0001a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@

; 113  : }

  0001f	c3		 ret	 0
$LN1@GetAttackS:

; 108  : 	case CS_EXTEND_ATTACK:
; 109  : 		return "CS_EXTEND_ATTACK";

  00020	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@HILPIBAP@CS_EXTEND_ATTACK?$AA@

; 113  : }

  00025	c3		 ret	 0
$LN2@GetAttackS:

; 106  : 	case CS_EXTEND_MOVE:
; 107  : 		return "CS_EXTEND_MOVE";

  00026	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0P@DPNNHLKD@CS_EXTEND_MOVE?$AA@

; 113  : }

  0002b	c3		 ret	 0
$LN3@GetAttackS:

; 104  : 	case CS_CHARGE_ATTACK:
; 105  : 		return "CS_CHARGE_ATTACK";

  0002c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@MMGCBIEO@CS_CHARGE_ATTACK?$AA@

; 113  : }

  00031	c3		 ret	 0
$LN4@GetAttackS:

; 102  : 	case CS_NORMAL_ATTACK:
; 103  : 		return "CS_NORMAL_ATTACK";

  00032	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@OBNOKHFA@CS_NORMAL_ATTACK?$AA@

; 113  : }

  00037	c3		 ret	 0
$LN5@GetAttackS:

; 100  : 	case CS_CHARGING:
; 101  : 		return "CS_CHARGING";

  00038	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0M@BNDKOBDN@CS_CHARGING?$AA@

; 113  : }

  0003d	c3		 ret	 0
$LN6@GetAttackS:

; 97   : 	{
; 98   : 	case CS_NONE:
; 99   : 		return "CS_NONE";

  0003e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07BJEBJFJ@CS_NONE?$AA@

; 113  : }

  00043	c3		 ret	 0
?GetAttackStateText@ioBullFightItem@@UBEPBDXZ ENDP	; ioBullFightItem::GetAttackStateText
_TEXT	ENDS
PUBLIC	?ProcessJumpAttack@ioBullFightItem@@UAEXPAVioBaseChar@@M@Z ; ioBullFightItem::ProcessJumpAttack
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?ProcessJumpAttack@ioBullFightItem@@UAEXPAVioBaseChar@@M@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_fHeightGap$ = 12					; size = 4
?ProcessJumpAttack@ioBullFightItem@@UAEXPAVioBaseChar@@M@Z PROC ; ioBullFightItem::ProcessJumpAttack, COMDAT
; _this$ = ecx

; 258  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 259  : 	if( m_pExtendJump )

  00006	83 be c8 0b 00
	00 00		 cmp	 DWORD PTR [esi+3016], 0
  0000d	74 1b		 je	 SHORT $LN1@ProcessJum

; 260  : 		m_pExtendJump->ProcessJumpAttack( pOwner, fHeightGap );

  0000f	8b 86 c8 0b 00
	00		 mov	 eax, DWORD PTR [esi+3016]
  00015	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fHeightGap$[ebp]
  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
  0001c	51		 push	 ecx
  0001d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00022	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00025	8b c8		 mov	 ecx, eax
  00027	ff 52 24	 call	 DWORD PTR [edx+36]
$LN1@ProcessJum:

; 261  : 
; 262  : 	CheckAirJump( pOwner );

  0002a	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0002d	8b 06		 mov	 eax, DWORD PTR [esi]
  0002f	8b ce		 mov	 ecx, esi
  00031	ff 90 b0 02 00
	00		 call	 DWORD PTR [eax+688]
  00037	5e		 pop	 esi

; 263  : }

  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
?ProcessJumpAttack@ioBullFightItem@@UAEXPAVioBaseChar@@M@Z ENDP ; ioBullFightItem::ProcessJumpAttack
_TEXT	ENDS
PUBLIC	?IsChargeAttackState@ioBullFightItem@@UAE_NPAVioBaseChar@@@Z ; ioBullFightItem::IsChargeAttackState
; Function compile flags: /Ogsp
;	COMDAT ?IsChargeAttackState@ioBullFightItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsChargeAttackState@ioBullFightItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioBullFightItem::IsChargeAttackState, COMDAT
; _this$ = ecx

; 318  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 319  : 	if( pOwner->GetState() == CS_ATTACK )

  00003	8b 45 08	 mov	 eax, DWORD PTR _pOwner$[ebp]
  00006	80 b8 10 03 00
	00 05		 cmp	 BYTE PTR [eax+784], 5
  0000d	75 0b		 jne	 SHORT $LN1@IsChargeAt

; 320  : 	{
; 321  : 		if( m_ChargeState == CS_CHARGING )

  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	39 81 48 1a 00
	00		 cmp	 DWORD PTR [ecx+6728], eax

; 322  : 			return true;

  00018	74 02		 je	 SHORT $LN3@IsChargeAt
$LN1@IsChargeAt:

; 323  : 	}
; 324  : 
; 325  : 	return false;

  0001a	32 c0		 xor	 al, al
$LN3@IsChargeAt:

; 326  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?IsChargeAttackState@ioBullFightItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioBullFightItem::IsChargeAttackState
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	?GetAttackSpeedRate@ioBullFightItem@@UBEMXZ	; ioBullFightItem::GetAttackSpeedRate
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?GetAttackSpeedRate@ioBullFightItem@@UBEMXZ
_TEXT	SEGMENT
?GetAttackSpeedRate@ioBullFightItem@@UBEMXZ PROC	; ioBullFightItem::GetAttackSpeedRate, COMDAT
; _this$ = ecx

; 458  : 	if( m_ChargeState == CS_EXTEND_MOVE )

  00000	83 b9 48 1a 00
	00 04		 cmp	 DWORD PTR [ecx+6728], 4
  00007	75 07		 jne	 SHORT $LN1@GetAttackS@2

; 459  : 		return m_fExtendMoveSpeedRate;

  00009	d9 81 e0 19 00
	00		 fld	 DWORD PTR [ecx+6624]

; 462  : }

  0000f	c3		 ret	 0
$LN1@GetAttackS@2:

; 460  : 
; 461  : 	return 1.0f;

  00010	d9 e8		 fld1

; 462  : }

  00012	c3		 ret	 0
?GetAttackSpeedRate@ioBullFightItem@@UBEMXZ ENDP	; ioBullFightItem::GetAttackSpeedRate
_TEXT	ENDS
PUBLIC	?GetNeedBullet@ioBullFightItem@@QAEHXZ		; ioBullFightItem::GetNeedBullet
; Function compile flags: /Ogsp
;	COMDAT ?GetNeedBullet@ioBullFightItem@@QAEHXZ
_TEXT	SEGMENT
?GetNeedBullet@ioBullFightItem@@QAEHXZ PROC		; ioBullFightItem::GetNeedBullet, COMDAT
; _this$ = ecx

; 473  : 	return (int)m_fNeedGauge;

  00000	f3 0f 2c 81 54
	19 00 00	 cvttss2si eax, DWORD PTR [ecx+6484]

; 474  : }

  00008	c3		 ret	 0
?GetNeedBullet@ioBullFightItem@@QAEHXZ ENDP		; ioBullFightItem::GetNeedBullet
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ChangeToNormalAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ; ioBullFightItem::ChangeToNormalAttack
EXTRN	??1SP2Packet@@UAE@XZ:PROC			; SP2Packet::~SP2Packet
EXTRN	?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z:PROC ; P2PNetwork::SendToAllPlayingUser
EXTRN	??6SP2Packet@@QAEAAV0@ABUD3DXVECTOR3@@@Z:PROC	; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@ABUD3DXQUATERNION@@@Z:PROC ; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@H@Z:PROC			; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@E@Z:PROC			; SP2Packet::operator<<
EXTRN	?FillItemGaugePacketHeader@ioAttackableItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::FillItemGaugePacketHeader
EXTRN	??0SP2Packet@@QAE@K@Z:PROC			; SP2Packet::SP2Packet
EXTRN	?SetAttackMoveEnable@ioBaseChar@@QAEX_N@Z:PROC	; ioBaseChar::SetAttackMoveEnable
EXTRN	?ApplyNormalAttackResult@ioBaseChar@@QAEXH_N@Z:PROC ; ioBaseChar::ApplyNormalAttackResult
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
EXTRN	?SetNormalAttackByAttribute@ioBaseChar@@QAEKABUAttackAttribute@@_NMM@Z:PROC ; ioBaseChar::SetNormalAttackByAttribute
EXTRN	?GetAttribute@ioFormalAttackGrp@@QBEPBUAttackAttribute@@W4AttackType@@H@Z:PROC ; ioFormalAttackGrp::GetAttribute
EXTRN	?InitExtendAttackTagInfo@ioBaseChar@@QAEXXZ:PROC ; ioBaseChar::InitExtendAttackTagInfo
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
xdata$x	SEGMENT
__unwindtable$?ChangeToNormalAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ChangeToNormalAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z$0
__ehfuncinfo$?ChangeToNormalAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ChangeToNormalAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobullfightitem.cpp
xdata$x	ENDS
;	COMDAT ?ChangeToNormalAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_dwCurTime$ = -32812					; size = 4
_kPacket$548926 = -32808				; size = 32792
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
?ChangeToNormalAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z PROC ; ioBullFightItem::ChangeToNormalAttack, COMDAT
; _this$ = ecx

; 533  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ChangeToNormalAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 20 80 00 00	 mov	 eax, 32800		; 00008020H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00035	8b f1		 mov	 esi, ecx

; 534  : 	if( !pOwner ) 

  00037	85 ff		 test	 edi, edi
  00039	0f 84 3c 01 00
	00		 je	 $LN1@ChangeToNo

; 535  : 		return;
; 536  : 
; 537  : 	DWORD dwCurTime = FRAMEGETTIME();

  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00045	8b c8		 mov	 ecx, eax
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 538  : 
; 539  : 	pOwner->InitExtendAttackTagInfo();

  0004d	8b cf		 mov	 ecx, edi
  0004f	89 85 d4 7f ff
	ff		 mov	 DWORD PTR _dwCurTime$[ebp], eax
  00055	e8 00 00 00 00	 call	 ?InitExtendAttackTagInfo@ioBaseChar@@QAEXXZ ; ioBaseChar::InitExtendAttackTagInfo

; 540  : 
; 541  : 	ClearCancelInfo();

  0005a	8b 06		 mov	 eax, DWORD PTR [esi]
  0005c	8b ce		 mov	 ecx, esi
  0005e	ff 90 3c 02 00
	00		 call	 DWORD PTR [eax+572]

; 542  : 	
; 543  : 	const AttackAttribute *pAttribute = m_FormalAttack.GetAttribute( AT_NORMAL, m_nCurCombo );

  00064	ff b6 50 1a 00
	00		 push	 DWORD PTR [esi+6736]
  0006a	8d 8e 2c 06 00
	00		 lea	 ecx, DWORD PTR [esi+1580]
  00070	6a 00		 push	 0
  00072	e8 00 00 00 00	 call	 ?GetAttribute@ioFormalAttackGrp@@QBEPBUAttackAttribute@@W4AttackType@@H@Z ; ioFormalAttackGrp::GetAttribute
  00077	8b d8		 mov	 ebx, eax

; 544  : 	if( pAttribute )

  00079	85 db		 test	 ebx, ebx
  0007b	74 47		 je	 SHORT $LN2@ChangeToNo

; 545  : 	{
; 546  : 		pOwner->SetNormalAttackByAttribute( *pAttribute );

  0007d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00085	51		 push	 ecx
  00086	51		 push	 ecx
  00087	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0008d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00092	6a 01		 push	 1
  00094	53		 push	 ebx
  00095	8b cf		 mov	 ecx, edi
  00097	e8 00 00 00 00	 call	 ?SetNormalAttackByAttribute@ioBaseChar@@QAEKABUAttackAttribute@@_NMM@Z ; ioBaseChar::SetNormalAttackByAttribute

; 547  : 
; 548  : 		m_szCurAni = pAttribute->m_AttackAnimation;

  0009c	53		 push	 ebx
  0009d	8d 8e 10 0f 00
	00		 lea	 ecx, DWORD PTR [esi+3856]
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 549  : 		m_fCurAniRate = pAttribute->m_fAttackAniRate;

  000a9	d9 43 10	 fld	 DWORD PTR [ebx+16]

; 550  : 
; 551  : 		m_dwInputCancelCheckTime = dwCurTime;

  000ac	8b 85 d4 7f ff
	ff		 mov	 eax, DWORD PTR _dwCurTime$[ebp]
  000b2	d9 9e 20 0f 00
	00		 fstp	 DWORD PTR [esi+3872]
  000b8	89 86 0c 0f 00
	00		 mov	 DWORD PTR [esi+3852], eax

; 552  : 		m_dwCancelCheckTime = dwCurTime;

  000be	89 86 08 0f 00
	00		 mov	 DWORD PTR [esi+3848], eax
$LN2@ChangeToNo:

; 553  : 	}
; 554  : 
; 555  : 	pOwner->ApplyNormalAttackResult( m_nCurCombo );

  000c4	6a 00		 push	 0
  000c6	ff b6 50 1a 00
	00		 push	 DWORD PTR [esi+6736]
  000cc	8b cf		 mov	 ecx, edi
  000ce	e8 00 00 00 00	 call	 ?ApplyNormalAttackResult@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::ApplyNormalAttackResult

; 556  : 	m_ChargeState = CS_NORMAL_ATTACK;
; 557  : 	pOwner->SetAttackMoveEnable( false );

  000d3	33 db		 xor	 ebx, ebx
  000d5	53		 push	 ebx
  000d6	8b cf		 mov	 ecx, edi
  000d8	c7 86 48 1a 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+6728], 2
  000e2	e8 00 00 00 00	 call	 ?SetAttackMoveEnable@ioBaseChar@@QAEX_N@Z ; ioBaseChar::SetAttackMoveEnable

; 558  : 
; 559  : 	if( pOwner->IsNeedSendNetwork() )

  000e7	8b 07		 mov	 eax, DWORD PTR [edi]
  000e9	8b cf		 mov	 ecx, edi
  000eb	ff 90 04 01 00
	00		 call	 DWORD PTR [eax+260]
  000f1	84 c0		 test	 al, al
  000f3	0f 84 82 00 00
	00		 je	 $LN1@ChangeToNo

; 560  : 	{
; 561  : 		SP2Packet kPacket( CUPK_ITEM_GAUGE_OK );

  000f9	68 27 41 00 00	 push	 16679			; 00004127H
  000fe	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548926[ebp]
  00104	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 562  : 		FillItemGaugePacketHeader( pOwner, kPacket );

  00109	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$548926[ebp]
  0010f	50		 push	 eax
  00110	57		 push	 edi
  00111	8b ce		 mov	 ecx, esi
  00113	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00116	e8 00 00 00 00	 call	 ?FillItemGaugePacketHeader@ioAttackableItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z ; ioAttackableItem::FillItemGaugePacketHeader

; 563  : 		kPacket << static_cast<byte>( ST_NORMAL_ATTACK );

  0011b	53		 push	 ebx
  0011c	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548926[ebp]
  00122	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@E@Z ; SP2Packet::operator<<

; 564  : 		kPacket << m_nCurCombo;

  00127	ff b6 50 1a 00
	00		 push	 DWORD PTR [esi+6736]
  0012d	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548926[ebp]
  00133	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@H@Z ; SP2Packet::operator<<

; 565  : 		kPacket << pOwner->GetTargetRot();

  00138	8d 87 a4 06 00
	00		 lea	 eax, DWORD PTR [edi+1700]
  0013e	50		 push	 eax
  0013f	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548926[ebp]
  00145	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXQUATERNION@@@Z ; SP2Packet::operator<<

; 566  : 		kPacket << pOwner->GetWorldPosition();

  0014a	8b 07		 mov	 eax, DWORD PTR [edi]
  0014c	8b cf		 mov	 ecx, edi
  0014e	ff 50 70	 call	 DWORD PTR [eax+112]
  00151	50		 push	 eax
  00152	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548926[ebp]
  00158	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXVECTOR3@@@Z ; SP2Packet::operator<<

; 567  : 		P2PNetwork::SendToAllPlayingUser( kPacket );

  0015d	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$548926[ebp]
  00163	53		 push	 ebx
  00164	50		 push	 eax
  00165	e8 00 00 00 00	 call	 ?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z ; P2PNetwork::SendToAllPlayingUser

; 568  : 	}

  0016a	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0016e	59		 pop	 ecx
  0016f	59		 pop	 ecx
  00170	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548926[ebp]
  00176	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN1@ChangeToNo:

; 569  : }

  0017b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0017e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00185	59		 pop	 ecx
  00186	5f		 pop	 edi
  00187	5e		 pop	 esi
  00188	5b		 pop	 ebx
  00189	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018c	33 cd		 xor	 ecx, ebp
  0018e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00193	c9		 leave
  00194	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ChangeToNormalAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z$0:
  00000	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548926[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?ChangeToNormalAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a d0 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32816]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ChangeToNormalAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ChangeToNormalAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ENDP ; ioBullFightItem::ChangeToNormalAttack
PUBLIC	?ReserveInputKey@ioBullFightItem@@IAEXPAVioBaseChar@@_N11@Z ; ioBullFightItem::ReserveInputKey
EXTRN	?IsJumpKey@ioBaseChar@@QBE_NXZ:PROC		; ioBaseChar::IsJumpKey
EXTRN	?IsDefenseKey@ioBaseChar@@QBE_NXZ:PROC		; ioBaseChar::IsDefenseKey
EXTRN	?IsAttackKey@ioBaseChar@@QBE_NXZ:PROC		; ioBaseChar::IsAttackKey
; Function compile flags: /Ogsp
;	COMDAT ?ReserveInputKey@ioBullFightItem@@IAEXPAVioBaseChar@@_N11@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_bAttack$ = 12						; size = 1
_bDefence$ = 16						; size = 1
_bJump$ = 20						; size = 1
?ReserveInputKey@ioBullFightItem@@IAEXPAVioBaseChar@@_N11@Z PROC ; ioBullFightItem::ReserveInputKey, COMDAT
; _this$ = ecx

; 725  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 726  : 	if ( !pOwner || !pOwner->IsNeedProcess() )

  00005	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	74 56		 je	 SHORT $LN4@ReserveInp
  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	8b cf		 mov	 ecx, edi
  00012	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  00018	84 c0		 test	 al, al
  0001a	74 48		 je	 SHORT $LN4@ReserveInp

; 727  : 		return;
; 728  : 
; 729  : 	if( bAttack && pOwner->IsAttackKey() )

  0001c	80 7d 0c 00	 cmp	 BYTE PTR _bAttack$[ebp], 0
  00020	74 12		 je	 SHORT $LN3@ReserveInp
  00022	8b cf		 mov	 ecx, edi
  00024	e8 00 00 00 00	 call	 ?IsAttackKey@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsAttackKey
  00029	84 c0		 test	 al, al
  0002b	74 07		 je	 SHORT $LN3@ReserveInp

; 730  : 		m_bAttackKeyReserved = true;

  0002d	c6 86 60 1a 00
	00 01		 mov	 BYTE PTR [esi+6752], 1
$LN3@ReserveInp:

; 731  : 
; 732  : 	if( bDefence && pOwner->IsDefenseKey() )

  00034	80 7d 10 00	 cmp	 BYTE PTR _bDefence$[ebp], 0
  00038	74 12		 je	 SHORT $LN2@ReserveInp
  0003a	8b cf		 mov	 ecx, edi
  0003c	e8 00 00 00 00	 call	 ?IsDefenseKey@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsDefenseKey
  00041	84 c0		 test	 al, al
  00043	74 07		 je	 SHORT $LN2@ReserveInp

; 733  : 		m_bDefenseKeyReserved = true;

  00045	c6 86 61 1a 00
	00 01		 mov	 BYTE PTR [esi+6753], 1
$LN2@ReserveInp:

; 734  : 
; 735  : 	if( bJump && pOwner->IsJumpKey() )

  0004c	80 7d 14 00	 cmp	 BYTE PTR _bJump$[ebp], 0
  00050	74 12		 je	 SHORT $LN4@ReserveInp
  00052	8b cf		 mov	 ecx, edi
  00054	e8 00 00 00 00	 call	 ?IsJumpKey@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsJumpKey
  00059	84 c0		 test	 al, al
  0005b	74 07		 je	 SHORT $LN4@ReserveInp

; 736  : 		m_bJumpKeyReserved = true;

  0005d	c6 86 62 1a 00
	00 01		 mov	 BYTE PTR [esi+6754], 1
$LN4@ReserveInp:
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi

; 737  : }

  00066	5d		 pop	 ebp
  00067	c2 10 00	 ret	 16			; 00000010H
?ReserveInputKey@ioBullFightItem@@IAEXPAVioBaseChar@@_N11@Z ENDP ; ioBullFightItem::ReserveInputKey
_TEXT	ENDS
PUBLIC	?SetReserveAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ; ioBullFightItem::SetReserveAttack
EXTRN	?SetNormalAttack@ioBaseChar@@QAEXH@Z:PROC	; ioBaseChar::SetNormalAttack
; Function compile flags: /Ogsp
;	COMDAT ?SetReserveAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?SetReserveAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z PROC ; ioBullFightItem::SetReserveAttack, COMDAT
; _this$ = ecx

; 774  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 775  : 	if ( !pOwner || !pOwner->IsNeedProcess() )

  00005	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	74 1e		 je	 SHORT $LN1@SetReserve
  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	8b cf		 mov	 ecx, edi
  00012	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  00018	84 c0		 test	 al, al
  0001a	74 10		 je	 SHORT $LN1@SetReserve

; 776  : 		return;
; 777  : 
; 778  : 	pOwner->SetNormalAttack(0);

  0001c	6a 00		 push	 0
  0001e	8b cf		 mov	 ecx, edi
  00020	e8 00 00 00 00	 call	 ?SetNormalAttack@ioBaseChar@@QAEXH@Z ; ioBaseChar::SetNormalAttack

; 779  : 	m_bAttackKeyReserved = false;

  00025	c6 86 60 1a 00
	00 00		 mov	 BYTE PTR [esi+6752], 0
$LN1@SetReserve:
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 780  : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?SetReserveAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ENDP ; ioBullFightItem::SetReserveAttack
_TEXT	ENDS
PUBLIC	?SetReserveDefence@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ; ioBullFightItem::SetReserveDefence
EXTRN	?SetDefenseState@ioBaseChar@@QAEXXZ:PROC	; ioBaseChar::SetDefenseState
; Function compile flags: /Ogsp
;	COMDAT ?SetReserveDefence@ioBullFightItem@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?SetReserveDefence@ioBullFightItem@@IAEXPAVioBaseChar@@@Z PROC ; ioBullFightItem::SetReserveDefence, COMDAT
; _this$ = ecx

; 783  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 784  : 	if ( !pOwner || !pOwner->IsNeedProcess() )

  00005	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	74 1c		 je	 SHORT $LN1@SetReserve@2
  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	8b cf		 mov	 ecx, edi
  00012	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  00018	84 c0		 test	 al, al
  0001a	74 0e		 je	 SHORT $LN1@SetReserve@2

; 785  : 		return;
; 786  : 
; 787  : 	pOwner->SetDefenseState();

  0001c	8b cf		 mov	 ecx, edi
  0001e	e8 00 00 00 00	 call	 ?SetDefenseState@ioBaseChar@@QAEXXZ ; ioBaseChar::SetDefenseState

; 788  : 	m_bDefenseKeyReserved = false;

  00023	c6 86 61 1a 00
	00 00		 mov	 BYTE PTR [esi+6753], 0
$LN1@SetReserve@2:
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi

; 789  : }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?SetReserveDefence@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ENDP ; ioBullFightItem::SetReserveDefence
_TEXT	ENDS
PUBLIC	?SetReserveJump@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ; ioBullFightItem::SetReserveJump
EXTRN	?SetJumpState@ioBaseChar@@QAEX_N@Z:PROC		; ioBaseChar::SetJumpState
; Function compile flags: /Ogsp
;	COMDAT ?SetReserveJump@ioBullFightItem@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?SetReserveJump@ioBullFightItem@@IAEXPAVioBaseChar@@@Z PROC ; ioBullFightItem::SetReserveJump, COMDAT
; _this$ = ecx

; 792  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 793  : 	if ( !pOwner || !pOwner->IsNeedProcess() )

  00005	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	74 1e		 je	 SHORT $LN1@SetReserve@3
  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	8b cf		 mov	 ecx, edi
  00012	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  00018	84 c0		 test	 al, al
  0001a	74 10		 je	 SHORT $LN1@SetReserve@3

; 794  : 		return;
; 795  : 
; 796  : 	pOwner->SetJumpState();

  0001c	6a 01		 push	 1
  0001e	8b cf		 mov	 ecx, edi
  00020	e8 00 00 00 00	 call	 ?SetJumpState@ioBaseChar@@QAEX_N@Z ; ioBaseChar::SetJumpState

; 797  : 	m_bJumpKeyReserved = false;	

  00025	c6 86 62 1a 00
	00 00		 mov	 BYTE PTR [esi+6754], 0
$LN1@SetReserve@3:
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 798  : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?SetReserveJump@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ENDP ; ioBullFightItem::SetReserveJump
_TEXT	ENDS
PUBLIC	??A?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEAAVioHashString@@I@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::operator[]
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??A?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEAAVioHashString@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEAAVioHashString@@I@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	c1 e0 04	 shl	 eax, 4
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEAAVioHashString@@I@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::operator[]
_TEXT	ENDS
PUBLIC	?empty@?$list@MV?$allocator@M@std@@@std@@QBE_NXZ ; std::list<float,std::allocator<float> >::empty
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?empty@?$list@MV?$allocator@M@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$list@MV?$allocator@M@std@@@std@@QBE_NXZ PROC	; std::list<float,std::allocator<float> >::empty, COMDAT
; _this$ = ecx

; 887  : 		return (this->_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 04	 cmp	 DWORD PTR [ecx+4], eax
  00005	0f 94 c0	 sete	 al

; 888  : 		}

  00008	c3		 ret	 0
?empty@?$list@MV?$allocator@M@std@@@std@@QBE_NXZ ENDP	; std::list<float,std::allocator<float> >::empty
_TEXT	ENDS
PUBLIC	?capacity@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 04	 sar	 eax, 4

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::capacity
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBE_NPBVioHashString@@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBE_NPBVioHashString@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBE_NPBVioHashString@@@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBE_NPBVioHashString@@@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXPAVioHashString@@0@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXPAVioHashString@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXPAVioHashString@@0@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXPAVioHashString@@0@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Orphan_range
_TEXT	ENDS
PUBLIC	?_Nextnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z ; std::_List_val<float,std::allocator<float> >::_Nextnode
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z PROC ; std::_List_val<float,std::allocator<float> >::_Nextnode, COMDAT

; 560  : 		{	// return reference to successor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 561  : 		return ((_Nodepref)(*_Pnode)._Next);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 562  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Nextnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z ENDP ; std::_List_val<float,std::allocator<float> >::_Nextnode
_TEXT	ENDS
PUBLIC	??8?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator==, COMDAT
; _this$ = ecx

; 281  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 282  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 283  : 		if (this->_Getcont() == 0
; 284  : 			|| this->_Getcont() != _Right._Getcont())
; 285  : 			{	// report error
; 286  : 			_DEBUG_ERROR("list iterators incompatible");
; 287  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 288  : 			}
; 289  : 
; 290  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 291  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 292  : 			&& this->_Getcont() == _Right._Getcont());
; 293  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 294  : 
; 295  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 296  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator==
_TEXT	ENDS
PUBLIC	?_Prevnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z ; std::_List_val<float,std::allocator<float> >::_Prevnode
; Function compile flags: /Ogsp
;	COMDAT ?_Prevnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z PROC ; std::_List_val<float,std::allocator<float> >::_Prevnode, COMDAT

; 565  : 		{	// return reference to predecessor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 566  : 		return ((_Nodepref)(*_Pnode)._Prev);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 567  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Prevnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z ENDP ; std::_List_val<float,std::allocator<float> >::_Prevnode
_TEXT	ENDS
PUBLIC	?_Myval@?$_List_val@MV?$allocator@M@std@@@std@@SAAAMPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z ; std::_List_val<float,std::allocator<float> >::_Myval
; Function compile flags: /Ogsp
;	COMDAT ?_Myval@?$_List_val@MV?$allocator@M@std@@@std@@SAAAMPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_val@MV?$allocator@M@std@@@std@@SAAAMPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z PROC ; std::_List_val<float,std::allocator<float> >::_Myval, COMDAT

; 570  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 571  : 		return ((reference)(*_Pnode)._Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 572  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_List_val@MV?$allocator@M@std@@@std@@SAAAMPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z ENDP ; std::_List_val<float,std::allocator<float> >::_Myval
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??E?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator++, COMDAT
; _this$ = ecx

; 221  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 222  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 223  : 		if (this->_Getcont() == 0
; 224  : 			|| this->_Ptr == 0
; 225  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 226  : 			{	// report error
; 227  : 			_DEBUG_ERROR("list iterator not incrementable");
; 228  : 			_SCL_SECURE_OUT_OF_RANGE;
; 229  : 			}
; 230  : 
; 231  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 232  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 233  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 234  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 235  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 236  : 
; 237  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 238  : 		return (*this);
; 239  : 		}

  00008	c3		 ret	 0
??E?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator++
_TEXT	ENDS
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>
; Function compile flags: /Ogsp
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 41   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 42   : 		this->_Adopt(_Plist);
; 43   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_unchecked_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??0D3DXQUATERNION@@QAE@XZ			; D3DXQUATERNION::D3DXQUATERNION
; Function compile flags: /Ogsp
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT
??0D3DXQUATERNION@@QAE@XZ PROC				; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 429  :     D3DXQUATERNION() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXQUATERNION@@QAE@XZ ENDP				; D3DXQUATERNION::D3DXQUATERNION
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??$addressof@$$CBVioHashString@@@std@@YAPBVioHashString@@ABV1@@Z ; std::addressof<ioHashString const >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBVioHashString@@@std@@YAPBVioHashString@@ABV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBVioHashString@@@std@@YAPBVioHashString@@ABV1@@Z PROC ; std::addressof<ioHashString const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBVioHashString@@@std@@YAPBVioHashString@@ABV1@@Z ENDP ; std::addressof<ioHashString const >
_TEXT	ENDS
PUBLIC	??$?0M@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::allocator<std::_List_nod<float,std::allocator<float> >::_Node><float>
; Function compile flags: /Ogsp
;	COMDAT ??$?0M@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0M@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z PROC ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::allocator<std::_List_nod<float,std::allocator<float> >::_Node><float>, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

  00002	c2 04 00	 ret	 4
??$?0M@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z ENDP ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::allocator<std::_List_nod<float,std::allocator<float> >::_Node><float>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<float,std::allocator<float> >::_Node>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T552742 = -12						; size = 12
$T552747 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_List_nod<float,std::allocator<float> >::_Node>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 55 55 55
	15		 cmp	 ecx, 357913941		; 15555555H
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T552747[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T552747[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T552742[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T552742[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T552742[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<float,std::allocator<float> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z ; std::_Destroy<std::_List_nod<float,std::allocator<float> >::_Node>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<float,std::allocator<float> >::_Node>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<float,std::allocator<float> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAVioHashString@@@std@@YAPAVioHashString@@PAV1@@Z ; std::_Val_type<ioHashString *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Val_type@PAVioHashString@@@std@@YAPAVioHashString@@PAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAVioHashString@@@std@@YAPAVioHashString@@PAV1@@Z PROC ; std::_Val_type<ioHashString *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAVioHashString@@@std@@YAPAVioHashString@@PAV1@@Z ENDP ; std::_Val_type<ioHashString *>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 28	 add	 DWORD PTR [eax], 40	; 00000028H

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator++
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 0c	 add	 DWORD PTR [eax], 12	; 0000000cH

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator++
_TEXT	ENDS
PUBLIC	??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z ; std::forward<WeaponInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z PROC ; std::forward<WeaponInfo const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z ENDP ; std::forward<WeaponInfo const &>
_TEXT	ENDS
PUBLIC	??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z ; std::forward<ForceInfo const &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z PROC ; std::forward<ForceInfo const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z ENDP ; std::forward<ForceInfo const &>
_TEXT	ENDS
PUBLIC	??$forward@VioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z ; std::forward<ioHashString>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@VioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@VioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z PROC ; std::forward<ioHashString>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@VioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z ENDP ; std::forward<ioHashString>
_TEXT	ENDS
PUBLIC	??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z ; std::_Construct<ForceInfo,ForceInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z PROC ; std::_Construct<ForceInfo,ForceInfo const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN3@Construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN3@Construct:
  00013	5f		 pop	 edi

; 49   : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z ENDP ; std::_Construct<ForceInfo,ForceInfo const &>
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ	; ioGameEntity::GetGroup
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
;	COMDAT ?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ
_TEXT	SEGMENT
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ PROC	; ioGameEntity::GetGroup, COMDAT
; _this$ = ecx

; 166  : 	inline ioEntityGroup* GetGroup() const { return m_pGroup; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ ENDP	; ioGameEntity::GetGroup
_TEXT	ENDS
PUBLIC	??1WeaponInfo@@QAE@XZ				; WeaponInfo::~WeaponInfo
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1WeaponInfo@@QAE@XZ
_TEXT	SEGMENT
??1WeaponInfo@@QAE@XZ PROC				; WeaponInfo::~WeaponInfo, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??1WeaponInfo@@QAE@XZ ENDP				; WeaponInfo::~WeaponInfo
_TEXT	ENDS
PUBLIC	?size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 04	 sar	 eax, 4

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::size
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::~_Vector_val<ioHashString,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::~_Vector_val<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::~_Vector_val<ioHashString,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??0?$allocator@VioHashString@@@std@@QAE@XZ	; std::allocator<ioHashString>::allocator<ioHashString>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@VioHashString@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@VioHashString@@@std@@QAE@XZ PROC		; std::allocator<ioHashString>::allocator<ioHashString>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@VioHashString@@@std@@QAE@XZ ENDP		; std::allocator<ioHashString>::allocator<ioHashString>
_TEXT	ENDS
PUBLIC	??0?$allocator@VioHashString@@@std@@QAE@ABV01@@Z ; std::allocator<ioHashString>::allocator<ioHashString>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@VioHashString@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@VioHashString@@@std@@QAE@ABV01@@Z PROC	; std::allocator<ioHashString>::allocator<ioHashString>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@VioHashString@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<ioHashString>::allocator<ioHashString>
_TEXT	ENDS
PUBLIC	??0?$allocator@M@std@@QAE@XZ			; std::allocator<float>::allocator<float>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@M@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@M@std@@QAE@XZ PROC			; std::allocator<float>::allocator<float>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@M@std@@QAE@XZ ENDP			; std::allocator<float>::allocator<float>
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::~_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::~_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::~_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UWeaponInfo@@@std@@QAE@XZ	; std::allocator<WeaponInfo>::allocator<WeaponInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UWeaponInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UWeaponInfo@@@std@@QAE@XZ PROC		; std::allocator<WeaponInfo>::allocator<WeaponInfo>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UWeaponInfo@@@std@@QAE@XZ ENDP		; std::allocator<WeaponInfo>::allocator<WeaponInfo>
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::~_Vector_val<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::~_Vector_val<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::~_Vector_val<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UForceInfo@@@std@@QAE@XZ		; std::allocator<ForceInfo>::allocator<ForceInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UForceInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UForceInfo@@@std@@QAE@XZ PROC		; std::allocator<ForceInfo>::allocator<ForceInfo>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UForceInfo@@@std@@QAE@XZ ENDP		; std::allocator<ForceInfo>::allocator<ForceInfo>
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z	; CEncrypt<float>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z PROC	; CEncrypt<float>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ENDP	; CEncrypt<float>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z	; CEncrypt<float>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z PROC	; CEncrypt<float>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1648 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1649 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1650 : 		*value = *((float*)m_TempMem);

  00016	d9 06		 fld	 DWORD PTR [esi]
  00018	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  0001b	d9 18		 fstp	 DWORD PTR [eax]
  0001d	5e		 pop	 esi

; 1651 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ENDP	; CEncrypt<float>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z	; CEncrypt<unsigned long>::DecryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z PROC	; CEncrypt<unsigned long>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1256 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1257 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1258 : 		*value = *((DWORD*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 1259 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ENDP	; CEncrypt<unsigned long>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Xlen
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@I@Z ; std::allocator<ioHashString>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@I@Z PROC ; std::allocator<ioHashString>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@I@Z ENDP ; std::allocator<ioHashString>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@M@std@@QAE@ABV01@@Z		; std::allocator<float>::allocator<float>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@M@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@M@std@@QAE@ABV01@@Z PROC			; std::allocator<float>::allocator<float>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@M@std@@QAE@ABV01@@Z ENDP			; std::allocator<float>::allocator<float>
_TEXT	ENDS
PUBLIC	??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z	; std::allocator<WeaponInfo>::allocator<WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z PROC	; std::allocator<WeaponInfo>::allocator<WeaponInfo>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<WeaponInfo>::allocator<WeaponInfo>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z ; std::allocator<WeaponInfo>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z PROC ; std::allocator<WeaponInfo>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z ENDP ; std::allocator<WeaponInfo>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z	; std::allocator<ForceInfo>::allocator<ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z PROC	; std::allocator<ForceInfo>::allocator<ForceInfo>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<ForceInfo>::allocator<ForceInfo>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z ; std::allocator<ForceInfo>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z PROC ; std::allocator<ForceInfo>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z ENDP ; std::allocator<ForceInfo>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Vector_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Vector_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Vector_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@VioHashString@@@std@@QBEIXZ ; std::allocator<ioHashString>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@VioHashString@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@VioHashString@@@std@@QBEIXZ PROC	; std::allocator<ioHashString>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@VioHashString@@@std@@QBEIXZ ENDP	; std::allocator<ioHashString>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Compat
_TEXT	ENDS
PUBLIC	??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ; std::_Allocate<ioHashString>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z
_TEXT	SEGMENT
$T552886 = -12						; size = 12
$T552890 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z PROC ; std::_Allocate<ioHashString>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate@2

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	0f		 cmp	 ecx, 268435455		; 0fffffffH
  00015	77 0e		 ja	 SHORT $LN1@Allocate@2
  00017	c1 e1 04	 shl	 ecx, 4
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T552890[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T552890[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T552886[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T552886[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T552886[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate@2:
??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ENDP ; std::_Allocate<ioHashString>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$forward@ABVioHashString@@@std@@YAABVioHashString@@ABV1@@Z ; std::forward<ioHashString const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABVioHashString@@@std@@YAABVioHashString@@ABV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABVioHashString@@@std@@YAABVioHashString@@ABV1@@Z PROC ; std::forward<ioHashString const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABVioHashString@@@std@@YAABVioHashString@@ABV1@@Z ENDP ; std::forward<ioHashString const &>
_TEXT	ENDS
PUBLIC	??$forward@AAVioHashString@@@std@@YAAAVioHashString@@AAV1@@Z ; std::forward<ioHashString &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@AAVioHashString@@@std@@YAAAVioHashString@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAVioHashString@@@std@@YAAAVioHashString@@AAV1@@Z PROC ; std::forward<ioHashString &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAVioHashString@@@std@@YAAAVioHashString@@AAV1@@Z ENDP ; std::forward<ioHashString &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@VioHashString@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVioHashString@@0@Z ; std::_Ptr_cat<ioHashString,ioHashString>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@VioHashString@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVioHashString@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@VioHashString@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVioHashString@@0@Z PROC ; std::_Ptr_cat<ioHashString,ioHashString>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@VioHashString@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVioHashString@@0@Z ENDP ; std::_Ptr_cat<ioHashString,ioHashString>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z ; std::_Ptr_cat<WeaponInfo,WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z PROC ; std::_Ptr_cat<WeaponInfo,WeaponInfo>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z ENDP ; std::_Ptr_cat<WeaponInfo,WeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z ; std::_Ptr_cat<ForceInfo,ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z PROC ; std::_Ptr_cat<ForceInfo,ForceInfo>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z ENDP ; std::_Ptr_cat<ForceInfo,ForceInfo>
_TEXT	ENDS
PUBLIC	?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 28		 push	 40			; 00000028H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::size
_TEXT	ENDS
PUBLIC	?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 0c		 push	 12			; 0000000cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::size
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@2:
$LN3@Xlen@2:
  0000b	cc		 int	 3
?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Xlen
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@3:
$LN3@Xlen@3:
  0000b	cc		 int	 3
?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Xlen
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ	; std::allocator<WeaponInfo>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ PROC	; std::allocator<WeaponInfo>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ ENDP	; std::allocator<WeaponInfo>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ	; std::allocator<ForceInfo>::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ PROC	; std::allocator<ForceInfo>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ ENDP	; std::allocator<ForceInfo>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Compat
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Compat
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@AAPAVioHashString@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@AAPAVioHashString@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@AAPAVioHashString@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@AAPAVioHashString@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *>
_TEXT	ENDS
PUBLIC	??$move@AAVioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z ; std::move<ioHashString &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAVioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAVioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z PROC ; std::move<ioHashString &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAVioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z ENDP ; std::move<ioHashString &>
_TEXT	ENDS
PUBLIC	??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ; std::_Allocate<WeaponInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z
_TEXT	SEGMENT
$T552954 = -12						; size = 12
$T552958 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z PROC ; std::_Allocate<WeaponInfo>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate@3

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 66 66 66
	06		 cmp	 ecx, 107374182		; 06666666H
  00015	77 0e		 ja	 SHORT $LN1@Allocate@3
  00017	6b c9 28	 imul	 ecx, 40			; 00000028H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate@3
$LN1@Allocate@3:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T552958[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T552958[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T552954[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T552954[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T552954[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@3:
$LN5@Allocate@3:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate@3:
??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ENDP ; std::_Allocate<WeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ; std::_Allocate<ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z
_TEXT	SEGMENT
$T552963 = -12						; size = 12
$T552967 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z PROC ; std::_Allocate<ForceInfo>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate@4

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 55 55 55
	15		 cmp	 ecx, 357913941		; 15555555H
  00015	77 0e		 ja	 SHORT $LN1@Allocate@4
  00017	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate@4
$LN1@Allocate@4:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T552967[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T552967[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T552963[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T552963[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T552963[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@4:
$LN5@Allocate@4:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate@4:
??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ENDP ; std::_Allocate<ForceInfo>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEABVioHashString@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEABVioHashString@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEABVioHashString@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 10	 add	 DWORD PTR [eax], 16	; 00000010H

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator++
_TEXT	ENDS
PUBLIC	??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z ; std::_Destroy<ForceInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z PROC	; std::_Destroy<ForceInfo>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z ENDP	; std::_Destroy<ForceInfo>
_TEXT	ENDS
PUBLIC	??_GioHashString@@QAEPAXI@Z			; ioHashString::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GioHashString@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioHashString@@QAEPAXI@Z PROC			; ioHashString::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0000c	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00010	74 07		 je	 SHORT $LN1@scalar@2
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@2:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_GioHashString@@QAEPAXI@Z ENDP			; ioHashString::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_GWeaponInfo@@QAEPAXI@Z			; WeaponInfo::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GWeaponInfo@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GWeaponInfo@@QAEPAXI@Z PROC				; WeaponInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0000f	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00013	74 07		 je	 SHORT $LN1@scalar@3
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	59		 pop	 ecx
$LN1@scalar@3:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GWeaponInfo@@QAEPAXI@Z ENDP				; WeaponInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z$0
__ehfuncinfo$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z
_TEXT	SEGMENT
$T552990 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z PROC ; std::_Construct<ioHashString,ioHashString const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T552990[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 09		 je	 SHORT $LN3@Construct@2
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
$LN3@Construct@2:

; 49   : 	}

  00026	e8 00 00 00 00	 call	 __EH_epilog3
  0002b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T552990[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ENDP ; std::_Construct<ioHashString,ioHashString const &>
PUBLIC	??0WeaponInfo@@QAE@ABU0@@Z			; WeaponInfo::WeaponInfo
; Function compile flags: /Ogsp
;	COMDAT ??0WeaponInfo@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0WeaponInfo@@QAE@ABU0@@Z PROC				; WeaponInfo::WeaponInfo, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	8b 07		 mov	 eax, DWORD PTR [edi]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00011	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00014	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00017	50		 push	 eax
  00018	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00021	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00024	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00027	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0002a	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0002d	8a 47 20	 mov	 al, BYTE PTR [edi+32]
  00030	88 46 20	 mov	 BYTE PTR [esi+32], al
  00033	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00036	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00039	5f		 pop	 edi
  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??0WeaponInfo@@QAE@ABU0@@Z ENDP				; WeaponInfo::WeaponInfo
_TEXT	ENDS
PUBLIC	??_C@_0CE@CAMGOCBI@?$CFs?5?9?5JumpAttack?5Animation?5Not?5Ex@ ; `string'
PUBLIC	??_C@_0BP@BGPIDIJC@?$CFs?5?9?5AttackAttribute?5Not?5Exist?$AA@ ; `string'
PUBLIC	??_C@_0BP@ONHOMIFF@ioBullFightItem?3?3SetJumpAttack?$AA@ ; `string'
PUBLIC	?SetJumpAttack@ioBullFightItem@@UAE_NPAVioBaseChar@@HMW4AttackType@@@Z ; ioBullFightItem::SetJumpAttack
EXTRN	__imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z:PROC
EXTRN	__imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ:PROC
EXTRN	__imp_?LOG@@3VCLog@@A:BYTE
;	COMDAT ??_C@_0CE@CAMGOCBI@?$CFs?5?9?5JumpAttack?5Animation?5Not?5Ex@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
CONST	SEGMENT
??_C@_0CE@CAMGOCBI@?$CFs?5?9?5JumpAttack?5Animation?5Not?5Ex@ DB '%s - Ju'
	DB	'mpAttack Animation Not Exist', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BGPIDIJC@?$CFs?5?9?5AttackAttribute?5Not?5Exist?$AA@
CONST	SEGMENT
??_C@_0BP@BGPIDIJC@?$CFs?5?9?5AttackAttribute?5Not?5Exist?$AA@ DB '%s - A'
	DB	'ttackAttribute Not Exist', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@ONHOMIFF@ioBullFightItem?3?3SetJumpAttack?$AA@
CONST	SEGMENT
??_C@_0BP@ONHOMIFF@ioBullFightItem?3?3SetJumpAttack?$AA@ DB 'ioBullFightI'
	DB	'tem::SetJumpAttack', 00H			; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobullfightitem.cpp
CONST	ENDS
;	COMDAT ?SetJumpAttack@ioBullFightItem@@UAE_NPAVioBaseChar@@HMW4AttackType@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_iAniID$ = 12						; size = 4
_fTimeRate$ = 16					; size = 4
_eType$ = 20						; size = 4
?SetJumpAttack@ioBullFightItem@@UAE_NPAVioBaseChar@@HMW4AttackType@@@Z PROC ; ioBullFightItem::SetJumpAttack, COMDAT
; _this$ = ecx

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 226  : 	if( !pOwner ) return false;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _pOwner$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	85 db		 test	 ebx, ebx
  0000c	74 7d		 je	 SHORT $LN11@SetJumpAtt

; 227  : 
; 228  : 	DWORD dwCurTime = FRAMEGETTIME();

  0000e	57		 push	 edi
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00015	8b c8		 mov	 ecx, eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 229  : 	ClearAirJump();

  0001d	8b 06		 mov	 eax, DWORD PTR [esi]
  0001f	8b ce		 mov	 ecx, esi
  00021	ff 90 a8 02 00
	00		 call	 DWORD PTR [eax+680]

; 230  : 
; 231  : 	AttackType eExtendType = AT_JUMP_ATTACK;
; 232  : 
; 233  : 	const AttackAttribute *pAttr = GetAttackAttribute( eExtendType );

  00027	8b 06		 mov	 eax, DWORD PTR [esi]
  00029	6a 00		 push	 0
  0002b	6a 03		 push	 3
  0002d	8b ce		 mov	 ecx, esi
  0002f	ff 90 08 02 00
	00		 call	 DWORD PTR [eax+520]
  00035	8b f8		 mov	 edi, eax

; 234  : 	if( !pAttr )

  00037	85 ff		 test	 edi, edi
  00039	75 1d		 jne	 SHORT $LN2@SetJumpAtt

; 235  : 	{
; 236  : 		LOG.PrintTimeAndLog( 0, "%s - AttackAttribute Not Exist", __FUNCTION__ );

  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@ONHOMIFF@ioBullFightItem?3?3SetJumpAttack?$AA@
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@BGPIDIJC@?$CFs?5?9?5AttackAttribute?5Not?5Exist?$AA@
$LN10@SetJumpAtt:
  00045	6a 00		 push	 0
  00047	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00053	83 c4 10	 add	 esp, 16			; 00000010H

; 237  : 		return false;

  00056	eb 32		 jmp	 SHORT $LN9@SetJumpAtt
$LN2@SetJumpAtt:

; 238  : 	}
; 239  : 
; 240  : 	ioEntityGroup *pGrp = pOwner->GetGroup();

  00058	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]

; 241  : 	iAniID = pGrp->GetAnimationIdx( pAttr->m_AttackAnimation );

  0005b	57		 push	 edi
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z

; 242  : 	if( iAniID == -1 )

  00062	83 f8 ff	 cmp	 eax, -1
  00065	75 0c		 jne	 SHORT $LN1@SetJumpAtt

; 243  : 	{
; 244  : 		LOG.PrintTimeAndLog( 0, "%s - JumpAttack Animation Not Exist", __FUNCTION__ );

  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@ONHOMIFF@ioBullFightItem?3?3SetJumpAttack?$AA@
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@CAMGOCBI@?$CFs?5?9?5JumpAttack?5Animation?5Not?5Ex@

; 245  : 		return false;

  00071	eb d2		 jmp	 SHORT $LN10@SetJumpAtt
$LN1@SetJumpAtt:

; 246  : 	}
; 247  : 
; 248  : 	fTimeRate   = pAttr->m_fAttackAniRate;
; 249  : 	DWORD dwPreDelay  = pAttr->m_dwPreDelay;
; 250  : 
; 251  : 	// For AirJumpPower
; 252  : 	SetAirJump( pOwner, iAniID, fTimeRate );

  00073	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
  00078	8b 16		 mov	 edx, DWORD PTR [esi]
  0007a	51		 push	 ecx
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	50		 push	 eax
  00081	53		 push	 ebx
  00082	8b ce		 mov	 ecx, esi
  00084	ff 92 ac 02 00
	00		 call	 DWORD PTR [edx+684]
$LN9@SetJumpAtt:
  0008a	5f		 pop	 edi
$LN11@SetJumpAtt:
  0008b	5e		 pop	 esi

; 253  : 
; 254  : 	return false;

  0008c	32 c0		 xor	 al, al
  0008e	5b		 pop	 ebx

; 255  : }

  0008f	5d		 pop	 ebp
  00090	c2 10 00	 ret	 16			; 00000010H
?SetJumpAttack@ioBullFightItem@@UAE_NPAVioBaseChar@@HMW4AttackType@@@Z ENDP ; ioBullFightItem::SetJumpAttack
_TEXT	ENDS
PUBLIC	__real@bf800000
PUBLIC	__$ArrayPad$
PUBLIC	?SetExtraInfoToWeapon@ioBullFightItem@@UAEXPAVioWeapon@@_N@Z ; ioBullFightItem::SetExtraInfoToWeapon
EXTRN	?SetZoneValue@ioZoneEffectWeapon@@QAEX_N0@Z:PROC ; ioZoneEffectWeapon::SetZoneValue
EXTRN	?SetCollisionDir@ioZoneEffectWeapon@@QAEXAAUD3DXVECTOR3@@@Z:PROC ; ioZoneEffectWeapon::SetCollisionDir
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z:PROC
EXTRN	?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ:PROC	; ioWeapon::GetOwner
EXTRN	?SetExtraInfoToWeapon@ioAttackableItem@@UAEXPAVioWeapon@@_N@Z:PROC ; ioAttackableItem::SetExtraInfoToWeapon
;	COMDAT __real@bf800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobullfightitem.cpp
CONST	ENDS
;	COMDAT ?SetExtraInfoToWeapon@ioBullFightItem@@UAEXPAVioWeapon@@_N@Z
_TEXT	SEGMENT
_vDir$548602 = -28					; size = 12
$T548603 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pWeapon$ = 8						; size = 4
_bJumpAttack$ = 12					; size = 1
?SetExtraInfoToWeapon@ioBullFightItem@@UAEXPAVioWeapon@@_N@Z PROC ; ioBullFightItem::SetExtraInfoToWeapon, COMDAT
; _this$ = ecx

; 268  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi

; 269  : 	ioAttackableItem::SetExtraInfoToWeapon( pWeapon, bJumpAttack );

  00011	ff 75 0c	 push	 DWORD PTR _bJumpAttack$[ebp]
  00014	8b 75 08	 mov	 esi, DWORD PTR _pWeapon$[ebp]
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ?SetExtraInfoToWeapon@ioAttackableItem@@UAEXPAVioWeapon@@_N@Z ; ioAttackableItem::SetExtraInfoToWeapon

; 270  : 
; 271  : 	ioZoneEffectWeapon *pZone = ToZoneEffectWeapon( pWeapon );

  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 ?ToZoneEffectWeapon@@YAPAVioZoneEffectWeapon@@PAVioWeapon@@@Z ; ToZoneEffectWeapon
  00023	8b f0		 mov	 esi, eax
  00025	59		 pop	 ecx

; 272  : 	if( pZone )

  00026	85 f6		 test	 esi, esi
  00028	74 52		 je	 SHORT $LN1@SetExtraIn

; 273  : 	{
; 274  : 		ioBaseChar *pChar = pZone->GetOwner();

  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?GetOwner@ioWeapon@@QBEPAVioBaseChar@@XZ ; ioWeapon::GetOwner

; 275  : 		if( pChar )

  00031	85 c0		 test	 eax, eax
  00033	74 47		 je	 SHORT $LN1@SetExtraIn

; 276  : 		{
; 277  : 			D3DXVECTOR3 vDir = pChar->GetTargetRot() * D3DXVECTOR3( 0.0f, 0.0f, -1.0f );

  00035	0f 57 c0	 xorps	 xmm0, xmm0
  00038	8d 4d f0	 lea	 ecx, DWORD PTR $T548603[ebp]
  0003b	51		 push	 ecx
  0003c	05 a4 06 00 00	 add	 eax, 1700		; 000006a4H
  00041	50		 push	 eax
  00042	8d 45 e4	 lea	 eax, DWORD PTR _vDir$548602[ebp]
  00045	f3 0f 11 45 f0	 movss	 DWORD PTR $T548603[ebp], xmm0
  0004a	f3 0f 11 45 f4	 movss	 DWORD PTR $T548603[ebp+4], xmm0
  0004f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00057	50		 push	 eax
  00058	f3 0f 11 45 f8	 movss	 DWORD PTR $T548603[ebp+8], xmm0
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH

; 278  : 			pZone->SetCollisionDir( vDir );

  00066	8d 45 e4	 lea	 eax, DWORD PTR _vDir$548602[ebp]
  00069	50		 push	 eax
  0006a	8b ce		 mov	 ecx, esi
  0006c	e8 00 00 00 00	 call	 ?SetCollisionDir@ioZoneEffectWeapon@@QAEXAAUD3DXVECTOR3@@@Z ; ioZoneEffectWeapon::SetCollisionDir

; 279  : 			pZone->SetZoneValue( true, false );

  00071	6a 00		 push	 0
  00073	6a 01		 push	 1
  00075	8b ce		 mov	 ecx, esi
  00077	e8 00 00 00 00	 call	 ?SetZoneValue@ioZoneEffectWeapon@@QAEX_N0@Z ; ioZoneEffectWeapon::SetZoneValue
$LN1@SetExtraIn:

; 280  : 		}
; 281  : 	}
; 282  : }

  0007c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007f	33 cd		 xor	 ecx, ebp
  00081	5e		 pop	 esi
  00082	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00087	c9		 leave
  00088	c2 08 00	 ret	 8
?SetExtraInfoToWeapon@ioBullFightItem@@UAEXPAVioWeapon@@_N@Z ENDP ; ioBullFightItem::SetExtraInfoToWeapon
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@42c80000
PUBLIC	?CheckExtendMoveAniState@ioBullFightItem@@IAEXPAVioBaseChar@@_N@Z ; ioBullFightItem::CheckExtendMoveAniState
EXTRN	?ActionAimingMove@ioTutorialManager@@QAEXXZ:PROC ; ioTutorialManager::ActionAimingMove
EXTRN	?GetSingleton@ioTutorialManager@@SAAAV1@XZ:PROC	; ioTutorialManager::GetSingleton
EXTRN	__imp_?SetLoopAni@ioEntityGroup@@QAE_NABVioHashString@@MMMM@Z:PROC
EXTRN	__imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z:PROC
EXTRN	__imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z:PROC
EXTRN	?IsChangeDirection@ioBaseChar@@QAE_NXZ:PROC	; ioBaseChar::IsChangeDirection
EXTRN	?IsSettedDirection@ioBaseChar@@QBE_NXZ:PROC	; ioBaseChar::IsSettedDirection
;	COMDAT __real@3ff0000000000000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobullfightitem.cpp
CONST	ENDS
;	COMDAT ?CheckExtendMoveAniState@ioBullFightItem@@IAEXPAVioBaseChar@@_N@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_bFirst$ = 12						; size = 1
?CheckExtendMoveAniState@ioBullFightItem@@IAEXPAVioBaseChar@@_N@Z PROC ; ioBullFightItem::CheckExtendMoveAniState, COMDAT
; _this$ = ecx

; 639  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 640  : 	if( m_ChargeState != CS_EXTEND_MOVE )

  00006	83 be 48 1a 00
	00 04		 cmp	 DWORD PTR [esi+6728], 4
  0000d	0f 85 67 01 00
	00		 jne	 $LN1@CheckExten

; 641  : 		return;
; 642  : 
; 643  : 	ioEntityGroup *pGrp = pOwner->GetGroup();

  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _pOwner$[ebp]
  00017	57		 push	 edi
  00018	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]

; 644  : 	int iAniID = 0;
; 645  : 
; 646  : 	if( pOwner->IsSettedDirection() )

  0001b	8b cb		 mov	 ecx, ebx
  0001d	e8 00 00 00 00	 call	 ?IsSettedDirection@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsSettedDirection
  00022	84 c0		 test	 al, al
  00024	0f 84 b3 00 00
	00		 je	 $LN5@CheckExten

; 647  : 	{
; 648  : 		bool bChangeDir = pOwner->IsChangeDirection();

  0002a	8b cb		 mov	 ecx, ebx
  0002c	e8 00 00 00 00	 call	 ?IsChangeDirection@ioBaseChar@@QAE_NXZ ; ioBaseChar::IsChangeDirection

; 649  : 		if( bChangeDir || bFirst )

  00031	84 c0		 test	 al, al
  00033	75 09		 jne	 SHORT $LN3@CheckExten
  00035	38 45 0c	 cmp	 BYTE PTR _bFirst$[ebp], al
  00038	0f 84 3a 01 00
	00		 je	 $LN11@CheckExten
$LN3@CheckExten:

; 650  : 		{
; 651  : 			pGrp->ClearAllLoopAni( 100.0f, true );

  0003e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00046	6a 01		 push	 1
  00048	51		 push	 ecx
  00049	8b cf		 mov	 ecx, edi
  0004b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 652  : 			pGrp->ClearAllActionAni( 100.0f, true );			

  00056	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0005e	6a 01		 push	 1
  00060	51		 push	 ecx
  00061	8b cf		 mov	 ecx, edi
  00063	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 653  : 			pGrp->SetLoopAni( m_szExtendMoveAni, 100.0f, 1.0f, 1.0f/m_fExtendMoveAniRate );

  0006e	0f 57 c0	 xorps	 xmm0, xmm0
  00071	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00079	83 ec 10	 sub	 esp, 16			; 00000010H
  0007c	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00082	f3 0f 10 86 dc
	19 00 00	 movss	 xmm0, DWORD PTR [esi+6620]
  0008a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0008d	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00091	8d 86 cc 19 00
	00		 lea	 eax, DWORD PTR [esi+6604]
  00097	8b cf		 mov	 ecx, edi
  00099	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  0009d	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000ab	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  000b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000be	50		 push	 eax
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetLoopAni@ioEntityGroup@@QAE_NABVioHashString@@MMMM@Z

; 654  : 
; 655  : 			m_bSetDelay = false;

  000c5	c6 86 58 1a 00
	00 00		 mov	 BYTE PTR [esi+6744], 0

; 656  : 
; 657  : 			g_TutorialMgr.ActionAimingMove();

  000cc	e8 00 00 00 00	 call	 ?GetSingleton@ioTutorialManager@@SAAAV1@XZ ; ioTutorialManager::GetSingleton
  000d1	8b c8		 mov	 ecx, eax
  000d3	e8 00 00 00 00	 call	 ?ActionAimingMove@ioTutorialManager@@QAEXXZ ; ioTutorialManager::ActionAimingMove

; 658  : 		}
; 659  : 	}
; 660  : 	else

  000d8	e9 9b 00 00 00	 jmp	 $LN11@CheckExten
$LN5@CheckExten:

; 661  : 	{
; 662  : 		if( !m_bSetDelay )

  000dd	80 be 58 1a 00
	00 00		 cmp	 BYTE PTR [esi+6744], 0
  000e4	0f 85 8e 00 00
	00		 jne	 $LN11@CheckExten

; 663  : 		{
; 664  : 			pGrp->ClearAllLoopAni( 100.0f, true );

  000ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  000f2	6a 01		 push	 1
  000f4	51		 push	 ecx
  000f5	8b cf		 mov	 ecx, edi
  000f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 665  : 			pGrp->ClearAllActionAni( 100.0f, true );

  00102	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0010a	6a 01		 push	 1
  0010c	51		 push	 ecx
  0010d	8b cf		 mov	 ecx, edi
  0010f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00114	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 666  : 			pGrp->SetLoopAni( m_szExtendDelayAni, 100.0f, 1.0f, 1.0f/m_fExtendDelayAniRate );

  0011a	0f 57 c0	 xorps	 xmm0, xmm0
  0011d	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00125	83 ec 10	 sub	 esp, 16			; 00000010H
  00128	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0012e	f3 0f 10 86 c8
	19 00 00	 movss	 xmm0, DWORD PTR [esi+6600]
  00136	0f 5a c0	 cvtps2pd xmm0, xmm0
  00139	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0013d	8d 86 b8 19 00
	00		 lea	 eax, DWORD PTR [esi+6584]
  00143	8b cf		 mov	 ecx, edi
  00145	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  00149	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0014f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00157	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0015d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00165	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016a	50		 push	 eax
  0016b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetLoopAni@ioEntityGroup@@QAE_NABVioHashString@@MMMM@Z

; 667  : 			m_bSetDelay = true;

  00171	c6 86 58 1a 00
	00 01		 mov	 BYTE PTR [esi+6744], 1
$LN11@CheckExten:
  00178	5f		 pop	 edi
  00179	5b		 pop	 ebx
$LN1@CheckExten:
  0017a	5e		 pop	 esi

; 668  : 		}
; 669  : 	}
; 670  : }

  0017b	5d		 pop	 ebp
  0017c	c2 08 00	 ret	 8
?CheckExtendMoveAniState@ioBullFightItem@@IAEXPAVioBaseChar@@_N@Z ENDP ; ioBullFightItem::CheckExtendMoveAniState
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?CheckReserveState@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ; ioBullFightItem::CheckReserveState
EXTRN	?SetState@ioBaseChar@@QAEXH_N@Z:PROC		; ioBaseChar::SetState
EXTRN	?IsDefenseKeyDown@ioBaseChar@@QBE_NXZ:PROC	; ioBaseChar::IsDefenseKeyDown
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
xdata$x	SEGMENT
__unwindtable$?CheckReserveState@ioBullFightItem@@IAEXPAVioBaseChar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckReserveState@ioBullFightItem@@IAEXPAVioBaseChar@@@Z$0
__ehfuncinfo$?CheckReserveState@ioBullFightItem@@IAEXPAVioBaseChar@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CheckReserveState@ioBullFightItem@@IAEXPAVioBaseChar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobullfightitem.cpp
xdata$x	ENDS
;	COMDAT ?CheckReserveState@ioBullFightItem@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_kPacket$549011 = -32808				; size = 32792
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
?CheckReserveState@ioBullFightItem@@IAEXPAVioBaseChar@@@Z PROC ; ioBullFightItem::CheckReserveState, COMDAT
; _this$ = ecx

; 740  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CheckReserveState@ioBullFightItem@@IAEXPAVioBaseChar@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 1c 80 00 00	 mov	 eax, 32796		; 0000801cH
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 75 08	 mov	 esi, DWORD PTR _pOwner$[ebp]

; 741  : 	if ( !pOwner || !pOwner->IsNeedProcess() )

  00035	33 db		 xor	 ebx, ebx
  00037	8b f9		 mov	 edi, ecx
  00039	3b f3		 cmp	 esi, ebx
  0003b	0f 84 e5 00 00
	00		 je	 $LN7@CheckReser
  00041	8b 06		 mov	 eax, DWORD PTR [esi]
  00043	8b ce		 mov	 ecx, esi
  00045	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  0004b	84 c0		 test	 al, al
  0004d	0f 84 d3 00 00
	00		 je	 $LN7@CheckReser

; 742  : 		return;
; 743  : 
; 744  : 	if( m_bAttackKeyReserved )

  00053	38 9f 60 1a 00
	00		 cmp	 BYTE PTR [edi+6752], bl
  00059	74 0d		 je	 SHORT $LN6@CheckReser

; 745  : 	{
; 746  : 		SetReserveAttack( pOwner );

  0005b	56		 push	 esi
  0005c	8b cf		 mov	 ecx, edi
  0005e	e8 00 00 00 00	 call	 ?SetReserveAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ; ioBullFightItem::SetReserveAttack

; 747  : 		return;

  00063	e9 be 00 00 00	 jmp	 $LN7@CheckReser
$LN6@CheckReser:

; 748  : 	}
; 749  : 	else if( m_bDefenseKeyReserved && pOwner->IsDefenseKeyDown() )

  00068	38 9f 61 1a 00
	00		 cmp	 BYTE PTR [edi+6753], bl
  0006e	74 18		 je	 SHORT $LN4@CheckReser
  00070	8b ce		 mov	 ecx, esi
  00072	e8 00 00 00 00	 call	 ?IsDefenseKeyDown@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsDefenseKeyDown
  00077	84 c0		 test	 al, al
  00079	74 0d		 je	 SHORT $LN4@CheckReser

; 750  : 	{
; 751  : 		SetReserveDefence( pOwner );

  0007b	56		 push	 esi
  0007c	8b cf		 mov	 ecx, edi
  0007e	e8 00 00 00 00	 call	 ?SetReserveDefence@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ; ioBullFightItem::SetReserveDefence

; 752  : 		return;

  00083	e9 9e 00 00 00	 jmp	 $LN7@CheckReser
$LN4@CheckReser:

; 753  : 	}
; 754  : 	else if( m_bJumpKeyReserved )

  00088	38 9f 62 1a 00
	00		 cmp	 BYTE PTR [edi+6754], bl
  0008e	74 0d		 je	 SHORT $LN2@CheckReser

; 755  : 	{
; 756  : 		SetReserveJump( pOwner );

  00090	56		 push	 esi
  00091	8b cf		 mov	 ecx, edi
  00093	e8 00 00 00 00	 call	 ?SetReserveJump@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ; ioBullFightItem::SetReserveJump

; 757  : 		return;

  00098	e9 89 00 00 00	 jmp	 $LN7@CheckReser
$LN2@CheckReser:

; 758  : 	}
; 759  : 
; 760  : 	if ( pOwner->IsNeedSendNetwork() )

  0009d	8b 06		 mov	 eax, DWORD PTR [esi]
  0009f	8b ce		 mov	 ecx, esi
  000a1	ff 90 04 01 00
	00		 call	 DWORD PTR [eax+260]
  000a7	84 c0		 test	 al, al
  000a9	74 72		 je	 SHORT $LN1@CheckReser

; 761  : 	{
; 762  : 		SP2Packet kPacket( CUPK_ITEM_GAUGE_OK );

  000ab	68 27 41 00 00	 push	 16679			; 00004127H
  000b0	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549011[ebp]
  000b6	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 763  : 		FillItemGaugePacketHeader( pOwner, kPacket );

  000bb	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$549011[ebp]
  000c1	50		 push	 eax
  000c2	56		 push	 esi
  000c3	8b cf		 mov	 ecx, edi
  000c5	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  000c8	e8 00 00 00 00	 call	 ?FillItemGaugePacketHeader@ioAttackableItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z ; ioAttackableItem::FillItemGaugePacketHeader

; 764  : 		kPacket << static_cast<byte>( ST_END );

  000cd	6a 03		 push	 3
  000cf	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549011[ebp]
  000d5	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@E@Z ; SP2Packet::operator<<

; 765  : 		kPacket << pOwner->GetTargetRot();

  000da	8d 86 a4 06 00
	00		 lea	 eax, DWORD PTR [esi+1700]
  000e0	50		 push	 eax
  000e1	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549011[ebp]
  000e7	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXQUATERNION@@@Z ; SP2Packet::operator<<

; 766  : 		kPacket << pOwner->GetWorldPosition();

  000ec	8b 06		 mov	 eax, DWORD PTR [esi]
  000ee	8b ce		 mov	 ecx, esi
  000f0	ff 50 70	 call	 DWORD PTR [eax+112]
  000f3	50		 push	 eax
  000f4	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549011[ebp]
  000fa	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXVECTOR3@@@Z ; SP2Packet::operator<<

; 767  : 		P2PNetwork::SendToAllPlayingUser( kPacket );

  000ff	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$549011[ebp]
  00105	53		 push	 ebx
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z ; P2PNetwork::SendToAllPlayingUser

; 768  : 	}

  0010c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00110	59		 pop	 ecx
  00111	59		 pop	 ecx
  00112	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549011[ebp]
  00118	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN1@CheckReser:

; 769  : 
; 770  : 	pOwner->SetState( CS_DELAY, false );

  0011d	53		 push	 ebx
  0011e	53		 push	 ebx
  0011f	8b ce		 mov	 ecx, esi
  00121	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState
$LN7@CheckReser:

; 771  : }

  00126	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00129	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00130	59		 pop	 ecx
  00131	5f		 pop	 edi
  00132	5e		 pop	 esi
  00133	5b		 pop	 ebx
  00134	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00137	33 cd		 xor	 ecx, ebp
  00139	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013e	c9		 leave
  0013f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CheckReserveState@ioBullFightItem@@IAEXPAVioBaseChar@@@Z$0:
  00000	8d 8d d8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$549011[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?CheckReserveState@ioBullFightItem@@IAEXPAVioBaseChar@@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a d4 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32812]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CheckReserveState@ioBullFightItem@@IAEXPAVioBaseChar@@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CheckReserveState@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ENDP ; ioBullFightItem::CheckReserveState
PUBLIC	?ExtendAddBuff@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ; ioBullFightItem::ExtendAddBuff
EXTRN	?AddNewBuff@ioBaseChar@@QAEPAVioBuff@@ABVioHashString@@00PAVioSkill@@_N@Z:PROC ; ioBaseChar::AddNewBuff
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$?ExtendAddBuff@ioBullFightItem@@IAEXPAVioBaseChar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ExtendAddBuff@ioBullFightItem@@IAEXPAVioBaseChar@@@Z$0
__ehfuncinfo$?ExtendAddBuff@ioBullFightItem@@IAEXPAVioBaseChar@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ExtendAddBuff@ioBullFightItem@@IAEXPAVioBaseChar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobullfightitem.cpp
xdata$x	ENDS
;	COMDAT ?ExtendAddBuff@ioBullFightItem@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
$T553063 = -32						; size = 16
_i$549036 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
?ExtendAddBuff@ioBullFightItem@@IAEXPAVioBaseChar@@@Z PROC ; ioBullFightItem::ExtendAddBuff, COMDAT
; _this$ = ecx

; 803  : {

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?ExtendAddBuff@ioBullFightItem@@IAEXPAVioBaseChar@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 804  : 	if ( !pOwner )

  0000e	33 ff		 xor	 edi, edi
  00010	39 7d 08	 cmp	 DWORD PTR _pOwner$[ebp], edi
  00013	74 70		 je	 SHORT $LN1@ExtendAddB

; 805  : 		return;
; 806  : 
; 807  : 	for ( int i=0; i<(int)m_szExtendBuffList.size(); i++ )

  00015	8b 86 3c 1a 00
	00		 mov	 eax, DWORD PTR [esi+6716]
  0001b	2b 86 38 1a 00
	00		 sub	 eax, DWORD PTR [esi+6712]
  00021	89 7d f0	 mov	 DWORD PTR _i$549036[ebp], edi
  00024	a9 f0 ff ff ff	 test	 eax, -16		; fffffff0H
  00029	7e 5a		 jle	 SHORT $LN1@ExtendAddB
  0002b	33 db		 xor	 ebx, ebx
$LL3@ExtendAddB:

; 808  : 		pOwner->AddNewBuff( m_szExtendBuffList[i], pOwner->GetCharName(), "", NULL );

  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00032	8d 4d e0	 lea	 ecx, DWORD PTR $T553063[ebp]
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  0003e	57		 push	 edi
  0003f	57		 push	 edi
  00040	8d 45 e0	 lea	 eax, DWORD PTR $T553063[ebp]
  00043	50		 push	 eax
  00044	8b 45 08	 mov	 eax, DWORD PTR _pOwner$[ebp]
  00047	05 d4 02 00 00	 add	 eax, 724		; 000002d4H
  0004c	50		 push	 eax
  0004d	8b 86 38 1a 00
	00		 mov	 eax, DWORD PTR [esi+6712]
  00053	03 c3		 add	 eax, ebx
  00055	50		 push	 eax
  00056	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00059	e8 00 00 00 00	 call	 ?AddNewBuff@ioBaseChar@@QAEPAVioBuff@@ABVioHashString@@00PAVioSkill@@_N@Z ; ioBaseChar::AddNewBuff
  0005e	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00062	8d 4d e0	 lea	 ecx, DWORD PTR $T553063[ebp]
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0006b	8b 86 3c 1a 00
	00		 mov	 eax, DWORD PTR [esi+6716]
  00071	2b 86 38 1a 00
	00		 sub	 eax, DWORD PTR [esi+6712]
  00077	ff 45 f0	 inc	 DWORD PTR _i$549036[ebp]
  0007a	c1 f8 04	 sar	 eax, 4
  0007d	83 c3 10	 add	 ebx, 16			; 00000010H
  00080	39 45 f0	 cmp	 DWORD PTR _i$549036[ebp], eax
  00083	7c a8		 jl	 SHORT $LL3@ExtendAddB
$LN1@ExtendAddB:

; 809  : }

  00085	e8 00 00 00 00	 call	 __EH_epilog3
  0008a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ExtendAddBuff@ioBullFightItem@@IAEXPAVioBaseChar@@@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR $T553063[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?ExtendAddBuff@ioBullFightItem@@IAEXPAVioBaseChar@@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ExtendAddBuff@ioBullFightItem@@IAEXPAVioBaseChar@@@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ExtendAddBuff@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ENDP ; ioBullFightItem::ExtendAddBuff
PUBLIC	?ExtendRemoveBuff@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ; ioBullFightItem::ExtendRemoveBuff
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
EXTRN	?GetBuff@ioBaseChar@@QAEPAVioBuff@@ABVioHashString@@@Z:PROC ; ioBaseChar::GetBuff
; Function compile flags: /Ogsp
;	COMDAT ?ExtendRemoveBuff@ioBullFightItem@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?ExtendRemoveBuff@ioBullFightItem@@IAEXPAVioBaseChar@@@Z PROC ; ioBullFightItem::ExtendRemoveBuff, COMDAT
; _this$ = ecx

; 812  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 813  : 	if ( !pOwner )

  00005	33 ff		 xor	 edi, edi
  00007	8b f1		 mov	 esi, ecx
  00009	39 7d 08	 cmp	 DWORD PTR _pOwner$[ebp], edi
  0000c	74 4a		 je	 SHORT $LN2@ExtendRemo

; 814  : 		return;
; 815  : 
; 816  : 	for ( int i=0; i<(int)m_szExtendBuffList.size(); i++ )

  0000e	8b 86 3c 1a 00
	00		 mov	 eax, DWORD PTR [esi+6716]
  00014	2b 86 38 1a 00
	00		 sub	 eax, DWORD PTR [esi+6712]
  0001a	53		 push	 ebx
  0001b	33 db		 xor	 ebx, ebx
  0001d	a9 f0 ff ff ff	 test	 eax, -16		; fffffff0H
  00022	7e 33		 jle	 SHORT $LN15@ExtendRemo
$LL14@ExtendRemo:
  00024	8b 86 38 1a 00
	00		 mov	 eax, DWORD PTR [esi+6712]

; 817  : 	{
; 818  : 		ioBuff *pBuff = pOwner->GetBuff( m_szExtendBuffList[i] );

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  0002d	03 c7		 add	 eax, edi
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?GetBuff@ioBaseChar@@QAEPAVioBuff@@ABVioHashString@@@Z ; ioBaseChar::GetBuff

; 819  : 		if ( pBuff )

  00035	85 c0		 test	 eax, eax
  00037	74 07		 je	 SHORT $LN3@ExtendRemo

; 820  : 			pBuff->SetReserveEndBuff();

  00039	8b c8		 mov	 ecx, eax
  0003b	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff
$LN3@ExtendRemo:

; 814  : 		return;
; 815  : 
; 816  : 	for ( int i=0; i<(int)m_szExtendBuffList.size(); i++ )

  00040	8b 86 3c 1a 00
	00		 mov	 eax, DWORD PTR [esi+6716]
  00046	2b 86 38 1a 00
	00		 sub	 eax, DWORD PTR [esi+6712]
  0004c	43		 inc	 ebx
  0004d	c1 f8 04	 sar	 eax, 4
  00050	83 c7 10	 add	 edi, 16			; 00000010H
  00053	3b d8		 cmp	 ebx, eax
  00055	7c cd		 jl	 SHORT $LL14@ExtendRemo
$LN15@ExtendRemo:
  00057	5b		 pop	 ebx
$LN2@ExtendRemo:
  00058	5f		 pop	 edi
  00059	5e		 pop	 esi

; 821  : 	}
; 822  : }

  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
?ExtendRemoveBuff@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ENDP ; ioBullFightItem::ExtendRemoveBuff
_TEXT	ENDS
PUBLIC	??D?$CEncrypt@M@@QAEMABM@Z			; CEncrypt<float>::operator*
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??D?$CEncrypt@M@@QAEMABM@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
tv130 = 8						; size = 4
_inValue$ = 8						; size = 4
??D?$CEncrypt@M@@QAEMABM@Z PROC				; CEncrypt<float>::operator*, COMDAT
; _this$ = ecx

; 1685 : 	{	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1686 : 		type value;
; 1687 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 1688 : #ifdef _NOTUSE
; 1689 : 		Debug();
; 1690 : #endif
; 1691 : 		return value * inValue;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	d9 00		 fld	 DWORD PTR [eax]
  00012	d8 4d fc	 fmul	 DWORD PTR _value$[ebp]
  00015	d9 5d 08	 fstp	 DWORD PTR tv130[ebp]
  00018	d9 45 08	 fld	 DWORD PTR tv130[ebp]

; 1692 : 	}

  0001b	c9		 leave
  0001c	c2 04 00	 ret	 4
??D?$CEncrypt@M@@QAEMABM@Z ENDP				; CEncrypt<float>::operator*
_TEXT	ENDS
PUBLIC	??M?$CEncrypt@M@@QAE_NABM@Z			; CEncrypt<float>::operator<
; Function compile flags: /Ogsp
;	COMDAT ??M?$CEncrypt@M@@QAE_NABM@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??M?$CEncrypt@M@@QAE_NABM@Z PROC			; CEncrypt<float>::operator<, COMDAT
; _this$ = ecx

; 1791 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1792 : 		type value;
; 1793 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 1794 : #ifdef _NOTUSE
; 1795 : 		Debug();
; 1796 : #endif
; 1797 : 		return (value < inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00014	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$[ebp]
  00019	0f 5a c0	 cvtps2pd xmm0, xmm0
  0001c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0001f	33 c0		 xor	 eax, eax
  00021	66 0f 2f c8	 comisd	 xmm1, xmm0
  00025	76 01		 jbe	 SHORT $LN4@operator
  00027	40		 inc	 eax
$LN4@operator:

; 1798 : 	} 

  00028	c9		 leave
  00029	c2 04 00	 ret	 4
??M?$CEncrypt@M@@QAE_NABM@Z ENDP			; CEncrypt<float>::operator<
_TEXT	ENDS
PUBLIC	??P?$CEncrypt@M@@QAE_NABM@Z			; CEncrypt<float>::operator>=
; Function compile flags: /Ogsp
;	COMDAT ??P?$CEncrypt@M@@QAE_NABM@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??P?$CEncrypt@M@@QAE_NABM@Z PROC			; CEncrypt<float>::operator>=, COMDAT
; _this$ = ecx

; 1831 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1832 : 		type value;
; 1833 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 1834 : #ifdef _NOTUSE
; 1835 : 		Debug();
; 1836 : #endif
; 1837 : 		return (value >= inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00014	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$[ebp]
  00019	0f 5a c0	 cvtps2pd xmm0, xmm0
  0001c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0001f	33 c0		 xor	 eax, eax
  00021	66 0f 2f c1	 comisd	 xmm0, xmm1
  00025	72 01		 jb	 SHORT $LN4@operator@2
  00027	40		 inc	 eax
$LN4@operator@2:

; 1838 : 	}		

  00028	c9		 leave
  00029	c2 04 00	 ret	 4
??P?$CEncrypt@M@@QAE_NABM@Z ENDP			; CEncrypt<float>::operator>=
_TEXT	ENDS
PUBLIC	??9?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator!=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??9?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator!=, COMDAT
; _this$ = ecx

; 299  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 300  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 301  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator!=
_TEXT	ENDS
PUBLIC	?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end
_TEXT	ENDS
PUBLIC	?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end
_TEXT	ENDS
PUBLIC	??1?$_List_val@MV?$allocator@M@std@@@std@@QAE@XZ ; std::_List_val<float,std::allocator<float> >::~_List_val<float,std::allocator<float> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??1?$_List_val@MV?$allocator@M@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_val@MV?$allocator@M@std@@@std@@QAE@XZ PROC	; std::_List_val<float,std::allocator<float> >::~_List_val<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 502  : 		this->_Alnod.deallocate(this->_Myhead, 1);

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx

; 503  : 		}

  00008	c3		 ret	 0
??1?$_List_val@MV?$allocator@M@std@@@std@@QAE@XZ ENDP	; std::_List_val<float,std::allocator<float> >::~_List_val<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator++, COMDAT
; _this$ = ecx

; 369  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 370  : 		++(*(_Mybase *)this);

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 371  : 		return (*this);
; 372  : 		}

  00008	c3		 ret	 0
??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator++
_TEXT	ENDS
PUBLIC	??D?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEABMXZ ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEABMXZ
_TEXT	SEGMENT
??D?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEABMXZ PROC ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator*, COMDAT
; _this$ = ecx

; 202  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 203  : 		if (this->_Getcont() == 0
; 204  : 			|| this->_Ptr == 0
; 205  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 206  : 			{	// report error
; 207  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 208  : 			_SCL_SECURE_OUT_OF_RANGE;
; 209  : 			}
; 210  : 
; 211  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 212  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 213  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 214  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 215  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 216  : 
; 217  : 		return (_Mylist::_Myval(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 218  : 		}

  00005	c3		 ret	 0
??D?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEABMXZ ENDP ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator*
_TEXT	ENDS
PUBLIC	??0?$_List_nod@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ; std::_List_nod<float,std::allocator<float> >::_List_nod<float,std::allocator<float> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_List_nod@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_nod@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z PROC ; std::_List_nod<float,std::allocator<float> >::_List_nod<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 438  : 		{	// construct allocators from _Al

  00000	8b c1		 mov	 eax, ecx

; 439  : 		}

  00002	c2 04 00	 ret	 4
??0?$_List_nod@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ENDP ; std::_List_nod<float,std::allocator<float> >::_List_nod<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<float,std::allocator<float> >::_Node>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	??0?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::_List_const_iterator<std::_List_val<float,std::allocator<float> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::_List_const_iterator<std::_List_val<float,std::allocator<float> > >, COMDAT
; _this$ = ecx

; 184  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 185  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::_List_const_iterator<std::_List_val<float,std::allocator<float> > >
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z ; ioINILoader::LoadFloat_e<17>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 17
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<17>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 a7 01 00
	00		 je	 $LN96@LoadFloat_
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 90 01 00
	00		 je	 $LN95@LoadFloat_
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 78 01 00
	00		 je	 $LN94@LoadFloat_
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 61 01 00
	00		 je	 $LN93@LoadFloat_
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 4a 01 00
	00		 je	 $LN92@LoadFloat_
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 34 01 00
	00		 je	 $LN91@LoadFloat_
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 1e 01 00
	00		 je	 $LN90@LoadFloat_
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 07 01 00
	00		 je	 $LN89@LoadFloat_
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 f0 00 00
	00		 je	 $LN88@LoadFloat_
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 da 00 00
	00		 je	 $LN87@LoadFloat_
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 c4 00 00
	00		 je	 $LN86@LoadFloat_
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 ad 00 00
	00		 je	 $LN85@LoadFloat_
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 96 00 00
	00		 je	 $LN84@LoadFloat_
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 80 00 00
	00		 je	 $LN83@LoadFloat_
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	74 6e		 je	 SHORT $LN82@LoadFloat_
  00108	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010b	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0010e	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00111	84 d2		 test	 dl, dl
  00113	74 5b		 je	 SHORT $LN81@LoadFloat_
  00115	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00118	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	0f 84 a6 00 00
	00		 je	 $LN1@LoadFloat_
  00125	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00128	84 d2		 test	 dl, dl
  0012a	74 3f		 je	 SHORT $LN79@LoadFloat_
  0012c	32 d1		 xor	 dl, cl
  0012e	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00131	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00134	84 d2		 test	 dl, dl
  00136	74 2d		 je	 SHORT $LN78@LoadFloat_
  00138	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0013b	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0013e	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00141	84 d2		 test	 dl, dl
  00143	74 1a		 je	 SHORT $LN77@LoadFloat_
  00145	8a 40 14	 mov	 al, BYTE PTR [eax+20]
  00148	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014b	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014e	84 c0		 test	 al, al
  00150	74 07		 je	 SHORT $LN76@LoadFloat_
  00152	34 ed		 xor	 al, -19			; ffffffedH
  00154	88 45 f8	 mov	 BYTE PTR __k$[ebp+20], al
  00157	eb 72		 jmp	 SHORT $LN1@LoadFloat_
$LN76@LoadFloat_:
  00159	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0015d	eb 6c		 jmp	 SHORT $LN1@LoadFloat_
$LN77@LoadFloat_:
  0015f	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00163	eb 66		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  00165	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00169	eb 60		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  0016b	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  0016e	eb 5b		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  00170	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00174	eb 55		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  00176	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0017a	eb 4f		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  0017c	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  0017f	eb 4a		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  00181	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00185	eb 44		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  00187	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0018b	eb 3e		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  0018d	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00191	eb 38		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  00193	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  00196	eb 33		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  00198	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0019c	eb 2d		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  0019e	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001a2	eb 27		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  001a4	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001a8	eb 21		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  001aa	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001ad	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  001af	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001b3	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  001b5	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001b9	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  001bb	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001bf	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  001c1	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001c5	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  001c7	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  001cb	6a 04		 push	 4
  001cd	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001d0	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+16], 0
  001d4	5a		 pop	 edx
$LL104@LoadFloat_:
  001d5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001db	83 c0 04	 add	 eax, 4
  001de	4a		 dec	 edx
  001df	75 f4		 jne	 SHORT $LL104@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  001e1	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001e6	51		 push	 ecx
  001e7	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ef	50		 push	 eax
  001f0	8b ce		 mov	 ecx, esi
  001f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fb	33 cd		 xor	 ecx, ebp
  001fd	5e		 pop	 esi
  001fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00203	c9		 leave
  00204	c2 08 00	 ret	 8
??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<17>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$09@ioINILoader@@QAEHAAY09$$CBDH@Z	; ioINILoader::LoadInt_e<10>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$09@ioINILoader@@QAEHAAY09$$CBDH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$09@ioINILoader@@QAEHAAY09$$CBDH@Z PROC	; ioINILoader::LoadInt_e<10>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	84 d2		 test	 dl, dl
  00017	0f 84 0d 01 00
	00		 je	 $LN96@LoadInt_e
  0001d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00020	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00023	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00026	84 d2		 test	 dl, dl
  00028	0f 84 f6 00 00
	00		 je	 $LN95@LoadInt_e
  0002e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00031	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00034	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00037	84 d2		 test	 dl, dl
  00039	0f 84 df 00 00
	00		 je	 $LN94@LoadInt_e
  0003f	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00042	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00045	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00048	84 d2		 test	 dl, dl
  0004a	0f 84 c8 00 00
	00		 je	 $LN93@LoadInt_e
  00050	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00053	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00056	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00059	84 d2		 test	 dl, dl
  0005b	0f 84 b1 00 00
	00		 je	 $LN92@LoadInt_e
  00061	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00064	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00067	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006a	84 d2		 test	 dl, dl
  0006c	0f 84 9a 00 00
	00		 je	 $LN91@LoadInt_e
  00072	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00075	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00078	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007b	84 d2		 test	 dl, dl
  0007d	0f 84 83 00 00
	00		 je	 $LN90@LoadInt_e
  00083	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00086	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00089	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008c	84 d2		 test	 dl, dl
  0008e	74 70		 je	 SHORT $LN89@LoadInt_e
  00090	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00093	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  00096	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  00099	84 d2		 test	 dl, dl
  0009b	74 5d		 je	 SHORT $LN88@LoadInt_e
  0009d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a0	80 78 09 00	 cmp	 BYTE PTR [eax+9], 0
  000a4	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000a7	0f 84 81 00 00
	00		 je	 $LN1@LoadInt_e
  000ad	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000b0	84 d2		 test	 dl, dl
  000b2	74 40		 je	 SHORT $LN86@LoadInt_e
  000b4	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000b7	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000ba	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000bd	84 d2		 test	 dl, dl
  000bf	74 2d		 je	 SHORT $LN85@LoadInt_e
  000c1	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000c4	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000c7	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000ca	84 d2		 test	 dl, dl
  000cc	74 1a		 je	 SHORT $LN84@LoadInt_e
  000ce	8a 40 0d	 mov	 al, BYTE PTR [eax+13]
  000d1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d4	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000d7	84 c0		 test	 al, al
  000d9	74 07		 je	 SHORT $LN83@LoadInt_e
  000db	34 ec		 xor	 al, -20			; ffffffecH
  000dd	88 45 f9	 mov	 BYTE PTR __k$[ebp+13], al
  000e0	eb 4c		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  000e2	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  000e6	eb 46		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  000e8	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  000ec	eb 40		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  000ee	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  000f2	eb 3a		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  000f4	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  000f8	eb 34		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  000fa	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  000fe	eb 2e		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  00100	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00104	eb 28		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  00106	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0010a	eb 22		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  0010c	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00110	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  00112	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00116	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  00118	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0011c	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  0011e	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00122	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  00124	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00128	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  0012a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  0012e	6a 02		 push	 2
  00130	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00133	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+9], 0
  00137	5a		 pop	 edx
$LL104@LoadInt_e:
  00138	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0013e	83 c0 04	 add	 eax, 4
  00141	4a		 dec	 edx
  00142	75 f4		 jne	 SHORT $LL104@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  00144	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00147	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0014b	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014e	50		 push	 eax
  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00155	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00158	33 cd		 xor	 ecx, ebp
  0015a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015f	c9		 leave
  00160	c2 08 00	 ret	 8
??$LoadInt_e@$09@ioINILoader@@QAEHAAY09$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<10>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BB@@ioINILoader@@QAEXAAY0BB@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<17>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BB@@ioINILoader@@QAEXAAY0BB@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
__k$ = -28						; size = 17
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BB@@ioINILoader@@QAEXAAY0BB@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<17>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 a7 01 00
	00		 je	 $LN96@LoadString
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 90 01 00
	00		 je	 $LN95@LoadString
  00039	b1 ec		 mov	 cl, -20			; ffffffecH
  0003b	32 d1		 xor	 dl, cl
  0003d	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00040	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00043	84 d2		 test	 dl, dl
  00045	0f 84 78 01 00
	00		 je	 $LN94@LoadString
  0004b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004e	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 61 01 00
	00		 je	 $LN93@LoadString
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 4a 01 00
	00		 je	 $LN92@LoadString
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 34 01 00
	00		 je	 $LN91@LoadString
  0007e	32 d1		 xor	 dl, cl
  00080	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  00083	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00086	84 d2		 test	 dl, dl
  00088	0f 84 1e 01 00
	00		 je	 $LN90@LoadString
  0008e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00091	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 07 01 00
	00		 je	 $LN89@LoadString
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 f0 00 00
	00		 je	 $LN88@LoadString
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 da 00 00
	00		 je	 $LN87@LoadString
  000c1	32 d1		 xor	 dl, cl
  000c3	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000c6	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c9	84 d2		 test	 dl, dl
  000cb	0f 84 c4 00 00
	00		 je	 $LN86@LoadString
  000d1	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 ad 00 00
	00		 je	 $LN85@LoadString
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 96 00 00
	00		 je	 $LN84@LoadString
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 80 00 00
	00		 je	 $LN83@LoadString
  00104	32 d1		 xor	 dl, cl
  00106	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	74 6e		 je	 SHORT $LN82@LoadString
  00110	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00113	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00116	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00119	84 d2		 test	 dl, dl
  0011b	74 5b		 je	 SHORT $LN81@LoadString
  0011d	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00120	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  00124	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00127	0f 84 a6 00 00
	00		 je	 $LN111@LoadString
  0012d	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00130	84 d2		 test	 dl, dl
  00132	74 3f		 je	 SHORT $LN79@LoadString
  00134	32 d1		 xor	 dl, cl
  00136	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00139	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0013c	84 d2		 test	 dl, dl
  0013e	74 2d		 je	 SHORT $LN78@LoadString
  00140	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00143	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  00146	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00149	84 d2		 test	 dl, dl
  0014b	74 1a		 je	 SHORT $LN77@LoadString
  0014d	8a 40 14	 mov	 al, BYTE PTR [eax+20]
  00150	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00153	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  00156	84 c0		 test	 al, al
  00158	74 07		 je	 SHORT $LN76@LoadString
  0015a	34 ed		 xor	 al, -19			; ffffffedH
  0015c	88 45 f8	 mov	 BYTE PTR __k$[ebp+20], al
  0015f	eb 72		 jmp	 SHORT $LN111@LoadString
$LN76@LoadString:
  00161	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00165	eb 6c		 jmp	 SHORT $LN111@LoadString
$LN77@LoadString:
  00167	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0016b	eb 66		 jmp	 SHORT $LN111@LoadString
$LN78@LoadString:
  0016d	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00171	eb 60		 jmp	 SHORT $LN111@LoadString
$LN79@LoadString:
  00173	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00176	eb 5b		 jmp	 SHORT $LN111@LoadString
$LN81@LoadString:
  00178	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0017c	eb 55		 jmp	 SHORT $LN111@LoadString
$LN82@LoadString:
  0017e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00182	eb 4f		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  00184	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  00187	eb 4a		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  00189	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0018d	eb 44		 jmp	 SHORT $LN111@LoadString
$LN85@LoadString:
  0018f	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00193	eb 3e		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  00195	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00199	eb 38		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  0019b	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  0019e	eb 33		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  001a0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001a4	eb 2d		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  001a6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001aa	eb 27		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  001ac	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001b0	eb 21		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  001b2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001b5	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  001b7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001bb	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  001bd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001c1	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  001c3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001c7	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  001c9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001cd	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  001cf	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  001d3	6a 04		 push	 4
  001d5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001d8	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+16], 0
  001dc	5a		 pop	 edx
$LL104@LoadString:
  001dd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001e3	83 c0 04	 add	 eax, 4
  001e6	4a		 dec	 edx
  001e7	75 f4		 jne	 SHORT $LL104@LoadString

; 163  : 		LoadString(_k, d, b, i);

  001e9	ff 75 14	 push	 DWORD PTR _i$[ebp]
  001ec	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001ef	57		 push	 edi
  001f0	56		 push	 esi
  001f1	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f4	50		 push	 eax
  001f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  001fb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fe	5f		 pop	 edi
  001ff	33 cd		 xor	 ecx, ebp
  00201	5e		 pop	 esi
  00202	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00207	c9		 leave
  00208	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BB@@ioINILoader@@QAEXAAY0BB@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<17>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BG@@ioINILoader@@QAEMAAY0BG@$$CBDM@Z ; ioINILoader::LoadFloat_e<22>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BG@@ioINILoader@@QAEMAAY0BG@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -32						; size = 22
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BG@@ioINILoader@@QAEMAAY0BG@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<22>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 15 02 00
	00		 je	 $LN96@LoadFloat_@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 fe 01 00
	00		 je	 $LN95@LoadFloat_@2
  00032	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00035	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 e7 01 00
	00		 je	 $LN94@LoadFloat_@2
  00043	b1 eb		 mov	 cl, -21			; ffffffebH
  00045	32 d1		 xor	 dl, cl
  00047	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 cf 01 00
	00		 je	 $LN93@LoadFloat_@2
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 b7 01 00
	00		 je	 $LN92@LoadFloat_@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 a0 01 00
	00		 je	 $LN91@LoadFloat_@2
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 8a 01 00
	00		 je	 $LN90@LoadFloat_@2
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 75 01 00
	00		 je	 $LN89@LoadFloat_@2
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 5f 01 00
	00		 je	 $LN88@LoadFloat_@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 48 01 00
	00		 je	 $LN87@LoadFloat_@2
  000ba	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bd	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	0f 84 32 01 00
	00		 je	 $LN86@LoadFloat_@2
  000cb	32 d1		 xor	 dl, cl
  000cd	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 1d 01 00
	00		 je	 $LN85@LoadFloat_@2
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 07 01 00
	00		 je	 $LN84@LoadFloat_@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 f0 00 00
	00		 je	 $LN83@LoadFloat_@2
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 da 00 00
	00		 je	 $LN82@LoadFloat_@2
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 c5 00 00
	00		 je	 $LN81@LoadFloat_@2
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 af 00 00
	00		 je	 $LN80@LoadFloat_@2
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 98 00 00
	00		 je	 $LN79@LoadFloat_@2
  0013e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00141	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00147	84 d2		 test	 dl, dl
  00149	0f 84 82 00 00
	00		 je	 $LN78@LoadFloat_@2
  0014f	32 d1		 xor	 dl, cl
  00151	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	74 71		 je	 SHORT $LN77@LoadFloat_@2
  0015b	32 d3		 xor	 dl, bl
  0015d	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00160	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00163	84 d2		 test	 dl, dl
  00165	74 5f		 je	 SHORT $LN76@LoadFloat_@2
  00167	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016a	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0016e	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00171	0f 84 c3 00 00
	00		 je	 $LN1@LoadFloat_@2
  00177	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0017a	84 d2		 test	 dl, dl
  0017c	74 43		 je	 SHORT $LN74@LoadFloat_@2
  0017e	32 d1		 xor	 dl, cl
  00180	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00183	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00186	84 d2		 test	 dl, dl
  00188	74 32		 je	 SHORT $LN73@LoadFloat_@2
  0018a	32 d3		 xor	 dl, bl
  0018c	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  0018f	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  00192	84 d2		 test	 dl, dl
  00194	74 20		 je	 SHORT $LN72@LoadFloat_@2
  00196	8a 40 19	 mov	 al, BYTE PTR [eax+25]
  00199	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0019c	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  0019f	84 c0		 test	 al, al
  001a1	74 0a		 je	 SHORT $LN71@LoadFloat_@2
  001a3	34 ec		 xor	 al, -20			; ffffffecH
  001a5	88 45 f9	 mov	 BYTE PTR __k$[ebp+25], al
  001a8	e9 8d 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN71@LoadFloat_@2:
  001ad	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+25], -20 ; ffffffecH
  001b1	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN72@LoadFloat_@2:
  001b6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ba	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN73@LoadFloat_@2:
  001bc	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001bf	eb 79		 jmp	 SHORT $LN1@LoadFloat_@2
$LN74@LoadFloat_@2:
  001c1	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001c4	eb 74		 jmp	 SHORT $LN1@LoadFloat_@2
$LN76@LoadFloat_@2:
  001c6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001ca	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN77@LoadFloat_@2:
  001cc	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001cf	eb 69		 jmp	 SHORT $LN1@LoadFloat_@2
$LN78@LoadFloat_@2:
  001d1	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  001d4	eb 64		 jmp	 SHORT $LN1@LoadFloat_@2
$LN79@LoadFloat_@2:
  001d6	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  001da	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN80@LoadFloat_@2:
  001dc	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001e0	eb 58		 jmp	 SHORT $LN1@LoadFloat_@2
$LN81@LoadFloat_@2:
  001e2	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001e5	eb 53		 jmp	 SHORT $LN1@LoadFloat_@2
$LN82@LoadFloat_@2:
  001e7	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  001ea	eb 4e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN83@LoadFloat_@2:
  001ec	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  001f0	eb 48		 jmp	 SHORT $LN1@LoadFloat_@2
$LN84@LoadFloat_@2:
  001f2	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001f6	eb 42		 jmp	 SHORT $LN1@LoadFloat_@2
$LN85@LoadFloat_@2:
  001f8	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  001fb	eb 3d		 jmp	 SHORT $LN1@LoadFloat_@2
$LN86@LoadFloat_@2:
  001fd	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00200	eb 38		 jmp	 SHORT $LN1@LoadFloat_@2
$LN87@LoadFloat_@2:
  00202	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00206	eb 32		 jmp	 SHORT $LN1@LoadFloat_@2
$LN88@LoadFloat_@2:
  00208	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0020c	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN89@LoadFloat_@2:
  0020e	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00211	eb 27		 jmp	 SHORT $LN1@LoadFloat_@2
$LN90@LoadFloat_@2:
  00213	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00216	eb 22		 jmp	 SHORT $LN1@LoadFloat_@2
$LN91@LoadFloat_@2:
  00218	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0021c	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN92@LoadFloat_@2:
  0021e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00222	eb 16		 jmp	 SHORT $LN1@LoadFloat_@2
$LN93@LoadFloat_@2:
  00224	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00228	eb 10		 jmp	 SHORT $LN1@LoadFloat_@2
$LN94@LoadFloat_@2:
  0022a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0022e	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN95@LoadFloat_@2:
  00230	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00234	eb 04		 jmp	 SHORT $LN1@LoadFloat_@2
$LN96@LoadFloat_@2:
  00236	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@2:
  0023a	6a 05		 push	 5
  0023c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0023f	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+21], 0
  00243	5a		 pop	 edx
$LL104@LoadFloat_@2:
  00244	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0024a	83 c0 04	 add	 eax, 4
  0024d	4a		 dec	 edx
  0024e	75 f4		 jne	 SHORT $LL104@LoadFloat_@2

; 137  : 		return LoadFloat(_k, f);

  00250	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00255	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00259	51		 push	 ecx
  0025a	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0025d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00262	50		 push	 eax
  00263	8b ce		 mov	 ecx, esi
  00265	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0026b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0026e	5e		 pop	 esi
  0026f	33 cd		 xor	 ecx, ebp
  00271	5b		 pop	 ebx
  00272	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00277	c9		 leave
  00278	c2 08 00	 ret	 8
??$LoadFloat_e@$0BG@@ioINILoader@@QAEMAAY0BG@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<22>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<16>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -28					; size = 4
__k$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<16>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 8c 01 00
	00		 je	 $LN96@LoadString@2
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 75 01 00
	00		 je	 $LN95@LoadString@2
  00039	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003c	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  0003f	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00042	84 d2		 test	 dl, dl
  00044	0f 84 5e 01 00
	00		 je	 $LN94@LoadString@2
  0004a	b1 eb		 mov	 cl, -21			; ffffffebH
  0004c	32 d1		 xor	 dl, cl
  0004e	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 46 01 00
	00		 je	 $LN93@LoadString@2
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 2f 01 00
	00		 je	 $LN92@LoadString@2
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 18 01 00
	00		 je	 $LN91@LoadString@2
  0007e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00081	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  00084	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00087	84 d2		 test	 dl, dl
  00089	0f 84 02 01 00
	00		 je	 $LN90@LoadString@2
  0008f	32 d1		 xor	 dl, cl
  00091	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 ec 00 00
	00		 je	 $LN89@LoadString@2
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 d5 00 00
	00		 je	 $LN88@LoadString@2
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 be 00 00
	00		 je	 $LN87@LoadString@2
  000c1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000c4	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 a8 00 00
	00		 je	 $LN86@LoadString@2
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 92 00 00
	00		 je	 $LN85@LoadString@2
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	74 7f		 je	 SHORT $LN84@LoadString@2
  000ef	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f2	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f5	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f8	84 d2		 test	 dl, dl
  000fa	74 6c		 je	 SHORT $LN83@LoadString@2
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	74 5a		 je	 SHORT $LN82@LoadString@2
  00109	32 d1		 xor	 dl, cl
  0010b	80 78 0f 00	 cmp	 BYTE PTR [eax+15], 0
  0010f	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	0f 84 a0 00 00
	00		 je	 $LN111@LoadString@2
  00118	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0011b	84 d2		 test	 dl, dl
  0011d	74 3e		 je	 SHORT $LN80@LoadString@2
  0011f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00122	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00125	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00128	84 d2		 test	 dl, dl
  0012a	74 2b		 je	 SHORT $LN79@LoadString@2
  0012c	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0012f	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00132	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00135	84 d2		 test	 dl, dl
  00137	74 19		 je	 SHORT $LN78@LoadString@2
  00139	8a 40 13	 mov	 al, BYTE PTR [eax+19]
  0013c	32 d1		 xor	 dl, cl
  0013e	88 55 fa	 mov	 BYTE PTR __k$[ebp+18], dl
  00141	84 c0		 test	 al, al
  00143	74 07		 je	 SHORT $LN77@LoadString@2
  00145	34 ea		 xor	 al, -22			; ffffffeaH
  00147	88 45 fb	 mov	 BYTE PTR __k$[ebp+19], al
  0014a	eb 6c		 jmp	 SHORT $LN111@LoadString@2
$LN77@LoadString@2:
  0014c	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00150	eb 66		 jmp	 SHORT $LN111@LoadString@2
$LN78@LoadString@2:
  00152	88 4d fa	 mov	 BYTE PTR __k$[ebp+18], cl
  00155	eb 61		 jmp	 SHORT $LN111@LoadString@2
$LN79@LoadString@2:
  00157	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0015b	eb 5b		 jmp	 SHORT $LN111@LoadString@2
$LN80@LoadString@2:
  0015d	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00161	eb 55		 jmp	 SHORT $LN111@LoadString@2
$LN82@LoadString@2:
  00163	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  00166	eb 50		 jmp	 SHORT $LN111@LoadString@2
$LN83@LoadString@2:
  00168	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  0016c	eb 4a		 jmp	 SHORT $LN111@LoadString@2
$LN84@LoadString@2:
  0016e	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00172	eb 44		 jmp	 SHORT $LN111@LoadString@2
$LN85@LoadString@2:
  00174	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00178	eb 3e		 jmp	 SHORT $LN111@LoadString@2
$LN86@LoadString@2:
  0017a	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  0017d	eb 39		 jmp	 SHORT $LN111@LoadString@2
$LN87@LoadString@2:
  0017f	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00183	eb 33		 jmp	 SHORT $LN111@LoadString@2
$LN88@LoadString@2:
  00185	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00189	eb 2d		 jmp	 SHORT $LN111@LoadString@2
$LN89@LoadString@2:
  0018b	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0018f	eb 27		 jmp	 SHORT $LN111@LoadString@2
$LN90@LoadString@2:
  00191	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  00194	eb 22		 jmp	 SHORT $LN111@LoadString@2
$LN91@LoadString@2:
  00196	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0019a	eb 1c		 jmp	 SHORT $LN111@LoadString@2
$LN92@LoadString@2:
  0019c	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001a0	eb 16		 jmp	 SHORT $LN111@LoadString@2
$LN93@LoadString@2:
  001a2	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001a6	eb 10		 jmp	 SHORT $LN111@LoadString@2
$LN94@LoadString@2:
  001a8	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001ac	eb 0a		 jmp	 SHORT $LN111@LoadString@2
$LN95@LoadString@2:
  001ae	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001b2	eb 04		 jmp	 SHORT $LN111@LoadString@2
$LN96@LoadString@2:
  001b4	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@2:
  001b8	6a 03		 push	 3
  001ba	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001bd	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+15], 0
  001c1	5a		 pop	 edx
$LL104@LoadString@2:
  001c2	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001c8	83 c0 04	 add	 eax, 4
  001cb	4a		 dec	 edx
  001cc	75 f4		 jne	 SHORT $LL104@LoadString@2
  001ce	6a 0c		 push	 12			; 0000000cH
  001d0	58		 pop	 eax
$LL101@LoadString@2:
  001d1	8b c8		 mov	 ecx, eax
  001d3	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001d9	79 05		 jns	 SHORT $LN112@LoadString@2
  001db	49		 dec	 ecx
  001dc	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001df	41		 inc	 ecx
$LN112@LoadString@2:
  001e0	b2 ed		 mov	 dl, -19			; ffffffedH
  001e2	2a d1		 sub	 dl, cl
  001e4	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001e8	40		 inc	 eax
  001e9	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001ec	7c e3		 jl	 SHORT $LL101@LoadString@2

; 163  : 		LoadString(_k, d, b, i);

  001ee	ff 75 14	 push	 DWORD PTR _i$[ebp]
  001f1	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001f4	57		 push	 edi
  001f5	56		 push	 esi
  001f6	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001f9	50		 push	 eax
  001fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00200	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00203	5f		 pop	 edi
  00204	33 cd		 xor	 ecx, ebp
  00206	5e		 pop	 esi
  00207	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020c	c9		 leave
  0020d	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<16>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BF@@ioINILoader@@QAEMAAY0BF@$$CBDM@Z ; ioINILoader::LoadFloat_e<21>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BF@@ioINILoader@@QAEMAAY0BF@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -32						; size = 21
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BF@@ioINILoader@@QAEMAAY0BF@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<21>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 f7 01 00
	00		 je	 $LN96@LoadFloat_@3
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 e0 01 00
	00		 je	 $LN95@LoadFloat_@3
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 c8 01 00
	00		 je	 $LN94@LoadFloat_@3
  00044	b3 eb		 mov	 bl, -21			; ffffffebH
  00046	32 d3		 xor	 dl, bl
  00048	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 b0 01 00
	00		 je	 $LN93@LoadFloat_@3
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 99 01 00
	00		 je	 $LN92@LoadFloat_@3
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 83 01 00
	00		 je	 $LN91@LoadFloat_@3
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 6e 01 00
	00		 je	 $LN90@LoadFloat_@3
  00088	32 d3		 xor	 dl, bl
  0008a	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 58 01 00
	00		 je	 $LN89@LoadFloat_@3
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 41 01 00
	00		 je	 $LN88@LoadFloat_@3
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 2b 01 00
	00		 je	 $LN87@LoadFloat_@3
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 16 01 00
	00		 je	 $LN86@LoadFloat_@3
  000ca	32 d3		 xor	 dl, bl
  000cc	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 00 01 00
	00		 je	 $LN85@LoadFloat_@3
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 e9 00 00
	00		 je	 $LN84@LoadFloat_@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 d3 00 00
	00		 je	 $LN83@LoadFloat_@3
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 be 00 00
	00		 je	 $LN82@LoadFloat_@3
  0010c	32 d3		 xor	 dl, bl
  0010e	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 a8 00 00
	00		 je	 $LN81@LoadFloat_@3
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 91 00 00
	00		 je	 $LN80@LoadFloat_@3
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	74 7f		 je	 SHORT $LN79@LoadFloat_@3
  0013a	32 d1		 xor	 dl, cl
  0013c	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  0013f	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00142	84 d2		 test	 dl, dl
  00144	74 6e		 je	 SHORT $LN78@LoadFloat_@3
  00146	32 d3		 xor	 dl, bl
  00148	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  0014b	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0014e	84 d2		 test	 dl, dl
  00150	74 5c		 je	 SHORT $LN77@LoadFloat_@3
  00152	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00155	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00159	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  0015c	0f 84 ba 00 00
	00		 je	 $LN1@LoadFloat_@3
  00162	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00165	84 d2		 test	 dl, dl
  00167	74 40		 je	 SHORT $LN75@LoadFloat_@3
  00169	32 d1		 xor	 dl, cl
  0016b	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  0016e	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00171	84 d2		 test	 dl, dl
  00173	74 2f		 je	 SHORT $LN74@LoadFloat_@3
  00175	32 d3		 xor	 dl, bl
  00177	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  0017a	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0017d	84 d2		 test	 dl, dl
  0017f	74 1d		 je	 SHORT $LN73@LoadFloat_@3
  00181	8a 40 18	 mov	 al, BYTE PTR [eax+24]
  00184	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00187	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  0018a	84 c0		 test	 al, al
  0018c	74 0a		 je	 SHORT $LN72@LoadFloat_@3
  0018e	34 ed		 xor	 al, -19			; ffffffedH
  00190	88 45 f8	 mov	 BYTE PTR __k$[ebp+24], al
  00193	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN72@LoadFloat_@3:
  00198	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  0019c	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN73@LoadFloat_@3:
  0019e	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  001a2	eb 78		 jmp	 SHORT $LN1@LoadFloat_@3
$LN74@LoadFloat_@3:
  001a4	88 5d f6	 mov	 BYTE PTR __k$[ebp+22], bl
  001a7	eb 73		 jmp	 SHORT $LN1@LoadFloat_@3
$LN75@LoadFloat_@3:
  001a9	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001ac	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN77@LoadFloat_@3:
  001ae	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  001b2	eb 68		 jmp	 SHORT $LN1@LoadFloat_@3
$LN78@LoadFloat_@3:
  001b4	88 5d f2	 mov	 BYTE PTR __k$[ebp+18], bl
  001b7	eb 63		 jmp	 SHORT $LN1@LoadFloat_@3
$LN79@LoadFloat_@3:
  001b9	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001bc	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN80@LoadFloat_@3:
  001be	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001c2	eb 58		 jmp	 SHORT $LN1@LoadFloat_@3
$LN81@LoadFloat_@3:
  001c4	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001c8	eb 52		 jmp	 SHORT $LN1@LoadFloat_@3
$LN82@LoadFloat_@3:
  001ca	88 5d ee	 mov	 BYTE PTR __k$[ebp+14], bl
  001cd	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@3
$LN83@LoadFloat_@3:
  001cf	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  001d2	eb 48		 jmp	 SHORT $LN1@LoadFloat_@3
$LN84@LoadFloat_@3:
  001d4	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001d8	eb 42		 jmp	 SHORT $LN1@LoadFloat_@3
$LN85@LoadFloat_@3:
  001da	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001de	eb 3c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN86@LoadFloat_@3:
  001e0	88 5d ea	 mov	 BYTE PTR __k$[ebp+10], bl
  001e3	eb 37		 jmp	 SHORT $LN1@LoadFloat_@3
$LN87@LoadFloat_@3:
  001e5	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  001e8	eb 32		 jmp	 SHORT $LN1@LoadFloat_@3
$LN88@LoadFloat_@3:
  001ea	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001ee	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN89@LoadFloat_@3:
  001f0	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001f4	eb 26		 jmp	 SHORT $LN1@LoadFloat_@3
$LN90@LoadFloat_@3:
  001f6	88 5d e6	 mov	 BYTE PTR __k$[ebp+6], bl
  001f9	eb 21		 jmp	 SHORT $LN1@LoadFloat_@3
$LN91@LoadFloat_@3:
  001fb	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  001fe	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN92@LoadFloat_@3:
  00200	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00204	eb 16		 jmp	 SHORT $LN1@LoadFloat_@3
$LN93@LoadFloat_@3:
  00206	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0020a	eb 10		 jmp	 SHORT $LN1@LoadFloat_@3
$LN94@LoadFloat_@3:
  0020c	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00210	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@3
$LN95@LoadFloat_@3:
  00212	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00216	eb 04		 jmp	 SHORT $LN1@LoadFloat_@3
$LN96@LoadFloat_@3:
  00218	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@3:
  0021c	6a 05		 push	 5
  0021e	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00221	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+20], 0
  00225	5a		 pop	 edx
$LL104@LoadFloat_@3:
  00226	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0022c	83 c0 04	 add	 eax, 4
  0022f	4a		 dec	 edx
  00230	75 f4		 jne	 SHORT $LL104@LoadFloat_@3

; 137  : 		return LoadFloat(_k, f);

  00232	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00237	51		 push	 ecx
  00238	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0023b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00240	50		 push	 eax
  00241	8b ce		 mov	 ecx, esi
  00243	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00249	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024c	5e		 pop	 esi
  0024d	33 cd		 xor	 ecx, ebp
  0024f	5b		 pop	 ebx
  00250	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00255	c9		 leave
  00256	c2 08 00	 ret	 8
??$LoadFloat_e@$0BF@@ioINILoader@@QAEMAAY0BF@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<21>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BH@@ioINILoader@@QAEMAAY0BH@$$CBDM@Z ; ioINILoader::LoadFloat_e<23>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BH@@ioINILoader@@QAEMAAY0BH@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -32						; size = 23
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BH@@ioINILoader@@QAEMAAY0BH@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<23>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 2d 02 00
	00		 je	 $LN96@LoadFloat_@4
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 16 02 00
	00		 je	 $LN95@LoadFloat_@4
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 fe 01 00
	00		 je	 $LN94@LoadFloat_@4
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 e7 01 00
	00		 je	 $LN93@LoadFloat_@4
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 cf 01 00
	00		 je	 $LN92@LoadFloat_@4
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 b9 01 00
	00		 je	 $LN91@LoadFloat_@4
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 a3 01 00
	00		 je	 $LN90@LoadFloat_@4
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 8d 01 00
	00		 je	 $LN89@LoadFloat_@4
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 77 01 00
	00		 je	 $LN88@LoadFloat_@4
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 61 01 00
	00		 je	 $LN87@LoadFloat_@4
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 4b 01 00
	00		 je	 $LN86@LoadFloat_@4
  000ca	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cd	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 35 01 00
	00		 je	 $LN85@LoadFloat_@4
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 1f 01 00
	00		 je	 $LN84@LoadFloat_@4
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 09 01 00
	00		 je	 $LN83@LoadFloat_@4
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 f3 00 00
	00		 je	 $LN82@LoadFloat_@4
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 dd 00 00
	00		 je	 $LN81@LoadFloat_@4
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 c7 00 00
	00		 je	 $LN80@LoadFloat_@4
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 b1 00 00
	00		 je	 $LN79@LoadFloat_@4
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 9b 00 00
	00		 je	 $LN78@LoadFloat_@4
  0014e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00151	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 85 00 00
	00		 je	 $LN77@LoadFloat_@4
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	74 73		 je	 SHORT $LN76@LoadFloat_@4
  0016b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016e	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00171	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00174	84 d2		 test	 dl, dl
  00176	74 61		 je	 SHORT $LN75@LoadFloat_@4
  00178	32 d1		 xor	 dl, cl
  0017a	80 78 16 00	 cmp	 BYTE PTR [eax+22], 0
  0017e	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00181	0f 84 cb 00 00
	00		 je	 $LN1@LoadFloat_@4
  00187	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0018a	84 d2		 test	 dl, dl
  0018c	74 46		 je	 SHORT $LN73@LoadFloat_@4
  0018e	32 d3		 xor	 dl, bl
  00190	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  00193	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  00196	84 d2		 test	 dl, dl
  00198	74 34		 je	 SHORT $LN72@LoadFloat_@4
  0019a	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0019d	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a0	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001a3	84 d2		 test	 dl, dl
  001a5	74 1f		 je	 SHORT $LN71@LoadFloat_@4
  001a7	8a 40 1a	 mov	 al, BYTE PTR [eax+26]
  001aa	32 d1		 xor	 dl, cl
  001ac	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001af	84 c0		 test	 al, al
  001b1	74 0a		 je	 SHORT $LN70@LoadFloat_@4
  001b3	34 eb		 xor	 al, -21			; ffffffebH
  001b5	88 45 fa	 mov	 BYTE PTR __k$[ebp+26], al
  001b8	e9 95 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN70@LoadFloat_@4:
  001bd	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+26], -21 ; ffffffebH
  001c1	e9 8c 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN71@LoadFloat_@4:
  001c6	88 4d f9	 mov	 BYTE PTR __k$[ebp+25], cl
  001c9	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN72@LoadFloat_@4:
  001ce	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001d2	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@4
$LN73@LoadFloat_@4:
  001d4	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001d7	eb 79		 jmp	 SHORT $LN1@LoadFloat_@4
$LN75@LoadFloat_@4:
  001d9	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001dc	eb 74		 jmp	 SHORT $LN1@LoadFloat_@4
$LN76@LoadFloat_@4:
  001de	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001e2	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@4
$LN77@LoadFloat_@4:
  001e4	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001e7	eb 69		 jmp	 SHORT $LN1@LoadFloat_@4
$LN78@LoadFloat_@4:
  001e9	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  001ed	eb 63		 jmp	 SHORT $LN1@LoadFloat_@4
$LN79@LoadFloat_@4:
  001ef	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001f2	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@4
$LN80@LoadFloat_@4:
  001f4	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001f8	eb 58		 jmp	 SHORT $LN1@LoadFloat_@4
$LN81@LoadFloat_@4:
  001fa	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001fd	eb 53		 jmp	 SHORT $LN1@LoadFloat_@4
$LN82@LoadFloat_@4:
  001ff	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00203	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@4
$LN83@LoadFloat_@4:
  00205	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  00208	eb 48		 jmp	 SHORT $LN1@LoadFloat_@4
$LN84@LoadFloat_@4:
  0020a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0020e	eb 42		 jmp	 SHORT $LN1@LoadFloat_@4
$LN85@LoadFloat_@4:
  00210	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  00213	eb 3d		 jmp	 SHORT $LN1@LoadFloat_@4
$LN86@LoadFloat_@4:
  00215	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00219	eb 37		 jmp	 SHORT $LN1@LoadFloat_@4
$LN87@LoadFloat_@4:
  0021b	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  0021e	eb 32		 jmp	 SHORT $LN1@LoadFloat_@4
$LN88@LoadFloat_@4:
  00220	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00224	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN89@LoadFloat_@4:
  00226	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00229	eb 27		 jmp	 SHORT $LN1@LoadFloat_@4
$LN90@LoadFloat_@4:
  0022b	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0022f	eb 21		 jmp	 SHORT $LN1@LoadFloat_@4
$LN91@LoadFloat_@4:
  00231	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  00234	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN92@LoadFloat_@4:
  00236	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0023a	eb 16		 jmp	 SHORT $LN1@LoadFloat_@4
$LN93@LoadFloat_@4:
  0023c	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00240	eb 10		 jmp	 SHORT $LN1@LoadFloat_@4
$LN94@LoadFloat_@4:
  00242	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00246	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@4
$LN95@LoadFloat_@4:
  00248	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0024c	eb 04		 jmp	 SHORT $LN1@LoadFloat_@4
$LN96@LoadFloat_@4:
  0024e	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@4:
  00252	6a 05		 push	 5
  00254	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00257	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+22], 0
  0025b	5a		 pop	 edx
$LL104@LoadFloat_@4:
  0025c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00262	83 c0 04	 add	 eax, 4
  00265	4a		 dec	 edx
  00266	75 f4		 jne	 SHORT $LL104@LoadFloat_@4
  00268	6a 14		 push	 20			; 00000014H
  0026a	58		 pop	 eax
$LL101@LoadFloat_@4:
  0026b	8b c8		 mov	 ecx, eax
  0026d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00273	79 05		 jns	 SHORT $LN111@LoadFloat_@4
  00275	49		 dec	 ecx
  00276	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00279	41		 inc	 ecx
$LN111@LoadFloat_@4:
  0027a	b2 ed		 mov	 dl, -19			; ffffffedH
  0027c	2a d1		 sub	 dl, cl
  0027e	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  00282	40		 inc	 eax
  00283	83 f8 16	 cmp	 eax, 22			; 00000016H
  00286	7c e3		 jl	 SHORT $LL101@LoadFloat_@4

; 137  : 		return LoadFloat(_k, f);

  00288	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0028d	51		 push	 ecx
  0028e	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00291	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00296	50		 push	 eax
  00297	8b ce		 mov	 ecx, esi
  00299	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0029f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a2	5e		 pop	 esi
  002a3	33 cd		 xor	 ecx, ebp
  002a5	5b		 pop	 ebx
  002a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ab	c9		 leave
  002ac	c2 08 00	 ret	 8
??$LoadFloat_e@$0BH@@ioINILoader@@QAEMAAY0BH@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<23>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BB@@ioINILoader@@QAEHAAY0BB@$$CBDH@Z ; ioINILoader::LoadInt_e<17>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BB@@ioINILoader@@QAEHAAY0BB@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -28						; size = 17
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BB@@ioINILoader@@QAEHAAY0BB@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<17>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 a7 01 00
	00		 je	 $LN96@LoadInt_e@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 90 01 00
	00		 je	 $LN95@LoadInt_e@2
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 78 01 00
	00		 je	 $LN94@LoadInt_e@2
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 61 01 00
	00		 je	 $LN93@LoadInt_e@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 4a 01 00
	00		 je	 $LN92@LoadInt_e@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 34 01 00
	00		 je	 $LN91@LoadInt_e@2
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 1e 01 00
	00		 je	 $LN90@LoadInt_e@2
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 07 01 00
	00		 je	 $LN89@LoadInt_e@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 f0 00 00
	00		 je	 $LN88@LoadInt_e@2
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 da 00 00
	00		 je	 $LN87@LoadInt_e@2
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 c4 00 00
	00		 je	 $LN86@LoadInt_e@2
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 ad 00 00
	00		 je	 $LN85@LoadInt_e@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 96 00 00
	00		 je	 $LN84@LoadInt_e@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 80 00 00
	00		 je	 $LN83@LoadInt_e@2
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	74 6e		 je	 SHORT $LN82@LoadInt_e@2
  00108	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010b	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0010e	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00111	84 d2		 test	 dl, dl
  00113	74 5b		 je	 SHORT $LN81@LoadInt_e@2
  00115	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00118	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	0f 84 a6 00 00
	00		 je	 $LN1@LoadInt_e@2
  00125	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00128	84 d2		 test	 dl, dl
  0012a	74 3f		 je	 SHORT $LN79@LoadInt_e@2
  0012c	32 d1		 xor	 dl, cl
  0012e	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00131	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00134	84 d2		 test	 dl, dl
  00136	74 2d		 je	 SHORT $LN78@LoadInt_e@2
  00138	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0013b	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0013e	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00141	84 d2		 test	 dl, dl
  00143	74 1a		 je	 SHORT $LN77@LoadInt_e@2
  00145	8a 40 14	 mov	 al, BYTE PTR [eax+20]
  00148	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014b	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014e	84 c0		 test	 al, al
  00150	74 07		 je	 SHORT $LN76@LoadInt_e@2
  00152	34 ed		 xor	 al, -19			; ffffffedH
  00154	88 45 f8	 mov	 BYTE PTR __k$[ebp+20], al
  00157	eb 72		 jmp	 SHORT $LN1@LoadInt_e@2
$LN76@LoadInt_e@2:
  00159	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0015d	eb 6c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN77@LoadInt_e@2:
  0015f	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00163	eb 66		 jmp	 SHORT $LN1@LoadInt_e@2
$LN78@LoadInt_e@2:
  00165	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00169	eb 60		 jmp	 SHORT $LN1@LoadInt_e@2
$LN79@LoadInt_e@2:
  0016b	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  0016e	eb 5b		 jmp	 SHORT $LN1@LoadInt_e@2
$LN81@LoadInt_e@2:
  00170	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00174	eb 55		 jmp	 SHORT $LN1@LoadInt_e@2
$LN82@LoadInt_e@2:
  00176	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0017a	eb 4f		 jmp	 SHORT $LN1@LoadInt_e@2
$LN83@LoadInt_e@2:
  0017c	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  0017f	eb 4a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN84@LoadInt_e@2:
  00181	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00185	eb 44		 jmp	 SHORT $LN1@LoadInt_e@2
$LN85@LoadInt_e@2:
  00187	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0018b	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN86@LoadInt_e@2:
  0018d	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00191	eb 38		 jmp	 SHORT $LN1@LoadInt_e@2
$LN87@LoadInt_e@2:
  00193	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  00196	eb 33		 jmp	 SHORT $LN1@LoadInt_e@2
$LN88@LoadInt_e@2:
  00198	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0019c	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@2
$LN89@LoadInt_e@2:
  0019e	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001a2	eb 27		 jmp	 SHORT $LN1@LoadInt_e@2
$LN90@LoadInt_e@2:
  001a4	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001a8	eb 21		 jmp	 SHORT $LN1@LoadInt_e@2
$LN91@LoadInt_e@2:
  001aa	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001ad	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN92@LoadInt_e@2:
  001af	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001b3	eb 16		 jmp	 SHORT $LN1@LoadInt_e@2
$LN93@LoadInt_e@2:
  001b5	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001b9	eb 10		 jmp	 SHORT $LN1@LoadInt_e@2
$LN94@LoadInt_e@2:
  001bb	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001bf	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN95@LoadInt_e@2:
  001c1	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001c5	eb 04		 jmp	 SHORT $LN1@LoadInt_e@2
$LN96@LoadInt_e@2:
  001c7	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@2:
  001cb	6a 04		 push	 4
  001cd	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001d0	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+16], 0
  001d4	5a		 pop	 edx
$LL104@LoadInt_e@2:
  001d5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001db	83 c0 04	 add	 eax, 4
  001de	4a		 dec	 edx
  001df	75 f4		 jne	 SHORT $LL104@LoadInt_e@2

; 120  : 		return LoadInt(_k, i);

  001e1	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001e4	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001e7	50		 push	 eax
  001e8	8b ce		 mov	 ecx, esi
  001ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  001f0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f3	33 cd		 xor	 ecx, ebp
  001f5	5e		 pop	 esi
  001f6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fb	c9		 leave
  001fc	c2 08 00	 ret	 8
??$LoadInt_e@$0BB@@ioINILoader@@QAEHAAY0BB@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<17>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BA@@ioINILoader@@QAEHAAY0BA@$$CBDH@Z ; ioINILoader::LoadInt_e<16>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BA@@ioINILoader@@QAEHAAY0BA@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BA@@ioINILoader@@QAEHAAY0BA@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<16>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 8c 01 00
	00		 je	 $LN96@LoadInt_e@3
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 75 01 00
	00		 je	 $LN95@LoadInt_e@3
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 5e 01 00
	00		 je	 $LN94@LoadInt_e@3
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 46 01 00
	00		 je	 $LN93@LoadInt_e@3
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 2f 01 00
	00		 je	 $LN92@LoadInt_e@3
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 18 01 00
	00		 je	 $LN91@LoadInt_e@3
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 02 01 00
	00		 je	 $LN90@LoadInt_e@3
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 ec 00 00
	00		 je	 $LN89@LoadInt_e@3
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 d5 00 00
	00		 je	 $LN88@LoadInt_e@3
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 be 00 00
	00		 je	 $LN87@LoadInt_e@3
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 a8 00 00
	00		 je	 $LN86@LoadInt_e@3
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 92 00 00
	00		 je	 $LN85@LoadInt_e@3
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	74 7f		 je	 SHORT $LN84@LoadInt_e@3
  000e7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f0	84 d2		 test	 dl, dl
  000f2	74 6c		 je	 SHORT $LN83@LoadInt_e@3
  000f4	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f7	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000fa	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000fd	84 d2		 test	 dl, dl
  000ff	74 5a		 je	 SHORT $LN82@LoadInt_e@3
  00101	32 d1		 xor	 dl, cl
  00103	80 78 0f 00	 cmp	 BYTE PTR [eax+15], 0
  00107	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  0010a	0f 84 a0 00 00
	00		 je	 $LN1@LoadInt_e@3
  00110	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00113	84 d2		 test	 dl, dl
  00115	74 3e		 je	 SHORT $LN80@LoadInt_e@3
  00117	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011a	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011d	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00120	84 d2		 test	 dl, dl
  00122	74 2b		 je	 SHORT $LN79@LoadInt_e@3
  00124	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00127	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  0012a	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0012d	84 d2		 test	 dl, dl
  0012f	74 19		 je	 SHORT $LN78@LoadInt_e@3
  00131	8a 40 13	 mov	 al, BYTE PTR [eax+19]
  00134	32 d1		 xor	 dl, cl
  00136	88 55 fa	 mov	 BYTE PTR __k$[ebp+18], dl
  00139	84 c0		 test	 al, al
  0013b	74 07		 je	 SHORT $LN77@LoadInt_e@3
  0013d	34 ea		 xor	 al, -22			; ffffffeaH
  0013f	88 45 fb	 mov	 BYTE PTR __k$[ebp+19], al
  00142	eb 6c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN77@LoadInt_e@3:
  00144	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00148	eb 66		 jmp	 SHORT $LN1@LoadInt_e@3
$LN78@LoadInt_e@3:
  0014a	88 4d fa	 mov	 BYTE PTR __k$[ebp+18], cl
  0014d	eb 61		 jmp	 SHORT $LN1@LoadInt_e@3
$LN79@LoadInt_e@3:
  0014f	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  00153	eb 5b		 jmp	 SHORT $LN1@LoadInt_e@3
$LN80@LoadInt_e@3:
  00155	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00159	eb 55		 jmp	 SHORT $LN1@LoadInt_e@3
$LN82@LoadInt_e@3:
  0015b	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0015e	eb 50		 jmp	 SHORT $LN1@LoadInt_e@3
$LN83@LoadInt_e@3:
  00160	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00164	eb 4a		 jmp	 SHORT $LN1@LoadInt_e@3
$LN84@LoadInt_e@3:
  00166	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0016a	eb 44		 jmp	 SHORT $LN1@LoadInt_e@3
$LN85@LoadInt_e@3:
  0016c	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00170	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN86@LoadInt_e@3:
  00172	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  00175	eb 39		 jmp	 SHORT $LN1@LoadInt_e@3
$LN87@LoadInt_e@3:
  00177	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0017b	eb 33		 jmp	 SHORT $LN1@LoadInt_e@3
$LN88@LoadInt_e@3:
  0017d	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00181	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@3
$LN89@LoadInt_e@3:
  00183	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00187	eb 27		 jmp	 SHORT $LN1@LoadInt_e@3
$LN90@LoadInt_e@3:
  00189	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  0018c	eb 22		 jmp	 SHORT $LN1@LoadInt_e@3
$LN91@LoadInt_e@3:
  0018e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00192	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN92@LoadInt_e@3:
  00194	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00198	eb 16		 jmp	 SHORT $LN1@LoadInt_e@3
$LN93@LoadInt_e@3:
  0019a	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0019e	eb 10		 jmp	 SHORT $LN1@LoadInt_e@3
$LN94@LoadInt_e@3:
  001a0	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001a4	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@3
$LN95@LoadInt_e@3:
  001a6	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001aa	eb 04		 jmp	 SHORT $LN1@LoadInt_e@3
$LN96@LoadInt_e@3:
  001ac	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@3:
  001b0	6a 03		 push	 3
  001b2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001b5	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+15], 0
  001b9	5a		 pop	 edx
$LL104@LoadInt_e@3:
  001ba	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001c0	83 c0 04	 add	 eax, 4
  001c3	4a		 dec	 edx
  001c4	75 f4		 jne	 SHORT $LL104@LoadInt_e@3
  001c6	6a 0c		 push	 12			; 0000000cH
  001c8	58		 pop	 eax
$LL101@LoadInt_e@3:
  001c9	8b c8		 mov	 ecx, eax
  001cb	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001d1	79 05		 jns	 SHORT $LN111@LoadInt_e@3
  001d3	49		 dec	 ecx
  001d4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001d7	41		 inc	 ecx
$LN111@LoadInt_e@3:
  001d8	b2 ed		 mov	 dl, -19			; ffffffedH
  001da	2a d1		 sub	 dl, cl
  001dc	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001e0	40		 inc	 eax
  001e1	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001e4	7c e3		 jl	 SHORT $LL101@LoadInt_e@3

; 120  : 		return LoadInt(_k, i);

  001e6	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001e9	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001ec	50		 push	 eax
  001ed	8b ce		 mov	 ecx, esi
  001ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  001f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f8	33 cd		 xor	 ecx, ebp
  001fa	5e		 pop	 esi
  001fb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00200	c9		 leave
  00201	c2 08 00	 ret	 8
??$LoadInt_e@$0BA@@ioINILoader@@QAEHAAY0BA@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<16>
_TEXT	ENDS
PUBLIC	??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z ; ioEntityGroup::GetAnimationEventTimeList_e<13>
EXTRN	__imp_?GetAnimationEventTimeList@ioEntityGroup@@QAEHHABVioHashString@@AAV?$list@MV?$allocator@M@std@@@std@@@Z:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
xdata$x	SEGMENT
__unwindtable$??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z$0
__ehfuncinfo$??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioentitygroup.h
xdata$x	ENDS
;	COMDAT ??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z
_TEXT	SEGMENT
$T553404 = -52						; size = 16
_szEncEventType$ = -36					; size = 13
__$EHRec$ = -12						; size = 12
_id$ = 8						; size = 4
_szEventType$ = 12					; size = 4
_vTimeList$ = 16					; size = 4
??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z PROC ; ioEntityGroup::GetAnimationEventTimeList_e<13>, COMDAT
; _this$ = ecx

; 406  : 	{

  00000	6a 28		 push	 40			; 00000028H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _szEventType$[ebp]
  0000f	8b 75 10	 mov	 esi, DWORD PTR _vTimeList$[ebp]
  00012	8b f9		 mov	 edi, ecx

; 407  : 		_ENCSTR(szEventType, szEncEventType);

  00014	8a 08		 mov	 cl, BYTE PTR [eax]
  00016	84 c9		 test	 cl, cl
  00018	0f 84 49 01 00
	00		 je	 $LN96@GetAnimati
  0001e	80 f1 ed	 xor	 cl, -19			; ffffffedH
  00021	88 4d dc	 mov	 BYTE PTR _szEncEventType$[ebp], cl
  00024	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00027	84 c9		 test	 cl, cl
  00029	0f 84 32 01 00
	00		 je	 $LN95@GetAnimati
  0002f	80 f1 ec	 xor	 cl, -20			; ffffffecH
  00032	88 4d dd	 mov	 BYTE PTR _szEncEventType$[ebp+1], cl
  00035	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00038	84 c9		 test	 cl, cl
  0003a	0f 84 1b 01 00
	00		 je	 $LN94@GetAnimati
  00040	b2 eb		 mov	 dl, -21			; ffffffebH
  00042	32 ca		 xor	 cl, dl
  00044	88 4d de	 mov	 BYTE PTR _szEncEventType$[ebp+2], cl
  00047	8a 48 03	 mov	 cl, BYTE PTR [eax+3]
  0004a	84 c9		 test	 cl, cl
  0004c	0f 84 03 01 00
	00		 je	 $LN93@GetAnimati
  00052	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  00055	88 4d df	 mov	 BYTE PTR _szEncEventType$[ebp+3], cl
  00058	8a 48 04	 mov	 cl, BYTE PTR [eax+4]
  0005b	84 c9		 test	 cl, cl
  0005d	0f 84 ec 00 00
	00		 je	 $LN92@GetAnimati
  00063	80 f1 ed	 xor	 cl, -19			; ffffffedH
  00066	88 4d e0	 mov	 BYTE PTR _szEncEventType$[ebp+4], cl
  00069	8a 48 05	 mov	 cl, BYTE PTR [eax+5]
  0006c	84 c9		 test	 cl, cl
  0006e	0f 84 d5 00 00
	00		 je	 $LN91@GetAnimati
  00074	80 f1 ec	 xor	 cl, -20			; ffffffecH
  00077	88 4d e1	 mov	 BYTE PTR _szEncEventType$[ebp+5], cl
  0007a	8a 48 06	 mov	 cl, BYTE PTR [eax+6]
  0007d	84 c9		 test	 cl, cl
  0007f	0f 84 bf 00 00
	00		 je	 $LN90@GetAnimati
  00085	32 ca		 xor	 cl, dl
  00087	88 4d e2	 mov	 BYTE PTR _szEncEventType$[ebp+6], cl
  0008a	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  0008d	84 c9		 test	 cl, cl
  0008f	0f 84 a9 00 00
	00		 je	 $LN89@GetAnimati
  00095	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  00098	88 4d e3	 mov	 BYTE PTR _szEncEventType$[ebp+7], cl
  0009b	8a 48 08	 mov	 cl, BYTE PTR [eax+8]
  0009e	84 c9		 test	 cl, cl
  000a0	0f 84 92 00 00
	00		 je	 $LN88@GetAnimati
  000a6	80 f1 ed	 xor	 cl, -19			; ffffffedH
  000a9	88 4d e4	 mov	 BYTE PTR _szEncEventType$[ebp+8], cl
  000ac	8a 48 09	 mov	 cl, BYTE PTR [eax+9]
  000af	84 c9		 test	 cl, cl
  000b1	74 7f		 je	 SHORT $LN87@GetAnimati
  000b3	80 f1 ec	 xor	 cl, -20			; ffffffecH
  000b6	88 4d e5	 mov	 BYTE PTR _szEncEventType$[ebp+9], cl
  000b9	8a 48 0a	 mov	 cl, BYTE PTR [eax+10]
  000bc	84 c9		 test	 cl, cl
  000be	74 6d		 je	 SHORT $LN86@GetAnimati
  000c0	32 ca		 xor	 cl, dl
  000c2	88 4d e6	 mov	 BYTE PTR _szEncEventType$[ebp+10], cl
  000c5	8a 48 0b	 mov	 cl, BYTE PTR [eax+11]
  000c8	84 c9		 test	 cl, cl
  000ca	74 5b		 je	 SHORT $LN85@GetAnimati
  000cc	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  000cf	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  000d3	88 4d e7	 mov	 BYTE PTR _szEncEventType$[ebp+11], cl
  000d6	0f 84 8f 00 00
	00		 je	 $LN1@GetAnimati
  000dc	8a 48 0d	 mov	 cl, BYTE PTR [eax+13]
  000df	84 c9		 test	 cl, cl
  000e1	74 3e		 je	 SHORT $LN83@GetAnimati
  000e3	80 f1 ec	 xor	 cl, -20			; ffffffecH
  000e6	88 4d e9	 mov	 BYTE PTR _szEncEventType$[ebp+13], cl
  000e9	8a 48 0e	 mov	 cl, BYTE PTR [eax+14]
  000ec	84 c9		 test	 cl, cl
  000ee	74 2c		 je	 SHORT $LN82@GetAnimati
  000f0	32 ca		 xor	 cl, dl
  000f2	88 4d ea	 mov	 BYTE PTR _szEncEventType$[ebp+14], cl
  000f5	8a 48 0f	 mov	 cl, BYTE PTR [eax+15]
  000f8	84 c9		 test	 cl, cl
  000fa	74 1a		 je	 SHORT $LN81@GetAnimati
  000fc	8a 40 10	 mov	 al, BYTE PTR [eax+16]
  000ff	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  00102	88 4d eb	 mov	 BYTE PTR _szEncEventType$[ebp+15], cl
  00105	84 c0		 test	 al, al
  00107	74 07		 je	 SHORT $LN80@GetAnimati
  00109	34 ed		 xor	 al, -19			; ffffffedH
  0010b	88 45 ec	 mov	 BYTE PTR _szEncEventType$[ebp+16], al
  0010e	eb 5b		 jmp	 SHORT $LN1@GetAnimati
$LN80@GetAnimati:
  00110	c6 45 ec ed	 mov	 BYTE PTR _szEncEventType$[ebp+16], -19 ; ffffffedH
  00114	eb 55		 jmp	 SHORT $LN1@GetAnimati
$LN81@GetAnimati:
  00116	c6 45 eb ea	 mov	 BYTE PTR _szEncEventType$[ebp+15], -22 ; ffffffeaH
  0011a	eb 4f		 jmp	 SHORT $LN1@GetAnimati
$LN82@GetAnimati:
  0011c	88 55 ea	 mov	 BYTE PTR _szEncEventType$[ebp+14], dl
  0011f	eb 4a		 jmp	 SHORT $LN1@GetAnimati
$LN83@GetAnimati:
  00121	c6 45 e9 ec	 mov	 BYTE PTR _szEncEventType$[ebp+13], -20 ; ffffffecH
  00125	eb 44		 jmp	 SHORT $LN1@GetAnimati
$LN85@GetAnimati:
  00127	c6 45 e7 ea	 mov	 BYTE PTR _szEncEventType$[ebp+11], -22 ; ffffffeaH
  0012b	eb 3e		 jmp	 SHORT $LN1@GetAnimati
$LN86@GetAnimati:
  0012d	88 55 e6	 mov	 BYTE PTR _szEncEventType$[ebp+10], dl
  00130	eb 39		 jmp	 SHORT $LN1@GetAnimati
$LN87@GetAnimati:
  00132	c6 45 e5 ec	 mov	 BYTE PTR _szEncEventType$[ebp+9], -20 ; ffffffecH
  00136	eb 33		 jmp	 SHORT $LN1@GetAnimati
$LN88@GetAnimati:
  00138	c6 45 e4 ed	 mov	 BYTE PTR _szEncEventType$[ebp+8], -19 ; ffffffedH
  0013c	eb 2d		 jmp	 SHORT $LN1@GetAnimati
$LN89@GetAnimati:
  0013e	c6 45 e3 ea	 mov	 BYTE PTR _szEncEventType$[ebp+7], -22 ; ffffffeaH
  00142	eb 27		 jmp	 SHORT $LN1@GetAnimati
$LN90@GetAnimati:
  00144	88 55 e2	 mov	 BYTE PTR _szEncEventType$[ebp+6], dl
  00147	eb 22		 jmp	 SHORT $LN1@GetAnimati
$LN91@GetAnimati:
  00149	c6 45 e1 ec	 mov	 BYTE PTR _szEncEventType$[ebp+5], -20 ; ffffffecH
  0014d	eb 1c		 jmp	 SHORT $LN1@GetAnimati
$LN92@GetAnimati:
  0014f	c6 45 e0 ed	 mov	 BYTE PTR _szEncEventType$[ebp+4], -19 ; ffffffedH
  00153	eb 16		 jmp	 SHORT $LN1@GetAnimati
$LN93@GetAnimati:
  00155	c6 45 df ea	 mov	 BYTE PTR _szEncEventType$[ebp+3], -22 ; ffffffeaH
  00159	eb 10		 jmp	 SHORT $LN1@GetAnimati
$LN94@GetAnimati:
  0015b	c6 45 de eb	 mov	 BYTE PTR _szEncEventType$[ebp+2], -21 ; ffffffebH
  0015f	eb 0a		 jmp	 SHORT $LN1@GetAnimati
$LN95@GetAnimati:
  00161	c6 45 dd ec	 mov	 BYTE PTR _szEncEventType$[ebp+1], -20 ; ffffffecH
  00165	eb 04		 jmp	 SHORT $LN1@GetAnimati
$LN96@GetAnimati:
  00167	c6 45 dc ed	 mov	 BYTE PTR _szEncEventType$[ebp], -19 ; ffffffedH
$LN1@GetAnimati:
  0016b	6a 03		 push	 3
  0016d	8d 45 dc	 lea	 eax, DWORD PTR _szEncEventType$[ebp]
  00170	c6 45 e8 00	 mov	 BYTE PTR _szEncEventType$[ebp+12], 0
  00174	59		 pop	 ecx
$LL105@GetAnimati:
  00175	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0017b	83 c0 04	 add	 eax, 4
  0017e	49		 dec	 ecx
  0017f	75 f4		 jne	 SHORT $LL105@GetAnimati

; 408  : 		return GetAnimationEventTimeList(id, szEncEventType, vTimeList);

  00181	8d 45 dc	 lea	 eax, DWORD PTR _szEncEventType$[ebp]
  00184	50		 push	 eax
  00185	8d 4d cc	 lea	 ecx, DWORD PTR $T553404[ebp]
  00188	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0018e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00192	56		 push	 esi
  00193	8d 45 cc	 lea	 eax, DWORD PTR $T553404[ebp]
  00196	50		 push	 eax
  00197	ff 75 08	 push	 DWORD PTR _id$[ebp]
  0019a	8b cf		 mov	 ecx, edi
  0019c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventTimeList@ioEntityGroup@@QAEHHABVioHashString@@AAV?$list@MV?$allocator@M@std@@@std@@@Z
  001a2	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001a6	8d 4d cc	 lea	 ecx, DWORD PTR $T553404[ebp]
  001a9	8b f0		 mov	 esi, eax
  001ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  001b1	8b c6		 mov	 eax, esi

; 409  : 	}

  001b3	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001b8	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR $T553404[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$GetAnimationEventTimeList_e@$0N@@ioEntityGroup@@QAEHHAAY0N@$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z ENDP ; ioEntityGroup::GetAnimationEventTimeList_e<13>
PUBLIC	??$GetAnimationEventTime_e@$0L@@ioEntityGroup@@QAEMHAAY0L@$$CBD@Z ; ioEntityGroup::GetAnimationEventTime_e<11>
EXTRN	__imp_?GetAnimationEventTime@ioEntityGroup@@QAEMHABVioHashString@@@Z:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
xdata$x	SEGMENT
__unwindtable$??$GetAnimationEventTime_e@$0L@@ioEntityGroup@@QAEMHAAY0L@$$CBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetAnimationEventTime_e@$0L@@ioEntityGroup@@QAEMHAAY0L@$$CBD@Z$0
__ehfuncinfo$??$GetAnimationEventTime_e@$0L@@ioEntityGroup@@QAEMHAAY0L@$$CBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$GetAnimationEventTime_e@$0L@@ioEntityGroup@@QAEMHAAY0L@$$CBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioentitygroup.h
xdata$x	ENDS
;	COMDAT ??$GetAnimationEventTime_e@$0L@@ioEntityGroup@@QAEMHAAY0L@$$CBD@Z
_TEXT	SEGMENT
$T553437 = -52						; size = 16
$T553436 = -36						; size = 4
_szEncEventType$ = -32					; size = 11
__$EHRec$ = -12						; size = 12
_id$ = 8						; size = 4
_szEventType$ = 12					; size = 4
??$GetAnimationEventTime_e@$0L@@ioEntityGroup@@QAEMHAAY0L@$$CBD@Z PROC ; ioEntityGroup::GetAnimationEventTime_e<11>, COMDAT
; _this$ = ecx

; 414  : 	{

  00000	6a 28		 push	 40			; 00000028H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$GetAnimationEventTime_e@$0L@@ioEntityGroup@@QAEMHAAY0L@$$CBD@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _szEventType$[ebp]
  0000f	8b f1		 mov	 esi, ecx

; 415  : 		_ENCSTR(szEventType, szEncEventType);

  00011	8a 08		 mov	 cl, BYTE PTR [eax]
  00013	84 c9		 test	 cl, cl
  00015	0f 84 1b 01 00
	00		 je	 $LN96@GetAnimati@2
  0001b	b2 ed		 mov	 dl, -19			; ffffffedH
  0001d	32 ca		 xor	 cl, dl
  0001f	88 4d e0	 mov	 BYTE PTR _szEncEventType$[ebp], cl
  00022	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00025	84 c9		 test	 cl, cl
  00027	0f 84 03 01 00
	00		 je	 $LN95@GetAnimati@2
  0002d	80 f1 ec	 xor	 cl, -20			; ffffffecH
  00030	88 4d e1	 mov	 BYTE PTR _szEncEventType$[ebp+1], cl
  00033	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00036	84 c9		 test	 cl, cl
  00038	0f 84 ec 00 00
	00		 je	 $LN94@GetAnimati@2
  0003e	80 f1 eb	 xor	 cl, -21			; ffffffebH
  00041	88 4d e2	 mov	 BYTE PTR _szEncEventType$[ebp+2], cl
  00044	8a 48 03	 mov	 cl, BYTE PTR [eax+3]
  00047	84 c9		 test	 cl, cl
  00049	0f 84 d5 00 00
	00		 je	 $LN93@GetAnimati@2
  0004f	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  00052	88 4d e3	 mov	 BYTE PTR _szEncEventType$[ebp+3], cl
  00055	8a 48 04	 mov	 cl, BYTE PTR [eax+4]
  00058	84 c9		 test	 cl, cl
  0005a	0f 84 bf 00 00
	00		 je	 $LN92@GetAnimati@2
  00060	32 ca		 xor	 cl, dl
  00062	88 4d e4	 mov	 BYTE PTR _szEncEventType$[ebp+4], cl
  00065	8a 48 05	 mov	 cl, BYTE PTR [eax+5]
  00068	84 c9		 test	 cl, cl
  0006a	0f 84 a9 00 00
	00		 je	 $LN91@GetAnimati@2
  00070	80 f1 ec	 xor	 cl, -20			; ffffffecH
  00073	88 4d e5	 mov	 BYTE PTR _szEncEventType$[ebp+5], cl
  00076	8a 48 06	 mov	 cl, BYTE PTR [eax+6]
  00079	84 c9		 test	 cl, cl
  0007b	0f 84 92 00 00
	00		 je	 $LN90@GetAnimati@2
  00081	80 f1 eb	 xor	 cl, -21			; ffffffebH
  00084	88 4d e6	 mov	 BYTE PTR _szEncEventType$[ebp+6], cl
  00087	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  0008a	84 c9		 test	 cl, cl
  0008c	74 7f		 je	 SHORT $LN89@GetAnimati@2
  0008e	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  00091	88 4d e7	 mov	 BYTE PTR _szEncEventType$[ebp+7], cl
  00094	8a 48 08	 mov	 cl, BYTE PTR [eax+8]
  00097	84 c9		 test	 cl, cl
  00099	74 6d		 je	 SHORT $LN88@GetAnimati@2
  0009b	32 ca		 xor	 cl, dl
  0009d	88 4d e8	 mov	 BYTE PTR _szEncEventType$[ebp+8], cl
  000a0	8a 48 09	 mov	 cl, BYTE PTR [eax+9]
  000a3	84 c9		 test	 cl, cl
  000a5	74 5b		 je	 SHORT $LN87@GetAnimati@2
  000a7	80 f1 ec	 xor	 cl, -20			; ffffffecH
  000aa	80 78 0a 00	 cmp	 BYTE PTR [eax+10], 0
  000ae	88 4d e9	 mov	 BYTE PTR _szEncEventType$[ebp+9], cl
  000b1	0f 84 83 00 00
	00		 je	 $LN1@GetAnimati@2
  000b7	8a 48 0b	 mov	 cl, BYTE PTR [eax+11]
  000ba	84 c9		 test	 cl, cl
  000bc	74 3e		 je	 SHORT $LN85@GetAnimati@2
  000be	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  000c1	88 4d eb	 mov	 BYTE PTR _szEncEventType$[ebp+11], cl
  000c4	8a 48 0c	 mov	 cl, BYTE PTR [eax+12]
  000c7	84 c9		 test	 cl, cl
  000c9	74 2c		 je	 SHORT $LN84@GetAnimati@2
  000cb	32 ca		 xor	 cl, dl
  000cd	88 4d ec	 mov	 BYTE PTR _szEncEventType$[ebp+12], cl
  000d0	8a 48 0d	 mov	 cl, BYTE PTR [eax+13]
  000d3	84 c9		 test	 cl, cl
  000d5	74 1a		 je	 SHORT $LN83@GetAnimati@2
  000d7	8a 40 0e	 mov	 al, BYTE PTR [eax+14]
  000da	80 f1 ec	 xor	 cl, -20			; ffffffecH
  000dd	88 4d ed	 mov	 BYTE PTR _szEncEventType$[ebp+13], cl
  000e0	84 c0		 test	 al, al
  000e2	74 07		 je	 SHORT $LN82@GetAnimati@2
  000e4	34 eb		 xor	 al, -21			; ffffffebH
  000e6	88 45 ee	 mov	 BYTE PTR _szEncEventType$[ebp+14], al
  000e9	eb 4f		 jmp	 SHORT $LN1@GetAnimati@2
$LN82@GetAnimati@2:
  000eb	c6 45 ee eb	 mov	 BYTE PTR _szEncEventType$[ebp+14], -21 ; ffffffebH
  000ef	eb 49		 jmp	 SHORT $LN1@GetAnimati@2
$LN83@GetAnimati@2:
  000f1	c6 45 ed ec	 mov	 BYTE PTR _szEncEventType$[ebp+13], -20 ; ffffffecH
  000f5	eb 43		 jmp	 SHORT $LN1@GetAnimati@2
$LN84@GetAnimati@2:
  000f7	88 55 ec	 mov	 BYTE PTR _szEncEventType$[ebp+12], dl
  000fa	eb 3e		 jmp	 SHORT $LN1@GetAnimati@2
$LN85@GetAnimati@2:
  000fc	c6 45 eb ea	 mov	 BYTE PTR _szEncEventType$[ebp+11], -22 ; ffffffeaH
  00100	eb 38		 jmp	 SHORT $LN1@GetAnimati@2
$LN87@GetAnimati@2:
  00102	c6 45 e9 ec	 mov	 BYTE PTR _szEncEventType$[ebp+9], -20 ; ffffffecH
  00106	eb 32		 jmp	 SHORT $LN1@GetAnimati@2
$LN88@GetAnimati@2:
  00108	88 55 e8	 mov	 BYTE PTR _szEncEventType$[ebp+8], dl
  0010b	eb 2d		 jmp	 SHORT $LN1@GetAnimati@2
$LN89@GetAnimati@2:
  0010d	c6 45 e7 ea	 mov	 BYTE PTR _szEncEventType$[ebp+7], -22 ; ffffffeaH
  00111	eb 27		 jmp	 SHORT $LN1@GetAnimati@2
$LN90@GetAnimati@2:
  00113	c6 45 e6 eb	 mov	 BYTE PTR _szEncEventType$[ebp+6], -21 ; ffffffebH
  00117	eb 21		 jmp	 SHORT $LN1@GetAnimati@2
$LN91@GetAnimati@2:
  00119	c6 45 e5 ec	 mov	 BYTE PTR _szEncEventType$[ebp+5], -20 ; ffffffecH
  0011d	eb 1b		 jmp	 SHORT $LN1@GetAnimati@2
$LN92@GetAnimati@2:
  0011f	88 55 e4	 mov	 BYTE PTR _szEncEventType$[ebp+4], dl
  00122	eb 16		 jmp	 SHORT $LN1@GetAnimati@2
$LN93@GetAnimati@2:
  00124	c6 45 e3 ea	 mov	 BYTE PTR _szEncEventType$[ebp+3], -22 ; ffffffeaH
  00128	eb 10		 jmp	 SHORT $LN1@GetAnimati@2
$LN94@GetAnimati@2:
  0012a	c6 45 e2 eb	 mov	 BYTE PTR _szEncEventType$[ebp+2], -21 ; ffffffebH
  0012e	eb 0a		 jmp	 SHORT $LN1@GetAnimati@2
$LN95@GetAnimati@2:
  00130	c6 45 e1 ec	 mov	 BYTE PTR _szEncEventType$[ebp+1], -20 ; ffffffecH
  00134	eb 04		 jmp	 SHORT $LN1@GetAnimati@2
$LN96@GetAnimati@2:
  00136	c6 45 e0 ed	 mov	 BYTE PTR _szEncEventType$[ebp], -19 ; ffffffedH
$LN1@GetAnimati@2:
  0013a	6a 02		 push	 2
  0013c	8d 45 e0	 lea	 eax, DWORD PTR _szEncEventType$[ebp]
  0013f	c6 45 ea 00	 mov	 BYTE PTR _szEncEventType$[ebp+10], 0
  00143	59		 pop	 ecx
$LL105@GetAnimati@2:
  00144	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0014a	83 c0 04	 add	 eax, 4
  0014d	49		 dec	 ecx
  0014e	75 f4		 jne	 SHORT $LL105@GetAnimati@2
  00150	6a 08		 push	 8
  00152	58		 pop	 eax
$LL102@GetAnimati@2:
  00153	8b c8		 mov	 ecx, eax
  00155	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0015b	79 05		 jns	 SHORT $LN113@GetAnimati@2
  0015d	49		 dec	 ecx
  0015e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00161	41		 inc	 ecx
$LN113@GetAnimati@2:
  00162	b2 ed		 mov	 dl, -19			; ffffffedH
  00164	2a d1		 sub	 dl, cl
  00166	30 54 05 e0	 xor	 BYTE PTR _szEncEventType$[ebp+eax], dl
  0016a	40		 inc	 eax
  0016b	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0016e	7c e3		 jl	 SHORT $LL102@GetAnimati@2

; 416  : 		return GetAnimationEventTime(id, szEncEventType);

  00170	8d 45 e0	 lea	 eax, DWORD PTR _szEncEventType$[ebp]
  00173	50		 push	 eax
  00174	8d 4d cc	 lea	 ecx, DWORD PTR $T553437[ebp]
  00177	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0017d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00181	8d 45 cc	 lea	 eax, DWORD PTR $T553437[ebp]
  00184	50		 push	 eax
  00185	ff 75 08	 push	 DWORD PTR _id$[ebp]
  00188	8b ce		 mov	 ecx, esi
  0018a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventTime@ioEntityGroup@@QAEMHABVioHashString@@@Z
  00190	d9 5d dc	 fstp	 DWORD PTR $T553436[ebp]
  00193	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00197	8d 4d cc	 lea	 ecx, DWORD PTR $T553437[ebp]
  0019a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  001a0	d9 45 dc	 fld	 DWORD PTR $T553436[ebp]

; 417  : 	}

  001a3	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001a8	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetAnimationEventTime_e@$0L@@ioEntityGroup@@QAEMHAAY0L@$$CBD@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR $T553437[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??$GetAnimationEventTime_e@$0L@@ioEntityGroup@@QAEMHAAY0L@$$CBD@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$GetAnimationEventTime_e@$0L@@ioEntityGroup@@QAEMHAAY0L@$$CBD@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$GetAnimationEventTime_e@$0L@@ioEntityGroup@@QAEMHAAY0L@$$CBD@Z ENDP ; ioEntityGroup::GetAnimationEventTime_e<11>
PUBLIC	??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z ; ioEntityGroup::GetAnimationEventTime_e<12>
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
xdata$x	SEGMENT
__unwindtable$??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z$0
__ehfuncinfo$??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioentitygroup.h
xdata$x	ENDS
;	COMDAT ??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z
_TEXT	SEGMENT
$T553468 = -52						; size = 16
$T553467 = -36						; size = 4
_szEncEventType$ = -32					; size = 12
__$EHRec$ = -12						; size = 12
_id$ = 8						; size = 4
_szEventType$ = 12					; size = 4
??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z PROC ; ioEntityGroup::GetAnimationEventTime_e<12>, COMDAT
; _this$ = ecx

; 414  : 	{

  00000	6a 28		 push	 40			; 00000028H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _szEventType$[ebp]
  0000f	8b f1		 mov	 esi, ecx

; 415  : 		_ENCSTR(szEventType, szEncEventType);

  00011	8a 08		 mov	 cl, BYTE PTR [eax]
  00013	84 c9		 test	 cl, cl
  00015	0f 84 36 01 00
	00		 je	 $LN96@GetAnimati@3
  0001b	b2 ed		 mov	 dl, -19			; ffffffedH
  0001d	32 ca		 xor	 cl, dl
  0001f	88 4d e0	 mov	 BYTE PTR _szEncEventType$[ebp], cl
  00022	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00025	84 c9		 test	 cl, cl
  00027	0f 84 1e 01 00
	00		 je	 $LN95@GetAnimati@3
  0002d	80 f1 ec	 xor	 cl, -20			; ffffffecH
  00030	88 4d e1	 mov	 BYTE PTR _szEncEventType$[ebp+1], cl
  00033	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00036	84 c9		 test	 cl, cl
  00038	0f 84 07 01 00
	00		 je	 $LN94@GetAnimati@3
  0003e	80 f1 eb	 xor	 cl, -21			; ffffffebH
  00041	88 4d e2	 mov	 BYTE PTR _szEncEventType$[ebp+2], cl
  00044	8a 48 03	 mov	 cl, BYTE PTR [eax+3]
  00047	84 c9		 test	 cl, cl
  00049	0f 84 f0 00 00
	00		 je	 $LN93@GetAnimati@3
  0004f	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  00052	88 4d e3	 mov	 BYTE PTR _szEncEventType$[ebp+3], cl
  00055	8a 48 04	 mov	 cl, BYTE PTR [eax+4]
  00058	84 c9		 test	 cl, cl
  0005a	0f 84 da 00 00
	00		 je	 $LN92@GetAnimati@3
  00060	32 ca		 xor	 cl, dl
  00062	88 4d e4	 mov	 BYTE PTR _szEncEventType$[ebp+4], cl
  00065	8a 48 05	 mov	 cl, BYTE PTR [eax+5]
  00068	84 c9		 test	 cl, cl
  0006a	0f 84 c4 00 00
	00		 je	 $LN91@GetAnimati@3
  00070	80 f1 ec	 xor	 cl, -20			; ffffffecH
  00073	88 4d e5	 mov	 BYTE PTR _szEncEventType$[ebp+5], cl
  00076	8a 48 06	 mov	 cl, BYTE PTR [eax+6]
  00079	84 c9		 test	 cl, cl
  0007b	0f 84 ad 00 00
	00		 je	 $LN90@GetAnimati@3
  00081	80 f1 eb	 xor	 cl, -21			; ffffffebH
  00084	88 4d e6	 mov	 BYTE PTR _szEncEventType$[ebp+6], cl
  00087	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  0008a	84 c9		 test	 cl, cl
  0008c	0f 84 96 00 00
	00		 je	 $LN89@GetAnimati@3
  00092	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  00095	88 4d e7	 mov	 BYTE PTR _szEncEventType$[ebp+7], cl
  00098	8a 48 08	 mov	 cl, BYTE PTR [eax+8]
  0009b	84 c9		 test	 cl, cl
  0009d	0f 84 80 00 00
	00		 je	 $LN88@GetAnimati@3
  000a3	32 ca		 xor	 cl, dl
  000a5	88 4d e8	 mov	 BYTE PTR _szEncEventType$[ebp+8], cl
  000a8	8a 48 09	 mov	 cl, BYTE PTR [eax+9]
  000ab	84 c9		 test	 cl, cl
  000ad	74 6e		 je	 SHORT $LN87@GetAnimati@3
  000af	80 f1 ec	 xor	 cl, -20			; ffffffecH
  000b2	88 4d e9	 mov	 BYTE PTR _szEncEventType$[ebp+9], cl
  000b5	8a 48 0a	 mov	 cl, BYTE PTR [eax+10]
  000b8	84 c9		 test	 cl, cl
  000ba	74 5b		 je	 SHORT $LN86@GetAnimati@3
  000bc	80 f1 eb	 xor	 cl, -21			; ffffffebH
  000bf	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000c3	88 4d ea	 mov	 BYTE PTR _szEncEventType$[ebp+10], cl
  000c6	0f 84 89 00 00
	00		 je	 $LN1@GetAnimati@3
  000cc	8a 48 0c	 mov	 cl, BYTE PTR [eax+12]
  000cf	84 c9		 test	 cl, cl
  000d1	74 3f		 je	 SHORT $LN84@GetAnimati@3
  000d3	32 ca		 xor	 cl, dl
  000d5	88 4d ec	 mov	 BYTE PTR _szEncEventType$[ebp+12], cl
  000d8	8a 48 0d	 mov	 cl, BYTE PTR [eax+13]
  000db	84 c9		 test	 cl, cl
  000dd	74 2d		 je	 SHORT $LN83@GetAnimati@3
  000df	80 f1 ec	 xor	 cl, -20			; ffffffecH
  000e2	88 4d ed	 mov	 BYTE PTR _szEncEventType$[ebp+13], cl
  000e5	8a 48 0e	 mov	 cl, BYTE PTR [eax+14]
  000e8	84 c9		 test	 cl, cl
  000ea	74 1a		 je	 SHORT $LN82@GetAnimati@3
  000ec	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000ef	80 f1 eb	 xor	 cl, -21			; ffffffebH
  000f2	88 4d ee	 mov	 BYTE PTR _szEncEventType$[ebp+14], cl
  000f5	84 c0		 test	 al, al
  000f7	74 07		 je	 SHORT $LN81@GetAnimati@3
  000f9	34 ea		 xor	 al, -22			; ffffffeaH
  000fb	88 45 ef	 mov	 BYTE PTR _szEncEventType$[ebp+15], al
  000fe	eb 55		 jmp	 SHORT $LN1@GetAnimati@3
$LN81@GetAnimati@3:
  00100	c6 45 ef ea	 mov	 BYTE PTR _szEncEventType$[ebp+15], -22 ; ffffffeaH
  00104	eb 4f		 jmp	 SHORT $LN1@GetAnimati@3
$LN82@GetAnimati@3:
  00106	c6 45 ee eb	 mov	 BYTE PTR _szEncEventType$[ebp+14], -21 ; ffffffebH
  0010a	eb 49		 jmp	 SHORT $LN1@GetAnimati@3
$LN83@GetAnimati@3:
  0010c	c6 45 ed ec	 mov	 BYTE PTR _szEncEventType$[ebp+13], -20 ; ffffffecH
  00110	eb 43		 jmp	 SHORT $LN1@GetAnimati@3
$LN84@GetAnimati@3:
  00112	88 55 ec	 mov	 BYTE PTR _szEncEventType$[ebp+12], dl
  00115	eb 3e		 jmp	 SHORT $LN1@GetAnimati@3
$LN86@GetAnimati@3:
  00117	c6 45 ea eb	 mov	 BYTE PTR _szEncEventType$[ebp+10], -21 ; ffffffebH
  0011b	eb 38		 jmp	 SHORT $LN1@GetAnimati@3
$LN87@GetAnimati@3:
  0011d	c6 45 e9 ec	 mov	 BYTE PTR _szEncEventType$[ebp+9], -20 ; ffffffecH
  00121	eb 32		 jmp	 SHORT $LN1@GetAnimati@3
$LN88@GetAnimati@3:
  00123	88 55 e8	 mov	 BYTE PTR _szEncEventType$[ebp+8], dl
  00126	eb 2d		 jmp	 SHORT $LN1@GetAnimati@3
$LN89@GetAnimati@3:
  00128	c6 45 e7 ea	 mov	 BYTE PTR _szEncEventType$[ebp+7], -22 ; ffffffeaH
  0012c	eb 27		 jmp	 SHORT $LN1@GetAnimati@3
$LN90@GetAnimati@3:
  0012e	c6 45 e6 eb	 mov	 BYTE PTR _szEncEventType$[ebp+6], -21 ; ffffffebH
  00132	eb 21		 jmp	 SHORT $LN1@GetAnimati@3
$LN91@GetAnimati@3:
  00134	c6 45 e5 ec	 mov	 BYTE PTR _szEncEventType$[ebp+5], -20 ; ffffffecH
  00138	eb 1b		 jmp	 SHORT $LN1@GetAnimati@3
$LN92@GetAnimati@3:
  0013a	88 55 e4	 mov	 BYTE PTR _szEncEventType$[ebp+4], dl
  0013d	eb 16		 jmp	 SHORT $LN1@GetAnimati@3
$LN93@GetAnimati@3:
  0013f	c6 45 e3 ea	 mov	 BYTE PTR _szEncEventType$[ebp+3], -22 ; ffffffeaH
  00143	eb 10		 jmp	 SHORT $LN1@GetAnimati@3
$LN94@GetAnimati@3:
  00145	c6 45 e2 eb	 mov	 BYTE PTR _szEncEventType$[ebp+2], -21 ; ffffffebH
  00149	eb 0a		 jmp	 SHORT $LN1@GetAnimati@3
$LN95@GetAnimati@3:
  0014b	c6 45 e1 ec	 mov	 BYTE PTR _szEncEventType$[ebp+1], -20 ; ffffffecH
  0014f	eb 04		 jmp	 SHORT $LN1@GetAnimati@3
$LN96@GetAnimati@3:
  00151	c6 45 e0 ed	 mov	 BYTE PTR _szEncEventType$[ebp], -19 ; ffffffedH
$LN1@GetAnimati@3:
  00155	6a 02		 push	 2
  00157	8d 45 e0	 lea	 eax, DWORD PTR _szEncEventType$[ebp]
  0015a	c6 45 eb 00	 mov	 BYTE PTR _szEncEventType$[ebp+11], 0
  0015e	59		 pop	 ecx
$LL105@GetAnimati@3:
  0015f	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00165	83 c0 04	 add	 eax, 4
  00168	49		 dec	 ecx
  00169	75 f4		 jne	 SHORT $LL105@GetAnimati@3
  0016b	6a 08		 push	 8
  0016d	58		 pop	 eax
$LL102@GetAnimati@3:
  0016e	8b c8		 mov	 ecx, eax
  00170	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00176	79 05		 jns	 SHORT $LN113@GetAnimati@3
  00178	49		 dec	 ecx
  00179	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0017c	41		 inc	 ecx
$LN113@GetAnimati@3:
  0017d	b2 ed		 mov	 dl, -19			; ffffffedH
  0017f	2a d1		 sub	 dl, cl
  00181	30 54 05 e0	 xor	 BYTE PTR _szEncEventType$[ebp+eax], dl
  00185	40		 inc	 eax
  00186	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00189	7c e3		 jl	 SHORT $LL102@GetAnimati@3

; 416  : 		return GetAnimationEventTime(id, szEncEventType);

  0018b	8d 45 e0	 lea	 eax, DWORD PTR _szEncEventType$[ebp]
  0018e	50		 push	 eax
  0018f	8d 4d cc	 lea	 ecx, DWORD PTR $T553468[ebp]
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  00198	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0019c	8d 45 cc	 lea	 eax, DWORD PTR $T553468[ebp]
  0019f	50		 push	 eax
  001a0	ff 75 08	 push	 DWORD PTR _id$[ebp]
  001a3	8b ce		 mov	 ecx, esi
  001a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventTime@ioEntityGroup@@QAEMHABVioHashString@@@Z
  001ab	d9 5d dc	 fstp	 DWORD PTR $T553467[ebp]
  001ae	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001b2	8d 4d cc	 lea	 ecx, DWORD PTR $T553468[ebp]
  001b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  001bb	d9 45 dc	 fld	 DWORD PTR $T553467[ebp]

; 417  : 	}

  001be	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001c3	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR $T553468[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z ENDP ; ioEntityGroup::GetAnimationEventTime_e<12>
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z PROC ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z ; std::allocator<ioHashString>::construct<ioHashString &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z$0
__ehfuncinfo$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z
_TEXT	SEGMENT
$T553504 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z PROC ; std::allocator<ioHashString>::construct<ioHashString &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T553504[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 09		 je	 SHORT $LN3@construct
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
$LN3@construct:

; 209  : 		}

  00023	e8 00 00 00 00	 call	 __EH_epilog3
  00028	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T553504[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z ENDP ; std::allocator<ioHashString>::construct<ioHashString &>
PUBLIC	?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z ; std::allocator<ioHashString>::construct
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z$0
__ehfuncinfo$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z
_TEXT	SEGMENT
$T553523 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z PROC ; std::allocator<ioHashString>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T553523[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 09		 je	 SHORT $LN3@construct@2
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
$LN3@construct@2:

; 203  : 		}

  00023	e8 00 00 00 00	 call	 __EH_epilog3
  00028	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T553523[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z ENDP ; std::allocator<ioHashString>::construct
PUBLIC	?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z ; std::allocator<ForceInfo>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z PROC ; std::allocator<ForceInfo>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN5@construct@3
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN5@construct@3:
  00013	5f		 pop	 edi

; 198  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z ENDP ; std::allocator<ForceInfo>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
_TEXT	SEGMENT
$T553566 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z PROC ; std::_Construct<WeaponInfo,WeaponInfo const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T553566[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 08		 je	 SHORT $LN3@Construct@3
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@ABU0@@Z
$LN3@Construct@3:

; 49   : 	}

  00025	e8 00 00 00 00	 call	 __EH_epilog3
  0002a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T553566[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ENDP ; std::_Construct<WeaponInfo,WeaponInfo const &>
PUBLIC	??B?$CEncrypt@M@@QAEMXZ				; CEncrypt<float>::operator float
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??B?$CEncrypt@M@@QAEMXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@M@@QAEMXZ PROC				; CEncrypt<float>::operator float, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	d9 45 fc	 fld	 DWORD PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@M@@QAEMXZ ENDP				; CEncrypt<float>::operator float
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@M@@QAEMM@Z			; CEncrypt<float>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@M@@QAEMM@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@M@@QAEMM@Z PROC				; CEncrypt<float>::operator=, COMDAT
; _this$ = ecx

; 1654 : 	{	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1655 : 		type value = inValue;

  00003	d9 45 08	 fld	 DWORD PTR _inValue$[ebp]

; 1656 : 		EncryptValueToPool((char*)&value);

  00006	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  00009	50		 push	 eax
  0000a	d9 5d 08	 fstp	 DWORD PTR _value$[ebp]
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 1657 : #ifdef _NOTUSE
; 1658 : 		m_value = inValue;
; 1659 : 		Debug();
; 1660 : #endif
; 1661 : 		return value;

  00012	d9 45 08	 fld	 DWORD PTR _value$[ebp]

; 1662 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@M@@QAEMM@Z ENDP				; CEncrypt<float>::operator=
_TEXT	ENDS
PUBLIC	??Y?$CEncrypt@M@@QAEAAMABM@Z			; CEncrypt<float>::operator+=
; Function compile flags: /Ogsp
;	COMDAT ??Y?$CEncrypt@M@@QAEAAMABM@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??Y?$CEncrypt@M@@QAEAAMABM@Z PROC			; CEncrypt<float>::operator+=, COMDAT
; _this$ = ecx

; 1715 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 1716 : 		type value;
; 1717 : 		DecryptValueToPool(&value);

  00005	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00008	50		 push	 eax
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 1718 : 		value += inValue;

  00010	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00013	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00017	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _value$[ebp]
  0001c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0001f	0f 5a c9	 cvtps2pd xmm1, xmm1

; 1719 : 		EncryptValueToPool((char*)&value);

  00022	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00025	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00029	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0002d	50		 push	 eax
  0002e	8b ce		 mov	 ecx, esi
  00030	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  00035	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 1720 : #ifdef _NOTUSE
; 1721 : 		m_value += inValue;
; 1722 : 		Debug();
; 1723 : #endif
; 1724 : 		return value;

  0003a	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  0003d	5e		 pop	 esi

; 1725 : 	} 

  0003e	c9		 leave
  0003f	c2 04 00	 ret	 4
??Y?$CEncrypt@M@@QAEAAMABM@Z ENDP			; CEncrypt<float>::operator+=
_TEXT	ENDS
PUBLIC	??Z?$CEncrypt@M@@QAEAAMABM@Z			; CEncrypt<float>::operator-=
; Function compile flags: /Ogsp
;	COMDAT ??Z?$CEncrypt@M@@QAEAAMABM@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??Z?$CEncrypt@M@@QAEAAMABM@Z PROC			; CEncrypt<float>::operator-=, COMDAT
; _this$ = ecx

; 1728 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 1729 : 		type value;
; 1730 : 		DecryptValueToPool(&value);

  00005	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00008	50		 push	 eax
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 1731 : 		value -= inValue;

  00010	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00013	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$[ebp]
  00018	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  0001c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0001f	0f 5a c9	 cvtps2pd xmm1, xmm1

; 1732 : 		EncryptValueToPool((char*)&value);

  00022	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00025	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00029	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0002d	50		 push	 eax
  0002e	8b ce		 mov	 ecx, esi
  00030	f3 0f 11 45 fc	 movss	 DWORD PTR _value$[ebp], xmm0
  00035	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 1733 : #ifdef _NOTUSE
; 1734 : 		m_value -= inValue;
; 1735 : 		Debug();
; 1736 : #endif
; 1737 : 		return value;

  0003a	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  0003d	5e		 pop	 esi

; 1738 : 	} 

  0003e	c9		 leave
  0003f	c2 04 00	 ret	 4
??Z?$CEncrypt@M@@QAEAAMABM@Z ENDP			; CEncrypt<float>::operator-=
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@K@@QAEKXZ				; CEncrypt<unsigned long>::operator unsigned long
; Function compile flags: /Ogsp
;	COMDAT ??B?$CEncrypt@K@@QAEKXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@K@@QAEKXZ PROC				; CEncrypt<unsigned long>::operator unsigned long, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@K@@QAEKXZ ENDP				; CEncrypt<unsigned long>::operator unsigned long
_TEXT	ENDS
PUBLIC	?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::begin
_TEXT	ENDS
PUBLIC	?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::end
_TEXT	ENDS
PUBLIC	?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::end
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@V?$allocator@VioHashString@@@1@@Z ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::_Vector_val<ioHashString,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@V?$allocator@VioHashString@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@V?$allocator@VioHashString@@@1@@Z PROC ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::_Vector_val<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@V?$allocator@VioHashString@@@1@@Z ENDP ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::_Vector_val<ioHashString,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z PROC ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z ENDP ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::_Vector_val<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z PROC ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::_Vector_val<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z ENDP ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::_Vector_val<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Make_iter
_TEXT	ENDS
PUBLIC	?max_size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@VioHashString@@@std@@QAEPAVioHashString@@I@Z ; std::allocator<ioHashString>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@VioHashString@@@std@@QAEPAVioHashString@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@VioHashString@@@std@@QAEPAVioHashString@@I@Z PROC ; std::allocator<ioHashString>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ; std::_Allocate<ioHashString>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@VioHashString@@@std@@QAEPAVioHashString@@I@Z ENDP ; std::allocator<ioHashString>::allocate
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator==
_TEXT	ENDS
PUBLIC	??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioHashString *,ioHashString *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<ioHashString *,ioHashString *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 11		 jmp	 SHORT $LN11@Move
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000c	56		 push	 esi
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  00013	83 45 10 10	 add	 DWORD PTR __Dest$[ebp], 16 ; 00000010H
  00017	83 c6 10	 add	 esi, 16			; 00000010H
$LN11@Move:

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  0001a	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001d	75 ea		 jne	 SHORT $LL3@Move

; 2515 : 	return (_Dest);

  0001f	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00022	5e		 pop	 esi

; 2516 : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<ioHashString *,ioHashString *>
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z ; std::allocator<WeaponInfo>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z PROC ; std::allocator<WeaponInfo>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ; std::_Allocate<WeaponInfo>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z ENDP ; std::allocator<WeaponInfo>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z ; std::allocator<ForceInfo>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z PROC ; std::allocator<ForceInfo>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ; std::_Allocate<ForceInfo>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z ENDP ; std::allocator<ForceInfo>::allocate
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator==
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator==
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z ; std::allocator<ForceInfo>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z PROC ; std::allocator<ForceInfo>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z ENDP ; std::allocator<ForceInfo>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@VioHashString@@@std@@YAXPAVioHashString@@@Z ; std::_Destroy<ioHashString>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@VioHashString@@@std@@YAXPAVioHashString@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@VioHashString@@@std@@YAXPAVioHashString@@@Z PROC ; std::_Destroy<ioHashString>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 64   : 	}

  00006	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Destroy@VioHashString@@@std@@YAXPAVioHashString@@@Z ENDP ; std::_Destroy<ioHashString>
_TEXT	ENDS
PUBLIC	??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z ; std::_Destroy<WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z PROC ; std::_Destroy<WeaponInfo>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	83 c1 08	 add	 ecx, 8

; 64   : 	}

  00009	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  0000a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z ENDP ; std::_Destroy<WeaponInfo>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@ABV3@@Z ; std::allocator<ioHashString>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@ABV3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@ABV3@@Z PROC ; std::allocator<ioHashString>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@ABV3@@Z ENDP ; std::allocator<ioHashString>::construct
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	?SetNormalAttack@ioBullFightItem@@UAEXPAVioBaseChar@@H@Z ; ioBullFightItem::SetNormalAttack
EXTRN	__imp_?SetActionAni@ioEntityGroup@@QAE_NHMMMMMM_N0@Z:PROC
EXTRN	__imp_?GetAnimationFullTime@ioEntityGroup@@QAEMH@Z:PROC
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetNormalAttack@ioBullFightItem@@UAEXPAVioBaseChar@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetNormalAttack@ioBullFightItem@@UAEXPAVioBaseChar@@H@Z$0
__ehfuncinfo$?SetNormalAttack@ioBullFightItem@@UAEXPAVioBaseChar@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetNormalAttack@ioBullFightItem@@UAEXPAVioBaseChar@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobullfightitem.cpp
xdata$x	ENDS
;	COMDAT ?SetNormalAttack@ioBullFightItem@@UAEXPAVioBaseChar@@H@Z
_TEXT	SEGMENT
_szPreAni$ = -36					; size = 16
tv253 = -20						; size = 8
__$EHRec$ = -12						; size = 12
tv276 = 8						; size = 4
tv269 = 8						; size = 4
_value$553794 = 8					; size = 4
_fTimeRate$548542 = 8					; size = 4
_pOwner$ = 8						; size = 4
_pGrp$ = 12						; size = 4
_iCurCombo$ = 12					; size = 4
?SetNormalAttack@ioBullFightItem@@UAEXPAVioBaseChar@@H@Z PROC ; ioBullFightItem::SetNormalAttack, COMDAT
; _this$ = ecx

; 118  : {

  00000	6a 18		 push	 24			; 00000018H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?SetNormalAttack@ioBullFightItem@@UAEXPAVioBaseChar@@H@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 119  : 	ClearCancelInfo();	

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	ff 90 3c 02 00
	00		 call	 DWORD PTR [eax+572]

; 120  : 	
; 121  : 	m_ChargeState		= CS_CHARGING;

  00016	33 ff		 xor	 edi, edi
  00018	47		 inc	 edi
  00019	89 be 48 1a 00
	00		 mov	 DWORD PTR [esi+6728], edi

; 122  : 	m_dwAttackStartTime	= FRAMEGETTIME();

  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00025	8b c8		 mov	 ecx, eax
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 123  : 	m_nCurCombo			= iCurCombo;

  0002d	8b 5d 0c	 mov	 ebx, DWORD PTR _iCurCombo$[ebp]

; 124  : 	m_bSetDelay	= false;
; 125  : 
; 126  : 	pOwner->SetState( CS_ATTACK );

  00030	57		 push	 edi
  00031	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00034	6a 05		 push	 5
  00036	8b cf		 mov	 ecx, edi
  00038	89 86 4c 1a 00
	00		 mov	 DWORD PTR [esi+6732], eax
  0003e	89 9e 50 1a 00
	00		 mov	 DWORD PTR [esi+6736], ebx
  00044	c6 86 58 1a 00
	00 00		 mov	 BYTE PTR [esi+6744], 0
  0004b	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState

; 127  : 	pOwner->SetChargingState( true );
; 128  : 	pOwner->SetAttackMoveEnable( false );

  00050	6a 00		 push	 0
  00052	8b cf		 mov	 ecx, edi
  00054	c6 87 54 20 00
	00 01		 mov	 BYTE PTR [edi+8276], 1
  0005b	e8 00 00 00 00	 call	 ?SetAttackMoveEnable@ioBaseChar@@QAEX_N@Z ; ioBaseChar::SetAttackMoveEnable

; 129  : 
; 130  : 	ioEntityGroup *pGrp = pOwner->GetGroup();

  00060	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]

; 131  : 	pGrp->ClearAllActionAni( 100.0f, true );

  00063	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0006b	6a 01		 push	 1
  0006d	51		 push	 ecx
  0006e	8b cf		 mov	 ecx, edi
  00070	89 7d 0c	 mov	 DWORD PTR _pGrp$[ebp], edi
  00073	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 132  : 	pGrp->ClearAllLoopAni( 100.0f, true );

  0007e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00086	6a 01		 push	 1
  00088	51		 push	 ecx
  00089	8b cf		 mov	 ecx, edi
  0008b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 133  : 
; 134  : 	int iPreGatherCnt = m_szPreGatherAniList.size();

  00096	8b be 5c 19 00
	00		 mov	 edi, DWORD PTR [esi+6492]
  0009c	2b be 58 19 00
	00		 sub	 edi, DWORD PTR [esi+6488]

; 135  : 
; 136  : 	ioHashString szPreAni;

  000a2	8d 4d dc	 lea	 ecx, DWORD PTR _szPreAni$[ebp]
  000a5	c1 ff 04	 sar	 edi, 4
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ
  000ae	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 137  : 	if( 0 < iPreGatherCnt && COMPARE( iCurCombo, 0, iPreGatherCnt ) )

  000b2	85 ff		 test	 edi, edi
  000b4	0f 8e b6 00 00
	00		 jle	 $LN1@SetNormalA
  000ba	85 db		 test	 ebx, ebx
  000bc	0f 88 ae 00 00
	00		 js	 $LN1@SetNormalA
  000c2	3b df		 cmp	 ebx, edi
  000c4	0f 8d a6 00 00
	00		 jge	 $LN1@SetNormalA

; 138  : 	{
; 139  : 		szPreAni = m_szPreGatherAniList[iCurCombo];

  000ca	c1 e3 04	 shl	 ebx, 4
  000cd	03 9e 58 19 00
	00		 add	 ebx, DWORD PTR [esi+6488]
  000d3	8d 4d dc	 lea	 ecx, DWORD PTR _szPreAni$[ebp]
  000d6	53		 push	 ebx
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 140  : 		
; 141  : 		int iAniID = pGrp->GetAnimationIdx( szPreAni );

  000dd	8b 4d 0c	 mov	 ecx, DWORD PTR _pGrp$[ebp]
  000e0	8d 45 dc	 lea	 eax, DWORD PTR _szPreAni$[ebp]
  000e3	50		 push	 eax
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z
  000ea	8b f8		 mov	 edi, eax

; 142  : 		float fTimeRate = (float)m_dwChargeTime / pGrp->GetAnimationFullTime( iAniID );

  000ec	8d 45 08	 lea	 eax, DWORD PTR _value$553794[ebp]
  000ef	50		 push	 eax
  000f0	8d 8e b0 18 00
	00		 lea	 ecx, DWORD PTR [esi+6320]
  000f6	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  000fb	db 45 08	 fild	 DWORD PTR _value$553794[ebp]
  000fe	8b 45 08	 mov	 eax, DWORD PTR _value$553794[ebp]
  00101	85 c0		 test	 eax, eax
  00103	79 06		 jns	 SHORT $LN16@SetNormalA
  00105	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN16@SetNormalA:
  0010b	8b 4d 0c	 mov	 ecx, DWORD PTR _pGrp$[ebp]
  0010e	dd 5d ec	 fstp	 QWORD PTR tv253[ebp]
  00111	57		 push	 edi
  00112	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationFullTime@ioEntityGroup@@QAEMH@Z
  00118	dc 7d ec	 fdivr	 QWORD PTR tv253[ebp]

; 143  : 		pGrp->SetActionAni( iAniID, 100.0f, 100.0f, 1.0f, 1.0f/fTimeRate, 0.0f, 0.0f, true );

  0011b	0f 57 c0	 xorps	 xmm0, xmm0
  0011e	8b 4d 0c	 mov	 ecx, DWORD PTR _pGrp$[ebp]
  00121	6a 01		 push	 1
  00123	6a 01		 push	 1
  00125	83 ec 18	 sub	 esp, 24			; 00000018H
  00128	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  0012e	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00134	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0013c	d9 5d 08	 fstp	 DWORD PTR _fTimeRate$548542[ebp]
  0013f	d9 45 08	 fld	 DWORD PTR _fTimeRate$548542[ebp]
  00142	d9 e8		 fld1
  00144	de f1		 fdivrp	 ST(1), ST(0)
  00146	d9 5d 08	 fstp	 DWORD PTR tv269[ebp]
  00149	d9 45 08	 fld	 DWORD PTR tv269[ebp]
  0014c	d9 5c 24 0c	 fstp	 DWORD PTR [esp+12]
  00150	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00156	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0015e	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00164	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00169	57		 push	 edi
  0016a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetActionAni@ioEntityGroup@@QAE_NHMMMMMM_N0@Z
$LN1@SetNormalA:

; 144  : 	}
; 145  : }

  00170	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00174	8d 4d dc	 lea	 ecx, DWORD PTR _szPreAni$[ebp]
  00177	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0017d	e8 00 00 00 00	 call	 __EH_epilog3
  00182	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetNormalAttack@ioBullFightItem@@UAEXPAVioBaseChar@@H@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _szPreAni$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?SetNormalAttack@ioBullFightItem@@UAEXPAVioBaseChar@@H@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetNormalAttack@ioBullFightItem@@UAEXPAVioBaseChar@@H@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetNormalAttack@ioBullFightItem@@UAEXPAVioBaseChar@@H@Z ENDP ; ioBullFightItem::SetNormalAttack
PUBLIC	?SetUseExtraGauge@ioBullFightItem@@UAEXM@Z	; ioBullFightItem::SetUseExtraGauge
; Function compile flags: /Ogsp
;	COMDAT ?SetUseExtraGauge@ioBullFightItem@@UAEXM@Z
_TEXT	SEGMENT
_value$553812 = -4					; size = 4
_value$553825 = 8					; size = 4
_value$553821 = 8					; size = 4
_value$553817 = 8					; size = 4
_fAmt$ = 8						; size = 4
?SetUseExtraGauge@ioBullFightItem@@UAEXM@Z PROC		; ioBullFightItem::SetUseExtraGauge, COMDAT
; _this$ = ecx

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 288  : 	m_fCurExtraGauge -= fAmt;

  00005	8d b1 dc 16 00
	00		 lea	 esi, DWORD PTR [ecx+5852]
  0000b	8d 45 fc	 lea	 eax, DWORD PTR _value$553812[ebp]
  0000e	50		 push	 eax
  0000f	8b ce		 mov	 ecx, esi
  00011	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00016	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$553812[ebp]
  0001b	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fAmt$[ebp]
  00020	0f 5a c0	 cvtps2pd xmm0, xmm0
  00023	0f 5a c9	 cvtps2pd xmm1, xmm1
  00026	8d 45 fc	 lea	 eax, DWORD PTR _value$553812[ebp]
  00029	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0002d	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00031	50		 push	 eax
  00032	8b ce		 mov	 ecx, esi
  00034	f3 0f 11 45 fc	 movss	 DWORD PTR _value$553812[ebp], xmm0
  00039	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 289  : 	m_fCurExtraGauge = max( 0.0f, m_fCurExtraGauge );

  0003e	8d 45 08	 lea	 eax, DWORD PTR _value$553817[ebp]
  00041	50		 push	 eax
  00042	8b ce		 mov	 ecx, esi
  00044	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00049	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _value$553817[ebp]
  0004e	0f 57 c9	 xorps	 xmm1, xmm1
  00051	0f 5a c0	 cvtps2pd xmm0, xmm0
  00054	66 0f 2f c8	 comisd	 xmm1, xmm0
  00058	76 05		 jbe	 SHORT $LN3@SetUseExtr
  0005a	0f 57 c0	 xorps	 xmm0, xmm0
  0005d	eb 10		 jmp	 SHORT $LN4@SetUseExtr
$LN3@SetUseExtr:
  0005f	8d 45 08	 lea	 eax, DWORD PTR _value$553821[ebp]
  00062	50		 push	 eax
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  0006a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _value$553821[ebp]
$LN4@SetUseExtr:
  0006f	8d 45 08	 lea	 eax, DWORD PTR _value$553825[ebp]
  00072	50		 push	 eax
  00073	8b ce		 mov	 ecx, esi
  00075	f3 0f 11 45 08	 movss	 DWORD PTR _value$553825[ebp], xmm0
  0007a	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool
  0007f	5e		 pop	 esi

; 290  : }

  00080	c9		 leave
  00081	c2 04 00	 ret	 4
?SetUseExtraGauge@ioBullFightItem@@UAEXM@Z ENDP		; ioBullFightItem::SetUseExtraGauge
_TEXT	ENDS
PUBLIC	?OnEndExtendAttack@ioBullFightItem@@UAEXPAVioBaseChar@@_N@Z ; ioBullFightItem::OnEndExtendAttack
; Function compile flags: /Ogsp
;	COMDAT ?OnEndExtendAttack@ioBullFightItem@@UAEXPAVioBaseChar@@_N@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_bReleaseItem$ = 12					; size = 1
?OnEndExtendAttack@ioBullFightItem@@UAEXPAVioBaseChar@@_N@Z PROC ; ioBullFightItem::OnEndExtendAttack, COMDAT
; _this$ = ecx

; 449  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 450  : 	if ( !pOwner )

  00003	83 7d 08 00	 cmp	 DWORD PTR _pOwner$[ebp], 0
  00007	74 08		 je	 SHORT $LN2@OnEndExten

; 451  : 		return;
; 452  : 
; 453  : 	ExtendRemoveBuff( pOwner );

  00009	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0000c	e8 00 00 00 00	 call	 ?ExtendRemoveBuff@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ; ioBullFightItem::ExtendRemoveBuff
$LN2@OnEndExten:

; 454  : }

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?OnEndExtendAttack@ioBullFightItem@@UAEXPAVioBaseChar@@_N@Z ENDP ; ioBullFightItem::OnEndExtendAttack
_TEXT	ENDS
PUBLIC	?GetMaxBullet@ioBullFightItem@@UAEHXZ		; ioBullFightItem::GetMaxBullet
; Function compile flags: /Ogsp
;	COMDAT ?GetMaxBullet@ioBullFightItem@@UAEHXZ
_TEXT	SEGMENT
_value$553836 = -4					; size = 4
?GetMaxBullet@ioBullFightItem@@UAEHXZ PROC		; ioBullFightItem::GetMaxBullet, COMDAT
; _this$ = ecx

; 467  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 468  : 	return (int)m_fMaxExtraGauge;

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$553836[ebp]
  00007	50		 push	 eax
  00008	81 c1 ac 16 00
	00		 add	 ecx, 5804		; 000016acH
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00013	f3 0f 2c 45 fc	 cvttss2si eax, DWORD PTR _value$553836[ebp]

; 469  : }

  00018	c9		 leave
  00019	c3		 ret	 0
?GetMaxBullet@ioBullFightItem@@UAEHXZ ENDP		; ioBullFightItem::GetMaxBullet
_TEXT	ENDS
PUBLIC	?GetCurBullet@ioBullFightItem@@UAEHXZ		; ioBullFightItem::GetCurBullet
; Function compile flags: /Ogsp
;	COMDAT ?GetCurBullet@ioBullFightItem@@UAEHXZ
_TEXT	SEGMENT
_fCurCoolTime$ = -12					; size = 4
_value$553864 = -8					; size = 4
_value$553860 = -8					; size = 4
_value$553856 = -8					; size = 4
_value$553852 = -8					; size = 4
_value$553848 = -4					; size = 4
?GetCurBullet@ioBullFightItem@@UAEHXZ PROC		; ioBullFightItem::GetCurBullet, COMDAT
; _this$ = ecx

; 477  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 478  : 	float fCurCoolTime = m_fCurExtraGauge;

  00009	8d 45 fc	 lea	 eax, DWORD PTR _value$553848[ebp]
  0000c	50		 push	 eax
  0000d	8d 8e dc 16 00
	00		 lea	 ecx, DWORD PTR [esi+5852]
  00013	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00018	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$553848[ebp]

; 479  : 	fCurCoolTime = max( 0, min( fCurCoolTime, m_fMaxExtraGauge ) );

  0001d	8d 45 f8	 lea	 eax, DWORD PTR _value$553852[ebp]
  00020	81 c6 ac 16 00
	00		 add	 esi, 5804		; 000016acH
  00026	50		 push	 eax
  00027	8b ce		 mov	 ecx, esi
  00029	f3 0f 11 45 f4	 movss	 DWORD PTR _fCurCoolTime$[ebp], xmm0
  0002e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00033	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$553848[ebp]
  00038	f3 0f 10 55 f8	 movss	 xmm2, DWORD PTR _value$553852[ebp]
  0003d	0f 57 c9	 xorps	 xmm1, xmm1
  00040	0f 5a c8	 cvtps2pd xmm1, xmm0
  00043	0f 5a d2	 cvtps2pd xmm2, xmm2
  00046	66 0f 2f d1	 comisd	 xmm2, xmm1
  0004a	77 10		 ja	 SHORT $LN4@GetCurBull
  0004c	8d 45 f8	 lea	 eax, DWORD PTR _value$553856[ebp]
  0004f	50		 push	 eax
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00057	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _value$553856[ebp]
$LN4@GetCurBull:
  0005c	0f 57 c9	 xorps	 xmm1, xmm1
  0005f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00062	66 0f 2f c8	 comisd	 xmm1, xmm0
  00066	76 05		 jbe	 SHORT $LN7@GetCurBull
  00068	0f 57 c0	 xorps	 xmm0, xmm0
  0006b	eb 38		 jmp	 SHORT $LN6@GetCurBull
$LN7@GetCurBull:
  0006d	8d 45 f8	 lea	 eax, DWORD PTR _value$553860[ebp]
  00070	50		 push	 eax
  00071	8b ce		 mov	 ecx, esi
  00073	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00078	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$553848[ebp]
  0007d	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _value$553860[ebp]
  00082	0f 5a c0	 cvtps2pd xmm0, xmm0
  00085	0f 5a c9	 cvtps2pd xmm1, xmm1
  00088	66 0f 2f c8	 comisd	 xmm1, xmm0
  0008c	77 12		 ja	 SHORT $LN19@GetCurBull
  0008e	8d 45 f8	 lea	 eax, DWORD PTR _value$553864[ebp]
  00091	50		 push	 eax
  00092	8b ce		 mov	 ecx, esi
  00094	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00099	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _value$553864[ebp]
  0009e	eb 05		 jmp	 SHORT $LN6@GetCurBull
$LN19@GetCurBull:
  000a0	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _fCurCoolTime$[ebp]
$LN6@GetCurBull:

; 480  : 
; 481  : 	return (int)fCurCoolTime;

  000a5	f3 0f 2c c0	 cvttss2si eax, xmm0
  000a9	5e		 pop	 esi

; 482  : }

  000aa	c9		 leave
  000ab	c3		 ret	 0
?GetCurBullet@ioBullFightItem@@UAEHXZ ENDP		; ioBullFightItem::GetCurBullet
_TEXT	ENDS
PUBLIC	?SetCurBullet@ioBullFightItem@@UAEXH@Z		; ioBullFightItem::SetCurBullet
; Function compile flags: /Ogsp
;	COMDAT ?SetCurBullet@ioBullFightItem@@UAEXH@Z
_TEXT	SEGMENT
_value$553885 = -4					; size = 4
_value$553881 = -4					; size = 4
_value$553877 = -4					; size = 4
_value$553893 = 8					; size = 4
_value$553889 = 8					; size = 4
_fCurBullet$ = 8					; size = 4
_iCurBullet$ = 8					; size = 4
?SetCurBullet@ioBullFightItem@@UAEXH@Z PROC		; ioBullFightItem::SetCurBullet, COMDAT
; _this$ = ecx

; 485  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	if( iCurBullet < 0 )

  00004	83 7d 08 00	 cmp	 DWORD PTR _iCurBullet$[ebp], 0
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	0f 8c a6 00 00
	00		 jl	 $LN18@SetCurBull

; 487  : 		return;
; 488  : 
; 489  : 	float fCurBullet = iCurBullet;

  00011	66 0f 6e 45 08	 movd	 xmm0, DWORD PTR _iCurBullet$[ebp]
  00016	56		 push	 esi

; 490  : 	fCurBullet = max( 0, min( fCurBullet, m_fMaxExtraGauge ) );

  00017	8d 45 fc	 lea	 eax, DWORD PTR _value$553877[ebp]
  0001a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0001d	50		 push	 eax
  0001e	8d 8f ac 16 00
	00		 lea	 ecx, DWORD PTR [edi+5804]
  00024	f3 0f 11 45 08	 movss	 DWORD PTR _fCurBullet$[ebp], xmm0
  00029	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  0002e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fCurBullet$[ebp]
  00033	f3 0f 10 55 fc	 movss	 xmm2, DWORD PTR _value$553877[ebp]
  00038	0f 5a c8	 cvtps2pd xmm1, xmm0
  0003b	0f 5a d2	 cvtps2pd xmm2, xmm2
  0003e	66 0f 2f d1	 comisd	 xmm2, xmm1
  00042	77 14		 ja	 SHORT $LN5@SetCurBull
  00044	8d 45 fc	 lea	 eax, DWORD PTR _value$553881[ebp]
  00047	50		 push	 eax
  00048	8d 8f ac 16 00
	00		 lea	 ecx, DWORD PTR [edi+5804]
  0004e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00053	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$553881[ebp]
$LN5@SetCurBull:
  00058	0f 57 c9	 xorps	 xmm1, xmm1
  0005b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0005e	66 0f 2f c8	 comisd	 xmm1, xmm0
  00062	76 05		 jbe	 SHORT $LN8@SetCurBull
  00064	0f 57 c0	 xorps	 xmm0, xmm0
  00067	eb 39		 jmp	 SHORT $LN7@SetCurBull
$LN8@SetCurBull:
  00069	8d 45 fc	 lea	 eax, DWORD PTR _value$553885[ebp]
  0006c	50		 push	 eax
  0006d	8d 8f ac 16 00
	00		 lea	 ecx, DWORD PTR [edi+5804]
  00073	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00078	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fCurBullet$[ebp]
  0007d	f3 0f 10 55 fc	 movss	 xmm2, DWORD PTR _value$553885[ebp]
  00082	0f 5a c8	 cvtps2pd xmm1, xmm0
  00085	0f 5a d2	 cvtps2pd xmm2, xmm2
  00088	66 0f 2f d1	 comisd	 xmm2, xmm1
  0008c	77 14		 ja	 SHORT $LN7@SetCurBull
  0008e	8d 45 08	 lea	 eax, DWORD PTR _value$553889[ebp]
  00091	50		 push	 eax
  00092	8d 8f ac 16 00
	00		 lea	 ecx, DWORD PTR [edi+5804]
  00098	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  0009d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _value$553889[ebp]
$LN7@SetCurBull:

; 491  : 
; 492  : 	m_fCurExtraGauge = fCurBullet;

  000a2	8d 45 08	 lea	 eax, DWORD PTR _value$553893[ebp]
  000a5	50		 push	 eax
  000a6	8d 8f dc 16 00
	00		 lea	 ecx, DWORD PTR [edi+5852]
  000ac	f3 0f 11 45 08	 movss	 DWORD PTR _value$553893[ebp], xmm0
  000b1	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool
  000b6	5e		 pop	 esi
$LN18@SetCurBull:
  000b7	5f		 pop	 edi

; 493  : }

  000b8	c9		 leave
  000b9	c2 04 00	 ret	 4
?SetCurBullet@ioBullFightItem@@UAEXH@Z ENDP		; ioBullFightItem::SetCurBullet
_TEXT	ENDS
PUBLIC	?Init@ioBullFightItem@@IAEXXZ			; ioBullFightItem::Init
; Function compile flags: /Ogsp
;	COMDAT ?Init@ioBullFightItem@@IAEXXZ
_TEXT	SEGMENT
_value$553899 = -4					; size = 4
?Init@ioBullFightItem@@IAEXXZ PROC			; ioBullFightItem::Init, COMDAT
; _this$ = ecx

; 498  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 499  : 	m_ChargeState				= CS_NONE;
; 500  : 
; 501  : 	m_dwAttackStartTime			= 0;
; 502  : 	m_nCurCombo					= 0;
; 503  : 	m_iCurAirJump				= 0;
; 504  : 
; 505  : 	m_fAirJumpPowerRate	= 0.0f;

  00004	0f 57 c0	 xorps	 xmm0, xmm0
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	33 db		 xor	 ebx, ebx

; 506  : 	m_fCurExtraGauge = 0.0f;

  0000d	8d 45 fc	 lea	 eax, DWORD PTR _value$553899[ebp]
  00010	50		 push	 eax
  00011	8d 8e dc 16 00
	00		 lea	 ecx, DWORD PTR [esi+5852]
  00017	89 9e 48 1a 00
	00		 mov	 DWORD PTR [esi+6728], ebx
  0001d	89 9e 4c 1a 00
	00		 mov	 DWORD PTR [esi+6732], ebx
  00023	89 9e 50 1a 00
	00		 mov	 DWORD PTR [esi+6736], ebx
  00029	89 9e 58 0f 00
	00		 mov	 DWORD PTR [esi+3928], ebx
  0002f	f3 0f 11 86 48
	0f 00 00	 movss	 DWORD PTR [esi+3912], xmm0
  00037	f3 0f 11 45 fc	 movss	 DWORD PTR _value$553899[ebp], xmm0
  0003c	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 507  : 	m_dwMotionEndTime = 0;

  00041	89 9e 54 1a 00
	00		 mov	 DWORD PTR [esi+6740], ebx

; 508  : 	m_dwKeyReserveTime = 0;

  00047	89 9e f8 0e 00
	00		 mov	 DWORD PTR [esi+3832], ebx

; 509  : 
; 510  : 	m_bSetDelay	= false;

  0004d	88 9e 58 1a 00
	00		 mov	 BYTE PTR [esi+6744], bl

; 511  : 	m_dwExtendMoveStartTime = 0;

  00053	89 9e 5c 1a 00
	00		 mov	 DWORD PTR [esi+6748], ebx

; 512  : 
; 513  : 	m_bAttackKeyReserved = false;

  00059	66 89 9e 60 1a
	00 00		 mov	 WORD PTR [esi+6752], bx

; 514  : 	m_bDefenseKeyReserved = false;
; 515  : 	m_bJumpKeyReserved = false;

  00060	88 9e 62 1a 00
	00		 mov	 BYTE PTR [esi+6754], bl
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx

; 516  : }

  00068	c9		 leave
  00069	c3		 ret	 0
?Init@ioBullFightItem@@IAEXXZ ENDP			; ioBullFightItem::Init
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ChangeToChargeAttack@ioBullFightItem@@QAEXPAVioBaseChar@@@Z ; ioBullFightItem::ChangeToChargeAttack
EXTRN	?FillAutoTargetInfo@ioBaseChar@@QAEXAAVSP2Packet@@@Z:PROC ; ioBaseChar::FillAutoTargetInfo
EXTRN	?SetAutoTargetTrackingEndTime@ioBaseChar@@QAEXK@Z:PROC ; ioBaseChar::SetAutoTargetTrackingEndTime
EXTRN	?SetAutoTarget@ioBaseChar@@QAEXW4AutoTargetType@@@Z:PROC ; ioBaseChar::SetAutoTarget
EXTRN	?RefreshFireTimeList@ioBaseChar@@QAEXHABV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@W4FireTimeType@@MK_N@Z:PROC ; ioBaseChar::RefreshFireTimeList
EXTRN	?SetReservedSliding@ioBaseChar@@QAEXABV?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@HMKM_N@Z:PROC ; ioBaseChar::SetReservedSliding
EXTRN	?ClearReservedSliding@ioBaseChar@@QAEXXZ:PROC	; ioBaseChar::ClearReservedSliding
EXTRN	__ftol2:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
xdata$x	SEGMENT
__unwindtable$?ChangeToChargeAttack@ioBullFightItem@@QAEXPAVioBaseChar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ChangeToChargeAttack@ioBullFightItem@@QAEXPAVioBaseChar@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ChangeToChargeAttack@ioBullFightItem@@QAEXPAVioBaseChar@@@Z$0
__ehfuncinfo$?ChangeToChargeAttack@ioBullFightItem@@QAEXPAVioBaseChar@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ChangeToChargeAttack@ioBullFightItem@@QAEXPAVioBaseChar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobullfightitem.cpp
xdata$x	ENDS
;	COMDAT ?ChangeToChargeAttack@ioBullFightItem@@QAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
$T554026 = -32860					; size = 16
tv1157 = -32844						; size = 4
tv972 = -32844						; size = 4
_fTimeRate$ = -32840					; size = 4
_iAniID$ = -32836					; size = 4
$T554025 = -32832					; size = 4
_pGrp$ = -32832						; size = 4
tv1132 = -32828						; size = 4
tv980 = -32828						; size = 4
_dwPreDelay$ = -32828					; size = 4
_kPacket$548946 = -32824				; size = 32792
_szEncEventType$553926 = -32				; size = 11
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
?ChangeToChargeAttack@ioBullFightItem@@QAEXPAVioBaseChar@@@Z PROC ; ioBullFightItem::ChangeToChargeAttack, COMDAT
; _this$ = ecx

; 572  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ChangeToChargeAttack@ioBullFightItem@@QAEXPAVioBaseChar@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 50 80 00 00	 mov	 eax, 32848		; 00008050H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]

; 573  : 	if( !pOwner ) 

  00035	33 db		 xor	 ebx, ebx
  00037	8b f1		 mov	 esi, ecx
  00039	3b fb		 cmp	 edi, ebx
  0003b	0f 84 3a 03 00
	00		 je	 $LN1@ChangeToCh

; 574  : 		return;
; 575  : 	
; 576  : 	ioEntityGroup *pGrp = pOwner->GetGroup();

  00041	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 577  : 	int iAniID = pGrp->GetAnimationIdx( m_ChargeAttackAttribute.m_AttackAnimation );

  00044	8d 86 68 19 00
	00		 lea	 eax, DWORD PTR [esi+6504]
  0004a	50		 push	 eax
  0004b	89 8d c0 7f ff
	ff		 mov	 DWORD PTR _pGrp$[ebp], ecx
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z
  00057	89 85 bc 7f ff
	ff		 mov	 DWORD PTR _iAniID$[ebp], eax

; 578  : 	if ( iAniID == -1 )

  0005d	83 f8 ff	 cmp	 eax, -1
  00060	0f 84 15 03 00
	00		 je	 $LN1@ChangeToCh

; 579  : 		return;
; 580  : 
; 581  : 	float fTimeRate  = m_ChargeAttackAttribute.m_fAttackAniRate;

  00066	f3 0f 10 86 78
	19 00 00	 movss	 xmm0, DWORD PTR [esi+6520]

; 582  : 	DWORD dwPreDelay = m_ChargeAttackAttribute.m_dwPreDelay;

  0006e	8b 86 b0 19 00
	00		 mov	 eax, DWORD PTR [esi+6576]

; 583  : 	
; 584  : 	pGrp->ClearAllLoopAni( 100.0f, true );

  00074	6a 01		 push	 1
  00076	51		 push	 ecx
  00077	8b 8d c0 7f ff
	ff		 mov	 ecx, DWORD PTR _pGrp$[ebp]
  0007d	f3 0f 11 85 b8
	7f ff ff	 movss	 DWORD PTR _fTimeRate$[ebp], xmm0
  00085	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0008d	89 85 c4 7f ff
	ff		 mov	 DWORD PTR _dwPreDelay$[ebp], eax
  00093	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 585  : 	pGrp->ClearAllActionAni( 100.0f, true );

  0009e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  000a6	6a 01		 push	 1
  000a8	51		 push	 ecx
  000a9	8b 8d c0 7f ff
	ff		 mov	 ecx, DWORD PTR _pGrp$[ebp]
  000af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 586  : 	pGrp->SetActionAni( iAniID, 100.0f, 100.0f, 1.0f, 1.0f/fTimeRate, 0.0f, dwPreDelay );	

  000ba	db 85 c4 7f ff
	ff		 fild	 DWORD PTR _dwPreDelay$[ebp]
  000c0	8b 85 c4 7f ff
	ff		 mov	 eax, DWORD PTR _dwPreDelay$[ebp]
  000c6	85 c0		 test	 eax, eax
  000c8	79 06		 jns	 SHORT $LN123@ChangeToCh
  000ca	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN123@ChangeToCh:
  000d0	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000d8	d9 9d b4 7f ff
	ff		 fstp	 DWORD PTR tv972[ebp]
  000de	f3 0f 10 85 b4
	7f ff ff	 movss	 xmm0, DWORD PTR tv972[ebp]
  000e6	8b 8d c0 7f ff
	ff		 mov	 ecx, DWORD PTR _pGrp$[ebp]
  000ec	6a 01		 push	 1
  000ee	53		 push	 ebx
  000ef	83 ec 18	 sub	 esp, 24			; 00000018H
  000f2	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  000f8	0f 57 c0	 xorps	 xmm0, xmm0
  000fb	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00101	f3 0f 10 85 b8
	7f ff ff	 movss	 xmm0, DWORD PTR _fTimeRate$[ebp]
  00109	0f 5a c0	 cvtps2pd xmm0, xmm0
  0010c	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00110	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  00114	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0011a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00122	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00128	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00130	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00136	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013b	ff b5 bc 7f ff
	ff		 push	 DWORD PTR _iAniID$[ebp]
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetActionAni@ioEntityGroup@@QAE_NHMMMMMM_N0@Z

; 587  : 
; 588  : 	pOwner->ClearReservedSliding();

  00147	8b cf		 mov	 ecx, edi
  00149	e8 00 00 00 00	 call	 ?ClearReservedSliding@ioBaseChar@@QAEXXZ ; ioBaseChar::ClearReservedSliding

; 589  : 	pOwner->SetReservedSliding( m_ChargeAttackAttribute.m_vForceInfoList, iAniID, fTimeRate, dwPreDelay );

  0014e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00156	6a 01		 push	 1
  00158	51		 push	 ecx
  00159	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015e	ff b5 c4 7f ff
	ff		 push	 DWORD PTR _dwPreDelay$[ebp]
  00164	f3 0f 10 85 b8
	7f ff ff	 movss	 xmm0, DWORD PTR _fTimeRate$[ebp]
  0016c	51		 push	 ecx
  0016d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00172	ff b5 bc 7f ff
	ff		 push	 DWORD PTR _iAniID$[ebp]
  00178	8d 86 a0 19 00
	00		 lea	 eax, DWORD PTR [esi+6560]
  0017e	50		 push	 eax
  0017f	8b cf		 mov	 ecx, edi
  00181	e8 00 00 00 00	 call	 ?SetReservedSliding@ioBaseChar@@QAEXABV?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@HMKM_N@Z ; ioBaseChar::SetReservedSliding

; 590  : 
; 591  : 	pOwner->RefreshFireTimeList( iAniID, m_ChargeAttackAttribute.m_vWeaponInfoList, FTT_NORMAL_ATTACK, fTimeRate, dwPreDelay );

  00186	f3 0f 10 85 b8
	7f ff ff	 movss	 xmm0, DWORD PTR _fTimeRate$[ebp]
  0018e	53		 push	 ebx
  0018f	ff b5 c4 7f ff
	ff		 push	 DWORD PTR _dwPreDelay$[ebp]
  00195	8d 86 90 19 00
	00		 lea	 eax, DWORD PTR [esi+6544]
  0019b	51		 push	 ecx
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	53		 push	 ebx
  001a2	50		 push	 eax
  001a3	ff b5 bc 7f ff
	ff		 push	 DWORD PTR _iAniID$[ebp]
  001a9	8b cf		 mov	 ecx, edi
  001ab	e8 00 00 00 00	 call	 ?RefreshFireTimeList@ioBaseChar@@QAEXHABV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@W4FireTimeType@@MK_N@Z ; ioBaseChar::RefreshFireTimeList

; 592  : 
; 593  : 	DWORD dwCurTime = FRAMEGETTIME();

  001b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  001b6	8b c8		 mov	 ecx, eax
  001b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 594  : 	m_dwMotionEndTime = dwCurTime + pGrp->GetAnimationFullTime( iAniID ) * fTimeRate;

  001be	89 85 c4 7f ff
	ff		 mov	 DWORD PTR tv1132[ebp], eax
  001c4	db 85 c4 7f ff
	ff		 fild	 DWORD PTR tv1132[ebp]
  001ca	85 c0		 test	 eax, eax
  001cc	79 06		 jns	 SHORT $LN124@ChangeToCh
  001ce	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN124@ChangeToCh:
  001d4	ff b5 bc 7f ff
	ff		 push	 DWORD PTR _iAniID$[ebp]
  001da	d9 9d c4 7f ff
	ff		 fstp	 DWORD PTR tv980[ebp]
  001e0	8b 8d c0 7f ff
	ff		 mov	 ecx, DWORD PTR _pGrp$[ebp]
  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationFullTime@ioEntityGroup@@QAEMH@Z
  001ec	d8 8d b8 7f ff
	ff		 fmul	 DWORD PTR _fTimeRate$[ebp]
  001f2	d8 85 c4 7f ff
	ff		 fadd	 DWORD PTR tv980[ebp]
  001f8	e8 00 00 00 00	 call	 __ftol2

; 595  : 
; 596  : 	m_ChargeState = CS_CHARGE_ATTACK;
; 597  : 
; 598  : 	SetUseExtraGauge( m_fNeedGauge );

  001fd	f3 0f 10 86 54
	19 00 00	 movss	 xmm0, DWORD PTR [esi+6484]
  00205	51		 push	 ecx
  00206	89 86 54 1a 00
	00		 mov	 DWORD PTR [esi+6740], eax
  0020c	8b 06		 mov	 eax, DWORD PTR [esi]
  0020e	8b ce		 mov	 ecx, esi
  00210	c7 86 48 1a 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+6728], 3
  0021a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021f	ff 90 8c 02 00
	00		 call	 DWORD PTR [eax+652]

; 599  : 	pOwner->SetAttackMoveEnable( false );

  00225	53		 push	 ebx
  00226	8b cf		 mov	 ecx, edi
  00228	e8 00 00 00 00	 call	 ?SetAttackMoveEnable@ioBaseChar@@QAEX_N@Z ; ioBaseChar::SetAttackMoveEnable

; 600  : 
; 601  : 	pOwner->SetAutoTarget( ATT_NORMAL );

  0022d	53		 push	 ebx
  0022e	8b cf		 mov	 ecx, edi
  00230	e8 00 00 00 00	 call	 ?SetAutoTarget@ioBaseChar@@QAEXW4AutoTargetType@@@Z ; ioBaseChar::SetAutoTarget
  00235	6a 02		 push	 2

; 602  : 
; 603  : 	DWORD dwTrackingTime = dwCurTime + pGrp->GetAnimationEventTime_e( iAniID, "tracking_e" ) * fTimeRate + dwPreDelay;

  00237	c7 45 e0 99 9e
	8a 89		 mov	 DWORD PTR _szEncEventType$553926[ebp], -1987404135 ; 898a9e99H
  0023e	c7 45 e4 86 85
	85 8d		 mov	 DWORD PTR _szEncEventType$553926[ebp+4], -1920629370 ; 8d858586H
  00245	66 c7 45 e8 b2
	89		 mov	 WORD PTR _szEncEventType$553926[ebp+8], 35250 ; 000089b2H
  0024b	8d 45 e0	 lea	 eax, DWORD PTR _szEncEventType$553926[ebp]
  0024e	88 5d ea	 mov	 BYTE PTR _szEncEventType$553926[ebp+10], bl
  00251	59		 pop	 ecx
$LL113@ChangeToCh:
  00252	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00258	83 c0 04	 add	 eax, 4
  0025b	49		 dec	 ecx
  0025c	75 f4		 jne	 SHORT $LL113@ChangeToCh
  0025e	6a 08		 push	 8
  00260	58		 pop	 eax
$LL110@ChangeToCh:
  00261	8b c8		 mov	 ecx, eax
  00263	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00269	79 05		 jns	 SHORT $LN125@ChangeToCh
  0026b	49		 dec	 ecx
  0026c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0026f	41		 inc	 ecx
$LN125@ChangeToCh:
  00270	b2 ed		 mov	 dl, -19			; ffffffedH
  00272	2a d1		 sub	 dl, cl
  00274	30 54 05 e0	 xor	 BYTE PTR _szEncEventType$553926[ebp+eax], dl
  00278	40		 inc	 eax
  00279	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0027c	7c e3		 jl	 SHORT $LL110@ChangeToCh
  0027e	8d 45 e0	 lea	 eax, DWORD PTR _szEncEventType$553926[ebp]
  00281	50		 push	 eax
  00282	8d 8d a4 7f ff
	ff		 lea	 ecx, DWORD PTR $T554026[ebp]
  00288	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0028e	8b 8d c0 7f ff
	ff		 mov	 ecx, DWORD PTR _pGrp$[ebp]
  00294	8d 85 a4 7f ff
	ff		 lea	 eax, DWORD PTR $T554026[ebp]
  0029a	50		 push	 eax
  0029b	ff b5 bc 7f ff
	ff		 push	 DWORD PTR _iAniID$[ebp]
  002a1	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  002a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventTime@ioEntityGroup@@QAEMHABVioHashString@@@Z
  002aa	d9 9d c0 7f ff
	ff		 fstp	 DWORD PTR $T554025[ebp]
  002b0	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  002b4	8d 8d a4 7f ff
	ff		 lea	 ecx, DWORD PTR $T554026[ebp]
  002ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  002c0	d9 85 c0 7f ff
	ff		 fld	 DWORD PTR $T554025[ebp]
  002c6	d8 8d b8 7f ff
	ff		 fmul	 DWORD PTR _fTimeRate$[ebp]
  002cc	d8 85 c4 7f ff
	ff		 fadd	 DWORD PTR tv980[ebp]
  002d2	d8 85 b4 7f ff
	ff		 fadd	 DWORD PTR tv972[ebp]
  002d8	e8 00 00 00 00	 call	 __ftol2

; 604  : 	pOwner->SetAutoTargetTrackingEndTime( dwTrackingTime );

  002dd	50		 push	 eax
  002de	8b cf		 mov	 ecx, edi
  002e0	e8 00 00 00 00	 call	 ?SetAutoTargetTrackingEndTime@ioBaseChar@@QAEXK@Z ; ioBaseChar::SetAutoTargetTrackingEndTime

; 605  : 
; 606  : 	if( pOwner->IsNeedSendNetwork() )

  002e5	8b 07		 mov	 eax, DWORD PTR [edi]
  002e7	8b cf		 mov	 ecx, edi
  002e9	ff 90 04 01 00
	00		 call	 DWORD PTR [eax+260]
  002ef	84 c0		 test	 al, al
  002f1	0f 84 84 00 00
	00		 je	 $LN1@ChangeToCh

; 607  : 	{
; 608  : 		SP2Packet kPacket( CUPK_ITEM_GAUGE_OK );

  002f7	68 27 41 00 00	 push	 16679			; 00004127H
  002fc	8d 8d c8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548946[ebp]
  00302	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 609  : 		FillItemGaugePacketHeader( pOwner, kPacket );

  00307	8d 85 c8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$548946[ebp]
  0030d	50		 push	 eax
  0030e	57		 push	 edi
  0030f	8b ce		 mov	 ecx, esi
  00311	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00318	e8 00 00 00 00	 call	 ?FillItemGaugePacketHeader@ioAttackableItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z ; ioAttackableItem::FillItemGaugePacketHeader

; 610  : 		kPacket << static_cast<byte>( ST_CHARGE_ATTACK );

  0031d	6a 01		 push	 1
  0031f	8d 8d c8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548946[ebp]
  00325	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@E@Z ; SP2Packet::operator<<

; 611  : 		kPacket << pOwner->GetTargetRot();

  0032a	8d 87 a4 06 00
	00		 lea	 eax, DWORD PTR [edi+1700]
  00330	50		 push	 eax
  00331	8d 8d c8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548946[ebp]
  00337	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXQUATERNION@@@Z ; SP2Packet::operator<<

; 612  : 		kPacket << pOwner->GetWorldPosition();

  0033c	8b 07		 mov	 eax, DWORD PTR [edi]
  0033e	8b cf		 mov	 ecx, edi
  00340	ff 50 70	 call	 DWORD PTR [eax+112]
  00343	50		 push	 eax
  00344	8d 8d c8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548946[ebp]
  0034a	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXVECTOR3@@@Z ; SP2Packet::operator<<

; 613  : 		pOwner->FillAutoTargetInfo( kPacket );

  0034f	8d 85 c8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$548946[ebp]
  00355	50		 push	 eax
  00356	8b cf		 mov	 ecx, edi
  00358	e8 00 00 00 00	 call	 ?FillAutoTargetInfo@ioBaseChar@@QAEXAAVSP2Packet@@@Z ; ioBaseChar::FillAutoTargetInfo

; 614  : 		P2PNetwork::SendToAllPlayingUser( kPacket );

  0035d	8d 85 c8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$548946[ebp]
  00363	53		 push	 ebx
  00364	50		 push	 eax
  00365	e8 00 00 00 00	 call	 ?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z ; P2PNetwork::SendToAllPlayingUser

; 615  : 	}

  0036a	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0036e	59		 pop	 ecx
  0036f	59		 pop	 ecx
  00370	8d 8d c8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548946[ebp]
  00376	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN1@ChangeToCh:

; 616  : }

  0037b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0037e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00385	59		 pop	 ecx
  00386	5f		 pop	 edi
  00387	5e		 pop	 esi
  00388	5b		 pop	 ebx
  00389	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0038c	33 cd		 xor	 ecx, ebp
  0038e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00393	c9		 leave
  00394	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ChangeToChargeAttack@ioBullFightItem@@QAEXPAVioBaseChar@@@Z$1:
  00000	8d 8d a4 7f ff
	ff		 lea	 ecx, DWORD PTR $T554026[ebp]
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?ChangeToChargeAttack@ioBullFightItem@@QAEXPAVioBaseChar@@@Z$0:
  0000c	8d 8d c8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548946[ebp]
  00012	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?ChangeToChargeAttack@ioBullFightItem@@QAEXPAVioBaseChar@@@Z:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 8a a0 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32864]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ChangeToChargeAttack@ioBullFightItem@@QAEXPAVioBaseChar@@@Z
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ChangeToChargeAttack@ioBullFightItem@@QAEXPAVioBaseChar@@@Z ENDP ; ioBullFightItem::ChangeToChargeAttack
PUBLIC	?ChangeToExtendMove@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ; ioBullFightItem::ChangeToExtendMove
EXTRN	?ChangeDirectionExplicitIfDirChanged@ioBaseChar@@QAE_N_N@Z:PROC ; ioBaseChar::ChangeDirectionExplicitIfDirChanged
; Function compile flags: /Ogsp
;	COMDAT ?ChangeToExtendMove@ioBullFightItem@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?ChangeToExtendMove@ioBullFightItem@@IAEXPAVioBaseChar@@@Z PROC ; ioBullFightItem::ChangeToExtendMove, COMDAT
; _this$ = ecx

; 619  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 620  : 	if( !pOwner ) 

  00005	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	74 59		 je	 SHORT $LN2@ChangeToEx

; 621  : 		return;
; 622  : 	
; 623  : 	m_dwExtendMoveStartTime = FRAMEGETTIME();

  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00014	8b c8		 mov	 ecx, eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 624  : 	pOwner->SetAttackMoveEnable( true );

  0001c	6a 01		 push	 1
  0001e	8b cf		 mov	 ecx, edi
  00020	89 86 5c 1a 00
	00		 mov	 DWORD PTR [esi+6748], eax
  00026	e8 00 00 00 00	 call	 ?SetAttackMoveEnable@ioBaseChar@@QAEX_N@Z ; ioBaseChar::SetAttackMoveEnable

; 625  : 	pOwner->ChangeDirectionExplicitIfDirChanged( true );

  0002b	6a 01		 push	 1
  0002d	8b cf		 mov	 ecx, edi
  0002f	e8 00 00 00 00	 call	 ?ChangeDirectionExplicitIfDirChanged@ioBaseChar@@QAE_N_N@Z ; ioBaseChar::ChangeDirectionExplicitIfDirChanged

; 626  : 
; 627  : 	m_ChargeState = CS_EXTEND_MOVE;
; 628  : 	m_bSetDelay	= false;
; 629  : 
; 630  : 	m_bAttackKeyReserved = false;
; 631  : 	m_bDefenseKeyReserved = false;
; 632  : 	m_bJumpKeyReserved = false;
; 633  : 	
; 634  : 	CheckExtendMoveAniState( pOwner, true );

  00034	6a 01		 push	 1
  00036	57		 push	 edi
  00037	8b ce		 mov	 ecx, esi
  00039	c7 86 48 1a 00
	00 04 00 00 00	 mov	 DWORD PTR [esi+6728], 4
  00043	c6 86 58 1a 00
	00 00		 mov	 BYTE PTR [esi+6744], 0
  0004a	66 c7 86 60 1a
	00 00 00 00	 mov	 WORD PTR [esi+6752], 0
  00053	c6 86 62 1a 00
	00 00		 mov	 BYTE PTR [esi+6754], 0
  0005a	e8 00 00 00 00	 call	 ?CheckExtendMoveAniState@ioBullFightItem@@IAEXPAVioBaseChar@@_N@Z ; ioBullFightItem::CheckExtendMoveAniState

; 635  : 	ExtendAddBuff( pOwner );

  0005f	57		 push	 edi
  00060	8b ce		 mov	 ecx, esi
  00062	e8 00 00 00 00	 call	 ?ExtendAddBuff@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ; ioBullFightItem::ExtendAddBuff
$LN2@ChangeToEx:
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi

; 636  : }

  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
?ChangeToExtendMove@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ENDP ; ioBullFightItem::ChangeToExtendMove
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ChangeToExtendAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ; ioBullFightItem::ChangeToExtendAttack
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
xdata$x	SEGMENT
__unwindtable$?ChangeToExtendAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ChangeToExtendAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ChangeToExtendAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ChangeToExtendAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z$0
__ehfuncinfo$?ChangeToExtendAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?ChangeToExtendAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobullfightitem.cpp
xdata$x	ENDS
;	COMDAT ?ChangeToExtendAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
$T554314 = -32864					; size = 16
$T554086 = -32864					; size = 16
tv1708 = -32848						; size = 4
tv2063 = -32844						; size = 4
tv2038 = -32844						; size = 4
$T554313 = -32844					; size = 4
$T554085 = -32844					; size = 4
_pGrp$ = -32840						; size = 4
_fTimeRate$ = -32836					; size = 4
_iAniID$ = -32832					; size = 4
tv1716 = -32828						; size = 4
_dwPreDelay$ = -32828					; size = 4
_kPacket$548985 = -32824				; size = 32792
_szEncEventType$554214 = -32				; size = 11
_szEncEventType$554099 = -32				; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
?ChangeToExtendAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z PROC ; ioBullFightItem::ChangeToExtendAttack, COMDAT
; _this$ = ecx

; 673  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ChangeToExtendAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 54 80 00 00	 mov	 eax, 32852		; 00008054H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]

; 674  : 	if( !pOwner ) 

  00035	33 db		 xor	 ebx, ebx
  00037	8b f1		 mov	 esi, ecx
  00039	3b fb		 cmp	 edi, ebx
  0003b	0f 84 d9 03 00
	00		 je	 $LN1@ChangeToEx@2

; 675  : 		return;
; 676  : 
; 677  : 	ioEntityGroup *pGrp = pOwner->GetGroup();

  00041	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 678  : 	int iAniID = pGrp->GetAnimationIdx( m_ExtendAttackAttribute.m_AttackAnimation );

  00044	8d 86 e8 19 00
	00		 lea	 eax, DWORD PTR [esi+6632]
  0004a	50		 push	 eax
  0004b	89 8d b8 7f ff
	ff		 mov	 DWORD PTR _pGrp$[ebp], ecx
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z
  00057	89 85 c0 7f ff
	ff		 mov	 DWORD PTR _iAniID$[ebp], eax

; 679  : 	if ( iAniID == -1 )

  0005d	83 f8 ff	 cmp	 eax, -1
  00060	0f 84 b4 03 00
	00		 je	 $LN1@ChangeToEx@2

; 680  : 		return;
; 681  : 
; 682  : 	float fTimeRate  = m_ExtendAttackAttribute.m_fAttackAniRate;

  00066	f3 0f 10 86 f8
	19 00 00	 movss	 xmm0, DWORD PTR [esi+6648]

; 683  : 	DWORD dwPreDelay = m_ExtendAttackAttribute.m_dwPreDelay;

  0006e	8b 86 30 1a 00
	00		 mov	 eax, DWORD PTR [esi+6704]

; 684  : 
; 685  : 	pGrp->ClearAllLoopAni( 100.0f, true );

  00074	6a 01		 push	 1
  00076	51		 push	 ecx
  00077	8b 8d b8 7f ff
	ff		 mov	 ecx, DWORD PTR _pGrp$[ebp]
  0007d	f3 0f 11 85 bc
	7f ff ff	 movss	 DWORD PTR _fTimeRate$[ebp], xmm0
  00085	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0008d	89 85 c4 7f ff
	ff		 mov	 DWORD PTR _dwPreDelay$[ebp], eax
  00093	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 686  : 	pGrp->ClearAllActionAni( 100.0f, true );

  0009e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  000a6	6a 01		 push	 1
  000a8	51		 push	 ecx
  000a9	8b 8d b8 7f ff
	ff		 mov	 ecx, DWORD PTR _pGrp$[ebp]
  000af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 687  : 	pGrp->SetActionAni( iAniID, 100.0f, 100.0f, 1.0f, 1.0f/fTimeRate, 0.0f, dwPreDelay );	

  000ba	db 85 c4 7f ff
	ff		 fild	 DWORD PTR _dwPreDelay$[ebp]
  000c0	8b 85 c4 7f ff
	ff		 mov	 eax, DWORD PTR _dwPreDelay$[ebp]
  000c6	85 c0		 test	 eax, eax
  000c8	79 06		 jns	 SHORT $LN234@ChangeToEx@2
  000ca	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN234@ChangeToEx@2:
  000d0	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000d8	d9 9d b0 7f ff
	ff		 fstp	 DWORD PTR tv1708[ebp]
  000de	f3 0f 10 85 b0
	7f ff ff	 movss	 xmm0, DWORD PTR tv1708[ebp]
  000e6	8b 8d b8 7f ff
	ff		 mov	 ecx, DWORD PTR _pGrp$[ebp]
  000ec	6a 01		 push	 1
  000ee	53		 push	 ebx
  000ef	83 ec 18	 sub	 esp, 24			; 00000018H
  000f2	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  000f8	0f 57 c0	 xorps	 xmm0, xmm0
  000fb	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00101	f3 0f 10 85 bc
	7f ff ff	 movss	 xmm0, DWORD PTR _fTimeRate$[ebp]
  00109	0f 5a c0	 cvtps2pd xmm0, xmm0
  0010c	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00110	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  00114	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0011a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00122	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00128	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00130	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00136	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013b	ff b5 c0 7f ff
	ff		 push	 DWORD PTR _iAniID$[ebp]
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetActionAni@ioEntityGroup@@QAE_NHMMMMMM_N0@Z

; 688  : 
; 689  : 	pOwner->ClearReservedSliding();

  00147	8b cf		 mov	 ecx, edi
  00149	e8 00 00 00 00	 call	 ?ClearReservedSliding@ioBaseChar@@QAEXXZ ; ioBaseChar::ClearReservedSliding

; 690  : 	pOwner->SetReservedSliding( m_ExtendAttackAttribute.m_vForceInfoList, iAniID, fTimeRate, dwPreDelay );

  0014e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00156	6a 01		 push	 1
  00158	51		 push	 ecx
  00159	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015e	ff b5 c4 7f ff
	ff		 push	 DWORD PTR _dwPreDelay$[ebp]
  00164	f3 0f 10 85 bc
	7f ff ff	 movss	 xmm0, DWORD PTR _fTimeRate$[ebp]
  0016c	51		 push	 ecx
  0016d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00172	ff b5 c0 7f ff
	ff		 push	 DWORD PTR _iAniID$[ebp]
  00178	8d 86 20 1a 00
	00		 lea	 eax, DWORD PTR [esi+6688]
  0017e	50		 push	 eax
  0017f	8b cf		 mov	 ecx, edi
  00181	e8 00 00 00 00	 call	 ?SetReservedSliding@ioBaseChar@@QAEXABV?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@HMKM_N@Z ; ioBaseChar::SetReservedSliding

; 691  : 
; 692  : 	pOwner->RefreshFireTimeList( iAniID, m_ExtendAttackAttribute.m_vWeaponInfoList, FTT_NORMAL_ATTACK, fTimeRate, dwPreDelay );

  00186	f3 0f 10 85 bc
	7f ff ff	 movss	 xmm0, DWORD PTR _fTimeRate$[ebp]
  0018e	53		 push	 ebx
  0018f	ff b5 c4 7f ff
	ff		 push	 DWORD PTR _dwPreDelay$[ebp]
  00195	8d 86 10 1a 00
	00		 lea	 eax, DWORD PTR [esi+6672]
  0019b	51		 push	 ecx
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	53		 push	 ebx
  001a2	50		 push	 eax
  001a3	ff b5 c0 7f ff
	ff		 push	 DWORD PTR _iAniID$[ebp]
  001a9	8b cf		 mov	 ecx, edi
  001ab	e8 00 00 00 00	 call	 ?RefreshFireTimeList@ioBaseChar@@QAEXHABV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@W4FireTimeType@@MK_N@Z ; ioBaseChar::RefreshFireTimeList

; 693  : 
; 694  : 	DWORD dwCurTime = FRAMEGETTIME();

  001b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  001b6	8b c8		 mov	 ecx, eax
  001b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 695  : 	m_dwMotionEndTime = dwCurTime + pGrp->GetAnimationFullTime( iAniID ) * fTimeRate;

  001be	89 85 b4 7f ff
	ff		 mov	 DWORD PTR tv2038[ebp], eax
  001c4	db 85 b4 7f ff
	ff		 fild	 DWORD PTR tv2038[ebp]
  001ca	85 c0		 test	 eax, eax
  001cc	79 06		 jns	 SHORT $LN235@ChangeToEx@2
  001ce	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN235@ChangeToEx@2:
  001d4	ff b5 c0 7f ff
	ff		 push	 DWORD PTR _iAniID$[ebp]
  001da	d9 9d c4 7f ff
	ff		 fstp	 DWORD PTR tv1716[ebp]
  001e0	8b 8d b8 7f ff
	ff		 mov	 ecx, DWORD PTR _pGrp$[ebp]
  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationFullTime@ioEntityGroup@@QAEMH@Z
  001ec	d8 8d bc 7f ff
	ff		 fmul	 DWORD PTR _fTimeRate$[ebp]
  001f2	d8 85 c4 7f ff
	ff		 fadd	 DWORD PTR tv1716[ebp]
  001f8	e8 00 00 00 00	 call	 __ftol2
  001fd	6a 02		 push	 2
  001ff	89 86 54 1a 00
	00		 mov	 DWORD PTR [esi+6740], eax

; 696  : 	m_dwKeyReserveTime = dwCurTime + pGrp->GetAnimationEventTime_e( iAniID, "key_reserve" ) * fTimeRate;

  00205	c7 45 e0 86 89
	92 b5		 mov	 DWORD PTR _szEncEventType$554099[ebp], -1248687738 ; b5928986H
  0020c	c7 45 e4 9f 89
	98 8f		 mov	 DWORD PTR _szEncEventType$554099[ebp+4], -1885828705 ; 8f98899fH
  00213	8d 45 e0	 lea	 eax, DWORD PTR _szEncEventType$554099[ebp]
  00216	c7 45 e8 9f 9a
	8e 00		 mov	 DWORD PTR _szEncEventType$554099[ebp+8], 9345695 ; 008e9a9fH
  0021d	59		 pop	 ecx
$LL113@ChangeToEx@2:
  0021e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00224	83 c0 04	 add	 eax, 4
  00227	49		 dec	 ecx
  00228	75 f4		 jne	 SHORT $LL113@ChangeToEx@2
  0022a	6a 08		 push	 8
  0022c	58		 pop	 eax
$LL110@ChangeToEx@2:
  0022d	8b c8		 mov	 ecx, eax
  0022f	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00235	79 05		 jns	 SHORT $LN236@ChangeToEx@2
  00237	49		 dec	 ecx
  00238	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0023b	41		 inc	 ecx
$LN236@ChangeToEx@2:
  0023c	b2 ed		 mov	 dl, -19			; ffffffedH
  0023e	2a d1		 sub	 dl, cl
  00240	30 54 05 e0	 xor	 BYTE PTR _szEncEventType$554099[ebp+eax], dl
  00244	40		 inc	 eax
  00245	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00248	7c e3		 jl	 SHORT $LL110@ChangeToEx@2
  0024a	8d 45 e0	 lea	 eax, DWORD PTR _szEncEventType$554099[ebp]
  0024d	50		 push	 eax
  0024e	8d 8d a0 7f ff
	ff		 lea	 ecx, DWORD PTR $T554086[ebp]
  00254	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0025a	8b 8d b8 7f ff
	ff		 mov	 ecx, DWORD PTR _pGrp$[ebp]
  00260	8d 85 a0 7f ff
	ff		 lea	 eax, DWORD PTR $T554086[ebp]
  00266	50		 push	 eax
  00267	ff b5 c0 7f ff
	ff		 push	 DWORD PTR _iAniID$[ebp]
  0026d	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00270	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventTime@ioEntityGroup@@QAEMHABVioHashString@@@Z
  00276	d9 9d b4 7f ff
	ff		 fstp	 DWORD PTR $T554085[ebp]
  0027c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00280	8d 8d a0 7f ff
	ff		 lea	 ecx, DWORD PTR $T554086[ebp]
  00286	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0028c	d9 85 b4 7f ff
	ff		 fld	 DWORD PTR $T554085[ebp]
  00292	d8 8d bc 7f ff
	ff		 fmul	 DWORD PTR _fTimeRate$[ebp]
  00298	d8 85 c4 7f ff
	ff		 fadd	 DWORD PTR tv1716[ebp]
  0029e	e8 00 00 00 00	 call	 __ftol2

; 697  : 
; 698  : 	m_ChargeState = CS_EXTEND_ATTACK;
; 699  : 	pOwner->SetAttackMoveEnable( false );

  002a3	53		 push	 ebx
  002a4	8b cf		 mov	 ecx, edi
  002a6	89 86 f8 0e 00
	00		 mov	 DWORD PTR [esi+3832], eax
  002ac	c7 86 48 1a 00
	00 05 00 00 00	 mov	 DWORD PTR [esi+6728], 5
  002b6	e8 00 00 00 00	 call	 ?SetAttackMoveEnable@ioBaseChar@@QAEX_N@Z ; ioBaseChar::SetAttackMoveEnable

; 700  : 
; 701  : 	pOwner->SetAutoTarget( ATT_NORMAL );

  002bb	53		 push	 ebx
  002bc	8b cf		 mov	 ecx, edi
  002be	e8 00 00 00 00	 call	 ?SetAutoTarget@ioBaseChar@@QAEXW4AutoTargetType@@@Z ; ioBaseChar::SetAutoTarget
  002c3	6a 02		 push	 2

; 702  : 
; 703  : 	DWORD dwTrackingTime = dwCurTime + pGrp->GetAnimationEventTime_e( iAniID, "tracking_e" ) * fTimeRate + dwPreDelay;

  002c5	c7 45 e0 99 9e
	8a 89		 mov	 DWORD PTR _szEncEventType$554214[ebp], -1987404135 ; 898a9e99H
  002cc	c7 45 e4 86 85
	85 8d		 mov	 DWORD PTR _szEncEventType$554214[ebp+4], -1920629370 ; 8d858586H
  002d3	66 c7 45 e8 b2
	89		 mov	 WORD PTR _szEncEventType$554214[ebp+8], 35250 ; 000089b2H
  002d9	8d 45 e0	 lea	 eax, DWORD PTR _szEncEventType$554214[ebp]
  002dc	88 5d ea	 mov	 BYTE PTR _szEncEventType$554214[ebp+10], bl
  002df	59		 pop	 ecx
$LL220@ChangeToEx@2:
  002e0	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002e6	83 c0 04	 add	 eax, 4
  002e9	49		 dec	 ecx
  002ea	75 f4		 jne	 SHORT $LL220@ChangeToEx@2
  002ec	6a 08		 push	 8
  002ee	58		 pop	 eax
$LL217@ChangeToEx@2:
  002ef	8b c8		 mov	 ecx, eax
  002f1	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  002f7	79 05		 jns	 SHORT $LN237@ChangeToEx@2
  002f9	49		 dec	 ecx
  002fa	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002fd	41		 inc	 ecx
$LN237@ChangeToEx@2:
  002fe	b2 ed		 mov	 dl, -19			; ffffffedH
  00300	2a d1		 sub	 dl, cl
  00302	30 54 05 e0	 xor	 BYTE PTR _szEncEventType$554214[ebp+eax], dl
  00306	40		 inc	 eax
  00307	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0030a	7c e3		 jl	 SHORT $LL217@ChangeToEx@2
  0030c	8d 45 e0	 lea	 eax, DWORD PTR _szEncEventType$554214[ebp]
  0030f	50		 push	 eax
  00310	8d 8d a0 7f ff
	ff		 lea	 ecx, DWORD PTR $T554314[ebp]
  00316	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0031c	8b 8d b8 7f ff
	ff		 mov	 ecx, DWORD PTR _pGrp$[ebp]
  00322	8d 85 a0 7f ff
	ff		 lea	 eax, DWORD PTR $T554314[ebp]
  00328	50		 push	 eax
  00329	ff b5 c0 7f ff
	ff		 push	 DWORD PTR _iAniID$[ebp]
  0032f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00336	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventTime@ioEntityGroup@@QAEMHABVioHashString@@@Z
  0033c	d9 9d b4 7f ff
	ff		 fstp	 DWORD PTR $T554313[ebp]
  00342	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00346	8d 8d a0 7f ff
	ff		 lea	 ecx, DWORD PTR $T554314[ebp]
  0034c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00352	d9 85 b4 7f ff
	ff		 fld	 DWORD PTR $T554313[ebp]
  00358	d8 8d bc 7f ff
	ff		 fmul	 DWORD PTR _fTimeRate$[ebp]
  0035e	d8 85 c4 7f ff
	ff		 fadd	 DWORD PTR tv1716[ebp]
  00364	d8 85 b0 7f ff
	ff		 fadd	 DWORD PTR tv1708[ebp]
  0036a	e8 00 00 00 00	 call	 __ftol2

; 704  : 	pOwner->SetAutoTargetTrackingEndTime( dwTrackingTime );

  0036f	50		 push	 eax
  00370	8b cf		 mov	 ecx, edi
  00372	e8 00 00 00 00	 call	 ?SetAutoTargetTrackingEndTime@ioBaseChar@@QAEXK@Z ; ioBaseChar::SetAutoTargetTrackingEndTime

; 705  : 
; 706  : 	m_bAttackKeyReserved = false;

  00377	66 89 9e 60 1a
	00 00		 mov	 WORD PTR [esi+6752], bx

; 707  : 	m_bDefenseKeyReserved = false;
; 708  : 	m_bJumpKeyReserved = false;

  0037e	88 9e 62 1a 00
	00		 mov	 BYTE PTR [esi+6754], bl

; 709  : 
; 710  : 	if( pOwner->IsNeedSendNetwork() )

  00384	8b 07		 mov	 eax, DWORD PTR [edi]
  00386	8b cf		 mov	 ecx, edi
  00388	ff 90 04 01 00
	00		 call	 DWORD PTR [eax+260]
  0038e	84 c0		 test	 al, al
  00390	0f 84 84 00 00
	00		 je	 $LN1@ChangeToEx@2

; 711  : 	{
; 712  : 		SP2Packet kPacket( CUPK_ITEM_GAUGE_OK );

  00396	68 27 41 00 00	 push	 16679			; 00004127H
  0039b	8d 8d c8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548985[ebp]
  003a1	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 713  : 		FillItemGaugePacketHeader( pOwner, kPacket );

  003a6	8d 85 c8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$548985[ebp]
  003ac	50		 push	 eax
  003ad	57		 push	 edi
  003ae	8b ce		 mov	 ecx, esi
  003b0	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  003b7	e8 00 00 00 00	 call	 ?FillItemGaugePacketHeader@ioAttackableItem@@QAEXPAVioBaseChar@@AAVSP2Packet@@@Z ; ioAttackableItem::FillItemGaugePacketHeader

; 714  : 		kPacket << static_cast<byte>( ST_EXTEND_ATTACK );

  003bc	6a 02		 push	 2
  003be	8d 8d c8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548985[ebp]
  003c4	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@E@Z ; SP2Packet::operator<<

; 715  : 		kPacket << pOwner->GetTargetRot();

  003c9	8d 87 a4 06 00
	00		 lea	 eax, DWORD PTR [edi+1700]
  003cf	50		 push	 eax
  003d0	8d 8d c8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548985[ebp]
  003d6	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXQUATERNION@@@Z ; SP2Packet::operator<<

; 716  : 		kPacket << pOwner->GetWorldPosition();

  003db	8b 07		 mov	 eax, DWORD PTR [edi]
  003dd	8b cf		 mov	 ecx, edi
  003df	ff 50 70	 call	 DWORD PTR [eax+112]
  003e2	50		 push	 eax
  003e3	8d 8d c8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548985[ebp]
  003e9	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXVECTOR3@@@Z ; SP2Packet::operator<<

; 717  : 		pOwner->FillAutoTargetInfo( kPacket );

  003ee	8d 85 c8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$548985[ebp]
  003f4	50		 push	 eax
  003f5	8b cf		 mov	 ecx, edi
  003f7	e8 00 00 00 00	 call	 ?FillAutoTargetInfo@ioBaseChar@@QAEXAAVSP2Packet@@@Z ; ioBaseChar::FillAutoTargetInfo

; 718  : 		P2PNetwork::SendToAllPlayingUser( kPacket );

  003fc	8d 85 c8 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$548985[ebp]
  00402	53		 push	 ebx
  00403	50		 push	 eax
  00404	e8 00 00 00 00	 call	 ?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z ; P2PNetwork::SendToAllPlayingUser

; 719  : 	}

  00409	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0040d	59		 pop	 ecx
  0040e	59		 pop	 ecx
  0040f	8d 8d c8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548985[ebp]
  00415	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN1@ChangeToEx@2:

; 720  : }

  0041a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0041d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00424	59		 pop	 ecx
  00425	5f		 pop	 edi
  00426	5e		 pop	 esi
  00427	5b		 pop	 ebx
  00428	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0042b	33 cd		 xor	 ecx, ebp
  0042d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00432	c9		 leave
  00433	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ChangeToExtendAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z$1:
  00000	8d 8d a0 7f ff
	ff		 lea	 ecx, DWORD PTR $T554086[ebp]
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?ChangeToExtendAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z$2:
  0000c	8d 8d a0 7f ff
	ff		 lea	 ecx, DWORD PTR $T554314[ebp]
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?ChangeToExtendAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z$0:
  00018	8d 8d c8 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$548985[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?ChangeToExtendAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z:
  00023	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00027	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002a	8b 8a 9c 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32868]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003a	33 c8		 xor	 ecx, eax
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ChangeToExtendAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z
  00046	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ChangeToExtendAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ENDP ; ioBullFightItem::ChangeToExtendAttack
PUBLIC	__real@00000000
PUBLIC	??4?$CEncrypt@M@@QAE_NAAV0@@Z			; CEncrypt<float>::operator=
;	COMDAT __real@00000000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??4?$CEncrypt@M@@QAE_NAAV0@@Z
_TEXT	SEGMENT
_value$554356 = -4					; size = 4
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@M@@QAE_NAAV0@@Z PROC			; CEncrypt<float>::operator=, COMDAT
; _this$ = ecx

; 3314 : 	 {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 3315 : 		 type value = inValue;

  00005	8d 45 fc	 lea	 eax, DWORD PTR _value$554356[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _inValue$[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00013	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$554356[ebp]

; 3316 : 		 EncryptValueToPool((char*)&value);

  00018	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0001b	50		 push	 eax
  0001c	8b ce		 mov	 ecx, esi
  0001e	f3 0f 11 45 08	 movss	 DWORD PTR _value$[ebp], xmm0
  00023	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 3317 : #ifdef _NOTUSE
; 3318 : 		 m_value = inValue;
; 3319 : 		 Debug();
; 3320 : #endif
; 3321 : 		 return value;

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _value$[ebp]
  0002d	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00034	9f		 lahf
  00035	5e		 pop	 esi
  00036	f6 c4 44	 test	 ah, 68			; 00000044H
  00039	7b 04		 jnp	 SHORT $LN3@operator@3
  0003b	b0 01		 mov	 al, 1
  0003d	eb 02		 jmp	 SHORT $LN4@operator@3
$LN3@operator@3:
  0003f	32 c0		 xor	 al, al
$LN4@operator@3:

; 3322 : 	 }

  00041	c9		 leave
  00042	c2 04 00	 ret	 4
??4?$CEncrypt@M@@QAE_NAAV0@@Z ENDP			; CEncrypt<float>::operator=
_TEXT	ENDS
PUBLIC	??D?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEAAMXZ ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??D?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEAAMXZ
_TEXT	SEGMENT
??D?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEAAMXZ PROC ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator*, COMDAT
; _this$ = ecx

; 360  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 361  : 		}

  00005	c3		 ret	 0
??D?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEAAMXZ ENDP ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator++, COMDAT
; _this$ = ecx

; 375  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 376  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 377  : 		++*this;

  0000a	8b 12		 mov	 edx, DWORD PTR [edx]
  0000c	89 11		 mov	 DWORD PTR [ecx], edx

; 378  : 		return (_Tmp);
; 379  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator++
_TEXT	ENDS
PUBLIC	??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ; std::_List_val<float,std::allocator<float> >::_List_val<float,std::allocator<float> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z
_TEXT	SEGMENT
$T554435 = -16						; size = 12
$T554413 = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z PROC ; std::_List_val<float,std::allocator<float> >::_List_val<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 493  : 		{	// construct base, and allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 494  : 		this->_Mysize = 0;

  00009	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 495  : 		this->_Myhead = this->_Alnod.allocate(1);

  0000d	6a 0c		 push	 12			; 0000000cH
  0000f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00014	59		 pop	 ecx
  00015	85 c0		 test	 eax, eax
  00017	74 10		 je	 SHORT $LN13@List_val
  00019	89 06		 mov	 DWORD PTR [esi], eax

; 496  : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

  0001b	89 00		 mov	 DWORD PTR [eax], eax

; 497  : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

  0001d	8b 06		 mov	 eax, DWORD PTR [esi]
  0001f	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 498  : 		}

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	c9		 leave
  00026	c2 04 00	 ret	 4

; 495  : 		this->_Myhead = this->_Alnod.allocate(1);

$LN13@List_val:
  00029	83 65 fc 00	 and	 DWORD PTR $T554413[ebp], 0
  0002d	8d 45 fc	 lea	 eax, DWORD PTR $T554413[ebp]
  00030	50		 push	 eax
  00031	8d 4d f0	 lea	 ecx, DWORD PTR $T554435[ebp]
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  0003a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003f	8d 45 f0	 lea	 eax, DWORD PTR $T554435[ebp]
  00042	50		 push	 eax
  00043	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T554435[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN29@List_val:
$LN28@List_val:
  0004f	cc		 int	 3
??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ENDP ; std::_List_val<float,std::allocator<float> >::_List_val<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	??0?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::_List_iterator<std::_List_val<float,std::allocator<float> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::_List_iterator<std::_List_val<float,std::allocator<float> > >, COMDAT
; _this$ = ecx

; 342  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 343  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::_List_iterator<std::_List_val<float,std::allocator<float> > >
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Grow_to
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 0f	 mov	 edx, 268435455		; 0fffffffH
  0000d	c1 f8 04	 sar	 eax, 4
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00023	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Grow_to
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@AAV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@AAV2@@Z ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@AAV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@AAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@AAV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@AAV2@@Z PROC ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  0000c	e8 00 00 00 00	 call	 ??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z ; std::allocator<ioHashString>::construct<ioHashString &>

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@AAV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@AAV2@@Z ENDP ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString &>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@U_Node@?$_List_nod@MV?$allocator@M@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@0@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z ; std::_Dest_val<std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>,std::_List_nod<float,std::allocator<float> >::_Node>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@U_Node@?$_List_nod@MV?$allocator@M@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@0@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@U_Node@?$_List_nod@MV?$allocator@M@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@0@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z PROC ; std::_Dest_val<std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>,std::_List_nod<float,std::allocator<float> >::_Node>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@U_Node@?$_List_nod@MV?$allocator@M@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@0@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z ENDP ; std::_Dest_val<std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>,std::_List_nod<float,std::allocator<float> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN9@Cons_val
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN9@Cons_val:
  00013	5f		 pop	 edi

; 281  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@V3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@$$QAV2@@Z ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@V3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@$$QAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@V3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@$$QAV2@@Z PROC ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  0000c	e8 00 00 00 00	 call	 ?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z ; std::allocator<ioHashString>::construct

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@V3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@$$QAV2@@Z ENDP ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z ; std::allocator<WeaponInfo>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z PROC ; std::allocator<WeaponInfo>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z ENDP ; std::allocator<WeaponInfo>::construct
_TEXT	ENDS
PUBLIC	??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Buy
; Function compile flags: /Ogsp
;	COMDAT ?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy
$LN4@Buy:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff ff ff ff
	0f		 cmp	 edi, 268435455		; 0fffffffH
  00022	76 0b		 jbe	 SHORT $LN2@Buy

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy:
$LN2@Buy:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ; std::_Allocate<ioHashString>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	c1 e7 04	 shl	 edi, 4
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy:
?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Buy
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00@Z ; std::_Move<ioHashString *,ioHashString *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00@Z
_TEXT	SEGMENT
__Cat$554648 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00@Z PROC ; std::_Move<ioHashString *,ioHashString *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$554648[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioHashString *,ioHashString *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00@Z ENDP ; std::_Move<ioHashString *,ioHashString *>
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy@2

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy@2
$LN4@Buy@2:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff 66 66 66
	06		 cmp	 edi, 107374182		; 06666666H
  00022	76 0b		 jbe	 SHORT $LN2@Buy@2

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy@2:
$LN2@Buy@2:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ; std::_Allocate<WeaponInfo>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	6b ff 28	 imul	 edi, 40			; 00000028H
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy@2:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy@2:
?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy
; Function compile flags: /Ogsp
;	COMDAT ?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy@3

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy@3
$LN4@Buy@3:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff 55 55 55
	15		 cmp	 edi, 357913941		; 15555555H
  00022	76 0b		 jbe	 SHORT $LN2@Buy@3

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy@3:
$LN2@Buy@3:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ; std::_Allocate<ForceInfo>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	6b ff 0c	 imul	 edi, 12			; 0000000cH
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy@3:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy@3:
?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator!=
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z ; std::_Dest_val<std::allocator<ForceInfo>,ForceInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z PROC ; std::_Dest_val<std::allocator<ForceInfo>,ForceInfo>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z ENDP ; std::_Dest_val<std::allocator<ForceInfo>,ForceInfo>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@@Z ; std::allocator<ioHashString>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@@Z PROC ; std::allocator<ioHashString>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 214  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?destroy@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@@Z ENDP ; std::allocator<ioHashString>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z ; std::allocator<WeaponInfo>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z PROC ; std::allocator<WeaponInfo>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	83 c1 08	 add	 ecx, 8
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 214  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z ENDP ; std::allocator<WeaponInfo>::destroy
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@ABV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@ABV2@@Z ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@ABV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@ABV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@ABV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@ABV2@@Z PROC ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@ABV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@ABV2@@Z ENDP ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString const &>
_TEXT	ENDS
PUBLIC	?UpdateExtraData@ioBullFightItem@@UAEXPAVioBaseChar@@@Z ; ioBullFightItem::UpdateExtraData
EXTRN	__imp_?GetSecPerFrame@ioFrameTimer@@QBEMXZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobullfightitem.cpp
;	COMDAT ?UpdateExtraData@ioBullFightItem@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_value$554809 = -8					; size = 4
_fTimePerSec$ = -8					; size = 4
_value$554800 = -4					; size = 4
_value$554788 = -4					; size = 4
_value$554815 = 8					; size = 4
_value$554804 = 8					; size = 4
_value$554794 = 8					; size = 4
_pOwner$ = 8						; size = 4
?UpdateExtraData@ioBullFightItem@@UAEXPAVioBaseChar@@@Z PROC ; ioBullFightItem::UpdateExtraData, COMDAT
; _this$ = ecx

; 293  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 294  : 	if( !pOwner ) 

  00007	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	85 ff		 test	 edi, edi
  0000e	0f 84 e7 00 00
	00		 je	 $LN1@UpdateExtr

; 295  : 		return;
; 296  : 
; 297  : 	float fTimePerSec = g_FrameTimer.GetSecPerFrame();

  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0001a	8b c8		 mov	 ecx, eax
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSecPerFrame@ioFrameTimer@@QBEMXZ
  00022	d9 5d f8	 fstp	 DWORD PTR _fTimePerSec$[ebp]

; 298  : 
; 299  : 	switch( pOwner->GetState() )

  00025	80 bf 10 03 00
	00 02		 cmp	 BYTE PTR [edi+784], 2
  0002c	0f 87 c9 00 00
	00		 ja	 $LN1@UpdateExtr

; 300  : 	{
; 301  : 	case CS_DELAY:
; 302  : 	case CS_DASH:
; 303  : 	case CS_RUN:
; 304  : 		if( m_fCurExtraGauge < m_fMaxExtraGauge )

  00032	53		 push	 ebx
  00033	8d 45 fc	 lea	 eax, DWORD PTR _value$554788[ebp]
  00036	8d 9e ac 16 00
	00		 lea	 ebx, DWORD PTR [esi+5804]
  0003c	50		 push	 eax
  0003d	8b cb		 mov	 ecx, ebx
  0003f	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00044	8d 45 08	 lea	 eax, DWORD PTR _value$554794[ebp]
  00047	8d be dc 16 00
	00		 lea	 edi, DWORD PTR [esi+5852]
  0004d	50		 push	 eax
  0004e	8b cf		 mov	 ecx, edi
  00050	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00055	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _value$554794[ebp]
  0005a	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _value$554788[ebp]
  0005f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00062	0f 5a c9	 cvtps2pd xmm1, xmm1
  00065	66 0f 2f c8	 comisd	 xmm1, xmm0
  00069	0f 86 8b 00 00
	00		 jbe	 $LN30@UpdateExtr

; 305  : 		{
; 306  : 			float fGauge = m_fExtraGaugeBaseInc * fTimePerSec;

  0006f	8d 45 fc	 lea	 eax, DWORD PTR _value$554800[ebp]
  00072	50		 push	 eax
  00073	8d 8e 4c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5708]
  00079	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 307  : 
; 308  : 			m_fCurExtraGauge += fGauge;

  0007e	8d 45 08	 lea	 eax, DWORD PTR _value$554804[ebp]
  00081	50		 push	 eax
  00082	8b cf		 mov	 ecx, edi
  00084	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00089	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _value$554800[ebp]
  0008e	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _fTimePerSec$[ebp]
  00093	0f 5a c0	 cvtps2pd xmm0, xmm0
  00096	0f 5a c9	 cvtps2pd xmm1, xmm1
  00099	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0009d	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _value$554804[ebp]
  000a2	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000a6	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000aa	0f 5a c9	 cvtps2pd xmm1, xmm1
  000ad	8d 45 08	 lea	 eax, DWORD PTR _value$554804[ebp]
  000b0	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000b4	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000b8	50		 push	 eax
  000b9	8b cf		 mov	 ecx, edi
  000bb	f3 0f 11 45 08	 movss	 DWORD PTR _value$554804[ebp], xmm0
  000c0	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 309  : 			m_fCurExtraGauge = min( m_fCurExtraGauge, m_fMaxExtraGauge );

  000c5	8d 45 f8	 lea	 eax, DWORD PTR _value$554809[ebp]
  000c8	50		 push	 eax
  000c9	8b cb		 mov	 ecx, ebx
  000cb	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  000d0	8d 45 08	 lea	 eax, DWORD PTR _value$554815[ebp]
  000d3	50		 push	 eax
  000d4	8b cf		 mov	 ecx, edi
  000d6	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  000db	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _value$554815[ebp]
  000e0	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _value$554809[ebp]
  000e5	0f 5a c0	 cvtps2pd xmm0, xmm0
  000e8	0f 5a c9	 cvtps2pd xmm1, xmm1
  000eb	66 0f 2f c8	 comisd	 xmm1, xmm0
  000ef	0f 47 df	 cmova	 ebx, edi
  000f2	53		 push	 ebx
  000f3	8b cf		 mov	 ecx, edi
  000f5	e8 00 00 00 00	 call	 ??4?$CEncrypt@M@@QAE_NAAV0@@Z ; CEncrypt<float>::operator=
$LN30@UpdateExtr:
  000fa	5b		 pop	 ebx
$LN1@UpdateExtr:
  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi

; 310  : 		}
; 311  : 		return;
; 312  : 	}
; 313  : }

  000fd	c9		 leave
  000fe	c2 04 00	 ret	 4
?UpdateExtraData@ioBullFightItem@@UAEXPAVioBaseChar@@@Z ENDP ; ioBullFightItem::UpdateExtraData
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?OnItemGaugeOK@ioBullFightItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z ; ioBullFightItem::OnItemGaugeOK
EXTRN	??5SP2Packet@@QAEAAV0@AAH@Z:PROC		; SP2Packet::operator>>
EXTRN	?ApplyAutoTargetInfo@ioBaseChar@@QAEXAAVSP2Packet@@@Z:PROC ; ioBaseChar::ApplyAutoTargetInfo
EXTRN	??5SP2Packet@@QAEAAV0@AAUD3DXVECTOR3@@@Z:PROC	; SP2Packet::operator>>
EXTRN	?SetTargetRot@ioBaseChar@@QAEXABUD3DXQUATERNION@@@Z:PROC ; ioBaseChar::SetTargetRot
EXTRN	??5SP2Packet@@QAEAAV0@AAUD3DXQUATERNION@@@Z:PROC ; SP2Packet::operator>>
EXTRN	??5SP2Packet@@QAEAAV0@AAE@Z:PROC		; SP2Packet::operator>>
; Function compile flags: /Ogsp
;	COMDAT ?OnItemGaugeOK@ioBullFightItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
_TEXT	SEGMENT
_qtRot$548874 = -36					; size = 16
_qtRot$548871 = -36					; size = 16
_qtRot$548868 = -36					; size = 16
_qtRot$548865 = -36					; size = 16
_eState$ = -17						; size = 1
_vPos$548875 = -16					; size = 12
_vPos$548872 = -16					; size = 12
_vPos$548869 = -16					; size = 12
_vPos$548866 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_pOwner$ = 8						; size = 4
_rkPacket$ = 12						; size = 4
?OnItemGaugeOK@ioBullFightItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z PROC ; ioBullFightItem::OnItemGaugeOK, COMDAT
; _this$ = ecx

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _pOwner$[ebp]
  00015	57		 push	 edi
  00016	8b 7d 0c	 mov	 edi, DWORD PTR _rkPacket$[ebp]
  00019	8b d9		 mov	 ebx, ecx

; 380  : 	if( !pOwner ) 

  0001b	85 f6		 test	 esi, esi
  0001d	0f 84 17 01 00
	00		 je	 $LN5@OnItemGaug

; 381  : 		return;
; 382  : 
; 383  : 	byte eState;
; 384  : 	rkPacket >> eState;

  00023	8d 45 ef	 lea	 eax, DWORD PTR _eState$[ebp]
  00026	50		 push	 eax
  00027	8b cf		 mov	 ecx, edi
  00029	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAE@Z ; SP2Packet::operator>>

; 385  : 
; 386  : 	switch( eState )

  0002e	0f b6 45 ef	 movzx	 eax, BYTE PTR _eState$[ebp]
  00032	83 e8 00	 sub	 eax, 0
  00035	0f 84 bd 00 00
	00		 je	 $LN4@OnItemGaug
  0003b	48		 dec	 eax
  0003c	74 7c		 je	 SHORT $LN3@OnItemGaug
  0003e	48		 dec	 eax
  0003f	74 43		 je	 SHORT $LN2@OnItemGaug
  00041	48		 dec	 eax
  00042	0f 85 f2 00 00
	00		 jne	 $LN5@OnItemGaug

; 432  : 	case ST_END:
; 433  : 		{
; 434  : 			D3DXQUATERNION qtRot;
; 435  : 			rkPacket >> qtRot;

  00048	8d 45 dc	 lea	 eax, DWORD PTR _qtRot$548874[ebp]
  0004b	50		 push	 eax
  0004c	8b cf		 mov	 ecx, edi
  0004e	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXQUATERNION@@@Z ; SP2Packet::operator>>

; 436  : 			pOwner->SetTargetRot( qtRot );

  00053	8d 45 dc	 lea	 eax, DWORD PTR _qtRot$548874[ebp]
  00056	50		 push	 eax
  00057	8b ce		 mov	 ecx, esi
  00059	e8 00 00 00 00	 call	 ?SetTargetRot@ioBaseChar@@QAEXABUD3DXQUATERNION@@@Z ; ioBaseChar::SetTargetRot

; 437  : 
; 438  : 			D3DXVECTOR3 vPos;
; 439  : 			rkPacket >> vPos;

  0005e	8d 45 f0	 lea	 eax, DWORD PTR _vPos$548875[ebp]
  00061	50		 push	 eax
  00062	8b cf		 mov	 ecx, edi
  00064	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXVECTOR3@@@Z ; SP2Packet::operator>>

; 440  : 			pOwner->SetWorldPosition( vPos );

  00069	8b 06		 mov	 eax, DWORD PTR [esi]
  0006b	8d 4d f0	 lea	 ecx, DWORD PTR _vPos$548875[ebp]
  0006e	51		 push	 ecx
  0006f	8b ce		 mov	 ecx, esi
  00071	ff 50 44	 call	 DWORD PTR [eax+68]

; 441  : 
; 442  : 			pOwner->SetState( CS_DELAY, false );

  00074	6a 00		 push	 0
  00076	6a 00		 push	 0
  00078	8b ce		 mov	 ecx, esi
  0007a	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState

; 443  : 		}
; 444  : 		break;

  0007f	e9 b6 00 00 00	 jmp	 $LN5@OnItemGaug
$LN2@OnItemGaug:

; 417  : 	case ST_EXTEND_ATTACK:
; 418  : 		{
; 419  : 			D3DXQUATERNION qtRot;
; 420  : 			rkPacket >> qtRot;

  00084	8d 45 dc	 lea	 eax, DWORD PTR _qtRot$548871[ebp]
  00087	50		 push	 eax
  00088	8b cf		 mov	 ecx, edi
  0008a	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXQUATERNION@@@Z ; SP2Packet::operator>>

; 421  : 			pOwner->SetTargetRot( qtRot );

  0008f	8d 45 dc	 lea	 eax, DWORD PTR _qtRot$548871[ebp]
  00092	50		 push	 eax
  00093	8b ce		 mov	 ecx, esi
  00095	e8 00 00 00 00	 call	 ?SetTargetRot@ioBaseChar@@QAEXABUD3DXQUATERNION@@@Z ; ioBaseChar::SetTargetRot

; 422  : 
; 423  : 			D3DXVECTOR3 vPos;
; 424  : 			rkPacket >> vPos;

  0009a	8d 45 f0	 lea	 eax, DWORD PTR _vPos$548872[ebp]
  0009d	50		 push	 eax
  0009e	8b cf		 mov	 ecx, edi
  000a0	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXVECTOR3@@@Z ; SP2Packet::operator>>

; 425  : 			pOwner->SetWorldPosition( vPos );

  000a5	8b 06		 mov	 eax, DWORD PTR [esi]
  000a7	8d 4d f0	 lea	 ecx, DWORD PTR _vPos$548872[ebp]
  000aa	51		 push	 ecx
  000ab	8b ce		 mov	 ecx, esi
  000ad	ff 50 44	 call	 DWORD PTR [eax+68]

; 426  : 
; 427  : 			ChangeToExtendAttack( pOwner );

  000b0	56		 push	 esi
  000b1	8b cb		 mov	 ecx, ebx
  000b3	e8 00 00 00 00	 call	 ?ChangeToExtendAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ; ioBullFightItem::ChangeToExtendAttack

; 428  : 
; 429  : 			pOwner->ApplyAutoTargetInfo( rkPacket );
; 430  : 		}
; 431  : 		break;

  000b8	eb 34		 jmp	 SHORT $LN26@OnItemGaug
$LN3@OnItemGaug:

; 400  : 		}
; 401  : 		break;
; 402  : 	case ST_CHARGE_ATTACK:
; 403  : 		{
; 404  : 			D3DXQUATERNION qtRot;
; 405  : 			rkPacket >> qtRot;

  000ba	8d 45 dc	 lea	 eax, DWORD PTR _qtRot$548868[ebp]
  000bd	50		 push	 eax
  000be	8b cf		 mov	 ecx, edi
  000c0	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXQUATERNION@@@Z ; SP2Packet::operator>>

; 406  : 			pOwner->SetTargetRot( qtRot );

  000c5	8d 45 dc	 lea	 eax, DWORD PTR _qtRot$548868[ebp]
  000c8	50		 push	 eax
  000c9	8b ce		 mov	 ecx, esi
  000cb	e8 00 00 00 00	 call	 ?SetTargetRot@ioBaseChar@@QAEXABUD3DXQUATERNION@@@Z ; ioBaseChar::SetTargetRot

; 407  : 
; 408  : 			D3DXVECTOR3 vPos;
; 409  : 			rkPacket >> vPos;

  000d0	8d 45 f0	 lea	 eax, DWORD PTR _vPos$548869[ebp]
  000d3	50		 push	 eax
  000d4	8b cf		 mov	 ecx, edi
  000d6	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXVECTOR3@@@Z ; SP2Packet::operator>>

; 410  : 			pOwner->SetWorldPosition( vPos );

  000db	8b 06		 mov	 eax, DWORD PTR [esi]
  000dd	8d 4d f0	 lea	 ecx, DWORD PTR _vPos$548869[ebp]
  000e0	51		 push	 ecx
  000e1	8b ce		 mov	 ecx, esi
  000e3	ff 50 44	 call	 DWORD PTR [eax+68]

; 411  : 			
; 412  : 			ChangeToChargeAttack( pOwner );

  000e6	56		 push	 esi
  000e7	8b cb		 mov	 ecx, ebx
  000e9	e8 00 00 00 00	 call	 ?ChangeToChargeAttack@ioBullFightItem@@QAEXPAVioBaseChar@@@Z ; ioBullFightItem::ChangeToChargeAttack
$LN26@OnItemGaug:

; 413  : 
; 414  : 			pOwner->ApplyAutoTargetInfo( rkPacket );

  000ee	57		 push	 edi
  000ef	8b ce		 mov	 ecx, esi
  000f1	e8 00 00 00 00	 call	 ?ApplyAutoTargetInfo@ioBaseChar@@QAEXAAVSP2Packet@@@Z ; ioBaseChar::ApplyAutoTargetInfo

; 415  : 		}
; 416  : 		break;

  000f6	eb 42		 jmp	 SHORT $LN5@OnItemGaug
$LN4@OnItemGaug:

; 387  : 	{
; 388  : 	case ST_NORMAL_ATTACK:
; 389  : 		{
; 390  : 			D3DXQUATERNION qtRot;
; 391  : 			rkPacket >> m_nCurCombo;

  000f8	8d 83 50 1a 00
	00		 lea	 eax, DWORD PTR [ebx+6736]
  000fe	50		 push	 eax
  000ff	8b cf		 mov	 ecx, edi
  00101	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 392  : 			rkPacket >> qtRot;

  00106	8d 45 dc	 lea	 eax, DWORD PTR _qtRot$548865[ebp]
  00109	50		 push	 eax
  0010a	8b cf		 mov	 ecx, edi
  0010c	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXQUATERNION@@@Z ; SP2Packet::operator>>

; 393  : 			pOwner->SetTargetRot( qtRot );

  00111	8d 45 dc	 lea	 eax, DWORD PTR _qtRot$548865[ebp]
  00114	50		 push	 eax
  00115	8b ce		 mov	 ecx, esi
  00117	e8 00 00 00 00	 call	 ?SetTargetRot@ioBaseChar@@QAEXABUD3DXQUATERNION@@@Z ; ioBaseChar::SetTargetRot

; 394  : 
; 395  : 			D3DXVECTOR3 vPos;
; 396  : 			rkPacket >> vPos;

  0011c	8d 45 f0	 lea	 eax, DWORD PTR _vPos$548866[ebp]
  0011f	50		 push	 eax
  00120	8b cf		 mov	 ecx, edi
  00122	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXVECTOR3@@@Z ; SP2Packet::operator>>

; 397  : 			pOwner->SetWorldPosition( vPos );

  00127	8b 06		 mov	 eax, DWORD PTR [esi]
  00129	8d 4d f0	 lea	 ecx, DWORD PTR _vPos$548866[ebp]
  0012c	51		 push	 ecx
  0012d	8b ce		 mov	 ecx, esi
  0012f	ff 50 44	 call	 DWORD PTR [eax+68]

; 398  : 
; 399  : 			ChangeToNormalAttack( pOwner );

  00132	56		 push	 esi
  00133	8b cb		 mov	 ecx, ebx
  00135	e8 00 00 00 00	 call	 ?ChangeToNormalAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ; ioBullFightItem::ChangeToNormalAttack
$LN5@OnItemGaug:

; 445  : 	}	
; 446  : }

  0013a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013d	5f		 pop	 edi
  0013e	5e		 pop	 esi
  0013f	33 cd		 xor	 ecx, ebp
  00141	5b		 pop	 ebx
  00142	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00147	c9		 leave
  00148	c2 08 00	 ret	 8
?OnItemGaugeOK@ioBullFightItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z ENDP ; ioBullFightItem::OnItemGaugeOK
_TEXT	ENDS
PUBLIC	?OnCharging@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ; ioBullFightItem::OnCharging
EXTRN	?IsHasCrown@ioBaseChar@@QBE_NXZ:PROC		; ioBaseChar::IsHasCrown
EXTRN	?IsAttackKeyDown@ioBaseChar@@QBE_NXZ:PROC	; ioBaseChar::IsAttackKeyDown
; Function compile flags: /Ogsp
;	COMDAT ?OnCharging@ioBullFightItem@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_value$554859 = 8					; size = 4
_value$554865 = 8					; size = 4
_pOwner$ = 8						; size = 4
?OnCharging@ioBullFightItem@@IAEXPAVioBaseChar@@@Z PROC	; ioBullFightItem::OnCharging, COMDAT
; _this$ = ecx

; 519  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 520  : 	if( !pOwner || !pOwner->IsNeedProcess() )	

  00005	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	0f 84 88 00 00
	00		 je	 $LN4@OnCharging
  00012	8b 07		 mov	 eax, DWORD PTR [edi]
  00014	8b cf		 mov	 ecx, edi
  00016	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  0001c	84 c0		 test	 al, al
  0001e	74 7a		 je	 SHORT $LN4@OnCharging

; 521  : 		return;
; 522  : 
; 523  : 	if( m_fCurExtraGauge >= m_fNeedGauge && pOwner->IsAttackKeyDown() && !pOwner->IsHasCrown() )

  00020	8d 45 08	 lea	 eax, DWORD PTR _value$554859[ebp]
  00023	50		 push	 eax
  00024	8d 8e dc 16 00
	00		 lea	 ecx, DWORD PTR [esi+5852]
  0002a	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  0002f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _value$554859[ebp]
  00034	f3 0f 10 8e 54
	19 00 00	 movss	 xmm1, DWORD PTR [esi+6484]
  0003c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0003f	0f 5a c9	 cvtps2pd xmm1, xmm1
  00042	66 0f 2f c1	 comisd	 xmm0, xmm1
  00046	72 4a		 jb	 SHORT $LN3@OnCharging
  00048	8b cf		 mov	 ecx, edi
  0004a	e8 00 00 00 00	 call	 ?IsAttackKeyDown@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsAttackKeyDown
  0004f	84 c0		 test	 al, al
  00051	74 3f		 je	 SHORT $LN3@OnCharging
  00053	8b cf		 mov	 ecx, edi
  00055	e8 00 00 00 00	 call	 ?IsHasCrown@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsHasCrown
  0005a	84 c0		 test	 al, al
  0005c	75 34		 jne	 SHORT $LN3@OnCharging

; 524  : 	{
; 525  : 		if( m_dwAttackStartTime + m_dwChargeTime <= FRAMEGETTIME() )

  0005e	8d 45 08	 lea	 eax, DWORD PTR _value$554865[ebp]
  00061	50		 push	 eax
  00062	8d 8e b0 18 00
	00		 lea	 ecx, DWORD PTR [esi+6320]
  00068	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00073	8b c8		 mov	 ecx, eax
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0007b	8b 8e 4c 1a 00
	00		 mov	 ecx, DWORD PTR [esi+6732]
  00081	03 4d 08	 add	 ecx, DWORD PTR _value$554865[ebp]
  00084	3b c8		 cmp	 ecx, eax
  00086	77 12		 ja	 SHORT $LN4@OnCharging

; 526  : 			ChangeToChargeAttack( pOwner );

  00088	57		 push	 edi
  00089	8b ce		 mov	 ecx, esi
  0008b	e8 00 00 00 00	 call	 ?ChangeToChargeAttack@ioBullFightItem@@QAEXPAVioBaseChar@@@Z ; ioBullFightItem::ChangeToChargeAttack

; 527  : 	}
; 528  : 	else

  00090	eb 08		 jmp	 SHORT $LN4@OnCharging
$LN3@OnCharging:

; 529  : 		ChangeToNormalAttack( pOwner );

  00092	57		 push	 edi
  00093	8b ce		 mov	 ecx, esi
  00095	e8 00 00 00 00	 call	 ?ChangeToNormalAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ; ioBullFightItem::ChangeToNormalAttack
$LN4@OnCharging:
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi

; 530  : }

  0009c	5d		 pop	 ebp
  0009d	c2 04 00	 ret	 4
?OnCharging@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ENDP	; ioBullFightItem::OnCharging
_TEXT	ENDS
PUBLIC	??0?$list@MV?$allocator@M@std@@@std@@QAE@XZ	; std::list<float,std::allocator<float> >::list<float,std::allocator<float> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??0?$list@MV?$allocator@M@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T554876 = -4						; size = 4
$T554871 = -4						; size = 4
??0?$list@MV?$allocator@M@std@@@std@@QAE@XZ PROC	; std::list<float,std::allocator<float> >::list<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 607  : 		{	// construct empty list

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	51		 push	 ecx
  00006	89 65 fc	 mov	 DWORD PTR $T554871[ebp], esp
  00009	8b f1		 mov	 esi, ecx
  0000b	89 65 fc	 mov	 DWORD PTR $T554876[ebp], esp
  0000e	e8 00 00 00 00	 call	 ??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ; std::_List_val<float,std::allocator<float> >::_List_val<float,std::allocator<float> >

; 608  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c9		 leave
  00017	c3		 ret	 0
??0?$list@MV?$allocator@M@std@@@std@@QAE@XZ ENDP	; std::list<float,std::allocator<float> >::list<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	?begin@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ ; std::list<float,std::allocator<float> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ PROC ; std::list<float,std::allocator<float> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Nextnode(this->_Myhead), this));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ ENDP ; std::list<float,std::allocator<float> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ ; std::list<float,std::allocator<float> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ PROC ; std::list<float,std::allocator<float> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Myhead, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ ENDP ; std::list<float,std::allocator<float> >::end
_TEXT	ENDS
PUBLIC	?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ	; std::list<float,std::allocator<float> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ PROC	; std::list<float,std::allocator<float> >::clear, COMDAT
; _this$ = ecx

; 1096 : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1097 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1098 : 		this->_Orphan_ptr(*this, 0);
; 1099 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1100 : 
; 1101 : 		_Nodeptr _Pnext;
; 1102 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead);

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1103 : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

  00007	89 00		 mov	 DWORD PTR [eax], eax

; 1104 : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

  00009	8b 06		 mov	 eax, DWORD PTR [esi]
  0000b	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1105 : 		this->_Mysize = 0;

  0000e	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1106 : 
; 1107 : 		for (; _Pnode != this->_Myhead; _Pnode = _Pnext)

  00012	3b 0e		 cmp	 ecx, DWORD PTR [esi]
  00014	74 11		 je	 SHORT $LN1@clear
  00016	57		 push	 edi
$LL3@clear:

; 1108 : 			{	// delete an element
; 1109 : 			_Pnext = this->_Nextnode(_Pnode);

  00017	8b 39		 mov	 edi, DWORD PTR [ecx]

; 1110 : 
; 1111 : 			_Dest_val(this->_Alnod, _Pnode);
; 1112 : 			this->_Alnod.deallocate(_Pnode, 1);

  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	59		 pop	 ecx
  00020	8b cf		 mov	 ecx, edi
  00022	3b 3e		 cmp	 edi, DWORD PTR [esi]
  00024	75 f1		 jne	 SHORT $LL3@clear
  00026	5f		 pop	 edi
$LN1@clear:
  00027	5e		 pop	 esi

; 1113 : 			}
; 1114 : 		}

  00028	c3		 ret	 0
?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ ENDP	; std::list<float,std::allocator<float> >::clear
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	eb 19		 jmp	 SHORT $LN35@Uninit_cop
$LL14@Uninit_cop:

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  00005	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00008	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000b	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>
  00013	83 45 10 0c	 add	 DWORD PTR __Dest$[ebp], 12 ; 0000000cH
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	83 45 08 0c	 add	 DWORD PTR __First$[ebp], 12 ; 0000000cH
$LN35@Uninit_cop:

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00021	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00024	75 df		 jne	 SHORT $LL14@Uninit_cop

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)
; 379  : 		_Dest_val(_Al, _Next);
; 380  : 	_RERAISE;
; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00026	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo const &>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ForceInfo> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@VioHashString@@@std@@VioHashString@@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@@Z ; std::_Dest_val<std::allocator<ioHashString>,ioHashString>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@VioHashString@@@std@@VioHashString@@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@VioHashString@@@std@@VioHashString@@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@@Z PROC ; std::_Dest_val<std::allocator<ioHashString>,ioHashString>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]

; 288  : 	}

  00006	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Dest_val@V?$allocator@VioHashString@@@std@@VioHashString@@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@@Z ENDP ; std::_Dest_val<std::allocator<ioHashString>,ioHashString>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z ; std::_Dest_val<std::allocator<WeaponInfo>,WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z PROC ; std::_Dest_val<std::allocator<WeaponInfo>,WeaponInfo>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	83 c1 08	 add	 ecx, 8

; 288  : 	}

  00009	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  0000a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z ENDP ; std::_Dest_val<std::allocator<WeaponInfo>,WeaponInfo>
_TEXT	ENDS
PUBLIC	?CheckNormalAttack@ioBullFightItem@@UAEXPAVioBaseChar@@@Z ; ioBullFightItem::CheckNormalAttack
EXTRN	?CheckNormalAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckNormalAttack
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobullfightitem.cpp
;	COMDAT ?CheckNormalAttack@ioBullFightItem@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?CheckNormalAttack@ioBullFightItem@@UAEXPAVioBaseChar@@@Z PROC ; ioBullFightItem::CheckNormalAttack, COMDAT
; _this$ = ecx

; 148  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f1		 mov	 esi, ecx

; 149  : 	DWORD dwCurTime = FRAMEGETTIME();

  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0000d	8b c8		 mov	 ecx, eax
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 150  : 
; 151  : 	switch( m_ChargeState )

  00015	8b 8e 48 1a 00
	00		 mov	 ecx, DWORD PTR [esi+6728]
  0001b	49		 dec	 ecx
  0001c	0f 84 08 01 00
	00		 je	 $LN16@CheckNorma
  00022	49		 dec	 ecx
  00023	0f 84 cc 00 00
	00		 je	 $LN15@CheckNorma
  00029	49		 dec	 ecx
  0002a	0f 84 88 00 00
	00		 je	 $LN12@CheckNorma
  00030	49		 dec	 ecx
  00031	74 30		 je	 SHORT $LN8@CheckNorma
  00033	49		 dec	 ecx
  00034	0f 85 fa 00 00
	00		 jne	 $LN17@CheckNorma

; 198  : 	case CS_EXTEND_ATTACK:
; 199  : 		{
; 200  : 			if( m_dwMotionEndTime < dwCurTime )

  0003a	39 86 54 1a 00
	00		 cmp	 DWORD PTR [esi+6740], eax
  00040	73 04		 jae	 SHORT $LN4@CheckNorma

; 201  : 			{
; 202  : 				CheckReserveState( pOwner );

  00042	8b ce		 mov	 ecx, esi

; 203  : 				return;

  00044	eb 2f		 jmp	 SHORT $LN22@CheckNorma
$LN4@CheckNorma:

; 204  : 			}
; 205  : 
; 206  : 			if ( m_dwKeyReserveTime < dwCurTime )

  00046	39 86 f8 0e 00
	00		 cmp	 DWORD PTR [esi+3832], eax
  0004c	73 7e		 jae	 SHORT $LN11@CheckNorma

; 207  : 			{
; 208  : 				ReserveInputKey( pOwner, true, true, false );

  0004e	6a 00		 push	 0
  00050	6a 01		 push	 1
  00052	6a 01		 push	 1
  00054	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00057	8b ce		 mov	 ecx, esi
  00059	e8 00 00 00 00	 call	 ?ReserveInputKey@ioBullFightItem@@IAEXPAVioBaseChar@@_N11@Z ; ioBullFightItem::ReserveInputKey

; 209  : 				return;

  0005e	e9 d1 00 00 00	 jmp	 $LN17@CheckNorma
$LN8@CheckNorma:

; 184  : 	case CS_EXTEND_MOVE:
; 185  : 		{
; 186  : 			if( m_dwExtendMoveStartTime + m_dwExtendMoveLoopTime < dwCurTime )

  00063	8b 8e 5c 1a 00
	00		 mov	 ecx, DWORD PTR [esi+6748]
  00069	03 8e e4 19 00
	00		 add	 ecx, DWORD PTR [esi+6628]
  0006f	3b c8		 cmp	 ecx, eax

; 187  : 			{
; 188  : 				CheckReserveState( pOwner );

  00071	8b ce		 mov	 ecx, esi
  00073	73 0d		 jae	 SHORT $LN7@CheckNorma
$LN22@CheckNorma:
  00075	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00078	e8 00 00 00 00	 call	 ?CheckReserveState@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ; ioBullFightItem::CheckReserveState

; 189  : 				return;

  0007d	e9 b2 00 00 00	 jmp	 $LN17@CheckNorma
$LN7@CheckNorma:

; 190  : 			}
; 191  : 
; 192  : 			CheckExtendMoveAniState( pOwner, false );

  00082	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00085	6a 00		 push	 0
  00087	57		 push	 edi
  00088	e8 00 00 00 00	 call	 ?CheckExtendMoveAniState@ioBullFightItem@@IAEXPAVioBaseChar@@_N@Z ; ioBullFightItem::CheckExtendMoveAniState

; 193  : 
; 194  : 			if ( pOwner->IsNeedProcess() && pOwner->IsAttackKey() )

  0008d	8b 07		 mov	 eax, DWORD PTR [edi]
  0008f	8b cf		 mov	 ecx, edi
  00091	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  00097	84 c0		 test	 al, al
  00099	0f 84 95 00 00
	00		 je	 $LN17@CheckNorma
  0009f	8b cf		 mov	 ecx, edi
  000a1	e8 00 00 00 00	 call	 ?IsAttackKey@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsAttackKey
  000a6	84 c0		 test	 al, al
  000a8	0f 84 86 00 00
	00		 je	 $LN17@CheckNorma

; 195  : 				ChangeToExtendAttack( pOwner );

  000ae	57		 push	 edi
  000af	8b ce		 mov	 ecx, esi
  000b1	e8 00 00 00 00	 call	 ?ChangeToExtendAttack@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ; ioBullFightItem::ChangeToExtendAttack

; 196  : 		}
; 197  : 		break;

  000b6	eb 7c		 jmp	 SHORT $LN17@CheckNorma
$LN12@CheckNorma:

; 168  : 	case CS_CHARGE_ATTACK:
; 169  : 		{
; 170  : 			if( m_dwMotionEndTime < dwCurTime )

  000b8	39 86 54 1a 00
	00		 cmp	 DWORD PTR [esi+6740], eax
  000be	73 0c		 jae	 SHORT $LN11@CheckNorma

; 171  : 			{
; 172  : 				ChangeToExtendMove( pOwner );

  000c0	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  000c3	8b ce		 mov	 ecx, esi
  000c5	e8 00 00 00 00	 call	 ?ChangeToExtendMove@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ; ioBullFightItem::ChangeToExtendMove

; 173  : 				return;

  000ca	eb 68		 jmp	 SHORT $LN17@CheckNorma
$LN11@CheckNorma:

; 174  : 			}
; 175  : 
; 176  : 			if( pOwner->IsNeedProcess() )

  000cc	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  000cf	8b 07		 mov	 eax, DWORD PTR [edi]
  000d1	8b cf		 mov	 ecx, edi
  000d3	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  000d9	84 c0		 test	 al, al
  000db	74 57		 je	 SHORT $LN17@CheckNorma

; 177  : 			{
; 178  : 				CheckCancelReserve( pOwner );

  000dd	8b 06		 mov	 eax, DWORD PTR [esi]
  000df	57		 push	 edi
  000e0	8b ce		 mov	 ecx, esi
  000e2	ff 90 40 02 00
	00		 call	 DWORD PTR [eax+576]

; 179  : 				if( ProcessCancel(pOwner) )

  000e8	8b 06		 mov	 eax, DWORD PTR [esi]
  000ea	57		 push	 edi
  000eb	8b ce		 mov	 ecx, esi
  000ed	ff 90 48 02 00
	00		 call	 DWORD PTR [eax+584]

; 180  : 					return;				
; 181  : 			}
; 182  : 		}
; 183  : 		break;

  000f3	eb 3f		 jmp	 SHORT $LN17@CheckNorma
$LN15@CheckNorma:

; 155  : 		break;
; 156  : 	case CS_NORMAL_ATTACK:
; 157  : 		{
; 158  : 			if( pOwner->IsNeedProcess() )

  000f5	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  000f8	8b 07		 mov	 eax, DWORD PTR [edi]
  000fa	8b cf		 mov	 ecx, edi
  000fc	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  00102	84 c0		 test	 al, al
  00104	74 1a		 je	 SHORT $LN13@CheckNorma

; 159  : 			{
; 160  : 				CheckCancelReserve( pOwner );

  00106	8b 06		 mov	 eax, DWORD PTR [esi]
  00108	57		 push	 edi
  00109	8b ce		 mov	 ecx, esi
  0010b	ff 90 40 02 00
	00		 call	 DWORD PTR [eax+576]

; 161  : 				if( ProcessCancel(pOwner) )

  00111	8b 06		 mov	 eax, DWORD PTR [esi]
  00113	57		 push	 edi
  00114	8b ce		 mov	 ecx, esi
  00116	ff 90 48 02 00
	00		 call	 DWORD PTR [eax+584]
  0011c	84 c0		 test	 al, al
  0011e	75 14		 jne	 SHORT $LN17@CheckNorma
$LN13@CheckNorma:

; 162  : 					return;				
; 163  : 			}
; 164  : 
; 165  : 			ioWeaponItem::CheckNormalAttack( pOwner );

  00120	57		 push	 edi
  00121	8b ce		 mov	 ecx, esi
  00123	e8 00 00 00 00	 call	 ?CheckNormalAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z ; ioAttackableItem::CheckNormalAttack

; 166  : 		}
; 167  : 		break;

  00128	eb 0a		 jmp	 SHORT $LN17@CheckNorma
$LN16@CheckNorma:

; 152  : 	{
; 153  : 	case CS_CHARGING:
; 154  : 		OnCharging( pOwner );

  0012a	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0012d	8b ce		 mov	 ecx, esi
  0012f	e8 00 00 00 00	 call	 ?OnCharging@ioBullFightItem@@IAEXPAVioBaseChar@@@Z ; ioBullFightItem::OnCharging
$LN17@CheckNorma:
  00134	5f		 pop	 edi
  00135	5e		 pop	 esi

; 210  : 			}
; 211  : 
; 212  : 			if( pOwner->IsNeedProcess() )
; 213  : 			{
; 214  : 				CheckCancelReserve( pOwner );
; 215  : 				if( ProcessCancel(pOwner) )
; 216  : 					return;				
; 217  : 			}
; 218  : 		}
; 219  : 		break;
; 220  : 	}
; 221  : 
; 222  : }

  00136	5d		 pop	 ebp
  00137	c2 04 00	 ret	 4
?CheckNormalAttack@ioBullFightItem@@UAEXPAVioBaseChar@@@Z ENDP ; ioBullFightItem::CheckNormalAttack
_TEXT	ENDS
PUBLIC	?_Tidy@?$list@MV?$allocator@M@std@@@std@@QAEXXZ	; std::list<float,std::allocator<float> >::_Tidy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?_Tidy@?$list@MV?$allocator@M@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@MV?$allocator@M@std@@@std@@QAEXXZ PROC	; std::list<float,std::allocator<float> >::_Tidy, COMDAT
; _this$ = ecx

; 1497 : 		clear();

  00000	e9 00 00 00 00	 jmp	 ?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ ; std::list<float,std::allocator<float> >::clear
?_Tidy@?$list@MV?$allocator@M@std@@@std@@QAEXXZ ENDP	; std::list<float,std::allocator<float> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$555116 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$555116[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$3
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 373  : 
; 374  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

$LL14@Uninit_cop@2:
  00016	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00019	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001c	74 34		 je	 SHORT $LN4@Uninit_cop@2

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  0001e	50		 push	 eax
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	e8 00 00 00 00	 call	 ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
  00027	83 45 10 28	 add	 DWORD PTR __Dest$[ebp], 40 ; 00000028H
  0002b	83 45 08 28	 add	 DWORD PTR __First$[ebp], 40 ; 00000028H
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
  00031	eb e3		 jmp	 SHORT $LL14@Uninit_cop@2
__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00033	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00036	eb 0c		 jmp	 SHORT $LN48@Uninit_cop@2
$LL3@Uninit_cop@2:

; 379  : 		_Dest_val(_Al, _Next);

  00038	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00041	83 c6 28	 add	 esi, 40			; 00000028H
$LN48@Uninit_cop@2:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00044	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00047	75 ef		 jne	 SHORT $LL3@Uninit_cop@2

; 380  : 	_RERAISE;

  00049	6a 00		 push	 0
  0004b	6a 00		 push	 0
  0004d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN49@Uninit_cop@2:
$LN4@Uninit_cop@2:

; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00052	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00055	e8 00 00 00 00	 call	 __EH_epilog3
  0005a	c3		 ret	 0
$LN47@Uninit_cop@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
PUBLIC	??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioHashString *,ioHashString *,std::allocator<ioHashString>,ioHashString>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ioHashString *,ioHashString *,std::allocator<ioHashString>,ioHashString>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 428  : 
; 429  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00016	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LL6@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	74 33		 je	 SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  0001e	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00021	56		 push	 esi
  00022	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00025	e8 00 00 00 00	 call	 ?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z ; std::allocator<ioHashString>::construct
  0002a	83 45 10 10	 add	 DWORD PTR __Dest$[ebp], 16 ; 00000010H
  0002e	83 c6 10	 add	 esi, 16			; 00000010H
  00031	eb e6		 jmp	 SHORT $LL6@Uninit_mov
__catch$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00033	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00036	eb 0b		 jmp	 SHORT $LN33@Uninit_mov
$LL3@Uninit_mov:

; 434  : 		_Dest_val(_Al, _Next);

  00038	8b ce		 mov	 ecx, esi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00040	83 c6 10	 add	 esi, 16			; 00000010H
$LN33@Uninit_mov:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00043	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00046	75 f0		 jne	 SHORT $LL3@Uninit_mov

; 435  : 	_RERAISE;

  00048	6a 00		 push	 0
  0004a	6a 00		 push	 0
  0004c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN34@Uninit_mov:
$LN4@Uninit_mov:

; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00051	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 438  : 	}

  00054	e8 00 00 00 00	 call	 __EH_epilog3
  00059	c3		 ret	 0
$LN32@Uninit_mov:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ioHashString *,ioHashString *,std::allocator<ioHashString>,ioHashString>
PUBLIC	??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z ; std::_Destroy_range<std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ForceInfo> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ioHashString> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN17@Destroy_ra
$LL3@Destroy_ra:

; 97   : 		_Dest_val(_Al, _First);

  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 10	 add	 esi, 16			; 00000010H
$LN17@Destroy_ra:

; 96   : 	for (; _First != _Last; ++_First)

  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL3@Destroy_ra
  00019	5e		 pop	 esi

; 98   : 	}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<WeaponInfo> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0c		 jmp	 SHORT $LN20@Destroy_ra@2
$LL3@Destroy_ra@2:

; 97   : 		_Dest_val(_Al, _First);

  00009	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00012	83 c6 28	 add	 esi, 40			; 00000028H
$LN20@Destroy_ra@2:

; 96   : 	for (; _First != _Last; ++_First)

  00015	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00018	75 ef		 jne	 SHORT $LL3@Destroy_ra@2
  0001a	5e		 pop	 esi

; 98   : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 373  : 
; 374  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

$LL14@Uninit_cop@3:
  00016	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00019	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001c	74 33		 je	 SHORT $LN4@Uninit_cop@3

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  0001e	50		 push	 eax
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	e8 00 00 00 00	 call	 ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
  00027	83 45 10 10	 add	 DWORD PTR __Dest$[ebp], 16 ; 00000010H
  0002b	83 45 08 10	 add	 DWORD PTR __First$[ebp], 16 ; 00000010H
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
  00031	eb e3		 jmp	 SHORT $LL14@Uninit_cop@3
__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00033	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00036	eb 0b		 jmp	 SHORT $LN45@Uninit_cop@3
$LL3@Uninit_cop@3:

; 379  : 		_Dest_val(_Al, _Next);

  00038	8b ce		 mov	 ecx, esi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00040	83 c6 10	 add	 esi, 16			; 00000010H
$LN45@Uninit_cop@3:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00043	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00046	75 f0		 jne	 SHORT $LL3@Uninit_cop@3

; 380  : 	_RERAISE;

  00048	6a 00		 push	 0
  0004a	6a 00		 push	 0
  0004c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN46@Uninit_cop@3:
$LN4@Uninit_cop@3:

; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00051	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00054	e8 00 00 00 00	 call	 __EH_epilog3
  00059	c3		 ret	 0
$LN44@Uninit_cop@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
PUBLIC	??1?$list@MV?$allocator@M@std@@@std@@QAE@XZ	; std::list<float,std::allocator<float> >::~list<float,std::allocator<float> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??1?$list@MV?$allocator@M@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@MV?$allocator@M@std@@@std@@QAE@XZ PROC	; std::list<float,std::allocator<float> >::~list<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 769  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 770  : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ ; std::list<float,std::allocator<float> >::clear

; 771  : 		}

  00008	ff 36		 push	 DWORD PTR [esi]
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	59		 pop	 ecx
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??1?$list@MV?$allocator@M@std@@@std@@QAE@XZ ENDP	; std::list<float,std::allocator<float> >::~list<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$555499 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$555499[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > > >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$555509 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$555509[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z
_TEXT	SEGMENT
__Cat$555515 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z PROC ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$555515[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioHashString *,ioHashString *,std::allocator<ioHashString>,ioHashString>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z ENDP ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@@Z ; std::_Destroy_range<std::allocator<ioHashString> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ioHashString> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN21@Destroy_ra@3
$LL7@Destroy_ra@3:
  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 10	 add	 esi, 16			; 00000010H
$LN21@Destroy_ra@3:
  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL7@Destroy_ra@3
  00019	5e		 pop	 esi

; 89   : 	}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z PROC ; std::_Destroy_range<std::allocator<WeaponInfo> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0c		 jmp	 SHORT $LN24@Destroy_ra@4
$LL7@Destroy_ra@4:
  00009	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00012	83 c6 28	 add	 esi, 40			; 00000028H
$LN24@Destroy_ra@4:
  00015	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00018	75 ef		 jne	 SHORT $LL7@Destroy_ra@4
  0001a	5e		 pop	 esi

; 89   : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@@Z
_TEXT	SEGMENT
__Cat$555703 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$555703[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	_pOwner$GSCopy$
PUBLIC	?ProcessCancel@ioBullFightItem@@UAE_NPAVioBaseChar@@@Z ; ioBullFightItem::ProcessCancel
EXTRN	?IsBuffLimitJump@ioBaseChar@@QBE_NXZ:PROC	; ioBaseChar::IsBuffLimitJump
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$?ProcessCancel@ioBullFightItem@@UAE_NPAVioBaseChar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessCancel@ioBullFightItem@@UAE_NPAVioBaseChar@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ProcessCancel@ioBullFightItem@@UAE_NPAVioBaseChar@@@Z$2
__ehfuncinfo$?ProcessCancel@ioBullFightItem@@UAE_NPAVioBaseChar@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ProcessCancel@ioBullFightItem@@UAE_NPAVioBaseChar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobullfightitem.cpp
xdata$x	ENDS
;	COMDAT ?ProcessCancel@ioBullFightItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
$T555764 = -80						; size = 16
tv1319 = -64						; size = 4
_vTimeList$ = -60					; size = 12
_pOwner$GSCopy$ = -48					; size = 4
_dwCurTime$ = -44					; size = 4
tv1187 = -40						; size = 4
$T555724 = -40						; size = 4
$T555727 = -40						; size = 4
_szEncEventType$555777 = -36				; size = 13
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
?ProcessCancel@ioBullFightItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioBullFightItem::ProcessCancel, COMDAT
; _this$ = ecx

; 329  : {

  00000	6a 44		 push	 68			; 00000044H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?ProcessCancel@ioBullFightItem@@UAE_NPAVioBaseChar@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 75 08	 mov	 esi, DWORD PTR _pOwner$[ebp]
  0000f	8b f9		 mov	 edi, ecx

; 330  : 	if( m_szCurAni.IsEmpty() )

  00011	8d 9f 10 0f 00
	00		 lea	 ebx, DWORD PTR [edi+3856]
  00017	8b cb		 mov	 ecx, ebx

; 339  : 
; 340  : 	int iAniID = pGrp->GetAnimationIdx( m_szCurAni );

  00019	89 75 d0	 mov	 DWORD PTR _pOwner$GSCopy$[ebp], esi
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00022	84 c0		 test	 al, al
  00024	74 0a		 je	 SHORT $LN9@ProcessCan
$LN224@ProcessCan:

; 331  : 		return false;

  00026	32 c0		 xor	 al, al
$LN10@ProcessCan:

; 373  : 	}
; 374  : 
; 375  : 	return false;
; 376  : }

  00028	e8 00 00 00 00	 call	 __EH_epilog3_GS
  0002d	c2 04 00	 ret	 4
$LN9@ProcessCan:

; 332  : 
; 333  : 	if( !pOwner ) 

  00030	85 f6		 test	 esi, esi

; 334  : 		return false;

  00032	74 f2		 je	 SHORT $LN224@ProcessCan

; 335  : 
; 336  : 	ioEntityGroup *pGrp = pOwner->GetGroup();

  00034	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 337  : 	if( !pGrp ) 

  00037	85 f6		 test	 esi, esi

; 338  : 		return false;

  00039	74 eb		 je	 SHORT $LN224@ProcessCan

; 339  : 
; 340  : 	int iAniID = pGrp->GetAnimationIdx( m_szCurAni );

  0003b	53		 push	 ebx
  0003c	8b ce		 mov	 ecx, esi
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z

; 341  : 
; 342  : 	std::list<float> vTimeList;

  00044	51		 push	 ecx
  00045	89 65 d8	 mov	 DWORD PTR $T555727[ebp], esp
  00048	8d 4d c4	 lea	 ecx, DWORD PTR _vTimeList$[ebp]
  0004b	8b d8		 mov	 ebx, eax
  0004d	89 65 d8	 mov	 DWORD PTR $T555724[ebp], esp
  00050	e8 00 00 00 00	 call	 ??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ; std::_List_val<float,std::allocator<float> >::_List_val<float,std::allocator<float> >
  00055	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00059	6a 03		 push	 3

; 343  : 	pGrp->GetAnimationEventTimeList_e( iAniID, "input_jump_s", vTimeList );

  0005b	c7 45 dc 84 82
	9b 9f		 mov	 DWORD PTR _szEncEventType$555777[ebp], -1617198460 ; 9f9b8284H
  00062	c7 45 e0 99 b3
	81 9f		 mov	 DWORD PTR _szEncEventType$555777[ebp+4], -1618889831 ; 9f81b399H
  00069	c7 45 e4 80 9c
	b4 99		 mov	 DWORD PTR _szEncEventType$555777[ebp+8], -1716216704 ; 99b49c80H
  00070	8d 45 dc	 lea	 eax, DWORD PTR _szEncEventType$555777[ebp]
  00073	c6 45 e8 00	 mov	 BYTE PTR _szEncEventType$555777[ebp+12], 0
  00077	59		 pop	 ecx
$LL124@ProcessCan:
  00078	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0007e	83 c0 04	 add	 eax, 4
  00081	49		 dec	 ecx
  00082	75 f4		 jne	 SHORT $LL124@ProcessCan
  00084	8d 45 dc	 lea	 eax, DWORD PTR _szEncEventType$555777[ebp]
  00087	50		 push	 eax
  00088	8d 4d b0	 lea	 ecx, DWORD PTR $T555764[ebp]
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  00091	8d 45 c4	 lea	 eax, DWORD PTR _vTimeList$[ebp]
  00094	50		 push	 eax
  00095	8d 45 b0	 lea	 eax, DWORD PTR $T555764[ebp]
  00098	50		 push	 eax
  00099	53		 push	 ebx
  0009a	8b ce		 mov	 ecx, esi
  0009c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventTimeList@ioEntityGroup@@QAEHHABVioHashString@@AAV?$list@MV?$allocator@M@std@@@std@@@Z
  000a6	8d 4d b0	 lea	 ecx, DWORD PTR $T555764[ebp]
  000a9	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 344  : 
; 345  : 	if( vTimeList.empty() )

  000b3	83 7d c8 00	 cmp	 DWORD PTR _vTimeList$[ebp+4], 0
  000b7	75 1a		 jne	 SHORT $LN6@ProcessCan
$LN2@ProcessCan:
  000b9	32 db		 xor	 bl, bl
$LN217@ProcessCan:

; 346  : 		return false;

  000bb	8d 4d c4	 lea	 ecx, DWORD PTR _vTimeList$[ebp]
  000be	e8 00 00 00 00	 call	 ?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ ; std::list<float,std::allocator<float> >::clear
  000c3	ff 75 c4	 push	 DWORD PTR _vTimeList$[ebp]
  000c6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000cb	59		 pop	 ecx
  000cc	8a c3		 mov	 al, bl
  000ce	e9 55 ff ff ff	 jmp	 $LN10@ProcessCan
$LN6@ProcessCan:

; 347  : 
; 348  : 	DWORD dwCurTime = FRAMEGETTIME();

  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  000d9	8b c8		 mov	 ecx, eax
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  000e1	89 45 d4	 mov	 DWORD PTR _dwCurTime$[ebp], eax

; 349  : 	std::list< float >::iterator iter = vTimeList.begin();

  000e4	8b 45 c4	 mov	 eax, DWORD PTR _vTimeList$[ebp]
  000e7	8b 30		 mov	 esi, DWORD PTR [eax]

; 350  : 	while( iter != vTimeList.end() )

  000e9	3b f0		 cmp	 esi, eax
  000eb	74 cc		 je	 SHORT $LN2@ProcessCan
  000ed	f3 0f 10 87 20
	0f 00 00	 movss	 xmm0, DWORD PTR [edi+3872]
  000f5	8b 9f 08 0f 00
	00		 mov	 ebx, DWORD PTR [edi+3848]
  000fb	f3 0f 11 45 d8	 movss	 DWORD PTR tv1187[ebp], xmm0
$LL5@ProcessCan:

; 354  : 
; 355  : 		dwTime += m_dwInputCancelCheckTime;

  00100	d9 46 08	 fld	 DWORD PTR [esi+8]
  00103	e8 00 00 00 00	 call	 __ftol2
  00108	89 45 c0	 mov	 DWORD PTR tv1319[ebp], eax
  0010b	db 45 c0	 fild	 DWORD PTR tv1319[ebp]
  0010e	85 c0		 test	 eax, eax
  00110	79 06		 jns	 SHORT $LN223@ProcessCan
  00112	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN223@ProcessCan:

; 351  : 	{
; 352  : 		DWORD dwTime = (DWORD)*iter;
; 353  : 		dwTime *= m_fCurAniRate;

  00118	d8 4d d8	 fmul	 DWORD PTR tv1187[ebp]

; 354  : 
; 355  : 		dwTime += m_dwInputCancelCheckTime;

  0011b	e8 00 00 00 00	 call	 __ftol2
  00120	03 87 0c 0f 00
	00		 add	 eax, DWORD PTR [edi+3852]

; 356  : 		if( m_dwCancelCheckTime > 0 && COMPARE( dwTime, m_dwCancelCheckTime, dwCurTime ) )

  00126	85 db		 test	 ebx, ebx
  00128	74 09		 je	 SHORT $LN3@ProcessCan
  0012a	3b c3		 cmp	 eax, ebx
  0012c	72 05		 jb	 SHORT $LN3@ProcessCan
  0012e	3b 45 d4	 cmp	 eax, DWORD PTR _dwCurTime$[ebp]
  00131	72 11		 jb	 SHORT $LN212@ProcessCan
$LN3@ProcessCan:

; 363  : 				return true;
; 364  : 			}
; 365  : 
; 366  : 			return false;
; 367  : 		}
; 368  : 
; 369  : 		if( dwTime > dwCurTime )

  00133	3b 45 d4	 cmp	 eax, DWORD PTR _dwCurTime$[ebp]
  00136	77 81		 ja	 SHORT $LN2@ProcessCan

; 370  : 			return false;
; 371  : 
; 372  : 		iter++;

  00138	8b 36		 mov	 esi, DWORD PTR [esi]
  0013a	3b 75 c4	 cmp	 esi, DWORD PTR _vTimeList$[ebp]
  0013d	75 c1		 jne	 SHORT $LL5@ProcessCan

; 363  : 				return true;
; 364  : 			}
; 365  : 
; 366  : 			return false;
; 367  : 		}
; 368  : 
; 369  : 		if( dwTime > dwCurTime )

  0013f	e9 75 ff ff ff	 jmp	 $LN2@ProcessCan
$LN212@ProcessCan:

; 357  : 		{
; 358  : 			m_dwCancelCheckTime = dwTime + 1;

  00144	40		 inc	 eax

; 359  : 
; 360  : 			if( m_bEnableJumpState && !pOwner->IsBuffLimitJump() )

  00145	80 bf 02 0f 00
	00 00		 cmp	 BYTE PTR [edi+3842], 0
  0014c	89 87 08 0f 00
	00		 mov	 DWORD PTR [edi+3848], eax
  00152	0f 84 61 ff ff
	ff		 je	 $LN2@ProcessCan
  00158	8b 4d d0	 mov	 ecx, DWORD PTR _pOwner$GSCopy$[ebp]
  0015b	e8 00 00 00 00	 call	 ?IsBuffLimitJump@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsBuffLimitJump
  00160	84 c0		 test	 al, al
  00162	0f 85 51 ff ff
	ff		 jne	 $LN2@ProcessCan

; 361  : 			{
; 362  : 				pOwner->SetJumpState();

  00168	8b 4d d0	 mov	 ecx, DWORD PTR _pOwner$GSCopy$[ebp]
  0016b	6a 01		 push	 1
  0016d	e8 00 00 00 00	 call	 ?SetJumpState@ioBaseChar@@QAEX_N@Z ; ioBaseChar::SetJumpState
  00172	b3 01		 mov	 bl, 1
  00174	e9 42 ff ff ff	 jmp	 $LN217@ProcessCan
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ProcessCancel@ioBullFightItem@@UAE_NPAVioBaseChar@@@Z$0:
  00000	8d 4d c4	 lea	 ecx, DWORD PTR _vTimeList$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$list@MV?$allocator@M@std@@@std@@QAE@XZ ; std::list<float,std::allocator<float> >::~list<float,std::allocator<float> >
__unwindfunclet$?ProcessCancel@ioBullFightItem@@UAE_NPAVioBaseChar@@@Z$2:
  00008	8d 4d b0	 lea	 ecx, DWORD PTR $T555764[ebp]
  0000b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?ProcessCancel@ioBullFightItem@@UAE_NPAVioBaseChar@@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ProcessCancel@ioBullFightItem@@UAE_NPAVioBaseChar@@@Z
  00031	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ProcessCancel@ioBullFightItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioBullFightItem::ProcessCancel
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$556127 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$556127[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > > >
_TEXT	ENDS
PUBLIC	??$_Umove@PAVioHashString@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@PAV2@00@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Umove<ioHashString *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAVioHashString@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@PAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAVioHashString@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@PAV2@00@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Umove<ioHashString *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAVioHashString@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@PAV2@00@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Umove<ioHashString *>
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN21@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN21@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXPAVioHashString@@0@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXPAVioHashString@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXPAVioHashString@@0@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN23@Destroy
$LL9@Destroy:
  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 10	 add	 esi, 16			; 00000010H
$LN23@Destroy:
  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL9@Destroy
  00019	5e		 pop	 esi

; 1271 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?_Destroy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXPAVioHashString@@0@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@1@0PAV2@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@1@0PAV2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$556303 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@1@0PAV2@@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$556303[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@1@0PAV2@@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > > >
_TEXT	ENDS
PUBLIC	??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$556385 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	6a 0c		 push	 12			; 0000000cH
  00025	59		 pop	 ecx
  00026	99		 cdq
  00027	f7 f9		 idiv	 ecx
  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy
  00031	84 c0		 test	 al, al
  00033	74 1f		 je	 SHORT $LN7@vector

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00035	ff 75 08	 push	 DWORD PTR __Cat$556385[ebp]
  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003d	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003f	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00042	52		 push	 edx
  00043	51		 push	 ecx
  00044	50		 push	 eax
  00045	57		 push	 edi
  00046	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00049	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
  0004e	83 c4 14	 add	 esp, 20			; 00000014H
  00051	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector:

; 543  : 			_CATCH_END
; 544  : 		}

  00054	8b c6		 mov	 eax, esi
  00056	e8 00 00 00 00	 call	 __EH_epilog3
  0005b	c2 04 00	 ret	 4
__catch$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy

; 542  : 			_RERAISE;

  00066	33 db		 xor	 ebx, ebx
  00068	53		 push	 ebx
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector:
$LN37@vector:
  0006f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
PUBLIC	?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
tv300 = -24						; size = 4
__Ptr$549376 = -20					; size = 4
__$EHRec$ = -16						; size = 16
$T556495 = 8						; size = 4
__Count$ = 8						; size = 4
?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00011	81 fb ff ff ff
	0f		 cmp	 ebx, 268435455		; 0fffffffH
  00017	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN59@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00024	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00027	2b 06		 sub	 eax, DWORD PTR [esi]
  00029	c1 f8 04	 sar	 eax, 4
  0002c	3b c3		 cmp	 eax, ebx
  0002e	73 7a		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00030	6a 00		 push	 0
  00032	53		 push	 ebx
  00033	e8 00 00 00 00	 call	 ??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ; std::_Allocate<ioHashString>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  0003e	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00041	52		 push	 edx
  00042	89 45 ec	 mov	 DWORD PTR __Ptr$549376[ebp], eax
  00045	ff 75 ec	 push	 DWORD PTR __Ptr$549376[ebp]
  00048	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004b	50		 push	 eax
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00052	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00055	8b 06		 mov	 eax, DWORD PTR [esi]
  00057	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  0005b	8b f9		 mov	 edi, ecx
  0005d	83 c4 18	 add	 esp, 24			; 00000018H
  00060	2b f8		 sub	 edi, eax
  00062	89 4d e8	 mov	 DWORD PTR tv300[ebp], ecx
  00065	85 c0		 test	 eax, eax
  00067	74 24		 je	 SHORT $LN51@reserve

; 761  : 			if (this->_Myfirst != 0)
; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  00069	89 45 08	 mov	 DWORD PTR $T556495[ebp], eax
  0006c	3b c1		 cmp	 eax, ecx
  0006e	74 15		 je	 SHORT $LN37@reserve
$LN39@reserve:
  00070	8b 4d 08	 mov	 ecx, DWORD PTR $T556495[ebp]
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00079	83 45 08 10	 add	 DWORD PTR $T556495[ebp], 16 ; 00000010H
  0007d	8b 45 08	 mov	 eax, DWORD PTR $T556495[ebp]
  00080	3b 45 e8	 cmp	 eax, DWORD PTR tv300[ebp]
  00083	75 eb		 jne	 SHORT $LN39@reserve
$LN37@reserve:

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00085	ff 36		 push	 DWORD PTR [esi]
  00087	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008c	59		 pop	 ecx
$LN51@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0008d	8b ce		 mov	 ecx, esi
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00095	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$549376[ebp]
  00098	c1 e3 04	 shl	 ebx, 4
  0009b	03 d8		 add	 ebx, eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  0009d	83 e7 f0	 and	 edi, -16		; fffffff0H
  000a0	03 f8		 add	 edi, eax
  000a2	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  000a5	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  000a8	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  000aa	e8 00 00 00 00	 call	 __EH_epilog3
  000af	c2 04 00	 ret	 4
__catch$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000b2	ff 75 ec	 push	 DWORD PTR __Ptr$549376[ebp]
  000b5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ba	59		 pop	 ecx

; 757  : 			_RERAISE;

  000bb	6a 00		 push	 0
  000bd	6a 00		 push	 0
  000bf	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN60@reserve:
$LN58@reserve:
  000c4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::reserve
PUBLIC	??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	?erase@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@0@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T556697 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$556641 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@0@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00004	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __First_arg$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 4d 10	 cmp	 ecx, DWORD PTR __Last_arg$[ebp]
  00012	74 38		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00017	53		 push	 ebx
  00018	57		 push	 edi
  00019	ff 75 10	 push	 DWORD PTR __Cat$556641[ebp]
  0001c	51		 push	 ecx
  0001d	50		 push	 eax
  0001e	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioHashString *,ioHashString *>

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00026	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00029	8b d8		 mov	 ebx, eax
  0002b	83 c4 10	 add	 esp, 16			; 00000010H
  0002e	89 5d fc	 mov	 DWORD PTR $T556697[ebp], ebx
  00031	3b df		 cmp	 ebx, edi
  00033	74 12		 je	 SHORT $LN36@erase
$LL52@erase:
  00035	8b 4d fc	 mov	 ecx, DWORD PTR $T556697[ebp]
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0003e	83 45 fc 10	 add	 DWORD PTR $T556697[ebp], 16 ; 00000010H
  00042	39 7d fc	 cmp	 DWORD PTR $T556697[ebp], edi
  00045	75 ee		 jne	 SHORT $LL52@erase
$LN36@erase:

; 1211 : 			this->_Mylast = _Ptr;

  00047	5f		 pop	 edi
  00048	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0004b	5b		 pop	 ebx
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0004c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0004f	5e		 pop	 esi

; 1214 : 		}

  00050	c9		 leave
  00051	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@0@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 28		 je	 SHORT $LN24@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	53		 push	 ebx
  00009	57		 push	 edi
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  00010	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00013	8b 3e		 mov	 edi, DWORD PTR [esi]
  00015	eb 0b		 jmp	 SHORT $LN28@Tidy@2
$LL12@Tidy@2:
  00017	8b cf		 mov	 ecx, edi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0001f	83 c7 10	 add	 edi, 16			; 00000010H
$LN28@Tidy@2:
  00022	3b fb		 cmp	 edi, ebx
  00024	75 f1		 jne	 SHORT $LL12@Tidy@2

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00026	ff 36		 push	 DWORD PTR [esi]
  00028	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002d	59		 pop	 ecx
  0002e	5f		 pop	 edi
  0002f	5b		 pop	 ebx
$LN24@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00030	33 c0		 xor	 eax, eax
  00032	89 06		 mov	 DWORD PTR [esi], eax

; 1310 : 		this->_Mylast = 0;

  00034	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1311 : 		this->_Myend = 0;

  00037	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003a	5e		 pop	 esi

; 1312 : 		}

  0003b	c3		 ret	 0
?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 1e		 je	 SHORT $LN6@Tidy@3

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0000e	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00011	50		 push	 eax
  00012	ff 76 04	 push	 DWORD PTR [esi+4]
  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0001c	ff 36		 push	 DWORD PTR [esi]
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00023	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@Tidy@3:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00026	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00029	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0002d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00031	5e		 pop	 esi

; 1312 : 		}

  00032	c3		 ret	 0
?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$556942 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	6a 28		 push	 40			; 00000028H
  00025	59		 pop	 ecx
  00026	99		 cdq
  00027	f7 f9		 idiv	 ecx
  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy
  00031	84 c0		 test	 al, al
  00033	74 1f		 je	 SHORT $LN7@vector@2

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00035	ff 75 08	 push	 DWORD PTR __Cat$556942[ebp]
  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003d	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003f	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00042	52		 push	 edx
  00043	51		 push	 ecx
  00044	50		 push	 eax
  00045	57		 push	 edi
  00046	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00049	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
  0004e	83 c4 14	 add	 esp, 20			; 00000014H
  00051	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector@2:

; 543  : 			_CATCH_END
; 544  : 		}

  00054	8b c6		 mov	 eax, esi
  00056	e8 00 00 00 00	 call	 __EH_epilog3
  0005b	c2 04 00	 ret	 4
__catch$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy

; 542  : 			_RERAISE;

  00066	33 db		 xor	 ebx, ebx
  00068	53		 push	 ebx
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector@2:
$LN37@vector@2:
  0006f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
PUBLIC	?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx

; 1292 : 		if (max_size() - _Count < _Size)

  0000d	ba ff ff ff 0f	 mov	 edx, 268435455		; 0fffffffH
  00012	2b 55 08	 sub	 edx, DWORD PTR __Count$[ebp]
  00015	c1 f8 04	 sar	 eax, 4
  00018	3b d0		 cmp	 edx, eax
  0001a	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0002a	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  0002d	2b d1		 sub	 edx, ecx
  0002f	c1 fa 04	 sar	 edx, 4
  00032	3b c2		 cmp	 eax, edx
  00034	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Grow_to
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::reserve
$LN1@Reserve:
  00046	5e		 pop	 esi

; 1298 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve
_TEXT	ENDS
PUBLIC	??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$557062 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	c1 f8 04	 sar	 eax, 4
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Buy
  0002c	84 c0		 test	 al, al
  0002e	74 1f		 je	 SHORT $LN7@vector@3

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00030	ff 75 08	 push	 DWORD PTR __Cat$557062[ebp]
  00033	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00035	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00038	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003a	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  0003d	52		 push	 edx
  0003e	51		 push	 ecx
  0003f	50		 push	 eax
  00040	57		 push	 edi
  00041	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00044	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
  00049	83 c4 14	 add	 esp, 20			; 00000014H
  0004c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector@3:

; 543  : 			_CATCH_END
; 544  : 		}

  0004f	8b c6		 mov	 eax, esi
  00051	e8 00 00 00 00	 call	 __EH_epilog3
  00056	c2 04 00	 ret	 4
__catch$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  00059	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy

; 542  : 			_RERAISE;

  00061	33 db		 xor	 ebx, ebx
  00063	53		 push	 ebx
  00064	53		 push	 ebx
  00065	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector@3:
$LN37@vector@3:
  0006a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
PUBLIC	??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T557096 = -4						; size = 4
?clear@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T557096[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@0@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::clear
_TEXT	ENDS
PUBLIC	??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0AttackAttribute@@QAE@ABU0@@Z			; AttackAttribute::AttackAttribute
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0AttackAttribute@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$2
__ehfuncinfo$??0AttackAttribute@@QAE@ABU0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0AttackAttribute@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0AttackAttribute@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0AttackAttribute@@QAE@ABU0@@Z PROC			; AttackAttribute::AttackAttribute, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0AttackAttribute@@QAE@ABU0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00014	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  0001a	57		 push	 edi
  0001b	ff d3		 call	 ebx
  0001d	d9 47 10	 fld	 DWORD PTR [edi+16]
  00020	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00024	d9 5e 10	 fstp	 DWORD PTR [esi+16]
  00027	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  0002a	50		 push	 eax
  0002b	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0002e	ff d3		 call	 ebx
  00030	d9 47 24	 fld	 DWORD PTR [edi+36]
  00033	8d 47 28	 lea	 eax, DWORD PTR [edi+40]
  00036	d9 5e 24	 fstp	 DWORD PTR [esi+36]
  00039	50		 push	 eax
  0003a	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  0003d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00041	e8 00 00 00 00	 call	 ??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
  00046	8d 47 38	 lea	 eax, DWORD PTR [edi+56]
  00049	50		 push	 eax
  0004a	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  0004d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00051	e8 00 00 00 00	 call	 ??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
  00056	8b 47 48	 mov	 eax, DWORD PTR [edi+72]
  00059	89 46 48	 mov	 DWORD PTR [esi+72], eax
  0005c	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  0005f	89 46 4c	 mov	 DWORD PTR [esi+76], eax
  00062	8b c6		 mov	 eax, esi
  00064	e8 00 00 00 00	 call	 __EH_epilog3
  00069	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 28	 add	 ecx, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
__ehhandler$??0AttackAttribute@@QAE@ABU0@@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0AttackAttribute@@QAE@ABU0@@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0AttackAttribute@@QAE@ABU0@@Z ENDP			; AttackAttribute::AttackAttribute
PUBLIC	?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::push_back
; Function compile flags: /Ogsp
;	COMDAT ?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 29		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 23		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx

; 980  : 			if (this->_Mylast == this->_Myend)

  00019	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001c	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  0001e	6a 01		 push	 1
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00027	83 e7 f0	 and	 edi, -16		; fffffff0H
  0002a	03 3e		 add	 edi, DWORD PTR [esi]
  0002c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002f	57		 push	 edi
  00030	ff 76 04	 push	 DWORD PTR [esi+4]
  00033	e8 00 00 00 00	 call	 ??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z ; std::allocator<ioHashString>::construct<ioHashString &>

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00038	eb 19		 jmp	 SHORT $LN30@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  0003a	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0003d	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0003f	6a 01		 push	 1
  00041	8b ce		 mov	 ecx, esi
  00043	e8 00 00 00 00	 call	 ?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00048	57		 push	 edi
  00049	ff 76 04	 push	 DWORD PTR [esi+4]
  0004c	e8 00 00 00 00	 call	 ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
  00051	59		 pop	 ecx
  00052	59		 pop	 ecx
$LN30@push_back:

; 996  : 			++this->_Mylast;

  00053	83 46 04 10	 add	 DWORD PTR [esi+4], 16	; 00000010H
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::push_back
_TEXT	ENDS
PUBLIC	??0AttackAttribute@@QAE@XZ			; AttackAttribute::AttackAttribute
EXTRN	?Init@AttackAttribute@@QAEXXZ:PROC		; AttackAttribute::Init
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0AttackAttribute@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$3
__ehfuncinfo$??0AttackAttribute@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0AttackAttribute@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.h
xdata$x	ENDS
;	COMDAT ??0AttackAttribute@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0AttackAttribute@@QAE@XZ PROC				; AttackAttribute::AttackAttribute, COMDAT
; _this$ = ecx

; 107  : 	AttackAttribute()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0AttackAttribute@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	ff d7		 call	 edi
  00019	33 db		 xor	 ebx, ebx
  0001b	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0001e	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00021	ff d7		 call	 edi
  00023	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00026	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00029	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
  0002c	89 5e 38	 mov	 DWORD PTR [esi+56], ebx
  0002f	89 5e 3c	 mov	 DWORD PTR [esi+60], ebx
  00032	89 5e 40	 mov	 DWORD PTR [esi+64], ebx

; 108  : 	{
; 109  : 		Init();

  00035	8b ce		 mov	 ecx, esi
  00037	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0003b	e8 00 00 00 00	 call	 ?Init@AttackAttribute@@QAEXXZ ; AttackAttribute::Init

; 110  : 	}

  00040	8b c6		 mov	 eax, esi
  00042	e8 00 00 00 00	 call	 __EH_epilog3
  00047	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AttackAttribute@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@XZ$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 28	 add	 ecx, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
__unwindfunclet$??0AttackAttribute@@QAE@XZ$3:
  00020	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	83 c1 38	 add	 ecx, 56			; 00000038H
  00026	e9 00 00 00 00	 jmp	 ??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >
__ehhandler$??0AttackAttribute@@QAE@XZ:
  0002b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00032	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0AttackAttribute@@QAE@XZ
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0AttackAttribute@@QAE@XZ ENDP				; AttackAttribute::AttackAttribute
PUBLIC	??1AttackAttribute@@QAE@XZ			; AttackAttribute::~AttackAttribute
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1AttackAttribute@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1AttackAttribute@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1AttackAttribute@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1AttackAttribute@@QAE@XZ$2
__ehfuncinfo$??1AttackAttribute@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1AttackAttribute@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1AttackAttribute@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1AttackAttribute@@QAE@XZ PROC				; AttackAttribute::~AttackAttribute, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1AttackAttribute@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  00014	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0001b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
  00020	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00023	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00027	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
  0002c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00032	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00035	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00039	ff d7		 call	 edi
  0003b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0003f	8b ce		 mov	 ecx, esi
  00041	ff d7		 call	 edi
  00043	e8 00 00 00 00	 call	 __EH_epilog3
  00048	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1AttackAttribute@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1AttackAttribute@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1AttackAttribute@@QAE@XZ$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 28	 add	 ecx, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
__ehhandler$??1AttackAttribute@@QAE@XZ:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1AttackAttribute@@QAE@XZ
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1AttackAttribute@@QAE@XZ ENDP				; AttackAttribute::~AttackAttribute
PUBLIC	??_7ioBullFightItem@@6B@			; ioBullFightItem::`vftable'
PUBLIC	??0ioBullFightItem@@QAE@XZ			; ioBullFightItem::ioBullFightItem
PUBLIC	??_R4ioBullFightItem@@6B@			; ioBullFightItem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioBullFightItem@@@8			; ioBullFightItem `RTTI Type Descriptor'
PUBLIC	??_R3ioBullFightItem@@8				; ioBullFightItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBullFightItem@@8				; ioBullFightItem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioBullFightItem@@8		; ioBullFightItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioWeaponItem@@8			; ioWeaponItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioWeaponItem@@@8			; ioWeaponItem `RTTI Type Descriptor'
PUBLIC	??_R3ioWeaponItem@@8				; ioWeaponItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWeaponItem@@8				; ioWeaponItem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioAttackableItem@@8		; ioAttackableItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioAttackableItem@@@8			; ioAttackableItem `RTTI Type Descriptor'
PUBLIC	??_R3ioAttackableItem@@8			; ioAttackableItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioAttackableItem@@8			; ioAttackableItem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioItem@@8				; ioItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioItem@@@8				; ioItem `RTTI Type Descriptor'
PUBLIC	??_R3ioItem@@8					; ioItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioItem@@8					; ioItem::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioBullFightItem@@UAEXAAVioINILoader@@@Z ; ioBullFightItem::LoadProperty
PUBLIC	?Clone@ioBullFightItem@@UAEPAVioItem@@XZ	; ioBullFightItem::Clone
PUBLIC	?IsEnableExtraGauge@ioItem@@UAE_NPAVioBaseChar@@@Z ; ioItem::IsEnableExtraGauge
PUBLIC	?GetExtraGauge@ioItem@@UAEMXZ			; ioItem::GetExtraGauge
PUBLIC	?CheckOnHand@ioAttackableItem@@UAE_NXZ		; ioAttackableItem::CheckOnHand
PUBLIC	?CheckAimState@ioAttackableItem@@UAE_N_N@Z	; ioAttackableItem::CheckAimState
PUBLIC	?SetAimState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ; ioAttackableItem::SetAimState
PUBLIC	?CheckExtendDefenseEnable@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ; ioAttackableItem::CheckExtendDefenseEnable
PUBLIC	?IsMoveAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ; ioAttackableItem::IsMoveAttackState
PUBLIC	?IsNoGhostWalk@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ; ioAttackableItem::IsNoGhostWalk
PUBLIC	?IsEnableAttackDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z ; ioAttackableItem::IsEnableAttackDashCheck
PUBLIC	?IsEnableItemDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z ; ioAttackableItem::IsEnableItemDashCheck
PUBLIC	?IsEnableAttackRotateCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ; ioAttackableItem::IsEnableAttackRotateCheck
PUBLIC	?IsEnableChargeDefenseCheck@ioAttackableItem@@UAE_NXZ ; ioAttackableItem::IsEnableChargeDefenseCheck
PUBLIC	?IsUseDefenceCounterAttackEndDash@ioAttackableItem@@UAE_NXZ ; ioAttackableItem::IsUseDefenceCounterAttackEndDash
PUBLIC	?IsAutoTarget@ioAttackableItem@@UBE_NXZ		; ioAttackableItem::IsAutoTarget
PUBLIC	?IsWoundAfterUseExtendState@ioAttackableItem@@UAE_NXZ ; ioAttackableItem::IsWoundAfterUseExtendState
PUBLIC	?CheckWoundAfterUseExtendState@ioAttackableItem@@UAE_NPAVioBaseChar@@W4BlowTargetType@@@Z ; ioAttackableItem::CheckWoundAfterUseExtendState
PUBLIC	?IsCharSkipState@ioAttackableItem@@UAE_NPBVioBaseChar@@@Z ; ioAttackableItem::IsCharSkipState
EXTRN	??1ioWeaponItem@@UAE@XZ:PROC			; ioWeaponItem::~ioWeaponItem
EXTRN	??0ioWeaponItem@@QAE@XZ:PROC			; ioWeaponItem::ioWeaponItem
EXTRN	?FindFieldEntityGrp@ioItem@@MBEABVioHashString@@XZ:PROC ; ioItem::FindFieldEntityGrp
EXTRN	?GetType@ioWeaponItem@@UBE?AW4ItemType@ioItem@@XZ:PROC ; ioWeaponItem::GetType
EXTRN	?UseCreateIndexItem@ioItem@@UBE_NXZ:PROC	; ioItem::UseCreateIndexItem
EXTRN	?GetSetFocusColor@ioItem@@UBEKXZ:PROC		; ioItem::GetSetFocusColor
EXTRN	?Initialize@ioItem@@UAEXABVioHashString@@PAVioPlayStage@@@Z:PROC ; ioItem::Initialize
EXTRN	?InitializeBeforeEquip@ioItem@@UAEXABVioHashString@@PAVioPlayStage@@@Z:PROC ; ioItem::InitializeBeforeEquip
EXTRN	?OnEquiped@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::OnEquiped
EXTRN	?OnReleased@ioWeaponItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioWeaponItem::OnReleased
EXTRN	?SetExtendEquipEffect@ioItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioItem::SetExtendEquipEffect
EXTRN	?ReleaseExtendEquipEffect@ioItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioItem::ReleaseExtendEquipEffect
EXTRN	?AddGlowLine@ioWeaponItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioWeaponItem::AddGlowLine
EXTRN	?RemoveGlowLine@ioWeaponItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioWeaponItem::RemoveGlowLine
EXTRN	?GetTargetName@ioItem@@UAE?AVioHashString@@XZ:PROC ; ioItem::GetTargetName
EXTRN	?ClearTarget@ioItem@@UAEXXZ:PROC		; ioItem::ClearTarget
EXTRN	?SetItemType@ioWeaponItem@@UAEXXZ:PROC		; ioWeaponItem::SetItemType
EXTRN	?CheckWeaponDefenseState@ioItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioItem::CheckWeaponDefenseState
EXTRN	?CheckWoundedState@ioItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioItem::CheckWoundedState
EXTRN	?SetVisible@ioItem@@UAEXPAVioBaseChar@@_N@Z:PROC ; ioItem::SetVisible
EXTRN	?UpdateSkillGauge@ioItem@@UAEXPAVioBaseChar@@M_N@Z:PROC ; ioItem::UpdateSkillGauge
EXTRN	?ReduceNeedGauge@ioItem@@UAEXMPAVioBaseChar@@@Z:PROC ; ioItem::ReduceNeedGauge
EXTRN	?GetCurSecoundBullet@ioItem@@UAEHXZ:PROC	; ioItem::GetCurSecoundBullet
EXTRN	?GetMaxSecoundBullet@ioItem@@UAEHXZ:PROC	; ioItem::GetMaxSecoundBullet
EXTRN	?SetCurSecoundBullet@ioItem@@UAEXH@Z:PROC	; ioItem::SetCurSecoundBullet
EXTRN	?GetGrowthInfoNum@ioItem@@UBEHH@Z:PROC		; ioItem::GetGrowthInfoNum
EXTRN	?GetGrowthInfoNumByType@ioItem@@UBEHHAAH@Z:PROC	; ioItem::GetGrowthInfoNumByType
EXTRN	?ClearCurChargeRateForSkill@ioItem@@UAEXXZ:PROC	; ioItem::ClearCurChargeRateForSkill
EXTRN	?GetChargeDamageRateForSkill@ioItem@@UAEMXZ:PROC ; ioItem::GetChargeDamageRateForSkill
EXTRN	?GetChargeForceRateForSkill@ioItem@@UAEMXZ:PROC	; ioItem::GetChargeForceRateForSkill
EXTRN	?GetChargeBlowRateForSkill@ioItem@@UAEMXZ:PROC	; ioItem::GetChargeBlowRateForSkill
EXTRN	?GetChargeRangeRateForSkill@ioItem@@UAEMXZ:PROC	; ioItem::GetChargeRangeRateForSkill
EXTRN	?GetChargeSpeedRateForSkill@ioItem@@UAEMXZ:PROC	; ioItem::GetChargeSpeedRateForSkill
EXTRN	?GetChargeFloatRateForSkill@ioItem@@UAEMXZ:PROC	; ioItem::GetChargeFloatRateForSkill
EXTRN	?GetChargeScaleRateForSkill@ioItem@@UAEMXZ:PROC	; ioItem::GetChargeScaleRateForSkill
EXTRN	?GetChargeExplosionRateForSkill@ioItem@@UAEMXZ:PROC ; ioItem::GetChargeExplosionRateForSkill
EXTRN	?GetChargeWoundedTimeRateForSkill@ioItem@@UAEMXZ:PROC ; ioItem::GetChargeWoundedTimeRateForSkill
EXTRN	?SetCurEquipEffect@ioItem@@UAEX_N@Z:PROC	; ioItem::SetCurEquipEffect
EXTRN	?SetCostume@ioItem@@UAEXH_N@Z:PROC		; ioItem::SetCostume
EXTRN	??_EioBullFightItem@@UAEPAXI@Z:PROC		; ioBullFightItem::`vector deleting destructor'
EXTRN	?IsCanFire@ioAttackableItem@@UBE_NPBVioBaseChar@@H_N@Z:PROC ; ioAttackableItem::IsCanFire
EXTRN	?CallItemProcess@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CallItemProcess
EXTRN	?CheckChargeInfo@ioAttackableItem@@UAEXPAVioWeapon@@_N@Z:PROC ; ioAttackableItem::CheckChargeInfo
EXTRN	?SetExtendDefenseState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetExtendDefenseState
EXTRN	?CheckExtendDefenseState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckExtendDefenseState
EXTRN	?CheckDefenseMoveAniState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckDefenseMoveAniState
EXTRN	?SetDodgeDefenseState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetDodgeDefenseState
EXTRN	?CheckDodgeDefenseState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckDodgeDefenseState
EXTRN	?ApplyDodgeDefenseState@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyDodgeDefenseState
EXTRN	?SetDefenseAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetDefenseAttackState
EXTRN	?CheckDefenseAttackState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckDefenseAttackState
EXTRN	?ApplyDefenseAttackState@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyDefenseAttackState
EXTRN	?SetExtendDashState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetExtendDashState
EXTRN	?CheckExtendDashState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckExtendDashState
EXTRN	?CheckJumpAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckJumpAttack
EXTRN	?SetJumpReloadState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetJumpReloadState
EXTRN	?SetJumpReload@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetJumpReload
EXTRN	?CheckJumpReloadState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckJumpReloadState
EXTRN	?CheckJumpReloadReserve@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckJumpReloadReserve
EXTRN	?ProcessJumpReloadState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessJumpReloadState
EXTRN	?ApplyJumpReload@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyJumpReload
EXTRN	?OnItemGaugeCancel@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::OnItemGaugeCancel
EXTRN	?OnEndExtendDefense@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::OnEndExtendDefense
EXTRN	?OnEndNormalAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::OnEndNormalAttack
EXTRN	?OnEndExtendJump@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::OnEndExtendJump
EXTRN	?FillNormalAttackExtraInfo@ioAttackableItem@@UAEXAAVSP2Packet@@@Z:PROC ; ioAttackableItem::FillNormalAttackExtraInfo
EXTRN	?ApplyNormalAttackExtraInfo@ioAttackableItem@@UAEXAAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyNormalAttackExtraInfo
EXTRN	?CheckLanding@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckLanding
EXTRN	?SetNoneState@ioAttackableItem@@UAEXPAVioBaseChar@@H@Z:PROC ; ioAttackableItem::SetNoneState
EXTRN	?IsCanUpdateGauge@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::IsCanUpdateGauge
EXTRN	?CheckAimJumpState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckAimJumpState
EXTRN	?GetJumppingAnimation@ioAttackableItem@@UBEABVioHashString@@XZ:PROC ; ioAttackableItem::GetJumppingAnimation
EXTRN	?GetExtendJumppingAnimation@ioAttackableItem@@UBEABVioHashString@@XZ:PROC ; ioAttackableItem::GetExtendJumppingAnimation
EXTRN	?CheckRetreatState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckRetreatState
EXTRN	?SetNextItemState@ioAttackableItem@@UAEXPAVioBaseChar@@0PAVioWeapon@@_NM@Z:PROC ; ioAttackableItem::SetNextItemState
EXTRN	?WeaponWounded@ioWeaponItem@@UAEXPAVioWeapon@@PAVioBaseChar@@@Z:PROC ; ioWeaponItem::WeaponWounded
EXTRN	?WeaponMapColDead@ioAttackableItem@@UAEXPAVioWeapon@@@Z:PROC ; ioAttackableItem::WeaponMapColDead
EXTRN	?SetDefenceCounterState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetDefenceCounterState
EXTRN	?IsUseDefenceCounterAttack@ioAttackableItem@@UAE_NXZ:PROC ; ioAttackableItem::IsUseDefenceCounterAttack
EXTRN	?ProcessDefenceCounterAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessDefenceCounterAttack
EXTRN	?ProcessExtraJump@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessExtraJump
EXTRN	?SetEndGrappling@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetEndGrappling
EXTRN	?ClearKeyReserve@ioAttackableItem@@MAEXXZ:PROC	; ioAttackableItem::ClearKeyReserve
EXTRN	?CheckReserve@ioAttackableItem@@MAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckReserve
EXTRN	?ProcessReserveKeyInput@ioAttackableItem@@MAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessReserveKeyInput
EXTRN	?SetJumpState@ioAttackableItem@@UAEXXZ:PROC	; ioAttackableItem::SetJumpState
EXTRN	?SetJumpping@ioAttackableItem@@UAEXPAVioBaseChar@@_N@Z:PROC ; ioAttackableItem::SetJumpping
EXTRN	?ProcessJumpping@ioAttackableItem@@UAEXPAVioBaseChar@@M@Z:PROC ; ioAttackableItem::ProcessJumpping
EXTRN	?ProcessJumppingByNoNeedProcess@ioAttackableItem@@UAEXPAVioBaseChar@@M@Z:PROC ; ioAttackableItem::ProcessJumppingByNoNeedProcess
EXTRN	?ProcessLanding@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessLanding
EXTRN	?ProcessAimJump@ioAttackableItem@@UAE_NPAVioBaseChar@@M@Z:PROC ; ioAttackableItem::ProcessAimJump
EXTRN	?ApplyJump@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyJump
EXTRN	?ApplyDash@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyDash
EXTRN	?ApplyCounterAttack@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyCounterAttack
EXTRN	?CheckComboJumpAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckComboJumpAttack
EXTRN	?SetFlashJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetFlashJumpAttack
EXTRN	?SetComboFlashAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetComboFlashAttack
EXTRN	?SetCollectJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetCollectJumpAttack
EXTRN	?SetPowerChargeJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetPowerChargeJumpAttack
EXTRN	?GetExtraJumpSpeedRate@ioAttackableItem@@UBEMABUD3DXVECTOR3@@ABUD3DXQUATERNION@@@Z:PROC ; ioAttackableItem::GetExtraJumpSpeedRate
EXTRN	?IsEnableExtendJump@ioAttackableItem@@UAE_NXZ:PROC ; ioAttackableItem::IsEnableExtendJump
EXTRN	?RecevieExtendJumpUse@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::RecevieExtendJumpUse
EXTRN	?HasAniFile@ioAttackableItem@@UBE_NW4AttackType@@H@Z:PROC ; ioAttackableItem::HasAniFile
EXTRN	?HasEndAniFile@ioAttackableItem@@UBE_NW4AttackType@@H@Z:PROC ; ioAttackableItem::HasEndAniFile
EXTRN	?GetAttackAttribute@ioAttackableItem@@UBEPBUAttackAttribute@@W4AttackType@@H@Z:PROC ; ioAttackableItem::GetAttackAttribute
EXTRN	?GetAniFile@ioAttackableItem@@UBEABVioHashString@@W4AttackType@@H@Z:PROC ; ioAttackableItem::GetAniFile
EXTRN	?GetAttackAniRate@ioAttackableItem@@UBEMW4AttackType@@H@Z:PROC ; ioAttackableItem::GetAttackAniRate
EXTRN	?GetEndAniFile@ioAttackableItem@@UBEABVioHashString@@W4AttackType@@H@Z:PROC ; ioAttackableItem::GetEndAniFile
EXTRN	?GetAttackEndAniRate@ioAttackableItem@@UBEMW4AttackType@@H@Z:PROC ; ioAttackableItem::GetAttackEndAniRate
EXTRN	?GetAttackAttributeIdx@ioAttackableItem@@UBEABV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@W4AttackType@@H@Z:PROC ; ioAttackableItem::GetAttackAttributeIdx
EXTRN	?GetForceInfoList@ioAttackableItem@@UBEABV?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@W4AttackType@@H@Z:PROC ; ioAttackableItem::GetForceInfoList
EXTRN	?GetAttackPreDelay@ioAttackableItem@@UBEKW4AttackType@@H@Z:PROC ; ioAttackableItem::GetAttackPreDelay
EXTRN	?GetAttackAnimationDelay@ioAttackableItem@@UBEKW4AttackType@@H@Z:PROC ; ioAttackableItem::GetAttackAnimationDelay
EXTRN	?GetMaxCombo@ioAttackableItem@@UBEHXZ:PROC	; ioAttackableItem::GetMaxCombo
EXTRN	?GetExtraDashAttackMax@ioAttackableItem@@UBEHXZ:PROC ; ioAttackableItem::GetExtraDashAttackMax
EXTRN	?HasJumpEndAnimation@ioAttackableItem@@UBE_N_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::HasJumpEndAnimation
EXTRN	?GetJumpEndAnimation@ioAttackableItem@@UBEABVioHashString@@_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::GetJumpEndAnimation
EXTRN	?ClearCancelInfo@ioAttackableItem@@MAEXXZ:PROC	; ioAttackableItem::ClearCancelInfo
EXTRN	?CheckCancelReserve@ioAttackableItem@@MAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckCancelReserve
EXTRN	?SetCurAttackAniForInputJump@ioAttackableItem@@MAEXABVioHashString@@M@Z:PROC ; ioAttackableItem::SetCurAttackAniForInputJump
EXTRN	?ProcessCancelBySpeicalDash@ioAttackableItem@@MAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessCancelBySpeicalDash
EXTRN	?SetCurAttackAniForInputDashS@ioAttackableItem@@UAEXABVioHashString@@M@Z:PROC ; ioAttackableItem::SetCurAttackAniForInputDashS
EXTRN	?CheckCancelReserveByConditionalSpecialDash@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckCancelReserveByConditionalSpecialDash
EXTRN	?IsConditionalSpecialDashReserve@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::IsConditionalSpecialDashReserve
EXTRN	?SetChangeConditionalSpecialDash@ioAttackableItem@@UAEXPAVioBaseChar@@W4DirKeyInput@ioUserKeyInput@@H@Z:PROC ; ioAttackableItem::SetChangeConditionalSpecialDash
EXTRN	?CheckChangeWereWolfState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckChangeWereWolfState
EXTRN	?SetChangeWereWolfState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetChangeWereWolfState
EXTRN	?CheckReleaseWereWolfState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckReleaseWereWolfState
EXTRN	?ReleseWereWolfState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ReleseWereWolfState
EXTRN	?ReleseWereWolfStateByOwner@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ReleseWereWolfStateByOwner
EXTRN	?IncreaseChangeDamage@ioAttackableItem@@UAEXMH_N@Z:PROC ; ioAttackableItem::IncreaseChangeDamage
EXTRN	?IncreaseChangeDamageByWeapon@ioAttackableItem@@UAEXM@Z:PROC ; ioAttackableItem::IncreaseChangeDamageByWeapon
EXTRN	?CheckIncreaseChangeDamage@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckIncreaseChangeDamage
EXTRN	?DecreaseChangeDamage@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::DecreaseChangeDamage
EXTRN	?IsEnableActionStopDelay@ioAttackableItem@@UAE_NXZ:PROC ; ioAttackableItem::IsEnableActionStopDelay
EXTRN	?SetExtraGaugeTypeByWeapon@ioAttackableItem@@UAEXPAVioBaseChar@@HHM@Z:PROC ; ioAttackableItem::SetExtraGaugeTypeByWeapon
EXTRN	?InitExtraGauge@ioAttackableItem@@UAEXXZ:PROC	; ioAttackableItem::InitExtraGauge
EXTRN	?MaxExtraGauge@ioAttackableItem@@UAEXXZ:PROC	; ioAttackableItem::MaxExtraGauge
EXTRN	?GetMaxExtraGauge@ioAttackableItem@@UAEMXZ:PROC	; ioAttackableItem::GetMaxExtraGauge
EXTRN	?GetCurExtraGauge@ioAttackableItem@@UAEMXZ:PROC	; ioAttackableItem::GetCurExtraGauge
EXTRN	?SetCurExtraGauge@ioAttackableItem@@UAEXM@Z:PROC ; ioAttackableItem::SetCurExtraGauge
EXTRN	?GetAutoTargetValue@ioAttackableItem@@UAEXPAVioBaseChar@@AAM11W4AutoTargetType@@@Z:PROC ; ioAttackableItem::GetAutoTargetValue
EXTRN	?ClearAirJump@ioAttackableItem@@UAEXXZ:PROC	; ioAttackableItem::ClearAirJump
EXTRN	?SetAirJump@ioAttackableItem@@UAEXPAVioBaseChar@@HM@Z:PROC ; ioAttackableItem::SetAirJump
EXTRN	?CheckAirJump@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckAirJump
EXTRN	?EquipObjectItemByAttakable@ioAttackableItem@@UAEXPAVioBaseChar@@PAVioItem@@@Z:PROC ; ioAttackableItem::EquipObjectItemByAttakable
EXTRN	?ReleaseObjectItemByAttack@ioAttackableItem@@UAEXPAVioBaseChar@@PAVioItem@@@Z:PROC ; ioAttackableItem::ReleaseObjectItemByAttack
EXTRN	?IsBuffFlyChange@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::IsBuffFlyChange
EXTRN	?SetJumpLandingExtraState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetJumpLandingExtraState
EXTRN	?ReleaseObjectState@ioWeaponItem@@UAEXPAVioBaseChar@@PAVioObjectItem@@@Z:PROC ; ioWeaponItem::ReleaseObjectState
EXTRN	?IsCmdCheckEnableTime@ioWeaponItem@@UAE_NXZ:PROC ; ioWeaponItem::IsCmdCheckEnableTime
EXTRN	?IsCmdSuccess@ioWeaponItem@@UAE_NXZ:PROC	; ioWeaponItem::IsCmdSuccess
EXTRN	?IsOneTimeWeaponItem@ioWeaponItem@@UBE_NXZ:PROC	; ioWeaponItem::IsOneTimeWeaponItem
EXTRN	?GetEquipMesh@ioWeaponItem@@UBEABVioHashString@@PAVioBaseChar@@@Z:PROC ; ioWeaponItem::GetEquipMesh
EXTRN	?IsCanSendControl@ioWeaponItem@@UBE_NXZ:PROC	; ioWeaponItem::IsCanSendControl
;	COMDAT ??_R2ioItem@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R2ioItem@@8 DD FLAT:??_R1A@?0A@EA@ioItem@@8		; ioItem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioItem@@8
rdata$r	SEGMENT
??_R3ioItem@@8 DD 00H					; ioItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioItem@@@8
_DATA	SEGMENT
??_R0?AVioItem@@@8 DD FLAT:??_7type_info@@6B@		; ioItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioItem@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioItem@@8 DD FLAT:??_R0?AVioItem@@@8	; ioItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioItem@@8
rdata$r	ENDS
;	COMDAT ??_R2ioAttackableItem@@8
rdata$r	SEGMENT
??_R2ioAttackableItem@@8 DD FLAT:??_R1A@?0A@EA@ioAttackableItem@@8 ; ioAttackableItem::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioItem@@8
rdata$r	ENDS
;	COMDAT ??_R3ioAttackableItem@@8
rdata$r	SEGMENT
??_R3ioAttackableItem@@8 DD 00H				; ioAttackableItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioAttackableItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioAttackableItem@@@8
_DATA	SEGMENT
??_R0?AVioAttackableItem@@@8 DD FLAT:??_7type_info@@6B@	; ioAttackableItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioAttackableItem@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioAttackableItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioAttackableItem@@8 DD FLAT:??_R0?AVioAttackableItem@@@8 ; ioAttackableItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioAttackableItem@@8
rdata$r	ENDS
;	COMDAT ??_R2ioWeaponItem@@8
rdata$r	SEGMENT
??_R2ioWeaponItem@@8 DD FLAT:??_R1A@?0A@EA@ioWeaponItem@@8 ; ioWeaponItem::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioAttackableItem@@8
	DD	FLAT:??_R1A@?0A@EA@ioItem@@8
rdata$r	ENDS
;	COMDAT ??_R3ioWeaponItem@@8
rdata$r	SEGMENT
??_R3ioWeaponItem@@8 DD 00H				; ioWeaponItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ioWeaponItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWeaponItem@@@8
_DATA	SEGMENT
??_R0?AVioWeaponItem@@@8 DD FLAT:??_7type_info@@6B@	; ioWeaponItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWeaponItem@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWeaponItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWeaponItem@@8 DD FLAT:??_R0?AVioWeaponItem@@@8 ; ioWeaponItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWeaponItem@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBullFightItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBullFightItem@@8 DD FLAT:??_R0?AVioBullFightItem@@@8 ; ioBullFightItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBullFightItem@@8
rdata$r	ENDS
;	COMDAT ??_R2ioBullFightItem@@8
rdata$r	SEGMENT
??_R2ioBullFightItem@@8 DD FLAT:??_R1A@?0A@EA@ioBullFightItem@@8 ; ioBullFightItem::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWeaponItem@@8
	DD	FLAT:??_R1A@?0A@EA@ioAttackableItem@@8
	DD	FLAT:??_R1A@?0A@EA@ioItem@@8
rdata$r	ENDS
;	COMDAT ??_R3ioBullFightItem@@8
rdata$r	SEGMENT
??_R3ioBullFightItem@@8 DD 00H				; ioBullFightItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2ioBullFightItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBullFightItem@@@8
_DATA	SEGMENT
??_R0?AVioBullFightItem@@@8 DD FLAT:??_7type_info@@6B@	; ioBullFightItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBullFightItem@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioBullFightItem@@6B@
rdata$r	SEGMENT
??_R4ioBullFightItem@@6B@ DD 00H			; ioBullFightItem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioBullFightItem@@@8
	DD	FLAT:??_R3ioBullFightItem@@8
rdata$r	ENDS
;	COMDAT ??_7ioBullFightItem@@6B@
CONST	SEGMENT
??_7ioBullFightItem@@6B@ DD FLAT:??_R4ioBullFightItem@@6B@ ; ioBullFightItem::`vftable'
	DD	FLAT:?FindFieldEntityGrp@ioItem@@MBEABVioHashString@@XZ
	DD	FLAT:?LoadProperty@ioBullFightItem@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?GetType@ioWeaponItem@@UBE?AW4ItemType@ioItem@@XZ
	DD	FLAT:?Clone@ioBullFightItem@@UAEPAVioItem@@XZ
	DD	FLAT:?UseCreateIndexItem@ioItem@@UBE_NXZ
	DD	FLAT:?GetSetFocusColor@ioItem@@UBEKXZ
	DD	FLAT:?Initialize@ioItem@@UAEXABVioHashString@@PAVioPlayStage@@@Z
	DD	FLAT:?InitializeBeforeEquip@ioItem@@UAEXABVioHashString@@PAVioPlayStage@@@Z
	DD	FLAT:?OnEquiped@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?OnReleased@ioWeaponItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetExtendEquipEffect@ioItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ReleaseExtendEquipEffect@ioItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?AddGlowLine@ioWeaponItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?RemoveGlowLine@ioWeaponItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?GetTargetName@ioItem@@UAE?AVioHashString@@XZ
	DD	FLAT:?ClearTarget@ioItem@@UAEXXZ
	DD	FLAT:?SetItemType@ioWeaponItem@@UAEXXZ
	DD	FLAT:?UpdateExtraData@ioBullFightItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckWeaponDefenseState@ioItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckWoundedState@ioItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetVisible@ioItem@@UAEXPAVioBaseChar@@_N@Z
	DD	FLAT:?UpdateSkillGauge@ioItem@@UAEXPAVioBaseChar@@M_N@Z
	DD	FLAT:?IsEnableExtraGauge@ioItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetExtraGauge@ioItem@@UAEMXZ
	DD	FLAT:?ReduceNeedGauge@ioItem@@UAEXMPAVioBaseChar@@@Z
	DD	FLAT:?GetCurBullet@ioBullFightItem@@UAEHXZ
	DD	FLAT:?GetMaxBullet@ioBullFightItem@@UAEHXZ
	DD	FLAT:?SetCurBullet@ioBullFightItem@@UAEXH@Z
	DD	FLAT:?GetCurSecoundBullet@ioItem@@UAEHXZ
	DD	FLAT:?GetMaxSecoundBullet@ioItem@@UAEHXZ
	DD	FLAT:?SetCurSecoundBullet@ioItem@@UAEXH@Z
	DD	FLAT:?GetGrowthInfoNum@ioItem@@UBEHH@Z
	DD	FLAT:?GetGrowthInfoNumByType@ioItem@@UBEHHAAH@Z
	DD	FLAT:?ClearCurChargeRateForSkill@ioItem@@UAEXXZ
	DD	FLAT:?GetChargeDamageRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeForceRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeBlowRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeRangeRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeSpeedRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeFloatRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeScaleRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeExplosionRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeWoundedTimeRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?SetCurEquipEffect@ioItem@@UAEX_N@Z
	DD	FLAT:?SetCostume@ioItem@@UAEXH_N@Z
	DD	FLAT:??_EioBullFightItem@@UAEPAXI@Z
	DD	FLAT:?IsCanFire@ioAttackableItem@@UBE_NPBVioBaseChar@@H_N@Z
	DD	FLAT:?CallItemProcess@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetExtraInfoToWeapon@ioBullFightItem@@UAEXPAVioWeapon@@_N@Z
	DD	FLAT:?CheckChargeInfo@ioAttackableItem@@UAEXPAVioWeapon@@_N@Z
	DD	FLAT:?SetExtendDefenseState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckExtendDefenseState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckDefenseMoveAniState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetDodgeDefenseState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckDodgeDefenseState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ApplyDodgeDefenseState@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?SetDefenseAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckDefenseAttackState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ApplyDefenseAttackState@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?SetExtendDashState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckExtendDashState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetNormalAttack@ioBullFightItem@@UAEXPAVioBaseChar@@H@Z
	DD	FLAT:?CheckNormalAttack@ioBullFightItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetJumpAttack@ioBullFightItem@@UAE_NPAVioBaseChar@@HMW4AttackType@@@Z
	DD	FLAT:?CheckJumpAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetJumpReloadState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetJumpReload@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckJumpReloadState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckJumpReloadReserve@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessJumpReloadState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ApplyJumpReload@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?OnItemGaugeOK@ioBullFightItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?OnItemGaugeCancel@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?OnEndExtendDefense@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?OnEndNormalAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?OnEndExtendAttack@ioBullFightItem@@UAEXPAVioBaseChar@@_N@Z
	DD	FLAT:?OnEndExtendJump@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?FillNormalAttackExtraInfo@ioAttackableItem@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyNormalAttackExtraInfo@ioAttackableItem@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?CheckOnHand@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?CheckAimState@ioAttackableItem@@UAE_N_N@Z
	DD	FLAT:?SetAimState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckLanding@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetNoneState@ioAttackableItem@@UAEXPAVioBaseChar@@H@Z
	DD	FLAT:?CheckExtendDefenseEnable@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsChargeAttackState@ioBullFightItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsMoveAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanUpdateGauge@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsNoGhostWalk@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableAttackDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z
	DD	FLAT:?IsEnableItemDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z
	DD	FLAT:?IsEnableAttackRotateCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableChargeDefenseCheck@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?CheckAimJumpState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?GetJumppingAnimation@ioAttackableItem@@UBEABVioHashString@@XZ
	DD	FLAT:?GetExtendJumppingAnimation@ioAttackableItem@@UBEABVioHashString@@XZ
	DD	FLAT:?CheckRetreatState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetNextItemState@ioAttackableItem@@UAEXPAVioBaseChar@@0PAVioWeapon@@_NM@Z
	DD	FLAT:?WeaponWounded@ioWeaponItem@@UAEXPAVioWeapon@@PAVioBaseChar@@@Z
	DD	FLAT:?WeaponMapColDead@ioAttackableItem@@UAEXPAVioWeapon@@@Z
	DD	FLAT:?SetDefenceCounterState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsUseDefenceCounterAttack@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?ProcessDefenceCounterAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsUseDefenceCounterAttackEndDash@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?ProcessExtraJump@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetEndGrappling@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ClearKeyReserve@ioAttackableItem@@MAEXXZ
	DD	FLAT:?CheckReserve@ioAttackableItem@@MAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessReserveKeyInput@ioAttackableItem@@MAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetJumpState@ioAttackableItem@@UAEXXZ
	DD	FLAT:?SetJumpping@ioAttackableItem@@UAEXPAVioBaseChar@@_N@Z
	DD	FLAT:?ProcessJumpping@ioAttackableItem@@UAEXPAVioBaseChar@@M@Z
	DD	FLAT:?ProcessJumppingByNoNeedProcess@ioAttackableItem@@UAEXPAVioBaseChar@@M@Z
	DD	FLAT:?ProcessLanding@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessJumpAttack@ioBullFightItem@@UAEXPAVioBaseChar@@M@Z
	DD	FLAT:?ProcessAimJump@ioAttackableItem@@UAE_NPAVioBaseChar@@M@Z
	DD	FLAT:?ApplyJump@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?ApplyDash@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?ApplyCounterAttack@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?CheckComboJumpAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetFlashJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetComboFlashAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetCollectJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetPowerChargeJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetAttackSpeedRate@ioBullFightItem@@UBEMXZ
	DD	FLAT:?GetExtraJumpSpeedRate@ioAttackableItem@@UBEMABUD3DXVECTOR3@@ABUD3DXQUATERNION@@@Z
	DD	FLAT:?IsEnableExtendJump@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?RecevieExtendJumpUse@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?HasAniFile@ioAttackableItem@@UBE_NW4AttackType@@H@Z
	DD	FLAT:?HasEndAniFile@ioAttackableItem@@UBE_NW4AttackType@@H@Z
	DD	FLAT:?GetAttackAttribute@ioAttackableItem@@UBEPBUAttackAttribute@@W4AttackType@@H@Z
	DD	FLAT:?GetAniFile@ioAttackableItem@@UBEABVioHashString@@W4AttackType@@H@Z
	DD	FLAT:?GetAttackAniRate@ioAttackableItem@@UBEMW4AttackType@@H@Z
	DD	FLAT:?GetEndAniFile@ioAttackableItem@@UBEABVioHashString@@W4AttackType@@H@Z
	DD	FLAT:?GetAttackEndAniRate@ioAttackableItem@@UBEMW4AttackType@@H@Z
	DD	FLAT:?GetAttackAttributeIdx@ioAttackableItem@@UBEABV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@W4AttackType@@H@Z
	DD	FLAT:?GetForceInfoList@ioAttackableItem@@UBEABV?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@W4AttackType@@H@Z
	DD	FLAT:?GetAttackPreDelay@ioAttackableItem@@UBEKW4AttackType@@H@Z
	DD	FLAT:?GetAttackAnimationDelay@ioAttackableItem@@UBEKW4AttackType@@H@Z
	DD	FLAT:?GetMaxCombo@ioAttackableItem@@UBEHXZ
	DD	FLAT:?GetExtraDashAttackMax@ioAttackableItem@@UBEHXZ
	DD	FLAT:?HasJumpEndAnimation@ioAttackableItem@@UBE_N_NPAVioBaseChar@@@Z
	DD	FLAT:?GetJumpEndAnimation@ioAttackableItem@@UBEABVioHashString@@_NPAVioBaseChar@@@Z
	DD	FLAT:?ClearCancelInfo@ioAttackableItem@@MAEXXZ
	DD	FLAT:?CheckCancelReserve@ioAttackableItem@@MAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetCurAttackAniForInputJump@ioAttackableItem@@MAEXABVioHashString@@M@Z
	DD	FLAT:?ProcessCancel@ioBullFightItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?ProcessCancelBySpeicalDash@ioAttackableItem@@MAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetCurAttackAniForInputDashS@ioAttackableItem@@UAEXABVioHashString@@M@Z
	DD	FLAT:?CheckCancelReserveByConditionalSpecialDash@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsConditionalSpecialDashReserve@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetChangeConditionalSpecialDash@ioAttackableItem@@UAEXPAVioBaseChar@@W4DirKeyInput@ioUserKeyInput@@H@Z
	DD	FLAT:?CheckChangeWereWolfState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetChangeWereWolfState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckReleaseWereWolfState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?ReleseWereWolfState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ReleseWereWolfStateByOwner@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IncreaseChangeDamage@ioAttackableItem@@UAEXMH_N@Z
	DD	FLAT:?IncreaseChangeDamageByWeapon@ioAttackableItem@@UAEXM@Z
	DD	FLAT:?CheckIncreaseChangeDamage@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?DecreaseChangeDamage@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableActionStopDelay@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?SetExtraGaugeTypeByWeapon@ioAttackableItem@@UAEXPAVioBaseChar@@HHM@Z
	DD	FLAT:?SetUseExtraGauge@ioBullFightItem@@UAEXM@Z
	DD	FLAT:?InitExtraGauge@ioAttackableItem@@UAEXXZ
	DD	FLAT:?MaxExtraGauge@ioAttackableItem@@UAEXXZ
	DD	FLAT:?GetMaxExtraGauge@ioAttackableItem@@UAEMXZ
	DD	FLAT:?GetCurExtraGauge@ioAttackableItem@@UAEMXZ
	DD	FLAT:?SetCurExtraGauge@ioAttackableItem@@UAEXM@Z
	DD	FLAT:?GetAutoTargetValue@ioAttackableItem@@UAEXPAVioBaseChar@@AAM11W4AutoTargetType@@@Z
	DD	FLAT:?ClearAirJump@ioAttackableItem@@UAEXXZ
	DD	FLAT:?SetAirJump@ioAttackableItem@@UAEXPAVioBaseChar@@HM@Z
	DD	FLAT:?CheckAirJump@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsAutoTarget@ioAttackableItem@@UBE_NXZ
	DD	FLAT:?EquipObjectItemByAttakable@ioAttackableItem@@UAEXPAVioBaseChar@@PAVioItem@@@Z
	DD	FLAT:?ReleaseObjectItemByAttack@ioAttackableItem@@UAEXPAVioBaseChar@@PAVioItem@@@Z
	DD	FLAT:?IsBuffFlyChange@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetAttackStateText@ioBullFightItem@@UBEPBDXZ
	DD	FLAT:?SetJumpLandingExtraState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsWoundAfterUseExtendState@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?CheckWoundAfterUseExtendState@ioAttackableItem@@UAE_NPAVioBaseChar@@W4BlowTargetType@@@Z
	DD	FLAT:?IsCharSkipState@ioAttackableItem@@UAE_NPBVioBaseChar@@@Z
	DD	FLAT:?ReleaseObjectState@ioWeaponItem@@UAEXPAVioBaseChar@@PAVioObjectItem@@@Z
	DD	FLAT:?IsCmdCheckEnableTime@ioWeaponItem@@UAE_NXZ
	DD	FLAT:?IsCmdSuccess@ioWeaponItem@@UAE_NXZ
	DD	FLAT:?IsOneTimeWeaponItem@ioWeaponItem@@UBE_NXZ
	DD	FLAT:?GetEquipMesh@ioWeaponItem@@UBEABVioHashString@@PAVioBaseChar@@@Z
	DD	FLAT:?IsCanSendControl@ioWeaponItem@@UBE_NXZ
	DD	FLAT:?GetSubType@ioBullFightItem@@UBE?AW4WeaponSubType@ioWeaponItem@@XZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0ioBullFightItem@@QAE@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0ioBullFightItem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0ioBullFightItem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioBullFightItem@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioBullFightItem@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioBullFightItem@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ioBullFightItem@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0ioBullFightItem@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0ioBullFightItem@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0ioBullFightItem@@QAE@XZ$6
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobullfightitem.cpp
xdata$x	ENDS
;	COMDAT ??0ioBullFightItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioBullFightItem@@QAE@XZ PROC				; ioBullFightItem::ioBullFightItem, COMDAT
; _this$ = ecx

; 12   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioBullFightItem@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioWeaponItem@@QAE@XZ	; ioWeaponItem::ioWeaponItem
  00016	33 db		 xor	 ebx, ebx
  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioBullFightItem@@6B@
  0001e	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00021	89 9e 58 19 00
	00		 mov	 DWORD PTR [esi+6488], ebx
  00027	89 9e 5c 19 00
	00		 mov	 DWORD PTR [esi+6492], ebx
  0002d	89 9e 60 19 00
	00		 mov	 DWORD PTR [esi+6496], ebx
  00033	8d 8e 68 19 00
	00		 lea	 ecx, DWORD PTR [esi+6504]
  00039	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0003d	e8 00 00 00 00	 call	 ??0AttackAttribute@@QAE@XZ ; AttackAttribute::AttackAttribute
  00042	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00048	8d 8e b8 19 00
	00		 lea	 ecx, DWORD PTR [esi+6584]
  0004e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00052	ff d7		 call	 edi
  00054	8d 8e cc 19 00
	00		 lea	 ecx, DWORD PTR [esi+6604]
  0005a	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0005e	ff d7		 call	 edi
  00060	8d 8e e8 19 00
	00		 lea	 ecx, DWORD PTR [esi+6632]
  00066	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0006a	e8 00 00 00 00	 call	 ??0AttackAttribute@@QAE@XZ ; AttackAttribute::AttackAttribute
  0006f	89 9e 38 1a 00
	00		 mov	 DWORD PTR [esi+6712], ebx
  00075	89 9e 3c 1a 00
	00		 mov	 DWORD PTR [esi+6716], ebx
  0007b	89 9e 40 1a 00
	00		 mov	 DWORD PTR [esi+6720], ebx

; 13   : 	Init();

  00081	8b ce		 mov	 ecx, esi
  00083	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00087	e8 00 00 00 00	 call	 ?Init@ioBullFightItem@@IAEXXZ ; ioBullFightItem::Init

; 14   : }

  0008c	8b c6		 mov	 eax, esi
  0008e	e8 00 00 00 00	 call	 __EH_epilog3
  00093	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioBullFightItem@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioWeaponItem@@UAE@XZ	; ioWeaponItem::~ioWeaponItem
__unwindfunclet$??0ioBullFightItem@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 58 19 00
	00		 add	 ecx, 6488		; 00001958H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
__unwindfunclet$??0ioBullFightItem@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 68 19 00
	00		 add	 ecx, 6504		; 00001968H
  0001f	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__unwindfunclet$??0ioBullFightItem@@QAE@XZ$3:
  00024	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	81 c1 b8 19 00
	00		 add	 ecx, 6584		; 000019b8H
  0002d	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioBullFightItem@@QAE@XZ$4:
  00033	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	81 c1 cc 19 00
	00		 add	 ecx, 6604		; 000019ccH
  0003c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioBullFightItem@@QAE@XZ$5:
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	81 c1 e8 19 00
	00		 add	 ecx, 6632		; 000019e8H
  0004b	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__unwindfunclet$??0ioBullFightItem@@QAE@XZ$6:
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	81 c1 38 1a 00
	00		 add	 ecx, 6712		; 00001a38H
  00059	e9 00 00 00 00	 jmp	 ??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
__ehhandler$??0ioBullFightItem@@QAE@XZ:
  0005e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00062	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00065	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00068	33 c8		 xor	 ecx, eax
  0006a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioBullFightItem@@QAE@XZ
  00074	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioBullFightItem@@QAE@XZ ENDP				; ioBullFightItem::ioBullFightItem
PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioitem.h
_TEXT	ENDS
;	COMDAT ?IsEnableExtraGauge@ioItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?IsEnableExtraGauge@ioItem@@UAE_NPAVioBaseChar@@@Z PROC	; ioItem::IsEnableExtraGauge, COMDAT
; _this$ = ecx

; 375  : 	virtual bool IsEnableExtraGauge( ioBaseChar *pChar ) { return true; }

  00000	b0 01		 mov	 al, 1
  00002	c2 04 00	 ret	 4
?IsEnableExtraGauge@ioItem@@UAE_NPAVioBaseChar@@@Z ENDP	; ioItem::IsEnableExtraGauge
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetExtraGauge@ioItem@@UAEMXZ
_TEXT	SEGMENT
tv64 = -4						; size = 4
?GetExtraGauge@ioItem@@UAEMXZ PROC			; ioItem::GetExtraGauge, COMDAT
; _this$ = ecx

; 376  : 	virtual float GetExtraGauge() { return FLOAT1; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	b8 01 00 00 00	 mov	 eax, 1
  00009	89 45 fc	 mov	 DWORD PTR tv64[ebp], eax
  0000c	db 45 fc	 fild	 DWORD PTR tv64[ebp]
  0000f	85 c0		 test	 eax, eax
  00011	79 06		 jns	 SHORT $LN5@GetExtraGa
  00013	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN5@GetExtraGa:
  00019	c9		 leave
  0001a	c3		 ret	 0
?GetExtraGauge@ioItem@@UAEMXZ ENDP			; ioItem::GetExtraGauge
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackableitem.h
_TEXT	ENDS
;	COMDAT ?CheckOnHand@ioAttackableItem@@UAE_NXZ
_TEXT	SEGMENT
?CheckOnHand@ioAttackableItem@@UAE_NXZ PROC		; ioAttackableItem::CheckOnHand, COMDAT
; _this$ = ecx

; 429  : 	virtual bool CheckOnHand() { return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?CheckOnHand@ioAttackableItem@@UAE_NXZ ENDP		; ioAttackableItem::CheckOnHand
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?CheckAimState@ioAttackableItem@@UAE_N_N@Z
_TEXT	SEGMENT
_bAimMove$ = 8						; size = 1
?CheckAimState@ioAttackableItem@@UAE_N_N@Z PROC		; ioAttackableItem::CheckAimState, COMDAT
; _this$ = ecx

; 430  : 	virtual bool CheckAimState( bool bAimMove = false ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?CheckAimState@ioAttackableItem@@UAE_N_N@Z ENDP		; ioAttackableItem::CheckAimState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?SetAimState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?SetAimState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioAttackableItem::SetAimState, COMDAT
; _this$ = ecx

; 431  : 	virtual bool SetAimState( ioBaseChar *pChar ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?SetAimState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioAttackableItem::SetAimState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?CheckExtendDefenseEnable@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?CheckExtendDefenseEnable@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioAttackableItem::CheckExtendDefenseEnable, COMDAT
; _this$ = ecx

; 434  : 	virtual bool CheckExtendDefenseEnable( ioBaseChar *pChar ) { return true; }

  00000	b0 01		 mov	 al, 1
  00002	c2 04 00	 ret	 4
?CheckExtendDefenseEnable@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioAttackableItem::CheckExtendDefenseEnable
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsMoveAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsMoveAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioAttackableItem::IsMoveAttackState, COMDAT
; _this$ = ecx

; 437  : 	virtual bool IsMoveAttackState( ioBaseChar *pOwner ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsMoveAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioAttackableItem::IsMoveAttackState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsNoGhostWalk@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsNoGhostWalk@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioAttackableItem::IsNoGhostWalk, COMDAT
; _this$ = ecx

; 439  : 	virtual bool IsNoGhostWalk( ioBaseChar *pOwner ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsNoGhostWalk@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioAttackableItem::IsNoGhostWalk
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsEnableAttackDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_bCheck$ = 12						; size = 1
?IsEnableAttackDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z PROC ; ioAttackableItem::IsEnableAttackDashCheck, COMDAT
; _this$ = ecx

; 441  : 	virtual bool IsEnableAttackDashCheck( ioBaseChar *pOwner, bool bCheck ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 08 00	 ret	 8
?IsEnableAttackDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z ENDP ; ioAttackableItem::IsEnableAttackDashCheck
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsEnableItemDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_bCheck$ = 12						; size = 1
?IsEnableItemDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z PROC ; ioAttackableItem::IsEnableItemDashCheck, COMDAT
; _this$ = ecx

; 442  : 	virtual bool IsEnableItemDashCheck( ioBaseChar *pOwner, bool bCheck ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 08 00	 ret	 8
?IsEnableItemDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z ENDP ; ioAttackableItem::IsEnableItemDashCheck
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsEnableAttackRotateCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsEnableAttackRotateCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioAttackableItem::IsEnableAttackRotateCheck, COMDAT
; _this$ = ecx

; 443  : 	virtual bool IsEnableAttackRotateCheck( ioBaseChar *pOwner ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsEnableAttackRotateCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioAttackableItem::IsEnableAttackRotateCheck
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsEnableChargeDefenseCheck@ioAttackableItem@@UAE_NXZ
_TEXT	SEGMENT
?IsEnableChargeDefenseCheck@ioAttackableItem@@UAE_NXZ PROC ; ioAttackableItem::IsEnableChargeDefenseCheck, COMDAT
; _this$ = ecx

; 444  : 	virtual bool IsEnableChargeDefenseCheck() { return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsEnableChargeDefenseCheck@ioAttackableItem@@UAE_NXZ ENDP ; ioAttackableItem::IsEnableChargeDefenseCheck
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsUseDefenceCounterAttackEndDash@ioAttackableItem@@UAE_NXZ
_TEXT	SEGMENT
?IsUseDefenceCounterAttackEndDash@ioAttackableItem@@UAE_NXZ PROC ; ioAttackableItem::IsUseDefenceCounterAttackEndDash, COMDAT
; _this$ = ecx

; 464  : 	virtual bool IsUseDefenceCounterAttackEndDash() { return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsUseDefenceCounterAttackEndDash@ioAttackableItem@@UAE_NXZ ENDP ; ioAttackableItem::IsUseDefenceCounterAttackEndDash
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsAutoTarget@ioAttackableItem@@UBE_NXZ
_TEXT	SEGMENT
?IsAutoTarget@ioAttackableItem@@UBE_NXZ PROC		; ioAttackableItem::IsAutoTarget, COMDAT
; _this$ = ecx

; 707  : 	virtual bool IsAutoTarget() const { return true; }

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?IsAutoTarget@ioAttackableItem@@UBE_NXZ ENDP		; ioAttackableItem::IsAutoTarget
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsWoundAfterUseExtendState@ioAttackableItem@@UAE_NXZ
_TEXT	SEGMENT
?IsWoundAfterUseExtendState@ioAttackableItem@@UAE_NXZ PROC ; ioAttackableItem::IsWoundAfterUseExtendState, COMDAT
; _this$ = ecx

; 724  : 	virtual bool IsWoundAfterUseExtendState(){ return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsWoundAfterUseExtendState@ioAttackableItem@@UAE_NXZ ENDP ; ioAttackableItem::IsWoundAfterUseExtendState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?CheckWoundAfterUseExtendState@ioAttackableItem@@UAE_NPAVioBaseChar@@W4BlowTargetType@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_eType$ = 12						; size = 4
?CheckWoundAfterUseExtendState@ioAttackableItem@@UAE_NPAVioBaseChar@@W4BlowTargetType@@@Z PROC ; ioAttackableItem::CheckWoundAfterUseExtendState, COMDAT
; _this$ = ecx

; 725  : 	virtual bool CheckWoundAfterUseExtendState( ioBaseChar* pOwner, BlowTargetType eType ){ return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 08 00	 ret	 8
?CheckWoundAfterUseExtendState@ioAttackableItem@@UAE_NPAVioBaseChar@@W4BlowTargetType@@@Z ENDP ; ioAttackableItem::CheckWoundAfterUseExtendState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsCharSkipState@ioAttackableItem@@UAE_NPBVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsCharSkipState@ioAttackableItem@@UAE_NPBVioBaseChar@@@Z PROC ; ioAttackableItem::IsCharSkipState, COMDAT
; _this$ = ecx

; 728  : 	virtual bool IsCharSkipState( const ioBaseChar* pOwner ){ return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsCharSkipState@ioAttackableItem@@UAE_NPBVioBaseChar@@@Z ENDP ; ioAttackableItem::IsCharSkipState
_TEXT	ENDS
PUBLIC	??0ioBullFightItem@@QAE@ABV0@@Z			; ioBullFightItem::ioBullFightItem
EXTRN	??0ioWeaponItem@@QAE@ABV0@@Z:PROC		; ioWeaponItem::ioWeaponItem
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobullfightitem.cpp
xdata$x	SEGMENT
__ehfuncinfo$??0ioBullFightItem@@QAE@ABV0@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0ioBullFightItem@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0ioBullFightItem@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioBullFightItem@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioBullFightItem@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioBullFightItem@@QAE@ABV0@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ioBullFightItem@@QAE@ABV0@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0ioBullFightItem@@QAE@ABV0@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0ioBullFightItem@@QAE@ABV0@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0ioBullFightItem@@QAE@ABV0@@Z$6
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioBullFightItem@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioBullFightItem@@QAE@ABV0@@Z PROC			; ioBullFightItem::ioBullFightItem, COMDAT
; _this$ = ecx

; 29   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioBullFightItem@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0ioWeaponItem@@QAE@ABV0@@Z ; ioWeaponItem::ioWeaponItem
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioBullFightItem@@6B@
  00024	d9 87 54 19 00
	00		 fld	 DWORD PTR [edi+6484]
  0002a	8d 87 58 19 00
	00		 lea	 eax, DWORD PTR [edi+6488]
  00030	d9 9e 54 19 00
	00		 fstp	 DWORD PTR [esi+6484]
  00036	50		 push	 eax
  00037	8d 8e 58 19 00
	00		 lea	 ecx, DWORD PTR [esi+6488]
  0003d	e8 00 00 00 00	 call	 ??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
  00042	8d 87 68 19 00
	00		 lea	 eax, DWORD PTR [edi+6504]
  00048	50		 push	 eax
  00049	8d 8e 68 19 00
	00		 lea	 ecx, DWORD PTR [esi+6504]
  0004f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00053	e8 00 00 00 00	 call	 ??0AttackAttribute@@QAE@ABU0@@Z
  00058	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  0005e	8d 87 b8 19 00
	00		 lea	 eax, DWORD PTR [edi+6584]
  00064	50		 push	 eax
  00065	8d 8e b8 19 00
	00		 lea	 ecx, DWORD PTR [esi+6584]
  0006b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0006f	ff d3		 call	 ebx
  00071	d9 87 c8 19 00
	00		 fld	 DWORD PTR [edi+6600]
  00077	8d 87 cc 19 00
	00		 lea	 eax, DWORD PTR [edi+6604]
  0007d	d9 9e c8 19 00
	00		 fstp	 DWORD PTR [esi+6600]
  00083	50		 push	 eax
  00084	8d 8e cc 19 00
	00		 lea	 ecx, DWORD PTR [esi+6604]
  0008a	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0008e	ff d3		 call	 ebx
  00090	d9 87 dc 19 00
	00		 fld	 DWORD PTR [edi+6620]
  00096	d9 9e dc 19 00
	00		 fstp	 DWORD PTR [esi+6620]
  0009c	8d 8e e8 19 00
	00		 lea	 ecx, DWORD PTR [esi+6632]
  000a2	d9 87 e0 19 00
	00		 fld	 DWORD PTR [edi+6624]
  000a8	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000ac	d9 9e e0 19 00
	00		 fstp	 DWORD PTR [esi+6624]
  000b2	8b 87 e4 19 00
	00		 mov	 eax, DWORD PTR [edi+6628]
  000b8	89 86 e4 19 00
	00		 mov	 DWORD PTR [esi+6628], eax
  000be	8d 87 e8 19 00
	00		 lea	 eax, DWORD PTR [edi+6632]
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ??0AttackAttribute@@QAE@ABU0@@Z
  000ca	81 c7 38 1a 00
	00		 add	 edi, 6712		; 00001a38H
  000d0	57		 push	 edi
  000d1	8d 8e 38 1a 00
	00		 lea	 ecx, DWORD PTR [esi+6712]
  000d7	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  000db	e8 00 00 00 00	 call	 ??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >

; 30   : 	Init();

  000e0	8b ce		 mov	 ecx, esi
  000e2	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000e6	e8 00 00 00 00	 call	 ?Init@ioBullFightItem@@IAEXXZ ; ioBullFightItem::Init

; 31   : }

  000eb	8b c6		 mov	 eax, esi
  000ed	e8 00 00 00 00	 call	 __EH_epilog3
  000f2	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioBullFightItem@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioWeaponItem@@UAE@XZ	; ioWeaponItem::~ioWeaponItem
__unwindfunclet$??0ioBullFightItem@@QAE@ABV0@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 58 19 00
	00		 add	 ecx, 6488		; 00001958H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
__unwindfunclet$??0ioBullFightItem@@QAE@ABV0@@Z$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 68 19 00
	00		 add	 ecx, 6504		; 00001968H
  0001f	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__unwindfunclet$??0ioBullFightItem@@QAE@ABV0@@Z$3:
  00024	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	81 c1 b8 19 00
	00		 add	 ecx, 6584		; 000019b8H
  0002d	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioBullFightItem@@QAE@ABV0@@Z$4:
  00033	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	81 c1 cc 19 00
	00		 add	 ecx, 6604		; 000019ccH
  0003c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioBullFightItem@@QAE@ABV0@@Z$5:
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	81 c1 e8 19 00
	00		 add	 ecx, 6632		; 000019e8H
  0004b	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__unwindfunclet$??0ioBullFightItem@@QAE@ABV0@@Z$6:
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	81 c1 38 1a 00
	00		 add	 ecx, 6712		; 00001a38H
  00059	e9 00 00 00 00	 jmp	 ??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
__ehhandler$??0ioBullFightItem@@QAE@ABV0@@Z:
  0005e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00062	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00065	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00068	33 c8		 xor	 ecx, eax
  0006a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioBullFightItem@@QAE@ABV0@@Z
  00074	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioBullFightItem@@QAE@ABV0@@Z ENDP			; ioBullFightItem::ioBullFightItem
PUBLIC	??1ioBullFightItem@@UAE@XZ			; ioBullFightItem::~ioBullFightItem
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__ehfuncinfo$??1ioBullFightItem@@UAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??1ioBullFightItem@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1ioBullFightItem@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioBullFightItem@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioBullFightItem@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1ioBullFightItem@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1ioBullFightItem@@UAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1ioBullFightItem@@UAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1ioBullFightItem@@UAE@XZ$5
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobullfightitem.cpp
xdata$x	ENDS
;	COMDAT ??1ioBullFightItem@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioBullFightItem@@UAE@XZ PROC				; ioBullFightItem::~ioBullFightItem, COMDAT
; _this$ = ecx

; 34   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioBullFightItem@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioBullFightItem@@6B@

; 35   : }

  00017	8d 8e 38 1a 00
	00		 lea	 ecx, DWORD PTR [esi+6712]
  0001d	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  00024	e8 00 00 00 00	 call	 ?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
  00029	8d 8e e8 19 00
	00		 lea	 ecx, DWORD PTR [esi+6632]
  0002f	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00033	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  00038	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0003e	8d 8e cc 19 00
	00		 lea	 ecx, DWORD PTR [esi+6604]
  00044	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00048	ff d7		 call	 edi
  0004a	8d 8e b8 19 00
	00		 lea	 ecx, DWORD PTR [esi+6584]
  00050	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00054	ff d7		 call	 edi
  00056	8d 8e 68 19 00
	00		 lea	 ecx, DWORD PTR [esi+6504]
  0005c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00060	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  00065	8d 8e 58 19 00
	00		 lea	 ecx, DWORD PTR [esi+6488]
  0006b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0006f	e8 00 00 00 00	 call	 ?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
  00074	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00078	8b ce		 mov	 ecx, esi
  0007a	e8 00 00 00 00	 call	 ??1ioWeaponItem@@UAE@XZ	; ioWeaponItem::~ioWeaponItem
  0007f	e8 00 00 00 00	 call	 __EH_epilog3
  00084	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioBullFightItem@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioWeaponItem@@UAE@XZ	; ioWeaponItem::~ioWeaponItem
__unwindfunclet$??1ioBullFightItem@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 58 19 00
	00		 add	 ecx, 6488		; 00001958H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
__unwindfunclet$??1ioBullFightItem@@UAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 68 19 00
	00		 add	 ecx, 6504		; 00001968H
  0001f	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__unwindfunclet$??1ioBullFightItem@@UAE@XZ$3:
  00024	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	81 c1 b8 19 00
	00		 add	 ecx, 6584		; 000019b8H
  0002d	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioBullFightItem@@UAE@XZ$4:
  00033	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	81 c1 cc 19 00
	00		 add	 ecx, 6604		; 000019ccH
  0003c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioBullFightItem@@UAE@XZ$5:
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	81 c1 e8 19 00
	00		 add	 ecx, 6632		; 000019e8H
  0004b	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__ehhandler$??1ioBullFightItem@@UAE@XZ:
  00050	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00054	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00057	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0005a	33 c8		 xor	 ecx, eax
  0005c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00061	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioBullFightItem@@UAE@XZ
  00066	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioBullFightItem@@UAE@XZ ENDP				; ioBullFightItem::~ioBullFightItem
PUBLIC	??_C@_0O@HMIHFEJP@extend_attack?$AA@		; `string'
PUBLIC	??_C@_0O@MIFKMNNO@charge_attack?$AA@		; `string'
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z:PROC ; LoadAttackAttribute
EXTRN	__imp__wsprintfA:PROC
EXTRN	?LoadProperty@ioWeaponItem@@UAEXAAVioINILoader@@@Z:PROC ; ioWeaponItem::LoadProperty
;	COMDAT ??_C@_0O@HMIHFEJP@extend_attack?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_0O@HMIHFEJP@extend_attack?$AA@ DB 'extend_attack', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MIFKMNNO@charge_attack?$AA@
CONST	SEGMENT
??_C@_0O@MIFKMNNO@charge_attack?$AA@ DB 'charge_attack', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadProperty@ioBullFightItem@@UAEXAAVioINILoader@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadProperty@ioBullFightItem@@UAEXAAVioINILoader@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadProperty@ioBullFightItem@@UAEXAAVioINILoader@@@Z$1
__ehfuncinfo$?LoadProperty@ioBullFightItem@@UAEXAAVioINILoader@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadProperty@ioBullFightItem@@UAEXAAVioINILoader@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobullfightitem.cpp
xdata$x	ENDS
;	COMDAT ?LoadProperty@ioBullFightItem@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
$T557476 = -620						; size = 16
tv7918 = -604						; size = 4
_nBuffCnt$ = -604					; size = 4
tv8395 = -600						; size = 4
$T558553 = -600						; size = 4
_nPreCount$ = -600					; size = 4
_szKey$ = -596						; size = 260
_szBuf$ = -336						; size = 260
___encStr$548139 = -76					; size = 25
__k$558269 = -44					; size = 23
__k$558144 = -44					; size = 21
__k$557881 = -44					; size = 22
__k$558599 = -40					; size = 16
__k$558394 = -40					; size = 17
__k$558006 = -40					; size = 16
__k$557770 = -40					; size = 17
__k$557507 = -40					; size = 17
___encStr$548353 = -36					; size = 14
$T557475 = -36						; size = 16
__k$557632 = -32					; size = 10
__$EHRec$ = -12						; size = 12
_rkLoader$ = 8						; size = 4
?LoadProperty@ioBullFightItem@@UAEXAAVioINILoader@@@Z PROC ; ioBullFightItem::LoadProperty, COMDAT
; _this$ = ecx

; 40   : {

  00000	68 60 02 00 00	 push	 608			; 00000260H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?LoadProperty@ioBullFightItem@@UAEXAAVioINILoader@@@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 41   : 	ioWeaponItem::LoadProperty( rkLoader );

  00012	57		 push	 edi
  00013	8b f1		 mov	 esi, ecx
  00015	e8 00 00 00 00	 call	 ?LoadProperty@ioWeaponItem@@UAEXAAVioINILoader@@@Z ; ioWeaponItem::LoadProperty

; 42   : 
; 43   : 	char szBuf[MAX_PATH], szKey[MAX_PATH];
; 44   : 
; 45   : 	m_fNeedGauge = rkLoader.LoadFloat_e( "need_extra_gauge", 100.0f );

  0001a	33 db		 xor	 ebx, ebx
  0001c	6a 04		 push	 4
  0001e	c7 45 d8 83 89
	8e 8e		 mov	 DWORD PTR __k$557507[ebp], -1903261309 ; 8e8e8983H
  00025	c7 45 dc b2 89
	93 9e		 mov	 DWORD PTR __k$557507[ebp+4], -1634498126 ; 9e9389b2H
  0002c	c7 45 e0 9f 8d
	b4 8d		 mov	 DWORD PTR __k$557507[ebp+8], -1917547105 ; 8db48d9fH
  00033	c7 45 e4 8c 99
	8c 8f		 mov	 DWORD PTR __k$557507[ebp+12], -1886611060 ; 8f8c998cH
  0003a	8d 45 d8	 lea	 eax, DWORD PTR __k$557507[ebp]
  0003d	88 5d e8	 mov	 BYTE PTR __k$557507[ebp+16], bl
  00040	59		 pop	 ecx
$LL312@LoadProper:
  00041	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00047	83 c0 04	 add	 eax, 4
  0004a	49		 dec	 ecx
  0004b	75 f4		 jne	 SHORT $LL312@LoadProper
  0004d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00055	51		 push	 ecx
  00056	8d 45 d8	 lea	 eax, DWORD PTR __k$557507[ebp]
  00059	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005e	50		 push	 eax
  0005f	8b cf		 mov	 ecx, edi
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00067	d9 9e 54 19 00
	00		 fstp	 DWORD PTR [esi+6484]
  0006d	6a 02		 push	 2

; 46   : 
; 47   : 	int nPreCount = rkLoader.LoadInt_e( "max_combo", 0 );

  0006f	c7 45 e0 80 8d
	93 b5		 mov	 DWORD PTR __k$557632[ebp], -1248621184 ; b5938d80H
  00076	c7 45 e4 8e 83
	86 88		 mov	 DWORD PTR __k$557632[ebp+4], -2004450418 ; 8886838eH
  0007d	8d 45 e0	 lea	 eax, DWORD PTR __k$557632[ebp]
  00080	66 c7 45 e8 82
	00		 mov	 WORD PTR __k$557632[ebp+8], 130 ; 00000082H
  00086	59		 pop	 ecx
$LL418@LoadProper:
  00087	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0008d	83 c0 04	 add	 eax, 4
  00090	49		 dec	 ecx
  00091	75 f4		 jne	 SHORT $LL418@LoadProper
  00093	80 75 e8 ed	 xor	 BYTE PTR __k$557632[ebp+8], -19 ; ffffffedH
  00097	53		 push	 ebx
  00098	8d 45 e0	 lea	 eax, DWORD PTR __k$557632[ebp]
  0009b	50		 push	 eax
  0009c	8b cf		 mov	 ecx, edi
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 48   : 	for( int i=0; i<nPreCount; ++i )

  000a4	33 c9		 xor	 ecx, ecx
  000a6	89 85 a8 fd ff
	ff		 mov	 DWORD PTR _nPreCount$[ebp], eax
  000ac	3b c3		 cmp	 eax, ebx
  000ae	0f 8e b8 00 00
	00		 jle	 $LN202@LoadProper
$LL204@LoadProper:

; 46   : 
; 47   : 	int nPreCount = rkLoader.LoadInt_e( "max_combo", 0 );

  000b4	6a 06		 push	 6

; 49   : 	{
; 50   : 		wsprintf_e( szBuf, "attack_ready_animation%d", i+1 );

  000b6	c7 45 b4 8c 98
	9f 8b		 mov	 DWORD PTR ___encStr$548139[ebp], -1952474996 ; 8b9f988cH
  000bd	c7 45 b8 8e 87
	b4 98		 mov	 DWORD PTR ___encStr$548139[ebp+4], -1732999282 ; 98b4878eH
  000c4	c7 45 bc 88 8d
	8f 93		 mov	 DWORD PTR ___encStr$548139[ebp+8], -1819308664 ; 938f8d88H
  000cb	c7 45 c0 b2 8d
	85 83		 mov	 DWORD PTR ___encStr$548139[ebp+12], -2088399438 ; 83858db2H
  000d2	c7 45 c4 80 8d
	9f 83		 mov	 DWORD PTR ___encStr$548139[ebp+16], -2086695552 ; 839f8d80H
  000d9	c7 45 c8 82 82
	ce 8e		 mov	 DWORD PTR ___encStr$548139[ebp+20], -1899068798 ; 8ece8282H
  000e0	8d 45 b4	 lea	 eax, DWORD PTR ___encStr$548139[ebp]
  000e3	88 5d cc	 mov	 BYTE PTR ___encStr$548139[ebp+24], bl
  000e6	5a		 pop	 edx
$LL426@LoadProper:
  000e7	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000ed	83 c0 04	 add	 eax, 4
  000f0	4a		 dec	 edx
  000f1	75 f4		 jne	 SHORT $LL426@LoadProper
  000f3	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  000f6	50		 push	 eax
  000f7	89 85 a4 fd ff
	ff		 mov	 DWORD PTR tv7918[ebp], eax
  000fd	8d 45 b4	 lea	 eax, DWORD PTR ___encStr$548139[ebp]
  00100	50		 push	 eax
  00101	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00107	50		 push	 eax
  00108	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  0010e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 51   : 		rkLoader.LoadString( szBuf, "", szBuf, MAX_PATH );

  00111	68 04 01 00 00	 push	 260			; 00000104H
  00116	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0011c	50		 push	 eax
  0011d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00122	50		 push	 eax
  00123	8b cf		 mov	 ecx, edi
  00125	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 52   : 		m_szPreGatherAniList.push_back( szBuf );

  0012b	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00131	50		 push	 eax
  00132	8d 4d dc	 lea	 ecx, DWORD PTR $T557475[ebp]
  00135	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0013b	8d 45 dc	 lea	 eax, DWORD PTR $T557475[ebp]
  0013e	50		 push	 eax
  0013f	8d 8e 58 19 00
	00		 lea	 ecx, DWORD PTR [esi+6488]
  00145	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00148	e8 00 00 00 00	 call	 ?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::push_back
  0014d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00151	8d 4d dc	 lea	 ecx, DWORD PTR $T557475[ebp]
  00154	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0015a	8b 8d a4 fd ff
	ff		 mov	 ecx, DWORD PTR tv7918[ebp]
  00160	3b 8d a8 fd ff
	ff		 cmp	 ecx, DWORD PTR _nPreCount$[ebp]
  00166	0f 8c 48 ff ff
	ff		 jl	 $LL204@LoadProper
$LN202@LoadProper:

; 53   : 	}
; 54   : 	
; 55   : 	LoadAttackAttribute( "charge_attack", m_ChargeAttackAttribute, rkLoader );	

  0016c	57		 push	 edi
  0016d	8d 86 68 19 00
	00		 lea	 eax, DWORD PTR [esi+6504]
  00173	50		 push	 eax
  00174	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MIFKMNNO@charge_attack?$AA@
  00179	e8 00 00 00 00	 call	 ?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z ; LoadAttackAttribute
  0017e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00181	6a 04		 push	 4

; 56   : 
; 57   : 	rkLoader.LoadString_e( "extend_delay_ani", "", szBuf, MAX_PATH );

  00183	c7 45 d8 88 94
	9f 8f		 mov	 DWORD PTR __k$557770[ebp], -1885367160 ; 8f9f9488H
  0018a	c7 45 dc 83 88
	b4 8e		 mov	 DWORD PTR __k$557770[ebp+4], -1900771197 ; 8eb48883H
  00191	c7 45 e0 88 80
	8a 93		 mov	 DWORD PTR __k$557770[ebp+8], -1819639672 ; 938a8088H
  00198	c7 45 e4 b2 8d
	85 83		 mov	 DWORD PTR __k$557770[ebp+12], -2088399438 ; 83858db2H
  0019f	8d 45 d8	 lea	 eax, DWORD PTR __k$557770[ebp]
  001a2	88 5d e8	 mov	 BYTE PTR __k$557770[ebp+16], bl
  001a5	59		 pop	 ecx
$LL532@LoadProper:
  001a6	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001ac	83 c0 04	 add	 eax, 4
  001af	49		 dec	 ecx
  001b0	75 f4		 jne	 SHORT $LL532@LoadProper
  001b2	68 04 01 00 00	 push	 260			; 00000104H
  001b7	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  001bd	50		 push	 eax
  001be	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  001c3	8d 45 d8	 lea	 eax, DWORD PTR __k$557770[ebp]
  001c6	50		 push	 eax
  001c7	8b cf		 mov	 ecx, edi
  001c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 58   : 	m_szExtendDelayAni = szBuf;	

  001cf	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  001d5	50		 push	 eax
  001d6	8d 8e b8 19 00
	00		 lea	 ecx, DWORD PTR [esi+6584]
  001dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  001e2	6a 05		 push	 5

; 59   : 	m_fExtendDelayAniRate = rkLoader.LoadFloat_e( "extend_delay_ani_rate", 1.0f );

  001e4	c7 45 d4 88 94
	9f 8f		 mov	 DWORD PTR __k$557881[ebp], -1885367160 ; 8f9f9488H
  001eb	c7 45 d8 83 88
	b4 8e		 mov	 DWORD PTR __k$557881[ebp+4], -1900771197 ; 8eb48883H
  001f2	c7 45 dc 88 80
	8a 93		 mov	 DWORD PTR __k$557881[ebp+8], -1819639672 ; 938a8088H
  001f9	c7 45 e0 b2 8d
	85 83		 mov	 DWORD PTR __k$557881[ebp+12], -2088399438 ; 83858db2H
  00200	c7 45 e4 b2 9e
	8a 9e		 mov	 DWORD PTR __k$557881[ebp+16], -1635082574 ; 9e8a9eb2H
  00207	8d 45 d4	 lea	 eax, DWORD PTR __k$557881[ebp]
  0020a	66 c7 45 e8 88
	00		 mov	 WORD PTR __k$557881[ebp+20], 136 ; 00000088H
  00210	59		 pop	 ecx
$LL638@LoadProper:
  00211	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00217	83 c0 04	 add	 eax, 4
  0021a	49		 dec	 ecx
  0021b	75 f4		 jne	 SHORT $LL638@LoadProper
  0021d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00225	80 75 e8 ed	 xor	 BYTE PTR __k$557881[ebp+20], -19 ; ffffffedH
  00229	51		 push	 ecx
  0022a	8d 45 d4	 lea	 eax, DWORD PTR __k$557881[ebp]
  0022d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00232	50		 push	 eax
  00233	8b cf		 mov	 ecx, edi
  00235	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0023b	d9 9e c8 19 00
	00		 fstp	 DWORD PTR [esi+6600]
  00241	6a 03		 push	 3

; 60   : 
; 61   : 	rkLoader.LoadString_e( "extend_move_ani", "", szBuf, MAX_PATH );

  00243	c7 45 d8 88 94
	9f 8f		 mov	 DWORD PTR __k$558006[ebp], -1885367160 ; 8f9f9488H
  0024a	c7 45 dc 83 88
	b4 87		 mov	 DWORD PTR __k$558006[ebp+4], -2018211709 ; 87b48883H
  00251	c7 45 e0 82 9a
	8e b5		 mov	 DWORD PTR __k$558006[ebp+8], -1248945534 ; b58e9a82H
  00258	8d 45 d8	 lea	 eax, DWORD PTR __k$558006[ebp]
  0025b	c7 45 e4 8c 82
	82 00		 mov	 DWORD PTR __k$558006[ebp+12], 8553100 ; 0082828cH
  00262	59		 pop	 ecx
$LL744@LoadProper:
  00263	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00269	83 c0 04	 add	 eax, 4
  0026c	49		 dec	 ecx
  0026d	75 f4		 jne	 SHORT $LL744@LoadProper
  0026f	6a 0c		 push	 12			; 0000000cH
  00271	58		 pop	 eax
$LL741@LoadProper:
  00272	8b c8		 mov	 ecx, eax
  00274	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0027a	79 05		 jns	 SHORT $LN1246@LoadProper
  0027c	49		 dec	 ecx
  0027d	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00280	41		 inc	 ecx
$LN1246@LoadProper:
  00281	b2 ed		 mov	 dl, -19			; ffffffedH
  00283	2a d1		 sub	 dl, cl
  00285	30 54 05 d8	 xor	 BYTE PTR __k$558006[ebp+eax], dl
  00289	40		 inc	 eax
  0028a	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  0028d	7c e3		 jl	 SHORT $LL741@LoadProper
  0028f	68 04 01 00 00	 push	 260			; 00000104H
  00294	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0029a	50		 push	 eax
  0029b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  002a0	8d 45 d8	 lea	 eax, DWORD PTR __k$558006[ebp]
  002a3	50		 push	 eax
  002a4	8b cf		 mov	 ecx, edi
  002a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 62   : 	m_szExtendMoveAni = szBuf;	

  002ac	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  002b2	50		 push	 eax
  002b3	8d 8e cc 19 00
	00		 lea	 ecx, DWORD PTR [esi+6604]
  002b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  002bf	6a 05		 push	 5

; 63   : 	m_fExtendMoveAniRate = rkLoader.LoadFloat_e( "extend_move_ani_rate", 1.0f );

  002c1	c7 45 d4 88 94
	9f 8f		 mov	 DWORD PTR __k$558144[ebp], -1885367160 ; 8f9f9488H
  002c8	c7 45 d8 83 88
	b4 87		 mov	 DWORD PTR __k$558144[ebp+4], -2018211709 ; 87b48883H
  002cf	c7 45 dc 82 9a
	8e b5		 mov	 DWORD PTR __k$558144[ebp+8], -1248945534 ; b58e9a82H
  002d6	c7 45 e0 8c 82
	82 b5		 mov	 DWORD PTR __k$558144[ebp+12], -1249738100 ; b582828cH
  002dd	c7 45 e4 9f 8d
	9f 8f		 mov	 DWORD PTR __k$558144[ebp+16], -1885368929 ; 8f9f8d9fH
  002e4	8d 45 d4	 lea	 eax, DWORD PTR __k$558144[ebp]
  002e7	88 5d e8	 mov	 BYTE PTR __k$558144[ebp+20], bl
  002ea	59		 pop	 ecx
$LL850@LoadProper:
  002eb	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002f1	83 c0 04	 add	 eax, 4
  002f4	49		 dec	 ecx
  002f5	75 f4		 jne	 SHORT $LL850@LoadProper
  002f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002ff	51		 push	 ecx
  00300	8d 45 d4	 lea	 eax, DWORD PTR __k$558144[ebp]
  00303	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00308	50		 push	 eax
  00309	8b cf		 mov	 ecx, edi
  0030b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00311	d9 9e dc 19 00
	00		 fstp	 DWORD PTR [esi+6620]
  00317	6a 05		 push	 5

; 64   : 
; 65   : 	m_fExtendMoveSpeedRate	= rkLoader.LoadFloat_e( "extend_move_speed_rate", 0.0f );

  00319	c7 45 d4 88 94
	9f 8f		 mov	 DWORD PTR __k$558269[ebp], -1885367160 ; 8f9f9488H
  00320	c7 45 d8 83 88
	b4 87		 mov	 DWORD PTR __k$558269[ebp+4], -2018211709 ; 87b48883H
  00327	c7 45 dc 82 9a
	8e b5		 mov	 DWORD PTR __k$558269[ebp+8], -1248945534 ; b58e9a82H
  0032e	c7 45 e0 9e 9c
	8e 8f		 mov	 DWORD PTR __k$558269[ebp+12], -1886479202 ; 8f8e9c9eH
  00335	c7 45 e4 89 b3
	99 8b		 mov	 DWORD PTR __k$558269[ebp+16], -1952861303 ; 8b99b389H
  0033c	66 c7 45 e8 99
	89		 mov	 WORD PTR __k$558269[ebp+20], 35225 ; 00008999H
  00342	8d 45 d4	 lea	 eax, DWORD PTR __k$558269[ebp]
  00345	88 5d ea	 mov	 BYTE PTR __k$558269[ebp+22], bl
  00348	59		 pop	 ecx
$LL956@LoadProper:
  00349	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0034f	83 c0 04	 add	 eax, 4
  00352	49		 dec	 ecx
  00353	75 f4		 jne	 SHORT $LL956@LoadProper
  00355	6a 14		 push	 20			; 00000014H
  00357	58		 pop	 eax
$LL953@LoadProper:
  00358	8b c8		 mov	 ecx, eax
  0035a	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00360	79 05		 jns	 SHORT $LN1247@LoadProper
  00362	49		 dec	 ecx
  00363	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00366	41		 inc	 ecx
$LN1247@LoadProper:
  00367	b2 ed		 mov	 dl, -19			; ffffffedH
  00369	2a d1		 sub	 dl, cl
  0036b	30 54 05 d4	 xor	 BYTE PTR __k$558269[ebp+eax], dl
  0036f	40		 inc	 eax
  00370	83 f8 16	 cmp	 eax, 22			; 00000016H
  00373	7c e3		 jl	 SHORT $LL953@LoadProper
  00375	0f 57 c0	 xorps	 xmm0, xmm0
  00378	51		 push	 ecx
  00379	8d 45 d4	 lea	 eax, DWORD PTR __k$558269[ebp]
  0037c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00381	50		 push	 eax
  00382	8b cf		 mov	 ecx, edi
  00384	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0038a	d9 9e e0 19 00
	00		 fstp	 DWORD PTR [esi+6624]
  00390	6a 04		 push	 4

; 66   : 
; 67   : 	m_dwExtendMoveLoopTime = rkLoader.LoadInt_e( "extend_move_time", 0 );

  00392	c7 45 d8 88 94
	9f 8f		 mov	 DWORD PTR __k$558394[ebp], -1885367160 ; 8f9f9488H
  00399	c7 45 dc 83 88
	b4 87		 mov	 DWORD PTR __k$558394[ebp+4], -2018211709 ; 87b48883H
  003a0	c7 45 e0 82 9a
	8e b5		 mov	 DWORD PTR __k$558394[ebp+8], -1248945534 ; b58e9a82H
  003a7	c7 45 e4 99 85
	86 8f		 mov	 DWORD PTR __k$558394[ebp+12], -1887009383 ; 8f868599H
  003ae	8d 45 d8	 lea	 eax, DWORD PTR __k$558394[ebp]
  003b1	88 5d e8	 mov	 BYTE PTR __k$558394[ebp+16], bl
  003b4	59		 pop	 ecx
$LL1062@LoadProper:
  003b5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  003bb	83 c0 04	 add	 eax, 4
  003be	49		 dec	 ecx
  003bf	75 f4		 jne	 SHORT $LL1062@LoadProper
  003c1	53		 push	 ebx
  003c2	8d 45 d8	 lea	 eax, DWORD PTR __k$558394[ebp]
  003c5	50		 push	 eax
  003c6	8b cf		 mov	 ecx, edi
  003c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  003ce	89 86 e4 19 00
	00		 mov	 DWORD PTR [esi+6628], eax

; 68   : 	
; 69   : 	LoadAttackAttribute( "extend_attack", m_ExtendAttackAttribute, rkLoader );	

  003d4	57		 push	 edi
  003d5	8d 86 e8 19 00
	00		 lea	 eax, DWORD PTR [esi+6632]
  003db	50		 push	 eax
  003dc	68 00 00 00 00	 push	 OFFSET ??_C@_0O@HMIHFEJP@extend_attack?$AA@
  003e1	e8 00 00 00 00	 call	 ?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z ; LoadAttackAttribute

; 70   : 
; 71   : 	m_szExtendBuffList.clear();

  003e6	8b 86 3c 1a 00
	00		 mov	 eax, DWORD PTR [esi+6716]
  003ec	8b 8e 38 1a 00
	00		 mov	 ecx, DWORD PTR [esi+6712]
  003f2	83 c4 0c	 add	 esp, 12			; 0000000cH
  003f5	50		 push	 eax
  003f6	51		 push	 ecx
  003f7	8d 85 a8 fd ff
	ff		 lea	 eax, DWORD PTR $T558553[ebp]
  003fd	50		 push	 eax
  003fe	8d 8e 38 1a 00
	00		 lea	 ecx, DWORD PTR [esi+6712]
  00404	e8 00 00 00 00	 call	 ?erase@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@0@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::erase
  00409	6a 03		 push	 3

; 72   : 
; 73   : 	int nBuffCnt = rkLoader.LoadInt_e( "extend_buff_cnt", 0 );

  0040b	c7 45 d8 88 94
	9f 8f		 mov	 DWORD PTR __k$558599[ebp], -1885367160 ; 8f9f9488H
  00412	c7 45 dc 83 88
	b4 88		 mov	 DWORD PTR __k$558599[ebp+4], -2001434493 ; 88b48883H
  00419	c7 45 e0 98 8a
	8d b5		 mov	 DWORD PTR __k$558599[ebp+8], -1249015144 ; b58d8a98H
  00420	8d 45 d8	 lea	 eax, DWORD PTR __k$558599[ebp]
  00423	c7 45 e4 8e 82
	9f 00		 mov	 DWORD PTR __k$558599[ebp+12], 10453646 ; 009f828eH
  0042a	59		 pop	 ecx
$LL1186@LoadProper:
  0042b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00431	83 c0 04	 add	 eax, 4
  00434	49		 dec	 ecx
  00435	75 f4		 jne	 SHORT $LL1186@LoadProper
  00437	6a 0c		 push	 12			; 0000000cH
  00439	58		 pop	 eax
$LL1183@LoadProper:
  0043a	8b c8		 mov	 ecx, eax
  0043c	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00442	79 05		 jns	 SHORT $LN1248@LoadProper
  00444	49		 dec	 ecx
  00445	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00448	41		 inc	 ecx
$LN1248@LoadProper:
  00449	b2 ed		 mov	 dl, -19			; ffffffedH
  0044b	2a d1		 sub	 dl, cl
  0044d	30 54 05 d8	 xor	 BYTE PTR __k$558599[ebp+eax], dl
  00451	40		 inc	 eax
  00452	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00455	7c e3		 jl	 SHORT $LL1183@LoadProper
  00457	53		 push	 ebx
  00458	8d 45 d8	 lea	 eax, DWORD PTR __k$558599[ebp]
  0045b	50		 push	 eax
  0045c	8b cf		 mov	 ecx, edi
  0045e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 74   : 	for( int i=0; i<nBuffCnt; i++ )

  00464	33 c9		 xor	 ecx, ecx
  00466	89 85 a4 fd ff
	ff		 mov	 DWORD PTR _nBuffCnt$[ebp], eax
  0046c	3b c3		 cmp	 eax, ebx
  0046e	0f 8e bd 00 00
	00		 jle	 $LN100@LoadProper
$LL102@LoadProper:

; 72   : 
; 73   : 	int nBuffCnt = rkLoader.LoadInt_e( "extend_buff_cnt", 0 );

  00474	6a 03		 push	 3

; 75   : 	{
; 76   : 		wsprintf_e( szKey, "extend_buff%d", i+1 );

  00476	c7 45 dc 88 94
	9f 8f		 mov	 DWORD PTR ___encStr$548353[ebp], -1885367160 ; 8f9f9488H
  0047d	c7 45 e0 83 88
	b4 88		 mov	 DWORD PTR ___encStr$548353[ebp+4], -2001434493 ; 88b48883H
  00484	c7 45 e4 98 8a
	8d cf		 mov	 DWORD PTR ___encStr$548353[ebp+8], -812807528 ; cf8d8a98H
  0048b	8d 45 dc	 lea	 eax, DWORD PTR ___encStr$548353[ebp]
  0048e	66 c7 45 e8 89
	00		 mov	 WORD PTR ___encStr$548353[ebp+12], 137 ; 00000089H
  00494	5a		 pop	 edx
$LL1194@LoadProper:
  00495	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0049b	83 c0 04	 add	 eax, 4
  0049e	4a		 dec	 edx
  0049f	75 f4		 jne	 SHORT $LL1194@LoadProper
  004a1	80 75 e8 ed	 xor	 BYTE PTR ___encStr$548353[ebp+12], -19 ; ffffffedH
  004a5	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  004a8	50		 push	 eax
  004a9	89 85 a8 fd ff
	ff		 mov	 DWORD PTR tv8395[ebp], eax
  004af	8d 45 dc	 lea	 eax, DWORD PTR ___encStr$548353[ebp]
  004b2	50		 push	 eax
  004b3	8d 85 ac fd ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  004b9	50		 push	 eax
  004ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  004c0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 77   : 		rkLoader.LoadString( szKey, "", szBuf, MAX_PATH );

  004c3	68 04 01 00 00	 push	 260			; 00000104H
  004c8	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  004ce	50		 push	 eax
  004cf	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  004d4	8d 85 ac fd ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  004da	50		 push	 eax
  004db	8b cf		 mov	 ecx, edi
  004dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 78   : 		m_szExtendBuffList.push_back( szBuf );

  004e3	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  004e9	50		 push	 eax
  004ea	8d 8d 94 fd ff
	ff		 lea	 ecx, DWORD PTR $T557476[ebp]
  004f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  004f6	8d 85 94 fd ff
	ff		 lea	 eax, DWORD PTR $T557476[ebp]
  004fc	50		 push	 eax
  004fd	8d 8e 38 1a 00
	00		 lea	 ecx, DWORD PTR [esi+6712]
  00503	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0050a	e8 00 00 00 00	 call	 ?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::push_back
  0050f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00513	8d 8d 94 fd ff
	ff		 lea	 ecx, DWORD PTR $T557476[ebp]
  00519	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0051f	8b 8d a8 fd ff
	ff		 mov	 ecx, DWORD PTR tv8395[ebp]
  00525	3b 8d a4 fd ff
	ff		 cmp	 ecx, DWORD PTR _nBuffCnt$[ebp]
  0052b	0f 8c 43 ff ff
	ff		 jl	 $LL102@LoadProper
$LN100@LoadProper:

; 79   : 	}
; 80   : }

  00531	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00536	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadProperty@ioBullFightItem@@UAEXAAVioINILoader@@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR $T557475[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?LoadProperty@ioBullFightItem@@UAEXAAVioINILoader@@@Z$1:
  00009	8d 8d 94 fd ff
	ff		 lea	 ecx, DWORD PTR $T557476[ebp]
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?LoadProperty@ioBullFightItem@@UAEXAAVioINILoader@@@Z:
  00015	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00019	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001c	8b 8a 90 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-624]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadProperty@ioBullFightItem@@UAEXAAVioINILoader@@@Z
  00038	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadProperty@ioBullFightItem@@UAEXAAVioINILoader@@@Z ENDP ; ioBullFightItem::LoadProperty
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioBullFightItem@@UAEPAVioItem@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioBullFightItem@@UAEPAVioItem@@XZ$0
__ehfuncinfo$?Clone@ioBullFightItem@@UAEPAVioItem@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioBullFightItem@@UAEPAVioItem@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioBullFightItem@@UAEPAVioItem@@XZ
_TEXT	SEGMENT
$T558770 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioBullFightItem@@UAEPAVioItem@@XZ PROC		; ioBullFightItem::Clone, COMDAT
; _this$ = ecx

; 83   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioBullFightItem@@UAEPAVioItem@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 84   : 	return new ioBullFightItem( *this );

  0000e	68 64 1a 00 00	 push	 6756			; 00001a64H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T558770[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioBullFightItem@@QAE@ABV0@@Z ; ioBullFightItem::ioBullFightItem
$LN3@Clone:

; 85   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioBullFightItem@@UAEPAVioItem@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T558770[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioBullFightItem@@UAEPAVioItem@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioBullFightItem@@UAEPAVioItem@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioBullFightItem@@UAEPAVioItem@@XZ ENDP		; ioBullFightItem::Clone
; Function compile flags: /Ogsp
;	COMDAT ??_GioBullFightItem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioBullFightItem@@UAEPAXI@Z PROC			; ioBullFightItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioBullFightItem@@UAE@XZ ; ioBullFightItem::~ioBullFightItem
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@4
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@4:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioBullFightItem@@UAEPAXI@Z ENDP			; ioBullFightItem::`scalar deleting destructor'
_TEXT	ENDS
END
