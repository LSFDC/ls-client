; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\Crc32Static.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?s_arrdwCrc32Table@CCrc32Static@@1PAKA		; CCrc32Static::s_arrdwCrc32Table
_DATA	SEGMENT
?s_arrdwCrc32Table@CCrc32Static@@1PAKA DD 00H		; CCrc32Static::s_arrdwCrc32Table
	DD	077073096H
	DD	0ee0e612cH
	DD	0990951baH
	DD	076dc419H
	DD	0706af48fH
	DD	0e963a535H
	DD	09e6495a3H
	DD	0edb8832H
	DD	079dcb8a4H
	DD	0e0d5e91eH
	DD	097d2d988H
	DD	09b64c2bH
	DD	07eb17cbdH
	DD	0e7b82d07H
	DD	090bf1d91H
	DD	01db71064H
	DD	06ab020f2H
	DD	0f3b97148H
	DD	084be41deH
	DD	01adad47dH
	DD	06ddde4ebH
	DD	0f4d4b551H
	DD	083d385c7H
	DD	0136c9856H
	DD	0646ba8c0H
	DD	0fd62f97aH
	DD	08a65c9ecH
	DD	014015c4fH
	DD	063066cd9H
	DD	0fa0f3d63H
	DD	08d080df5H
	DD	03b6e20c8H
	DD	04c69105eH
	DD	0d56041e4H
	DD	0a2677172H
	DD	03c03e4d1H
	DD	04b04d447H
	DD	0d20d85fdH
	DD	0a50ab56bH
	DD	035b5a8faH
	DD	042b2986cH
	DD	0dbbbc9d6H
	DD	0acbcf940H
	DD	032d86ce3H
	DD	045df5c75H
	DD	0dcd60dcfH
	DD	0abd13d59H
	DD	026d930acH
	DD	051de003aH
	DD	0c8d75180H
	DD	0bfd06116H
	DD	021b4f4b5H
	DD	056b3c423H
	DD	0cfba9599H
	DD	0b8bda50fH
	DD	02802b89eH
	DD	05f058808H
	DD	0c60cd9b2H
	DD	0b10be924H
	DD	02f6f7c87H
	DD	058684c11H
	DD	0c1611dabH
	DD	0b6662d3dH
	DD	076dc4190H
	DD	01db7106H
	DD	098d220bcH
	DD	0efd5102aH
	DD	071b18589H
	DD	06b6b51fH
	DD	09fbfe4a5H
	DD	0e8b8d433H
	DD	07807c9a2H
	DD	0f00f934H
	DD	09609a88eH
	DD	0e10e9818H
	DD	07f6a0dbbH
	DD	086d3d2dH
	DD	091646c97H
	DD	0e6635c01H
	DD	06b6b51f4H
	DD	01c6c6162H
	DD	0856530d8H
	DD	0f262004eH
	DD	06c0695edH
	DD	01b01a57bH
	DD	08208f4c1H
	DD	0f50fc457H
	DD	065b0d9c6H
	DD	012b7e950H
	DD	08bbeb8eaH
	DD	0fcb9887cH
	DD	062dd1ddfH
	DD	015da2d49H
	DD	08cd37cf3H
	DD	0fbd44c65H
	DD	04db26158H
	DD	03ab551ceH
	DD	0a3bc0074H
	DD	0d4bb30e2H
	DD	04adfa541H
	DD	03dd895d7H
	DD	0a4d1c46dH
	DD	0d3d6f4fbH
	DD	04369e96aH
	DD	0346ed9fcH
	DD	0ad678846H
	DD	0da60b8d0H
	DD	044042d73H
	DD	033031de5H
	DD	0aa0a4c5fH
	DD	0dd0d7cc9H
	DD	05005713cH
	DD	0270241aaH
	DD	0be0b1010H
	DD	0c90c2086H
	DD	05768b525H
	DD	0206f85b3H
	DD	0b966d409H
	DD	0ce61e49fH
	DD	05edef90eH
	DD	029d9c998H
	DD	0b0d09822H
	DD	0c7d7a8b4H
	DD	059b33d17H
	DD	02eb40d81H
	DD	0b7bd5c3bH
	DD	0c0ba6cadH
	DD	0edb88320H
	DD	09abfb3b6H
	DD	03b6e20cH
	DD	074b1d29aH
	DD	0ead54739H
	DD	09dd277afH
	DD	04db2615H
	DD	073dc1683H
	DD	0e3630b12H
	DD	094643b84H
	DD	0d6d6a3eH
	DD	07a6a5aa8H
	DD	0e40ecf0bH
	DD	09309ff9dH
	DD	0a00ae27H
	DD	07d079eb1H
	DD	0f00f9344H
	DD	08708a3d2H
	DD	01e01f268H
	DD	06906c2feH
	DD	0f762575dH
	DD	0806567cbH
	DD	0196c3671H
	DD	06e6b06e7H
	DD	0fed41b76H
	DD	089d32be0H
	DD	010da7a5aH
	DD	067dd4accH
	DD	0f9b9df6fH
	DD	08ebeeff9H
	DD	017b7be43H
	DD	060b08ed5H
	DD	0d6d6a3e8H
	DD	0a1d1937eH
	DD	038d8c2c4H
	DD	04fdff252H
	DD	0d1bb67f1H
	DD	0a6bc5767H
	DD	03fb506ddH
	DD	048b2364bH
	DD	0d80d2bdaH
	DD	0af0a1b4cH
	DD	036034af6H
	DD	041047a60H
	DD	0df60efc3H
	DD	0a867df55H
	DD	0316e8eefH
	DD	04669be79H
	DD	0cb61b38cH
	DD	0bc66831aH
	DD	0256fd2a0H
	DD	05268e236H
	DD	0cc0c7795H
	DD	0bb0b4703H
	DD	0220216b9H
	DD	05505262fH
	DD	0c5ba3bbeH
	DD	0b2bd0b28H
	DD	02bb45a92H
	DD	05cb36a04H
	DD	0c2d7ffa7H
	DD	0b5d0cf31H
	DD	02cd99e8bH
	DD	05bdeae1dH
	DD	09b64c2b0H
	DD	0ec63f226H
	DD	0756aa39cH
	DD	026d930aH
	DD	09c0906a9H
	DD	0eb0e363fH
	DD	072076785H
	DD	05005713H
	DD	095bf4a82H
	DD	0e2b87a14H
	DD	07bb12baeH
	DD	0cb61b38H
	DD	092d28e9bH
	DD	0e5d5be0dH
	DD	07cdcefb7H
	DD	0bdbdf21H
	DD	086d3d2d4H
	DD	0f1d4e242H
	DD	068ddb3f8H
	DD	01fda836eH
	DD	081be16cdH
	DD	0f6b9265bH
	DD	06fb077e1H
	DD	018b74777H
	DD	088085ae6H
	DD	0ff0f6a70H
	DD	066063bcaH
	DD	011010b5cH
	DD	08f659effH
	DD	0f862ae69H
	DD	0616bffd3H
	DD	0166ccf45H
	DD	0a00ae278H
	DD	0d70dd2eeH
	DD	04e048354H
	DD	03903b3c2H
	DD	0a7672661H
	DD	0d06016f7H
	DD	04969474dH
	DD	03e6e77dbH
	DD	0aed16a4aH
	DD	0d9d65adcH
	DD	040df0b66H
	DD	037d83bf0H
	DD	0a9bcae53H
	DD	0debb9ec5H
	DD	047b2cf7fH
	DD	030b5ffe9H
	DD	0bdbdf21cH
	DD	0cabac28aH
	DD	053b39330H
	DD	024b4a3a6H
	DD	0bad03605H
	DD	0cdd70693H
	DD	054de5729H
	DD	023d967bfH
	DD	0b3667a2eH
	DD	0c4614ab8H
	DD	05d681b02H
	DD	02a6f2b94H
	DD	0b40bbe37H
	DD	0c30c8ea1H
	DD	05a05df1bH
	DD	02d02ef8dH
_DATA	ENDS
PUBLIC	??_7CCrc32Static@@6B@				; CCrc32Static::`vftable'
PUBLIC	??0CCrc32Static@@QAE@XZ				; CCrc32Static::CCrc32Static
PUBLIC	??_R4CCrc32Static@@6B@				; CCrc32Static::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCrc32Static@@@8			; CCrc32Static `RTTI Type Descriptor'
PUBLIC	??_R3CCrc32Static@@8				; CCrc32Static::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCrc32Static@@8				; CCrc32Static::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCrc32Static@@8			; CCrc32Static::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECCrc32Static@@UAEPAXI@Z:PROC		; CCrc32Static::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CCrc32Static@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\crc32static.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CCrc32Static@@8 DD FLAT:??_R0?AVCCrc32Static@@@8 ; CCrc32Static::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCrc32Static@@8
rdata$r	ENDS
;	COMDAT ??_R2CCrc32Static@@8
rdata$r	SEGMENT
??_R2CCrc32Static@@8 DD FLAT:??_R1A@?0A@EA@CCrc32Static@@8 ; CCrc32Static::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCrc32Static@@8
rdata$r	SEGMENT
??_R3CCrc32Static@@8 DD 00H				; CCrc32Static::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCrc32Static@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCrc32Static@@@8
_DATA	SEGMENT
??_R0?AVCCrc32Static@@@8 DD FLAT:??_7type_info@@6B@	; CCrc32Static `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCrc32Static@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCrc32Static@@6B@
rdata$r	SEGMENT
??_R4CCrc32Static@@6B@ DD 00H				; CCrc32Static::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCrc32Static@@@8
	DD	FLAT:??_R3CCrc32Static@@8
rdata$r	ENDS
;	COMDAT ??_7CCrc32Static@@6B@
CONST	SEGMENT
??_7CCrc32Static@@6B@ DD FLAT:??_R4CCrc32Static@@6B@	; CCrc32Static::`vftable'
	DD	FLAT:??_ECCrc32Static@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0CCrc32Static@@QAE@XZ
_TEXT	SEGMENT
??0CCrc32Static@@QAE@XZ PROC				; CCrc32Static::CCrc32Static, COMDAT
; _this$ = ecx

; 84   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCrc32Static@@6B@

; 85   : }

  00008	c3		 ret	 0
??0CCrc32Static@@QAE@XZ ENDP				; CCrc32Static::CCrc32Static
_TEXT	ENDS
PUBLIC	??1CCrc32Static@@UAE@XZ				; CCrc32Static::~CCrc32Static
; Function compile flags: /Ogsp
;	COMDAT ??1CCrc32Static@@UAE@XZ
_TEXT	SEGMENT
??1CCrc32Static@@UAE@XZ PROC				; CCrc32Static::~CCrc32Static, COMDAT
; _this$ = ecx

; 89   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CCrc32Static@@6B@

; 90   : }

  00006	c3		 ret	 0
??1CCrc32Static@@UAE@XZ ENDP				; CCrc32Static::~CCrc32Static
_TEXT	ENDS
PUBLIC	?CalcCrc32@CCrc32Static@@KAXEAAK@Z		; CCrc32Static::CalcCrc32
; Function compile flags: /Ogsp
;	COMDAT ?CalcCrc32@CCrc32Static@@KAXEAAK@Z
_TEXT	SEGMENT
_byte$ = 8						; size = 1
_dwCrc32$ = 12						; size = 4
?CalcCrc32@CCrc32Static@@KAXEAAK@Z PROC			; CCrc32Static::CalcCrc32, COMDAT

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 	dwCrc32 = ((dwCrc32) >> 8) ^ s_arrdwCrc32Table[(byte) ^ ((dwCrc32) & 0x000000FF)];

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _dwCrc32$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	56		 push	 esi
  00009	0f b6 75 08	 movzx	 esi, BYTE PTR _byte$[ebp]
  0000d	8b d0		 mov	 edx, eax
  0000f	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00015	33 d6		 xor	 edx, esi
  00017	c1 e8 08	 shr	 eax, 8
  0001a	33 04 95 00 00
	00 00		 xor	 eax, DWORD PTR ?s_arrdwCrc32Table@CCrc32Static@@1PAKA[edx*4]
  00021	5e		 pop	 esi
  00022	89 01		 mov	 DWORD PTR [ecx], eax

; 96   : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?CalcCrc32@CCrc32Static@@KAXEAAK@Z ENDP			; CCrc32Static::CalcCrc32
_TEXT	ENDS
PUBLIC	?GetFileSizeQW@CCrc32Static@@KA_NQAXAA_J@Z	; CCrc32Static::GetFileSizeQW
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__GetFileSize@8:PROC
EXTRN	__SEH_epilog4:PROC
EXTRN	__except_handler4:PROC
EXTRN	__SEH_prolog4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?GetFileSizeQW@CCrc32Static@@KA_NQAXAA_J@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffd0H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN7@GetFileSiz
	DD	FLAT:$LN8@GetFileSiz
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?GetFileSizeQW@CCrc32Static@@KA_NQAXAA_J@Z
_TEXT	SEGMENT
_dwHi$505091 = -32					; size = 4
_bSuccess$ = -25					; size = 1
__$SEHRec$ = -24					; size = 24
_hFile$ = 8						; size = 4
_qwSize$ = 12						; size = 4
?GetFileSizeQW@CCrc32Static@@KA_NQAXAA_J@Z PROC		; CCrc32Static::GetFileSizeQW, COMDAT

; 100  : {

  00000	6a 10		 push	 16			; 00000010H
  00002	68 00 00 00 00	 push	 OFFSET __sehtable$?GetFileSizeQW@CCrc32Static@@KA_NQAXAA_J@Z
  00007	e8 00 00 00 00	 call	 __SEH_prolog4

; 101  : 	_ASSERTE(hFile != INVALID_HANDLE_VALUE);
; 102  : 
; 103  : 	bool bSuccess = true;

  0000c	c6 45 e7 01	 mov	 BYTE PTR _bSuccess$[ebp], 1

; 104  : 
; 105  : 	__try

  00010	33 db		 xor	 ebx, ebx
  00012	89 5d fc	 mov	 DWORD PTR __$SEHRec$[ebp+20], ebx

; 106  : 	{
; 107  : 		DWORD dwLo = 0, dwHi = 0;

  00015	89 5d e0	 mov	 DWORD PTR _dwHi$505091[ebp], ebx

; 108  : 		dwLo = GetFileSize(hFile, &dwHi);

  00018	8d 45 e0	 lea	 eax, DWORD PTR _dwHi$505091[ebp]
  0001b	50		 push	 eax
  0001c	ff 75 08	 push	 DWORD PTR _hFile$[ebp]
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSize@8
  00025	8b f0		 mov	 esi, eax

; 109  : 
; 110  : 		if(dwLo == INVALID_FILE_SIZE && GetLastError() != NO_ERROR)

  00027	83 fe ff	 cmp	 esi, -1
  0002a	75 17		 jne	 SHORT $LN2@GetFileSiz
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00032	85 c0		 test	 eax, eax
  00034	74 0d		 je	 SHORT $LN2@GetFileSiz

; 111  : 		{
; 112  : 			bSuccess = false;

  00036	88 5d e7	 mov	 BYTE PTR _bSuccess$[ebp], bl

; 113  : 			qwSize = 0;

  00039	8b 45 0c	 mov	 eax, DWORD PTR _qwSize$[ebp]
  0003c	89 18		 mov	 DWORD PTR [eax], ebx
  0003e	89 58 04	 mov	 DWORD PTR [eax+4], ebx

; 114  : 		}
; 115  : 		else

  00041	eb 20		 jmp	 SHORT $LN1@GetFileSiz
$LN2@GetFileSiz:

; 116  : 		{
; 117  : 			qwSize = MAKEQWORD(dwHi, dwLo);

  00043	33 c9		 xor	 ecx, ecx
  00045	8b 55 e0	 mov	 edx, DWORD PTR _dwHi$505091[ebp]
  00048	33 c0		 xor	 eax, eax
  0004a	0b ce		 or	 ecx, esi
  0004c	0b d0		 or	 edx, eax
  0004e	8b 45 0c	 mov	 eax, DWORD PTR _qwSize$[ebp]
  00051	89 08		 mov	 DWORD PTR [eax], ecx
  00053	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 118  : 		}
; 119  : 	}

  00056	eb 0b		 jmp	 SHORT $LN1@GetFileSiz
$LN7@GetFileSiz:
$LN12@GetFileSiz:

; 120  : 	__except( EXCEPTION_EXECUTE_HANDLER )

  00058	33 c0		 xor	 eax, eax
  0005a	40		 inc	 eax
$LN11@GetFileSiz:
$LN9@GetFileSiz:
  0005b	c3		 ret	 0
$LN8@GetFileSiz:
  0005c	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 121  : 	{
; 122  : 		bSuccess = false;

  0005f	c6 45 e7 00	 mov	 BYTE PTR _bSuccess$[ebp], 0
$LN1@GetFileSiz:

; 123  : 	}

  00063	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH

; 124  : 
; 125  : 	return bSuccess;

  0006a	8a 45 e7	 mov	 al, BYTE PTR _bSuccess$[ebp]

; 126  : }

  0006d	e8 00 00 00 00	 call	 __SEH_epilog4
  00072	c3		 ret	 0
?GetFileSizeQW@CCrc32Static@@KA_NQAXAA_J@Z ENDP		; CCrc32Static::GetFileSizeQW
_TEXT	ENDS
PUBLIC	?StringCrc32@CCrc32Static@@SAKPBDAAK@Z		; CCrc32Static::StringCrc32
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?StringCrc32@CCrc32Static@@SAKPBDAAK@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffd8H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN7@StringCrc3
	DD	FLAT:$LN8@StringCrc3
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?StringCrc32@CCrc32Static@@SAKPBDAAK@Z
_TEXT	SEGMENT
__$SEHRec$ = -24					; size = 24
_szString$ = 8						; size = 4
_dwCrc32$ = 12						; size = 4
?StringCrc32@CCrc32Static@@SAKPBDAAK@Z PROC		; CCrc32Static::StringCrc32, COMDAT

; 130  : {

  00000	6a 08		 push	 8
  00002	68 00 00 00 00	 push	 OFFSET __sehtable$?StringCrc32@CCrc32Static@@SAKPBDAAK@Z
  00007	e8 00 00 00 00	 call	 __SEH_prolog4

; 131  : 	_ASSERTE(szString);
; 132  : 
; 133  : 	DWORD dwErrorCode = NO_ERROR;

  0000c	33 ff		 xor	 edi, edi

; 134  : 
; 135  : 	dwCrc32 = 0xFFFFFFFF;

  0000e	8b 75 0c	 mov	 esi, DWORD PTR _dwCrc32$[ebp]
  00011	83 0e ff	 or	 DWORD PTR [esi], -1

; 136  : 
; 137  : 	__try

  00014	21 7d fc	 and	 DWORD PTR __$SEHRec$[ebp+20], edi
$LL2@StringCrc3:

; 138  : 	{
; 139  : 		while(*szString != _T('\0'))

  00017	8b 45 08	 mov	 eax, DWORD PTR _szString$[ebp]
  0001a	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0001d	84 c0		 test	 al, al
  0001f	74 0e		 je	 SHORT $LN1@StringCrc3

; 140  : 		{
; 141  : 			CalcCrc32((BYTE)*szString, dwCrc32);

  00021	56		 push	 esi
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?CalcCrc32@CCrc32Static@@KAXEAAK@Z ; CCrc32Static::CalcCrc32
  00028	59		 pop	 ecx
  00029	59		 pop	 ecx

; 142  : 			szString++;

  0002a	ff 45 08	 inc	 DWORD PTR _szString$[ebp]

; 143  : 		}

  0002d	eb e8		 jmp	 SHORT $LL2@StringCrc3
$LN1@StringCrc3:

; 144  : 	}

  0002f	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00036	eb 14		 jmp	 SHORT $LN10@StringCrc3
$LN7@StringCrc3:
$LN13@StringCrc3:

; 145  : 	__except( EXCEPTION_EXECUTE_HANDLER )

  00038	33 c0		 xor	 eax, eax
  0003a	40		 inc	 eax
$LN12@StringCrc3:
$LN9@StringCrc3:
  0003b	c3		 ret	 0
$LN8@StringCrc3:
  0003c	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 146  : 	{
; 147  : 		// An unknown exception happened
; 148  : 		dwErrorCode = ERROR_CRC;

  0003f	6a 17		 push	 23			; 00000017H
  00041	5f		 pop	 edi

; 149  : 	}

  00042	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00049	8b 75 0c	 mov	 esi, DWORD PTR _dwCrc32$[ebp]
$LN10@StringCrc3:

; 150  : 
; 151  : 	dwCrc32 = ~dwCrc32;

  0004c	f7 16		 not	 DWORD PTR [esi]

; 152  : 
; 153  : 	return dwErrorCode;

  0004e	8b c7		 mov	 eax, edi

; 154  : }

  00050	e8 00 00 00 00	 call	 __SEH_epilog4
  00055	c3		 ret	 0
?StringCrc32@CCrc32Static@@SAKPBDAAK@Z ENDP		; CCrc32Static::StringCrc32
_TEXT	ENDS
PUBLIC	_dwCrc32$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?FileCrc32Win32@CCrc32Static@@SAKPBDAAK@Z	; CCrc32Static::FileCrc32Win32
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?FileCrc32Win32@CCrc32Static@@SAKPBDAAK@Z DD 0ffffffe4H
	DD	00H
	DD	0ffffefc0H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN13@FileCrc32W
	DD	FLAT:$LN14@FileCrc32W
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?FileCrc32Win32@CCrc32Static@@SAKPBDAAK@Z
_TEXT	SEGMENT
_dwLoop$505363 = -4144					; size = 4
_dwCrc32$GSCopy$ = -4140				; size = 4
_dwErrorCode$ = -4136					; size = 4
_dwBytesRead$505362 = -4132				; size = 4
_hFile$ = -4128						; size = 4
_buffer$505361 = -4124					; size = 4096
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_szFilename$ = 8					; size = 4
_dwCrc32$ = 12						; size = 4
?FileCrc32Win32@CCrc32Static@@SAKPBDAAK@Z PROC		; CCrc32Static::FileCrc32Win32, COMDAT

; 206  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?FileCrc32Win32@CCrc32Static@@SAKPBDAAK@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	51		 push	 ecx
  00018	b8 18 10 00 00	 mov	 eax, 4120		; 00001018H
  0001d	e8 00 00 00 00	 call	 __chkstk
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  0002a	33 c5		 xor	 eax, ebp
  0002c	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp
  0003f	8b 45 08	 mov	 eax, DWORD PTR _szFilename$[ebp]
  00042	8b 75 0c	 mov	 esi, DWORD PTR _dwCrc32$[ebp]

; 207  : 	_ASSERTE(szFilename);
; 208  : 	_ASSERTE(lstrlen(szFilename));
; 209  : 
; 210  : 	DWORD dwErrorCode = NO_ERROR;

  00045	89 b5 d4 ef ff
	ff		 mov	 DWORD PTR _dwCrc32$GSCopy$[ebp], esi
  0004b	33 db		 xor	 ebx, ebx
  0004d	89 9d d8 ef ff
	ff		 mov	 DWORD PTR _dwErrorCode$[ebp], ebx

; 211  : 	HANDLE hFile = NULL;

  00053	89 9d e0 ef ff
	ff		 mov	 DWORD PTR _hFile$[ebp], ebx

; 212  : 
; 213  : 	dwCrc32 = 0xFFFFFFFF;

  00059	83 0e ff	 or	 DWORD PTR [esi], -1

; 214  : 
; 215  : 	__try

  0005c	89 5d fc	 mov	 DWORD PTR __$SEHRec$[ebp+20], ebx

; 216  : 	{
; 217  : 		// Open the file
; 218  : 		hFile = CreateFile(szFilename,
; 219  : 			GENERIC_READ,
; 220  : 			FILE_SHARE_READ,
; 221  : 			NULL,
; 222  : 			OPEN_EXISTING,
; 223  : 			FILE_ATTRIBUTE_ARCHIVE | FILE_ATTRIBUTE_HIDDEN | FILE_ATTRIBUTE_READONLY | FILE_ATTRIBUTE_SYSTEM | FILE_FLAG_SEQUENTIAL_SCAN,
; 224  : 			NULL);

  0005f	53		 push	 ebx
  00060	68 27 00 00 08	 push	 134217767		; 08000027H
  00065	6a 03		 push	 3
  00067	53		 push	 ebx
  00068	6a 01		 push	 1
  0006a	68 00 00 00 80	 push	 -2147483648		; 80000000H
  0006f	50		 push	 eax
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00076	89 85 e0 ef ff
	ff		 mov	 DWORD PTR _hFile$[ebp], eax

; 225  : 		if(hFile == INVALID_HANDLE_VALUE)

  0007c	83 f8 ff	 cmp	 eax, -1
  0007f	75 0e		 jne	 SHORT $LN8@FileCrc32W

; 226  : 			dwErrorCode = GetLastError();

  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00087	89 85 d8 ef ff
	ff		 mov	 DWORD PTR _dwErrorCode$[ebp], eax

; 227  : 		else

  0008d	eb 67		 jmp	 SHORT $LN5@FileCrc32W
$LN8@FileCrc32W:

; 228  : 		{
; 229  : 			BYTE buffer[MAX_BUFFER_SIZE];
; 230  : 			DWORD dwBytesRead, dwLoop;
; 231  : 			BOOL bSuccess = ReadFile(hFile, buffer, sizeof(buffer), &dwBytesRead, NULL);

  0008f	bf 00 10 00 00	 mov	 edi, 4096		; 00001000H
  00094	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__ReadFile@20
$LN2@FileCrc32W:
  0009a	53		 push	 ebx
  0009b	8d 85 dc ef ff
	ff		 lea	 eax, DWORD PTR _dwBytesRead$505362[ebp]
  000a1	50		 push	 eax
  000a2	57		 push	 edi
  000a3	8d 85 e4 ef ff
	ff		 lea	 eax, DWORD PTR _buffer$505361[ebp]
  000a9	50		 push	 eax
  000aa	ff b5 e0 ef ff
	ff		 push	 DWORD PTR _hFile$[ebp]
  000b0	ff d6		 call	 esi

; 232  : 			while(bSuccess && dwBytesRead)

  000b2	3b c3		 cmp	 eax, ebx
  000b4	74 3a		 je	 SHORT $LN19@FileCrc32W
  000b6	39 9d dc ef ff
	ff		 cmp	 DWORD PTR _dwBytesRead$505362[ebp], ebx
  000bc	74 32		 je	 SHORT $LN19@FileCrc32W

; 233  : 			{
; 234  : 				for(dwLoop = 0; dwLoop < dwBytesRead; dwLoop++)

  000be	89 9d d0 ef ff
	ff		 mov	 DWORD PTR _dwLoop$505363[ebp], ebx
$LL4@FileCrc32W:
  000c4	8b 85 d0 ef ff
	ff		 mov	 eax, DWORD PTR _dwLoop$505363[ebp]
  000ca	3b 85 dc ef ff
	ff		 cmp	 eax, DWORD PTR _dwBytesRead$505362[ebp]
  000d0	73 c8		 jae	 SHORT $LN2@FileCrc32W

; 235  : 					CalcCrc32(buffer[dwLoop], dwCrc32);

  000d2	ff b5 d4 ef ff
	ff		 push	 DWORD PTR _dwCrc32$GSCopy$[ebp]
  000d8	0f b6 84 05 e4
	ef ff ff	 movzx	 eax, BYTE PTR _buffer$505361[ebp+eax]
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ?CalcCrc32@CCrc32Static@@KAXEAAK@Z ; CCrc32Static::CalcCrc32
  000e6	59		 pop	 ecx
  000e7	59		 pop	 ecx

; 233  : 			{
; 234  : 				for(dwLoop = 0; dwLoop < dwBytesRead; dwLoop++)

  000e8	ff 85 d0 ef ff
	ff		 inc	 DWORD PTR _dwLoop$505363[ebp]
  000ee	eb d4		 jmp	 SHORT $LL4@FileCrc32W
$LN19@FileCrc32W:

; 236  : 				bSuccess = ReadFile(hFile, buffer, sizeof(buffer), &dwBytesRead, NULL);
; 237  : 			}

  000f0	8b b5 d4 ef ff
	ff		 mov	 esi, DWORD PTR _dwCrc32$GSCopy$[ebp]
$LN5@FileCrc32W:

; 238  : 		}
; 239  : 	}

  000f6	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  000fd	eb 20		 jmp	 SHORT $LN16@FileCrc32W
$LN13@FileCrc32W:
$LN21@FileCrc32W:

; 240  : 	__except( EXCEPTION_EXECUTE_HANDLER )

  000ff	33 c0		 xor	 eax, eax
  00101	40		 inc	 eax
$LN20@FileCrc32W:
$LN15@FileCrc32W:
  00102	c3		 ret	 0
$LN14@FileCrc32W:
  00103	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 241  : 	{
; 242  : 		// An unknown exception happened
; 243  : 		dwErrorCode = ERROR_CRC;

  00106	c7 85 d8 ef ff
	ff 17 00 00 00	 mov	 DWORD PTR _dwErrorCode$[ebp], 23 ; 00000017H

; 244  : 	}

  00110	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00117	33 db		 xor	 ebx, ebx
  00119	8b b5 d4 ef ff
	ff		 mov	 esi, DWORD PTR _dwCrc32$GSCopy$[ebp]
$LN16@FileCrc32W:

; 245  : 
; 246  : 	if(hFile != NULL) CloseHandle(hFile);

  0011f	39 9d e0 ef ff
	ff		 cmp	 DWORD PTR _hFile$[ebp], ebx
  00125	74 0c		 je	 SHORT $LN1@FileCrc32W
  00127	ff b5 e0 ef ff
	ff		 push	 DWORD PTR _hFile$[ebp]
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN1@FileCrc32W:

; 247  : 
; 248  : 	dwCrc32 = ~dwCrc32;

  00133	f7 16		 not	 DWORD PTR [esi]

; 249  : 
; 250  : 	return dwErrorCode;

  00135	8b 85 d8 ef ff
	ff		 mov	 eax, DWORD PTR _dwErrorCode$[ebp]

; 251  : }

  0013b	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  0013e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00145	59		 pop	 ecx
  00146	5f		 pop	 edi
  00147	5e		 pop	 esi
  00148	5b		 pop	 ebx
  00149	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014c	33 cd		 xor	 ecx, ebp
  0014e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00153	c9		 leave
  00154	c3		 ret	 0
?FileCrc32Win32@CCrc32Static@@SAKPBDAAK@Z ENDP		; CCrc32Static::FileCrc32Win32
_TEXT	ENDS
PUBLIC	?FileCrc32Filemap@CCrc32Static@@SAKPBDAAK@Z	; CCrc32Static::FileCrc32Filemap
EXTRN	__imp__UnmapViewOfFile@4:PROC
EXTRN	__imp__MapViewOfFile@20:PROC
EXTRN	__imp__CreateFileMappingA@24:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?FileCrc32Filemap@CCrc32Static@@SAKPBDAAK@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffb4H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN20@FileCrc32F
	DD	FLAT:$LN21@FileCrc32F
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?FileCrc32Filemap@CCrc32Static@@SAKPBDAAK@Z
_TEXT	SEGMENT
_qwFileOffset$505387 = -60				; size = 8
_qwFileSize$505386 = -52				; size = 8
_hFile$ = -44						; size = 4
_pByte$505396 = -40					; size = 4
_dwByteCount$505388 = -36				; size = 4
_hFilemap$ = -32					; size = 4
_dwErrorCode$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_szFilename$ = 8					; size = 4
_dwCrc32$ = 12						; size = 4
?FileCrc32Filemap@CCrc32Static@@SAKPBDAAK@Z PROC	; CCrc32Static::FileCrc32Filemap, COMDAT

; 255  : {

  00000	6a 2c		 push	 44			; 0000002cH
  00002	68 00 00 00 00	 push	 OFFSET __sehtable$?FileCrc32Filemap@CCrc32Static@@SAKPBDAAK@Z
  00007	e8 00 00 00 00	 call	 __SEH_prolog4

; 256  : 	_ASSERTE(szFilename);
; 257  : 	_ASSERTE(lstrlen(szFilename));
; 258  : 
; 259  : 	DWORD dwErrorCode = NO_ERROR;

  0000c	33 db		 xor	 ebx, ebx
  0000e	89 5d e4	 mov	 DWORD PTR _dwErrorCode$[ebp], ebx

; 260  : 	HANDLE hFile = NULL, hFilemap = NULL;

  00011	89 5d d4	 mov	 DWORD PTR _hFile$[ebp], ebx
  00014	89 5d e0	 mov	 DWORD PTR _hFilemap$[ebp], ebx

; 261  : 
; 262  : 	dwCrc32 = 0xFFFFFFFF;

  00017	8b 45 0c	 mov	 eax, DWORD PTR _dwCrc32$[ebp]
  0001a	83 08 ff	 or	 DWORD PTR [eax], -1

; 263  : 
; 264  : 	__try

  0001d	89 5d fc	 mov	 DWORD PTR __$SEHRec$[ebp+20], ebx

; 265  : 	{
; 266  : 		// Open the file
; 267  : 		hFile = CreateFile(szFilename,
; 268  : 			GENERIC_READ,
; 269  : 			FILE_SHARE_READ,
; 270  : 			NULL,
; 271  : 			OPEN_EXISTING,
; 272  : 			FILE_ATTRIBUTE_ARCHIVE | FILE_ATTRIBUTE_HIDDEN | FILE_ATTRIBUTE_READONLY | FILE_ATTRIBUTE_SYSTEM | FILE_FLAG_SEQUENTIAL_SCAN,
; 273  : 			NULL);

  00020	53		 push	 ebx
  00021	68 27 00 00 08	 push	 134217767		; 08000027H
  00026	6a 03		 push	 3
  00028	53		 push	 ebx
  00029	6a 01		 push	 1
  0002b	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00030	ff 75 08	 push	 DWORD PTR _szFilename$[ebp]
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00039	8b f0		 mov	 esi, eax
  0003b	89 75 d4	 mov	 DWORD PTR _hFile$[ebp], esi

; 274  : 		if(hFile == INVALID_HANDLE_VALUE)

  0003e	83 fe ff	 cmp	 esi, -1

; 275  : 			dwErrorCode = GetLastError();
; 276  : 		else

  00041	74 51		 je	 SHORT $LN37@FileCrc32F

; 277  : 		{
; 278  : 			QWORD qwFileSize = 0, qwFileOffset = 0;

  00043	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00047	66 0f 13 45 cc	 movlpd	 QWORD PTR _qwFileSize$505386[ebp], xmm0
  0004c	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00050	66 0f 13 45 c4	 movlpd	 QWORD PTR _qwFileOffset$505387[ebp], xmm0

; 279  : 			DWORD dwByteCount, dwViewSize;
; 280  : 			DWORD dwBaseAddress;
; 281  : 
; 282  : 			// Get the file size
; 283  : 			if(!GetFileSizeQW(hFile, qwFileSize))

  00055	8d 45 cc	 lea	 eax, DWORD PTR _qwFileSize$505386[ebp]
  00058	50		 push	 eax
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 ?GetFileSizeQW@CCrc32Static@@KA_NQAXAA_J@Z ; CCrc32Static::GetFileSizeQW
  0005f	59		 pop	 ecx
  00060	59		 pop	 ecx
  00061	84 c0		 test	 al, al
  00063	75 13		 jne	 SHORT $LN13@FileCrc32F

; 284  : 				dwErrorCode = ERROR_BAD_LENGTH;

  00065	c7 45 e4 18 00
	00 00		 mov	 DWORD PTR _dwErrorCode$[ebp], 24 ; 00000018H
$LN7@FileCrc32F:

; 326  : 				}
; 327  : 			}
; 328  : 		}
; 329  : 	}

  0006c	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00073	e9 bb 00 00 00	 jmp	 $LN23@FileCrc32F
$LN13@FileCrc32F:

; 285  : 			else if(qwFileSize != 0)	// We cannot CRC zero byte files

  00078	8b 45 cc	 mov	 eax, DWORD PTR _qwFileSize$505386[ebp]
  0007b	0b 45 d0	 or	 eax, DWORD PTR _qwFileSize$505386[ebp+4]
  0007e	74 ec		 je	 SHORT $LN7@FileCrc32F

; 286  : 			{
; 287  : 				// Create the file mapping
; 288  : 				hFilemap = CreateFileMapping(hFile,
; 289  : 					NULL,
; 290  : 					PAGE_READONLY,
; 291  : 					0,
; 292  : 					0,
; 293  : 					NULL);

  00080	53		 push	 ebx
  00081	53		 push	 ebx
  00082	53		 push	 ebx
  00083	6a 02		 push	 2
  00085	53		 push	 ebx
  00086	56		 push	 esi
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileMappingA@24
  0008d	89 45 e0	 mov	 DWORD PTR _hFilemap$[ebp], eax

; 294  : 				if(hFilemap == NULL)

  00090	3b c3		 cmp	 eax, ebx
  00092	75 0b		 jne	 SHORT $LL8@FileCrc32F
$LN37@FileCrc32F:

; 295  : 					dwErrorCode = GetLastError();

  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0009a	89 45 e4	 mov	 DWORD PTR _dwErrorCode$[ebp], eax

; 296  : 				else

  0009d	eb cd		 jmp	 SHORT $LN7@FileCrc32F
$LL8@FileCrc32F:

; 297  : 				{
; 298  : 					LPBYTE pByte;
; 299  : 
; 300  : 					// Loop while we map a section of the file and CRC it
; 301  : 					while(qwFileSize > 0)

  0009f	39 5d d0	 cmp	 DWORD PTR _qwFileSize$505386[ebp+4], ebx
  000a2	7c c8		 jl	 SHORT $LN7@FileCrc32F
  000a4	7f 1a		 jg	 SHORT $LN6@FileCrc32F
  000a6	39 5d cc	 cmp	 DWORD PTR _qwFileSize$505386[ebp], ebx
  000a9	76 c1		 jbe	 SHORT $LN7@FileCrc32F

; 302  : 					{
; 303  : 						if(qwFileSize < MAX_VIEW_SIZE)

  000ab	39 5d d0	 cmp	 DWORD PTR _qwFileSize$505386[ebp+4], ebx
  000ae	7f 10		 jg	 SHORT $LN6@FileCrc32F
  000b0	7c 09		 jl	 SHORT $LN27@FileCrc32F
  000b2	81 7d cc 00 00
	a0 00		 cmp	 DWORD PTR _qwFileSize$505386[ebp], 10485760 ; 00a00000H
  000b9	73 05		 jae	 SHORT $LN6@FileCrc32F
$LN27@FileCrc32F:

; 304  : 							dwViewSize = LODWORD(qwFileSize);

  000bb	8b 75 cc	 mov	 esi, DWORD PTR _qwFileSize$505386[ebp]

; 305  : 						else

  000be	eb 05		 jmp	 SHORT $LN5@FileCrc32F
$LN6@FileCrc32F:

; 306  : 							dwViewSize = MAX_VIEW_SIZE;

  000c0	be 00 00 a0 00	 mov	 esi, 10485760		; 00a00000H
$LN5@FileCrc32F:

; 307  : 
; 308  : 						dwBaseAddress = (DWORD)MapViewOfFile(hFilemap,
; 309  : 							FILE_MAP_READ,
; 310  : 							HIDWORD(qwFileOffset),
; 311  : 							LODWORD(qwFileOffset),
; 312  : 							dwViewSize);

  000c5	56		 push	 esi
  000c6	ff 75 c4	 push	 DWORD PTR _qwFileOffset$505387[ebp]
  000c9	8b 45 c8	 mov	 eax, DWORD PTR _qwFileOffset$505387[ebp+4]
  000cc	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  000cf	ff 75 c8	 push	 DWORD PTR _qwFileOffset$505387[ebp+4]
  000d2	6a 04		 push	 4
  000d4	ff 75 e0	 push	 DWORD PTR _hFilemap$[ebp]
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapViewOfFile@20
  000dd	8b f8		 mov	 edi, eax

; 313  : 
; 314  : 						dwByteCount = dwViewSize;

  000df	89 75 dc	 mov	 DWORD PTR _dwByteCount$505388[ebp], esi

; 315  : 						pByte = (LPBYTE)dwBaseAddress;

  000e2	89 7d d8	 mov	 DWORD PTR _pByte$505396[ebp], edi
$LL4@FileCrc32F:

; 316  : 						while(dwByteCount-- > 0)

  000e5	8b 45 dc	 mov	 eax, DWORD PTR _dwByteCount$505388[ebp]
  000e8	ff 4d dc	 dec	 DWORD PTR _dwByteCount$505388[ebp]
  000eb	85 c0		 test	 eax, eax
  000ed	74 16		 je	 SHORT $LN3@FileCrc32F

; 317  : 						{
; 318  : 							CalcCrc32(*pByte, dwCrc32);

  000ef	ff 75 0c	 push	 DWORD PTR _dwCrc32$[ebp]
  000f2	8b 45 d8	 mov	 eax, DWORD PTR _pByte$505396[ebp]
  000f5	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 ?CalcCrc32@CCrc32Static@@KAXEAAK@Z ; CCrc32Static::CalcCrc32
  000fe	59		 pop	 ecx
  000ff	59		 pop	 ecx

; 319  : 							pByte++;

  00100	ff 45 d8	 inc	 DWORD PTR _pByte$505396[ebp]

; 320  : 						}

  00103	eb e0		 jmp	 SHORT $LL4@FileCrc32F
$LN3@FileCrc32F:

; 321  : 
; 322  : 						UnmapViewOfFile((LPVOID)dwBaseAddress);

  00105	57		 push	 edi
  00106	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnmapViewOfFile@4

; 323  : 						qwFileOffset += dwViewSize;

  0010c	33 c0		 xor	 eax, eax
  0010e	01 75 c4	 add	 DWORD PTR _qwFileOffset$505387[ebp], esi
  00111	11 45 c8	 adc	 DWORD PTR _qwFileOffset$505387[ebp+4], eax

; 324  : 						qwFileSize -= dwViewSize;

  00114	29 75 cc	 sub	 DWORD PTR _qwFileSize$505386[ebp], esi
  00117	19 45 d0	 sbb	 DWORD PTR _qwFileSize$505386[ebp+4], eax

; 325  : 					}

  0011a	eb 83		 jmp	 SHORT $LL8@FileCrc32F
$LN20@FileCrc32F:
$LN38@FileCrc32F:

; 330  : 	__except( EXCEPTION_EXECUTE_HANDLER )

  0011c	33 c0		 xor	 eax, eax
  0011e	40		 inc	 eax
$LN35@FileCrc32F:
$LN22@FileCrc32F:
  0011f	c3		 ret	 0
$LN21@FileCrc32F:
  00120	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 331  : 	{
; 332  : 		// An unknown exception happened
; 333  : 		dwErrorCode = ERROR_CRC;

  00123	c7 45 e4 17 00
	00 00		 mov	 DWORD PTR _dwErrorCode$[ebp], 23 ; 00000017H

; 334  : 	}

  0012a	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00131	33 db		 xor	 ebx, ebx
$LN23@FileCrc32F:

; 335  : 
; 336  : 	if(hFile != NULL) CloseHandle(hFile);

  00133	39 5d d4	 cmp	 DWORD PTR _hFile$[ebp], ebx
  00136	74 09		 je	 SHORT $LN2@FileCrc32F
  00138	ff 75 d4	 push	 DWORD PTR _hFile$[ebp]
  0013b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN2@FileCrc32F:

; 337  : 	if(hFilemap != NULL) CloseHandle(hFilemap);

  00141	39 5d e0	 cmp	 DWORD PTR _hFilemap$[ebp], ebx
  00144	74 09		 je	 SHORT $LN1@FileCrc32F
  00146	ff 75 e0	 push	 DWORD PTR _hFilemap$[ebp]
  00149	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN1@FileCrc32F:

; 338  : 
; 339  : 	dwCrc32 = ~dwCrc32;

  0014f	8b 45 0c	 mov	 eax, DWORD PTR _dwCrc32$[ebp]
  00152	f7 10		 not	 DWORD PTR [eax]

; 340  : 
; 341  : 	return dwErrorCode;

  00154	8b 45 e4	 mov	 eax, DWORD PTR _dwErrorCode$[ebp]

; 342  : }

  00157	e8 00 00 00 00	 call	 __SEH_epilog4
  0015c	c3		 ret	 0
?FileCrc32Filemap@CCrc32Static@@SAKPBDAAK@Z ENDP	; CCrc32Static::FileCrc32Filemap
_TEXT	ENDS
PUBLIC	_dwCrc32$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?FileCrc32Assembly@CCrc32Static@@SAKPBDAAK@Z	; CCrc32Static::FileCrc32Assembly
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?FileCrc32Assembly@CCrc32Static@@SAKPBDAAK@Z DD 0ffffffe4H
	DD	00H
	DD	0ffffefc0H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN10@FileCrc32A
	DD	FLAT:$LN11@FileCrc32A
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?FileCrc32Assembly@CCrc32Static@@SAKPBDAAK@Z
_TEXT	SEGMENT
_ptrCrc32Table$505427 = -4144				; size = 4
_dwErrorCode$ = -4140					; size = 4
_dwCrc32$GSCopy$ = -4136				; size = 4
_hFile$ = -4132						; size = 4
_dwBytesRead$505429 = -4128				; size = 4
_buffer$505428 = -4124					; size = 4096
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_szFilename$ = 8					; size = 4
_dwCrc32$ = 12						; size = 4
?FileCrc32Assembly@CCrc32Static@@SAKPBDAAK@Z PROC	; CCrc32Static::FileCrc32Assembly, COMDAT

; 346  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?FileCrc32Assembly@CCrc32Static@@SAKPBDAAK@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	51		 push	 ecx
  00018	b8 18 10 00 00	 mov	 eax, 4120		; 00001018H
  0001d	e8 00 00 00 00	 call	 __chkstk
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  0002a	33 c5		 xor	 eax, ebp
  0002c	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp
  0003f	8b 45 08	 mov	 eax, DWORD PTR _szFilename$[ebp]
  00042	8b 75 0c	 mov	 esi, DWORD PTR _dwCrc32$[ebp]

; 347  : 	_ASSERTE(szFilename);
; 348  : 	_ASSERTE(lstrlen(szFilename));
; 349  : 
; 350  : 	DWORD dwErrorCode = NO_ERROR;

  00045	89 b5 d8 ef ff
	ff		 mov	 DWORD PTR _dwCrc32$GSCopy$[ebp], esi
  0004b	33 ff		 xor	 edi, edi
  0004d	89 bd d4 ef ff
	ff		 mov	 DWORD PTR _dwErrorCode$[ebp], edi

; 351  : 	HANDLE hFile = NULL;

  00053	89 bd dc ef ff
	ff		 mov	 DWORD PTR _hFile$[ebp], edi

; 352  : 
; 353  : 	dwCrc32 = 0xFFFFFFFF;

  00059	83 0e ff	 or	 DWORD PTR [esi], -1

; 354  : 
; 355  : 	__try

  0005c	89 7d fc	 mov	 DWORD PTR __$SEHRec$[ebp+20], edi

; 356  : 	{
; 357  : 		// Open the file
; 358  : 		hFile = CreateFile(szFilename,
; 359  : 			GENERIC_READ,
; 360  : 			FILE_SHARE_READ,
; 361  : 			NULL,
; 362  : 			OPEN_EXISTING,
; 363  : 			FILE_ATTRIBUTE_ARCHIVE | FILE_ATTRIBUTE_HIDDEN | FILE_ATTRIBUTE_READONLY | FILE_ATTRIBUTE_SYSTEM | FILE_FLAG_SEQUENTIAL_SCAN,
; 364  : 			NULL);

  0005f	57		 push	 edi
  00060	68 27 00 00 08	 push	 134217767		; 08000027H
  00065	6a 03		 push	 3
  00067	57		 push	 edi
  00068	6a 01		 push	 1
  0006a	68 00 00 00 80	 push	 -2147483648		; 80000000H
  0006f	50		 push	 eax
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00076	89 85 dc ef ff
	ff		 mov	 DWORD PTR _hFile$[ebp], eax

; 365  : 		if(hFile == INVALID_HANDLE_VALUE)

  0007c	83 f8 ff	 cmp	 eax, -1
  0007f	75 18		 jne	 SHORT $LN5@FileCrc32A

; 366  : 			dwErrorCode = GetLastError();

  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00087	89 85 d4 ef ff
	ff		 mov	 DWORD PTR _dwErrorCode$[ebp], eax
$LN2@FileCrc32A:

; 426  : 		}
; 427  : 	}

  0008d	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00094	e9 b9 00 00 00	 jmp	 $LN13@FileCrc32A
$LN5@FileCrc32A:

; 367  : 		else
; 368  : 		{
; 369  : 			// There is a bug in the Microsoft compilers where inline assembly
; 370  : 			// code cannot access static member variables.  This is a work around
; 371  : 			// for that bug.  For more info see Knowledgebase article Q88092
; 372  : 			LPVOID ptrCrc32Table = &s_arrdwCrc32Table;

  00099	c7 85 d0 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR _ptrCrc32Table$505427[ebp], OFFSET ?s_arrdwCrc32Table@CCrc32Static@@1PAKA ; CCrc32Static::s_arrdwCrc32Table

; 373  : 
; 374  : 			BYTE buffer[MAX_BUFFER_SIZE];
; 375  : 			DWORD dwBytesRead;
; 376  : 			BOOL bSuccess = ReadFile(hFile, buffer, sizeof(buffer), &dwBytesRead, NULL);

  000a3	57		 push	 edi
  000a4	8d 8d e0 ef ff
	ff		 lea	 ecx, DWORD PTR _dwBytesRead$505429[ebp]
  000aa	51		 push	 ecx
  000ab	68 00 10 00 00	 push	 4096			; 00001000H
  000b0	8d 8d e4 ef ff
	ff		 lea	 ecx, DWORD PTR _buffer$505428[ebp]
  000b6	51		 push	 ecx
  000b7	50		 push	 eax
  000b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
$LL3@FileCrc32A:

; 377  : 			while(bSuccess && dwBytesRead)

  000be	3b c7		 cmp	 eax, edi
  000c0	74 cb		 je	 SHORT $LN2@FileCrc32A
  000c2	39 bd e0 ef ff
	ff		 cmp	 DWORD PTR _dwBytesRead$505429[ebp], edi
  000c8	74 c3		 je	 SHORT $LN2@FileCrc32A

; 378  : 			{
; 379  : 				// Register use:
; 380  : 				//		eax - CRC32 value
; 381  : 				//		ebx - a lot of things
; 382  : 				//		ecx - CRC32 value
; 383  : 				//		edx - address of end of buffer
; 384  : 				//		esi - address of start of buffer
; 385  : 				//		edi - CRC32 table
; 386  : 				__asm
; 387  : 				{
; 388  : 					// Save the esi and edi registers
; 389  : 					push esi

  000ca	56		 push	 esi

; 390  : 					push edi

  000cb	57		 push	 edi

; 391  : 
; 392  : 					mov eax, dwCrc32			// Load the pointer to dwCrc32

  000cc	8b 85 d8 ef ff
	ff		 mov	 eax, DWORD PTR _dwCrc32$GSCopy$[ebp]

; 393  : 					mov ecx, [eax]				// Dereference the pointer to load dwCrc32

  000d2	8b 08		 mov	 ecx, DWORD PTR [eax]

; 394  : 
; 395  : 					mov edi, ptrCrc32Table		// Load the CRC32 table

  000d4	8b bd d0 ef ff
	ff		 mov	 edi, DWORD PTR _ptrCrc32Table$505427[ebp]

; 396  : 
; 397  : 					lea esi, buffer				// Load buffer

  000da	8d b5 e4 ef ff
	ff		 lea	 esi, DWORD PTR _buffer$505428[ebp]

; 398  : 					mov ebx, dwBytesRead		// Load dwBytesRead

  000e0	8b 9d e0 ef ff
	ff		 mov	 ebx, DWORD PTR _dwBytesRead$505429[ebp]

; 399  : 					lea edx, [esi + ebx]		// Calculate the end of the buffer

  000e6	8d 14 1e	 lea	 edx, DWORD PTR [esi+ebx]
$crc32loop$505434:

; 400  : 
; 401  : 				crc32loop:
; 402  : 					xor eax, eax				// Clear the eax register

  000e9	33 c0		 xor	 eax, eax

; 403  : 					mov bl, byte ptr [esi]		// Load the current source byte

  000eb	8a 1e		 mov	 bl, BYTE PTR [esi]

; 404  : 					
; 405  : 					mov al, cl					// Copy crc value into eax

  000ed	8a c1		 mov	 al, cl

; 406  : 					inc esi						// Advance the source pointer

  000ef	46		 inc	 esi

; 407  : 
; 408  : 					xor al, bl					// Create the index into the CRC32 table

  000f0	32 c3		 xor	 al, bl

; 409  : 					shr ecx, 8

  000f2	c1 e9 08	 shr	 ecx, 8

; 410  : 
; 411  : 					mov ebx, [edi + eax * 4]	// Get the value out of the table

  000f5	8b 1c 87	 mov	 ebx, DWORD PTR [edi+eax*4]

; 412  : 					xor ecx, ebx				// xor with the current byte

  000f8	33 cb		 xor	 ecx, ebx

; 413  : 
; 414  : 					cmp edx, esi				// Have we reached the end of the buffer?

  000fa	3b d6		 cmp	 edx, esi

; 415  : 					jne crc32loop

  000fc	75 eb		 jne	 SHORT $crc32loop$505434

; 416  : 
; 417  : 					// Restore the edi and esi registers
; 418  : 					pop edi

  000fe	5f		 pop	 edi

; 419  : 					pop esi

  000ff	5e		 pop	 esi

; 420  : 
; 421  : 					mov eax, dwCrc32			// Load the pointer to dwCrc32

  00100	8b 85 d8 ef ff
	ff		 mov	 eax, DWORD PTR _dwCrc32$GSCopy$[ebp]

; 422  : 					mov [eax], ecx				// Write the result

  00106	89 08		 mov	 DWORD PTR [eax], ecx

; 423  : 				}
; 424  : 				bSuccess = ReadFile(hFile, buffer, sizeof(buffer), &dwBytesRead, NULL);

  00108	33 ff		 xor	 edi, edi
  0010a	57		 push	 edi
  0010b	8d 85 e0 ef ff
	ff		 lea	 eax, DWORD PTR _dwBytesRead$505429[ebp]
  00111	50		 push	 eax
  00112	68 00 10 00 00	 push	 4096			; 00001000H
  00117	8d 85 e4 ef ff
	ff		 lea	 eax, DWORD PTR _buffer$505428[ebp]
  0011d	50		 push	 eax
  0011e	ff b5 dc ef ff
	ff		 push	 DWORD PTR _hFile$[ebp]
  00124	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20

; 425  : 			}

  0012a	8b b5 d8 ef ff
	ff		 mov	 esi, DWORD PTR _dwCrc32$GSCopy$[ebp]
  00130	eb 8c		 jmp	 SHORT $LL3@FileCrc32A
$LN10@FileCrc32A:
$LN17@FileCrc32A:

; 428  : 	__except( EXCEPTION_EXECUTE_HANDLER )

  00132	33 c0		 xor	 eax, eax
  00134	40		 inc	 eax
$LN16@FileCrc32A:
$LN12@FileCrc32A:
  00135	c3		 ret	 0
$LN11@FileCrc32A:
  00136	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 429  : 	{
; 430  : 		// An unknown exception happened
; 431  : 		dwErrorCode = ERROR_CRC;

  00139	c7 85 d4 ef ff
	ff 17 00 00 00	 mov	 DWORD PTR _dwErrorCode$[ebp], 23 ; 00000017H

; 432  : 	}

  00143	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  0014a	33 ff		 xor	 edi, edi
  0014c	8b b5 d8 ef ff
	ff		 mov	 esi, DWORD PTR _dwCrc32$GSCopy$[ebp]
$LN13@FileCrc32A:

; 433  : 
; 434  : 	if(hFile != NULL) CloseHandle(hFile);

  00152	39 bd dc ef ff
	ff		 cmp	 DWORD PTR _hFile$[ebp], edi
  00158	74 0c		 je	 SHORT $LN1@FileCrc32A
  0015a	ff b5 dc ef ff
	ff		 push	 DWORD PTR _hFile$[ebp]
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN1@FileCrc32A:

; 435  : 
; 436  : 	dwCrc32 = ~dwCrc32;

  00166	f7 16		 not	 DWORD PTR [esi]

; 437  : 
; 438  : 	return dwErrorCode;

  00168	8b 85 d4 ef ff
	ff		 mov	 eax, DWORD PTR _dwErrorCode$[ebp]

; 439  : }

  0016e	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00171	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00178	59		 pop	 ecx
  00179	5f		 pop	 edi
  0017a	5e		 pop	 esi
  0017b	5b		 pop	 ebx
  0017c	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0017f	33 cd		 xor	 ecx, ebp
  00181	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00186	c9		 leave
  00187	c3		 ret	 0
?FileCrc32Assembly@CCrc32Static@@SAKPBDAAK@Z ENDP	; CCrc32Static::FileCrc32Assembly
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?is_open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::is_open
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
;	COMDAT ?is_open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?is_open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::is_open, COMDAT
; _this$ = ecx

; 212  : 		return (_Myfile != 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 54	 cmp	 DWORD PTR [ecx+84], eax
  00005	0f 95 c0	 setne	 al

; 213  : 		}

  00008	c3		 ret	 0
?is_open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::is_open
_TEXT	ENDS
PUBLIC	?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
PUBLIC	?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init
EXTRN	__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ:PROC
;	COMDAT ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
_BSS	SEGMENT
?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA DD 01H DUP (?) ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
_BSS	ENDS
;	COMDAT ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z
_TEXT	SEGMENT
__File$ = 8						; size = 4
__Which$ = 12						; size = 4
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = ecx

; 555  : 		{	// initialize to C stream _File after {new, open, close}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 556  : 		__PURE_APPDOMAIN_GLOBAL static _Myst _Stinit;	// initial state
; 557  : 
; 558  : 		_Closef = _Which == _Openfl;

  00003	83 7d 0c 01	 cmp	 DWORD PTR __Which$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	0f 94 c0	 sete	 al
  0000d	88 46 50	 mov	 BYTE PTR [esi+80], al

; 559  : 		_Wrotesome = false;

  00010	c6 46 49 00	 mov	 BYTE PTR [esi+73], 0

; 560  : 
; 561  : 		_Mysb::_Init();	// initialize stream buffer base object

  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ

; 562  : 
; 563  :  #ifndef _IORCNT
; 564  :   #define _IORCNT	_IOCNT	/* read and write counts are the same */
; 565  :   #define _IOWCNT _IOCNT
; 566  :  #endif /* _IORCNT */
; 567  : 
; 568  :   #pragma warning(push)
; 569  :   #pragma warning(disable: 6240)	/* prefast noise VSW 489858 */
; 570  : 		if (_File != 0 && sizeof (_Elem) == 1)

  0001a	8b 45 08	 mov	 eax, DWORD PTR __File$[ebp]
  0001d	85 c0		 test	 eax, eax
  0001f	74 18		 je	 SHORT $LN10@Init

; 571  :   #pragma warning(pop)
; 572  : 
; 573  : 			{	// point inside C stream with [first, first + count) buffer
; 574  : 			_Elem **_Pb = (_Elem **)&_File->_IOBASE;

  00021	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]

; 575  : 			_Elem **_Pn = (_Elem **)&_File->_IOPTR;
; 576  : 			int *_Nr = (int *)&_File->_IORCNT;
; 577  : 			int *_Nw = (int *)&_File->_IOWCNT;
; 578  : 			_Mysb::_Init(_Pb, _Pn, _Nr, _Pb, _Pn, _Nw);

  00024	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00027	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  0002a	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0002d	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00030	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00033	89 4e 30	 mov	 DWORD PTR [esi+48], ecx
  00036	89 4e 34	 mov	 DWORD PTR [esi+52], ecx
$LN10@Init:

; 579  : 			}
; 580  : 
; 581  : 		_Myfile = _File;

  00039	89 46 54	 mov	 DWORD PTR [esi+84], eax

; 582  : 		_State = _Stinit;

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit

; 583  : 		_Pcvt = 0;	// pointer to codecvt facet

  00041	83 66 44 00	 and	 DWORD PTR [esi+68], 0
  00045	89 46 4c	 mov	 DWORD PTR [esi+76], eax
  00048	5e		 pop	 esi

; 584  : 		}

  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
PUBLIC	?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
EXTRN	__imp_?always_noconv@codecvt_base@std@@QBE_NXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z
_TEXT	SEGMENT
__Newpcvt$ = 8						; size = 4
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt, COMDAT
; _this$ = ecx

; 628  : 		{	// initialize codecvt pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 629  : 		if (_Newpcvt->always_noconv())

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Newpcvt$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	8b cf		 mov	 ecx, edi
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?always_noconv@codecvt_base@std@@QBE_NXZ
  00012	84 c0		 test	 al, al
  00014	74 06		 je	 SHORT $LN2@Initcvt

; 630  : 			_Pcvt = 0;	// nothing to do

  00016	83 66 44 00	 and	 DWORD PTR [esi+68], 0

; 631  : 		else

  0001a	eb 0b		 jmp	 SHORT $LN1@Initcvt
$LN2@Initcvt:

; 632  : 			{	// set up for nontrivial codecvt facet
; 633  : 			_Pcvt = _Newpcvt;
; 634  : 			_Mysb::_Init();	// reset any buffering

  0001c	8b ce		 mov	 ecx, esi
  0001e	89 7e 44	 mov	 DWORD PTR [esi+68], edi
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
$LN1@Initcvt:
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi

; 635  : 			}
; 636  : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
_TEXT	ENDS
PUBLIC	?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
; Function compile flags: /Ogsp
;	COMDAT ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back, COMDAT
; _this$ = ecx

; 641  : 		if (_Mysb::eback() == &_Mychar)

  00000	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00003	8d 41 48	 lea	 eax, DWORD PTR [ecx+72]
  00006	39 02		 cmp	 DWORD PTR [edx], eax
  00008	75 16		 jne	 SHORT $LN6@Reset_back

; 642  : 			_Mysb::setg(_Set_eback, _Set_egptr, _Set_egptr);

  0000a	8b 41 40	 mov	 eax, DWORD PTR [ecx+64]
  0000d	56		 push	 esi
  0000e	8b 71 3c	 mov	 esi, DWORD PTR [ecx+60]
  00011	89 32		 mov	 DWORD PTR [edx], esi
  00013	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00016	89 02		 mov	 DWORD PTR [edx], eax
  00018	8b 49 30	 mov	 ecx, DWORD PTR [ecx+48]
  0001b	2b c0		 sub	 eax, eax
  0001d	89 01		 mov	 DWORD PTR [ecx], eax
  0001f	5e		 pop	 esi
$LN6@Reset_back:

; 643  : 		}

  00020	c3		 ret	 0
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
EXTRN	_memcpy:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 496  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 		}

  00003	5d		 pop	 ebp

; 497  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAPADPADID@Z	; std::char_traits<char>::assign
EXTRN	_memset:PROC
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$char_traits@D@std@@SAPADPADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADPADID@Z PROC		; std::char_traits<char>::assign, COMDAT

; 521  : 		{	// assign _Count * _Ch to [_First, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 522  : 		return ((_Elem *)_CSTD memset(_First, _Ch, _Count));

  00003	0f be 45 10	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00007	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0000a	50		 push	 eax
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	e8 00 00 00 00	 call	 _memset
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH

; 523  : 		}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?assign@?$char_traits@D@std@@SAPADPADID@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 526  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 527  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]
  00008	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000b	88 01		 mov	 BYTE PTR [ecx], al

; 528  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
; Function compile flags: /Ogsp
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 552  : 		{	// test for metacharacter equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 553  : 		return (_Left == _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000b	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000d	f7 d8		 neg	 eax
  0000f	1b c0		 sbb	 eax, eax
  00011	40		 inc	 eax

; 554  : 		}

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
; Function compile flags: /Ogsp
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 563  : 		return (EOF);

  00000	83 c8 ff	 or	 eax, -1

; 564  : 		}

  00003	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?_Register@facet@locale@std@@QAEXXZ		; std::locale::facet::_Register
EXTRN	?_Facet_Register@facet@locale@std@@CAXPAV123@@Z:PROC ; std::locale::facet::_Facet_Register
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
;	COMDAT ?_Register@facet@locale@std@@QAEXXZ
_TEXT	SEGMENT
?_Register@facet@locale@std@@QAEXXZ PROC		; std::locale::facet::_Register, COMDAT
; _this$ = ecx

; 129  :  #if defined(_M_CEE)
; 130  : 			_Facet_Register_m(this);
; 131  : 
; 132  :  #else /* defined(_M_CEE) */
; 133  : 			_Facet_Register(this);

  00000	51		 push	 ecx
  00001	e8 00 00 00 00	 call	 ?_Facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::_Facet_Register
  00006	59		 pop	 ecx

; 134  :  #endif /* defined(_M_CEE) */
; 135  : 			}

  00007	c3		 ret	 0
?_Register@facet@locale@std@@QAEXXZ ENDP		; std::locale::facet::_Register
_TEXT	ENDS
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
EXTRN	__imp_?_Decref@facet@locale@std@@QAEPAV123@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 410  : 		if (_Ptr != 0)

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	74 12		 je	 SHORT $LN4@locale

; 411  : 			_DELETE_CRT(_Ptr->_Decref());

  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Decref@facet@locale@std@@QAEPAV123@XZ
  0000c	85 c0		 test	 eax, eax
  0000e	74 08		 je	 SHORT $LN4@locale
  00010	8b 10		 mov	 edx, DWORD PTR [eax]
  00012	6a 01		 push	 1
  00014	8b c8		 mov	 ecx, eax
  00016	ff 12		 call	 DWORD PTR [edx]
$LN4@locale:

; 412  : 		}

  00018	c3		 ret	 0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
EXTRN	__imp_?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 436  : 		{	// look up a facet in locale object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 437  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 438  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR __Id$[ebp]
  00009	3b 71 0c	 cmp	 esi, DWORD PTR [ecx+12]
  0000c	73 08		 jae	 SHORT $LN6@Getfacet
  0000e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00011	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00014	eb 02		 jmp	 SHORT $LN7@Getfacet
$LN6@Getfacet:
  00016	33 c0		 xor	 eax, eax
$LN7@Getfacet:

; 439  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00018	85 c0		 test	 eax, eax
  0001a	75 1a		 jne	 SHORT $LN1@Getfacet
  0001c	38 41 14	 cmp	 BYTE PTR [ecx+20], al
  0001f	74 15		 je	 SHORT $LN1@Getfacet

; 440  : 			return (_Facptr);	// found facet or not transparent
; 441  : 		else
; 442  : 			{	// look in current locale
; 443  : 			locale::_Locimp *_Ptr = _Getgloballocale();

  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ

; 444  : 			return (_Id < _Ptr->_Facetcount
; 445  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 446  : 				: 0);	// no entry in current locale

  00027	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  0002a	73 08		 jae	 SHORT $LN8@Getfacet
  0002c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002f	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00032	eb 02		 jmp	 SHORT $LN1@Getfacet
$LN8@Getfacet:
  00034	33 c0		 xor	 eax, eax
$LN1@Getfacet:
  00036	5e		 pop	 esi

; 447  : 			}
; 448  : 		}

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1512 : 		return (this->_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1513 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 459  : 		}

  00000	c3		 ret	 0
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ
_TEXT	SEGMENT
??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*, COMDAT
; _this$ = ecx

; 71   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 72   : 		if (this->_Getcont() == 0
; 73   : 			|| this->_Ptr == 0
; 74   : 			|| this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
; 75   : 			|| ((_Mystr *)this->_Getcont())->_Myptr()
; 76   : 				+ ((_Mystr *)this->_Getcont())->_Mysize <= this->_Ptr)
; 77   : 			{	// report error
; 78   : 			_DEBUG_ERROR("string iterator not dereferencable");
; 79   : 			_SCL_SECURE_OUT_OF_RANGE;
; 80   : 			}
; 81   : 
; 82   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 83   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 84   : 		_SCL_SECURE_VALIDATE_RANGE(
; 85   : 			((_Mystr *)this->_Getcont())->_Myptr() <= this->_Ptr
; 86   : 			&& this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
; 87   : 				+ ((_Mystr *)this->_Getcont())->_Mysize);
; 88   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 89   : 
; 90   : 		__analysis_assume(this->_Ptr != 0);
; 91   : 
; 92   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 93   : 		}

  00002	c3		 ret	 0
??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2004 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2005 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2006 : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 2004 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2005 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2006 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2016 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base0@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base0@1@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 50   : 	_String_const_iterator(pointer _Parg, const _Container_base *_Pstring)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 51   : 		{	// construct with pointer _Parg
; 52   : 		this->_Adopt(_Pstring);
; 53   : 		this->_Ptr = _Parg;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 54   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base0@1@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 220  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T506613 = -12						; size = 12
$T506618 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;

  00003	33 c0		 xor	 eax, eax
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 32   : 
; 33   : 	if (_Count <= 0)

  00008	39 45 08	 cmp	 DWORD PTR __Count$[ebp], eax

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000b	76 39		 jbe	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000d	83 7d 08 ff	 cmp	 DWORD PTR __Count$[ebp], -1
  00011	77 0d		 ja	 SHORT $LN1@Allocate
  00013	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00016	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001b	59		 pop	 ecx
  0001c	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0001e	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00020	83 65 08 00	 and	 DWORD PTR $T506618[ebp], 0
  00024	8d 45 08	 lea	 eax, DWORD PTR $T506618[ebp]
  00027	50		 push	 eax
  00028	8d 4d f4	 lea	 ecx, DWORD PTR $T506613[ebp]
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00031	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00036	8d 45 f4	 lea	 eax, DWORD PTR $T506613[ebp]
  00039	50		 push	 eax
  0003a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T506613[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00041	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  00046	c9		 leave
  00047	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GCCrc32Static@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCrc32Static@@UAEPAXI@Z PROC			; CCrc32Static::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CCrc32Static@@6B@
  00010	74 07		 je	 SHORT $LN1@scalar@2
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@2:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_GCCrc32Static@@UAEPAXI@Z ENDP			; CCrc32Static::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?is_open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ifstream<char,std::char_traits<char> >::is_open
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
;	COMDAT ?is_open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?is_open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::is_open, COMDAT
; _this$ = ecx

; 855  : 		return (_Filebuffer.is_open());

  00000	33 c0		 xor	 eax, eax
  00002	39 41 64	 cmp	 DWORD PTR [ecx+100], eax
  00005	0f 95 c0	 setne	 al

; 856  : 		}

  00008	c3		 ret	 0
?is_open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::is_open
_TEXT	ENDS
PUBLIC	??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Lock
PUBLIC	?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock
PUBLIC	?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::overflow
PUBLIC	?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::underflow
PUBLIC	?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::uflow
PUBLIC	?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
PUBLIC	?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
PUBLIC	?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::sync
PUBLIC	?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::imbue
EXTRN	__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	__imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_filebuf<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
EXTRN	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
EXTRN	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z
	DD	FLAT:?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z$0
__ehfuncinfo$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__File$ = 8						; size = 4
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 152  : 		{	// construct from pointer to C stream

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 153  : 		_Init(_File, _Newfl);

  0001b	6a 00		 push	 0
  0001d	ff 75 08	 push	 DWORD PTR __File$[ebp]
  00020	8b ce		 mov	 ecx, esi
  00022	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
  00028	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 154  : 		}

  0002d	8b c6		 mov	 eax, esi
  0002f	e8 00 00 00 00	 call	 __EH_epilog3
  00034	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
__ehhandler$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
EXTRN	__imp___lock_file:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Lock, COMDAT
; _this$ = ecx

; 309  : 		if (_Myfile)

  00000	8b 41 54	 mov	 eax, DWORD PTR [ecx+84]
  00003	85 c0		 test	 eax, eax
  00005	74 08		 je	 SHORT $LN1@Lock

; 310  : 			_CSTD _lock_file(_Myfile);

  00007	50		 push	 eax
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lock_file
  0000e	59		 pop	 ecx
$LN1@Lock:

; 311  : 		}

  0000f	c3		 ret	 0
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
EXTRN	__imp___unlock_file:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock, COMDAT
; _this$ = ecx

; 315  : 		if (_Myfile)

  00000	8b 41 54	 mov	 eax, DWORD PTR [ecx+84]
  00003	85 c0		 test	 eax, eax
  00005	74 08		 je	 SHORT $LN1@Unlock

; 316  : 			_CSTD _unlock_file(_Myfile);

  00007	50		 push	 eax
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___unlock_file
  0000e	59		 pop	 ecx
$LN1@Unlock:

; 317  : 		}

  0000f	c3		 ret	 0
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
PUBLIC	??0?$fpos@H@std@@QAE@H_J@Z			; std::fpos<int>::fpos<int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ??0?$fpos@H@std@@QAE@H_J@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Fileposition$ = 12					; size = 8
??0?$fpos@H@std@@QAE@H_J@Z PROC				; std::fpos<int>::fpos<int>, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with conversion state and C file position

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 0c	 mov	 ecx, DWORD PTR __Fileposition$[ebp]
  00008	83 20 00	 and	 DWORD PTR [eax], 0
  0000b	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  0000f	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00012	8b 4d 10	 mov	 ecx, DWORD PTR __Fileposition$[ebp+4]
  00015	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00018	8b 4d 08	 mov	 ecx, DWORD PTR __State$[ebp]
  0001b	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 46   : 		}

  0001e	5d		 pop	 ebp
  0001f	c2 0c 00	 ret	 12			; 0000000cH
??0?$fpos@H@std@@QAE@H_J@Z ENDP				; std::fpos<int>::fpos<int>
_TEXT	ENDS
PUBLIC	?state@?$fpos@H@std@@QBEHXZ			; std::fpos<int>::state
; Function compile flags: /Ogsp
;	COMDAT ?state@?$fpos@H@std@@QBEHXZ
_TEXT	SEGMENT
?state@?$fpos@H@std@@QBEHXZ PROC			; std::fpos<int>::state, COMDAT
; _this$ = ecx

; 50   : 		return (_Mystate);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 51   : 		}

  00003	c3		 ret	 0
?state@?$fpos@H@std@@QBEHXZ ENDP			; std::fpos<int>::state
_TEXT	ENDS
PUBLIC	?seekpos@?$fpos@H@std@@QBE_JXZ			; std::fpos<int>::seekpos
; Function compile flags: /Ogsp
;	COMDAT ?seekpos@?$fpos@H@std@@QBE_JXZ
_TEXT	SEGMENT
?seekpos@?$fpos@H@std@@QBE_JXZ PROC			; std::fpos<int>::seekpos, COMDAT
; _this$ = ecx

; 60   : 		return (_Fpos);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]

; 61   : 		}

  00006	c3		 ret	 0
?seekpos@?$fpos@H@std@@QBE_JXZ ENDP			; std::fpos<int>::seekpos
_TEXT	ENDS
PUBLIC	??B?$fpos@H@std@@QBE_JXZ			; std::fpos<int>::operator __int64
; Function compile flags: /Ogsp
;	COMDAT ??B?$fpos@H@std@@QBE_JXZ
_TEXT	SEGMENT
??B?$fpos@H@std@@QBE_JXZ PROC				; std::fpos<int>::operator __int64, COMDAT
; _this$ = ecx

; 65   : 		return ((streamoff)(_Myoff + _FPOSOFF(_Fpos)));

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	99		 cdq
  00004	03 01		 add	 eax, DWORD PTR [ecx]
  00006	13 51 04	 adc	 edx, DWORD PTR [ecx+4]

; 66   : 		}

  00009	c3		 ret	 0
??B?$fpos@H@std@@QBE_JXZ ENDP				; std::fpos<int>::operator __int64
_TEXT	ENDS
PUBLIC	?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
;	COMDAT ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back, COMDAT
; _this$ = ecx

; 647  : 		if (_Mysb::eback() != &_Mychar)

  00000	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00003	56		 push	 esi
  00004	8b 32		 mov	 esi, DWORD PTR [edx]
  00006	8d 41 48	 lea	 eax, DWORD PTR [ecx+72]
  00009	3b f0		 cmp	 esi, eax
  0000b	74 12		 je	 SHORT $LN1@Set_back

; 648  : 			{	// save current get buffer
; 649  : 			_Set_eback = _Mysb::eback();

  0000d	89 71 3c	 mov	 DWORD PTR [ecx+60], esi

; 650  : 			_Set_egptr = _Mysb::egptr();

  00010	8b 71 30	 mov	 esi, DWORD PTR [ecx+48]
  00013	8b 36		 mov	 esi, DWORD PTR [esi]
  00015	57		 push	 edi
  00016	8b 79 20	 mov	 edi, DWORD PTR [ecx+32]
  00019	03 37		 add	 esi, DWORD PTR [edi]
  0001b	5f		 pop	 edi
  0001c	89 71 40	 mov	 DWORD PTR [ecx+64], esi
$LN1@Set_back:

; 651  : 			}
; 652  : 		_Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);

  0001f	89 02		 mov	 DWORD PTR [edx], eax
  00021	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00024	89 02		 mov	 DWORD PTR [edx], eax
  00026	8b d1		 mov	 edx, ecx
  00028	2b d0		 sub	 edx, eax
  0002a	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0002d	83 c2 49	 add	 edx, 73			; 00000049H
  00030	89 10		 mov	 DWORD PTR [eax], edx
  00032	5e		 pop	 esi

; 653  : 		}

  00033	c3		 ret	 0
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 516  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 518  : 		}

  00003	5d		 pop	 ebp

; 517  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?to_char_type@?$char_traits@D@std@@SADABH@Z	; std::char_traits<char>::to_char_type
; Function compile flags: /Ogsp
;	COMDAT ?to_char_type@?$char_traits@D@std@@SADABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$char_traits@D@std@@SADABH@Z PROC	; std::char_traits<char>::to_char_type, COMDAT

; 541  : 		{	// convert metacharacter to character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 542  : 		return ((_Elem)_Meta);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]

; 543  : 		}

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?to_char_type@?$char_traits@D@std@@SADABH@Z ENDP	; std::char_traits<char>::to_char_type
_TEXT	ENDS
PUBLIC	?to_int_type@?$char_traits@D@std@@SAHABD@Z	; std::char_traits<char>::to_int_type
; Function compile flags: /Ogsp
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHABD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@D@std@@SAHABD@Z PROC		; std::char_traits<char>::to_int_type, COMDAT

; 546  : 		{	// convert character to metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 547  : 		return ((unsigned char)_Ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ch$[ebp]
  00006	0f b6 00	 movzx	 eax, BYTE PTR [eax]

; 548  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?to_int_type@?$char_traits@D@std@@SAHABD@Z ENDP		; std::char_traits<char>::to_int_type
_TEXT	ENDS
PUBLIC	??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z		; std::_Fgetc<char>
EXTRN	__imp__fgetc:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
;	COMDAT ??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 4
__File$ = 12						; size = 4
??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z PROC		; std::_Fgetc<char>, COMDAT

; 35   : 	{	// get a char element from a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 36   : 	int _Meta;
; 37   : 	if ((_Meta = fgetc(_File)) == EOF)

  00003	ff 75 0c	 push	 DWORD PTR __File$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  0000c	59		 pop	 ecx
  0000d	83 f8 ff	 cmp	 eax, -1
  00010	75 04		 jne	 SHORT $LN2@Fgetc

; 38   : 		return (false);

  00012	32 c0		 xor	 al, al

; 43   : 		}
; 44   : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
$LN2@Fgetc:

; 39   : 	else
; 40   : 		{	// got one, convert to char
; 41   : 		_Byte = (char)_Meta;

  00016	8b 4d 08	 mov	 ecx, DWORD PTR __Byte$[ebp]
  00019	88 01		 mov	 BYTE PTR [ecx], al

; 42   : 		return (true);

  0001b	b0 01		 mov	 al, 1

; 43   : 		}
; 44   : 	}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z ENDP		; std::_Fgetc<char>
_TEXT	ENDS
PUBLIC	??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z		; std::_Fputc<char>
EXTRN	__imp__fputc:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
__File$ = 12						; size = 4
??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z PROC		; std::_Fputc<char>, COMDAT

; 80   : 	{	// put a char element to a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 81   : 	return (fputc(_Byte, _File) != EOF);

  00003	0f be 45 08	 movsx	 eax, BYTE PTR __Byte$[ebp]
  00007	ff 75 0c	 push	 DWORD PTR __File$[ebp]
  0000a	50		 push	 eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fputc
  00011	59		 pop	 ecx
  00012	59		 pop	 ecx
  00013	33 c9		 xor	 ecx, ecx
  00015	83 f8 ff	 cmp	 eax, -1
  00018	0f 95 c0	 setne	 al

; 82   : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ENDP		; std::_Fputc<char>
_TEXT	ENDS
PUBLIC	??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z		; std::_Ungetc<char>
EXTRN	__imp__ungetc:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 4
__File$ = 12						; size = 4
??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z PROC		; std::_Ungetc<char>, COMDAT

; 104  : 	{	// put back a char element to a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 105  : 	return (ungetc((unsigned char)_Byte, _File) != EOF);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Byte$[ebp]
  00006	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00009	ff 75 0c	 push	 DWORD PTR __File$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ungetc
  00013	59		 pop	 ecx
  00014	59		 pop	 ecx
  00015	33 c9		 xor	 ecx, ecx
  00017	83 f8 ff	 cmp	 eax, -1
  0001a	0f 95 c0	 setne	 al

; 106  : 	}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z ENDP		; std::_Ungetc<char>
_TEXT	ENDS
PUBLIC	??0?$fpos@H@std@@QAE@_J@Z			; std::fpos<int>::fpos<int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ??0?$fpos@H@std@@QAE@_J@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 8
??0?$fpos@H@std@@QAE@_J@Z PROC				; std::fpos<int>::fpos<int>, COMDAT
; _this$ = ecx

; 40   : 		{	// construct with stream offset

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Off$[ebp+4]
  0000d	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00010	33 c9		 xor	 ecx, ecx
  00012	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00015	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00018	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 41   : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
??0?$fpos@H@std@@QAE@_J@Z ENDP				; std::fpos<int>::fpos<int>
_TEXT	ENDS
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
EXTRN	__imp_?_Xout_of_range@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2021 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN4@Xran:
$LN3@Xran:
  0000b	cc		 int	 3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
EXTRN	__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
;	COMDAT ?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::underflow, COMDAT
; _this$ = ecx

; 408  : 		{	// get an element from stream, but don't point past it

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 409  : 		int_type _Meta;
; 410  : 		if (_Mysb::gptr() != 0
; 411  : 			&& _Mysb::gptr() < _Mysb::egptr())

  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0000a	85 c0		 test	 eax, eax
  0000c	74 23		 je	 SHORT $LN4@underflow
  0000e	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00011	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00014	8b 38		 mov	 edi, DWORD PTR [eax]
  00016	03 39		 add	 edi, DWORD PTR [ecx]
  00018	8b ce		 mov	 ecx, esi
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00020	3b c7		 cmp	 eax, edi
  00022	73 0d		 jae	 SHORT $LN4@underflow

; 412  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

  00024	8b ce		 mov	 ecx, esi
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0002c	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0002f	eb 1a		 jmp	 SHORT $LN1@underflow
$LN4@underflow:

; 413  : 		else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	8b ce		 mov	 ecx, esi
  00035	ff 50 1c	 call	 DWORD PTR [eax+28]
  00038	8b f8		 mov	 edi, eax
  0003a	83 c8 ff	 or	 eax, -1
  0003d	3b f8		 cmp	 edi, eax

; 414  : 			return (_Meta);	// uflow failed, return EOF

  0003f	74 0a		 je	 SHORT $LN1@underflow

; 415  : 		else
; 416  : 			{	// get a char, don't point past it
; 417  : 			pbackfail(_Meta);

  00041	8b 06		 mov	 eax, DWORD PTR [esi]
  00043	57		 push	 edi
  00044	8b ce		 mov	 ecx, esi
  00046	ff 50 10	 call	 DWORD PTR [eax+16]

; 418  : 			return (_Meta);

  00049	8b c7		 mov	 eax, edi
$LN1@underflow:

; 419  : 			}
; 420  : 		}

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	c3		 ret	 0
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::underflow
_TEXT	ENDS
EXTRN	__imp__setvbuf:PROC
; Function compile flags: /Ogsp
;	COMDAT ?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Count$ = 12						; size = 8
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::setbuf, COMDAT
; _this$ = ecx

; 530  : 		{	// offer _Buffer to C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 531  : 		if (_Myfile == 0 || setvbuf(_Myfile, (char *)_Buffer,
; 532  : 			_Buffer == 0 && _Count == 0 ? _IONBF : _IOFBF,
; 533  : 			(size_t)_Count * sizeof (_Elem)) != 0)

  00006	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  00009	33 c9		 xor	 ecx, ecx
  0000b	3b c1		 cmp	 eax, ecx
  0000d	74 35		 je	 SHORT $LN2@setbuf
  0000f	39 4d 08	 cmp	 DWORD PTR __Buffer$[ebp], ecx
  00012	75 0b		 jne	 SHORT $LN6@setbuf
  00014	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00017	0b 55 10	 or	 edx, DWORD PTR __Count$[ebp+4]
  0001a	75 03		 jne	 SHORT $LN6@setbuf
  0001c	6a 04		 push	 4
  0001e	59		 pop	 ecx
$LN6@setbuf:
  0001f	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00022	51		 push	 ecx
  00023	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00026	50		 push	 eax
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setvbuf
  0002d	83 c4 10	 add	 esp, 16			; 00000010H
  00030	85 c0		 test	 eax, eax
  00032	75 10		 jne	 SHORT $LN2@setbuf

; 535  : 		else
; 536  : 			{	// new buffer, reinitialize pointers
; 537  : 			_Init(_Myfile, _Openfl);

  00034	6a 01		 push	 1
  00036	ff 76 54	 push	 DWORD PTR [esi+84]
  00039	8b ce		 mov	 ecx, esi
  0003b	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 538  : 			return (this);

  00040	8b c6		 mov	 eax, esi
  00042	eb 02		 jmp	 SHORT $LN1@setbuf
$LN2@setbuf:

; 534  : 			return (0);	// failed

  00044	33 c0		 xor	 eax, eax
$LN1@setbuf:
  00046	5e		 pop	 esi

; 539  : 			}
; 540  : 		}

  00047	5d		 pop	 ebp
  00048	c2 0c 00	 ret	 12			; 0000000cH
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
_TEXT	ENDS
EXTRN	__imp__fflush:PROC
; Function compile flags: /Ogsp
;	COMDAT ?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::sync, COMDAT
; _this$ = ecx

; 543  : 		{	// synchronize C stream with external file

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 544  : 		return (_Myfile == 0
; 545  : 			|| _Traits::eq_int_type(_Traits::eof(), overflow())
; 546  : 			|| 0 <= fflush(_Myfile) ? 0 : -1);

  00003	83 7e 54 00	 cmp	 DWORD PTR [esi+84], 0
  00007	74 1f		 je	 SHORT $LN3@sync
  00009	8b 06		 mov	 eax, DWORD PTR [esi]
  0000b	6a ff		 push	 -1
  0000d	ff 50 0c	 call	 DWORD PTR [eax+12]
  00010	83 f8 ff	 cmp	 eax, -1
  00013	74 13		 je	 SHORT $LN3@sync
  00015	ff 76 54	 push	 DWORD PTR [esi+84]
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fflush
  0001e	59		 pop	 ecx
  0001f	85 c0		 test	 eax, eax
  00021	79 05		 jns	 SHORT $LN3@sync
  00023	83 c8 ff	 or	 eax, -1
  00026	5e		 pop	 esi

; 547  : 		}

  00027	c3		 ret	 0
$LN3@sync:

; 544  : 		return (_Myfile == 0
; 545  : 			|| _Traits::eq_int_type(_Traits::eof(), overflow())
; 546  : 			|| 0 <= fflush(_Myfile) ? 0 : -1);

  00028	33 c0		 xor	 eax, eax
  0002a	5e		 pop	 esi

; 547  : 		}

  0002b	c3		 ret	 0
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::sync
_TEXT	ENDS
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	??_C@_08EPJLHIJG@bad?5cast?$AA@			; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::codecvt<char,char,int> >::_Psave
PUBLIC	??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,int> >
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	__imp_?_Incref@facet@locale@std@@QAEXXZ:PROC
EXTRN	__imp_??0bad_cast@std@@QAE@PBD@Z:PROC
EXTRN	__imp_?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:PROC
EXTRN	__imp_??Bid@locale@std@@QAEIXZ:PROC
EXTRN	__imp_?id@?$codecvt@DDH@std@@2V0locale@2@A:DWORD
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	??1bad_cast@std@@UAE@XZ:PROC			; std::bad_cast::~bad_cast
EXTRN	??0bad_cast@std@@QAE@ABV01@@Z:PROC		; std::bad_cast::bad_cast
;	COMDAT ?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::codecvt<char,char,int> >::_Psave
_BSS	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast?$AA@ DB 'bad cast', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T506743 = -32						; size = 12
__Lock$505788 = -20					; size = 4
__Psave$505789 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z PROC ; std::use_facet<std::codecvt<char,char,int> >, COMDAT

; 504  : 	{	// get facet reference from locale

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 505  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  0000c	6a 00		 push	 0
  0000e	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$505788[ebp]
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 506  : 		const locale::facet *_Psave =
; 507  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::codecvt<char,char,int> >::_Psave

; 508  : 
; 509  : 		size_t _Id = _Facet::id;

  0001c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?id@?$codecvt@DDH@std@@2V0locale@2@A
  00022	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00026	89 45 f0	 mov	 DWORD PTR __Psave$505789[ebp], eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Bid@locale@std@@QAEIXZ

; 510  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  0002f	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
  00038	8b f0		 mov	 esi, eax

; 511  : 
; 512  : 		if (_Pf != 0)

  0003a	85 f6		 test	 esi, esi
  0003c	75 51		 jne	 SHORT $LN10@use_facet

; 513  : 			;	// got facet from locale
; 514  : 		else if (_Psave != 0)

  0003e	8b 75 f0	 mov	 esi, DWORD PTR __Psave$505789[ebp]
  00041	85 f6		 test	 esi, esi

; 515  : 			_Pf = _Psave;	// lazy facet already allocated

  00043	75 4a		 jne	 SHORT $LN10@use_facet

; 516  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  00045	ff 75 08	 push	 DWORD PTR __Loc$[ebp]
  00048	8d 45 f0	 lea	 eax, DWORD PTR __Psave$505789[ebp]
  0004b	50		 push	 eax
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00052	59		 pop	 ecx
  00053	59		 pop	 ecx
  00054	83 f8 ff	 cmp	 eax, -1
  00057	75 1c		 jne	 SHORT $LN2@use_facet

; 517  : 
; 518  :  #if _HAS_EXCEPTIONS
; 519  : 
; 520  : 			_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  00059	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  0005e	8d 4d e0	 lea	 ecx, DWORD PTR $T506743[ebp]
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0bad_cast@std@@QAE@PBD@Z
  00067	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  0006c	8d 45 e0	 lea	 eax, DWORD PTR $T506743[ebp]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN14@use_facet:
$LN2@use_facet:

; 521  : 
; 522  :  #else /* _HAS_EXCEPTIONS */
; 523  : 			abort();	// lazy disallowed
; 524  :  #endif /* _HAS_EXCEPTIONS */
; 525  : 
; 526  : 		else
; 527  : 			{	// queue up lazy facet for destruction
; 528  : 			_Pf = _Psave;

  00075	8b 4d f0	 mov	 ecx, DWORD PTR __Psave$505789[ebp]
  00078	8b f1		 mov	 esi, ecx

; 529  : 			_Facetptr<_Facet>::_Psave = _Psave;

  0007a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B, ecx ; std::_Facetptr<std::codecvt<char,char,int> >::_Psave

; 530  : 
; 531  : 			locale::facet *_Pfmod = (_Facet *)_Psave;

  00080	8b f9		 mov	 edi, ecx

; 532  : 			_Pfmod->_Incref();

  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Incref@facet@locale@std@@QAEXXZ

; 533  : 			_Pfmod->_Register();

  00088	57		 push	 edi
  00089	e8 00 00 00 00	 call	 ?_Facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::_Facet_Register
  0008e	59		 pop	 ecx
$LN10@use_facet:

; 534  : 			}
; 535  : 
; 536  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  0008f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00093	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$505788[ebp]
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0009c	8b c6		 mov	 eax, esi

; 537  : 	_END_LOCK()
; 538  : 	}

  0009e	e8 00 00 00 00	 call	 __EH_epilog3
  000a3	c3		 ret	 0
$LN13@use_facet:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$505788[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
__ehhandler$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::codecvt<char,char,int> >
PUBLIC	?not_eof@?$char_traits@D@std@@SAHABH@Z		; std::char_traits<char>::not_eof
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?not_eof@?$char_traits@D@std@@SAHABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?not_eof@?$char_traits@D@std@@SAHABH@Z PROC		; std::char_traits<char>::not_eof, COMDAT

; 557  : 		{	// return anything but EOF

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 558  : 		return (_Meta != eof() ? _Meta : !eof());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0000b	f7 d8		 neg	 eax
  0000d	1b c0		 sbb	 eax, eax
  0000f	23 c1		 and	 eax, ecx

; 559  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?not_eof@?$char_traits@D@std@@SAHABH@Z ENDP		; std::char_traits<char>::not_eof
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 454  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 455  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ
_TEXT	SEGMENT
??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*, COMDAT
; _this$ = ecx

; 343  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 344  : 		}

  00002	c3		 ret	 0
??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
_TEXT	ENDS
PUBLIC	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
; Function compile flags: /Ogsp
;	COMDAT ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign, COMDAT
; _this$ = ecx

; 1911 : 		{	// assign _Count copies of _Ch beginning at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1912 : 		if (_Count == 1)

  00003	83 7d 0c 01	 cmp	 DWORD PTR __Count$[ebp], 1
  00007	75 13		 jne	 SHORT $LN2@Chassign

; 1913 : 			_Traits::assign(*(_Myptr() + _Off), _Ch);

  00009	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  0000d	72 02		 jb	 SHORT $LN7@Chassign
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN7@Chassign:
  00011	8a 45 10	 mov	 al, BYTE PTR __Ch$[ebp]
  00014	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00017	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 1914 : 		else

  0001a	eb 1c		 jmp	 SHORT $LN15@Chassign
$LN2@Chassign:

; 1915 : 			_Traits::assign(_Myptr() + _Off, _Count, _Ch);

  0001c	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00020	72 02		 jb	 SHORT $LN13@Chassign
  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN13@Chassign:
  00024	0f be 45 10	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00028	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0002b	03 4d 08	 add	 ecx, DWORD PTR __Off$[ebp]
  0002e	50		 push	 eax
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _memset
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN15@Chassign:

; 1916 : 		}

  00038	5d		 pop	 ebp
  00039	c2 0c 00	 ret	 12			; 0000000cH
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogsp
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1953 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1954 : 		_Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0000a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000d	72 02		 jb	 SHORT $LN5@Eos
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN5@Eos:
  00011	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1955 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base0@1@@Z ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base0@1@@Z PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 325  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 326  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base0@1@@Z ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1517 : 		size_type _Num = this->_Alval.max_size();
; 1518 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	6a fe		 push	 -2			; fffffffeH
  00002	58		 pop	 eax

; 1519 : 		}

  00003	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
EXTRN	__imp_?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
;	COMDAT ?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
$T506847 = 11						; size = 1
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail, COMDAT
; _this$ = ecx

; 383  : 		{	// put an element back to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx

; 384  : 		if (_Mysb::gptr() != 0
; 385  : 			&& _Mysb::eback() < _Mysb::gptr()
; 386  : 			&& (_Traits::eq_int_type(_Traits::eof(), _Meta)
; 387  : 			|| _Traits::eq_int_type(_Traits::to_int_type(_Mysb::gptr()[-1]),
; 388  : 				_Meta)))

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Meta$[ebp]
  00011	85 c0		 test	 eax, eax
  00013	74 39		 je	 SHORT $LN45@pbackfail
  00015	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00018	8b 38		 mov	 edi, DWORD PTR [eax]
  0001a	8b ce		 mov	 ecx, esi
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00022	3b f8		 cmp	 edi, eax
  00024	73 28		 jae	 SHORT $LN45@pbackfail
  00026	83 fb ff	 cmp	 ebx, -1
  00029	74 10		 je	 SHORT $LN9@pbackfail
  0002b	8b ce		 mov	 ecx, esi
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00033	0f b6 40 ff	 movzx	 eax, BYTE PTR [eax-1]
  00037	3b c3		 cmp	 eax, ebx
  00039	75 13		 jne	 SHORT $LN45@pbackfail
$LN9@pbackfail:

; 389  : 			{	// just back up position
; 390  : 			_Mysb::_Gndec();

  0003b	8b ce		 mov	 ecx, esi
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ

; 391  : 			return (_Traits::not_eof(_Meta));

  00043	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00046	f7 d8		 neg	 eax
  00048	1b c0		 sbb	 eax, eax
  0004a	23 c3		 and	 eax, ebx
  0004c	eb 46		 jmp	 SHORT $LN1@pbackfail
$LN45@pbackfail:

; 392  : 			}
; 393  : 		else if (_Myfile == 0 || _Traits::eq_int_type(_Traits::eof(), _Meta))

  0004e	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  00051	85 c0		 test	 eax, eax
  00053	74 3c		 je	 SHORT $LN46@pbackfail
  00055	83 fb ff	 cmp	 ebx, -1
  00058	74 37		 je	 SHORT $LN46@pbackfail

; 395  : 		else if (_Pcvt == 0 && _Ungetc(_Traits::to_char_type(_Meta), _Myfile))

  0005a	83 7e 44 00	 cmp	 DWORD PTR [esi+68], 0
  0005e	75 17		 jne	 SHORT $LN4@pbackfail
  00060	50		 push	 eax
  00061	8d 45 0b	 lea	 eax, DWORD PTR $T506847[ebp]
  00064	50		 push	 eax
  00065	88 5d 0b	 mov	 BYTE PTR $T506847[ebp], bl
  00068	e8 00 00 00 00	 call	 ??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z ; std::_Ungetc<char>
  0006d	59		 pop	 ecx
  0006e	59		 pop	 ecx
  0006f	84 c0		 test	 al, al
  00071	74 04		 je	 SHORT $LN4@pbackfail
$LN47@pbackfail:

; 396  : 			return (_Meta);	// no facet and unget succeeded, return

  00073	8b c3		 mov	 eax, ebx
  00075	eb 1d		 jmp	 SHORT $LN1@pbackfail
$LN4@pbackfail:

; 397  : 		else if (_Mysb::gptr() != &_Mychar)

  00077	8b ce		 mov	 ecx, esi
  00079	8d 7e 48	 lea	 edi, DWORD PTR [esi+72]
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00082	3b c7		 cmp	 eax, edi
  00084	74 0b		 je	 SHORT $LN46@pbackfail

; 398  : 			{	// putback to _Mychar
; 399  : 			_Mychar = _Traits::to_char_type(_Meta);
; 400  : 			_Set_back();	// switch to _Mychar buffer

  00086	8b ce		 mov	 ecx, esi
  00088	88 1f		 mov	 BYTE PTR [edi], bl
  0008a	e8 00 00 00 00	 call	 ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back

; 401  : 			return (_Meta);

  0008f	eb e2		 jmp	 SHORT $LN47@pbackfail
$LN46@pbackfail:

; 394  : 			return (_Traits::eof());	// no open C stream or EOF, fail

  00091	83 c8 ff	 or	 eax, -1
$LN1@pbackfail:
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx

; 402  : 			}
; 403  : 		else
; 404  : 			return (_Traits::eof());	// nowhere to put back
; 405  : 		}

  00097	5d		 pop	 ebp
  00098	c2 04 00	 ret	 4
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
__Loc$ = 8						; size = 4
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::imbue, COMDAT
; _this$ = ecx

; 550  : 		{	// set locale to argument (capture nontrivial codecvt facet)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 551  : 		_Initcvt(&_USE(_Loc, _Cvt));

  00004	ff 75 08	 push	 DWORD PTR __Loc$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,int> >
  0000e	59		 pop	 ecx
  0000f	50		 push	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
  00017	5e		 pop	 esi

; 552  : 		}

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
PUBLIC	?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
EXTRN	__imp_?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ:PROC
EXTRN	__imp_?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z$0
__ehfuncinfo$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
$T506908 = 16						; size = 4
__Prot$ = 16						; size = 4
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::open, COMDAT
; _this$ = ecx

; 218  : 		{	// open a C stream with specified mode

  00000	6a 00		 push	 0
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 219  : 		_Filet *_File;
; 220  : 		if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)

  0000e	83 7e 54 00	 cmp	 DWORD PTR [esi+84], 0
  00012	75 4b		 jne	 SHORT $LN1@open
  00014	ff 75 10	 push	 DWORD PTR __Prot$[ebp]
  00017	ff 75 0c	 push	 DWORD PTR __Mode$[ebp]
  0001a	ff 75 08	 push	 DWORD PTR __Filename$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	85 c0		 test	 eax, eax
  00028	74 35		 je	 SHORT $LN1@open

; 222  : 
; 223  : 		_Init(_File, _Openfl);

  0002a	6a 01		 push	 1
  0002c	50		 push	 eax
  0002d	8b ce		 mov	 ecx, esi
  0002f	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 224  : 		_Initcvt(&_USE(_Mysb::getloc(), _Cvt));

  00034	8d 45 10	 lea	 eax, DWORD PTR $T506908[ebp]
  00037	50		 push	 eax
  00038	8b ce		 mov	 ecx, esi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ
  00040	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,int> >
  0004a	59		 pop	 ecx
  0004b	50		 push	 eax
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
  00053	8d 4d 10	 lea	 ecx, DWORD PTR $T506908[ebp]
  00056	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 225  : 		return (this);	// open succeeded

  0005b	8b c6		 mov	 eax, esi
  0005d	eb 02		 jmp	 SHORT $LN3@open
$LN1@open:

; 221  : 			return (0);	// open failed

  0005f	33 c0		 xor	 eax, eax
$LN3@open:

; 226  : 		}

  00061	e8 00 00 00 00	 call	 __EH_epilog3
  00066	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z$0:
  00000	8d 4d 10	 lea	 ecx, DWORD PTR $T506908[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::open
PUBLIC	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 1351 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1352 : 		return (_STRING_ITERATOR(_Myptr()));

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	72 02		 jb	 SHORT $LN5@begin
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN5@begin:
  0000b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 1353 : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1988 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1989 : 		if (!_Built)

  00003	80 7d 08 00	 cmp	 BYTE PTR __Built$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 20		 je	 SHORT $LN9@Tidy

; 1990 : 			;
; 1991 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00010	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00014	72 1a		 jb	 SHORT $LN9@Tidy

; 1992 : 			{	// copy any leftovers to small buffer and deallocate
; 1993 : 			_Elem *_Ptr = this->_Bx._Ptr;

  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 1994 : 			if (0 < _Newsize)

  00019	85 ff		 test	 edi, edi
  0001b	74 0b		 je	 SHORT $LN7@Tidy

; 1995 : 				_Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);

  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _memcpy
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@Tidy:

; 1996 : 			this->_Alval.deallocate(_Ptr, this->_Myres + 1);

  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	59		 pop	 ecx
  0002f	5b		 pop	 ebx
$LN9@Tidy:

; 1997 : 			}
; 1998 : 		this->_Myres = this->_BUF_SIZE - 1;
; 1999 : 		_Eos(_Newsize);

  00030	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00033	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0003a	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi

; 2000 : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1109 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1110 : 		if (this->_Mysize < _Off)

  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0000d	3b c1		 cmp	 eax, ecx
  0000f	73 0b		 jae	 SHORT $LN3@erase

; 1111 : 			_Xran();	// _Off off end

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN28@erase:
$LN3@erase:

; 1112 : 		if (this->_Mysize - _Off < _Count)

  0001c	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0001f	2b c1		 sub	 eax, ecx
  00021	3b c3		 cmp	 eax, ebx

; 1113 : 			_Count = this->_Mysize - _Off;	// trim _Count

  00023	0f 42 d8	 cmovb	 ebx, eax

; 1114 : 		if (0 < _Count)

  00026	85 db		 test	 ebx, ebx
  00028	74 47		 je	 SHORT $LN25@erase

; 1115 : 			{	// move elements down
; 1116 : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 1117 : 				this->_Mysize - _Off - _Count);

  0002a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0002d	57		 push	 edi
  0002e	83 fa 10	 cmp	 edx, 16			; 00000010H
  00031	72 04		 jb	 SHORT $LN11@erase
  00033	8b 3e		 mov	 edi, DWORD PTR [esi]
  00035	eb 02		 jmp	 SHORT $LN12@erase
$LN11@erase:
  00037	8b fe		 mov	 edi, esi
$LN12@erase:
  00039	83 fa 10	 cmp	 edx, 16			; 00000010H
  0003c	72 04		 jb	 SHORT $LN15@erase
  0003e	8b 16		 mov	 edx, DWORD PTR [esi]
  00040	eb 02		 jmp	 SHORT $LN16@erase
$LN15@erase:
  00042	8b d6		 mov	 edx, esi
$LN16@erase:
  00044	2b c3		 sub	 eax, ebx
  00046	03 f9		 add	 edi, ecx
  00048	50		 push	 eax
  00049	03 fb		 add	 edi, ebx
  0004b	03 d1		 add	 edx, ecx
  0004d	57		 push	 edi
  0004e	52		 push	 edx
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove

; 1118 : 			size_type _Newsize = this->_Mysize - _Count;

  00055	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005b	2b c3		 sub	 eax, ebx

; 1119 : 			_Eos(_Newsize);

  0005d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00061	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00064	5f		 pop	 edi
  00065	72 04		 jb	 SHORT $LN23@erase
  00067	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00069	eb 02		 jmp	 SHORT $LN24@erase
$LN23@erase:
  0006b	8b ce		 mov	 ecx, esi
$LN24@erase:
  0006d	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
$LN25@erase:

; 1120 : 			}
; 1121 : 		return (*this);

  00071	8b c6		 mov	 eax, esi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx

; 1122 : 		}

  00075	5d		 pop	 ebp
  00076	c2 08 00	 ret	 8
$LN27@erase:
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
tv296 = -20						; size = 4
__Newres$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1919 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi

; 1920 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  00014	83 cf 0f	 or	 edi, 15			; 0000000fH

; 1921 : 		if (max_size() < _Newres)

  00017	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0001a	76 05		 jbe	 SHORT $LN9@Copy

; 1922 : 			_Newres = _Newsize;	// undo roundup if too big

  0001c	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0001f	eb 27		 jmp	 SHORT $LN5@Copy
$LN9@Copy:

; 1923 : 		else if (this->_Myres / 2 <= _Newres / 3)

  00021	33 d2		 xor	 edx, edx
  00023	6a 03		 push	 3
  00025	8b c7		 mov	 eax, edi
  00027	5b		 pop	 ebx
  00028	f7 f3		 div	 ebx
  0002a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0002d	89 4d ec	 mov	 DWORD PTR tv296[ebp], ecx
  00030	d1 6d ec	 shr	 DWORD PTR tv296[ebp], 1
  00033	8b 55 ec	 mov	 edx, DWORD PTR tv296[ebp]
  00036	3b d0		 cmp	 edx, eax
  00038	76 0e		 jbe	 SHORT $LN5@Copy

; 1924 : 			;
; 1925 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

  0003a	6a fe		 push	 -2			; fffffffeH
  0003c	5f		 pop	 edi
  0003d	8b c7		 mov	 eax, edi
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	77 03		 ja	 SHORT $LN5@Copy

; 1926 : 			_Newres = this->_Myres
; 1927 : 				+ this->_Myres / 2;	// grow exponentially if possible

  00045	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]
$LN5@Copy:

; 1928 : 		else
; 1929 : 			_Newres = max_size();	// settle for max_size()
; 1930 : 
; 1931 : 		_Elem *_Ptr;
; 1932 : 		_TRY_BEGIN

  00048	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0

; 1933 : 			_Ptr = this->_Alval.allocate(_Newres + 1);

  0004c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0004f	6a 00		 push	 0
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00057	59		 pop	 ecx
  00058	59		 pop	 ecx
  00059	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0005c	eb 27		 jmp	 SHORT $LN19@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 1934 : 		_CATCH_ALL
; 1935 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0005e	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00061	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00064	89 45 ec	 mov	 DWORD PTR __Newres$[ebp], eax

; 1936 : 			_TRY_BEGIN
; 1937 : 				_Ptr = this->_Alval.allocate(_Newres + 1);

  00067	40		 inc	 eax
  00068	6a 00		 push	 0
  0006a	50		 push	 eax
  0006b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0006f	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00074	59		 pop	 ecx
  00075	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00078	59		 pop	 ecx

; 1941 : 			_CATCH_END
; 1942 : 		_CATCH_END

  00079	b8 00 00 00 00	 mov	 eax, $LN63@Copy
  0007e	c3		 ret	 0
$LN63@Copy:
  0007f	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
  00082	8b 7d ec	 mov	 edi, DWORD PTR __Newres$[ebp]
$LN19@Copy:

; 1943 : 
; 1944 : 		if (0 < _Oldlen)

  00085	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  00088	85 db		 test	 ebx, ebx
  0008a	74 19		 je	 SHORT $LN52@Copy

; 1945 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  0008c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00090	72 04		 jb	 SHORT $LN50@Copy
  00092	8b 06		 mov	 eax, DWORD PTR [esi]
  00094	eb 02		 jmp	 SHORT $LN51@Copy
$LN50@Copy:
  00096	8b c6		 mov	 eax, esi
$LN51@Copy:
  00098	53		 push	 ebx
  00099	50		 push	 eax
  0009a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0009d	e8 00 00 00 00	 call	 _memcpy
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN52@Copy:

; 1946 : 		_Tidy(true);

  000a5	6a 00		 push	 0
  000a7	6a 01		 push	 1
  000a9	8b ce		 mov	 ecx, esi
  000ab	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1947 : 		this->_Bx._Ptr = _Ptr;

  000b0	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000b3	89 06		 mov	 DWORD PTR [esi], eax

; 1948 : 		this->_Myres = _Newres;
; 1949 : 		_Eos(_Oldlen);

  000b5	83 ff 10	 cmp	 edi, 16			; 00000010H
  000b8	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000bb	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000be	0f 42 c6	 cmovb	 eax, esi
  000c1	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 1950 : 		}

  000c5	e8 00 00 00 00	 call	 __EH_epilog3
  000ca	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 1938 : 			_CATCH_ALL
; 1939 : 			_Tidy(true);	// failed again, discard storage and reraise

  000cd	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	33 f6		 xor	 esi, esi
  000d2	56		 push	 esi
  000d3	6a 01		 push	 1
  000d5	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1940 : 			_RERAISE;

  000da	56		 push	 esi
  000db	56		 push	 esi
  000dc	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN67@Copy:
$LN66@Copy:
  000e1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z ; std::basic_ifstream<char,std::char_traits<char> >::open
EXTRN	__imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
;	COMDAT ?open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z
_TEXT	SEGMENT
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
?open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::open, COMDAT
; _this$ = ecx

; 861  : 		{	// open a C stream with specified mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 862  : 		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Mode$[ebp]
  00006	56		 push	 esi
  00007	ff 75 10	 push	 DWORD PTR __Prot$[ebp]
  0000a	83 c8 01	 or	 eax, 1
  0000d	50		 push	 eax
  0000e	ff 75 08	 push	 DWORD PTR __Filename$[ebp]
  00011	8b f1		 mov	 esi, ecx
  00013	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00016	e8 00 00 00 00	 call	 ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
  0001b	85 c0		 test	 eax, eax

; 863  : 			_Myios::setstate(ios_base::failbit);

  0001d	8b 06		 mov	 eax, DWORD PTR [esi]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	6a 00		 push	 0
  00024	75 0c		 jne	 SHORT $LN2@open@2
  00026	6a 02		 push	 2
  00028	03 ce		 add	 ecx, esi
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z

; 864  : 		else

  00030	eb 0a		 jmp	 SHORT $LN1@open@2
$LN2@open@2:

; 865  : 			_Myios::clear();	// added with C++0X

  00032	6a 00		 push	 0
  00034	03 ce		 add	 ecx, esi
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
$LN1@open@2:
  0003c	5e		 pop	 esi

; 866  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 0c 00	 ret	 12			; 0000000cH
?open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::open
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 550  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 551  : 		_Tidy();

  00002	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  00006	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
  0000d	c6 00 00	 mov	 BYTE PTR [eax], 0

; 552  : 		}

  00010	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 754  : 		_Tidy(true);

  00000	6a 00		 push	 0
  00002	6a 01		 push	 1
  00004	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 755  : 		}

  00009	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
; Function compile flags: /Ogsp
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1959 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1960 : 		if (max_size() < _Newsize)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00007	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0000a	76 0b		 jbe	 SHORT $LN6@Grow

; 1961 : 			_Xlen();	// result too long

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN31@Grow:
$LN6@Grow:

; 1962 : 		if (this->_Myres < _Newsize)

  00017	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0001a	3b c6		 cmp	 eax, esi
  0001c	73 0b		 jae	 SHORT $LN5@Grow

; 1963 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  0001e	ff 71 10	 push	 DWORD PTR [ecx+16]
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00027	eb 2e		 jmp	 SHORT $LN28@Grow
$LN5@Grow:

; 1964 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00029	33 d2		 xor	 edx, edx
  0002b	38 55 0c	 cmp	 BYTE PTR __Trim$[ebp], dl
  0002e	74 17		 je	 SHORT $LN3@Grow
  00030	83 fe 10	 cmp	 esi, 16			; 00000010H
  00033	73 12		 jae	 SHORT $LN3@Grow

; 1965 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1966 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

  00035	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00038	3b f0		 cmp	 esi, eax
  0003a	0f 42 c6	 cmovb	 eax, esi
  0003d	50		 push	 eax
  0003e	6a 01		 push	 1
  00040	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00045	eb 10		 jmp	 SHORT $LN28@Grow
$LN3@Grow:

; 1967 : 		else if (_Newsize == 0)

  00047	3b f2		 cmp	 esi, edx
  00049	75 0c		 jne	 SHORT $LN28@Grow

; 1968 : 			_Eos(0);	// new size is zero, just null terminate

  0004b	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0004e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00051	72 02		 jb	 SHORT $LN26@Grow
  00053	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN26@Grow:
  00055	88 11		 mov	 BYTE PTR [ecx], dl
$LN28@Grow:

; 1969 : 		return (0 < _Newsize);	// return true only if more work to do

  00057	33 c0		 xor	 eax, eax
  00059	3b c6		 cmp	 eax, esi
  0005b	1b c0		 sbb	 eax, eax
  0005d	f7 d8		 neg	 eax
  0005f	5e		 pop	 esi

; 1970 : 		}

  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
$LN30@Grow:
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogsp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 845  : 		{	// append _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 846  : 		if (npos - this->_Mysize <= _Count)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000d	83 c9 ff	 or	 ecx, -1
  00010	2b c8		 sub	 ecx, eax
  00012	3b cb		 cmp	 ecx, ebx
  00014	77 0b		 ja	 SHORT $LN2@append

; 847  : 			_Xlen();	// result too long

  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN18@append:
$LN2@append:

; 848  : 
; 849  : 		size_type _Num;
; 850  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  00021	85 db		 test	 ebx, ebx
  00023	74 34		 je	 SHORT $LN14@append
  00025	57		 push	 edi
  00026	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  00029	6a 00		 push	 0
  0002b	57		 push	 edi
  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00033	84 c0		 test	 al, al
  00035	74 21		 je	 SHORT $LN16@append

; 851  : 			{	// make room and append new stuff using assign
; 852  : 			_Chassign(this->_Mysize, _Count, _Ch);

  00037	ff 75 0c	 push	 DWORD PTR __Ch$[ebp]
  0003a	8b ce		 mov	 ecx, esi
  0003c	53		 push	 ebx
  0003d	ff 76 10	 push	 DWORD PTR [esi+16]
  00040	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 853  : 			_Eos(_Num);

  00045	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00049	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  0004c	72 04		 jb	 SHORT $LN12@append
  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
  00050	eb 02		 jmp	 SHORT $LN13@append
$LN12@append:
  00052	8b c6		 mov	 eax, esi
$LN13@append:
  00054	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN16@append:
  00058	5f		 pop	 edi
$LN14@append:

; 854  : 			}
; 855  : 		return (*this);

  00059	8b c6		 mov	 eax, esi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx

; 856  : 		}

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
$LN17@append:
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 935  : 		{	// assign _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 936  : 		if (_Count == npos)

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	83 ff ff	 cmp	 edi, -1
  0000d	75 0b		 jne	 SHORT $LN2@assign

; 937  : 			_Xlen();	// result too long

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN17@assign:
$LN2@assign:

; 938  : 
; 939  : 		if (_Grow(_Count))

  0001a	6a 00		 push	 0
  0001c	57		 push	 edi
  0001d	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00022	84 c0		 test	 al, al
  00024	74 20		 je	 SHORT $LN14@assign

; 940  : 			{	// make room and assign new stuff
; 941  : 			_Chassign(0, _Count, _Ch);

  00026	ff 75 0c	 push	 DWORD PTR __Ch$[ebp]
  00029	8b ce		 mov	 ecx, esi
  0002b	57		 push	 edi
  0002c	6a 00		 push	 0
  0002e	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 942  : 			_Eos(_Count);

  00033	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00037	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  0003a	72 04		 jb	 SHORT $LN12@assign
  0003c	8b 06		 mov	 eax, DWORD PTR [esi]
  0003e	eb 02		 jmp	 SHORT $LN13@assign
$LN12@assign:
  00040	8b c6		 mov	 eax, esi
$LN13@assign:
  00042	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN14@assign:

; 943  : 			}
; 944  : 		return (*this);

  00046	5f		 pop	 edi
  00047	8b c6		 mov	 eax, esi
  00049	5e		 pop	 esi

; 945  : 		}

  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
$LN16@assign:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
EXTRN	__imp__memcpy_s:PROC
EXTRN	__imp_?in@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z:PROC
EXTRN	__imp_?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$0
__ehfuncinfo$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
xdata$x	ENDS
;	COMDAT ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
__Dest$505550 = -56					; size = 4
__Src$505551 = -52					; size = 4
__Ch$505549 = -45					; size = 1
__Ch$505543 = -45					; size = 1
__Str$505545 = -44					; size = 28
__$EHRec$ = -12						; size = 12
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::uflow, COMDAT
; _this$ = ecx

; 423  : 		{	// get an element from stream, point past it

  00000	6a 2c		 push	 44			; 0000002cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b f1		 mov	 esi, ecx

; 424  : 		if (_Mysb::gptr() != 0
; 425  : 			&& _Mysb::gptr() < _Mysb::egptr())

  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00014	85 c0		 test	 eax, eax
  00016	74 27		 je	 SHORT $LN18@uflow
  00018	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0001b	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0001e	8b 38		 mov	 edi, DWORD PTR [eax]
  00020	03 39		 add	 edi, DWORD PTR [ecx]
  00022	8b ce		 mov	 ecx, esi
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0002a	3b c7		 cmp	 eax, edi
  0002c	73 11		 jae	 SHORT $LN18@uflow

; 426  : 			return (_Traits::to_int_type(
; 427  : 				*_Mysb::_Gninc()));	// return buffered

  0002e	8b ce		 mov	 ecx, esi
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
  00036	0f b6 00	 movzx	 eax, BYTE PTR [eax]

; 478  : 
; 479  : 				default:
; 480  : 					return (_Traits::eof());	// conversion failed
; 481  : 					}
; 482  : 				}
; 483  : 			}

$LN170@uflow:

; 484  : 		}

  00039	e8 00 00 00 00	 call	 __EH_epilog3_GS
  0003e	c3		 ret	 0
$LN18@uflow:

; 428  : 		else if (_Myfile == 0)

  0003f	33 ff		 xor	 edi, edi
  00041	39 7e 54	 cmp	 DWORD PTR [esi+84], edi
  00044	75 05		 jne	 SHORT $LN16@uflow
$LN21@uflow:

; 429  : 			return (_Traits::eof());	// no open C stream, fail

  00046	83 c8 ff	 or	 eax, -1
  00049	eb ee		 jmp	 SHORT $LN170@uflow
$LN16@uflow:

; 430  : 		_Reset_back();	// revert from _Mychar buffer

  0004b	8b ce		 mov	 ecx, esi
  0004d	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 431  : 		if (_Pcvt == 0)

  00052	39 7e 44	 cmp	 DWORD PTR [esi+68], edi
  00055	75 1c		 jne	 SHORT $LN15@uflow

; 432  : 			{	// no codecvt facet, just get it
; 433  : 			_Elem _Ch = 0;
; 434  : 			return (_Fgetc(_Ch, _Myfile) ? _Traits::to_int_type(_Ch)
; 435  : 				: _Traits::eof());

  00057	ff 76 54	 push	 DWORD PTR [esi+84]
  0005a	8d 45 d3	 lea	 eax, DWORD PTR __Ch$505543[ebp]
  0005d	50		 push	 eax
  0005e	c6 45 d3 00	 mov	 BYTE PTR __Ch$505543[ebp], 0
  00062	e8 00 00 00 00	 call	 ??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z ; std::_Fgetc<char>
  00067	59		 pop	 ecx
  00068	59		 pop	 ecx
  00069	84 c0		 test	 al, al
  0006b	74 d9		 je	 SHORT $LN21@uflow
  0006d	0f b6 45 d3	 movzx	 eax, BYTE PTR __Ch$505543[ebp]
  00071	eb c6		 jmp	 SHORT $LN170@uflow
$LN15@uflow:

; 436  : 			}
; 437  : 		else
; 438  : 			{	// build string until codecvt succeeds
; 439  : 			string _Str;

  00073	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR __Str$505545[ebp+20], 15 ; 0000000fH
  0007a	89 7d e4	 mov	 DWORD PTR __Str$505545[ebp+16], edi
  0007d	c6 45 d4 00	 mov	 BYTE PTR __Str$505545[ebp], 0

; 440  : 
; 441  : 			for (; ; )
; 442  : 				{	// get using codecvt facet
; 443  : 				_Elem _Ch, *_Dest;
; 444  : 				const char *_Src;
; 445  : 				int _Nleft;
; 446  : 				int _Meta = fgetc(_Myfile);

  00081	ff 76 54	 push	 DWORD PTR [esi+84]
  00084	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00087	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__fgetc
  0008d	ff d7		 call	 edi
  0008f	59		 pop	 ecx

; 447  : 
; 448  : 				if (_Meta == EOF)

  00090	83 f8 ff	 cmp	 eax, -1
  00093	0f 84 a3 00 00
	00		 je	 $LN176@uflow
  00099	8d 5e 4c	 lea	 ebx, DWORD PTR [esi+76]
$LL13@uflow:

; 450  : 
; 451  : 				_Str.append(1, (char)_Meta);	// append byte and convert

  0009c	50		 push	 eax
  0009d	6a 01		 push	 1
  0009f	8d 4d d4	 lea	 ecx, DWORD PTR __Str$505545[ebp]
  000a2	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 452  : 				switch (_Pcvt->in(_State,
; 453  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Src,
; 454  : 					&_Ch, &_Ch + 1, _Dest))

  000a7	83 7d e8 10	 cmp	 DWORD PTR __Str$505545[ebp+20], 16 ; 00000010H
  000ab	8b 4d d4	 mov	 ecx, DWORD PTR __Str$505545[ebp]
  000ae	8b c1		 mov	 eax, ecx
  000b0	73 05		 jae	 SHORT $LN89@uflow
  000b2	8d 45 d4	 lea	 eax, DWORD PTR __Str$505545[ebp]
  000b5	8b c8		 mov	 ecx, eax
$LN89@uflow:
  000b7	03 45 e4	 add	 eax, DWORD PTR __Str$505545[ebp+16]
  000ba	8d 55 c8	 lea	 edx, DWORD PTR __Dest$505550[ebp]
  000bd	52		 push	 edx
  000be	8d 55 d4	 lea	 edx, DWORD PTR __Ch$505549[ebp+1]
  000c1	52		 push	 edx
  000c2	8d 55 d3	 lea	 edx, DWORD PTR __Ch$505549[ebp]
  000c5	52		 push	 edx
  000c6	8d 55 cc	 lea	 edx, DWORD PTR __Src$505551[ebp]
  000c9	52		 push	 edx
  000ca	50		 push	 eax
  000cb	51		 push	 ecx
  000cc	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  000cf	53		 push	 ebx
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?in@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z
  000d6	85 c0		 test	 eax, eax
  000d8	78 62		 js	 SHORT $LN176@uflow
  000da	33 c9		 xor	 ecx, ecx
  000dc	41		 inc	 ecx
  000dd	3b c1		 cmp	 eax, ecx
  000df	7e 28		 jle	 SHORT $LN8@uflow
  000e1	83 f8 03	 cmp	 eax, 3
  000e4	75 56		 jne	 SHORT $LN176@uflow

; 468  : 					break;
; 469  : 
; 470  : 				case codecvt_base::noconv:
; 471  : 					if (_Str.size() < sizeof (_Elem))

  000e6	39 4d e4	 cmp	 DWORD PTR __Str$505545[ebp+16], ecx
  000e9	72 42		 jb	 SHORT $LN4@uflow

; 472  : 						break;	// no conversion, but need more chars
; 473  : 
; 474  : 					_CRT_SECURE_MEMCPY(&_Ch, sizeof (_Elem), &*_Str.begin(),

  000eb	83 7d e8 10	 cmp	 DWORD PTR __Str$505545[ebp+20], 16 ; 00000010H
  000ef	8b 45 d4	 mov	 eax, DWORD PTR __Str$505545[ebp]
  000f2	73 03		 jae	 SHORT $LN147@uflow
  000f4	8d 45 d4	 lea	 eax, DWORD PTR __Str$505545[ebp]
$LN147@uflow:
  000f7	51		 push	 ecx
  000f8	50		 push	 eax
  000f9	51		 push	 ecx
  000fa	8d 45 d3	 lea	 eax, DWORD PTR __Ch$505549[ebp]
  000fd	50		 push	 eax
  000fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memcpy_s
  00104	83 c4 10	 add	 esp, 16			; 00000010H

; 475  : 						sizeof (_Elem));	// copy raw bytes to element
; 476  : 
; 477  : 					return (_Traits::to_int_type(_Ch));	// return result

  00107	eb 74		 jmp	 SHORT $LN5@uflow
$LN8@uflow:

; 455  : 					{	// test result of converting one element
; 456  : 				case codecvt_base::partial:
; 457  : 				case codecvt_base::ok:
; 458  : 					if (_Dest != &_Ch)

  00109	8d 45 d3	 lea	 eax, DWORD PTR __Ch$505549[ebp]
  0010c	39 45 c8	 cmp	 DWORD PTR __Dest$505550[ebp], eax

; 464  : 						}
; 465  : 					else
; 466  : 						_Str.erase((size_t)0,	// partial, discard used input
; 467  : 							(size_t)(_Src - &*_Str.begin()));

  0010f	8b 45 d4	 mov	 eax, DWORD PTR __Str$505545[ebp]
  00112	75 3e		 jne	 SHORT $LN178@uflow
  00114	83 7d e8 10	 cmp	 DWORD PTR __Str$505545[ebp+20], 16 ; 00000010H
  00118	73 03		 jae	 SHORT $LN129@uflow
  0011a	8d 45 d4	 lea	 eax, DWORD PTR __Str$505545[ebp]
$LN129@uflow:
  0011d	8b 4d cc	 mov	 ecx, DWORD PTR __Src$505551[ebp]
  00120	2b c8		 sub	 ecx, eax
  00122	51		 push	 ecx
  00123	6a 00		 push	 0
  00125	8d 4d d4	 lea	 ecx, DWORD PTR __Str$505545[ebp]
  00128	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
$LN4@uflow:

; 440  : 
; 441  : 			for (; ; )
; 442  : 				{	// get using codecvt facet
; 443  : 				_Elem _Ch, *_Dest;
; 444  : 				const char *_Src;
; 445  : 				int _Nleft;
; 446  : 				int _Meta = fgetc(_Myfile);

  0012d	ff 76 54	 push	 DWORD PTR [esi+84]
  00130	ff d7		 call	 edi
  00132	59		 pop	 ecx

; 447  : 
; 448  : 				if (_Meta == EOF)

  00133	83 f8 ff	 cmp	 eax, -1
  00136	0f 85 60 ff ff
	ff		 jne	 $LL13@uflow
$LN176@uflow:
  0013c	83 ce ff	 or	 esi, -1
$LN180@uflow:

; 449  : 					return (_Traits::eof());	// partial char?

  0013f	6a 00		 push	 0
  00141	6a 01		 push	 1
  00143	8d 4d d4	 lea	 ecx, DWORD PTR __Str$505545[ebp]
  00146	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0014b	8b c6		 mov	 eax, esi
  0014d	e9 e7 fe ff ff	 jmp	 $LN170@uflow
$LN178@uflow:

; 459  : 						{	// got an element, put back excess and deliver it
; 460  : 						_Nleft = (int)(&*_Str.begin() + _Str.size() - _Src);

  00152	83 7d e8 10	 cmp	 DWORD PTR __Str$505545[ebp+20], 16 ; 00000010H
  00156	73 03		 jae	 SHORT $LN105@uflow
  00158	8d 45 d4	 lea	 eax, DWORD PTR __Str$505545[ebp]
$LN105@uflow:
  0015b	2b 45 cc	 sub	 eax, DWORD PTR __Src$505551[ebp]
  0015e	03 45 e4	 add	 eax, DWORD PTR __Str$505545[ebp+16]
  00161	8b f8		 mov	 edi, eax
  00163	eb 14		 jmp	 SHORT $LN187@uflow
$LN6@uflow:

; 462  : 							ungetc(_Src[--_Nleft], _Myfile);

  00165	8b 45 cc	 mov	 eax, DWORD PTR __Src$505551[ebp]
  00168	ff 76 54	 push	 DWORD PTR [esi+84]
  0016b	4f		 dec	 edi
  0016c	0f be 04 07	 movsx	 eax, BYTE PTR [edi+eax]
  00170	50		 push	 eax
  00171	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ungetc
  00177	59		 pop	 ecx
  00178	59		 pop	 ecx
$LN187@uflow:

; 461  : 						for (; 0 < _Nleft; )

  00179	85 ff		 test	 edi, edi
  0017b	7f e8		 jg	 SHORT $LN6@uflow
$LN5@uflow:

; 463  : 						return (_Traits::to_int_type(_Ch));

  0017d	0f b6 75 d3	 movzx	 esi, BYTE PTR __Ch$505549[ebp]
  00181	eb bc		 jmp	 SHORT $LN180@uflow
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Str$505545[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::uflow
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 606  : 		{	// construct from _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 607  : 		_Tidy();
; 608  : 		assign(_Count, _Ch);

  00004	ff 75 0c	 push	 DWORD PTR __Ch$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  0000d	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00010	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00017	c6 06 00	 mov	 BYTE PTR [esi], 0
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 609  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
EXTRN	__imp__fwrite:PROC
EXTRN	__imp_?out@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z:PROC
EXTRN	__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:PROC
EXTRN	__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$0
__ehfuncinfo$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
xdata$x	ENDS
;	COMDAT ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
__Src$505484 = -56					; size = 4
__Dest$505485 = -52					; size = 4
__Ch$505483 = -48					; size = 1
__Str$505486 = -44					; size = 28
__$EHRec$ = -12						; size = 12
__Meta$ = 8						; size = 4
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::overflow, COMDAT
; _this$ = ecx

; 322  : 		{	// put an element to stream

  00000	6a 2c		 push	 44			; 0000002cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS

; 323  : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0000c	8b 5d 08	 mov	 ebx, DWORD PTR __Meta$[ebp]
  0000f	8b f1		 mov	 esi, ecx
  00011	83 fb ff	 cmp	 ebx, -1
  00014	75 0a		 jne	 SHORT $LN20@overflow

; 324  : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  00016	33 c0		 xor	 eax, eax

; 378  : 			}

$LN174@overflow:

; 379  : 		}

  00018	e8 00 00 00 00	 call	 __EH_epilog3_GS
  0001d	c2 04 00	 ret	 4
$LN20@overflow:

; 325  : 		else if (_Mysb::pptr() != 0
; 326  : 			&& _Mysb::pptr() < _Mysb::epptr())

  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00026	85 c0		 test	 eax, eax
  00028	74 24		 je	 SHORT $LN18@overflow
  0002a	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0002d	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00030	8b 38		 mov	 edi, DWORD PTR [eax]
  00032	03 39		 add	 edi, DWORD PTR [ecx]
  00034	8b ce		 mov	 ecx, esi
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0003c	3b c7		 cmp	 eax, edi
  0003e	73 0e		 jae	 SHORT $LN18@overflow

; 327  : 			{	// room in buffer, store it
; 328  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  00040	8b ce		 mov	 ecx, esi
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
  00048	88 18		 mov	 BYTE PTR [eax], bl
$LN192@overflow:

; 329  : 			return (_Meta);

  0004a	8b c3		 mov	 eax, ebx
  0004c	eb ca		 jmp	 SHORT $LN174@overflow
$LN18@overflow:

; 330  : 			}
; 331  : 		else if (_Myfile == 0)

  0004e	33 ff		 xor	 edi, edi
  00050	39 7e 54	 cmp	 DWORD PTR [esi+84], edi
  00053	75 05		 jne	 SHORT $LN16@overflow
$LN23@overflow:

; 332  : 			return (_Traits::eof());	// no open C stream, fail

  00055	83 c8 ff	 or	 eax, -1
  00058	eb be		 jmp	 SHORT $LN174@overflow
$LN16@overflow:

; 333  : 		_Reset_back();	// revert from _Mychar buffer

  0005a	8b ce		 mov	 ecx, esi
  0005c	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 334  : 		if (_Pcvt == 0)

  00061	39 7e 44	 cmp	 DWORD PTR [esi+68], edi
  00064	75 11		 jne	 SHORT $LN15@overflow

; 335  : 			return (_Fputc(_Traits::to_char_type(_Meta), _Myfile)
; 336  : 				? _Meta : _Traits::eof());	// no codecvt facet, put as is

  00066	ff 76 54	 push	 DWORD PTR [esi+84]
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ; std::_Fputc<char>
  0006f	59		 pop	 ecx
  00070	59		 pop	 ecx
  00071	84 c0		 test	 al, al
  00073	74 e0		 je	 SHORT $LN23@overflow
  00075	eb d3		 jmp	 SHORT $LN192@overflow
$LN15@overflow:

; 337  : 		else
; 338  : 			{	// put using codecvt facet
; 339  : 			const int _STRING_INC = 8;
; 340  : 			const _Elem _Ch = _Traits::to_char_type(_Meta);
; 341  : 			const _Elem *_Src;
; 342  : 			char *_Dest;
; 343  : 
; 344  : 			string _Str(_STRING_INC, '\0');

  00077	57		 push	 edi
  00078	6a 08		 push	 8
  0007a	8d 4d d4	 lea	 ecx, DWORD PTR __Str$505486[ebp]
  0007d	88 5d d0	 mov	 BYTE PTR __Ch$505483[ebp], bl
  00080	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR __Str$505486[ebp+20], 15 ; 0000000fH
  00087	89 7d e4	 mov	 DWORD PTR __Str$505486[ebp+16], edi
  0008a	c6 45 d4 00	 mov	 BYTE PTR __Str$505486[ebp], 0
  0008e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00093	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
$LN13@overflow:

; 345  : 			for (; ; )
; 346  : 				switch (_Pcvt->out(_State,
; 347  : 					&_Ch, &_Ch + 1, _Src,
; 348  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

  00096	83 7d e8 10	 cmp	 DWORD PTR __Str$505486[ebp+20], 16 ; 00000010H
  0009a	8b 45 d4	 mov	 eax, DWORD PTR __Str$505486[ebp]
  0009d	0f 83 89 00 00
	00		 jae	 $LN191@overflow
  000a3	8d 45 d4	 lea	 eax, DWORD PTR __Str$505486[ebp]
  000a6	8b c8		 mov	 ecx, eax
$LN101@overflow:
  000a8	03 45 e4	 add	 eax, DWORD PTR __Str$505486[ebp+16]
  000ab	8d 55 cc	 lea	 edx, DWORD PTR __Dest$505485[ebp]
  000ae	52		 push	 edx
  000af	50		 push	 eax
  000b0	51		 push	 ecx
  000b1	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  000b4	8d 45 c8	 lea	 eax, DWORD PTR __Src$505484[ebp]
  000b7	50		 push	 eax
  000b8	8d 45 d1	 lea	 eax, DWORD PTR __Ch$505483[ebp+1]
  000bb	50		 push	 eax
  000bc	8d 45 d0	 lea	 eax, DWORD PTR __Ch$505483[ebp]
  000bf	50		 push	 eax
  000c0	8d 46 4c	 lea	 eax, DWORD PTR [esi+76]
  000c3	50		 push	 eax
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?out@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z
  000ca	85 c0		 test	 eax, eax
  000cc	78 7c		 js	 SHORT $LN180@overflow
  000ce	83 f8 01	 cmp	 eax, 1
  000d1	7f 61		 jg	 SHORT $LN179@overflow

; 349  : 				{	// test result of converting one element
; 350  : 				case codecvt_base::partial:
; 351  : 				case codecvt_base::ok:
; 352  : 					{	// converted something, try to put it out
; 353  : 					size_t _Count = _Dest - &*_Str.begin();

  000d3	83 7d e8 10	 cmp	 DWORD PTR __Str$505486[ebp+20], 16 ; 00000010H
  000d7	8b 45 d4	 mov	 eax, DWORD PTR __Str$505486[ebp]
  000da	73 03		 jae	 SHORT $LN117@overflow
  000dc	8d 45 d4	 lea	 eax, DWORD PTR __Str$505486[ebp]
$LN117@overflow:
  000df	8b 7d cc	 mov	 edi, DWORD PTR __Dest$505485[ebp]
  000e2	2b f8		 sub	 edi, eax

; 354  : 					if (0 < _Count && _Count !=
; 355  : 						fwrite(&*_Str.begin(), 1, _Count, _Myfile))

  000e4	74 20		 je	 SHORT $LN8@overflow
  000e6	83 7d e8 10	 cmp	 DWORD PTR __Str$505486[ebp+20], 16 ; 00000010H
  000ea	8b 45 d4	 mov	 eax, DWORD PTR __Str$505486[ebp]
  000ed	73 03		 jae	 SHORT $LN133@overflow
  000ef	8d 45 d4	 lea	 eax, DWORD PTR __Str$505486[ebp]
$LN133@overflow:
  000f2	ff 76 54	 push	 DWORD PTR [esi+84]
  000f5	57		 push	 edi
  000f6	6a 01		 push	 1
  000f8	50		 push	 eax
  000f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  000ff	83 c4 10	 add	 esp, 16			; 00000010H
  00102	3b f8		 cmp	 edi, eax
  00104	75 44		 jne	 SHORT $LN180@overflow
$LN8@overflow:

; 357  : 
; 358  : 					_Wrotesome = true;	// write succeeded
; 359  : 					if (_Src != &_Ch)

  00106	8d 45 d0	 lea	 eax, DWORD PTR __Ch$505483[ebp]
  00109	c6 46 49 01	 mov	 BYTE PTR [esi+73], 1
  0010d	39 45 c8	 cmp	 DWORD PTR __Src$505484[ebp], eax
  00110	75 4e		 jne	 SHORT $LN181@overflow

; 360  : 						return (_Meta);	// converted whole element
; 361  : 
; 362  : 					if (0 < _Count)

  00112	85 ff		 test	 edi, edi
  00114	75 80		 jne	 SHORT $LN13@overflow

; 363  : 						;
; 364  : 					else if (_Str.size() < 4 * _STRING_INC)

  00116	83 7d e4 20	 cmp	 DWORD PTR __Str$505486[ebp+16], 32 ; 00000020H
  0011a	73 2e		 jae	 SHORT $LN180@overflow

; 365  : 						_Str.append(_STRING_INC, '\0');	// try with more space

  0011c	57		 push	 edi
  0011d	6a 08		 push	 8
  0011f	8d 4d d4	 lea	 ecx, DWORD PTR __Str$505486[ebp]
  00122	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 374  : 
; 375  : 				default:
; 376  : 					return (_Traits::eof());	// conversion failed
; 377  : 				}

  00127	e9 6a ff ff ff	 jmp	 $LN13@overflow
$LN191@overflow:

; 345  : 			for (; ; )
; 346  : 				switch (_Pcvt->out(_State,
; 347  : 					&_Ch, &_Ch + 1, _Src,
; 348  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

  0012c	8b 4d d4	 mov	 ecx, DWORD PTR __Str$505486[ebp]
  0012f	e9 74 ff ff ff	 jmp	 $LN101@overflow
$LN179@overflow:
  00134	83 f8 03	 cmp	 eax, 3
  00137	75 11		 jne	 SHORT $LN180@overflow

; 366  : 					else
; 367  : 						return (_Traits::eof());	// conversion failed
; 368  : 					break;
; 369  : 					}
; 370  : 
; 371  : 				case codecvt_base::noconv:
; 372  : 					return (_Fputc(_Ch, _Myfile) ? _Meta
; 373  : 						: _Traits::eof());	// no conversion, put as is

  00139	ff 76 54	 push	 DWORD PTR [esi+84]
  0013c	ff 75 d0	 push	 DWORD PTR __Ch$505483[ebp]
  0013f	e8 00 00 00 00	 call	 ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ; std::_Fputc<char>
  00144	59		 pop	 ecx
  00145	59		 pop	 ecx
  00146	84 c0		 test	 al, al
  00148	75 16		 jne	 SHORT $LN181@overflow
$LN180@overflow:
  0014a	83 ce ff	 or	 esi, -1
$LN182@overflow:

; 356  : 						return (_Traits::eof());	// write failed

  0014d	6a 00		 push	 0
  0014f	6a 01		 push	 1
  00151	8d 4d d4	 lea	 ecx, DWORD PTR __Str$505486[ebp]
  00154	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00159	8b c6		 mov	 eax, esi
  0015b	e9 b8 fe ff ff	 jmp	 $LN174@overflow
$LN181@overflow:
  00160	8b f3		 mov	 esi, ebx
  00162	eb e9		 jmp	 SHORT $LN182@overflow
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Str$505486[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::overflow
PUBLIC	?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
EXTRN	__imp_?unshift@?$codecvt@DDH@std@@QBEHAAHPAD1AAPAD@Z:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$0
__ehfuncinfo$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
xdata$x	ENDS
;	COMDAT ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
_TEXT	SEGMENT
__Dest$505721 = -48					; size = 4
__Str$505725 = -44					; size = 28
__$EHRec$ = -12						; size = 12
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite, COMDAT
; _this$ = ecx

; 587  : 		{	// put shift to initial conversion state, as needed

  00000	6a 24		 push	 36			; 00000024H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b f1		 mov	 esi, ecx

; 588  : 		if (_Pcvt == 0 || !_Wrotesome)

  0000e	33 ff		 xor	 edi, edi
  00010	39 7e 44	 cmp	 DWORD PTR [esi+68], edi
  00013	0f 84 d9 00 00
	00		 je	 $LN14@Endwrite
  00019	80 7e 49 00	 cmp	 BYTE PTR [esi+73], 0
  0001d	0f 84 cf 00 00
	00		 je	 $LN14@Endwrite

; 590  : 		else
; 591  : 			{	// may have to put
; 592  : 			const int _STRING_INC = 8;
; 593  : 			char *_Dest;
; 594  : 			if (_Traits::eq_int_type(_Traits::eof(), overflow()))

  00023	8b 06		 mov	 eax, DWORD PTR [esi]
  00025	6a ff		 push	 -1
  00027	ff 50 0c	 call	 DWORD PTR [eax+12]
  0002a	83 f8 ff	 cmp	 eax, -1
  0002d	75 07		 jne	 SHORT $LN12@Endwrite

; 595  : 				return (false);

  0002f	32 c0		 xor	 al, al
  00031	e9 be 00 00 00	 jmp	 $LN133@Endwrite
$LN12@Endwrite:

; 596  : 
; 597  : 			string _Str(_STRING_INC, '\0');

  00036	57		 push	 edi
  00037	6a 08		 push	 8
  00039	8d 4d d4	 lea	 ecx, DWORD PTR __Str$505725[ebp]
  0003c	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR __Str$505725[ebp+20], 15 ; 0000000fH
  00043	89 7d e4	 mov	 DWORD PTR __Str$505725[ebp+16], edi
  00046	c6 45 d4 00	 mov	 BYTE PTR __Str$505725[ebp], 0
  0004a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004f	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00052	8d 5e 4c	 lea	 ebx, DWORD PTR [esi+76]
$LN11@Endwrite:

; 598  : 			for (; ; )
; 599  : 				switch (_Pcvt->unshift(_State,
; 600  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

  00055	83 7d e8 10	 cmp	 DWORD PTR __Str$505725[ebp+20], 16 ; 00000010H
  00059	8b 45 d4	 mov	 eax, DWORD PTR __Str$505725[ebp]
  0005c	73 36		 jae	 SHORT $LN147@Endwrite
  0005e	8d 45 d4	 lea	 eax, DWORD PTR __Str$505725[ebp]
  00061	8b c8		 mov	 ecx, eax
$LN74@Endwrite:
  00063	03 45 e4	 add	 eax, DWORD PTR __Str$505725[ebp+16]
  00066	8d 55 d0	 lea	 edx, DWORD PTR __Dest$505721[ebp]
  00069	52		 push	 edx
  0006a	50		 push	 eax
  0006b	51		 push	 ecx
  0006c	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  0006f	53		 push	 ebx
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?unshift@?$codecvt@DDH@std@@QBEHAAHPAD1AAPAD@Z
  00076	83 e8 00	 sub	 eax, 0
  00079	74 1e		 je	 SHORT $LN7@Endwrite
  0007b	48		 dec	 eax
  0007c	74 1f		 je	 SHORT $LN6@Endwrite
  0007e	48		 dec	 eax
  0007f	48		 dec	 eax
  00080	74 6c		 je	 SHORT $LN139@Endwrite
$LN138@Endwrite:
  00082	32 db		 xor	 bl, bl
$LN140@Endwrite:

; 610  : 						return (false);	// write failed

  00084	6a 00		 push	 0
  00086	6a 01		 push	 1
  00088	8d 4d d4	 lea	 ecx, DWORD PTR __Str$505725[ebp]
  0008b	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00090	8a c3		 mov	 al, bl
  00092	eb 60		 jmp	 SHORT $LN133@Endwrite
$LN147@Endwrite:

; 598  : 			for (; ; )
; 599  : 				switch (_Pcvt->unshift(_State,
; 600  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

  00094	8b 4d d4	 mov	 ecx, DWORD PTR __Str$505725[ebp]
  00097	eb ca		 jmp	 SHORT $LN74@Endwrite
$LN7@Endwrite:

; 601  : 				{	// test result of homing conversion
; 602  : 				case codecvt_base::ok:
; 603  : 					_Wrotesome = false;	// homed successfully

  00099	c6 46 49 00	 mov	 BYTE PTR [esi+73], 0
$LN6@Endwrite:

; 604  : 
; 605  : 				case codecvt_base::partial:	// fall through
; 606  : 					{	// put any generated bytes
; 607  : 					size_t _Count = _Dest - &*_Str.begin();

  0009d	83 7d e8 10	 cmp	 DWORD PTR __Str$505725[ebp+20], 16 ; 00000010H
  000a1	8b 45 d4	 mov	 eax, DWORD PTR __Str$505725[ebp]
  000a4	73 03		 jae	 SHORT $LN90@Endwrite
  000a6	8d 45 d4	 lea	 eax, DWORD PTR __Str$505725[ebp]
$LN90@Endwrite:
  000a9	8b 7d d0	 mov	 edi, DWORD PTR __Dest$505721[ebp]
  000ac	2b f8		 sub	 edi, eax

; 608  : 					if (0 < _Count && _Count !=
; 609  : 						fwrite(&*_Str.begin(), 1, _Count, _Myfile))

  000ae	74 20		 je	 SHORT $LN5@Endwrite
  000b0	83 7d e8 10	 cmp	 DWORD PTR __Str$505725[ebp+20], 16 ; 00000010H
  000b4	8b 45 d4	 mov	 eax, DWORD PTR __Str$505725[ebp]
  000b7	73 03		 jae	 SHORT $LN106@Endwrite
  000b9	8d 45 d4	 lea	 eax, DWORD PTR __Str$505725[ebp]
$LN106@Endwrite:
  000bc	ff 76 54	 push	 DWORD PTR [esi+84]
  000bf	57		 push	 edi
  000c0	6a 01		 push	 1
  000c2	50		 push	 eax
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  000c9	83 c4 10	 add	 esp, 16			; 00000010H
  000cc	3b f8		 cmp	 edi, eax
  000ce	75 b2		 jne	 SHORT $LN138@Endwrite
$LN5@Endwrite:

; 611  : 					if (!_Wrotesome)

  000d0	80 7e 49 00	 cmp	 BYTE PTR [esi+73], 0
  000d4	74 18		 je	 SHORT $LN139@Endwrite

; 612  : 						return (true);
; 613  : 					if (_Count == 0)

  000d6	85 ff		 test	 edi, edi
  000d8	0f 85 77 ff ff
	ff		 jne	 $LN11@Endwrite

; 614  : 						_Str.append(_STRING_INC, '\0');	// try with more space

  000de	57		 push	 edi
  000df	6a 08		 push	 8
  000e1	8d 4d d4	 lea	 ecx, DWORD PTR __Str$505725[ebp]
  000e4	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 615  : 					break;
; 616  : 					}
; 617  : 
; 618  : 				case codecvt_base::noconv:
; 619  : 					return (true);	// nothing to do
; 620  : 
; 621  : 				default:
; 622  : 					return (false);	// conversion failed
; 623  : 				}

  000e9	e9 67 ff ff ff	 jmp	 $LN11@Endwrite
$LN139@Endwrite:
  000ee	b3 01		 mov	 bl, 1
  000f0	eb 92		 jmp	 SHORT $LN140@Endwrite
$LN14@Endwrite:

; 589  : 			return (true);

  000f2	b0 01		 mov	 al, 1

; 624  : 			}

$LN133@Endwrite:

; 625  : 		}

  000f4	e8 00 00 00 00	 call	 __EH_epilog3_GS
  000f9	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Str$505725[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
EXTRN	__imp_?_BADOFF@std@@3_JB:QWORD
EXTRN	__imp__fgetpos:PROC
EXTRN	__imp___fseeki64:PROC
; Function compile flags: /Ogsp
;	COMDAT ?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z
_TEXT	SEGMENT
__Fileposition$ = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 8
__Way$ = 20						; size = 4
___formal$ = 24						; size = 4
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekoff, COMDAT
; _this$ = ecx

; 490  : 		{	// change position by _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx

; 491  : 		fpos_t _Fileposition;
; 492  : 
; 493  : 		if (_Mysb::gptr() == &_Mychar	// something putback
; 494  : 			&& _Way == ios_base::cur	// a relative seek
; 495  : 			&& _Pcvt == 0)	// not converting

  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0000f	8d 4e 48	 lea	 ecx, DWORD PTR [esi+72]
  00012	33 ff		 xor	 edi, edi
  00014	3b c1		 cmp	 eax, ecx
  00016	75 13		 jne	 SHORT $LN12@seekoff
  00018	83 7d 14 01	 cmp	 DWORD PTR __Way$[ebp], 1
  0001c	75 0d		 jne	 SHORT $LN12@seekoff
  0001e	39 7e 44	 cmp	 DWORD PTR [esi+68], edi
  00021	75 08		 jne	 SHORT $LN12@seekoff

; 496  : 			_Off -= (off_type)sizeof (_Elem);	// back up over _Elem bytes

  00023	83 45 0c ff	 add	 DWORD PTR __Off$[ebp], -1
  00027	83 55 10 ff	 adc	 DWORD PTR __Off$[ebp+4], -1
$LN12@seekoff:

; 497  : 
; 498  : 		if (_Myfile == 0 || !_Endwrite()
; 499  : 			|| (_Off != 0 || _Way != ios_base::cur)
; 500  : 				&& _FSEEK_OFF(_Myfile, _Off, _Way) != 0
; 501  : 			|| fgetpos(_Myfile, &_Fileposition) != 0)

  0002b	39 7e 54	 cmp	 DWORD PTR [esi+84], edi
  0002e	74 68		 je	 SHORT $LN3@seekoff
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  00037	84 c0		 test	 al, al
  00039	74 5d		 je	 SHORT $LN3@seekoff
  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  0003e	0b 45 10	 or	 eax, DWORD PTR __Off$[ebp+4]
  00041	75 06		 jne	 SHORT $LN1@seekoff
  00043	83 7d 14 01	 cmp	 DWORD PTR __Way$[ebp], 1
  00047	74 19		 je	 SHORT $LN2@seekoff
$LN1@seekoff:
  00049	ff 75 14	 push	 DWORD PTR __Way$[ebp]
  0004c	ff 75 10	 push	 DWORD PTR __Off$[ebp+4]
  0004f	ff 75 0c	 push	 DWORD PTR __Off$[ebp]
  00052	ff 76 54	 push	 DWORD PTR [esi+84]
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fseeki64
  0005b	83 c4 10	 add	 esp, 16			; 00000010H
  0005e	85 c0		 test	 eax, eax
  00060	75 36		 jne	 SHORT $LN3@seekoff
$LN2@seekoff:
  00062	8d 45 f8	 lea	 eax, DWORD PTR __Fileposition$[ebp]
  00065	50		 push	 eax
  00066	ff 76 54	 push	 DWORD PTR [esi+84]
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetpos
  0006f	59		 pop	 ecx
  00070	59		 pop	 ecx
  00071	85 c0		 test	 eax, eax
  00073	75 23		 jne	 SHORT $LN3@seekoff

; 503  : 
; 504  : 		_Reset_back();	// revert from _Mychar buffer, discarding any putback

  00075	8b ce		 mov	 ecx, esi
  00077	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 505  : 		return (_POS_TYPE_FROM_STATE(pos_type, _State,

  0007c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0007f	8b 4d f8	 mov	 ecx, DWORD PTR __Fileposition$[ebp]
  00082	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00085	8b 4d fc	 mov	 ecx, DWORD PTR __Fileposition$[ebp+4]
  00088	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0008b	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  0008e	89 38		 mov	 DWORD PTR [eax], edi
  00090	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00093	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00096	eb 1c		 jmp	 SHORT $LN6@seekoff
$LN3@seekoff:

; 502  : 			return (pos_type(_BADOFF));	// report failure

  00098	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?_BADOFF@std@@3_JB
  0009e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a3	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000a6	89 10		 mov	 DWORD PTR [eax], edx
  000a8	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000ab	89 78 08	 mov	 DWORD PTR [eax+8], edi
  000ae	89 78 0c	 mov	 DWORD PTR [eax+12], edi
  000b1	89 78 10	 mov	 DWORD PTR [eax+16], edi
$LN6@seekoff:
  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi

; 506  : 			_Fileposition));	// return new position
; 507  : 		}

  000b6	c9		 leave
  000b7	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
_TEXT	ENDS
EXTRN	__imp__fsetpos:PROC
; Function compile flags: /Ogsp
;	COMDAT ?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
__Fileposition$ = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__Pos$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekpos, COMDAT
; _this$ = ecx

; 512  : 		{	// change position to _Pos

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 513  : 		fpos_t _Fileposition = _POS_TYPE_TO_FPOS_T(_Pos);

  00005	8b 45 14	 mov	 eax, DWORD PTR __Pos$[ebp+8]
  00008	53		 push	 ebx

; 514  : 		off_type _Off = (off_type)_Pos - (off_type)_FPOSOFF(_Fileposition);

  00009	8b 5d 10	 mov	 ebx, DWORD PTR __Pos$[ebp+4]
  0000c	56		 push	 esi
  0000d	8b f1		 mov	 esi, ecx

; 515  : 
; 516  : 		if (_Myfile == 0 || !_Endwrite()
; 517  : 			|| fsetpos(_Myfile, &_Fileposition) != 0
; 518  : 			|| _Off != 0 && _FSEEK_OFF(_Myfile, _Off, SEEK_CUR) != 0
; 519  : 			|| fgetpos(_Myfile, &_Fileposition) != 0)

  0000f	83 7e 54 00	 cmp	 DWORD PTR [esi+84], 0
  00013	89 45 f8	 mov	 DWORD PTR __Fileposition$[ebp], eax
  00016	8b 45 18	 mov	 eax, DWORD PTR __Pos$[ebp+12]
  00019	57		 push	 edi
  0001a	8b 7d 0c	 mov	 edi, DWORD PTR __Pos$[ebp]
  0001d	89 45 fc	 mov	 DWORD PTR __Fileposition$[ebp+4], eax
  00020	74 71		 je	 SHORT $LN16@seekpos
  00022	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  00027	84 c0		 test	 al, al
  00029	74 68		 je	 SHORT $LN16@seekpos
  0002b	8d 45 f8	 lea	 eax, DWORD PTR __Fileposition$[ebp]
  0002e	50		 push	 eax
  0002f	ff 76 54	 push	 DWORD PTR [esi+84]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fsetpos
  00038	59		 pop	 ecx
  00039	59		 pop	 ecx
  0003a	85 c0		 test	 eax, eax
  0003c	75 55		 jne	 SHORT $LN16@seekpos
  0003e	8b c7		 mov	 eax, edi
  00040	0b c3		 or	 eax, ebx
  00042	74 14		 je	 SHORT $LN1@seekpos
  00044	6a 01		 push	 1
  00046	53		 push	 ebx
  00047	57		 push	 edi
  00048	ff 76 54	 push	 DWORD PTR [esi+84]
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fseeki64
  00051	83 c4 10	 add	 esp, 16			; 00000010H
  00054	85 c0		 test	 eax, eax
  00056	75 3b		 jne	 SHORT $LN16@seekpos
$LN1@seekpos:
  00058	8d 45 f8	 lea	 eax, DWORD PTR __Fileposition$[ebp]
  0005b	50		 push	 eax
  0005c	ff 76 54	 push	 DWORD PTR [esi+84]
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetpos
  00065	59		 pop	 ecx
  00066	59		 pop	 ecx
  00067	85 c0		 test	 eax, eax
  00069	75 28		 jne	 SHORT $LN16@seekpos

; 521  : 
; 522  : 		_State = _POS_TYPE_TO_STATE(_Pos);

  0006b	8b 45 1c	 mov	 eax, DWORD PTR __Pos$[ebp+16]

; 523  : 
; 524  : 		_Reset_back();	// revert from _Mychar buffer, discarding any putback

  0006e	8b ce		 mov	 ecx, esi
  00070	89 46 4c	 mov	 DWORD PTR [esi+76], eax
  00073	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 525  : 		return (_POS_TYPE_FROM_STATE(pos_type, _State,

  00078	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0007b	8b 4d f8	 mov	 ecx, DWORD PTR __Fileposition$[ebp]
  0007e	83 20 00	 and	 DWORD PTR [eax], 0
  00081	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  00085	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00088	8b 4d fc	 mov	 ecx, DWORD PTR __Fileposition$[ebp+4]
  0008b	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0008e	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  00091	eb 1b		 jmp	 SHORT $LN17@seekpos
$LN16@seekpos:

; 520  : 			return (pos_type(_BADOFF));	// report failure

  00093	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?_BADOFF@std@@3_JB
  00099	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0009e	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000a1	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000a4	33 c9		 xor	 ecx, ecx
  000a6	89 10		 mov	 DWORD PTR [eax], edx
  000a8	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  000ab	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
$LN17@seekpos:
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  000b3	5b		 pop	 ebx

; 526  : 			_Fileposition));	// return new position
; 527  : 		}

  000b4	c9		 leave
  000b5	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
PUBLIC	?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
EXTRN	__imp__fclose:PROC
; Function compile flags: /Ogsp
;	COMDAT ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ
_TEXT	SEGMENT
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::close, COMDAT
; _this$ = ecx

; 292  : 		{	// close the C stream

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 293  : 		_Myt *_Ans = this;
; 294  : 		if (_Myfile == 0)

  00004	33 db		 xor	 ebx, ebx
  00006	57		 push	 edi
  00007	8b fe		 mov	 edi, esi
  00009	39 5e 54	 cmp	 DWORD PTR [esi+84], ebx

; 295  : 			_Ans = 0;
; 296  : 		else

  0000c	74 18		 je	 SHORT $LN18@close

; 297  : 			{	// put any homing sequence and close file
; 298  : 			if (!_Endwrite())

  0000e	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite

; 299  : 				_Ans = 0;
; 300  : 			if (fclose(_Myfile) != 0)

  00013	ff 76 54	 push	 DWORD PTR [esi+84]
  00016	84 c0		 test	 al, al
  00018	0f 44 fb	 cmove	 edi, ebx
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00021	59		 pop	 ecx
  00022	85 c0		 test	 eax, eax
  00024	74 02		 je	 SHORT $LN1@close
$LN18@close:

; 301  : 				_Ans = 0;

  00026	33 ff		 xor	 edi, edi
$LN1@close:

; 302  : 			}
; 303  : 		_Init(0, _Closefl);

  00028	8b ce		 mov	 ecx, esi
  0002a	88 5e 50	 mov	 BYTE PTR [esi+80], bl
  0002d	88 5e 49	 mov	 BYTE PTR [esi+73], bl
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
  00036	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA
  0003e	89 46 4c	 mov	 DWORD PTR [esi+76], eax

; 304  : 		return (_Ans);

  00041	8b c7		 mov	 eax, edi
  00043	5f		 pop	 edi
  00044	89 5e 44	 mov	 DWORD PTR [esi+68], ebx
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx

; 305  : 		}

  00049	c3		 ret	 0
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::close
_TEXT	ENDS
PUBLIC	?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ifstream<char,std::char_traits<char> >::close
; Function compile flags: /Ogsp
;	COMDAT ?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::close, COMDAT
; _this$ = ecx

; 883  : 		{	// close the C stream

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 884  : 		if (_Filebuffer.close() == 0)

  00003	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00006	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
  0000b	85 c0		 test	 eax, eax
  0000d	75 10		 jne	 SHORT $LN1@close@2

; 885  : 			_Myios::setstate(ios_base::failbit);

  0000f	50		 push	 eax
  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00015	6a 02		 push	 2
  00017	03 ce		 add	 ecx, esi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
$LN1@close@2:
  0001f	5e		 pop	 esi

; 886  : 		}

  00020	c3		 ret	 0
?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::close
_TEXT	ENDS
PUBLIC	??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ$0
__ehfuncinfo$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 143  : 		{	// destroy the object

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 144  : 		if (_Myfile != 0)

  0001b	83 7e 54 00	 cmp	 DWORD PTR [esi+84], 0
  0001f	74 05		 je	 SHORT $LN2@basic_file

; 145  : 			_Reset_back();	// revert from _Mychar buffer

  00021	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
$LN2@basic_file:

; 146  : 		if (_Closef)

  00026	80 7e 50 00	 cmp	 BYTE PTR [esi+80], 0
  0002a	74 07		 je	 SHORT $LN1@basic_file

; 147  : 			close();

  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
$LN1@basic_file:

; 148  : 		}

  00033	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00037	8b ce		 mov	 ecx, esi
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0003f	e8 00 00 00 00	 call	 __EH_epilog3
  00044	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
__ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
; Function compile flags: /Ogsp
;	COMDAT ??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@3
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@3:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ifstream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R17?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R17A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
EXTRN	__imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	__imp_??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:PROC
EXTRN	__imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ:PROC
EXTRN	??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17A@3EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
	DD	00H
	DD	08H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
_DATA	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Iosb@H@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
_DATA	SEGMENT
??_R0?AVios_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ifstream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	068H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`vbtable'
	DD	068H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ$1
__ehfuncinfo$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T508683 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_$initVBases$ = 8					; size = 4
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 707  : 		{	// construct unopened

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00011	33 ff		 xor	 edi, edi
  00013	33 db		 xor	 ebx, ebx
  00015	47		 inc	 edi
  00016	89 5d f0	 mov	 DWORD PTR $T508683[ebp], ebx
  00019	39 5d 08	 cmp	 DWORD PTR _$initVBases$[ebp], ebx
  0001c	74 15		 je	 SHORT $LN1@basic_ifst
  0001e	8d 4e 68	 lea	 ecx, DWORD PTR [esi+104]
  00021	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
  0002d	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00030	89 7d f0	 mov	 DWORD PTR $T508683[ebp], edi
$LN1@basic_ifst:
  00033	53		 push	 ebx
  00034	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00037	53		 push	 ebx
  00038	50		 push	 eax
  00039	8b ce		 mov	 ecx, esi
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  00041	8b 06		 mov	 eax, DWORD PTR [esi]
  00043	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00046	53		 push	 ebx
  00047	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  0004a	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  0004d	c7 04 06 00 00
	00 00		 mov	 DWORD PTR [esi+eax], OFFSET ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  00054	e8 00 00 00 00	 call	 ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >

; 708  : 		}

  00059	8b c6		 mov	 eax, esi
  0005b	e8 00 00 00 00	 call	 __EH_epilog3
  00060	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T508683[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 10 00 00
	00		 je	 $LN5@basic_ifst
  0000c	83 65 f0 fe	 and	 DWORD PTR $T508683[ebp], -2 ; fffffffeH
  00010	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 68	 add	 ecx, 104		; 00000068H
  00016	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
$LN5@basic_ifst:
  0001c	c3		 ret	 0
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ$1:
  0001d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	83 c1 10	 add	 ecx, 16			; 00000010H
  00023	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
__ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
PUBLIC	??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ$0
__ehfuncinfo$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 845  : 		{	// destroy the object

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b 41 98	 mov	 eax, DWORD PTR [ecx-104]
  00012	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00015	c7 44 08 98 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-104], OFFSET ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  0001d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 846  : 		}

  00021	8d 71 a8	 lea	 esi, DWORD PTR [ecx-88]
  00024	8b ce		 mov	 ecx, esi
  00026	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  0002b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0002f	8b ce		 mov	 ecx, esi
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
  00037	e8 00 00 00 00	 call	 __EH_epilog3
  0003c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 e9 58	 sub	 ecx, 88			; 00000058H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
__ehhandler$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ:
  0000c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00010	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00013	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00016	33 c8		 xor	 ecx, eax
  00018	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ
  00022	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
PUBLIC	??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 68	 lea	 esi, DWORD PTR [ecx+104]
  00004	8b ce		 mov	 ecx, esi
  00006	e8 00 00 00 00	 call	 ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
  0000b	8b ce		 mov	 ecx, esi
  0000d	5e		 pop	 esi
  0000e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 71 98	 lea	 esi, DWORD PTR [ecx-104]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0000e	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00012	74 07		 je	 SHORT $LN1@scalar@4
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001a	59		 pop	 ecx
$LN1@scalar@4:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	_dwCrc32$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?FileCrc32Streams@CCrc32Static@@SAKPBDAAK@Z	; CCrc32Static::FileCrc32Streams
EXTRN	__imp_?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\crc32static.cpp
xdata$x	SEGMENT
__catchsym$?FileCrc32Streams@CCrc32Static@@SAKPBDAAK@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?FileCrc32Streams@CCrc32Static@@SAKPBDAAK@Z$0
__tryblocktable$?FileCrc32Streams@CCrc32Static@@SAKPBDAAK@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?FileCrc32Streams@CCrc32Static@@SAKPBDAAK@Z$3
__unwindtable$?FileCrc32Streams@CCrc32Static@@SAKPBDAAK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FileCrc32Streams@CCrc32Static@@SAKPBDAAK@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$?FileCrc32Streams@CCrc32Static@@SAKPBDAAK@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?FileCrc32Streams@CCrc32Static@@SAKPBDAAK@Z
	DD	01H
	DD	FLAT:__tryblocktable$?FileCrc32Streams@CCrc32Static@@SAKPBDAAK@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?FileCrc32Streams@CCrc32Static@@SAKPBDAAK@Z
_TEXT	SEGMENT
_file$ = -4308						; size = 176
$T508731 = -4132					; size = 8
_nCount$505337 = -4128					; size = 4
_dwCrc32$GSCopy$ = -4124				; size = 4
_dwErrorCode$ = -4120					; size = 4
_buffer$505335 = -4116					; size = 4096
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_szFilename$ = 8					; size = 4
_dwCrc32$ = 12						; size = 4
?FileCrc32Streams@CCrc32Static@@SAKPBDAAK@Z PROC	; CCrc32Static::FileCrc32Streams, COMDAT

; 158  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?FileCrc32Streams@CCrc32Static@@SAKPBDAAK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	b8 c4 10 00 00	 mov	 eax, 4292		; 000010c4H
  00017	e8 00 00 00 00	 call	 __chkstk
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	33 c5		 xor	 eax, ebp
  00023	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00036	8b 75 0c	 mov	 esi, DWORD PTR _dwCrc32$[ebp]
  00039	8b 7d 08	 mov	 edi, DWORD PTR _szFilename$[ebp]

; 159  : #if UNICODE || _UNICODE
; 160  : 	return ERROR_NOT_SUPPORTED;
; 161  : #else
; 162  : 	_ASSERTE(szFilename);
; 163  : 	_ASSERTE(lstrlen(szFilename));
; 164  : 
; 165  : 	DWORD dwErrorCode = NO_ERROR;

  0003c	33 db		 xor	 ebx, ebx

; 166  : 	ifstream file;

  0003e	6a 01		 push	 1
  00040	8d 8d 2c ef ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00046	89 b5 e4 ef ff
	ff		 mov	 DWORD PTR _dwCrc32$GSCopy$[ebp], esi
  0004c	89 9d e8 ef ff
	ff		 mov	 DWORD PTR _dwErrorCode$[ebp], ebx
  00052	e8 00 00 00 00	 call	 ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >

; 167  : 
; 168  : 	dwCrc32 = 0xFFFFFFFF;

  00057	83 0e ff	 or	 DWORD PTR [esi], -1

; 169  : 
; 170  : 	try
; 171  : 	{
; 172  : 		// Open the file
; 173  : 		file.open(szFilename, ios::in | ios::binary);

  0005a	6a 40		 push	 64			; 00000040H
  0005c	6a 21		 push	 33			; 00000021H
  0005e	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00061	57		 push	 edi
  00062	8d 8d 2c ef ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00068	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0006c	e8 00 00 00 00	 call	 ?open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z ; std::basic_ifstream<char,std::char_traits<char> >::open

; 174  : 
; 175  : 		if(file.is_open())

  00071	39 9d 90 ef ff
	ff		 cmp	 DWORD PTR _file$[ebp+100], ebx
  00077	0f 84 8c 00 00
	00		 je	 $LN7@FileCrc32S

; 176  : 		{
; 177  : 			char buffer[MAX_BUFFER_SIZE];
; 178  : 			int nLoop, nCount;
; 179  : 			nCount = file.read(buffer, sizeof(buffer)).gcount();

  0007d	53		 push	 ebx
  0007e	bf 00 10 00 00	 mov	 edi, 4096		; 00001000H
  00083	57		 push	 edi
  00084	8d 85 ec ef ff
	ff		 lea	 eax, DWORD PTR _buffer$505335[ebp]
  0008a	50		 push	 eax
  0008b	8d 8d 2c ef ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z
  00097	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0009a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0009d	89 85 e0 ef ff
	ff		 mov	 DWORD PTR $T508731[ebp+4], eax
  000a3	8b c1		 mov	 eax, ecx
  000a5	89 8d e0 ef ff
	ff		 mov	 DWORD PTR _nCount$505337[ebp], ecx
$LL6@FileCrc32S:

; 180  : 			while(nCount)

  000ab	3b c3		 cmp	 eax, ebx
  000ad	74 4f		 je	 SHORT $LN5@FileCrc32S

; 181  : 			{
; 182  : 				for(nLoop = 0; nLoop < nCount; nLoop++)

  000af	33 c9		 xor	 ecx, ecx
$LL4@FileCrc32S:
  000b1	3b 8d e0 ef ff
	ff		 cmp	 ecx, DWORD PTR _nCount$505337[ebp]
  000b7	7d 25		 jge	 SHORT $LN2@FileCrc32S

; 183  : 					CalcCrc32(buffer[nLoop], dwCrc32);

  000b9	8b 06		 mov	 eax, DWORD PTR [esi]
  000bb	0f b6 94 0d ec
	ef ff ff	 movzx	 edx, BYTE PTR _buffer$505335[ebp+ecx]
  000c3	8b d8		 mov	 ebx, eax
  000c5	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  000cb	33 d3		 xor	 edx, ebx
  000cd	c1 e8 08	 shr	 eax, 8
  000d0	33 04 95 00 00
	00 00		 xor	 eax, DWORD PTR ?s_arrdwCrc32Table@CCrc32Static@@1PAKA[edx*4]
  000d7	41		 inc	 ecx
  000d8	89 06		 mov	 DWORD PTR [esi], eax
  000da	33 db		 xor	 ebx, ebx
  000dc	eb d3		 jmp	 SHORT $LL4@FileCrc32S
$LN2@FileCrc32S:

; 184  : 				nCount = file.read(buffer, sizeof(buffer)).gcount();

  000de	53		 push	 ebx
  000df	57		 push	 edi
  000e0	8d 85 ec ef ff
	ff		 lea	 eax, DWORD PTR _buffer$505335[ebp]
  000e6	50		 push	 eax
  000e7	8d 8d 2c ef ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z
  000f3	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000f6	89 85 e0 ef ff
	ff		 mov	 DWORD PTR _nCount$505337[ebp], eax

; 185  : 			}

  000fc	eb ad		 jmp	 SHORT $LL6@FileCrc32S
$LN5@FileCrc32S:

; 186  : 
; 187  : 			file.close();

  000fe	8d 8d 2c ef ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00104	e8 00 00 00 00	 call	 ?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ifstream<char,std::char_traits<char> >::close
$LN7@FileCrc32S:
  00109	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  0010c	eb 1c		 jmp	 SHORT $LN15@FileCrc32S
__catch$?FileCrc32Streams@CCrc32Static@@SAKPBDAAK@Z$0:

; 188  : 		}
; 189  : 	}
; 190  : 	catch(...)
; 191  : 	{
; 192  : 		// An unknown exception happened
; 193  : 		dwErrorCode = ERROR_CRC;
; 194  : 	}

  0010e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00112	c7 85 e8 ef ff
	ff 17 00 00 00	 mov	 DWORD PTR _dwErrorCode$[ebp], 23 ; 00000017H
  0011c	b8 00 00 00 00	 mov	 eax, $LN35@FileCrc32S
  00121	c3		 ret	 0
$LN35@FileCrc32S:
  00122	8b b5 e4 ef ff
	ff		 mov	 esi, DWORD PTR _dwCrc32$GSCopy$[ebp]
  00128	33 db		 xor	 ebx, ebx
$LN15@FileCrc32S:

; 195  : 
; 196  : 	if(file.is_open()) file.close();

  0012a	39 9d 90 ef ff
	ff		 cmp	 DWORD PTR _file$[ebp+100], ebx
  00130	74 0b		 je	 SHORT $LN1@FileCrc32S
  00132	8d 8d 2c ef ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00138	e8 00 00 00 00	 call	 ?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ifstream<char,std::char_traits<char> >::close
$LN1@FileCrc32S:

; 197  : 
; 198  : 	dwCrc32 = ~dwCrc32;

  0013d	f7 16		 not	 DWORD PTR [esi]

; 199  : 
; 200  : 	return dwErrorCode;

  0013f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00143	8d 8d 94 ef ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp+104]
  00149	e8 00 00 00 00	 call	 ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
  0014e	8d 8d 94 ef ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp+104]
  00154	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  0015a	8b 85 e8 ef ff
	ff		 mov	 eax, DWORD PTR _dwErrorCode$[ebp]

; 201  : #endif
; 202  : }

  00160	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00163	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016a	59		 pop	 ecx
  0016b	5f		 pop	 edi
  0016c	5e		 pop	 esi
  0016d	5b		 pop	 ebx
  0016e	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00171	33 cd		 xor	 ecx, ebp
  00173	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00178	c9		 leave
  00179	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FileCrc32Streams@CCrc32Static@@SAKPBDAAK@Z$2:
  00000	8d 8d 2c ef ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
__ehhandler$?FileCrc32Streams@CCrc32Static@@SAKPBDAAK@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 28 ef ff
	ff		 mov	 ecx, DWORD PTR [edx-4312]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FileCrc32Streams@CCrc32Static@@SAKPBDAAK@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FileCrc32Streams@CCrc32Static@@SAKPBDAAK@Z ENDP	; CCrc32Static::FileCrc32Streams
END
