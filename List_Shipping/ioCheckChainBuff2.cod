; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioCheckChainBuff2.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?return5@@YAIXZ					; return5
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return5@@YAIXZ
_TEXT	SEGMENT
?return5@@YAIXZ PROC					; return5, COMDAT

; 18   : 	__forceinline unsigned int return5() { __asm mov eax, 5 };

  00000	b8 05 00 00 00	 mov	 eax, 5
  00005	c3		 ret	 0
?return5@@YAIXZ ENDP					; return5
_TEXT	ENDS
PUBLIC	?return10@@YAIXZ				; return10
; Function compile flags: /Ogsp
;	COMDAT ?return10@@YAIXZ
_TEXT	SEGMENT
?return10@@YAIXZ PROC					; return10, COMDAT

; 21   : 	__forceinline unsigned int return10() { __asm mov eax, 10 };

  00000	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00005	c3		 ret	 0
?return10@@YAIXZ ENDP					; return10
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_R0?AVioWeapon@@@8				; ioWeapon `RTTI Type Descriptor'
PUBLIC	??_R0?AVioUroborusWeapon4@@@8			; ioUroborusWeapon4 `RTTI Type Descriptor'
PUBLIC	?ToUroborusWeapon4@@YAPAVioUroborusWeapon4@@PAVioWeapon@@@Z ; ToUroborusWeapon4
EXTRN	___RTDynamicCast:PROC
;	COMDAT ??_R0?AVioWeapon@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iouroborusweapon4.h
_DATA	SEGMENT
??_R0?AVioWeapon@@@8 DD FLAT:??_7type_info@@6B@		; ioWeapon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWeapon@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVioUroborusWeapon4@@@8
_DATA	SEGMENT
??_R0?AVioUroborusWeapon4@@@8 DD FLAT:??_7type_info@@6B@ ; ioUroborusWeapon4 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioUroborusWeapon4@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ToUroborusWeapon4@@YAPAVioUroborusWeapon4@@PAVioWeapon@@@Z
_TEXT	SEGMENT
_pWeapon$ = 8						; size = 4
?ToUroborusWeapon4@@YAPAVioUroborusWeapon4@@PAVioWeapon@@@Z PROC ; ToUroborusWeapon4, COMDAT

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 158  : 	if( !pWeapon || pWeapon->GetType() != ioWeapon::WT_UROBORUS4 )

  00004	8b 75 08	 mov	 esi, DWORD PTR _pWeapon$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 28		 je	 SHORT $LN1@ToUroborus
  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 90 10 01 00
	00		 call	 DWORD PTR [eax+272]
  00015	83 f8 55	 cmp	 eax, 85			; 00000055H
  00018	75 19		 jne	 SHORT $LN1@ToUroborus

; 160  : 
; 161  : 	return dynamic_cast< ioUroborusWeapon4* >( pWeapon );

  0001a	6a 00		 push	 0
  0001c	68 00 00 00 00	 push	 OFFSET ??_R0?AVioUroborusWeapon4@@@8
  00021	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWeapon@@@8
  00026	6a 00		 push	 0
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ___RTDynamicCast
  0002e	83 c4 14	 add	 esp, 20			; 00000014H
  00031	eb 02		 jmp	 SHORT $LN3@ToUroborus
$LN1@ToUroborus:

; 159  : 		return NULL;

  00033	33 c0		 xor	 eax, eax
$LN3@ToUroborus:
  00035	5e		 pop	 esi

; 162  : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?ToUroborusWeapon4@@YAPAVioUroborusWeapon4@@PAVioWeapon@@@Z ENDP ; ToUroborusWeapon4
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ; ioBaseChar::GetTargetRot
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ
_TEXT	SEGMENT
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ PROC	; ioBaseChar::GetTargetRot, COMDAT
; _this$ = ecx

; 2599 : 	inline const D3DXQUATERNION& GetTargetRot() const { return m_qtTargetRot; }

  00000	8d 81 a4 06 00
	00		 lea	 eax, DWORD PTR [ecx+1700]
  00006	c3		 ret	 0
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ENDP	; ioBaseChar::GetTargetRot
_TEXT	ENDS
PUBLIC	?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ	; ioBaseChar::GetCreator
; Function compile flags: /Ogsp
;	COMDAT ?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ
_TEXT	SEGMENT
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ PROC	; ioBaseChar::GetCreator, COMDAT
; _this$ = ecx

; 4013 : 	inline ioPlayStage* GetCreator() { return m_pCreator; }

  00000	8b 81 44 03 00
	00		 mov	 eax, DWORD PTR [ecx+836]
  00006	c3		 ret	 0
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ ENDP	; ioBaseChar::GetCreator
_TEXT	ENDS
PUBLIC	?StartBuff@ioCheckChainBuff2@@UAEXPAVioBaseChar@@@Z ; ioCheckChainBuff2::StartBuff
EXTRN	?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z:PROC	; ioBuff::StartBuff
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocheckchainbuff2.cpp
;	COMDAT ?StartBuff@ioCheckChainBuff2@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?StartBuff@ioCheckChainBuff2@@UAEXPAVioBaseChar@@@Z PROC ; ioCheckChainBuff2::StartBuff, COMDAT
; _this$ = ecx

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 68   : 	ioBuff::StartBuff( pOwner );

  00004	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z ; ioBuff::StartBuff

; 69   : 
; 70   : 	m_dwChainWeaponIndex = -1;

  0000e	83 8e a4 09 00
	00 ff		 or	 DWORD PTR [esi+2468], -1

; 71   : 	m_BuffState = BS_START;		

  00015	83 a6 a0 09 00
	00 00		 and	 DWORD PTR [esi+2464], 0
  0001c	5e		 pop	 esi

; 72   : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?StartBuff@ioCheckChainBuff2@@UAEXPAVioBaseChar@@@Z ENDP ; ioCheckChainBuff2::StartBuff
_TEXT	ENDS
PUBLIC	?ApplyStartBuff@ioCheckChainBuff2@@UAE_NPAVioBaseChar@@KK@Z ; ioCheckChainBuff2::ApplyStartBuff
EXTRN	?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z:PROC ; ioBuff::ApplyStartBuff
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioCheckChainBuff2@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioCheckChainBuff2@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioCheckChainBuff2::ApplyStartBuff, COMDAT
; _this$ = ecx

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 76   : 	if( !ioBuff::ApplyStartBuff( pOwner, dwGlobalTime, dwGapTime ) )

  00004	ff 75 10	 push	 DWORD PTR _dwGapTime$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0000f	e8 00 00 00 00	 call	 ?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBuff::ApplyStartBuff
  00014	84 c0		 test	 al, al
  00016	74 10		 je	 SHORT $LN2@ApplyStart
$LN1@ApplyStart:

; 77   : 		return false;
; 78   : 
; 79   : 	m_dwChainWeaponIndex = -1;

  00018	83 8e a4 09 00
	00 ff		 or	 DWORD PTR [esi+2468], -1

; 80   : 	m_BuffState = BS_START;

  0001f	83 a6 a0 09 00
	00 00		 and	 DWORD PTR [esi+2464], 0

; 81   : 
; 82   : 	return true;

  00026	b0 01		 mov	 al, 1
$LN2@ApplyStart:
  00028	5e		 pop	 esi

; 83   : }

  00029	5d		 pop	 ebp
  0002a	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioCheckChainBuff2@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioCheckChainBuff2::ApplyStartBuff
_TEXT	ENDS
PUBLIC	??1FireTime@@QAE@XZ				; FireTime::~FireTime
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1FireTime@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1FireTime@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1FireTime@@QAE@XZ$1
__ehfuncinfo$??1FireTime@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1FireTime@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1FireTime@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1FireTime@@QAE@XZ PROC				; FireTime::~FireTime, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1FireTime@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00017	8d 4f 44	 lea	 ecx, DWORD PTR [edi+68]
  0001a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00021	ff d6		 call	 esi
  00023	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  00026	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0002a	ff d6		 call	 esi
  0002c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00030	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00033	ff d6		 call	 esi
  00035	e8 00 00 00 00	 call	 __EH_epilog3
  0003a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1FireTime@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 14	 add	 ecx, 20			; 00000014H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1FireTime@@QAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 30	 add	 ecx, 48			; 00000030H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1FireTime@@QAE@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1FireTime@@QAE@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1FireTime@@QAE@XZ ENDP				; FireTime::~FireTime
PUBLIC	?CreateEffect@ioCheckChainBuff2@@IAEKPAVioPlayStage@@AAVioHashString@@AAUD3DXVECTOR3@@2@Z ; ioCheckChainBuff2::CreateEffect
EXTRN	?GetUniqueID@ioMapEffect@@QBEKXZ:PROC		; ioMapEffect::GetUniqueID
EXTRN	?CreateMapEffect@ioPlayStage@@QAEPAVioMapEffect@@ABVioHashString@@ABUD3DXVECTOR3@@1@Z:PROC ; ioPlayStage::CreateMapEffect
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?CreateEffect@ioCheckChainBuff2@@IAEKPAVioPlayStage@@AAVioHashString@@AAUD3DXVECTOR3@@2@Z
_TEXT	SEGMENT
_pStage$ = 8						; size = 4
_szEffect$ = 12						; size = 4
_vPos$ = 16						; size = 4
_vScale$ = 20						; size = 4
?CreateEffect@ioCheckChainBuff2@@IAEKPAVioPlayStage@@AAVioHashString@@AAUD3DXVECTOR3@@2@Z PROC ; ioCheckChainBuff2::CreateEffect, COMDAT
; _this$ = ecx

; 266  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 267  : 	if ( !pStage || szEffect.IsEmpty() )

  00003	83 7d 08 00	 cmp	 DWORD PTR _pStage$[ebp], 0
  00007	74 2b		 je	 SHORT $LN2@CreateEffe
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR _szEffect$[ebp]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00012	84 c0		 test	 al, al
  00014	75 1e		 jne	 SHORT $LN2@CreateEffe

; 269  : 
; 270  : 	ioMapEffect *pMaker = pStage->CreateMapEffect( szEffect, vPos, vScale );

  00016	ff 75 14	 push	 DWORD PTR _vScale$[ebp]
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _pStage$[ebp]
  0001c	ff 75 10	 push	 DWORD PTR _vPos$[ebp]
  0001f	ff 75 0c	 push	 DWORD PTR _szEffect$[ebp]
  00022	e8 00 00 00 00	 call	 ?CreateMapEffect@ioPlayStage@@QAEPAVioMapEffect@@ABVioHashString@@ABUD3DXVECTOR3@@1@Z ; ioPlayStage::CreateMapEffect

; 271  : 	if ( pMaker )

  00027	85 c0		 test	 eax, eax
  00029	74 09		 je	 SHORT $LN2@CreateEffe

; 272  : 		return pMaker->GetUniqueID();

  0002b	8b c8		 mov	 ecx, eax
  0002d	e8 00 00 00 00	 call	 ?GetUniqueID@ioMapEffect@@QBEKXZ ; ioMapEffect::GetUniqueID
  00032	eb 03		 jmp	 SHORT $LN4@CreateEffe
$LN2@CreateEffe:

; 268  : 		return -1;

  00034	83 c8 ff	 or	 eax, -1
$LN4@CreateEffe:

; 273  : 
; 274  : 	return -1;
; 275  : }

  00037	5d		 pop	 ebp
  00038	c2 10 00	 ret	 16			; 00000010H
?CreateEffect@ioCheckChainBuff2@@IAEKPAVioPlayStage@@AAVioHashString@@AAUD3DXVECTOR3@@2@Z ENDP ; ioCheckChainBuff2::CreateEffect
_TEXT	ENDS
PUBLIC	?DestroyEffect@ioCheckChainBuff2@@IAEXPAVioPlayStage@@AAK@Z ; ioCheckChainBuff2::DestroyEffect
EXTRN	?DestroyMapEffect@ioPlayStage@@QAEXK@Z:PROC	; ioPlayStage::DestroyMapEffect
; Function compile flags: /Ogsp
;	COMDAT ?DestroyEffect@ioCheckChainBuff2@@IAEXPAVioPlayStage@@AAK@Z
_TEXT	SEGMENT
_pStage$ = 8						; size = 4
_dwEffectID$ = 12					; size = 4
?DestroyEffect@ioCheckChainBuff2@@IAEXPAVioPlayStage@@AAK@Z PROC ; ioCheckChainBuff2::DestroyEffect, COMDAT
; _this$ = ecx

; 278  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 279  : 	if ( !pStage || dwEffectID == -1 )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pStage$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 15		 je	 SHORT $LN1@DestroyEff
  0000a	56		 push	 esi
  0000b	8b 75 0c	 mov	 esi, DWORD PTR _dwEffectID$[ebp]
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	83 f8 ff	 cmp	 eax, -1
  00013	74 09		 je	 SHORT $LN5@DestroyEff

; 280  : 		return;
; 281  : 
; 282  : 	pStage->DestroyMapEffect( dwEffectID );

  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?DestroyMapEffect@ioPlayStage@@QAEXK@Z ; ioPlayStage::DestroyMapEffect

; 283  : 	dwEffectID = -1;

  0001b	83 0e ff	 or	 DWORD PTR [esi], -1
$LN5@DestroyEff:
  0001e	5e		 pop	 esi
$LN1@DestroyEff:

; 284  : }

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?DestroyEffect@ioCheckChainBuff2@@IAEXPAVioPlayStage@@AAK@Z ENDP ; ioCheckChainBuff2::DestroyEffect
_TEXT	ENDS
PUBLIC	??A?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEAAVioHashString@@I@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::operator[]
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??A?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEAAVioHashString@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEAAVioHashString@@I@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	c1 e0 04	 shl	 eax, 4
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEAAVioHashString@@I@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::operator[]
_TEXT	ENDS
PUBLIC	?capacity@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::capacity
; Function compile flags: /Ogsp
;	COMDAT ?capacity@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 04	 sar	 eax, 4

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::capacity
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBE_NPBVioHashString@@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBE_NPBVioHashString@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBE_NPBVioHashString@@@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBE_NPBVioHashString@@@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXPAVioHashString@@0@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXPAVioHashString@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXPAVioHashString@@0@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXPAVioHashString@@0@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??$addressof@$$CBVioHashString@@@std@@YAPBVioHashString@@ABV1@@Z ; std::addressof<ioHashString const >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBVioHashString@@@std@@YAPBVioHashString@@ABV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBVioHashString@@@std@@YAPBVioHashString@@ABV1@@Z PROC ; std::addressof<ioHashString const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBVioHashString@@@std@@YAPBVioHashString@@ABV1@@Z ENDP ; std::addressof<ioHashString const >
_TEXT	ENDS
PUBLIC	??$_Val_type@PAVioHashString@@@std@@YAPAVioHashString@@PAV1@@Z ; std::_Val_type<ioHashString *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAVioHashString@@@std@@YAPAVioHashString@@PAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAVioHashString@@@std@@YAPAVioHashString@@PAV1@@Z PROC ; std::_Val_type<ioHashString *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAVioHashString@@@std@@YAPAVioHashString@@PAV1@@Z ENDP ; std::_Val_type<ioHashString *>
_TEXT	ENDS
PUBLIC	??$forward@VioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z ; std::forward<ioHashString>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@VioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@VioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z PROC ; std::forward<ioHashString>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@VioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z ENDP ; std::forward<ioHashString>
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator+
; Function compile flags: /Ogsp
;	COMDAT ??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+, COMDAT
; _this$ = ecx

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0000a	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	0f 5a c9	 cvtps2pd xmm1, xmm1
  00017	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0001b	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00020	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00024	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00028	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  0002d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00030	0f 5a c9	 cvtps2pd xmm1, xmm1
  00033	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00037	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0003c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00040	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00045	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  0004a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00050	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00054	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00058	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 382  : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+
_TEXT	ENDS
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator-
; Function compile flags: /Ogsp
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 386  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000a	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	0f 5a c9	 cvtps2pd xmm1, xmm1
  00017	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0001b	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  00020	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00024	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00028	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00030	0f 5a c9	 cvtps2pd xmm1, xmm1
  00033	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00037	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  0003c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00040	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00045	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0004a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00050	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00054	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00058	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 388  : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator-
_TEXT	ENDS
PUBLIC	?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z	; D3DXVec3LengthSq
; Function compile flags: /Ogsp
;	COMDAT ?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
tv165 = 8						; size = 4
_pV$ = 8						; size = 4
?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z PROC		; D3DXVec3LengthSq, COMDAT

; 1725 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1726 : #ifdef D3DX_DEBUG
; 1727 :     if(!pV)
; 1728 :         return 0.0f;
; 1729 : #endif
; 1730 : 
; 1731 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pV$[ebp]
  00006	d9 40 04	 fld	 DWORD PTR [eax+4]
  00009	d9 00		 fld	 DWORD PTR [eax]
  0000b	d9 40 08	 fld	 DWORD PTR [eax+8]
  0000e	d9 c1		 fld	 ST(1)
  00010	de ca		 fmulp	 ST(2), ST(0)
  00012	d9 c2		 fld	 ST(2)
  00014	de cb		 fmulp	 ST(3), ST(0)
  00016	d9 c9		 fxch	 ST(1)
  00018	de c2		 faddp	 ST(2), ST(0)
  0001a	d9 c0		 fld	 ST(0)
  0001c	de c9		 fmulp	 ST(1), ST(0)
  0001e	de c1		 faddp	 ST(1), ST(0)
  00020	d9 5d 08	 fstp	 DWORD PTR tv165[ebp]
  00023	d9 45 08	 fld	 DWORD PTR tv165[ebp]

; 1732 : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z ENDP		; D3DXVec3LengthSq
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	??0FireTime@@QAE@XZ				; FireTime::FireTime
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	SEGMENT
__unwindtable$??0FireTime@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FireTime@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FireTime@@QAE@XZ$1
__ehfuncinfo$??0FireTime@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FireTime@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0FireTime@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0FireTime@@QAE@XZ PROC				; FireTime::FireTime, COMDAT
; _this$ = ecx

; 219  : 	FireTime()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0FireTime@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0001a	ff d7		 call	 edi
  0001c	33 db		 xor	 ebx, ebx
  0001e	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00021	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00024	ff d7		 call	 edi
  00026	8d 4e 44	 lea	 ecx, DWORD PTR [esi+68]
  00029	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0002d	ff d7		 call	 edi

; 220  : 	{
; 221  : 		dwStart = 0;

  0002f	89 1e		 mov	 DWORD PTR [esi], ebx

; 222  : 		dwDuration = 0;

  00031	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 223  : 
; 224  : 		iAttributeIdx = 0;

  00034	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 225  : 		iResistanceIdx = 0;

  00037	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx

; 226  : 
; 227  : 		bLoopWoundedAni = false;

  0003a	88 5e 10	 mov	 BYTE PTR [esi+16], bl

; 228  : 		dwWoundedAniDuration = 0;

  0003d	89 5e 24	 mov	 DWORD PTR [esi+36], ebx

; 229  : 
; 230  : 		dwWeaponIdx = 0;

  00040	89 5e 28	 mov	 DWORD PTR [esi+40], ebx

; 231  : 		eCollisionType = ACT_NONE;

  00043	c7 46 2c 06 00
	00 00		 mov	 DWORD PTR [esi+44], 6

; 232  : 		eFireTimeType = FTT_NORMAL_ATTACK;

  0004a	89 5e 40	 mov	 DWORD PTR [esi+64], ebx

; 233  : 
; 234  : 		m_iExtraValue = 0;

  0004d	89 5e 54	 mov	 DWORD PTR [esi+84], ebx

; 235  : 	}

  00050	8b c6		 mov	 eax, esi
  00052	e8 00 00 00 00	 call	 __EH_epilog3
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FireTime@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 14	 add	 ecx, 20			; 00000014H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FireTime@@QAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 30	 add	 ecx, 48			; 00000030H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0FireTime@@QAE@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0FireTime@@QAE@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0FireTime@@QAE@XZ ENDP				; FireTime::FireTime
PUBLIC	?GetWeaponIndex@ioWeapon@@QBEKXZ		; ioWeapon::GetWeaponIndex
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioweapon.h
;	COMDAT ?GetWeaponIndex@ioWeapon@@QBEKXZ
_TEXT	SEGMENT
?GetWeaponIndex@ioWeapon@@QBEKXZ PROC			; ioWeapon::GetWeaponIndex, COMDAT
; _this$ = ecx

; 536  : 	inline DWORD GetWeaponIndex() const { return m_dwWeaponIdx; }

  00000	8b 81 b8 04 00
	00		 mov	 eax, DWORD PTR [ecx+1208]
  00006	c3		 ret	 0
?GetWeaponIndex@ioWeapon@@QBEKXZ ENDP			; ioWeapon::GetWeaponIndex
_TEXT	ENDS
PUBLIC	?GetCreatorName@ioBuff@@QBEABVioHashString@@XZ	; ioBuff::GetCreatorName
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
;	COMDAT ?GetCreatorName@ioBuff@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetCreatorName@ioBuff@@QBEABVioHashString@@XZ PROC	; ioBuff::GetCreatorName, COMDAT
; _this$ = ecx

; 442  : 	inline const ioHashString& GetCreatorName() const { return m_CreateChar; }

  00000	8d 81 88 02 00
	00		 lea	 eax, DWORD PTR [ecx+648]
  00006	c3		 ret	 0
?GetCreatorName@ioBuff@@QBEABVioHashString@@XZ ENDP	; ioBuff::GetCreatorName
_TEXT	ENDS
PUBLIC	?size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 04	 sar	 eax, 4

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::size
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::~_Vector_val<ioHashString,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::~_Vector_val<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::~_Vector_val<ioHashString,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??0?$allocator@VioHashString@@@std@@QAE@XZ	; std::allocator<ioHashString>::allocator<ioHashString>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@VioHashString@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@VioHashString@@@std@@QAE@XZ PROC		; std::allocator<ioHashString>::allocator<ioHashString>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@VioHashString@@@std@@QAE@XZ ENDP		; std::allocator<ioHashString>::allocator<ioHashString>
_TEXT	ENDS
PUBLIC	??0?$allocator@VioHashString@@@std@@QAE@ABV01@@Z ; std::allocator<ioHashString>::allocator<ioHashString>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@VioHashString@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@VioHashString@@@std@@QAE@ABV01@@Z PROC	; std::allocator<ioHashString>::allocator<ioHashString>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@VioHashString@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<ioHashString>::allocator<ioHashString>
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Xlen
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@I@Z ; std::allocator<ioHashString>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@I@Z PROC ; std::allocator<ioHashString>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@I@Z ENDP ; std::allocator<ioHashString>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Vector_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Vector_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Vector_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@VioHashString@@@std@@QBEIXZ ; std::allocator<ioHashString>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@VioHashString@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@VioHashString@@@std@@QBEIXZ PROC	; std::allocator<ioHashString>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@VioHashString@@@std@@QBEIXZ ENDP	; std::allocator<ioHashString>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Compat
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ; std::_Allocate<ioHashString>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z
_TEXT	SEGMENT
$T550315 = -12						; size = 12
$T550320 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z PROC ; std::_Allocate<ioHashString>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	0f		 cmp	 ecx, 268435455		; 0fffffffH
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	c1 e1 04	 shl	 ecx, 4
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T550320[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T550320[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T550315[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T550315[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T550315[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ENDP ; std::_Allocate<ioHashString>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$forward@ABVioHashString@@@std@@YAABVioHashString@@ABV1@@Z ; std::forward<ioHashString const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABVioHashString@@@std@@YAABVioHashString@@ABV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABVioHashString@@@std@@YAABVioHashString@@ABV1@@Z PROC ; std::forward<ioHashString const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABVioHashString@@@std@@YAABVioHashString@@ABV1@@Z ENDP ; std::forward<ioHashString const &>
_TEXT	ENDS
PUBLIC	??$forward@AAVioHashString@@@std@@YAAAVioHashString@@AAV1@@Z ; std::forward<ioHashString &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@AAVioHashString@@@std@@YAAAVioHashString@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAVioHashString@@@std@@YAAAVioHashString@@AAV1@@Z PROC ; std::forward<ioHashString &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAVioHashString@@@std@@YAAAVioHashString@@AAV1@@Z ENDP ; std::forward<ioHashString &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@VioHashString@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVioHashString@@0@Z ; std::_Ptr_cat<ioHashString,ioHashString>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@VioHashString@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVioHashString@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@VioHashString@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVioHashString@@0@Z PROC ; std::_Ptr_cat<ioHashString,ioHashString>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@VioHashString@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVioHashString@@0@Z ENDP ; std::_Ptr_cat<ioHashString,ioHashString>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@AAPAVioHashString@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@AAPAVioHashString@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@AAPAVioHashString@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@AAPAVioHashString@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *>
_TEXT	ENDS
PUBLIC	??$move@AAVioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z ; std::move<ioHashString &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAVioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAVioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z PROC ; std::move<ioHashString &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAVioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z ENDP ; std::move<ioHashString &>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEABVioHashString@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEABVioHashString@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEABVioHashString@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 10	 add	 DWORD PTR [eax], 16	; 00000010H

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator++
_TEXT	ENDS
PUBLIC	??_GioHashString@@QAEPAXI@Z			; ioHashString::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GioHashString@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioHashString@@QAEPAXI@Z PROC			; ioHashString::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0000c	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00010	74 07		 je	 SHORT $LN1@scalar@2
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@2:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_GioHashString@@QAEPAXI@Z ENDP			; ioHashString::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z$0
__ehfuncinfo$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z
_TEXT	SEGMENT
$T550347 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z PROC ; std::_Construct<ioHashString,ioHashString const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T550347[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 09		 je	 SHORT $LN3@Construct
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
$LN3@Construct:

; 49   : 	}

  00026	e8 00 00 00 00	 call	 __EH_epilog3
  0002b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T550347[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ENDP ; std::_Construct<ioHashString,ioHashString const &>
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__real@bf800000
PUBLIC	__real@4f800000
PUBLIC	?CreateChain@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z ; ioCheckChainBuff2::CreateChain
EXTRN	?SetVisible@ioUroborusWeapon4@@QAEX_N@Z:PROC	; ioUroborusWeapon4::SetVisible
EXTRN	?ExtendFireExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUFireTime@@ABUD3DXVECTOR3@@1ABVioHashString@@@Z:PROC ; ioBaseChar::ExtendFireExplicit
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z:PROC
EXTRN	?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z:PROC ; ioGameEntity::GetMidPositionByRate
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	?IncreaseWeaponIndexBase@ioBaseChar@@QAEKXZ:PROC ; ioBaseChar::IncreaseWeaponIndexBase
EXTRN	?GetCreator@ioBuff@@QAEPAVioBaseChar@@XZ:PROC	; ioBuff::GetCreator
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioweapon.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreateChain@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateChain@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateChain@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z$1
__ehfuncinfo$?CreateChain@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateChain@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocheckchainbuff2.cpp
xdata$x	ENDS
;	COMDAT ?CreateChain@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_kFireTime$ = -148					; size = 88
tv229 = -60						; size = 4
tv225 = -60						; size = 4
tv221 = -60						; size = 4
$T550366 = -56						; size = 16
$T548299 = -52						; size = 12
_vDir$ = -40						; size = 12
_vPos$ = -28						; size = 12
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
?CreateChain@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z PROC ; ioCheckChainBuff2::CreateChain, COMDAT
; _this$ = ecx

; 146  : {

  00000	68 88 00 00 00	 push	 136			; 00000088H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?CreateChain@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00012	8b f1		 mov	 esi, ecx

; 147  : 	if ( !pOwner )

  00014	85 ff		 test	 edi, edi
  00016	0f 84 46 01 00
	00		 je	 $LN5@CreateChai

; 148  : 		return;
; 149  : 
; 150  : 	ioBaseChar *pCreator = GetCreator();

  0001c	e8 00 00 00 00	 call	 ?GetCreator@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetCreator

; 151  : 	if ( !pCreator )

  00021	85 c0		 test	 eax, eax
  00023	0f 84 39 01 00
	00		 je	 $LN5@CreateChai

; 152  : 		return;
; 153  : 
; 154  : 	m_dwChainWeaponIndex = pOwner->IncreaseWeaponIndexBase();

  00029	8b cf		 mov	 ecx, edi
  0002b	e8 00 00 00 00	 call	 ?IncreaseWeaponIndexBase@ioBaseChar@@QAEKXZ ; ioBaseChar::IncreaseWeaponIndexBase

; 155  : 
; 156  : 	FireTime kFireTime;

  00030	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  00036	89 86 a4 09 00
	00		 mov	 DWORD PTR [esi+2468], eax
  0003c	e8 00 00 00 00	 call	 ??0FireTime@@QAE@XZ	; FireTime::FireTime
  00041	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 157  : 	kFireTime.dwStart = FRAMEGETTIME();

  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0004b	8b c8		 mov	 ecx, eax
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00053	89 85 6c ff ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp], eax

; 158  : 
; 159  : 	kFireTime.iAttributeIdx = m_nChainWeapon;

  00059	8b 86 6c 09 00
	00		 mov	 eax, DWORD PTR [esi+2412]
  0005f	89 85 74 ff ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp+8], eax

; 160  : 	kFireTime.dwWeaponIdx = m_dwChainWeaponIndex++;

  00065	8b 86 a4 09 00
	00		 mov	 eax, DWORD PTR [esi+2468]
  0006b	89 45 94	 mov	 DWORD PTR _kFireTime$[ebp+40], eax
  0006e	40		 inc	 eax
  0006f	89 86 a4 09 00
	00		 mov	 DWORD PTR [esi+2468], eax

; 161  : 
; 162  : 	D3DXVECTOR3 vPos = pOwner->GetMidPositionByRate();

  00075	b8 05 00 00 00	 mov	 eax, 5
  0007a	8b c8		 mov	 ecx, eax
  0007c	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00081	89 4d c4	 mov	 DWORD PTR tv229[ebp], ecx
  00084	db 45 c4	 fild	 DWORD PTR tv229[ebp]
  00087	85 c9		 test	 ecx, ecx
  00089	79 06		 jns	 SHORT $LN20@CreateChai
  0008b	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN20@CreateChai:
  00091	89 45 c4	 mov	 DWORD PTR tv225[ebp], eax
  00094	db 45 c4	 fild	 DWORD PTR tv225[ebp]
  00097	85 c0		 test	 eax, eax
  00099	79 06		 jns	 SHORT $LN21@CreateChai
  0009b	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN21@CreateChai:
  000a1	de f9		 fdivp	 ST(1), ST(0)
  000a3	51		 push	 ecx
  000a4	8d 45 e4	 lea	 eax, DWORD PTR _vPos$[ebp]
  000a7	8b cf		 mov	 ecx, edi
  000a9	d9 5d c4	 fstp	 DWORD PTR tv221[ebp]
  000ac	d9 45 c4	 fld	 DWORD PTR tv221[ebp]
  000af	d9 1c 24	 fstp	 DWORD PTR [esp]
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z ; ioGameEntity::GetMidPositionByRate

; 163  : 	D3DXVECTOR3 vDir = pOwner->GetTargetRot() * D3DXVECTOR3( 0, 0, -1 );

  000b8	0f 57 c0	 xorps	 xmm0, xmm0
  000bb	8d 45 cc	 lea	 eax, DWORD PTR $T548299[ebp]
  000be	50		 push	 eax
  000bf	8d 87 a4 06 00
	00		 lea	 eax, DWORD PTR [edi+1700]
  000c5	50		 push	 eax
  000c6	8d 45 d8	 lea	 eax, DWORD PTR _vDir$[ebp]
  000c9	f3 0f 11 45 cc	 movss	 DWORD PTR $T548299[ebp], xmm0
  000ce	f3 0f 11 45 d0	 movss	 DWORD PTR $T548299[ebp+4], xmm0
  000d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000db	50		 push	 eax
  000dc	f3 0f 11 45 d4	 movss	 DWORD PTR $T548299[ebp+8], xmm0
  000e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  000e7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 164  : 
; 165  : 	ioWeapon *pWeapon = pOwner->ExtendFireExplicit( kFireTime, vPos, vDir, "" );	

  000ea	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  000ef	8d 4d c8	 lea	 ecx, DWORD PTR $T550366[ebp]
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  000f8	8d 45 c8	 lea	 eax, DWORD PTR $T550366[ebp]
  000fb	50		 push	 eax
  000fc	8d 45 d8	 lea	 eax, DWORD PTR _vDir$[ebp]
  000ff	50		 push	 eax
  00100	8d 45 e4	 lea	 eax, DWORD PTR _vPos$[ebp]
  00103	50		 push	 eax
  00104	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _kFireTime$[ebp]
  0010a	50		 push	 eax
  0010b	8b cf		 mov	 ecx, edi
  0010d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00111	e8 00 00 00 00	 call	 ?ExtendFireExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUFireTime@@ABUD3DXVECTOR3@@1ABVioHashString@@@Z ; ioBaseChar::ExtendFireExplicit
  00116	8d 4d c8	 lea	 ecx, DWORD PTR $T550366[ebp]
  00119	8b f8		 mov	 edi, eax
  0011b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0011f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 166  : 	if ( pWeapon )

  00125	85 ff		 test	 edi, edi
  00127	74 20		 je	 SHORT $LN1@CreateChai

; 167  : 	{
; 168  : 		ioUroborusWeapon4 *pChainWeapon = ToUroborusWeapon4( pWeapon );

  00129	57		 push	 edi
  0012a	e8 00 00 00 00	 call	 ?ToUroborusWeapon4@@YAPAVioUroborusWeapon4@@PAVioWeapon@@@Z ; ToUroborusWeapon4
  0012f	59		 pop	 ecx

; 169  : 		if ( pChainWeapon )

  00130	85 c0		 test	 eax, eax
  00132	74 15		 je	 SHORT $LN1@CreateChai

; 170  : 		{
; 171  : 			pChainWeapon->SetVisible( false );

  00134	6a 00		 push	 0
  00136	8b c8		 mov	 ecx, eax
  00138	e8 00 00 00 00	 call	 ?SetVisible@ioUroborusWeapon4@@QAEX_N@Z ; ioUroborusWeapon4::SetVisible

; 172  : 			m_dwChainWeaponIndex = pWeapon->GetWeaponIndex();

  0013d	8b 87 b8 04 00
	00		 mov	 eax, DWORD PTR [edi+1208]
  00143	89 86 a4 09 00
	00		 mov	 DWORD PTR [esi+2468], eax
$LN1@CreateChai:

; 173  : 		}
; 174  : 	}
; 175  : 
; 176  : 	m_BuffState = BS_WAIT;
; 177  : }

  00149	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0014d	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  00153	c7 86 a0 09 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+2464], 1
  0015d	e8 00 00 00 00	 call	 ??1FireTime@@QAE@XZ
$LN5@CreateChai:
  00162	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00167	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateChain@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z$0:
  00000	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1FireTime@@QAE@XZ
__unwindfunclet$?CreateChain@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z$1:
  0000b	8d 4d c8	 lea	 ecx, DWORD PTR $T550366[ebp]
  0000e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?CreateChain@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z:
  00014	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00018	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001b	8b 8a 68 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-152]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateChain@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateChain@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z ENDP ; ioCheckChainBuff2::CreateChain
PUBLIC	__$ArrayPad$
PUBLIC	?SetChainPos@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z ; ioCheckChainBuff2::SetChainPos
EXTRN	?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z:PROC ; ioWeapon::SetPosition
EXTRN	?SetWorldOrientation@ioMapEffect@@QAEXABUD3DXQUATERNION@@@Z:PROC ; ioMapEffect::SetWorldOrientation
EXTRN	?SetWorldPosition@ioMapEffect@@QAEXABUD3DXVECTOR3@@@Z:PROC ; ioMapEffect::SetWorldPosition
EXTRN	?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z:PROC ; ioPlayStage::FindMapEffect
EXTRN	?IsHasArrow@ioUroborusWeapon4@@QBE_NXZ:PROC	; ioUroborusWeapon4::IsHasArrow
EXTRN	?FindWeapon@ioWeaponManager@@QAEPAVioWeapon@@PAVioBaseChar@@K@Z:PROC ; ioWeaponManager::FindWeapon
EXTRN	?GetSingleton@ioWeaponManager@@SAAAV1@XZ:PROC	; ioWeaponManager::GetSingleton
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?SetChainPos@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
tv375 = -52						; size = 4
tv371 = -52						; size = 4
$T550418 = -52						; size = 4
tv379 = -48						; size = 4
$T550414 = -48						; size = 4
_pStage$ = -48						; size = 4
tv352 = -44						; size = 4
tv348 = -44						; size = 4
tv344 = -44						; size = 4
_pChainWeapon$ = -44					; size = 4
$T548326 = -40						; size = 12
_vCreatorPos$548324 = -28				; size = 12
$T548329 = -16						; size = 12
$T548325 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pOwner$ = 8						; size = 4
?SetChainPos@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z PROC ; ioCheckChainBuff2::SetChainPos, COMDAT
; _this$ = ecx

; 180  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _pOwner$[ebp]
  00014	56		 push	 esi
  00015	8b f1		 mov	 esi, ecx

; 181  : 	if ( !pOwner )

  00017	85 db		 test	 ebx, ebx
  00019	0f 84 ad 01 00
	00		 je	 $LN1@SetChainPo

; 182  : 		return;
; 183  : 
; 184  : 	ioPlayStage *pStage = pOwner->GetCreator();

  0001f	8b 83 44 03 00
	00		 mov	 eax, DWORD PTR [ebx+836]
  00025	89 45 d0	 mov	 DWORD PTR _pStage$[ebp], eax

; 185  : 	if ( !pStage )

  00028	85 c0		 test	 eax, eax
  0002a	0f 84 9c 01 00
	00		 je	 $LN1@SetChainPo

; 186  : 		return;
; 187  : 	
; 188  : 	ioBaseChar *pCreator = GetCreator();

  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ?GetCreator@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetCreator
  00036	8b f8		 mov	 edi, eax

; 189  : 	if ( !pCreator )

  00038	85 ff		 test	 edi, edi
  0003a	75 0c		 jne	 SHORT $LN6@SetChainPo

; 190  : 	{
; 191  : 		SetReserveEndBuff();

  0003c	8b ce		 mov	 ecx, esi
  0003e	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 192  : 		return;

  00043	e9 83 01 00 00	 jmp	 $LN25@SetChainPo
$LN6@SetChainPo:

; 193  : 	}	
; 194  : 
; 195  : 	ioWeapon *pWeapon = g_WeaponMgr.FindWeapon( pOwner, m_dwChainWeaponIndex );

  00048	ff b6 a4 09 00
	00		 push	 DWORD PTR [esi+2468]
  0004e	53		 push	 ebx
  0004f	e8 00 00 00 00	 call	 ?GetSingleton@ioWeaponManager@@SAAAV1@XZ ; ioWeaponManager::GetSingleton
  00054	8b c8		 mov	 ecx, eax
  00056	e8 00 00 00 00	 call	 ?FindWeapon@ioWeaponManager@@QAEPAVioWeapon@@PAVioBaseChar@@K@Z ; ioWeaponManager::FindWeapon

; 196  : 	ioUroborusWeapon4 *pChainWeapon = ToUroborusWeapon4( pWeapon );

  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?ToUroborusWeapon4@@YAPAVioUroborusWeapon4@@PAVioWeapon@@@Z ; ToUroborusWeapon4
  00061	8b d8		 mov	 ebx, eax
  00063	59		 pop	 ecx
  00064	89 5d d4	 mov	 DWORD PTR _pChainWeapon$[ebp], ebx

; 197  : 	if ( pChainWeapon )

  00067	85 db		 test	 ebx, ebx
  00069	0f 84 5c 01 00
	00		 je	 $LN25@SetChainPo

; 198  : 	{
; 199  : 		if ( pChainWeapon->IsHasArrow() )

  0006f	8b cb		 mov	 ecx, ebx
  00071	e8 00 00 00 00	 call	 ?IsHasArrow@ioUroborusWeapon4@@QBE_NXZ ; ioUroborusWeapon4::IsHasArrow
  00076	84 c0		 test	 al, al
  00078	74 09		 je	 SHORT $LN4@SetChainPo

; 200  : 			pChainWeapon->SetVisible( true );

  0007a	6a 01		 push	 1
  0007c	8b cb		 mov	 ecx, ebx
  0007e	e8 00 00 00 00	 call	 ?SetVisible@ioUroborusWeapon4@@QAEX_N@Z ; ioUroborusWeapon4::SetVisible
$LN4@SetChainPo:

; 201  : 
; 202  : 		if ( m_dwCreatorEffectID != -1 )

  00083	8b 86 a8 09 00
	00		 mov	 eax, DWORD PTR [esi+2472]
  00089	83 f8 ff	 cmp	 eax, -1
  0008c	0f 84 ee 00 00
	00		 je	 $LN3@SetChainPo

; 203  : 		{
; 204  : 			ioMapEffect *pCreatorEffect = pStage->FindMapEffect( m_dwCreatorEffectID );

  00092	8b 4d d0	 mov	 ecx, DWORD PTR _pStage$[ebp]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect
  0009b	8b d8		 mov	 ebx, eax

; 205  : 			if ( pCreatorEffect )

  0009d	85 db		 test	 ebx, ebx
  0009f	0f 84 26 01 00
	00		 je	 $LN25@SetChainPo

; 206  : 			{
; 207  : 				D3DXVECTOR3 vCreatorPos = pCreator->GetMidPositionByRate() + pCreator->GetWorldOrientation() * m_vCreatorEffectOffset;

  000a5	b8 05 00 00 00	 mov	 eax, 5
  000aa	89 45 d0	 mov	 DWORD PTR $T550414[ebp], eax
  000ad	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  000b2	89 45 cc	 mov	 DWORD PTR $T550418[ebp], eax
  000b5	8b 07		 mov	 eax, DWORD PTR [edi]
  000b7	81 c6 90 09 00
	00		 add	 esi, 2448		; 00000990H
  000bd	56		 push	 esi
  000be	8b cf		 mov	 ecx, edi
  000c0	ff 50 74	 call	 DWORD PTR [eax+116]
  000c3	50		 push	 eax
  000c4	8d 45 d8	 lea	 eax, DWORD PTR $T548326[ebp]
  000c7	50		 push	 eax
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  000ce	db 45 d0	 fild	 DWORD PTR $T550414[ebp]
  000d1	8b f0		 mov	 esi, eax
  000d3	8b 45 d0	 mov	 eax, DWORD PTR $T550414[ebp]
  000d6	85 c0		 test	 eax, eax
  000d8	79 06		 jns	 SHORT $LN26@SetChainPo
  000da	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN26@SetChainPo:
  000e0	8b 45 cc	 mov	 eax, DWORD PTR $T550418[ebp]
  000e3	db 45 cc	 fild	 DWORD PTR $T550418[ebp]
  000e6	85 c0		 test	 eax, eax
  000e8	79 06		 jns	 SHORT $LN27@SetChainPo
  000ea	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN27@SetChainPo:
  000f0	de f9		 fdivp	 ST(1), ST(0)
  000f2	83 c4 08	 add	 esp, 8
  000f5	8d 45 f0	 lea	 eax, DWORD PTR $T548325[ebp]
  000f8	8b cf		 mov	 ecx, edi
  000fa	d9 5d cc	 fstp	 DWORD PTR tv371[ebp]
  000fd	d9 45 cc	 fld	 DWORD PTR tv371[ebp]
  00100	d9 1c 24	 fstp	 DWORD PTR [esp]
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z ; ioGameEntity::GetMidPositionByRate
  00109	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0010e	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00113	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00118	f3 0f 10 1e	 movss	 xmm3, DWORD PTR [esi]
  0011c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0011f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00122	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00126	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
  0012b	0f 5a d2	 cvtps2pd xmm2, xmm2
  0012e	0f 5a c9	 cvtps2pd xmm1, xmm1
  00131	f2 0f 58 ca	 addsd	 xmm1, xmm2
  00135	f3 0f 10 10	 movss	 xmm2, DWORD PTR [eax]
  00139	0f 5a d2	 cvtps2pd xmm2, xmm2
  0013c	0f 5a db	 cvtps2pd xmm3, xmm3

; 208  : 				pCreatorEffect->SetWorldPosition( vCreatorPos );

  0013f	8d 45 e4	 lea	 eax, DWORD PTR _vCreatorPos$548324[ebp]
  00142	f2 0f 58 d3	 addsd	 xmm2, xmm3
  00146	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0014a	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  0014e	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  00152	50		 push	 eax
  00153	8b cb		 mov	 ecx, ebx
  00155	f3 0f 11 55 e4	 movss	 DWORD PTR _vCreatorPos$548324[ebp], xmm2
  0015a	f3 0f 11 45 e8	 movss	 DWORD PTR _vCreatorPos$548324[ebp+4], xmm0
  0015f	f3 0f 11 4d ec	 movss	 DWORD PTR _vCreatorPos$548324[ebp+8], xmm1
  00164	e8 00 00 00 00	 call	 ?SetWorldPosition@ioMapEffect@@QAEXABUD3DXVECTOR3@@@Z ; ioMapEffect::SetWorldPosition

; 209  : 				pCreatorEffect->SetWorldOrientation( pCreator->GetWorldOrientation() );

  00169	8b 07		 mov	 eax, DWORD PTR [edi]
  0016b	8b cf		 mov	 ecx, edi
  0016d	ff 50 74	 call	 DWORD PTR [eax+116]
  00170	50		 push	 eax
  00171	8b cb		 mov	 ecx, ebx
  00173	e8 00 00 00 00	 call	 ?SetWorldOrientation@ioMapEffect@@QAEXABUD3DXQUATERNION@@@Z ; ioMapEffect::SetWorldOrientation

; 210  : 
; 211  : 				pChainWeapon->SetPosition( vCreatorPos );

  00178	8b 4d d4	 mov	 ecx, DWORD PTR _pChainWeapon$[ebp]
  0017b	8d 45 e4	 lea	 eax, DWORD PTR _vCreatorPos$548324[ebp]

; 212  : 			}
; 213  : 		}
; 214  : 		else

  0017e	eb 45		 jmp	 SHORT $LN30@SetChainPo
$LN3@SetChainPo:

; 215  : 			pChainWeapon->SetPosition( pCreator->GetMidPositionByRate() );

  00180	b8 05 00 00 00	 mov	 eax, 5
  00185	8b c8		 mov	 ecx, eax
  00187	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  0018c	89 4d d4	 mov	 DWORD PTR tv352[ebp], ecx
  0018f	db 45 d4	 fild	 DWORD PTR tv352[ebp]
  00192	85 c9		 test	 ecx, ecx
  00194	79 06		 jns	 SHORT $LN28@SetChainPo
  00196	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN28@SetChainPo:
  0019c	89 45 d4	 mov	 DWORD PTR tv348[ebp], eax
  0019f	db 45 d4	 fild	 DWORD PTR tv348[ebp]
  001a2	85 c0		 test	 eax, eax
  001a4	79 06		 jns	 SHORT $LN29@SetChainPo
  001a6	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN29@SetChainPo:
  001ac	de f9		 fdivp	 ST(1), ST(0)
  001ae	51		 push	 ecx
  001af	8d 45 f0	 lea	 eax, DWORD PTR $T548329[ebp]
  001b2	8b cf		 mov	 ecx, edi
  001b4	d9 5d d4	 fstp	 DWORD PTR tv344[ebp]
  001b7	d9 45 d4	 fld	 DWORD PTR tv344[ebp]
  001ba	d9 1c 24	 fstp	 DWORD PTR [esp]
  001bd	50		 push	 eax
  001be	e8 00 00 00 00	 call	 ?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z ; ioGameEntity::GetMidPositionByRate
  001c3	8b cb		 mov	 ecx, ebx
$LN30@SetChainPo:
  001c5	50		 push	 eax
  001c6	e8 00 00 00 00	 call	 ?SetPosition@ioWeapon@@QAEXABUD3DXVECTOR3@@@Z ; ioWeapon::SetPosition
$LN25@SetChainPo:
  001cb	5f		 pop	 edi
$LN1@SetChainPo:

; 216  : 	}	
; 217  : }

  001cc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001cf	5e		 pop	 esi
  001d0	33 cd		 xor	 ecx, ebp
  001d2	5b		 pop	 ebx
  001d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d8	c9		 leave
  001d9	c2 04 00	 ret	 4
?SetChainPos@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z ENDP ; ioCheckChainBuff2::SetChainPos
_TEXT	ENDS
PUBLIC	?AddOwnerBuff@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z ; ioCheckChainBuff2::AddOwnerBuff
EXTRN	?AddNewBuff@ioBaseChar@@QAEPAVioBuff@@ABVioHashString@@00PAVioSkill@@_N@Z:PROC ; ioBaseChar::AddNewBuff
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$?AddOwnerBuff@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddOwnerBuff@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z$0
__ehfuncinfo$?AddOwnerBuff@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddOwnerBuff@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocheckchainbuff2.cpp
xdata$x	ENDS
;	COMDAT ?AddOwnerBuff@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
$T550451 = -36						; size = 16
tv129 = -20						; size = 4
tv202 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
?AddOwnerBuff@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z PROC ; ioCheckChainBuff2::AddOwnerBuff, COMDAT
; _this$ = ecx

; 240  : {

  00000	6a 18		 push	 24			; 00000018H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?AddOwnerBuff@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 241  : 	if ( !pOwner )

  0000e	33 db		 xor	 ebx, ebx
  00010	39 5d 08	 cmp	 DWORD PTR _pOwner$[ebp], ebx
  00013	74 5f		 je	 SHORT $LN1@AddOwnerBu

; 242  : 		return;
; 243  : 
; 244  : 	int nBuffCnt = (int)m_OwnerBuffList.size();

  00015	8b 86 74 09 00
	00		 mov	 eax, DWORD PTR [esi+2420]
  0001b	2b 86 70 09 00
	00		 sub	 eax, DWORD PTR [esi+2416]
  00021	c1 f8 04	 sar	 eax, 4

; 245  : 	for ( int i=0; i<nBuffCnt; i++ )

  00024	3b c3		 cmp	 eax, ebx
  00026	7e 4c		 jle	 SHORT $LN1@AddOwnerBu

; 242  : 		return;
; 243  : 
; 244  : 	int nBuffCnt = (int)m_OwnerBuffList.size();

  00028	8d be 88 02 00
	00		 lea	 edi, DWORD PTR [esi+648]
  0002e	89 5d f0	 mov	 DWORD PTR tv202[ebp], ebx
  00031	89 45 ec	 mov	 DWORD PTR tv129[ebp], eax
$LL3@AddOwnerBu:

; 246  : 		pOwner->AddNewBuff( m_OwnerBuffList[i], GetCreatorName(), "", NULL );

  00034	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00039	8d 4d dc	 lea	 ecx, DWORD PTR $T550451[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  00042	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  00045	53		 push	 ebx
  00046	53		 push	 ebx
  00047	8d 45 dc	 lea	 eax, DWORD PTR $T550451[ebp]
  0004a	50		 push	 eax
  0004b	8b 86 70 09 00
	00		 mov	 eax, DWORD PTR [esi+2416]
  00051	03 45 f0	 add	 eax, DWORD PTR tv202[ebp]
  00054	57		 push	 edi
  00055	50		 push	 eax
  00056	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00059	e8 00 00 00 00	 call	 ?AddNewBuff@ioBaseChar@@QAEPAVioBuff@@ABVioHashString@@00PAVioSkill@@_N@Z ; ioBaseChar::AddNewBuff
  0005e	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00062	8d 4d dc	 lea	 ecx, DWORD PTR $T550451[ebp]
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0006b	83 45 f0 10	 add	 DWORD PTR tv202[ebp], 16 ; 00000010H
  0006f	ff 4d ec	 dec	 DWORD PTR tv129[ebp]
  00072	75 c0		 jne	 SHORT $LL3@AddOwnerBu
$LN1@AddOwnerBu:

; 247  : }

  00074	e8 00 00 00 00	 call	 __EH_epilog3
  00079	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddOwnerBuff@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR $T550451[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?AddOwnerBuff@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddOwnerBuff@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddOwnerBuff@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z ENDP ; ioCheckChainBuff2::AddOwnerBuff
PUBLIC	?RemoveOwnerBuff@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z ; ioCheckChainBuff2::RemoveOwnerBuff
EXTRN	?GetBuff@ioBaseChar@@QAEPAVioBuff@@ABVioHashString@@0@Z:PROC ; ioBaseChar::GetBuff
; Function compile flags: /Ogsp
;	COMDAT ?RemoveOwnerBuff@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
tv93 = -4						; size = 4
_pOwner$ = 8						; size = 4
?RemoveOwnerBuff@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z PROC ; ioCheckChainBuff2::RemoveOwnerBuff, COMDAT
; _this$ = ecx

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 251  : 	if ( !pOwner )

  00005	33 db		 xor	 ebx, ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	39 5d 08	 cmp	 DWORD PTR _pOwner$[ebp], ebx
  0000d	74 43		 je	 SHORT $LN2@RemoveOwne

; 252  : 		return;
; 253  : 
; 254  : 	int nBuffCnt = (int)m_OwnerBuffList.size();

  0000f	8b 86 74 09 00
	00		 mov	 eax, DWORD PTR [esi+2420]
  00015	2b 86 70 09 00
	00		 sub	 eax, DWORD PTR [esi+2416]
  0001b	c1 f8 04	 sar	 eax, 4

; 255  : 	for ( int i=0; i<nBuffCnt; i++ )

  0001e	3b c3		 cmp	 eax, ebx
  00020	7e 30		 jle	 SHORT $LN2@RemoveOwne

; 252  : 		return;
; 253  : 
; 254  : 	int nBuffCnt = (int)m_OwnerBuffList.size();

  00022	57		 push	 edi
  00023	8d be 88 02 00
	00		 lea	 edi, DWORD PTR [esi+648]
  00029	89 45 fc	 mov	 DWORD PTR tv93[ebp], eax
$LL16@RemoveOwne:

; 255  : 	for ( int i=0; i<nBuffCnt; i++ )

  0002c	8b 86 70 09 00
	00		 mov	 eax, DWORD PTR [esi+2416]

; 256  : 	{
; 257  : 		ioBuff *pRemoveBuff = pOwner->GetBuff( m_OwnerBuffList[i], GetCreatorName() );

  00032	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  00035	03 c3		 add	 eax, ebx
  00037	57		 push	 edi
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?GetBuff@ioBaseChar@@QAEPAVioBuff@@ABVioHashString@@0@Z ; ioBaseChar::GetBuff

; 258  : 		if ( pRemoveBuff )

  0003e	85 c0		 test	 eax, eax
  00040	74 07		 je	 SHORT $LN3@RemoveOwne

; 259  : 			pRemoveBuff->SetReserveEndBuff();

  00042	8b c8		 mov	 ecx, eax
  00044	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff
$LN3@RemoveOwne:

; 255  : 	for ( int i=0; i<nBuffCnt; i++ )

  00049	83 c3 10	 add	 ebx, 16			; 00000010H
  0004c	ff 4d fc	 dec	 DWORD PTR tv93[ebp]
  0004f	75 db		 jne	 SHORT $LL16@RemoveOwne
  00051	5f		 pop	 edi
$LN2@RemoveOwne:
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx

; 260  : 	}
; 261  : }

  00054	c9		 leave
  00055	c2 04 00	 ret	 4
?RemoveOwnerBuff@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z ENDP ; ioCheckChainBuff2::RemoveOwnerBuff
_TEXT	ENDS
PUBLIC	?CheckDist@ioCheckChainBuff2@@IAE_NPAVioBaseChar@@0@Z ; ioCheckChainBuff2::CheckDist
; Function compile flags: /Ogsp
;	COMDAT ?CheckDist@ioCheckChainBuff2@@IAE_NPAVioBaseChar@@0@Z
_TEXT	SEGMENT
_pCreator$ = 8						; size = 4
_pOwner$ = 12						; size = 4
?CheckDist@ioCheckChainBuff2@@IAE_NPAVioBaseChar@@0@Z PROC ; ioCheckChainBuff2::CheckDist, COMDAT
; _this$ = ecx

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 288  : 	if ( !pCreator || !pOwner )

  00005	8b 7d 08	 mov	 edi, DWORD PTR _pCreator$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	0f 84 a4 00 00
	00		 je	 $LN2@CheckDist
  00012	8b 4d 0c	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  00015	85 c9		 test	 ecx, ecx
  00017	0f 84 99 00 00
	00		 je	 $LN2@CheckDist

; 290  : 
; 291  : 	D3DXVECTOR3 vDiff = pCreator->GetWorldPosition() - pOwner->GetWorldPosition();

  0001d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001f	56		 push	 esi
  00020	ff 50 70	 call	 DWORD PTR [eax+112]
  00023	8b f0		 mov	 esi, eax
  00025	8b 07		 mov	 eax, DWORD PTR [edi]
  00027	8b cf		 mov	 ecx, edi
  00029	ff 50 70	 call	 DWORD PTR [eax+112]
  0002c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00030	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
  00034	f3 0f 10 56 04	 movss	 xmm2, DWORD PTR [esi+4]
  00039	f3 0f 10 5e 08	 movss	 xmm3, DWORD PTR [esi+8]
  0003e	0f 5a c9	 cvtps2pd xmm1, xmm1
  00041	0f 5a c0	 cvtps2pd xmm0, xmm0
  00044	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00048	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0004d	0f 5a d2	 cvtps2pd xmm2, xmm2
  00050	0f 5a c9	 cvtps2pd xmm1, xmm1
  00053	f2 0f 5c ca	 subsd	 xmm1, xmm2
  00057	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  0005c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00060	0f 5a d2	 cvtps2pd xmm2, xmm2
  00063	0f 5a db	 cvtps2pd xmm3, xmm3
  00066	f2 0f 5c d3	 subsd	 xmm2, xmm3

; 292  : 	if ( D3DXVec3LengthSq( &vDiff ) >= m_fCheckDist * m_fCheckDist )

  0006a	f3 0f 10 9b 9c
	09 00 00	 movss	 xmm3, DWORD PTR [ebx+2460]
  00072	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  00076	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0007a	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0007e	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  00082	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  00086	f2 0f 59 c9	 mulsd	 xmm1, xmm1
  0008a	f2 0f 58 c8	 addsd	 xmm1, xmm0
  0008e	f3 0f 5a d2	 cvtss2sd xmm2, xmm2
  00092	f2 0f 59 d2	 mulsd	 xmm2, xmm2
  00096	0f 57 c0	 xorps	 xmm0, xmm0
  00099	f2 0f 58 ca	 addsd	 xmm1, xmm2
  0009d	0f 5a db	 cvtps2pd xmm3, xmm3
  000a0	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  000a4	0f 5a c0	 cvtps2pd xmm0, xmm0
  000a7	f2 0f 59 db	 mulsd	 xmm3, xmm3
  000ab	66 0f 2f c3	 comisd	 xmm0, xmm3
  000af	5e		 pop	 esi

; 293  : 		return false;

  000b0	73 04		 jae	 SHORT $LN2@CheckDist

; 294  : 
; 295  : 	return true;

  000b2	b0 01		 mov	 al, 1
  000b4	eb 02		 jmp	 SHORT $LN4@CheckDist
$LN2@CheckDist:

; 289  : 		return false;

  000b6	32 c0		 xor	 al, al
$LN4@CheckDist:
  000b8	5f		 pop	 edi
  000b9	5b		 pop	 ebx

; 296  : }

  000ba	5d		 pop	 ebp
  000bb	c2 08 00	 ret	 8
?CheckDist@ioCheckChainBuff2@@IAE_NPAVioBaseChar@@0@Z ENDP ; ioCheckChainBuff2::CheckDist
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0N@@ioINILoader@@QAEHAAY0N@$$CBDH@Z ; ioINILoader::LoadInt_e<13>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadInt_e@$0N@@ioINILoader@@QAEHAAY0N@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -24						; size = 13
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0N@@ioINILoader@@QAEHAAY0N@$$CBDH@Z PROC	; ioINILoader::LoadInt_e<13>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 4d 01 00
	00		 je	 $LN96@LoadInt_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 36 01 00
	00		 je	 $LN95@LoadInt_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 1e 01 00
	00		 je	 $LN94@LoadInt_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 07 01 00
	00		 je	 $LN93@LoadInt_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 f0 00 00
	00		 je	 $LN92@LoadInt_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 da 00 00
	00		 je	 $LN91@LoadInt_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 c4 00 00
	00		 je	 $LN90@LoadInt_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 ad 00 00
	00		 je	 $LN89@LoadInt_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 96 00 00
	00		 je	 $LN88@LoadInt_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 80 00 00
	00		 je	 $LN87@LoadInt_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	74 6e		 je	 SHORT $LN86@LoadInt_e
  000c5	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000c8	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cb	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000ce	84 d2		 test	 dl, dl
  000d0	74 5b		 je	 SHORT $LN85@LoadInt_e
  000d2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	0f 84 8f 00 00
	00		 je	 $LN1@LoadInt_e
  000e2	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000e5	84 d2		 test	 dl, dl
  000e7	74 3f		 je	 SHORT $LN83@LoadInt_e
  000e9	32 d1		 xor	 dl, cl
  000eb	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000ee	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f1	84 d2		 test	 dl, dl
  000f3	74 2d		 je	 SHORT $LN82@LoadInt_e
  000f5	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000f8	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  000fb	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  000fe	84 d2		 test	 dl, dl
  00100	74 1a		 je	 SHORT $LN81@LoadInt_e
  00102	8a 40 10	 mov	 al, BYTE PTR [eax+16]
  00105	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00108	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010b	84 c0		 test	 al, al
  0010d	74 07		 je	 SHORT $LN80@LoadInt_e
  0010f	34 ed		 xor	 al, -19			; ffffffedH
  00111	88 45 f8	 mov	 BYTE PTR __k$[ebp+16], al
  00114	eb 5b		 jmp	 SHORT $LN1@LoadInt_e
$LN80@LoadInt_e:
  00116	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0011a	eb 55		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  0011c	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00120	eb 4f		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  00122	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00126	eb 49		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  00128	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0012b	eb 44		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  0012d	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00131	eb 3e		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  00133	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00137	eb 38		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  00139	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  0013c	eb 33		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  0013e	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00142	eb 2d		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  00144	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00148	eb 27		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  0014a	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0014e	eb 21		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  00150	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  00153	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  00155	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00159	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  0015b	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0015f	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  00161	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00165	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  00167	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0016b	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  0016d	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  00171	6a 03		 push	 3
  00173	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  00176	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+12], 0
  0017a	5a		 pop	 edx
$LL104@LoadInt_e:
  0017b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00181	83 c0 04	 add	 eax, 4
  00184	4a		 dec	 edx
  00185	75 f4		 jne	 SHORT $LL104@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  00187	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0018a	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0018d	50		 push	 eax
  0018e	8b ce		 mov	 ecx, esi
  00190	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00196	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00199	33 cd		 xor	 ecx, ebp
  0019b	5e		 pop	 esi
  0019c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a1	c9		 leave
  001a2	c2 08 00	 ret	 8
??$LoadInt_e@$0N@@ioINILoader@@QAEHAAY0N@$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<13>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z ; ioINILoader::LoadFloat_e<24>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<24>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 45 02 00
	00		 je	 $LN96@LoadFloat_
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 2e 02 00
	00		 je	 $LN95@LoadFloat_
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 16 02 00
	00		 je	 $LN94@LoadFloat_
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 fe 01 00
	00		 je	 $LN93@LoadFloat_
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 e7 01 00
	00		 je	 $LN92@LoadFloat_
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 d1 01 00
	00		 je	 $LN91@LoadFloat_
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 bc 01 00
	00		 je	 $LN90@LoadFloat_
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 a6 01 00
	00		 je	 $LN89@LoadFloat_
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 8f 01 00
	00		 je	 $LN88@LoadFloat_
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 79 01 00
	00		 je	 $LN87@LoadFloat_
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 64 01 00
	00		 je	 $LN86@LoadFloat_
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 4e 01 00
	00		 je	 $LN85@LoadFloat_
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 37 01 00
	00		 je	 $LN84@LoadFloat_
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 21 01 00
	00		 je	 $LN83@LoadFloat_
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 0c 01 00
	00		 je	 $LN82@LoadFloat_
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 f6 00 00
	00		 je	 $LN81@LoadFloat_
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 df 00 00
	00		 je	 $LN80@LoadFloat_
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 c9 00 00
	00		 je	 $LN79@LoadFloat_
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 b4 00 00
	00		 je	 $LN78@LoadFloat_
  0014e	32 d1		 xor	 dl, cl
  00150	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 9e 00 00
	00		 je	 $LN77@LoadFloat_
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 87 00 00
	00		 je	 $LN76@LoadFloat_
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	74 75		 je	 SHORT $LN75@LoadFloat_
  0017c	32 d3		 xor	 dl, bl
  0017e	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00181	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00184	84 d2		 test	 dl, dl
  00186	74 64		 je	 SHORT $LN74@LoadFloat_
  00188	32 d1		 xor	 dl, cl
  0018a	80 78 17 00	 cmp	 BYTE PTR [eax+23], 0
  0018e	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00191	0f 84 d3 00 00
	00		 je	 $LN1@LoadFloat_
  00197	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  0019a	84 d2		 test	 dl, dl
  0019c	74 48		 je	 SHORT $LN72@LoadFloat_
  0019e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001a1	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a4	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001a7	84 d2		 test	 dl, dl
  001a9	74 33		 je	 SHORT $LN71@LoadFloat_
  001ab	32 d3		 xor	 dl, bl
  001ad	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001b0	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001b3	84 d2		 test	 dl, dl
  001b5	74 1f		 je	 SHORT $LN70@LoadFloat_
  001b7	8a 40 1b	 mov	 al, BYTE PTR [eax+27]
  001ba	32 d1		 xor	 dl, cl
  001bc	88 55 fa	 mov	 BYTE PTR __k$[ebp+26], dl
  001bf	84 c0		 test	 al, al
  001c1	74 0a		 je	 SHORT $LN69@LoadFloat_
  001c3	34 ea		 xor	 al, -22			; ffffffeaH
  001c5	88 45 fb	 mov	 BYTE PTR __k$[ebp+27], al
  001c8	e9 9d 00 00 00	 jmp	 $LN1@LoadFloat_
$LN69@LoadFloat_:
  001cd	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001d1	e9 94 00 00 00	 jmp	 $LN1@LoadFloat_
$LN70@LoadFloat_:
  001d6	88 4d fa	 mov	 BYTE PTR __k$[ebp+26], cl
  001d9	e9 8c 00 00 00	 jmp	 $LN1@LoadFloat_
$LN71@LoadFloat_:
  001de	88 5d f9	 mov	 BYTE PTR __k$[ebp+25], bl
  001e1	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_
$LN72@LoadFloat_:
  001e6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ea	eb 7e		 jmp	 SHORT $LN1@LoadFloat_
$LN74@LoadFloat_:
  001ec	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001ef	eb 79		 jmp	 SHORT $LN1@LoadFloat_
$LN75@LoadFloat_:
  001f1	88 5d f5	 mov	 BYTE PTR __k$[ebp+21], bl
  001f4	eb 74		 jmp	 SHORT $LN1@LoadFloat_
$LN76@LoadFloat_:
  001f6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001fa	eb 6e		 jmp	 SHORT $LN1@LoadFloat_
$LN77@LoadFloat_:
  001fc	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00200	eb 68		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  00202	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  00205	eb 63		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  00207	88 5d f1	 mov	 BYTE PTR __k$[ebp+17], bl
  0020a	eb 5e		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  0020c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00210	eb 58		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  00212	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00216	eb 52		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  00218	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  0021b	eb 4d		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  0021d	88 5d ed	 mov	 BYTE PTR __k$[ebp+13], bl
  00220	eb 48		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  00222	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00226	eb 42		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  00228	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0022c	eb 3c		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  0022e	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00231	eb 37		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  00233	88 5d e9	 mov	 BYTE PTR __k$[ebp+9], bl
  00236	eb 32		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  00238	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0023c	eb 2c		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  0023e	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00242	eb 26		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  00244	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00247	eb 21		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  00249	88 5d e5	 mov	 BYTE PTR __k$[ebp+5], bl
  0024c	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  0024e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00252	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  00254	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00258	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  0025a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0025e	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  00260	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00264	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  00266	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  0026a	6a 05		 push	 5
  0026c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0026f	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+23], 0
  00273	5a		 pop	 edx
$LL104@LoadFloat_:
  00274	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0027a	83 c0 04	 add	 eax, 4
  0027d	4a		 dec	 edx
  0027e	75 f4		 jne	 SHORT $LL104@LoadFloat_
  00280	6a 14		 push	 20			; 00000014H
  00282	58		 pop	 eax
$LL101@LoadFloat_:
  00283	8b c8		 mov	 ecx, eax
  00285	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0028b	79 05		 jns	 SHORT $LN111@LoadFloat_
  0028d	49		 dec	 ecx
  0028e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00291	41		 inc	 ecx
$LN111@LoadFloat_:
  00292	b2 ed		 mov	 dl, -19			; ffffffedH
  00294	2a d1		 sub	 dl, cl
  00296	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  0029a	40		 inc	 eax
  0029b	83 f8 17	 cmp	 eax, 23			; 00000017H
  0029e	7c e3		 jl	 SHORT $LL101@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  002a0	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  002a5	51		 push	 ecx
  002a6	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  002a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ae	50		 push	 eax
  002af	8b ce		 mov	 ecx, esi
  002b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  002b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ba	5e		 pop	 esi
  002bb	33 cd		 xor	 ecx, ebp
  002bd	5b		 pop	 ebx
  002be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c3	c9		 leave
  002c4	c2 08 00	 ret	 8
??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<24>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0P@@ioINILoader@@QAEHAAY0P@$$CBDH@Z ; ioINILoader::LoadInt_e<15>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0P@@ioINILoader@@QAEHAAY0P@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0P@@ioINILoader@@QAEHAAY0P@$$CBDH@Z PROC	; ioINILoader::LoadInt_e<15>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 75 01 00
	00		 je	 $LN96@LoadInt_e@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 5e 01 00
	00		 je	 $LN95@LoadInt_e@2
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 46 01 00
	00		 je	 $LN94@LoadInt_e@2
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 2f 01 00
	00		 je	 $LN93@LoadInt_e@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 18 01 00
	00		 je	 $LN92@LoadInt_e@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 02 01 00
	00		 je	 $LN91@LoadInt_e@2
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 ec 00 00
	00		 je	 $LN90@LoadInt_e@2
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 d5 00 00
	00		 je	 $LN89@LoadInt_e@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 be 00 00
	00		 je	 $LN88@LoadInt_e@2
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 a8 00 00
	00		 je	 $LN87@LoadInt_e@2
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 92 00 00
	00		 je	 $LN86@LoadInt_e@2
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 7f		 je	 SHORT $LN85@LoadInt_e@2
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 6c		 je	 SHORT $LN84@LoadInt_e@2
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000e9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000ec	84 d2		 test	 dl, dl
  000ee	74 5a		 je	 SHORT $LN83@LoadInt_e@2
  000f0	32 d1		 xor	 dl, cl
  000f2	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000f6	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000f9	0f 84 9a 00 00
	00		 je	 $LN1@LoadInt_e@2
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 3e		 je	 SHORT $LN81@LoadInt_e@2
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 2b		 je	 SHORT $LN80@LoadInt_e@2
  00113	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00116	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00119	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0011c	84 d2		 test	 dl, dl
  0011e	74 19		 je	 SHORT $LN79@LoadInt_e@2
  00120	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  00123	32 d1		 xor	 dl, cl
  00125	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00128	84 c0		 test	 al, al
  0012a	74 07		 je	 SHORT $LN78@LoadInt_e@2
  0012c	34 eb		 xor	 al, -21			; ffffffebH
  0012e	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00131	eb 66		 jmp	 SHORT $LN1@LoadInt_e@2
$LN78@LoadInt_e@2:
  00133	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00137	eb 60		 jmp	 SHORT $LN1@LoadInt_e@2
$LN79@LoadInt_e@2:
  00139	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  0013c	eb 5b		 jmp	 SHORT $LN1@LoadInt_e@2
$LN80@LoadInt_e@2:
  0013e	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00142	eb 55		 jmp	 SHORT $LN1@LoadInt_e@2
$LN81@LoadInt_e@2:
  00144	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00148	eb 4f		 jmp	 SHORT $LN1@LoadInt_e@2
$LN83@LoadInt_e@2:
  0014a	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0014d	eb 4a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN84@LoadInt_e@2:
  0014f	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00153	eb 44		 jmp	 SHORT $LN1@LoadInt_e@2
$LN85@LoadInt_e@2:
  00155	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00159	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN86@LoadInt_e@2:
  0015b	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0015f	eb 38		 jmp	 SHORT $LN1@LoadInt_e@2
$LN87@LoadInt_e@2:
  00161	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  00164	eb 33		 jmp	 SHORT $LN1@LoadInt_e@2
$LN88@LoadInt_e@2:
  00166	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0016a	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@2
$LN89@LoadInt_e@2:
  0016c	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00170	eb 27		 jmp	 SHORT $LN1@LoadInt_e@2
$LN90@LoadInt_e@2:
  00172	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00176	eb 21		 jmp	 SHORT $LN1@LoadInt_e@2
$LN91@LoadInt_e@2:
  00178	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  0017b	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN92@LoadInt_e@2:
  0017d	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00181	eb 16		 jmp	 SHORT $LN1@LoadInt_e@2
$LN93@LoadInt_e@2:
  00183	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00187	eb 10		 jmp	 SHORT $LN1@LoadInt_e@2
$LN94@LoadInt_e@2:
  00189	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0018d	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN95@LoadInt_e@2:
  0018f	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00193	eb 04		 jmp	 SHORT $LN1@LoadInt_e@2
$LN96@LoadInt_e@2:
  00195	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@2:
  00199	6a 03		 push	 3
  0019b	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0019e	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001a2	5a		 pop	 edx
$LL104@LoadInt_e@2:
  001a3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a9	83 c0 04	 add	 eax, 4
  001ac	4a		 dec	 edx
  001ad	75 f4		 jne	 SHORT $LL104@LoadInt_e@2
  001af	6a 0c		 push	 12			; 0000000cH
  001b1	58		 pop	 eax
$LL101@LoadInt_e@2:
  001b2	8b c8		 mov	 ecx, eax
  001b4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001ba	79 05		 jns	 SHORT $LN111@LoadInt_e@2
  001bc	49		 dec	 ecx
  001bd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c0	41		 inc	 ecx
$LN111@LoadInt_e@2:
  001c1	b2 ed		 mov	 dl, -19			; ffffffedH
  001c3	2a d1		 sub	 dl, cl
  001c5	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001c9	40		 inc	 eax
  001ca	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001cd	7c e3		 jl	 SHORT $LL101@LoadInt_e@2

; 120  : 		return LoadInt(_k, i);

  001cf	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001d2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001d5	50		 push	 eax
  001d6	8b ce		 mov	 ecx, esi
  001d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  001de	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e1	33 cd		 xor	 ecx, ebp
  001e3	5e		 pop	 esi
  001e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e9	c9		 leave
  001ea	c2 08 00	 ret	 8
??$LoadInt_e@$0P@@ioINILoader@@QAEHAAY0P@$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<15>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z ; ioINILoader::LoadFloat_e<11>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -20						; size = 11
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<11>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 24 01 00
	00		 je	 $LN96@LoadFloat_@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 0d 01 00
	00		 je	 $LN95@LoadFloat_@2
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 f6 00 00
	00		 je	 $LN94@LoadFloat_@2
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 df 00 00
	00		 je	 $LN93@LoadFloat_@2
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 c8 00 00
	00		 je	 $LN92@LoadFloat_@2
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	0f 84 b1 00 00
	00		 je	 $LN91@LoadFloat_@2
  00075	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00078	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 9a 00 00
	00		 je	 $LN90@LoadFloat_@2
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 83 00 00
	00		 je	 $LN89@LoadFloat_@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	74 70		 je	 SHORT $LN88@LoadFloat_@2
  000a4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a7	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000aa	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ad	84 d2		 test	 dl, dl
  000af	74 5d		 je	 SHORT $LN87@LoadFloat_@2
  000b1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b4	80 78 0a 00	 cmp	 BYTE PTR [eax+10], 0
  000b8	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bb	0f 84 87 00 00
	00		 je	 $LN1@LoadFloat_@2
  000c1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c4	84 d2		 test	 dl, dl
  000c6	74 40		 je	 SHORT $LN85@LoadFloat_@2
  000c8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000cb	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000ce	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d1	84 d2		 test	 dl, dl
  000d3	74 2d		 je	 SHORT $LN84@LoadFloat_@2
  000d5	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d8	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000db	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000de	84 d2		 test	 dl, dl
  000e0	74 1a		 je	 SHORT $LN83@LoadFloat_@2
  000e2	8a 40 0e	 mov	 al, BYTE PTR [eax+14]
  000e5	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e8	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000eb	84 c0		 test	 al, al
  000ed	74 07		 je	 SHORT $LN82@LoadFloat_@2
  000ef	34 eb		 xor	 al, -21			; ffffffebH
  000f1	88 45 fa	 mov	 BYTE PTR __k$[ebp+14], al
  000f4	eb 52		 jmp	 SHORT $LN1@LoadFloat_@2
$LN82@LoadFloat_@2:
  000f6	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  000fa	eb 4c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN83@LoadFloat_@2:
  000fc	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00100	eb 46		 jmp	 SHORT $LN1@LoadFloat_@2
$LN84@LoadFloat_@2:
  00102	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00106	eb 40		 jmp	 SHORT $LN1@LoadFloat_@2
$LN85@LoadFloat_@2:
  00108	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0010c	eb 3a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN87@LoadFloat_@2:
  0010e	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00112	eb 34		 jmp	 SHORT $LN1@LoadFloat_@2
$LN88@LoadFloat_@2:
  00114	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00118	eb 2e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN89@LoadFloat_@2:
  0011a	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0011e	eb 28		 jmp	 SHORT $LN1@LoadFloat_@2
$LN90@LoadFloat_@2:
  00120	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00124	eb 22		 jmp	 SHORT $LN1@LoadFloat_@2
$LN91@LoadFloat_@2:
  00126	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0012a	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN92@LoadFloat_@2:
  0012c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00130	eb 16		 jmp	 SHORT $LN1@LoadFloat_@2
$LN93@LoadFloat_@2:
  00132	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00136	eb 10		 jmp	 SHORT $LN1@LoadFloat_@2
$LN94@LoadFloat_@2:
  00138	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0013c	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN95@LoadFloat_@2:
  0013e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00142	eb 04		 jmp	 SHORT $LN1@LoadFloat_@2
$LN96@LoadFloat_@2:
  00144	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@2:
  00148	6a 02		 push	 2
  0014a	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014d	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+10], 0
  00151	5a		 pop	 edx
$LL104@LoadFloat_@2:
  00152	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00158	83 c0 04	 add	 eax, 4
  0015b	4a		 dec	 edx
  0015c	75 f4		 jne	 SHORT $LL104@LoadFloat_@2
  0015e	6a 08		 push	 8
  00160	58		 pop	 eax
$LL101@LoadFloat_@2:
  00161	8b c8		 mov	 ecx, eax
  00163	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00169	79 05		 jns	 SHORT $LN111@LoadFloat_@2
  0016b	49		 dec	 ecx
  0016c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0016f	41		 inc	 ecx
$LN111@LoadFloat_@2:
  00170	b2 ed		 mov	 dl, -19			; ffffffedH
  00172	2a d1		 sub	 dl, cl
  00174	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  00178	40		 inc	 eax
  00179	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0017c	7c e3		 jl	 SHORT $LL101@LoadFloat_@2

; 137  : 		return LoadFloat(_k, f);

  0017e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00183	51		 push	 ecx
  00184	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00187	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018c	50		 push	 eax
  0018d	8b ce		 mov	 ecx, esi
  0018f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00195	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00198	33 cd		 xor	 ecx, ebp
  0019a	5e		 pop	 esi
  0019b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a0	c9		 leave
  001a1	c2 08 00	 ret	 8
??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<11>
_TEXT	ENDS
PUBLIC	??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z ; std::allocator<ioHashString>::construct<ioHashString &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z$0
__ehfuncinfo$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z
_TEXT	SEGMENT
$T550596 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z PROC ; std::allocator<ioHashString>::construct<ioHashString &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T550596[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 09		 je	 SHORT $LN3@construct
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
$LN3@construct:

; 209  : 		}

  00023	e8 00 00 00 00	 call	 __EH_epilog3
  00028	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T550596[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z ENDP ; std::allocator<ioHashString>::construct<ioHashString &>
PUBLIC	?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z ; std::allocator<ioHashString>::construct
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z$0
__ehfuncinfo$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z
_TEXT	SEGMENT
$T550615 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z PROC ; std::allocator<ioHashString>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T550615[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 09		 je	 SHORT $LN3@construct@2
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
$LN3@construct@2:

; 203  : 		}

  00023	e8 00 00 00 00	 call	 __EH_epilog3
  00028	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T550615[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z ENDP ; std::allocator<ioHashString>::construct
PUBLIC	?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::begin
_TEXT	ENDS
PUBLIC	?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::end
_TEXT	ENDS
PUBLIC	?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::end
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@V?$allocator@VioHashString@@@1@@Z ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::_Vector_val<ioHashString,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@V?$allocator@VioHashString@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@V?$allocator@VioHashString@@@1@@Z PROC ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::_Vector_val<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@V?$allocator@VioHashString@@@1@@Z ENDP ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::_Vector_val<ioHashString,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Make_iter
_TEXT	ENDS
PUBLIC	?max_size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@VioHashString@@@std@@QAEPAVioHashString@@I@Z ; std::allocator<ioHashString>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@VioHashString@@@std@@QAEPAVioHashString@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@VioHashString@@@std@@QAEPAVioHashString@@I@Z PROC ; std::allocator<ioHashString>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ; std::_Allocate<ioHashString>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@VioHashString@@@std@@QAEPAVioHashString@@I@Z ENDP ; std::allocator<ioHashString>::allocate
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator==
_TEXT	ENDS
PUBLIC	??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioHashString *,ioHashString *>
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<ioHashString *,ioHashString *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 11		 jmp	 SHORT $LN11@Move
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000c	56		 push	 esi
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  00013	83 45 10 10	 add	 DWORD PTR __Dest$[ebp], 16 ; 00000010H
  00017	83 c6 10	 add	 esi, 16			; 00000010H
$LN11@Move:

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  0001a	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001d	75 ea		 jne	 SHORT $LL3@Move

; 2515 : 	return (_Dest);

  0001f	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00022	5e		 pop	 esi

; 2516 : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<ioHashString *,ioHashString *>
_TEXT	ENDS
PUBLIC	??$_Destroy@VioHashString@@@std@@YAXPAVioHashString@@@Z ; std::_Destroy<ioHashString>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@VioHashString@@@std@@YAXPAVioHashString@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@VioHashString@@@std@@YAXPAVioHashString@@@Z PROC ; std::_Destroy<ioHashString>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 64   : 	}

  00006	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Destroy@VioHashString@@@std@@YAXPAVioHashString@@@Z ENDP ; std::_Destroy<ioHashString>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@ABV3@@Z ; std::allocator<ioHashString>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@ABV3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@ABV3@@Z PROC ; std::allocator<ioHashString>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@ABV3@@Z ENDP ; std::allocator<ioHashString>::construct
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	__real@00000000
PUBLIC	__$ArrayPad$
PUBLIC	?ProcessBuff@ioCheckChainBuff2@@UAEXM@Z		; ioCheckChainBuff2::ProcessBuff
EXTRN	?CheckCallingAreaWeapon@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingAreaWeapon
EXTRN	?CheckCallingProcess@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingProcess
EXTRN	?CheckSwitchType@ioBuff@@IAE_NM@Z:PROC		; ioBuff::CheckSwitchType
EXTRN	?ProcessBuff@ioBuff@@UAEXM@Z:PROC		; ioBuff::ProcessBuff
;	COMDAT __real@3f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocheckchainbuff2.cpp
CONST	ENDS
;	COMDAT ?ProcessBuff@ioCheckChainBuff2@@UAEXM@Z
_TEXT	SEGMENT
tv403 = -60						; size = 4
$T550754 = -60						; size = 4
tv399 = -56						; size = 4
tv395 = -56						; size = 4
$T550758 = -56						; size = 4
$T548281 = -52						; size = 12
$T548280 = -40						; size = 12
_vCreatorPos$548279 = -28				; size = 12
$T548283 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioCheckChainBuff2@@UAEXM@Z PROC		; ioCheckChainBuff2::ProcessBuff, COMDAT
; _this$ = ecx

; 86   : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b f1		 mov	 esi, ecx

; 87   : 	ioBaseChar *pCreator = GetCreator();

  00014	e8 00 00 00 00	 call	 ?GetCreator@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetCreator
  00019	8b d8		 mov	 ebx, eax

; 88   : 	if ( !m_pOwner || !pCreator )

  0001b	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 b7 01 00
	00		 je	 $LN12@ProcessBuf
  00029	85 db		 test	 ebx, ebx
  0002b	0f 84 af 01 00
	00		 je	 $LN12@ProcessBuf

; 91   : 		return;
; 92   : 	}
; 93   : 
; 94   : 	if ( m_fCheckDist > 0.0f && !CheckDist( pCreator, m_pOwner ) )

  00031	f3 0f 10 86 9c
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2460]
  00039	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00040	76 11		 jbe	 SHORT $LN11@ProcessBuf
  00042	50		 push	 eax
  00043	53		 push	 ebx
  00044	8b ce		 mov	 ecx, esi
  00046	e8 00 00 00 00	 call	 ?CheckDist@ioCheckChainBuff2@@IAE_NPAVioBaseChar@@0@Z ; ioCheckChainBuff2::CheckDist
  0004b	84 c0		 test	 al, al

; 95   : 	{
; 96   : 		SetReserveEndBuff();
; 97   : 		return;

  0004d	0f 84 8d 01 00
	00		 je	 $LN12@ProcessBuf
$LN11@ProcessBuf:

; 98   : 	}
; 99   : 
; 100  : 	switch( m_iOperationType )

  00053	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  00059	83 e8 00	 sub	 eax, 0
  0005c	74 40		 je	 SHORT $LN5@ProcessBuf
  0005e	48		 dec	 eax
  0005f	74 06		 je	 SHORT $LN6@ProcessBuf
  00061	48		 dec	 eax
  00062	74 17		 je	 SHORT $LN8@ProcessBuf
  00064	48		 dec	 eax
  00065	75 3e		 jne	 SHORT $LN9@ProcessBuf
$LN6@ProcessBuf:

; 110  : 	case OT_DELAY:
; 111  : 	case OT_ACTIVE:
; 112  : 		ioBuff::ProcessBuff( fTimePerSec );

  00067	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  0006c	51		 push	 ecx
  0006d	8b ce		 mov	 ecx, esi
  0006f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00074	e8 00 00 00 00	 call	 ?ProcessBuff@ioBuff@@UAEXM@Z ; ioBuff::ProcessBuff

; 113  : 		break;

  00079	eb 2a		 jmp	 SHORT $LN9@ProcessBuf
$LN8@ProcessBuf:

; 101  : 	{
; 102  : 	case OT_SWITCH:
; 103  : 		if( !CheckSwitchType( fTimePerSec ) )

  0007b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00080	51		 push	 ecx
  00081	8b ce		 mov	 ecx, esi
  00083	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00088	e8 00 00 00 00	 call	 ?CheckSwitchType@ioBuff@@IAE_NM@Z ; ioBuff::CheckSwitchType

; 104  : 		{
; 105  : 			SetReserveEndBuff();

  0008d	8b ce		 mov	 ecx, esi
  0008f	84 c0		 test	 al, al

; 106  : 			return;

  00091	0f 84 4b 01 00
	00		 je	 $LN30@ProcessBuf

; 107  : 		}
; 108  : 		CheckCallingProcess();

  00097	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 109  : 		break;

  0009c	eb 07		 jmp	 SHORT $LN9@ProcessBuf
$LN5@ProcessBuf:

; 114  : 	case OT_PASSIVE:
; 115  : 		CheckCallingAreaWeapon();

  0009e	8b ce		 mov	 ecx, esi
  000a0	e8 00 00 00 00	 call	 ?CheckCallingAreaWeapon@ioBuff@@IAEXXZ ; ioBuff::CheckCallingAreaWeapon
$LN9@ProcessBuf:

; 116  : 		break;
; 117  : 	}
; 118  : 	
; 119  : 	switch( m_BuffState )

  000a5	8b 86 a0 09 00
	00		 mov	 eax, DWORD PTR [esi+2464]
  000ab	83 e8 00	 sub	 eax, 0
  000ae	74 19		 je	 SHORT $LN2@ProcessBuf
  000b0	48		 dec	 eax
  000b1	0f 85 30 01 00
	00		 jne	 $LN3@ProcessBuf

; 130  : 	case BS_WAIT:
; 131  : 		SetChainPos( m_pOwner );

  000b7	ff b6 74 02 00
	00		 push	 DWORD PTR [esi+628]
  000bd	8b ce		 mov	 ecx, esi
  000bf	e8 00 00 00 00	 call	 ?SetChainPos@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z ; ioCheckChainBuff2::SetChainPos

; 132  : 		break;

  000c4	e9 1e 01 00 00	 jmp	 $LN3@ProcessBuf
$LN2@ProcessBuf:
  000c9	57		 push	 edi

; 120  : 	{
; 121  : 	case BS_START:
; 122  : 		{
; 123  : 			CreateChain( m_pOwner );

  000ca	ff b6 74 02 00
	00		 push	 DWORD PTR [esi+628]
  000d0	8b ce		 mov	 ecx, esi
  000d2	e8 00 00 00 00	 call	 ?CreateChain@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z ; ioCheckChainBuff2::CreateChain

; 124  : 			AddOwnerBuff( m_pOwner );

  000d7	ff b6 74 02 00
	00		 push	 DWORD PTR [esi+628]
  000dd	8b ce		 mov	 ecx, esi
  000df	e8 00 00 00 00	 call	 ?AddOwnerBuff@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z ; ioCheckChainBuff2::AddOwnerBuff

; 125  : 
; 126  : 			D3DXVECTOR3 vCreatorPos = pCreator->GetMidPositionByRate() + pCreator->GetWorldOrientation() * m_vCreatorEffectOffset;

  000e4	b8 05 00 00 00	 mov	 eax, 5
  000e9	89 45 c4	 mov	 DWORD PTR $T550754[ebp], eax
  000ec	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  000f1	89 45 c8	 mov	 DWORD PTR $T550758[ebp], eax
  000f4	8d 86 90 09 00
	00		 lea	 eax, DWORD PTR [esi+2448]
  000fa	50		 push	 eax
  000fb	8b 03		 mov	 eax, DWORD PTR [ebx]
  000fd	8b cb		 mov	 ecx, ebx
  000ff	ff 50 74	 call	 DWORD PTR [eax+116]
  00102	50		 push	 eax
  00103	8d 45 cc	 lea	 eax, DWORD PTR $T548281[ebp]
  00106	50		 push	 eax
  00107	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  0010d	db 45 c4	 fild	 DWORD PTR $T550754[ebp]
  00110	8b f8		 mov	 edi, eax
  00112	8b 45 c4	 mov	 eax, DWORD PTR $T550754[ebp]
  00115	85 c0		 test	 eax, eax
  00117	79 06		 jns	 SHORT $LN28@ProcessBuf
  00119	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN28@ProcessBuf:
  0011f	8b 45 c8	 mov	 eax, DWORD PTR $T550758[ebp]
  00122	db 45 c8	 fild	 DWORD PTR $T550758[ebp]
  00125	85 c0		 test	 eax, eax
  00127	79 06		 jns	 SHORT $LN29@ProcessBuf
  00129	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN29@ProcessBuf:
  0012f	de f9		 fdivp	 ST(1), ST(0)
  00131	83 c4 08	 add	 esp, 8
  00134	8d 45 d8	 lea	 eax, DWORD PTR $T548280[ebp]
  00137	8b cb		 mov	 ecx, ebx
  00139	d9 5d c8	 fstp	 DWORD PTR tv395[ebp]
  0013c	d9 45 c8	 fld	 DWORD PTR tv395[ebp]
  0013f	d9 1c 24	 fstp	 DWORD PTR [esp]
  00142	50		 push	 eax
  00143	e8 00 00 00 00	 call	 ?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z ; ioGameEntity::GetMidPositionByRate
  00148	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0014d	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  00152	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00157	f3 0f 10 18	 movss	 xmm3, DWORD PTR [eax]

; 127  : 			m_dwCreatorEffectID = CreateEffect( m_pOwner->GetCreator(), m_szCreatorEffect, vCreatorPos, D3DXVECTOR3(1.0f,1.0f,1.0f) );

  0015b	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  00161	0f 5a c9	 cvtps2pd xmm1, xmm1
  00164	0f 5a c0	 cvtps2pd xmm0, xmm0
  00167	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0016b	f3 0f 10 4f 08	 movss	 xmm1, DWORD PTR [edi+8]
  00170	0f 5a d2	 cvtps2pd xmm2, xmm2
  00173	0f 5a c9	 cvtps2pd xmm1, xmm1
  00176	f2 0f 58 ca	 addsd	 xmm1, xmm2
  0017a	f3 0f 10 17	 movss	 xmm2, DWORD PTR [edi]
  0017e	8d 4d f0	 lea	 ecx, DWORD PTR $T548283[ebp]
  00181	51		 push	 ecx
  00182	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00186	0f 5a d2	 cvtps2pd xmm2, xmm2
  00189	8d 4d e4	 lea	 ecx, DWORD PTR _vCreatorPos$548279[ebp]
  0018c	51		 push	 ecx
  0018d	0f 5a db	 cvtps2pd xmm3, xmm3
  00190	f3 0f 11 45 e8	 movss	 DWORD PTR _vCreatorPos$548279[ebp+4], xmm0
  00195	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0019d	f2 0f 58 d3	 addsd	 xmm2, xmm3
  001a1	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  001a5	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  001a9	8d 8e 80 09 00
	00		 lea	 ecx, DWORD PTR [esi+2432]
  001af	f3 0f 11 55 e4	 movss	 DWORD PTR _vCreatorPos$548279[ebp], xmm2
  001b4	f3 0f 11 4d ec	 movss	 DWORD PTR _vCreatorPos$548279[ebp+8], xmm1
  001b9	f3 0f 11 45 f0	 movss	 DWORD PTR $T548283[ebp], xmm0
  001be	f3 0f 11 45 f4	 movss	 DWORD PTR $T548283[ebp+4], xmm0
  001c3	f3 0f 11 45 f8	 movss	 DWORD PTR $T548283[ebp+8], xmm0
  001c8	8b 80 44 03 00
	00		 mov	 eax, DWORD PTR [eax+836]
  001ce	51		 push	 ecx
  001cf	50		 push	 eax
  001d0	8b ce		 mov	 ecx, esi
  001d2	e8 00 00 00 00	 call	 ?CreateEffect@ioCheckChainBuff2@@IAEKPAVioPlayStage@@AAVioHashString@@AAUD3DXVECTOR3@@2@Z ; ioCheckChainBuff2::CreateEffect
  001d7	89 86 a8 09 00
	00		 mov	 DWORD PTR [esi+2472], eax
  001dd	5f		 pop	 edi

; 128  : 		}
; 129  : 		break;

  001de	eb 07		 jmp	 SHORT $LN3@ProcessBuf
$LN12@ProcessBuf:

; 89   : 	{
; 90   : 		SetReserveEndBuff();

  001e0	8b ce		 mov	 ecx, esi
$LN30@ProcessBuf:
  001e2	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff
$LN3@ProcessBuf:

; 133  : 	}
; 134  : }

  001e7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ea	5e		 pop	 esi
  001eb	33 cd		 xor	 ecx, ebp
  001ed	5b		 pop	 ebx
  001ee	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f3	c9		 leave
  001f4	c2 04 00	 ret	 4
?ProcessBuff@ioCheckChainBuff2@@UAEXM@Z ENDP		; ioCheckChainBuff2::ProcessBuff
_TEXT	ENDS
PUBLIC	?SetEndState@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z ; ioCheckChainBuff2::SetEndState
; Function compile flags: /Ogsp
;	COMDAT ?SetEndState@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?SetEndState@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z PROC ; ioCheckChainBuff2::SetEndState, COMDAT
; _this$ = ecx

; 222  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 223  : 	if ( !pOwner )

  00005	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	74 40		 je	 SHORT $LN4@SetEndStat

; 224  : 		return;
; 225  : 
; 226  : 	if ( m_dwChainWeaponIndex != -1)

  0000e	8b 86 a4 09 00
	00		 mov	 eax, DWORD PTR [esi+2468]
  00014	83 f8 ff	 cmp	 eax, -1
  00017	74 19		 je	 SHORT $LN1@SetEndStat

; 227  : 	{
; 228  : 		ioWeapon *pWeapon = g_WeaponMgr.FindWeapon( pOwner, m_dwChainWeaponIndex );

  00019	50		 push	 eax
  0001a	57		 push	 edi
  0001b	e8 00 00 00 00	 call	 ?GetSingleton@ioWeaponManager@@SAAAV1@XZ ; ioWeaponManager::GetSingleton
  00020	8b c8		 mov	 ecx, eax
  00022	e8 00 00 00 00	 call	 ?FindWeapon@ioWeaponManager@@QAEPAVioWeapon@@PAVioBaseChar@@K@Z ; ioWeaponManager::FindWeapon

; 229  : 		if ( pWeapon )

  00027	85 c0		 test	 eax, eax
  00029	74 07		 je	 SHORT $LN1@SetEndStat

; 230  : 			pWeapon->SetWeaponDead();

  0002b	8b 10		 mov	 edx, DWORD PTR [eax]
  0002d	8b c8		 mov	 ecx, eax
  0002f	ff 52 4c	 call	 DWORD PTR [edx+76]
$LN1@SetEndStat:

; 231  : 	}
; 232  : 	
; 233  : 	DestroyEffect( pOwner->GetCreator(), m_dwCreatorEffectID );

  00032	8d 86 a8 09 00
	00		 lea	 eax, DWORD PTR [esi+2472]
  00038	50		 push	 eax
  00039	ff b7 44 03 00
	00		 push	 DWORD PTR [edi+836]
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?DestroyEffect@ioCheckChainBuff2@@IAEXPAVioPlayStage@@AAK@Z ; ioCheckChainBuff2::DestroyEffect

; 234  : 	RemoveOwnerBuff( pOwner );

  00046	57		 push	 edi
  00047	8b ce		 mov	 ecx, esi
  00049	e8 00 00 00 00	 call	 ?RemoveOwnerBuff@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z ; ioCheckChainBuff2::RemoveOwnerBuff
$LN4@SetEndStat:
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi

; 235  : }

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?SetEndState@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z ENDP ; ioCheckChainBuff2::SetEndState
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Grow_to
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 0f	 mov	 edx, 268435455		; 0fffffffH
  0000d	c1 f8 04	 sar	 eax, 4
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00023	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Grow_to
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@AAV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@AAV2@@Z ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@AAV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@AAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@AAV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@AAV2@@Z PROC ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  0000c	e8 00 00 00 00	 call	 ??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z ; std::allocator<ioHashString>::construct<ioHashString &>

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@AAV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@AAV2@@Z ENDP ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@V3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@$$QAV2@@Z ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@V3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@$$QAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@V3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@$$QAV2@@Z PROC ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  0000c	e8 00 00 00 00	 call	 ?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z ; std::allocator<ioHashString>::construct

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@V3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@$$QAV2@@Z ENDP ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString>
_TEXT	ENDS
PUBLIC	??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Buy
; Function compile flags: /Ogsp
;	COMDAT ?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy
$LN4@Buy:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff ff ff ff
	0f		 cmp	 edi, 268435455		; 0fffffffH
  00022	76 0b		 jbe	 SHORT $LN2@Buy

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy:
$LN2@Buy:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ; std::_Allocate<ioHashString>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	c1 e7 04	 shl	 edi, 4
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy:
?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Buy
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00@Z ; std::_Move<ioHashString *,ioHashString *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00@Z
_TEXT	SEGMENT
__Cat$550883 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00@Z PROC ; std::_Move<ioHashString *,ioHashString *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$550883[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioHashString *,ioHashString *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00@Z ENDP ; std::_Move<ioHashString *,ioHashString *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@@Z ; std::allocator<ioHashString>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@@Z PROC ; std::allocator<ioHashString>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 214  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?destroy@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@@Z ENDP ; std::allocator<ioHashString>::destroy
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@ABV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@ABV2@@Z ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@ABV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@ABV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@ABV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@ABV2@@Z PROC ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@ABV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@ABV2@@Z ENDP ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString const &>
_TEXT	ENDS
PUBLIC	?EndBuff@ioCheckChainBuff2@@UAEXXZ		; ioCheckChainBuff2::EndBuff
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocheckchainbuff2.cpp
;	COMDAT ?EndBuff@ioCheckChainBuff2@@UAEXXZ
_TEXT	SEGMENT
?EndBuff@ioCheckChainBuff2@@UAEXXZ PROC			; ioCheckChainBuff2::EndBuff, COMDAT
; _this$ = ecx

; 137  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 138  : 	SetEndState( m_pOwner );

  00003	ff b6 74 02 00
	00		 push	 DWORD PTR [esi+628]
  00009	e8 00 00 00 00	 call	 ?SetEndState@ioCheckChainBuff2@@IAEXPAVioBaseChar@@@Z ; ioCheckChainBuff2::SetEndState

; 139  : 
; 140  : 	ioBuff::EndBuff();

  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	e9 00 00 00 00	 jmp	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff
?EndBuff@ioCheckChainBuff2@@UAEXXZ ENDP			; ioCheckChainBuff2::EndBuff
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@VioHashString@@@std@@VioHashString@@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@@Z ; std::_Dest_val<std::allocator<ioHashString>,ioHashString>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@VioHashString@@@std@@VioHashString@@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@VioHashString@@@std@@VioHashString@@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@@Z PROC ; std::_Dest_val<std::allocator<ioHashString>,ioHashString>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]

; 288  : 	}

  00006	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Dest_val@V?$allocator@VioHashString@@@std@@VioHashString@@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@@Z ENDP ; std::_Dest_val<std::allocator<ioHashString>,ioHashString>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioHashString *,ioHashString *,std::allocator<ioHashString>,ioHashString>
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ioHashString *,ioHashString *,std::allocator<ioHashString>,ioHashString>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 428  : 
; 429  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00016	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LL6@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	74 33		 je	 SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  0001e	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00021	56		 push	 esi
  00022	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00025	e8 00 00 00 00	 call	 ?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z ; std::allocator<ioHashString>::construct
  0002a	83 45 10 10	 add	 DWORD PTR __Dest$[ebp], 16 ; 00000010H
  0002e	83 c6 10	 add	 esi, 16			; 00000010H
  00031	eb e6		 jmp	 SHORT $LL6@Uninit_mov
__catch$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00033	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00036	eb 0b		 jmp	 SHORT $LN33@Uninit_mov
$LL3@Uninit_mov:

; 434  : 		_Dest_val(_Al, _Next);

  00038	8b ce		 mov	 ecx, esi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00040	83 c6 10	 add	 esi, 16			; 00000010H
$LN33@Uninit_mov:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00043	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00046	75 f0		 jne	 SHORT $LL3@Uninit_mov

; 435  : 	_RERAISE;

  00048	6a 00		 push	 0
  0004a	6a 00		 push	 0
  0004c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN34@Uninit_mov:
$LN4@Uninit_mov:

; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00051	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 438  : 	}

  00054	e8 00 00 00 00	 call	 __EH_epilog3
  00059	c3		 ret	 0
$LN32@Uninit_mov:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ioHashString *,ioHashString *,std::allocator<ioHashString>,ioHashString>
PUBLIC	??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ioHashString> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ioHashString> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN17@Destroy_ra
$LL3@Destroy_ra:

; 97   : 		_Dest_val(_Al, _First);

  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 10	 add	 esi, 16			; 00000010H
$LN17@Destroy_ra:

; 96   : 	for (; _First != _Last; ++_First)

  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL3@Destroy_ra
  00019	5e		 pop	 esi

; 98   : 	}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 373  : 
; 374  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

$LL14@Uninit_cop:
  00016	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00019	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001c	74 33		 je	 SHORT $LN4@Uninit_cop

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  0001e	50		 push	 eax
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	e8 00 00 00 00	 call	 ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
  00027	83 45 10 10	 add	 DWORD PTR __Dest$[ebp], 16 ; 00000010H
  0002b	83 45 08 10	 add	 DWORD PTR __First$[ebp], 16 ; 00000010H
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
  00031	eb e3		 jmp	 SHORT $LL14@Uninit_cop
__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00033	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00036	eb 0b		 jmp	 SHORT $LN45@Uninit_cop
$LL3@Uninit_cop:

; 379  : 		_Dest_val(_Al, _Next);

  00038	8b ce		 mov	 ecx, esi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00040	83 c6 10	 add	 esi, 16			; 00000010H
$LN45@Uninit_cop:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00043	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00046	75 f0		 jne	 SHORT $LL3@Uninit_cop

; 380  : 	_RERAISE;

  00048	6a 00		 push	 0
  0004a	6a 00		 push	 0
  0004c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN46@Uninit_cop:
$LN4@Uninit_cop:

; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00051	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00054	e8 00 00 00 00	 call	 __EH_epilog3
  00059	c3		 ret	 0
$LN44@Uninit_cop:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
PUBLIC	??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z
_TEXT	SEGMENT
__Cat$551112 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z PROC ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$551112[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioHashString *,ioHashString *,std::allocator<ioHashString>,ioHashString>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z ENDP ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@@Z ; std::_Destroy_range<std::allocator<ioHashString> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ioHashString> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN21@Destroy_ra@2
$LL7@Destroy_ra@2:
  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 10	 add	 esi, 16			; 00000010H
$LN21@Destroy_ra@2:
  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL7@Destroy_ra@2
  00019	5e		 pop	 esi

; 89   : 	}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@@Z
_TEXT	SEGMENT
__Cat$551175 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$551175[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??$_Umove@PAVioHashString@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@PAV2@00@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Umove<ioHashString *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAVioHashString@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@PAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAVioHashString@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@PAV2@00@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Umove<ioHashString *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAVioHashString@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@PAV2@00@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Umove<ioHashString *>
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXPAVioHashString@@0@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXPAVioHashString@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXPAVioHashString@@0@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN23@Destroy
$LL9@Destroy:
  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 10	 add	 esi, 16			; 00000010H
$LN23@Destroy:
  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL9@Destroy
  00019	5e		 pop	 esi

; 1271 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?_Destroy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXPAVioHashString@@0@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@1@0PAV2@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@1@0PAV2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$551266 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@1@0PAV2@@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$551266[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@1@0PAV2@@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > > >
_TEXT	ENDS
PUBLIC	?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::reserve
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
tv300 = -24						; size = 4
__Ptr$548590 = -20					; size = 4
__$EHRec$ = -16						; size = 16
$T551363 = 8						; size = 4
__Count$ = 8						; size = 4
?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00011	81 fb ff ff ff
	0f		 cmp	 ebx, 268435455		; 0fffffffH
  00017	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN59@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00024	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00027	2b 06		 sub	 eax, DWORD PTR [esi]
  00029	c1 f8 04	 sar	 eax, 4
  0002c	3b c3		 cmp	 eax, ebx
  0002e	73 7a		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00030	6a 00		 push	 0
  00032	53		 push	 ebx
  00033	e8 00 00 00 00	 call	 ??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ; std::_Allocate<ioHashString>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  0003e	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00041	52		 push	 edx
  00042	89 45 ec	 mov	 DWORD PTR __Ptr$548590[ebp], eax
  00045	ff 75 ec	 push	 DWORD PTR __Ptr$548590[ebp]
  00048	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004b	50		 push	 eax
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00052	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00055	8b 06		 mov	 eax, DWORD PTR [esi]
  00057	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  0005b	8b f9		 mov	 edi, ecx
  0005d	83 c4 18	 add	 esp, 24			; 00000018H
  00060	2b f8		 sub	 edi, eax
  00062	89 4d e8	 mov	 DWORD PTR tv300[ebp], ecx
  00065	85 c0		 test	 eax, eax
  00067	74 24		 je	 SHORT $LN51@reserve

; 761  : 			if (this->_Myfirst != 0)
; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  00069	89 45 08	 mov	 DWORD PTR $T551363[ebp], eax
  0006c	3b c1		 cmp	 eax, ecx
  0006e	74 15		 je	 SHORT $LN37@reserve
$LN39@reserve:
  00070	8b 4d 08	 mov	 ecx, DWORD PTR $T551363[ebp]
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00079	83 45 08 10	 add	 DWORD PTR $T551363[ebp], 16 ; 00000010H
  0007d	8b 45 08	 mov	 eax, DWORD PTR $T551363[ebp]
  00080	3b 45 e8	 cmp	 eax, DWORD PTR tv300[ebp]
  00083	75 eb		 jne	 SHORT $LN39@reserve
$LN37@reserve:

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00085	ff 36		 push	 DWORD PTR [esi]
  00087	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008c	59		 pop	 ecx
$LN51@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0008d	8b ce		 mov	 ecx, esi
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00095	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$548590[ebp]
  00098	c1 e3 04	 shl	 ebx, 4
  0009b	03 d8		 add	 ebx, eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  0009d	83 e7 f0	 and	 edi, -16		; fffffff0H
  000a0	03 f8		 add	 edi, eax
  000a2	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  000a5	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  000a8	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  000aa	e8 00 00 00 00	 call	 __EH_epilog3
  000af	c2 04 00	 ret	 4
__catch$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000b2	ff 75 ec	 push	 DWORD PTR __Ptr$548590[ebp]
  000b5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ba	59		 pop	 ecx

; 757  : 			_RERAISE;

  000bb	6a 00		 push	 0
  000bd	6a 00		 push	 0
  000bf	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN60@reserve:
$LN58@reserve:
  000c4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::reserve
PUBLIC	?erase@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@0@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T551558 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$551502 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@0@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00004	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __First_arg$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 4d 10	 cmp	 ecx, DWORD PTR __Last_arg$[ebp]
  00012	74 38		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00017	53		 push	 ebx
  00018	57		 push	 edi
  00019	ff 75 10	 push	 DWORD PTR __Cat$551502[ebp]
  0001c	51		 push	 ecx
  0001d	50		 push	 eax
  0001e	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioHashString *,ioHashString *>

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00026	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00029	8b d8		 mov	 ebx, eax
  0002b	83 c4 10	 add	 esp, 16			; 00000010H
  0002e	89 5d fc	 mov	 DWORD PTR $T551558[ebp], ebx
  00031	3b df		 cmp	 ebx, edi
  00033	74 12		 je	 SHORT $LN36@erase
$LL52@erase:
  00035	8b 4d fc	 mov	 ecx, DWORD PTR $T551558[ebp]
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0003e	83 45 fc 10	 add	 DWORD PTR $T551558[ebp], 16 ; 00000010H
  00042	39 7d fc	 cmp	 DWORD PTR $T551558[ebp], edi
  00045	75 ee		 jne	 SHORT $LL52@erase
$LN36@erase:

; 1211 : 			this->_Mylast = _Ptr;

  00047	5f		 pop	 edi
  00048	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0004b	5b		 pop	 ebx
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0004c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0004f	5e		 pop	 esi

; 1214 : 		}

  00050	c9		 leave
  00051	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@0@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 28		 je	 SHORT $LN24@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	53		 push	 ebx
  00009	57		 push	 edi
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  00010	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00013	8b 3e		 mov	 edi, DWORD PTR [esi]
  00015	eb 0b		 jmp	 SHORT $LN28@Tidy
$LL12@Tidy:
  00017	8b cf		 mov	 ecx, edi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0001f	83 c7 10	 add	 edi, 16			; 00000010H
$LN28@Tidy:
  00022	3b fb		 cmp	 edi, ebx
  00024	75 f1		 jne	 SHORT $LL12@Tidy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00026	ff 36		 push	 DWORD PTR [esi]
  00028	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002d	59		 pop	 ecx
  0002e	5f		 pop	 edi
  0002f	5b		 pop	 ebx
$LN24@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00030	33 c0		 xor	 eax, eax
  00032	89 06		 mov	 DWORD PTR [esi], eax

; 1310 : 		this->_Mylast = 0;

  00034	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1311 : 		this->_Myend = 0;

  00037	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003a	5e		 pop	 esi

; 1312 : 		}

  0003b	c3		 ret	 0
?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx

; 1292 : 		if (max_size() - _Count < _Size)

  0000d	ba ff ff ff 0f	 mov	 edx, 268435455		; 0fffffffH
  00012	2b 55 08	 sub	 edx, DWORD PTR __Count$[ebp]
  00015	c1 f8 04	 sar	 eax, 4
  00018	3b d0		 cmp	 edx, eax
  0001a	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0002a	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  0002d	2b d1		 sub	 edx, ecx
  0002f	c1 fa 04	 sar	 edx, 4
  00032	3b c2		 cmp	 eax, edx
  00034	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Grow_to
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::reserve
$LN1@Reserve:
  00046	5e		 pop	 esi

; 1298 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve
_TEXT	ENDS
PUBLIC	??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$551820 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	c1 f8 04	 sar	 eax, 4
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Buy
  0002c	84 c0		 test	 al, al
  0002e	74 1f		 je	 SHORT $LN7@vector

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00030	ff 75 08	 push	 DWORD PTR __Cat$551820[ebp]
  00033	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00035	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00038	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003a	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  0003d	52		 push	 edx
  0003e	51		 push	 ecx
  0003f	50		 push	 eax
  00040	57		 push	 edi
  00041	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00044	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
  00049	83 c4 14	 add	 esp, 20			; 00000014H
  0004c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector:

; 543  : 			_CATCH_END
; 544  : 		}

  0004f	8b c6		 mov	 eax, esi
  00051	e8 00 00 00 00	 call	 __EH_epilog3
  00056	c2 04 00	 ret	 4
__catch$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  00059	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy

; 542  : 			_RERAISE;

  00061	33 db		 xor	 ebx, ebx
  00063	53		 push	 ebx
  00064	53		 push	 ebx
  00065	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector:
$LN37@vector:
  0006a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
PUBLIC	??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T551849 = -4						; size = 4
?clear@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T551849[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@0@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::clear
_TEXT	ENDS
PUBLIC	??_7ioCheckChainBuff2@@6B@			; ioCheckChainBuff2::`vftable'
PUBLIC	??0ioCheckChainBuff2@@QAE@XZ			; ioCheckChainBuff2::ioCheckChainBuff2
PUBLIC	??_R4ioCheckChainBuff2@@6B@			; ioCheckChainBuff2::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioCheckChainBuff2@@@8			; ioCheckChainBuff2 `RTTI Type Descriptor'
PUBLIC	??_R3ioCheckChainBuff2@@8			; ioCheckChainBuff2::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioCheckChainBuff2@@8			; ioCheckChainBuff2::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioCheckChainBuff2@@8		; ioCheckChainBuff2::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioCheckChainBuff2@@UAEXAAVioINILoader@@@Z ; ioCheckChainBuff2::LoadProperty
PUBLIC	?Clone@ioCheckChainBuff2@@UAEPAVioBuff@@XZ	; ioCheckChainBuff2::Clone
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyExtraBuffInfo
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioCheckChainBuff2@@UAEPAXI@Z:PROC		; ioCheckChainBuff2::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioCheckChainBuff2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioCheckChainBuff2@@8 DD FLAT:??_R0?AVioCheckChainBuff2@@@8 ; ioCheckChainBuff2::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioCheckChainBuff2@@8
rdata$r	ENDS
;	COMDAT ??_R2ioCheckChainBuff2@@8
rdata$r	SEGMENT
??_R2ioCheckChainBuff2@@8 DD FLAT:??_R1A@?0A@EA@ioCheckChainBuff2@@8 ; ioCheckChainBuff2::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioCheckChainBuff2@@8
rdata$r	SEGMENT
??_R3ioCheckChainBuff2@@8 DD 00H			; ioCheckChainBuff2::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioCheckChainBuff2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioCheckChainBuff2@@@8
_DATA	SEGMENT
??_R0?AVioCheckChainBuff2@@@8 DD FLAT:??_7type_info@@6B@ ; ioCheckChainBuff2 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioCheckChainBuff2@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioCheckChainBuff2@@6B@
rdata$r	SEGMENT
??_R4ioCheckChainBuff2@@6B@ DD 00H			; ioCheckChainBuff2::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioCheckChainBuff2@@@8
	DD	FLAT:??_R3ioCheckChainBuff2@@8
rdata$r	ENDS
;	COMDAT ??_7ioCheckChainBuff2@@6B@
CONST	SEGMENT
??_7ioCheckChainBuff2@@6B@ DD FLAT:??_R4ioCheckChainBuff2@@6B@ ; ioCheckChainBuff2::`vftable'
	DD	FLAT:?LoadProperty@ioCheckChainBuff2@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioCheckChainBuff2@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioCheckChainBuff2@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioCheckChainBuff2@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioCheckChainBuff2@@UAEXM@Z
	DD	FLAT:?EndBuff@ioCheckChainBuff2@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioCheckChainBuff2@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioCheckChainBuff2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioCheckChainBuff2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioCheckChainBuff2@@QAE@XZ$1
__ehfuncinfo$??0ioCheckChainBuff2@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ioCheckChainBuff2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocheckchainbuff2.cpp
xdata$x	ENDS
;	COMDAT ??0ioCheckChainBuff2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioCheckChainBuff2@@QAE@XZ PROC			; ioCheckChainBuff2::ioCheckChainBuff2, COMDAT
; _this$ = ecx

; 12   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioCheckChainBuff2@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff
  00016	33 c9		 xor	 ecx, ecx
  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioCheckChainBuff2@@6B@
  0001e	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ecx
  00021	89 8e 70 09 00
	00		 mov	 DWORD PTR [esi+2416], ecx
  00027	89 8e 74 09 00
	00		 mov	 DWORD PTR [esi+2420], ecx
  0002d	89 8e 78 09 00
	00		 mov	 DWORD PTR [esi+2424], ecx
  00033	8d 8e 80 09 00
	00		 lea	 ecx, DWORD PTR [esi+2432]
  00039	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 13   : 	m_dwChainWeaponIndex = -1;

  00043	83 8e a4 09 00
	00 ff		 or	 DWORD PTR [esi+2468], -1

; 14   : 	m_dwCreatorEffectID = -1;

  0004a	83 8e a8 09 00
	00 ff		 or	 DWORD PTR [esi+2472], -1

; 15   : }

  00051	8b c6		 mov	 eax, esi
  00053	e8 00 00 00 00	 call	 __EH_epilog3
  00058	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioCheckChainBuff2@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??0ioCheckChainBuff2@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 70 09 00
	00		 add	 ecx, 2416		; 00000970H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
__ehhandler$??0ioCheckChainBuff2@@QAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioCheckChainBuff2@@QAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioCheckChainBuff2@@QAE@XZ ENDP			; ioCheckChainBuff2::ioCheckChainBuff2
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
_TEXT	ENDS
PUBLIC	??0ioCheckChainBuff2@@QAE@ABV0@@Z		; ioCheckChainBuff2::ioCheckChainBuff2
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocheckchainbuff2.cpp
xdata$x	SEGMENT
__unwindtable$??0ioCheckChainBuff2@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioCheckChainBuff2@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioCheckChainBuff2@@QAE@ABV0@@Z$1
__ehfuncinfo$??0ioCheckChainBuff2@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ioCheckChainBuff2@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioCheckChainBuff2@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioCheckChainBuff2@@QAE@ABV0@@Z PROC			; ioCheckChainBuff2::ioCheckChainBuff2, COMDAT
; _this$ = ecx

; 24   : {	

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioCheckChainBuff2@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b d9		 mov	 ebx, ecx
  0000e	89 5d f0	 mov	 DWORD PTR _this$[ebp], ebx
  00011	8b 75 08	 mov	 esi, DWORD PTR _rhs$[ebp]
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7ioCheckChainBuff2@@6B@
  00024	8b 86 6c 09 00
	00		 mov	 eax, DWORD PTR [esi+2412]
  0002a	89 83 6c 09 00
	00		 mov	 DWORD PTR [ebx+2412], eax
  00030	8d 86 70 09 00
	00		 lea	 eax, DWORD PTR [esi+2416]
  00036	50		 push	 eax
  00037	8d 8b 70 09 00
	00		 lea	 ecx, DWORD PTR [ebx+2416]
  0003d	e8 00 00 00 00	 call	 ??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
  00042	8d 86 80 09 00
	00		 lea	 eax, DWORD PTR [esi+2432]
  00048	50		 push	 eax
  00049	8d 8b 80 09 00
	00		 lea	 ecx, DWORD PTR [ebx+2432]
  0004f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00059	8b 45 08	 mov	 eax, DWORD PTR _rhs$[ebp]
  0005c	81 c6 90 09 00
	00		 add	 esi, 2448		; 00000990H
  00062	8d bb 90 09 00
	00		 lea	 edi, DWORD PTR [ebx+2448]
  00068	a5		 movsd
  00069	a5		 movsd
  0006a	a5		 movsd
  0006b	d9 80 9c 09 00
	00		 fld	 DWORD PTR [eax+2460]
  00071	d9 9b 9c 09 00
	00		 fstp	 DWORD PTR [ebx+2460]

; 25   : 	m_dwChainWeaponIndex = -1;

  00077	83 8b a4 09 00
	00 ff		 or	 DWORD PTR [ebx+2468], -1

; 26   : 	m_dwCreatorEffectID = -1;

  0007e	83 8b a8 09 00
	00 ff		 or	 DWORD PTR [ebx+2472], -1

; 27   : }

  00085	8b c3		 mov	 eax, ebx
  00087	e8 00 00 00 00	 call	 __EH_epilog3
  0008c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioCheckChainBuff2@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??0ioCheckChainBuff2@@QAE@ABV0@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 70 09 00
	00		 add	 ecx, 2416		; 00000970H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
__ehhandler$??0ioCheckChainBuff2@@QAE@ABV0@@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioCheckChainBuff2@@QAE@ABV0@@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioCheckChainBuff2@@QAE@ABV0@@Z ENDP			; ioCheckChainBuff2::ioCheckChainBuff2
PUBLIC	??1ioCheckChainBuff2@@UAE@XZ			; ioCheckChainBuff2::~ioCheckChainBuff2
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??1ioCheckChainBuff2@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioCheckChainBuff2@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioCheckChainBuff2@@UAE@XZ$1
__ehfuncinfo$??1ioCheckChainBuff2@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1ioCheckChainBuff2@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocheckchainbuff2.cpp
xdata$x	ENDS
;	COMDAT ??1ioCheckChainBuff2@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioCheckChainBuff2@@UAE@XZ PROC			; ioCheckChainBuff2::~ioCheckChainBuff2, COMDAT
; _this$ = ecx

; 30   : {	

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioCheckChainBuff2@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioCheckChainBuff2@@6B@

; 31   : }

  00017	8d 8e 80 09 00
	00		 lea	 ecx, DWORD PTR [esi+2432]
  0001d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0002a	8d 8e 70 09 00
	00		 lea	 ecx, DWORD PTR [esi+2416]
  00030	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00034	e8 00 00 00 00	 call	 ?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
  00039	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  00044	e8 00 00 00 00	 call	 __EH_epilog3
  00049	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioCheckChainBuff2@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??1ioCheckChainBuff2@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 70 09 00
	00		 add	 ecx, 2416		; 00000970H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
__ehhandler$??1ioCheckChainBuff2@@UAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioCheckChainBuff2@@UAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioCheckChainBuff2@@UAE@XZ ENDP			; ioCheckChainBuff2::~ioCheckChainBuff2
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioCheckChainBuff2@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioCheckChainBuff2@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioCheckChainBuff2@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioCheckChainBuff2@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioCheckChainBuff2@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T551975 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioCheckChainBuff2@@UAEPAVioBuff@@XZ PROC		; ioCheckChainBuff2::Clone, COMDAT
; _this$ = ecx

; 34   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioCheckChainBuff2@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 35   : 	return new ioCheckChainBuff2( *this );

  0000e	68 ac 09 00 00	 push	 2476			; 000009acH
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T551975[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioCheckChainBuff2@@QAE@ABV0@@Z ; ioCheckChainBuff2::ioCheckChainBuff2
$LN3@Clone:

; 36   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioCheckChainBuff2@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T551975[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioCheckChainBuff2@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioCheckChainBuff2@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioCheckChainBuff2@@UAEPAVioBuff@@XZ ENDP		; ioCheckChainBuff2::Clone
PUBLIC	?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 29		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 23		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx

; 980  : 			if (this->_Mylast == this->_Myend)

  00019	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001c	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  0001e	6a 01		 push	 1
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00027	83 e7 f0	 and	 edi, -16		; fffffff0H
  0002a	03 3e		 add	 edi, DWORD PTR [esi]
  0002c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002f	57		 push	 edi
  00030	ff 76 04	 push	 DWORD PTR [esi+4]
  00033	e8 00 00 00 00	 call	 ??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z ; std::allocator<ioHashString>::construct<ioHashString &>

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00038	eb 19		 jmp	 SHORT $LN30@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  0003a	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0003d	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0003f	6a 01		 push	 1
  00041	8b ce		 mov	 ecx, esi
  00043	e8 00 00 00 00	 call	 ?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00048	57		 push	 edi
  00049	ff 76 04	 push	 DWORD PTR [esi+4]
  0004c	e8 00 00 00 00	 call	 ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
  00051	59		 pop	 ecx
  00052	59		 pop	 ecx
$LN30@push_back:

; 996  : 			++this->_Mylast;

  00053	83 46 04 10	 add	 DWORD PTR [esi+4], 16	; 00000010H
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::push_back
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioCheckChainBuff2@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioCheckChainBuff2@@UAEPAXI@Z PROC			; ioCheckChainBuff2::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioCheckChainBuff2@@UAE@XZ ; ioCheckChainBuff2::~ioCheckChainBuff2
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@3
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@3:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioCheckChainBuff2@@UAEPAXI@Z ENDP			; ioCheckChainBuff2::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0P@PAGKFKKH@creator_effect?$AA@		; `string'
EXTRN	__imp__wsprintfA:PROC
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
;	COMDAT ??_C@_0P@PAGKFKKH@creator_effect?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_0P@PAGKFKKH@creator_effect?$AA@ DB 'creator_effect', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadProperty@ioCheckChainBuff2@@UAEXAAVioINILoader@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadProperty@ioCheckChainBuff2@@UAEXAAVioINILoader@@@Z$0
__ehfuncinfo$?LoadProperty@ioCheckChainBuff2@@UAEXAAVioINILoader@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadProperty@ioCheckChainBuff2@@UAEXAAVioINILoader@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocheckchainbuff2.cpp
xdata$x	ENDS
;	COMDAT ?LoadProperty@ioCheckChainBuff2@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_nBuffCnt$ = -608					; size = 4
tv5427 = -604						; size = 4
$T552726 = -604						; size = 4
_szKey$ = -600						; size = 260
_szBuf$ = -340						; size = 260
__k$552771 = -80					; size = 11
__k$552554 = -64					; size = 15
__k$552067 = -64					; size = 13
$T552037 = -64						; size = 16
__k$552467 = -44					; size = 24
__k$552342 = -44					; size = 24
__k$552217 = -44					; size = 24
___encStr$548091 = -40					; size = 18
__$EHRec$ = -12						; size = 12
_rkLoader$ = 8						; size = 4
?LoadProperty@ioCheckChainBuff2@@UAEXAAVioINILoader@@@Z PROC ; ioCheckChainBuff2::LoadProperty, COMDAT
; _this$ = ecx

; 39   : {

  00000	68 54 02 00 00	 push	 596			; 00000254H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?LoadProperty@ioCheckChainBuff2@@UAEXAAVioINILoader@@@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 40   : 	ioBuff::LoadProperty( rkLoader );

  00012	57		 push	 edi
  00013	8b f1		 mov	 esi, ecx
  00015	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty

; 41   : 
; 42   : 	char szBuf[MAX_PATH], szKey[MAX_PATH];
; 43   : 	m_nChainWeapon = rkLoader.LoadInt_e( "chain_weapon", NO_WEAPON_ATTRIBUTE );

  0001a	33 db		 xor	 ebx, ebx
  0001c	6a 03		 push	 3
  0001e	c7 45 c0 8e 84
	8a 83		 mov	 DWORD PTR __k$552067[ebp], -2088074098 ; 838a848eH
  00025	c7 45 c4 83 b3
	9c 8f		 mov	 DWORD PTR __k$552067[ebp+4], -1885555837 ; 8f9cb383H
  0002c	c7 45 c8 8c 9c
	84 84		 mov	 DWORD PTR __k$552067[ebp+8], -2071683956 ; 84849c8cH
  00033	8d 45 c0	 lea	 eax, DWORD PTR __k$552067[ebp]
  00036	88 5d cc	 mov	 BYTE PTR __k$552067[ebp+12], bl
  00039	59		 pop	 ecx
$LL209@LoadProper:
  0003a	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00040	83 c0 04	 add	 eax, 4
  00043	49		 dec	 ecx
  00044	75 f4		 jne	 SHORT $LL209@LoadProper
  00046	53		 push	 ebx
  00047	8d 45 c0	 lea	 eax, DWORD PTR __k$552067[ebp]
  0004a	50		 push	 eax
  0004b	8b cf		 mov	 ecx, edi
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 44   : 
; 45   : 	rkLoader.LoadString( "creator_effect", "", szBuf, MAX_PATH );

  00053	68 04 01 00 00	 push	 260			; 00000104H
  00058	89 86 6c 09 00
	00		 mov	 DWORD PTR [esi+2412], eax
  0005e	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00064	50		 push	 eax
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PAGKFKKH@creator_effect?$AA@
  0006f	8b cf		 mov	 ecx, edi
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 46   : 	m_szCreatorEffect = szBuf;

  00077	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0007d	50		 push	 eax
  0007e	8d 8e 80 09 00
	00		 lea	 ecx, DWORD PTR [esi+2432]
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  0008a	6a 05		 push	 5

; 47   : 
; 48   : 	m_vCreatorEffectOffset.x = rkLoader.LoadFloat_e( "creator_effect_offset_x", 0.0f );

  0008c	c7 45 d4 8e 9e
	8e 8b		 mov	 DWORD PTR __k$552217[ebp], -1953587570 ; 8b8e9e8eH
  00093	c7 45 d8 99 83
	99 b5		 mov	 DWORD PTR __k$552217[ebp+4], -1248230503 ; b5998399H
  0009a	c7 45 dc 88 8a
	8d 8f		 mov	 DWORD PTR __k$552217[ebp+8], -1886549368 ; 8f8d8a88H
  000a1	c7 45 e0 8e 98
	b4 85		 mov	 DWORD PTR __k$552217[ebp+12], -2051762034 ; 85b4988eH
  000a8	c7 45 e4 8b 8a
	98 8f		 mov	 DWORD PTR __k$552217[ebp+16], -1885828469 ; 8f988a8bH
  000af	8d 45 d4	 lea	 eax, DWORD PTR __k$552217[ebp]
  000b2	c7 45 e8 99 b3
	93 00		 mov	 DWORD PTR __k$552217[ebp+20], 9679769 ; 0093b399H
  000b9	59		 pop	 ecx
$LL315@LoadProper:
  000ba	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000c0	83 c0 04	 add	 eax, 4
  000c3	49		 dec	 ecx
  000c4	75 f4		 jne	 SHORT $LL315@LoadProper
  000c6	6a 14		 push	 20			; 00000014H
  000c8	58		 pop	 eax
$LL312@LoadProper:
  000c9	8b c8		 mov	 ecx, eax
  000cb	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000d1	79 05		 jns	 SHORT $LN800@LoadProper
  000d3	49		 dec	 ecx
  000d4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000d7	41		 inc	 ecx
$LN800@LoadProper:
  000d8	b2 ed		 mov	 dl, -19			; ffffffedH
  000da	2a d1		 sub	 dl, cl
  000dc	30 54 05 d4	 xor	 BYTE PTR __k$552217[ebp+eax], dl
  000e0	40		 inc	 eax
  000e1	83 f8 17	 cmp	 eax, 23			; 00000017H
  000e4	7c e3		 jl	 SHORT $LL312@LoadProper
  000e6	0f 57 c0	 xorps	 xmm0, xmm0
  000e9	51		 push	 ecx
  000ea	8d 45 d4	 lea	 eax, DWORD PTR __k$552217[ebp]
  000ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f2	50		 push	 eax
  000f3	8b cf		 mov	 ecx, edi
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  000fb	d9 9e 90 09 00
	00		 fstp	 DWORD PTR [esi+2448]
  00101	6a 05		 push	 5

; 49   : 	m_vCreatorEffectOffset.y = rkLoader.LoadFloat_e( "creator_effect_offset_y", 0.0f );

  00103	c7 45 d4 8e 9e
	8e 8b		 mov	 DWORD PTR __k$552342[ebp], -1953587570 ; 8b8e9e8eH
  0010a	c7 45 d8 99 83
	99 b5		 mov	 DWORD PTR __k$552342[ebp+4], -1248230503 ; b5998399H
  00111	c7 45 dc 88 8a
	8d 8f		 mov	 DWORD PTR __k$552342[ebp+8], -1886549368 ; 8f8d8a88H
  00118	c7 45 e0 8e 98
	b4 85		 mov	 DWORD PTR __k$552342[ebp+12], -2051762034 ; 85b4988eH
  0011f	c7 45 e4 8b 8a
	98 8f		 mov	 DWORD PTR __k$552342[ebp+16], -1885828469 ; 8f988a8bH
  00126	8d 45 d4	 lea	 eax, DWORD PTR __k$552342[ebp]
  00129	c7 45 e8 99 b3
	92 00		 mov	 DWORD PTR __k$552342[ebp+20], 9614233 ; 0092b399H
  00130	59		 pop	 ecx
$LL421@LoadProper:
  00131	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00137	83 c0 04	 add	 eax, 4
  0013a	49		 dec	 ecx
  0013b	75 f4		 jne	 SHORT $LL421@LoadProper
  0013d	6a 14		 push	 20			; 00000014H
  0013f	58		 pop	 eax
$LL418@LoadProper:
  00140	8b c8		 mov	 ecx, eax
  00142	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00148	79 05		 jns	 SHORT $LN801@LoadProper
  0014a	49		 dec	 ecx
  0014b	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0014e	41		 inc	 ecx
$LN801@LoadProper:
  0014f	b2 ed		 mov	 dl, -19			; ffffffedH
  00151	2a d1		 sub	 dl, cl
  00153	30 54 05 d4	 xor	 BYTE PTR __k$552342[ebp+eax], dl
  00157	40		 inc	 eax
  00158	83 f8 17	 cmp	 eax, 23			; 00000017H
  0015b	7c e3		 jl	 SHORT $LL418@LoadProper
  0015d	0f 57 c0	 xorps	 xmm0, xmm0
  00160	51		 push	 ecx
  00161	8d 45 d4	 lea	 eax, DWORD PTR __k$552342[ebp]
  00164	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00169	50		 push	 eax
  0016a	8b cf		 mov	 ecx, edi
  0016c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00172	d9 9e 94 09 00
	00		 fstp	 DWORD PTR [esi+2452]
  00178	6a 05		 push	 5

; 50   : 	m_vCreatorEffectOffset.z = rkLoader.LoadFloat_e( "creator_effect_offset_z", 0.0f );

  0017a	c7 45 d4 8e 9e
	8e 8b		 mov	 DWORD PTR __k$552467[ebp], -1953587570 ; 8b8e9e8eH
  00181	c7 45 d8 99 83
	99 b5		 mov	 DWORD PTR __k$552467[ebp+4], -1248230503 ; b5998399H
  00188	c7 45 dc 88 8a
	8d 8f		 mov	 DWORD PTR __k$552467[ebp+8], -1886549368 ; 8f8d8a88H
  0018f	c7 45 e0 8e 98
	b4 85		 mov	 DWORD PTR __k$552467[ebp+12], -2051762034 ; 85b4988eH
  00196	c7 45 e4 8b 8a
	98 8f		 mov	 DWORD PTR __k$552467[ebp+16], -1885828469 ; 8f988a8bH
  0019d	8d 45 d4	 lea	 eax, DWORD PTR __k$552467[ebp]
  001a0	c7 45 e8 99 b3
	91 00		 mov	 DWORD PTR __k$552467[ebp+20], 9548697 ; 0091b399H
  001a7	59		 pop	 ecx
$LL527@LoadProper:
  001a8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001ae	83 c0 04	 add	 eax, 4
  001b1	49		 dec	 ecx
  001b2	75 f4		 jne	 SHORT $LL527@LoadProper
  001b4	6a 14		 push	 20			; 00000014H
  001b6	58		 pop	 eax
$LL524@LoadProper:
  001b7	8b c8		 mov	 ecx, eax
  001b9	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001bf	79 05		 jns	 SHORT $LN802@LoadProper
  001c1	49		 dec	 ecx
  001c2	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c5	41		 inc	 ecx
$LN802@LoadProper:
  001c6	b2 ed		 mov	 dl, -19			; ffffffedH
  001c8	2a d1		 sub	 dl, cl
  001ca	30 54 05 d4	 xor	 BYTE PTR __k$552467[ebp+eax], dl
  001ce	40		 inc	 eax
  001cf	83 f8 17	 cmp	 eax, 23			; 00000017H
  001d2	7c e3		 jl	 SHORT $LL524@LoadProper
  001d4	0f 57 c0	 xorps	 xmm0, xmm0
  001d7	51		 push	 ecx
  001d8	8d 45 d4	 lea	 eax, DWORD PTR __k$552467[ebp]
  001db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e0	50		 push	 eax
  001e1	8b cf		 mov	 ecx, edi
  001e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  001e9	d9 9e 98 09 00
	00		 fstp	 DWORD PTR [esi+2456]
  001ef	6a 03		 push	 3

; 51   : 
; 52   : 	int nBuffCnt = rkLoader.LoadInt_e( "owner_buff_cnt", 0 );

  001f1	c7 45 c0 82 9b
	85 8f		 mov	 DWORD PTR __k$552554[ebp], -1887069310 ; 8f859b82H
  001f8	c7 45 c4 9f b3
	89 9f		 mov	 DWORD PTR __k$552554[ebp+4], -1618365537 ; 9f89b39fH
  001ff	c7 45 c8 8b 8a
	b4 89		 mov	 DWORD PTR __k$552554[ebp+8], -1984656757 ; 89b48a8bH
  00206	66 c7 45 cc 83
	98		 mov	 WORD PTR __k$552554[ebp+12], 39043 ; 00009883H
  0020c	8d 45 c0	 lea	 eax, DWORD PTR __k$552554[ebp]
  0020f	88 5d ce	 mov	 BYTE PTR __k$552554[ebp+14], bl
  00212	59		 pop	 ecx
$LL633@LoadProper:
  00213	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00219	83 c0 04	 add	 eax, 4
  0021c	49		 dec	 ecx
  0021d	75 f4		 jne	 SHORT $LL633@LoadProper
  0021f	6a 0c		 push	 12			; 0000000cH
  00221	58		 pop	 eax
$LL630@LoadProper:
  00222	8b c8		 mov	 ecx, eax
  00224	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0022a	79 05		 jns	 SHORT $LN803@LoadProper
  0022c	49		 dec	 ecx
  0022d	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00230	41		 inc	 ecx
$LN803@LoadProper:
  00231	b2 ed		 mov	 dl, -19			; ffffffedH
  00233	2a d1		 sub	 dl, cl
  00235	30 54 05 c0	 xor	 BYTE PTR __k$552554[ebp+eax], dl
  00239	40		 inc	 eax
  0023a	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  0023d	7c e3		 jl	 SHORT $LL630@LoadProper
  0023f	53		 push	 ebx
  00240	8d 45 c0	 lea	 eax, DWORD PTR __k$552554[ebp]
  00243	50		 push	 eax
  00244	8b cf		 mov	 ecx, edi
  00246	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 53   : 	m_OwnerBuffList.clear();

  0024c	8d 8e 70 09 00
	00		 lea	 ecx, DWORD PTR [esi+2416]
  00252	8b 11		 mov	 edx, DWORD PTR [ecx]
  00254	89 85 a0 fd ff
	ff		 mov	 DWORD PTR _nBuffCnt$[ebp], eax
  0025a	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0025d	50		 push	 eax
  0025e	52		 push	 edx
  0025f	8d 85 a4 fd ff
	ff		 lea	 eax, DWORD PTR $T552726[ebp]
  00265	50		 push	 eax
  00266	e8 00 00 00 00	 call	 ?erase@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@0@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::erase

; 54   : 	for ( int i=0; i<nBuffCnt; i++ )

  0026b	33 c9		 xor	 ecx, ecx
  0026d	39 9d a0 fd ff
	ff		 cmp	 DWORD PTR _nBuffCnt$[ebp], ebx
  00273	0f 8e b7 00 00
	00		 jle	 $LN100@LoadProper
$LL102@LoadProper:

; 53   : 	m_OwnerBuffList.clear();

  00279	6a 04		 push	 4

; 55   : 	{
; 56   : 		wsprintf_e( szKey, "owner_buff%d_name", i+1 );

  0027b	c7 45 d8 82 9b
	85 8f		 mov	 DWORD PTR ___encStr$548091[ebp], -1887069310 ; 8f859b82H
  00282	c7 45 dc 9f b3
	89 9f		 mov	 DWORD PTR ___encStr$548091[ebp+4], -1618365537 ; 9f89b39fH
  00289	c7 45 e0 8b 8a
	ce 8e		 mov	 DWORD PTR ___encStr$548091[ebp+8], -1899066741 ; 8ece8a8bH
  00290	c7 45 e4 b2 82
	8a 87		 mov	 DWORD PTR ___encStr$548091[ebp+12], -2020965710 ; 878a82b2H
  00297	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$548091[ebp]
  0029a	66 c7 45 e8 88
	00		 mov	 WORD PTR ___encStr$548091[ebp+16], 136 ; 00000088H
  002a0	5a		 pop	 edx
$LL659@LoadProper:
  002a1	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002a7	83 c0 04	 add	 eax, 4
  002aa	4a		 dec	 edx
  002ab	75 f4		 jne	 SHORT $LL659@LoadProper
  002ad	80 75 e8 ed	 xor	 BYTE PTR ___encStr$548091[ebp+16], -19 ; ffffffedH
  002b1	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  002b4	50		 push	 eax
  002b5	89 85 a4 fd ff
	ff		 mov	 DWORD PTR tv5427[ebp], eax
  002bb	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$548091[ebp]
  002be	50		 push	 eax
  002bf	8d 85 a8 fd ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  002c5	50		 push	 eax
  002c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  002cc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 57   : 		rkLoader.LoadString( szKey, "", szBuf, MAX_PATH );

  002cf	68 04 01 00 00	 push	 260			; 00000104H
  002d4	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  002da	50		 push	 eax
  002db	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  002e0	8d 85 a8 fd ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  002e6	50		 push	 eax
  002e7	8b cf		 mov	 ecx, edi
  002e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 58   : 		m_OwnerBuffList.push_back( szBuf );

  002ef	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  002f5	50		 push	 eax
  002f6	8d 4d c0	 lea	 ecx, DWORD PTR $T552037[ebp]
  002f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  002ff	8d 45 c0	 lea	 eax, DWORD PTR $T552037[ebp]
  00302	50		 push	 eax
  00303	8d 8e 70 09 00
	00		 lea	 ecx, DWORD PTR [esi+2416]
  00309	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0030c	e8 00 00 00 00	 call	 ?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::push_back
  00311	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00315	8d 4d c0	 lea	 ecx, DWORD PTR $T552037[ebp]
  00318	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0031e	8b 8d a4 fd ff
	ff		 mov	 ecx, DWORD PTR tv5427[ebp]
  00324	3b 8d a0 fd ff
	ff		 cmp	 ecx, DWORD PTR _nBuffCnt$[ebp]
  0032a	0f 8c 49 ff ff
	ff		 jl	 $LL102@LoadProper
$LN100@LoadProper:

; 59   : 	}
; 60   : 
; 61   : 	m_fCheckDist = rkLoader.LoadFloat_e( "check_dist", 0.0f );

  00330	6a 02		 push	 2
  00332	c7 45 b0 8e 84
	8e 89		 mov	 DWORD PTR __k$552771[ebp], -1987148658 ; 898e848eH
  00339	c7 45 b4 86 b3
	8f 83		 mov	 DWORD PTR __k$552771[ebp+4], -2087734394 ; 838fb386H
  00340	66 c7 45 b8 9e
	98		 mov	 WORD PTR __k$552771[ebp+8], 39070 ; 0000989eH
  00346	8d 45 b0	 lea	 eax, DWORD PTR __k$552771[ebp]
  00349	88 5d ba	 mov	 BYTE PTR __k$552771[ebp+10], bl
  0034c	59		 pop	 ecx
$LL765@LoadProper:
  0034d	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00353	83 c0 04	 add	 eax, 4
  00356	49		 dec	 ecx
  00357	75 f4		 jne	 SHORT $LL765@LoadProper
  00359	6a 08		 push	 8
  0035b	58		 pop	 eax
$LL762@LoadProper:
  0035c	8b c8		 mov	 ecx, eax
  0035e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00364	79 05		 jns	 SHORT $LN804@LoadProper
  00366	49		 dec	 ecx
  00367	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0036a	41		 inc	 ecx
$LN804@LoadProper:
  0036b	b2 ed		 mov	 dl, -19			; ffffffedH
  0036d	2a d1		 sub	 dl, cl
  0036f	30 54 05 b0	 xor	 BYTE PTR __k$552771[ebp+eax], dl
  00373	40		 inc	 eax
  00374	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00377	7c e3		 jl	 SHORT $LL762@LoadProper
  00379	0f 57 c0	 xorps	 xmm0, xmm0
  0037c	51		 push	 ecx
  0037d	8d 45 b0	 lea	 eax, DWORD PTR __k$552771[ebp]
  00380	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00385	50		 push	 eax
  00386	8b cf		 mov	 ecx, edi
  00388	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0038e	d9 9e 9c 09 00
	00		 fstp	 DWORD PTR [esi+2460]

; 62   : }

  00394	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00399	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadProperty@ioCheckChainBuff2@@UAEXAAVioINILoader@@@Z$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR $T552037[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?LoadProperty@ioCheckChainBuff2@@UAEXAAVioINILoader@@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 8a 9c fd ff
	ff		 mov	 ecx, DWORD PTR [edx-612]
  00016	33 c8		 xor	 ecx, eax
  00018	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadProperty@ioCheckChainBuff2@@UAEXAAVioINILoader@@@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadProperty@ioCheckChainBuff2@@UAEXAAVioINILoader@@@Z ENDP ; ioCheckChainBuff2::LoadProperty
END
