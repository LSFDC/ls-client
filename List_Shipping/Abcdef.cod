; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\Abcdef.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CB@IFIDMFHC@?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@ ; `string'
PUBLIC	??_C@_01JOAMLHOP@?9?$AA@			; `string'
PUBLIC	?sm_U2@Abcdef@@0QBHB				; Abcdef::sm_U2
PUBLIC	?sm_U3@Abcdef@@0QBHB				; Abcdef::sm_U3
PUBLIC	?sm_U4@Abcdef@@0QBHB				; Abcdef::sm_U4
PUBLIC	?sm_alog@Abcdef@@0QBHB				; Abcdef::sm_alog
PUBLIC	?sm_log@Abcdef@@0QBHB				; Abcdef::sm_log
PUBLIC	?sm_S@Abcdef@@0QBDB				; Abcdef::sm_S
PUBLIC	?sm_Si@Abcdef@@0QBDB				; Abcdef::sm_Si
PUBLIC	?sm_T1@Abcdef@@0QBHB				; Abcdef::sm_T1
PUBLIC	?sm_T2@Abcdef@@0QBHB				; Abcdef::sm_T2
PUBLIC	?sm_T3@Abcdef@@0QBHB				; Abcdef::sm_T3
PUBLIC	?sm_T4@Abcdef@@0QBHB				; Abcdef::sm_T4
PUBLIC	?sm_T5@Abcdef@@0QBHB				; Abcdef::sm_T5
PUBLIC	?sm_T6@Abcdef@@0QBHB				; Abcdef::sm_T6
PUBLIC	?sm_T7@Abcdef@@0QBHB				; Abcdef::sm_T7
PUBLIC	?sm_T8@Abcdef@@0QBHB				; Abcdef::sm_T8
PUBLIC	?sm_U1@Abcdef@@0QBHB				; Abcdef::sm_U1
PUBLIC	?sm_rcon@Abcdef@@0QBDB				; Abcdef::sm_rcon
PUBLIC	?sm_shifts@Abcdef@@0QAY131$$CBHA		; Abcdef::sm_shifts
PUBLIC	?sm_szErrorMsg1@Abcdef@@0PBDB			; Abcdef::sm_szErrorMsg1
PUBLIC	?sm_szErrorMsg2@Abcdef@@0PBDB			; Abcdef::sm_szErrorMsg2
PUBLIC	?sm_chain0@Abcdef@@2PBDB			; Abcdef::sm_chain0
;	COMDAT ??_C@_0CB@IFIDMFHC@?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@
CONST	SEGMENT
??_C@_0CB@IFIDMFHC@?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@ DB 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
?sm_szErrorMsg1@Abcdef@@0PBDB DD FLAT:??_C@_01JOAMLHOP@?9?$AA@ ; Abcdef::sm_szErrorMsg1
?sm_szErrorMsg2@Abcdef@@0PBDB DD FLAT:??_C@_01JOAMLHOP@?9?$AA@ ; Abcdef::sm_szErrorMsg2
?sm_chain0@Abcdef@@2PBDB DD FLAT:??_C@_0CB@IFIDMFHC@?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@ ; Abcdef::sm_chain0
_DATA	ENDS
;	COMDAT ??_C@_01JOAMLHOP@?9?$AA@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9?$AA@ DB '-', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
?sm_U2@Abcdef@@0QBHB DD 00H				; Abcdef::sm_U2
	DD	0b0e090dH
	DD	0161c121aH
	DD	01d121b17H
	DD	02c382434H
	DD	027362d39H
	DD	03a24362eH
	DD	0312a3f23H
	DD	058704868H
	DD	0537e4165H
	DD	04e6c5a72H
	DD	04562537fH
	DD	074486c5cH
	DD	07f466551H
	DD	062547e46H
	DD	0695a774bH
	DD	0b0e090d0H
	DD	0bbee99ddH
	DD	0a6fc82caH
	DD	0adf28bc7H
	DD	09cd8b4e4H
	DD	097d6bde9H
	DD	08ac4a6feH
	DD	081caaff3H
	DD	0e890d8b8H
	DD	0e39ed1b5H
	DD	0fe8ccaa2H
	DD	0f582c3afH
	DD	0c4a8fc8cH
	DD	0cfa6f581H
	DD	0d2b4ee96H
	DD	0d9bae79bH
	DD	07bdb3bbbH
	DD	070d532b6H
	DD	06dc729a1H
	DD	066c920acH
	DD	057e31f8fH
	DD	05ced1682H
	DD	041ff0d95H
	DD	04af10498H
	DD	023ab73d3H
	DD	028a57adeH
	DD	035b761c9H
	DD	03eb968c4H
	DD	0f9357e7H
	DD	049d5eeaH
	DD	0198f45fdH
	DD	012814cf0H
	DD	0cb3bab6bH
	DD	0c035a266H
	DD	0dd27b971H
	DD	0d629b07cH
	DD	0e7038f5fH
	DD	0ec0d8652H
	DD	0f11f9d45H
	DD	0fa119448H
	DD	0934be303H
	DD	09845ea0eH
	DD	08557f119H
	DD	08e59f814H
	DD	0bf73c737H
	DD	0b47dce3aH
	DD	0a96fd52dH
	DD	0a261dc20H
	DD	0f6ad766dH
	DD	0fda37f60H
	DD	0e0b16477H
	DD	0ebbf6d7aH
	DD	0da955259H
	DD	0d19b5b54H
	DD	0cc894043H
	DD	0c787494eH
	DD	0aedd3e05H
	DD	0a5d33708H
	DD	0b8c12c1fH
	DD	0b3cf2512H
	DD	082e51a31H
	DD	089eb133cH
	DD	094f9082bH
	DD	09ff70126H
	DD	0464de6bdH
	DD	04d43efb0H
	DD	05051f4a7H
	DD	05b5ffdaaH
	DD	06a75c289H
	DD	0617bcb84H
	DD	07c69d093H
	DD	07767d99eH
	DD	01e3daed5H
	DD	01533a7d8H
	DD	0821bccfH
	DD	032fb5c2H
	DD	032058ae1H
	DD	0390b83ecH
	DD	0241998fbH
	DD	02f1791f6H
	DD	08d764dd6H
	DD	0867844dbH
	DD	09b6a5fccH
	DD	0906456c1H
	DD	0a14e69e2H
	DD	0aa4060efH
	DD	0b7527bf8H
	DD	0bc5c72f5H
	DD	0d50605beH
	DD	0de080cb3H
	DD	0c31a17a4H
	DD	0c8141ea9H
	DD	0f93e218aH
	DD	0f2302887H
	DD	0ef223390H
	DD	0e42c3a9dH
	DD	03d96dd06H
	DD	03698d40bH
	DD	02b8acf1cH
	DD	02084c611H
	DD	011aef932H
	DD	01aa0f03fH
	DD	07b2eb28H
	DD	0cbce225H
	DD	065e6956eH
	DD	06ee89c63H
	DD	073fa8774H
	DD	078f48e79H
	DD	049deb15aH
	DD	042d0b857H
	DD	05fc2a340H
	DD	054ccaa4dH
	DD	0f741ecdaH
	DD	0fc4fe5d7H
	DD	0e15dfec0H
	DD	0ea53f7cdH
	DD	0db79c8eeH
	DD	0d077c1e3H
	DD	0cd65daf4H
	DD	0c66bd3f9H
	DD	0af31a4b2H
	DD	0a43fadbfH
	DD	0b92db6a8H
	DD	0b223bfa5H
	DD	083098086H
	DD	08807898bH
	DD	09515929cH
	DD	09e1b9b91H
	DD	047a17c0aH
	DD	04caf7507H
	DD	051bd6e10H
	DD	05ab3671dH
	DD	06b99583eH
	DD	060975133H
	DD	07d854a24H
	DD	0768b4329H
	DD	01fd13462H
	DD	014df3d6fH
	DD	09cd2678H
	DD	02c32f75H
	DD	033e91056H
	DD	038e7195bH
	DD	025f5024cH
	DD	02efb0b41H
	DD	08c9ad761H
	DD	08794de6cH
	DD	09a86c57bH
	DD	09188cc76H
	DD	0a0a2f355H
	DD	0abacfa58H
	DD	0b6bee14fH
	DD	0bdb0e842H
	DD	0d4ea9f09H
	DD	0dfe49604H
	DD	0c2f68d13H
	DD	0c9f8841eH
	DD	0f8d2bb3dH
	DD	0f3dcb230H
	DD	0eecea927H
	DD	0e5c0a02aH
	DD	03c7a47b1H
	DD	037744ebcH
	DD	02a6655abH
	DD	021685ca6H
	DD	010426385H
	DD	01b4c6a88H
	DD	065e719fH
	DD	0d507892H
	DD	0640a0fd9H
	DD	06f0406d4H
	DD	072161dc3H
	DD	0791814ceH
	DD	048322bedH
	DD	0433c22e0H
	DD	05e2e39f7H
	DD	0552030faH
	DD	01ec9ab7H
	DD	0ae293baH
	DD	017f088adH
	DD	01cfe81a0H
	DD	02dd4be83H
	DD	026dab78eH
	DD	03bc8ac99H
	DD	030c6a594H
	DD	0599cd2dfH
	DD	05292dbd2H
	DD	04f80c0c5H
	DD	0448ec9c8H
	DD	075a4f6ebH
	DD	07eaaffe6H
	DD	063b8e4f1H
	DD	068b6edfcH
	DD	0b10c0a67H
	DD	0ba02036aH
	DD	0a710187dH
	DD	0ac1e1170H
	DD	09d342e53H
	DD	0963a275eH
	DD	08b283c49H
	DD	080263544H
	DD	0e97c420fH
	DD	0e2724b02H
	DD	0ff605015H
	DD	0f46e5918H
	DD	0c544663bH
	DD	0ce4a6f36H
	DD	0d3587421H
	DD	0d8567d2cH
	DD	07a37a10cH
	DD	07139a801H
	DD	06c2bb316H
	DD	06725ba1bH
	DD	0560f8538H
	DD	05d018c35H
	DD	040139722H
	DD	04b1d9e2fH
	DD	02247e964H
	DD	02949e069H
	DD	0345bfb7eH
	DD	03f55f273H
	DD	0e7fcd50H
	DD	0571c45dH
	DD	01863df4aH
	DD	0136dd647H
	DD	0cad731dcH
	DD	0c1d938d1H
	DD	0dccb23c6H
	DD	0d7c52acbH
	DD	0e6ef15e8H
	DD	0ede11ce5H
	DD	0f0f307f2H
	DD	0fbfd0effH
	DD	092a779b4H
	DD	099a970b9H
	DD	084bb6baeH
	DD	08fb562a3H
	DD	0be9f5d80H
	DD	0b591548dH
	DD	0a8834f9aH
	DD	0a38d4697H
?sm_U3@Abcdef@@0QBHB DD 00H				; Abcdef::sm_U3
	DD	0d0b0e09H
	DD	01a161c12H
	DD	0171d121bH
	DD	0342c3824H
	DD	03927362dH
	DD	02e3a2436H
	DD	023312a3fH
	DD	068587048H
	DD	065537e41H
	DD	0724e6c5aH
	DD	07f456253H
	DD	05c74486cH
	DD	0517f4665H
	DD	04662547eH
	DD	04b695a77H
	DD	0d0b0e090H
	DD	0ddbbee99H
	DD	0caa6fc82H
	DD	0c7adf28bH
	DD	0e49cd8b4H
	DD	0e997d6bdH
	DD	0fe8ac4a6H
	DD	0f381caafH
	DD	0b8e890d8H
	DD	0b5e39ed1H
	DD	0a2fe8ccaH
	DD	0aff582c3H
	DD	08cc4a8fcH
	DD	081cfa6f5H
	DD	096d2b4eeH
	DD	09bd9bae7H
	DD	0bb7bdb3bH
	DD	0b670d532H
	DD	0a16dc729H
	DD	0ac66c920H
	DD	08f57e31fH
	DD	0825ced16H
	DD	09541ff0dH
	DD	0984af104H
	DD	0d323ab73H
	DD	0de28a57aH
	DD	0c935b761H
	DD	0c43eb968H
	DD	0e70f9357H
	DD	0ea049d5eH
	DD	0fd198f45H
	DD	0f012814cH
	DD	06bcb3babH
	DD	066c035a2H
	DD	071dd27b9H
	DD	07cd629b0H
	DD	05fe7038fH
	DD	052ec0d86H
	DD	045f11f9dH
	DD	048fa1194H
	DD	03934be3H
	DD	0e9845eaH
	DD	0198557f1H
	DD	0148e59f8H
	DD	037bf73c7H
	DD	03ab47dceH
	DD	02da96fd5H
	DD	020a261dcH
	DD	06df6ad76H
	DD	060fda37fH
	DD	077e0b164H
	DD	07aebbf6dH
	DD	059da9552H
	DD	054d19b5bH
	DD	043cc8940H
	DD	04ec78749H
	DD	05aedd3eH
	DD	08a5d337H
	DD	01fb8c12cH
	DD	012b3cf25H
	DD	03182e51aH
	DD	03c89eb13H
	DD	02b94f908H
	DD	0269ff701H
	DD	0bd464de6H
	DD	0b04d43efH
	DD	0a75051f4H
	DD	0aa5b5ffdH
	DD	0896a75c2H
	DD	084617bcbH
	DD	0937c69d0H
	DD	09e7767d9H
	DD	0d51e3daeH
	DD	0d81533a7H
	DD	0cf0821bcH
	DD	0c2032fb5H
	DD	0e132058aH
	DD	0ec390b83H
	DD	0fb241998H
	DD	0f62f1791H
	DD	0d68d764dH
	DD	0db867844H
	DD	0cc9b6a5fH
	DD	0c1906456H
	DD	0e2a14e69H
	DD	0efaa4060H
	DD	0f8b7527bH
	DD	0f5bc5c72H
	DD	0bed50605H
	DD	0b3de080cH
	DD	0a4c31a17H
	DD	0a9c8141eH
	DD	08af93e21H
	DD	087f23028H
	DD	090ef2233H
	DD	09de42c3aH
	DD	063d96ddH
	DD	0b3698d4H
	DD	01c2b8acfH
	DD	0112084c6H
	DD	03211aef9H
	DD	03f1aa0f0H
	DD	02807b2ebH
	DD	0250cbce2H
	DD	06e65e695H
	DD	0636ee89cH
	DD	07473fa87H
	DD	07978f48eH
	DD	05a49deb1H
	DD	05742d0b8H
	DD	0405fc2a3H
	DD	04d54ccaaH
	DD	0daf741ecH
	DD	0d7fc4fe5H
	DD	0c0e15dfeH
	DD	0cdea53f7H
	DD	0eedb79c8H
	DD	0e3d077c1H
	DD	0f4cd65daH
	DD	0f9c66bd3H
	DD	0b2af31a4H
	DD	0bfa43fadH
	DD	0a8b92db6H
	DD	0a5b223bfH
	DD	086830980H
	DD	08b880789H
	DD	09c951592H
	DD	0919e1b9bH
	DD	0a47a17cH
	DD	074caf75H
	DD	01051bd6eH
	DD	01d5ab367H
	DD	03e6b9958H
	DD	033609751H
	DD	0247d854aH
	DD	029768b43H
	DD	0621fd134H
	DD	06f14df3dH
	DD	07809cd26H
	DD	07502c32fH
	DD	05633e910H
	DD	05b38e719H
	DD	04c25f502H
	DD	0412efb0bH
	DD	0618c9ad7H
	DD	06c8794deH
	DD	07b9a86c5H
	DD	0769188ccH
	DD	055a0a2f3H
	DD	058abacfaH
	DD	04fb6bee1H
	DD	042bdb0e8H
	DD	09d4ea9fH
	DD	04dfe496H
	DD	013c2f68dH
	DD	01ec9f884H
	DD	03df8d2bbH
	DD	030f3dcb2H
	DD	027eecea9H
	DD	02ae5c0a0H
	DD	0b13c7a47H
	DD	0bc37744eH
	DD	0ab2a6655H
	DD	0a621685cH
	DD	085104263H
	DD	0881b4c6aH
	DD	09f065e71H
	DD	0920d5078H
	DD	0d9640a0fH
	DD	0d46f0406H
	DD	0c372161dH
	DD	0ce791814H
	DD	0ed48322bH
	DD	0e0433c22H
	DD	0f75e2e39H
	DD	0fa552030H
	DD	0b701ec9aH
	DD	0ba0ae293H
	DD	0ad17f088H
	DD	0a01cfe81H
	DD	0832dd4beH
	DD	08e26dab7H
	DD	0993bc8acH
	DD	09430c6a5H
	DD	0df599cd2H
	DD	0d25292dbH
	DD	0c54f80c0H
	DD	0c8448ec9H
	DD	0eb75a4f6H
	DD	0e67eaaffH
	DD	0f163b8e4H
	DD	0fc68b6edH
	DD	067b10c0aH
	DD	06aba0203H
	DD	07da71018H
	DD	070ac1e11H
	DD	0539d342eH
	DD	05e963a27H
	DD	0498b283cH
	DD	044802635H
	DD	0fe97c42H
	DD	02e2724bH
	DD	015ff6050H
	DD	018f46e59H
	DD	03bc54466H
	DD	036ce4a6fH
	DD	021d35874H
	DD	02cd8567dH
	DD	0c7a37a1H
	DD	017139a8H
	DD	0166c2bb3H
	DD	01b6725baH
	DD	038560f85H
	DD	0355d018cH
	DD	022401397H
	DD	02f4b1d9eH
	DD	0642247e9H
	DD	0692949e0H
	DD	07e345bfbH
	DD	0733f55f2H
	DD	0500e7fcdH
	DD	05d0571c4H
	DD	04a1863dfH
	DD	047136dd6H
	DD	0dccad731H
	DD	0d1c1d938H
	DD	0c6dccb23H
	DD	0cbd7c52aH
	DD	0e8e6ef15H
	DD	0e5ede11cH
	DD	0f2f0f307H
	DD	0fffbfd0eH
	DD	0b492a779H
	DD	0b999a970H
	DD	0ae84bb6bH
	DD	0a38fb562H
	DD	080be9f5dH
	DD	08db59154H
	DD	09aa8834fH
	DD	097a38d46H
?sm_U4@Abcdef@@0QBHB DD 00H				; Abcdef::sm_U4
	DD	090d0b0eH
	DD	0121a161cH
	DD	01b171d12H
	DD	024342c38H
	DD	02d392736H
	DD	0362e3a24H
	DD	03f23312aH
	DD	048685870H
	DD	04165537eH
	DD	05a724e6cH
	DD	0537f4562H
	DD	06c5c7448H
	DD	065517f46H
	DD	07e466254H
	DD	0774b695aH
	DD	090d0b0e0H
	DD	099ddbbeeH
	DD	082caa6fcH
	DD	08bc7adf2H
	DD	0b4e49cd8H
	DD	0bde997d6H
	DD	0a6fe8ac4H
	DD	0aff381caH
	DD	0d8b8e890H
	DD	0d1b5e39eH
	DD	0caa2fe8cH
	DD	0c3aff582H
	DD	0fc8cc4a8H
	DD	0f581cfa6H
	DD	0ee96d2b4H
	DD	0e79bd9baH
	DD	03bbb7bdbH
	DD	032b670d5H
	DD	029a16dc7H
	DD	020ac66c9H
	DD	01f8f57e3H
	DD	016825cedH
	DD	0d9541ffH
	DD	04984af1H
	DD	073d323abH
	DD	07ade28a5H
	DD	061c935b7H
	DD	068c43eb9H
	DD	057e70f93H
	DD	05eea049dH
	DD	045fd198fH
	DD	04cf01281H
	DD	0ab6bcb3bH
	DD	0a266c035H
	DD	0b971dd27H
	DD	0b07cd629H
	DD	08f5fe703H
	DD	08652ec0dH
	DD	09d45f11fH
	DD	09448fa11H
	DD	0e303934bH
	DD	0ea0e9845H
	DD	0f1198557H
	DD	0f8148e59H
	DD	0c737bf73H
	DD	0ce3ab47dH
	DD	0d52da96fH
	DD	0dc20a261H
	DD	0766df6adH
	DD	07f60fda3H
	DD	06477e0b1H
	DD	06d7aebbfH
	DD	05259da95H
	DD	05b54d19bH
	DD	04043cc89H
	DD	0494ec787H
	DD	03e05aeddH
	DD	03708a5d3H
	DD	02c1fb8c1H
	DD	02512b3cfH
	DD	01a3182e5H
	DD	0133c89ebH
	DD	082b94f9H
	DD	01269ff7H
	DD	0e6bd464dH
	DD	0efb04d43H
	DD	0f4a75051H
	DD	0fdaa5b5fH
	DD	0c2896a75H
	DD	0cb84617bH
	DD	0d0937c69H
	DD	0d99e7767H
	DD	0aed51e3dH
	DD	0a7d81533H
	DD	0bccf0821H
	DD	0b5c2032fH
	DD	08ae13205H
	DD	083ec390bH
	DD	098fb2419H
	DD	091f62f17H
	DD	04dd68d76H
	DD	044db8678H
	DD	05fcc9b6aH
	DD	056c19064H
	DD	069e2a14eH
	DD	060efaa40H
	DD	07bf8b752H
	DD	072f5bc5cH
	DD	05bed506H
	DD	0cb3de08H
	DD	017a4c31aH
	DD	01ea9c814H
	DD	0218af93eH
	DD	02887f230H
	DD	03390ef22H
	DD	03a9de42cH
	DD	0dd063d96H
	DD	0d40b3698H
	DD	0cf1c2b8aH
	DD	0c6112084H
	DD	0f93211aeH
	DD	0f03f1aa0H
	DD	0eb2807b2H
	DD	0e2250cbcH
	DD	0956e65e6H
	DD	09c636ee8H
	DD	0877473faH
	DD	08e7978f4H
	DD	0b15a49deH
	DD	0b85742d0H
	DD	0a3405fc2H
	DD	0aa4d54ccH
	DD	0ecdaf741H
	DD	0e5d7fc4fH
	DD	0fec0e15dH
	DD	0f7cdea53H
	DD	0c8eedb79H
	DD	0c1e3d077H
	DD	0daf4cd65H
	DD	0d3f9c66bH
	DD	0a4b2af31H
	DD	0adbfa43fH
	DD	0b6a8b92dH
	DD	0bfa5b223H
	DD	080868309H
	DD	0898b8807H
	DD	0929c9515H
	DD	09b919e1bH
	DD	07c0a47a1H
	DD	075074cafH
	DD	06e1051bdH
	DD	0671d5ab3H
	DD	0583e6b99H
	DD	051336097H
	DD	04a247d85H
	DD	04329768bH
	DD	034621fd1H
	DD	03d6f14dfH
	DD	0267809cdH
	DD	02f7502c3H
	DD	0105633e9H
	DD	0195b38e7H
	DD	024c25f5H
	DD	0b412efbH
	DD	0d7618c9aH
	DD	0de6c8794H
	DD	0c57b9a86H
	DD	0cc769188H
	DD	0f355a0a2H
	DD	0fa58abacH
	DD	0e14fb6beH
	DD	0e842bdb0H
	DD	09f09d4eaH
	DD	09604dfe4H
	DD	08d13c2f6H
	DD	0841ec9f8H
	DD	0bb3df8d2H
	DD	0b230f3dcH
	DD	0a927eeceH
	DD	0a02ae5c0H
	DD	047b13c7aH
	DD	04ebc3774H
	DD	055ab2a66H
	DD	05ca62168H
	DD	063851042H
	DD	06a881b4cH
	DD	0719f065eH
	DD	078920d50H
	DD	0fd9640aH
	DD	06d46f04H
	DD	01dc37216H
	DD	014ce7918H
	DD	02bed4832H
	DD	022e0433cH
	DD	039f75e2eH
	DD	030fa5520H
	DD	09ab701ecH
	DD	093ba0ae2H
	DD	088ad17f0H
	DD	081a01cfeH
	DD	0be832dd4H
	DD	0b78e26daH
	DD	0ac993bc8H
	DD	0a59430c6H
	DD	0d2df599cH
	DD	0dbd25292H
	DD	0c0c54f80H
	DD	0c9c8448eH
	DD	0f6eb75a4H
	DD	0ffe67eaaH
	DD	0e4f163b8H
	DD	0edfc68b6H
	DD	0a67b10cH
	DD	036aba02H
	DD	0187da710H
	DD	01170ac1eH
	DD	02e539d34H
	DD	0275e963aH
	DD	03c498b28H
	DD	035448026H
	DD	0420fe97cH
	DD	04b02e272H
	DD	05015ff60H
	DD	05918f46eH
	DD	0663bc544H
	DD	06f36ce4aH
	DD	07421d358H
	DD	07d2cd856H
	DD	0a10c7a37H
	DD	0a8017139H
	DD	0b3166c2bH
	DD	0ba1b6725H
	DD	08538560fH
	DD	08c355d01H
	DD	097224013H
	DD	09e2f4b1dH
	DD	0e9642247H
	DD	0e0692949H
	DD	0fb7e345bH
	DD	0f2733f55H
	DD	0cd500e7fH
	DD	0c45d0571H
	DD	0df4a1863H
	DD	0d647136dH
	DD	031dccad7H
	DD	038d1c1d9H
	DD	023c6dccbH
	DD	02acbd7c5H
	DD	015e8e6efH
	DD	01ce5ede1H
	DD	07f2f0f3H
	DD	0efffbfdH
	DD	079b492a7H
	DD	070b999a9H
	DD	06bae84bbH
	DD	062a38fb5H
	DD	05d80be9fH
	DD	0548db591H
	DD	04f9aa883H
	DD	04697a38dH
?sm_alog@Abcdef@@0QBHB DD 01H				; Abcdef::sm_alog
	DD	03H
	DD	05H
	DD	0fH
	DD	011H
	DD	033H
	DD	055H
	DD	0ffH
	DD	01aH
	DD	02eH
	DD	072H
	DD	096H
	DD	0a1H
	DD	0f8H
	DD	013H
	DD	035H
	DD	05fH
	DD	0e1H
	DD	038H
	DD	048H
	DD	0d8H
	DD	073H
	DD	095H
	DD	0a4H
	DD	0f7H
	DD	02H
	DD	06H
	DD	0aH
	DD	01eH
	DD	022H
	DD	066H
	DD	0aaH
	DD	0e5H
	DD	034H
	DD	05cH
	DD	0e4H
	DD	037H
	DD	059H
	DD	0ebH
	DD	026H
	DD	06aH
	DD	0beH
	DD	0d9H
	DD	070H
	DD	090H
	DD	0abH
	DD	0e6H
	DD	031H
	DD	053H
	DD	0f5H
	DD	04H
	DD	0cH
	DD	014H
	DD	03cH
	DD	044H
	DD	0ccH
	DD	04fH
	DD	0d1H
	DD	068H
	DD	0b8H
	DD	0d3H
	DD	06eH
	DD	0b2H
	DD	0cdH
	DD	04cH
	DD	0d4H
	DD	067H
	DD	0a9H
	DD	0e0H
	DD	03bH
	DD	04dH
	DD	0d7H
	DD	062H
	DD	0a6H
	DD	0f1H
	DD	08H
	DD	018H
	DD	028H
	DD	078H
	DD	088H
	DD	083H
	DD	09eH
	DD	0b9H
	DD	0d0H
	DD	06bH
	DD	0bdH
	DD	0dcH
	DD	07fH
	DD	081H
	DD	098H
	DD	0b3H
	DD	0ceH
	DD	049H
	DD	0dbH
	DD	076H
	DD	09aH
	DD	0b5H
	DD	0c4H
	DD	057H
	DD	0f9H
	DD	010H
	DD	030H
	DD	050H
	DD	0f0H
	DD	0bH
	DD	01dH
	DD	027H
	DD	069H
	DD	0bbH
	DD	0d6H
	DD	061H
	DD	0a3H
	DD	0feH
	DD	019H
	DD	02bH
	DD	07dH
	DD	087H
	DD	092H
	DD	0adH
	DD	0ecH
	DD	02fH
	DD	071H
	DD	093H
	DD	0aeH
	DD	0e9H
	DD	020H
	DD	060H
	DD	0a0H
	DD	0fbH
	DD	016H
	DD	03aH
	DD	04eH
	DD	0d2H
	DD	06dH
	DD	0b7H
	DD	0c2H
	DD	05dH
	DD	0e7H
	DD	032H
	DD	056H
	DD	0faH
	DD	015H
	DD	03fH
	DD	041H
	DD	0c3H
	DD	05eH
	DD	0e2H
	DD	03dH
	DD	047H
	DD	0c9H
	DD	040H
	DD	0c0H
	DD	05bH
	DD	0edH
	DD	02cH
	DD	074H
	DD	09cH
	DD	0bfH
	DD	0daH
	DD	075H
	DD	09fH
	DD	0baH
	DD	0d5H
	DD	064H
	DD	0acH
	DD	0efH
	DD	02aH
	DD	07eH
	DD	082H
	DD	09dH
	DD	0bcH
	DD	0dfH
	DD	07aH
	DD	08eH
	DD	089H
	DD	080H
	DD	09bH
	DD	0b6H
	DD	0c1H
	DD	058H
	DD	0e8H
	DD	023H
	DD	065H
	DD	0afH
	DD	0eaH
	DD	025H
	DD	06fH
	DD	0b1H
	DD	0c8H
	DD	043H
	DD	0c5H
	DD	054H
	DD	0fcH
	DD	01fH
	DD	021H
	DD	063H
	DD	0a5H
	DD	0f4H
	DD	07H
	DD	09H
	DD	01bH
	DD	02dH
	DD	077H
	DD	099H
	DD	0b0H
	DD	0cbH
	DD	046H
	DD	0caH
	DD	045H
	DD	0cfH
	DD	04aH
	DD	0deH
	DD	079H
	DD	08bH
	DD	086H
	DD	091H
	DD	0a8H
	DD	0e3H
	DD	03eH
	DD	042H
	DD	0c6H
	DD	051H
	DD	0f3H
	DD	0eH
	DD	012H
	DD	036H
	DD	05aH
	DD	0eeH
	DD	029H
	DD	07bH
	DD	08dH
	DD	08cH
	DD	08fH
	DD	08aH
	DD	085H
	DD	094H
	DD	0a7H
	DD	0f2H
	DD	0dH
	DD	017H
	DD	039H
	DD	04bH
	DD	0ddH
	DD	07cH
	DD	084H
	DD	097H
	DD	0a2H
	DD	0fdH
	DD	01cH
	DD	024H
	DD	06cH
	DD	0b4H
	DD	0c7H
	DD	052H
	DD	0f6H
	DD	01H
?sm_log@Abcdef@@0QBHB DD 00H				; Abcdef::sm_log
	DD	00H
	DD	019H
	DD	01H
	DD	032H
	DD	02H
	DD	01aH
	DD	0c6H
	DD	04bH
	DD	0c7H
	DD	01bH
	DD	068H
	DD	033H
	DD	0eeH
	DD	0dfH
	DD	03H
	DD	064H
	DD	04H
	DD	0e0H
	DD	0eH
	DD	034H
	DD	08dH
	DD	081H
	DD	0efH
	DD	04cH
	DD	071H
	DD	08H
	DD	0c8H
	DD	0f8H
	DD	069H
	DD	01cH
	DD	0c1H
	DD	07dH
	DD	0c2H
	DD	01dH
	DD	0b5H
	DD	0f9H
	DD	0b9H
	DD	027H
	DD	06aH
	DD	04dH
	DD	0e4H
	DD	0a6H
	DD	072H
	DD	09aH
	DD	0c9H
	DD	09H
	DD	078H
	DD	065H
	DD	02fH
	DD	08aH
	DD	05H
	DD	021H
	DD	0fH
	DD	0e1H
	DD	024H
	DD	012H
	DD	0f0H
	DD	082H
	DD	045H
	DD	035H
	DD	093H
	DD	0daH
	DD	08eH
	DD	096H
	DD	08fH
	DD	0dbH
	DD	0bdH
	DD	036H
	DD	0d0H
	DD	0ceH
	DD	094H
	DD	013H
	DD	05cH
	DD	0d2H
	DD	0f1H
	DD	040H
	DD	046H
	DD	083H
	DD	038H
	DD	066H
	DD	0ddH
	DD	0fdH
	DD	030H
	DD	0bfH
	DD	06H
	DD	08bH
	DD	062H
	DD	0b3H
	DD	025H
	DD	0e2H
	DD	098H
	DD	022H
	DD	088H
	DD	091H
	DD	010H
	DD	07eH
	DD	06eH
	DD	048H
	DD	0c3H
	DD	0a3H
	DD	0b6H
	DD	01eH
	DD	042H
	DD	03aH
	DD	06bH
	DD	028H
	DD	054H
	DD	0faH
	DD	085H
	DD	03dH
	DD	0baH
	DD	02bH
	DD	079H
	DD	0aH
	DD	015H
	DD	09bH
	DD	09fH
	DD	05eH
	DD	0caH
	DD	04eH
	DD	0d4H
	DD	0acH
	DD	0e5H
	DD	0f3H
	DD	073H
	DD	0a7H
	DD	057H
	DD	0afH
	DD	058H
	DD	0a8H
	DD	050H
	DD	0f4H
	DD	0eaH
	DD	0d6H
	DD	074H
	DD	04fH
	DD	0aeH
	DD	0e9H
	DD	0d5H
	DD	0e7H
	DD	0e6H
	DD	0adH
	DD	0e8H
	DD	02cH
	DD	0d7H
	DD	075H
	DD	07aH
	DD	0ebH
	DD	016H
	DD	0bH
	DD	0f5H
	DD	059H
	DD	0cbH
	DD	05fH
	DD	0b0H
	DD	09cH
	DD	0a9H
	DD	051H
	DD	0a0H
	DD	07fH
	DD	0cH
	DD	0f6H
	DD	06fH
	DD	017H
	DD	0c4H
	DD	049H
	DD	0ecH
	DD	0d8H
	DD	043H
	DD	01fH
	DD	02dH
	DD	0a4H
	DD	076H
	DD	07bH
	DD	0b7H
	DD	0ccH
	DD	0bbH
	DD	03eH
	DD	05aH
	DD	0fbH
	DD	060H
	DD	0b1H
	DD	086H
	DD	03bH
	DD	052H
	DD	0a1H
	DD	06cH
	DD	0aaH
	DD	055H
	DD	029H
	DD	09dH
	DD	097H
	DD	0b2H
	DD	087H
	DD	090H
	DD	061H
	DD	0beH
	DD	0dcH
	DD	0fcH
	DD	0bcH
	DD	095H
	DD	0cfH
	DD	0cdH
	DD	037H
	DD	03fH
	DD	05bH
	DD	0d1H
	DD	053H
	DD	039H
	DD	084H
	DD	03cH
	DD	041H
	DD	0a2H
	DD	06dH
	DD	047H
	DD	014H
	DD	02aH
	DD	09eH
	DD	05dH
	DD	056H
	DD	0f2H
	DD	0d3H
	DD	0abH
	DD	044H
	DD	011H
	DD	092H
	DD	0d9H
	DD	023H
	DD	020H
	DD	02eH
	DD	089H
	DD	0b4H
	DD	07cH
	DD	0b8H
	DD	026H
	DD	077H
	DD	099H
	DD	0e3H
	DD	0a5H
	DD	067H
	DD	04aH
	DD	0edH
	DD	0deH
	DD	0c5H
	DD	031H
	DD	0feH
	DD	018H
	DD	0dH
	DD	063H
	DD	08cH
	DD	080H
	DD	0c0H
	DD	0f7H
	DD	070H
	DD	07H
?sm_S@Abcdef@@0QBDB DB 063H				; Abcdef::sm_S
	DB	07cH
	DB	077H
	DB	07bH
	DB	0f2H
	DB	06bH
	DB	06fH
	DB	0c5H
	DB	030H
	DB	01H
	DB	067H
	DB	02bH
	DB	0feH
	DB	0d7H
	DB	0abH
	DB	076H
	DB	0caH
	DB	082H
	DB	0c9H
	DB	07dH
	DB	0faH
	DB	059H
	DB	047H
	DB	0f0H
	DB	0adH
	DB	0d4H
	DB	0a2H
	DB	0afH
	DB	09cH
	DB	0a4H
	DB	072H
	DB	0c0H
	DB	0b7H
	DB	0fdH
	DB	093H
	DB	026H
	DB	036H
	DB	03fH
	DB	0f7H
	DB	0ccH
	DB	034H
	DB	0a5H
	DB	0e5H
	DB	0f1H
	DB	071H
	DB	0d8H
	DB	031H
	DB	015H
	DB	04H
	DB	0c7H
	DB	023H
	DB	0c3H
	DB	018H
	DB	096H
	DB	05H
	DB	09aH
	DB	07H
	DB	012H
	DB	080H
	DB	0e2H
	DB	0ebH
	DB	027H
	DB	0b2H
	DB	075H
	DB	09H
	DB	083H
	DB	02cH
	DB	01aH
	DB	01bH
	DB	06eH
	DB	05aH
	DB	0a0H
	DB	052H
	DB	03bH
	DB	0d6H
	DB	0b3H
	DB	029H
	DB	0e3H
	DB	02fH
	DB	084H
	DB	053H
	DB	0d1H
	DB	00H
	DB	0edH
	DB	020H
	DB	0fcH
	DB	0b1H
	DB	05bH
	DB	06aH
	DB	0cbH
	DB	0beH
	DB	039H
	DB	04aH
	DB	04cH
	DB	058H
	DB	0cfH
	DB	0d0H
	DB	0efH
	DB	0aaH
	DB	0fbH
	DB	043H
	DB	04dH
	DB	033H
	DB	085H
	DB	045H
	DB	0f9H
	DB	02H
	DB	07fH
	DB	050H
	DB	03cH
	DB	09fH
	DB	0a8H
	DB	051H
	DB	0a3H
	DB	040H
	DB	08fH
	DB	092H
	DB	09dH
	DB	038H
	DB	0f5H
	DB	0bcH
	DB	0b6H
	DB	0daH
	DB	021H
	DB	010H
	DB	0ffH
	DB	0f3H
	DB	0d2H
	DB	0cdH
	DB	0cH
	DB	013H
	DB	0ecH
	DB	05fH
	DB	097H
	DB	044H
	DB	017H
	DB	0c4H
	DB	0a7H
	DB	07eH
	DB	03dH
	DB	064H
	DB	05dH
	DB	019H
	DB	073H
	DB	060H
	DB	081H
	DB	04fH
	DB	0dcH
	DB	022H
	DB	02aH
	DB	090H
	DB	088H
	DB	046H
	DB	0eeH
	DB	0b8H
	DB	014H
	DB	0deH
	DB	05eH
	DB	0bH
	DB	0dbH
	DB	0e0H
	DB	032H
	DB	03aH
	DB	0aH
	DB	049H
	DB	06H
	DB	024H
	DB	05cH
	DB	0c2H
	DB	0d3H
	DB	0acH
	DB	062H
	DB	091H
	DB	095H
	DB	0e4H
	DB	079H
	DB	0e7H
	DB	0c8H
	DB	037H
	DB	06dH
	DB	08dH
	DB	0d5H
	DB	04eH
	DB	0a9H
	DB	06cH
	DB	056H
	DB	0f4H
	DB	0eaH
	DB	065H
	DB	07aH
	DB	0aeH
	DB	08H
	DB	0baH
	DB	078H
	DB	025H
	DB	02eH
	DB	01cH
	DB	0a6H
	DB	0b4H
	DB	0c6H
	DB	0e8H
	DB	0ddH
	DB	074H
	DB	01fH
	DB	04bH
	DB	0bdH
	DB	08bH
	DB	08aH
	DB	070H
	DB	03eH
	DB	0b5H
	DB	066H
	DB	048H
	DB	03H
	DB	0f6H
	DB	0eH
	DB	061H
	DB	035H
	DB	057H
	DB	0b9H
	DB	086H
	DB	0c1H
	DB	01dH
	DB	09eH
	DB	0e1H
	DB	0f8H
	DB	098H
	DB	011H
	DB	069H
	DB	0d9H
	DB	08eH
	DB	094H
	DB	09bH
	DB	01eH
	DB	087H
	DB	0e9H
	DB	0ceH
	DB	055H
	DB	028H
	DB	0dfH
	DB	08cH
	DB	0a1H
	DB	089H
	DB	0dH
	DB	0bfH
	DB	0e6H
	DB	042H
	DB	068H
	DB	041H
	DB	099H
	DB	02dH
	DB	0fH
	DB	0b0H
	DB	054H
	DB	0bbH
	DB	016H
?sm_Si@Abcdef@@0QBDB DB 052H				; Abcdef::sm_Si
	DB	09H
	DB	06aH
	DB	0d5H
	DB	030H
	DB	036H
	DB	0a5H
	DB	038H
	DB	0bfH
	DB	040H
	DB	0a3H
	DB	09eH
	DB	081H
	DB	0f3H
	DB	0d7H
	DB	0fbH
	DB	07cH
	DB	0e3H
	DB	039H
	DB	082H
	DB	09bH
	DB	02fH
	DB	0ffH
	DB	087H
	DB	034H
	DB	08eH
	DB	043H
	DB	044H
	DB	0c4H
	DB	0deH
	DB	0e9H
	DB	0cbH
	DB	054H
	DB	07bH
	DB	094H
	DB	032H
	DB	0a6H
	DB	0c2H
	DB	023H
	DB	03dH
	DB	0eeH
	DB	04cH
	DB	095H
	DB	0bH
	DB	042H
	DB	0faH
	DB	0c3H
	DB	04eH
	DB	08H
	DB	02eH
	DB	0a1H
	DB	066H
	DB	028H
	DB	0d9H
	DB	024H
	DB	0b2H
	DB	076H
	DB	05bH
	DB	0a2H
	DB	049H
	DB	06dH
	DB	08bH
	DB	0d1H
	DB	025H
	DB	072H
	DB	0f8H
	DB	0f6H
	DB	064H
	DB	086H
	DB	068H
	DB	098H
	DB	016H
	DB	0d4H
	DB	0a4H
	DB	05cH
	DB	0ccH
	DB	05dH
	DB	065H
	DB	0b6H
	DB	092H
	DB	06cH
	DB	070H
	DB	048H
	DB	050H
	DB	0fdH
	DB	0edH
	DB	0b9H
	DB	0daH
	DB	05eH
	DB	015H
	DB	046H
	DB	057H
	DB	0a7H
	DB	08dH
	DB	09dH
	DB	084H
	DB	090H
	DB	0d8H
	DB	0abH
	DB	00H
	DB	08cH
	DB	0bcH
	DB	0d3H
	DB	0aH
	DB	0f7H
	DB	0e4H
	DB	058H
	DB	05H
	DB	0b8H
	DB	0b3H
	DB	045H
	DB	06H
	DB	0d0H
	DB	02cH
	DB	01eH
	DB	08fH
	DB	0caH
	DB	03fH
	DB	0fH
	DB	02H
	DB	0c1H
	DB	0afH
	DB	0bdH
	DB	03H
	DB	01H
	DB	013H
	DB	08aH
	DB	06bH
	DB	03aH
	DB	091H
	DB	011H
	DB	041H
	DB	04fH
	DB	067H
	DB	0dcH
	DB	0eaH
	DB	097H
	DB	0f2H
	DB	0cfH
	DB	0ceH
	DB	0f0H
	DB	0b4H
	DB	0e6H
	DB	073H
	DB	096H
	DB	0acH
	DB	074H
	DB	022H
	DB	0e7H
	DB	0adH
	DB	035H
	DB	085H
	DB	0e2H
	DB	0f9H
	DB	037H
	DB	0e8H
	DB	01cH
	DB	075H
	DB	0dfH
	DB	06eH
	DB	047H
	DB	0f1H
	DB	01aH
	DB	071H
	DB	01dH
	DB	029H
	DB	0c5H
	DB	089H
	DB	06fH
	DB	0b7H
	DB	062H
	DB	0eH
	DB	0aaH
	DB	018H
	DB	0beH
	DB	01bH
	DB	0fcH
	DB	056H
	DB	03eH
	DB	04bH
	DB	0c6H
	DB	0d2H
	DB	079H
	DB	020H
	DB	09aH
	DB	0dbH
	DB	0c0H
	DB	0feH
	DB	078H
	DB	0cdH
	DB	05aH
	DB	0f4H
	DB	01fH
	DB	0ddH
	DB	0a8H
	DB	033H
	DB	088H
	DB	07H
	DB	0c7H
	DB	031H
	DB	0b1H
	DB	012H
	DB	010H
	DB	059H
	DB	027H
	DB	080H
	DB	0ecH
	DB	05fH
	DB	060H
	DB	051H
	DB	07fH
	DB	0a9H
	DB	019H
	DB	0b5H
	DB	04aH
	DB	0dH
	DB	02dH
	DB	0e5H
	DB	07aH
	DB	09fH
	DB	093H
	DB	0c9H
	DB	09cH
	DB	0efH
	DB	0a0H
	DB	0e0H
	DB	03bH
	DB	04dH
	DB	0aeH
	DB	02aH
	DB	0f5H
	DB	0b0H
	DB	0c8H
	DB	0ebH
	DB	0bbH
	DB	03cH
	DB	083H
	DB	053H
	DB	099H
	DB	061H
	DB	017H
	DB	02bH
	DB	04H
	DB	07eH
	DB	0baH
	DB	077H
	DB	0d6H
	DB	026H
	DB	0e1H
	DB	069H
	DB	014H
	DB	063H
	DB	055H
	DB	021H
	DB	0cH
	DB	07dH
?sm_T1@Abcdef@@0QBHB DD 0c66363a5H			; Abcdef::sm_T1
	DD	0f87c7c84H
	DD	0ee777799H
	DD	0f67b7b8dH
	DD	0fff2f20dH
	DD	0d66b6bbdH
	DD	0de6f6fb1H
	DD	091c5c554H
	DD	060303050H
	DD	02010103H
	DD	0ce6767a9H
	DD	0562b2b7dH
	DD	0e7fefe19H
	DD	0b5d7d762H
	DD	04dababe6H
	DD	0ec76769aH
	DD	08fcaca45H
	DD	01f82829dH
	DD	089c9c940H
	DD	0fa7d7d87H
	DD	0effafa15H
	DD	0b25959ebH
	DD	08e4747c9H
	DD	0fbf0f00bH
	DD	041adadecH
	DD	0b3d4d467H
	DD	05fa2a2fdH
	DD	045afafeaH
	DD	0239c9cbfH
	DD	053a4a4f7H
	DD	0e4727296H
	DD	09bc0c05bH
	DD	075b7b7c2H
	DD	0e1fdfd1cH
	DD	03d9393aeH
	DD	04c26266aH
	DD	06c36365aH
	DD	07e3f3f41H
	DD	0f5f7f702H
	DD	083cccc4fH
	DD	06834345cH
	DD	051a5a5f4H
	DD	0d1e5e534H
	DD	0f9f1f108H
	DD	0e2717193H
	DD	0abd8d873H
	DD	062313153H
	DD	02a15153fH
	DD	0804040cH
	DD	095c7c752H
	DD	046232365H
	DD	09dc3c35eH
	DD	030181828H
	DD	0379696a1H
	DD	0a05050fH
	DD	02f9a9ab5H
	DD	0e070709H
	DD	024121236H
	DD	01b80809bH
	DD	0dfe2e23dH
	DD	0cdebeb26H
	DD	04e272769H
	DD	07fb2b2cdH
	DD	0ea75759fH
	DD	01209091bH
	DD	01d83839eH
	DD	0582c2c74H
	DD	0341a1a2eH
	DD	0361b1b2dH
	DD	0dc6e6eb2H
	DD	0b45a5aeeH
	DD	05ba0a0fbH
	DD	0a45252f6H
	DD	0763b3b4dH
	DD	0b7d6d661H
	DD	07db3b3ceH
	DD	05229297bH
	DD	0dde3e33eH
	DD	05e2f2f71H
	DD	013848497H
	DD	0a65353f5H
	DD	0b9d1d168H
	DD	00H
	DD	0c1eded2cH
	DD	040202060H
	DD	0e3fcfc1fH
	DD	079b1b1c8H
	DD	0b65b5bedH
	DD	0d46a6abeH
	DD	08dcbcb46H
	DD	067bebed9H
	DD	07239394bH
	DD	0944a4adeH
	DD	0984c4cd4H
	DD	0b05858e8H
	DD	085cfcf4aH
	DD	0bbd0d06bH
	DD	0c5efef2aH
	DD	04faaaae5H
	DD	0edfbfb16H
	DD	0864343c5H
	DD	09a4d4dd7H
	DD	066333355H
	DD	011858594H
	DD	08a4545cfH
	DD	0e9f9f910H
	DD	04020206H
	DD	0fe7f7f81H
	DD	0a05050f0H
	DD	0783c3c44H
	DD	0259f9fbaH
	DD	04ba8a8e3H
	DD	0a25151f3H
	DD	05da3a3feH
	DD	0804040c0H
	DD	058f8f8aH
	DD	03f9292adH
	DD	0219d9dbcH
	DD	070383848H
	DD	0f1f5f504H
	DD	063bcbcdfH
	DD	077b6b6c1H
	DD	0afdada75H
	DD	042212163H
	DD	020101030H
	DD	0e5ffff1aH
	DD	0fdf3f30eH
	DD	0bfd2d26dH
	DD	081cdcd4cH
	DD	0180c0c14H
	DD	026131335H
	DD	0c3ecec2fH
	DD	0be5f5fe1H
	DD	0359797a2H
	DD	0884444ccH
	DD	02e171739H
	DD	093c4c457H
	DD	055a7a7f2H
	DD	0fc7e7e82H
	DD	07a3d3d47H
	DD	0c86464acH
	DD	0ba5d5de7H
	DD	03219192bH
	DD	0e6737395H
	DD	0c06060a0H
	DD	019818198H
	DD	09e4f4fd1H
	DD	0a3dcdc7fH
	DD	044222266H
	DD	0542a2a7eH
	DD	03b9090abH
	DD	0b888883H
	DD	08c4646caH
	DD	0c7eeee29H
	DD	06bb8b8d3H
	DD	02814143cH
	DD	0a7dede79H
	DD	0bc5e5ee2H
	DD	0160b0b1dH
	DD	0addbdb76H
	DD	0dbe0e03bH
	DD	064323256H
	DD	0743a3a4eH
	DD	0140a0a1eH
	DD	0924949dbH
	DD	0c06060aH
	DD	04824246cH
	DD	0b85c5ce4H
	DD	09fc2c25dH
	DD	0bdd3d36eH
	DD	043acacefH
	DD	0c46262a6H
	DD	0399191a8H
	DD	0319595a4H
	DD	0d3e4e437H
	DD	0f279798bH
	DD	0d5e7e732H
	DD	08bc8c843H
	DD	06e373759H
	DD	0da6d6db7H
	DD	018d8d8cH
	DD	0b1d5d564H
	DD	09c4e4ed2H
	DD	049a9a9e0H
	DD	0d86c6cb4H
	DD	0ac5656faH
	DD	0f3f4f407H
	DD	0cfeaea25H
	DD	0ca6565afH
	DD	0f47a7a8eH
	DD	047aeaee9H
	DD	010080818H
	DD	06fbabad5H
	DD	0f0787888H
	DD	04a25256fH
	DD	05c2e2e72H
	DD	0381c1c24H
	DD	057a6a6f1H
	DD	073b4b4c7H
	DD	097c6c651H
	DD	0cbe8e823H
	DD	0a1dddd7cH
	DD	0e874749cH
	DD	03e1f1f21H
	DD	0964b4bddH
	DD	061bdbddcH
	DD	0d8b8b86H
	DD	0f8a8a85H
	DD	0e0707090H
	DD	07c3e3e42H
	DD	071b5b5c4H
	DD	0cc6666aaH
	DD	0904848d8H
	DD	06030305H
	DD	0f7f6f601H
	DD	01c0e0e12H
	DD	0c26161a3H
	DD	06a35355fH
	DD	0ae5757f9H
	DD	069b9b9d0H
	DD	017868691H
	DD	099c1c158H
	DD	03a1d1d27H
	DD	0279e9eb9H
	DD	0d9e1e138H
	DD	0ebf8f813H
	DD	02b9898b3H
	DD	022111133H
	DD	0d26969bbH
	DD	0a9d9d970H
	DD	078e8e89H
	DD	0339494a7H
	DD	02d9b9bb6H
	DD	03c1e1e22H
	DD	015878792H
	DD	0c9e9e920H
	DD	087cece49H
	DD	0aa5555ffH
	DD	050282878H
	DD	0a5dfdf7aH
	DD	038c8c8fH
	DD	059a1a1f8H
	DD	09898980H
	DD	01a0d0d17H
	DD	065bfbfdaH
	DD	0d7e6e631H
	DD	0844242c6H
	DD	0d06868b8H
	DD	0824141c3H
	DD	0299999b0H
	DD	05a2d2d77H
	DD	01e0f0f11H
	DD	07bb0b0cbH
	DD	0a85454fcH
	DD	06dbbbbd6H
	DD	02c16163aH
?sm_T2@Abcdef@@0QBHB DD 0a5c66363H			; Abcdef::sm_T2
	DD	084f87c7cH
	DD	099ee7777H
	DD	08df67b7bH
	DD	0dfff2f2H
	DD	0bdd66b6bH
	DD	0b1de6f6fH
	DD	05491c5c5H
	DD	050603030H
	DD	03020101H
	DD	0a9ce6767H
	DD	07d562b2bH
	DD	019e7fefeH
	DD	062b5d7d7H
	DD	0e64dababH
	DD	09aec7676H
	DD	0458fcacaH
	DD	09d1f8282H
	DD	04089c9c9H
	DD	087fa7d7dH
	DD	015effafaH
	DD	0ebb25959H
	DD	0c98e4747H
	DD	0bfbf0f0H
	DD	0ec41adadH
	DD	067b3d4d4H
	DD	0fd5fa2a2H
	DD	0ea45afafH
	DD	0bf239c9cH
	DD	0f753a4a4H
	DD	096e47272H
	DD	05b9bc0c0H
	DD	0c275b7b7H
	DD	01ce1fdfdH
	DD	0ae3d9393H
	DD	06a4c2626H
	DD	05a6c3636H
	DD	0417e3f3fH
	DD	02f5f7f7H
	DD	04f83ccccH
	DD	05c683434H
	DD	0f451a5a5H
	DD	034d1e5e5H
	DD	08f9f1f1H
	DD	093e27171H
	DD	073abd8d8H
	DD	053623131H
	DD	03f2a1515H
	DD	0c080404H
	DD	05295c7c7H
	DD	065462323H
	DD	05e9dc3c3H
	DD	028301818H
	DD	0a1379696H
	DD	0f0a0505H
	DD	0b52f9a9aH
	DD	090e0707H
	DD	036241212H
	DD	09b1b8080H
	DD	03ddfe2e2H
	DD	026cdebebH
	DD	0694e2727H
	DD	0cd7fb2b2H
	DD	09fea7575H
	DD	01b120909H
	DD	09e1d8383H
	DD	074582c2cH
	DD	02e341a1aH
	DD	02d361b1bH
	DD	0b2dc6e6eH
	DD	0eeb45a5aH
	DD	0fb5ba0a0H
	DD	0f6a45252H
	DD	04d763b3bH
	DD	061b7d6d6H
	DD	0ce7db3b3H
	DD	07b522929H
	DD	03edde3e3H
	DD	0715e2f2fH
	DD	097138484H
	DD	0f5a65353H
	DD	068b9d1d1H
	DD	00H
	DD	02cc1ededH
	DD	060402020H
	DD	01fe3fcfcH
	DD	0c879b1b1H
	DD	0edb65b5bH
	DD	0bed46a6aH
	DD	0468dcbcbH
	DD	0d967bebeH
	DD	04b723939H
	DD	0de944a4aH
	DD	0d4984c4cH
	DD	0e8b05858H
	DD	04a85cfcfH
	DD	06bbbd0d0H
	DD	02ac5efefH
	DD	0e54faaaaH
	DD	016edfbfbH
	DD	0c5864343H
	DD	0d79a4d4dH
	DD	055663333H
	DD	094118585H
	DD	0cf8a4545H
	DD	010e9f9f9H
	DD	06040202H
	DD	081fe7f7fH
	DD	0f0a05050H
	DD	044783c3cH
	DD	0ba259f9fH
	DD	0e34ba8a8H
	DD	0f3a25151H
	DD	0fe5da3a3H
	DD	0c0804040H
	DD	08a058f8fH
	DD	0ad3f9292H
	DD	0bc219d9dH
	DD	048703838H
	DD	04f1f5f5H
	DD	0df63bcbcH
	DD	0c177b6b6H
	DD	075afdadaH
	DD	063422121H
	DD	030201010H
	DD	01ae5ffffH
	DD	0efdf3f3H
	DD	06dbfd2d2H
	DD	04c81cdcdH
	DD	014180c0cH
	DD	035261313H
	DD	02fc3ececH
	DD	0e1be5f5fH
	DD	0a2359797H
	DD	0cc884444H
	DD	0392e1717H
	DD	05793c4c4H
	DD	0f255a7a7H
	DD	082fc7e7eH
	DD	0477a3d3dH
	DD	0acc86464H
	DD	0e7ba5d5dH
	DD	02b321919H
	DD	095e67373H
	DD	0a0c06060H
	DD	098198181H
	DD	0d19e4f4fH
	DD	07fa3dcdcH
	DD	066442222H
	DD	07e542a2aH
	DD	0ab3b9090H
	DD	0830b8888H
	DD	0ca8c4646H
	DD	029c7eeeeH
	DD	0d36bb8b8H
	DD	03c281414H
	DD	079a7dedeH
	DD	0e2bc5e5eH
	DD	01d160b0bH
	DD	076addbdbH
	DD	03bdbe0e0H
	DD	056643232H
	DD	04e743a3aH
	DD	01e140a0aH
	DD	0db924949H
	DD	0a0c0606H
	DD	06c482424H
	DD	0e4b85c5cH
	DD	05d9fc2c2H
	DD	06ebdd3d3H
	DD	0ef43acacH
	DD	0a6c46262H
	DD	0a8399191H
	DD	0a4319595H
	DD	037d3e4e4H
	DD	08bf27979H
	DD	032d5e7e7H
	DD	0438bc8c8H
	DD	0596e3737H
	DD	0b7da6d6dH
	DD	08c018d8dH
	DD	064b1d5d5H
	DD	0d29c4e4eH
	DD	0e049a9a9H
	DD	0b4d86c6cH
	DD	0faac5656H
	DD	07f3f4f4H
	DD	025cfeaeaH
	DD	0afca6565H
	DD	08ef47a7aH
	DD	0e947aeaeH
	DD	018100808H
	DD	0d56fbabaH
	DD	088f07878H
	DD	06f4a2525H
	DD	0725c2e2eH
	DD	024381c1cH
	DD	0f157a6a6H
	DD	0c773b4b4H
	DD	05197c6c6H
	DD	023cbe8e8H
	DD	07ca1ddddH
	DD	09ce87474H
	DD	0213e1f1fH
	DD	0dd964b4bH
	DD	0dc61bdbdH
	DD	0860d8b8bH
	DD	0850f8a8aH
	DD	090e07070H
	DD	0427c3e3eH
	DD	0c471b5b5H
	DD	0aacc6666H
	DD	0d8904848H
	DD	05060303H
	DD	01f7f6f6H
	DD	0121c0e0eH
	DD	0a3c26161H
	DD	05f6a3535H
	DD	0f9ae5757H
	DD	0d069b9b9H
	DD	091178686H
	DD	05899c1c1H
	DD	0273a1d1dH
	DD	0b9279e9eH
	DD	038d9e1e1H
	DD	013ebf8f8H
	DD	0b32b9898H
	DD	033221111H
	DD	0bbd26969H
	DD	070a9d9d9H
	DD	089078e8eH
	DD	0a7339494H
	DD	0b62d9b9bH
	DD	0223c1e1eH
	DD	092158787H
	DD	020c9e9e9H
	DD	04987ceceH
	DD	0ffaa5555H
	DD	078502828H
	DD	07aa5dfdfH
	DD	08f038c8cH
	DD	0f859a1a1H
	DD	080098989H
	DD	0171a0d0dH
	DD	0da65bfbfH
	DD	031d7e6e6H
	DD	0c6844242H
	DD	0b8d06868H
	DD	0c3824141H
	DD	0b0299999H
	DD	0775a2d2dH
	DD	0111e0f0fH
	DD	0cb7bb0b0H
	DD	0fca85454H
	DD	0d66dbbbbH
	DD	03a2c1616H
?sm_T3@Abcdef@@0QBHB DD 063a5c663H			; Abcdef::sm_T3
	DD	07c84f87cH
	DD	07799ee77H
	DD	07b8df67bH
	DD	0f20dfff2H
	DD	06bbdd66bH
	DD	06fb1de6fH
	DD	0c55491c5H
	DD	030506030H
	DD	01030201H
	DD	067a9ce67H
	DD	02b7d562bH
	DD	0fe19e7feH
	DD	0d762b5d7H
	DD	0abe64dabH
	DD	0769aec76H
	DD	0ca458fcaH
	DD	0829d1f82H
	DD	0c94089c9H
	DD	07d87fa7dH
	DD	0fa15effaH
	DD	059ebb259H
	DD	047c98e47H
	DD	0f00bfbf0H
	DD	0adec41adH
	DD	0d467b3d4H
	DD	0a2fd5fa2H
	DD	0afea45afH
	DD	09cbf239cH
	DD	0a4f753a4H
	DD	07296e472H
	DD	0c05b9bc0H
	DD	0b7c275b7H
	DD	0fd1ce1fdH
	DD	093ae3d93H
	DD	0266a4c26H
	DD	0365a6c36H
	DD	03f417e3fH
	DD	0f702f5f7H
	DD	0cc4f83ccH
	DD	0345c6834H
	DD	0a5f451a5H
	DD	0e534d1e5H
	DD	0f108f9f1H
	DD	07193e271H
	DD	0d873abd8H
	DD	031536231H
	DD	0153f2a15H
	DD	040c0804H
	DD	0c75295c7H
	DD	023654623H
	DD	0c35e9dc3H
	DD	018283018H
	DD	096a13796H
	DD	050f0a05H
	DD	09ab52f9aH
	DD	07090e07H
	DD	012362412H
	DD	0809b1b80H
	DD	0e23ddfe2H
	DD	0eb26cdebH
	DD	027694e27H
	DD	0b2cd7fb2H
	DD	0759fea75H
	DD	091b1209H
	DD	0839e1d83H
	DD	02c74582cH
	DD	01a2e341aH
	DD	01b2d361bH
	DD	06eb2dc6eH
	DD	05aeeb45aH
	DD	0a0fb5ba0H
	DD	052f6a452H
	DD	03b4d763bH
	DD	0d661b7d6H
	DD	0b3ce7db3H
	DD	0297b5229H
	DD	0e33edde3H
	DD	02f715e2fH
	DD	084971384H
	DD	053f5a653H
	DD	0d168b9d1H
	DD	00H
	DD	0ed2cc1edH
	DD	020604020H
	DD	0fc1fe3fcH
	DD	0b1c879b1H
	DD	05bedb65bH
	DD	06abed46aH
	DD	0cb468dcbH
	DD	0bed967beH
	DD	0394b7239H
	DD	04ade944aH
	DD	04cd4984cH
	DD	058e8b058H
	DD	0cf4a85cfH
	DD	0d06bbbd0H
	DD	0ef2ac5efH
	DD	0aae54faaH
	DD	0fb16edfbH
	DD	043c58643H
	DD	04dd79a4dH
	DD	033556633H
	DD	085941185H
	DD	045cf8a45H
	DD	0f910e9f9H
	DD	02060402H
	DD	07f81fe7fH
	DD	050f0a050H
	DD	03c44783cH
	DD	09fba259fH
	DD	0a8e34ba8H
	DD	051f3a251H
	DD	0a3fe5da3H
	DD	040c08040H
	DD	08f8a058fH
	DD	092ad3f92H
	DD	09dbc219dH
	DD	038487038H
	DD	0f504f1f5H
	DD	0bcdf63bcH
	DD	0b6c177b6H
	DD	0da75afdaH
	DD	021634221H
	DD	010302010H
	DD	0ff1ae5ffH
	DD	0f30efdf3H
	DD	0d26dbfd2H
	DD	0cd4c81cdH
	DD	0c14180cH
	DD	013352613H
	DD	0ec2fc3ecH
	DD	05fe1be5fH
	DD	097a23597H
	DD	044cc8844H
	DD	017392e17H
	DD	0c45793c4H
	DD	0a7f255a7H
	DD	07e82fc7eH
	DD	03d477a3dH
	DD	064acc864H
	DD	05de7ba5dH
	DD	0192b3219H
	DD	07395e673H
	DD	060a0c060H
	DD	081981981H
	DD	04fd19e4fH
	DD	0dc7fa3dcH
	DD	022664422H
	DD	02a7e542aH
	DD	090ab3b90H
	DD	088830b88H
	DD	046ca8c46H
	DD	0ee29c7eeH
	DD	0b8d36bb8H
	DD	0143c2814H
	DD	0de79a7deH
	DD	05ee2bc5eH
	DD	0b1d160bH
	DD	0db76addbH
	DD	0e03bdbe0H
	DD	032566432H
	DD	03a4e743aH
	DD	0a1e140aH
	DD	049db9249H
	DD	060a0c06H
	DD	0246c4824H
	DD	05ce4b85cH
	DD	0c25d9fc2H
	DD	0d36ebdd3H
	DD	0acef43acH
	DD	062a6c462H
	DD	091a83991H
	DD	095a43195H
	DD	0e437d3e4H
	DD	0798bf279H
	DD	0e732d5e7H
	DD	0c8438bc8H
	DD	037596e37H
	DD	06db7da6dH
	DD	08d8c018dH
	DD	0d564b1d5H
	DD	04ed29c4eH
	DD	0a9e049a9H
	DD	06cb4d86cH
	DD	056faac56H
	DD	0f407f3f4H
	DD	0ea25cfeaH
	DD	065afca65H
	DD	07a8ef47aH
	DD	0aee947aeH
	DD	08181008H
	DD	0bad56fbaH
	DD	07888f078H
	DD	0256f4a25H
	DD	02e725c2eH
	DD	01c24381cH
	DD	0a6f157a6H
	DD	0b4c773b4H
	DD	0c65197c6H
	DD	0e823cbe8H
	DD	0dd7ca1ddH
	DD	0749ce874H
	DD	01f213e1fH
	DD	04bdd964bH
	DD	0bddc61bdH
	DD	08b860d8bH
	DD	08a850f8aH
	DD	07090e070H
	DD	03e427c3eH
	DD	0b5c471b5H
	DD	066aacc66H
	DD	048d89048H
	DD	03050603H
	DD	0f601f7f6H
	DD	0e121c0eH
	DD	061a3c261H
	DD	0355f6a35H
	DD	057f9ae57H
	DD	0b9d069b9H
	DD	086911786H
	DD	0c15899c1H
	DD	01d273a1dH
	DD	09eb9279eH
	DD	0e138d9e1H
	DD	0f813ebf8H
	DD	098b32b98H
	DD	011332211H
	DD	069bbd269H
	DD	0d970a9d9H
	DD	08e89078eH
	DD	094a73394H
	DD	09bb62d9bH
	DD	01e223c1eH
	DD	087921587H
	DD	0e920c9e9H
	DD	0ce4987ceH
	DD	055ffaa55H
	DD	028785028H
	DD	0df7aa5dfH
	DD	08c8f038cH
	DD	0a1f859a1H
	DD	089800989H
	DD	0d171a0dH
	DD	0bfda65bfH
	DD	0e631d7e6H
	DD	042c68442H
	DD	068b8d068H
	DD	041c38241H
	DD	099b02999H
	DD	02d775a2dH
	DD	0f111e0fH
	DD	0b0cb7bb0H
	DD	054fca854H
	DD	0bbd66dbbH
	DD	0163a2c16H
?sm_T4@Abcdef@@0QBHB DD 06363a5c6H			; Abcdef::sm_T4
	DD	07c7c84f8H
	DD	0777799eeH
	DD	07b7b8df6H
	DD	0f2f20dffH
	DD	06b6bbdd6H
	DD	06f6fb1deH
	DD	0c5c55491H
	DD	030305060H
	DD	01010302H
	DD	06767a9ceH
	DD	02b2b7d56H
	DD	0fefe19e7H
	DD	0d7d762b5H
	DD	0ababe64dH
	DD	076769aecH
	DD	0caca458fH
	DD	082829d1fH
	DD	0c9c94089H
	DD	07d7d87faH
	DD	0fafa15efH
	DD	05959ebb2H
	DD	04747c98eH
	DD	0f0f00bfbH
	DD	0adadec41H
	DD	0d4d467b3H
	DD	0a2a2fd5fH
	DD	0afafea45H
	DD	09c9cbf23H
	DD	0a4a4f753H
	DD	0727296e4H
	DD	0c0c05b9bH
	DD	0b7b7c275H
	DD	0fdfd1ce1H
	DD	09393ae3dH
	DD	026266a4cH
	DD	036365a6cH
	DD	03f3f417eH
	DD	0f7f702f5H
	DD	0cccc4f83H
	DD	034345c68H
	DD	0a5a5f451H
	DD	0e5e534d1H
	DD	0f1f108f9H
	DD	0717193e2H
	DD	0d8d873abH
	DD	031315362H
	DD	015153f2aH
	DD	04040c08H
	DD	0c7c75295H
	DD	023236546H
	DD	0c3c35e9dH
	DD	018182830H
	DD	09696a137H
	DD	05050f0aH
	DD	09a9ab52fH
	DD	0707090eH
	DD	012123624H
	DD	080809b1bH
	DD	0e2e23ddfH
	DD	0ebeb26cdH
	DD	02727694eH
	DD	0b2b2cd7fH
	DD	075759feaH
	DD	09091b12H
	DD	083839e1dH
	DD	02c2c7458H
	DD	01a1a2e34H
	DD	01b1b2d36H
	DD	06e6eb2dcH
	DD	05a5aeeb4H
	DD	0a0a0fb5bH
	DD	05252f6a4H
	DD	03b3b4d76H
	DD	0d6d661b7H
	DD	0b3b3ce7dH
	DD	029297b52H
	DD	0e3e33eddH
	DD	02f2f715eH
	DD	084849713H
	DD	05353f5a6H
	DD	0d1d168b9H
	DD	00H
	DD	0eded2cc1H
	DD	020206040H
	DD	0fcfc1fe3H
	DD	0b1b1c879H
	DD	05b5bedb6H
	DD	06a6abed4H
	DD	0cbcb468dH
	DD	0bebed967H
	DD	039394b72H
	DD	04a4ade94H
	DD	04c4cd498H
	DD	05858e8b0H
	DD	0cfcf4a85H
	DD	0d0d06bbbH
	DD	0efef2ac5H
	DD	0aaaae54fH
	DD	0fbfb16edH
	DD	04343c586H
	DD	04d4dd79aH
	DD	033335566H
	DD	085859411H
	DD	04545cf8aH
	DD	0f9f910e9H
	DD	02020604H
	DD	07f7f81feH
	DD	05050f0a0H
	DD	03c3c4478H
	DD	09f9fba25H
	DD	0a8a8e34bH
	DD	05151f3a2H
	DD	0a3a3fe5dH
	DD	04040c080H
	DD	08f8f8a05H
	DD	09292ad3fH
	DD	09d9dbc21H
	DD	038384870H
	DD	0f5f504f1H
	DD	0bcbcdf63H
	DD	0b6b6c177H
	DD	0dada75afH
	DD	021216342H
	DD	010103020H
	DD	0ffff1ae5H
	DD	0f3f30efdH
	DD	0d2d26dbfH
	DD	0cdcd4c81H
	DD	0c0c1418H
	DD	013133526H
	DD	0ecec2fc3H
	DD	05f5fe1beH
	DD	09797a235H
	DD	04444cc88H
	DD	01717392eH
	DD	0c4c45793H
	DD	0a7a7f255H
	DD	07e7e82fcH
	DD	03d3d477aH
	DD	06464acc8H
	DD	05d5de7baH
	DD	019192b32H
	DD	0737395e6H
	DD	06060a0c0H
	DD	081819819H
	DD	04f4fd19eH
	DD	0dcdc7fa3H
	DD	022226644H
	DD	02a2a7e54H
	DD	09090ab3bH
	DD	08888830bH
	DD	04646ca8cH
	DD	0eeee29c7H
	DD	0b8b8d36bH
	DD	014143c28H
	DD	0dede79a7H
	DD	05e5ee2bcH
	DD	0b0b1d16H
	DD	0dbdb76adH
	DD	0e0e03bdbH
	DD	032325664H
	DD	03a3a4e74H
	DD	0a0a1e14H
	DD	04949db92H
	DD	06060a0cH
	DD	024246c48H
	DD	05c5ce4b8H
	DD	0c2c25d9fH
	DD	0d3d36ebdH
	DD	0acacef43H
	DD	06262a6c4H
	DD	09191a839H
	DD	09595a431H
	DD	0e4e437d3H
	DD	079798bf2H
	DD	0e7e732d5H
	DD	0c8c8438bH
	DD	03737596eH
	DD	06d6db7daH
	DD	08d8d8c01H
	DD	0d5d564b1H
	DD	04e4ed29cH
	DD	0a9a9e049H
	DD	06c6cb4d8H
	DD	05656faacH
	DD	0f4f407f3H
	DD	0eaea25cfH
	DD	06565afcaH
	DD	07a7a8ef4H
	DD	0aeaee947H
	DD	08081810H
	DD	0babad56fH
	DD	0787888f0H
	DD	025256f4aH
	DD	02e2e725cH
	DD	01c1c2438H
	DD	0a6a6f157H
	DD	0b4b4c773H
	DD	0c6c65197H
	DD	0e8e823cbH
	DD	0dddd7ca1H
	DD	074749ce8H
	DD	01f1f213eH
	DD	04b4bdd96H
	DD	0bdbddc61H
	DD	08b8b860dH
	DD	08a8a850fH
	DD	0707090e0H
	DD	03e3e427cH
	DD	0b5b5c471H
	DD	06666aaccH
	DD	04848d890H
	DD	03030506H
	DD	0f6f601f7H
	DD	0e0e121cH
	DD	06161a3c2H
	DD	035355f6aH
	DD	05757f9aeH
	DD	0b9b9d069H
	DD	086869117H
	DD	0c1c15899H
	DD	01d1d273aH
	DD	09e9eb927H
	DD	0e1e138d9H
	DD	0f8f813ebH
	DD	09898b32bH
	DD	011113322H
	DD	06969bbd2H
	DD	0d9d970a9H
	DD	08e8e8907H
	DD	09494a733H
	DD	09b9bb62dH
	DD	01e1e223cH
	DD	087879215H
	DD	0e9e920c9H
	DD	0cece4987H
	DD	05555ffaaH
	DD	028287850H
	DD	0dfdf7aa5H
	DD	08c8c8f03H
	DD	0a1a1f859H
	DD	089898009H
	DD	0d0d171aH
	DD	0bfbfda65H
	DD	0e6e631d7H
	DD	04242c684H
	DD	06868b8d0H
	DD	04141c382H
	DD	09999b029H
	DD	02d2d775aH
	DD	0f0f111eH
	DD	0b0b0cb7bH
	DD	05454fca8H
	DD	0bbbbd66dH
	DD	016163a2cH
?sm_T5@Abcdef@@0QBHB DD 051f4a750H			; Abcdef::sm_T5
	DD	07e416553H
	DD	01a17a4c3H
	DD	03a275e96H
	DD	03bab6bcbH
	DD	01f9d45f1H
	DD	0acfa58abH
	DD	04be30393H
	DD	02030fa55H
	DD	0ad766df6H
	DD	088cc7691H
	DD	0f5024c25H
	DD	04fe5d7fcH
	DD	0c52acbd7H
	DD	026354480H
	DD	0b562a38fH
	DD	0deb15a49H
	DD	025ba1b67H
	DD	045ea0e98H
	DD	05dfec0e1H
	DD	0c32f7502H
	DD	0814cf012H
	DD	08d4697a3H
	DD	06bd3f9c6H
	DD	038f5fe7H
	DD	015929c95H
	DD	0bf6d7aebH
	DD	0955259daH
	DD	0d4be832dH
	DD	0587421d3H
	DD	049e06929H
	DD	08ec9c844H
	DD	075c2896aH
	DD	0f48e7978H
	DD	099583e6bH
	DD	027b971ddH
	DD	0bee14fb6H
	DD	0f088ad17H
	DD	0c920ac66H
	DD	07dce3ab4H
	DD	063df4a18H
	DD	0e51a3182H
	DD	097513360H
	DD	062537f45H
	DD	0b16477e0H
	DD	0bb6bae84H
	DD	0fe81a01cH
	DD	0f9082b94H
	DD	070486858H
	DD	08f45fd19H
	DD	094de6c87H
	DD	0527bf8b7H
	DD	0ab73d323H
	DD	0724b02e2H
	DD	0e31f8f57H
	DD	06655ab2aH
	DD	0b2eb2807H
	DD	02fb5c203H
	DD	086c57b9aH
	DD	0d33708a5H
	DD	0302887f2H
	DD	023bfa5b2H
	DD	02036abaH
	DD	0ed16825cH
	DD	08acf1c2bH
	DD	0a779b492H
	DD	0f307f2f0H
	DD	04e69e2a1H
	DD	065daf4cdH
	DD	0605bed5H
	DD	0d134621fH
	DD	0c4a6fe8aH
	DD	0342e539dH
	DD	0a2f355a0H
	DD	058ae132H
	DD	0a4f6eb75H
	DD	0b83ec39H
	DD	04060efaaH
	DD	05e719f06H
	DD	0bd6e1051H
	DD	03e218af9H
	DD	096dd063dH
	DD	0dd3e05aeH
	DD	04de6bd46H
	DD	091548db5H
	DD	071c45d05H
	DD	0406d46fH
	DD	0605015ffH
	DD	01998fb24H
	DD	0d6bde997H
	DD	0894043ccH
	DD	067d99e77H
	DD	0b0e842bdH
	DD	07898b88H
	DD	0e7195b38H
	DD	079c8eedbH
	DD	0a17c0a47H
	DD	07c420fe9H
	DD	0f8841ec9H
	DD	00H
	DD	09808683H
	DD	0322bed48H
	DD	01e1170acH
	DD	06c5a724eH
	DD	0fd0efffbH
	DD	0f853856H
	DD	03daed51eH
	DD	0362d3927H
	DD	0a0fd964H
	DD	0685ca621H
	DD	09b5b54d1H
	DD	024362e3aH
	DD	0c0a67b1H
	DD	09357e70fH
	DD	0b4ee96d2H
	DD	01b9b919eH
	DD	080c0c54fH
	DD	061dc20a2H
	DD	05a774b69H
	DD	01c121a16H
	DD	0e293ba0aH
	DD	0c0a02ae5H
	DD	03c22e043H
	DD	0121b171dH
	DD	0e090d0bH
	DD	0f28bc7adH
	DD	02db6a8b9H
	DD	0141ea9c8H
	DD	057f11985H
	DD	0af75074cH
	DD	0ee99ddbbH
	DD	0a37f60fdH
	DD	0f701269fH
	DD	05c72f5bcH
	DD	044663bc5H
	DD	05bfb7e34H
	DD	08b432976H
	DD	0cb23c6dcH
	DD	0b6edfc68H
	DD	0b8e4f163H
	DD	0d731dccaH
	DD	042638510H
	DD	013972240H
	DD	084c61120H
	DD	0854a247dH
	DD	0d2bb3df8H
	DD	0aef93211H
	DD	0c729a16dH
	DD	01d9e2f4bH
	DD	0dcb230f3H
	DD	0d8652ecH
	DD	077c1e3d0H
	DD	02bb3166cH
	DD	0a970b999H
	DD	0119448faH
	DD	047e96422H
	DD	0a8fc8cc4H
	DD	0a0f03f1aH
	DD	0567d2cd8H
	DD	0223390efH
	DD	087494ec7H
	DD	0d938d1c1H
	DD	08ccaa2feH
	DD	098d40b36H
	DD	0a6f581cfH
	DD	0a57ade28H
	DD	0dab78e26H
	DD	03fadbfa4H
	DD	02c3a9de4H
	DD	05078920dH
	DD	06a5fcc9bH
	DD	0547e4662H
	DD	0f68d13c2H
	DD	090d8b8e8H
	DD	02e39f75eH
	DD	082c3aff5H
	DD	09f5d80beH
	DD	069d0937cH
	DD	06fd52da9H
	DD	0cf2512b3H
	DD	0c8ac993bH
	DD	010187da7H
	DD	0e89c636eH
	DD	0db3bbb7bH
	DD	0cd267809H
	DD	06e5918f4H
	DD	0ec9ab701H
	DD	0834f9aa8H
	DD	0e6956e65H
	DD	0aaffe67eH
	DD	021bccf08H
	DD	0ef15e8e6H
	DD	0bae79bd9H
	DD	04a6f36ceH
	DD	0ea9f09d4H
	DD	029b07cd6H
	DD	031a4b2afH
	DD	02a3f2331H
	DD	0c6a59430H
	DD	035a266c0H
	DD	0744ebc37H
	DD	0fc82caa6H
	DD	0e090d0b0H
	DD	033a7d815H
	DD	0f104984aH
	DD	041ecdaf7H
	DD	07fcd500eH
	DD	01791f62fH
	DD	0764dd68dH
	DD	043efb04dH
	DD	0ccaa4d54H
	DD	0e49604dfH
	DD	09ed1b5e3H
	DD	04c6a881bH
	DD	0c12c1fb8H
	DD	04665517fH
	DD	09d5eea04H
	DD	018c355dH
	DD	0fa877473H
	DD	0fb0b412eH
	DD	0b3671d5aH
	DD	092dbd252H
	DD	0e9105633H
	DD	06dd64713H
	DD	09ad7618cH
	DD	037a10c7aH
	DD	059f8148eH
	DD	0eb133c89H
	DD	0cea927eeH
	DD	0b761c935H
	DD	0e11ce5edH
	DD	07a47b13cH
	DD	09cd2df59H
	DD	055f2733fH
	DD	01814ce79H
	DD	073c737bfH
	DD	053f7cdeaH
	DD	05ffdaa5bH
	DD	0df3d6f14H
	DD	07844db86H
	DD	0caaff381H
	DD	0b968c43eH
	DD	03824342cH
	DD	0c2a3405fH
	DD	0161dc372H
	DD	0bce2250cH
	DD	0283c498bH
	DD	0ff0d9541H
	DD	039a80171H
	DD	080cb3deH
	DD	0d8b4e49cH
	DD	06456c190H
	DD	07bcb8461H
	DD	0d532b670H
	DD	0486c5c74H
	DD	0d0b85742H
?sm_T6@Abcdef@@0QBHB DD 05051f4a7H			; Abcdef::sm_T6
	DD	0537e4165H
	DD	0c31a17a4H
	DD	0963a275eH
	DD	0cb3bab6bH
	DD	0f11f9d45H
	DD	0abacfa58H
	DD	0934be303H
	DD	0552030faH
	DD	0f6ad766dH
	DD	09188cc76H
	DD	025f5024cH
	DD	0fc4fe5d7H
	DD	0d7c52acbH
	DD	080263544H
	DD	08fb562a3H
	DD	049deb15aH
	DD	06725ba1bH
	DD	09845ea0eH
	DD	0e15dfec0H
	DD	02c32f75H
	DD	012814cf0H
	DD	0a38d4697H
	DD	0c66bd3f9H
	DD	0e7038f5fH
	DD	09515929cH
	DD	0ebbf6d7aH
	DD	0da955259H
	DD	02dd4be83H
	DD	0d3587421H
	DD	02949e069H
	DD	0448ec9c8H
	DD	06a75c289H
	DD	078f48e79H
	DD	06b99583eH
	DD	0dd27b971H
	DD	0b6bee14fH
	DD	017f088adH
	DD	066c920acH
	DD	0b47dce3aH
	DD	01863df4aH
	DD	082e51a31H
	DD	060975133H
	DD	04562537fH
	DD	0e0b16477H
	DD	084bb6baeH
	DD	01cfe81a0H
	DD	094f9082bH
	DD	058704868H
	DD	0198f45fdH
	DD	08794de6cH
	DD	0b7527bf8H
	DD	023ab73d3H
	DD	0e2724b02H
	DD	057e31f8fH
	DD	02a6655abH
	DD	07b2eb28H
	DD	032fb5c2H
	DD	09a86c57bH
	DD	0a5d33708H
	DD	0f2302887H
	DD	0b223bfa5H
	DD	0ba02036aH
	DD	05ced1682H
	DD	02b8acf1cH
	DD	092a779b4H
	DD	0f0f307f2H
	DD	0a14e69e2H
	DD	0cd65daf4H
	DD	0d50605beH
	DD	01fd13462H
	DD	08ac4a6feH
	DD	09d342e53H
	DD	0a0a2f355H
	DD	032058ae1H
	DD	075a4f6ebH
	DD	0390b83ecH
	DD	0aa4060efH
	DD	065e719fH
	DD	051bd6e10H
	DD	0f93e218aH
	DD	03d96dd06H
	DD	0aedd3e05H
	DD	0464de6bdH
	DD	0b591548dH
	DD	0571c45dH
	DD	06f0406d4H
	DD	0ff605015H
	DD	0241998fbH
	DD	097d6bde9H
	DD	0cc894043H
	DD	07767d99eH
	DD	0bdb0e842H
	DD	08807898bH
	DD	038e7195bH
	DD	0db79c8eeH
	DD	047a17c0aH
	DD	0e97c420fH
	DD	0c9f8841eH
	DD	00H
	DD	083098086H
	DD	048322bedH
	DD	0ac1e1170H
	DD	04e6c5a72H
	DD	0fbfd0effH
	DD	0560f8538H
	DD	01e3daed5H
	DD	027362d39H
	DD	0640a0fd9H
	DD	021685ca6H
	DD	0d19b5b54H
	DD	03a24362eH
	DD	0b10c0a67H
	DD	0f9357e7H
	DD	0d2b4ee96H
	DD	09e1b9b91H
	DD	04f80c0c5H
	DD	0a261dc20H
	DD	0695a774bH
	DD	0161c121aH
	DD	0ae293baH
	DD	0e5c0a02aH
	DD	0433c22e0H
	DD	01d121b17H
	DD	0b0e090dH
	DD	0adf28bc7H
	DD	0b92db6a8H
	DD	0c8141ea9H
	DD	08557f119H
	DD	04caf7507H
	DD	0bbee99ddH
	DD	0fda37f60H
	DD	09ff70126H
	DD	0bc5c72f5H
	DD	0c544663bH
	DD	0345bfb7eH
	DD	0768b4329H
	DD	0dccb23c6H
	DD	068b6edfcH
	DD	063b8e4f1H
	DD	0cad731dcH
	DD	010426385H
	DD	040139722H
	DD	02084c611H
	DD	07d854a24H
	DD	0f8d2bb3dH
	DD	011aef932H
	DD	06dc729a1H
	DD	04b1d9e2fH
	DD	0f3dcb230H
	DD	0ec0d8652H
	DD	0d077c1e3H
	DD	06c2bb316H
	DD	099a970b9H
	DD	0fa119448H
	DD	02247e964H
	DD	0c4a8fc8cH
	DD	01aa0f03fH
	DD	0d8567d2cH
	DD	0ef223390H
	DD	0c787494eH
	DD	0c1d938d1H
	DD	0fe8ccaa2H
	DD	03698d40bH
	DD	0cfa6f581H
	DD	028a57adeH
	DD	026dab78eH
	DD	0a43fadbfH
	DD	0e42c3a9dH
	DD	0d507892H
	DD	09b6a5fccH
	DD	062547e46H
	DD	0c2f68d13H
	DD	0e890d8b8H
	DD	05e2e39f7H
	DD	0f582c3afH
	DD	0be9f5d80H
	DD	07c69d093H
	DD	0a96fd52dH
	DD	0b3cf2512H
	DD	03bc8ac99H
	DD	0a710187dH
	DD	06ee89c63H
	DD	07bdb3bbbH
	DD	09cd2678H
	DD	0f46e5918H
	DD	01ec9ab7H
	DD	0a8834f9aH
	DD	065e6956eH
	DD	07eaaffe6H
	DD	0821bccfH
	DD	0e6ef15e8H
	DD	0d9bae79bH
	DD	0ce4a6f36H
	DD	0d4ea9f09H
	DD	0d629b07cH
	DD	0af31a4b2H
	DD	0312a3f23H
	DD	030c6a594H
	DD	0c035a266H
	DD	037744ebcH
	DD	0a6fc82caH
	DD	0b0e090d0H
	DD	01533a7d8H
	DD	04af10498H
	DD	0f741ecdaH
	DD	0e7fcd50H
	DD	02f1791f6H
	DD	08d764dd6H
	DD	04d43efb0H
	DD	054ccaa4dH
	DD	0dfe49604H
	DD	0e39ed1b5H
	DD	01b4c6a88H
	DD	0b8c12c1fH
	DD	07f466551H
	DD	049d5eeaH
	DD	05d018c35H
	DD	073fa8774H
	DD	02efb0b41H
	DD	05ab3671dH
	DD	05292dbd2H
	DD	033e91056H
	DD	0136dd647H
	DD	08c9ad761H
	DD	07a37a10cH
	DD	08e59f814H
	DD	089eb133cH
	DD	0eecea927H
	DD	035b761c9H
	DD	0ede11ce5H
	DD	03c7a47b1H
	DD	0599cd2dfH
	DD	03f55f273H
	DD	0791814ceH
	DD	0bf73c737H
	DD	0ea53f7cdH
	DD	05b5ffdaaH
	DD	014df3d6fH
	DD	0867844dbH
	DD	081caaff3H
	DD	03eb968c4H
	DD	02c382434H
	DD	05fc2a340H
	DD	072161dc3H
	DD	0cbce225H
	DD	08b283c49H
	DD	041ff0d95H
	DD	07139a801H
	DD	0de080cb3H
	DD	09cd8b4e4H
	DD	0906456c1H
	DD	0617bcb84H
	DD	070d532b6H
	DD	074486c5cH
	DD	042d0b857H
?sm_T7@Abcdef@@0QBHB DD 0a75051f4H			; Abcdef::sm_T7
	DD	065537e41H
	DD	0a4c31a17H
	DD	05e963a27H
	DD	06bcb3babH
	DD	045f11f9dH
	DD	058abacfaH
	DD	03934be3H
	DD	0fa552030H
	DD	06df6ad76H
	DD	0769188ccH
	DD	04c25f502H
	DD	0d7fc4fe5H
	DD	0cbd7c52aH
	DD	044802635H
	DD	0a38fb562H
	DD	05a49deb1H
	DD	01b6725baH
	DD	0e9845eaH
	DD	0c0e15dfeH
	DD	07502c32fH
	DD	0f012814cH
	DD	097a38d46H
	DD	0f9c66bd3H
	DD	05fe7038fH
	DD	09c951592H
	DD	07aebbf6dH
	DD	059da9552H
	DD	0832dd4beH
	DD	021d35874H
	DD	0692949e0H
	DD	0c8448ec9H
	DD	0896a75c2H
	DD	07978f48eH
	DD	03e6b9958H
	DD	071dd27b9H
	DD	04fb6bee1H
	DD	0ad17f088H
	DD	0ac66c920H
	DD	03ab47dceH
	DD	04a1863dfH
	DD	03182e51aH
	DD	033609751H
	DD	07f456253H
	DD	077e0b164H
	DD	0ae84bb6bH
	DD	0a01cfe81H
	DD	02b94f908H
	DD	068587048H
	DD	0fd198f45H
	DD	06c8794deH
	DD	0f8b7527bH
	DD	0d323ab73H
	DD	02e2724bH
	DD	08f57e31fH
	DD	0ab2a6655H
	DD	02807b2ebH
	DD	0c2032fb5H
	DD	07b9a86c5H
	DD	08a5d337H
	DD	087f23028H
	DD	0a5b223bfH
	DD	06aba0203H
	DD	0825ced16H
	DD	01c2b8acfH
	DD	0b492a779H
	DD	0f2f0f307H
	DD	0e2a14e69H
	DD	0f4cd65daH
	DD	0bed50605H
	DD	0621fd134H
	DD	0fe8ac4a6H
	DD	0539d342eH
	DD	055a0a2f3H
	DD	0e132058aH
	DD	0eb75a4f6H
	DD	0ec390b83H
	DD	0efaa4060H
	DD	09f065e71H
	DD	01051bd6eH
	DD	08af93e21H
	DD	063d96ddH
	DD	05aedd3eH
	DD	0bd464de6H
	DD	08db59154H
	DD	05d0571c4H
	DD	0d46f0406H
	DD	015ff6050H
	DD	0fb241998H
	DD	0e997d6bdH
	DD	043cc8940H
	DD	09e7767d9H
	DD	042bdb0e8H
	DD	08b880789H
	DD	05b38e719H
	DD	0eedb79c8H
	DD	0a47a17cH
	DD	0fe97c42H
	DD	01ec9f884H
	DD	00H
	DD	086830980H
	DD	0ed48322bH
	DD	070ac1e11H
	DD	0724e6c5aH
	DD	0fffbfd0eH
	DD	038560f85H
	DD	0d51e3daeH
	DD	03927362dH
	DD	0d9640a0fH
	DD	0a621685cH
	DD	054d19b5bH
	DD	02e3a2436H
	DD	067b10c0aH
	DD	0e70f9357H
	DD	096d2b4eeH
	DD	0919e1b9bH
	DD	0c54f80c0H
	DD	020a261dcH
	DD	04b695a77H
	DD	01a161c12H
	DD	0ba0ae293H
	DD	02ae5c0a0H
	DD	0e0433c22H
	DD	0171d121bH
	DD	0d0b0e09H
	DD	0c7adf28bH
	DD	0a8b92db6H
	DD	0a9c8141eH
	DD	0198557f1H
	DD	074caf75H
	DD	0ddbbee99H
	DD	060fda37fH
	DD	0269ff701H
	DD	0f5bc5c72H
	DD	03bc54466H
	DD	07e345bfbH
	DD	029768b43H
	DD	0c6dccb23H
	DD	0fc68b6edH
	DD	0f163b8e4H
	DD	0dccad731H
	DD	085104263H
	DD	022401397H
	DD	0112084c6H
	DD	0247d854aH
	DD	03df8d2bbH
	DD	03211aef9H
	DD	0a16dc729H
	DD	02f4b1d9eH
	DD	030f3dcb2H
	DD	052ec0d86H
	DD	0e3d077c1H
	DD	0166c2bb3H
	DD	0b999a970H
	DD	048fa1194H
	DD	0642247e9H
	DD	08cc4a8fcH
	DD	03f1aa0f0H
	DD	02cd8567dH
	DD	090ef2233H
	DD	04ec78749H
	DD	0d1c1d938H
	DD	0a2fe8ccaH
	DD	0b3698d4H
	DD	081cfa6f5H
	DD	0de28a57aH
	DD	08e26dab7H
	DD	0bfa43fadH
	DD	09de42c3aH
	DD	0920d5078H
	DD	0cc9b6a5fH
	DD	04662547eH
	DD	013c2f68dH
	DD	0b8e890d8H
	DD	0f75e2e39H
	DD	0aff582c3H
	DD	080be9f5dH
	DD	0937c69d0H
	DD	02da96fd5H
	DD	012b3cf25H
	DD	0993bc8acH
	DD	07da71018H
	DD	0636ee89cH
	DD	0bb7bdb3bH
	DD	07809cd26H
	DD	018f46e59H
	DD	0b701ec9aH
	DD	09aa8834fH
	DD	06e65e695H
	DD	0e67eaaffH
	DD	0cf0821bcH
	DD	0e8e6ef15H
	DD	09bd9bae7H
	DD	036ce4a6fH
	DD	09d4ea9fH
	DD	07cd629b0H
	DD	0b2af31a4H
	DD	023312a3fH
	DD	09430c6a5H
	DD	066c035a2H
	DD	0bc37744eH
	DD	0caa6fc82H
	DD	0d0b0e090H
	DD	0d81533a7H
	DD	0984af104H
	DD	0daf741ecH
	DD	0500e7fcdH
	DD	0f62f1791H
	DD	0d68d764dH
	DD	0b04d43efH
	DD	04d54ccaaH
	DD	04dfe496H
	DD	0b5e39ed1H
	DD	0881b4c6aH
	DD	01fb8c12cH
	DD	0517f4665H
	DD	0ea049d5eH
	DD	0355d018cH
	DD	07473fa87H
	DD	0412efb0bH
	DD	01d5ab367H
	DD	0d25292dbH
	DD	05633e910H
	DD	047136dd6H
	DD	0618c9ad7H
	DD	0c7a37a1H
	DD	0148e59f8H
	DD	03c89eb13H
	DD	027eecea9H
	DD	0c935b761H
	DD	0e5ede11cH
	DD	0b13c7a47H
	DD	0df599cd2H
	DD	0733f55f2H
	DD	0ce791814H
	DD	037bf73c7H
	DD	0cdea53f7H
	DD	0aa5b5ffdH
	DD	06f14df3dH
	DD	0db867844H
	DD	0f381caafH
	DD	0c43eb968H
	DD	0342c3824H
	DD	0405fc2a3H
	DD	0c372161dH
	DD	0250cbce2H
	DD	0498b283cH
	DD	09541ff0dH
	DD	017139a8H
	DD	0b3de080cH
	DD	0e49cd8b4H
	DD	0c1906456H
	DD	084617bcbH
	DD	0b670d532H
	DD	05c74486cH
	DD	05742d0b8H
?sm_T8@Abcdef@@0QBHB DD 0f4a75051H			; Abcdef::sm_T8
	DD	04165537eH
	DD	017a4c31aH
	DD	0275e963aH
	DD	0ab6bcb3bH
	DD	09d45f11fH
	DD	0fa58abacH
	DD	0e303934bH
	DD	030fa5520H
	DD	0766df6adH
	DD	0cc769188H
	DD	024c25f5H
	DD	0e5d7fc4fH
	DD	02acbd7c5H
	DD	035448026H
	DD	062a38fb5H
	DD	0b15a49deH
	DD	0ba1b6725H
	DD	0ea0e9845H
	DD	0fec0e15dH
	DD	02f7502c3H
	DD	04cf01281H
	DD	04697a38dH
	DD	0d3f9c66bH
	DD	08f5fe703H
	DD	0929c9515H
	DD	06d7aebbfH
	DD	05259da95H
	DD	0be832dd4H
	DD	07421d358H
	DD	0e0692949H
	DD	0c9c8448eH
	DD	0c2896a75H
	DD	08e7978f4H
	DD	0583e6b99H
	DD	0b971dd27H
	DD	0e14fb6beH
	DD	088ad17f0H
	DD	020ac66c9H
	DD	0ce3ab47dH
	DD	0df4a1863H
	DD	01a3182e5H
	DD	051336097H
	DD	0537f4562H
	DD	06477e0b1H
	DD	06bae84bbH
	DD	081a01cfeH
	DD	082b94f9H
	DD	048685870H
	DD	045fd198fH
	DD	0de6c8794H
	DD	07bf8b752H
	DD	073d323abH
	DD	04b02e272H
	DD	01f8f57e3H
	DD	055ab2a66H
	DD	0eb2807b2H
	DD	0b5c2032fH
	DD	0c57b9a86H
	DD	03708a5d3H
	DD	02887f230H
	DD	0bfa5b223H
	DD	036aba02H
	DD	016825cedH
	DD	0cf1c2b8aH
	DD	079b492a7H
	DD	07f2f0f3H
	DD	069e2a14eH
	DD	0daf4cd65H
	DD	05bed506H
	DD	034621fd1H
	DD	0a6fe8ac4H
	DD	02e539d34H
	DD	0f355a0a2H
	DD	08ae13205H
	DD	0f6eb75a4H
	DD	083ec390bH
	DD	060efaa40H
	DD	0719f065eH
	DD	06e1051bdH
	DD	0218af93eH
	DD	0dd063d96H
	DD	03e05aeddH
	DD	0e6bd464dH
	DD	0548db591H
	DD	0c45d0571H
	DD	06d46f04H
	DD	05015ff60H
	DD	098fb2419H
	DD	0bde997d6H
	DD	04043cc89H
	DD	0d99e7767H
	DD	0e842bdb0H
	DD	0898b8807H
	DD	0195b38e7H
	DD	0c8eedb79H
	DD	07c0a47a1H
	DD	0420fe97cH
	DD	0841ec9f8H
	DD	00H
	DD	080868309H
	DD	02bed4832H
	DD	01170ac1eH
	DD	05a724e6cH
	DD	0efffbfdH
	DD	08538560fH
	DD	0aed51e3dH
	DD	02d392736H
	DD	0fd9640aH
	DD	05ca62168H
	DD	05b54d19bH
	DD	0362e3a24H
	DD	0a67b10cH
	DD	057e70f93H
	DD	0ee96d2b4H
	DD	09b919e1bH
	DD	0c0c54f80H
	DD	0dc20a261H
	DD	0774b695aH
	DD	0121a161cH
	DD	093ba0ae2H
	DD	0a02ae5c0H
	DD	022e0433cH
	DD	01b171d12H
	DD	090d0b0eH
	DD	08bc7adf2H
	DD	0b6a8b92dH
	DD	01ea9c814H
	DD	0f1198557H
	DD	075074cafH
	DD	099ddbbeeH
	DD	07f60fda3H
	DD	01269ff7H
	DD	072f5bc5cH
	DD	0663bc544H
	DD	0fb7e345bH
	DD	04329768bH
	DD	023c6dccbH
	DD	0edfc68b6H
	DD	0e4f163b8H
	DD	031dccad7H
	DD	063851042H
	DD	097224013H
	DD	0c6112084H
	DD	04a247d85H
	DD	0bb3df8d2H
	DD	0f93211aeH
	DD	029a16dc7H
	DD	09e2f4b1dH
	DD	0b230f3dcH
	DD	08652ec0dH
	DD	0c1e3d077H
	DD	0b3166c2bH
	DD	070b999a9H
	DD	09448fa11H
	DD	0e9642247H
	DD	0fc8cc4a8H
	DD	0f03f1aa0H
	DD	07d2cd856H
	DD	03390ef22H
	DD	0494ec787H
	DD	038d1c1d9H
	DD	0caa2fe8cH
	DD	0d40b3698H
	DD	0f581cfa6H
	DD	07ade28a5H
	DD	0b78e26daH
	DD	0adbfa43fH
	DD	03a9de42cH
	DD	078920d50H
	DD	05fcc9b6aH
	DD	07e466254H
	DD	08d13c2f6H
	DD	0d8b8e890H
	DD	039f75e2eH
	DD	0c3aff582H
	DD	05d80be9fH
	DD	0d0937c69H
	DD	0d52da96fH
	DD	02512b3cfH
	DD	0ac993bc8H
	DD	0187da710H
	DD	09c636ee8H
	DD	03bbb7bdbH
	DD	0267809cdH
	DD	05918f46eH
	DD	09ab701ecH
	DD	04f9aa883H
	DD	0956e65e6H
	DD	0ffe67eaaH
	DD	0bccf0821H
	DD	015e8e6efH
	DD	0e79bd9baH
	DD	06f36ce4aH
	DD	09f09d4eaH
	DD	0b07cd629H
	DD	0a4b2af31H
	DD	03f23312aH
	DD	0a59430c6H
	DD	0a266c035H
	DD	04ebc3774H
	DD	082caa6fcH
	DD	090d0b0e0H
	DD	0a7d81533H
	DD	04984af1H
	DD	0ecdaf741H
	DD	0cd500e7fH
	DD	091f62f17H
	DD	04dd68d76H
	DD	0efb04d43H
	DD	0aa4d54ccH
	DD	09604dfe4H
	DD	0d1b5e39eH
	DD	06a881b4cH
	DD	02c1fb8c1H
	DD	065517f46H
	DD	05eea049dH
	DD	08c355d01H
	DD	0877473faH
	DD	0b412efbH
	DD	0671d5ab3H
	DD	0dbd25292H
	DD	0105633e9H
	DD	0d647136dH
	DD	0d7618c9aH
	DD	0a10c7a37H
	DD	0f8148e59H
	DD	0133c89ebH
	DD	0a927eeceH
	DD	061c935b7H
	DD	01ce5ede1H
	DD	047b13c7aH
	DD	0d2df599cH
	DD	0f2733f55H
	DD	014ce7918H
	DD	0c737bf73H
	DD	0f7cdea53H
	DD	0fdaa5b5fH
	DD	03d6f14dfH
	DD	044db8678H
	DD	0aff381caH
	DD	068c43eb9H
	DD	024342c38H
	DD	0a3405fc2H
	DD	01dc37216H
	DD	0e2250cbcH
	DD	03c498b28H
	DD	0d9541ffH
	DD	0a8017139H
	DD	0cb3de08H
	DD	0b4e49cd8H
	DD	056c19064H
	DD	0cb84617bH
	DD	032b670d5H
	DD	06c5c7448H
	DD	0b85742d0H
?sm_U1@Abcdef@@0QBHB DD 00H				; Abcdef::sm_U1
	DD	0e090d0bH
	DD	01c121a16H
	DD	0121b171dH
	DD	03824342cH
	DD	0362d3927H
	DD	024362e3aH
	DD	02a3f2331H
	DD	070486858H
	DD	07e416553H
	DD	06c5a724eH
	DD	062537f45H
	DD	0486c5c74H
	DD	04665517fH
	DD	0547e4662H
	DD	05a774b69H
	DD	0e090d0b0H
	DD	0ee99ddbbH
	DD	0fc82caa6H
	DD	0f28bc7adH
	DD	0d8b4e49cH
	DD	0d6bde997H
	DD	0c4a6fe8aH
	DD	0caaff381H
	DD	090d8b8e8H
	DD	09ed1b5e3H
	DD	08ccaa2feH
	DD	082c3aff5H
	DD	0a8fc8cc4H
	DD	0a6f581cfH
	DD	0b4ee96d2H
	DD	0bae79bd9H
	DD	0db3bbb7bH
	DD	0d532b670H
	DD	0c729a16dH
	DD	0c920ac66H
	DD	0e31f8f57H
	DD	0ed16825cH
	DD	0ff0d9541H
	DD	0f104984aH
	DD	0ab73d323H
	DD	0a57ade28H
	DD	0b761c935H
	DD	0b968c43eH
	DD	09357e70fH
	DD	09d5eea04H
	DD	08f45fd19H
	DD	0814cf012H
	DD	03bab6bcbH
	DD	035a266c0H
	DD	027b971ddH
	DD	029b07cd6H
	DD	038f5fe7H
	DD	0d8652ecH
	DD	01f9d45f1H
	DD	0119448faH
	DD	04be30393H
	DD	045ea0e98H
	DD	057f11985H
	DD	059f8148eH
	DD	073c737bfH
	DD	07dce3ab4H
	DD	06fd52da9H
	DD	061dc20a2H
	DD	0ad766df6H
	DD	0a37f60fdH
	DD	0b16477e0H
	DD	0bf6d7aebH
	DD	0955259daH
	DD	09b5b54d1H
	DD	0894043ccH
	DD	087494ec7H
	DD	0dd3e05aeH
	DD	0d33708a5H
	DD	0c12c1fb8H
	DD	0cf2512b3H
	DD	0e51a3182H
	DD	0eb133c89H
	DD	0f9082b94H
	DD	0f701269fH
	DD	04de6bd46H
	DD	043efb04dH
	DD	051f4a750H
	DD	05ffdaa5bH
	DD	075c2896aH
	DD	07bcb8461H
	DD	069d0937cH
	DD	067d99e77H
	DD	03daed51eH
	DD	033a7d815H
	DD	021bccf08H
	DD	02fb5c203H
	DD	058ae132H
	DD	0b83ec39H
	DD	01998fb24H
	DD	01791f62fH
	DD	0764dd68dH
	DD	07844db86H
	DD	06a5fcc9bH
	DD	06456c190H
	DD	04e69e2a1H
	DD	04060efaaH
	DD	0527bf8b7H
	DD	05c72f5bcH
	DD	0605bed5H
	DD	080cb3deH
	DD	01a17a4c3H
	DD	0141ea9c8H
	DD	03e218af9H
	DD	0302887f2H
	DD	0223390efH
	DD	02c3a9de4H
	DD	096dd063dH
	DD	098d40b36H
	DD	08acf1c2bH
	DD	084c61120H
	DD	0aef93211H
	DD	0a0f03f1aH
	DD	0b2eb2807H
	DD	0bce2250cH
	DD	0e6956e65H
	DD	0e89c636eH
	DD	0fa877473H
	DD	0f48e7978H
	DD	0deb15a49H
	DD	0d0b85742H
	DD	0c2a3405fH
	DD	0ccaa4d54H
	DD	041ecdaf7H
	DD	04fe5d7fcH
	DD	05dfec0e1H
	DD	053f7cdeaH
	DD	079c8eedbH
	DD	077c1e3d0H
	DD	065daf4cdH
	DD	06bd3f9c6H
	DD	031a4b2afH
	DD	03fadbfa4H
	DD	02db6a8b9H
	DD	023bfa5b2H
	DD	09808683H
	DD	07898b88H
	DD	015929c95H
	DD	01b9b919eH
	DD	0a17c0a47H
	DD	0af75074cH
	DD	0bd6e1051H
	DD	0b3671d5aH
	DD	099583e6bH
	DD	097513360H
	DD	0854a247dH
	DD	08b432976H
	DD	0d134621fH
	DD	0df3d6f14H
	DD	0cd267809H
	DD	0c32f7502H
	DD	0e9105633H
	DD	0e7195b38H
	DD	0f5024c25H
	DD	0fb0b412eH
	DD	09ad7618cH
	DD	094de6c87H
	DD	086c57b9aH
	DD	088cc7691H
	DD	0a2f355a0H
	DD	0acfa58abH
	DD	0bee14fb6H
	DD	0b0e842bdH
	DD	0ea9f09d4H
	DD	0e49604dfH
	DD	0f68d13c2H
	DD	0f8841ec9H
	DD	0d2bb3df8H
	DD	0dcb230f3H
	DD	0cea927eeH
	DD	0c0a02ae5H
	DD	07a47b13cH
	DD	0744ebc37H
	DD	06655ab2aH
	DD	0685ca621H
	DD	042638510H
	DD	04c6a881bH
	DD	05e719f06H
	DD	05078920dH
	DD	0a0fd964H
	DD	0406d46fH
	DD	0161dc372H
	DD	01814ce79H
	DD	0322bed48H
	DD	03c22e043H
	DD	02e39f75eH
	DD	02030fa55H
	DD	0ec9ab701H
	DD	0e293ba0aH
	DD	0f088ad17H
	DD	0fe81a01cH
	DD	0d4be832dH
	DD	0dab78e26H
	DD	0c8ac993bH
	DD	0c6a59430H
	DD	09cd2df59H
	DD	092dbd252H
	DD	080c0c54fH
	DD	08ec9c844H
	DD	0a4f6eb75H
	DD	0aaffe67eH
	DD	0b8e4f163H
	DD	0b6edfc68H
	DD	0c0a67b1H
	DD	02036abaH
	DD	010187da7H
	DD	01e1170acH
	DD	0342e539dH
	DD	03a275e96H
	DD	0283c498bH
	DD	026354480H
	DD	07c420fe9H
	DD	0724b02e2H
	DD	0605015ffH
	DD	06e5918f4H
	DD	044663bc5H
	DD	04a6f36ceH
	DD	0587421d3H
	DD	0567d2cd8H
	DD	037a10c7aH
	DD	039a80171H
	DD	02bb3166cH
	DD	025ba1b67H
	DD	0f853856H
	DD	018c355dH
	DD	013972240H
	DD	01d9e2f4bH
	DD	047e96422H
	DD	049e06929H
	DD	05bfb7e34H
	DD	055f2733fH
	DD	07fcd500eH
	DD	071c45d05H
	DD	063df4a18H
	DD	06dd64713H
	DD	0d731dccaH
	DD	0d938d1c1H
	DD	0cb23c6dcH
	DD	0c52acbd7H
	DD	0ef15e8e6H
	DD	0e11ce5edH
	DD	0f307f2f0H
	DD	0fd0efffbH
	DD	0a779b492H
	DD	0a970b999H
	DD	0bb6bae84H
	DD	0b562a38fH
	DD	09f5d80beH
	DD	091548db5H
	DD	0834f9aa8H
	DD	08d4697a3H
?sm_rcon@Abcdef@@0QBDB DB 01H				; Abcdef::sm_rcon
	DB	02H
	DB	04H
	DB	08H
	DB	010H
	DB	020H
	DB	040H
	DB	080H
	DB	01bH
	DB	036H
	DB	06cH
	DB	0d8H
	DB	0abH
	DB	04dH
	DB	09aH
	DB	02fH
	DB	05eH
	DB	0bcH
	DB	063H
	DB	0c6H
	DB	097H
	DB	035H
	DB	06aH
	DB	0d4H
	DB	0b3H
	DB	07dH
	DB	0faH
	DB	0efH
	DB	0c5H
	DB	091H
	ORG $+2
?sm_shifts@Abcdef@@0QAY131$$CBHA DD 00H			; Abcdef::sm_shifts
	DD	00H
	DD	01H
	DD	03H
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	00H
	DD	00H
	DD	01H
	DD	05H
	DD	02H
	DD	04H
	DD	03H
	DD	03H
	DD	00H
	DD	00H
	DD	01H
	DD	07H
	DD	03H
	DD	05H
	DD	04H
	DD	04H
CONST	ENDS
PUBLIC	__TI1?AVexception@std@@
PUBLIC	?Xor@Abcdef@@AAEXPADPBD@Z			; Abcdef::Xor
PUBLIC	__CTA1?AVexception@std@@
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\abcdef.h
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA1?AVexception@std@@
xdata$x	SEGMENT
__CTA1?AVexception@std@@ DD 01H
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI1?AVexception@std@@
xdata$x	SEGMENT
__TI1?AVexception@std@@ DD 00H
	DD	FLAT:??1exception@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA1?AVexception@std@@
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Xor@Abcdef@@AAEXPADPBD@Z
_TEXT	SEGMENT
$T505594 = -12						; size = 12
_buff$ = 8						; size = 4
_chain$ = 12						; size = 4
?Xor@Abcdef@@AAEXPADPBD@Z PROC				; Abcdef::Xor, COMDAT
; _this$ = ecx

; 85   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 86   : 		if(false==m_bKeyInit)

  00006	80 79 04 00	 cmp	 BYTE PTR [ecx+4], 0
  0000a	75 1c		 jne	 SHORT $LN4@Xor

; 87   : 			throw exception(sm_szErrorMsg1);

  0000c	68 00 00 00 00	 push	 OFFSET ?sm_szErrorMsg1@Abcdef@@0PBDB ; Abcdef::sm_szErrorMsg1
  00011	8d 4d f4	 lea	 ecx, DWORD PTR $T505594[ebp]
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  0001a	68 00 00 00 00	 push	 OFFSET __TI1?AVexception@std@@
  0001f	8d 45 f4	 lea	 eax, DWORD PTR $T505594[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Xor:
$LN4@Xor:
  00028	57		 push	 edi

; 88   : 		for(int i=0; i<m_blockSize; i++)

  00029	33 ff		 xor	 edi, edi
  0002b	39 b9 cc 03 00
	00		 cmp	 DWORD PTR [ecx+972], edi
  00031	7e 19		 jle	 SHORT $LN1@Xor
  00033	8b 45 08	 mov	 eax, DWORD PTR _buff$[ebp]
  00036	56		 push	 esi
  00037	8b 75 0c	 mov	 esi, DWORD PTR _chain$[ebp]
  0003a	2b f0		 sub	 esi, eax
$LL3@Xor:

; 89   : 			*(buff++) ^= *(chain++);	

  0003c	8a 14 06	 mov	 dl, BYTE PTR [esi+eax]
  0003f	30 10		 xor	 BYTE PTR [eax], dl
  00041	40		 inc	 eax
  00042	47		 inc	 edi
  00043	3b b9 cc 03 00
	00		 cmp	 edi, DWORD PTR [ecx+972]
  00049	7c f1		 jl	 SHORT $LL3@Xor
  0004b	5e		 pop	 esi
$LN1@Xor:
  0004c	5f		 pop	 edi

; 90   : 	}

  0004d	c9		 leave
  0004e	c2 08 00	 ret	 8
$LN9@Xor:
?Xor@Abcdef@@AAEXPADPBD@Z ENDP				; Abcdef::Xor
_TEXT	ENDS
PUBLIC	??_7Abcdef@@6B@					; Abcdef::`vftable'
PUBLIC	??0Abcdef@@QAE@XZ				; Abcdef::Abcdef
PUBLIC	??_R4Abcdef@@6B@				; Abcdef::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVAbcdef@@@8				; Abcdef `RTTI Type Descriptor'
PUBLIC	??_R3Abcdef@@8					; Abcdef::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Abcdef@@8					; Abcdef::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Abcdef@@8				; Abcdef::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EAbcdef@@UAEPAXI@Z:PROC			; Abcdef::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@Abcdef@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\abcdef.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@Abcdef@@8 DD FLAT:??_R0?AVAbcdef@@@8	; Abcdef::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Abcdef@@8
rdata$r	ENDS
;	COMDAT ??_R2Abcdef@@8
rdata$r	SEGMENT
??_R2Abcdef@@8 DD FLAT:??_R1A@?0A@EA@Abcdef@@8		; Abcdef::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Abcdef@@8
rdata$r	SEGMENT
??_R3Abcdef@@8 DD 00H					; Abcdef::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Abcdef@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAbcdef@@@8
_DATA	SEGMENT
??_R0?AVAbcdef@@@8 DD FLAT:??_7type_info@@6B@		; Abcdef `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAbcdef@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Abcdef@@6B@
rdata$r	SEGMENT
??_R4Abcdef@@6B@ DD 00H					; Abcdef::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVAbcdef@@@8
	DD	FLAT:??_R3Abcdef@@8
rdata$r	ENDS
;	COMDAT ??_7Abcdef@@6B@
CONST	SEGMENT
??_7Abcdef@@6B@ DD FLAT:??_R4Abcdef@@6B@		; Abcdef::`vftable'
	DD	FLAT:??_EAbcdef@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0Abcdef@@QAE@XZ
_TEXT	SEGMENT
??0Abcdef@@QAE@XZ PROC					; Abcdef::Abcdef, COMDAT
; _this$ = ecx

; 933  : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Abcdef@@6B@
  00008	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 934  : }

  0000c	c3		 ret	 0
??0Abcdef@@QAE@XZ ENDP					; Abcdef::Abcdef
_TEXT	ENDS
PUBLIC	??1Abcdef@@UAE@XZ				; Abcdef::~Abcdef
; Function compile flags: /Ogsp
;	COMDAT ??1Abcdef@@UAE@XZ
_TEXT	SEGMENT
??1Abcdef@@UAE@XZ PROC					; Abcdef::~Abcdef, COMDAT
; _this$ = ecx

; 938  : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Abcdef@@6B@

; 939  : }

  00006	c3		 ret	 0
??1Abcdef@@UAE@XZ ENDP					; Abcdef::~Abcdef
_TEXT	ENDS
PUBLIC	?DefEncryptBlock@Abcdef@@AAEXPBDPAD@Z		; Abcdef::DefEncryptBlock
; Function compile flags: /Ogsp
;	COMDAT ?DefEncryptBlock@Abcdef@@AAEXPBDPAD@Z
_TEXT	SEGMENT
$T505610 = -36						; size = 12
tv524 = -24						; size = 4
tv772 = -20						; size = 4
_a2$ = -20						; size = 4
_this$ = -16						; size = 4
tv361 = -12						; size = 4
_Ker$ = -12						; size = 4
_t2$ = -8						; size = 4
_t3$ = -4						; size = 4
tv850 = 8						; size = 4
_tt$ = 8						; size = 4
_in$ = 8						; size = 4
_result$ = 12						; size = 4
?DefEncryptBlock@Abcdef@@AAEXPBDPAD@Z PROC		; Abcdef::DefEncryptBlock, COMDAT
; _this$ = ecx

; 946  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 947  : 	if(false==m_bKeyInit)

  00006	80 79 04 00	 cmp	 BYTE PTR [ecx+4], 0
  0000a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0000d	75 1c		 jne	 SHORT $LN4@DefEncrypt

; 948  : 		throw exception(sm_szErrorMsg1);

  0000f	68 00 00 00 00	 push	 OFFSET ?sm_szErrorMsg1@Abcdef@@0PBDB ; Abcdef::sm_szErrorMsg1
  00014	8d 4d dc	 lea	 ecx, DWORD PTR $T505610[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  0001d	68 00 00 00 00	 push	 OFFSET __TI1?AVexception@std@@
  00022	8d 45 dc	 lea	 eax, DWORD PTR $T505610[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@DefEncrypt:
$LN4@DefEncrypt:

; 950  : 	int t0 = ((unsigned char)*(in++) << 24);

  0002b	8b 45 08	 mov	 eax, DWORD PTR _in$[ebp]

; 951  : 	t0 |= ((unsigned char)*(in++) << 16);

  0002e	0f b6 50 01	 movzx	 edx, BYTE PTR [eax+1]
  00032	53		 push	 ebx
  00033	56		 push	 esi

; 952  : 	t0 |= ((unsigned char)*(in++) << 8);
; 953  : 	(t0 |= (unsigned char)*(in++)) ^= Ker[0];
; 954  : 	int t1 = ((unsigned char)*(in++) << 24);
; 955  : 	t1 |= ((unsigned char)*(in++) << 16);

  00034	0f b6 70 05	 movzx	 esi, BYTE PTR [eax+5]
  00038	57		 push	 edi
  00039	0f b6 38	 movzx	 edi, BYTE PTR [eax]
  0003c	c1 e2 10	 shl	 edx, 16			; 00000010H
  0003f	c1 e7 18	 shl	 edi, 24			; 00000018H
  00042	0b fa		 or	 edi, edx
  00044	0f b6 50 02	 movzx	 edx, BYTE PTR [eax+2]
  00048	c1 e2 08	 shl	 edx, 8
  0004b	0b fa		 or	 edi, edx
  0004d	0f b6 50 03	 movzx	 edx, BYTE PTR [eax+3]

; 956  : 	t1 |= ((unsigned char)*(in++) << 8);
; 957  : 	(t1 |= (unsigned char)*(in++)) ^= Ker[1];
; 958  : 	int t2 = ((unsigned char)*(in++) << 24);

  00051	0f b6 58 08	 movzx	 ebx, BYTE PTR [eax+8]
  00055	c1 e6 10	 shl	 esi, 16			; 00000010H
  00058	0b fa		 or	 edi, edx
  0005a	0f b6 50 04	 movzx	 edx, BYTE PTR [eax+4]
  0005e	c1 e2 18	 shl	 edx, 24			; 00000018H
  00061	0b d6		 or	 edx, esi
  00063	0f b6 70 06	 movzx	 esi, BYTE PTR [eax+6]
  00067	c1 e6 08	 shl	 esi, 8
  0006a	0b d6		 or	 edx, esi
  0006c	0f b6 70 07	 movzx	 esi, BYTE PTR [eax+7]
  00070	33 79 08	 xor	 edi, DWORD PTR [ecx+8]
  00073	0b d6		 or	 edx, esi

; 959  : 	t2 |= ((unsigned char)*(in++) << 16);

  00075	0f b6 70 09	 movzx	 esi, BYTE PTR [eax+9]
  00079	33 51 0c	 xor	 edx, DWORD PTR [ecx+12]
  0007c	c1 e6 10	 shl	 esi, 16			; 00000010H
  0007f	c1 e3 18	 shl	 ebx, 24			; 00000018H
  00082	0b de		 or	 ebx, esi

; 960  : 	t2 |= ((unsigned char)*(in++) << 8);

  00084	0f b6 70 0a	 movzx	 esi, BYTE PTR [eax+10]
  00088	c1 e6 08	 shl	 esi, 8
  0008b	0b de		 or	 ebx, esi

; 961  : 	(t2 |= (unsigned char)*(in++)) ^= Ker[2];

  0008d	0f b6 70 0b	 movzx	 esi, BYTE PTR [eax+11]
  00091	0b de		 or	 ebx, esi
  00093	33 59 10	 xor	 ebx, DWORD PTR [ecx+16]

; 962  : 	int t3 = ((unsigned char)*(in++) << 24);

  00096	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]

; 963  : 	t3 |= ((unsigned char)*(in++) << 16);

  0009a	0f b6 70 0d	 movzx	 esi, BYTE PTR [eax+13]
  0009e	c1 e6 10	 shl	 esi, 16			; 00000010H
  000a1	c1 e1 18	 shl	 ecx, 24			; 00000018H
  000a4	0b ce		 or	 ecx, esi

; 964  : 	t3 |= ((unsigned char)*(in++) << 8);
; 965  : 	(t3 |= (unsigned char)*(in++)) ^= Ker[3];

  000a6	0f b6 70 0e	 movzx	 esi, BYTE PTR [eax+14]
  000aa	0f b6 40 0f	 movzx	 eax, BYTE PTR [eax+15]
  000ae	c1 e6 08	 shl	 esi, 8
  000b1	0b f0		 or	 esi, eax
  000b3	0b f1		 or	 esi, ecx
  000b5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	33 71 14	 xor	 esi, DWORD PTR [ecx+20]
  000bb	89 5d f8	 mov	 DWORD PTR _t2$[ebp], ebx
  000be	89 75 fc	 mov	 DWORD PTR _t3$[ebp], esi

; 966  : 	int a0, a1, a2, a3;
; 967  : 	//Apply Round Transforms
; 968  : 	for (int r = 1; r < m_iROUNDS; r++)

  000c1	8b b1 d0 03 00
	00		 mov	 esi, DWORD PTR [ecx+976]
  000c7	89 75 e8	 mov	 DWORD PTR tv524[ebp], esi
  000ca	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  000cf	83 fe 01	 cmp	 esi, 1
  000d2	0f 8e 1e 01 00
	00		 jle	 $LN1@DefEncrypt

; 949  : 	int* Ker = m_Ke[0];

  000d8	83 c1 30	 add	 ecx, 48			; 00000030H
  000db	4e		 dec	 esi
  000dc	89 4d 08	 mov	 DWORD PTR tv850[ebp], ecx
  000df	89 75 f4	 mov	 DWORD PTR tv361[ebp], esi
$LL3@DefEncrypt:

; 969  : 	{
; 970  : 		Ker = m_Ke[r];
; 971  : 		a0 = (sm_T1[(t0 >> 24) & 0xFF] ^
; 972  : 			sm_T2[(t1 >> 16) & 0xFF] ^
; 973  : 			sm_T3[(t2 >>  8) & 0xFF] ^
; 974  : 			sm_T4[t3 & 0xFF]) ^ Ker[0];
; 975  : 		a1 = (sm_T1[(t1 >> 24) & 0xFF] ^
; 976  : 			sm_T2[(t2 >> 16) & 0xFF] ^
; 977  : 			sm_T3[(t3 >>  8) & 0xFF] ^
; 978  : 			sm_T4[t0 & 0xFF]) ^ Ker[1];

  000e2	8b 4d fc	 mov	 ecx, DWORD PTR _t3$[ebp]
  000e5	8b f3		 mov	 esi, ebx
  000e7	c1 f9 08	 sar	 ecx, 8
  000ea	23 c8		 and	 ecx, eax
  000ec	c1 fe 10	 sar	 esi, 16			; 00000010H
  000ef	23 f0		 and	 esi, eax
  000f1	89 75 ec	 mov	 DWORD PTR tv772[ebp], esi
  000f4	8b 34 8d 00 00
	00 00		 mov	 esi, DWORD PTR ?sm_T3@Abcdef@@0QBHB[ecx*4]
  000fb	8b 4d ec	 mov	 ecx, DWORD PTR tv772[ebp]
  000fe	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR ?sm_T2@Abcdef@@0QBHB[ecx*4]
  00105	8b ca		 mov	 ecx, edx
  00107	c1 f9 18	 sar	 ecx, 24			; 00000018H
  0010a	23 c8		 and	 ecx, eax
  0010c	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR ?sm_T1@Abcdef@@0QBHB[ecx*4]

; 979  : 		a2 = (sm_T1[(t2 >> 24) & 0xFF] ^
; 980  : 			sm_T2[(t3 >> 16) & 0xFF] ^
; 981  : 			sm_T3[(t0 >>  8) & 0xFF] ^
; 982  : 			sm_T4[t1 & 0xFF]) ^ Ker[2];

  00113	c1 fb 18	 sar	 ebx, 24			; 00000018H
  00116	23 d8		 and	 ebx, eax
  00118	8b cf		 mov	 ecx, edi
  0011a	23 c8		 and	 ecx, eax
  0011c	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR ?sm_T4@Abcdef@@0QBHB[ecx*4]
  00123	8b 4d 08	 mov	 ecx, DWORD PTR tv850[ebp]
  00126	33 71 fc	 xor	 esi, DWORD PTR [ecx-4]
  00129	8b 4d fc	 mov	 ecx, DWORD PTR _t3$[ebp]
  0012c	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0012f	23 c8		 and	 ecx, eax
  00131	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR ?sm_T2@Abcdef@@0QBHB[ecx*4]
  00138	33 0c 9d 00 00
	00 00		 xor	 ecx, DWORD PTR ?sm_T1@Abcdef@@0QBHB[ebx*4]
  0013f	8b df		 mov	 ebx, edi
  00141	c1 fb 08	 sar	 ebx, 8
  00144	23 d8		 and	 ebx, eax
  00146	33 0c 9d 00 00
	00 00		 xor	 ecx, DWORD PTR ?sm_T3@Abcdef@@0QBHB[ebx*4]
  0014d	8b da		 mov	 ebx, edx
  0014f	23 d8		 and	 ebx, eax
  00151	33 0c 9d 00 00
	00 00		 xor	 ecx, DWORD PTR ?sm_T4@Abcdef@@0QBHB[ebx*4]
  00158	8b 5d 08	 mov	 ebx, DWORD PTR tv850[ebp]
  0015b	33 0b		 xor	 ecx, DWORD PTR [ebx]

; 983  : 		a3 = (sm_T1[(t3 >> 24) & 0xFF] ^
; 984  : 			sm_T2[(t0 >> 16) & 0xFF] ^
; 985  : 			sm_T3[(t1 >>  8) & 0xFF] ^
; 986  : 			sm_T4[t2 & 0xFF]) ^ Ker[3];

  0015d	8b da		 mov	 ebx, edx
  0015f	c1 fb 08	 sar	 ebx, 8
  00162	23 d8		 and	 ebx, eax
  00164	89 4d ec	 mov	 DWORD PTR _a2$[ebp], ecx
  00167	8b 4d fc	 mov	 ecx, DWORD PTR _t3$[ebp]
  0016a	c1 f9 18	 sar	 ecx, 24			; 00000018H
  0016d	23 c8		 and	 ecx, eax
  0016f	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR ?sm_T1@Abcdef@@0QBHB[ecx*4]
  00176	33 0c 9d 00 00
	00 00		 xor	 ecx, DWORD PTR ?sm_T3@Abcdef@@0QBHB[ebx*4]
  0017d	8b df		 mov	 ebx, edi
  0017f	c1 fb 10	 sar	 ebx, 16			; 00000010H
  00182	23 d8		 and	 ebx, eax
  00184	33 0c 9d 00 00
	00 00		 xor	 ecx, DWORD PTR ?sm_T2@Abcdef@@0QBHB[ebx*4]
  0018b	8b 5d f8	 mov	 ebx, DWORD PTR _t2$[ebp]
  0018e	23 d8		 and	 ebx, eax
  00190	33 0c 9d 00 00
	00 00		 xor	 ecx, DWORD PTR ?sm_T4@Abcdef@@0QBHB[ebx*4]
  00197	8b 5d 08	 mov	 ebx, DWORD PTR tv850[ebp]
  0019a	33 4b 04	 xor	 ecx, DWORD PTR [ebx+4]

; 987  : 		t0 = a0;

  0019d	8b 5d f8	 mov	 ebx, DWORD PTR _t2$[ebp]
  001a0	c1 fb 08	 sar	 ebx, 8
  001a3	23 d8		 and	 ebx, eax
  001a5	8b 1c 9d 00 00
	00 00		 mov	 ebx, DWORD PTR ?sm_T3@Abcdef@@0QBHB[ebx*4]
  001ac	c1 fa 10	 sar	 edx, 16			; 00000010H
  001af	23 d0		 and	 edx, eax
  001b1	33 1c 95 00 00
	00 00		 xor	 ebx, DWORD PTR ?sm_T2@Abcdef@@0QBHB[edx*4]
  001b8	8b 55 fc	 mov	 edx, DWORD PTR _t3$[ebp]
  001bb	c1 ff 18	 sar	 edi, 24			; 00000018H
  001be	23 f8		 and	 edi, eax
  001c0	33 1c bd 00 00
	00 00		 xor	 ebx, DWORD PTR ?sm_T1@Abcdef@@0QBHB[edi*4]
  001c7	23 d0		 and	 edx, eax
  001c9	33 1c 95 00 00
	00 00		 xor	 ebx, DWORD PTR ?sm_T4@Abcdef@@0QBHB[edx*4]
  001d0	8b 55 08	 mov	 edx, DWORD PTR tv850[ebp]
  001d3	33 5a f8	 xor	 ebx, DWORD PTR [edx-8]
  001d6	83 45 08 20	 add	 DWORD PTR tv850[ebp], 32 ; 00000020H
  001da	ff 4d f4	 dec	 DWORD PTR tv361[ebp]
  001dd	8b fb		 mov	 edi, ebx

; 988  : 		t1 = a1;
; 989  : 		t2 = a2;

  001df	8b 5d ec	 mov	 ebx, DWORD PTR _a2$[ebp]
  001e2	8b d6		 mov	 edx, esi
  001e4	89 5d f8	 mov	 DWORD PTR _t2$[ebp], ebx

; 990  : 		t3 = a3;

  001e7	89 4d fc	 mov	 DWORD PTR _t3$[ebp], ecx
  001ea	0f 85 f2 fe ff
	ff		 jne	 $LL3@DefEncrypt

; 966  : 	int a0, a1, a2, a3;
; 967  : 	//Apply Round Transforms
; 968  : 	for (int r = 1; r < m_iROUNDS; r++)

  001f0	8b 75 e8	 mov	 esi, DWORD PTR tv524[ebp]
  001f3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
$LN1@DefEncrypt:

; 991  : 	}
; 992  : 	//Last Round is special
; 993  : 	Ker = m_Ke[m_iROUNDS];

  001f6	c1 e6 05	 shl	 esi, 5
  001f9	8d 74 0e 08	 lea	 esi, DWORD PTR [esi+ecx+8]

; 994  : 	int tt = Ker[0];

  001fd	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 995  : 	result[0] = sm_S[(t0 >> 24) & 0xFF] ^ (tt >> 24);

  001ff	8b d9		 mov	 ebx, ecx
  00201	89 4d 08	 mov	 DWORD PTR _tt$[ebp], ecx
  00204	c1 fb 18	 sar	 ebx, 24			; 00000018H

; 996  : 	result[1] = sm_S[(t1 >> 16) & 0xFF] ^ (tt >> 16);

  00207	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0020a	89 75 f4	 mov	 DWORD PTR _Ker$[ebp], esi
  0020d	8b f7		 mov	 esi, edi
  0020f	c1 fe 18	 sar	 esi, 24			; 00000018H
  00212	23 f0		 and	 esi, eax
  00214	32 9e 00 00 00
	00		 xor	 bl, BYTE PTR ?sm_S@Abcdef@@0QBDB[esi]
  0021a	8b 75 0c	 mov	 esi, DWORD PTR _result$[ebp]
  0021d	88 1e		 mov	 BYTE PTR [esi], bl
  0021f	8b da		 mov	 ebx, edx
  00221	c1 fb 10	 sar	 ebx, 16			; 00000010H
  00224	23 d8		 and	 ebx, eax
  00226	32 8b 00 00 00
	00		 xor	 cl, BYTE PTR ?sm_S@Abcdef@@0QBDB[ebx]

; 997  : 	result[2] = sm_S[(t2 >>  8) & 0xFF] ^ (tt >>  8);

  0022c	8b 5d 08	 mov	 ebx, DWORD PTR _tt$[ebp]
  0022f	88 4e 01	 mov	 BYTE PTR [esi+1], cl
  00232	8b 4d f8	 mov	 ecx, DWORD PTR _t2$[ebp]
  00235	c1 f9 08	 sar	 ecx, 8
  00238	23 c8		 and	 ecx, eax
  0023a	c1 fb 08	 sar	 ebx, 8
  0023d	32 99 00 00 00
	00		 xor	 bl, BYTE PTR ?sm_S@Abcdef@@0QBDB[ecx]

; 998  : 	result[3] = sm_S[t3 & 0xFF] ^ tt;

  00243	8b 4d fc	 mov	 ecx, DWORD PTR _t3$[ebp]
  00246	23 c8		 and	 ecx, eax
  00248	88 5e 02	 mov	 BYTE PTR [esi+2], bl
  0024b	8a 89 00 00 00
	00		 mov	 cl, BYTE PTR ?sm_S@Abcdef@@0QBDB[ecx]
  00251	32 4d 08	 xor	 cl, BYTE PTR _tt$[ebp]

; 999  : 	tt = Ker[1];
; 1000 : 	result[4] = sm_S[(t1 >> 24) & 0xFF] ^ (tt >> 24);

  00254	8b da		 mov	 ebx, edx
  00256	88 4e 03	 mov	 BYTE PTR [esi+3], cl
  00259	8b 4d f4	 mov	 ecx, DWORD PTR _Ker$[ebp]
  0025c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0025f	89 4d 08	 mov	 DWORD PTR _tt$[ebp], ecx
  00262	c1 f9 18	 sar	 ecx, 24			; 00000018H
  00265	c1 fb 18	 sar	 ebx, 24			; 00000018H
  00268	23 d8		 and	 ebx, eax
  0026a	32 8b 00 00 00
	00		 xor	 cl, BYTE PTR ?sm_S@Abcdef@@0QBDB[ebx]

; 1001 : 	result[5] = sm_S[(t2 >> 16) & 0xFF] ^ (tt >> 16);

  00270	8b 5d 08	 mov	 ebx, DWORD PTR _tt$[ebp]
  00273	88 4e 04	 mov	 BYTE PTR [esi+4], cl
  00276	8b 4d f8	 mov	 ecx, DWORD PTR _t2$[ebp]
  00279	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0027c	23 c8		 and	 ecx, eax
  0027e	c1 fb 10	 sar	 ebx, 16			; 00000010H
  00281	32 99 00 00 00
	00		 xor	 bl, BYTE PTR ?sm_S@Abcdef@@0QBDB[ecx]

; 1002 : 	result[6] = sm_S[(t3 >>  8) & 0xFF] ^ (tt >>  8);

  00287	8b 4d fc	 mov	 ecx, DWORD PTR _t3$[ebp]
  0028a	88 5e 05	 mov	 BYTE PTR [esi+5], bl
  0028d	8b 5d 08	 mov	 ebx, DWORD PTR _tt$[ebp]
  00290	c1 f9 08	 sar	 ecx, 8
  00293	23 c8		 and	 ecx, eax
  00295	c1 fb 08	 sar	 ebx, 8
  00298	32 99 00 00 00
	00		 xor	 bl, BYTE PTR ?sm_S@Abcdef@@0QBDB[ecx]

; 1003 : 	result[7] = sm_S[t0 & 0xFF] ^ tt;

  0029e	8b cf		 mov	 ecx, edi
  002a0	23 c8		 and	 ecx, eax
  002a2	88 5e 06	 mov	 BYTE PTR [esi+6], bl
  002a5	8a 89 00 00 00
	00		 mov	 cl, BYTE PTR ?sm_S@Abcdef@@0QBDB[ecx]
  002ab	32 4d 08	 xor	 cl, BYTE PTR _tt$[ebp]

; 1004 : 	tt = Ker[2];
; 1005 : 	result[8] = sm_S[(t2 >> 24) & 0xFF] ^ (tt >> 24);

  002ae	8b 5d f8	 mov	 ebx, DWORD PTR _t2$[ebp]
  002b1	88 4e 07	 mov	 BYTE PTR [esi+7], cl
  002b4	8b 4d f4	 mov	 ecx, DWORD PTR _Ker$[ebp]
  002b7	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  002ba	89 4d 08	 mov	 DWORD PTR _tt$[ebp], ecx
  002bd	c1 fb 18	 sar	 ebx, 24			; 00000018H
  002c0	c1 f9 18	 sar	 ecx, 24			; 00000018H
  002c3	23 d8		 and	 ebx, eax
  002c5	32 8b 00 00 00
	00		 xor	 cl, BYTE PTR ?sm_S@Abcdef@@0QBDB[ebx]

; 1006 : 	result[9] = sm_S[(t3 >> 16) & 0xFF] ^ (tt >> 16);

  002cb	8b 5d 08	 mov	 ebx, DWORD PTR _tt$[ebp]
  002ce	88 4e 08	 mov	 BYTE PTR [esi+8], cl
  002d1	8b 4d fc	 mov	 ecx, DWORD PTR _t3$[ebp]
  002d4	c1 f9 10	 sar	 ecx, 16			; 00000010H
  002d7	23 c8		 and	 ecx, eax
  002d9	c1 fb 10	 sar	 ebx, 16			; 00000010H
  002dc	32 99 00 00 00
	00		 xor	 bl, BYTE PTR ?sm_S@Abcdef@@0QBDB[ecx]

; 1007 : 	result[10] = sm_S[(t0 >>  8) & 0xFF] ^ (tt >>  8);

  002e2	8b cf		 mov	 ecx, edi
  002e4	88 5e 09	 mov	 BYTE PTR [esi+9], bl
  002e7	8b 5d 08	 mov	 ebx, DWORD PTR _tt$[ebp]
  002ea	c1 f9 08	 sar	 ecx, 8
  002ed	23 c8		 and	 ecx, eax
  002ef	c1 fb 08	 sar	 ebx, 8
  002f2	32 99 00 00 00
	00		 xor	 bl, BYTE PTR ?sm_S@Abcdef@@0QBDB[ecx]
  002f8	88 5e 0a	 mov	 BYTE PTR [esi+10], bl

; 1008 : 	result[11] = sm_S[t1 & 0xFF] ^ tt;

  002fb	8b ca		 mov	 ecx, edx
  002fd	23 c8		 and	 ecx, eax
  002ff	8a 89 00 00 00
	00		 mov	 cl, BYTE PTR ?sm_S@Abcdef@@0QBDB[ecx]
  00305	32 4d 08	 xor	 cl, BYTE PTR _tt$[ebp]

; 1009 : 	tt = Ker[3];
; 1010 : 	result[12] = sm_S[(t3 >> 24) & 0xFF] ^ (tt >> 24);
; 1011 : 	result[13] = sm_S[(t0 >> 16) & 0xFF] ^ (tt >> 16);

  00308	c1 ff 10	 sar	 edi, 16			; 00000010H
  0030b	88 4e 0b	 mov	 BYTE PTR [esi+11], cl
  0030e	8b 4d f4	 mov	 ecx, DWORD PTR _Ker$[ebp]
  00311	8b 59 0c	 mov	 ebx, DWORD PTR [ecx+12]
  00314	8b 4d fc	 mov	 ecx, DWORD PTR _t3$[ebp]
  00317	c1 f9 18	 sar	 ecx, 24			; 00000018H
  0031a	23 c8		 and	 ecx, eax
  0031c	89 5d 08	 mov	 DWORD PTR _tt$[ebp], ebx
  0031f	c1 fb 18	 sar	 ebx, 24			; 00000018H
  00322	32 99 00 00 00
	00		 xor	 bl, BYTE PTR ?sm_S@Abcdef@@0QBDB[ecx]
  00328	8b 4d 08	 mov	 ecx, DWORD PTR _tt$[ebp]
  0032b	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0032e	88 5e 0c	 mov	 BYTE PTR [esi+12], bl
  00331	23 f8		 and	 edi, eax
  00333	32 8f 00 00 00
	00		 xor	 cl, BYTE PTR ?sm_S@Abcdef@@0QBDB[edi]

; 1012 : 	result[14] = sm_S[(t1 >>  8) & 0xFF] ^ (tt >>  8);

  00339	c1 fa 08	 sar	 edx, 8
  0033c	88 4e 0d	 mov	 BYTE PTR [esi+13], cl
  0033f	8b 4d 08	 mov	 ecx, DWORD PTR _tt$[ebp]
  00342	c1 f9 08	 sar	 ecx, 8
  00345	23 d0		 and	 edx, eax
  00347	32 8a 00 00 00
	00		 xor	 cl, BYTE PTR ?sm_S@Abcdef@@0QBDB[edx]
  0034d	5f		 pop	 edi
  0034e	88 4e 0e	 mov	 BYTE PTR [esi+14], cl

; 1013 : 	result[15] = sm_S[t2 & 0xFF] ^ tt;

  00351	8b 4d f8	 mov	 ecx, DWORD PTR _t2$[ebp]
  00354	23 c8		 and	 ecx, eax
  00356	8a 81 00 00 00
	00		 mov	 al, BYTE PTR ?sm_S@Abcdef@@0QBDB[ecx]
  0035c	32 45 08	 xor	 al, BYTE PTR _tt$[ebp]
  0035f	88 46 0f	 mov	 BYTE PTR [esi+15], al
  00362	5e		 pop	 esi
  00363	5b		 pop	 ebx

; 1014 : }

  00364	c9		 leave
  00365	c2 08 00	 ret	 8
$LN9@DefEncrypt:
?DefEncryptBlock@Abcdef@@AAEXPBDPAD@Z ENDP		; Abcdef::DefEncryptBlock
_TEXT	ENDS
PUBLIC	?DefDecryptBlock@Abcdef@@AAEXPBDPAD@Z		; Abcdef::DefDecryptBlock
; Function compile flags: /Ogsp
;	COMDAT ?DefDecryptBlock@Abcdef@@AAEXPBDPAD@Z
_TEXT	SEGMENT
$T505617 = -36						; size = 12
tv772 = -24						; size = 4
_this$ = -24						; size = 4
tv524 = -20						; size = 4
_a2$ = -16						; size = 4
tv361 = -12						; size = 4
_Kdr$ = -12						; size = 4
_t3$ = -8						; size = 4
_t0$ = -4						; size = 4
tv850 = 8						; size = 4
_tt$ = 8						; size = 4
_in$ = 8						; size = 4
_result$ = 12						; size = 4
?DefDecryptBlock@Abcdef@@AAEXPBDPAD@Z PROC		; Abcdef::DefDecryptBlock, COMDAT
; _this$ = ecx

; 1021 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 1022 : 	if(false==m_bKeyInit)

  0000a	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  0000e	57		 push	 edi
  0000f	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
  00012	75 1c		 jne	 SHORT $LN4@DefDecrypt

; 1023 : 		throw exception(sm_szErrorMsg1);

  00014	68 00 00 00 00	 push	 OFFSET ?sm_szErrorMsg1@Abcdef@@0PBDB ; Abcdef::sm_szErrorMsg1
  00019	8d 4d dc	 lea	 ecx, DWORD PTR $T505617[ebp]
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00022	68 00 00 00 00	 push	 OFFSET __TI1?AVexception@std@@
  00027	8d 45 dc	 lea	 eax, DWORD PTR $T505617[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN11@DefDecrypt:
$LN4@DefDecrypt:

; 1025 : 	int t0 = ((unsigned char)*(in++) << 24);

  00030	8b 45 08	 mov	 eax, DWORD PTR _in$[ebp]
  00033	0f b6 08	 movzx	 ecx, BYTE PTR [eax]

; 1026 : 	t0 = t0 | ((unsigned char)*(in++) << 16);

  00036	0f b6 50 01	 movzx	 edx, BYTE PTR [eax+1]
  0003a	c1 e1 18	 shl	 ecx, 24			; 00000018H

; 1027 : 	t0 |= ((unsigned char)*(in++) << 8);
; 1028 : 	(t0 |= (unsigned char)*(in++)) ^= Kdr[0];
; 1029 : 	int t1 = ((unsigned char)*(in++) << 24);

  0003d	0f b6 78 04	 movzx	 edi, BYTE PTR [eax+4]
  00041	c1 e2 10	 shl	 edx, 16			; 00000010H
  00044	0b ca		 or	 ecx, edx
  00046	0f b6 50 02	 movzx	 edx, BYTE PTR [eax+2]
  0004a	c1 e2 08	 shl	 edx, 8
  0004d	0b ca		 or	 ecx, edx
  0004f	0f b6 50 03	 movzx	 edx, BYTE PTR [eax+3]
  00053	0b ca		 or	 ecx, edx
  00055	33 8e e8 01 00
	00		 xor	 ecx, DWORD PTR [esi+488]

; 1030 : 	t1 |= ((unsigned char)*(in++) << 16);
; 1031 : 	t1 |= ((unsigned char)*(in++) << 8);
; 1032 : 	(t1 |= (unsigned char)*(in++)) ^= Kdr[1];
; 1033 : 	int t2 = ((unsigned char)*(in++) << 24);

  0005b	0f b6 50 08	 movzx	 edx, BYTE PTR [eax+8]
  0005f	89 4d fc	 mov	 DWORD PTR _t0$[ebp], ecx
  00062	0f b6 48 05	 movzx	 ecx, BYTE PTR [eax+5]
  00066	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00069	c1 e7 18	 shl	 edi, 24			; 00000018H
  0006c	0b f9		 or	 edi, ecx
  0006e	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  00072	c1 e1 08	 shl	 ecx, 8
  00075	0b f9		 or	 edi, ecx
  00077	0f b6 48 07	 movzx	 ecx, BYTE PTR [eax+7]

; 1034 : 	t2 |= ((unsigned char)*(in++) << 16);
; 1035 : 	t2 |= ((unsigned char)*(in++) << 8);
; 1036 : 	(t2 |= (unsigned char)*(in++)) ^= Kdr[2];
; 1037 : 	int t3 = ((unsigned char)*(in++) << 24);
; 1038 : 	t3 |= ((unsigned char)*(in++) << 16);

  0007b	0f b6 58 0d	 movzx	 ebx, BYTE PTR [eax+13]
  0007f	0b f9		 or	 edi, ecx
  00081	0f b6 48 09	 movzx	 ecx, BYTE PTR [eax+9]
  00085	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00088	c1 e2 18	 shl	 edx, 24			; 00000018H
  0008b	0b d1		 or	 edx, ecx
  0008d	0f b6 48 0a	 movzx	 ecx, BYTE PTR [eax+10]
  00091	33 be ec 01 00
	00		 xor	 edi, DWORD PTR [esi+492]
  00097	c1 e1 08	 shl	 ecx, 8
  0009a	0b d1		 or	 edx, ecx
  0009c	0f b6 48 0b	 movzx	 ecx, BYTE PTR [eax+11]
  000a0	0b d1		 or	 edx, ecx
  000a2	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  000a6	33 96 f0 01 00
	00		 xor	 edx, DWORD PTR [esi+496]
  000ac	c1 e3 10	 shl	 ebx, 16			; 00000010H
  000af	c1 e1 18	 shl	 ecx, 24			; 00000018H
  000b2	0b cb		 or	 ecx, ebx

; 1039 : 	t3 |= ((unsigned char)*(in++) << 8);
; 1040 : 	(t3 |= (unsigned char)*(in++)) ^= Kdr[3];

  000b4	0f b6 58 0e	 movzx	 ebx, BYTE PTR [eax+14]
  000b8	0f b6 40 0f	 movzx	 eax, BYTE PTR [eax+15]
  000bc	c1 e3 08	 shl	 ebx, 8
  000bf	0b d8		 or	 ebx, eax
  000c1	0b d9		 or	 ebx, ecx
  000c3	33 9e f4 01 00
	00		 xor	 ebx, DWORD PTR [esi+500]

; 1041 : 	int a0, a1, a2, a3;
; 1042 : 	for(int r = 1; r < m_iROUNDS; r++) // apply round transforms

  000c9	8b 8e d0 03 00
	00		 mov	 ecx, DWORD PTR [esi+976]
  000cf	89 5d f8	 mov	 DWORD PTR _t3$[ebp], ebx
  000d2	89 4d ec	 mov	 DWORD PTR tv524[ebp], ecx
  000d5	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  000da	83 f9 01	 cmp	 ecx, 1
  000dd	0f 8e 1c 01 00
	00		 jle	 $LN9@DefDecrypt

; 1024 : 	int* Kdr = m_Kd[0];

  000e3	81 c6 10 02 00
	00		 add	 esi, 528		; 00000210H
  000e9	49		 dec	 ecx
  000ea	89 75 08	 mov	 DWORD PTR tv850[ebp], esi
  000ed	89 4d f4	 mov	 DWORD PTR tv361[ebp], ecx
$LL3@DefDecrypt:

; 1043 : 	{
; 1044 : 		Kdr = m_Kd[r];
; 1045 : 		a0 = (sm_T5[(t0 >> 24) & 0xFF] ^
; 1046 : 			sm_T6[(t3 >> 16) & 0xFF] ^
; 1047 : 			sm_T7[(t2 >>  8) & 0xFF] ^
; 1048 : 			sm_T8[ t1        & 0xFF] ) ^ Kdr[0];
; 1049 : 		a1 = (sm_T5[(t1 >> 24) & 0xFF] ^
; 1050 : 			sm_T6[(t0 >> 16) & 0xFF] ^
; 1051 : 			sm_T7[(t3 >>  8) & 0xFF] ^
; 1052 : 			sm_T8[ t2        & 0xFF] ) ^ Kdr[1];

  000f0	c1 fb 08	 sar	 ebx, 8
  000f3	23 d8		 and	 ebx, eax
  000f5	8b 34 9d 00 00
	00 00		 mov	 esi, DWORD PTR ?sm_T7@Abcdef@@0QBHB[ebx*4]
  000fc	8b cf		 mov	 ecx, edi
  000fe	c1 f9 18	 sar	 ecx, 24			; 00000018H
  00101	23 c8		 and	 ecx, eax
  00103	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR ?sm_T5@Abcdef@@0QBHB[ecx*4]
  0010a	8b 4d fc	 mov	 ecx, DWORD PTR _t0$[ebp]
  0010d	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00110	23 c8		 and	 ecx, eax
  00112	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR ?sm_T6@Abcdef@@0QBHB[ecx*4]
  00119	8b ca		 mov	 ecx, edx
  0011b	23 c8		 and	 ecx, eax
  0011d	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR ?sm_T8@Abcdef@@0QBHB[ecx*4]
  00124	8b 4d 08	 mov	 ecx, DWORD PTR tv850[ebp]
  00127	33 71 fc	 xor	 esi, DWORD PTR [ecx-4]

; 1053 : 		a2 = (sm_T5[(t2 >> 24) & 0xFF] ^
; 1054 : 			sm_T6[(t1 >> 16) & 0xFF] ^
; 1055 : 			sm_T7[(t0 >>  8) & 0xFF] ^
; 1056 : 			sm_T8[ t3        & 0xFF] ) ^ Kdr[2];

  0012a	8b ca		 mov	 ecx, edx
  0012c	c1 f9 18	 sar	 ecx, 24			; 00000018H
  0012f	23 c8		 and	 ecx, eax
  00131	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR ?sm_T5@Abcdef@@0QBHB[ecx*4]
  00138	8b df		 mov	 ebx, edi
  0013a	c1 fb 10	 sar	 ebx, 16			; 00000010H
  0013d	23 d8		 and	 ebx, eax
  0013f	33 0c 9d 00 00
	00 00		 xor	 ecx, DWORD PTR ?sm_T6@Abcdef@@0QBHB[ebx*4]
  00146	8b 5d fc	 mov	 ebx, DWORD PTR _t0$[ebp]
  00149	c1 fb 08	 sar	 ebx, 8
  0014c	23 d8		 and	 ebx, eax
  0014e	33 0c 9d 00 00
	00 00		 xor	 ecx, DWORD PTR ?sm_T7@Abcdef@@0QBHB[ebx*4]
  00155	8b 5d f8	 mov	 ebx, DWORD PTR _t3$[ebp]
  00158	23 d8		 and	 ebx, eax
  0015a	33 0c 9d 00 00
	00 00		 xor	 ecx, DWORD PTR ?sm_T8@Abcdef@@0QBHB[ebx*4]
  00161	8b 5d 08	 mov	 ebx, DWORD PTR tv850[ebp]
  00164	33 0b		 xor	 ecx, DWORD PTR [ebx]

; 1057 : 		a3 = (sm_T5[(t3 >> 24) & 0xFF] ^
; 1058 : 			sm_T6[(t2 >> 16) & 0xFF] ^
; 1059 : 			sm_T7[(t1 >>  8) & 0xFF] ^
; 1060 : 			sm_T8[ t0        & 0xFF] ) ^ Kdr[3];

  00166	8b da		 mov	 ebx, edx
  00168	c1 fb 10	 sar	 ebx, 16			; 00000010H
  0016b	23 d8		 and	 ebx, eax
  0016d	89 4d f0	 mov	 DWORD PTR _a2$[ebp], ecx
  00170	8b 4d f8	 mov	 ecx, DWORD PTR _t3$[ebp]
  00173	c1 f9 18	 sar	 ecx, 24			; 00000018H
  00176	23 c8		 and	 ecx, eax
  00178	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR ?sm_T5@Abcdef@@0QBHB[ecx*4]
  0017f	33 0c 9d 00 00
	00 00		 xor	 ecx, DWORD PTR ?sm_T6@Abcdef@@0QBHB[ebx*4]
  00186	8b df		 mov	 ebx, edi
  00188	c1 fb 08	 sar	 ebx, 8
  0018b	23 d8		 and	 ebx, eax
  0018d	33 0c 9d 00 00
	00 00		 xor	 ecx, DWORD PTR ?sm_T7@Abcdef@@0QBHB[ebx*4]
  00194	8b 5d fc	 mov	 ebx, DWORD PTR _t0$[ebp]
  00197	23 d8		 and	 ebx, eax
  00199	33 0c 9d 00 00
	00 00		 xor	 ecx, DWORD PTR ?sm_T8@Abcdef@@0QBHB[ebx*4]
  001a0	8b 5d 08	 mov	 ebx, DWORD PTR tv850[ebp]
  001a3	33 4b 04	 xor	 ecx, DWORD PTR [ebx+4]

; 1061 : 		t0 = a0;

  001a6	8b 5d f8	 mov	 ebx, DWORD PTR _t3$[ebp]
  001a9	c1 fb 10	 sar	 ebx, 16			; 00000010H
  001ac	23 d8		 and	 ebx, eax
  001ae	8b 1c 9d 00 00
	00 00		 mov	 ebx, DWORD PTR ?sm_T6@Abcdef@@0QBHB[ebx*4]
  001b5	c1 fa 08	 sar	 edx, 8
  001b8	23 d0		 and	 edx, eax
  001ba	33 1c 95 00 00
	00 00		 xor	 ebx, DWORD PTR ?sm_T7@Abcdef@@0QBHB[edx*4]
  001c1	8b 55 fc	 mov	 edx, DWORD PTR _t0$[ebp]
  001c4	c1 fa 18	 sar	 edx, 24			; 00000018H
  001c7	23 d0		 and	 edx, eax
  001c9	33 1c 95 00 00
	00 00		 xor	 ebx, DWORD PTR ?sm_T5@Abcdef@@0QBHB[edx*4]
  001d0	8b 55 08	 mov	 edx, DWORD PTR tv850[ebp]
  001d3	83 45 08 20	 add	 DWORD PTR tv850[ebp], 32 ; 00000020H
  001d7	23 f8		 and	 edi, eax
  001d9	33 1c bd 00 00
	00 00		 xor	 ebx, DWORD PTR ?sm_T8@Abcdef@@0QBHB[edi*4]

; 1062 : 		t1 = a1;

  001e0	8b fe		 mov	 edi, esi
  001e2	33 5a f8	 xor	 ebx, DWORD PTR [edx-8]
  001e5	ff 4d f4	 dec	 DWORD PTR tv361[ebp]

; 1063 : 		t2 = a2;

  001e8	8b 55 f0	 mov	 edx, DWORD PTR _a2$[ebp]
  001eb	89 5d fc	 mov	 DWORD PTR _t0$[ebp], ebx

; 1064 : 		t3 = a3;

  001ee	8b d9		 mov	 ebx, ecx
  001f0	89 5d f8	 mov	 DWORD PTR _t3$[ebp], ebx
  001f3	0f 85 f7 fe ff
	ff		 jne	 $LL3@DefDecrypt

; 1041 : 	int a0, a1, a2, a3;
; 1042 : 	for(int r = 1; r < m_iROUNDS; r++) // apply round transforms

  001f9	8b 4d ec	 mov	 ecx, DWORD PTR tv524[ebp]
  001fc	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
$LN9@DefDecrypt:

; 1065 : 	}
; 1066 : 	//Last Round is special
; 1067 : 	Kdr = m_Kd[m_iROUNDS];

  001ff	c1 e1 05	 shl	 ecx, 5
  00202	8d b4 31 e8 01
	00 00		 lea	 esi, DWORD PTR [ecx+esi+488]

; 1068 : 	int tt = Kdr[0];
; 1069 : 	result[ 0] = sm_Si[(t0 >> 24) & 0xFF] ^ (tt >> 24);

  00209	8b 4d fc	 mov	 ecx, DWORD PTR _t0$[ebp]
  0020c	c1 f9 18	 sar	 ecx, 24			; 00000018H
  0020f	23 c8		 and	 ecx, eax

; 1070 : 	result[ 1] = sm_Si[(t3 >> 16) & 0xFF] ^ (tt >> 16);

  00211	c1 fb 10	 sar	 ebx, 16			; 00000010H
  00214	23 d8		 and	 ebx, eax
  00216	89 75 f4	 mov	 DWORD PTR _Kdr$[ebp], esi
  00219	8b 36		 mov	 esi, DWORD PTR [esi]
  0021b	89 55 e8	 mov	 DWORD PTR tv772[ebp], edx
  0021e	89 75 08	 mov	 DWORD PTR _tt$[ebp], esi
  00221	8b d6		 mov	 edx, esi
  00223	8b 75 0c	 mov	 esi, DWORD PTR _result$[ebp]
  00226	c1 fa 18	 sar	 edx, 24			; 00000018H
  00229	32 91 00 00 00
	00		 xor	 dl, BYTE PTR ?sm_Si@Abcdef@@0QBDB[ecx]
  0022f	8b 4d 08	 mov	 ecx, DWORD PTR _tt$[ebp]
  00232	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00235	88 16		 mov	 BYTE PTR [esi], dl
  00237	32 8b 00 00 00
	00		 xor	 cl, BYTE PTR ?sm_Si@Abcdef@@0QBDB[ebx]
  0023d	8b 55 e8	 mov	 edx, DWORD PTR tv772[ebp]
  00240	88 4e 01	 mov	 BYTE PTR [esi+1], cl

; 1071 : 	result[ 2] = sm_Si[(t2 >>  8) & 0xFF] ^ (tt >>  8);

  00243	8b 5d 08	 mov	 ebx, DWORD PTR _tt$[ebp]
  00246	c1 fb 08	 sar	 ebx, 8
  00249	8b ca		 mov	 ecx, edx
  0024b	c1 f9 08	 sar	 ecx, 8
  0024e	23 c8		 and	 ecx, eax
  00250	32 99 00 00 00
	00		 xor	 bl, BYTE PTR ?sm_Si@Abcdef@@0QBDB[ecx]

; 1072 : 	result[ 3] = sm_Si[ t1 & 0xFF] ^ tt;

  00256	8b cf		 mov	 ecx, edi
  00258	23 c8		 and	 ecx, eax
  0025a	88 5e 02	 mov	 BYTE PTR [esi+2], bl
  0025d	8a 89 00 00 00
	00		 mov	 cl, BYTE PTR ?sm_Si@Abcdef@@0QBDB[ecx]
  00263	32 4d 08	 xor	 cl, BYTE PTR _tt$[ebp]

; 1073 : 	tt = Kdr[1];
; 1074 : 	result[ 4] = sm_Si[(t1 >> 24) & 0xFF] ^ (tt >> 24);

  00266	8b df		 mov	 ebx, edi
  00268	88 4e 03	 mov	 BYTE PTR [esi+3], cl
  0026b	8b 4d f4	 mov	 ecx, DWORD PTR _Kdr$[ebp]
  0026e	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00271	89 4d 08	 mov	 DWORD PTR _tt$[ebp], ecx
  00274	c1 f9 18	 sar	 ecx, 24			; 00000018H
  00277	c1 fb 18	 sar	 ebx, 24			; 00000018H
  0027a	23 d8		 and	 ebx, eax
  0027c	32 8b 00 00 00
	00		 xor	 cl, BYTE PTR ?sm_Si@Abcdef@@0QBDB[ebx]

; 1075 : 	result[ 5] = sm_Si[(t0 >> 16) & 0xFF] ^ (tt >> 16);

  00282	8b 5d 08	 mov	 ebx, DWORD PTR _tt$[ebp]
  00285	88 4e 04	 mov	 BYTE PTR [esi+4], cl
  00288	8b 4d fc	 mov	 ecx, DWORD PTR _t0$[ebp]
  0028b	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0028e	23 c8		 and	 ecx, eax
  00290	c1 fb 10	 sar	 ebx, 16			; 00000010H
  00293	32 99 00 00 00
	00		 xor	 bl, BYTE PTR ?sm_Si@Abcdef@@0QBDB[ecx]

; 1076 : 	result[ 6] = sm_Si[(t3 >>  8) & 0xFF] ^ (tt >>  8);

  00299	8b 4d f8	 mov	 ecx, DWORD PTR _t3$[ebp]
  0029c	c1 f9 08	 sar	 ecx, 8
  0029f	88 5e 05	 mov	 BYTE PTR [esi+5], bl
  002a2	8b 5d 08	 mov	 ebx, DWORD PTR _tt$[ebp]
  002a5	23 c8		 and	 ecx, eax
  002a7	c1 fb 08	 sar	 ebx, 8
  002aa	32 99 00 00 00
	00		 xor	 bl, BYTE PTR ?sm_Si@Abcdef@@0QBDB[ecx]

; 1077 : 	result[ 7] = sm_Si[ t2 & 0xFF] ^ tt;

  002b0	8b ca		 mov	 ecx, edx
  002b2	23 c8		 and	 ecx, eax
  002b4	88 5e 06	 mov	 BYTE PTR [esi+6], bl
  002b7	8a 89 00 00 00
	00		 mov	 cl, BYTE PTR ?sm_Si@Abcdef@@0QBDB[ecx]
  002bd	32 4d 08	 xor	 cl, BYTE PTR _tt$[ebp]

; 1078 : 	tt = Kdr[2];
; 1079 : 	result[ 8] = sm_Si[(t2 >> 24) & 0xFF] ^ (tt >> 24);

  002c0	8b da		 mov	 ebx, edx
  002c2	88 4e 07	 mov	 BYTE PTR [esi+7], cl
  002c5	8b 4d f4	 mov	 ecx, DWORD PTR _Kdr$[ebp]
  002c8	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  002cb	89 4d 08	 mov	 DWORD PTR _tt$[ebp], ecx
  002ce	c1 fb 18	 sar	 ebx, 24			; 00000018H
  002d1	c1 f9 18	 sar	 ecx, 24			; 00000018H
  002d4	23 d8		 and	 ebx, eax
  002d6	32 8b 00 00 00
	00		 xor	 cl, BYTE PTR ?sm_Si@Abcdef@@0QBDB[ebx]

; 1080 : 	result[ 9] = sm_Si[(t1 >> 16) & 0xFF] ^ (tt >> 16);

  002dc	8b 5d 08	 mov	 ebx, DWORD PTR _tt$[ebp]
  002df	88 4e 08	 mov	 BYTE PTR [esi+8], cl
  002e2	8b cf		 mov	 ecx, edi
  002e4	c1 f9 10	 sar	 ecx, 16			; 00000010H
  002e7	23 c8		 and	 ecx, eax
  002e9	c1 fb 10	 sar	 ebx, 16			; 00000010H
  002ec	32 99 00 00 00
	00		 xor	 bl, BYTE PTR ?sm_Si@Abcdef@@0QBDB[ecx]

; 1081 : 	result[10] = sm_Si[(t0 >>  8) & 0xFF] ^ (tt >>  8);

  002f2	8b 4d fc	 mov	 ecx, DWORD PTR _t0$[ebp]
  002f5	c1 f9 08	 sar	 ecx, 8
  002f8	88 5e 09	 mov	 BYTE PTR [esi+9], bl
  002fb	8b 5d 08	 mov	 ebx, DWORD PTR _tt$[ebp]
  002fe	23 c8		 and	 ecx, eax
  00300	c1 fb 08	 sar	 ebx, 8
  00303	32 99 00 00 00
	00		 xor	 bl, BYTE PTR ?sm_Si@Abcdef@@0QBDB[ecx]

; 1082 : 	result[11] = sm_Si[ t3 & 0xFF] ^ tt;

  00309	8b 4d f8	 mov	 ecx, DWORD PTR _t3$[ebp]
  0030c	23 c8		 and	 ecx, eax
  0030e	88 5e 0a	 mov	 BYTE PTR [esi+10], bl
  00311	8a 89 00 00 00
	00		 mov	 cl, BYTE PTR ?sm_Si@Abcdef@@0QBDB[ecx]
  00317	32 4d 08	 xor	 cl, BYTE PTR _tt$[ebp]

; 1083 : 	tt = Kdr[3];
; 1084 : 	result[12] = sm_Si[(t3 >> 24) & 0xFF] ^ (tt >> 24);
; 1085 : 	result[13] = sm_Si[(t2 >> 16) & 0xFF] ^ (tt >> 16);

  0031a	c1 fa 10	 sar	 edx, 16			; 00000010H
  0031d	88 4e 0b	 mov	 BYTE PTR [esi+11], cl
  00320	8b 4d f4	 mov	 ecx, DWORD PTR _Kdr$[ebp]
  00323	8b 59 0c	 mov	 ebx, DWORD PTR [ecx+12]
  00326	8b 4d f8	 mov	 ecx, DWORD PTR _t3$[ebp]
  00329	c1 f9 18	 sar	 ecx, 24			; 00000018H
  0032c	23 c8		 and	 ecx, eax
  0032e	89 5d 08	 mov	 DWORD PTR _tt$[ebp], ebx
  00331	c1 fb 18	 sar	 ebx, 24			; 00000018H
  00334	32 99 00 00 00
	00		 xor	 bl, BYTE PTR ?sm_Si@Abcdef@@0QBDB[ecx]
  0033a	8b 4d 08	 mov	 ecx, DWORD PTR _tt$[ebp]
  0033d	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00340	88 5e 0c	 mov	 BYTE PTR [esi+12], bl
  00343	23 d0		 and	 edx, eax
  00345	32 8a 00 00 00
	00		 xor	 cl, BYTE PTR ?sm_Si@Abcdef@@0QBDB[edx]

; 1086 : 	result[14] = sm_Si[(t1 >>  8) & 0xFF] ^ (tt >>  8);

  0034b	c1 ff 08	 sar	 edi, 8
  0034e	88 4e 0d	 mov	 BYTE PTR [esi+13], cl
  00351	8b 4d 08	 mov	 ecx, DWORD PTR _tt$[ebp]
  00354	23 f8		 and	 edi, eax
  00356	c1 f9 08	 sar	 ecx, 8
  00359	32 8f 00 00 00
	00		 xor	 cl, BYTE PTR ?sm_Si@Abcdef@@0QBDB[edi]
  0035f	5f		 pop	 edi
  00360	88 4e 0e	 mov	 BYTE PTR [esi+14], cl

; 1087 : 	result[15] = sm_Si[ t0 & 0xFF] ^ tt;

  00363	8b 4d fc	 mov	 ecx, DWORD PTR _t0$[ebp]
  00366	23 c8		 and	 ecx, eax
  00368	8a 81 00 00 00
	00		 mov	 al, BYTE PTR ?sm_Si@Abcdef@@0QBDB[ecx]
  0036e	32 45 08	 xor	 al, BYTE PTR _tt$[ebp]
  00371	88 46 0f	 mov	 BYTE PTR [esi+15], al
  00374	5e		 pop	 esi
  00375	5b		 pop	 ebx

; 1088 : }

  00376	c9		 leave
  00377	c2 08 00	 ret	 8
$LN10@DefDecrypt:
?DefDecryptBlock@Abcdef@@AAEXPBDPAD@Z ENDP		; Abcdef::DefDecryptBlock
_TEXT	ENDS
PUBLIC	?EncryptBlock@Abcdef@@QAEXPBDPAD@Z		; Abcdef::EncryptBlock
EXTRN	_memcpy:PROC
; Function compile flags: /Ogsp
;	COMDAT ?EncryptBlock@Abcdef@@QAEXPBDPAD@Z
_TEXT	SEGMENT
$T505625 = -56						; size = 12
tv999 = -44						; size = 4
tv954 = -44						; size = 4
tv1003 = -40						; size = 4
tv759 = -40						; size = 4
tv755 = -36						; size = 4
_s3$ = -32						; size = 4
_s1$ = -28						; size = 4
tv292 = -24						; size = 4
tv722 = -20						; size = 4
tv982 = -16						; size = 4
tv300 = -16						; size = 4
_r$505352 = -16						; size = 4
tv851 = -12						; size = 4
tv724 = -8						; size = 4
tv547 = -8						; size = 4
_i$ = -8						; size = 4
_s2$ = -4						; size = 4
tv863 = 8						; size = 4
tv578 = 8						; size = 4
_in$ = 8						; size = 4
_tt$ = 12						; size = 4
_result$ = 12						; size = 4
?EncryptBlock@Abcdef@@QAEXPBDPAD@Z PROC			; Abcdef::EncryptBlock, COMDAT
; _this$ = ecx

; 1094 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 1095 : 	if(false==m_bKeyInit)

  00009	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  0000d	75 1c		 jne	 SHORT $LN14@EncryptBlo

; 1096 : 		throw exception(sm_szErrorMsg1);

  0000f	68 00 00 00 00	 push	 OFFSET ?sm_szErrorMsg1@Abcdef@@0PBDB ; Abcdef::sm_szErrorMsg1
  00014	8d 4d c8	 lea	 ecx, DWORD PTR $T505625[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  0001d	68 00 00 00 00	 push	 OFFSET __TI1?AVexception@std@@
  00022	8d 45 c8	 lea	 eax, DWORD PTR $T505625[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN31@EncryptBlo:
$LN14@EncryptBlo:

; 1097 : 	if(DEFAULT_BLOCK_SIZE == m_blockSize)

  0002b	8b 86 cc 03 00
	00		 mov	 eax, DWORD PTR [esi+972]
  00031	83 f8 10	 cmp	 eax, 16			; 00000010H
  00034	75 10		 jne	 SHORT $LN13@EncryptBlo

; 1098 : 	{
; 1099 : 		DefEncryptBlock(in, result);

  00036	ff 75 0c	 push	 DWORD PTR _result$[ebp]
  00039	ff 75 08	 push	 DWORD PTR _in$[ebp]
  0003c	e8 00 00 00 00	 call	 ?DefEncryptBlock@Abcdef@@AAEXPBDPAD@Z ; Abcdef::DefEncryptBlock

; 1100 : 		return;

  00041	e9 52 02 00 00	 jmp	 $LN1@EncryptBlo
$LN13@EncryptBlo:

; 1101 : 	}
; 1102 : 	int BC = m_blockSize / 4;

  00046	99		 cdq
  00047	83 e2 03	 and	 edx, 3
  0004a	53		 push	 ebx
  0004b	8d 1c 02	 lea	 ebx, DWORD PTR [edx+eax]

; 1103 : 	int SC = (BC == 4) ? 0 : (BC == 6 ? 1 : 2);

  0004e	33 c9		 xor	 ecx, ecx
  00050	c1 fb 02	 sar	 ebx, 2
  00053	83 fb 06	 cmp	 ebx, 6
  00056	0f 95 c1	 setne	 cl
  00059	8d 43 fc	 lea	 eax, DWORD PTR [ebx-4]
  0005c	57		 push	 edi
  0005d	41		 inc	 ecx
  0005e	f7 d8		 neg	 eax
  00060	1b c0		 sbb	 eax, eax
  00062	23 c1		 and	 eax, ecx

; 1104 : 	int s1 = sm_shifts[SC][1][0];

  00064	c1 e0 05	 shl	 eax, 5
  00067	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?sm_shifts@Abcdef@@0QAY131$$CBHA[eax+8]
  0006d	89 4d e4	 mov	 DWORD PTR _s1$[ebp], ecx

; 1105 : 	int s2 = sm_shifts[SC][2][0];

  00070	8b 88 10 00 00
	00		 mov	 ecx, DWORD PTR ?sm_shifts@Abcdef@@0QAY131$$CBHA[eax+16]

; 1106 : 	int s3 = sm_shifts[SC][3][0];

  00076	8b 80 18 00 00
	00		 mov	 eax, DWORD PTR ?sm_shifts@Abcdef@@0QAY131$$CBHA[eax+24]
  0007c	89 45 e0	 mov	 DWORD PTR _s3$[ebp], eax
  0007f	89 4d fc	 mov	 DWORD PTR _s2$[ebp], ecx

; 1107 : 	//Temporary Work Arrays
; 1108 : 	int i;
; 1109 : 	int tt;
; 1110 : 	int* pi = t;

  00082	8d 86 54 04 00
	00		 lea	 eax, DWORD PTR [esi+1108]

; 1111 : 	for(i=0; i<BC; i++)

  00088	85 db		 test	 ebx, ebx
  0008a	7e 44		 jle	 SHORT $LN10@EncryptBlo

; 1101 : 	}
; 1102 : 	int BC = m_blockSize / 4;

  0008c	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0008f	89 4d f8	 mov	 DWORD PTR tv547[ebp], ecx
  00092	8b 4d 08	 mov	 ecx, DWORD PTR _in$[ebp]
  00095	89 5d f0	 mov	 DWORD PTR tv300[ebp], ebx
$LL12@EncryptBlo:

; 1112 : 	{
; 1113 : 		*pi = ((unsigned char)*(in++) << 24);

  00098	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  0009b	c1 e2 18	 shl	 edx, 24			; 00000018H
  0009e	89 10		 mov	 DWORD PTR [eax], edx

; 1114 : 		*pi |= ((unsigned char)*(in++) << 16);

  000a0	0f b6 51 01	 movzx	 edx, BYTE PTR [ecx+1]
  000a4	c1 e2 10	 shl	 edx, 16			; 00000010H
  000a7	09 10		 or	 DWORD PTR [eax], edx

; 1115 : 		*pi |= ((unsigned char)*(in++) << 8);

  000a9	0f b6 51 02	 movzx	 edx, BYTE PTR [ecx+2]
  000ad	c1 e2 08	 shl	 edx, 8
  000b0	09 10		 or	 DWORD PTR [eax], edx

; 1116 : 		(*(pi++) |= (unsigned char)*(in++)) ^= m_Ke[0][i];

  000b2	0f b6 79 03	 movzx	 edi, BYTE PTR [ecx+3]
  000b6	09 38		 or	 DWORD PTR [eax], edi
  000b8	8b 7d f8	 mov	 edi, DWORD PTR tv547[ebp]
  000bb	8b 3f		 mov	 edi, DWORD PTR [edi]
  000bd	83 45 f8 04	 add	 DWORD PTR tv547[ebp], 4
  000c1	8b d0		 mov	 edx, eax
  000c3	31 3a		 xor	 DWORD PTR [edx], edi
  000c5	83 c1 04	 add	 ecx, 4
  000c8	83 c0 04	 add	 eax, 4
  000cb	ff 4d f0	 dec	 DWORD PTR tv300[ebp]
  000ce	75 c8		 jne	 SHORT $LL12@EncryptBlo
$LN10@EncryptBlo:

; 1117 : 	}
; 1118 : 	//Apply Round Transforms
; 1119 : 	for(int r=1; r<m_iROUNDS; r++)

  000d0	33 c0		 xor	 eax, eax
  000d2	40		 inc	 eax
  000d3	89 45 f0	 mov	 DWORD PTR _r$505352[ebp], eax
  000d6	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  000db	39 86 d0 03 00
	00		 cmp	 DWORD PTR [esi+976], eax
  000e1	0f 8e e3 00 00
	00		 jle	 $LN7@EncryptBlo
  000e7	8d 46 28	 lea	 eax, DWORD PTR [esi+40]
  000ea	89 45 f4	 mov	 DWORD PTR tv851[ebp], eax
$LL26@EncryptBlo:

; 1120 : 	{
; 1121 : 		for(i=0; i<BC; i++)

  000ed	85 db		 test	 ebx, ebx
  000ef	0f 8e a3 00 00
	00		 jle	 $LN4@EncryptBlo
  000f5	8b 4d e4	 mov	 ecx, DWORD PTR _s1$[ebp]
  000f8	8d 86 34 04 00
	00		 lea	 eax, DWORD PTR [esi+1076]
  000fe	89 45 ec	 mov	 DWORD PTR tv722[ebp], eax
  00101	8b 45 f4	 mov	 eax, DWORD PTR tv851[ebp]
  00104	89 45 f8	 mov	 DWORD PTR tv724[ebp], eax
  00107	8b 45 fc	 mov	 eax, DWORD PTR _s2$[ebp]
  0010a	2b c1		 sub	 eax, ecx
  0010c	89 45 dc	 mov	 DWORD PTR tv755[ebp], eax
  0010f	8b 45 e0	 mov	 eax, DWORD PTR _s3$[ebp]
  00112	2b c1		 sub	 eax, ecx
  00114	89 4d 08	 mov	 DWORD PTR tv578[ebp], ecx
  00117	89 45 d8	 mov	 DWORD PTR tv759[ebp], eax
  0011a	89 5d e8	 mov	 DWORD PTR tv292[ebp], ebx
$LL25@EncryptBlo:

; 1122 : 			a[i] = (sm_T1[(t[i] >> 24) & 0xFF] ^
; 1123 : 			sm_T2[(t[(i + s1) % BC] >> 16) & 0xFF] ^
; 1124 : 			sm_T3[(t[(i + s2) % BC] >>  8) & 0xFF] ^
; 1125 : 			sm_T4[ t[(i + s3) % BC] & 0xFF] ) ^ m_Ke[r][i];

  0011d	8b 4d 08	 mov	 ecx, DWORD PTR tv578[ebp]
  00120	8b 45 dc	 mov	 eax, DWORD PTR tv755[ebp]
  00123	03 c1		 add	 eax, ecx
  00125	99		 cdq
  00126	f7 fb		 idiv	 ebx
  00128	8b 84 96 54 04
	00 00		 mov	 eax, DWORD PTR [esi+edx*4+1108]
  0012f	8b 55 d8	 mov	 edx, DWORD PTR tv759[ebp]
  00132	c1 f8 08	 sar	 eax, 8
  00135	23 c7		 and	 eax, edi
  00137	89 45 d4	 mov	 DWORD PTR tv954[ebp], eax
  0013a	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  0013d	99		 cdq
  0013e	f7 fb		 idiv	 ebx
  00140	8b 4d d4	 mov	 ecx, DWORD PTR tv954[ebp]
  00143	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR ?sm_T3@Abcdef@@0QBHB[ecx*4]
  0014a	8b 84 96 54 04
	00 00		 mov	 eax, DWORD PTR [esi+edx*4+1108]
  00151	23 c7		 and	 eax, edi
  00153	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?sm_T4@Abcdef@@0QBHB[eax*4]
  0015a	8b 45 08	 mov	 eax, DWORD PTR tv578[ebp]
  0015d	99		 cdq
  0015e	f7 fb		 idiv	 ebx
  00160	0f bf 84 96 56
	04 00 00	 movsx	 eax, WORD PTR [esi+edx*4+1110]
  00168	23 c7		 and	 eax, edi
  0016a	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?sm_T2@Abcdef@@0QBHB[eax*4]
  00171	8b 45 ec	 mov	 eax, DWORD PTR tv722[ebp]
  00174	0f b6 50 23	 movzx	 edx, BYTE PTR [eax+35]
  00178	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR ?sm_T1@Abcdef@@0QBHB[edx*4]
  0017f	8b 55 f8	 mov	 edx, DWORD PTR tv724[ebp]
  00182	33 0a		 xor	 ecx, DWORD PTR [edx]
  00184	83 45 f8 04	 add	 DWORD PTR tv724[ebp], 4
  00188	89 08		 mov	 DWORD PTR [eax], ecx
  0018a	83 c0 04	 add	 eax, 4
  0018d	ff 45 08	 inc	 DWORD PTR tv578[ebp]
  00190	ff 4d e8	 dec	 DWORD PTR tv292[ebp]
  00193	89 45 ec	 mov	 DWORD PTR tv722[ebp], eax
  00196	75 85		 jne	 SHORT $LL25@EncryptBlo
$LN4@EncryptBlo:

; 1126 : 		memcpy(t, a, 4*BC);

  00198	8b c3		 mov	 eax, ebx
  0019a	c1 e0 02	 shl	 eax, 2
  0019d	50		 push	 eax
  0019e	8d 86 34 04 00
	00		 lea	 eax, DWORD PTR [esi+1076]
  001a4	50		 push	 eax
  001a5	8d 86 54 04 00
	00		 lea	 eax, DWORD PTR [esi+1108]
  001ab	50		 push	 eax
  001ac	e8 00 00 00 00	 call	 _memcpy
  001b1	83 45 f4 20	 add	 DWORD PTR tv851[ebp], 32 ; 00000020H
  001b5	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b8	ff 45 f0	 inc	 DWORD PTR _r$505352[ebp]
  001bb	8b 45 f0	 mov	 eax, DWORD PTR _r$505352[ebp]
  001be	3b 86 d0 03 00
	00		 cmp	 eax, DWORD PTR [esi+976]
  001c4	0f 8c 23 ff ff
	ff		 jl	 $LL26@EncryptBlo
$LN7@EncryptBlo:

; 1127 : 	}
; 1128 : 	int j;
; 1129 : 	//Last Round is Special
; 1130 : 	for(i=0,j=0; i<BC; i++)

  001ca	83 65 f8 00	 and	 DWORD PTR _i$[ebp], 0
  001ce	85 db		 test	 ebx, ebx
  001d0	0f 8e c0 00 00
	00		 jle	 $LN28@EncryptBlo
  001d6	8b 45 fc	 mov	 eax, DWORD PTR _s2$[ebp]
  001d9	8b 4d 0c	 mov	 ecx, DWORD PTR _result$[ebp]
  001dc	89 45 08	 mov	 DWORD PTR tv863[ebp], eax
  001df	8d 86 54 04 00
	00		 lea	 eax, DWORD PTR [esi+1108]
  001e5	89 45 f0	 mov	 DWORD PTR tv982[ebp], eax
  001e8	8b 45 e4	 mov	 eax, DWORD PTR _s1$[ebp]
  001eb	2b 45 fc	 sub	 eax, DWORD PTR _s2$[ebp]
  001ee	89 45 d4	 mov	 DWORD PTR tv999[ebp], eax
  001f1	8b 45 e0	 mov	 eax, DWORD PTR _s3$[ebp]
  001f4	2b 45 fc	 sub	 eax, DWORD PTR _s2$[ebp]
  001f7	89 45 d8	 mov	 DWORD PTR tv1003[ebp], eax
$LL27@EncryptBlo:

; 1131 : 	{
; 1132 : 		tt = m_Ke[m_iROUNDS][i];

  001fa	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  00200	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00203	8d 04 c2	 lea	 eax, DWORD PTR [edx+eax*8]
  00206	8b 44 86 08	 mov	 eax, DWORD PTR [esi+eax*4+8]

; 1133 : 		result[j++] = sm_S[(t[i] >> 24) & 0xFF] ^ (tt >> 24);

  0020a	8b 55 f0	 mov	 edx, DWORD PTR tv982[ebp]
  0020d	0f b6 52 03	 movzx	 edx, BYTE PTR [edx+3]
  00211	89 45 0c	 mov	 DWORD PTR _tt$[ebp], eax
  00214	c1 f8 18	 sar	 eax, 24			; 00000018H
  00217	32 82 00 00 00
	00		 xor	 al, BYTE PTR ?sm_S@Abcdef@@0QBDB[edx]
  0021d	83 45 f0 04	 add	 DWORD PTR tv982[ebp], 4
  00221	88 01		 mov	 BYTE PTR [ecx], al

; 1134 : 		result[j++] = sm_S[(t[(i + s1) % BC] >> 16) & 0xFF] ^ (tt >> 16);

  00223	8b 45 d4	 mov	 eax, DWORD PTR tv999[ebp]
  00226	03 45 08	 add	 eax, DWORD PTR tv863[ebp]
  00229	99		 cdq
  0022a	f7 fb		 idiv	 ebx
  0022c	0f bf 84 96 56
	04 00 00	 movsx	 eax, WORD PTR [esi+edx*4+1110]
  00234	8b 55 0c	 mov	 edx, DWORD PTR _tt$[ebp]
  00237	23 c7		 and	 eax, edi
  00239	c1 fa 10	 sar	 edx, 16			; 00000010H
  0023c	32 90 00 00 00
	00		 xor	 dl, BYTE PTR ?sm_S@Abcdef@@0QBDB[eax]

; 1135 : 		result[j++] = sm_S[(t[(i + s2) % BC] >>  8) & 0xFF] ^ (tt >>  8);

  00242	8b 45 08	 mov	 eax, DWORD PTR tv863[ebp]
  00245	88 51 01	 mov	 BYTE PTR [ecx+1], dl
  00248	99		 cdq
  00249	f7 fb		 idiv	 ebx
  0024b	8b 84 96 54 04
	00 00		 mov	 eax, DWORD PTR [esi+edx*4+1108]
  00252	8b 55 0c	 mov	 edx, DWORD PTR _tt$[ebp]
  00255	c1 f8 08	 sar	 eax, 8
  00258	23 c7		 and	 eax, edi
  0025a	c1 fa 08	 sar	 edx, 8
  0025d	32 90 00 00 00
	00		 xor	 dl, BYTE PTR ?sm_S@Abcdef@@0QBDB[eax]
  00263	8b 45 d8	 mov	 eax, DWORD PTR tv1003[ebp]
  00266	03 45 08	 add	 eax, DWORD PTR tv863[ebp]
  00269	88 51 02	 mov	 BYTE PTR [ecx+2], dl

; 1136 : 		result[j++] = sm_S[ t[(i + s3) % BC] & 0xFF] ^ tt;

  0026c	99		 cdq
  0026d	f7 fb		 idiv	 ebx
  0026f	8b 84 96 54 04
	00 00		 mov	 eax, DWORD PTR [esi+edx*4+1108]
  00276	23 c7		 and	 eax, edi
  00278	8a 80 00 00 00
	00		 mov	 al, BYTE PTR ?sm_S@Abcdef@@0QBDB[eax]
  0027e	32 45 0c	 xor	 al, BYTE PTR _tt$[ebp]
  00281	83 c1 04	 add	 ecx, 4
  00284	ff 45 f8	 inc	 DWORD PTR _i$[ebp]
  00287	ff 45 08	 inc	 DWORD PTR tv863[ebp]
  0028a	88 41 ff	 mov	 BYTE PTR [ecx-1], al
  0028d	39 5d f8	 cmp	 DWORD PTR _i$[ebp], ebx
  00290	0f 8c 64 ff ff
	ff		 jl	 $LL27@EncryptBlo
$LN28@EncryptBlo:
  00296	5f		 pop	 edi
  00297	5b		 pop	 ebx
$LN1@EncryptBlo:
  00298	5e		 pop	 esi

; 1137 : 	}
; 1138 : }

  00299	c9		 leave
  0029a	c2 08 00	 ret	 8
$LN30@EncryptBlo:
?EncryptBlock@Abcdef@@QAEXPBDPAD@Z ENDP			; Abcdef::EncryptBlock
_TEXT	ENDS
PUBLIC	?DecryptBlock@Abcdef@@QAEXPBDPAD@Z		; Abcdef::DecryptBlock
; Function compile flags: /Ogsp
;	COMDAT ?DecryptBlock@Abcdef@@QAEXPBDPAD@Z
_TEXT	SEGMENT
$T505645 = -56						; size = 12
tv999 = -44						; size = 4
tv954 = -44						; size = 4
tv1003 = -40						; size = 4
tv759 = -40						; size = 4
tv755 = -36						; size = 4
_s3$ = -32						; size = 4
_s1$ = -28						; size = 4
tv292 = -24						; size = 4
tv722 = -20						; size = 4
tv982 = -16						; size = 4
tv300 = -16						; size = 4
_r$505388 = -16						; size = 4
tv851 = -12						; size = 4
tv724 = -8						; size = 4
tv547 = -8						; size = 4
_i$ = -8						; size = 4
_s2$ = -4						; size = 4
tv863 = 8						; size = 4
tv578 = 8						; size = 4
_in$ = 8						; size = 4
_tt$ = 12						; size = 4
_result$ = 12						; size = 4
?DecryptBlock@Abcdef@@QAEXPBDPAD@Z PROC			; Abcdef::DecryptBlock, COMDAT
; _this$ = ecx

; 1144 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 1145 : 	if(false==m_bKeyInit)

  00009	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  0000d	75 1c		 jne	 SHORT $LN14@DecryptBlo

; 1146 : 		throw exception(sm_szErrorMsg1);

  0000f	68 00 00 00 00	 push	 OFFSET ?sm_szErrorMsg1@Abcdef@@0PBDB ; Abcdef::sm_szErrorMsg1
  00014	8d 4d c8	 lea	 ecx, DWORD PTR $T505645[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  0001d	68 00 00 00 00	 push	 OFFSET __TI1?AVexception@std@@
  00022	8d 45 c8	 lea	 eax, DWORD PTR $T505645[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN31@DecryptBlo:
$LN14@DecryptBlo:

; 1147 : 	if(DEFAULT_BLOCK_SIZE == m_blockSize)

  0002b	8b 86 cc 03 00
	00		 mov	 eax, DWORD PTR [esi+972]
  00031	83 f8 10	 cmp	 eax, 16			; 00000010H
  00034	75 10		 jne	 SHORT $LN13@DecryptBlo

; 1148 : 	{
; 1149 : 		DefDecryptBlock(in, result);

  00036	ff 75 0c	 push	 DWORD PTR _result$[ebp]
  00039	ff 75 08	 push	 DWORD PTR _in$[ebp]
  0003c	e8 00 00 00 00	 call	 ?DefDecryptBlock@Abcdef@@AAEXPBDPAD@Z ; Abcdef::DefDecryptBlock

; 1150 : 		return;

  00041	e9 5b 02 00 00	 jmp	 $LN1@DecryptBlo
$LN13@DecryptBlo:

; 1151 : 	}
; 1152 : 	int BC = m_blockSize / 4;

  00046	99		 cdq
  00047	83 e2 03	 and	 edx, 3
  0004a	53		 push	 ebx
  0004b	8d 1c 02	 lea	 ebx, DWORD PTR [edx+eax]

; 1153 : 	int SC = BC == 4 ? 0 : (BC == 6 ? 1 : 2);

  0004e	33 c9		 xor	 ecx, ecx
  00050	c1 fb 02	 sar	 ebx, 2
  00053	83 fb 06	 cmp	 ebx, 6
  00056	0f 95 c1	 setne	 cl
  00059	8d 43 fc	 lea	 eax, DWORD PTR [ebx-4]
  0005c	57		 push	 edi
  0005d	41		 inc	 ecx
  0005e	f7 d8		 neg	 eax
  00060	1b c0		 sbb	 eax, eax
  00062	23 c1		 and	 eax, ecx

; 1154 : 	int s1 = sm_shifts[SC][1][1];

  00064	c1 e0 05	 shl	 eax, 5
  00067	8b 88 0c 00 00
	00		 mov	 ecx, DWORD PTR ?sm_shifts@Abcdef@@0QAY131$$CBHA[eax+12]
  0006d	89 4d e4	 mov	 DWORD PTR _s1$[ebp], ecx

; 1155 : 	int s2 = sm_shifts[SC][2][1];

  00070	8b 88 14 00 00
	00		 mov	 ecx, DWORD PTR ?sm_shifts@Abcdef@@0QAY131$$CBHA[eax+20]

; 1156 : 	int s3 = sm_shifts[SC][3][1];

  00076	8b 80 1c 00 00
	00		 mov	 eax, DWORD PTR ?sm_shifts@Abcdef@@0QAY131$$CBHA[eax+28]
  0007c	89 45 e0	 mov	 DWORD PTR _s3$[ebp], eax
  0007f	89 4d fc	 mov	 DWORD PTR _s2$[ebp], ecx

; 1157 : 	//Temporary Work Arrays
; 1158 : 	int i;
; 1159 : 	int tt;
; 1160 : 	int* pi = t;

  00082	8d 86 54 04 00
	00		 lea	 eax, DWORD PTR [esi+1108]

; 1161 : 	for(i=0; i<BC; i++)

  00088	85 db		 test	 ebx, ebx
  0008a	7e 47		 jle	 SHORT $LN10@DecryptBlo

; 1151 : 	}
; 1152 : 	int BC = m_blockSize / 4;

  0008c	8d 8e e8 01 00
	00		 lea	 ecx, DWORD PTR [esi+488]
  00092	89 4d f8	 mov	 DWORD PTR tv547[ebp], ecx
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _in$[ebp]
  00098	89 5d f0	 mov	 DWORD PTR tv300[ebp], ebx
$LL12@DecryptBlo:

; 1162 : 	{
; 1163 : 		*pi = ((unsigned char)*(in++) << 24);

  0009b	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  0009e	c1 e2 18	 shl	 edx, 24			; 00000018H
  000a1	89 10		 mov	 DWORD PTR [eax], edx

; 1164 : 		*pi |= ((unsigned char)*(in++) << 16);

  000a3	0f b6 51 01	 movzx	 edx, BYTE PTR [ecx+1]
  000a7	c1 e2 10	 shl	 edx, 16			; 00000010H
  000aa	09 10		 or	 DWORD PTR [eax], edx

; 1165 : 		*pi |= ((unsigned char)*(in++) << 8);

  000ac	0f b6 51 02	 movzx	 edx, BYTE PTR [ecx+2]
  000b0	c1 e2 08	 shl	 edx, 8
  000b3	09 10		 or	 DWORD PTR [eax], edx

; 1166 : 		(*(pi++) |= (unsigned char)*(in++)) ^= m_Kd[0][i];

  000b5	0f b6 79 03	 movzx	 edi, BYTE PTR [ecx+3]
  000b9	09 38		 or	 DWORD PTR [eax], edi
  000bb	8b 7d f8	 mov	 edi, DWORD PTR tv547[ebp]
  000be	8b 3f		 mov	 edi, DWORD PTR [edi]
  000c0	83 45 f8 04	 add	 DWORD PTR tv547[ebp], 4
  000c4	8b d0		 mov	 edx, eax
  000c6	31 3a		 xor	 DWORD PTR [edx], edi
  000c8	83 c1 04	 add	 ecx, 4
  000cb	83 c0 04	 add	 eax, 4
  000ce	ff 4d f0	 dec	 DWORD PTR tv300[ebp]
  000d1	75 c8		 jne	 SHORT $LL12@DecryptBlo
$LN10@DecryptBlo:

; 1167 : 	}
; 1168 : 	//Apply Round Transforms
; 1169 : 	for(int r=1; r<m_iROUNDS; r++)

  000d3	33 c0		 xor	 eax, eax
  000d5	40		 inc	 eax
  000d6	89 45 f0	 mov	 DWORD PTR _r$505388[ebp], eax
  000d9	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  000de	39 86 d0 03 00
	00		 cmp	 DWORD PTR [esi+976], eax
  000e4	0f 8e e6 00 00
	00		 jle	 $LN7@DecryptBlo
  000ea	8d 86 08 02 00
	00		 lea	 eax, DWORD PTR [esi+520]
  000f0	89 45 f4	 mov	 DWORD PTR tv851[ebp], eax
$LL26@DecryptBlo:

; 1170 : 	{
; 1171 : 		for(i=0; i<BC; i++)

  000f3	85 db		 test	 ebx, ebx
  000f5	0f 8e a3 00 00
	00		 jle	 $LN4@DecryptBlo
  000fb	8b 4d e4	 mov	 ecx, DWORD PTR _s1$[ebp]
  000fe	8d 86 34 04 00
	00		 lea	 eax, DWORD PTR [esi+1076]
  00104	89 45 ec	 mov	 DWORD PTR tv722[ebp], eax
  00107	8b 45 f4	 mov	 eax, DWORD PTR tv851[ebp]
  0010a	89 45 f8	 mov	 DWORD PTR tv724[ebp], eax
  0010d	8b 45 fc	 mov	 eax, DWORD PTR _s2$[ebp]
  00110	2b c1		 sub	 eax, ecx
  00112	89 45 dc	 mov	 DWORD PTR tv755[ebp], eax
  00115	8b 45 e0	 mov	 eax, DWORD PTR _s3$[ebp]
  00118	2b c1		 sub	 eax, ecx
  0011a	89 4d 08	 mov	 DWORD PTR tv578[ebp], ecx
  0011d	89 45 d8	 mov	 DWORD PTR tv759[ebp], eax
  00120	89 5d e8	 mov	 DWORD PTR tv292[ebp], ebx
$LL25@DecryptBlo:

; 1172 : 			a[i] = (sm_T5[(t[i] >> 24) & 0xFF] ^
; 1173 : 			sm_T6[(t[(i + s1) % BC] >> 16) & 0xFF] ^
; 1174 : 			sm_T7[(t[(i + s2) % BC] >>  8) & 0xFF] ^
; 1175 : 			sm_T8[ t[(i + s3) % BC] & 0xFF]) ^ m_Kd[r][i];

  00123	8b 4d 08	 mov	 ecx, DWORD PTR tv578[ebp]
  00126	8b 45 dc	 mov	 eax, DWORD PTR tv755[ebp]
  00129	03 c1		 add	 eax, ecx
  0012b	99		 cdq
  0012c	f7 fb		 idiv	 ebx
  0012e	8b 84 96 54 04
	00 00		 mov	 eax, DWORD PTR [esi+edx*4+1108]
  00135	8b 55 d8	 mov	 edx, DWORD PTR tv759[ebp]
  00138	c1 f8 08	 sar	 eax, 8
  0013b	23 c7		 and	 eax, edi
  0013d	89 45 d4	 mov	 DWORD PTR tv954[ebp], eax
  00140	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  00143	99		 cdq
  00144	f7 fb		 idiv	 ebx
  00146	8b 4d d4	 mov	 ecx, DWORD PTR tv954[ebp]
  00149	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR ?sm_T7@Abcdef@@0QBHB[ecx*4]
  00150	8b 84 96 54 04
	00 00		 mov	 eax, DWORD PTR [esi+edx*4+1108]
  00157	23 c7		 and	 eax, edi
  00159	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?sm_T8@Abcdef@@0QBHB[eax*4]
  00160	8b 45 08	 mov	 eax, DWORD PTR tv578[ebp]
  00163	99		 cdq
  00164	f7 fb		 idiv	 ebx
  00166	0f bf 84 96 56
	04 00 00	 movsx	 eax, WORD PTR [esi+edx*4+1110]
  0016e	23 c7		 and	 eax, edi
  00170	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?sm_T6@Abcdef@@0QBHB[eax*4]
  00177	8b 45 ec	 mov	 eax, DWORD PTR tv722[ebp]
  0017a	0f b6 50 23	 movzx	 edx, BYTE PTR [eax+35]
  0017e	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR ?sm_T5@Abcdef@@0QBHB[edx*4]
  00185	8b 55 f8	 mov	 edx, DWORD PTR tv724[ebp]
  00188	33 0a		 xor	 ecx, DWORD PTR [edx]
  0018a	83 45 f8 04	 add	 DWORD PTR tv724[ebp], 4
  0018e	89 08		 mov	 DWORD PTR [eax], ecx
  00190	83 c0 04	 add	 eax, 4
  00193	ff 45 08	 inc	 DWORD PTR tv578[ebp]
  00196	ff 4d e8	 dec	 DWORD PTR tv292[ebp]
  00199	89 45 ec	 mov	 DWORD PTR tv722[ebp], eax
  0019c	75 85		 jne	 SHORT $LL25@DecryptBlo
$LN4@DecryptBlo:

; 1176 : 		memcpy(t, a, 4*BC);

  0019e	8b c3		 mov	 eax, ebx
  001a0	c1 e0 02	 shl	 eax, 2
  001a3	50		 push	 eax
  001a4	8d 86 34 04 00
	00		 lea	 eax, DWORD PTR [esi+1076]
  001aa	50		 push	 eax
  001ab	8d 86 54 04 00
	00		 lea	 eax, DWORD PTR [esi+1108]
  001b1	50		 push	 eax
  001b2	e8 00 00 00 00	 call	 _memcpy
  001b7	83 45 f4 20	 add	 DWORD PTR tv851[ebp], 32 ; 00000020H
  001bb	83 c4 0c	 add	 esp, 12			; 0000000cH
  001be	ff 45 f0	 inc	 DWORD PTR _r$505388[ebp]
  001c1	8b 45 f0	 mov	 eax, DWORD PTR _r$505388[ebp]
  001c4	3b 86 d0 03 00
	00		 cmp	 eax, DWORD PTR [esi+976]
  001ca	0f 8c 23 ff ff
	ff		 jl	 $LL26@DecryptBlo
$LN7@DecryptBlo:

; 1177 : 	}
; 1178 : 	int j;
; 1179 : 	//Last Round is Special
; 1180 : 	for(i=0,j=0; i<BC; i++)

  001d0	83 65 f8 00	 and	 DWORD PTR _i$[ebp], 0
  001d4	85 db		 test	 ebx, ebx
  001d6	0f 8e c3 00 00
	00		 jle	 $LN28@DecryptBlo
  001dc	8b 45 fc	 mov	 eax, DWORD PTR _s2$[ebp]
  001df	8b 4d 0c	 mov	 ecx, DWORD PTR _result$[ebp]
  001e2	89 45 08	 mov	 DWORD PTR tv863[ebp], eax
  001e5	8d 86 54 04 00
	00		 lea	 eax, DWORD PTR [esi+1108]
  001eb	89 45 f0	 mov	 DWORD PTR tv982[ebp], eax
  001ee	8b 45 e4	 mov	 eax, DWORD PTR _s1$[ebp]
  001f1	2b 45 fc	 sub	 eax, DWORD PTR _s2$[ebp]
  001f4	89 45 d4	 mov	 DWORD PTR tv999[ebp], eax
  001f7	8b 45 e0	 mov	 eax, DWORD PTR _s3$[ebp]
  001fa	2b 45 fc	 sub	 eax, DWORD PTR _s2$[ebp]
  001fd	89 45 d8	 mov	 DWORD PTR tv1003[ebp], eax
$LL27@DecryptBlo:

; 1181 : 	{
; 1182 : 		tt = m_Kd[m_iROUNDS][i];

  00200	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  00206	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00209	8d 04 c2	 lea	 eax, DWORD PTR [edx+eax*8]
  0020c	8b 84 86 e8 01
	00 00		 mov	 eax, DWORD PTR [esi+eax*4+488]

; 1183 : 		result[j++] = sm_Si[(t[i] >> 24) & 0xFF] ^ (tt >> 24);

  00213	8b 55 f0	 mov	 edx, DWORD PTR tv982[ebp]
  00216	0f b6 52 03	 movzx	 edx, BYTE PTR [edx+3]
  0021a	89 45 0c	 mov	 DWORD PTR _tt$[ebp], eax
  0021d	c1 f8 18	 sar	 eax, 24			; 00000018H
  00220	32 82 00 00 00
	00		 xor	 al, BYTE PTR ?sm_Si@Abcdef@@0QBDB[edx]
  00226	83 45 f0 04	 add	 DWORD PTR tv982[ebp], 4
  0022a	88 01		 mov	 BYTE PTR [ecx], al

; 1184 : 		result[j++] = sm_Si[(t[(i + s1) % BC] >> 16) & 0xFF] ^ (tt >> 16);

  0022c	8b 45 d4	 mov	 eax, DWORD PTR tv999[ebp]
  0022f	03 45 08	 add	 eax, DWORD PTR tv863[ebp]
  00232	99		 cdq
  00233	f7 fb		 idiv	 ebx
  00235	0f bf 84 96 56
	04 00 00	 movsx	 eax, WORD PTR [esi+edx*4+1110]
  0023d	8b 55 0c	 mov	 edx, DWORD PTR _tt$[ebp]
  00240	23 c7		 and	 eax, edi
  00242	c1 fa 10	 sar	 edx, 16			; 00000010H
  00245	32 90 00 00 00
	00		 xor	 dl, BYTE PTR ?sm_Si@Abcdef@@0QBDB[eax]

; 1185 : 		result[j++] = sm_Si[(t[(i + s2) % BC] >>  8) & 0xFF] ^ (tt >>  8);

  0024b	8b 45 08	 mov	 eax, DWORD PTR tv863[ebp]
  0024e	88 51 01	 mov	 BYTE PTR [ecx+1], dl
  00251	99		 cdq
  00252	f7 fb		 idiv	 ebx
  00254	8b 84 96 54 04
	00 00		 mov	 eax, DWORD PTR [esi+edx*4+1108]
  0025b	8b 55 0c	 mov	 edx, DWORD PTR _tt$[ebp]
  0025e	c1 f8 08	 sar	 eax, 8
  00261	23 c7		 and	 eax, edi
  00263	c1 fa 08	 sar	 edx, 8
  00266	32 90 00 00 00
	00		 xor	 dl, BYTE PTR ?sm_Si@Abcdef@@0QBDB[eax]
  0026c	8b 45 d8	 mov	 eax, DWORD PTR tv1003[ebp]
  0026f	03 45 08	 add	 eax, DWORD PTR tv863[ebp]
  00272	88 51 02	 mov	 BYTE PTR [ecx+2], dl

; 1186 : 		result[j++] = sm_Si[ t[(i + s3) % BC] & 0xFF] ^ tt;

  00275	99		 cdq
  00276	f7 fb		 idiv	 ebx
  00278	8b 84 96 54 04
	00 00		 mov	 eax, DWORD PTR [esi+edx*4+1108]
  0027f	23 c7		 and	 eax, edi
  00281	8a 80 00 00 00
	00		 mov	 al, BYTE PTR ?sm_Si@Abcdef@@0QBDB[eax]
  00287	32 45 0c	 xor	 al, BYTE PTR _tt$[ebp]
  0028a	83 c1 04	 add	 ecx, 4
  0028d	ff 45 f8	 inc	 DWORD PTR _i$[ebp]
  00290	ff 45 08	 inc	 DWORD PTR tv863[ebp]
  00293	88 41 ff	 mov	 BYTE PTR [ecx-1], al
  00296	39 5d f8	 cmp	 DWORD PTR _i$[ebp], ebx
  00299	0f 8c 61 ff ff
	ff		 jl	 $LL27@DecryptBlo
$LN28@DecryptBlo:
  0029f	5f		 pop	 edi
  002a0	5b		 pop	 ebx
$LN1@DecryptBlo:
  002a1	5e		 pop	 esi

; 1187 : 	}
; 1188 : }

  002a2	c9		 leave
  002a3	c2 08 00	 ret	 8
$LN30@DecryptBlo:
?DecryptBlock@Abcdef@@QAEXPBDPAD@Z ENDP			; Abcdef::DecryptBlock
_TEXT	ENDS
PUBLIC	?Encrypt@Abcdef@@QAEXPBDPADIH@Z			; Abcdef::Encrypt
; Function compile flags: /Ogsp
;	COMDAT ?Encrypt@Abcdef@@QAEXPBDPADIH@Z
_TEXT	SEGMENT
$T505664 = -12						; size = 12
_in$ = 8						; size = 4
_result$ = 12						; size = 4
_n$ = 16						; size = 4
_i$ = 20						; size = 4
_iMode$ = 20						; size = 4
?Encrypt@Abcdef@@QAEXPBDPADIH@Z PROC			; Abcdef::Encrypt, COMDAT
; _this$ = ecx

; 1191 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 1192 : 	if(false==m_bKeyInit)

  0000a	33 c9		 xor	 ecx, ecx
  0000c	57		 push	 edi
  0000d	38 4e 04	 cmp	 BYTE PTR [esi+4], cl
  00010	75 1c		 jne	 SHORT $LN16@Encrypt

; 1193 : 		throw exception(sm_szErrorMsg1);

  00012	68 00 00 00 00	 push	 OFFSET ?sm_szErrorMsg1@Abcdef@@0PBDB ; Abcdef::sm_szErrorMsg1
$LN26@Encrypt:
  00017	8d 4d f4	 lea	 ecx, DWORD PTR $T505664[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00020	68 00 00 00 00	 push	 OFFSET __TI1?AVexception@std@@
  00025	8d 45 f4	 lea	 eax, DWORD PTR $T505664[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN27@Encrypt:
$LN16@Encrypt:

; 1194 : 	//n should be > 0 and multiple of m_blockSize
; 1195 : 	if(0==n || n%m_blockSize!=0)

  0002e	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp]
  00031	3b c1		 cmp	 eax, ecx
  00033	0f 84 10 01 00
	00		 je	 $LN14@Encrypt
  00039	33 d2		 xor	 edx, edx
  0003b	f7 b6 cc 03 00
	00		 div	 DWORD PTR [esi+972]
  00041	3b d1		 cmp	 edx, ecx
  00043	0f 85 00 01 00
	00		 jne	 $LN14@Encrypt

; 1197 : 	int i;
; 1198 : 	char const* pin;
; 1199 : 	char* presult;
; 1200 : 	if(CBC == iMode) //CBC mode, using the Chain

  00049	83 7d 14 01	 cmp	 DWORD PTR _iMode$[ebp], 1
  0004d	75 65		 jne	 SHORT $LN13@Encrypt

; 1201 : 	{
; 1202 : 		for(i=0,pin=in,presult=result; i<n/m_blockSize; i++)

  0004f	8b 5d 08	 mov	 ebx, DWORD PTR _in$[ebp]
  00052	8b 7d 0c	 mov	 edi, DWORD PTR _result$[ebp]
  00055	89 4d 14	 mov	 DWORD PTR _i$[ebp], ecx
  00058	3b c1		 cmp	 eax, ecx
  0005a	76 51		 jbe	 SHORT $LN1@Encrypt
$LL12@Encrypt:

; 1203 : 		{
; 1204 : 			Xor(m_chain, pin);

  0005c	53		 push	 ebx
  0005d	8d 86 f4 03 00
	00		 lea	 eax, DWORD PTR [esi+1012]
  00063	50		 push	 eax
  00064	8b ce		 mov	 ecx, esi
  00066	e8 00 00 00 00	 call	 ?Xor@Abcdef@@AAEXPADPBD@Z ; Abcdef::Xor

; 1205 : 			EncryptBlock(m_chain, presult);

  0006b	57		 push	 edi
  0006c	8d 86 f4 03 00
	00		 lea	 eax, DWORD PTR [esi+1012]
  00072	50		 push	 eax
  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?EncryptBlock@Abcdef@@QAEXPBDPAD@Z ; Abcdef::EncryptBlock

; 1206 : 			memcpy(m_chain, presult, m_blockSize);

  0007a	ff b6 cc 03 00
	00		 push	 DWORD PTR [esi+972]
  00080	8d 86 f4 03 00
	00		 lea	 eax, DWORD PTR [esi+1012]
  00086	57		 push	 edi
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 _memcpy

; 1207 : 			pin += m_blockSize;

  0008d	8b 86 cc 03 00
	00		 mov	 eax, DWORD PTR [esi+972]
  00093	03 d8		 add	 ebx, eax

; 1208 : 			presult += m_blockSize;

  00095	03 f8		 add	 edi, eax
  00097	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp]
  0009a	33 d2		 xor	 edx, edx
  0009c	f7 b6 cc 03 00
	00		 div	 DWORD PTR [esi+972]
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a5	ff 45 14	 inc	 DWORD PTR _i$[ebp]
  000a8	39 45 14	 cmp	 DWORD PTR _i$[ebp], eax
  000ab	72 af		 jb	 SHORT $LL12@Encrypt
$LN1@Encrypt:
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx

; 1229 : 		}
; 1230 : 	}
; 1231 : }

  000b0	c9		 leave
  000b1	c2 10 00	 ret	 16			; 00000010H
$LN13@Encrypt:

; 1209 : 		}
; 1210 : 	}
; 1211 : 	else if(CFB == iMode) //CFB mode, using the Chain

  000b4	83 7d 14 02	 cmp	 DWORD PTR _iMode$[ebp], 2

; 1212 : 	{
; 1213 : 		for(i=0,pin=in,presult=result; i<n/m_blockSize; i++)

  000b8	89 4d 14	 mov	 DWORD PTR _i$[ebp], ecx
  000bb	75 57		 jne	 SHORT $LN8@Encrypt
  000bd	8b 5d 08	 mov	 ebx, DWORD PTR _in$[ebp]
  000c0	8b 7d 0c	 mov	 edi, DWORD PTR _result$[ebp]
  000c3	3b c1		 cmp	 eax, ecx
  000c5	76 e6		 jbe	 SHORT $LN1@Encrypt
$LL7@Encrypt:

; 1214 : 		{
; 1215 : 			EncryptBlock(m_chain, presult);

  000c7	57		 push	 edi
  000c8	8d 86 f4 03 00
	00		 lea	 eax, DWORD PTR [esi+1012]
  000ce	50		 push	 eax
  000cf	8b ce		 mov	 ecx, esi
  000d1	e8 00 00 00 00	 call	 ?EncryptBlock@Abcdef@@QAEXPBDPAD@Z ; Abcdef::EncryptBlock

; 1216 : 			Xor(presult, pin);

  000d6	53		 push	 ebx
  000d7	57		 push	 edi
  000d8	8b ce		 mov	 ecx, esi
  000da	e8 00 00 00 00	 call	 ?Xor@Abcdef@@AAEXPADPBD@Z ; Abcdef::Xor

; 1217 : 			memcpy(m_chain, presult, m_blockSize);

  000df	ff b6 cc 03 00
	00		 push	 DWORD PTR [esi+972]
  000e5	8d 86 f4 03 00
	00		 lea	 eax, DWORD PTR [esi+1012]
  000eb	57		 push	 edi
  000ec	50		 push	 eax
  000ed	e8 00 00 00 00	 call	 _memcpy

; 1218 : 			pin += m_blockSize;

  000f2	8b 86 cc 03 00
	00		 mov	 eax, DWORD PTR [esi+972]
  000f8	03 d8		 add	 ebx, eax

; 1219 : 			presult += m_blockSize;

  000fa	03 f8		 add	 edi, eax
  000fc	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp]
  000ff	33 d2		 xor	 edx, edx
  00101	f7 b6 cc 03 00
	00		 div	 DWORD PTR [esi+972]
  00107	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010a	ff 45 14	 inc	 DWORD PTR _i$[ebp]
  0010d	39 45 14	 cmp	 DWORD PTR _i$[ebp], eax
  00110	72 b5		 jb	 SHORT $LL7@Encrypt

; 1220 : 		}
; 1221 : 	}
; 1222 : 	else //ECB mode, not using the Chain

  00112	eb 99		 jmp	 SHORT $LN1@Encrypt
$LN8@Encrypt:

; 1223 : 	{
; 1224 : 		for(i=0,pin=in,presult=result; i<n/m_blockSize; i++)

  00114	8b 7d 08	 mov	 edi, DWORD PTR _in$[ebp]
  00117	8b 5d 0c	 mov	 ebx, DWORD PTR _result$[ebp]
  0011a	3b c1		 cmp	 eax, ecx
  0011c	76 8f		 jbe	 SHORT $LN1@Encrypt
$LL3@Encrypt:

; 1225 : 		{
; 1226 : 			EncryptBlock(pin, presult);

  0011e	53		 push	 ebx
  0011f	57		 push	 edi
  00120	8b ce		 mov	 ecx, esi
  00122	e8 00 00 00 00	 call	 ?EncryptBlock@Abcdef@@QAEXPBDPAD@Z ; Abcdef::EncryptBlock

; 1227 : 			pin += m_blockSize;

  00127	8b 86 cc 03 00
	00		 mov	 eax, DWORD PTR [esi+972]
  0012d	03 f8		 add	 edi, eax

; 1228 : 			presult += m_blockSize;

  0012f	03 d8		 add	 ebx, eax
  00131	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp]
  00134	33 d2		 xor	 edx, edx
  00136	f7 b6 cc 03 00
	00		 div	 DWORD PTR [esi+972]
  0013c	ff 45 14	 inc	 DWORD PTR _i$[ebp]
  0013f	39 45 14	 cmp	 DWORD PTR _i$[ebp], eax
  00142	72 da		 jb	 SHORT $LL3@Encrypt

; 1194 : 	//n should be > 0 and multiple of m_blockSize
; 1195 : 	if(0==n || n%m_blockSize!=0)

  00144	e9 64 ff ff ff	 jmp	 $LN1@Encrypt
$LN14@Encrypt:

; 1196 : 		throw exception(sm_szErrorMsg2);

  00149	68 00 00 00 00	 push	 OFFSET ?sm_szErrorMsg2@Abcdef@@0PBDB ; Abcdef::sm_szErrorMsg2
  0014e	e9 c4 fe ff ff	 jmp	 $LN26@Encrypt
$LN25@Encrypt:
?Encrypt@Abcdef@@QAEXPBDPADIH@Z ENDP			; Abcdef::Encrypt
_TEXT	ENDS
PUBLIC	?Decrypt@Abcdef@@QAEXPBDPADIH@Z			; Abcdef::Decrypt
; Function compile flags: /Ogsp
;	COMDAT ?Decrypt@Abcdef@@QAEXPBDPADIH@Z
_TEXT	SEGMENT
$T505677 = -12						; size = 12
_in$ = 8						; size = 4
_result$ = 12						; size = 4
_n$ = 16						; size = 4
_i$ = 20						; size = 4
_iMode$ = 20						; size = 4
?Decrypt@Abcdef@@QAEXPBDPADIH@Z PROC			; Abcdef::Decrypt, COMDAT
; _this$ = ecx

; 1234 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 1235 : 	if(false==m_bKeyInit)

  0000a	33 c9		 xor	 ecx, ecx
  0000c	57		 push	 edi
  0000d	38 4e 04	 cmp	 BYTE PTR [esi+4], cl
  00010	75 1c		 jne	 SHORT $LN16@Decrypt

; 1236 : 		throw exception(sm_szErrorMsg1);

  00012	68 00 00 00 00	 push	 OFFSET ?sm_szErrorMsg1@Abcdef@@0PBDB ; Abcdef::sm_szErrorMsg1
$LN26@Decrypt:
  00017	8d 4d f4	 lea	 ecx, DWORD PTR $T505677[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00020	68 00 00 00 00	 push	 OFFSET __TI1?AVexception@std@@
  00025	8d 45 f4	 lea	 eax, DWORD PTR $T505677[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN27@Decrypt:
$LN16@Decrypt:

; 1237 : 	//n should be > 0 and multiple of m_blockSize
; 1238 : 	if(0==n || n%m_blockSize!=0)

  0002e	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp]
  00031	3b c1		 cmp	 eax, ecx
  00033	0f 84 fe 00 00
	00		 je	 $LN14@Decrypt
  00039	33 d2		 xor	 edx, edx
  0003b	f7 b6 cc 03 00
	00		 div	 DWORD PTR [esi+972]
  00041	3b d1		 cmp	 edx, ecx
  00043	0f 85 ee 00 00
	00		 jne	 $LN14@Decrypt

; 1240 : 	int i;
; 1241 : 	char const* pin;
; 1242 : 	char* presult;
; 1243 : 	if(CBC == iMode) //CBC mode, using the Chain

  00049	83 7d 14 01	 cmp	 DWORD PTR _iMode$[ebp], 1

; 1244 : 	{
; 1245 : 		for(i=0,pin=in,presult=result; i<n/m_blockSize; i++)

  0004d	8b 7d 08	 mov	 edi, DWORD PTR _in$[ebp]
  00050	8b 5d 0c	 mov	 ebx, DWORD PTR _result$[ebp]
  00053	75 59		 jne	 SHORT $LN13@Decrypt
  00055	89 4d 14	 mov	 DWORD PTR _i$[ebp], ecx
  00058	3b c1		 cmp	 eax, ecx
  0005a	76 4b		 jbe	 SHORT $LN1@Decrypt
$LL12@Decrypt:

; 1246 : 		{
; 1247 : 			DecryptBlock(pin, presult);

  0005c	53		 push	 ebx
  0005d	57		 push	 edi
  0005e	8b ce		 mov	 ecx, esi
  00060	e8 00 00 00 00	 call	 ?DecryptBlock@Abcdef@@QAEXPBDPAD@Z ; Abcdef::DecryptBlock

; 1248 : 			Xor(presult, m_chain);

  00065	8d 86 f4 03 00
	00		 lea	 eax, DWORD PTR [esi+1012]
  0006b	50		 push	 eax
  0006c	53		 push	 ebx
  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?Xor@Abcdef@@AAEXPADPBD@Z ; Abcdef::Xor

; 1249 : 			memcpy(m_chain, pin, m_blockSize);				

  00074	ff b6 cc 03 00
	00		 push	 DWORD PTR [esi+972]
  0007a	8d 86 f4 03 00
	00		 lea	 eax, DWORD PTR [esi+1012]
  00080	57		 push	 edi
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 _memcpy

; 1250 : 			pin += m_blockSize;

  00087	8b 86 cc 03 00
	00		 mov	 eax, DWORD PTR [esi+972]
  0008d	03 f8		 add	 edi, eax

; 1251 : 			presult += m_blockSize;

  0008f	03 d8		 add	 ebx, eax
  00091	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp]
  00094	33 d2		 xor	 edx, edx
  00096	f7 b6 cc 03 00
	00		 div	 DWORD PTR [esi+972]
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009f	ff 45 14	 inc	 DWORD PTR _i$[ebp]
  000a2	39 45 14	 cmp	 DWORD PTR _i$[ebp], eax
  000a5	72 b5		 jb	 SHORT $LL12@Decrypt
$LN1@Decrypt:
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx

; 1273 : 		}
; 1274 : 	}
; 1275 : }

  000aa	c9		 leave
  000ab	c2 10 00	 ret	 16			; 00000010H
$LN13@Decrypt:

; 1252 : 		}
; 1253 : 	}
; 1254 : 	else if(CFB == iMode) //CFB mode, using the Chain, not using Decrypt()

  000ae	83 7d 14 02	 cmp	 DWORD PTR _iMode$[ebp], 2

; 1255 : 	{
; 1256 : 		for(i=0,pin=in,presult=result; i<n/m_blockSize; i++)

  000b2	89 4d 14	 mov	 DWORD PTR _i$[ebp], ecx
  000b5	75 51		 jne	 SHORT $LN8@Decrypt
  000b7	3b c1		 cmp	 eax, ecx
  000b9	76 ec		 jbe	 SHORT $LN1@Decrypt
$LL7@Decrypt:

; 1257 : 		{
; 1258 : 			EncryptBlock(m_chain, presult);

  000bb	53		 push	 ebx
  000bc	8d 86 f4 03 00
	00		 lea	 eax, DWORD PTR [esi+1012]
  000c2	50		 push	 eax
  000c3	8b ce		 mov	 ecx, esi
  000c5	e8 00 00 00 00	 call	 ?EncryptBlock@Abcdef@@QAEXPBDPAD@Z ; Abcdef::EncryptBlock

; 1259 : 			//memcpy(presult, pin, m_blockSize);
; 1260 : 			Xor(presult, pin);

  000ca	57		 push	 edi
  000cb	53		 push	 ebx
  000cc	8b ce		 mov	 ecx, esi
  000ce	e8 00 00 00 00	 call	 ?Xor@Abcdef@@AAEXPADPBD@Z ; Abcdef::Xor

; 1261 : 			memcpy(m_chain, pin, m_blockSize);

  000d3	ff b6 cc 03 00
	00		 push	 DWORD PTR [esi+972]
  000d9	8d 86 f4 03 00
	00		 lea	 eax, DWORD PTR [esi+1012]
  000df	57		 push	 edi
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 _memcpy

; 1262 : 			pin += m_blockSize;

  000e6	8b 86 cc 03 00
	00		 mov	 eax, DWORD PTR [esi+972]
  000ec	03 f8		 add	 edi, eax

; 1263 : 			presult += m_blockSize;

  000ee	03 d8		 add	 ebx, eax
  000f0	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp]
  000f3	33 d2		 xor	 edx, edx
  000f5	f7 b6 cc 03 00
	00		 div	 DWORD PTR [esi+972]
  000fb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fe	ff 45 14	 inc	 DWORD PTR _i$[ebp]
  00101	39 45 14	 cmp	 DWORD PTR _i$[ebp], eax
  00104	72 b5		 jb	 SHORT $LL7@Decrypt

; 1264 : 		}
; 1265 : 	}
; 1266 : 	else //ECB mode, not using the Chain

  00106	eb 9f		 jmp	 SHORT $LN1@Decrypt
$LN8@Decrypt:

; 1267 : 	{
; 1268 : 		for(i=0,pin=in,presult=result; i<n/m_blockSize; i++)

  00108	3b c1		 cmp	 eax, ecx
  0010a	76 9b		 jbe	 SHORT $LN1@Decrypt
$LL3@Decrypt:

; 1269 : 		{
; 1270 : 			DecryptBlock(pin, presult);

  0010c	53		 push	 ebx
  0010d	57		 push	 edi
  0010e	8b ce		 mov	 ecx, esi
  00110	e8 00 00 00 00	 call	 ?DecryptBlock@Abcdef@@QAEXPBDPAD@Z ; Abcdef::DecryptBlock

; 1271 : 			pin += m_blockSize;

  00115	8b 86 cc 03 00
	00		 mov	 eax, DWORD PTR [esi+972]
  0011b	03 f8		 add	 edi, eax

; 1272 : 			presult += m_blockSize;

  0011d	03 d8		 add	 ebx, eax
  0011f	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp]
  00122	33 d2		 xor	 edx, edx
  00124	f7 b6 cc 03 00
	00		 div	 DWORD PTR [esi+972]
  0012a	ff 45 14	 inc	 DWORD PTR _i$[ebp]
  0012d	39 45 14	 cmp	 DWORD PTR _i$[ebp], eax
  00130	72 da		 jb	 SHORT $LL3@Decrypt

; 1237 : 	//n should be > 0 and multiple of m_blockSize
; 1238 : 	if(0==n || n%m_blockSize!=0)

  00132	e9 70 ff ff ff	 jmp	 $LN1@Decrypt
$LN14@Decrypt:

; 1239 : 		throw exception(sm_szErrorMsg2);

  00137	68 00 00 00 00	 push	 OFFSET ?sm_szErrorMsg2@Abcdef@@0PBDB ; Abcdef::sm_szErrorMsg2
  0013c	e9 d6 fe ff ff	 jmp	 $LN26@Decrypt
$LN25@Decrypt:
?Decrypt@Abcdef@@QAEXPBDPADIH@Z ENDP			; Abcdef::Decrypt
_TEXT	ENDS
PUBLIC	?MakeKey@Abcdef@@QAEXPBD0HH@Z			; Abcdef::MakeKey
; Function compile flags: /Ogsp
;	COMDAT ?MakeKey@Abcdef@@QAEXPBD0HH@Z
_TEXT	SEGMENT
$T505690 = -24						; size = 12
_ROUND_KEY_COUNT$ = -12					; size = 4
_j$ = -8						; size = 4
tv579 = -4						; size = 4
tv1290 = 8						; size = 4
tv984 = 8						; size = 4
_r$505550 = 8						; size = 4
_key$ = 8						; size = 4
tv1416 = 12						; size = 4
tv304 = 12						; size = 4
_t$ = 12						; size = 4
$T505691 = 12						; size = 4
_chain$ = 12						; size = 4
_BC$ = 16						; size = 4
_keylength$ = 16					; size = 4
tv1370 = 20						; size = 4
tv1301 = 20						; size = 4
_blockSize$ = 20					; size = 4
?MakeKey@Abcdef@@QAEXPBD0HH@Z PROC			; Abcdef::MakeKey, COMDAT
; _this$ = ecx

; 1284 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 1285 : 	if(NULL == key)

  00006	83 7d 08 00	 cmp	 DWORD PTR _key$[ebp], 0
  0000a	53		 push	 ebx
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	8b f1		 mov	 esi, ecx
  0000f	75 22		 jne	 SHORT $LN45@MakeKey
$LN85@MakeKey:

; 1286 : 		throw exception("-");

  00011	8d 45 0c	 lea	 eax, DWORD PTR $T505691[ebp]
  00014	50		 push	 eax
  00015	8d 4d e8	 lea	 ecx, DWORD PTR $T505690[ebp]
  00018	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR $T505691[ebp], OFFSET ??_C@_01JOAMLHOP@?9?$AA@
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00025	68 00 00 00 00	 push	 OFFSET __TI1?AVexception@std@@
  0002a	8d 45 e8	 lea	 eax, DWORD PTR $T505690[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN86@MakeKey:
$LN45@MakeKey:

; 1287 : 	if(!(16==keylength || 24==keylength || 32==keylength))

  00033	8b 4d 10	 mov	 ecx, DWORD PTR _keylength$[ebp]
  00036	6a 18		 push	 24			; 00000018H
  00038	5b		 pop	 ebx
  00039	6a 10		 push	 16			; 00000010H
  0003b	5f		 pop	 edi
  0003c	3b cf		 cmp	 ecx, edi
  0003e	74 09		 je	 SHORT $LN79@MakeKey
  00040	3b cb		 cmp	 ecx, ebx
  00042	74 05		 je	 SHORT $LN79@MakeKey
  00044	83 f9 20	 cmp	 ecx, 32			; 00000020H

; 1288 : 		throw exception("-");

  00047	75 c8		 jne	 SHORT $LN85@MakeKey
$LN79@MakeKey:

; 1289 : 	if(!(16==blockSize || 24==blockSize || 32==blockSize))

  00049	8b 45 14	 mov	 eax, DWORD PTR _blockSize$[ebp]
  0004c	3b c7		 cmp	 eax, edi
  0004e	74 09		 je	 SHORT $LN43@MakeKey
  00050	3b c3		 cmp	 eax, ebx
  00052	74 05		 je	 SHORT $LN43@MakeKey
  00054	83 f8 20	 cmp	 eax, 32			; 00000020H

; 1290 : 		throw exception("-");

  00057	75 b8		 jne	 SHORT $LN85@MakeKey
$LN43@MakeKey:

; 1291 : 	m_keylength = keylength;
; 1292 : 	m_blockSize = blockSize;
; 1293 : 	//Initialize the chain
; 1294 : 	memcpy(m_chain0, chain, m_blockSize);

  00059	50		 push	 eax
  0005a	ff 75 0c	 push	 DWORD PTR _chain$[ebp]
  0005d	89 86 cc 03 00
	00		 mov	 DWORD PTR [esi+972], eax
  00063	8d 86 d4 03 00
	00		 lea	 eax, DWORD PTR [esi+980]
  00069	50		 push	 eax
  0006a	89 8e c8 03 00
	00		 mov	 DWORD PTR [esi+968], ecx
  00070	e8 00 00 00 00	 call	 _memcpy

; 1295 : 	memcpy(m_chain, chain, m_blockSize);

  00075	ff b6 cc 03 00
	00		 push	 DWORD PTR [esi+972]
  0007b	8d 86 f4 03 00
	00		 lea	 eax, DWORD PTR [esi+1012]
  00081	ff 75 0c	 push	 DWORD PTR _chain$[ebp]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 _memcpy

; 1296 : 	//Calculate Number of Rounds
; 1297 : 	switch(m_keylength)

  0008a	8b 86 c8 03 00
	00		 mov	 eax, DWORD PTR [esi+968]
  00090	83 c4 18	 add	 esp, 24			; 00000018H
  00093	3b c7		 cmp	 eax, edi
  00095	74 22		 je	 SHORT $LN40@MakeKey
  00097	3b c3		 cmp	 eax, ebx
  00099	74 0c		 je	 SHORT $LN39@MakeKey

; 1306 : 
; 1307 : 		default: // 32 bytes = 256 bits
; 1308 : 			m_iROUNDS = 14;

  0009b	c7 86 d0 03 00
	00 0e 00 00 00	 mov	 DWORD PTR [esi+976], 14	; 0000000eH
  000a5	eb 32		 jmp	 SHORT $LN41@MakeKey
$LN39@MakeKey:

; 1301 : 			break;
; 1302 : 
; 1303 : 		case 24:
; 1304 : 			m_iROUNDS = (m_blockSize != 32) ? 12 : 14;

  000a7	33 c0		 xor	 eax, eax
  000a9	83 be cc 03 00
	00 20		 cmp	 DWORD PTR [esi+972], 32	; 00000020H
  000b0	0f 94 c0	 sete	 al
  000b3	8d 44 00 0c	 lea	 eax, DWORD PTR [eax+eax+12]

; 1305 : 			break;

  000b7	eb 1a		 jmp	 SHORT $LN49@MakeKey
$LN40@MakeKey:

; 1298 : 	{
; 1299 : 		case 16:
; 1300 : 			m_iROUNDS = (m_blockSize == 16) ? 10 : (m_blockSize == 24 ? 12 : 14);

  000b9	8b 86 cc 03 00
	00		 mov	 eax, DWORD PTR [esi+972]
  000bf	3b c7		 cmp	 eax, edi
  000c1	75 05		 jne	 SHORT $LN48@MakeKey
  000c3	6a 0a		 push	 10			; 0000000aH
  000c5	58		 pop	 eax
  000c6	eb 0b		 jmp	 SHORT $LN49@MakeKey
$LN48@MakeKey:
  000c8	33 c9		 xor	 ecx, ecx
  000ca	3b c3		 cmp	 eax, ebx
  000cc	0f 95 c1	 setne	 cl
  000cf	8d 44 09 0c	 lea	 eax, DWORD PTR [ecx+ecx+12]
$LN49@MakeKey:
  000d3	89 86 d0 03 00
	00		 mov	 DWORD PTR [esi+976], eax
$LN41@MakeKey:

; 1309 : 	}
; 1310 : 	int BC = m_blockSize / 4;

  000d9	8b 86 cc 03 00
	00		 mov	 eax, DWORD PTR [esi+972]
  000df	99		 cdq
  000e0	83 e2 03	 and	 edx, 3
  000e3	8d 0c 02	 lea	 ecx, DWORD PTR [edx+eax]
  000e6	c1 f9 02	 sar	 ecx, 2

; 1311 : 	int i, j;
; 1312 : 	for(i=0; i<=m_iROUNDS; i++)

  000e9	33 d2		 xor	 edx, edx
  000eb	89 4d 10	 mov	 DWORD PTR _BC$[ebp], ecx
  000ee	39 96 d0 03 00
	00		 cmp	 DWORD PTR [esi+976], edx
  000f4	7c 1c		 jl	 SHORT $LN35@MakeKey

; 1309 : 	}
; 1310 : 	int BC = m_blockSize / 4;

  000f6	8d 5e 08	 lea	 ebx, DWORD PTR [esi+8]
$LL37@MakeKey:

; 1313 : 	{
; 1314 : 		for(j=0; j<BC; j++)

  000f9	85 c9		 test	 ecx, ecx
  000fb	7e 09		 jle	 SHORT $LN36@MakeKey
  000fd	33 c0		 xor	 eax, eax
  000ff	8b fb		 mov	 edi, ebx
  00101	f3 ab		 rep stosd
  00103	8b 4d 10	 mov	 ecx, DWORD PTR _BC$[ebp]
$LN36@MakeKey:

; 1311 : 	int i, j;
; 1312 : 	for(i=0; i<=m_iROUNDS; i++)

  00106	42		 inc	 edx
  00107	83 c3 20	 add	 ebx, 32			; 00000020H
  0010a	3b 96 d0 03 00
	00		 cmp	 edx, DWORD PTR [esi+976]
  00110	7e e7		 jle	 SHORT $LL37@MakeKey
$LN35@MakeKey:

; 1315 : 			m_Ke[i][j] = 0;
; 1316 : 	}
; 1317 : 	for(i=0; i<=m_iROUNDS; i++)

  00112	33 d2		 xor	 edx, edx
  00114	39 96 d0 03 00
	00		 cmp	 DWORD PTR [esi+976], edx
  0011a	7c 1f		 jl	 SHORT $LN29@MakeKey
  0011c	8d 9e e8 01 00
	00		 lea	 ebx, DWORD PTR [esi+488]
$LL31@MakeKey:

; 1318 : 	{
; 1319 : 		for(j=0; j<BC; j++)

  00122	85 c9		 test	 ecx, ecx
  00124	7e 09		 jle	 SHORT $LN30@MakeKey
  00126	33 c0		 xor	 eax, eax
  00128	8b fb		 mov	 edi, ebx
  0012a	f3 ab		 rep stosd
  0012c	8b 4d 10	 mov	 ecx, DWORD PTR _BC$[ebp]
$LN30@MakeKey:

; 1315 : 			m_Ke[i][j] = 0;
; 1316 : 	}
; 1317 : 	for(i=0; i<=m_iROUNDS; i++)

  0012f	42		 inc	 edx
  00130	83 c3 20	 add	 ebx, 32			; 00000020H
  00133	3b 96 d0 03 00
	00		 cmp	 edx, DWORD PTR [esi+976]
  00139	7e e7		 jle	 SHORT $LL31@MakeKey
$LN29@MakeKey:

; 1320 : 			m_Kd[i][j] = 0;
; 1321 : 	}
; 1322 : 	int ROUND_KEY_COUNT = (m_iROUNDS + 1) * BC;

  0013b	8b 9e d0 03 00
	00		 mov	 ebx, DWORD PTR [esi+976]

; 1323 : 	int KC = m_keylength/4;

  00141	8b 86 c8 03 00
	00		 mov	 eax, DWORD PTR [esi+968]
  00147	43		 inc	 ebx
  00148	0f af d9	 imul	 ebx, ecx

; 1324 : 	//Copy user material bytes into temporary ints
; 1325 : 	int* pi = tk;
; 1326 : 	char const* pc = key;

  0014b	8b 4d 08	 mov	 ecx, DWORD PTR _key$[ebp]
  0014e	99		 cdq
  0014f	83 e2 03	 and	 edx, 3
  00152	8d 3c 02	 lea	 edi, DWORD PTR [edx+eax]
  00155	c1 ff 02	 sar	 edi, 2
  00158	89 5d f4	 mov	 DWORD PTR _ROUND_KEY_COUNT$[ebp], ebx
  0015b	8d 86 14 04 00
	00		 lea	 eax, DWORD PTR [esi+1044]

; 1327 : 	for(i=0; i<KC; i++)

  00161	85 ff		 test	 edi, edi
  00163	7e 2e		 jle	 SHORT $LN23@MakeKey

; 1320 : 			m_Kd[i][j] = 0;
; 1321 : 	}
; 1322 : 	int ROUND_KEY_COUNT = (m_iROUNDS + 1) * BC;

  00165	89 7d 0c	 mov	 DWORD PTR tv304[ebp], edi
$LL25@MakeKey:

; 1328 : 	{
; 1329 : 		*pi = (unsigned char)*(pc++) << 24;

  00168	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  0016b	c1 e2 18	 shl	 edx, 24			; 00000018H
  0016e	89 10		 mov	 DWORD PTR [eax], edx

; 1330 : 		*pi |= (unsigned char)*(pc++) << 16;

  00170	0f b6 51 01	 movzx	 edx, BYTE PTR [ecx+1]
  00174	c1 e2 10	 shl	 edx, 16			; 00000010H
  00177	09 10		 or	 DWORD PTR [eax], edx

; 1331 : 		*pi |= (unsigned char)*(pc++) << 8;

  00179	0f b6 51 02	 movzx	 edx, BYTE PTR [ecx+2]
  0017d	c1 e2 08	 shl	 edx, 8
  00180	09 10		 or	 DWORD PTR [eax], edx

; 1332 : 		*(pi++) |= (unsigned char)*(pc++);

  00182	0f b6 51 03	 movzx	 edx, BYTE PTR [ecx+3]
  00186	09 10		 or	 DWORD PTR [eax], edx
  00188	83 c1 04	 add	 ecx, 4
  0018b	83 c0 04	 add	 eax, 4
  0018e	ff 4d 0c	 dec	 DWORD PTR tv304[ebp]
  00191	75 d5		 jne	 SHORT $LL25@MakeKey
$LN23@MakeKey:

; 1333 : 	}
; 1334 : 	//Copy values into round key arrays
; 1335 : 	int t = 0;

  00193	83 65 0c 00	 and	 DWORD PTR _t$[ebp], 0

; 1336 : 	for(j=0; (j<KC)&&(t<ROUND_KEY_COUNT); j++,t++)

  00197	85 ff		 test	 edi, edi
  00199	7e 47		 jle	 SHORT $LN20@MakeKey

; 1333 : 	}
; 1334 : 	//Copy values into round key arrays
; 1335 : 	int t = 0;

  0019b	8d 86 14 04 00
	00		 lea	 eax, DWORD PTR [esi+1044]
  001a1	89 45 08	 mov	 DWORD PTR tv984[ebp], eax
$LL80@MakeKey:

; 1336 : 	for(j=0; (j<KC)&&(t<ROUND_KEY_COUNT); j++,t++)

  001a4	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]
  001a7	3b c3		 cmp	 eax, ebx
  001a9	7d 37		 jge	 SHORT $LN20@MakeKey

; 1337 : 	{
; 1338 : 		m_Ke[t/BC][t%BC] = tk[j];

  001ab	99		 cdq
  001ac	f7 7d 10	 idiv	 DWORD PTR _BC$[ebp]
  001af	8b 4d 08	 mov	 ecx, DWORD PTR tv984[ebp]
  001b2	8b 09		 mov	 ecx, DWORD PTR [ecx]
  001b4	89 45 fc	 mov	 DWORD PTR tv579[ebp], eax
  001b7	8d 04 c2	 lea	 eax, DWORD PTR [edx+eax*8]
  001ba	89 4c 86 08	 mov	 DWORD PTR [esi+eax*4+8], ecx

; 1339 : 		m_Kd[m_iROUNDS - (t/BC)][t%BC] = tk[j];

  001be	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  001c4	2b 45 fc	 sub	 eax, DWORD PTR tv579[ebp]
  001c7	8b 4d 08	 mov	 ecx, DWORD PTR tv984[ebp]
  001ca	8b 09		 mov	 ecx, DWORD PTR [ecx]
  001cc	ff 45 0c	 inc	 DWORD PTR _t$[ebp]
  001cf	83 45 08 04	 add	 DWORD PTR tv984[ebp], 4
  001d3	8d 04 c2	 lea	 eax, DWORD PTR [edx+eax*8]
  001d6	89 8c 86 e8 01
	00 00		 mov	 DWORD PTR [esi+eax*4+488], ecx
  001dd	39 7d 0c	 cmp	 DWORD PTR _t$[ebp], edi
  001e0	7c c2		 jl	 SHORT $LL80@MakeKey
$LN20@MakeKey:

; 1342 : 	while(t < ROUND_KEY_COUNT)

  001e2	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  001e7	39 5d 0c	 cmp	 DWORD PTR _t$[ebp], ebx
  001ea	0f 8d 5a 01 00
	00		 jge	 $LN81@MakeKey

; 1340 : 	}
; 1341 : 	int tt, rconpointer = 0;

  001f0	c7 45 14 00 00
	00 00		 mov	 DWORD PTR tv1301[ebp], OFFSET ?sm_rcon@Abcdef@@0QBDB ; Abcdef::sm_rcon
$LL19@MakeKey:

; 1343 : 	{
; 1344 : 		//Extrapolate using phi (the round key evolution function)
; 1345 : 		tt = tk[KC-1];

  001f7	8b 84 be 10 04
	00 00		 mov	 eax, DWORD PTR [esi+edi*4+1040]

; 1346 : 		tk[0] ^= (sm_S[(tt >> 16) & 0xFF] & 0xFF) << 24 ^
; 1347 : 			(sm_S[(tt >>  8) & 0xFF] & 0xFF) << 16 ^
; 1348 : 			(sm_S[ tt & 0xFF] & 0xFF) <<  8 ^
; 1349 : 			(sm_S[(tt >> 24) & 0xFF] & 0xFF) ^
; 1350 : 			(sm_rcon[rconpointer++]  & 0xFF) << 24;

  001fe	8b 5d 14	 mov	 ebx, DWORD PTR tv1301[ebp]
  00201	0f be 1b	 movsx	 ebx, BYTE PTR [ebx]
  00204	8b d0		 mov	 edx, eax
  00206	c1 fa 10	 sar	 edx, 16			; 00000010H
  00209	23 d1		 and	 edx, ecx
  0020b	0f be 92 00 00
	00 00		 movsx	 edx, BYTE PTR ?sm_S@Abcdef@@0QBDB[edx]
  00212	33 d3		 xor	 edx, ebx
  00214	8b d8		 mov	 ebx, eax
  00216	c1 fb 08	 sar	 ebx, 8
  00219	23 d9		 and	 ebx, ecx
  0021b	0f b6 9b 00 00
	00 00		 movzx	 ebx, BYTE PTR ?sm_S@Abcdef@@0QBDB[ebx]
  00222	c1 e2 08	 shl	 edx, 8
  00225	33 d3		 xor	 edx, ebx
  00227	8b d8		 mov	 ebx, eax
  00229	23 d9		 and	 ebx, ecx
  0022b	0f b6 9b 00 00
	00 00		 movzx	 ebx, BYTE PTR ?sm_S@Abcdef@@0QBDB[ebx]
  00232	c1 f8 18	 sar	 eax, 24			; 00000018H
  00235	c1 e2 08	 shl	 edx, 8
  00238	23 c1		 and	 eax, ecx
  0023a	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?sm_S@Abcdef@@0QBDB[eax]
  00241	33 d3		 xor	 edx, ebx
  00243	c1 e2 08	 shl	 edx, 8
  00246	33 d0		 xor	 edx, eax
  00248	31 96 14 04 00
	00		 xor	 DWORD PTR [esi+1044], edx
  0024e	ff 45 14	 inc	 DWORD PTR tv1301[ebp]

; 1351 : 		if(KC != 8)

  00251	83 ff 08	 cmp	 edi, 8
  00254	74 1f		 je	 SHORT $LN17@MakeKey

; 1352 : 			for(i=1, j=0; i<KC;)

  00256	83 ff 01	 cmp	 edi, 1
  00259	0f 8e 8c 00 00
	00		 jle	 $LN77@MakeKey
  0025f	8d 86 18 04 00
	00		 lea	 eax, DWORD PTR [esi+1048]
  00265	8d 57 ff	 lea	 edx, DWORD PTR [edi-1]
$LL16@MakeKey:

; 1353 : 				tk[i++] ^= tk[j++];

  00268	8b 58 fc	 mov	 ebx, DWORD PTR [eax-4]
  0026b	31 18		 xor	 DWORD PTR [eax], ebx
  0026d	83 c0 04	 add	 eax, 4
  00270	4a		 dec	 edx
  00271	75 f5		 jne	 SHORT $LL16@MakeKey
  00273	eb 76		 jmp	 SHORT $LN77@MakeKey
$LN17@MakeKey:

; 1354 : 		else
; 1355 : 		{
; 1356 : 			for(i=1, j=0; i<KC/2; )

  00275	6a 03		 push	 3
  00277	8d 86 18 04 00
	00		 lea	 eax, DWORD PTR [esi+1048]
  0027d	5a		 pop	 edx
$LL13@MakeKey:

; 1357 : 				tk[i++] ^= tk[j++];

  0027e	8b 58 fc	 mov	 ebx, DWORD PTR [eax-4]
  00281	31 18		 xor	 DWORD PTR [eax], ebx
  00283	83 c0 04	 add	 eax, 4
  00286	4a		 dec	 edx
  00287	75 f5		 jne	 SHORT $LL13@MakeKey

; 1358 : 			tt = tk[KC/2-1];

  00289	8b 86 20 04 00
	00		 mov	 eax, DWORD PTR [esi+1056]

; 1359 : 			tk[KC/2] ^= (sm_S[ tt & 0xFF] & 0xFF) ^
; 1360 : 				(sm_S[(tt >>  8) & 0xFF] & 0xFF) <<  8 ^
; 1361 : 				(sm_S[(tt >> 16) & 0xFF] & 0xFF) << 16 ^
; 1362 : 				(sm_S[(tt >> 24) & 0xFF] & 0xFF) << 24;

  0028f	8b d0		 mov	 edx, eax
  00291	c1 fa 18	 sar	 edx, 24			; 00000018H
  00294	23 d1		 and	 edx, ecx
  00296	0f be 92 00 00
	00 00		 movsx	 edx, BYTE PTR ?sm_S@Abcdef@@0QBDB[edx]
  0029d	8b d8		 mov	 ebx, eax
  0029f	c1 fb 10	 sar	 ebx, 16			; 00000010H
  002a2	23 d9		 and	 ebx, ecx
  002a4	0f b6 9b 00 00
	00 00		 movzx	 ebx, BYTE PTR ?sm_S@Abcdef@@0QBDB[ebx]
  002ab	c1 e2 08	 shl	 edx, 8
  002ae	33 d3		 xor	 edx, ebx
  002b0	8b d8		 mov	 ebx, eax
  002b2	c1 fb 08	 sar	 ebx, 8
  002b5	23 d9		 and	 ebx, ecx
  002b7	0f b6 9b 00 00
	00 00		 movzx	 ebx, BYTE PTR ?sm_S@Abcdef@@0QBDB[ebx]
  002be	c1 e2 08	 shl	 edx, 8
  002c1	23 c1		 and	 eax, ecx
  002c3	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?sm_S@Abcdef@@0QBDB[eax]
  002ca	33 d3		 xor	 edx, ebx
  002cc	c1 e2 08	 shl	 edx, 8
  002cf	33 d0		 xor	 edx, eax
  002d1	31 96 24 04 00
	00		 xor	 DWORD PTR [esi+1060], edx
  002d7	6a 03		 push	 3
  002d9	8d 86 28 04 00
	00		 lea	 eax, DWORD PTR [esi+1064]
  002df	5a		 pop	 edx
$LL11@MakeKey:

; 1363 : 			for(j = KC/2, i=j+1; i<KC; )
; 1364 : 				tk[i++] ^= tk[j++];

  002e0	8b 58 fc	 mov	 ebx, DWORD PTR [eax-4]
  002e3	31 18		 xor	 DWORD PTR [eax], ebx
  002e5	83 c0 04	 add	 eax, 4
  002e8	4a		 dec	 edx
  002e9	75 f5		 jne	 SHORT $LL11@MakeKey
$LN77@MakeKey:

; 1365 : 		}
; 1366 : 		//Copy values into round key arrays
; 1367 : 		for(j=0; (j<KC) && (t<ROUND_KEY_COUNT); j++, t++)

  002eb	83 65 f8 00	 and	 DWORD PTR _j$[ebp], 0
  002ef	85 ff		 test	 edi, edi
  002f1	7e 4b		 jle	 SHORT $LN78@MakeKey
  002f3	8d 86 14 04 00
	00		 lea	 eax, DWORD PTR [esi+1044]
  002f9	89 45 08	 mov	 DWORD PTR tv1290[ebp], eax
$LL76@MakeKey:
  002fc	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]
  002ff	3b 45 f4	 cmp	 eax, DWORD PTR _ROUND_KEY_COUNT$[ebp]
  00302	7d 46		 jge	 SHORT $LN81@MakeKey

; 1368 : 		{
; 1369 : 			m_Ke[t/BC][t%BC] = tk[j];

  00304	99		 cdq
  00305	f7 7d 10	 idiv	 DWORD PTR _BC$[ebp]
  00308	8b 5d 08	 mov	 ebx, DWORD PTR tv1290[ebp]
  0030b	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  0030d	89 45 fc	 mov	 DWORD PTR tv579[ebp], eax
  00310	8d 04 c2	 lea	 eax, DWORD PTR [edx+eax*8]
  00313	89 5c 86 08	 mov	 DWORD PTR [esi+eax*4+8], ebx

; 1370 : 			m_Kd[m_iROUNDS - (t/BC)][t%BC] = tk[j];

  00317	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  0031d	2b 45 fc	 sub	 eax, DWORD PTR tv579[ebp]
  00320	ff 45 f8	 inc	 DWORD PTR _j$[ebp]
  00323	8d 04 c2	 lea	 eax, DWORD PTR [edx+eax*8]
  00326	8b 55 08	 mov	 edx, DWORD PTR tv1290[ebp]
  00329	83 45 08 04	 add	 DWORD PTR tv1290[ebp], 4
  0032d	8b 12		 mov	 edx, DWORD PTR [edx]
  0032f	ff 45 0c	 inc	 DWORD PTR _t$[ebp]
  00332	89 94 86 e8 01
	00 00		 mov	 DWORD PTR [esi+eax*4+488], edx
  00339	39 7d f8	 cmp	 DWORD PTR _j$[ebp], edi
  0033c	7c be		 jl	 SHORT $LL76@MakeKey
$LN78@MakeKey:

; 1342 : 	while(t < ROUND_KEY_COUNT)

  0033e	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]
  00341	3b 45 f4	 cmp	 eax, DWORD PTR _ROUND_KEY_COUNT$[ebp]
  00344	0f 8c ad fe ff
	ff		 jl	 $LL19@MakeKey
$LN81@MakeKey:

; 1371 : 		}
; 1372 : 	}
; 1373 : 	//Inverse MixColumn where needed
; 1374 : 	for(int r=1; r<m_iROUNDS; r++)

  0034a	33 c0		 xor	 eax, eax
  0034c	40		 inc	 eax
  0034d	89 45 08	 mov	 DWORD PTR _r$505550[ebp], eax
  00350	39 86 d0 03 00
	00		 cmp	 DWORD PTR [esi+976], eax
  00356	7e 67		 jle	 SHORT $LN4@MakeKey
  00358	8d 86 08 02 00
	00		 lea	 eax, DWORD PTR [esi+520]
  0035e	89 45 0c	 mov	 DWORD PTR tv1416[ebp], eax
$LL6@MakeKey:

; 1375 : 		for(j=0; j<BC; j++)

  00361	8b 45 10	 mov	 eax, DWORD PTR _BC$[ebp]
  00364	85 c0		 test	 eax, eax
  00366	7e 45		 jle	 SHORT $LN5@MakeKey
  00368	8b 55 0c	 mov	 edx, DWORD PTR tv1416[ebp]
  0036b	89 45 14	 mov	 DWORD PTR tv1370[ebp], eax
$LL3@MakeKey:

; 1376 : 		{
; 1377 : 			tt = m_Kd[r][j];

  0036e	8b 02		 mov	 eax, DWORD PTR [edx]

; 1378 : 			m_Kd[r][j] = sm_U1[(tt >> 24) & 0xFF] ^
; 1379 : 				sm_U2[(tt >> 16) & 0xFF] ^
; 1380 : 				sm_U3[(tt >>  8) & 0xFF] ^
; 1381 : 				sm_U4[tt & 0xFF];

  00370	8b f8		 mov	 edi, eax
  00372	c1 ff 18	 sar	 edi, 24			; 00000018H
  00375	23 f9		 and	 edi, ecx
  00377	8b 3c bd 00 00
	00 00		 mov	 edi, DWORD PTR ?sm_U1@Abcdef@@0QBHB[edi*4]
  0037e	8b d8		 mov	 ebx, eax
  00380	c1 fb 10	 sar	 ebx, 16			; 00000010H
  00383	23 d9		 and	 ebx, ecx
  00385	33 3c 9d 00 00
	00 00		 xor	 edi, DWORD PTR ?sm_U2@Abcdef@@0QBHB[ebx*4]
  0038c	8b d8		 mov	 ebx, eax
  0038e	c1 fb 08	 sar	 ebx, 8
  00391	23 d9		 and	 ebx, ecx
  00393	33 3c 9d 00 00
	00 00		 xor	 edi, DWORD PTR ?sm_U3@Abcdef@@0QBHB[ebx*4]
  0039a	23 c1		 and	 eax, ecx
  0039c	33 3c 85 00 00
	00 00		 xor	 edi, DWORD PTR ?sm_U4@Abcdef@@0QBHB[eax*4]
  003a3	89 3a		 mov	 DWORD PTR [edx], edi
  003a5	83 c2 04	 add	 edx, 4
  003a8	ff 4d 14	 dec	 DWORD PTR tv1370[ebp]
  003ab	75 c1		 jne	 SHORT $LL3@MakeKey
$LN5@MakeKey:

; 1371 : 		}
; 1372 : 	}
; 1373 : 	//Inverse MixColumn where needed
; 1374 : 	for(int r=1; r<m_iROUNDS; r++)

  003ad	ff 45 08	 inc	 DWORD PTR _r$505550[ebp]
  003b0	8b 45 08	 mov	 eax, DWORD PTR _r$505550[ebp]
  003b3	83 45 0c 20	 add	 DWORD PTR tv1416[ebp], 32 ; 00000020H
  003b7	3b 86 d0 03 00
	00		 cmp	 eax, DWORD PTR [esi+976]
  003bd	7c a2		 jl	 SHORT $LL6@MakeKey
$LN4@MakeKey:
  003bf	5f		 pop	 edi

; 1382 : 		}
; 1383 : 	m_bKeyInit = true;

  003c0	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
  003c4	5e		 pop	 esi
  003c5	5b		 pop	 ebx

; 1384 : }

  003c6	c9		 leave
  003c7	c2 10 00	 ret	 16			; 00000010H
$LN84@MakeKey:
?MakeKey@Abcdef@@QAEXPBD0HH@Z ENDP			; Abcdef::MakeKey
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GAbcdef@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GAbcdef@@UAEPAXI@Z PROC				; Abcdef::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Abcdef@@6B@
  00010	74 07		 je	 SHORT $LN1@scalar
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_GAbcdef@@UAEPAXI@Z ENDP				; Abcdef::`scalar deleting destructor'
_TEXT	ENDS
END
