; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioUserNamedTitle.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?size@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QBEIXZ ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QBEIXZ PROC ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 18		 push	 24			; 00000018H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::size
_TEXT	ENDS
PUBLIC	?empty@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QBE_NXZ ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::empty
; Function compile flags: /Ogsp
;	COMDAT ?empty@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QBE_NXZ PROC ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::empty, COMDAT
; _this$ = ecx

; 889  : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	40		 inc	 eax

; 890  : 		}

  0000a	c3		 ret	 0
?empty@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QBE_NXZ ENDP ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::empty
_TEXT	ENDS
PUBLIC	??A?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEAAUtagNamedTitleSlot@@I@Z ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEAAUtagNamedTitleSlot@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEAAUtagNamedTitleSlot@@I@Z PROC ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	6b c0 18	 imul	 eax, 24			; 00000018H
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEAAUtagNamedTitleSlot@@I@Z ENDP ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::operator[]
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IBE_NPBUtagNamedTitleSlot@@@Z ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IBE_NPBUtagNamedTitleSlot@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IBE_NPBUtagNamedTitleSlot@@@Z PROC ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IBE_NPBUtagNamedTitleSlot@@@Z ENDP ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IBEXPAUtagNamedTitleSlot@@0@Z ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IBEXPAUtagNamedTitleSlot@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IBEXPAUtagNamedTitleSlot@@0@Z PROC ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IBEXPAUtagNamedTitleSlot@@0@Z ENDP ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE@XZ ; std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::~_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::~_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::~_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UtagNamedTitleSlot@@@std@@QAE@XZ	; std::allocator<tagNamedTitleSlot>::allocator<tagNamedTitleSlot>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UtagNamedTitleSlot@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UtagNamedTitleSlot@@@std@@QAE@XZ PROC	; std::allocator<tagNamedTitleSlot>::allocator<tagNamedTitleSlot>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UtagNamedTitleSlot@@@std@@QAE@XZ ENDP	; std::allocator<tagNamedTitleSlot>::allocator<tagNamedTitleSlot>
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 18	 add	 DWORD PTR [eax], 24	; 00000018H

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::operator++
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QBEIXZ ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::capacity
; Function compile flags: /Ogsp
;	COMDAT ?capacity@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QBEIXZ PROC ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 18		 push	 24			; 00000018H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IBEXXZ ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IBEXXZ PROC ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IBEXXZ ENDP ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UtagNamedTitleSlot@@@std@@QAE@ABV01@@Z ; std::allocator<tagNamedTitleSlot>::allocator<tagNamedTitleSlot>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UtagNamedTitleSlot@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UtagNamedTitleSlot@@@std@@QAE@ABV01@@Z PROC ; std::allocator<tagNamedTitleSlot>::allocator<tagNamedTitleSlot>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UtagNamedTitleSlot@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<tagNamedTitleSlot>::allocator<tagNamedTitleSlot>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UtagNamedTitleSlot@@@std@@QAEXPAUtagNamedTitleSlot@@I@Z ; std::allocator<tagNamedTitleSlot>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UtagNamedTitleSlot@@@std@@QAEXPAUtagNamedTitleSlot@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UtagNamedTitleSlot@@@std@@QAEXPAUtagNamedTitleSlot@@I@Z PROC ; std::allocator<tagNamedTitleSlot>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UtagNamedTitleSlot@@@std@@QAEXPAUtagNamedTitleSlot@@I@Z ENDP ; std::allocator<tagNamedTitleSlot>::deallocate
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QBEABUtagNamedTitleSlot@@XZ ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QBEABUtagNamedTitleSlot@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QBEABUtagNamedTitleSlot@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QBEABUtagNamedTitleSlot@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::operator*
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::_Compat
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UtagNamedTitleSlot@@@std@@QBEIXZ ; std::allocator<tagNamedTitleSlot>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UtagNamedTitleSlot@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UtagNamedTitleSlot@@@std@@QBEIXZ PROC ; std::allocator<tagNamedTitleSlot>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UtagNamedTitleSlot@@@std@@QBEIXZ ENDP ; std::allocator<tagNamedTitleSlot>::max_size
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUtagNamedTitleSlot@@@std@@YAPBUtagNamedTitleSlot@@ABU1@@Z ; std::addressof<tagNamedTitleSlot const >
; Function compile flags: /Ogsp
;	COMDAT ??$addressof@$$CBUtagNamedTitleSlot@@@std@@YAPBUtagNamedTitleSlot@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUtagNamedTitleSlot@@@std@@YAPBUtagNamedTitleSlot@@ABU1@@Z PROC ; std::addressof<tagNamedTitleSlot const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUtagNamedTitleSlot@@@std@@YAPBUtagNamedTitleSlot@@ABU1@@Z ENDP ; std::addressof<tagNamedTitleSlot const >
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UtagNamedTitleSlot@@@std@@YAPAUtagNamedTitleSlot@@IPAU1@@Z ; std::_Allocate<tagNamedTitleSlot>
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UtagNamedTitleSlot@@@std@@YAPAUtagNamedTitleSlot@@IPAU1@@Z
_TEXT	SEGMENT
$T506233 = -12						; size = 12
$T506238 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UtagNamedTitleSlot@@@std@@YAPAUtagNamedTitleSlot@@IPAU1@@Z PROC ; std::_Allocate<tagNamedTitleSlot>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 aa aa aa
	0a		 cmp	 ecx, 178956970		; 0aaaaaaaH
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	6b c9 18	 imul	 ecx, 24			; 00000018H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T506238[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T506238[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T506233[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T506233[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T506233[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UtagNamedTitleSlot@@@std@@YAPAUtagNamedTitleSlot@@IPAU1@@Z ENDP ; std::_Allocate<tagNamedTitleSlot>
_TEXT	ENDS
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
PUBLIC	??$forward@AAUtagNamedTitleSlot@@@std@@YAAAUtagNamedTitleSlot@@AAU1@@Z ; std::forward<tagNamedTitleSlot &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUtagNamedTitleSlot@@@std@@YAAAUtagNamedTitleSlot@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUtagNamedTitleSlot@@@std@@YAAAUtagNamedTitleSlot@@AAU1@@Z PROC ; std::forward<tagNamedTitleSlot &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUtagNamedTitleSlot@@@std@@YAAAUtagNamedTitleSlot@@AAU1@@Z ENDP ; std::forward<tagNamedTitleSlot &>
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$forward@ABUtagNamedTitleSlot@@@std@@YAABUtagNamedTitleSlot@@ABU1@@Z ; std::forward<tagNamedTitleSlot const &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@ABUtagNamedTitleSlot@@@std@@YAABUtagNamedTitleSlot@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUtagNamedTitleSlot@@@std@@YAABUtagNamedTitleSlot@@ABU1@@Z PROC ; std::forward<tagNamedTitleSlot const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUtagNamedTitleSlot@@@std@@YAABUtagNamedTitleSlot@@ABU1@@Z ENDP ; std::forward<tagNamedTitleSlot const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UtagNamedTitleSlot@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagNamedTitleSlot@@0@Z ; std::_Ptr_cat<tagNamedTitleSlot,tagNamedTitleSlot>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UtagNamedTitleSlot@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagNamedTitleSlot@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UtagNamedTitleSlot@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagNamedTitleSlot@@0@Z PROC ; std::_Ptr_cat<tagNamedTitleSlot,tagNamedTitleSlot>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UtagNamedTitleSlot@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagNamedTitleSlot@@0@Z ENDP ; std::_Ptr_cat<tagNamedTitleSlot,tagNamedTitleSlot>
_TEXT	ENDS
PUBLIC	??$move@AAUtagNamedTitleSlot@@@std@@YA$$QAUtagNamedTitleSlot@@AAU1@@Z ; std::move<tagNamedTitleSlot &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUtagNamedTitleSlot@@@std@@YA$$QAUtagNamedTitleSlot@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUtagNamedTitleSlot@@@std@@YA$$QAUtagNamedTitleSlot@@AAU1@@Z PROC ; std::move<tagNamedTitleSlot &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUtagNamedTitleSlot@@@std@@YA$$QAUtagNamedTitleSlot@@AAU1@@Z ENDP ; std::move<tagNamedTitleSlot &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUtagNamedTitleSlot@@@std@@YAPAUtagNamedTitleSlot@@PAU1@@Z ; std::_Val_type<tagNamedTitleSlot *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUtagNamedTitleSlot@@@std@@YAPAUtagNamedTitleSlot@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUtagNamedTitleSlot@@@std@@YAPAUtagNamedTitleSlot@@PAU1@@Z PROC ; std::_Val_type<tagNamedTitleSlot *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUtagNamedTitleSlot@@@std@@YAPAUtagNamedTitleSlot@@PAU1@@Z ENDP ; std::_Val_type<tagNamedTitleSlot *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UtagNamedTitleSlot@@@std@@YAXPAUtagNamedTitleSlot@@@Z ; std::_Destroy<tagNamedTitleSlot>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UtagNamedTitleSlot@@@std@@YAXPAUtagNamedTitleSlot@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UtagNamedTitleSlot@@@std@@YAXPAUtagNamedTitleSlot@@@Z PROC ; std::_Destroy<tagNamedTitleSlot>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UtagNamedTitleSlot@@@std@@YAXPAUtagNamedTitleSlot@@@Z ENDP ; std::_Destroy<tagNamedTitleSlot>
_TEXT	ENDS
PUBLIC	??$forward@UtagNamedTitleSlot@@@std@@YA$$QAUtagNamedTitleSlot@@AAU1@@Z ; std::forward<tagNamedTitleSlot>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UtagNamedTitleSlot@@@std@@YA$$QAUtagNamedTitleSlot@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UtagNamedTitleSlot@@@std@@YA$$QAUtagNamedTitleSlot@@AAU1@@Z PROC ; std::forward<tagNamedTitleSlot>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UtagNamedTitleSlot@@@std@@YA$$QAUtagNamedTitleSlot@@AAU1@@Z ENDP ; std::forward<tagNamedTitleSlot>
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?Init@tagNamedTitleSlot@@QAEXXZ			; tagNamedTitleSlot::Init
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\namedtitleenumtype.h
;	COMDAT ?Init@tagNamedTitleSlot@@QAEXXZ
_TEXT	SEGMENT
?Init@tagNamedTitleSlot@@QAEXXZ PROC			; tagNamedTitleSlot::Init, COMDAT
; _this$ = ecx

; 70   : 		m_dwCode = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 01		 mov	 DWORD PTR [ecx], eax

; 71   : 		m_nLevel = 0;

  00004	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 72   : 		m_nValue = 0;

  00007	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0000a	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 73   : 		
; 74   : 		m_byPremium = 0;

  0000d	66 89 41 10	 mov	 WORD PTR [ecx+16], ax

; 75   : 		m_byEquip = 0;
; 76   : 		m_byStatus = TITLE_DISABLE;

  00011	88 41 12	 mov	 BYTE PTR [ecx+18], al

; 77   : 	}

  00014	c3		 ret	 0
?Init@tagNamedTitleSlot@@QAEXXZ ENDP			; tagNamedTitleSlot::Init
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?SetNamedTitleSlot@ioUserNamedTitle@@QAE_NABUtagNamedTitleSlot@@@Z ; ioUserNamedTitle::SetNamedTitleSlot
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iousernamedtitle.cpp
;	COMDAT ?SetNamedTitleSlot@ioUserNamedTitle@@QAE_NABUtagNamedTitleSlot@@@Z
_TEXT	SEGMENT
_sNamedTitleSlot$ = 8					; size = 4
?SetNamedTitleSlot@ioUserNamedTitle@@QAE_NABUtagNamedTitleSlot@@@Z PROC ; ioUserNamedTitle::SetNamedTitleSlot, COMDAT
; _this$ = ecx

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 76   : 	int nSize = (int)m_NamedTitleSlotList.size();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	6a 18		 push	 24			; 00000018H
  0000e	99		 cdq
  0000f	5e		 pop	 esi
  00010	f7 fe		 idiv	 esi

; 77   : 	for( int i=0; i < nSize; ++i )

  00012	33 ff		 xor	 edi, edi
  00014	85 c0		 test	 eax, eax
  00016	7e 16		 jle	 SHORT $LN2@SetNamedTi
  00018	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001b	8b 75 08	 mov	 esi, DWORD PTR _sNamedTitleSlot$[ebp]
  0001e	8b 16		 mov	 edx, DWORD PTR [esi]
  00020	8b d9		 mov	 ebx, ecx
$LL16@SetNamedTi:

; 78   : 	{
; 79   : 		if( m_NamedTitleSlotList[i].m_dwCode == sNamedTitleSlot.m_dwCode )

  00022	39 13		 cmp	 DWORD PTR [ebx], edx
  00024	74 11		 je	 SHORT $LN14@SetNamedTi

; 77   : 	for( int i=0; i < nSize; ++i )

  00026	47		 inc	 edi
  00027	83 c3 18	 add	 ebx, 24			; 00000018H
  0002a	3b f8		 cmp	 edi, eax
  0002c	7c f4		 jl	 SHORT $LL16@SetNamedTi
$LN2@SetNamedTi:

; 83   : 		}
; 84   : 	}
; 85   : 
; 86   : 	return false;

  0002e	32 c0		 xor	 al, al
$LN5@SetNamedTi:
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx

; 87   : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
$LN14@SetNamedTi:

; 80   : 		{
; 81   : 			m_NamedTitleSlotList[i] = sNamedTitleSlot;

  00037	6b ff 18	 imul	 edi, 24			; 00000018H
  0003a	03 f9		 add	 edi, ecx
  0003c	6a 06		 push	 6
  0003e	59		 pop	 ecx
  0003f	f3 a5		 rep movsd

; 82   : 			return true;

  00041	b0 01		 mov	 al, 1
  00043	eb eb		 jmp	 SHORT $LN5@SetNamedTi
?SetNamedTitleSlot@ioUserNamedTitle@@QAE_NABUtagNamedTitleSlot@@@Z ENDP ; ioUserNamedTitle::SetNamedTitleSlot
_TEXT	ENDS
PUBLIC	?SetNamedTitleEquip@ioUserNamedTitle@@QAEXK@Z	; ioUserNamedTitle::SetNamedTitleEquip
; Function compile flags: /Ogsp
;	COMDAT ?SetNamedTitleEquip@ioUserNamedTitle@@QAEXK@Z
_TEXT	SEGMENT
_dwCode$ = 8						; size = 4
?SetNamedTitleEquip@ioUserNamedTitle@@QAEXK@Z PROC	; ioUserNamedTitle::SetNamedTitleEquip, COMDAT
; _this$ = ecx

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 94   : 	int nSize = (int)m_NamedTitleSlotList.size();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00009	56		 push	 esi
  0000a	6a 18		 push	 24			; 00000018H
  0000c	99		 cdq
  0000d	5e		 pop	 esi
  0000e	f7 fe		 idiv	 esi

; 95   : 	for( int i=0; i<nSize; ++i )

  00010	33 d2		 xor	 edx, edx
  00012	85 c0		 test	 eax, eax
  00014	7e 20		 jle	 SHORT $LN2@SetNamedTi@2

; 94   : 	int nSize = (int)m_NamedTitleSlotList.size();

  00016	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00019	8b f1		 mov	 esi, ecx
  0001b	57		 push	 edi
$LL4@SetNamedTi@2:

; 96   : 	{
; 97   : 		if( m_NamedTitleSlotList[i].m_dwCode == dwCode )

  0001c	8b 3e		 mov	 edi, DWORD PTR [esi]
  0001e	3b 7d 08	 cmp	 edi, DWORD PTR _dwCode$[ebp]
  00021	74 0a		 je	 SHORT $LN14@SetNamedTi@2

; 95   : 	for( int i=0; i<nSize; ++i )

  00023	42		 inc	 edx
  00024	83 c6 18	 add	 esi, 24			; 00000018H
  00027	3b d0		 cmp	 edx, eax
  00029	7c f1		 jl	 SHORT $LL4@SetNamedTi@2

; 96   : 	{
; 97   : 		if( m_NamedTitleSlotList[i].m_dwCode == dwCode )

  0002b	eb 08		 jmp	 SHORT $LN16@SetNamedTi@2
$LN14@SetNamedTi@2:

; 98   : 		{
; 99   : 			m_NamedTitleSlotList[i].m_byEquip = true;

  0002d	6b d2 18	 imul	 edx, 24			; 00000018H
  00030	c6 44 0a 11 01	 mov	 BYTE PTR [edx+ecx+17], 1
$LN16@SetNamedTi@2:
  00035	5f		 pop	 edi
$LN2@SetNamedTi@2:
  00036	5e		 pop	 esi

; 100  : 			return;
; 101  : 		}
; 102  : 	}
; 103  : }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?SetNamedTitleEquip@ioUserNamedTitle@@QAEXK@Z ENDP	; ioUserNamedTitle::SetNamedTitleEquip
_TEXT	ENDS
PUBLIC	?SetNamedTitleGrade@ioUserNamedTitle@@QAEXKH@Z	; ioUserNamedTitle::SetNamedTitleGrade
; Function compile flags: /Ogsp
;	COMDAT ?SetNamedTitleGrade@ioUserNamedTitle@@QAEXKH@Z
_TEXT	SEGMENT
_dwCode$ = 8						; size = 4
_nLevel$ = 12						; size = 4
?SetNamedTitleGrade@ioUserNamedTitle@@QAEXKH@Z PROC	; ioUserNamedTitle::SetNamedTitleGrade, COMDAT
; _this$ = ecx

; 107  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 108  : 	int nSize = (int)m_NamedTitleSlotList.size();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00009	56		 push	 esi
  0000a	6a 18		 push	 24			; 00000018H
  0000c	99		 cdq
  0000d	5e		 pop	 esi
  0000e	f7 fe		 idiv	 esi

; 109  : 	for( int i=0; i<nSize; ++i )

  00010	33 d2		 xor	 edx, edx
  00012	85 c0		 test	 eax, eax
  00014	7e 22		 jle	 SHORT $LN2@SetNamedTi@3

; 108  : 	int nSize = (int)m_NamedTitleSlotList.size();

  00016	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00019	8b f1		 mov	 esi, ecx
  0001b	57		 push	 edi
$LL4@SetNamedTi@3:

; 110  : 	{
; 111  : 		if( m_NamedTitleSlotList[i].m_dwCode == dwCode )

  0001c	8b 3e		 mov	 edi, DWORD PTR [esi]
  0001e	3b 7d 08	 cmp	 edi, DWORD PTR _dwCode$[ebp]
  00021	74 0a		 je	 SHORT $LN14@SetNamedTi@3

; 109  : 	for( int i=0; i<nSize; ++i )

  00023	42		 inc	 edx
  00024	83 c6 18	 add	 esi, 24			; 00000018H
  00027	3b d0		 cmp	 edx, eax
  00029	7c f1		 jl	 SHORT $LL4@SetNamedTi@3

; 110  : 	{
; 111  : 		if( m_NamedTitleSlotList[i].m_dwCode == dwCode )

  0002b	eb 0a		 jmp	 SHORT $LN16@SetNamedTi@3
$LN14@SetNamedTi@3:

; 112  : 		{
; 113  : 			m_NamedTitleSlotList[i].m_nLevel = nLevel;

  0002d	8b 45 0c	 mov	 eax, DWORD PTR _nLevel$[ebp]
  00030	6b d2 18	 imul	 edx, 24			; 00000018H
  00033	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax
$LN16@SetNamedTi@3:
  00037	5f		 pop	 edi
$LN2@SetNamedTi@3:
  00038	5e		 pop	 esi

; 114  : 			return;
; 115  : 		}
; 116  : 	}
; 117  : }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
?SetNamedTitleGrade@ioUserNamedTitle@@QAEXKH@Z ENDP	; ioUserNamedTitle::SetNamedTitleGrade
_TEXT	ENDS
PUBLIC	?SetNamedTitlePremium@ioUserNamedTitle@@QAEXK@Z	; ioUserNamedTitle::SetNamedTitlePremium
; Function compile flags: /Ogsp
;	COMDAT ?SetNamedTitlePremium@ioUserNamedTitle@@QAEXK@Z
_TEXT	SEGMENT
_dwCode$ = 8						; size = 4
?SetNamedTitlePremium@ioUserNamedTitle@@QAEXK@Z PROC	; ioUserNamedTitle::SetNamedTitlePremium, COMDAT
; _this$ = ecx

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 122  : 	int nSize = (int)m_NamedTitleSlotList.size();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00009	56		 push	 esi
  0000a	99		 cdq
  0000b	6a 18		 push	 24			; 00000018H
  0000d	5e		 pop	 esi
  0000e	f7 fe		 idiv	 esi
  00010	8b f0		 mov	 esi, eax

; 123  : 	for( int i=0; i<nSize; ++i )

  00012	33 c0		 xor	 eax, eax
  00014	85 f6		 test	 esi, esi
  00016	7e 29		 jle	 SHORT $LN2@SetNamedTi@4

; 122  : 	int nSize = (int)m_NamedTitleSlotList.size();

  00018	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001b	57		 push	 edi
$LL4@SetNamedTi@4:

; 124  : 	{
; 125  : 		if( m_NamedTitleSlotList[i].m_dwCode == dwCode )

  0001c	8b 3a		 mov	 edi, DWORD PTR [edx]
  0001e	3b 7d 08	 cmp	 edi, DWORD PTR _dwCode$[ebp]
  00021	74 0a		 je	 SHORT $LN16@SetNamedTi@4

; 123  : 	for( int i=0; i<nSize; ++i )

  00023	40		 inc	 eax
  00024	83 c2 18	 add	 edx, 24			; 00000018H
  00027	3b c6		 cmp	 eax, esi
  00029	7c f1		 jl	 SHORT $LL4@SetNamedTi@4

; 124  : 	{
; 125  : 		if( m_NamedTitleSlotList[i].m_dwCode == dwCode )

  0002b	eb 13		 jmp	 SHORT $LN18@SetNamedTi@4
$LN16@SetNamedTi@4:

; 126  : 		{
; 127  : 			m_NamedTitleSlotList[i].m_byPremium = true;

  0002d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00030	6b c0 18	 imul	 eax, 24			; 00000018H
  00033	c6 44 10 10 01	 mov	 BYTE PTR [eax+edx+16], 1

; 128  : 			m_NamedTitleSlotList[i].m_byStatus = TITLE_NEW;

  00038	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0003b	c6 44 08 12 02	 mov	 BYTE PTR [eax+ecx+18], 2
$LN18@SetNamedTi@4:
  00040	5f		 pop	 edi
$LN2@SetNamedTi@4:
  00041	5e		 pop	 esi

; 129  : 			return;
; 130  : 		}
; 131  : 	}
; 132  : }

  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?SetNamedTitlePremium@ioUserNamedTitle@@QAEXK@Z ENDP	; ioUserNamedTitle::SetNamedTitlePremium
_TEXT	ENDS
PUBLIC	?ClearNamedTitleEquip@ioUserNamedTitle@@QAEXXZ	; ioUserNamedTitle::ClearNamedTitleEquip
; Function compile flags: /Ogsp
;	COMDAT ?ClearNamedTitleEquip@ioUserNamedTitle@@QAEXXZ
_TEXT	SEGMENT
?ClearNamedTitleEquip@ioUserNamedTitle@@QAEXXZ PROC	; ioUserNamedTitle::ClearNamedTitleEquip, COMDAT
; _this$ = ecx

; 138  : 	int nSize = (int)m_NamedTitleSlotList.size();

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	56		 push	 esi
  00007	6a 18		 push	 24			; 00000018H
  00009	99		 cdq
  0000a	5e		 pop	 esi
  0000b	f7 fe		 idiv	 esi

; 139  : 	for( int i=0; i<nSize; ++i )

  0000d	85 c0		 test	 eax, eax
  0000f	7e 10		 jle	 SHORT $LN1@ClearNamed

; 138  : 	int nSize = (int)m_NamedTitleSlotList.size();

  00011	33 d2		 xor	 edx, edx
$LL3@ClearNamed:

; 140  : 		m_NamedTitleSlotList[i].m_byEquip = false;

  00013	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00016	c6 44 32 11 00	 mov	 BYTE PTR [edx+esi+17], 0
  0001b	83 c2 18	 add	 edx, 24			; 00000018H
  0001e	48		 dec	 eax
  0001f	75 f2		 jne	 SHORT $LL3@ClearNamed
$LN1@ClearNamed:
  00021	5e		 pop	 esi

; 141  : }

  00022	c3		 ret	 0
?ClearNamedTitleEquip@ioUserNamedTitle@@QAEXXZ ENDP	; ioUserNamedTitle::ClearNamedTitleEquip
_TEXT	ENDS
PUBLIC	?ClearNamedTitleNew@ioUserNamedTitle@@QAEXXZ	; ioUserNamedTitle::ClearNamedTitleNew
; Function compile flags: /Ogsp
;	COMDAT ?ClearNamedTitleNew@ioUserNamedTitle@@QAEXXZ
_TEXT	SEGMENT
?ClearNamedTitleNew@ioUserNamedTitle@@QAEXXZ PROC	; ioUserNamedTitle::ClearNamedTitleNew, COMDAT
; _this$ = ecx

; 145  : 	int nSize = (int)m_NamedTitleSlotList.size();

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	56		 push	 esi
  00007	6a 18		 push	 24			; 00000018H
  00009	99		 cdq
  0000a	5e		 pop	 esi
  0000b	f7 fe		 idiv	 esi

; 146  : 	for( int i=0; i<nSize; ++i )

  0000d	85 c0		 test	 eax, eax
  0000f	7e 19		 jle	 SHORT $LN2@ClearNamed@2

; 145  : 	int nSize = (int)m_NamedTitleSlotList.size();

  00011	33 d2		 xor	 edx, edx
  00013	8b f0		 mov	 esi, eax
$LL4@ClearNamed@2:

; 147  : 	{
; 148  : 		if ( m_NamedTitleSlotList[i].m_byStatus == TITLE_NEW )

  00015	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00018	8d 44 02 12	 lea	 eax, DWORD PTR [edx+eax+18]
  0001c	80 38 02	 cmp	 BYTE PTR [eax], 2
  0001f	75 03		 jne	 SHORT $LN3@ClearNamed@2

; 149  : 			m_NamedTitleSlotList[i].m_byStatus = TITLE_ACTIVE;

  00021	c6 00 01	 mov	 BYTE PTR [eax], 1
$LN3@ClearNamed@2:

; 146  : 	for( int i=0; i<nSize; ++i )

  00024	83 c2 18	 add	 edx, 24			; 00000018H
  00027	4e		 dec	 esi
  00028	75 eb		 jne	 SHORT $LL4@ClearNamed@2
$LN2@ClearNamed@2:
  0002a	5e		 pop	 esi

; 150  : 	}
; 151  : }

  0002b	c3		 ret	 0
?ClearNamedTitleNew@ioUserNamedTitle@@QAEXXZ ENDP	; ioUserNamedTitle::ClearNamedTitleNew
_TEXT	ENDS
PUBLIC	?GetNamedTitleSlotEquip@ioUserNamedTitle@@QAE_NAAUtagNamedTitleSlot@@@Z ; ioUserNamedTitle::GetNamedTitleSlotEquip
; Function compile flags: /Ogsp
;	COMDAT ?GetNamedTitleSlotEquip@ioUserNamedTitle@@QAE_NAAUtagNamedTitleSlot@@@Z
_TEXT	SEGMENT
_sNamedTitleSlot$ = 8					; size = 4
?GetNamedTitleSlotEquip@ioUserNamedTitle@@QAE_NAAUtagNamedTitleSlot@@@Z PROC ; ioUserNamedTitle::GetNamedTitleSlotEquip, COMDAT
; _this$ = ecx

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 158  : 	if ( m_NamedTitleSlotList.empty() )

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00009	3b d0		 cmp	 edx, eax
  0000b	75 04		 jne	 SHORT $LN5@GetNamedTi

; 159  : 		return false;

  0000d	32 c0		 xor	 al, al
  0000f	eb 25		 jmp	 SHORT $LN6@GetNamedTi
$LN5@GetNamedTi:
  00011	56		 push	 esi

; 160  : 
; 161  : 	int nSize = (int)m_NamedTitleSlotList.size();

  00012	2b c2		 sub	 eax, edx
  00014	6a 18		 push	 24			; 00000018H
  00016	99		 cdq
  00017	5e		 pop	 esi
  00018	f7 fe		 idiv	 esi

; 162  : 	for( int i=0; i < nSize; ++i )

  0001a	33 f6		 xor	 esi, esi
  0001c	85 c0		 test	 eax, eax
  0001e	7e 13		 jle	 SHORT $LN2@GetNamedTi

; 160  : 
; 161  : 	int nSize = (int)m_NamedTitleSlotList.size();

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	8d 51 11	 lea	 edx, DWORD PTR [ecx+17]
$LL4@GetNamedTi:

; 163  : 	{
; 164  : 		if( m_NamedTitleSlotList[i].m_byEquip )

  00026	80 3a 00	 cmp	 BYTE PTR [edx], 0
  00029	75 0f		 jne	 SHORT $LN17@GetNamedTi

; 162  : 	for( int i=0; i < nSize; ++i )

  0002b	46		 inc	 esi
  0002c	83 c2 18	 add	 edx, 24			; 00000018H
  0002f	3b f0		 cmp	 esi, eax
  00031	7c f3		 jl	 SHORT $LL4@GetNamedTi
$LN2@GetNamedTi:

; 168  : 		}
; 169  : 	}
; 170  : 
; 171  : 	return false;

  00033	32 c0		 xor	 al, al
$LN19@GetNamedTi:
  00035	5e		 pop	 esi
$LN6@GetNamedTi:

; 172  : }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
$LN17@GetNamedTi:

; 165  : 		{
; 166  : 			sNamedTitleSlot = m_NamedTitleSlotList[i];

  0003a	6b f6 18	 imul	 esi, 24			; 00000018H
  0003d	57		 push	 edi
  0003e	8b 7d 08	 mov	 edi, DWORD PTR _sNamedTitleSlot$[ebp]
  00041	6a 06		 push	 6
  00043	03 f1		 add	 esi, ecx
  00045	59		 pop	 ecx
  00046	f3 a5		 rep movsd

; 167  : 			return true;

  00048	b0 01		 mov	 al, 1
  0004a	5f		 pop	 edi
  0004b	eb e8		 jmp	 SHORT $LN19@GetNamedTi
?GetNamedTitleSlotEquip@ioUserNamedTitle@@QAE_NAAUtagNamedTitleSlot@@@Z ENDP ; ioUserNamedTitle::GetNamedTitleSlotEquip
_TEXT	ENDS
PUBLIC	?GetNamedTitleSlot@ioUserNamedTitle@@QAE_NKAAUtagNamedTitleSlot@@@Z ; ioUserNamedTitle::GetNamedTitleSlot
; Function compile flags: /Ogsp
;	COMDAT ?GetNamedTitleSlot@ioUserNamedTitle@@QAE_NKAAUtagNamedTitleSlot@@@Z
_TEXT	SEGMENT
_dwCode$ = 8						; size = 4
_sNamedTitleSlot$ = 12					; size = 4
?GetNamedTitleSlot@ioUserNamedTitle@@QAE_NKAAUtagNamedTitleSlot@@@Z PROC ; ioUserNamedTitle::GetNamedTitleSlot, COMDAT
; _this$ = ecx

; 176  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 177  : 	if ( m_NamedTitleSlotList.empty() )

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00009	3b d0		 cmp	 edx, eax
  0000b	75 04		 jne	 SHORT $LN5@GetNamedTi@2

; 178  : 		return false;

  0000d	32 c0		 xor	 al, al
  0000f	eb 28		 jmp	 SHORT $LN6@GetNamedTi@2
$LN5@GetNamedTi@2:
  00011	56		 push	 esi
  00012	57		 push	 edi

; 179  : 
; 180  : 	int nSize = (int)m_NamedTitleSlotList.size();

  00013	2b c2		 sub	 eax, edx
  00015	6a 18		 push	 24			; 00000018H
  00017	99		 cdq
  00018	5e		 pop	 esi
  00019	f7 fe		 idiv	 esi

; 181  : 	for( int i=0; i < nSize; ++i )

  0001b	33 f6		 xor	 esi, esi
  0001d	85 c0		 test	 eax, eax
  0001f	7e 14		 jle	 SHORT $LN2@GetNamedTi@2

; 179  : 
; 180  : 	int nSize = (int)m_NamedTitleSlotList.size();

  00021	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00024	8b d1		 mov	 edx, ecx
$LL4@GetNamedTi@2:

; 182  : 	{
; 183  : 		if( m_NamedTitleSlotList[i].m_dwCode == dwCode )

  00026	8b 3a		 mov	 edi, DWORD PTR [edx]
  00028	3b 7d 08	 cmp	 edi, DWORD PTR _dwCode$[ebp]
  0002b	74 10		 je	 SHORT $LN17@GetNamedTi@2

; 181  : 	for( int i=0; i < nSize; ++i )

  0002d	46		 inc	 esi
  0002e	83 c2 18	 add	 edx, 24			; 00000018H
  00031	3b f0		 cmp	 esi, eax
  00033	7c f1		 jl	 SHORT $LL4@GetNamedTi@2
$LN2@GetNamedTi@2:

; 187  : 		}
; 188  : 	}
; 189  : 
; 190  : 	return false;

  00035	32 c0		 xor	 al, al
$LN19@GetNamedTi@2:
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
$LN6@GetNamedTi@2:

; 191  : }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
$LN17@GetNamedTi@2:

; 184  : 		{
; 185  : 			sNamedTitleSlot = m_NamedTitleSlotList[i];

  0003d	8b 7d 0c	 mov	 edi, DWORD PTR _sNamedTitleSlot$[ebp]
  00040	6b f6 18	 imul	 esi, 24			; 00000018H
  00043	03 f1		 add	 esi, ecx
  00045	6a 06		 push	 6
  00047	59		 pop	 ecx
  00048	f3 a5		 rep movsd

; 186  : 			return true;

  0004a	b0 01		 mov	 al, 1
  0004c	eb e9		 jmp	 SHORT $LN19@GetNamedTi@2
?GetNamedTitleSlot@ioUserNamedTitle@@QAE_NKAAUtagNamedTitleSlot@@@Z ENDP ; ioUserNamedTitle::GetNamedTitleSlot
_TEXT	ENDS
PUBLIC	?GetNamedTitleSlotArray@ioUserNamedTitle@@QAE_NHAAUtagNamedTitleSlot@@@Z ; ioUserNamedTitle::GetNamedTitleSlotArray
; Function compile flags: /Ogsp
;	COMDAT ?GetNamedTitleSlotArray@ioUserNamedTitle@@QAE_NHAAUtagNamedTitleSlot@@@Z
_TEXT	SEGMENT
_nArray$ = 8						; size = 4
_sNamedTitleSlot$ = 12					; size = 4
?GetNamedTitleSlotArray@ioUserNamedTitle@@QAE_NHAAUtagNamedTitleSlot@@@Z PROC ; ioUserNamedTitle::GetNamedTitleSlotArray, COMDAT
; _this$ = ecx

; 195  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 196  : 	if ( m_NamedTitleSlotList.empty() )

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00009	3b d0		 cmp	 edx, eax
  0000b	75 04		 jne	 SHORT $LN2@GetNamedTi@3

; 197  : 		return false;

  0000d	32 c0		 xor	 al, al
  0000f	eb 2b		 jmp	 SHORT $LN3@GetNamedTi@3
$LN2@GetNamedTi@3:
  00011	56		 push	 esi

; 198  : 
; 199  : 	if( COMPARE( nArray, 0, (int)m_NamedTitleSlotList.size() ) )

  00012	8b 75 08	 mov	 esi, DWORD PTR _nArray$[ebp]
  00015	57		 push	 edi
  00016	85 f6		 test	 esi, esi
  00018	78 1e		 js	 SHORT $LN1@GetNamedTi@3
  0001a	2b c2		 sub	 eax, edx
  0001c	6a 18		 push	 24			; 00000018H
  0001e	99		 cdq
  0001f	5f		 pop	 edi
  00020	f7 ff		 idiv	 edi
  00022	3b f0		 cmp	 esi, eax
  00024	7d 12		 jge	 SHORT $LN1@GetNamedTi@3

; 200  : 	{
; 201  : 		sNamedTitleSlot = m_NamedTitleSlotList[nArray];

  00026	8b 7d 0c	 mov	 edi, DWORD PTR _sNamedTitleSlot$[ebp]
  00029	6b f6 18	 imul	 esi, 24			; 00000018H
  0002c	03 71 04	 add	 esi, DWORD PTR [ecx+4]
  0002f	6a 06		 push	 6
  00031	59		 pop	 ecx
  00032	f3 a5		 rep movsd

; 202  : 		return true;

  00034	b0 01		 mov	 al, 1
  00036	eb 02		 jmp	 SHORT $LN11@GetNamedTi@3
$LN1@GetNamedTi@3:

; 203  : 	}
; 204  : 
; 205  : 	return false;

  00038	32 c0		 xor	 al, al
$LN11@GetNamedTi@3:
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
$LN3@GetNamedTi@3:

; 206  : }

  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
?GetNamedTitleSlotArray@ioUserNamedTitle@@QAE_NHAAUtagNamedTitleSlot@@@Z ENDP ; ioUserNamedTitle::GetNamedTitleSlotArray
_TEXT	ENDS
PUBLIC	?GetNamedTitleSlotCnt@ioUserNamedTitle@@QAEHXZ	; ioUserNamedTitle::GetNamedTitleSlotCnt
; Function compile flags: /Ogsp
;	COMDAT ?GetNamedTitleSlotCnt@ioUserNamedTitle@@QAEHXZ
_TEXT	SEGMENT
?GetNamedTitleSlotCnt@ioUserNamedTitle@@QAEHXZ PROC	; ioUserNamedTitle::GetNamedTitleSlotCnt, COMDAT
; _this$ = ecx

; 213  : 	return (int)m_NamedTitleSlotList.size();

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	6a 18		 push	 24			; 00000018H
  00008	99		 cdq
  00009	59		 pop	 ecx
  0000a	f7 f9		 idiv	 ecx

; 214  : }

  0000c	c3		 ret	 0
?GetNamedTitleSlotCnt@ioUserNamedTitle@@QAEHXZ ENDP	; ioUserNamedTitle::GetNamedTitleSlotCnt
_TEXT	ENDS
PUBLIC	?IsNewNamedTitle@ioUserNamedTitle@@QAE_NXZ	; ioUserNamedTitle::IsNewNamedTitle
; Function compile flags: /Ogsp
;	COMDAT ?IsNewNamedTitle@ioUserNamedTitle@@QAE_NXZ
_TEXT	SEGMENT
?IsNewNamedTitle@ioUserNamedTitle@@QAE_NXZ PROC		; ioUserNamedTitle::IsNewNamedTitle, COMDAT
; _this$ = ecx

; 219  : 	if ( m_NamedTitleSlotList.empty() )

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	3b d0		 cmp	 edx, eax

; 220  : 		return false;

  00008	74 23		 je	 SHORT $LN2@IsNewNamed

; 221  : 
; 222  : 	int nSize = (int)m_NamedTitleSlotList.size();

  0000a	56		 push	 esi
  0000b	2b c2		 sub	 eax, edx
  0000d	6a 18		 push	 24			; 00000018H
  0000f	99		 cdq
  00010	5e		 pop	 esi
  00011	f7 fe		 idiv	 esi

; 223  : 	for( int i=0; i < nSize; ++i )

  00013	33 d2		 xor	 edx, edx
  00015	5e		 pop	 esi
  00016	85 c0		 test	 eax, eax
  00018	7e 13		 jle	 SHORT $LN2@IsNewNamed

; 221  : 
; 222  : 	int nSize = (int)m_NamedTitleSlotList.size();

  0001a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001d	83 c1 12	 add	 ecx, 18			; 00000012H
$LL4@IsNewNamed:

; 224  : 	{
; 225  : 		if( m_NamedTitleSlotList[i].m_byStatus == TITLE_NEW )

  00020	80 39 02	 cmp	 BYTE PTR [ecx], 2
  00023	74 0b		 je	 SHORT $LN15@IsNewNamed

; 223  : 	for( int i=0; i < nSize; ++i )

  00025	42		 inc	 edx
  00026	83 c1 18	 add	 ecx, 24			; 00000018H
  00029	3b d0		 cmp	 edx, eax
  0002b	7c f3		 jl	 SHORT $LL4@IsNewNamed
$LN2@IsNewNamed:

; 227  : 	}
; 228  : 
; 229  : 	return false;

  0002d	32 c0		 xor	 al, al

; 230  : }

  0002f	c3		 ret	 0
$LN15@IsNewNamed:

; 226  : 			return true;

  00030	b0 01		 mov	 al, 1

; 230  : }

  00032	c3		 ret	 0
?IsNewNamedTitle@ioUserNamedTitle@@QAE_NXZ ENDP		; ioUserNamedTitle::IsNewNamedTitle
_TEXT	ENDS
PUBLIC	?IsEnablePremiumNamedTitle@ioUserNamedTitle@@QAE_NXZ ; ioUserNamedTitle::IsEnablePremiumNamedTitle
; Function compile flags: /Ogsp
;	COMDAT ?IsEnablePremiumNamedTitle@ioUserNamedTitle@@QAE_NXZ
_TEXT	SEGMENT
?IsEnablePremiumNamedTitle@ioUserNamedTitle@@QAE_NXZ PROC ; ioUserNamedTitle::IsEnablePremiumNamedTitle, COMDAT
; _this$ = ecx

; 235  : 	if ( m_NamedTitleSlotList.empty() )

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	3b d0		 cmp	 edx, eax

; 236  : 		return false;

  00008	74 23		 je	 SHORT $LN2@IsEnablePr

; 237  : 
; 238  : 	int nSize = (int)m_NamedTitleSlotList.size();

  0000a	56		 push	 esi
  0000b	2b c2		 sub	 eax, edx
  0000d	6a 18		 push	 24			; 00000018H
  0000f	99		 cdq
  00010	5e		 pop	 esi
  00011	f7 fe		 idiv	 esi

; 239  : 	for( int i=0; i < nSize; ++i )

  00013	33 d2		 xor	 edx, edx
  00015	5e		 pop	 esi
  00016	85 c0		 test	 eax, eax
  00018	7e 13		 jle	 SHORT $LN2@IsEnablePr

; 237  : 
; 238  : 	int nSize = (int)m_NamedTitleSlotList.size();

  0001a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001d	83 c1 10	 add	 ecx, 16			; 00000010H
$LL4@IsEnablePr:

; 240  : 	{
; 241  : 		if( !m_NamedTitleSlotList[i].m_byPremium )

  00020	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00023	74 0b		 je	 SHORT $LN15@IsEnablePr

; 239  : 	for( int i=0; i < nSize; ++i )

  00025	42		 inc	 edx
  00026	83 c1 18	 add	 ecx, 24			; 00000018H
  00029	3b d0		 cmp	 edx, eax
  0002b	7c f3		 jl	 SHORT $LL4@IsEnablePr
$LN2@IsEnablePr:

; 243  : 	}
; 244  : 
; 245  : 	return false;

  0002d	32 c0		 xor	 al, al

; 246  : }

  0002f	c3		 ret	 0
$LN15@IsEnablePr:

; 242  : 			return true;

  00030	b0 01		 mov	 al, 1

; 246  : }

  00032	c3		 ret	 0
?IsEnablePremiumNamedTitle@ioUserNamedTitle@@QAE_NXZ ENDP ; ioUserNamedTitle::IsEnablePremiumNamedTitle
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 18	 add	 DWORD PTR [eax], 24	; 00000018H

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::operator++
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE@V?$allocator@UtagNamedTitleSlot@@@1@@Z ; std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE@V?$allocator@UtagNamedTitleSlot@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE@V?$allocator@UtagNamedTitleSlot@@@1@@Z PROC ; std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE@V?$allocator@UtagNamedTitleSlot@@@1@@Z ENDP ; std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QBEAAUtagNamedTitleSlot@@XZ ; std::_Vector_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QBEAAUtagNamedTitleSlot@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QBEAAUtagNamedTitleSlot@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QBEAAUtagNamedTitleSlot@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::operator*
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::operator==
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QBEIXZ ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QBEIXZ PROC ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IBEII@Z ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IBEII@Z PROC ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 18		 push	 24			; 00000018H
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba aa aa aa 0a	 mov	 edx, 178956970		; 0aaaaaaaH
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00026	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Grow_to@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IBEII@Z ENDP ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QAE@PAUtagNamedTitleSlot@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QAE@PAUtagNamedTitleSlot@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QAE@PAUtagNamedTitleSlot@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QAE@PAUtagNamedTitleSlot@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UtagNamedTitleSlot@@@std@@QAEPAUtagNamedTitleSlot@@I@Z ; std::allocator<tagNamedTitleSlot>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UtagNamedTitleSlot@@@std@@QAEPAUtagNamedTitleSlot@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UtagNamedTitleSlot@@@std@@QAEPAUtagNamedTitleSlot@@I@Z PROC ; std::allocator<tagNamedTitleSlot>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UtagNamedTitleSlot@@@std@@YAPAUtagNamedTitleSlot@@IPAU1@@Z ; std::_Allocate<tagNamedTitleSlot>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UtagNamedTitleSlot@@@std@@QAEPAUtagNamedTitleSlot@@I@Z ENDP ; std::allocator<tagNamedTitleSlot>::allocate
_TEXT	ENDS
PUBLIC	??$construct@AAUtagNamedTitleSlot@@@?$allocator@UtagNamedTitleSlot@@@std@@QAEXPAUtagNamedTitleSlot@@AAU2@@Z ; std::allocator<tagNamedTitleSlot>::construct<tagNamedTitleSlot &>
; Function compile flags: /Ogsp
;	COMDAT ??$construct@AAUtagNamedTitleSlot@@@?$allocator@UtagNamedTitleSlot@@@std@@QAEXPAUtagNamedTitleSlot@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUtagNamedTitleSlot@@@?$allocator@UtagNamedTitleSlot@@@std@@QAEXPAUtagNamedTitleSlot@@AAU2@@Z PROC ; std::allocator<tagNamedTitleSlot>::construct<tagNamedTitleSlot &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN3@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	6a 06		 push	 6
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN3@construct:
  00015	5f		 pop	 edi

; 209  : 		}

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
??$construct@AAUtagNamedTitleSlot@@@?$allocator@UtagNamedTitleSlot@@@std@@QAEXPAUtagNamedTitleSlot@@AAU2@@Z ENDP ; std::allocator<tagNamedTitleSlot>::construct<tagNamedTitleSlot &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUtagNamedTitleSlot@@PAU1@@std@@YAPAUtagNamedTitleSlot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<tagNamedTitleSlot *,tagNamedTitleSlot *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUtagNamedTitleSlot@@PAU1@@std@@YAPAUtagNamedTitleSlot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUtagNamedTitleSlot@@PAU1@@std@@YAPAUtagNamedTitleSlot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<tagNamedTitleSlot *,tagNamedTitleSlot *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00009	74 1a		 je	 SHORT $LN10@Move
  0000b	56		 push	 esi
  0000c	57		 push	 edi
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00010	83 45 10 18	 add	 DWORD PTR __Dest$[ebp], 24 ; 00000018H
  00014	8b f0		 mov	 esi, eax
  00016	6a 06		 push	 6
  00018	83 c0 18	 add	 eax, 24			; 00000018H
  0001b	59		 pop	 ecx
  0001c	f3 a5		 rep movsd
  0001e	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00021	75 ea		 jne	 SHORT $LL3@Move
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
$LN10@Move:

; 2515 : 	return (_Dest);

  00025	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Move@PAUtagNamedTitleSlot@@PAU1@@std@@YAPAUtagNamedTitleSlot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<tagNamedTitleSlot *,tagNamedTitleSlot *>
_TEXT	ENDS
PUBLIC	??$_Construct@UtagNamedTitleSlot@@ABU1@@std@@YAXPAUtagNamedTitleSlot@@ABU1@@Z ; std::_Construct<tagNamedTitleSlot,tagNamedTitleSlot const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UtagNamedTitleSlot@@ABU1@@std@@YAXPAUtagNamedTitleSlot@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UtagNamedTitleSlot@@ABU1@@std@@YAXPAUtagNamedTitleSlot@@ABU1@@Z PROC ; std::_Construct<tagNamedTitleSlot,tagNamedTitleSlot const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN3@Construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	6a 06		 push	 6
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN3@Construct:
  00015	5f		 pop	 edi

; 49   : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Construct@UtagNamedTitleSlot@@ABU1@@std@@YAXPAUtagNamedTitleSlot@@ABU1@@Z ENDP ; std::_Construct<tagNamedTitleSlot,tagNamedTitleSlot const &>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UtagNamedTitleSlot@@@std@@QAEXPAUtagNamedTitleSlot@@@Z ; std::allocator<tagNamedTitleSlot>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@UtagNamedTitleSlot@@@std@@QAEXPAUtagNamedTitleSlot@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UtagNamedTitleSlot@@@std@@QAEXPAUtagNamedTitleSlot@@@Z PROC ; std::allocator<tagNamedTitleSlot>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UtagNamedTitleSlot@@@std@@QAEXPAUtagNamedTitleSlot@@@Z ENDP ; std::allocator<tagNamedTitleSlot>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UtagNamedTitleSlot@@@std@@QAEXPAUtagNamedTitleSlot@@$$QAU3@@Z ; std::allocator<tagNamedTitleSlot>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UtagNamedTitleSlot@@@std@@QAEXPAUtagNamedTitleSlot@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UtagNamedTitleSlot@@@std@@QAEXPAUtagNamedTitleSlot@@$$QAU3@@Z PROC ; std::allocator<tagNamedTitleSlot>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN3@construct@2
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	6a 06		 push	 6
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN3@construct@2:
  00015	5f		 pop	 edi

; 203  : 		}

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?construct@?$allocator@UtagNamedTitleSlot@@@std@@QAEXPAUtagNamedTitleSlot@@$$QAU3@@Z ENDP ; std::allocator<tagNamedTitleSlot>::construct
_TEXT	ENDS
PUBLIC	??0tagNamedTitleSlot@@QAE@XZ			; tagNamedTitleSlot::tagNamedTitleSlot
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\namedtitleenumtype.h
;	COMDAT ??0tagNamedTitleSlot@@QAE@XZ
_TEXT	SEGMENT
??0tagNamedTitleSlot@@QAE@XZ PROC			; tagNamedTitleSlot::tagNamedTitleSlot, COMDAT
; _this$ = ecx

; 63   : 	tagNamedTitleSlot()

  00000	8b c1		 mov	 eax, ecx

; 64   : 	{
; 65   : 		Init();

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0000f	66 89 48 10	 mov	 WORD PTR [eax+16], cx
  00013	88 48 12	 mov	 BYTE PTR [eax+18], cl

; 66   : 	}

  00016	c3		 ret	 0
??0tagNamedTitleSlot@@QAE@XZ ENDP			; tagNamedTitleSlot::tagNamedTitleSlot
_TEXT	ENDS
PUBLIC	??0?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE@XZ ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE@XZ PROC ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >
_TEXT	ENDS
PUBLIC	??C?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QBEPAUtagNamedTitleSlot@@XZ ; std::_Vector_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::operator->
; Function compile flags: /Ogsp
;	COMDAT ??C?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QBEPAUtagNamedTitleSlot@@XZ
_TEXT	SEGMENT
??C?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QBEPAUtagNamedTitleSlot@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::operator->, COMDAT
; _this$ = ecx

; 327  : 		return (&**this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 328  : 		}

  00002	c3		 ret	 0
??C?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QBEPAUtagNamedTitleSlot@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::operator->
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QAE@PAUtagNamedTitleSlot@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::_Vector_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QAE@PAUtagNamedTitleSlot@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QAE@PAUtagNamedTitleSlot@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::_Vector_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@std@@QAE@PAUtagNamedTitleSlot@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >::_Vector_iterator<std::_Vector_val<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> > >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UtagNamedTitleSlot@@@std@@UtagNamedTitleSlot@@AAU3@@std@@YAXAAV?$allocator@UtagNamedTitleSlot@@@0@PAUtagNamedTitleSlot@@AAU2@@Z ; std::_Cons_val<std::allocator<tagNamedTitleSlot>,tagNamedTitleSlot,tagNamedTitleSlot &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UtagNamedTitleSlot@@@std@@UtagNamedTitleSlot@@AAU3@@std@@YAXAAV?$allocator@UtagNamedTitleSlot@@@0@PAUtagNamedTitleSlot@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UtagNamedTitleSlot@@@std@@UtagNamedTitleSlot@@AAU3@@std@@YAXAAV?$allocator@UtagNamedTitleSlot@@@0@PAUtagNamedTitleSlot@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<tagNamedTitleSlot>,tagNamedTitleSlot,tagNamedTitleSlot &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN7@Cons_val
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	6a 06		 push	 6
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN7@Cons_val:
  00015	5f		 pop	 edi

; 281  : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Cons_val@V?$allocator@UtagNamedTitleSlot@@@std@@UtagNamedTitleSlot@@AAU3@@std@@YAXAAV?$allocator@UtagNamedTitleSlot@@@0@PAUtagNamedTitleSlot@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<tagNamedTitleSlot>,tagNamedTitleSlot,tagNamedTitleSlot &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUtagNamedTitleSlot@@PAU1@@std@@YAPAUtagNamedTitleSlot@@PAU1@00@Z ; std::_Move<tagNamedTitleSlot *,tagNamedTitleSlot *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUtagNamedTitleSlot@@PAU1@@std@@YAPAUtagNamedTitleSlot@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$506674 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUtagNamedTitleSlot@@PAU1@@std@@YAPAUtagNamedTitleSlot@@PAU1@00@Z PROC ; std::_Move<tagNamedTitleSlot *,tagNamedTitleSlot *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$506674[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAUtagNamedTitleSlot@@PAU1@@std@@YAPAUtagNamedTitleSlot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<tagNamedTitleSlot *,tagNamedTitleSlot *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAUtagNamedTitleSlot@@PAU1@@std@@YAPAUtagNamedTitleSlot@@PAU1@00@Z ENDP ; std::_Move<tagNamedTitleSlot *,tagNamedTitleSlot *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UtagNamedTitleSlot@@@std@@QAEXPAUtagNamedTitleSlot@@ABU3@@Z ; std::allocator<tagNamedTitleSlot>::construct
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@UtagNamedTitleSlot@@@std@@QAEXPAUtagNamedTitleSlot@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UtagNamedTitleSlot@@@std@@QAEXPAUtagNamedTitleSlot@@ABU3@@Z PROC ; std::allocator<tagNamedTitleSlot>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN5@construct@3
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	6a 06		 push	 6
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN5@construct@3:
  00015	5f		 pop	 edi

; 198  : 		}

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?construct@?$allocator@UtagNamedTitleSlot@@@std@@QAEXPAUtagNamedTitleSlot@@ABU3@@Z ENDP ; std::allocator<tagNamedTitleSlot>::construct
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UtagNamedTitleSlot@@@std@@UtagNamedTitleSlot@@@std@@YAXAAV?$allocator@UtagNamedTitleSlot@@@0@PAUtagNamedTitleSlot@@@Z ; std::_Dest_val<std::allocator<tagNamedTitleSlot>,tagNamedTitleSlot>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@UtagNamedTitleSlot@@@std@@UtagNamedTitleSlot@@@std@@YAXAAV?$allocator@UtagNamedTitleSlot@@@0@PAUtagNamedTitleSlot@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UtagNamedTitleSlot@@@std@@UtagNamedTitleSlot@@@std@@YAXAAV?$allocator@UtagNamedTitleSlot@@@0@PAUtagNamedTitleSlot@@@Z PROC ; std::_Dest_val<std::allocator<tagNamedTitleSlot>,tagNamedTitleSlot>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UtagNamedTitleSlot@@@std@@UtagNamedTitleSlot@@@std@@YAXAAV?$allocator@UtagNamedTitleSlot@@@0@PAUtagNamedTitleSlot@@@Z ENDP ; std::_Dest_val<std::allocator<tagNamedTitleSlot>,tagNamedTitleSlot>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UtagNamedTitleSlot@@@std@@UtagNamedTitleSlot@@U3@@std@@YAXAAV?$allocator@UtagNamedTitleSlot@@@0@PAUtagNamedTitleSlot@@$$QAU2@@Z ; std::_Cons_val<std::allocator<tagNamedTitleSlot>,tagNamedTitleSlot,tagNamedTitleSlot>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UtagNamedTitleSlot@@@std@@UtagNamedTitleSlot@@U3@@std@@YAXAAV?$allocator@UtagNamedTitleSlot@@@0@PAUtagNamedTitleSlot@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UtagNamedTitleSlot@@@std@@UtagNamedTitleSlot@@U3@@std@@YAXAAV?$allocator@UtagNamedTitleSlot@@@0@PAUtagNamedTitleSlot@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<tagNamedTitleSlot>,tagNamedTitleSlot,tagNamedTitleSlot>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN7@Cons_val@2
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	6a 06		 push	 6
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN7@Cons_val@2:
  00015	5f		 pop	 edi

; 281  : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Cons_val@V?$allocator@UtagNamedTitleSlot@@@std@@UtagNamedTitleSlot@@U3@@std@@YAXAAV?$allocator@UtagNamedTitleSlot@@@0@PAUtagNamedTitleSlot@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<tagNamedTitleSlot>,tagNamedTitleSlot,tagNamedTitleSlot>
_TEXT	ENDS
PUBLIC	?begin@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@XZ ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@XZ PROC ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@XZ ENDP ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@XZ ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@XZ PROC ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@XZ ENDP ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@@Z ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@@Z PROC ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@@Z ENDP ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UtagNamedTitleSlot@@@std@@UtagNamedTitleSlot@@ABU3@@std@@YAXAAV?$allocator@UtagNamedTitleSlot@@@0@PAUtagNamedTitleSlot@@ABU2@@Z ; std::_Cons_val<std::allocator<tagNamedTitleSlot>,tagNamedTitleSlot,tagNamedTitleSlot const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UtagNamedTitleSlot@@@std@@UtagNamedTitleSlot@@ABU3@@std@@YAXAAV?$allocator@UtagNamedTitleSlot@@@0@PAUtagNamedTitleSlot@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UtagNamedTitleSlot@@@std@@UtagNamedTitleSlot@@ABU3@@std@@YAXAAV?$allocator@UtagNamedTitleSlot@@@0@PAUtagNamedTitleSlot@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<tagNamedTitleSlot>,tagNamedTitleSlot,tagNamedTitleSlot const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN9@Cons_val@3
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	6a 06		 push	 6
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN9@Cons_val@3:
  00015	5f		 pop	 edi

; 281  : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Cons_val@V?$allocator@UtagNamedTitleSlot@@@std@@UtagNamedTitleSlot@@ABU3@@std@@YAXAAV?$allocator@UtagNamedTitleSlot@@@0@PAUtagNamedTitleSlot@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<tagNamedTitleSlot>,tagNamedTitleSlot,tagNamedTitleSlot const &>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@YAXPAUtagNamedTitleSlot@@0AAV?$allocator@UtagNamedTitleSlot@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<tagNamedTitleSlot> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@YAXPAUtagNamedTitleSlot@@0AAV?$allocator@UtagNamedTitleSlot@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@YAXPAUtagNamedTitleSlot@@0AAV?$allocator@UtagNamedTitleSlot@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<tagNamedTitleSlot> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@YAXPAUtagNamedTitleSlot@@0AAV?$allocator@UtagNamedTitleSlot@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<tagNamedTitleSlot> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUtagNamedTitleSlot@@PAU1@V?$allocator@UtagNamedTitleSlot@@@std@@U1@@std@@YAPAUtagNamedTitleSlot@@PAU1@00AAV?$allocator@UtagNamedTitleSlot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<tagNamedTitleSlot *,tagNamedTitleSlot *,std::allocator<tagNamedTitleSlot>,tagNamedTitleSlot>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUtagNamedTitleSlot@@PAU1@V?$allocator@UtagNamedTitleSlot@@@std@@U1@@std@@YAPAUtagNamedTitleSlot@@PAU1@00AAV?$allocator@UtagNamedTitleSlot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUtagNamedTitleSlot@@PAU1@V?$allocator@UtagNamedTitleSlot@@@std@@U1@@std@@YAPAUtagNamedTitleSlot@@PAU1@00AAV?$allocator@UtagNamedTitleSlot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<tagNamedTitleSlot *,tagNamedTitleSlot *,std::allocator<tagNamedTitleSlot>,tagNamedTitleSlot>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 16		 jmp	 SHORT $LN24@Uninit_mov
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00009	56		 push	 esi
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UtagNamedTitleSlot@@@std@@UtagNamedTitleSlot@@U3@@std@@YAXAAV?$allocator@UtagNamedTitleSlot@@@0@PAUtagNamedTitleSlot@@$$QAU2@@Z ; std::_Cons_val<std::allocator<tagNamedTitleSlot>,tagNamedTitleSlot,tagNamedTitleSlot>
  00015	83 45 10 18	 add	 DWORD PTR __Dest$[ebp], 24 ; 00000018H
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	83 c6 18	 add	 esi, 24			; 00000018H
$LN24@Uninit_mov:

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001f	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00022	75 e5		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00024	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00027	5e		 pop	 esi

; 438  : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Uninit_move@PAUtagNamedTitleSlot@@PAU1@V?$allocator@UtagNamedTitleSlot@@@std@@U1@@std@@YAPAUtagNamedTitleSlot@@PAU1@00AAV?$allocator@UtagNamedTitleSlot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<tagNamedTitleSlot *,tagNamedTitleSlot *,std::allocator<tagNamedTitleSlot>,tagNamedTitleSlot>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@YAXPAUtagNamedTitleSlot@@0AAV?$allocator@UtagNamedTitleSlot@@@0@@Z ; std::_Destroy_range<std::allocator<tagNamedTitleSlot> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@YAXPAUtagNamedTitleSlot@@0AAV?$allocator@UtagNamedTitleSlot@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@YAXPAUtagNamedTitleSlot@@0AAV?$allocator@UtagNamedTitleSlot@@@0@@Z PROC ; std::_Destroy_range<std::allocator<tagNamedTitleSlot> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@YAXPAUtagNamedTitleSlot@@0AAV?$allocator@UtagNamedTitleSlot@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<tagNamedTitleSlot> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUtagNamedTitleSlot@@PAU1@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@YAPAUtagNamedTitleSlot@@PAU1@00AAV?$allocator@UtagNamedTitleSlot@@@0@@Z ; std::_Uninitialized_move<tagNamedTitleSlot *,tagNamedTitleSlot *,std::allocator<tagNamedTitleSlot> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUtagNamedTitleSlot@@PAU1@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@YAPAUtagNamedTitleSlot@@PAU1@00AAV?$allocator@UtagNamedTitleSlot@@@0@@Z
_TEXT	SEGMENT
__Cat$506924 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUtagNamedTitleSlot@@PAU1@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@YAPAUtagNamedTitleSlot@@PAU1@00AAV?$allocator@UtagNamedTitleSlot@@@0@@Z PROC ; std::_Uninitialized_move<tagNamedTitleSlot *,tagNamedTitleSlot *,std::allocator<tagNamedTitleSlot> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$506924[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUtagNamedTitleSlot@@PAU1@V?$allocator@UtagNamedTitleSlot@@@std@@U1@@std@@YAPAUtagNamedTitleSlot@@PAU1@00AAV?$allocator@UtagNamedTitleSlot@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<tagNamedTitleSlot *,tagNamedTitleSlot *,std::allocator<tagNamedTitleSlot>,tagNamedTitleSlot>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAUtagNamedTitleSlot@@PAU1@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@YAPAUtagNamedTitleSlot@@PAU1@00AAV?$allocator@UtagNamedTitleSlot@@@0@@Z ENDP ; std::_Uninitialized_move<tagNamedTitleSlot *,tagNamedTitleSlot *,std::allocator<tagNamedTitleSlot> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IAEXPAUtagNamedTitleSlot@@0@Z ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IAEXPAUtagNamedTitleSlot@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IAEXPAUtagNamedTitleSlot@@0@Z PROC ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IAEXPAUtagNamedTitleSlot@@0@Z ENDP ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IAEXXZ ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IAEXXZ PROC ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN21@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN21@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IAEXXZ ENDP ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Umove@PAUtagNamedTitleSlot@@@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IAEPAUtagNamedTitleSlot@@PAU2@00@Z ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Umove<tagNamedTitleSlot *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAUtagNamedTitleSlot@@@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IAEPAUtagNamedTitleSlot@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUtagNamedTitleSlot@@@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IAEPAUtagNamedTitleSlot@@PAU2@00@Z PROC ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Umove<tagNamedTitleSlot *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUtagNamedTitleSlot@@PAU1@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@YAPAUtagNamedTitleSlot@@PAU1@00AAV?$allocator@UtagNamedTitleSlot@@@0@@Z ; std::_Uninitialized_move<tagNamedTitleSlot *,tagNamedTitleSlot *,std::allocator<tagNamedTitleSlot> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUtagNamedTitleSlot@@@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IAEPAUtagNamedTitleSlot@@PAU2@00@Z ENDP ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Umove<tagNamedTitleSlot *>
_TEXT	ENDS
PUBLIC	??1?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE@XZ ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::~vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE@XZ PROC ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::~vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IAEXXZ ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Tidy
??1?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::~vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >
_TEXT	ENDS
PUBLIC	?erase@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@@Z ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Cat$507086 = 12					; size = 1
__Where$ = 12						; size = 4
?erase@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@@Z PROC ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::erase, COMDAT
; _this$ = ecx

; 1179 : 		{	// erase element at where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1180 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1181 : 			_VIPTR(_Where));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	56		 push	 esi
  00007	ff 75 0c	 push	 DWORD PTR __Cat$507086[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	50		 push	 eax
  0000d	ff 76 04	 push	 DWORD PTR [esi+4]
  00010	83 c0 18	 add	 eax, 24			; 00000018H
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Move@PAUtagNamedTitleSlot@@PAU1@@std@@YAPAUtagNamedTitleSlot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<tagNamedTitleSlot *,tagNamedTitleSlot *>

; 1182 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1183 : 		--this->_Mylast;
; 1184 : 		return (_Make_iter(_Where));

  00019	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  0001f	83 c4 10	 add	 esp, 16			; 00000010H
  00022	83 46 04 e8	 add	 DWORD PTR [esi+4], -24	; ffffffe8H
  00026	89 08		 mov	 DWORD PTR [eax], ecx
  00028	5e		 pop	 esi

; 1185 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
?erase@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@@Z ENDP ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::erase
_TEXT	ENDS
PUBLIC	?erase@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@0@Z ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$507261 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@0@Z PROC ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$507261[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAUtagNamedTitleSlot@@PAU1@@std@@YAPAUtagNamedTitleSlot@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<tagNamedTitleSlot *,tagNamedTitleSlot *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@0@Z ENDP ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::erase
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXI@Z ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::reserve
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
__Ptr$505529 = 8					; size = 4
__Count$ = 8						; size = 4
?reserve@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXI@Z PROC ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00011	81 fb aa aa aa
	0a		 cmp	 ebx, 178956970		; 0aaaaaaaH
  00017	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN56@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00024	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00027	2b 06		 sub	 eax, DWORD PTR [esi]
  00029	6a 18		 push	 24			; 00000018H
  0002b	99		 cdq
  0002c	59		 pop	 ecx
  0002d	f7 f9		 idiv	 ecx
  0002f	3b c3		 cmp	 eax, ebx
  00031	73 6b		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00033	6a 00		 push	 0
  00035	53		 push	 ebx
  00036	e8 00 00 00 00	 call	 ??$_Allocate@UtagNamedTitleSlot@@@std@@YAPAUtagNamedTitleSlot@@IPAU1@@Z ; std::_Allocate<tagNamedTitleSlot>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  0003b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00041	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00044	52		 push	 edx
  00045	89 45 08	 mov	 DWORD PTR __Ptr$505529[ebp], eax
  00048	ff 75 08	 push	 DWORD PTR __Ptr$505529[ebp]
  0004b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004e	50		 push	 eax
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUtagNamedTitleSlot@@PAU1@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@YAPAUtagNamedTitleSlot@@PAU1@00AAV?$allocator@UtagNamedTitleSlot@@@0@@Z ; std::_Uninitialized_move<tagNamedTitleSlot *,tagNamedTitleSlot *,std::allocator<tagNamedTitleSlot> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00055	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00057	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005a	83 c4 18	 add	 esp, 24			; 00000018H
  0005d	2b c1		 sub	 eax, ecx
  0005f	6a 18		 push	 24			; 00000018H
  00061	99		 cdq
  00062	5f		 pop	 edi
  00063	f7 ff		 idiv	 edi
  00065	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00069	8b f8		 mov	 edi, eax
  0006b	85 c9		 test	 ecx, ecx
  0006d	74 12		 je	 SHORT $LN48@reserve

; 761  : 			if (this->_Myfirst != 0)

  0006f	eb 03		 jmp	 SHORT $LN55@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

$LL39@reserve:
  00071	83 c1 18	 add	 ecx, 24			; 00000018H
$LN55@reserve:
  00074	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  00077	75 f8		 jne	 SHORT $LL39@reserve

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00079	ff 36		 push	 DWORD PTR [esi]
  0007b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00080	59		 pop	 ecx
$LN48@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00081	8b ce		 mov	 ecx, esi
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00089	6b db 18	 imul	 ebx, 24			; 00000018H

; 770  : 			this->_Mylast = _Ptr + _Size;

  0008c	6b ff 18	 imul	 edi, 24			; 00000018H
  0008f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$505529[ebp]
  00092	03 d8		 add	 ebx, eax
  00094	03 f8		 add	 edi, eax
  00096	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00099	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  0009c	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  0009e	e8 00 00 00 00	 call	 __EH_epilog3
  000a3	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000a6	ff 75 08	 push	 DWORD PTR __Ptr$505529[ebp]
  000a9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ae	59		 pop	 ecx

; 757  : 			_RERAISE;

  000af	6a 00		 push	 0
  000b1	6a 00		 push	 0
  000b3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN57@reserve:
$LN54@reserve:
  000b8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXI@Z ENDP ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::reserve
PUBLIC	?DeleteNamedTitleSlotData@ioUserNamedTitle@@QAE_NK@Z ; ioUserNamedTitle::DeleteNamedTitleSlotData
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iousernamedtitle.cpp
;	COMDAT ?DeleteNamedTitleSlotData@ioUserNamedTitle@@QAE_NK@Z
_TEXT	SEGMENT
$T507482 = 8						; size = 4
_dwCode$ = 8						; size = 4
?DeleteNamedTitleSlotData@ioUserNamedTitle@@QAE_NK@Z PROC ; ioUserNamedTitle::DeleteNamedTitleSlotData, COMDAT
; _this$ = ecx

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 58   : 	NamedTitleSlotList::iterator iter = m_NamedTitleSlotList.begin();

  00005	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]

; 59   : 	while( iter != m_NamedTitleSlotList.end() )

  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	56		 push	 esi
  0000e	eb 0a		 jmp	 SHORT $LN41@DeleteName
$LL4@DeleteName:

; 60   : 	{
; 61   : 		if( iter->m_dwCode == dwCode )

  00010	8b 32		 mov	 esi, DWORD PTR [edx]
  00012	3b 75 08	 cmp	 esi, DWORD PTR _dwCode$[ebp]
  00015	74 0e		 je	 SHORT $LN40@DeleteName

; 65   : 		}
; 66   : 		else
; 67   : 			++iter;

  00017	83 c2 18	 add	 edx, 24			; 00000018H
$LN41@DeleteName:

; 59   : 	while( iter != m_NamedTitleSlotList.end() )

  0001a	3b d0		 cmp	 edx, eax
  0001c	75 f2		 jne	 SHORT $LL4@DeleteName

; 68   : 	}
; 69   : 
; 70   : 	return false;

  0001e	32 c0		 xor	 al, al
$LN5@DeleteName:
  00020	5e		 pop	 esi

; 71   : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
$LN40@DeleteName:

; 62   : 		{
; 63   : 			iter = m_NamedTitleSlotList.erase( iter );

  00025	52		 push	 edx
  00026	8d 45 08	 lea	 eax, DWORD PTR $T507482[ebp]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ?erase@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@@Z ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::erase

; 64   : 			return true;

  0002f	b0 01		 mov	 al, 1
  00031	eb ed		 jmp	 SHORT $LN5@DeleteName
?DeleteNamedTitleSlotData@ioUserNamedTitle@@QAE_NK@Z ENDP ; ioUserNamedTitle::DeleteNamedTitleSlotData
_TEXT	ENDS
PUBLIC	?clear@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXXZ ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::clear
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?clear@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T507580 = -4						; size = 4
?clear@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXXZ PROC ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T507580[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@0@Z ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXXZ ENDP ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IAEXI@Z ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IAEXI@Z PROC ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 18		 push	 24			; 00000018H
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00030	2b c1		 sub	 eax, ecx
  00032	6a 18		 push	 24			; 00000018H
  00034	99		 cdq
  00035	59		 pop	 ecx
  00036	f7 f9		 idiv	 ecx
  00038	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003b	3b f8		 cmp	 edi, eax
  0003d	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003f	57		 push	 edi
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IBEII@Z ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Grow_to
  00047	50		 push	 eax
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?reserve@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXI@Z ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::reserve
$LN1@Reserve:
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 1298 : 		}

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IAEXI@Z ENDP ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Reserve
_TEXT	ENDS
PUBLIC	??_7ioUserNamedTitle@@6B@			; ioUserNamedTitle::`vftable'
PUBLIC	??0ioUserNamedTitle@@QAE@XZ			; ioUserNamedTitle::ioUserNamedTitle
PUBLIC	??_R4ioUserNamedTitle@@6B@			; ioUserNamedTitle::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioUserNamedTitle@@@8			; ioUserNamedTitle `RTTI Type Descriptor'
PUBLIC	??_R3ioUserNamedTitle@@8			; ioUserNamedTitle::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioUserNamedTitle@@8			; ioUserNamedTitle::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioUserNamedTitle@@8		; ioUserNamedTitle::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EioUserNamedTitle@@UAEPAXI@Z:PROC		; ioUserNamedTitle::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@ioUserNamedTitle@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
rdata$r	SEGMENT
??_R1A@?0A@EA@ioUserNamedTitle@@8 DD FLAT:??_R0?AVioUserNamedTitle@@@8 ; ioUserNamedTitle::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioUserNamedTitle@@8
rdata$r	ENDS
;	COMDAT ??_R2ioUserNamedTitle@@8
rdata$r	SEGMENT
??_R2ioUserNamedTitle@@8 DD FLAT:??_R1A@?0A@EA@ioUserNamedTitle@@8 ; ioUserNamedTitle::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioUserNamedTitle@@8
rdata$r	SEGMENT
??_R3ioUserNamedTitle@@8 DD 00H				; ioUserNamedTitle::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioUserNamedTitle@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioUserNamedTitle@@@8
_DATA	SEGMENT
??_R0?AVioUserNamedTitle@@@8 DD FLAT:??_7type_info@@6B@	; ioUserNamedTitle `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioUserNamedTitle@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioUserNamedTitle@@6B@
rdata$r	SEGMENT
??_R4ioUserNamedTitle@@6B@ DD 00H			; ioUserNamedTitle::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioUserNamedTitle@@@8
	DD	FLAT:??_R3ioUserNamedTitle@@8
rdata$r	ENDS
;	COMDAT ??_7ioUserNamedTitle@@6B@
CONST	SEGMENT
??_7ioUserNamedTitle@@6B@ DD FLAT:??_R4ioUserNamedTitle@@6B@ ; ioUserNamedTitle::`vftable'
	DD	FLAT:??_EioUserNamedTitle@@UAEPAXI@Z
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iousernamedtitle.cpp
CONST	ENDS
;	COMDAT ??0ioUserNamedTitle@@QAE@XZ
_TEXT	SEGMENT
$T507751 = -4						; size = 4
??0ioUserNamedTitle@@QAE@XZ PROC			; ioUserNamedTitle::ioUserNamedTitle, COMDAT
; _this$ = ecx

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	33 c0		 xor	 eax, eax
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]

; 8    : 	m_NamedTitleSlotList.clear();

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioUserNamedTitle@@6B@
  00013	50		 push	 eax
  00014	89 01		 mov	 DWORD PTR [ecx], eax
  00016	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00019	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0001c	8d 45 fc	 lea	 eax, DWORD PTR $T507751[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?erase@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@0@Z ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::erase

; 9    : }

  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	c9		 leave
  00029	c3		 ret	 0
??0ioUserNamedTitle@@QAE@XZ ENDP			; ioUserNamedTitle::ioUserNamedTitle
_TEXT	ENDS
PUBLIC	??1ioUserNamedTitle@@UAE@XZ			; ioUserNamedTitle::~ioUserNamedTitle
; Function compile flags: /Ogsp
;	COMDAT ??1ioUserNamedTitle@@UAE@XZ
_TEXT	SEGMENT
$T507834 = -4						; size = 4
??1ioUserNamedTitle@@UAE@XZ PROC			; ioUserNamedTitle::~ioUserNamedTitle, COMDAT
; _this$ = ecx

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 13   : 	m_NamedTitleSlotList.clear();

  00005	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  00008	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioUserNamedTitle@@6B@
  0000e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	50		 push	 eax
  00014	51		 push	 ecx
  00015	8d 45 fc	 lea	 eax, DWORD PTR $T507834[ebp]
  00018	50		 push	 eax
  00019	8b ce		 mov	 ecx, esi
  0001b	e8 00 00 00 00	 call	 ?erase@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@0@Z ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::erase

; 14   : }

  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IAEXXZ ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Tidy
  00027	5e		 pop	 esi
  00028	c9		 leave
  00029	c3		 ret	 0
??1ioUserNamedTitle@@UAE@XZ ENDP			; ioUserNamedTitle::~ioUserNamedTitle
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXABUtagNamedTitleSlot@@@Z ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXABUtagNamedTitleSlot@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXABUtagNamedTitleSlot@@@Z PROC ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 34		 jae	 SHORT $LN4@push_back
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 2e		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 18		 push	 24			; 00000018H
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IAEXI@Z ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00031	6b ff 18	 imul	 edi, 24			; 00000018H
  00034	03 3e		 add	 edi, DWORD PTR [esi]
  00036	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00039	57		 push	 edi
  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UtagNamedTitleSlot@@@std@@UtagNamedTitleSlot@@AAU3@@std@@YAXAAV?$allocator@UtagNamedTitleSlot@@@0@PAUtagNamedTitleSlot@@AAU2@@Z ; std::_Cons_val<std::allocator<tagNamedTitleSlot>,tagNamedTitleSlot,tagNamedTitleSlot &>

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00043	eb 1b		 jmp	 SHORT $LN20@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00045	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00048	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004a	6a 01		 push	 1
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@IAEXI@Z ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00053	57		 push	 edi
  00054	ff 76 04	 push	 DWORD PTR [esi+4]
  00057	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UtagNamedTitleSlot@@@std@@UtagNamedTitleSlot@@ABU3@@std@@YAXAAV?$allocator@UtagNamedTitleSlot@@@0@PAUtagNamedTitleSlot@@ABU2@@Z ; std::_Cons_val<std::allocator<tagNamedTitleSlot>,tagNamedTitleSlot,tagNamedTitleSlot const &>
$LN20@push_back:
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00063	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
?push_back@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXABUtagNamedTitleSlot@@@Z ENDP ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::push_back
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioUserNamedTitle@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioUserNamedTitle@@UAEPAXI@Z PROC			; ioUserNamedTitle::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioUserNamedTitle@@UAE@XZ ; ioUserNamedTitle::~ioUserNamedTitle
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@2:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioUserNamedTitle@@UAEPAXI@Z ENDP			; ioUserNamedTitle::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?ApplyNamedTitleSlotData@ioUserNamedTitle@@QAEXAAVSP2Packet@@@Z ; ioUserNamedTitle::ApplyNamedTitleSlotData
EXTRN	??5SP2Packet@@QAEAAV0@AAE@Z:PROC		; SP2Packet::operator>>
EXTRN	??5SP2Packet@@QAEAAV0@AA_J@Z:PROC		; SP2Packet::operator>>
EXTRN	??5SP2Packet@@QAEAAV0@AAK@Z:PROC		; SP2Packet::operator>>
EXTRN	??5SP2Packet@@QAEAAV0@AAH@Z:PROC		; SP2Packet::operator>>
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iousernamedtitle.cpp
;	COMDAT ?ApplyNamedTitleSlotData@ioUserNamedTitle@@QAEXAAVSP2Packet@@@Z
_TEXT	SEGMENT
_sNamedTitleSlot$505088 = -32				; size = 24
$T507965 = -8						; size = 4
_nSize$ = -4						; size = 4
_rkPacket$ = 8						; size = 4
?ApplyNamedTitleSlotData@ioUserNamedTitle@@QAEXAAVSP2Packet@@@Z PROC ; ioUserNamedTitle::ApplyNamedTitleSlotData, COMDAT
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 21   : 	m_NamedTitleSlotList.clear();

  00008	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  0000b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8d 45 f8	 lea	 eax, DWORD PTR $T507965[ebp]
  00016	50		 push	 eax
  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?erase@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@@2@0@Z ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::erase

; 22   : 
; 23   : 	int nSize;
; 24   : 	rkPacket >> nSize;

  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  00021	8d 45 fc	 lea	 eax, DWORD PTR _nSize$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 25   : 
; 26   : 	for( int i=0; i<nSize; ++i )

  0002a	33 db		 xor	 ebx, ebx
  0002c	33 ff		 xor	 edi, edi
  0002e	39 5d fc	 cmp	 DWORD PTR _nSize$[ebp], ebx
  00031	7e 70		 jle	 SHORT $LN2@ApplyNamed
$LL4@ApplyNamed:

; 27   : 	{
; 28   : 		NamedTitleSlot sNamedTitleSlot;
; 29   : 
; 30   : 		rkPacket >> sNamedTitleSlot.m_dwCode >> sNamedTitleSlot.m_nValue >> sNamedTitleSlot.m_nLevel;

  00033	8b 4d 08	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  00036	8d 45 e4	 lea	 eax, DWORD PTR _sNamedTitleSlot$505088[ebp+4]
  00039	50		 push	 eax
  0003a	8d 45 e8	 lea	 eax, DWORD PTR _sNamedTitleSlot$505088[ebp+8]
  0003d	50		 push	 eax
  0003e	8d 45 e0	 lea	 eax, DWORD PTR _sNamedTitleSlot$505088[ebp]
  00041	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00045	50		 push	 eax
  00046	89 5d e0	 mov	 DWORD PTR _sNamedTitleSlot$505088[ebp], ebx
  00049	89 5d e4	 mov	 DWORD PTR _sNamedTitleSlot$505088[ebp+4], ebx
  0004c	66 0f 13 45 e8	 movlpd	 QWORD PTR _sNamedTitleSlot$505088[ebp+8], xmm0
  00051	66 89 5d f0	 mov	 WORD PTR _sNamedTitleSlot$505088[ebp+16], bx
  00055	88 5d f2	 mov	 BYTE PTR _sNamedTitleSlot$505088[ebp+18], bl
  00058	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAK@Z ; SP2Packet::operator>>
  0005d	8b c8		 mov	 ecx, eax
  0005f	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AA_J@Z ; SP2Packet::operator>>
  00064	8b c8		 mov	 ecx, eax
  00066	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 31   : 		rkPacket >> sNamedTitleSlot.m_byPremium >> sNamedTitleSlot.m_byEquip >> sNamedTitleSlot.m_byStatus;

  0006b	8b 4d 08	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  0006e	8d 45 f2	 lea	 eax, DWORD PTR _sNamedTitleSlot$505088[ebp+18]
  00071	50		 push	 eax
  00072	8d 45 f1	 lea	 eax, DWORD PTR _sNamedTitleSlot$505088[ebp+17]
  00075	50		 push	 eax
  00076	8d 45 f0	 lea	 eax, DWORD PTR _sNamedTitleSlot$505088[ebp+16]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAE@Z ; SP2Packet::operator>>
  0007f	8b c8		 mov	 ecx, eax
  00081	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAE@Z ; SP2Packet::operator>>
  00086	8b c8		 mov	 ecx, eax
  00088	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAE@Z ; SP2Packet::operator>>

; 32   : 
; 33   : 		if ( sNamedTitleSlot.m_byStatus == TITLE_DISABLE )

  0008d	38 5d f2	 cmp	 BYTE PTR _sNamedTitleSlot$505088[ebp+18], bl
  00090	74 0b		 je	 SHORT $LN3@ApplyNamed

; 34   : 			continue;
; 35   : 
; 36   : 		m_NamedTitleSlotList.push_back( sNamedTitleSlot );

  00092	8d 45 e0	 lea	 eax, DWORD PTR _sNamedTitleSlot$505088[ebp]
  00095	50		 push	 eax
  00096	8b ce		 mov	 ecx, esi
  00098	e8 00 00 00 00	 call	 ?push_back@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXABUtagNamedTitleSlot@@@Z ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::push_back
$LN3@ApplyNamed:

; 25   : 
; 26   : 	for( int i=0; i<nSize; ++i )

  0009d	47		 inc	 edi
  0009e	3b 7d fc	 cmp	 edi, DWORD PTR _nSize$[ebp]
  000a1	7c 90		 jl	 SHORT $LL4@ApplyNamed
$LN2@ApplyNamed:
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx

; 37   : 	}
; 38   : }

  000a6	c9		 leave
  000a7	c2 04 00	 ret	 4
?ApplyNamedTitleSlotData@ioUserNamedTitle@@QAEXAAVSP2Packet@@@Z ENDP ; ioUserNamedTitle::ApplyNamedTitleSlotData
_TEXT	ENDS
PUBLIC	?AddNamedTitleSlotData@ioUserNamedTitle@@QAE_NABUtagNamedTitleSlot@@@Z ; ioUserNamedTitle::AddNamedTitleSlotData
; Function compile flags: /Ogsp
;	COMDAT ?AddNamedTitleSlotData@ioUserNamedTitle@@QAE_NABUtagNamedTitleSlot@@@Z
_TEXT	SEGMENT
_sNewSlot$ = 8						; size = 4
?AddNamedTitleSlotData@ioUserNamedTitle@@QAE_NABUtagNamedTitleSlot@@@Z PROC ; ioUserNamedTitle::AddNamedTitleSlotData, COMDAT
; _this$ = ecx

; 44   : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 45   : 	for ( int i=0; i<(int)m_NamedTitleSlotList.size(); i++ )

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	53		 push	 ebx
  00007	83 c1 04	 add	 ecx, 4
  0000a	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	6a 18		 push	 24			; 00000018H
  00010	99		 cdq
  00011	5e		 pop	 esi
  00012	f7 fe		 idiv	 esi
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _sNewSlot$[ebp]
  00017	33 ff		 xor	 edi, edi
  00019	85 c0		 test	 eax, eax
  0001b	7e 10		 jle	 SHORT $LN2@AddNamedTi
  0001d	8b 33		 mov	 esi, DWORD PTR [ebx]
  0001f	8b 11		 mov	 edx, DWORD PTR [ecx]
$LL4@AddNamedTi:

; 46   : 	{
; 47   : 		if ( m_NamedTitleSlotList[i].m_dwCode == sNewSlot.m_dwCode )

  00021	39 32		 cmp	 DWORD PTR [edx], esi
  00023	74 17		 je	 SHORT $LN12@AddNamedTi

; 45   : 	for ( int i=0; i<(int)m_NamedTitleSlotList.size(); i++ )

  00025	47		 inc	 edi
  00026	83 c2 18	 add	 edx, 24			; 00000018H
  00029	3b f8		 cmp	 edi, eax
  0002b	7c f4		 jl	 SHORT $LL4@AddNamedTi
$LN2@AddNamedTi:

; 49   : 	}
; 50   : 
; 51   : 	m_NamedTitleSlotList.push_back( sNewSlot );

  0002d	53		 push	 ebx
  0002e	e8 00 00 00 00	 call	 ?push_back@?$vector@UtagNamedTitleSlot@@V?$allocator@UtagNamedTitleSlot@@@std@@@std@@QAEXABUtagNamedTitleSlot@@@Z ; std::vector<tagNamedTitleSlot,std::allocator<tagNamedTitleSlot> >::push_back

; 52   : 	return true;

  00033	b0 01		 mov	 al, 1
$LN5@AddNamedTi:
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx

; 53   : }

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
$LN12@AddNamedTi:

; 48   : 			return false;

  0003c	32 c0		 xor	 al, al
  0003e	eb f5		 jmp	 SHORT $LN5@AddNamedTi
?AddNamedTitleSlotData@ioUserNamedTitle@@QAE_NABUtagNamedTitleSlot@@@Z ENDP ; ioUserNamedTitle::AddNamedTitleSlotData
_TEXT	ENDS
END
