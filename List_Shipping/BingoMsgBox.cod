; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\GUI\BingoMsgBox.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_7BingoMsgBox@@6B@				; BingoMsgBox::`vftable'
PUBLIC	??0BingoMsgBox@@QAE@XZ				; BingoMsgBox::BingoMsgBox
PUBLIC	??_R4BingoMsgBox@@6B@				; BingoMsgBox::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBingoMsgBox@@@8				; BingoMsgBox `RTTI Type Descriptor'
PUBLIC	??_R3BingoMsgBox@@8				; BingoMsgBox::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BingoMsgBox@@8				; BingoMsgBox::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BingoMsgBox@@8			; BingoMsgBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioWnd@@8				; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioWnd@@@8				; ioWnd `RTTI Type Descriptor'
PUBLIC	??_R3ioWnd@@8					; ioWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWnd@@8					; ioWnd::`RTTI Base Class Array'
PUBLIC	?AddRenderFrame@BingoMsgBox@@MAEXABVioHashString@@PAVioUIRenderFrame@@@Z ; BingoMsgBox::AddRenderFrame
PUBLIC	?AddRenderImage@BingoMsgBox@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z ; BingoMsgBox::AddRenderImage
PUBLIC	?OnRender@BingoMsgBox@@MAEXXZ			; BingoMsgBox::OnRender
PUBLIC	?iwm_command@BingoMsgBox@@UAEXPAVioWnd@@HK@Z	; BingoMsgBox::iwm_command
PUBLIC	?iwm_show@BingoMsgBox@@UAEXXZ			; BingoMsgBox::iwm_show
PUBLIC	?iwm_hide@BingoMsgBox@@UAEXXZ			; BingoMsgBox::iwm_hide
PUBLIC	?iwm_spacebar@BingoMsgBox@@UAE_NXZ		; BingoMsgBox::iwm_spacebar
EXTRN	??1ioComplexStringPrinter@@QAE@XZ:PROC		; ioComplexStringPrinter::~ioComplexStringPrinter
EXTRN	__imp_??1ioWnd@@UAE@XZ:PROC
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	??0ioComplexStringPrinter@@QAE@XZ:PROC		; ioComplexStringPrinter::ioComplexStringPrinter
EXTRN	__imp_??0ioWnd@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z:PROC ; ioWnd::AddTooltipHelp
EXTRN	?ParseExtraInfo@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::ParseExtraInfo
EXTRN	?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC ; ioWnd::AddNamedRenderImage
EXTRN	?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z:PROC ; ioWnd::RemoveNamedRenderImage
EXTRN	?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z:PROC ; ioWnd::GetNamedRenderImage
EXTRN	?SetWindowAlpha@ioWnd@@UAEXH@Z:PROC		; ioWnd::SetWindowAlpha
EXTRN	?SetActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetActive
EXTRN	?SetInActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetInActive
EXTRN	?ClearElementImageList@ioWnd@@UAEXXZ:PROC	; ioWnd::ClearElementImageList
EXTRN	?SetSize@ioWnd@@UAEXHH@Z:PROC			; ioWnd::SetSize
EXTRN	?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z:PROC	; ioWnd::SetPositionToDefault
EXTRN	?IsNeedProcess@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsNeedProcess
EXTRN	?IsCanMouseReaction@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsCanMouseReaction
EXTRN	?AddChild@ioWnd@@UAEXPAV1@@Z:PROC		; ioWnd::AddChild
EXTRN	?DeleteChild@ioWnd@@UAEXK@Z:PROC		; ioWnd::DeleteChild
EXTRN	?DeleteAllChild@ioWnd@@UAEXXZ:PROC		; ioWnd::DeleteAllChild
EXTRN	?OnRenderShowAndHide@ioWnd@@MAE_NXZ:PROC	; ioWnd::OnRenderShowAndHide
EXTRN	?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z:PROC ; ioWnd::OnRenderShowAndHideByDefault
EXTRN	?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByTop
EXTRN	?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByDown
EXTRN	?OnRenderAfterChild@ioWnd@@MAEXXZ:PROC		; ioWnd::OnRenderAfterChild
EXTRN	?OnProcess@ioWnd@@MAEXM@Z:PROC			; ioWnd::OnProcess
EXTRN	?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z:PROC	; ioWnd::OnMouseProcess
EXTRN	?CheckFrameReSize@ioWnd@@MAEXHHHH@Z:PROC	; ioWnd::CheckFrameReSize
EXTRN	?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z:PROC ; ioWnd::RenderImageList
EXTRN	?iwm_create@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_create
EXTRN	?iwm_destroy@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_destroy
EXTRN	?iwm_lbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_lbuttondown
EXTRN	?iwm_lbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_lbuttonup
EXTRN	?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z:PROC ; ioWnd::iwm_lbuttonDBLCLK
EXTRN	?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttondown
EXTRN	?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttonup
EXTRN	?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseover
EXTRN	?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mousemove
EXTRN	?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseleave
EXTRN	?iwm_vscroll@ioWnd@@UAEXKH@Z:PROC		; ioWnd::iwm_vscroll
EXTRN	?iwm_wheel@ioWnd@@UAEXH@Z:PROC			; ioWnd::iwm_wheel
EXTRN	?iwm_esc@ioWnd@@UAE_NXZ:PROC			; ioWnd::iwm_esc
EXTRN	?iwm_gototop@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_gototop
EXTRN	?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragenter
EXTRN	?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragover
EXTRN	?iwm_dragleave@ioWnd@@UAEXXZ:PROC		; ioWnd::iwm_dragleave
EXTRN	?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z:PROC ; ioWnd::iwm_dropitem
EXTRN	?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z:PROC ; ioWnd::iwm_dropdone
EXTRN	?IsEXType@ioWnd@@UBE_NXZ:PROC			; ioWnd::IsEXType
EXTRN	?GetWndType@ioWnd@@UBEKXZ:PROC			; ioWnd::GetWndType
EXTRN	?RenderWnd@ioWnd@@UAEXXZ:PROC			; ioWnd::RenderWnd
EXTRN	?SetIDEX@ioWnd@@UAEXAAK_N@Z:PROC		; ioWnd::SetIDEX
EXTRN	?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC	; ioWnd::ParseXML
EXTRN	?GetHeaderFileName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetHeaderFileName
EXTRN	?GetTemplateName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetTemplateName
EXTRN	?GetDefClassName@ioWnd@@UBEPBDXZ:PROC		; ioWnd::GetDefClassName
EXTRN	?_Clone@ioWnd@@UAEPAV1@XZ:PROC			; ioWnd::_Clone
EXTRN	?Copy@ioWnd@@UAEXPAV1@@Z:PROC			; ioWnd::Copy
EXTRN	?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z:PROC	; ioWnd::Save
EXTRN	?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::SetSaveData
EXTRN	?SetPosX@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosX
EXTRN	?SetPosY@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosY
EXTRN	?SetWidth@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetWidth
EXTRN	?SetHeight@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetHeight
EXTRN	?GetNumFixedRenderFrame@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderFrame
EXTRN	?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderFrameType
EXTRN	?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderFrame
EXTRN	?GetNumFixedRenderImage@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderImage
EXTRN	?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderImageType
EXTRN	?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderImage
EXTRN	?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z:PROC ; ioWnd::AddEffect
EXTRN	?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z:PROC ; ioWnd::GetEffect
EXTRN	??_EBingoMsgBox@@UAEPAXI@Z:PROC			; BingoMsgBox::`vector deleting destructor'
;	COMDAT ??_R2ioWnd@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingomsgbox.cpp
rdata$r	SEGMENT
??_R2ioWnd@@8 DD FLAT:??_R1A@?0A@EA@ioWnd@@8		; ioWnd::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWnd@@8
rdata$r	SEGMENT
??_R3ioWnd@@8 DD 00H					; ioWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWnd@@@8
_DATA	SEGMENT
??_R0?AVioWnd@@@8 DD FLAT:??_7type_info@@6B@		; ioWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWnd@@8 DD FLAT:??_R0?AVioWnd@@@8	; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BingoMsgBox@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BingoMsgBox@@8 DD FLAT:??_R0?AVBingoMsgBox@@@8 ; BingoMsgBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BingoMsgBox@@8
rdata$r	ENDS
;	COMDAT ??_R2BingoMsgBox@@8
rdata$r	SEGMENT
??_R2BingoMsgBox@@8 DD FLAT:??_R1A@?0A@EA@BingoMsgBox@@8 ; BingoMsgBox::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3BingoMsgBox@@8
rdata$r	SEGMENT
??_R3BingoMsgBox@@8 DD 00H				; BingoMsgBox::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BingoMsgBox@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBingoMsgBox@@@8
_DATA	SEGMENT
??_R0?AVBingoMsgBox@@@8 DD FLAT:??_7type_info@@6B@	; BingoMsgBox `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBingoMsgBox@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BingoMsgBox@@6B@
rdata$r	SEGMENT
??_R4BingoMsgBox@@6B@ DD 00H				; BingoMsgBox::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBingoMsgBox@@@8
	DD	FLAT:??_R3BingoMsgBox@@8
rdata$r	ENDS
;	COMDAT ??_7BingoMsgBox@@6B@
CONST	SEGMENT
??_7BingoMsgBox@@6B@ DD FLAT:??_R4BingoMsgBox@@6B@	; BingoMsgBox::`vftable'
	DD	FLAT:?AddRenderFrame@BingoMsgBox@@MAEXABVioHashString@@PAVioUIRenderFrame@@@Z
	DD	FLAT:?AddRenderImage@BingoMsgBox@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z
	DD	FLAT:?ParseExtraInfo@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z
	DD	FLAT:?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z
	DD	FLAT:?SetWindowAlpha@ioWnd@@UAEXH@Z
	DD	FLAT:?SetActive@ioWnd@@UAEXXZ
	DD	FLAT:?SetInActive@ioWnd@@UAEXXZ
	DD	FLAT:?ClearElementImageList@ioWnd@@UAEXXZ
	DD	FLAT:?SetSize@ioWnd@@UAEXHH@Z
	DD	FLAT:?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z
	DD	FLAT:?IsNeedProcess@ioWnd@@UBE_NXZ
	DD	FLAT:?IsCanMouseReaction@ioWnd@@UBE_NXZ
	DD	FLAT:?AddChild@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?DeleteChild@ioWnd@@UAEXK@Z
	DD	FLAT:?DeleteAllChild@ioWnd@@UAEXXZ
	DD	FLAT:?OnRenderShowAndHide@ioWnd@@MAE_NXZ
	DD	FLAT:?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRender@BingoMsgBox@@MAEXXZ
	DD	FLAT:?OnRenderAfterChild@ioWnd@@MAEXXZ
	DD	FLAT:?OnProcess@ioWnd@@MAEXM@Z
	DD	FLAT:?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z
	DD	FLAT:?CheckFrameReSize@ioWnd@@MAEXHHHH@Z
	DD	FLAT:?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z
	DD	FLAT:?iwm_create@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_destroy@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_lbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_command@BingoMsgBox@@UAEXPAVioWnd@@HK@Z
	DD	FLAT:?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_vscroll@ioWnd@@UAEXKH@Z
	DD	FLAT:?iwm_wheel@ioWnd@@UAEXH@Z
	DD	FLAT:?iwm_show@BingoMsgBox@@UAEXXZ
	DD	FLAT:?iwm_hide@BingoMsgBox@@UAEXXZ
	DD	FLAT:?iwm_esc@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_spacebar@BingoMsgBox@@UAE_NXZ
	DD	FLAT:?iwm_gototop@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragleave@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z
	DD	FLAT:?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z
	DD	FLAT:?IsEXType@ioWnd@@UBE_NXZ
	DD	FLAT:?GetWndType@ioWnd@@UBEKXZ
	DD	FLAT:?RenderWnd@ioWnd@@UAEXXZ
	DD	FLAT:?SetIDEX@ioWnd@@UAEXAAK_N@Z
	DD	FLAT:?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?GetHeaderFileName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetTemplateName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetDefClassName@ioWnd@@UBEPBDXZ
	DD	FLAT:?_Clone@ioWnd@@UAEPAV1@XZ
	DD	FLAT:?Copy@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z
	DD	FLAT:?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?SetPosX@ioWnd@@UAEXH@Z
	DD	FLAT:?SetPosY@ioWnd@@UAEXH@Z
	DD	FLAT:?SetWidth@ioWnd@@UAEXH@Z
	DD	FLAT:?SetHeight@ioWnd@@UAEXH@Z
	DD	FLAT:?GetNumFixedRenderFrame@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?GetNumFixedRenderImage@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z
	DD	FLAT:?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z
	DD	FLAT:??_EBingoMsgBox@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0BingoMsgBox@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BingoMsgBox@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0BingoMsgBox@@QAE@XZ$1
__ehfuncinfo$??0BingoMsgBox@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0BingoMsgBox@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0BingoMsgBox@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0BingoMsgBox@@QAE@XZ PROC				; BingoMsgBox::BingoMsgBox, COMDAT
; _this$ = ecx

; 8    : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0BingoMsgBox@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioWnd@@QAE@XZ
  00017	33 ff		 xor	 edi, edi
  00019	8d 8e 88 01 00
	00		 lea	 ecx, DWORD PTR [esi+392]
  0001f	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00022	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7BingoMsgBox@@6B@
  00028	e8 00 00 00 00	 call	 ??0ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::ioComplexStringPrinter
  0002d	8d 8e a8 01 00
	00		 lea	 ecx, DWORD PTR [esi+424]
  00033	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 9    : 	m_UseType = UT_NONE;

  0003d	89 be 80 01 00
	00		 mov	 DWORD PTR [esi+384], edi

; 10   : 	m_pGetNumber = NULL;

  00043	89 be 60 01 00
	00		 mov	 DWORD PTR [esi+352], edi

; 11   : 	m_pShuffleNumber = NULL;

  00049	89 be 64 01 00
	00		 mov	 DWORD PTR [esi+356], edi

; 12   : 	m_pShuffleItem = NULL;

  0004f	89 be 68 01 00
	00		 mov	 DWORD PTR [esi+360], edi

; 13   : 	m_pSpecialNumber = NULL;

  00055	89 be 6c 01 00
	00		 mov	 DWORD PTR [esi+364], edi

; 14   : 	m_pInit = NULL;

  0005b	89 be 70 01 00
	00		 mov	 DWORD PTR [esi+368], edi

; 15   : 	m_pIcon = NULL;

  00061	89 be 74 01 00
	00		 mov	 DWORD PTR [esi+372], edi

; 16   : 	m_pIconBg = NULL;

  00067	89 be 78 01 00
	00		 mov	 DWORD PTR [esi+376], edi

; 17   : 	m_pBottomFrm = NULL;

  0006d	89 be 7c 01 00
	00		 mov	 DWORD PTR [esi+380], edi

; 18   : }

  00073	8b c6		 mov	 eax, esi
  00075	e8 00 00 00 00	 call	 __EH_epilog3
  0007a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0BingoMsgBox@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
__unwindfunclet$??0BingoMsgBox@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	81 c1 88 01 00
	00		 add	 ecx, 392		; 00000188H
  00012	e9 00 00 00 00	 jmp	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
__ehhandler$??0BingoMsgBox@@QAE@XZ:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0BingoMsgBox@@QAE@XZ
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0BingoMsgBox@@QAE@XZ ENDP				; BingoMsgBox::BingoMsgBox
PUBLIC	??1BingoMsgBox@@UAE@XZ				; BingoMsgBox::~BingoMsgBox
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1BingoMsgBox@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1BingoMsgBox@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1BingoMsgBox@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1BingoMsgBox@@UAE@XZ$2
__ehfuncinfo$??1BingoMsgBox@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1BingoMsgBox@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1BingoMsgBox@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1BingoMsgBox@@UAE@XZ PROC				; BingoMsgBox::~BingoMsgBox, COMDAT
; _this$ = ecx

; 21   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1BingoMsgBox@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7BingoMsgBox@@6B@

; 22   : 	SAFEDELETE( m_pGetNumber );

  00017	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  0001d	33 db		 xor	 ebx, ebx
  0001f	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00026	3b cb		 cmp	 ecx, ebx
  00028	74 0d		 je	 SHORT $LN7@BingoMsgBo
  0002a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002c	6a 01		 push	 1
  0002e	ff 50 40	 call	 DWORD PTR [eax+64]
  00031	89 9e 60 01 00
	00		 mov	 DWORD PTR [esi+352], ebx
$LN7@BingoMsgBo:

; 23   : 	SAFEDELETE( m_pShuffleNumber );

  00037	8b 8e 64 01 00
	00		 mov	 ecx, DWORD PTR [esi+356]
  0003d	3b cb		 cmp	 ecx, ebx
  0003f	74 0d		 je	 SHORT $LN6@BingoMsgBo
  00041	8b 01		 mov	 eax, DWORD PTR [ecx]
  00043	6a 01		 push	 1
  00045	ff 50 40	 call	 DWORD PTR [eax+64]
  00048	89 9e 64 01 00
	00		 mov	 DWORD PTR [esi+356], ebx
$LN6@BingoMsgBo:

; 24   : 	SAFEDELETE( m_pShuffleItem );

  0004e	8b 8e 68 01 00
	00		 mov	 ecx, DWORD PTR [esi+360]
  00054	3b cb		 cmp	 ecx, ebx
  00056	74 0d		 je	 SHORT $LN5@BingoMsgBo
  00058	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005a	6a 01		 push	 1
  0005c	ff 50 40	 call	 DWORD PTR [eax+64]
  0005f	89 9e 68 01 00
	00		 mov	 DWORD PTR [esi+360], ebx
$LN5@BingoMsgBo:

; 25   : 	SAFEDELETE( m_pSpecialNumber );

  00065	8b 8e 6c 01 00
	00		 mov	 ecx, DWORD PTR [esi+364]
  0006b	3b cb		 cmp	 ecx, ebx
  0006d	74 0d		 je	 SHORT $LN4@BingoMsgBo
  0006f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00071	6a 01		 push	 1
  00073	ff 50 40	 call	 DWORD PTR [eax+64]
  00076	89 9e 6c 01 00
	00		 mov	 DWORD PTR [esi+364], ebx
$LN4@BingoMsgBo:

; 26   : 	SAFEDELETE( m_pInit );

  0007c	8b 8e 70 01 00
	00		 mov	 ecx, DWORD PTR [esi+368]
  00082	3b cb		 cmp	 ecx, ebx
  00084	74 0d		 je	 SHORT $LN3@BingoMsgBo
  00086	8b 01		 mov	 eax, DWORD PTR [ecx]
  00088	6a 01		 push	 1
  0008a	ff 50 40	 call	 DWORD PTR [eax+64]
  0008d	89 9e 70 01 00
	00		 mov	 DWORD PTR [esi+368], ebx
$LN3@BingoMsgBo:

; 27   : 	SAFEDELETE( m_pIconBg );

  00093	8b 8e 78 01 00
	00		 mov	 ecx, DWORD PTR [esi+376]
  00099	3b cb		 cmp	 ecx, ebx
  0009b	74 0d		 je	 SHORT $LN2@BingoMsgBo
  0009d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0009f	6a 01		 push	 1
  000a1	ff 50 40	 call	 DWORD PTR [eax+64]
  000a4	89 9e 78 01 00
	00		 mov	 DWORD PTR [esi+376], ebx
$LN2@BingoMsgBo:

; 28   : 	SAFEDELETE( m_pBottomFrm );

  000aa	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  000b0	3b cb		 cmp	 ecx, ebx
  000b2	74 0d		 je	 SHORT $LN1@BingoMsgBo
  000b4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b6	6a 01		 push	 1
  000b8	ff 50 40	 call	 DWORD PTR [eax+64]
  000bb	89 9e 7c 01 00
	00		 mov	 DWORD PTR [esi+380], ebx
$LN1@BingoMsgBo:

; 29   : }

  000c1	8d 8e a8 01 00
	00		 lea	 ecx, DWORD PTR [esi+424]
  000c7	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  000d1	8d 8e 88 01 00
	00		 lea	 ecx, DWORD PTR [esi+392]
  000d7	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  000da	e8 00 00 00 00	 call	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
  000df	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000e3	8b ce		 mov	 ecx, esi
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
  000eb	e8 00 00 00 00	 call	 __EH_epilog3
  000f0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1BingoMsgBox@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
__unwindfunclet$??1BingoMsgBox@@UAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	81 c1 88 01 00
	00		 add	 ecx, 392		; 00000188H
  00012	e9 00 00 00 00	 jmp	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
__unwindfunclet$??1BingoMsgBox@@UAE@XZ$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 a8 01 00
	00		 add	 ecx, 424		; 000001a8H
  00020	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1BingoMsgBox@@UAE@XZ:
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1BingoMsgBox@@UAE@XZ
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1BingoMsgBox@@UAE@XZ ENDP				; BingoMsgBox::~BingoMsgBox
EXTRN	__imp_?HideChildWnd@ioWnd@@QAEXK_N@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?iwm_show@BingoMsgBox@@UAEXXZ
_TEXT	SEGMENT
?iwm_show@BingoMsgBox@@UAEXXZ PROC			; BingoMsgBox::iwm_show, COMDAT
; _this$ = ecx

; 79   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 80   : 	HideChildWnd( ID_OK );

  00002	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z
  00008	57		 push	 edi
  00009	33 db		 xor	 ebx, ebx
  0000b	53		 push	 ebx
  0000c	6a 02		 push	 2
  0000e	8b f9		 mov	 edi, ecx
  00010	ff d6		 call	 esi

; 81   : 	HideChildWnd( ID_CANCEL );

  00012	53		 push	 ebx
  00013	6a 03		 push	 3
  00015	8b cf		 mov	 ecx, edi
  00017	ff d6		 call	 esi

; 82   : 	HideChildWnd( ID_INIT );

  00019	53		 push	 ebx
  0001a	6a 04		 push	 4
  0001c	8b cf		 mov	 ecx, edi
  0001e	ff d6		 call	 esi

; 83   : 	HideChildWnd( ID_CLOSE );

  00020	53		 push	 ebx
  00021	6a 05		 push	 5
  00023	8b cf		 mov	 ecx, edi
  00025	ff d6		 call	 esi

; 84   : 	m_UseType = UT_NONE;

  00027	89 9f 80 01 00
	00		 mov	 DWORD PTR [edi+384], ebx

; 85   : 	m_pIcon = NULL;

  0002d	89 9f 74 01 00
	00		 mov	 DWORD PTR [edi+372], ebx
  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx

; 86   : }

  00036	c3		 ret	 0
?iwm_show@BingoMsgBox@@UAEXXZ ENDP			; BingoMsgBox::iwm_show
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?iwm_hide@BingoMsgBox@@UAEXXZ
_TEXT	SEGMENT
?iwm_hide@BingoMsgBox@@UAEXXZ PROC			; BingoMsgBox::iwm_hide, COMDAT
; _this$ = ecx

; 89   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 90   : 	HideChildWnd( ID_OK );

  00002	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z
  00008	57		 push	 edi
  00009	33 db		 xor	 ebx, ebx
  0000b	53		 push	 ebx
  0000c	6a 02		 push	 2
  0000e	8b f9		 mov	 edi, ecx
  00010	ff d6		 call	 esi

; 91   : 	HideChildWnd( ID_CANCEL );

  00012	53		 push	 ebx
  00013	6a 03		 push	 3
  00015	8b cf		 mov	 ecx, edi
  00017	ff d6		 call	 esi

; 92   : 	HideChildWnd( ID_INIT );

  00019	53		 push	 ebx
  0001a	6a 04		 push	 4
  0001c	8b cf		 mov	 ecx, edi
  0001e	ff d6		 call	 esi

; 93   : 	HideChildWnd( ID_CLOSE );

  00020	53		 push	 ebx
  00021	6a 05		 push	 5
  00023	8b cf		 mov	 ecx, edi
  00025	ff d6		 call	 esi

; 94   : 	m_pIcon = NULL;

  00027	89 9f 74 01 00
	00		 mov	 DWORD PTR [edi+372], ebx
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 95   : }

  00030	c3		 ret	 0
?iwm_hide@BingoMsgBox@@UAEXXZ ENDP			; BingoMsgBox::iwm_hide
_TEXT	ENDS
EXTRN	__imp_?GetParent@ioWnd@@QAEPAV1@XZ:PROC
EXTRN	__imp_?HideWnd@ioWnd@@QAEXXZ:PROC
EXTRN	__imp_?GetID@ioWnd@@QBEKXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?iwm_command@BingoMsgBox@@UAEXPAVioWnd@@HK@Z
_TEXT	SEGMENT
_pWnd$ = 8						; size = 4
_cmd$ = 12						; size = 4
_param$ = 16						; size = 4
?iwm_command@BingoMsgBox@@UAEXPAVioWnd@@HK@Z PROC	; BingoMsgBox::iwm_command, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 99   : 	DWORD dwID = pWnd->GetID();

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _pWnd$[ebp]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetID@ioWnd@@QBEKXZ

; 100  : 	switch( dwID )

  0000f	48		 dec	 eax
  00010	74 0c		 je	 SHORT $LN5@iwm_comman
  00012	48		 dec	 eax
  00013	74 1c		 je	 SHORT $LN3@iwm_comman
  00015	48		 dec	 eax
  00016	74 06		 je	 SHORT $LN5@iwm_comman
  00018	48		 dec	 eax
  00019	74 16		 je	 SHORT $LN3@iwm_comman
  0001b	48		 dec	 eax
  0001c	75 0e		 jne	 SHORT $LN4@iwm_comman
$LN5@iwm_comman:

; 101  : 	{
; 102  : 	case ID_EXIT:
; 103  : 	case ID_CANCEL:
; 104  : 	case ID_CLOSE:
; 105  : 		if( cmd == IOBN_BTNUP )

  0001e	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  00022	75 08		 jne	 SHORT $LN4@iwm_comman

; 106  : 		{
; 107  : 			HideWnd();

  00024	8b ce		 mov	 ecx, esi
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideWnd@ioWnd@@QAEXXZ
$LN4@iwm_comman:
  0002c	5e		 pop	 esi

; 121  : 	}
; 122  : }

  0002d	5d		 pop	 ebp
  0002e	c2 0c 00	 ret	 12			; 0000000cH
$LN3@iwm_comman:

; 108  : 		}
; 109  : 		break;
; 110  : 	case ID_OK:
; 111  : 	case ID_INIT:
; 112  : 		if( cmd == IOBN_BTNUP )

  00031	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  00035	75 f5		 jne	 SHORT $LN4@iwm_comman

; 113  : 		{
; 114  : 			HideWnd();

  00037	8b ce		 mov	 ecx, esi
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideWnd@ioWnd@@QAEXXZ

; 115  : 			if( GetParent() )

  0003f	8b ce		 mov	 ecx, esi
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetParent@ioWnd@@QAEPAV1@XZ
  00047	85 c0		 test	 eax, eax
  00049	74 e1		 je	 SHORT $LN4@iwm_comman

; 116  : 			{
; 117  : 				GetParent()->iwm_command( this, cmd, static_cast<DWORD>(m_UseType) );

  0004b	8b ce		 mov	 ecx, esi
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetParent@ioWnd@@QAEPAV1@XZ
  00053	ff b6 80 01 00
	00		 push	 DWORD PTR [esi+384]
  00059	8b 10		 mov	 edx, DWORD PTR [eax]
  0005b	6a 11		 push	 17			; 00000011H
  0005d	56		 push	 esi
  0005e	8b c8		 mov	 ecx, eax
  00060	ff 92 8c 00 00
	00		 call	 DWORD PTR [edx+140]

; 118  : 			}
; 119  : 		}
; 120  : 		break;

  00066	eb c4		 jmp	 SHORT $LN4@iwm_comman
?iwm_command@BingoMsgBox@@UAEXPAVioWnd@@HK@Z ENDP	; BingoMsgBox::iwm_command
_TEXT	ENDS
EXTRN	__imp_?IsShow@ioWnd@@QBE_NXZ:PROC
EXTRN	__imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?iwm_spacebar@BingoMsgBox@@UAE_NXZ
_TEXT	SEGMENT
?iwm_spacebar@BingoMsgBox@@UAE_NXZ PROC			; BingoMsgBox::iwm_spacebar, COMDAT
; _this$ = ecx

; 125  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 126  : 	ioButton *pOKBtn = (ioButton*)FindChildWnd( ID_OK );

  00002	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  00008	57		 push	 edi
  00009	6a 02		 push	 2
  0000b	8b f9		 mov	 edi, ecx
  0000d	ff d6		 call	 esi

; 127  : 	ioButton *pInitBtn = (ioButton*)FindChildWnd( ID_INIT );

  0000f	6a 04		 push	 4
  00011	8b cf		 mov	 ecx, edi
  00013	8b d8		 mov	 ebx, eax
  00015	ff d6		 call	 esi
  00017	8b f0		 mov	 esi, eax

; 128  : 	if( pOKBtn && pOKBtn->IsShow() )

  00019	85 db		 test	 ebx, ebx
  0001b	74 1f		 je	 SHORT $LN6@iwm_spaceb
  0001d	8b cb		 mov	 ecx, ebx
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  00025	84 c0		 test	 al, al
  00027	74 13		 je	 SHORT $LN6@iwm_spaceb

; 129  : 	{
; 130  : 		iwm_command( pOKBtn, IOBN_BTNUP, 0 );

  00029	6a 00		 push	 0
  0002b	6a 11		 push	 17			; 00000011H
  0002d	53		 push	 ebx
$LN8@iwm_spaceb:
  0002e	8b 07		 mov	 eax, DWORD PTR [edi]
  00030	8b cf		 mov	 ecx, edi
  00032	ff 90 8c 00 00
	00		 call	 DWORD PTR [eax+140]

; 131  : 		return true;

  00038	b0 01		 mov	 al, 1
  0003a	eb 19		 jmp	 SHORT $LN4@iwm_spaceb
$LN6@iwm_spaceb:

; 132  : 	}
; 133  : 	else if( pInitBtn && pInitBtn->IsShow() )

  0003c	85 f6		 test	 esi, esi
  0003e	74 13		 je	 SHORT $LN1@iwm_spaceb
  00040	8b ce		 mov	 ecx, esi
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  00048	84 c0		 test	 al, al
  0004a	74 07		 je	 SHORT $LN1@iwm_spaceb

; 134  : 	{
; 135  : 		iwm_command( pInitBtn, IOBN_BTNUP, 0 );

  0004c	6a 00		 push	 0
  0004e	6a 11		 push	 17			; 00000011H
  00050	56		 push	 esi

; 136  : 		return true;

  00051	eb db		 jmp	 SHORT $LN8@iwm_spaceb
$LN1@iwm_spaceb:

; 137  : 	}
; 138  : 	
; 139  : 	return false;

  00053	32 c0		 xor	 al, al
$LN4@iwm_spaceb:
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx

; 140  : }

  00058	c3		 ret	 0
?iwm_spacebar@BingoMsgBox@@UAE_NXZ ENDP			; BingoMsgBox::iwm_spacebar
_TEXT	ENDS
PUBLIC	?UpdateWndSize@BingoMsgBox@@IAEXHH@Z		; BingoMsgBox::UpdateWndSize
EXTRN	__imp_?GetDerivedPosY@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?GetDerivedPosX@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?SetScreenWndPos@ioWnd@@QAEXHH@Z:PROC
EXTRN	?Width@Setting@@SAHXZ:PROC			; Setting::Width
EXTRN	__imp_?GetWidth@ioWnd@@QBEHXZ:PROC
EXTRN	?Height@Setting@@SAHXZ:PROC			; Setting::Height
EXTRN	__imp_?GetHeight@ioWnd@@QBEHXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?UpdateWndSize@BingoMsgBox@@IAEXHH@Z
_TEXT	SEGMENT
_iHeightGap$ = -4					; size = 4
_iXPos$ = 8						; size = 4
_iWidth$ = 8						; size = 4
_iYPos$ = 12						; size = 4
_iHeight$ = 12						; size = 4
?UpdateWndSize@BingoMsgBox@@IAEXHH@Z PROC		; BingoMsgBox::UpdateWndSize, COMDAT
; _this$ = ecx

; 260  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 261  : 	int iHeightGap = BUTTON_Y;
; 262  : 	if( iHeight != WINDOW_HEIGHT )

  00004	8b 45 0c	 mov	 eax, DWORD PTR _iHeight$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	c7 45 fc e6 00
	00 00		 mov	 DWORD PTR _iHeightGap$[ebp], 230 ; 000000e6H
  00013	3d 16 01 00 00	 cmp	 eax, 278		; 00000116H
  00018	74 06		 je	 SHORT $LN5@UpdateWndS

; 263  : 		iHeightGap += ( iHeight - WINDOW_HEIGHT );

  0001a	8d 48 d0	 lea	 ecx, DWORD PTR [eax-48]
  0001d	89 4d fc	 mov	 DWORD PTR _iHeightGap$[ebp], ecx
$LN5@UpdateWndS:

; 264  : 
; 265  : 	SetSize( iWidth, iHeight );

  00020	8b 17		 mov	 edx, DWORD PTR [edi]
  00022	50		 push	 eax
  00023	ff 75 08	 push	 DWORD PTR _iWidth$[ebp]
  00026	8b cf		 mov	 ecx, edi
  00028	ff 52 2c	 call	 DWORD PTR [edx+44]

; 266  : 	SetScreenWndPos( (Setting::Width() - GetWidth() ) / 2, ( (Setting::Height() - GetHeight() ) / 2 ) - 20 );

  0002b	8b cf		 mov	 ecx, edi
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioWnd@@QBEHXZ
  00033	8b f0		 mov	 esi, eax
  00035	e8 00 00 00 00	 call	 ?Height@Setting@@SAHXZ	; Setting::Height
  0003a	2b c6		 sub	 eax, esi
  0003c	99		 cdq
  0003d	2b c2		 sub	 eax, edx
  0003f	d1 f8		 sar	 eax, 1
  00041	83 e8 14	 sub	 eax, 20			; 00000014H
  00044	50		 push	 eax
  00045	8b cf		 mov	 ecx, edi
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioWnd@@QBEHXZ
  0004d	8b f0		 mov	 esi, eax
  0004f	e8 00 00 00 00	 call	 ?Width@Setting@@SAHXZ	; Setting::Width
  00054	2b c6		 sub	 eax, esi
  00056	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?SetScreenWndPos@ioWnd@@QAEXHH@Z
  0005c	99		 cdq
  0005d	2b c2		 sub	 eax, edx
  0005f	d1 f8		 sar	 eax, 1
  00061	50		 push	 eax
  00062	8b cf		 mov	 ecx, edi
  00064	ff d6		 call	 esi

; 267  : 
; 268  : 	int iXPos = GetDerivedPosX();

  00066	8b cf		 mov	 ecx, edi
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosX@ioWnd@@QBEHXZ

; 269  : 	int iYPos = GetDerivedPosY();

  0006e	8b cf		 mov	 ecx, edi
  00070	89 45 08	 mov	 DWORD PTR _iXPos$[ebp], eax
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ

; 270  : 
; 271  : 	ioWnd *pWnd = FindChildWnd(ID_OK);

  00079	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  0007f	6a 02		 push	 2
  00081	8b cf		 mov	 ecx, edi
  00083	89 45 0c	 mov	 DWORD PTR _iYPos$[ebp], eax
  00086	ff d3		 call	 ebx

; 272  : 	if( pWnd )

  00088	85 c0		 test	 eax, eax
  0008a	74 12		 je	 SHORT $LN4@UpdateWndS

; 273  : 	{
; 274  : 		pWnd->SetScreenWndPos( iXPos + 17, iYPos + iHeightGap );

  0008c	8b 4d 0c	 mov	 ecx, DWORD PTR _iYPos$[ebp]
  0008f	03 4d fc	 add	 ecx, DWORD PTR _iHeightGap$[ebp]
  00092	51		 push	 ecx
  00093	8b 4d 08	 mov	 ecx, DWORD PTR _iXPos$[ebp]
  00096	83 c1 11	 add	 ecx, 17			; 00000011H
  00099	51		 push	 ecx
  0009a	8b c8		 mov	 ecx, eax
  0009c	ff d6		 call	 esi
$LN4@UpdateWndS:

; 275  : 	}
; 276  : 	pWnd = FindChildWnd(ID_CANCEL);

  0009e	6a 03		 push	 3
  000a0	8b cf		 mov	 ecx, edi
  000a2	ff d3		 call	 ebx

; 277  : 	if( pWnd )

  000a4	85 c0		 test	 eax, eax
  000a6	74 15		 je	 SHORT $LN3@UpdateWndS

; 278  : 	{
; 279  : 		pWnd->SetScreenWndPos( iXPos + 152 , iYPos + iHeightGap );

  000a8	8b 4d 0c	 mov	 ecx, DWORD PTR _iYPos$[ebp]
  000ab	03 4d fc	 add	 ecx, DWORD PTR _iHeightGap$[ebp]
  000ae	51		 push	 ecx
  000af	8b 4d 08	 mov	 ecx, DWORD PTR _iXPos$[ebp]
  000b2	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  000b8	51		 push	 ecx
  000b9	8b c8		 mov	 ecx, eax
  000bb	ff d6		 call	 esi
$LN3@UpdateWndS:

; 280  : 	}
; 281  : 	pWnd = FindChildWnd(ID_INIT);

  000bd	6a 04		 push	 4
  000bf	8b cf		 mov	 ecx, edi
  000c1	ff d3		 call	 ebx

; 282  : 	if( pWnd )

  000c3	85 c0		 test	 eax, eax
  000c5	74 12		 je	 SHORT $LN2@UpdateWndS

; 283  : 	{
; 284  : 		pWnd->SetScreenWndPos( iXPos + 17, iYPos + iHeightGap );

  000c7	8b 4d 0c	 mov	 ecx, DWORD PTR _iYPos$[ebp]
  000ca	03 4d fc	 add	 ecx, DWORD PTR _iHeightGap$[ebp]
  000cd	51		 push	 ecx
  000ce	8b 4d 08	 mov	 ecx, DWORD PTR _iXPos$[ebp]
  000d1	83 c1 11	 add	 ecx, 17			; 00000011H
  000d4	51		 push	 ecx
  000d5	8b c8		 mov	 ecx, eax
  000d7	ff d6		 call	 esi
$LN2@UpdateWndS:

; 285  : 	}
; 286  : 	pWnd = FindChildWnd(ID_CLOSE);

  000d9	6a 05		 push	 5
  000db	8b cf		 mov	 ecx, edi
  000dd	ff d3		 call	 ebx

; 287  : 	if( pWnd )

  000df	85 c0		 test	 eax, eax
  000e1	74 12		 je	 SHORT $LN1@UpdateWndS

; 288  : 	{
; 289  : 		pWnd->SetScreenWndPos( iXPos + 17, iYPos + iHeightGap );

  000e3	8b 4d 0c	 mov	 ecx, DWORD PTR _iYPos$[ebp]
  000e6	03 4d fc	 add	 ecx, DWORD PTR _iHeightGap$[ebp]
  000e9	51		 push	 ecx
  000ea	8b 4d 08	 mov	 ecx, DWORD PTR _iXPos$[ebp]
  000ed	83 c1 11	 add	 ecx, 17			; 00000011H
  000f0	51		 push	 ecx
  000f1	8b c8		 mov	 ecx, eax
  000f3	ff d6		 call	 esi
$LN1@UpdateWndS:
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx

; 290  : 	}
; 291  : }

  000f8	c9		 leave
  000f9	c2 08 00	 ret	 8
?UpdateWndSize@BingoMsgBox@@IAEXHH@Z ENDP		; BingoMsgBox::UpdateWndSize
_TEXT	ENDS
PUBLIC	?GetSingleton@?$Singleton@VioEtcItemManager@@@@SAAAVioEtcItemManager@@XZ ; Singleton<ioEtcItemManager>::GetSingleton
EXTRN	?ms_Singleton@?$Singleton@VioEtcItemManager@@@@1PAVioEtcItemManager@@A:DWORD ; Singleton<ioEtcItemManager>::ms_Singleton
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
;	COMDAT ?GetSingleton@?$Singleton@VioEtcItemManager@@@@SAAAVioEtcItemManager@@XZ
_TEXT	SEGMENT
?GetSingleton@?$Singleton@VioEtcItemManager@@@@SAAAVioEtcItemManager@@XZ PROC ; Singleton<ioEtcItemManager>::GetSingleton, COMDAT

; 42   : 		assert( ms_Singleton );
; 43   : 		return (*ms_Singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VioEtcItemManager@@@@1PAVioEtcItemManager@@A ; Singleton<ioEtcItemManager>::ms_Singleton

; 44   : 	}

  00005	c3		 ret	 0
?GetSingleton@?$Singleton@VioEtcItemManager@@@@SAAAVioEtcItemManager@@XZ ENDP ; Singleton<ioEtcItemManager>::GetSingleton
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetName@ioEtcItem@@QBEABVioHashString@@XZ	; ioEtcItem::GetName
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioetcitem.h
;	COMDAT ?GetName@ioEtcItem@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetName@ioEtcItem@@QBEABVioHashString@@XZ PROC		; ioEtcItem::GetName, COMDAT
; _this$ = ecx

; 465  : 	inline const ioHashString& GetName() const { return m_Name; }

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetName@ioEtcItem@@QBEABVioHashString@@XZ ENDP		; ioEtcItem::GetName
_TEXT	ENDS
PUBLIC	?GetBingo@ioMyInfo@@QAEPAVioBingo@@XZ		; ioMyInfo::GetBingo
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomyinfo.h
;	COMDAT ?GetBingo@ioMyInfo@@QAEPAVioBingo@@XZ
_TEXT	SEGMENT
?GetBingo@ioMyInfo@@QAEPAVioBingo@@XZ PROC		; ioMyInfo::GetBingo, COMDAT
; _this$ = ecx

; 643  : 	ioBingo* GetBingo() { return m_pBingo; }

  00000	8b 81 94 0b 00
	00		 mov	 eax, DWORD PTR [ecx+2964]
  00006	c3		 ret	 0
?GetBingo@ioMyInfo@@QAEPAVioBingo@@XZ ENDP		; ioMyInfo::GetBingo
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GBingoMsgBox@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GBingoMsgBox@@UAEPAXI@Z PROC				; BingoMsgBox::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1BingoMsgBox@@UAE@XZ	; BingoMsgBox::~BingoMsgBox
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GBingoMsgBox@@UAEPAXI@Z ENDP				; BingoMsgBox::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@3f266666
PUBLIC	??_C@_0BH@DKKBFFCO@BingoMsgBox?3?3PrintText?$AA@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?PrintText@BingoMsgBox@@IAEXHH@Z		; BingoMsgBox::PrintText
EXTRN	?SetUIPrinter@ioBingo@@QAEXHHMAAVioComplexStringPrinter@@@Z:PROC ; ioBingo::SetUIPrinter
EXTRN	?GetSingleton@ioMyInfo@@SAAAV1@XZ:PROC		; ioMyInfo::GetSingleton
EXTRN	?AddTextPiece@ioComplexStringPrinter@@QAEXMPBDH@Z:PROC ; ioComplexStringPrinter::AddTextPiece
EXTRN	?AddTextPiece@ioComplexStringPrinter@@QAEXMPBD0@Z:PROC ; ioComplexStringPrinter::AddTextPiece
EXTRN	__imp_?c_str@ioHashString@@QBEPBDXZ:PROC
EXTRN	?ClearList@ioComplexStringPrinter@@QAEXXZ:PROC	; ioComplexStringPrinter::ClearList
EXTRN	?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z:PROC ; ioComplexStringPrinter::PrintFullText
EXTRN	?AddTextPiece@ioComplexStringPrinter@@QAAXMPBDZZ:PROC ; ioComplexStringPrinter::AddTextPiece
EXTRN	__imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z:PROC
EXTRN	__imp_?GetSingleton@ioStringManager@@SAAAV1@XZ:PROC
EXTRN	?SetTextColor@ioComplexStringPrinter@@QAEXK@Z:PROC ; ioComplexStringPrinter::SetTextColor
EXTRN	?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z:PROC ; ioComplexStringPrinter::SetBkColor
EXTRN	?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z:PROC ; ioComplexStringPrinter::SetTextStyle
EXTRN	__fltused:DWORD
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT ??_C@_0BH@DKKBFFCO@BingoMsgBox?3?3PrintText?$AA@
CONST	SEGMENT
??_C@_0BH@DKKBFFCO@BingoMsgBox?3?3PrintText?$AA@ DB 'BingoMsgBox::PrintTe'
	DB	'xt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PrintText@BingoMsgBox@@IAEXHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PrintText@BingoMsgBox@@IAEXHH@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PrintText@BingoMsgBox@@IAEXHH@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PrintText@BingoMsgBox@@IAEXHH@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?PrintText@BingoMsgBox@@IAEXHH@Z$3
__ehfuncinfo$?PrintText@BingoMsgBox@@IAEXHH@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?PrintText@BingoMsgBox@@IAEXHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingomsgbox.cpp
xdata$x	ENDS
;	COMDAT ?PrintText@BingoMsgBox@@IAEXHH@Z
_TEXT	SEGMENT
_kPrinterManual$507719 = -116				; size = 32
_kPrinter$507714 = -84					; size = 32
_kPrinter$507710 = -52					; size = 32
_kPrinter$507699 = -52					; size = 32
_pBingo$507717 = -20					; size = 4
_iLine$507720 = -16					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
tv394 = 8						; size = 4
_iXPos$ = 8						; size = 4
_iYPos$ = 12						; size = 4
?PrintText@BingoMsgBox@@IAEXHH@Z PROC			; BingoMsgBox::PrintText, COMDAT
; _this$ = ecx

; 170  : {

  00000	6a 68		 push	 104			; 00000068H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?PrintText@BingoMsgBox@@IAEXHH@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 171  : 	if( m_UseType == UT_INIT )

  00011	83 bf 80 01 00
	00 05		 cmp	 DWORD PTR [edi+384], 5
  00018	0f 85 cb 01 00
	00		 jne	 $LN12@PrintText

; 172  : 	{
; 173  : 		ioComplexStringPrinter kPrinter;

  0001e	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507699[ebp]
  00021	e8 00 00 00 00	 call	 ??0ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::ioComplexStringPrinter
  00026	33 f6		 xor	 esi, esi

; 174  : 		kPrinter.SetTextStyle( TS_NORMAL );

  00028	56		 push	 esi
  00029	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507699[ebp]
  0002c	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  0002f	e8 00 00 00 00	 call	 ?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z ; ioComplexStringPrinter::SetTextStyle

; 175  : 		kPrinter.SetBkColor( 0, 0, 0 );

  00034	56		 push	 esi
  00035	56		 push	 esi
  00036	56		 push	 esi
  00037	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507699[ebp]
  0003a	e8 00 00 00 00	 call	 ?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z ; ioComplexStringPrinter::SetBkColor

; 176  : 		kPrinter.SetTextColor( TCT_DEFAULT_RED );

  0003f	68 00 16 b9 ff	 push	 -4647424		; ffb91600H
  00044	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507699[ebp]
  00047	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 177  : 
; 178  : 		switch( m_iBingoType )

  0004c	8b 87 84 01 00
	00		 mov	 eax, DWORD PTR [edi+388]
  00052	2b c6		 sub	 eax, esi
  00054	0f 84 90 00 00
	00		 je	 $LN9@PrintText
  0005a	48		 dec	 eax
  0005b	0f 85 6f 01 00
	00		 jne	 $LN10@PrintText

; 189  : 			}
; 190  : 			break;
; 191  : 		case ioBingo::BT_FIXED:
; 192  : 			{
; 193  : 				kPrinter.AddTextPiece( FONT_SIZE_13, STR(9) );

  00061	56		 push	 esi
  00062	6a 09		 push	 9
  00064	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00069	53		 push	 ebx
  0006a	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BH@DKKBFFCO@BingoMsgBox?3?3PrintText?$AA@
  0006f	57		 push	 edi
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00076	8b c8		 mov	 ecx, eax
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  0007e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00086	50		 push	 eax
  00087	51		 push	 ecx
  00088	8d 45 cc	 lea	 eax, DWORD PTR _kPrinter$507699[ebp]
  0008b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAAXMPBDZZ ; ioComplexStringPrinter::AddTextPiece

; 194  : 				kPrinter.PrintFullText( iXPos + 151, iYPos + 144, TAT_CENTER );

  00096	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  00099	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009c	05 97 00 00 00	 add	 eax, 151		; 00000097H
  000a1	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  000a6	56		 push	 esi
  000a7	0f 57 c0	 xorps	 xmm0, xmm0
  000aa	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000ae	8b 45 0c	 mov	 eax, DWORD PTR _iYPos$[ebp]
  000b1	6a 01		 push	 1
  000b3	51		 push	 ecx
  000b4	51		 push	 ecx
  000b5	05 90 00 00 00	 add	 eax, 144		; 00000090H
  000ba	0f 57 c9	 xorps	 xmm1, xmm1
  000bd	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  000c1	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  000c7	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507699[ebp]
  000ca	f3 0f 11 45 08	 movss	 DWORD PTR tv394[ebp], xmm0
  000cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d4	e8 00 00 00 00	 call	 ?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z ; ioComplexStringPrinter::PrintFullText

; 195  : 				kPrinter.ClearList();

  000d9	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507699[ebp]
  000dc	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList

; 196  : 
; 197  : 				kPrinter.AddTextPiece( FONT_SIZE_13, STR(10) );

  000e1	6a 00		 push	 0
  000e3	6a 0a		 push	 10			; 0000000aH

; 198  : 				kPrinter.PrintFullText( iXPos + 151, iYPos + 164, TAT_CENTER );
; 199  : 				kPrinter.ClearList();

  000e5	e9 84 00 00 00	 jmp	 $LN25@PrintText
$LN9@PrintText:

; 179  : 		{
; 180  : 		case ioBingo::BT_RAND:
; 181  : 			{
; 182  : 				kPrinter.AddTextPiece( FONT_SIZE_13, STR(7) );

  000ea	56		 push	 esi
  000eb	6a 07		 push	 7
  000ed	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  000f2	53		 push	 ebx
  000f3	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BH@DKKBFFCO@BingoMsgBox?3?3PrintText?$AA@
  000f8	57		 push	 edi
  000f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  000ff	8b c8		 mov	 ecx, eax
  00101	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00107	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  0010f	50		 push	 eax
  00110	51		 push	 ecx
  00111	8d 45 cc	 lea	 eax, DWORD PTR _kPrinter$507699[ebp]
  00114	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00119	50		 push	 eax
  0011a	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAAXMPBDZZ ; ioComplexStringPrinter::AddTextPiece

; 183  : 				kPrinter.PrintFullText( iXPos + 151, iYPos + 144, TAT_CENTER );

  0011f	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  00122	83 c4 0c	 add	 esp, 12			; 0000000cH
  00125	05 97 00 00 00	 add	 eax, 151		; 00000097H
  0012a	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  0012f	56		 push	 esi
  00130	0f 57 c0	 xorps	 xmm0, xmm0
  00133	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00137	8b 45 0c	 mov	 eax, DWORD PTR _iYPos$[ebp]
  0013a	6a 01		 push	 1
  0013c	51		 push	 ecx
  0013d	51		 push	 ecx
  0013e	05 90 00 00 00	 add	 eax, 144		; 00000090H
  00143	0f 57 c9	 xorps	 xmm1, xmm1
  00146	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  0014a	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  00150	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507699[ebp]
  00153	f3 0f 11 45 08	 movss	 DWORD PTR tv394[ebp], xmm0
  00158	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015d	e8 00 00 00 00	 call	 ?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z ; ioComplexStringPrinter::PrintFullText

; 184  : 				kPrinter.ClearList();

  00162	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507699[ebp]
  00165	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList

; 185  : 
; 186  : 				kPrinter.AddTextPiece( FONT_SIZE_13, STR(8) );

  0016a	6a 00		 push	 0
  0016c	6a 08		 push	 8
$LN25@PrintText:
  0016e	53		 push	 ebx
  0016f	57		 push	 edi
  00170	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00176	8b c8		 mov	 ecx, eax
  00178	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  0017e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00186	50		 push	 eax
  00187	51		 push	 ecx
  00188	8d 45 cc	 lea	 eax, DWORD PTR _kPrinter$507699[ebp]
  0018b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00190	50		 push	 eax
  00191	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAAXMPBDZZ ; ioComplexStringPrinter::AddTextPiece

; 187  : 				kPrinter.PrintFullText( iXPos + 151, iYPos + 164, TAT_CENTER );

  00196	8b 45 0c	 mov	 eax, DWORD PTR _iYPos$[ebp]
  00199	83 c4 0c	 add	 esp, 12			; 0000000cH
  0019c	56		 push	 esi
  0019d	6a 01		 push	 1
  0019f	51		 push	 ecx
  001a0	51		 push	 ecx
  001a1	0f 57 c0	 xorps	 xmm0, xmm0
  001a4	05 a4 00 00 00	 add	 eax, 164		; 000000a4H
  001a9	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  001ad	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001b3	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv394[ebp]
  001b8	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507699[ebp]
  001bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c0	e8 00 00 00 00	 call	 ?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z ; ioComplexStringPrinter::PrintFullText

; 188  : 				kPrinter.ClearList();

  001c5	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507699[ebp]
  001c8	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList
  001cd	8b 7d f0	 mov	 edi, DWORD PTR _this$[ebp]
$LN10@PrintText:

; 200  : 			}
; 201  : 		}
; 202  : 
; 203  : 		UpdateWndSize( WINDOW_WIDTH, WINDOW_HEIGHT - 20 );

  001d0	68 02 01 00 00	 push	 258			; 00000102H
  001d5	8b cf		 mov	 ecx, edi
$LN28@PrintText:
  001d7	68 2e 01 00 00	 push	 302			; 0000012eH
  001dc	e8 00 00 00 00	 call	 ?UpdateWndSize@BingoMsgBox@@IAEXHH@Z ; BingoMsgBox::UpdateWndSize

; 204  : 	}

  001e1	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507699[ebp]

; 205  : 	else

  001e4	e9 10 03 00 00	 jmp	 $LN26@PrintText
$LN12@PrintText:

; 206  : 	{
; 207  : 		if( m_iItemCount > 0 )

  001e9	33 db		 xor	 ebx, ebx
  001eb	39 9f b8 01 00
	00		 cmp	 DWORD PTR [edi+440], ebx
  001f1	0f 8e 9e 01 00
	00		 jle	 $LN6@PrintText

; 208  : 		{
; 209  : 			ioComplexStringPrinter kPrinter;

  001f7	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507710[ebp]
  001fa	e8 00 00 00 00	 call	 ??0ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::ioComplexStringPrinter

; 210  : 			kPrinter.SetTextStyle( TS_NORMAL );

  001ff	53		 push	 ebx
  00200	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507710[ebp]
  00203	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0020a	e8 00 00 00 00	 call	 ?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z ; ioComplexStringPrinter::SetTextStyle

; 211  : 			kPrinter.SetBkColor( 0, 0, 0 );

  0020f	53		 push	 ebx
  00210	53		 push	 ebx
  00211	53		 push	 ebx
  00212	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507710[ebp]
  00215	e8 00 00 00 00	 call	 ?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z ; ioComplexStringPrinter::SetBkColor

; 212  : 
; 213  : 			kPrinter.SetTextColor( TCT_DEFAULT_DARKGRAY );

  0021a	68 3a 3a 3a ff	 push	 -12961222		; ff3a3a3aH
  0021f	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507710[ebp]
  00222	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 214  : 			kPrinter.AddTextPiece( FONT_SIZE_13, STR(3), m_szItemName.c_str() );

  00227	8d 8f a8 01 00
	00		 lea	 ecx, DWORD PTR [edi+424]
  0022d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  00233	50		 push	 eax
  00234	53		 push	 ebx
  00235	6a 03		 push	 3
  00237	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0023c	53		 push	 ebx
  0023d	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BH@DKKBFFCO@BingoMsgBox?3?3PrintText?$AA@
  00242	57		 push	 edi
  00243	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00249	8b c8		 mov	 ecx, eax
  0024b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00251	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00259	50		 push	 eax
  0025a	51		 push	 ecx
  0025b	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507710[ebp]
  0025e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00263	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAEXMPBD0@Z ; ioComplexStringPrinter::AddTextPiece

; 215  : 			kPrinter.PrintFullText( iXPos + 151, iYPos + 144, TAT_CENTER );

  00268	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  0026b	05 97 00 00 00	 add	 eax, 151		; 00000097H
  00270	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  00275	56		 push	 esi
  00276	0f 57 c0	 xorps	 xmm0, xmm0
  00279	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0027d	8b 45 0c	 mov	 eax, DWORD PTR _iYPos$[ebp]
  00280	6a 01		 push	 1
  00282	51		 push	 ecx
  00283	51		 push	 ecx
  00284	05 90 00 00 00	 add	 eax, 144		; 00000090H
  00289	0f 57 c9	 xorps	 xmm1, xmm1
  0028c	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00290	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  00296	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507710[ebp]
  00299	f3 0f 11 45 08	 movss	 DWORD PTR tv394[ebp], xmm0
  0029e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a3	e8 00 00 00 00	 call	 ?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z ; ioComplexStringPrinter::PrintFullText

; 216  : 			kPrinter.ClearList();

  002a8	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507710[ebp]
  002ab	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList

; 217  : 
; 218  : 			kPrinter.AddTextPiece( FONT_SIZE_13, STR(4) );

  002b0	6a 00		 push	 0
  002b2	6a 04		 push	 4
  002b4	53		 push	 ebx
  002b5	57		 push	 edi
  002b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  002bc	8b c8		 mov	 ecx, eax
  002be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  002c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  002cc	50		 push	 eax
  002cd	51		 push	 ecx
  002ce	8d 45 cc	 lea	 eax, DWORD PTR _kPrinter$507710[ebp]
  002d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d6	50		 push	 eax
  002d7	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAAXMPBDZZ ; ioComplexStringPrinter::AddTextPiece

; 219  : 			kPrinter.PrintFullText( iXPos + 151, iYPos + 164, TAT_CENTER );

  002dc	8b 45 0c	 mov	 eax, DWORD PTR _iYPos$[ebp]
  002df	83 c4 0c	 add	 esp, 12			; 0000000cH
  002e2	56		 push	 esi
  002e3	6a 01		 push	 1
  002e5	51		 push	 ecx
  002e6	51		 push	 ecx
  002e7	05 a4 00 00 00	 add	 eax, 164		; 000000a4H
  002ec	0f 57 c0	 xorps	 xmm0, xmm0
  002ef	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  002f3	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  002f9	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv394[ebp]
  002fe	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507710[ebp]
  00301	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00306	e8 00 00 00 00	 call	 ?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z ; ioComplexStringPrinter::PrintFullText

; 220  : 			kPrinter.ClearList();

  0030b	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507710[ebp]
  0030e	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList

; 221  : 
; 222  : 			kPrinter.SetTextColor( TCT_DEFAULT_GREEN );

  00313	68 22 72 11 ff	 push	 -15633886		; ff117222H
  00318	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507710[ebp]
  0031b	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 223  : 			kPrinter.AddTextPiece( FONT_SIZE_13, STR(5), m_iItemCount );

  00320	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00323	ff b0 b8 01 00
	00		 push	 DWORD PTR [eax+440]
  00329	6a 00		 push	 0
  0032b	6a 05		 push	 5
  0032d	53		 push	 ebx
  0032e	57		 push	 edi
  0032f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00335	8b c8		 mov	 ecx, eax
  00337	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  0033d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00345	50		 push	 eax
  00346	51		 push	 ecx
  00347	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507710[ebp]
  0034a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034f	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAEXMPBDH@Z ; ioComplexStringPrinter::AddTextPiece

; 224  : 			kPrinter.PrintFullText( iXPos + 151, iYPos + 184, TAT_CENTER );

  00354	8b 45 0c	 mov	 eax, DWORD PTR _iYPos$[ebp]
  00357	56		 push	 esi
  00358	6a 01		 push	 1
  0035a	51		 push	 ecx
  0035b	51		 push	 ecx
  0035c	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  00361	0f 57 c0	 xorps	 xmm0, xmm0
  00364	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00368	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0036e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv394[ebp]
  00373	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507710[ebp]
  00376	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037b	e8 00 00 00 00	 call	 ?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z ; ioComplexStringPrinter::PrintFullText

; 225  : 			kPrinter.ClearList();

  00380	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507710[ebp]
  00383	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList

; 226  : 
; 227  : 			UpdateWndSize( WINDOW_WIDTH, WINDOW_HEIGHT );

  00388	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0038b	68 16 01 00 00	 push	 278			; 00000116H

; 228  : 		}
; 229  : 		else

  00390	e9 42 fe ff ff	 jmp	 $LN28@PrintText
$LN6@PrintText:

; 230  : 		{
; 231  : 			ioComplexStringPrinter kPrinter;

  00395	8d 4d ac	 lea	 ecx, DWORD PTR _kPrinter$507714[ebp]
  00398	e8 00 00 00 00	 call	 ??0ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::ioComplexStringPrinter

; 232  : 			kPrinter.SetTextStyle( TS_NORMAL );

  0039d	53		 push	 ebx
  0039e	8d 4d ac	 lea	 ecx, DWORD PTR _kPrinter$507714[ebp]
  003a1	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  003a8	e8 00 00 00 00	 call	 ?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z ; ioComplexStringPrinter::SetTextStyle

; 233  : 			kPrinter.SetBkColor( 0, 0, 0 );

  003ad	53		 push	 ebx
  003ae	53		 push	 ebx
  003af	53		 push	 ebx
  003b0	8d 4d ac	 lea	 ecx, DWORD PTR _kPrinter$507714[ebp]
  003b3	e8 00 00 00 00	 call	 ?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z ; ioComplexStringPrinter::SetBkColor

; 234  : 
; 235  : 			kPrinter.SetTextColor( TCT_DEFAULT_DARKGRAY );

  003b8	68 3a 3a 3a ff	 push	 -12961222		; ff3a3a3aH
  003bd	8d 4d ac	 lea	 ecx, DWORD PTR _kPrinter$507714[ebp]
  003c0	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 236  : 			kPrinter.AddTextPiece( FONT_SIZE_13, STR(6), m_szItemName.c_str() );

  003c5	8d 8f a8 01 00
	00		 lea	 ecx, DWORD PTR [edi+424]
  003cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  003d1	50		 push	 eax
  003d2	53		 push	 ebx
  003d3	6a 06		 push	 6
  003d5	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  003da	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@DKKBFFCO@BingoMsgBox?3?3PrintText?$AA@
  003df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  003e5	8b c8		 mov	 ecx, eax
  003e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  003ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  003f5	50		 push	 eax
  003f6	51		 push	 ecx
  003f7	8d 4d ac	 lea	 ecx, DWORD PTR _kPrinter$507714[ebp]
  003fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ff	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAEXMPBD0@Z ; ioComplexStringPrinter::AddTextPiece

; 237  : 			kPrinter.PrintFullText( iXPos + 151, iYPos + 144, TAT_CENTER );

  00404	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  00407	05 97 00 00 00	 add	 eax, 151		; 00000097H
  0040c	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  00411	56		 push	 esi
  00412	0f 57 c0	 xorps	 xmm0, xmm0
  00415	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00419	8b 45 0c	 mov	 eax, DWORD PTR _iYPos$[ebp]
  0041c	6a 01		 push	 1
  0041e	51		 push	 ecx
  0041f	51		 push	 ecx
  00420	05 90 00 00 00	 add	 eax, 144		; 00000090H
  00425	0f 57 c9	 xorps	 xmm1, xmm1
  00428	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  0042c	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  00432	8d 4d ac	 lea	 ecx, DWORD PTR _kPrinter$507714[ebp]
  00435	f3 0f 11 45 08	 movss	 DWORD PTR tv394[ebp], xmm0
  0043a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0043f	e8 00 00 00 00	 call	 ?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z ; ioComplexStringPrinter::PrintFullText

; 238  : 			kPrinter.ClearList();

  00444	8d 4d ac	 lea	 ecx, DWORD PTR _kPrinter$507714[ebp]
  00447	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList

; 239  : 
; 240  : 			int iYGap = 164;
; 241  : 			ioBingo *pBingo = g_MyInfo.GetBingo();

  0044c	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00451	8b 80 94 0b 00
	00		 mov	 eax, DWORD PTR [eax+2964]
  00457	89 45 ec	 mov	 DWORD PTR _pBingo$507717[ebp], eax

; 242  : 			if( pBingo )

  0045a	3b c3		 cmp	 eax, ebx
  0045c	0f 84 83 00 00
	00		 je	 $LN4@PrintText

; 243  : 			{
; 244  : 				ioComplexStringPrinter kPrinterManual;

  00462	8d 4d 8c	 lea	 ecx, DWORD PTR _kPrinterManual$507719[ebp]
  00465	e8 00 00 00 00	 call	 ??0ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::ioComplexStringPrinter

; 245  : 				for( int iLine=0; iLine<2; ++iLine )

  0046a	89 5d f0	 mov	 DWORD PTR _iLine$507720[ebp], ebx
  0046d	8b 5d 0c	 mov	 ebx, DWORD PTR _iYPos$[ebp]
  00470	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00474	81 c3 a4 00 00
	00		 add	 ebx, 164		; 000000a4H
$LN3@PrintText:

; 246  : 				{
; 247  : 					pBingo->SetUIPrinter( m_UseType + 2, iLine, FONT_SIZE_13, kPrinterManual );

  0047a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00482	8d 45 8c	 lea	 eax, DWORD PTR _kPrinterManual$507719[ebp]
  00485	50		 push	 eax
  00486	8b 87 80 01 00
	00		 mov	 eax, DWORD PTR [edi+384]
  0048c	51		 push	 ecx
  0048d	8b 4d ec	 mov	 ecx, DWORD PTR _pBingo$507717[ebp]
  00490	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00495	ff 75 f0	 push	 DWORD PTR _iLine$507720[ebp]
  00498	83 c0 02	 add	 eax, 2
  0049b	50		 push	 eax
  0049c	e8 00 00 00 00	 call	 ?SetUIPrinter@ioBingo@@QAEXHHMAAVioComplexStringPrinter@@@Z ; ioBingo::SetUIPrinter

; 248  : 					kPrinterManual.PrintFullText( iXPos + 151, iYPos + iYGap, TAT_CENTER );

  004a1	56		 push	 esi
  004a2	6a 01		 push	 1
  004a4	51		 push	 ecx
  004a5	51		 push	 ecx
  004a6	0f 57 c0	 xorps	 xmm0, xmm0
  004a9	f3 0f 2a c3	 cvtsi2ss xmm0, ebx
  004ad	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  004b3	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv394[ebp]
  004b8	8d 4d 8c	 lea	 ecx, DWORD PTR _kPrinterManual$507719[ebp]
  004bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c0	e8 00 00 00 00	 call	 ?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z ; ioComplexStringPrinter::PrintFullText

; 249  : 					kPrinterManual.ClearList();

  004c5	8d 4d 8c	 lea	 ecx, DWORD PTR _kPrinterManual$507719[ebp]
  004c8	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList

; 250  : 					iYGap += 20;

  004cd	83 c3 14	 add	 ebx, 20			; 00000014H
  004d0	ff 45 f0	 inc	 DWORD PTR _iLine$507720[ebp]
  004d3	83 7d f0 02	 cmp	 DWORD PTR _iLine$507720[ebp], 2
  004d7	7c a1		 jl	 SHORT $LN3@PrintText

; 251  : 				}
; 252  : 			}

  004d9	8d 4d 8c	 lea	 ecx, DWORD PTR _kPrinterManual$507719[ebp]
  004dc	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  004e0	e8 00 00 00 00	 call	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
$LN4@PrintText:

; 253  : 
; 254  : 			UpdateWndSize( WINDOW_WIDTH, WINDOW_HEIGHT );

  004e5	68 16 01 00 00	 push	 278			; 00000116H
  004ea	68 2e 01 00 00	 push	 302			; 0000012eH
  004ef	8b cf		 mov	 ecx, edi
  004f1	e8 00 00 00 00	 call	 ?UpdateWndSize@BingoMsgBox@@IAEXHH@Z ; BingoMsgBox::UpdateWndSize

; 255  : 		}

  004f6	8d 4d ac	 lea	 ecx, DWORD PTR _kPrinter$507714[ebp]
$LN26@PrintText:
  004f9	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  004fd	e8 00 00 00 00	 call	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter

; 256  : 	}
; 257  : }

  00502	e8 00 00 00 00	 call	 __EH_epilog3
  00507	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PrintText@BingoMsgBox@@IAEXHH@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507699[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
__unwindfunclet$?PrintText@BingoMsgBox@@IAEXHH@Z$1:
  00008	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$507710[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
__unwindfunclet$?PrintText@BingoMsgBox@@IAEXHH@Z$2:
  00010	8d 4d ac	 lea	 ecx, DWORD PTR _kPrinter$507714[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
__unwindfunclet$?PrintText@BingoMsgBox@@IAEXHH@Z$3:
  00018	8d 4d 8c	 lea	 ecx, DWORD PTR _kPrinterManual$507719[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
__ehhandler$?PrintText@BingoMsgBox@@IAEXHH@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PrintText@BingoMsgBox@@IAEXHH@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PrintText@BingoMsgBox@@IAEXHH@Z ENDP			; BingoMsgBox::PrintText
PUBLIC	??_C@_0BF@FJJJPOBL@BingoMsgBox?3?3SetInfo?$AA@	; `string'
PUBLIC	?SetInfo@BingoMsgBox@@QAEXW4UseType@1@H@Z	; BingoMsgBox::SetInfo
EXTRN	__imp_?SetTitleText@ioWnd@@QAEXPBD0H@Z:PROC
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
EXTRN	?FindEtcItem@ioEtcItemManager@@QAEPAVioEtcItem@@K@Z:PROC ; ioEtcItemManager::FindEtcItem
EXTRN	?GetEtcCoinMoney@ioMyInfo@@QAEHK@Z:PROC		; ioMyInfo::GetEtcCoinMoney
EXTRN	__imp_?Clear@ioHashString@@QAEXXZ:PROC
EXTRN	__imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z:PROC
EXTRN	__imp_?ShowWnd@ioWnd@@QAEXXZ:PROC
;	COMDAT ??_C@_0BF@FJJJPOBL@BingoMsgBox?3?3SetInfo?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioetcitem.h
CONST	SEGMENT
??_C@_0BF@FJJJPOBL@BingoMsgBox?3?3SetInfo?$AA@ DB 'BingoMsgBox::SetInfo', 00H ; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingomsgbox.cpp
CONST	ENDS
;	COMDAT ?SetInfo@BingoMsgBox@@QAEXW4UseType@1@H@Z
_TEXT	SEGMENT
_eType$ = 8						; size = 4
_iBingoType$ = 12					; size = 4
?SetInfo@BingoMsgBox@@QAEXW4UseType@1@H@Z PROC		; BingoMsgBox::SetInfo, COMDAT
; _this$ = ecx

; 294  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx

; 295  : 	if( !IsShow() )

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  0000e	84 c0		 test	 al, al
  00010	75 08		 jne	 SHORT $LN20@SetInfo

; 296  : 		ShowWnd();

  00012	8b ce		 mov	 ecx, esi
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowWnd@ioWnd@@QAEXXZ
$LN20@SetInfo:

; 297  : 
; 298  : 	m_iBingoType = iBingoType;

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _iBingoType$[ebp]
  0001d	89 86 84 01 00
	00		 mov	 DWORD PTR [esi+388], eax

; 299  : 	m_UseType = eType;

  00023	8b 45 08	 mov	 eax, DWORD PTR _eType$[ebp]
  00026	89 86 80 01 00
	00		 mov	 DWORD PTR [esi+384], eax

; 300  : 	switch( m_UseType )

  0002c	48		 dec	 eax
  0002d	0f 84 9a 01 00
	00		 je	 $LN17@SetInfo
  00033	48		 dec	 eax
  00034	0f 84 36 01 00
	00		 je	 $LN13@SetInfo
  0003a	48		 dec	 eax
  0003b	0f 84 cf 00 00
	00		 je	 $LN9@SetInfo
  00041	48		 dec	 eax
  00042	74 6c		 je	 SHORT $LN5@SetInfo
  00044	48		 dec	 eax
  00045	0f 85 1e 02 00
	00		 jne	 $LN14@SetInfo

; 394  : 	case UT_INIT:
; 395  : 		{
; 396  : 			HideChildWnd( ID_OK );

  0004b	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z
  00051	33 ff		 xor	 edi, edi
  00053	57		 push	 edi
  00054	6a 02		 push	 2
  00056	8b ce		 mov	 ecx, esi
  00058	ff d3		 call	 ebx

; 397  : 			HideChildWnd( ID_CLOSE );

  0005a	57		 push	 edi
  0005b	6a 05		 push	 5
  0005d	8b ce		 mov	 ecx, esi
  0005f	ff d3		 call	 ebx

; 398  : 			ShowChildWnd( ID_CANCEL );

  00061	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z
  00067	57		 push	 edi
  00068	6a 03		 push	 3
  0006a	8b ce		 mov	 ecx, esi
  0006c	ff d3		 call	 ebx

; 399  : 			ShowChildWnd( ID_INIT );

  0006e	57		 push	 edi
  0006f	6a 04		 push	 4
  00071	8b ce		 mov	 ecx, esi
  00073	ff d3		 call	 ebx

; 400  : 
; 401  : 			m_szItemName.Clear();

  00075	8d 8e a8 01 00
	00		 lea	 ecx, DWORD PTR [esi+424]
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Clear@ioHashString@@QAEXXZ

; 402  : 			m_pIcon = m_pInit;

  00081	8b 86 70 01 00
	00		 mov	 eax, DWORD PTR [esi+368]

; 403  : 
; 404  : 			SetTitleText( STR(1) );

  00087	57		 push	 edi
  00088	89 86 74 01 00
	00		 mov	 DWORD PTR [esi+372], eax
  0008e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00093	50		 push	 eax
  00094	57		 push	 edi
  00095	6a 01		 push	 1
  00097	50		 push	 eax
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FJJJPOBL@BingoMsgBox?3?3SetInfo?$AA@
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  000a3	8b c8		 mov	 ecx, eax
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z

; 405  : 		}
; 406  : 		break;

  000ab	e9 b0 01 00 00	 jmp	 $LN39@SetInfo
$LN5@SetInfo:

; 371  : 	case UT_SPECIAL_NUMBER:
; 372  : 		{
; 373  : 			m_iItemCount = g_MyInfo.GetEtcCoinMoney( ioEtcItem::EIT_ETC_BINGO_RANDOM_NUMBER_CLEAR );

  000b0	bb 9b 4a 0f 00	 mov	 ebx, 1002139		; 000f4a9bH
  000b5	53		 push	 ebx
  000b6	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  000bb	8b c8		 mov	 ecx, eax
  000bd	e8 00 00 00 00	 call	 ?GetEtcCoinMoney@ioMyInfo@@QAEHK@Z ; ioMyInfo::GetEtcCoinMoney

; 374  : 			if( m_iItemCount <= 0 )

  000c2	33 ff		 xor	 edi, edi
  000c4	89 86 b8 01 00
	00		 mov	 DWORD PTR [esi+440], eax

; 375  : 				ShowChildWnd( ID_CLOSE );

  000ca	57		 push	 edi
  000cb	8b ce		 mov	 ecx, esi
  000cd	3b c7		 cmp	 eax, edi
  000cf	7f 0a		 jg	 SHORT $LN4@SetInfo
  000d1	6a 05		 push	 5
  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z

; 376  : 			else

  000d9	eb 1e		 jmp	 SHORT $LN3@SetInfo
$LN4@SetInfo:

; 377  : 			{
; 378  : 				ShowChildWnd( ID_OK );

  000db	6a 02		 push	 2
  000dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z

; 379  : 				ShowChildWnd( ID_CANCEL );

  000e3	57		 push	 edi
  000e4	6a 03		 push	 3
  000e6	8b ce		 mov	 ecx, esi
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z

; 380  : 				HideChildWnd( ID_INIT );

  000ee	57		 push	 edi
  000ef	6a 04		 push	 4
  000f1	8b ce		 mov	 ecx, esi
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z
$LN3@SetInfo:

; 381  : 			}
; 382  : 
; 383  : 			m_szItemName.Clear();

  000f9	8d 8e a8 01 00
	00		 lea	 ecx, DWORD PTR [esi+424]
  000ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Clear@ioHashString@@QAEXXZ

; 384  : 			m_pIcon = m_pSpecialNumber;

  00105	8b 86 6c 01 00
	00		 mov	 eax, DWORD PTR [esi+364]

; 385  : 
; 386  : 			ioEtcItem *pItem = g_EtcItemMgr.FindEtcItem( ioEtcItem::EIT_ETC_BINGO_RANDOM_NUMBER_CLEAR );
; 387  : 			if( pItem )
; 388  : 			{
; 389  : 				m_szItemName = pItem->GetName();
; 390  : 				SetTitleText( m_szItemName.c_str() );
; 391  : 			}
; 392  : 		}
; 393  : 		break;

  0010b	e9 18 01 00 00	 jmp	 $LN40@SetInfo
$LN9@SetInfo:

; 348  : 	case UT_SHUFFLE_REWARD:
; 349  : 		{
; 350  : 			m_iItemCount = g_MyInfo.GetEtcCoinMoney( ioEtcItem::EIT_ETC_BINGO_SHUFFLE_REWARD_ITEM );

  00110	bb 9a 4a 0f 00	 mov	 ebx, 1002138		; 000f4a9aH
  00115	53		 push	 ebx
  00116	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  0011b	8b c8		 mov	 ecx, eax
  0011d	e8 00 00 00 00	 call	 ?GetEtcCoinMoney@ioMyInfo@@QAEHK@Z ; ioMyInfo::GetEtcCoinMoney

; 351  : 			if( m_iItemCount <= 0 )

  00122	33 ff		 xor	 edi, edi
  00124	89 86 b8 01 00
	00		 mov	 DWORD PTR [esi+440], eax

; 352  : 				ShowChildWnd( ID_CLOSE );

  0012a	57		 push	 edi
  0012b	8b ce		 mov	 ecx, esi
  0012d	3b c7		 cmp	 eax, edi
  0012f	7f 0a		 jg	 SHORT $LN8@SetInfo
  00131	6a 05		 push	 5
  00133	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z

; 353  : 			else

  00139	eb 1e		 jmp	 SHORT $LN7@SetInfo
$LN8@SetInfo:

; 354  : 			{
; 355  : 				ShowChildWnd( ID_OK );

  0013b	6a 02		 push	 2
  0013d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z

; 356  : 				ShowChildWnd( ID_CANCEL );

  00143	57		 push	 edi
  00144	6a 03		 push	 3
  00146	8b ce		 mov	 ecx, esi
  00148	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z

; 357  : 				HideChildWnd( ID_INIT );

  0014e	57		 push	 edi
  0014f	6a 04		 push	 4
  00151	8b ce		 mov	 ecx, esi
  00153	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z
$LN7@SetInfo:

; 358  : 			}
; 359  : 
; 360  : 			m_szItemName.Clear();

  00159	8d 8e a8 01 00
	00		 lea	 ecx, DWORD PTR [esi+424]
  0015f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Clear@ioHashString@@QAEXXZ

; 361  : 			m_pIcon = m_pShuffleItem;

  00165	8b 86 68 01 00
	00		 mov	 eax, DWORD PTR [esi+360]

; 362  : 
; 363  : 			ioEtcItem *pItem = g_EtcItemMgr.FindEtcItem( ioEtcItem::EIT_ETC_BINGO_SHUFFLE_REWARD_ITEM );
; 364  : 			if( pItem )
; 365  : 			{
; 366  : 				m_szItemName = pItem->GetName();
; 367  : 				SetTitleText( m_szItemName.c_str() );
; 368  : 			}
; 369  : 		}
; 370  : 		break;

  0016b	e9 b8 00 00 00	 jmp	 $LN40@SetInfo
$LN13@SetInfo:

; 322  : 			}
; 323  : 		}
; 324  : 		break;
; 325  : 	case UT_SHUFFLE_NUMBER:
; 326  : 		{
; 327  : 			m_iItemCount = g_MyInfo.GetEtcCoinMoney( ioEtcItem::EIT_ETC_BINGO_SHUFFLE_NUMBER );

  00170	bb 99 4a 0f 00	 mov	 ebx, 1002137		; 000f4a99H
  00175	53		 push	 ebx
  00176	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  0017b	8b c8		 mov	 ecx, eax
  0017d	e8 00 00 00 00	 call	 ?GetEtcCoinMoney@ioMyInfo@@QAEHK@Z ; ioMyInfo::GetEtcCoinMoney

; 328  : 			if( m_iItemCount <= 0 )

  00182	33 ff		 xor	 edi, edi
  00184	89 86 b8 01 00
	00		 mov	 DWORD PTR [esi+440], eax

; 329  : 				ShowChildWnd( ID_CLOSE );

  0018a	57		 push	 edi
  0018b	8b ce		 mov	 ecx, esi
  0018d	3b c7		 cmp	 eax, edi
  0018f	7f 0a		 jg	 SHORT $LN12@SetInfo
  00191	6a 05		 push	 5
  00193	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z

; 330  : 			else

  00199	eb 1e		 jmp	 SHORT $LN11@SetInfo
$LN12@SetInfo:

; 331  : 			{
; 332  : 				ShowChildWnd( ID_OK );

  0019b	6a 02		 push	 2
  0019d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z

; 333  : 				ShowChildWnd( ID_CANCEL );

  001a3	57		 push	 edi
  001a4	6a 03		 push	 3
  001a6	8b ce		 mov	 ecx, esi
  001a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z

; 334  : 				HideChildWnd( ID_INIT );

  001ae	57		 push	 edi
  001af	6a 04		 push	 4
  001b1	8b ce		 mov	 ecx, esi
  001b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z
$LN11@SetInfo:

; 335  : 			}
; 336  : 
; 337  : 			m_szItemName.Clear();

  001b9	8d 8e a8 01 00
	00		 lea	 ecx, DWORD PTR [esi+424]
  001bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Clear@ioHashString@@QAEXXZ

; 338  : 			m_pIcon = m_pShuffleNumber;

  001c5	8b 86 64 01 00
	00		 mov	 eax, DWORD PTR [esi+356]

; 339  : 
; 340  : 			ioEtcItem *pItem = g_EtcItemMgr.FindEtcItem( ioEtcItem::EIT_ETC_BINGO_SHUFFLE_NUMBER );
; 341  : 			if( pItem )
; 342  : 			{
; 343  : 				m_szItemName = pItem->GetName();
; 344  : 				SetTitleText( m_szItemName.c_str() );
; 345  : 			}
; 346  : 		}
; 347  : 		break;

  001cb	eb 5b		 jmp	 SHORT $LN40@SetInfo
$LN17@SetInfo:

; 301  : 	{
; 302  : 	case UT_GET_NUMBER:
; 303  : 		{
; 304  : 			m_iItemCount = g_MyInfo.GetEtcCoinMoney( ioEtcItem::EIT_ETC_BINGO_NUMBER_GASHAPON );

  001cd	bb 98 4a 0f 00	 mov	 ebx, 1002136		; 000f4a98H
  001d2	53		 push	 ebx
  001d3	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  001d8	8b c8		 mov	 ecx, eax
  001da	e8 00 00 00 00	 call	 ?GetEtcCoinMoney@ioMyInfo@@QAEHK@Z ; ioMyInfo::GetEtcCoinMoney

; 305  : 			if( m_iItemCount <= 0 )

  001df	33 ff		 xor	 edi, edi
  001e1	89 86 b8 01 00
	00		 mov	 DWORD PTR [esi+440], eax

; 306  : 				ShowChildWnd( ID_CLOSE );

  001e7	57		 push	 edi
  001e8	8b ce		 mov	 ecx, esi
  001ea	3b c7		 cmp	 eax, edi
  001ec	7f 0a		 jg	 SHORT $LN16@SetInfo
  001ee	6a 05		 push	 5
  001f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z

; 307  : 			else

  001f6	eb 1e		 jmp	 SHORT $LN15@SetInfo
$LN16@SetInfo:

; 308  : 			{
; 309  : 				ShowChildWnd( ID_OK );

  001f8	6a 02		 push	 2
  001fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z

; 310  : 				ShowChildWnd( ID_CANCEL );

  00200	57		 push	 edi
  00201	6a 03		 push	 3
  00203	8b ce		 mov	 ecx, esi
  00205	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z

; 311  : 				HideChildWnd( ID_INIT );

  0020b	57		 push	 edi
  0020c	6a 04		 push	 4
  0020e	8b ce		 mov	 ecx, esi
  00210	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z
$LN15@SetInfo:

; 312  : 			}
; 313  : 
; 314  : 			m_szItemName.Clear();

  00216	8d 8e a8 01 00
	00		 lea	 ecx, DWORD PTR [esi+424]
  0021c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Clear@ioHashString@@QAEXXZ

; 315  : 			m_pIcon = m_pGetNumber;

  00222	8b 86 60 01 00
	00		 mov	 eax, DWORD PTR [esi+352]
$LN40@SetInfo:
  00228	89 86 74 01 00
	00		 mov	 DWORD PTR [esi+372], eax

; 316  : 
; 317  : 			ioEtcItem *pItem = g_EtcItemMgr.FindEtcItem( ioEtcItem::EIT_ETC_BINGO_NUMBER_GASHAPON );

  0022e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_Singleton@?$Singleton@VioEtcItemManager@@@@1PAVioEtcItemManager@@A ; Singleton<ioEtcItemManager>::ms_Singleton
  00234	53		 push	 ebx
  00235	e8 00 00 00 00	 call	 ?FindEtcItem@ioEtcItemManager@@QAEPAVioEtcItem@@K@Z ; ioEtcItemManager::FindEtcItem

; 318  : 			if( pItem )

  0023a	3b c7		 cmp	 eax, edi
  0023c	74 2b		 je	 SHORT $LN14@SetInfo

; 319  : 			{
; 320  : 				m_szItemName = pItem->GetName();

  0023e	83 c0 04	 add	 eax, 4
  00241	50		 push	 eax
  00242	8d 8e a8 01 00
	00		 lea	 ecx, DWORD PTR [esi+424]
  00248	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 321  : 				SetTitleText( m_szItemName.c_str() );

  0024e	57		 push	 edi
  0024f	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00254	8d 8e a8 01 00
	00		 lea	 ecx, DWORD PTR [esi+424]
  0025a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LN39@SetInfo:
  00260	50		 push	 eax
  00261	8b ce		 mov	 ecx, esi
  00263	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitleText@ioWnd@@QAEXPBD0H@Z
$LN14@SetInfo:

; 407  : 	}
; 408  : 
; 409  : 	SetScreenWndPos( (Setting::Width() - GetWidth() ) / 2, ( (Setting::Height() - GetHeight() ) / 2 ) - 20 );

  00269	8b ce		 mov	 ecx, esi
  0026b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioWnd@@QBEHXZ
  00271	8b f8		 mov	 edi, eax
  00273	e8 00 00 00 00	 call	 ?Height@Setting@@SAHXZ	; Setting::Height
  00278	2b c7		 sub	 eax, edi
  0027a	99		 cdq
  0027b	2b c2		 sub	 eax, edx
  0027d	d1 f8		 sar	 eax, 1
  0027f	83 e8 14	 sub	 eax, 20			; 00000014H
  00282	50		 push	 eax
  00283	8b ce		 mov	 ecx, esi
  00285	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioWnd@@QBEHXZ
  0028b	8b f8		 mov	 edi, eax
  0028d	e8 00 00 00 00	 call	 ?Width@Setting@@SAHXZ	; Setting::Width
  00292	2b c7		 sub	 eax, edi
  00294	99		 cdq
  00295	2b c2		 sub	 eax, edx
  00297	d1 f8		 sar	 eax, 1
  00299	50		 push	 eax
  0029a	8b ce		 mov	 ecx, esi
  0029c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetScreenWndPos@ioWnd@@QAEXHH@Z
  002a2	5f		 pop	 edi
  002a3	5e		 pop	 esi
  002a4	5b		 pop	 ebx

; 410  : }

  002a5	5d		 pop	 ebp
  002a6	c2 08 00	 ret	 8
?SetInfo@BingoMsgBox@@QAEXW4UseType@1@H@Z ENDP		; BingoMsgBox::SetInfo
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z	; operator==<10>
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iohashstring.h
;	COMDAT ??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z PROC	; operator==<10>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _lhs$[ebp]
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 0d 01 00
	00		 je	 $LN96@operator
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 f6 00 00
	00		 je	 $LN95@operator
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 df 00 00
	00		 je	 $LN94@operator
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 c8 00 00
	00		 je	 $LN93@operator
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 b1 00 00
	00		 je	 $LN92@operator
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	0f 84 9a 00 00
	00		 je	 $LN91@operator
  00075	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00078	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 83 00 00
	00		 je	 $LN90@operator
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	74 70		 je	 SHORT $LN89@operator
  00093	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00096	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  00099	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  0009c	84 d2		 test	 dl, dl
  0009e	74 5d		 je	 SHORT $LN88@operator
  000a0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a3	80 78 09 00	 cmp	 BYTE PTR [eax+9], 0
  000a7	88 55 f4	 mov	 BYTE PTR __t$[ebp+8], dl
  000aa	0f 84 81 00 00
	00		 je	 $LN1@operator
  000b0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000b3	84 d2		 test	 dl, dl
  000b5	74 40		 je	 SHORT $LN86@operator
  000b7	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ba	88 55 f6	 mov	 BYTE PTR __t$[ebp+10], dl
  000bd	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c0	84 d2		 test	 dl, dl
  000c2	74 2d		 je	 SHORT $LN85@operator
  000c4	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000c7	88 55 f7	 mov	 BYTE PTR __t$[ebp+11], dl
  000ca	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000cd	84 d2		 test	 dl, dl
  000cf	74 1a		 je	 SHORT $LN84@operator
  000d1	8a 40 0d	 mov	 al, BYTE PTR [eax+13]
  000d4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d7	88 55 f8	 mov	 BYTE PTR __t$[ebp+12], dl
  000da	84 c0		 test	 al, al
  000dc	74 07		 je	 SHORT $LN83@operator
  000de	34 ec		 xor	 al, -20			; ffffffecH
  000e0	88 45 f9	 mov	 BYTE PTR __t$[ebp+13], al
  000e3	eb 4c		 jmp	 SHORT $LN1@operator
$LN83@operator:
  000e5	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+13], -20 ; ffffffecH
  000e9	eb 46		 jmp	 SHORT $LN1@operator
$LN84@operator:
  000eb	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  000ef	eb 40		 jmp	 SHORT $LN1@operator
$LN85@operator:
  000f1	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  000f5	eb 3a		 jmp	 SHORT $LN1@operator
$LN86@operator:
  000f7	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000fb	eb 34		 jmp	 SHORT $LN1@operator
$LN88@operator:
  000fd	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  00101	eb 2e		 jmp	 SHORT $LN1@operator
$LN89@operator:
  00103	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  00107	eb 28		 jmp	 SHORT $LN1@operator
$LN90@operator:
  00109	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  0010d	eb 22		 jmp	 SHORT $LN1@operator
$LN91@operator:
  0010f	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  00113	eb 1c		 jmp	 SHORT $LN1@operator
$LN92@operator:
  00115	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00119	eb 16		 jmp	 SHORT $LN1@operator
$LN93@operator:
  0011b	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  0011f	eb 10		 jmp	 SHORT $LN1@operator
$LN94@operator:
  00121	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  00125	eb 0a		 jmp	 SHORT $LN1@operator
$LN95@operator:
  00127	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  0012b	eb 04		 jmp	 SHORT $LN1@operator
$LN96@operator:
  0012d	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator:
  00131	6a 02		 push	 2
  00133	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  00136	c6 45 f5 00	 mov	 BYTE PTR __t$[ebp+9], 0
  0013a	5a		 pop	 edx
$LL104@operator:
  0013b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00141	83 c0 04	 add	 eax, 4
  00144	4a		 dec	 edx
  00145	75 f4		 jne	 SHORT $LL104@operator
  00147	80 75 f4 ed	 xor	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  0014b	56		 push	 esi
  0014c	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator:
  00155	8a 08		 mov	 cl, BYTE PTR [eax]
  00157	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00159	75 1a		 jne	 SHORT $LN112@operator
  0015b	84 c9		 test	 cl, cl
  0015d	74 12		 je	 SHORT $LN113@operator
  0015f	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00162	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00165	75 0e		 jne	 SHORT $LN112@operator
  00167	83 c0 02	 add	 eax, 2
  0016a	83 c6 02	 add	 esi, 2
  0016d	84 c9		 test	 cl, cl
  0016f	75 e4		 jne	 SHORT $LL111@operator
$LN113@operator:
  00171	33 c0		 xor	 eax, eax
  00173	eb 05		 jmp	 SHORT $LN114@operator
$LN112@operator:
  00175	1b c0		 sbb	 eax, eax
  00177	83 d8 ff	 sbb	 eax, -1
$LN114@operator:
  0017a	33 c9		 xor	 ecx, ecx
  0017c	85 c0		 test	 eax, eax
  0017e	0f 94 c0	 sete	 al

; 148  : }

  00181	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00184	33 cd		 xor	 ecx, ebp
  00186	5e		 pop	 esi
  00187	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018c	c9		 leave
  0018d	c3		 ret	 0
??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z ENDP	; operator==<10>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$0O@@@YA_NABVioHashString@@AAY0O@$$CBD@Z	; operator==<14>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$0O@@@YA_NABVioHashString@@AAY0O@$$CBD@Z
_TEXT	SEGMENT
__t$ = -24						; size = 14
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$0O@@@YA_NABVioHashString@@AAY0O@$$CBD@Z PROC	; operator==<14>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 64 01 00
	00		 je	 $LN96@operator@2
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 e8	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 4d 01 00
	00		 je	 $LN95@operator@2
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 e9	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 36 01 00
	00		 je	 $LN94@operator@2
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 ea	 mov	 BYTE PTR __t$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 1e 01 00
	00		 je	 $LN93@operator@2
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 eb	 mov	 BYTE PTR __t$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 07 01 00
	00		 je	 $LN92@operator@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 ec	 mov	 BYTE PTR __t$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 f0 00 00
	00		 je	 $LN91@operator@2
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 ed	 mov	 BYTE PTR __t$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 da 00 00
	00		 je	 $LN90@operator@2
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 ee	 mov	 BYTE PTR __t$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 c4 00 00
	00		 je	 $LN89@operator@2
  00099	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009c	88 55 ef	 mov	 BYTE PTR __t$[ebp+7], dl
  0009f	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a2	84 d2		 test	 dl, dl
  000a4	0f 84 ad 00 00
	00		 je	 $LN88@operator@2
  000aa	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ad	88 55 f0	 mov	 BYTE PTR __t$[ebp+8], dl
  000b0	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b3	84 d2		 test	 dl, dl
  000b5	0f 84 96 00 00
	00		 je	 $LN87@operator@2
  000bb	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000be	88 55 f1	 mov	 BYTE PTR __t$[ebp+9], dl
  000c1	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c4	84 d2		 test	 dl, dl
  000c6	0f 84 80 00 00
	00		 je	 $LN86@operator@2
  000cc	32 d1		 xor	 dl, cl
  000ce	88 55 f2	 mov	 BYTE PTR __t$[ebp+10], dl
  000d1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d4	84 d2		 test	 dl, dl
  000d6	74 6e		 je	 SHORT $LN85@operator@2
  000d8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000db	88 55 f3	 mov	 BYTE PTR __t$[ebp+11], dl
  000de	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e1	84 d2		 test	 dl, dl
  000e3	74 5b		 je	 SHORT $LN84@operator@2
  000e5	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e8	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ec	88 55 f4	 mov	 BYTE PTR __t$[ebp+12], dl
  000ef	0f 84 95 00 00
	00		 je	 $LN1@operator@2
  000f5	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f8	84 d2		 test	 dl, dl
  000fa	74 3f		 je	 SHORT $LN82@operator@2
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f6	 mov	 BYTE PTR __t$[ebp+14], dl
  00101	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00104	84 d2		 test	 dl, dl
  00106	74 2d		 je	 SHORT $LN81@operator@2
  00108	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0010b	88 55 f7	 mov	 BYTE PTR __t$[ebp+15], dl
  0010e	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00111	84 d2		 test	 dl, dl
  00113	74 1a		 je	 SHORT $LN80@operator@2
  00115	8a 40 11	 mov	 al, BYTE PTR [eax+17]
  00118	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011b	88 55 f8	 mov	 BYTE PTR __t$[ebp+16], dl
  0011e	84 c0		 test	 al, al
  00120	74 07		 je	 SHORT $LN79@operator@2
  00122	34 ec		 xor	 al, -20			; ffffffecH
  00124	88 45 f9	 mov	 BYTE PTR __t$[ebp+17], al
  00127	eb 61		 jmp	 SHORT $LN1@operator@2
$LN79@operator@2:
  00129	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+17], -20 ; ffffffecH
  0012d	eb 5b		 jmp	 SHORT $LN1@operator@2
$LN80@operator@2:
  0012f	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+16], -19 ; ffffffedH
  00133	eb 55		 jmp	 SHORT $LN1@operator@2
$LN81@operator@2:
  00135	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+15], -22 ; ffffffeaH
  00139	eb 4f		 jmp	 SHORT $LN1@operator@2
$LN82@operator@2:
  0013b	88 4d f6	 mov	 BYTE PTR __t$[ebp+14], cl
  0013e	eb 4a		 jmp	 SHORT $LN1@operator@2
$LN84@operator@2:
  00140	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  00144	eb 44		 jmp	 SHORT $LN1@operator@2
$LN85@operator@2:
  00146	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  0014a	eb 3e		 jmp	 SHORT $LN1@operator@2
$LN86@operator@2:
  0014c	88 4d f2	 mov	 BYTE PTR __t$[ebp+10], cl
  0014f	eb 39		 jmp	 SHORT $LN1@operator@2
$LN87@operator@2:
  00151	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  00155	eb 33		 jmp	 SHORT $LN1@operator@2
$LN88@operator@2:
  00157	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  0015b	eb 2d		 jmp	 SHORT $LN1@operator@2
$LN89@operator@2:
  0015d	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  00161	eb 27		 jmp	 SHORT $LN1@operator@2
$LN90@operator@2:
  00163	88 4d ee	 mov	 BYTE PTR __t$[ebp+6], cl
  00166	eb 22		 jmp	 SHORT $LN1@operator@2
$LN91@operator@2:
  00168	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  0016c	eb 1c		 jmp	 SHORT $LN1@operator@2
$LN92@operator@2:
  0016e	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00172	eb 16		 jmp	 SHORT $LN1@operator@2
$LN93@operator@2:
  00174	c6 45 eb ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00178	eb 10		 jmp	 SHORT $LN1@operator@2
$LN94@operator@2:
  0017a	c6 45 ea eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  0017e	eb 0a		 jmp	 SHORT $LN1@operator@2
$LN95@operator@2:
  00180	c6 45 e9 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  00184	eb 04		 jmp	 SHORT $LN1@operator@2
$LN96@operator@2:
  00186	c6 45 e8 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@2:
  0018a	6a 03		 push	 3
  0018c	8d 45 e8	 lea	 eax, DWORD PTR __t$[ebp]
  0018f	c6 45 f5 00	 mov	 BYTE PTR __t$[ebp+13], 0
  00193	5a		 pop	 edx
$LL104@operator@2:
  00194	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0019a	83 c0 04	 add	 eax, 4
  0019d	4a		 dec	 edx
  0019e	75 f4		 jne	 SHORT $LL104@operator@2
  001a0	80 75 f4 ed	 xor	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  001a4	8b cf		 mov	 ecx, edi
  001a6	8d 75 e8	 lea	 esi, DWORD PTR __t$[ebp]
  001a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@2:
  001af	8a 08		 mov	 cl, BYTE PTR [eax]
  001b1	3a 0e		 cmp	 cl, BYTE PTR [esi]
  001b3	75 1a		 jne	 SHORT $LN112@operator@2
  001b5	84 c9		 test	 cl, cl
  001b7	74 12		 je	 SHORT $LN113@operator@2
  001b9	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  001bc	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  001bf	75 0e		 jne	 SHORT $LN112@operator@2
  001c1	83 c0 02	 add	 eax, 2
  001c4	83 c6 02	 add	 esi, 2
  001c7	84 c9		 test	 cl, cl
  001c9	75 e4		 jne	 SHORT $LL111@operator@2
$LN113@operator@2:
  001cb	33 c0		 xor	 eax, eax
  001cd	eb 05		 jmp	 SHORT $LN114@operator@2
$LN112@operator@2:
  001cf	1b c0		 sbb	 eax, eax
  001d1	83 d8 ff	 sbb	 eax, -1
$LN114@operator@2:
  001d4	33 c9		 xor	 ecx, ecx
  001d6	85 c0		 test	 eax, eax
  001d8	0f 94 c0	 sete	 al

; 148  : }

  001db	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001de	5f		 pop	 edi
  001df	33 cd		 xor	 ecx, ebp
  001e1	5e		 pop	 esi
  001e2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e7	c9		 leave
  001e8	c3		 ret	 0
??$?8$0O@@@YA_NABVioHashString@@AAY0O@$$CBD@Z ENDP	; operator==<14>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z	; operator==<12>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z PROC	; operator==<12>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 32 01 00
	00		 je	 $LN96@operator@3
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 1b 01 00
	00		 je	 $LN95@operator@3
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 04 01 00
	00		 je	 $LN94@operator@3
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 ec 00 00
	00		 je	 $LN93@operator@3
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 d5 00 00
	00		 je	 $LN92@operator@3
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 be 00 00
	00		 je	 $LN91@operator@3
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 a8 00 00
	00		 je	 $LN90@operator@3
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 92 00 00
	00		 je	 $LN89@operator@3
  00099	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009c	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  0009f	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a2	84 d2		 test	 dl, dl
  000a4	74 7f		 je	 SHORT $LN88@operator@3
  000a6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a9	88 55 f4	 mov	 BYTE PTR __t$[ebp+8], dl
  000ac	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000af	84 d2		 test	 dl, dl
  000b1	74 6c		 je	 SHORT $LN87@operator@3
  000b3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b6	88 55 f5	 mov	 BYTE PTR __t$[ebp+9], dl
  000b9	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000bc	84 d2		 test	 dl, dl
  000be	74 5a		 je	 SHORT $LN86@operator@3
  000c0	32 d1		 xor	 dl, cl
  000c2	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000c6	88 55 f6	 mov	 BYTE PTR __t$[ebp+10], dl
  000c9	0f 84 89 00 00
	00		 je	 $LN1@operator@3
  000cf	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d2	84 d2		 test	 dl, dl
  000d4	74 3e		 je	 SHORT $LN84@operator@3
  000d6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d9	88 55 f8	 mov	 BYTE PTR __t$[ebp+12], dl
  000dc	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000df	84 d2		 test	 dl, dl
  000e1	74 2b		 je	 SHORT $LN83@operator@3
  000e3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e6	88 55 f9	 mov	 BYTE PTR __t$[ebp+13], dl
  000e9	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000ec	84 d2		 test	 dl, dl
  000ee	74 19		 je	 SHORT $LN82@operator@3
  000f0	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000f3	32 d1		 xor	 dl, cl
  000f5	88 55 fa	 mov	 BYTE PTR __t$[ebp+14], dl
  000f8	84 c0		 test	 al, al
  000fa	74 07		 je	 SHORT $LN81@operator@3
  000fc	34 ea		 xor	 al, -22			; ffffffeaH
  000fe	88 45 fb	 mov	 BYTE PTR __t$[ebp+15], al
  00101	eb 55		 jmp	 SHORT $LN1@operator@3
$LN81@operator@3:
  00103	c6 45 fb ea	 mov	 BYTE PTR __t$[ebp+15], -22 ; ffffffeaH
  00107	eb 4f		 jmp	 SHORT $LN1@operator@3
$LN82@operator@3:
  00109	88 4d fa	 mov	 BYTE PTR __t$[ebp+14], cl
  0010c	eb 4a		 jmp	 SHORT $LN1@operator@3
$LN83@operator@3:
  0010e	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+13], -20 ; ffffffecH
  00112	eb 44		 jmp	 SHORT $LN1@operator@3
$LN84@operator@3:
  00114	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  00118	eb 3e		 jmp	 SHORT $LN1@operator@3
$LN86@operator@3:
  0011a	88 4d f6	 mov	 BYTE PTR __t$[ebp+10], cl
  0011d	eb 39		 jmp	 SHORT $LN1@operator@3
$LN87@operator@3:
  0011f	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  00123	eb 33		 jmp	 SHORT $LN1@operator@3
$LN88@operator@3:
  00125	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  00129	eb 2d		 jmp	 SHORT $LN1@operator@3
$LN89@operator@3:
  0012b	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  0012f	eb 27		 jmp	 SHORT $LN1@operator@3
$LN90@operator@3:
  00131	88 4d f2	 mov	 BYTE PTR __t$[ebp+6], cl
  00134	eb 22		 jmp	 SHORT $LN1@operator@3
$LN91@operator@3:
  00136	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  0013a	eb 1c		 jmp	 SHORT $LN1@operator@3
$LN92@operator@3:
  0013c	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00140	eb 16		 jmp	 SHORT $LN1@operator@3
$LN93@operator@3:
  00142	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00146	eb 10		 jmp	 SHORT $LN1@operator@3
$LN94@operator@3:
  00148	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  0014c	eb 0a		 jmp	 SHORT $LN1@operator@3
$LN95@operator@3:
  0014e	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  00152	eb 04		 jmp	 SHORT $LN1@operator@3
$LN96@operator@3:
  00154	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@3:
  00158	6a 02		 push	 2
  0015a	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  0015d	c6 45 f7 00	 mov	 BYTE PTR __t$[ebp+11], 0
  00161	5a		 pop	 edx
$LL104@operator@3:
  00162	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00168	83 c0 04	 add	 eax, 4
  0016b	4a		 dec	 edx
  0016c	75 f4		 jne	 SHORT $LL104@operator@3
  0016e	6a 08		 push	 8
  00170	58		 pop	 eax
$LL101@operator@3:
  00171	8b c8		 mov	 ecx, eax
  00173	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00179	79 05		 jns	 SHORT $LN115@operator@3
  0017b	49		 dec	 ecx
  0017c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0017f	41		 inc	 ecx
$LN115@operator@3:
  00180	b2 ed		 mov	 dl, -19			; ffffffedH
  00182	2a d1		 sub	 dl, cl
  00184	30 54 05 ec	 xor	 BYTE PTR __t$[ebp+eax], dl
  00188	40		 inc	 eax
  00189	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0018c	7c e3		 jl	 SHORT $LL101@operator@3
  0018e	8b cf		 mov	 ecx, edi
  00190	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  00193	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@3:
  00199	8a 08		 mov	 cl, BYTE PTR [eax]
  0019b	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0019d	75 1a		 jne	 SHORT $LN112@operator@3
  0019f	84 c9		 test	 cl, cl
  001a1	74 12		 je	 SHORT $LN113@operator@3
  001a3	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  001a6	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  001a9	75 0e		 jne	 SHORT $LN112@operator@3
  001ab	83 c0 02	 add	 eax, 2
  001ae	83 c6 02	 add	 esi, 2
  001b1	84 c9		 test	 cl, cl
  001b3	75 e4		 jne	 SHORT $LL111@operator@3
$LN113@operator@3:
  001b5	33 c0		 xor	 eax, eax
  001b7	eb 05		 jmp	 SHORT $LN114@operator@3
$LN112@operator@3:
  001b9	1b c0		 sbb	 eax, eax
  001bb	83 d8 ff	 sbb	 eax, -1
$LN114@operator@3:
  001be	33 c9		 xor	 ecx, ecx
  001c0	85 c0		 test	 eax, eax
  001c2	0f 94 c0	 sete	 al

; 148  : }

  001c5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c8	5f		 pop	 edi
  001c9	33 cd		 xor	 ecx, ebp
  001cb	5e		 pop	 esi
  001cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d1	c9		 leave
  001d2	c3		 ret	 0
??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z ENDP	; operator==<12>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$04@@YA_NABVioHashString@@AAY04$$CBD@Z	; operator==<5>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$04@@YA_NABVioHashString@@AAY04$$CBD@Z
_TEXT	SEGMENT
__t$ = -16						; size = 5
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$04@@YA_NABVioHashString@@AAY04$$CBD@Z PROC	; operator==<5>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _lhs$[ebp]
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 92 00 00
	00		 je	 $LN96@operator@4
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 f0	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	74 7f		 je	 SHORT $LN95@operator@4
  0002d	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00030	88 55 f1	 mov	 BYTE PTR __t$[ebp+1], dl
  00033	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00036	84 d2		 test	 dl, dl
  00038	74 6c		 je	 SHORT $LN94@operator@4
  0003a	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0003d	88 55 f2	 mov	 BYTE PTR __t$[ebp+2], dl
  00040	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00043	84 d2		 test	 dl, dl
  00045	74 59		 je	 SHORT $LN93@operator@4
  00047	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0004a	80 78 04 00	 cmp	 BYTE PTR [eax+4], 0
  0004e	88 55 f3	 mov	 BYTE PTR __t$[ebp+3], dl
  00051	74 63		 je	 SHORT $LN1@operator@4
  00053	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00056	84 d2		 test	 dl, dl
  00058	74 40		 je	 SHORT $LN91@operator@4
  0005a	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0005d	88 55 f5	 mov	 BYTE PTR __t$[ebp+5], dl
  00060	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00063	84 d2		 test	 dl, dl
  00065	74 2d		 je	 SHORT $LN90@operator@4
  00067	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0006a	88 55 f6	 mov	 BYTE PTR __t$[ebp+6], dl
  0006d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00070	84 d2		 test	 dl, dl
  00072	74 1a		 je	 SHORT $LN89@operator@4
  00074	8a 40 08	 mov	 al, BYTE PTR [eax+8]
  00077	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0007a	88 55 f7	 mov	 BYTE PTR __t$[ebp+7], dl
  0007d	84 c0		 test	 al, al
  0007f	74 07		 je	 SHORT $LN88@operator@4
  00081	34 ed		 xor	 al, -19			; ffffffedH
  00083	88 45 f8	 mov	 BYTE PTR __t$[ebp+8], al
  00086	eb 2e		 jmp	 SHORT $LN1@operator@4
$LN88@operator@4:
  00088	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  0008c	eb 28		 jmp	 SHORT $LN1@operator@4
$LN89@operator@4:
  0008e	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  00092	eb 22		 jmp	 SHORT $LN1@operator@4
$LN90@operator@4:
  00094	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  00098	eb 1c		 jmp	 SHORT $LN1@operator@4
$LN91@operator@4:
  0009a	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  0009e	eb 16		 jmp	 SHORT $LN1@operator@4
$LN93@operator@4:
  000a0	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  000a4	eb 10		 jmp	 SHORT $LN1@operator@4
$LN94@operator@4:
  000a6	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  000aa	eb 0a		 jmp	 SHORT $LN1@operator@4
$LN95@operator@4:
  000ac	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  000b0	eb 04		 jmp	 SHORT $LN1@operator@4
$LN96@operator@4:
  000b2	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@4:
  000b6	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __t$[ebp], -353637139 ; eaebecedH
  000bd	56		 push	 esi
  000be	c6 45 f4 00	 mov	 BYTE PTR __t$[ebp+4], 0
  000c2	8d 75 f0	 lea	 esi, DWORD PTR __t$[ebp]
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@4:
  000cb	8a 08		 mov	 cl, BYTE PTR [eax]
  000cd	3a 0e		 cmp	 cl, BYTE PTR [esi]
  000cf	75 1a		 jne	 SHORT $LN112@operator@4
  000d1	84 c9		 test	 cl, cl
  000d3	74 12		 je	 SHORT $LN113@operator@4
  000d5	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000d8	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  000db	75 0e		 jne	 SHORT $LN112@operator@4
  000dd	83 c0 02	 add	 eax, 2
  000e0	83 c6 02	 add	 esi, 2
  000e3	84 c9		 test	 cl, cl
  000e5	75 e4		 jne	 SHORT $LL111@operator@4
$LN113@operator@4:
  000e7	33 c0		 xor	 eax, eax
  000e9	eb 05		 jmp	 SHORT $LN114@operator@4
$LN112@operator@4:
  000eb	1b c0		 sbb	 eax, eax
  000ed	83 d8 ff	 sbb	 eax, -1
$LN114@operator@4:
  000f0	33 c9		 xor	 ecx, ecx
  000f2	85 c0		 test	 eax, eax
  000f4	0f 94 c0	 sete	 al

; 148  : }

  000f7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fa	33 cd		 xor	 ecx, ebp
  000fc	5e		 pop	 esi
  000fd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00102	c9		 leave
  00103	c3		 ret	 0
??$?8$04@@YA_NABVioHashString@@AAY04$$CBD@Z ENDP	; operator==<5>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$06@@YA_NABVioHashString@@AAY06$$CBD@Z	; operator==<7>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$06@@YA_NABVioHashString@@AAY06$$CBD@Z
_TEXT	SEGMENT
__t$ = -16						; size = 7
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$06@@YA_NABVioHashString@@AAY06$$CBD@Z PROC	; operator==<7>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 c0 00 00
	00		 je	 $LN96@operator@5
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 f0	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 a9 00 00
	00		 je	 $LN95@operator@5
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 f1	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 92 00 00
	00		 je	 $LN94@operator@5
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 f2	 mov	 BYTE PTR __t$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	74 7f		 je	 SHORT $LN93@operator@5
  00051	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00054	88 55 f3	 mov	 BYTE PTR __t$[ebp+3], dl
  00057	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005a	84 d2		 test	 dl, dl
  0005c	74 6c		 je	 SHORT $LN92@operator@5
  0005e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00061	88 55 f4	 mov	 BYTE PTR __t$[ebp+4], dl
  00064	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00067	84 d2		 test	 dl, dl
  00069	74 59		 je	 SHORT $LN91@operator@5
  0006b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0006e	80 78 06 00	 cmp	 BYTE PTR [eax+6], 0
  00072	88 55 f5	 mov	 BYTE PTR __t$[ebp+5], dl
  00075	74 6f		 je	 SHORT $LN1@operator@5
  00077	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0007a	84 d2		 test	 dl, dl
  0007c	74 40		 je	 SHORT $LN89@operator@5
  0007e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00081	88 55 f7	 mov	 BYTE PTR __t$[ebp+7], dl
  00084	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  00087	84 d2		 test	 dl, dl
  00089	74 2d		 je	 SHORT $LN88@operator@5
  0008b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0008e	88 55 f8	 mov	 BYTE PTR __t$[ebp+8], dl
  00091	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  00094	84 d2		 test	 dl, dl
  00096	74 1a		 je	 SHORT $LN87@operator@5
  00098	8a 40 0a	 mov	 al, BYTE PTR [eax+10]
  0009b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0009e	88 55 f9	 mov	 BYTE PTR __t$[ebp+9], dl
  000a1	84 c0		 test	 al, al
  000a3	74 07		 je	 SHORT $LN86@operator@5
  000a5	34 eb		 xor	 al, -21			; ffffffebH
  000a7	88 45 fa	 mov	 BYTE PTR __t$[ebp+10], al
  000aa	eb 3a		 jmp	 SHORT $LN1@operator@5
$LN86@operator@5:
  000ac	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000b0	eb 34		 jmp	 SHORT $LN1@operator@5
$LN87@operator@5:
  000b2	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  000b6	eb 2e		 jmp	 SHORT $LN1@operator@5
$LN88@operator@5:
  000b8	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  000bc	eb 28		 jmp	 SHORT $LN1@operator@5
$LN89@operator@5:
  000be	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  000c2	eb 22		 jmp	 SHORT $LN1@operator@5
$LN91@operator@5:
  000c4	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  000c8	eb 1c		 jmp	 SHORT $LN1@operator@5
$LN92@operator@5:
  000ca	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  000ce	eb 16		 jmp	 SHORT $LN1@operator@5
$LN93@operator@5:
  000d0	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  000d4	eb 10		 jmp	 SHORT $LN1@operator@5
$LN94@operator@5:
  000d6	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  000da	eb 0a		 jmp	 SHORT $LN1@operator@5
$LN95@operator@5:
  000dc	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  000e0	eb 04		 jmp	 SHORT $LN1@operator@5
$LN96@operator@5:
  000e2	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@5:
  000e6	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __t$[ebp], -353637139 ; eaebecedH
  000ed	6a 04		 push	 4
  000ef	c6 45 f6 00	 mov	 BYTE PTR __t$[ebp+6], 0
  000f3	58		 pop	 eax
$LL101@operator@5:
  000f4	8b c8		 mov	 ecx, eax
  000f6	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000fc	79 05		 jns	 SHORT $LN115@operator@5
  000fe	49		 dec	 ecx
  000ff	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00102	41		 inc	 ecx
$LN115@operator@5:
  00103	b2 ed		 mov	 dl, -19			; ffffffedH
  00105	2a d1		 sub	 dl, cl
  00107	30 54 05 f0	 xor	 BYTE PTR __t$[ebp+eax], dl
  0010b	40		 inc	 eax
  0010c	83 f8 06	 cmp	 eax, 6
  0010f	7c e3		 jl	 SHORT $LL101@operator@5
  00111	8b cf		 mov	 ecx, edi
  00113	8d 75 f0	 lea	 esi, DWORD PTR __t$[ebp]
  00116	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@5:
  0011c	8a 08		 mov	 cl, BYTE PTR [eax]
  0011e	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00120	75 1a		 jne	 SHORT $LN112@operator@5
  00122	84 c9		 test	 cl, cl
  00124	74 12		 je	 SHORT $LN113@operator@5
  00126	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00129	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0012c	75 0e		 jne	 SHORT $LN112@operator@5
  0012e	83 c0 02	 add	 eax, 2
  00131	83 c6 02	 add	 esi, 2
  00134	84 c9		 test	 cl, cl
  00136	75 e4		 jne	 SHORT $LL111@operator@5
$LN113@operator@5:
  00138	33 c0		 xor	 eax, eax
  0013a	eb 05		 jmp	 SHORT $LN114@operator@5
$LN112@operator@5:
  0013c	1b c0		 sbb	 eax, eax
  0013e	83 d8 ff	 sbb	 eax, -1
$LN114@operator@5:
  00141	33 c9		 xor	 ecx, ecx
  00143	85 c0		 test	 eax, eax
  00145	0f 94 c0	 sete	 al

; 148  : }

  00148	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014b	5f		 pop	 edi
  0014c	33 cd		 xor	 ecx, ebp
  0014e	5e		 pop	 esi
  0014f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00154	c9		 leave
  00155	c3		 ret	 0
??$?8$06@@YA_NABVioHashString@@AAY06$$CBD@Z ENDP	; operator==<7>
_TEXT	ENDS
PUBLIC	_pImage$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	_szType$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\bingomsgbox.cpp
;	COMDAT ?AddRenderImage@BingoMsgBox@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z
_TEXT	SEGMENT
_pImage$GSCopy$ = -36					; size = 4
_this$GSCopy$ = -32					; size = 4
_szType$GSCopy$ = -28					; size = 4
__t$509394 = -24					; size = 14
__t$509269 = -24					; size = 12
__t$509144 = -24					; size = 14
__t$509644 = -20					; size = 7
__t$509041 = -20					; size = 10
__t$509519 = -16					; size = 5
__$ArrayPad$ = -4					; size = 4
_szType$ = 8						; size = 4
_pImage$ = 12						; size = 4
?AddRenderImage@BingoMsgBox@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z PROC ; BingoMsgBox::AddRenderImage, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _szType$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 57   : 	}
; 58   : 	else if( szType == "IconBg" )

  00016	89 45 e4	 mov	 DWORD PTR _szType$GSCopy$[ebp], eax
  00019	8b 45 0c	 mov	 eax, DWORD PTR _pImage$[ebp]
  0001c	6a 02		 push	 2
  0001e	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	89 45 dc	 mov	 DWORD PTR _pImage$GSCopy$[ebp], eax
  00024	c7 45 ec aa 89
	9f a4		 mov	 DWORD PTR __t$509041[ebp], -1533048406 ; a49f89aaH
  0002b	c7 45 f0 98 81
	89 8f		 mov	 DWORD PTR __t$509041[ebp+4], -1886813800 ; 8f898198H
  00032	8d 45 ec	 lea	 eax, DWORD PTR __t$509041[ebp]
  00035	33 db		 xor	 ebx, ebx
  00037	66 c7 45 f4 9f
	00		 mov	 WORD PTR __t$509041[ebp+8], 159 ; 0000009fH
  0003d	59		 pop	 ecx
  0003e	bf ed ec eb ea	 mov	 edi, -353637139		; eaebecedH
$LL136@AddRenderI:

; 33   : 	if( szType == "GetNumber" )

  00043	31 38		 xor	 DWORD PTR [eax], edi
  00045	83 c0 04	 add	 eax, 4
  00048	49		 dec	 ecx
  00049	75 f8		 jne	 SHORT $LL136@AddRenderI
  0004b	8b 4d e4	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  0004e	80 75 f4 ed	 xor	 BYTE PTR __t$509041[ebp+8], -19 ; ffffffedH
  00052	8d 75 ec	 lea	 esi, DWORD PTR __t$509041[ebp]
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL698@AddRenderI:
  0005b	8a 08		 mov	 cl, BYTE PTR [eax]
  0005d	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0005f	75 1a		 jne	 SHORT $LN699@AddRenderI
  00061	3a cb		 cmp	 cl, bl
  00063	74 12		 je	 SHORT $LN700@AddRenderI
  00065	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00068	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0006b	75 0e		 jne	 SHORT $LN699@AddRenderI
  0006d	83 c0 02	 add	 eax, 2
  00070	83 c6 02	 add	 esi, 2
  00073	3a cb		 cmp	 cl, bl
  00075	75 e4		 jne	 SHORT $LL698@AddRenderI
$LN700@AddRenderI:
  00077	33 c0		 xor	 eax, eax
  00079	eb 05		 jmp	 SHORT $LN701@AddRenderI
$LN699@AddRenderI:
  0007b	1b c0		 sbb	 eax, eax
  0007d	83 d8 ff	 sbb	 eax, -1
$LN701@AddRenderI:
  00080	3b c3		 cmp	 eax, ebx
  00082	75 28		 jne	 SHORT $LN693@AddRenderI

; 34   : 	{
; 35   : 		SAFEDELETE( m_pGetNumber );

  00084	8b 75 e0	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00087	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  0008d	3b cb		 cmp	 ecx, ebx
  0008f	74 0d		 je	 SHORT $LN17@AddRenderI
  00091	8b 01		 mov	 eax, DWORD PTR [ecx]
  00093	6a 01		 push	 1
  00095	ff 50 40	 call	 DWORD PTR [eax+64]
  00098	89 9e 60 01 00
	00		 mov	 DWORD PTR [esi+352], ebx
$LN17@AddRenderI:

; 36   : 		m_pGetNumber = pImage;

  0009e	8b 45 dc	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  000a1	89 86 60 01 00
	00		 mov	 DWORD PTR [esi+352], eax
  000a7	e9 ba 02 00 00	 jmp	 $LN1@AddRenderI
$LN693@AddRenderI:

; 37   : 	}
; 38   : 	else if( szType == "ShuffleNumber" )

  000ac	6a 03		 push	 3
  000ae	c7 45 e8 be 84
	9e 8c		 mov	 DWORD PTR __t$509144[ebp], -1935768386 ; 8c9e84beH
  000b5	c7 45 ec 8b 80
	8e a4		 mov	 DWORD PTR __t$509144[ebp+4], -1534164853 ; a48e808bH
  000bc	c7 45 f0 98 81
	89 8f		 mov	 DWORD PTR __t$509144[ebp+8], -1886813800 ; 8f898198H
  000c3	8d 45 e8	 lea	 eax, DWORD PTR __t$509144[ebp]
  000c6	66 c7 45 f4 9f
	00		 mov	 WORD PTR __t$509144[ebp+12], 159 ; 0000009fH
  000cc	59		 pop	 ecx
$LL242@AddRenderI:
  000cd	31 38		 xor	 DWORD PTR [eax], edi
  000cf	83 c0 04	 add	 eax, 4
  000d2	49		 dec	 ecx
  000d3	75 f8		 jne	 SHORT $LL242@AddRenderI
  000d5	8b 4d e4	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  000d8	80 75 f4 ed	 xor	 BYTE PTR __t$509144[ebp+12], -19 ; ffffffedH
  000dc	8d 75 e8	 lea	 esi, DWORD PTR __t$509144[ebp]
  000df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL702@AddRenderI:
  000e5	8a 08		 mov	 cl, BYTE PTR [eax]
  000e7	3a 0e		 cmp	 cl, BYTE PTR [esi]
  000e9	75 1a		 jne	 SHORT $LN703@AddRenderI
  000eb	3a cb		 cmp	 cl, bl
  000ed	74 12		 je	 SHORT $LN722@AddRenderI
  000ef	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000f2	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  000f5	75 0e		 jne	 SHORT $LN703@AddRenderI
  000f7	83 c0 02	 add	 eax, 2
  000fa	83 c6 02	 add	 esi, 2
  000fd	3a cb		 cmp	 cl, bl
  000ff	75 e4		 jne	 SHORT $LL702@AddRenderI
$LN722@AddRenderI:
  00101	33 c0		 xor	 eax, eax
  00103	eb 05		 jmp	 SHORT $LN705@AddRenderI
$LN703@AddRenderI:
  00105	1b c0		 sbb	 eax, eax
  00107	83 d8 ff	 sbb	 eax, -1
$LN705@AddRenderI:
  0010a	3b c3		 cmp	 eax, ebx
  0010c	75 28		 jne	 SHORT $LN694@AddRenderI

; 39   : 	{
; 40   : 		SAFEDELETE( m_pShuffleNumber );

  0010e	8b 75 e0	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00111	8b 8e 64 01 00
	00		 mov	 ecx, DWORD PTR [esi+356]
  00117	3b cb		 cmp	 ecx, ebx
  00119	74 0d		 je	 SHORT $LN14@AddRenderI
  0011b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0011d	6a 01		 push	 1
  0011f	ff 50 40	 call	 DWORD PTR [eax+64]
  00122	89 9e 64 01 00
	00		 mov	 DWORD PTR [esi+356], ebx
$LN14@AddRenderI:

; 41   : 		m_pShuffleNumber = pImage;

  00128	8b 45 dc	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  0012b	89 86 64 01 00
	00		 mov	 DWORD PTR [esi+356], eax
  00131	e9 30 02 00 00	 jmp	 $LN1@AddRenderI
$LN694@AddRenderI:

; 42   : 	}
; 43   : 	else if( szType == "ShuffleItem" )

  00136	6a 02		 push	 2
  00138	c7 45 e8 be 84
	9e 8c		 mov	 DWORD PTR __t$509269[ebp], -1935768386 ; 8c9e84beH
  0013f	c7 45 ec 8b 80
	8e a3		 mov	 DWORD PTR __t$509269[ebp+4], -1550942069 ; a38e808bH
  00146	8d 45 e8	 lea	 eax, DWORD PTR __t$509269[ebp]
  00149	c7 45 f0 99 89
	86 00		 mov	 DWORD PTR __t$509269[ebp+8], 8817049 ; 00868999H
  00150	59		 pop	 ecx
$LL348@AddRenderI:
  00151	31 38		 xor	 DWORD PTR [eax], edi
  00153	83 c0 04	 add	 eax, 4
  00156	49		 dec	 ecx
  00157	75 f8		 jne	 SHORT $LL348@AddRenderI
  00159	6a 08		 push	 8
  0015b	58		 pop	 eax
$LL345@AddRenderI:
  0015c	8b c8		 mov	 ecx, eax
  0015e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00164	79 05		 jns	 SHORT $LN723@AddRenderI
  00166	49		 dec	 ecx
  00167	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0016a	41		 inc	 ecx
$LN723@AddRenderI:
  0016b	b2 ed		 mov	 dl, -19			; ffffffedH
  0016d	2a d1		 sub	 dl, cl
  0016f	30 54 05 e8	 xor	 BYTE PTR __t$509269[ebp+eax], dl
  00173	40		 inc	 eax
  00174	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00177	7c e3		 jl	 SHORT $LL345@AddRenderI
  00179	8b 4d e4	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  0017c	8d 75 e8	 lea	 esi, DWORD PTR __t$509269[ebp]
  0017f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL706@AddRenderI:
  00185	8a 08		 mov	 cl, BYTE PTR [eax]
  00187	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00189	75 1a		 jne	 SHORT $LN707@AddRenderI
  0018b	3a cb		 cmp	 cl, bl
  0018d	74 12		 je	 SHORT $LN708@AddRenderI
  0018f	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00192	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00195	75 0e		 jne	 SHORT $LN707@AddRenderI
  00197	83 c0 02	 add	 eax, 2
  0019a	83 c6 02	 add	 esi, 2
  0019d	3a cb		 cmp	 cl, bl
  0019f	75 e4		 jne	 SHORT $LL706@AddRenderI
$LN708@AddRenderI:
  001a1	33 c0		 xor	 eax, eax
  001a3	eb 05		 jmp	 SHORT $LN709@AddRenderI
$LN707@AddRenderI:
  001a5	1b c0		 sbb	 eax, eax
  001a7	83 d8 ff	 sbb	 eax, -1
$LN709@AddRenderI:
  001aa	3b c3		 cmp	 eax, ebx
  001ac	75 28		 jne	 SHORT $LN695@AddRenderI

; 44   : 	{
; 45   : 		SAFEDELETE( m_pShuffleItem );

  001ae	8b 75 e0	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  001b1	8b 8e 68 01 00
	00		 mov	 ecx, DWORD PTR [esi+360]
  001b7	3b cb		 cmp	 ecx, ebx
  001b9	74 0d		 je	 SHORT $LN11@AddRenderI
  001bb	8b 01		 mov	 eax, DWORD PTR [ecx]
  001bd	6a 01		 push	 1
  001bf	ff 50 40	 call	 DWORD PTR [eax+64]
  001c2	89 9e 68 01 00
	00		 mov	 DWORD PTR [esi+360], ebx
$LN11@AddRenderI:

; 46   : 		m_pShuffleItem = pImage;

  001c8	8b 45 dc	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  001cb	89 86 68 01 00
	00		 mov	 DWORD PTR [esi+360], eax
  001d1	e9 90 01 00 00	 jmp	 $LN1@AddRenderI
$LN695@AddRenderI:

; 47   : 	}
; 48   : 	else if( szType == "SpecialNumber" )

  001d6	6a 03		 push	 3
  001d8	c7 45 e8 be 9c
	8e 89		 mov	 DWORD PTR __t$509394[ebp], -1987142466 ; 898e9cbeH
  001df	c7 45 ec 84 8d
	87 a4		 mov	 DWORD PTR __t$509394[ebp+4], -1534620284 ; a4878d84H
  001e6	c7 45 f0 98 81
	89 8f		 mov	 DWORD PTR __t$509394[ebp+8], -1886813800 ; 8f898198H
  001ed	8d 45 e8	 lea	 eax, DWORD PTR __t$509394[ebp]
  001f0	66 c7 45 f4 9f
	00		 mov	 WORD PTR __t$509394[ebp+12], 159 ; 0000009fH
  001f6	59		 pop	 ecx
$LL454@AddRenderI:
  001f7	31 38		 xor	 DWORD PTR [eax], edi
  001f9	83 c0 04	 add	 eax, 4
  001fc	49		 dec	 ecx
  001fd	75 f8		 jne	 SHORT $LL454@AddRenderI
  001ff	8b 4d e4	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00202	80 75 f4 ed	 xor	 BYTE PTR __t$509394[ebp+12], -19 ; ffffffedH
  00206	8d 75 e8	 lea	 esi, DWORD PTR __t$509394[ebp]
  00209	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL710@AddRenderI:
  0020f	8a 08		 mov	 cl, BYTE PTR [eax]
  00211	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00213	75 1a		 jne	 SHORT $LN711@AddRenderI
  00215	3a cb		 cmp	 cl, bl
  00217	74 12		 je	 SHORT $LN712@AddRenderI
  00219	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0021c	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0021f	75 0e		 jne	 SHORT $LN711@AddRenderI
  00221	83 c0 02	 add	 eax, 2
  00224	83 c6 02	 add	 esi, 2
  00227	3a cb		 cmp	 cl, bl
  00229	75 e4		 jne	 SHORT $LL710@AddRenderI
$LN712@AddRenderI:
  0022b	33 c0		 xor	 eax, eax
  0022d	eb 05		 jmp	 SHORT $LN713@AddRenderI
$LN711@AddRenderI:
  0022f	1b c0		 sbb	 eax, eax
  00231	83 d8 ff	 sbb	 eax, -1
$LN713@AddRenderI:
  00234	3b c3		 cmp	 eax, ebx
  00236	75 28		 jne	 SHORT $LN696@AddRenderI

; 49   : 	{
; 50   : 		SAFEDELETE( m_pSpecialNumber );

  00238	8b 75 e0	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0023b	8b 8e 6c 01 00
	00		 mov	 ecx, DWORD PTR [esi+364]
  00241	3b cb		 cmp	 ecx, ebx
  00243	74 0d		 je	 SHORT $LN8@AddRenderI
  00245	8b 01		 mov	 eax, DWORD PTR [ecx]
  00247	6a 01		 push	 1
  00249	ff 50 40	 call	 DWORD PTR [eax+64]
  0024c	89 9e 6c 01 00
	00		 mov	 DWORD PTR [esi+364], ebx
$LN8@AddRenderI:

; 51   : 		m_pSpecialNumber = pImage;

  00252	8b 45 dc	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00255	89 86 6c 01 00
	00		 mov	 DWORD PTR [esi+364], eax
  0025b	e9 06 01 00 00	 jmp	 $LN1@AddRenderI
$LN696@AddRenderI:

; 52   : 	}
; 53   : 	else if( szType == "Init" )

  00260	8b 4d e4	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00263	c7 45 f0 a4 82
	82 9e		 mov	 DWORD PTR __t$509519[ebp], -1635614044 ; 9e8282a4H
  0026a	31 7d f0	 xor	 DWORD PTR __t$509519[ebp], edi
  0026d	88 5d f4	 mov	 BYTE PTR __t$509519[ebp+4], bl
  00270	8d 75 f0	 lea	 esi, DWORD PTR __t$509519[ebp]
  00273	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL714@AddRenderI:
  00279	8a 08		 mov	 cl, BYTE PTR [eax]
  0027b	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0027d	75 1a		 jne	 SHORT $LN715@AddRenderI
  0027f	3a cb		 cmp	 cl, bl
  00281	74 12		 je	 SHORT $LN716@AddRenderI
  00283	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00286	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00289	75 0e		 jne	 SHORT $LN715@AddRenderI
  0028b	83 c0 02	 add	 eax, 2
  0028e	83 c6 02	 add	 esi, 2
  00291	3a cb		 cmp	 cl, bl
  00293	75 e4		 jne	 SHORT $LL714@AddRenderI
$LN716@AddRenderI:
  00295	33 c0		 xor	 eax, eax
  00297	eb 05		 jmp	 SHORT $LN717@AddRenderI
$LN715@AddRenderI:
  00299	1b c0		 sbb	 eax, eax
  0029b	83 d8 ff	 sbb	 eax, -1
$LN717@AddRenderI:
  0029e	3b c3		 cmp	 eax, ebx
  002a0	75 28		 jne	 SHORT $LN697@AddRenderI

; 54   : 	{
; 55   : 		SAFEDELETE( m_pInit );

  002a2	8b 75 e0	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  002a5	8b 8e 70 01 00
	00		 mov	 ecx, DWORD PTR [esi+368]
  002ab	3b cb		 cmp	 ecx, ebx
  002ad	74 0d		 je	 SHORT $LN5@AddRenderI
  002af	8b 01		 mov	 eax, DWORD PTR [ecx]
  002b1	6a 01		 push	 1
  002b3	ff 50 40	 call	 DWORD PTR [eax+64]
  002b6	89 9e 70 01 00
	00		 mov	 DWORD PTR [esi+368], ebx
$LN5@AddRenderI:

; 56   : 		m_pInit = pImage;

  002bc	8b 45 dc	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  002bf	89 86 70 01 00
	00		 mov	 DWORD PTR [esi+368], eax
  002c5	e9 9c 00 00 00	 jmp	 $LN1@AddRenderI
$LN697@AddRenderI:

; 57   : 	}
; 58   : 	else if( szType == "IconBg" )

  002ca	6a 04		 push	 4
  002cc	c7 45 ec a4 8f
	84 84		 mov	 DWORD PTR __t$509644[ebp], -2071687260 ; 84848fa4H
  002d3	31 7d ec	 xor	 DWORD PTR __t$509644[ebp], edi
  002d6	66 c7 45 f0 af
	8b		 mov	 WORD PTR __t$509644[ebp+4], 35759 ; 00008bafH
  002dc	88 5d f2	 mov	 BYTE PTR __t$509644[ebp+6], bl
  002df	58		 pop	 eax
$LL663@AddRenderI:
  002e0	8b c8		 mov	 ecx, eax
  002e2	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  002e8	79 05		 jns	 SHORT $LN724@AddRenderI
  002ea	49		 dec	 ecx
  002eb	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002ee	41		 inc	 ecx
$LN724@AddRenderI:
  002ef	b2 ed		 mov	 dl, -19			; ffffffedH
  002f1	2a d1		 sub	 dl, cl
  002f3	30 54 05 ec	 xor	 BYTE PTR __t$509644[ebp+eax], dl
  002f7	40		 inc	 eax
  002f8	83 f8 06	 cmp	 eax, 6
  002fb	7c e3		 jl	 SHORT $LL663@AddRenderI
  002fd	8b 4d e4	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00300	8d 75 ec	 lea	 esi, DWORD PTR __t$509644[ebp]
  00303	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL718@AddRenderI:
  00309	8a 08		 mov	 cl, BYTE PTR [eax]
  0030b	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0030d	75 1a		 jne	 SHORT $LN719@AddRenderI
  0030f	3a cb		 cmp	 cl, bl
  00311	74 12		 je	 SHORT $LN720@AddRenderI
  00313	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00316	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00319	75 0e		 jne	 SHORT $LN719@AddRenderI
  0031b	83 c0 02	 add	 eax, 2
  0031e	83 c6 02	 add	 esi, 2
  00321	3a cb		 cmp	 cl, bl
  00323	75 e4		 jne	 SHORT $LL718@AddRenderI
$LN720@AddRenderI:
  00325	33 c0		 xor	 eax, eax
  00327	eb 05		 jmp	 SHORT $LN721@AddRenderI
$LN719@AddRenderI:
  00329	1b c0		 sbb	 eax, eax
  0032b	83 d8 ff	 sbb	 eax, -1
$LN721@AddRenderI:
  0032e	3b c3		 cmp	 eax, ebx
  00330	75 25		 jne	 SHORT $LN3@AddRenderI

; 59   : 	{
; 60   : 		SAFEDELETE( m_pIconBg );

  00332	8b 75 e0	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00335	8b 8e 78 01 00
	00		 mov	 ecx, DWORD PTR [esi+376]
  0033b	3b cb		 cmp	 ecx, ebx
  0033d	74 0d		 je	 SHORT $LN2@AddRenderI
  0033f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00341	6a 01		 push	 1
  00343	ff 50 40	 call	 DWORD PTR [eax+64]
  00346	89 9e 78 01 00
	00		 mov	 DWORD PTR [esi+376], ebx
$LN2@AddRenderI:

; 61   : 		m_pIconBg = pImage;

  0034c	8b 45 dc	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  0034f	89 86 78 01 00
	00		 mov	 DWORD PTR [esi+376], eax

; 62   : 	}
; 63   : 	else

  00355	eb 0f		 jmp	 SHORT $LN1@AddRenderI
$LN3@AddRenderI:

; 64   : 		ioWnd::AddRenderImage( szType, pImage );

  00357	ff 75 dc	 push	 DWORD PTR _pImage$GSCopy$[ebp]
  0035a	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0035d	ff 75 e4	 push	 DWORD PTR _szType$GSCopy$[ebp]
  00360	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
$LN1@AddRenderI:

; 65   : }

  00366	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00369	5f		 pop	 edi
  0036a	5e		 pop	 esi
  0036b	33 cd		 xor	 ecx, ebp
  0036d	5b		 pop	 ebx
  0036e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00373	c9		 leave
  00374	c2 08 00	 ret	 8
?AddRenderImage@BingoMsgBox@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z ENDP ; BingoMsgBox::AddRenderImage
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?AddRenderFrame@BingoMsgBox@@MAEXABVioHashString@@PAVioUIRenderFrame@@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -24					; size = 4
__t$509845 = -20					; size = 10
__$ArrayPad$ = -4					; size = 4
_szType$ = 8						; size = 4
_pFrame$ = 12						; size = 4
?AddRenderFrame@BingoMsgBox@@MAEXABVioHashString@@PAVioUIRenderFrame@@@Z PROC ; BingoMsgBox::AddRenderFrame, COMDAT
; _this$ = ecx

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _pFrame$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _szType$[ebp]

; 69   : 	if( szType == "BottomFrm" )

  00019	6a 02		 push	 2
  0001b	89 4d e8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0001e	c7 45 ec af 83
	9f 9e		 mov	 DWORD PTR __t$509845[ebp], -1633713233 ; 9e9f83afH
  00025	c7 45 f0 82 81
	ad 98		 mov	 DWORD PTR __t$509845[ebp+4], -1733459582 ; 98ad8182H
  0002c	8d 45 ec	 lea	 eax, DWORD PTR __t$509845[ebp]
  0002f	66 c7 45 f4 80
	00		 mov	 WORD PTR __t$509845[ebp+8], 128 ; 00000080H
  00035	59		 pop	 ecx
$LL111@AddRenderF:
  00036	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0003c	83 c0 04	 add	 eax, 4
  0003f	49		 dec	 ecx
  00040	75 f4		 jne	 SHORT $LL111@AddRenderF
  00042	80 75 f4 ed	 xor	 BYTE PTR __t$509845[ebp+8], -19 ; ffffffedH
  00046	8b cf		 mov	 ecx, edi
  00048	8d 75 ec	 lea	 esi, DWORD PTR __t$509845[ebp]
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL118@AddRenderF:
  00051	8a 08		 mov	 cl, BYTE PTR [eax]
  00053	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00055	75 1a		 jne	 SHORT $LN119@AddRenderF
  00057	84 c9		 test	 cl, cl
  00059	74 12		 je	 SHORT $LN120@AddRenderF
  0005b	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0005e	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00061	75 0e		 jne	 SHORT $LN119@AddRenderF
  00063	83 c0 02	 add	 eax, 2
  00066	83 c6 02	 add	 esi, 2
  00069	84 c9		 test	 cl, cl
  0006b	75 e4		 jne	 SHORT $LL118@AddRenderF
$LN120@AddRenderF:
  0006d	33 c0		 xor	 eax, eax
  0006f	eb 05		 jmp	 SHORT $LN121@AddRenderF
$LN119@AddRenderF:
  00071	1b c0		 sbb	 eax, eax
  00073	83 d8 ff	 sbb	 eax, -1
$LN121@AddRenderF:
  00076	85 c0		 test	 eax, eax
  00078	75 23		 jne	 SHORT $LN3@AddRenderF

; 70   : 	{
; 71   : 		SAFEDELETE( m_pBottomFrm );

  0007a	8b 75 e8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0007d	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  00083	85 c9		 test	 ecx, ecx
  00085	74 0e		 je	 SHORT $LN2@AddRenderF
  00087	8b 01		 mov	 eax, DWORD PTR [ecx]
  00089	6a 01		 push	 1
  0008b	ff 50 40	 call	 DWORD PTR [eax+64]
  0008e	83 a6 7c 01 00
	00 00		 and	 DWORD PTR [esi+380], 0
$LN2@AddRenderF:

; 72   : 		m_pBottomFrm = pFrame;

  00095	89 9e 7c 01 00
	00		 mov	 DWORD PTR [esi+380], ebx

; 73   : 	}
; 74   : 	else

  0009b	eb 0b		 jmp	 SHORT $LN1@AddRenderF
$LN3@AddRenderF:

; 75   : 		ioWnd::AddRenderFrame( szType, pFrame );

  0009d	8b 4d e8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  000a0	53		 push	 ebx
  000a1	57		 push	 edi
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
$LN1@AddRenderF:

; 76   : }

  000a8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	33 cd		 xor	 ecx, ebp
  000af	5b		 pop	 ebx
  000b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b5	c9		 leave
  000b6	c2 08 00	 ret	 8
?AddRenderFrame@BingoMsgBox@@MAEXABVioHashString@@PAVioUIRenderFrame@@@Z ENDP ; BingoMsgBox::AddRenderFrame
_TEXT	ENDS
EXTRN	__imp_?OnRender@ioWnd@@MAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?OnRender@BingoMsgBox@@MAEXXZ
_TEXT	SEGMENT
tv255 = -16						; size = 4
tv189 = -12						; size = 4
_iYPos$ = -8						; size = 4
_iXPos$ = -4						; size = 4
?OnRender@BingoMsgBox@@MAEXXZ PROC			; BingoMsgBox::OnRender, COMDAT
; _this$ = ecx

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx

; 150  : 	ioWnd::OnRender();

  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnRender@ioWnd@@MAEXXZ

; 151  : 
; 152  : 	int iXPos = GetDerivedPosX();

  00011	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?GetDerivedPosX@ioWnd@@QBEHXZ
  00017	8b ce		 mov	 ecx, esi
  00019	ff d3		 call	 ebx

; 153  : 	int iYPos = GetDerivedPosY();

  0001b	8b ce		 mov	 ecx, esi
  0001d	89 45 fc	 mov	 DWORD PTR _iXPos$[ebp], eax
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ

; 154  : 
; 155  : 	enum { ICON_X = 151, ICON_Y = 98, BOTTOM_FRM_HEIGHT = 65, };
; 156  : 
; 157  : 	if( m_pIconBg )

  00026	33 ff		 xor	 edi, edi
  00028	8b c8		 mov	 ecx, eax
  0002a	89 4d f8	 mov	 DWORD PTR _iYPos$[ebp], ecx
  0002d	39 be 78 01 00
	00		 cmp	 DWORD PTR [esi+376], edi
  00033	74 38		 je	 SHORT $LN3@OnRender

; 158  : 		m_pIconBg->Render( iXPos + ICON_X, iYPos + ICON_Y, UI_RENDER_MULTIPLY );

  00035	8b 86 78 01 00
	00		 mov	 eax, DWORD PTR [esi+376]
  0003b	8b 10		 mov	 edx, DWORD PTR [eax]
  0003d	57		 push	 edi
  0003e	57		 push	 edi
  0003f	83 c1 62	 add	 ecx, 98			; 00000062H
  00042	57		 push	 edi
  00043	6a 08		 push	 8
  00045	51		 push	 ecx
  00046	51		 push	 ecx
  00047	0f 57 c0	 xorps	 xmm0, xmm0
  0004a	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _iXPos$[ebp]
  00051	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00057	81 c1 97 00 00
	00		 add	 ecx, 151		; 00000097H
  0005d	0f 57 c0	 xorps	 xmm0, xmm0
  00060	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00064	8b c8		 mov	 ecx, eax
  00066	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006b	ff 12		 call	 DWORD PTR [edx]
$LN3@OnRender:

; 159  : 
; 160  : 	if( m_pIcon )

  0006d	39 be 74 01 00
	00		 cmp	 DWORD PTR [esi+372], edi
  00073	74 38		 je	 SHORT $LN2@OnRender

; 161  : 		m_pIcon->Render( iXPos + ICON_X, iYPos + ICON_Y );

  00075	8b 8e 74 01 00
	00		 mov	 ecx, DWORD PTR [esi+372]
  0007b	8b 55 f8	 mov	 edx, DWORD PTR _iYPos$[ebp]
  0007e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00080	57		 push	 edi
  00081	57		 push	 edi
  00082	57		 push	 edi
  00083	57		 push	 edi
  00084	83 c2 62	 add	 edx, 98			; 00000062H
  00087	0f 57 c0	 xorps	 xmm0, xmm0
  0008a	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0008e	8b 55 fc	 mov	 edx, DWORD PTR _iXPos$[ebp]
  00091	51		 push	 ecx
  00092	51		 push	 ecx
  00093	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00099	81 c2 97 00 00
	00		 add	 edx, 151		; 00000097H
  0009f	0f 57 c0	 xorps	 xmm0, xmm0
  000a2	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  000a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ab	ff 10		 call	 DWORD PTR [eax]
$LN2@OnRender:

; 162  : 
; 163  : 	if( m_pBottomFrm )

  000ad	39 be 7c 01 00
	00		 cmp	 DWORD PTR [esi+380], edi
  000b3	74 52		 je	 SHORT $LN1@OnRender

; 164  : 		m_pBottomFrm->Render( GetDerivedPosX(), GetDerivedPosY() + GetHeight() - BOTTOM_FRM_HEIGHT , UI_RENDER_MULTIPLY );

  000b5	8b 86 7c 01 00
	00		 mov	 eax, DWORD PTR [esi+380]
  000bb	8b 00		 mov	 eax, DWORD PTR [eax]
  000bd	8b ce		 mov	 ecx, esi
  000bf	89 45 f0	 mov	 DWORD PTR tv255[ebp], eax
  000c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ
  000c8	57		 push	 edi
  000c9	57		 push	 edi
  000ca	57		 push	 edi
  000cb	83 c0 bf	 add	 eax, -65		; ffffffbfH
  000ce	6a 08		 push	 8
  000d0	8b ce		 mov	 ecx, esi
  000d2	89 45 f4	 mov	 DWORD PTR tv189[ebp], eax
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioWnd@@QBEHXZ
  000db	03 45 f4	 add	 eax, DWORD PTR tv189[ebp]
  000de	51		 push	 ecx
  000df	0f 57 c0	 xorps	 xmm0, xmm0
  000e2	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000e6	8b ce		 mov	 ecx, esi
  000e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ed	ff d3		 call	 ebx
  000ef	0f 57 c0	 xorps	 xmm0, xmm0
  000f2	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000f6	8b 45 f0	 mov	 eax, DWORD PTR tv255[ebp]
  000f9	51		 push	 ecx
  000fa	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  00100	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00105	ff 10		 call	 DWORD PTR [eax]
$LN1@OnRender:

; 165  : 
; 166  : 	PrintText( iXPos, iYPos );

  00107	ff 75 f8	 push	 DWORD PTR _iYPos$[ebp]
  0010a	8b ce		 mov	 ecx, esi
  0010c	ff 75 fc	 push	 DWORD PTR _iXPos$[ebp]
  0010f	e8 00 00 00 00	 call	 ?PrintText@BingoMsgBox@@IAEXHH@Z ; BingoMsgBox::PrintText
  00114	5f		 pop	 edi
  00115	5e		 pop	 esi
  00116	5b		 pop	 ebx

; 167  : }

  00117	c9		 leave
  00118	c3		 ret	 0
?OnRender@BingoMsgBox@@MAEXXZ ENDP			; BingoMsgBox::OnRender
_TEXT	ENDS
END
