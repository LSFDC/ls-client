; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\io3DSkillCharIcon.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??0io3DSkillCharIcon@@QAE@XZ			; io3DSkillCharIcon::io3DSkillCharIcon
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\io3dskillcharicon.cpp
;	COMDAT ??0io3DSkillCharIcon@@QAE@XZ
_TEXT	SEGMENT
??0io3DSkillCharIcon@@QAE@XZ PROC			; io3DSkillCharIcon::io3DSkillCharIcon, COMDAT
; _this$ = ecx

; 18   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 19   : 	m_pUI3DRender = NULL;

  0000c	33 c0		 xor	 eax, eax
  0000e	89 06		 mov	 DWORD PTR [esi], eax

; 20   : 	m_pAvata = NULL;

  00010	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 21   : 
; 22   : 	m_dwSetStart = 0;

  00013	89 46 28	 mov	 DWORD PTR [esi+40], eax

; 23   : 
; 24   : 	m_iXOffSet = 0;

  00016	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 25   : 	m_iYOffSet = 0;

  00019	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 26   : }

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	c3		 ret	 0
??0io3DSkillCharIcon@@QAE@XZ ENDP			; io3DSkillCharIcon::io3DSkillCharIcon
_TEXT	ENDS
PUBLIC	??1io3DSkillCharIcon@@QAE@XZ			; io3DSkillCharIcon::~io3DSkillCharIcon
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1io3DSkillCharIcon@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1io3DSkillCharIcon@@QAE@XZ$0
__ehfuncinfo$??1io3DSkillCharIcon@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1io3DSkillCharIcon@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1io3DSkillCharIcon@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1io3DSkillCharIcon@@QAE@XZ PROC			; io3DSkillCharIcon::~io3DSkillCharIcon, COMDAT
; _this$ = ecx

; 29   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1io3DSkillCharIcon@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 30   : 	SAFEDELETE( m_pAvata );

  00011	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00014	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00018	85 c9		 test	 ecx, ecx
  0001a	74 0b		 je	 SHORT $LN2@io3DSkillC
  0001c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001e	6a 01		 push	 1
  00020	ff 50 04	 call	 DWORD PTR [eax+4]
  00023	83 66 04 00	 and	 DWORD PTR [esi+4], 0
$LN2@io3DSkillC:

; 31   : 	SAFEDELETE( m_pUI3DRender );

  00027	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00029	85 c9		 test	 ecx, ecx
  0002b	74 09		 je	 SHORT $LN1@io3DSkillC
  0002d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002f	6a 01		 push	 1
  00031	ff 10		 call	 DWORD PTR [eax]
  00033	83 26 00	 and	 DWORD PTR [esi], 0
$LN1@io3DSkillC:

; 32   : }

  00036	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0003a	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00043	e8 00 00 00 00	 call	 __EH_epilog3
  00048	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1io3DSkillCharIcon@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 18	 add	 ecx, 24			; 00000018H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1io3DSkillCharIcon@@QAE@XZ:
  0000c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00010	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00013	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00016	33 c8		 xor	 ecx, eax
  00018	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1io3DSkillCharIcon@@QAE@XZ
  00022	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1io3DSkillCharIcon@@QAE@XZ ENDP			; io3DSkillCharIcon::~io3DSkillCharIcon
PUBLIC	??1ioINILoader_e@@QAE@XZ			; ioINILoader_e::~ioINILoader_e
EXTRN	__imp_??1ioINILoader@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1ioINILoader_e@@QAE@XZ
_TEXT	SEGMENT
??1ioINILoader_e@@QAE@XZ PROC				; ioINILoader_e::~ioINILoader_e, COMDAT
; _this$ = ecx
  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioINILoader@@QAE@XZ
??1ioINILoader_e@@QAE@XZ ENDP				; ioINILoader_e::~ioINILoader_e
_TEXT	ENDS
PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?return500@@YAIXZ				; return500
; Function compile flags: /Ogsp
;	COMDAT ?return500@@YAIXZ
_TEXT	SEGMENT
?return500@@YAIXZ PROC					; return500, COMDAT

; 28   : 	__forceinline unsigned int return500() { __asm mov eax, 500 };

  00000	b8 f4 01 00 00	 mov	 eax, 500		; 000001f4H
  00005	c3		 ret	 0
?return500@@YAIXZ ENDP					; return500
_TEXT	ENDS
PUBLIC	?FaceChange@io3DSkillCharIcon@@QAEXPBDH@Z	; io3DSkillCharIcon::FaceChange
EXTRN	?DirectFaceChange@ioCreateChar@@QAEXPBDH@Z:PROC	; ioCreateChar::DirectFaceChange
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\io3dskillcharicon.cpp
;	COMDAT ?FaceChange@io3DSkillCharIcon@@QAEXPBDH@Z
_TEXT	SEGMENT
_szTexPostfix$ = 8					; size = 4
_iDuration$ = 12					; size = 4
?FaceChange@io3DSkillCharIcon@@QAEXPBDH@Z PROC		; io3DSkillCharIcon::FaceChange, COMDAT
; _this$ = ecx

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 98   : 	if( m_pAvata )

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN1@FaceChange

; 101  : 	}
; 102  : }

  0000a	5d		 pop	 ebp

; 99   : 	{
; 100  : 		m_pAvata->DirectFaceChange( szTexPostfix, iDuration );

  0000b	e9 00 00 00 00	 jmp	 ?DirectFaceChange@ioCreateChar@@QAEXPBDH@Z ; ioCreateChar::DirectFaceChange
$LN1@FaceChange:

; 101  : 	}
; 102  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?FaceChange@io3DSkillCharIcon@@QAEXPBDH@Z ENDP		; io3DSkillCharIcon::FaceChange
_TEXT	ENDS
PUBLIC	?Update@io3DSkillCharIcon@@QAEXM@Z		; io3DSkillCharIcon::Update
EXTRN	?Update@ioCreateChar@@QAEXM@Z:PROC		; ioCreateChar::Update
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?Update@io3DSkillCharIcon@@QAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?Update@io3DSkillCharIcon@@QAEXM@Z PROC			; io3DSkillCharIcon::Update, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 106  : 	if( m_pAvata )

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	85 c9		 test	 ecx, ecx
  00008	74 10		 je	 SHORT $LN1@Update

; 107  : 	{
; 108  : 		m_pAvata->Update( fTimePerSec );

  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  0000f	51		 push	 ecx
  00010	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00015	e8 00 00 00 00	 call	 ?Update@ioCreateChar@@QAEXM@Z ; ioCreateChar::Update
$LN1@Update:

; 109  : 	}
; 110  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?Update@io3DSkillCharIcon@@QAEXM@Z ENDP			; io3DSkillCharIcon::Update
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?Render@io3DSkillCharIcon@@QAEXHH@Z		; io3DSkillCharIcon::Render
EXTRN	?Render@ioUI3DRender@@QAEXPBUD3DXMATRIX@@_N@Z:PROC ; ioUI3DRender::Render
EXTRN	?MakeUIProjection@ioUI3DRender@@QAE?AUD3DXMATRIX@@HH@Z:PROC ; ioUI3DRender::MakeUIProjection
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?Render@io3DSkillCharIcon@@QAEXHH@Z
_TEXT	SEGMENT
_matUI$505277 = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
_iXPos$ = 8						; size = 4
_iYPos$ = 12						; size = 4
?Render@io3DSkillCharIcon@@QAEXHH@Z PROC		; io3DSkillCharIcon::Render, COMDAT
; _this$ = ecx

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 114  : 	m_iXPos = iXPos + m_iXOffSet;
; 115  : 	m_iYPos = iYPos + m_iYOffSet;

  00010	8b 55 0c	 mov	 edx, DWORD PTR _iYPos$[ebp]
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx
  00016	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00019	03 45 08	 add	 eax, DWORD PTR _iXPos$[ebp]
  0001c	03 56 14	 add	 edx, DWORD PTR [esi+20]

; 116  : 
; 117  : 	if( m_pAvata && m_pUI3DRender )

  0001f	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  00023	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00026	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  00029	74 1e		 je	 SHORT $LN1@Render
  0002b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002d	85 c9		 test	 ecx, ecx
  0002f	74 18		 je	 SHORT $LN1@Render

; 118  : 	{
; 119  : 		D3DXMATRIX matUI = m_pUI3DRender->MakeUIProjection( m_iXPos, m_iYPos );

  00031	52		 push	 edx
  00032	50		 push	 eax
  00033	8d 45 bc	 lea	 eax, DWORD PTR _matUI$505277[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ?MakeUIProjection@ioUI3DRender@@QAE?AUD3DXMATRIX@@HH@Z ; ioUI3DRender::MakeUIProjection

; 120  : 		m_pUI3DRender->Render( &matUI, true );

  0003c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003e	6a 01		 push	 1
  00040	8d 45 bc	 lea	 eax, DWORD PTR _matUI$505277[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?Render@ioUI3DRender@@QAEXPBUD3DXMATRIX@@_N@Z ; ioUI3DRender::Render
$LN1@Render:

; 121  : 	}
; 122  : }

  00049	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004c	33 cd		 xor	 ecx, ebp
  0004e	5e		 pop	 esi
  0004f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00054	c9		 leave
  00055	c2 08 00	 ret	 8
?Render@io3DSkillCharIcon@@QAEXHH@Z ENDP		; io3DSkillCharIcon::Render
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	__real@40000000
PUBLIC	__real@3c23d70a
PUBLIC	__real@4f800000
PUBLIC	??_C@_0CP@GPOGPNFA@io3DSkillCharIcon?3?3SetAvata?5?9?5Cr@ ; `string'
PUBLIC	??_C@_0O@PDEFHMKN@SkillCharIcon?$AA@		; `string'
PUBLIC	?SetAvata@io3DSkillCharIcon@@QAEXABUCHARACTER@@@Z ; io3DSkillCharIcon::SetAvata
EXTRN	?ChangeHeadOutLineThick@ioCreateChar@@QAEXM@Z:PROC ; ioCreateChar::ChangeHeadOutLineThick
EXTRN	?ChangeHairOutLineThick@ioCreateChar@@QAEXM@Z:PROC ; ioCreateChar::ChangeHairOutLineThick
EXTRN	?SetLoopAni@ioCreateChar@@QAEXABVioHashString@@M@Z:PROC ; ioCreateChar::SetLoopAni
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	?SetLookAt@ioUI3DRender@@QAEXABUD3DXVECTOR3@@@Z:PROC ; ioUI3DRender::SetLookAt
EXTRN	?SetYaw@ioCreateChar@@QAEXM@Z:PROC		; ioCreateChar::SetYaw
EXTRN	?SetScale@ioCreateChar@@QAEXM@Z:PROC		; ioCreateChar::SetScale
EXTRN	?SetPosition@ioCreateChar@@QAEXABUD3DXVECTOR3@@@Z:PROC ; ioCreateChar::SetPosition
EXTRN	?DestroyHandAndBody@ioCreateChar@@QAEXXZ:PROC	; ioCreateChar::DestroyHandAndBody
EXTRN	__imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ:PROC
EXTRN	__imp_?LOG@@3VCLog@@A:BYTE
EXTRN	?CreateChar@ioUI3DRender@@QAEPAVioCreateChar@@ABUCHARACTER@@ABVioHashString@@_N@Z:PROC ; ioUI3DRender::CreateChar
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT __real@40000000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT ??_C@_0CP@GPOGPNFA@io3DSkillCharIcon?3?3SetAvata?5?9?5Cr@
CONST	SEGMENT
??_C@_0CP@GPOGPNFA@io3DSkillCharIcon?3?3SetAvata?5?9?5Cr@ DB 'io3DSkillCh'
	DB	'arIcon::SetAvata - CreateAvata Fail', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PDEFHMKN@SkillCharIcon?$AA@
CONST	SEGMENT
??_C@_0O@PDEFHMKN@SkillCharIcon?$AA@ DB 'SkillCharIcon', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetAvata@io3DSkillCharIcon@@QAEXABUCHARACTER@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetAvata@io3DSkillCharIcon@@QAEXABUCHARACTER@@@Z$0
__ehfuncinfo$?SetAvata@io3DSkillCharIcon@@QAEXABUCHARACTER@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetAvata@io3DSkillCharIcon@@QAEXABUCHARACTER@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\io3dskillcharicon.cpp
xdata$x	ENDS
;	COMDAT ?SetAvata@io3DSkillCharIcon@@QAEXABUCHARACTER@@@Z
_TEXT	SEGMENT
$T505998 = -48						; size = 16
tv214 = -32						; size = 4
tv208 = -32						; size = 4
_vCharPos$ = -28					; size = 12
__$EHRec$ = -12						; size = 12
_rkInfo$ = 8						; size = 4
?SetAvata@io3DSkillCharIcon@@QAEXABUCHARACTER@@@Z PROC	; io3DSkillCharIcon::SetAvata, COMDAT
; _this$ = ecx

; 56   : {

  00000	6a 24		 push	 36			; 00000024H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?SetAvata@io3DSkillCharIcon@@QAEXABUCHARACTER@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 5d 08	 mov	 ebx, DWORD PTR _rkInfo$[ebp]
  0000f	8b f1		 mov	 esi, ecx

; 57   : 	if( !m_pUI3DRender )	return;

  00011	33 ff		 xor	 edi, edi
  00013	39 3e		 cmp	 DWORD PTR [esi], edi
  00015	0f 84 37 01 00
	00		 je	 $LN5@SetAvata

; 58   : 
; 59   : 	SAFEDELETE( m_pAvata );

  0001b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001e	3b cf		 cmp	 ecx, edi
  00020	74 0a		 je	 SHORT $LN3@SetAvata
  00022	8b 01		 mov	 eax, DWORD PTR [ecx]
  00024	6a 01		 push	 1
  00026	ff 50 04	 call	 DWORD PTR [eax+4]
  00029	89 7e 04	 mov	 DWORD PTR [esi+4], edi
$LN3@SetAvata:

; 60   : 
; 61   : 	m_pAvata = m_pUI3DRender->CreateChar( rkInfo, "SkillCharIcon" );

  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PDEFHMKN@SkillCharIcon?$AA@
  00031	8d 4d d0	 lea	 ecx, DWORD PTR $T505998[ebp]
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0003a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003c	6a 01		 push	 1
  0003e	8d 45 d0	 lea	 eax, DWORD PTR $T505998[ebp]
  00041	50		 push	 eax
  00042	53		 push	 ebx
  00043	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00046	e8 00 00 00 00	 call	 ?CreateChar@ioUI3DRender@@QAEPAVioCreateChar@@ABUCHARACTER@@ABVioHashString@@_N@Z ; ioUI3DRender::CreateChar
  0004b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0004f	8d 4d d0	 lea	 ecx, DWORD PTR $T505998[ebp]
  00052	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 62   : 	if( !m_pAvata )

  0005b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005e	3b cf		 cmp	 ecx, edi
  00060	75 1a		 jne	 SHORT $LN2@SetAvata

; 63   : 	{
; 64   : 		LOG.PrintTimeAndLog( 0, "io3DSkillCharIcon::SetAvata - CreateAvata Fail" );

  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@GPOGPNFA@io3DSkillCharIcon?3?3SetAvata?5?9?5Cr@
  00067	57		 push	 edi
  00068	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH

; 65   : 		return;

  00077	e9 d6 00 00 00	 jmp	 $LN5@SetAvata
$LN2@SetAvata:

; 66   : 	}
; 67   : 
; 68   : 	m_pAvata->DestroyHandAndBody();

  0007c	e8 00 00 00 00	 call	 ?DestroyHandAndBody@ioCreateChar@@QAEXXZ ; ioCreateChar::DestroyHandAndBody

; 69   : 
; 70   : 	D3DXVECTOR3 vCharPos( 0.0f, 0.0f, FLOAT500 );

  00081	b8 f4 01 00 00	 mov	 eax, 500		; 000001f4H
  00086	0f 57 c0	 xorps	 xmm0, xmm0
  00089	89 45 e0	 mov	 DWORD PTR tv214[ebp], eax
  0008c	db 45 e0	 fild	 DWORD PTR tv214[ebp]
  0008f	f3 0f 11 45 e4	 movss	 DWORD PTR _vCharPos$[ebp], xmm0
  00094	f3 0f 11 45 e8	 movss	 DWORD PTR _vCharPos$[ebp+4], xmm0
  00099	85 c0		 test	 eax, eax
  0009b	79 06		 jns	 SHORT $LN17@SetAvata
  0009d	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN17@SetAvata:

; 71   : 	m_pAvata->SetPosition( vCharPos );

  000a3	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000a6	d9 5d ec	 fstp	 DWORD PTR _vCharPos$[ebp+8]
  000a9	8d 45 e4	 lea	 eax, DWORD PTR _vCharPos$[ebp]
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 ?SetPosition@ioCreateChar@@QAEXABUD3DXVECTOR3@@@Z ; ioCreateChar::SetPosition

; 72   : 	m_pAvata->SetScale( FLOAT1 );

  000b2	b8 01 00 00 00	 mov	 eax, 1
  000b7	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ba	89 45 e0	 mov	 DWORD PTR tv208[ebp], eax
  000bd	db 45 e0	 fild	 DWORD PTR tv208[ebp]
  000c0	85 c0		 test	 eax, eax
  000c2	79 06		 jns	 SHORT $LN18@SetAvata
  000c4	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN18@SetAvata:
  000ca	51		 push	 ecx
  000cb	d9 1c 24	 fstp	 DWORD PTR [esp]
  000ce	e8 00 00 00 00	 call	 ?SetScale@ioCreateChar@@QAEXM@Z ; ioCreateChar::SetScale

; 73   : 	m_pAvata->SetYaw( 0.0f );

  000d3	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000d6	0f 57 c0	 xorps	 xmm0, xmm0
  000d9	51		 push	 ecx
  000da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000df	e8 00 00 00 00	 call	 ?SetYaw@ioCreateChar@@QAEXM@Z ; ioCreateChar::SetYaw

; 74   : 
; 75   : 	m_pUI3DRender->SetLookAt( vCharPos );

  000e4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000e6	8d 45 e4	 lea	 eax, DWORD PTR _vCharPos$[ebp]
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 ?SetLookAt@ioUI3DRender@@QAEXABUD3DXVECTOR3@@@Z ; ioUI3DRender::SetLookAt

; 76   : 
; 77   : 	/*
; 78   : 	D3DXVECTOR3 vCharPos( 0.0f, 0.0f, 900.0f );
; 79   : 	m_pAvata->SetPosition( vCharPos );
; 80   : 	m_pAvata->SetYaw( 0.0f );
; 81   : 	m_pUI3DRender->SetLookAt( vCharPos );
; 82   : 
; 83   : 	float fAspect = (float)VIEW_WIDTH/(float)VIEW_HEIGHT;
; 84   : 	m_pUI3DRender->SetProjection( FLOAT1, 600.0f, 45.0f, fAspect );
; 85   : 	*/
; 86   : 
; 87   : 	if( !m_szCharMotion.IsEmpty() )

  000ef	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
  000f2	8b cf		 mov	 ecx, edi
  000f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  000fa	84 c0		 test	 al, al
  000fc	75 12		 jne	 SHORT $LN1@SetAvata

; 88   : 		m_pAvata->SetLoopAni( m_szCharMotion );

  000fe	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00101	0f 57 c0	 xorps	 xmm0, xmm0
  00104	51		 push	 ecx
  00105	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010a	57		 push	 edi
  0010b	e8 00 00 00 00	 call	 ?SetLoopAni@ioCreateChar@@QAEXABVioHashString@@M@Z ; ioCreateChar::SetLoopAni
$LN1@SetAvata:

; 89   : 
; 90   : 	m_pAvata->Update( 0.01f );

  00110	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00113	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  0011b	51		 push	 ecx
  0011c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00121	e8 00 00 00 00	 call	 ?Update@ioCreateChar@@QAEXM@Z ; ioCreateChar::Update

; 91   : 
; 92   : 	m_pAvata->ChangeHairOutLineThick( 2.0f );

  00126	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00129	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00131	51		 push	 ecx
  00132	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00137	e8 00 00 00 00	 call	 ?ChangeHairOutLineThick@ioCreateChar@@QAEXM@Z ; ioCreateChar::ChangeHairOutLineThick

; 93   : 	m_pAvata->ChangeHeadOutLineThick( 2.0f );

  0013c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0013f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00147	51		 push	 ecx
  00148	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014d	e8 00 00 00 00	 call	 ?ChangeHeadOutLineThick@ioCreateChar@@QAEXM@Z ; ioCreateChar::ChangeHeadOutLineThick
$LN5@SetAvata:

; 94   : }

  00152	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00157	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetAvata@io3DSkillCharIcon@@QAEXABUCHARACTER@@@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR $T505998[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?SetAvata@io3DSkillCharIcon@@QAEXABUCHARACTER@@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetAvata@io3DSkillCharIcon@@QAEXABUCHARACTER@@@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetAvata@io3DSkillCharIcon@@QAEXABUCHARACTER@@@Z ENDP	; io3DSkillCharIcon::SetAvata
PUBLIC	__$ArrayPad$
PUBLIC	??$SetTitle_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBD@Z ; ioINILoader::SetTitle_e<16>
EXTRN	__imp_?SetTitle@ioINILoader@@QAEXPBD@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$SetTitle_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBD@Z
_TEXT	SEGMENT
__t$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_t$ = 8							; size = 4
??$SetTitle_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBD@Z PROC ; ioINILoader::SetTitle_e<16>, COMDAT
; _this$ = ecx

; 188  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]

; 189  : 		_ENCSTR(t, _t);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 8c 01 00
	00		 je	 $LN96@SetTitle_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 75 01 00
	00		 je	 $LN95@SetTitle_e
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __t$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 5e 01 00
	00		 je	 $LN94@SetTitle_e
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __t$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 46 01 00
	00		 je	 $LN93@SetTitle_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __t$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 2f 01 00
	00		 je	 $LN92@SetTitle_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __t$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 18 01 00
	00		 je	 $LN91@SetTitle_e
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __t$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 02 01 00
	00		 je	 $LN90@SetTitle_e
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __t$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 ec 00 00
	00		 je	 $LN89@SetTitle_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __t$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 d5 00 00
	00		 je	 $LN88@SetTitle_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __t$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 be 00 00
	00		 je	 $LN87@SetTitle_e
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __t$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 a8 00 00
	00		 je	 $LN86@SetTitle_e
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __t$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 92 00 00
	00		 je	 $LN85@SetTitle_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 f3	 mov	 BYTE PTR __t$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	74 7f		 je	 SHORT $LN84@SetTitle_e
  000e7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ea	88 55 f4	 mov	 BYTE PTR __t$[ebp+12], dl
  000ed	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f0	84 d2		 test	 dl, dl
  000f2	74 6c		 je	 SHORT $LN83@SetTitle_e
  000f4	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f7	88 55 f5	 mov	 BYTE PTR __t$[ebp+13], dl
  000fa	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000fd	84 d2		 test	 dl, dl
  000ff	74 5a		 je	 SHORT $LN82@SetTitle_e
  00101	32 d1		 xor	 dl, cl
  00103	80 78 0f 00	 cmp	 BYTE PTR [eax+15], 0
  00107	88 55 f6	 mov	 BYTE PTR __t$[ebp+14], dl
  0010a	0f 84 a0 00 00
	00		 je	 $LN1@SetTitle_e
  00110	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00113	84 d2		 test	 dl, dl
  00115	74 3e		 je	 SHORT $LN80@SetTitle_e
  00117	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011a	88 55 f8	 mov	 BYTE PTR __t$[ebp+16], dl
  0011d	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00120	84 d2		 test	 dl, dl
  00122	74 2b		 je	 SHORT $LN79@SetTitle_e
  00124	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00127	88 55 f9	 mov	 BYTE PTR __t$[ebp+17], dl
  0012a	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0012d	84 d2		 test	 dl, dl
  0012f	74 19		 je	 SHORT $LN78@SetTitle_e
  00131	8a 40 13	 mov	 al, BYTE PTR [eax+19]
  00134	32 d1		 xor	 dl, cl
  00136	88 55 fa	 mov	 BYTE PTR __t$[ebp+18], dl
  00139	84 c0		 test	 al, al
  0013b	74 07		 je	 SHORT $LN77@SetTitle_e
  0013d	34 ea		 xor	 al, -22			; ffffffeaH
  0013f	88 45 fb	 mov	 BYTE PTR __t$[ebp+19], al
  00142	eb 6c		 jmp	 SHORT $LN1@SetTitle_e
$LN77@SetTitle_e:
  00144	c6 45 fb ea	 mov	 BYTE PTR __t$[ebp+19], -22 ; ffffffeaH
  00148	eb 66		 jmp	 SHORT $LN1@SetTitle_e
$LN78@SetTitle_e:
  0014a	88 4d fa	 mov	 BYTE PTR __t$[ebp+18], cl
  0014d	eb 61		 jmp	 SHORT $LN1@SetTitle_e
$LN79@SetTitle_e:
  0014f	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+17], -20 ; ffffffecH
  00153	eb 5b		 jmp	 SHORT $LN1@SetTitle_e
$LN80@SetTitle_e:
  00155	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+16], -19 ; ffffffedH
  00159	eb 55		 jmp	 SHORT $LN1@SetTitle_e
$LN82@SetTitle_e:
  0015b	88 4d f6	 mov	 BYTE PTR __t$[ebp+14], cl
  0015e	eb 50		 jmp	 SHORT $LN1@SetTitle_e
$LN83@SetTitle_e:
  00160	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+13], -20 ; ffffffecH
  00164	eb 4a		 jmp	 SHORT $LN1@SetTitle_e
$LN84@SetTitle_e:
  00166	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  0016a	eb 44		 jmp	 SHORT $LN1@SetTitle_e
$LN85@SetTitle_e:
  0016c	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  00170	eb 3e		 jmp	 SHORT $LN1@SetTitle_e
$LN86@SetTitle_e:
  00172	88 4d f2	 mov	 BYTE PTR __t$[ebp+10], cl
  00175	eb 39		 jmp	 SHORT $LN1@SetTitle_e
$LN87@SetTitle_e:
  00177	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  0017b	eb 33		 jmp	 SHORT $LN1@SetTitle_e
$LN88@SetTitle_e:
  0017d	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  00181	eb 2d		 jmp	 SHORT $LN1@SetTitle_e
$LN89@SetTitle_e:
  00183	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  00187	eb 27		 jmp	 SHORT $LN1@SetTitle_e
$LN90@SetTitle_e:
  00189	88 4d ee	 mov	 BYTE PTR __t$[ebp+6], cl
  0018c	eb 22		 jmp	 SHORT $LN1@SetTitle_e
$LN91@SetTitle_e:
  0018e	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  00192	eb 1c		 jmp	 SHORT $LN1@SetTitle_e
$LN92@SetTitle_e:
  00194	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00198	eb 16		 jmp	 SHORT $LN1@SetTitle_e
$LN93@SetTitle_e:
  0019a	c6 45 eb ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  0019e	eb 10		 jmp	 SHORT $LN1@SetTitle_e
$LN94@SetTitle_e:
  001a0	c6 45 ea eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  001a4	eb 0a		 jmp	 SHORT $LN1@SetTitle_e
$LN95@SetTitle_e:
  001a6	c6 45 e9 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  001aa	eb 04		 jmp	 SHORT $LN1@SetTitle_e
$LN96@SetTitle_e:
  001ac	c6 45 e8 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@SetTitle_e:
  001b0	6a 03		 push	 3
  001b2	8d 45 e8	 lea	 eax, DWORD PTR __t$[ebp]
  001b5	c6 45 f7 00	 mov	 BYTE PTR __t$[ebp+15], 0
  001b9	5a		 pop	 edx
$LL104@SetTitle_e:
  001ba	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001c0	83 c0 04	 add	 eax, 4
  001c3	4a		 dec	 edx
  001c4	75 f4		 jne	 SHORT $LL104@SetTitle_e
  001c6	6a 0c		 push	 12			; 0000000cH
  001c8	58		 pop	 eax
$LL101@SetTitle_e:
  001c9	8b c8		 mov	 ecx, eax
  001cb	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001d1	79 05		 jns	 SHORT $LN111@SetTitle_e
  001d3	49		 dec	 ecx
  001d4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001d7	41		 inc	 ecx
$LN111@SetTitle_e:
  001d8	b2 ed		 mov	 dl, -19			; ffffffedH
  001da	2a d1		 sub	 dl, cl
  001dc	30 54 05 e8	 xor	 BYTE PTR __t$[ebp+eax], dl
  001e0	40		 inc	 eax
  001e1	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001e4	7c e3		 jl	 SHORT $LL101@SetTitle_e

; 190  : 		SetTitle(_t);

  001e6	8d 45 e8	 lea	 eax, DWORD PTR __t$[ebp]
  001e9	50		 push	 eax
  001ea	8b ce		 mov	 ecx, esi
  001ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitle@ioINILoader@@QAEXPBD@Z

; 191  : 	}

  001f2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f5	33 cd		 xor	 ecx, ebp
  001f7	5e		 pop	 esi
  001f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fd	c9		 leave
  001fe	c2 04 00	 ret	 4
??$SetTitle_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBD@Z ENDP ; ioINILoader::SetTitle_e<16>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$08@ioINILoader@@QAEHAAY08$$CBDH@Z	; ioINILoader::LoadInt_e<9>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$08@ioINILoader@@QAEHAAY08$$CBDH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 9
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$08@ioINILoader@@QAEHAAY08$$CBDH@Z PROC	; ioINILoader::LoadInt_e<9>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	84 d2		 test	 dl, dl
  00017	0f 84 ee 00 00
	00		 je	 $LN96@LoadInt_e
  0001d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00020	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00023	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00026	84 d2		 test	 dl, dl
  00028	0f 84 d7 00 00
	00		 je	 $LN95@LoadInt_e
  0002e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00031	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00034	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00037	84 d2		 test	 dl, dl
  00039	0f 84 c0 00 00
	00		 je	 $LN94@LoadInt_e
  0003f	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00042	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00045	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00048	84 d2		 test	 dl, dl
  0004a	0f 84 a9 00 00
	00		 je	 $LN93@LoadInt_e
  00050	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00053	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00056	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00059	84 d2		 test	 dl, dl
  0005b	0f 84 92 00 00
	00		 je	 $LN92@LoadInt_e
  00061	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00064	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00067	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006a	84 d2		 test	 dl, dl
  0006c	74 7f		 je	 SHORT $LN91@LoadInt_e
  0006e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00071	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00074	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00077	84 d2		 test	 dl, dl
  00079	74 6c		 je	 SHORT $LN90@LoadInt_e
  0007b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0007e	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00081	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00084	84 d2		 test	 dl, dl
  00086	74 59		 je	 SHORT $LN89@LoadInt_e
  00088	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0008b	80 78 08 00	 cmp	 BYTE PTR [eax+8], 0
  0008f	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  00092	74 7b		 je	 SHORT $LN1@LoadInt_e
  00094	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  00097	84 d2		 test	 dl, dl
  00099	74 40		 je	 SHORT $LN87@LoadInt_e
  0009b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0009e	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000a1	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000a4	84 d2		 test	 dl, dl
  000a6	74 2d		 je	 SHORT $LN86@LoadInt_e
  000a8	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ab	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000ae	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000b1	84 d2		 test	 dl, dl
  000b3	74 1a		 je	 SHORT $LN85@LoadInt_e
  000b5	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  000b8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000bb	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000be	84 c0		 test	 al, al
  000c0	74 07		 je	 SHORT $LN84@LoadInt_e
  000c2	34 ed		 xor	 al, -19			; ffffffedH
  000c4	88 45 f8	 mov	 BYTE PTR __k$[ebp+12], al
  000c7	eb 46		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  000c9	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  000cd	eb 40		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  000cf	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  000d3	eb 3a		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  000d5	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  000d9	eb 34		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  000db	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  000df	eb 2e		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  000e1	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  000e5	eb 28		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  000e7	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  000eb	eb 22		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  000ed	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  000f1	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  000f3	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  000f7	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  000f9	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  000fd	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  000ff	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00103	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  00105	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00109	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  0010b	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  0010f	6a 02		 push	 2
  00111	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00114	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+8], 0
  00118	5a		 pop	 edx
$LL104@LoadInt_e:
  00119	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0011f	83 c0 04	 add	 eax, 4
  00122	4a		 dec	 edx
  00123	75 f4		 jne	 SHORT $LL104@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  00125	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00128	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0012b	50		 push	 eax
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00132	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00135	33 cd		 xor	 ecx, ebp
  00137	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013c	c9		 leave
  0013d	c2 08 00	 ret	 8
??$LoadInt_e@$08@ioINILoader@@QAEHAAY08$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<9>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0M@@ioINILoader@@QAEXAAY0M@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<12>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0M@@ioINILoader@@QAEXAAY0M@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -24					; size = 4
__k$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0M@@ioINILoader@@QAEXAAY0M@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<12>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 32 01 00
	00		 je	 $LN96@LoadString
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 1b 01 00
	00		 je	 $LN95@LoadString
  00039	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003c	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  0003f	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00042	84 d2		 test	 dl, dl
  00044	0f 84 04 01 00
	00		 je	 $LN94@LoadString
  0004a	b1 eb		 mov	 cl, -21			; ffffffebH
  0004c	32 d1		 xor	 dl, cl
  0004e	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 ec 00 00
	00		 je	 $LN93@LoadString
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 d5 00 00
	00		 je	 $LN92@LoadString
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 be 00 00
	00		 je	 $LN91@LoadString
  0007e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00081	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00084	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00087	84 d2		 test	 dl, dl
  00089	0f 84 a8 00 00
	00		 je	 $LN90@LoadString
  0008f	32 d1		 xor	 dl, cl
  00091	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 92 00 00
	00		 je	 $LN89@LoadString
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	74 7f		 je	 SHORT $LN88@LoadString
  000ac	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000af	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000b2	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b5	84 d2		 test	 dl, dl
  000b7	74 6c		 je	 SHORT $LN87@LoadString
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	74 5a		 je	 SHORT $LN86@LoadString
  000c6	32 d1		 xor	 dl, cl
  000c8	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000cc	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	0f 84 89 00 00
	00		 je	 $LN111@LoadString
  000d5	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d8	84 d2		 test	 dl, dl
  000da	74 3e		 je	 SHORT $LN84@LoadString
  000dc	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000df	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000e2	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000e5	84 d2		 test	 dl, dl
  000e7	74 2b		 je	 SHORT $LN83@LoadString
  000e9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ec	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000ef	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f2	84 d2		 test	 dl, dl
  000f4	74 19		 je	 SHORT $LN82@LoadString
  000f6	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000f9	32 d1		 xor	 dl, cl
  000fb	88 55 fa	 mov	 BYTE PTR __k$[ebp+14], dl
  000fe	84 c0		 test	 al, al
  00100	74 07		 je	 SHORT $LN81@LoadString
  00102	34 ea		 xor	 al, -22			; ffffffeaH
  00104	88 45 fb	 mov	 BYTE PTR __k$[ebp+15], al
  00107	eb 55		 jmp	 SHORT $LN111@LoadString
$LN81@LoadString:
  00109	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0010d	eb 4f		 jmp	 SHORT $LN111@LoadString
$LN82@LoadString:
  0010f	88 4d fa	 mov	 BYTE PTR __k$[ebp+14], cl
  00112	eb 4a		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  00114	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00118	eb 44		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  0011a	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0011e	eb 3e		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  00120	88 4d f6	 mov	 BYTE PTR __k$[ebp+10], cl
  00123	eb 39		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  00125	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00129	eb 33		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  0012b	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0012f	eb 2d		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  00131	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00135	eb 27		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  00137	88 4d f2	 mov	 BYTE PTR __k$[ebp+6], cl
  0013a	eb 22		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  0013c	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00140	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  00142	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00146	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  00148	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0014c	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  0014e	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00152	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  00154	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00158	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  0015a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  0015e	6a 02		 push	 2
  00160	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00163	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+11], 0
  00167	5a		 pop	 edx
$LL104@LoadString:
  00168	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0016e	83 c0 04	 add	 eax, 4
  00171	4a		 dec	 edx
  00172	75 f4		 jne	 SHORT $LL104@LoadString
  00174	6a 08		 push	 8
  00176	58		 pop	 eax
$LL101@LoadString:
  00177	8b c8		 mov	 ecx, eax
  00179	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0017f	79 05		 jns	 SHORT $LN112@LoadString
  00181	49		 dec	 ecx
  00182	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00185	41		 inc	 ecx
$LN112@LoadString:
  00186	b2 ed		 mov	 dl, -19			; ffffffedH
  00188	2a d1		 sub	 dl, cl
  0018a	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  0018e	40		 inc	 eax
  0018f	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00192	7c e3		 jl	 SHORT $LL101@LoadString

; 163  : 		LoadString(_k, d, b, i);

  00194	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00197	8b 4d e8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0019a	57		 push	 edi
  0019b	56		 push	 esi
  0019c	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0019f	50		 push	 eax
  001a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  001a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a9	5f		 pop	 edi
  001aa	33 cd		 xor	 ecx, ebp
  001ac	5e		 pop	 esi
  001ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b2	c9		 leave
  001b3	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0M@@ioINILoader@@QAEXAAY0M@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<12>
_TEXT	ENDS
PUBLIC	??$encodeString@$0BD@@ioINILoader_e@@AAEPADAAY0BD@$$CBDPAD@Z ; ioINILoader_e::encodeString<19>
; Function compile flags: /Ogsp
;	COMDAT ??$encodeString@$0BD@@ioINILoader_e@@AAEPADAAY0BD@$$CBDPAD@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_e$ = 12						; size = 4
??$encodeString@$0BD@@ioINILoader_e@@AAEPADAAY0BD@$$CBDPAD@Z PROC ; ioINILoader_e::encodeString<19>, COMDAT
; _this$ = ecx

; 215  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 216  : 		__ENCSTR(s, e);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00006	8a 11		 mov	 dl, BYTE PTR [ecx]
  00008	8b 45 0c	 mov	 eax, DWORD PTR _e$[ebp]
  0000b	53		 push	 ebx
  0000c	84 d2		 test	 dl, dl
  0000e	0f 84 6a 04 00
	00		 je	 $LN96@encodeStri
  00014	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00017	88 10		 mov	 BYTE PTR [eax], dl
  00019	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  0001c	84 d2		 test	 dl, dl
  0001e	0f 84 54 04 00
	00		 je	 $LN95@encodeStri
  00024	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00027	88 50 01	 mov	 BYTE PTR [eax+1], dl
  0002a	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  0002d	84 d2		 test	 dl, dl
  0002f	0f 84 3d 04 00
	00		 je	 $LN94@encodeStri
  00035	b3 eb		 mov	 bl, -21			; ffffffebH
  00037	32 d3		 xor	 dl, bl
  00039	88 50 02	 mov	 BYTE PTR [eax+2], dl
  0003c	8a 51 03	 mov	 dl, BYTE PTR [ecx+3]
  0003f	84 d2		 test	 dl, dl
  00041	0f 84 25 04 00
	00		 je	 $LN93@encodeStri
  00047	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0004a	88 50 03	 mov	 BYTE PTR [eax+3], dl
  0004d	8a 51 04	 mov	 dl, BYTE PTR [ecx+4]
  00050	84 d2		 test	 dl, dl
  00052	0f 84 0e 04 00
	00		 je	 $LN92@encodeStri
  00058	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0005b	88 50 04	 mov	 BYTE PTR [eax+4], dl
  0005e	8a 51 05	 mov	 dl, BYTE PTR [ecx+5]
  00061	84 d2		 test	 dl, dl
  00063	0f 84 f7 03 00
	00		 je	 $LN91@encodeStri
  00069	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0006c	88 50 05	 mov	 BYTE PTR [eax+5], dl
  0006f	8a 51 06	 mov	 dl, BYTE PTR [ecx+6]
  00072	84 d2		 test	 dl, dl
  00074	0f 84 e1 03 00
	00		 je	 $LN90@encodeStri
  0007a	32 d3		 xor	 dl, bl
  0007c	88 50 06	 mov	 BYTE PTR [eax+6], dl
  0007f	8a 51 07	 mov	 dl, BYTE PTR [ecx+7]
  00082	84 d2		 test	 dl, dl
  00084	0f 84 cb 03 00
	00		 je	 $LN89@encodeStri
  0008a	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0008d	88 50 07	 mov	 BYTE PTR [eax+7], dl
  00090	8a 51 08	 mov	 dl, BYTE PTR [ecx+8]
  00093	84 d2		 test	 dl, dl
  00095	0f 84 b4 03 00
	00		 je	 $LN88@encodeStri
  0009b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0009e	88 50 08	 mov	 BYTE PTR [eax+8], dl
  000a1	8a 51 09	 mov	 dl, BYTE PTR [ecx+9]
  000a4	84 d2		 test	 dl, dl
  000a6	0f 84 9d 03 00
	00		 je	 $LN87@encodeStri
  000ac	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000af	88 50 09	 mov	 BYTE PTR [eax+9], dl
  000b2	8a 51 0a	 mov	 dl, BYTE PTR [ecx+10]
  000b5	84 d2		 test	 dl, dl
  000b7	0f 84 87 03 00
	00		 je	 $LN86@encodeStri
  000bd	32 d3		 xor	 dl, bl
  000bf	88 50 0a	 mov	 BYTE PTR [eax+10], dl
  000c2	8a 51 0b	 mov	 dl, BYTE PTR [ecx+11]
  000c5	84 d2		 test	 dl, dl
  000c7	0f 84 71 03 00
	00		 je	 $LN85@encodeStri
  000cd	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d0	88 50 0b	 mov	 BYTE PTR [eax+11], dl
  000d3	8a 51 0c	 mov	 dl, BYTE PTR [ecx+12]
  000d6	84 d2		 test	 dl, dl
  000d8	0f 84 5a 03 00
	00		 je	 $LN84@encodeStri
  000de	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e1	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  000e4	8a 51 0d	 mov	 dl, BYTE PTR [ecx+13]
  000e7	84 d2		 test	 dl, dl
  000e9	0f 84 43 03 00
	00		 je	 $LN83@encodeStri
  000ef	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f2	88 50 0d	 mov	 BYTE PTR [eax+13], dl
  000f5	8a 51 0e	 mov	 dl, BYTE PTR [ecx+14]
  000f8	84 d2		 test	 dl, dl
  000fa	0f 84 2d 03 00
	00		 je	 $LN82@encodeStri
  00100	32 d3		 xor	 dl, bl
  00102	88 50 0e	 mov	 BYTE PTR [eax+14], dl
  00105	8a 51 0f	 mov	 dl, BYTE PTR [ecx+15]
  00108	84 d2		 test	 dl, dl
  0010a	0f 84 17 03 00
	00		 je	 $LN81@encodeStri
  00110	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00113	88 50 0f	 mov	 BYTE PTR [eax+15], dl
  00116	8a 51 10	 mov	 dl, BYTE PTR [ecx+16]
  00119	84 d2		 test	 dl, dl
  0011b	0f 84 00 03 00
	00		 je	 $LN80@encodeStri
  00121	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00124	88 50 10	 mov	 BYTE PTR [eax+16], dl
  00127	8a 51 11	 mov	 dl, BYTE PTR [ecx+17]
  0012a	84 d2		 test	 dl, dl
  0012c	0f 84 e9 02 00
	00		 je	 $LN79@encodeStri
  00132	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00135	88 50 11	 mov	 BYTE PTR [eax+17], dl
  00138	8a 51 12	 mov	 dl, BYTE PTR [ecx+18]
  0013b	84 d2		 test	 dl, dl
  0013d	0f 84 d3 02 00
	00		 je	 $LN78@encodeStri
  00143	32 d3		 xor	 dl, bl
  00145	88 50 12	 mov	 BYTE PTR [eax+18], dl
  00148	8a 51 13	 mov	 dl, BYTE PTR [ecx+19]
  0014b	84 d2		 test	 dl, dl
  0014d	0f 84 bd 02 00
	00		 je	 $LN77@encodeStri
  00153	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00156	88 50 13	 mov	 BYTE PTR [eax+19], dl
  00159	8a 51 14	 mov	 dl, BYTE PTR [ecx+20]
  0015c	84 d2		 test	 dl, dl
  0015e	0f 84 a6 02 00
	00		 je	 $LN76@encodeStri
  00164	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00167	88 50 14	 mov	 BYTE PTR [eax+20], dl
  0016a	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  0016d	84 d2		 test	 dl, dl
  0016f	0f 84 8f 02 00
	00		 je	 $LN75@encodeStri
  00175	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00178	88 50 15	 mov	 BYTE PTR [eax+21], dl
  0017b	8a 51 16	 mov	 dl, BYTE PTR [ecx+22]
  0017e	84 d2		 test	 dl, dl
  00180	0f 84 79 02 00
	00		 je	 $LN74@encodeStri
  00186	32 d3		 xor	 dl, bl
  00188	88 50 16	 mov	 BYTE PTR [eax+22], dl
  0018b	8a 51 17	 mov	 dl, BYTE PTR [ecx+23]
  0018e	84 d2		 test	 dl, dl
  00190	0f 84 60 02 00
	00		 je	 $LN73@encodeStri
  00196	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00199	88 50 17	 mov	 BYTE PTR [eax+23], dl
  0019c	8a 51 18	 mov	 dl, BYTE PTR [ecx+24]
  0019f	84 d2		 test	 dl, dl
  001a1	0f 84 46 02 00
	00		 je	 $LN72@encodeStri
  001a7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001aa	88 50 18	 mov	 BYTE PTR [eax+24], dl
  001ad	8a 51 19	 mov	 dl, BYTE PTR [ecx+25]
  001b0	84 d2		 test	 dl, dl
  001b2	0f 84 2c 02 00
	00		 je	 $LN71@encodeStri
  001b8	80 f2 ec	 xor	 dl, -20			; ffffffecH
  001bb	88 50 19	 mov	 BYTE PTR [eax+25], dl
  001be	8a 51 1a	 mov	 dl, BYTE PTR [ecx+26]
  001c1	84 d2		 test	 dl, dl
  001c3	0f 84 13 02 00
	00		 je	 $LN70@encodeStri
  001c9	32 d3		 xor	 dl, bl
  001cb	88 50 1a	 mov	 BYTE PTR [eax+26], dl
  001ce	8a 51 1b	 mov	 dl, BYTE PTR [ecx+27]
  001d1	84 d2		 test	 dl, dl
  001d3	0f 84 fa 01 00
	00		 je	 $LN69@encodeStri
  001d9	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001dc	88 50 1b	 mov	 BYTE PTR [eax+27], dl
  001df	8a 51 1c	 mov	 dl, BYTE PTR [ecx+28]
  001e2	84 d2		 test	 dl, dl
  001e4	0f 84 e0 01 00
	00		 je	 $LN68@encodeStri
  001ea	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001ed	88 50 1c	 mov	 BYTE PTR [eax+28], dl
  001f0	8a 51 1d	 mov	 dl, BYTE PTR [ecx+29]
  001f3	84 d2		 test	 dl, dl
  001f5	0f 84 c6 01 00
	00		 je	 $LN67@encodeStri
  001fb	80 f2 ec	 xor	 dl, -20			; ffffffecH
  001fe	88 50 1d	 mov	 BYTE PTR [eax+29], dl
  00201	8a 51 1e	 mov	 dl, BYTE PTR [ecx+30]
  00204	84 d2		 test	 dl, dl
  00206	0f 84 ad 01 00
	00		 je	 $LN66@encodeStri
  0020c	32 d3		 xor	 dl, bl
  0020e	88 50 1e	 mov	 BYTE PTR [eax+30], dl
  00211	8a 51 1f	 mov	 dl, BYTE PTR [ecx+31]
  00214	84 d2		 test	 dl, dl
  00216	0f 84 94 01 00
	00		 je	 $LN65@encodeStri
  0021c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0021f	88 50 1f	 mov	 BYTE PTR [eax+31], dl
  00222	8a 51 20	 mov	 dl, BYTE PTR [ecx+32]
  00225	84 d2		 test	 dl, dl
  00227	0f 84 7a 01 00
	00		 je	 $LN64@encodeStri
  0022d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00230	88 50 20	 mov	 BYTE PTR [eax+32], dl
  00233	8a 51 21	 mov	 dl, BYTE PTR [ecx+33]
  00236	84 d2		 test	 dl, dl
  00238	0f 84 60 01 00
	00		 je	 $LN63@encodeStri
  0023e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00241	88 50 21	 mov	 BYTE PTR [eax+33], dl
  00244	8a 51 22	 mov	 dl, BYTE PTR [ecx+34]
  00247	84 d2		 test	 dl, dl
  00249	0f 84 47 01 00
	00		 je	 $LN62@encodeStri
  0024f	32 d3		 xor	 dl, bl
  00251	88 50 22	 mov	 BYTE PTR [eax+34], dl
  00254	8a 51 23	 mov	 dl, BYTE PTR [ecx+35]
  00257	84 d2		 test	 dl, dl
  00259	0f 84 2e 01 00
	00		 je	 $LN61@encodeStri
  0025f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00262	88 50 23	 mov	 BYTE PTR [eax+35], dl
  00265	8a 51 24	 mov	 dl, BYTE PTR [ecx+36]
  00268	84 d2		 test	 dl, dl
  0026a	0f 84 14 01 00
	00		 je	 $LN60@encodeStri
  00270	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00273	88 50 24	 mov	 BYTE PTR [eax+36], dl
  00276	8a 51 25	 mov	 dl, BYTE PTR [ecx+37]
  00279	84 d2		 test	 dl, dl
  0027b	0f 84 fa 00 00
	00		 je	 $LN59@encodeStri
  00281	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00284	88 50 25	 mov	 BYTE PTR [eax+37], dl
  00287	8a 51 26	 mov	 dl, BYTE PTR [ecx+38]
  0028a	84 d2		 test	 dl, dl
  0028c	0f 84 e1 00 00
	00		 je	 $LN58@encodeStri
  00292	32 d3		 xor	 dl, bl
  00294	88 50 26	 mov	 BYTE PTR [eax+38], dl
  00297	8a 51 27	 mov	 dl, BYTE PTR [ecx+39]
  0029a	84 d2		 test	 dl, dl
  0029c	0f 84 c8 00 00
	00		 je	 $LN57@encodeStri
  002a2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  002a5	88 50 27	 mov	 BYTE PTR [eax+39], dl
  002a8	8a 51 28	 mov	 dl, BYTE PTR [ecx+40]
  002ab	84 d2		 test	 dl, dl
  002ad	0f 84 ae 00 00
	00		 je	 $LN56@encodeStri
  002b3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  002b6	88 50 28	 mov	 BYTE PTR [eax+40], dl
  002b9	8a 51 29	 mov	 dl, BYTE PTR [ecx+41]
  002bc	84 d2		 test	 dl, dl
  002be	0f 84 94 00 00
	00		 je	 $LN55@encodeStri
  002c4	80 f2 ec	 xor	 dl, -20			; ffffffecH
  002c7	88 50 29	 mov	 BYTE PTR [eax+41], dl
  002ca	8a 51 2a	 mov	 dl, BYTE PTR [ecx+42]
  002cd	84 d2		 test	 dl, dl
  002cf	74 7f		 je	 SHORT $LN54@encodeStri
  002d1	32 d3		 xor	 dl, bl
  002d3	88 50 2a	 mov	 BYTE PTR [eax+42], dl
  002d6	8a 51 2b	 mov	 dl, BYTE PTR [ecx+43]
  002d9	84 d2		 test	 dl, dl
  002db	74 6a		 je	 SHORT $LN53@encodeStri
  002dd	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  002e0	88 50 2b	 mov	 BYTE PTR [eax+43], dl
  002e3	8a 51 2c	 mov	 dl, BYTE PTR [ecx+44]
  002e6	84 d2		 test	 dl, dl
  002e8	74 54		 je	 SHORT $LN52@encodeStri
  002ea	80 f2 ed	 xor	 dl, -19			; ffffffedH
  002ed	88 50 2c	 mov	 BYTE PTR [eax+44], dl
  002f0	8a 51 2d	 mov	 dl, BYTE PTR [ecx+45]
  002f3	84 d2		 test	 dl, dl
  002f5	74 3e		 je	 SHORT $LN51@encodeStri
  002f7	80 f2 ec	 xor	 dl, -20			; ffffffecH
  002fa	88 50 2d	 mov	 BYTE PTR [eax+45], dl
  002fd	8a 51 2e	 mov	 dl, BYTE PTR [ecx+46]
  00300	84 d2		 test	 dl, dl
  00302	74 29		 je	 SHORT $LN50@encodeStri
  00304	32 d3		 xor	 dl, bl
  00306	88 50 2e	 mov	 BYTE PTR [eax+46], dl
  00309	8a 51 2f	 mov	 dl, BYTE PTR [ecx+47]
  0030c	84 d2		 test	 dl, dl
  0030e	74 14		 je	 SHORT $LN49@encodeStri
  00310	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00313	88 50 2f	 mov	 BYTE PTR [eax+47], dl
  00316	8a 49 30	 mov	 cl, BYTE PTR [ecx+48]
  00319	80 f1 ed	 xor	 cl, -19			; ffffffedH
  0031c	88 48 30	 mov	 BYTE PTR [eax+48], cl
  0031f	e9 5d 01 00 00	 jmp	 $LN1@encodeStri
$LN49@encodeStri:
  00324	c6 40 2f ea	 mov	 BYTE PTR [eax+47], -22	; ffffffeaH
  00328	e9 54 01 00 00	 jmp	 $LN1@encodeStri
$LN50@encodeStri:
  0032d	88 58 2e	 mov	 BYTE PTR [eax+46], bl
  00330	e9 4c 01 00 00	 jmp	 $LN1@encodeStri
$LN51@encodeStri:
  00335	c6 40 2d ec	 mov	 BYTE PTR [eax+45], -20	; ffffffecH
  00339	e9 43 01 00 00	 jmp	 $LN1@encodeStri
$LN52@encodeStri:
  0033e	c6 40 2c ed	 mov	 BYTE PTR [eax+44], -19	; ffffffedH
  00342	e9 3a 01 00 00	 jmp	 $LN1@encodeStri
$LN53@encodeStri:
  00347	c6 40 2b ea	 mov	 BYTE PTR [eax+43], -22	; ffffffeaH
  0034b	e9 31 01 00 00	 jmp	 $LN1@encodeStri
$LN54@encodeStri:
  00350	88 58 2a	 mov	 BYTE PTR [eax+42], bl
  00353	e9 29 01 00 00	 jmp	 $LN1@encodeStri
$LN55@encodeStri:
  00358	c6 40 29 ec	 mov	 BYTE PTR [eax+41], -20	; ffffffecH
  0035c	e9 20 01 00 00	 jmp	 $LN1@encodeStri
$LN56@encodeStri:
  00361	c6 40 28 ed	 mov	 BYTE PTR [eax+40], -19	; ffffffedH
  00365	e9 17 01 00 00	 jmp	 $LN1@encodeStri
$LN57@encodeStri:
  0036a	c6 40 27 ea	 mov	 BYTE PTR [eax+39], -22	; ffffffeaH
  0036e	e9 0e 01 00 00	 jmp	 $LN1@encodeStri
$LN58@encodeStri:
  00373	88 58 26	 mov	 BYTE PTR [eax+38], bl
  00376	e9 06 01 00 00	 jmp	 $LN1@encodeStri
$LN59@encodeStri:
  0037b	c6 40 25 ec	 mov	 BYTE PTR [eax+37], -20	; ffffffecH
  0037f	e9 fd 00 00 00	 jmp	 $LN1@encodeStri
$LN60@encodeStri:
  00384	c6 40 24 ed	 mov	 BYTE PTR [eax+36], -19	; ffffffedH
  00388	e9 f4 00 00 00	 jmp	 $LN1@encodeStri
$LN61@encodeStri:
  0038d	c6 40 23 ea	 mov	 BYTE PTR [eax+35], -22	; ffffffeaH
  00391	e9 eb 00 00 00	 jmp	 $LN1@encodeStri
$LN62@encodeStri:
  00396	88 58 22	 mov	 BYTE PTR [eax+34], bl
  00399	e9 e3 00 00 00	 jmp	 $LN1@encodeStri
$LN63@encodeStri:
  0039e	c6 40 21 ec	 mov	 BYTE PTR [eax+33], -20	; ffffffecH
  003a2	e9 da 00 00 00	 jmp	 $LN1@encodeStri
$LN64@encodeStri:
  003a7	c6 40 20 ed	 mov	 BYTE PTR [eax+32], -19	; ffffffedH
  003ab	e9 d1 00 00 00	 jmp	 $LN1@encodeStri
$LN65@encodeStri:
  003b0	c6 40 1f ea	 mov	 BYTE PTR [eax+31], -22	; ffffffeaH
  003b4	e9 c8 00 00 00	 jmp	 $LN1@encodeStri
$LN66@encodeStri:
  003b9	88 58 1e	 mov	 BYTE PTR [eax+30], bl
  003bc	e9 c0 00 00 00	 jmp	 $LN1@encodeStri
$LN67@encodeStri:
  003c1	c6 40 1d ec	 mov	 BYTE PTR [eax+29], -20	; ffffffecH
  003c5	e9 b7 00 00 00	 jmp	 $LN1@encodeStri
$LN68@encodeStri:
  003ca	c6 40 1c ed	 mov	 BYTE PTR [eax+28], -19	; ffffffedH
  003ce	e9 ae 00 00 00	 jmp	 $LN1@encodeStri
$LN69@encodeStri:
  003d3	c6 40 1b ea	 mov	 BYTE PTR [eax+27], -22	; ffffffeaH
  003d7	e9 a5 00 00 00	 jmp	 $LN1@encodeStri
$LN70@encodeStri:
  003dc	88 58 1a	 mov	 BYTE PTR [eax+26], bl
  003df	e9 9d 00 00 00	 jmp	 $LN1@encodeStri
$LN71@encodeStri:
  003e4	c6 40 19 ec	 mov	 BYTE PTR [eax+25], -20	; ffffffecH
  003e8	e9 94 00 00 00	 jmp	 $LN1@encodeStri
$LN72@encodeStri:
  003ed	c6 40 18 ed	 mov	 BYTE PTR [eax+24], -19	; ffffffedH
  003f1	e9 8b 00 00 00	 jmp	 $LN1@encodeStri
$LN73@encodeStri:
  003f6	c6 40 17 ea	 mov	 BYTE PTR [eax+23], -22	; ffffffeaH
  003fa	e9 82 00 00 00	 jmp	 $LN1@encodeStri
$LN74@encodeStri:
  003ff	88 58 16	 mov	 BYTE PTR [eax+22], bl
  00402	eb 7d		 jmp	 SHORT $LN1@encodeStri
$LN75@encodeStri:
  00404	c6 40 15 ec	 mov	 BYTE PTR [eax+21], -20	; ffffffecH
  00408	eb 77		 jmp	 SHORT $LN1@encodeStri
$LN76@encodeStri:
  0040a	c6 40 14 ed	 mov	 BYTE PTR [eax+20], -19	; ffffffedH
  0040e	eb 71		 jmp	 SHORT $LN1@encodeStri
$LN77@encodeStri:
  00410	c6 40 13 ea	 mov	 BYTE PTR [eax+19], -22	; ffffffeaH
  00414	eb 6b		 jmp	 SHORT $LN1@encodeStri
$LN78@encodeStri:
  00416	88 58 12	 mov	 BYTE PTR [eax+18], bl
  00419	eb 66		 jmp	 SHORT $LN1@encodeStri
$LN79@encodeStri:
  0041b	c6 40 11 ec	 mov	 BYTE PTR [eax+17], -20	; ffffffecH
  0041f	eb 60		 jmp	 SHORT $LN1@encodeStri
$LN80@encodeStri:
  00421	c6 40 10 ed	 mov	 BYTE PTR [eax+16], -19	; ffffffedH
  00425	eb 5a		 jmp	 SHORT $LN1@encodeStri
$LN81@encodeStri:
  00427	c6 40 0f ea	 mov	 BYTE PTR [eax+15], -22	; ffffffeaH
  0042b	eb 54		 jmp	 SHORT $LN1@encodeStri
$LN82@encodeStri:
  0042d	88 58 0e	 mov	 BYTE PTR [eax+14], bl
  00430	eb 4f		 jmp	 SHORT $LN1@encodeStri
$LN83@encodeStri:
  00432	c6 40 0d ec	 mov	 BYTE PTR [eax+13], -20	; ffffffecH
  00436	eb 49		 jmp	 SHORT $LN1@encodeStri
$LN84@encodeStri:
  00438	c6 40 0c ed	 mov	 BYTE PTR [eax+12], -19	; ffffffedH
  0043c	eb 43		 jmp	 SHORT $LN1@encodeStri
$LN85@encodeStri:
  0043e	c6 40 0b ea	 mov	 BYTE PTR [eax+11], -22	; ffffffeaH
  00442	eb 3d		 jmp	 SHORT $LN1@encodeStri
$LN86@encodeStri:
  00444	88 58 0a	 mov	 BYTE PTR [eax+10], bl
  00447	eb 38		 jmp	 SHORT $LN1@encodeStri
$LN87@encodeStri:
  00449	c6 40 09 ec	 mov	 BYTE PTR [eax+9], -20	; ffffffecH
  0044d	eb 32		 jmp	 SHORT $LN1@encodeStri
$LN88@encodeStri:
  0044f	c6 40 08 ed	 mov	 BYTE PTR [eax+8], -19	; ffffffedH
  00453	eb 2c		 jmp	 SHORT $LN1@encodeStri
$LN89@encodeStri:
  00455	c6 40 07 ea	 mov	 BYTE PTR [eax+7], -22	; ffffffeaH
  00459	eb 26		 jmp	 SHORT $LN1@encodeStri
$LN90@encodeStri:
  0045b	88 58 06	 mov	 BYTE PTR [eax+6], bl
  0045e	eb 21		 jmp	 SHORT $LN1@encodeStri
$LN91@encodeStri:
  00460	c6 40 05 ec	 mov	 BYTE PTR [eax+5], -20	; ffffffecH
  00464	eb 1b		 jmp	 SHORT $LN1@encodeStri
$LN92@encodeStri:
  00466	c6 40 04 ed	 mov	 BYTE PTR [eax+4], -19	; ffffffedH
  0046a	eb 15		 jmp	 SHORT $LN1@encodeStri
$LN93@encodeStri:
  0046c	c6 40 03 ea	 mov	 BYTE PTR [eax+3], -22	; ffffffeaH
  00470	eb 0f		 jmp	 SHORT $LN1@encodeStri
$LN94@encodeStri:
  00472	c6 40 02 eb	 mov	 BYTE PTR [eax+2], -21	; ffffffebH
  00476	eb 09		 jmp	 SHORT $LN1@encodeStri
$LN95@encodeStri:
  00478	c6 40 01 ec	 mov	 BYTE PTR [eax+1], -20	; ffffffecH
  0047c	eb 03		 jmp	 SHORT $LN1@encodeStri
$LN96@encodeStri:
  0047e	c6 00 ed	 mov	 BYTE PTR [eax], -19	; ffffffedH
$LN1@encodeStri:
  00481	6a 04		 push	 4
  00483	5a		 pop	 edx
  00484	8b c8		 mov	 ecx, eax
  00486	c6 40 12 00	 mov	 BYTE PTR [eax+18], 0
  0048a	5b		 pop	 ebx
$LL104@encodeStri:
  0048b	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  00491	83 c1 04	 add	 ecx, 4
  00494	4a		 dec	 edx
  00495	75 f4		 jne	 SHORT $LL104@encodeStri
  00497	56		 push	 esi
  00498	6a 10		 push	 16			; 00000010H
  0049a	5e		 pop	 esi
$LL101@encodeStri:
  0049b	8b ce		 mov	 ecx, esi
  0049d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  004a3	79 05		 jns	 SHORT $LN111@encodeStri
  004a5	49		 dec	 ecx
  004a6	83 c9 fc	 or	 ecx, -4			; fffffffcH
  004a9	41		 inc	 ecx
$LN111@encodeStri:
  004aa	b2 ed		 mov	 dl, -19			; ffffffedH
  004ac	2a d1		 sub	 dl, cl
  004ae	30 14 06	 xor	 BYTE PTR [esi+eax], dl
  004b1	46		 inc	 esi
  004b2	83 fe 12	 cmp	 esi, 18			; 00000012H
  004b5	7c e4		 jl	 SHORT $LL101@encodeStri
  004b7	5e		 pop	 esi

; 217  : 		return e;
; 218  : 	}

  004b8	5d		 pop	 ebp
  004b9	c2 08 00	 ret	 8
??$encodeString@$0BD@@ioINILoader_e@@AAEPADAAY0BD@$$CBDPAD@Z ENDP ; ioINILoader_e::encodeString<19>
_TEXT	ENDS
PUBLIC	??$?0$0BD@@ioINILoader_e@@QAE@AAY0BD@$$CBD_N@Z	; ioINILoader_e::ioINILoader_e<19>
EXTRN	__imp_??0ioINILoader@@QAE@PBD_N@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$?0$0BD@@ioINILoader_e@@QAE@AAY0BD@$$CBD_N@Z
_TEXT	SEGMENT
_fn$ = 8						; size = 4
_b$ = 12						; size = 1
??$?0$0BD@@ioINILoader_e@@QAE@AAY0BD@$$CBD_N@Z PROC	; ioINILoader_e::ioINILoader_e<19>, COMDAT
; _this$ = ecx

; 224  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _fn$[ebp]
  0000b	8a 11		 mov	 dl, BYTE PTR [ecx]
  0000d	8d 87 50 03 00
	00		 lea	 eax, DWORD PTR [edi+848]
  00013	84 d2		 test	 dl, dl
  00015	0f 84 6a 04 00
	00		 je	 $LN99@ioINILoade
  0001b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0001e	88 10		 mov	 BYTE PTR [eax], dl
  00020	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00023	84 d2		 test	 dl, dl
  00025	0f 84 54 04 00
	00		 je	 $LN98@ioINILoade
  0002b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0002e	88 50 01	 mov	 BYTE PTR [eax+1], dl
  00031	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  00034	84 d2		 test	 dl, dl
  00036	0f 84 3d 04 00
	00		 je	 $LN97@ioINILoade
  0003c	b3 eb		 mov	 bl, -21			; ffffffebH
  0003e	32 d3		 xor	 dl, bl
  00040	88 50 02	 mov	 BYTE PTR [eax+2], dl
  00043	8a 51 03	 mov	 dl, BYTE PTR [ecx+3]
  00046	84 d2		 test	 dl, dl
  00048	0f 84 25 04 00
	00		 je	 $LN96@ioINILoade
  0004e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00051	88 50 03	 mov	 BYTE PTR [eax+3], dl
  00054	8a 51 04	 mov	 dl, BYTE PTR [ecx+4]
  00057	84 d2		 test	 dl, dl
  00059	0f 84 0e 04 00
	00		 je	 $LN95@ioINILoade
  0005f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00062	88 50 04	 mov	 BYTE PTR [eax+4], dl
  00065	8a 51 05	 mov	 dl, BYTE PTR [ecx+5]
  00068	84 d2		 test	 dl, dl
  0006a	0f 84 f7 03 00
	00		 je	 $LN94@ioINILoade
  00070	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00073	88 50 05	 mov	 BYTE PTR [eax+5], dl
  00076	8a 51 06	 mov	 dl, BYTE PTR [ecx+6]
  00079	84 d2		 test	 dl, dl
  0007b	0f 84 e1 03 00
	00		 je	 $LN93@ioINILoade
  00081	32 d3		 xor	 dl, bl
  00083	88 50 06	 mov	 BYTE PTR [eax+6], dl
  00086	8a 51 07	 mov	 dl, BYTE PTR [ecx+7]
  00089	84 d2		 test	 dl, dl
  0008b	0f 84 cb 03 00
	00		 je	 $LN92@ioINILoade
  00091	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00094	88 50 07	 mov	 BYTE PTR [eax+7], dl
  00097	8a 51 08	 mov	 dl, BYTE PTR [ecx+8]
  0009a	84 d2		 test	 dl, dl
  0009c	0f 84 b4 03 00
	00		 je	 $LN91@ioINILoade
  000a2	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a5	88 50 08	 mov	 BYTE PTR [eax+8], dl
  000a8	8a 51 09	 mov	 dl, BYTE PTR [ecx+9]
  000ab	84 d2		 test	 dl, dl
  000ad	0f 84 9d 03 00
	00		 je	 $LN90@ioINILoade
  000b3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b6	88 50 09	 mov	 BYTE PTR [eax+9], dl
  000b9	8a 51 0a	 mov	 dl, BYTE PTR [ecx+10]
  000bc	84 d2		 test	 dl, dl
  000be	0f 84 87 03 00
	00		 je	 $LN89@ioINILoade
  000c4	32 d3		 xor	 dl, bl
  000c6	88 50 0a	 mov	 BYTE PTR [eax+10], dl
  000c9	8a 51 0b	 mov	 dl, BYTE PTR [ecx+11]
  000cc	84 d2		 test	 dl, dl
  000ce	0f 84 71 03 00
	00		 je	 $LN88@ioINILoade
  000d4	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d7	88 50 0b	 mov	 BYTE PTR [eax+11], dl
  000da	8a 51 0c	 mov	 dl, BYTE PTR [ecx+12]
  000dd	84 d2		 test	 dl, dl
  000df	0f 84 5a 03 00
	00		 je	 $LN87@ioINILoade
  000e5	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e8	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  000eb	8a 51 0d	 mov	 dl, BYTE PTR [ecx+13]
  000ee	84 d2		 test	 dl, dl
  000f0	0f 84 43 03 00
	00		 je	 $LN86@ioINILoade
  000f6	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f9	88 50 0d	 mov	 BYTE PTR [eax+13], dl
  000fc	8a 51 0e	 mov	 dl, BYTE PTR [ecx+14]
  000ff	84 d2		 test	 dl, dl
  00101	0f 84 2d 03 00
	00		 je	 $LN85@ioINILoade
  00107	32 d3		 xor	 dl, bl
  00109	88 50 0e	 mov	 BYTE PTR [eax+14], dl
  0010c	8a 51 0f	 mov	 dl, BYTE PTR [ecx+15]
  0010f	84 d2		 test	 dl, dl
  00111	0f 84 17 03 00
	00		 je	 $LN84@ioINILoade
  00117	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011a	88 50 0f	 mov	 BYTE PTR [eax+15], dl
  0011d	8a 51 10	 mov	 dl, BYTE PTR [ecx+16]
  00120	84 d2		 test	 dl, dl
  00122	0f 84 00 03 00
	00		 je	 $LN83@ioINILoade
  00128	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0012b	88 50 10	 mov	 BYTE PTR [eax+16], dl
  0012e	8a 51 11	 mov	 dl, BYTE PTR [ecx+17]
  00131	84 d2		 test	 dl, dl
  00133	0f 84 e9 02 00
	00		 je	 $LN82@ioINILoade
  00139	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0013c	88 50 11	 mov	 BYTE PTR [eax+17], dl
  0013f	8a 51 12	 mov	 dl, BYTE PTR [ecx+18]
  00142	84 d2		 test	 dl, dl
  00144	0f 84 d3 02 00
	00		 je	 $LN81@ioINILoade
  0014a	32 d3		 xor	 dl, bl
  0014c	88 50 12	 mov	 BYTE PTR [eax+18], dl
  0014f	8a 51 13	 mov	 dl, BYTE PTR [ecx+19]
  00152	84 d2		 test	 dl, dl
  00154	0f 84 bd 02 00
	00		 je	 $LN80@ioINILoade
  0015a	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0015d	88 50 13	 mov	 BYTE PTR [eax+19], dl
  00160	8a 51 14	 mov	 dl, BYTE PTR [ecx+20]
  00163	84 d2		 test	 dl, dl
  00165	0f 84 a6 02 00
	00		 je	 $LN79@ioINILoade
  0016b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016e	88 50 14	 mov	 BYTE PTR [eax+20], dl
  00171	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00174	84 d2		 test	 dl, dl
  00176	0f 84 8f 02 00
	00		 je	 $LN78@ioINILoade
  0017c	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0017f	88 50 15	 mov	 BYTE PTR [eax+21], dl
  00182	8a 51 16	 mov	 dl, BYTE PTR [ecx+22]
  00185	84 d2		 test	 dl, dl
  00187	0f 84 79 02 00
	00		 je	 $LN77@ioINILoade
  0018d	32 d3		 xor	 dl, bl
  0018f	88 50 16	 mov	 BYTE PTR [eax+22], dl
  00192	8a 51 17	 mov	 dl, BYTE PTR [ecx+23]
  00195	84 d2		 test	 dl, dl
  00197	0f 84 60 02 00
	00		 je	 $LN76@ioINILoade
  0019d	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001a0	88 50 17	 mov	 BYTE PTR [eax+23], dl
  001a3	8a 51 18	 mov	 dl, BYTE PTR [ecx+24]
  001a6	84 d2		 test	 dl, dl
  001a8	0f 84 46 02 00
	00		 je	 $LN75@ioINILoade
  001ae	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b1	88 50 18	 mov	 BYTE PTR [eax+24], dl
  001b4	8a 51 19	 mov	 dl, BYTE PTR [ecx+25]
  001b7	84 d2		 test	 dl, dl
  001b9	0f 84 2c 02 00
	00		 je	 $LN74@ioINILoade
  001bf	80 f2 ec	 xor	 dl, -20			; ffffffecH
  001c2	88 50 19	 mov	 BYTE PTR [eax+25], dl
  001c5	8a 51 1a	 mov	 dl, BYTE PTR [ecx+26]
  001c8	84 d2		 test	 dl, dl
  001ca	0f 84 13 02 00
	00		 je	 $LN73@ioINILoade
  001d0	32 d3		 xor	 dl, bl
  001d2	88 50 1a	 mov	 BYTE PTR [eax+26], dl
  001d5	8a 51 1b	 mov	 dl, BYTE PTR [ecx+27]
  001d8	84 d2		 test	 dl, dl
  001da	0f 84 fa 01 00
	00		 je	 $LN72@ioINILoade
  001e0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001e3	88 50 1b	 mov	 BYTE PTR [eax+27], dl
  001e6	8a 51 1c	 mov	 dl, BYTE PTR [ecx+28]
  001e9	84 d2		 test	 dl, dl
  001eb	0f 84 e0 01 00
	00		 je	 $LN71@ioINILoade
  001f1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001f4	88 50 1c	 mov	 BYTE PTR [eax+28], dl
  001f7	8a 51 1d	 mov	 dl, BYTE PTR [ecx+29]
  001fa	84 d2		 test	 dl, dl
  001fc	0f 84 c6 01 00
	00		 je	 $LN70@ioINILoade
  00202	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00205	88 50 1d	 mov	 BYTE PTR [eax+29], dl
  00208	8a 51 1e	 mov	 dl, BYTE PTR [ecx+30]
  0020b	84 d2		 test	 dl, dl
  0020d	0f 84 ad 01 00
	00		 je	 $LN69@ioINILoade
  00213	32 d3		 xor	 dl, bl
  00215	88 50 1e	 mov	 BYTE PTR [eax+30], dl
  00218	8a 51 1f	 mov	 dl, BYTE PTR [ecx+31]
  0021b	84 d2		 test	 dl, dl
  0021d	0f 84 94 01 00
	00		 je	 $LN68@ioINILoade
  00223	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00226	88 50 1f	 mov	 BYTE PTR [eax+31], dl
  00229	8a 51 20	 mov	 dl, BYTE PTR [ecx+32]
  0022c	84 d2		 test	 dl, dl
  0022e	0f 84 7a 01 00
	00		 je	 $LN67@ioINILoade
  00234	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00237	88 50 20	 mov	 BYTE PTR [eax+32], dl
  0023a	8a 51 21	 mov	 dl, BYTE PTR [ecx+33]
  0023d	84 d2		 test	 dl, dl
  0023f	0f 84 60 01 00
	00		 je	 $LN66@ioINILoade
  00245	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00248	88 50 21	 mov	 BYTE PTR [eax+33], dl
  0024b	8a 51 22	 mov	 dl, BYTE PTR [ecx+34]
  0024e	84 d2		 test	 dl, dl
  00250	0f 84 47 01 00
	00		 je	 $LN65@ioINILoade
  00256	32 d3		 xor	 dl, bl
  00258	88 50 22	 mov	 BYTE PTR [eax+34], dl
  0025b	8a 51 23	 mov	 dl, BYTE PTR [ecx+35]
  0025e	84 d2		 test	 dl, dl
  00260	0f 84 2e 01 00
	00		 je	 $LN64@ioINILoade
  00266	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00269	88 50 23	 mov	 BYTE PTR [eax+35], dl
  0026c	8a 51 24	 mov	 dl, BYTE PTR [ecx+36]
  0026f	84 d2		 test	 dl, dl
  00271	0f 84 14 01 00
	00		 je	 $LN63@ioINILoade
  00277	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0027a	88 50 24	 mov	 BYTE PTR [eax+36], dl
  0027d	8a 51 25	 mov	 dl, BYTE PTR [ecx+37]
  00280	84 d2		 test	 dl, dl
  00282	0f 84 fa 00 00
	00		 je	 $LN62@ioINILoade
  00288	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0028b	88 50 25	 mov	 BYTE PTR [eax+37], dl
  0028e	8a 51 26	 mov	 dl, BYTE PTR [ecx+38]
  00291	84 d2		 test	 dl, dl
  00293	0f 84 e1 00 00
	00		 je	 $LN61@ioINILoade
  00299	32 d3		 xor	 dl, bl
  0029b	88 50 26	 mov	 BYTE PTR [eax+38], dl
  0029e	8a 51 27	 mov	 dl, BYTE PTR [ecx+39]
  002a1	84 d2		 test	 dl, dl
  002a3	0f 84 c8 00 00
	00		 je	 $LN60@ioINILoade
  002a9	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  002ac	88 50 27	 mov	 BYTE PTR [eax+39], dl
  002af	8a 51 28	 mov	 dl, BYTE PTR [ecx+40]
  002b2	84 d2		 test	 dl, dl
  002b4	0f 84 ae 00 00
	00		 je	 $LN59@ioINILoade
  002ba	80 f2 ed	 xor	 dl, -19			; ffffffedH
  002bd	88 50 28	 mov	 BYTE PTR [eax+40], dl
  002c0	8a 51 29	 mov	 dl, BYTE PTR [ecx+41]
  002c3	84 d2		 test	 dl, dl
  002c5	0f 84 94 00 00
	00		 je	 $LN58@ioINILoade
  002cb	80 f2 ec	 xor	 dl, -20			; ffffffecH
  002ce	88 50 29	 mov	 BYTE PTR [eax+41], dl
  002d1	8a 51 2a	 mov	 dl, BYTE PTR [ecx+42]
  002d4	84 d2		 test	 dl, dl
  002d6	74 7f		 je	 SHORT $LN57@ioINILoade
  002d8	32 d3		 xor	 dl, bl
  002da	88 50 2a	 mov	 BYTE PTR [eax+42], dl
  002dd	8a 51 2b	 mov	 dl, BYTE PTR [ecx+43]
  002e0	84 d2		 test	 dl, dl
  002e2	74 6a		 je	 SHORT $LN56@ioINILoade
  002e4	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  002e7	88 50 2b	 mov	 BYTE PTR [eax+43], dl
  002ea	8a 51 2c	 mov	 dl, BYTE PTR [ecx+44]
  002ed	84 d2		 test	 dl, dl
  002ef	74 54		 je	 SHORT $LN55@ioINILoade
  002f1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  002f4	88 50 2c	 mov	 BYTE PTR [eax+44], dl
  002f7	8a 51 2d	 mov	 dl, BYTE PTR [ecx+45]
  002fa	84 d2		 test	 dl, dl
  002fc	74 3e		 je	 SHORT $LN54@ioINILoade
  002fe	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00301	88 50 2d	 mov	 BYTE PTR [eax+45], dl
  00304	8a 51 2e	 mov	 dl, BYTE PTR [ecx+46]
  00307	84 d2		 test	 dl, dl
  00309	74 29		 je	 SHORT $LN53@ioINILoade
  0030b	32 d3		 xor	 dl, bl
  0030d	88 50 2e	 mov	 BYTE PTR [eax+46], dl
  00310	8a 51 2f	 mov	 dl, BYTE PTR [ecx+47]
  00313	84 d2		 test	 dl, dl
  00315	74 14		 je	 SHORT $LN52@ioINILoade
  00317	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0031a	88 50 2f	 mov	 BYTE PTR [eax+47], dl
  0031d	8a 49 30	 mov	 cl, BYTE PTR [ecx+48]
  00320	80 f1 ed	 xor	 cl, -19			; ffffffedH
  00323	88 48 30	 mov	 BYTE PTR [eax+48], cl
  00326	e9 5d 01 00 00	 jmp	 $LN4@ioINILoade
$LN52@ioINILoade:
  0032b	c6 40 2f ea	 mov	 BYTE PTR [eax+47], -22	; ffffffeaH
  0032f	e9 54 01 00 00	 jmp	 $LN4@ioINILoade
$LN53@ioINILoade:
  00334	88 58 2e	 mov	 BYTE PTR [eax+46], bl
  00337	e9 4c 01 00 00	 jmp	 $LN4@ioINILoade
$LN54@ioINILoade:
  0033c	c6 40 2d ec	 mov	 BYTE PTR [eax+45], -20	; ffffffecH
  00340	e9 43 01 00 00	 jmp	 $LN4@ioINILoade
$LN55@ioINILoade:
  00345	c6 40 2c ed	 mov	 BYTE PTR [eax+44], -19	; ffffffedH
  00349	e9 3a 01 00 00	 jmp	 $LN4@ioINILoade
$LN56@ioINILoade:
  0034e	c6 40 2b ea	 mov	 BYTE PTR [eax+43], -22	; ffffffeaH
  00352	e9 31 01 00 00	 jmp	 $LN4@ioINILoade
$LN57@ioINILoade:
  00357	88 58 2a	 mov	 BYTE PTR [eax+42], bl
  0035a	e9 29 01 00 00	 jmp	 $LN4@ioINILoade
$LN58@ioINILoade:
  0035f	c6 40 29 ec	 mov	 BYTE PTR [eax+41], -20	; ffffffecH
  00363	e9 20 01 00 00	 jmp	 $LN4@ioINILoade
$LN59@ioINILoade:
  00368	c6 40 28 ed	 mov	 BYTE PTR [eax+40], -19	; ffffffedH
  0036c	e9 17 01 00 00	 jmp	 $LN4@ioINILoade
$LN60@ioINILoade:
  00371	c6 40 27 ea	 mov	 BYTE PTR [eax+39], -22	; ffffffeaH
  00375	e9 0e 01 00 00	 jmp	 $LN4@ioINILoade
$LN61@ioINILoade:
  0037a	88 58 26	 mov	 BYTE PTR [eax+38], bl
  0037d	e9 06 01 00 00	 jmp	 $LN4@ioINILoade
$LN62@ioINILoade:
  00382	c6 40 25 ec	 mov	 BYTE PTR [eax+37], -20	; ffffffecH
  00386	e9 fd 00 00 00	 jmp	 $LN4@ioINILoade
$LN63@ioINILoade:
  0038b	c6 40 24 ed	 mov	 BYTE PTR [eax+36], -19	; ffffffedH
  0038f	e9 f4 00 00 00	 jmp	 $LN4@ioINILoade
$LN64@ioINILoade:
  00394	c6 40 23 ea	 mov	 BYTE PTR [eax+35], -22	; ffffffeaH
  00398	e9 eb 00 00 00	 jmp	 $LN4@ioINILoade
$LN65@ioINILoade:
  0039d	88 58 22	 mov	 BYTE PTR [eax+34], bl
  003a0	e9 e3 00 00 00	 jmp	 $LN4@ioINILoade
$LN66@ioINILoade:
  003a5	c6 40 21 ec	 mov	 BYTE PTR [eax+33], -20	; ffffffecH
  003a9	e9 da 00 00 00	 jmp	 $LN4@ioINILoade
$LN67@ioINILoade:
  003ae	c6 40 20 ed	 mov	 BYTE PTR [eax+32], -19	; ffffffedH
  003b2	e9 d1 00 00 00	 jmp	 $LN4@ioINILoade
$LN68@ioINILoade:
  003b7	c6 40 1f ea	 mov	 BYTE PTR [eax+31], -22	; ffffffeaH
  003bb	e9 c8 00 00 00	 jmp	 $LN4@ioINILoade
$LN69@ioINILoade:
  003c0	88 58 1e	 mov	 BYTE PTR [eax+30], bl
  003c3	e9 c0 00 00 00	 jmp	 $LN4@ioINILoade
$LN70@ioINILoade:
  003c8	c6 40 1d ec	 mov	 BYTE PTR [eax+29], -20	; ffffffecH
  003cc	e9 b7 00 00 00	 jmp	 $LN4@ioINILoade
$LN71@ioINILoade:
  003d1	c6 40 1c ed	 mov	 BYTE PTR [eax+28], -19	; ffffffedH
  003d5	e9 ae 00 00 00	 jmp	 $LN4@ioINILoade
$LN72@ioINILoade:
  003da	c6 40 1b ea	 mov	 BYTE PTR [eax+27], -22	; ffffffeaH
  003de	e9 a5 00 00 00	 jmp	 $LN4@ioINILoade
$LN73@ioINILoade:
  003e3	88 58 1a	 mov	 BYTE PTR [eax+26], bl
  003e6	e9 9d 00 00 00	 jmp	 $LN4@ioINILoade
$LN74@ioINILoade:
  003eb	c6 40 19 ec	 mov	 BYTE PTR [eax+25], -20	; ffffffecH
  003ef	e9 94 00 00 00	 jmp	 $LN4@ioINILoade
$LN75@ioINILoade:
  003f4	c6 40 18 ed	 mov	 BYTE PTR [eax+24], -19	; ffffffedH
  003f8	e9 8b 00 00 00	 jmp	 $LN4@ioINILoade
$LN76@ioINILoade:
  003fd	c6 40 17 ea	 mov	 BYTE PTR [eax+23], -22	; ffffffeaH
  00401	e9 82 00 00 00	 jmp	 $LN4@ioINILoade
$LN77@ioINILoade:
  00406	88 58 16	 mov	 BYTE PTR [eax+22], bl
  00409	eb 7d		 jmp	 SHORT $LN4@ioINILoade
$LN78@ioINILoade:
  0040b	c6 40 15 ec	 mov	 BYTE PTR [eax+21], -20	; ffffffecH
  0040f	eb 77		 jmp	 SHORT $LN4@ioINILoade
$LN79@ioINILoade:
  00411	c6 40 14 ed	 mov	 BYTE PTR [eax+20], -19	; ffffffedH
  00415	eb 71		 jmp	 SHORT $LN4@ioINILoade
$LN80@ioINILoade:
  00417	c6 40 13 ea	 mov	 BYTE PTR [eax+19], -22	; ffffffeaH
  0041b	eb 6b		 jmp	 SHORT $LN4@ioINILoade
$LN81@ioINILoade:
  0041d	88 58 12	 mov	 BYTE PTR [eax+18], bl
  00420	eb 66		 jmp	 SHORT $LN4@ioINILoade
$LN82@ioINILoade:
  00422	c6 40 11 ec	 mov	 BYTE PTR [eax+17], -20	; ffffffecH
  00426	eb 60		 jmp	 SHORT $LN4@ioINILoade
$LN83@ioINILoade:
  00428	c6 40 10 ed	 mov	 BYTE PTR [eax+16], -19	; ffffffedH
  0042c	eb 5a		 jmp	 SHORT $LN4@ioINILoade
$LN84@ioINILoade:
  0042e	c6 40 0f ea	 mov	 BYTE PTR [eax+15], -22	; ffffffeaH
  00432	eb 54		 jmp	 SHORT $LN4@ioINILoade
$LN85@ioINILoade:
  00434	88 58 0e	 mov	 BYTE PTR [eax+14], bl
  00437	eb 4f		 jmp	 SHORT $LN4@ioINILoade
$LN86@ioINILoade:
  00439	c6 40 0d ec	 mov	 BYTE PTR [eax+13], -20	; ffffffecH
  0043d	eb 49		 jmp	 SHORT $LN4@ioINILoade
$LN87@ioINILoade:
  0043f	c6 40 0c ed	 mov	 BYTE PTR [eax+12], -19	; ffffffedH
  00443	eb 43		 jmp	 SHORT $LN4@ioINILoade
$LN88@ioINILoade:
  00445	c6 40 0b ea	 mov	 BYTE PTR [eax+11], -22	; ffffffeaH
  00449	eb 3d		 jmp	 SHORT $LN4@ioINILoade
$LN89@ioINILoade:
  0044b	88 58 0a	 mov	 BYTE PTR [eax+10], bl
  0044e	eb 38		 jmp	 SHORT $LN4@ioINILoade
$LN90@ioINILoade:
  00450	c6 40 09 ec	 mov	 BYTE PTR [eax+9], -20	; ffffffecH
  00454	eb 32		 jmp	 SHORT $LN4@ioINILoade
$LN91@ioINILoade:
  00456	c6 40 08 ed	 mov	 BYTE PTR [eax+8], -19	; ffffffedH
  0045a	eb 2c		 jmp	 SHORT $LN4@ioINILoade
$LN92@ioINILoade:
  0045c	c6 40 07 ea	 mov	 BYTE PTR [eax+7], -22	; ffffffeaH
  00460	eb 26		 jmp	 SHORT $LN4@ioINILoade
$LN93@ioINILoade:
  00462	88 58 06	 mov	 BYTE PTR [eax+6], bl
  00465	eb 21		 jmp	 SHORT $LN4@ioINILoade
$LN94@ioINILoade:
  00467	c6 40 05 ec	 mov	 BYTE PTR [eax+5], -20	; ffffffecH
  0046b	eb 1b		 jmp	 SHORT $LN4@ioINILoade
$LN95@ioINILoade:
  0046d	c6 40 04 ed	 mov	 BYTE PTR [eax+4], -19	; ffffffedH
  00471	eb 15		 jmp	 SHORT $LN4@ioINILoade
$LN96@ioINILoade:
  00473	c6 40 03 ea	 mov	 BYTE PTR [eax+3], -22	; ffffffeaH
  00477	eb 0f		 jmp	 SHORT $LN4@ioINILoade
$LN97@ioINILoade:
  00479	c6 40 02 eb	 mov	 BYTE PTR [eax+2], -21	; ffffffebH
  0047d	eb 09		 jmp	 SHORT $LN4@ioINILoade
$LN98@ioINILoade:
  0047f	c6 40 01 ec	 mov	 BYTE PTR [eax+1], -20	; ffffffecH
  00483	eb 03		 jmp	 SHORT $LN4@ioINILoade
$LN99@ioINILoade:
  00485	c6 00 ed	 mov	 BYTE PTR [eax], -19	; ffffffedH
$LN4@ioINILoade:
  00488	6a 04		 push	 4
  0048a	8b c8		 mov	 ecx, eax
  0048c	c6 40 12 00	 mov	 BYTE PTR [eax+18], 0
  00490	5a		 pop	 edx
$LL107@ioINILoade:
  00491	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  00497	83 c1 04	 add	 ecx, 4
  0049a	4a		 dec	 edx
  0049b	75 f4		 jne	 SHORT $LL107@ioINILoade
  0049d	6a 10		 push	 16			; 00000010H
  0049f	5e		 pop	 esi
$LL104@ioINILoade:
  004a0	8b ce		 mov	 ecx, esi
  004a2	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  004a8	79 05		 jns	 SHORT $LN114@ioINILoade
  004aa	49		 dec	 ecx
  004ab	83 c9 fc	 or	 ecx, -4			; fffffffcH
  004ae	41		 inc	 ecx
$LN114@ioINILoade:
  004af	b2 ed		 mov	 dl, -19			; ffffffedH
  004b1	2a d1		 sub	 dl, cl
  004b3	30 14 06	 xor	 BYTE PTR [esi+eax], dl
  004b6	46		 inc	 esi
  004b7	83 fe 12	 cmp	 esi, 18			; 00000012H
  004ba	7c e4		 jl	 SHORT $LL104@ioINILoade
  004bc	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  004bf	8b cf		 mov	 ecx, edi
  004c1	50		 push	 eax
  004c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioINILoader@@QAE@PBD_N@Z

; 225  : 	}

  004c8	8b c7		 mov	 eax, edi
  004ca	5f		 pop	 edi
  004cb	5e		 pop	 esi
  004cc	5b		 pop	 ebx
  004cd	5d		 pop	 ebp
  004ce	c2 08 00	 ret	 8
??$?0$0BD@@ioINILoader_e@@QAE@AAY0BD@$$CBD_N@Z ENDP	; ioINILoader_e::ioINILoader_e<19>
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?Load@io3DSkillCharIcon@@IAEXXZ			; io3DSkillCharIcon::Load
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\io3dskillcharicon.cpp
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Load@io3DSkillCharIcon@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@io3DSkillCharIcon@@IAEXXZ$0
__ehfuncinfo$?Load@io3DSkillCharIcon@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Load@io3DSkillCharIcon@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Load@io3DSkillCharIcon@@IAEXXZ
_TEXT	SEGMENT
_kLoader$ = -1208					; size = 912
_szBuf$ = -296						; size = 260
__t$506504 = -36					; size = 16
__k$506879 = -32					; size = 12
__k$506754 = -32					; size = 9
__k$506629 = -32					; size = 9
__$EHRec$ = -12						; size = 12
?Load@io3DSkillCharIcon@@IAEXXZ PROC			; io3DSkillCharIcon::Load, COMDAT
; _this$ = ecx

; 43   : {

  00000	68 ac 04 00 00	 push	 1196			; 000004acH
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?Load@io3DSkillCharIcon@@IAEXXZ
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS

; 44   : 	ioINILoader_e kLoader( "config/sp2_gui.ini" );

  0000f	33 db		 xor	 ebx, ebx
  00011	6a 04		 push	 4
  00013	8b f9		 mov	 edi, ecx
  00015	c7 85 98 fe ff
	ff 8e 83 85 8c	 mov	 DWORD PTR _kLoader$[ebp+848], -1937407090 ; 8c85838eH
  0001f	c7 85 9c fe ff
	ff 84 8b c4 99	 mov	 DWORD PTR _kLoader$[ebp+852], -1715172476 ; 99c48b84H
  00029	c7 85 a0 fe ff
	ff 9d de b4 8d	 mov	 DWORD PTR _kLoader$[ebp+856], -1917526371 ; 8db4de9dH
  00033	c7 85 a4 fe ff
	ff 98 85 c5 83	 mov	 DWORD PTR _kLoader$[ebp+860], -2084207208 ; 83c58598H
  0003d	66 c7 85 a8 fe
	ff ff 83 85	 mov	 WORD PTR _kLoader$[ebp+864], 34179 ; 00008583H
  00046	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR _kLoader$[ebp+848]
  0004c	88 9d aa fe ff
	ff		 mov	 BYTE PTR _kLoader$[ebp+866], bl
  00052	59		 pop	 ecx
$LL110@Load:
  00053	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00059	83 c0 04	 add	 eax, 4
  0005c	49		 dec	 ecx
  0005d	75 f4		 jne	 SHORT $LL110@Load
  0005f	6a 10		 push	 16			; 00000010H
  00061	5e		 pop	 esi
$LL107@Load:
  00062	8b c6		 mov	 eax, esi
  00064	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00069	79 05		 jns	 SHORT $LN561@Load
  0006b	48		 dec	 eax
  0006c	83 c8 fc	 or	 eax, -4			; fffffffcH
  0006f	40		 inc	 eax
$LN561@Load:
  00070	b1 ed		 mov	 cl, -19			; ffffffedH
  00072	2a c8		 sub	 cl, al
  00074	30 8c 35 98 fe
	ff ff		 xor	 BYTE PTR _kLoader$[ebp+esi+848], cl
  0007b	46		 inc	 esi
  0007c	83 fe 12	 cmp	 esi, 18			; 00000012H
  0007f	7c e1		 jl	 SHORT $LL107@Load
  00081	6a 01		 push	 1
  00083	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR _kLoader$[ebp+848]
  00089	50		 push	 eax
  0008a	8d 8d 48 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioINILoader@@QAE@PBD_N@Z
  00096	6a 03		 push	 3
  00098	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 45   : 	kLoader.SetTitle_e( "skill_char_icon" );

  0009b	c7 45 dc 9e 87
	82 86		 mov	 DWORD PTR __t$506504[ebp], -2038265954 ; 8682879eH
  000a2	c7 45 e0 81 b3
	88 82		 mov	 DWORD PTR __t$506504[ebp+4], -2104970367 ; 8288b381H
  000a9	c7 45 e4 8c 9e
	b4 83		 mov	 DWORD PTR __t$506504[ebp+8], -2085314932 ; 83b49e8cH
  000b0	8d 45 dc	 lea	 eax, DWORD PTR __t$506504[ebp]
  000b3	c7 45 e8 8e 83
	85 00		 mov	 DWORD PTR __t$506504[ebp+12], 8749966 ; 0085838eH
  000ba	59		 pop	 ecx
$LL216@Load:
  000bb	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000c1	83 c0 04	 add	 eax, 4
  000c4	49		 dec	 ecx
  000c5	75 f4		 jne	 SHORT $LL216@Load
  000c7	6a 0c		 push	 12			; 0000000cH
  000c9	5e		 pop	 esi
$LL213@Load:
  000ca	8b c6		 mov	 eax, esi
  000cc	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  000d1	79 05		 jns	 SHORT $LN562@Load
  000d3	48		 dec	 eax
  000d4	83 c8 fc	 or	 eax, -4			; fffffffcH
  000d7	40		 inc	 eax
$LN562@Load:
  000d8	b1 ed		 mov	 cl, -19			; ffffffedH
  000da	2a c8		 sub	 cl, al
  000dc	30 4c 35 dc	 xor	 BYTE PTR __t$506504[ebp+esi], cl
  000e0	46		 inc	 esi
  000e1	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  000e4	7c e4		 jl	 SHORT $LL213@Load
  000e6	8d 45 dc	 lea	 eax, DWORD PTR __t$506504[ebp]
  000e9	50		 push	 eax
  000ea	8d 8d 48 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitle@ioINILoader@@QAEXPBD@Z
  000f6	6a 02		 push	 2

; 46   : 
; 47   : 	m_iXOffSet   = kLoader.LoadInt_e( "x_offset", 0 );

  000f8	c7 45 e0 95 b3
	84 8c		 mov	 DWORD PTR __k$506629[ebp], -1937460331 ; 8c84b395H
  000ff	c7 45 e4 8b 9f
	8e 9e		 mov	 DWORD PTR __k$506629[ebp+4], -1634820213 ; 9e8e9f8bH
  00106	8d 45 e0	 lea	 eax, DWORD PTR __k$506629[ebp]
  00109	88 5d e8	 mov	 BYTE PTR __k$506629[ebp+8], bl
  0010c	59		 pop	 ecx
$LL322@Load:
  0010d	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00113	83 c0 04	 add	 eax, 4
  00116	49		 dec	 ecx
  00117	75 f4		 jne	 SHORT $LL322@Load
  00119	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  0011f	53		 push	 ebx
  00120	8d 45 e0	 lea	 eax, DWORD PTR __k$506629[ebp]
  00123	50		 push	 eax
  00124	8d 8d 48 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  0012a	ff d6		 call	 esi
  0012c	6a 02		 push	 2
  0012e	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 48   : 	m_iYOffSet   = kLoader.LoadInt_e( "y_offset", 0 );

  00131	c7 45 e0 94 b3
	84 8c		 mov	 DWORD PTR __k$506754[ebp], -1937460332 ; 8c84b394H
  00138	c7 45 e4 8b 9f
	8e 9e		 mov	 DWORD PTR __k$506754[ebp+4], -1634820213 ; 9e8e9f8bH
  0013f	8d 45 e0	 lea	 eax, DWORD PTR __k$506754[ebp]
  00142	88 5d e8	 mov	 BYTE PTR __k$506754[ebp+8], bl
  00145	59		 pop	 ecx
$LL428@Load:
  00146	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0014c	83 c0 04	 add	 eax, 4
  0014f	49		 dec	 ecx
  00150	75 f4		 jne	 SHORT $LL428@Load
  00152	53		 push	 ebx
  00153	8d 45 e0	 lea	 eax, DWORD PTR __k$506754[ebp]
  00156	50		 push	 eax
  00157	8d 8d 48 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  0015d	ff d6		 call	 esi

; 49   : 
; 50   : 	char szBuf[MAX_PATH] = "";

  0015f	68 03 01 00 00	 push	 259			; 00000103H
  00164	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00167	8d 85 d9 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp+1]
  0016d	53		 push	 ebx
  0016e	50		 push	 eax
  0016f	88 9d d8 fe ff
	ff		 mov	 BYTE PTR _szBuf$[ebp], bl
  00175	e8 00 00 00 00	 call	 _memset
  0017a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0017d	6a 02		 push	 2

; 51   : 	kLoader.LoadString_e( "char_motion", "", szBuf, MAX_PATH );

  0017f	c7 45 e0 8e 84
	8a 98		 mov	 DWORD PTR __k$506879[ebp], -1735752562 ; 988a848eH
  00186	c7 45 e4 b2 81
	84 9e		 mov	 DWORD PTR __k$506879[ebp+4], -1635483214 ; 9e8481b2H
  0018d	8d 45 e0	 lea	 eax, DWORD PTR __k$506879[ebp]
  00190	c7 45 e8 84 83
	85 00		 mov	 DWORD PTR __k$506879[ebp+8], 8749956 ; 00858384H
  00197	59		 pop	 ecx
$LL534@Load:
  00198	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0019e	83 c0 04	 add	 eax, 4
  001a1	49		 dec	 ecx
  001a2	75 f4		 jne	 SHORT $LL534@Load
  001a4	6a 08		 push	 8
  001a6	58		 pop	 eax
$LL531@Load:
  001a7	8b c8		 mov	 ecx, eax
  001a9	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001af	79 05		 jns	 SHORT $LN563@Load
  001b1	49		 dec	 ecx
  001b2	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001b5	41		 inc	 ecx
$LN563@Load:
  001b6	b2 ed		 mov	 dl, -19			; ffffffedH
  001b8	2a d1		 sub	 dl, cl
  001ba	30 54 05 e0	 xor	 BYTE PTR __k$506879[ebp+eax], dl
  001be	40		 inc	 eax
  001bf	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  001c2	7c e3		 jl	 SHORT $LL531@Load
  001c4	68 04 01 00 00	 push	 260			; 00000104H
  001c9	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  001cf	50		 push	 eax
  001d0	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  001d5	8d 45 e0	 lea	 eax, DWORD PTR __k$506879[ebp]
  001d8	50		 push	 eax
  001d9	8d 8d 48 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  001df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 52   : 	m_szCharMotion = szBuf;

  001e5	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  001eb	50		 push	 eax
  001ec	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  001ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 53   : }

  001f5	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001f9	8d 8d 48 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  001ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioINILoader@@QAE@XZ
  00205	e8 00 00 00 00	 call	 __EH_epilog3_GS
  0020a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Load@io3DSkillCharIcon@@IAEXXZ$0:
  00000	8d 8d 48 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1ioINILoader_e@@QAE@XZ
__ehhandler$?Load@io3DSkillCharIcon@@IAEXXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 44 fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1212]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@io3DSkillCharIcon@@IAEXXZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@io3DSkillCharIcon@@IAEXXZ ENDP			; io3DSkillCharIcon::Load
PUBLIC	??_C@_0CE@FCMGKOOH@config?1sp2_stage_charselect_map?4@ ; `string'
PUBLIC	??_C@_0P@ENFKIJPC@skill_char_cam?$AA@		; `string'
PUBLIC	?Initialize@io3DSkillCharIcon@@QAEXXZ		; io3DSkillCharIcon::Initialize
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?Initialize@ioUI3DRender@@QAEXPBD0@Z:PROC	; ioUI3DRender::Initialize
EXTRN	??0ioUI3DRender@@QAE@XZ:PROC			; ioUI3DRender::ioUI3DRender
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT ??_C@_0CE@FCMGKOOH@config?1sp2_stage_charselect_map?4@
CONST	SEGMENT
??_C@_0CE@FCMGKOOH@config?1sp2_stage_charselect_map?4@ DB 'config/sp2_sta'
	DB	'ge_charselect_map.ini', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ENFKIJPC@skill_char_cam?$AA@
CONST	SEGMENT
??_C@_0P@ENFKIJPC@skill_char_cam?$AA@ DB 'skill_char_cam', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Initialize@io3DSkillCharIcon@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Initialize@io3DSkillCharIcon@@QAEXXZ$0
__ehfuncinfo$?Initialize@io3DSkillCharIcon@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Initialize@io3DSkillCharIcon@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Initialize@io3DSkillCharIcon@@QAEXXZ
_TEXT	SEGMENT
$T507027 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Initialize@io3DSkillCharIcon@@QAEXXZ PROC		; io3DSkillCharIcon::Initialize, COMDAT
; _this$ = ecx

; 35   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Initialize@io3DSkillCharIcon@@QAEXXZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 36   : 	m_pUI3DRender = new ioUI3DRender;

  0000e	6a 48		 push	 72			; 00000048H
  00010	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00015	59		 pop	 ecx
  00016	8b c8		 mov	 ecx, eax
  00018	89 4d f0	 mov	 DWORD PTR $T507027[ebp], ecx
  0001b	33 c0		 xor	 eax, eax
  0001d	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00020	3b c8		 cmp	 ecx, eax
  00022	74 05		 je	 SHORT $LN3@Initialize
  00024	e8 00 00 00 00	 call	 ??0ioUI3DRender@@QAE@XZ	; ioUI3DRender::ioUI3DRender
$LN3@Initialize:
  00029	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1

; 37   : 	m_pUI3DRender->Initialize( "config/sp2_stage_charselect_map.ini", "skill_char_cam" );

  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENFKIJPC@skill_char_cam?$AA@
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@FCMGKOOH@config?1sp2_stage_charselect_map?4@
  00037	8b c8		 mov	 ecx, eax
  00039	89 06		 mov	 DWORD PTR [esi], eax
  0003b	e8 00 00 00 00	 call	 ?Initialize@ioUI3DRender@@QAEXPBD0@Z ; ioUI3DRender::Initialize

; 38   : 
; 39   : 	Load();

  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?Load@io3DSkillCharIcon@@IAEXXZ ; io3DSkillCharIcon::Load

; 40   : }

  00047	e8 00 00 00 00	 call	 __EH_epilog3
  0004c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Initialize@io3DSkillCharIcon@@QAEXXZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T507027[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Initialize@io3DSkillCharIcon@@QAEXXZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Initialize@io3DSkillCharIcon@@QAEXXZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Initialize@io3DSkillCharIcon@@QAEXXZ ENDP		; io3DSkillCharIcon::Initialize
END
