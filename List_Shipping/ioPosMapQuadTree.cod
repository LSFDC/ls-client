; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\Housing\ioPosMapQuadTree.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	??0TilePos@@QAE@HHH@Z				; TilePos::TilePos
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\housing\blockdefine.h
;	COMDAT ??0TilePos@@QAE@HHH@Z
_TEXT	SEGMENT
_nX$ = 8						; size = 4
_nY$ = 12						; size = 4
_nZ$ = 16						; size = 4
??0TilePos@@QAE@HHH@Z PROC				; TilePos::TilePos, COMDAT
; _this$ = ecx

; 96   : 	TilePos( int nX, int nY, int nZ )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 97   : 	{
; 98   : 		x		= nX;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR _nX$[ebp]

; 99   : 		y		= nY;
; 100  : 		z		= nZ;
; 101  : 		event	= 0;

  00008	83 60 0c 00	 and	 DWORD PTR [eax+12], 0
  0000c	89 08		 mov	 DWORD PTR [eax], ecx
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR _nY$[ebp]
  00011	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00014	8b 4d 10	 mov	 ecx, DWORD PTR _nZ$[ebp]
  00017	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 102  : 	}

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
??0TilePos@@QAE@HHH@Z ENDP				; TilePos::TilePos
_TEXT	ENDS
PUBLIC	??0FacePos@ioPosMapQuadTree@@QAE@XZ		; ioPosMapQuadTree::FacePos::FacePos
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\housing\ioposmapquadtree.h
;	COMDAT ??0FacePos@ioPosMapQuadTree@@QAE@XZ
_TEXT	SEGMENT
??0FacePos@ioPosMapQuadTree@@QAE@XZ PROC		; ioPosMapQuadTree::FacePos::FacePos, COMDAT
; _this$ = ecx

; 22   : 		FacePos()

  00000	8b c1		 mov	 eax, ecx

; 23   : 		{
; 24   : 			m_XPos = m_ZPos = -1;

  00002	83 48 04 ff	 or	 DWORD PTR [eax+4], -1
  00006	83 08 ff	 or	 DWORD PTR [eax], -1

; 25   : 		}

  00009	c3		 ret	 0
??0FacePos@ioPosMapQuadTree@@QAE@XZ ENDP		; ioPosMapQuadTree::FacePos::FacePos
_TEXT	ENDS
PUBLIC	??0FacePos@ioPosMapQuadTree@@QAE@HH@Z		; ioPosMapQuadTree::FacePos::FacePos
; Function compile flags: /Ogsp
;	COMDAT ??0FacePos@ioPosMapQuadTree@@QAE@HH@Z
_TEXT	SEGMENT
_XPos$ = 8						; size = 4
_ZPos$ = 12						; size = 4
??0FacePos@ioPosMapQuadTree@@QAE@HH@Z PROC		; ioPosMapQuadTree::FacePos::FacePos, COMDAT
; _this$ = ecx

; 26   : 		FacePos( int XPos, int ZPos )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 27   : 		{
; 28   : 			m_XPos = XPos;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR _XPos$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 29   : 			m_ZPos = ZPos;

  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _ZPos$[ebp]
  0000d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 30   : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0FacePos@ioPosMapQuadTree@@QAE@HH@Z ENDP		; ioPosMapQuadTree::FacePos::FacePos
_TEXT	ENDS
PUBLIC	??1ioPosMapQuadTree@@QAE@XZ			; ioPosMapQuadTree::~ioPosMapQuadTree
EXTRN	__imp_??1ioOrientBox@@QAE@XZ:PROC
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\housing\ioposmapquadtree.cpp
xdata$x	SEGMENT
__unwindtable$??1ioPosMapQuadTree@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioPosMapQuadTree@@QAE@XZ$0
__ehfuncinfo$??1ioPosMapQuadTree@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ioPosMapQuadTree@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioPosMapQuadTree@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioPosMapQuadTree@@QAE@XZ PROC			; ioPosMapQuadTree::~ioPosMapQuadTree, COMDAT
; _this$ = ecx

; 21   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioPosMapQuadTree@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b d9		 mov	 ebx, ecx
  0000e	89 5d f0	 mov	 DWORD PTR _this$[ebp], ebx
  00011	33 ff		 xor	 edi, edi
  00013	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
$LN4@ioPosMapQu:

; 23   : 		SAFEDELETE( m_pChild[i] );

  00016	8b 34 bb	 mov	 esi, DWORD PTR [ebx+edi*4]
  00019	85 f6		 test	 esi, esi
  0001b	74 12		 je	 SHORT $LN3@ioPosMapQu
  0001d	8b ce		 mov	 ecx, esi
  0001f	e8 00 00 00 00	 call	 ??1ioPosMapQuadTree@@QAE@XZ ; ioPosMapQuadTree::~ioPosMapQuadTree
  00024	56		 push	 esi
  00025	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002a	83 24 bb 00	 and	 DWORD PTR [ebx+edi*4], 0
  0002e	59		 pop	 ecx
$LN3@ioPosMapQu:

; 22   : 	for( int i = 0; i < FT_MAX; ++i )

  0002f	47		 inc	 edi
  00030	83 ff 04	 cmp	 edi, 4
  00033	7c e1		 jl	 SHORT $LN4@ioPosMapQu

; 24   : }

  00035	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00039	8d 4b 30	 lea	 ecx, DWORD PTR [ebx+48]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioOrientBox@@QAE@XZ
  00042	e8 00 00 00 00	 call	 __EH_epilog3
  00047	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioPosMapQuadTree@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 30	 add	 ecx, 48			; 00000030H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioOrientBox@@QAE@XZ
__ehhandler$??1ioPosMapQuadTree@@QAE@XZ:
  0000c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00010	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00013	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00016	33 c8		 xor	 ecx, eax
  00018	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioPosMapQuadTree@@QAE@XZ
  00022	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioPosMapQuadTree@@QAE@XZ ENDP			; ioPosMapQuadTree::~ioPosMapQuadTree
PUBLIC	??_GioPosMapQuadTree@@QAEPAXI@Z			; ioPosMapQuadTree::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GioPosMapQuadTree@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioPosMapQuadTree@@QAEPAXI@Z PROC			; ioPosMapQuadTree::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioPosMapQuadTree@@QAE@XZ ; ioPosMapQuadTree::~ioPosMapQuadTree
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioPosMapQuadTree@@QAEPAXI@Z ENDP			; ioPosMapQuadTree::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?IsLeaf@ioPosMapQuadTree@@QAE_NXZ		; ioPosMapQuadTree::IsLeaf
; Function compile flags: /Ogsp
;	COMDAT ?IsLeaf@ioPosMapQuadTree@@QAE_NXZ
_TEXT	SEGMENT
?IsLeaf@ioPosMapQuadTree@@QAE_NXZ PROC			; ioPosMapQuadTree::IsLeaf, COMDAT
; _this$ = ecx

; 103  : 	if( m_nSquared == m_nTileMax )

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	3b 41 1c	 cmp	 eax, DWORD PTR [ecx+28]
  00006	0f 94 c0	 sete	 al

; 104  : 		return true;
; 105  : 
; 106  : 	return false;
; 107  : }

  00009	c3		 ret	 0
?IsLeaf@ioPosMapQuadTree@@QAE_NXZ ENDP			; ioPosMapQuadTree::IsLeaf
_TEXT	ENDS
PUBLIC	?IsRoot@ioPosMapQuadTree@@QAE_NXZ		; ioPosMapQuadTree::IsRoot
; Function compile flags: /Ogsp
;	COMDAT ?IsRoot@ioPosMapQuadTree@@QAE_NXZ
_TEXT	SEGMENT
?IsRoot@ioPosMapQuadTree@@QAE_NXZ PROC			; ioPosMapQuadTree::IsRoot, COMDAT
; _this$ = ecx

; 111  : 	if( m_nSquared == 1 )

  00000	83 79 18 01	 cmp	 DWORD PTR [ecx+24], 1
  00004	0f 94 c0	 sete	 al

; 112  : 		return true;
; 113  : 
; 114  : 	return false;
; 115  : }

  00007	c3		 ret	 0
?IsRoot@ioPosMapQuadTree@@QAE_NXZ ENDP			; ioPosMapQuadTree::IsRoot
_TEXT	ENDS
PUBLIC	?TestIntersection@ioPosMapQuadTree@@QAE_NABVioRay@@@Z ; ioPosMapQuadTree::TestIntersection
EXTRN	__imp_?TestIntersection@ioMath@@SA_NABVioRay@@ABVioOrientBox@@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?TestIntersection@ioPosMapQuadTree@@QAE_NABVioRay@@@Z
_TEXT	SEGMENT
_kYRay$ = 8						; size = 4
?TestIntersection@ioPosMapQuadTree@@QAE_NABVioRay@@@Z PROC ; ioPosMapQuadTree::TestIntersection, COMDAT
; _this$ = ecx

; 155  : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 156  : 	if( ioMath::TestIntersection( kYRay, m_CollBox ) )

  00003	83 c1 30	 add	 ecx, 48			; 00000030H
  00006	51		 push	 ecx
  00007	ff 75 08	 push	 DWORD PTR _kYRay$[ebp]
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TestIntersection@ioMath@@SA_NABVioRay@@ABVioOrientBox@@@Z
  00010	59		 pop	 ecx
  00011	84 c0		 test	 al, al
  00013	59		 pop	 ecx
  00014	0f 95 c0	 setne	 al

; 157  : 		return true;
; 158  : 
; 159  : 	return false;
; 160  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?TestIntersection@ioPosMapQuadTree@@QAE_NABVioRay@@@Z ENDP ; ioPosMapQuadTree::TestIntersection
_TEXT	ENDS
PUBLIC	?FindBlockIndex@ioPosMapQuadTree@@QAE_NAAVioRay@@AAH1@Z ; ioPosMapQuadTree::FindBlockIndex
; Function compile flags: /Ogsp
;	COMDAT ?FindBlockIndex@ioPosMapQuadTree@@QAE_NAAVioRay@@AAH1@Z
_TEXT	SEGMENT
_i$512124 = -4						; size = 4
_kYRay$ = 8						; size = 4
_XPos$ = 12						; size = 4
_ZPos$ = 16						; size = 4
?FindBlockIndex@ioPosMapQuadTree@@QAE_NAAVioRay@@AAH1@Z PROC ; ioPosMapQuadTree::FindBlockIndex, COMDAT
; _this$ = ecx

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 164  : 	if( TestIntersection( kYRay ) )

  00007	ff 75 08	 push	 DWORD PTR _kYRay$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	e8 00 00 00 00	 call	 ?TestIntersection@ioPosMapQuadTree@@QAE_NABVioRay@@@Z ; ioPosMapQuadTree::TestIntersection
  00011	84 c0		 test	 al, al
  00013	74 43		 je	 SHORT $LN2@FindBlockI

; 165  : 	{
; 166  : 		if( IsLeaf() )

  00015	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00018	3b 46 1c	 cmp	 eax, DWORD PTR [esi+28]
  0001b	75 14		 jne	 SHORT $LN6@FindBlockI

; 167  : 		{
; 168  : 			XPos = m_FacePos.m_XPos;

  0001d	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _XPos$[ebp]
  00023	89 01		 mov	 DWORD PTR [ecx], eax

; 169  : 			ZPos = m_FacePos.m_ZPos;

  00025	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00028	8b 4d 10	 mov	 ecx, DWORD PTR _ZPos$[ebp]
  0002b	89 01		 mov	 DWORD PTR [ecx], eax
$LN18@FindBlockI:

; 170  : 			return true;

  0002d	b0 01		 mov	 al, 1
  0002f	eb 29		 jmp	 SHORT $LN8@FindBlockI
$LN6@FindBlockI:

; 171  : 		}
; 172  : 		else
; 173  : 		{
; 174  : 			for( int i = 0; i < FT_MAX; ++i )

  00031	83 65 fc 00	 and	 DWORD PTR _i$512124[ebp], 0
  00035	8b 7d 10	 mov	 edi, DWORD PTR _ZPos$[ebp]
  00038	8b 5d 0c	 mov	 ebx, DWORD PTR _XPos$[ebp]
$LL17@FindBlockI:

; 175  : 			{
; 176  : 				if( m_pChild[i]->FindBlockIndex( kYRay, XPos, ZPos ) )

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _i$512124[ebp]
  0003e	8b 0c 86	 mov	 ecx, DWORD PTR [esi+eax*4]
  00041	57		 push	 edi
  00042	53		 push	 ebx
  00043	ff 75 08	 push	 DWORD PTR _kYRay$[ebp]
  00046	e8 00 00 00 00	 call	 ?FindBlockIndex@ioPosMapQuadTree@@QAE_NAAVioRay@@AAH1@Z ; ioPosMapQuadTree::FindBlockIndex
  0004b	84 c0		 test	 al, al
  0004d	75 12		 jne	 SHORT $LN14@FindBlockI

; 171  : 		}
; 172  : 		else
; 173  : 		{
; 174  : 			for( int i = 0; i < FT_MAX; ++i )

  0004f	ff 45 fc	 inc	 DWORD PTR _i$512124[ebp]
  00052	83 7d fc 04	 cmp	 DWORD PTR _i$512124[ebp], 4
  00056	7c e3		 jl	 SHORT $LL17@FindBlockI
$LN2@FindBlockI:

; 181  : 				}
; 182  : 			}
; 183  : 		}
; 184  : 	}
; 185  : 
; 186  : 	return false;

  00058	32 c0		 xor	 al, al
$LN8@FindBlockI:
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx

; 187  : }

  0005d	c9		 leave
  0005e	c2 0c 00	 ret	 12			; 0000000cH
$LN14@FindBlockI:

; 177  : 				{
; 178  : 					XPos += m_FacePos.m_XPos; 

  00061	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00064	01 03		 add	 DWORD PTR [ebx], eax

; 179  : 					ZPos += m_FacePos.m_ZPos;

  00066	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00069	01 07		 add	 DWORD PTR [edi], eax

; 180  : 					return true;

  0006b	eb c0		 jmp	 SHORT $LN18@FindBlockI
?FindBlockIndex@ioPosMapQuadTree@@QAE_NAAVioRay@@AAH1@Z ENDP ; ioPosMapQuadTree::FindBlockIndex
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ; std::vector<int,std::allocator<int> >::_Inside
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z PROC ; std::vector<int,std::allocator<int> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ENDP ; std::vector<int,std::allocator<int> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??$addressof@H@std@@YAPAHAAH@Z			; std::addressof<int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@H@std@@YAPAHAAH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@H@std@@YAPAHAAH@Z PROC			; std::addressof<int>, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@H@std@@YAPAHAAH@Z ENDP			; std::addressof<int>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar@2
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar@2:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??0D3DXQUATERNION@@QAE@XZ			; D3DXQUATERNION::D3DXQUATERNION
; Function compile flags: /Ogsp
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT
??0D3DXQUATERNION@@QAE@XZ PROC				; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 429  :     D3DXQUATERNION() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXQUATERNION@@QAE@XZ ENDP				; D3DXQUATERNION::D3DXQUATERNION
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogsp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	ff 4d 10	 dec	 DWORD PTR ___n$[ebp]
  00006	78 12		 js	 SHORT $LN1@vector
  00008	56		 push	 esi
  00009	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  0000c	8b ce		 mov	 ecx, esi
  0000e	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00011	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00014	ff 4d 10	 dec	 DWORD PTR ___n$[ebp]
  00017	79 f3		 jns	 SHORT $LL2@vector
  00019	5e		 pop	 esi
$LN1@vector:
  0001a	5d		 pop	 ebp
  0001b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC	; std::vector<int,std::allocator<int> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP	; std::vector<int,std::allocator<int> >::size
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@H@std@@QAEXPAHI@Z	; std::allocator<int>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@H@std@@QAEXPAHI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@H@std@@QAEXPAHI@Z PROC		; std::allocator<int>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@H@std@@QAEXPAHI@Z ENDP		; std::allocator<int>::deallocate
_TEXT	ENDS
PUBLIC	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ; std::vector<int,std::allocator<int> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ PROC	; std::vector<int,std::allocator<int> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xlen
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@H@std@@QBEIXZ		; std::allocator<int>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@H@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@H@std@@QBEIXZ PROC		; std::allocator<int>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@H@std@@QBEIXZ ENDP		; std::allocator<int>::max_size
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@H@std@@YAPAHIPAH@Z			; std::_Allocate<int>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@H@std@@YAPAHIPAH@Z
_TEXT	SEGMENT
$T512454 = -12						; size = 12
$T512459 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@H@std@@YAPAHIPAH@Z PROC			; std::_Allocate<int>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3e		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate
  00017	8b c1		 mov	 eax, ecx
  00019	c1 e0 02	 shl	 eax, 2
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	59		 pop	 ecx
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	83 65 08 00	 and	 DWORD PTR $T512459[ebp], 0
  0002b	8d 45 08	 lea	 eax, DWORD PTR $T512459[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T512454[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00038	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003d	8d 45 f4	 lea	 eax, DWORD PTR $T512454[ebp]
  00040	50		 push	 eax
  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T512454[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00048	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004d	c9		 leave
  0004e	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@H@std@@YAPAHIPAH@Z ENDP			; std::_Allocate<int>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Val_type@PAH@std@@YAPAHPAH@Z		; std::_Val_type<int *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAH@std@@YAPAHPAH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAH@std@@YAPAHPAH@Z PROC			; std::_Val_type<int *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAH@std@@YAPAHPAH@Z ENDP			; std::_Val_type<int *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z PROC ; std::_Ptr_cat<int,int>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ENDP ; std::_Ptr_cat<int,int>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 105  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<int,int,int>
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<int,int,int>, COMDAT

; 456  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 457  : 	_DEBUG_RANGE(_First, _Last);
; 458  : 	_DEBUG_POINTER(_Dest);
; 459  : 	size_t _Count = (size_t)(_Last - _First);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2

; 460  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 461  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 462  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<int,int,int>
_TEXT	ENDS
PUBLIC	??$forward@H@std@@YA$$QAHAAH@Z			; std::forward<int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@H@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@H@std@@YA$$QAHAAH@Z PROC			; std::forward<int>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@H@std@@YA$$QAHAAH@Z ENDP			; std::forward<int>
_TEXT	ENDS
PUBLIC	??0ioPosMapQuadTree@@QAE@XZ			; ioPosMapQuadTree::ioPosMapQuadTree
EXTRN	__imp_?VEC3_ZERO@ioMath@@2UD3DXVECTOR3@@A:BYTE
EXTRN	__imp_?QUAT_IDENTITY@ioMath@@2UD3DXQUATERNION@@A:BYTE
EXTRN	__imp_??0ioOrientBox@@QAE@XZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\housing\ioposmapquadtree.cpp
;	COMDAT ??0ioPosMapQuadTree@@QAE@XZ
_TEXT	SEGMENT
??0ioPosMapQuadTree@@QAE@XZ PROC			; ioPosMapQuadTree::ioPosMapQuadTree, COMDAT
; _this$ = ecx

; 9    : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	83 4b 14 ff	 or	 DWORD PTR [ebx+20], -1
  00007	83 4b 10 ff	 or	 DWORD PTR [ebx+16], -1
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	8d 4b 30	 lea	 ecx, DWORD PTR [ebx+48]
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioOrientBox@@QAE@XZ

; 10   : 	for( int i = 0; i < FT_MAX; ++i )
; 11   : 		m_pChild[i] = NULL;

  00016	33 c0		 xor	 eax, eax
  00018	8b fb		 mov	 edi, ebx
  0001a	ab		 stosd
  0001b	ab		 stosd
  0001c	ab		 stosd
  0001d	ab		 stosd

; 12   : 		
; 13   : 	m_nSquared	= 0;

  0001e	83 63 18 00	 and	 DWORD PTR [ebx+24], 0

; 14   : 	m_nTileMax	= 0;

  00022	83 63 1c 00	 and	 DWORD PTR [ebx+28], 0

; 15   : 
; 16   : 	m_CollRot	= ioMath::QUAT_IDENTITY;

  00026	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?QUAT_IDENTITY@ioMath@@2UD3DXQUATERNION@@A
  0002c	8d 7b 20	 lea	 edi, DWORD PTR [ebx+32]
  0002f	a5		 movsd
  00030	a5		 movsd
  00031	a5		 movsd
  00032	a5		 movsd

; 17   : 	m_vWorldPos	= ioMath::VEC3_ZERO;

  00033	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?VEC3_ZERO@ioMath@@2UD3DXVECTOR3@@A
  00039	8d 7b 74	 lea	 edi, DWORD PTR [ebx+116]
  0003c	a5		 movsd
  0003d	a5		 movsd
  0003e	a5		 movsd
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi

; 18   : }

  00041	8b c3		 mov	 eax, ebx
  00043	5b		 pop	 ebx
  00044	c3		 ret	 0
??0ioPosMapQuadTree@@QAE@XZ ENDP			; ioPosMapQuadTree::ioPosMapQuadTree
_TEXT	ENDS
PUBLIC	__real@4004000000000000
PUBLIC	?UpdateCollBox@ioPosMapQuadTree@@QAEXH@Z	; ioPosMapQuadTree::UpdateCollBox
EXTRN	__imp_?SetCenter@ioOrientBox@@QAEXABUD3DXVECTOR3@@@Z:PROC
EXTRN	__imp_?Transform@ioOrientBox@@QAEXABUD3DXVECTOR3@@0ABUD3DXQUATERNION@@@Z:PROC
EXTRN	__imp_?UNIT_ALL@ioMath@@2UD3DXVECTOR3@@A:BYTE
EXTRN	__imp_?SetBoxByMinMax@ioOrientBox@@QAEXABUD3DXVECTOR3@@0@Z:PROC
EXTRN	__fltused:DWORD
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT __real@4004000000000000
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
CONST	SEGMENT
__real@4004000000000000 DQ 04004000000000000r	; 2.5
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?UpdateCollBox@ioPosMapQuadTree@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UpdateCollBox@ioPosMapQuadTree@@QAEXH@Z$0
__ehfuncinfo$?UpdateCollBox@ioPosMapQuadTree@@QAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?UpdateCollBox@ioPosMapQuadTree@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\housing\ioposmapquadtree.cpp
xdata$x	ENDS
;	COMDAT ?UpdateCollBox@ioPosMapQuadTree@@QAEXH@Z
_TEXT	SEGMENT
_kBox$ = -120						; size = 68
_vPos$ = -52						; size = 12
_vMax$ = -40						; size = 12
_vMin$ = -28						; size = 12
__$EHRec$ = -12						; size = 12
_nSquared$ = 8						; size = 4
?UpdateCollBox@ioPosMapQuadTree@@QAEXH@Z PROC		; ioPosMapQuadTree::UpdateCollBox, COMDAT
; _this$ = ecx

; 132  : {

  00000	6a 6c		 push	 108			; 0000006cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?UpdateCollBox@ioPosMapQuadTree@@QAEXH@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b d9		 mov	 ebx, ecx

; 133  : 	D3DXVECTOR3 vPos = m_vWorldPos;	
; 134  : 	
; 135  : 	D3DXVECTOR3 vMin, vMax;
; 136  : 	vMax = vMin = vPos;
; 137  : 
; 138  : 	vMin.x -= ( (UD_SIZE * m_nTileMax) / nSquared ) / 2;

  0000e	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00011	6b c0 64	 imul	 eax, 100		; 00000064H
  00014	99		 cdq
  00015	f7 7d 08	 idiv	 DWORD PTR _nSquared$[ebp]
  00018	8d 73 74	 lea	 esi, DWORD PTR [ebx+116]
  0001b	8d 7d cc	 lea	 edi, DWORD PTR _vPos$[ebp]
  0001e	a5		 movsd
  0001f	a5		 movsd
  00020	a5		 movsd
  00021	8d 73 74	 lea	 esi, DWORD PTR [ebx+116]
  00024	8d 7d e4	 lea	 edi, DWORD PTR _vMin$[ebp]
  00027	a5		 movsd
  00028	a5		 movsd
  00029	a5		 movsd
  0002a	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _vMin$[ebp]
  0002f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00032	99		 cdq
  00033	8d 73 74	 lea	 esi, DWORD PTR [ebx+116]
  00036	8d 7d d8	 lea	 edi, DWORD PTR _vMax$[ebp]
  00039	a5		 movsd
  0003a	a5		 movsd
  0003b	2b c2		 sub	 eax, edx
  0003d	0f 57 c9	 xorps	 xmm1, xmm1
  00040	d1 f8		 sar	 eax, 1
  00042	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00046	0f 5a d1	 cvtps2pd xmm2, xmm1
  00049	f2 0f 5c c2	 subsd	 xmm0, xmm2
  0004d	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00051	f3 0f 11 45 e4	 movss	 DWORD PTR _vMin$[ebp], xmm0
  00056	a5		 movsd

; 139  : 	vMax.x += ( (UD_SIZE * m_nTileMax) / nSquared ) / 2;

  00057	f3 0f 10 55 d8	 movss	 xmm2, DWORD PTR _vMax$[ebp]
  0005c	0f 5a c1	 cvtps2pd xmm0, xmm1
  0005f	0f 5a d2	 cvtps2pd xmm2, xmm2
  00062	f2 0f 58 c2	 addsd	 xmm0, xmm2
  00066	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0006a	f3 0f 11 45 d8	 movss	 DWORD PTR _vMax$[ebp], xmm0

; 140  : 
; 141  : 	vMin.y -= 2.5f;	

  0006f	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _vMin$[ebp+4]

; 142  : 	vMax.y += 2.5f;
; 143  : 
; 144  : 	vMin.z -= ( (UD_SIZE * m_nTileMax) / nSquared ) / 2;
; 145  : 	vMax.z += ( (UD_SIZE * m_nTileMax) / nSquared ) / 2;
; 146  : 
; 147  : 	ioOrientBox kBox;

  00074	8d 4d 88	 lea	 ecx, DWORD PTR _kBox$[ebp]
  00077	0f 5a d0	 cvtps2pd xmm2, xmm0
  0007a	f2 0f 5c 15 00
	00 00 00	 subsd	 xmm2, QWORD PTR __real@4004000000000000
  00082	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  00086	f3 0f 11 55 e8	 movss	 DWORD PTR _vMin$[ebp+4], xmm2
  0008b	f3 0f 10 55 dc	 movss	 xmm2, DWORD PTR _vMax$[ebp+4]
  00090	0f 57 c0	 xorps	 xmm0, xmm0
  00093	0f 5a d2	 cvtps2pd xmm2, xmm2
  00096	f2 0f 58 15 00
	00 00 00	 addsd	 xmm2, QWORD PTR __real@4004000000000000
  0009e	66 0f 5a c2	 cvtpd2ps xmm0, xmm2
  000a2	f3 0f 11 45 dc	 movss	 DWORD PTR _vMax$[ebp+4], xmm0
  000a7	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _vMin$[ebp+8]
  000ac	0f 5a c0	 cvtps2pd xmm0, xmm0
  000af	0f 5a d1	 cvtps2pd xmm2, xmm1
  000b2	f2 0f 5c c2	 subsd	 xmm0, xmm2
  000b6	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000ba	f3 0f 11 45 ec	 movss	 DWORD PTR _vMin$[ebp+8], xmm0
  000bf	0f 5a c1	 cvtps2pd xmm0, xmm1
  000c2	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _vMax$[ebp+8]
  000c7	0f 5a c9	 cvtps2pd xmm1, xmm1
  000ca	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000ce	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000d2	f3 0f 11 45 e0	 movss	 DWORD PTR _vMax$[ebp+8], xmm0
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioOrientBox@@QAE@XZ
  000dd	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 148  : 	kBox.SetBoxByMinMax( vMin, vMax );

  000e1	8d 45 d8	 lea	 eax, DWORD PTR _vMax$[ebp]
  000e4	50		 push	 eax
  000e5	8d 45 e4	 lea	 eax, DWORD PTR _vMin$[ebp]
  000e8	50		 push	 eax
  000e9	8d 4d 88	 lea	 ecx, DWORD PTR _kBox$[ebp]
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetBoxByMinMax@ioOrientBox@@QAEXABUD3DXVECTOR3@@0@Z

; 149  : 	kBox.Transform( vPos, ioMath::UNIT_ALL, m_CollRot );

  000f2	8d 43 20	 lea	 eax, DWORD PTR [ebx+32]
  000f5	50		 push	 eax
  000f6	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?UNIT_ALL@ioMath@@2UD3DXVECTOR3@@A
  000fc	8d 45 cc	 lea	 eax, DWORD PTR _vPos$[ebp]
  000ff	50		 push	 eax
  00100	8d 4d 88	 lea	 ecx, DWORD PTR _kBox$[ebp]
  00103	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Transform@ioOrientBox@@QAEXABUD3DXVECTOR3@@0ABUD3DXQUATERNION@@@Z

; 150  : 	kBox.SetCenter( vPos );

  00109	8d 45 cc	 lea	 eax, DWORD PTR _vPos$[ebp]
  0010c	50		 push	 eax
  0010d	8d 4d 88	 lea	 ecx, DWORD PTR _kBox$[ebp]
  00110	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetCenter@ioOrientBox@@QAEXABUD3DXVECTOR3@@@Z

; 151  : 	m_CollBox = kBox;
; 152  : }

  00116	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0011a	6a 11		 push	 17			; 00000011H
  0011c	59		 pop	 ecx
  0011d	8d 7b 30	 lea	 edi, DWORD PTR [ebx+48]
  00120	8d 75 88	 lea	 esi, DWORD PTR _kBox$[ebp]
  00123	f3 a5		 rep movsd
  00125	8d 4d 88	 lea	 ecx, DWORD PTR _kBox$[ebp]
  00128	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioOrientBox@@QAE@XZ
  0012e	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00133	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UpdateCollBox@ioPosMapQuadTree@@QAEXH@Z$0:
  00000	8d 4d 88	 lea	 ecx, DWORD PTR _kBox$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioOrientBox@@QAE@XZ
__ehhandler$?UpdateCollBox@ioPosMapQuadTree@@QAEXH@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a 84	 mov	 ecx, DWORD PTR [edx-124]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?UpdateCollBox@ioPosMapQuadTree@@QAEXH@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?UpdateCollBox@ioPosMapQuadTree@@QAEXH@Z ENDP		; ioPosMapQuadTree::UpdateCollBox
PUBLIC	_pCamera$GSCopy$
PUBLIC	?RenderCollision@ioPosMapQuadTree@@QAEXPAVioPlayStage@@PAVioCamera@@@Z ; ioPosMapQuadTree::RenderCollision
EXTRN	__imp_??1ioSphere@@QAE@XZ:PROC
EXTRN	?RenderBox@ioPlayStage@@QAEXPBUD3DXVECTOR3@@K@Z:PROC ; ioPlayStage::RenderBox
EXTRN	__imp_?GetVertices@ioOrientBox@@QBEXPAUD3DXVECTOR3@@@Z:PROC
EXTRN	__imp_?IsVisible@ioCamera@@QBE_NABVioSphere@@@Z:PROC
EXTRN	__imp_??0ioSphere@@QAE@ABUD3DXVECTOR3@@M@Z:PROC
EXTRN	__imp_?GetCenter@ioOrientBox@@QBEABUD3DXVECTOR3@@XZ:PROC
EXTRN	__imp_?GetBoxRadius@ioOrientBox@@QBEMXZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
xdata$x	SEGMENT
__unwindtable$?RenderCollision@ioPosMapQuadTree@@QAEXPAVioPlayStage@@PAVioCamera@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RenderCollision@ioPosMapQuadTree@@QAEXPAVioPlayStage@@PAVioCamera@@@Z$0
__ehfuncinfo$?RenderCollision@ioPosMapQuadTree@@QAEXPAVioPlayStage@@PAVioCamera@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RenderCollision@ioPosMapQuadTree@@QAEXPAVioPlayStage@@PAVioCamera@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\housing\ioposmapquadtree.cpp
xdata$x	ENDS
;	COMDAT ?RenderCollision@ioPosMapQuadTree@@QAEXPAVioPlayStage@@PAVioCamera@@@Z
_TEXT	SEGMENT
_pCamera$GSCopy$ = -132					; size = 4
_kSphere$ = -128					; size = 16
_vVtxArray$ = -112					; size = 96
__$EHRec$ = -12						; size = 12
_pStage$ = 8						; size = 4
_pCamera$ = 12						; size = 4
?RenderCollision@ioPosMapQuadTree@@QAEXPAVioPlayStage@@PAVioCamera@@@Z PROC ; ioPosMapQuadTree::RenderCollision, COMDAT
; _this$ = ecx

; 213  : {

  00000	6a 78		 push	 120			; 00000078H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?RenderCollision@ioPosMapQuadTree@@QAEXPAVioPlayStage@@PAVioCamera@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _pCamera$[ebp]
  0000f	8b 5d 08	 mov	 ebx, DWORD PTR _pStage$[ebp]
  00012	8b f9		 mov	 edi, ecx

; 214  : 	ioSphere kSphere( m_CollBox.GetCenter(), m_CollBox.GetBoxRadius() );

  00014	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]

; 221  : 
; 222  : 	for( int i = 0; i < FT_MAX; ++i )

  00017	89 85 7c ff ff
	ff		 mov	 DWORD PTR _pCamera$GSCopy$[ebp], eax
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetBoxRadius@ioOrientBox@@QBEMXZ
  00023	51		 push	 ecx
  00024	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  00027	d9 1c 24	 fstp	 DWORD PTR [esp]
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetCenter@ioOrientBox@@QBEABUD3DXVECTOR3@@XZ
  00030	50		 push	 eax
  00031	8d 4d 80	 lea	 ecx, DWORD PTR _kSphere$[ebp]
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioSphere@@QAE@ABUD3DXVECTOR3@@M@Z
  0003a	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _pCamera$GSCopy$[ebp]
  00040	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00044	85 c9		 test	 ecx, ecx
  00046	74 46		 je	 SHORT $LN5@RenderColl

; 215  : 	if( !pCamera || !pCamera->IsVisible( kSphere ) )

  00048	8d 45 80	 lea	 eax, DWORD PTR _kSphere$[ebp]
  0004b	50		 push	 eax
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsVisible@ioCamera@@QBE_NABVioSphere@@@Z
  00052	84 c0		 test	 al, al
  00054	74 38		 je	 SHORT $LN5@RenderColl

; 217  : 
; 218  : 	D3DXVECTOR3 vVtxArray[8];
; 219  : 	m_CollBox.GetVertices( vVtxArray );

  00056	8d 45 90	 lea	 eax, DWORD PTR _vVtxArray$[ebp]
  00059	50		 push	 eax
  0005a	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetVertices@ioOrientBox@@QBEXPAUD3DXVECTOR3@@@Z

; 220  : 	pStage->RenderBox( vVtxArray, 0xff0000ff );

  00063	68 ff 00 00 ff	 push	 -16776961		; ff0000ffH
  00068	8d 45 90	 lea	 eax, DWORD PTR _vVtxArray$[ebp]
  0006b	50		 push	 eax
  0006c	8b cb		 mov	 ecx, ebx
  0006e	e8 00 00 00 00	 call	 ?RenderBox@ioPlayStage@@QAEXPBUD3DXVECTOR3@@K@Z ; ioPlayStage::RenderBox

; 221  : 
; 222  : 	for( int i = 0; i < FT_MAX; ++i )

  00073	33 f6		 xor	 esi, esi
$LN4@RenderColl:

; 223  : 	{
; 224  : 		if( m_pChild[i] )

  00075	8b 0c b7	 mov	 ecx, DWORD PTR [edi+esi*4]
  00078	85 c9		 test	 ecx, ecx
  0007a	74 0c		 je	 SHORT $LN3@RenderColl

; 225  : 			m_pChild[i]->RenderCollision( pStage, pCamera );

  0007c	ff b5 7c ff ff
	ff		 push	 DWORD PTR _pCamera$GSCopy$[ebp]
  00082	53		 push	 ebx
  00083	e8 00 00 00 00	 call	 ?RenderCollision@ioPosMapQuadTree@@QAEXPAVioPlayStage@@PAVioCamera@@@Z ; ioPosMapQuadTree::RenderCollision
$LN3@RenderColl:

; 221  : 
; 222  : 	for( int i = 0; i < FT_MAX; ++i )

  00088	46		 inc	 esi
  00089	83 fe 04	 cmp	 esi, 4
  0008c	7c e7		 jl	 SHORT $LN4@RenderColl
$LN5@RenderColl:

; 216  : 		return;

  0008e	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00092	8d 4d 80	 lea	 ecx, DWORD PTR _kSphere$[ebp]
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioSphere@@QAE@XZ

; 226  : 	}
; 227  : }

  0009b	e8 00 00 00 00	 call	 __EH_epilog3_GS
  000a0	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RenderCollision@ioPosMapQuadTree@@QAEXPAVioPlayStage@@PAVioCamera@@@Z$0:
  00000	8d 4d 80	 lea	 ecx, DWORD PTR _kSphere$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioSphere@@QAE@XZ
__ehhandler$?RenderCollision@ioPosMapQuadTree@@QAEXPAVioPlayStage@@PAVioCamera@@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 8a 78 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-136]
  00016	33 c8		 xor	 ecx, eax
  00018	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RenderCollision@ioPosMapQuadTree@@QAEXPAVioPlayStage@@PAVioCamera@@@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RenderCollision@ioPosMapQuadTree@@QAEXPAVioPlayStage@@PAVioCamera@@@Z ENDP ; ioPosMapQuadTree::RenderCollision
PUBLIC	?construct@?$allocator@H@std@@QAEXPAH$$QAH@Z	; std::allocator<int>::construct
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@H@std@@QAEXPAH$$QAH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@H@std@@QAEXPAH$$QAH@Z PROC	; std::allocator<int>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@construct:

; 203  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?construct@?$allocator@H@std@@QAEXPAH$$QAH@Z ENDP	; std::allocator<int>::construct
_TEXT	ENDS
PUBLIC	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ; std::vector<int,std::allocator<int> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z PROC ; std::vector<int,std::allocator<int> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  0000d	c1 f8 02	 sar	 eax, 2
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00023	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ENDP ; std::vector<int,std::allocator<int> >::_Grow_to
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@H@std@@QAEPAHI@Z		; std::allocator<int>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@H@std@@QAEPAHI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@H@std@@QAEPAHI@Z PROC		; std::allocator<int>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@H@std@@YAPAHIPAH@Z ; std::_Allocate<int>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@H@std@@QAEPAHI@Z ENDP		; std::allocator<int>::allocate
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,int *,std::allocator<int> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z PROC ; std::_Uninitialized_move<int *,int *,std::allocator<int> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2
  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 472  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z ENDP ; std::_Uninitialized_move<int *,int *,std::allocator<int> >
_TEXT	ENDS
PUBLIC	?AddChild@ioPosMapQuadTree@@QAEXW4FaceType@1@ABUD3DXVECTOR3@@HPAV1@H@Z ; ioPosMapQuadTree::AddChild
PUBLIC	?Build@ioPosMapQuadTree@@QAEXABUD3DXVECTOR3@@HHHH@Z ; ioPosMapQuadTree::Build
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\housing\ioposmapquadtree.cpp
;	COMDAT ?Build@ioPosMapQuadTree@@QAEXABUD3DXVECTOR3@@HHHH@Z
_TEXT	SEGMENT
_vPos$ = 8						; size = 4
_nFaceType$ = 12					; size = 4
_nFaceMax$ = 16						; size = 4
_nSquared$ = 20						; size = 4
_nTileMax$ = 24						; size = 4
?Build@ioPosMapQuadTree@@QAEXABUD3DXVECTOR3@@HHHH@Z PROC ; ioPosMapQuadTree::Build, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 28   : 	m_nTileMax = nTileMax;

  00003	8b 45 18	 mov	 eax, DWORD PTR _nTileMax$[ebp]
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	89 43 1c	 mov	 DWORD PTR [ebx+28], eax

; 29   : 
; 30   : 	switch( nFaceType )

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _nFaceType$[ebp]
  0000f	33 c9		 xor	 ecx, ecx
  00011	2b c1		 sub	 eax, ecx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	74 28		 je	 SHORT $LN5@Build
  00017	48		 dec	 eax
  00018	74 18		 je	 SHORT $LN4@Build
  0001a	48		 dec	 eax
  0001b	74 0b		 je	 SHORT $LN3@Build
  0001d	48		 dec	 eax

; 44   : 	default:
; 45   : 		m_FacePos = FacePos( 0, 0 );
; 46   : 		break;

  0001e	75 1f		 jne	 SHORT $LN5@Build

; 41   : 	case FT_4_4:
; 42   : 		m_FacePos = FacePos( nFaceMax, nFaceMax );

  00020	8b 45 10	 mov	 eax, DWORD PTR _nFaceMax$[ebp]
  00023	89 43 14	 mov	 DWORD PTR [ebx+20], eax

; 43   : 		break;

  00026	eb 1c		 jmp	 SHORT $LN20@Build
$LN3@Build:

; 38   : 	case FT_3_4:
; 39   : 		m_FacePos = FacePos( 0, nFaceMax );

  00028	33 c0		 xor	 eax, eax
  0002a	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  0002d	8b 45 10	 mov	 eax, DWORD PTR _nFaceMax$[ebp]

; 40   : 		break;

  00030	eb 08		 jmp	 SHORT $LN21@Build
$LN4@Build:

; 34   : 		break;
; 35   : 	case FT_2_4:
; 36   : 		m_FacePos = FacePos( nFaceMax, 0 );

  00032	8b 4d 10	 mov	 ecx, DWORD PTR _nFaceMax$[ebp]
  00035	33 c0		 xor	 eax, eax
  00037	89 4b 10	 mov	 DWORD PTR [ebx+16], ecx
$LN21@Build:
  0003a	89 43 14	 mov	 DWORD PTR [ebx+20], eax

; 37   : 		break;

  0003d	eb 08		 jmp	 SHORT $LN6@Build
$LN5@Build:

; 31   : 	{
; 32   : 	case FT_1_4:
; 33   : 		m_FacePos = FacePos( 0, 0 );

  0003f	33 c0		 xor	 eax, eax
  00041	89 4b 14	 mov	 DWORD PTR [ebx+20], ecx
$LN20@Build:
  00044	89 43 10	 mov	 DWORD PTR [ebx+16], eax
$LN6@Build:

; 47   : 	}
; 48   : 
; 49   : 	m_vWorldPos			= vPos;

  00047	8b 75 08	 mov	 esi, DWORD PTR _vPos$[ebp]
  0004a	8d 7b 74	 lea	 edi, DWORD PTR [ebx+116]
  0004d	a5		 movsd
  0004e	a5		 movsd
  0004f	a5		 movsd

; 50   : 	m_nSquared			= nSquared;

  00050	8b 75 14	 mov	 esi, DWORD PTR _nSquared$[ebp]

; 51   : 	
; 52   : 	UpdateCollBox( nSquared );

  00053	56		 push	 esi
  00054	8b cb		 mov	 ecx, ebx
  00056	89 73 18	 mov	 DWORD PTR [ebx+24], esi
  00059	e8 00 00 00 00	 call	 ?UpdateCollBox@ioPosMapQuadTree@@QAEXH@Z ; ioPosMapQuadTree::UpdateCollBox

; 53   : 
; 54   : 	nSquared = nSquared * 2;
; 55   : 
; 56   : 	AddChild( FT_1_4, vPos, nFaceMax/2, this, nSquared );

  0005e	8b 45 10	 mov	 eax, DWORD PTR _nFaceMax$[ebp]
  00061	99		 cdq
  00062	2b c2		 sub	 eax, edx
  00064	03 f6		 add	 esi, esi
  00066	56		 push	 esi
  00067	8b f8		 mov	 edi, eax
  00069	53		 push	 ebx
  0006a	d1 ff		 sar	 edi, 1
  0006c	57		 push	 edi
  0006d	ff 75 08	 push	 DWORD PTR _vPos$[ebp]
  00070	8b cb		 mov	 ecx, ebx
  00072	6a 00		 push	 0
  00074	e8 00 00 00 00	 call	 ?AddChild@ioPosMapQuadTree@@QAEXW4FaceType@1@ABUD3DXVECTOR3@@HPAV1@H@Z ; ioPosMapQuadTree::AddChild

; 57   : 	AddChild( FT_2_4, vPos, nFaceMax/2, this, nSquared );

  00079	56		 push	 esi
  0007a	53		 push	 ebx
  0007b	57		 push	 edi
  0007c	ff 75 08	 push	 DWORD PTR _vPos$[ebp]
  0007f	8b cb		 mov	 ecx, ebx
  00081	6a 01		 push	 1
  00083	e8 00 00 00 00	 call	 ?AddChild@ioPosMapQuadTree@@QAEXW4FaceType@1@ABUD3DXVECTOR3@@HPAV1@H@Z ; ioPosMapQuadTree::AddChild

; 58   : 	AddChild( FT_3_4, vPos, nFaceMax/2, this, nSquared );

  00088	56		 push	 esi
  00089	53		 push	 ebx
  0008a	57		 push	 edi
  0008b	ff 75 08	 push	 DWORD PTR _vPos$[ebp]
  0008e	8b cb		 mov	 ecx, ebx
  00090	6a 02		 push	 2
  00092	e8 00 00 00 00	 call	 ?AddChild@ioPosMapQuadTree@@QAEXW4FaceType@1@ABUD3DXVECTOR3@@HPAV1@H@Z ; ioPosMapQuadTree::AddChild

; 59   : 	AddChild( FT_4_4, vPos, nFaceMax/2, this, nSquared );

  00097	56		 push	 esi
  00098	53		 push	 ebx
  00099	57		 push	 edi
  0009a	ff 75 08	 push	 DWORD PTR _vPos$[ebp]
  0009d	8b cb		 mov	 ecx, ebx
  0009f	6a 03		 push	 3
  000a1	e8 00 00 00 00	 call	 ?AddChild@ioPosMapQuadTree@@QAEXW4FaceType@1@ABUD3DXVECTOR3@@HPAV1@H@Z ; ioPosMapQuadTree::AddChild
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx

; 60   : }

  000a9	5d		 pop	 ebp
  000aa	c2 14 00	 ret	 20			; 00000014H
?Build@ioPosMapQuadTree@@QAEXABUD3DXVECTOR3@@HHHH@Z ENDP ; ioPosMapQuadTree::Build
_TEXT	ENDS
PUBLIC	_eType$GSCopy$
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddChild@ioPosMapQuadTree@@QAEXW4FaceType@1@ABUD3DXVECTOR3@@HPAV1@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddChild@ioPosMapQuadTree@@QAEXW4FaceType@1@ABUD3DXVECTOR3@@HPAV1@H@Z$0
__ehfuncinfo$?AddChild@ioPosMapQuadTree@@QAEXW4FaceType@1@ABUD3DXVECTOR3@@HPAV1@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddChild@ioPosMapQuadTree@@QAEXW4FaceType@1@ABUD3DXVECTOR3@@HPAV1@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?AddChild@ioPosMapQuadTree@@QAEXW4FaceType@1@ABUD3DXVECTOR3@@HPAV1@H@Z
_TEXT	SEGMENT
$T512647 = -36						; size = 4
_eType$GSCopy$ = -32					; size = 4
_vChildPos$ = -28					; size = 12
__$EHRec$ = -12						; size = 12
_eType$ = 8						; size = 4
_vPos$ = 12						; size = 4
_nFaceMax$ = 16						; size = 4
_pParents$ = 20						; size = 4
_nSquared$ = 24						; size = 4
?AddChild@ioPosMapQuadTree@@QAEXW4FaceType@1@ABUD3DXVECTOR3@@HPAV1@H@Z PROC ; ioPosMapQuadTree::AddChild, COMDAT
; _this$ = ecx

; 63   : {

  00000	6a 18		 push	 24			; 00000018H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?AddChild@ioPosMapQuadTree@@QAEXW4FaceType@1@ABUD3DXVECTOR3@@HPAV1@H@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 75 0c	 mov	 esi, DWORD PTR _vPos$[ebp]
  0000f	8b d9		 mov	 ebx, ecx

; 64   : 	if( nSquared > m_nTileMax )

  00011	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _eType$[ebp]

; 95   : 	}
; 96   : 
; 97   : 	m_pChild[eType] = new ioPosMapQuadTree();

  00017	89 4d e0	 mov	 DWORD PTR _eType$GSCopy$[ebp], ecx
  0001a	39 45 18	 cmp	 DWORD PTR _nSquared$[ebp], eax
  0001d	0f 8f ff 00 00
	00		 jg	 $LN8@AddChild

; 65   : 		return;
; 66   : 
; 67   : 	int  nUnit = (UD_SIZE * m_nTileMax) / nSquared / 2;

  00023	6b c0 64	 imul	 eax, 100		; 00000064H
  00026	99		 cdq
  00027	f7 7d 18	 idiv	 DWORD PTR _nSquared$[ebp]

; 68   : 	D3DXVECTOR3 vChildPos = vPos;

  0002a	8d 7d e4	 lea	 edi, DWORD PTR _vChildPos$[ebp]
  0002d	a5		 movsd
  0002e	a5		 movsd
  0002f	a5		 movsd
  00030	99		 cdq
  00031	2b c2		 sub	 eax, edx
  00033	d1 f8		 sar	 eax, 1

; 69   : 	switch( eType )

  00035	83 e9 00	 sub	 ecx, 0
  00038	74 71		 je	 SHORT $LN4@AddChild
  0003a	49		 dec	 ecx
  0003b	74 56		 je	 SHORT $LN3@AddChild
  0003d	49		 dec	 ecx
  0003e	74 3b		 je	 SHORT $LN2@AddChild
  00040	49		 dec	 ecx
  00041	0f 85 9b 00 00
	00		 jne	 $LN5@AddChild

; 89   : 	case FT_4_4:
; 90   : 		{
; 91   : 			vChildPos.x += nUnit;

  00047	f3 0f 10 55 e4	 movss	 xmm2, DWORD PTR _vChildPos$[ebp]
  0004c	0f 57 c0	 xorps	 xmm0, xmm0
  0004f	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00053	0f 5a c8	 cvtps2pd xmm1, xmm0
  00056	0f 5a d2	 cvtps2pd xmm2, xmm2
  00059	f2 0f 58 ca	 addsd	 xmm1, xmm2
$LN16@AddChild:
  0005d	66 0f 5a c9	 cvtpd2ps xmm1, xmm1

; 92   : 			vChildPos.z -= nUnit;			

  00061	0f 5a c0	 cvtps2pd xmm0, xmm0
  00064	f3 0f 11 4d e4	 movss	 DWORD PTR _vChildPos$[ebp], xmm1
  00069	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _vChildPos$[ebp+8]
  0006e	0f 5a c9	 cvtps2pd xmm1, xmm1
  00071	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00075	66 0f 5a c1	 cvtpd2ps xmm0, xmm1

; 93   : 		}
; 94   : 		break;

  00079	eb 62		 jmp	 SHORT $LN14@AddChild
$LN2@AddChild:

; 83   : 	case FT_3_4:
; 84   : 		{
; 85   : 			vChildPos.x -= nUnit;

  0007b	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _vChildPos$[ebp]
  00080	0f 57 c0	 xorps	 xmm0, xmm0
  00083	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00087	0f 5a c9	 cvtps2pd xmm1, xmm1
  0008a	0f 5a d0	 cvtps2pd xmm2, xmm0
  0008d	f2 0f 5c ca	 subsd	 xmm1, xmm2

; 86   : 			vChildPos.z -= nUnit;
; 87   : 		}
; 88   : 		break;

  00091	eb ca		 jmp	 SHORT $LN16@AddChild
$LN3@AddChild:

; 75   : 		}
; 76   : 		break;
; 77   : 	case FT_2_4:
; 78   : 		{
; 79   : 			vChildPos.x += nUnit;

  00093	f3 0f 10 55 e4	 movss	 xmm2, DWORD PTR _vChildPos$[ebp]
  00098	0f 57 c0	 xorps	 xmm0, xmm0
  0009b	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0009f	0f 5a c8	 cvtps2pd xmm1, xmm0
  000a2	0f 5a d2	 cvtps2pd xmm2, xmm2
  000a5	f2 0f 58 ca	 addsd	 xmm1, xmm2

; 80   : 			vChildPos.z += nUnit;
; 81   : 		}
; 82   : 		break;

  000a9	eb 16		 jmp	 SHORT $LN15@AddChild
$LN4@AddChild:

; 70   : 	{
; 71   : 	case FT_1_4:
; 72   : 		{
; 73   : 			vChildPos.x -= nUnit;

  000ab	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _vChildPos$[ebp]
  000b0	0f 57 c0	 xorps	 xmm0, xmm0
  000b3	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000b7	0f 5a c9	 cvtps2pd xmm1, xmm1
  000ba	0f 5a d0	 cvtps2pd xmm2, xmm0
  000bd	f2 0f 5c ca	 subsd	 xmm1, xmm2
$LN15@AddChild:
  000c1	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  000c5	f3 0f 11 4d e4	 movss	 DWORD PTR _vChildPos$[ebp], xmm1

; 74   : 			vChildPos.z += nUnit;

  000ca	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _vChildPos$[ebp+8]
  000cf	0f 5a c0	 cvtps2pd xmm0, xmm0
  000d2	0f 5a c9	 cvtps2pd xmm1, xmm1
  000d5	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000d9	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
$LN14@AddChild:
  000dd	f3 0f 11 45 ec	 movss	 DWORD PTR _vChildPos$[ebp+8], xmm0
$LN5@AddChild:

; 95   : 	}
; 96   : 
; 97   : 	m_pChild[eType] = new ioPosMapQuadTree();

  000e2	68 80 00 00 00	 push	 128			; 00000080H
  000e7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ec	59		 pop	 ecx
  000ed	8b c8		 mov	 ecx, eax
  000ef	89 4d dc	 mov	 DWORD PTR $T512647[ebp], ecx
  000f2	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  000f6	85 c9		 test	 ecx, ecx
  000f8	74 07		 je	 SHORT $LN10@AddChild
  000fa	e8 00 00 00 00	 call	 ??0ioPosMapQuadTree@@QAE@XZ ; ioPosMapQuadTree::ioPosMapQuadTree
  000ff	eb 02		 jmp	 SHORT $LN11@AddChild
$LN10@AddChild:
  00101	33 c0		 xor	 eax, eax
$LN11@AddChild:
  00103	8b 4d e0	 mov	 ecx, DWORD PTR _eType$GSCopy$[ebp]
  00106	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0010a	89 04 8b	 mov	 DWORD PTR [ebx+ecx*4], eax

; 98   : 	m_pChild[eType]->Build( vChildPos, eType, nFaceMax, nSquared, m_nTileMax );

  0010d	ff 73 1c	 push	 DWORD PTR [ebx+28]
  00110	ff 75 18	 push	 DWORD PTR _nSquared$[ebp]
  00113	ff 75 10	 push	 DWORD PTR _nFaceMax$[ebp]
  00116	51		 push	 ecx
  00117	8d 4d e4	 lea	 ecx, DWORD PTR _vChildPos$[ebp]
  0011a	51		 push	 ecx
  0011b	8b c8		 mov	 ecx, eax
  0011d	e8 00 00 00 00	 call	 ?Build@ioPosMapQuadTree@@QAEXABUD3DXVECTOR3@@HHHH@Z ; ioPosMapQuadTree::Build
$LN8@AddChild:

; 99   : }

  00122	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00127	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddChild@ioPosMapQuadTree@@QAEXW4FaceType@1@ABUD3DXVECTOR3@@HPAV1@H@Z$0:
  00000	ff 75 dc	 push	 DWORD PTR $T512647[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?AddChild@ioPosMapQuadTree@@QAEXW4FaceType@1@ABUD3DXVECTOR3@@HPAV1@H@Z:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001e	33 c8		 xor	 ecx, eax
  00020	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00025	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddChild@ioPosMapQuadTree@@QAEXW4FaceType@1@ABUD3DXVECTOR3@@HPAV1@H@Z
  0002a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddChild@ioPosMapQuadTree@@QAEXW4FaceType@1@ABUD3DXVECTOR3@@HPAV1@H@Z ENDP ; ioPosMapQuadTree::AddChild
PUBLIC	_qtRot$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?SetCollBoxRotaion@ioPosMapQuadTree@@QAEXABUD3DXQUATERNION@@@Z ; ioPosMapQuadTree::SetCollBoxRotaion
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?SetCollBoxRotaion@ioPosMapQuadTree@@QAEXABUD3DXQUATERNION@@@Z
_TEXT	SEGMENT
_qtRot$GSCopy$ = -20					; size = 4
$T512096 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_qtRot$ = 8						; size = 4
?SetCollBoxRotaion@ioPosMapQuadTree@@QAEXABUD3DXQUATERNION@@@Z PROC ; ioPosMapQuadTree::SetCollBoxRotaion, COMDAT
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _qtRot$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b d9		 mov	 ebx, ecx

; 119  : 	m_CollRot	= qtRot;

  00018	8b f0		 mov	 esi, eax
  0001a	8d 7b 20	 lea	 edi, DWORD PTR [ebx+32]
  0001d	a5		 movsd
  0001e	a5		 movsd
  0001f	a5		 movsd
  00020	a5		 movsd

; 120  : 	m_vWorldPos = qtRot * m_vWorldPos;

  00021	8d 7b 74	 lea	 edi, DWORD PTR [ebx+116]
  00024	57		 push	 edi
  00025	50		 push	 eax

; 121  : 
; 122  : 	UpdateCollBox( m_nSquared );
; 123  : 
; 124  : 	for( int i = 0; i < FT_MAX; ++i )

  00026	89 45 ec	 mov	 DWORD PTR _qtRot$GSCopy$[ebp], eax
  00029	8d 45 f0	 lea	 eax, DWORD PTR $T512096[ebp]
  0002c	50		 push	 eax
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  00033	8b f0		 mov	 esi, eax
  00035	a5		 movsd
  00036	a5		 movsd
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	ff 73 18	 push	 DWORD PTR [ebx+24]
  0003d	8b cb		 mov	 ecx, ebx
  0003f	a5		 movsd
  00040	e8 00 00 00 00	 call	 ?UpdateCollBox@ioPosMapQuadTree@@QAEXH@Z ; ioPosMapQuadTree::UpdateCollBox
  00045	33 f6		 xor	 esi, esi
$LL4@SetCollBox:

; 125  : 	{
; 126  : 		if( m_pChild[i] )

  00047	8b 0c b3	 mov	 ecx, DWORD PTR [ebx+esi*4]
  0004a	85 c9		 test	 ecx, ecx
  0004c	74 08		 je	 SHORT $LN3@SetCollBox

; 127  : 			m_pChild[i]->SetCollBoxRotaion( qtRot );

  0004e	ff 75 ec	 push	 DWORD PTR _qtRot$GSCopy$[ebp]
  00051	e8 00 00 00 00	 call	 ?SetCollBoxRotaion@ioPosMapQuadTree@@QAEXABUD3DXQUATERNION@@@Z ; ioPosMapQuadTree::SetCollBoxRotaion
$LN3@SetCollBox:

; 121  : 
; 122  : 	UpdateCollBox( m_nSquared );
; 123  : 
; 124  : 	for( int i = 0; i < FT_MAX; ++i )

  00056	46		 inc	 esi
  00057	83 fe 04	 cmp	 esi, 4
  0005a	7c eb		 jl	 SHORT $LL4@SetCollBox

; 128  : 	}	
; 129  : }

  0005c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	33 cd		 xor	 ecx, ebp
  00063	5b		 pop	 ebx
  00064	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00069	c9		 leave
  0006a	c2 04 00	 ret	 4
?SetCollBoxRotaion@ioPosMapQuadTree@@QAEXABUD3DXQUATERNION@@@Z ENDP ; ioPosMapQuadTree::SetCollBoxRotaion
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@H@std@@HH@std@@YAXAAV?$allocator@H@0@PAH$$QAH@Z ; std::_Cons_val<std::allocator<int>,int,int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@H@std@@HH@std@@YAXAAV?$allocator@H@0@PAH$$QAH@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@H@std@@HH@std@@YAXAAV?$allocator@H@0@PAH$$QAH@Z PROC ; std::_Cons_val<std::allocator<int>,int,int>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@Cons_val:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@H@std@@HH@std@@YAXAAV?$allocator@H@0@PAH$$QAH@Z ENDP ; std::_Cons_val<std::allocator<int>,int,int>
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z PROC ; std::vector<int,std::allocator<int> >::_Umove<int *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,int *,std::allocator<int> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ENDP ; std::vector<int,std::allocator<int> >::_Umove<int *>
_TEXT	ENDS
PUBLIC	?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z PROC ; std::vector<int,std::allocator<int> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 747  : 		if (max_size() < _Count)

  00003	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN43@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  0001a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001d	2b 06		 sub	 eax, DWORD PTR [esi]
  0001f	c1 f8 02	 sar	 eax, 2
  00022	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00025	73 52		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00027	53		 push	 ebx
  00028	57		 push	 edi
  00029	6a 00		 push	 0
  0002b	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0002e	e8 00 00 00 00	 call	 ??$_Allocate@H@std@@YAPAHIPAH@Z ; std::_Allocate<int>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00033	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00035	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00038	52		 push	 edx
  00039	8b d8		 mov	 ebx, eax
  0003b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003e	53		 push	 ebx
  0003f	50		 push	 eax
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,int *,std::allocator<int> >

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);
; 757  : 			_RERAISE;
; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00046	8b 06		 mov	 eax, DWORD PTR [esi]
  00048	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0004b	2b f8		 sub	 edi, eax
  0004d	83 c4 18	 add	 esp, 24			; 00000018H
  00050	c1 ff 02	 sar	 edi, 2

; 761  : 			if (this->_Myfirst != 0)

  00053	85 c0		 test	 eax, eax
  00055	74 07		 je	 SHORT $LN39@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005d	59		 pop	 ecx
$LN39@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0005e	8b ce		 mov	 ecx, esi
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00066	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00069	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  0006c	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  0006f	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00072	5f		 pop	 edi

; 771  : 			this->_Myfirst = _Ptr;

  00073	89 1e		 mov	 DWORD PTR [esi], ebx
  00075	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00078	5b		 pop	 ebx
$LN3@reserve:
  00079	5e		 pop	 esi

; 772  : 			}
; 773  : 		}

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
$LN42@reserve:
?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::reserve
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z PROC ; std::vector<int,std::allocator<int> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx

; 1292 : 		if (max_size() - _Count < _Size)

  0000d	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  00012	2b 55 08	 sub	 edx, DWORD PTR __Count$[ebp]
  00015	c1 f8 02	 sar	 eax, 2
  00018	3b d0		 cmp	 edx, eax
  0001a	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0002a	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  0002d	2b d1		 sub	 edx, ecx
  0002f	c1 fa 02	 sar	 edx, 2
  00032	3b c2		 cmp	 eax, edx
  00034	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ; std::vector<int,std::allocator<int> >::_Grow_to
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
$LN1@Reserve:
  00046	5e		 pop	 esi

; 1298 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::_Reserve
_TEXT	ENDS
PUBLIC	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back
; Function compile flags: /Ogsp
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT
; _this$ = ecx

; 631  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 632  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 27		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 21		 ja	 SHORT $LN4@push_back

; 633  : 			{	// push back an element
; 634  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 635  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back

; 636  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN3@push_back:

; 637  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 638  : 			_Cons_val(this->_Alval,
; 639  : 				this->_Mylast,
; 640  : 				_STD forward<_Ty>(this->_Myfirst[_Idx]));

  0002a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002d	85 c0		 test	 eax, eax
  0002f	74 20		 je	 SHORT $LN41@push_back
  00031	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00033	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]

; 641  : 			++this->_Mylast;
; 642  : 			}
; 643  : 		else

  00036	eb 17		 jmp	 SHORT $LN48@push_back
$LN4@push_back:

; 644  : 			{	// push back a non-element
; 645  : 			if (this->_Mylast == this->_Myend)

  00038	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0003b	75 09		 jne	 SHORT $LN1@push_back

; 646  : 				_Reserve(1);

  0003d	6a 01		 push	 1
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN1@push_back:

; 647  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 648  : 			_Cons_val(this->_Alval,
; 649  : 				this->_Mylast,
; 650  : 				_STD forward<_Ty>(_Val));

  00046	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00049	85 c0		 test	 eax, eax
  0004b	74 04		 je	 SHORT $LN41@push_back
  0004d	8b 0f		 mov	 ecx, DWORD PTR [edi]
$LN48@push_back:
  0004f	89 08		 mov	 DWORD PTR [eax], ecx
$LN41@push_back:

; 651  : 			++this->_Mylast;

  00051	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi

; 652  : 			}
; 653  : 		}

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
_TEXT	ENDS
PUBLIC	?FindBlockIndexList@ioPosMapQuadTree@@QAE_NABVioRay@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z ; ioPosMapQuadTree::FindBlockIndexList
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\housing\ioposmapquadtree.cpp
;	COMDAT ?FindBlockIndexList@ioPosMapQuadTree@@QAE_NABVioRay@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z
_TEXT	SEGMENT
$T512942 = 8						; size = 4
_kYRay$ = 8						; size = 4
_vList$ = 12						; size = 4
?FindBlockIndexList@ioPosMapQuadTree@@QAE_NABVioRay@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z PROC ; ioPosMapQuadTree::FindBlockIndexList, COMDAT
; _this$ = ecx

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 191  : 	if( TestIntersection( kYRay ) )

  00005	ff 75 08	 push	 DWORD PTR _kYRay$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ?TestIntersection@ioPosMapQuadTree@@QAE_NABVioRay@@@Z ; ioPosMapQuadTree::TestIntersection
  0000f	84 c0		 test	 al, al
  00011	74 20		 je	 SHORT $LN2@FindBlockI@2

; 192  : 	{
; 193  : 		if( IsLeaf() )

  00013	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00016	39 46 18	 cmp	 DWORD PTR [esi+24], eax
  00019	75 20		 jne	 SHORT $LN6@FindBlockI@2

; 194  : 		{
; 195  : 			vList.push_back( m_FacePos.m_XPos + m_FacePos.m_ZPos * m_nTileMax );

  0001b	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0001e	0f af c8	 imul	 ecx, eax
  00021	03 4e 10	 add	 ecx, DWORD PTR [esi+16]
  00024	8d 45 08	 lea	 eax, DWORD PTR $T512942[ebp]
  00027	89 4d 08	 mov	 DWORD PTR $T512942[ebp], ecx
  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR _vList$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back
$LN2@FindBlockI@2:

; 204  : 				}
; 205  : 			}
; 206  : 		}
; 207  : 	}
; 208  : 
; 209  : 	return false;

  00033	32 c0		 xor	 al, al
$LN8@FindBlockI@2:
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi

; 210  : }

  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
$LN6@FindBlockI@2:

; 196  : 		}
; 197  : 		else
; 198  : 		{
; 199  : 			for( int i = 0; i < FT_MAX; ++i )

  0003b	33 ff		 xor	 edi, edi
$LL4@FindBlockI@2:

; 200  : 			{
; 201  : 				if( m_pChild[i]->FindBlockIndexList( kYRay, vList ) )

  0003d	ff 75 0c	 push	 DWORD PTR _vList$[ebp]
  00040	8b 0c be	 mov	 ecx, DWORD PTR [esi+edi*4]
  00043	ff 75 08	 push	 DWORD PTR _kYRay$[ebp]
  00046	e8 00 00 00 00	 call	 ?FindBlockIndexList@ioPosMapQuadTree@@QAE_NABVioRay@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z ; ioPosMapQuadTree::FindBlockIndexList
  0004b	84 c0		 test	 al, al
  0004d	75 08		 jne	 SHORT $LN14@FindBlockI@2

; 196  : 		}
; 197  : 		else
; 198  : 		{
; 199  : 			for( int i = 0; i < FT_MAX; ++i )

  0004f	47		 inc	 edi
  00050	83 ff 04	 cmp	 edi, 4
  00053	7c e8		 jl	 SHORT $LL4@FindBlockI@2

; 200  : 			{
; 201  : 				if( m_pChild[i]->FindBlockIndexList( kYRay, vList ) )

  00055	eb dc		 jmp	 SHORT $LN2@FindBlockI@2
$LN14@FindBlockI@2:

; 202  : 				{					
; 203  : 					return true;

  00057	b0 01		 mov	 al, 1
  00059	eb da		 jmp	 SHORT $LN8@FindBlockI@2
?FindBlockIndexList@ioPosMapQuadTree@@QAE_NABVioRay@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z ENDP ; ioPosMapQuadTree::FindBlockIndexList
_TEXT	ENDS
_BSS	SEGMENT
_ZERO_TILE_POS DB 010H DUP (?)
_BSS	ENDS
END
