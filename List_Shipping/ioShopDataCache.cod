; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\GUI\ioShopDataCache.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?ms_Singleton@?$Singleton@VioShopDataCache@@@@1PAVioShopDataCache@@A ; Singleton<ioShopDataCache>::ms_Singleton
;	COMDAT ?ms_Singleton@?$Singleton@VioShopDataCache@@@@1PAVioShopDataCache@@A
_BSS	SEGMENT
?ms_Singleton@?$Singleton@VioShopDataCache@@@@1PAVioShopDataCache@@A DD 01H DUP (?) ; Singleton<ioShopDataCache>::ms_Singleton
_BSS	ENDS
PUBLIC	??_7NewShopCache@@6B@				; NewShopCache::`vftable'
PUBLIC	??1NewShopCache@@UAE@XZ				; NewShopCache::~NewShopCache
PUBLIC	??_R4NewShopCache@@6B@				; NewShopCache::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVNewShopCache@@@8			; NewShopCache `RTTI Type Descriptor'
PUBLIC	??_R3NewShopCache@@8				; NewShopCache::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NewShopCache@@8				; NewShopCache::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NewShopCache@@8			; NewShopCache::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ENewShopCache@@UAEPAXI@Z:PROC		; NewShopCache::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@NewShopCache@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\ioshopdatacache.h
rdata$r	SEGMENT
??_R1A@?0A@EA@NewShopCache@@8 DD FLAT:??_R0?AVNewShopCache@@@8 ; NewShopCache::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NewShopCache@@8
rdata$r	ENDS
;	COMDAT ??_R2NewShopCache@@8
rdata$r	SEGMENT
??_R2NewShopCache@@8 DD FLAT:??_R1A@?0A@EA@NewShopCache@@8 ; NewShopCache::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3NewShopCache@@8
rdata$r	SEGMENT
??_R3NewShopCache@@8 DD 00H				; NewShopCache::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2NewShopCache@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVNewShopCache@@@8
_DATA	SEGMENT
??_R0?AVNewShopCache@@@8 DD FLAT:??_7type_info@@6B@	; NewShopCache `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNewShopCache@@', 00H
_DATA	ENDS
;	COMDAT ??_R4NewShopCache@@6B@
rdata$r	SEGMENT
??_R4NewShopCache@@6B@ DD 00H				; NewShopCache::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVNewShopCache@@@8
	DD	FLAT:??_R3NewShopCache@@8
rdata$r	ENDS
;	COMDAT ??_7NewShopCache@@6B@
CONST	SEGMENT
??_7NewShopCache@@6B@ DD FLAT:??_R4NewShopCache@@6B@	; NewShopCache::`vftable'
	DD	FLAT:??_ENewShopCache@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??1NewShopCache@@UAE@XZ
_TEXT	SEGMENT
??1NewShopCache@@UAE@XZ PROC				; NewShopCache::~NewShopCache, COMDAT
; _this$ = ecx

; 17   : 	virtual ~NewShopCache(){}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7NewShopCache@@6B@
  00006	c3		 ret	 0
??1NewShopCache@@UAE@XZ ENDP				; NewShopCache::~NewShopCache
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GNewShopCache@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GNewShopCache@@UAEPAXI@Z PROC			; NewShopCache::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NewShopCache@@6B@
  00010	74 07		 je	 SHORT $LN1@scalar
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_GNewShopCache@@UAEPAXI@Z ENDP			; NewShopCache::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$Singleton@VioShopDataCache@@@@QAE@XZ	; Singleton<ioShopDataCache>::Singleton<ioShopDataCache>
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
;	COMDAT ??0?$Singleton@VioShopDataCache@@@@QAE@XZ
_TEXT	SEGMENT
??0?$Singleton@VioShopDataCache@@@@QAE@XZ PROC		; Singleton<ioShopDataCache>::Singleton<ioShopDataCache>, COMDAT
; _this$ = ecx

; 27   : 	Singleton()

  00000	8b c1		 mov	 eax, ecx

; 28   : 	{
; 29   : 		assert( !ms_Singleton );
; 30   : 		int offset = (int)(T*)1 - (int)(Singleton <T>*)(T*)1;
; 31   : 		ms_Singleton = (T*)((int)this + offset);

  00002	a3 00 00 00 00	 mov	 DWORD PTR ?ms_Singleton@?$Singleton@VioShopDataCache@@@@1PAVioShopDataCache@@A, eax ; Singleton<ioShopDataCache>::ms_Singleton

; 32   : 	}

  00007	c3		 ret	 0
??0?$Singleton@VioShopDataCache@@@@QAE@XZ ENDP		; Singleton<ioShopDataCache>::Singleton<ioShopDataCache>
_TEXT	ENDS
PUBLIC	??1?$Singleton@VioShopDataCache@@@@QAE@XZ	; Singleton<ioShopDataCache>::~Singleton<ioShopDataCache>
; Function compile flags: /Ogsp
;	COMDAT ??1?$Singleton@VioShopDataCache@@@@QAE@XZ
_TEXT	SEGMENT
??1?$Singleton@VioShopDataCache@@@@QAE@XZ PROC		; Singleton<ioShopDataCache>::~Singleton<ioShopDataCache>, COMDAT
; _this$ = ecx

; 36   : 		assert( ms_Singleton );
; 37   : 		ms_Singleton = 0;

  00000	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_Singleton@?$Singleton@VioShopDataCache@@@@1PAVioShopDataCache@@A, 0 ; Singleton<ioShopDataCache>::ms_Singleton

; 38   : 	}

  00007	c3		 ret	 0
??1?$Singleton@VioShopDataCache@@@@QAE@XZ ENDP		; Singleton<ioShopDataCache>::~Singleton<ioShopDataCache>
_TEXT	ENDS
PUBLIC	?GetSingleton@?$Singleton@VioShopDataCache@@@@SAAAVioShopDataCache@@XZ ; Singleton<ioShopDataCache>::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?GetSingleton@?$Singleton@VioShopDataCache@@@@SAAAVioShopDataCache@@XZ
_TEXT	SEGMENT
?GetSingleton@?$Singleton@VioShopDataCache@@@@SAAAVioShopDataCache@@XZ PROC ; Singleton<ioShopDataCache>::GetSingleton, COMDAT

; 42   : 		assert( ms_Singleton );
; 43   : 		return (*ms_Singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VioShopDataCache@@@@1PAVioShopDataCache@@A ; Singleton<ioShopDataCache>::ms_Singleton

; 44   : 	}

  00005	c3		 ret	 0
?GetSingleton@?$Singleton@VioShopDataCache@@@@SAAAVioShopDataCache@@XZ ENDP ; Singleton<ioShopDataCache>::GetSingleton
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::~_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::~_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::~_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IBE_NPBUNewShopDataCache@@@Z ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IBE_NPBUNewShopDataCache@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IBE_NPBUNewShopDataCache@@@Z PROC ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IBE_NPBUNewShopDataCache@@@Z ENDP ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IBEXPAUNewShopDataCache@@0@Z ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IBEXPAUNewShopDataCache@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IBEXPAUNewShopDataCache@@0@Z PROC ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IBEXPAUNewShopDataCache@@0@Z ENDP ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE@XZ ; std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> >::~_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> >::~_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> >::~_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UNewShopDataCache@@@std@@QAE@XZ	; std::allocator<NewShopDataCache>::allocator<NewShopDataCache>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UNewShopDataCache@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UNewShopDataCache@@@std@@QAE@XZ PROC	; std::allocator<NewShopDataCache>::allocator<NewShopDataCache>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UNewShopDataCache@@@std@@QAE@XZ ENDP	; std::allocator<NewShopDataCache>::allocator<NewShopDataCache>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QBEABUNewShopDataCache@@XZ ; std::_Vector_const_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QBEABUNewShopDataCache@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QBEABUNewShopDataCache@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QBEABUNewShopDataCache@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 24	 add	 DWORD PTR [eax], 36	; 00000024H

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::operator++
_TEXT	ENDS
PUBLIC	??0?$allocator@UtagNewShopItemInfo@@@std@@QAE@ABV01@@Z ; std::allocator<tagNewShopItemInfo>::allocator<tagNewShopItemInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UtagNewShopItemInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UtagNewShopItemInfo@@@std@@QAE@ABV01@@Z PROC ; std::allocator<tagNewShopItemInfo>::allocator<tagNewShopItemInfo>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UtagNewShopItemInfo@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<tagNewShopItemInfo>::allocator<tagNewShopItemInfo>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UtagNewShopItemInfo@@@std@@QAEXPAUtagNewShopItemInfo@@I@Z ; std::allocator<tagNewShopItemInfo>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UtagNewShopItemInfo@@@std@@QAEXPAUtagNewShopItemInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UtagNewShopItemInfo@@@std@@QAEXPAUtagNewShopItemInfo@@I@Z PROC ; std::allocator<tagNewShopItemInfo>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UtagNewShopItemInfo@@@std@@QAEXPAUtagNewShopItemInfo@@I@Z ENDP ; std::allocator<tagNewShopItemInfo>::deallocate
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QBEIXZ ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QBEIXZ PROC ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 24		 push	 36			; 00000024H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QBEIXZ ENDP ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QBEIXZ ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QBEIXZ PROC ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 24		 push	 36			; 00000024H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QBEIXZ ENDP ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::size
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IBEXXZ ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IBEXXZ PROC ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IBEXXZ ENDP ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UNewShopDataCache@@@std@@QAE@ABV01@@Z ; std::allocator<NewShopDataCache>::allocator<NewShopDataCache>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UNewShopDataCache@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UNewShopDataCache@@@std@@QAE@ABV01@@Z PROC ; std::allocator<NewShopDataCache>::allocator<NewShopDataCache>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UNewShopDataCache@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<NewShopDataCache>::allocator<NewShopDataCache>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@I@Z ; std::allocator<NewShopDataCache>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@I@Z PROC ; std::allocator<NewShopDataCache>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@I@Z ENDP ; std::allocator<NewShopDataCache>::deallocate
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::_Compat
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UNewShopDataCache@@@std@@QBEIXZ ; std::allocator<NewShopDataCache>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UNewShopDataCache@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UNewShopDataCache@@@std@@QBEIXZ PROC ; std::allocator<NewShopDataCache>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 c7 71 1c 07	 mov	 eax, 119304647		; 071c71c7H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UNewShopDataCache@@@std@@QBEIXZ ENDP ; std::allocator<NewShopDataCache>::max_size
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUNewShopDataCache@@@std@@YAPBUNewShopDataCache@@ABU1@@Z ; std::addressof<NewShopDataCache const >
; Function compile flags: /Ogsp
;	COMDAT ??$addressof@$$CBUNewShopDataCache@@@std@@YAPBUNewShopDataCache@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUNewShopDataCache@@@std@@YAPBUNewShopDataCache@@ABU1@@Z PROC ; std::addressof<NewShopDataCache const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUNewShopDataCache@@@std@@YAPBUNewShopDataCache@@ABU1@@Z ENDP ; std::addressof<NewShopDataCache const >
_TEXT	ENDS
PUBLIC	??$forward@AAUNewShopDataCache@@@std@@YAAAUNewShopDataCache@@AAU1@@Z ; std::forward<NewShopDataCache &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUNewShopDataCache@@@std@@YAAAUNewShopDataCache@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUNewShopDataCache@@@std@@YAAAUNewShopDataCache@@AAU1@@Z PROC ; std::forward<NewShopDataCache &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUNewShopDataCache@@@std@@YAAAUNewShopDataCache@@AAU1@@Z ENDP ; std::forward<NewShopDataCache &>
_TEXT	ENDS
PUBLIC	??$forward@ABUNewShopDataCache@@@std@@YAABUNewShopDataCache@@ABU1@@Z ; std::forward<NewShopDataCache const &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@ABUNewShopDataCache@@@std@@YAABUNewShopDataCache@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUNewShopDataCache@@@std@@YAABUNewShopDataCache@@ABU1@@Z PROC ; std::forward<NewShopDataCache const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUNewShopDataCache@@@std@@YAABUNewShopDataCache@@ABU1@@Z ENDP ; std::forward<NewShopDataCache const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UNewShopDataCache@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUNewShopDataCache@@0@Z ; std::_Ptr_cat<NewShopDataCache,NewShopDataCache>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UNewShopDataCache@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUNewShopDataCache@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UNewShopDataCache@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUNewShopDataCache@@0@Z PROC ; std::_Ptr_cat<NewShopDataCache,NewShopDataCache>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UNewShopDataCache@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUNewShopDataCache@@0@Z ENDP ; std::_Ptr_cat<NewShopDataCache,NewShopDataCache>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UtagNewShopItemInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagNewShopItemInfo@@0@Z ; std::_Ptr_cat<tagNewShopItemInfo,tagNewShopItemInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UtagNewShopItemInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagNewShopItemInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UtagNewShopItemInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagNewShopItemInfo@@0@Z PROC ; std::_Ptr_cat<tagNewShopItemInfo,tagNewShopItemInfo>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UtagNewShopItemInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagNewShopItemInfo@@0@Z ENDP ; std::_Ptr_cat<tagNewShopItemInfo,tagNewShopItemInfo>
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar@2
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar@2:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0NewShopCache@@QAE@ABV0@@Z			; NewShopCache::NewShopCache
; Function compile flags: /Ogsp
;	COMDAT ??0NewShopCache@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0NewShopCache@@QAE@ABV0@@Z PROC			; NewShopCache::NewShopCache, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00008	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7NewShopCache@@6B@
  0000e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00011	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00014	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00017	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001a	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0001d	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0NewShopCache@@QAE@ABV0@@Z ENDP			; NewShopCache::NewShopCache
_TEXT	ENDS
PUBLIC	??4NewShopCache@@QAEAAV0@ABV0@@Z		; NewShopCache::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4NewShopCache@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4NewShopCache@@QAEAAV0@ABV0@@Z PROC			; NewShopCache::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00008	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00011	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00014	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00017	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
??4NewShopCache@@QAEAAV0@ABV0@@Z ENDP			; NewShopCache::operator=
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QBEIXZ ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	b9 d0 00 00 00	 mov	 ecx, 208		; 000000d0H
  0000a	99		 cdq
  0000b	f7 f9		 idiv	 ecx

; 778  : 		}

  0000d	c3		 ret	 0
?capacity@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QBEIXZ ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	b9 d0 00 00 00	 mov	 ecx, 208		; 000000d0H
  0000a	99		 cdq
  0000b	f7 f9		 idiv	 ecx

; 880  : 		}

  0000d	c3		 ret	 0
?size@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::size
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IBEXXZ ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@2:
$LN3@Xlen@2:
  0000b	cc		 int	 3
?_Xlen@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Xlen
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UtagNewShopItemInfo@@@std@@QBEIXZ ; std::allocator<tagNewShopItemInfo>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UtagNewShopItemInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UtagNewShopItemInfo@@@std@@QBEIXZ PROC ; std::allocator<tagNewShopItemInfo>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 b1 13 3b 01	 mov	 eax, 20648881		; 013b13b1H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UtagNewShopItemInfo@@@std@@QBEIXZ ENDP ; std::allocator<tagNewShopItemInfo>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >::_Compat
_TEXT	ENDS
PUBLIC	??$move@AAUNewShopDataCache@@@std@@YA$$QAUNewShopDataCache@@AAU1@@Z ; std::move<NewShopDataCache &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUNewShopDataCache@@@std@@YA$$QAUNewShopDataCache@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUNewShopDataCache@@@std@@YA$$QAUNewShopDataCache@@AAU1@@Z PROC ; std::move<NewShopDataCache &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUNewShopDataCache@@@std@@YA$$QAUNewShopDataCache@@AAU1@@Z ENDP ; std::move<NewShopDataCache &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUNewShopDataCache@@@std@@YAPAUNewShopDataCache@@PAU1@@Z ; std::_Val_type<NewShopDataCache *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUNewShopDataCache@@@std@@YAPAUNewShopDataCache@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUNewShopDataCache@@@std@@YAPAUNewShopDataCache@@PAU1@@Z PROC ; std::_Val_type<NewShopDataCache *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUNewShopDataCache@@@std@@YAPAUNewShopDataCache@@PAU1@@Z ENDP ; std::_Val_type<NewShopDataCache *>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UtagNewShopItemInfo@@@std@@YAPAUtagNewShopItemInfo@@IPAU1@@Z ; std::_Allocate<tagNewShopItemInfo>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UtagNewShopItemInfo@@@std@@YAPAUtagNewShopItemInfo@@IPAU1@@Z
_TEXT	SEGMENT
$T507789 = -12						; size = 12
$T507794 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UtagNewShopItemInfo@@@std@@YAPAUtagNewShopItemInfo@@IPAU1@@Z PROC ; std::_Allocate<tagNewShopItemInfo>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3f		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 b1 13 3b
	01		 cmp	 ecx, 20648881		; 013b13b1H
  00015	77 11		 ja	 SHORT $LN1@Allocate
  00017	69 c9 d0 00 00
	00		 imul	 ecx, 208		; 000000d0H
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00023	59		 pop	 ecx
  00024	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00026	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00028	83 65 08 00	 and	 DWORD PTR $T507794[ebp], 0
  0002c	8d 45 08	 lea	 eax, DWORD PTR $T507794[ebp]
  0002f	50		 push	 eax
  00030	8d 4d f4	 lea	 ecx, DWORD PTR $T507789[ebp]
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00039	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003e	8d 45 f4	 lea	 eax, DWORD PTR $T507789[ebp]
  00041	50		 push	 eax
  00042	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T507789[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00049	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004e	c9		 leave
  0004f	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UtagNewShopItemInfo@@@std@@YAPAUtagNewShopItemInfo@@IPAU1@@Z ENDP ; std::_Allocate<tagNewShopItemInfo>
_TEXT	ENDS
PUBLIC	??$_Destroy@UNewShopDataCache@@@std@@YAXPAUNewShopDataCache@@@Z ; std::_Destroy<NewShopDataCache>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@UNewShopDataCache@@@std@@YAXPAUNewShopDataCache@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UNewShopDataCache@@@std@@YAXPAUNewShopDataCache@@@Z PROC ; std::_Destroy<NewShopDataCache>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	6a 00		 push	 0
  0000a	ff 10		 call	 DWORD PTR [eax]

; 64   : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??$_Destroy@UNewShopDataCache@@@std@@YAXPAUNewShopDataCache@@@Z ENDP ; std::_Destroy<NewShopDataCache>
_TEXT	ENDS
PUBLIC	??$forward@UNewShopDataCache@@@std@@YA$$QAUNewShopDataCache@@AAU1@@Z ; std::forward<NewShopDataCache>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UNewShopDataCache@@@std@@YA$$QAUNewShopDataCache@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UNewShopDataCache@@@std@@YA$$QAUNewShopDataCache@@AAU1@@Z PROC ; std::forward<NewShopDataCache>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UNewShopDataCache@@@std@@YA$$QAUNewShopDataCache@@AAU1@@Z ENDP ; std::forward<NewShopDataCache>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@AAPAUtagNewShopItemInfo@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >,tagNewShopItemInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@AAPAUtagNewShopItemInfo@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@AAPAUtagNewShopItemInfo@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >,tagNewShopItemInfo *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@AAPAUtagNewShopItemInfo@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >,tagNewShopItemInfo *>
_TEXT	ENDS
PUBLIC	??$move@AAUtagNewShopItemInfo@@@std@@YA$$QAUtagNewShopItemInfo@@AAU1@@Z ; std::move<tagNewShopItemInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUtagNewShopItemInfo@@@std@@YA$$QAUtagNewShopItemInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUtagNewShopItemInfo@@@std@@YA$$QAUtagNewShopItemInfo@@AAU1@@Z PROC ; std::move<tagNewShopItemInfo &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUtagNewShopItemInfo@@@std@@YA$$QAUtagNewShopItemInfo@@AAU1@@Z ENDP ; std::move<tagNewShopItemInfo &>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QBEABUtagNewShopItemInfo@@XZ ; std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QBEABUtagNewShopItemInfo@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QBEABUtagNewShopItemInfo@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QBEABUtagNewShopItemInfo@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	81 00 d0 00 00
	00		 add	 DWORD PTR [eax], 208	; 000000d0H

; 111  : 		return (*this);
; 112  : 		}

  00008	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >::operator++
_TEXT	ENDS
PUBLIC	??$_Copy_impl@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<int *,int *>
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Copy_impl@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_impl@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Copy_impl<int *,int *>, COMDAT

; 2152 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2153 : 	ptrdiff_t _Count = _Last - _First;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	57		 push	 edi

; 2154 : 	_CSTD memmove(&*_Dest, &*_First,
; 2155 : 		_Count * sizeof (*_First));

  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0000e	c1 fe 02	 sar	 esi, 2
  00011	c1 e6 02	 shl	 esi, 2
  00014	56		 push	 esi
  00015	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00018	57		 push	 edi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2156 : 	return (_Dest + _Count);

  00022	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 2157 : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Copy_impl@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_impl<int *,int *>
_TEXT	ENDS
PUBLIC	??$forward@ABUtagNewShopItemInfo@@@std@@YAABUtagNewShopItemInfo@@ABU1@@Z ; std::forward<tagNewShopItemInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUtagNewShopItemInfo@@@std@@YAABUtagNewShopItemInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUtagNewShopItemInfo@@@std@@YAABUtagNewShopItemInfo@@ABU1@@Z PROC ; std::forward<tagNewShopItemInfo const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUtagNewShopItemInfo@@@std@@YAABUtagNewShopItemInfo@@ABU1@@Z ENDP ; std::forward<tagNewShopItemInfo const &>
_TEXT	ENDS
PUBLIC	??$forward@AAUtagNewShopItemInfo@@@std@@YAAAUtagNewShopItemInfo@@AAU1@@Z ; std::forward<tagNewShopItemInfo &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@AAUtagNewShopItemInfo@@@std@@YAAAUtagNewShopItemInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUtagNewShopItemInfo@@@std@@YAAAUtagNewShopItemInfo@@AAU1@@Z PROC ; std::forward<tagNewShopItemInfo &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUtagNewShopItemInfo@@@std@@YAAAUtagNewShopItemInfo@@AAU1@@Z ENDP ; std::forward<tagNewShopItemInfo &>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@HH@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<int,int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@HH@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@HH@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<int,int>, COMDAT

; 399  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 400  : 	_DEBUG_RANGE(_First, _Last);
; 401  : 	_DEBUG_POINTER(_Dest);
; 402  : 	size_t _Count = (size_t)(_Last - _First);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2

; 403  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 404  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 405  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninit_copy@HH@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<int,int>
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@PAH@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@AAPAH@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >,int *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@PAH@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@AAPAH@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@PAH@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@AAPAH@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >,int *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@PAH@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@AAPAH@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >,int *>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEABHXZ ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEABHXZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEABHXZ PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEABHXZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator++
_TEXT	ENDS
PUBLIC	??$forward@ABH@std@@YAABHABH@Z			; std::forward<int const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABH@std@@YAABHABH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABH@std@@YAABHABH@Z PROC			; std::forward<int const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABH@std@@YAABHABH@Z ENDP			; std::forward<int const &>
_TEXT	ENDS
PUBLIC	??$_Construct@HABH@std@@YAXPAHABH@Z		; std::_Construct<int,int const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@HABH@std@@YAXPAHABH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@HABH@std@@YAXPAHABH@Z PROC		; std::_Construct<int,int const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@Construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@Construct:

; 49   : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Construct@HABH@std@@YAXPAHABH@Z ENDP		; std::_Construct<int,int const &>
_TEXT	ENDS
PUBLIC	??$_Destroy@H@std@@YAXPAH@Z			; std::_Destroy<int>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@H@std@@YAXPAH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@H@std@@YAXPAH@Z PROC			; std::_Destroy<int>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@H@std@@YAXPAH@Z ENDP			; std::_Destroy<int>
_TEXT	ENDS
PUBLIC	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC	; std::vector<int,std::allocator<int> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP	; std::vector<int,std::allocator<int> >::size
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >
_TEXT	ENDS
PUBLIC	??0?$allocator@H@std@@QAE@ABV01@@Z		; std::allocator<int>::allocator<int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@H@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@H@std@@QAE@ABV01@@Z PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@H@std@@QAE@ABV01@@Z ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@H@std@@QAEXPAHI@Z	; std::allocator<int>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@H@std@@QAEXPAHI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@H@std@@QAEXPAHI@Z PROC		; std::allocator<int>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@H@std@@QAEXPAHI@Z ENDP		; std::allocator<int>::deallocate
_TEXT	ENDS
PUBLIC	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::capacity
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z ; std::vector<int,std::allocator<int> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z PROC ; std::vector<int,std::allocator<int> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z ENDP ; std::vector<int,std::allocator<int> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ; std::vector<int,std::allocator<int> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ PROC	; std::vector<int,std::allocator<int> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@3:
$LN3@Xlen@3:
  0000b	cc		 int	 3
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xlen
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@H@std@@QBEIXZ		; std::allocator<int>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@H@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@H@std@@QBEIXZ PROC		; std::allocator<int>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@H@std@@QBEIXZ ENDP		; std::allocator<int>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Compat
_TEXT	ENDS
PUBLIC	??$_Allocate@H@std@@YAPAHIPAH@Z			; std::_Allocate<int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Allocate@H@std@@YAPAHIPAH@Z
_TEXT	SEGMENT
$T507909 = -12						; size = 12
$T507913 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@H@std@@YAPAHIPAH@Z PROC			; std::_Allocate<int>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3e		 je	 SHORT $LN5@Allocate@2

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate@2
  00017	8b c1		 mov	 eax, ecx
  00019	c1 e0 02	 shl	 eax, 2
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	59		 pop	 ecx
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 26		 jne	 SHORT $LN5@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	83 65 08 00	 and	 DWORD PTR $T507913[ebp], 0
  0002b	8d 45 08	 lea	 eax, DWORD PTR $T507913[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T507909[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00038	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003d	8d 45 f4	 lea	 eax, DWORD PTR $T507909[ebp]
  00040	50		 push	 eax
  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T507909[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00048	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:

; 40   : 	}

  0004d	c9		 leave
  0004e	c3		 ret	 0
$LN9@Allocate@2:
??$_Allocate@H@std@@YAPAHIPAH@Z ENDP			; std::_Allocate<int>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z PROC ; std::_Ptr_cat<int,int>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ENDP ; std::_Ptr_cat<int,int>
_TEXT	ENDS
PUBLIC	??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<int *,int *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<int *,int *>, COMDAT

; 2522 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2523 : 	ptrdiff_t _Count = _Last - _First;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	57		 push	 edi

; 2524 : 	_CSTD memmove(&*_Dest, &*_First,
; 2525 : 		_Count * sizeof (*_First));

  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0000e	c1 fe 02	 sar	 esi, 2
  00011	c1 e6 02	 shl	 esi, 2
  00014	56		 push	 esi
  00015	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00018	57		 push	 edi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2526 : 	return (_Dest + _Count);

  00022	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 2527 : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<int *,int *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 105  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	?GetSingleton@ioShopDataCache@@SAAAV1@XZ	; ioShopDataCache::GetSingleton
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\ioshopdatacache.cpp
;	COMDAT ?GetSingleton@ioShopDataCache@@SAAAV1@XZ
_TEXT	SEGMENT
?GetSingleton@ioShopDataCache@@SAAAV1@XZ PROC		; ioShopDataCache::GetSingleton, COMDAT

; 8    : 	return Singleton< ioShopDataCache >::GetSingleton();

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VioShopDataCache@@@@1PAVioShopDataCache@@A ; Singleton<ioShopDataCache>::ms_Singleton

; 9    : }

  00005	c3		 ret	 0
?GetSingleton@ioShopDataCache@@SAAAV1@XZ ENDP		; ioShopDataCache::GetSingleton
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QBEAAUNewShopDataCache@@XZ ; std::_Vector_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QBEAAUNewShopDataCache@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QBEAAUNewShopDataCache@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QBEAAUNewShopDataCache@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 24	 add	 DWORD PTR [eax], 36	; 00000024H

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::operator++
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@V?$allocator@UtagNewShopItemInfo@@@1@@Z ; std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@V?$allocator@UtagNewShopItemInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@V?$allocator@UtagNewShopItemInfo@@@1@@Z PROC ; std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@V?$allocator@UtagNewShopItemInfo@@@1@@Z ENDP ; std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE@V?$allocator@UNewShopDataCache@@@1@@Z ; std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> >::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE@V?$allocator@UNewShopDataCache@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE@V?$allocator@UNewShopDataCache@@@1@@Z PROC ; std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> >::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE@V?$allocator@UNewShopDataCache@@@1@@Z ENDP ; std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> >::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::operator==
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QBEIXZ ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QBEIXZ PROC ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 c7 71 1c 07	 mov	 eax, 119304647		; 071c71c7H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QBEIXZ ENDP ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IBEII@Z ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IBEII@Z PROC ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 24		 push	 36			; 00000024H
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba c7 71 1c 07	 mov	 edx, 119304647		; 071c71c7H
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00026	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Grow_to@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IBEII@Z ENDP ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QAE@PAUNewShopDataCache@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::_Vector_const_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QAE@PAUNewShopDataCache@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QAE@PAUNewShopDataCache@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::_Vector_const_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QAE@PAUNewShopDataCache@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::_Vector_const_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >
_TEXT	ENDS
PUBLIC	??$_Allocate@UNewShopDataCache@@@std@@YAPAUNewShopDataCache@@IPAU1@@Z ; std::_Allocate<NewShopDataCache>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Allocate@UNewShopDataCache@@@std@@YAPAUNewShopDataCache@@IPAU1@@Z
_TEXT	SEGMENT
$T508003 = -12						; size = 12
$T508007 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UNewShopDataCache@@@std@@YAPAUNewShopDataCache@@IPAU1@@Z PROC ; std::_Allocate<NewShopDataCache>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate@3

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 c7 71 1c
	07		 cmp	 ecx, 119304647		; 071c71c7H
  00015	77 0e		 ja	 SHORT $LN1@Allocate@3
  00017	6b c9 24	 imul	 ecx, 36			; 00000024H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate@3
$LN1@Allocate@3:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T508007[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T508007[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T508003[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T508003[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T508003[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@3:
$LN5@Allocate@3:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate@3:
??$_Allocate@UNewShopDataCache@@@std@@YAPAUNewShopDataCache@@IPAU1@@Z ENDP ; std::_Allocate<NewShopDataCache>
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QBEIXZ ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 b1 13 3b 01	 mov	 eax, 20648881		; 013b13b1H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UtagNewShopItemInfo@@@std@@QAEPAUtagNewShopItemInfo@@I@Z ; std::allocator<tagNewShopItemInfo>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UtagNewShopItemInfo@@@std@@QAEPAUtagNewShopItemInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UtagNewShopItemInfo@@@std@@QAEPAUtagNewShopItemInfo@@I@Z PROC ; std::allocator<tagNewShopItemInfo>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UtagNewShopItemInfo@@@std@@YAPAUtagNewShopItemInfo@@IPAU1@@Z ; std::_Allocate<tagNewShopItemInfo>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UtagNewShopItemInfo@@@std@@QAEPAUtagNewShopItemInfo@@I@Z ENDP ; std::allocator<tagNewShopItemInfo>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QAE@PAUtagNewShopItemInfo@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QAE@PAUtagNewShopItemInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QAE@PAUtagNewShopItemInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QAE@PAUtagNewShopItemInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QAE@PAUtagNewShopItemInfo@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >::_Vector_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QAE@PAUtagNewShopItemInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QAE@PAUtagNewShopItemInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >::_Vector_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QAE@PAUtagNewShopItemInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >::_Vector_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >::operator==
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@@Z ; std::allocator<NewShopDataCache>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@@Z PROC ; std::allocator<NewShopDataCache>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	6a 00		 push	 0
  0000a	ff 10		 call	 DWORD PTR [eax]

; 214  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?destroy@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@@Z ENDP ; std::allocator<NewShopDataCache>::destroy
_TEXT	ENDS
PUBLIC	??$_Copy_impl@PAHPAH@std@@YAPAHPAH00@Z		; std::_Copy_impl<int *,int *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Copy_impl@PAHPAH@std@@YAPAHPAH00@Z
_TEXT	SEGMENT
__Cat$508054 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_impl@PAHPAH@std@@YAPAHPAH00@Z PROC		; std::_Copy_impl<int *,int *>, COMDAT

; 2163 : 	{	// copy [_First, _Last) to [_Dest, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2164 : 	return (_Copy_impl(_First, _Last,
; 2165 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$508054[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_impl@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<int *,int *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2166 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Copy_impl@PAHPAH@std@@YAPAHPAH00@Z ENDP		; std::_Copy_impl<int *,int *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z ; std::_Uninitialized_copy<int *,int *,std::allocator<int> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z
_TEXT	SEGMENT
__Cat$508061 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z PROC ; std::_Uninitialized_copy<int *,int *,std::allocator<int> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$508061[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@HH@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<int,int>
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z ENDP ; std::_Uninitialized_copy<int *,int *,std::allocator<int> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@H@std@@QAEXPAHABH@Z	; std::allocator<int>::construct
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@H@std@@QAEXPAHABH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@H@std@@QAEXPAHABH@Z PROC		; std::allocator<int>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN5@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN5@construct:

; 198  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?construct@?$allocator@H@std@@QAEXPAHABH@Z ENDP		; std::allocator<int>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@H@std@@QAEXPAH@Z		; std::allocator<int>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@H@std@@QAEXPAH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@H@std@@QAEXPAH@Z PROC		; std::allocator<int>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@H@std@@QAEXPAH@Z ENDP		; std::allocator<int>::destroy
_TEXT	ENDS
PUBLIC	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::begin
_TEXT	ENDS
PUBLIC	?begin@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::end
_TEXT	ENDS
PUBLIC	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::end
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z PROC ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z ENDP ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@H@std@@QAEPAHI@Z		; std::allocator<int>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@H@std@@QAEPAHI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@H@std@@QAEPAHI@Z PROC		; std::allocator<int>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@H@std@@YAPAHIPAH@Z ; std::_Allocate<int>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@H@std@@QAEPAHI@Z ENDP		; std::allocator<int>::allocate
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator==
_TEXT	ENDS
PUBLIC	??$_Move@PAHPAH@std@@YAPAHPAH00@Z		; std::_Move<int *,int *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAHPAH@std@@YAPAHPAH00@Z
_TEXT	SEGMENT
__Cat$508180 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAHPAH@std@@YAPAHPAH00@Z PROC			; std::_Move<int *,int *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$508180[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<int *,int *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAHPAH@std@@YAPAHPAH00@Z ENDP			; std::_Move<int *,int *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	??0?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE@XZ ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::vector<NewShopDataCache,std::allocator<NewShopDataCache> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE@XZ PROC ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::vector<NewShopDataCache,std::allocator<NewShopDataCache> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE@XZ ENDP ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::vector<NewShopDataCache,std::allocator<NewShopDataCache> >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QAE@PAUNewShopDataCache@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::_Vector_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QAE@PAUNewShopDataCache@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QAE@PAUNewShopDataCache@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::_Vector_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@std@@QAE@PAUNewShopDataCache@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >::_Vector_iterator<std::_Vector_val<NewShopDataCache,std::allocator<NewShopDataCache> > >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UNewShopDataCache@@@std@@QAEPAUNewShopDataCache@@I@Z ; std::allocator<NewShopDataCache>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UNewShopDataCache@@@std@@QAEPAUNewShopDataCache@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UNewShopDataCache@@@std@@QAEPAUNewShopDataCache@@I@Z PROC ; std::allocator<NewShopDataCache>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UNewShopDataCache@@@std@@YAPAUNewShopDataCache@@IPAU1@@Z ; std::_Allocate<NewShopDataCache>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UNewShopDataCache@@@std@@QAEPAUNewShopDataCache@@I@Z ENDP ; std::allocator<NewShopDataCache>::allocate
_TEXT	ENDS
PUBLIC	?begin@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@XZ ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@XZ PROC ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@XZ ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@XZ PROC ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::end
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAE_NI@Z ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Buy
; Function compile flags: /Ogsp
;	COMDAT ?_Buy@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2e		 jmp	 SHORT $LN5@Buy
$LN4@Buy:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff b1 13 3b
	01		 cmp	 edi, 20648881		; 013b13b1H
  00022	76 0b		 jbe	 SHORT $LN2@Buy

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy:
$LN2@Buy:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@UtagNewShopItemInfo@@@std@@YAPAUtagNewShopItemInfo@@IPAU1@@Z ; std::_Allocate<tagNewShopItemInfo>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	69 ff d0 00 00
	00		 imul	 edi, 208		; 000000d0H
  0003c	03 f8		 add	 edi, eax
  0003e	59		 pop	 ecx
  0003f	89 06		 mov	 DWORD PTR [esi], eax
  00041	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00044	59		 pop	 ecx
  00045	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00048	b0 01		 mov	 al, 1
$LN5@Buy:
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi

; 1266 : 		}

  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
$LN18@Buy:
?_Buy@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Buy
_TEXT	ENDS
PUBLIC	?begin@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@XZ ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@XZ PROC ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@XZ ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@XZ PROC ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@@Z ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@@Z PROC ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@@Z ENDP ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Make_iter
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@@Z ; std::_Dest_val<std::allocator<NewShopDataCache>,NewShopDataCache>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@@Z PROC ; std::_Dest_val<std::allocator<NewShopDataCache>,NewShopDataCache>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	6a 00		 push	 0
  0000a	ff 10		 call	 DWORD PTR [eax]

; 288  : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??$_Dest_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@@Z ENDP ; std::_Dest_val<std::allocator<NewShopDataCache>,NewShopDataCache>
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ; std::vector<int,std::allocator<int> >::_Buy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z PROC	; std::vector<int,std::allocator<int> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy@2

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 29		 jmp	 SHORT $LN5@Buy@2
$LN4@Buy@2:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff ff ff ff
	3f		 cmp	 edi, 1073741823		; 3fffffffH
  00022	76 0b		 jbe	 SHORT $LN2@Buy@2

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy@2:
$LN2@Buy@2:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@H@std@@YAPAHIPAH@Z ; std::_Allocate<int>
  00036	89 06		 mov	 DWORD PTR [esi], eax

; 1262 : 			this->_Mylast = this->_Myfirst;

  00038	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  0003b	8d 04 b8	 lea	 eax, DWORD PTR [eax+edi*4]
  0003e	59		 pop	 ecx
  0003f	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00042	59		 pop	 ecx

; 1264 : 			}
; 1265 : 		return (true);

  00043	b0 01		 mov	 al, 1
$LN5@Buy@2:
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 1266 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN18@Buy@2:
?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ENDP	; std::vector<int,std::allocator<int> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Ucopy<int *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$508392 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z PROC ; std::vector<int,std::allocator<int> >::_Ucopy<int *>, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$508392[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@HH@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<int,int>
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ENDP ; std::vector<int,std::allocator<int> >::_Ucopy<int *>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z ; std::_Cons_val<std::allocator<int>,int,int const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z PROC ; std::_Cons_val<std::allocator<int>,int,int const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN9@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN9@Cons_val:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z ENDP ; std::_Cons_val<std::allocator<int>,int,int const &>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@H@std@@H@std@@YAXAAV?$allocator@H@0@PAH@Z ; std::_Dest_val<std::allocator<int>,int>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@H@std@@H@std@@YAXAAV?$allocator@H@0@PAH@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@H@std@@H@std@@YAXAAV?$allocator@H@0@PAH@Z PROC ; std::_Dest_val<std::allocator<int>,int>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@H@std@@H@std@@YAXAAV?$allocator@H@0@PAH@Z ENDP ; std::_Dest_val<std::allocator<int>,int>
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Destroy
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator!=
_TEXT	ENDS
PUBLIC	?begin@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@XZ ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@XZ PROC ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@XZ ENDP ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@XZ ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@XZ PROC ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@XZ ENDP ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@@Z ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@@Z PROC ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@@Z ENDP ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UNewShopDataCache@@@std@@@std@@YAXPAUNewShopDataCache@@0AAV?$allocator@UNewShopDataCache@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<NewShopDataCache> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UNewShopDataCache@@@std@@@std@@YAXPAUNewShopDataCache@@0AAV?$allocator@UNewShopDataCache@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UNewShopDataCache@@@std@@@std@@YAXPAUNewShopDataCache@@0AAV?$allocator@UNewShopDataCache@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<NewShopDataCache> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN14@Destroy_ra
$LL3@Destroy_ra:

; 97   : 		_Dest_val(_Al, _First);

  00009	8b 06		 mov	 eax, DWORD PTR [esi]
  0000b	6a 00		 push	 0
  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 10		 call	 DWORD PTR [eax]
  00011	83 c6 24	 add	 esi, 36			; 00000024H
$LN14@Destroy_ra:

; 96   : 	for (; _First != _Last; ++_First)

  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL3@Destroy_ra
  00019	5e		 pop	 esi

; 98   : 	}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Destroy_range@V?$allocator@UNewShopDataCache@@@std@@@std@@YAXPAUNewShopDataCache@@0AAV?$allocator@UNewShopDataCache@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<NewShopDataCache> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@PAHV?$allocator@H@2@@std@@YAPAHV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PAHAAV?$allocator@H@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >,int *,std::allocator<int> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@PAHV?$allocator@H@2@@std@@YAPAHV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PAHAAV?$allocator@H@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@PAHV?$allocator@H@2@@std@@YAPAHV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PAHAAV?$allocator@H@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >,int *,std::allocator<int> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	eb 17		 jmp	 SHORT $LN48@Uninit_cop
$LL14@Uninit_cop:

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  00008	83 7d 10 00	 cmp	 DWORD PTR __Dest$[ebp], 0
  0000c	74 07		 je	 SHORT $LN32@Uninit_cop
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00013	89 0a		 mov	 DWORD PTR [edx], ecx
$LN32@Uninit_cop:

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  00015	83 45 10 04	 add	 DWORD PTR __Dest$[ebp], 4
  00019	83 c0 04	 add	 eax, 4
  0001c	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN48@Uninit_cop:
  0001f	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00022	75 e4		 jne	 SHORT $LL14@Uninit_cop

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)
; 379  : 		_Dest_val(_Al, _Next);
; 380  : 	_RERAISE;
; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00024	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@PAHV?$allocator@H@2@@std@@YAPAHV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PAHAAV?$allocator@H@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >,int *,std::allocator<int> >
_TEXT	ENDS
PUBLIC	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$508733 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z PROC ; std::vector<int,std::allocator<int> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$508733[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<int *,int *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z ENDP ; std::vector<int,std::allocator<int> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN12@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN12@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
PUBLIC	?GetCash@ioShopDataCache@@QAEPAUNewShopDataCache@@KKH@Z ; ioShopDataCache::GetCash
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\ioshopdatacache.cpp
;	COMDAT ?GetCash@ioShopDataCache@@QAEPAUNewShopDataCache@@KKH@Z
_TEXT	SEGMENT
_dwTab$ = 8						; size = 4
_dwSubTab$ = 12						; size = 4
_iSexType$ = 16						; size = 4
?GetCash@ioShopDataCache@@QAEPAUNewShopDataCache@@KKH@Z PROC ; ioShopDataCache::GetCash, COMDAT
; _this$ = ecx

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 45   : 	for( NewShopDataCacheList::iterator iter = m_NewShopDataCacheList.begin(); iter != m_NewShopDataCacheList.end(); ++iter )

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00008	eb 1b		 jmp	 SHORT $LN40@GetCash
$LL17@GetCash:

; 46   : 	{
; 47   : 		NewShopDataCache& Cache = *iter;
; 48   : 		if( Cache.dwTab == dwTab && Cache.dwSamllTab == dwSubTab && Cache.m_SexType == iSexType )

  0000a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0000d	3b 55 08	 cmp	 edx, DWORD PTR _dwTab$[ebp]
  00010	75 10		 jne	 SHORT $LN3@GetCash
  00012	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00015	3b 55 0c	 cmp	 edx, DWORD PTR _dwSubTab$[ebp]
  00018	75 08		 jne	 SHORT $LN3@GetCash
  0001a	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  0001d	3b 55 10	 cmp	 edx, DWORD PTR _iSexType$[ebp]
  00020	74 09		 je	 SHORT $LN5@GetCash
$LN3@GetCash:

; 45   : 	for( NewShopDataCacheList::iterator iter = m_NewShopDataCacheList.begin(); iter != m_NewShopDataCacheList.end(); ++iter )

  00022	83 c0 24	 add	 eax, 36			; 00000024H
$LN40@GetCash:
  00025	3b c1		 cmp	 eax, ecx
  00027	75 e1		 jne	 SHORT $LL17@GetCash

; 49   : 		{
; 50   : 			return &Cache;
; 51   : 		}
; 52   : 	}
; 53   : 
; 54   : 	return NULL;

  00029	33 c0		 xor	 eax, eax
$LN5@GetCash:

; 55   : }

  0002b	5d		 pop	 ebp
  0002c	c2 0c 00	 ret	 12			; 0000000cH
?GetCash@ioShopDataCache@@QAEPAUNewShopDataCache@@KKH@Z ENDP ; ioShopDataCache::GetCash
_TEXT	ENDS
PUBLIC	?ClearFilterCache@ioShopDataCache@@QAEXXZ	; ioShopDataCache::ClearFilterCache
; Function compile flags: /Ogsp
;	COMDAT ?ClearFilterCache@ioShopDataCache@@QAEXXZ
_TEXT	SEGMENT
?ClearFilterCache@ioShopDataCache@@QAEXXZ PROC		; ioShopDataCache::ClearFilterCache, COMDAT
; _this$ = ecx

; 59   : 	for( NewShopDataCacheList::iterator iter = m_NewShopDataCacheList.begin(); iter != m_NewShopDataCacheList.end(); ++iter )

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	eb 07		 jmp	 SHORT $LN38@ClearFilte
$LL16@ClearFilte:

; 60   : 	{
; 61   : 		NewShopDataCache& Cache = *iter;
; 62   : 		Cache.eNewShopFilter = NSF_NONE;

  00004	83 60 0c 00	 and	 DWORD PTR [eax+12], 0
  00008	83 c0 24	 add	 eax, 36			; 00000024H
$LN38@ClearFilte:

; 59   : 	for( NewShopDataCacheList::iterator iter = m_NewShopDataCacheList.begin(); iter != m_NewShopDataCacheList.end(); ++iter )

  0000b	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  0000e	75 f4		 jne	 SHORT $LL16@ClearFilte

; 63   : 	}
; 64   : }

  00010	c3		 ret	 0
?ClearFilterCache@ioShopDataCache@@QAEXXZ ENDP		; ioShopDataCache::ClearFilterCache
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UNewShopDataCache@@@std@@@std@@YAXPAUNewShopDataCache@@0AAV?$allocator@UNewShopDataCache@@@0@@Z ; std::_Destroy_range<std::allocator<NewShopDataCache> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UNewShopDataCache@@@std@@@std@@YAXPAUNewShopDataCache@@0AAV?$allocator@UNewShopDataCache@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UNewShopDataCache@@@std@@@std@@YAXPAUNewShopDataCache@@0AAV?$allocator@UNewShopDataCache@@@0@@Z PROC ; std::_Destroy_range<std::allocator<NewShopDataCache> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN18@Destroy_ra@2
$LL7@Destroy_ra@2:
  00009	8b 06		 mov	 eax, DWORD PTR [esi]
  0000b	6a 00		 push	 0
  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 10		 call	 DWORD PTR [eax]
  00011	83 c6 24	 add	 esi, 36			; 00000024H
$LN18@Destroy_ra@2:
  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL7@Destroy_ra@2
  00019	5e		 pop	 esi

; 89   : 	}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Destroy_range@V?$allocator@UNewShopDataCache@@@std@@@std@@YAXPAUNewShopDataCache@@0AAV?$allocator@UNewShopDataCache@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<NewShopDataCache> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@PAHV?$allocator@H@2@@std@@YAPAHV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PAHAAV?$allocator@H@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >,int *,std::allocator<int> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@PAHV?$allocator@H@2@@std@@YAPAHV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PAHAAV?$allocator@H@0@@Z
_TEXT	SEGMENT
__Cat$509022 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@PAHV?$allocator@H@2@@std@@YAPAHV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PAHAAV?$allocator@H@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >,int *,std::allocator<int> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$509022[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@PAHV?$allocator@H@2@@std@@YAPAHV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PAHAAV?$allocator@H@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >,int *,std::allocator<int> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@PAHV?$allocator@H@2@@std@@YAPAHV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PAHAAV?$allocator@H@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >,int *,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ; std::vector<int,std::allocator<int> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T509036 = -4						; size = 4
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ PROC	; std::vector<int,std::allocator<int> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T509036[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ENDP	; std::vector<int,std::allocator<int> >::clear
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IAEXPAUNewShopDataCache@@0@Z ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IAEXPAUNewShopDataCache@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IAEXPAUNewShopDataCache@@0@Z PROC ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN20@Destroy
$LL9@Destroy:
  00009	8b 06		 mov	 eax, DWORD PTR [esi]
  0000b	6a 00		 push	 0
  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 10		 call	 DWORD PTR [eax]
  00011	83 c6 24	 add	 esi, 36			; 00000024H
$LN20@Destroy:
  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL9@Destroy
  00019	5e		 pop	 esi

; 1271 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?_Destroy@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IAEXPAUNewShopDataCache@@0@Z ENDP ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IAEXXZ ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IAEXXZ PROC ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 28		 je	 SHORT $LN21@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	53		 push	 ebx
  00009	57		 push	 edi
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  00010	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00013	8b 3e		 mov	 edi, DWORD PTR [esi]
  00015	eb 0b		 jmp	 SHORT $LN25@Tidy@2
$LL12@Tidy@2:
  00017	8b 07		 mov	 eax, DWORD PTR [edi]
  00019	6a 00		 push	 0
  0001b	8b cf		 mov	 ecx, edi
  0001d	ff 10		 call	 DWORD PTR [eax]
  0001f	83 c7 24	 add	 edi, 36			; 00000024H
$LN25@Tidy@2:
  00022	3b fb		 cmp	 edi, ebx
  00024	75 f1		 jne	 SHORT $LL12@Tidy@2

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00026	ff 36		 push	 DWORD PTR [esi]
  00028	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002d	59		 pop	 ecx
  0002e	5f		 pop	 edi
  0002f	5b		 pop	 ebx
$LN21@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00030	33 c0		 xor	 eax, eax
  00032	89 06		 mov	 DWORD PTR [esi], eax

; 1310 : 		this->_Mylast = 0;

  00034	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1311 : 		this->_Myend = 0;

  00037	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003a	5e		 pop	 esi

; 1312 : 		}

  0003b	c3		 ret	 0
?_Tidy@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IAEXXZ ENDP ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Tidy
_TEXT	ENDS
PUBLIC	??1tagNewShopItemInfo@@QAE@XZ			; tagNewShopItemInfo::~tagNewShopItemInfo
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1tagNewShopItemInfo@@QAE@XZ DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??1tagNewShopItemInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1tagNewShopItemInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$8
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1tagNewShopItemInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1tagNewShopItemInfo@@QAE@XZ PROC			; tagNewShopItemInfo::~tagNewShopItemInfo, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1tagNewShopItemInfo@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00017	8d 8e bc 00 00
	00		 lea	 ecx, DWORD PTR [esi+188]
  0001d	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 8
  00024	ff d7		 call	 edi
  00026	8d 8e ac 00 00
	00		 lea	 ecx, DWORD PTR [esi+172]
  0002c	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00030	ff d7		 call	 edi
  00032	8d 8e 98 00 00
	00		 lea	 ecx, DWORD PTR [esi+152]
  00038	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  0003c	e8 00 00 00 00	 call	 ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
  00041	8d 8e 84 00 00
	00		 lea	 ecx, DWORD PTR [esi+132]
  00047	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0004b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
  00050	8d 4e 68	 lea	 ecx, DWORD PTR [esi+104]
  00053	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00057	e8 00 00 00 00	 call	 ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
  0005c	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  0005f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00063	e8 00 00 00 00	 call	 ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
  00068	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  0006b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0006f	e8 00 00 00 00	 call	 ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
  00074	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00077	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0007b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
  00080	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00083	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00087	e8 00 00 00 00	 call	 ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
  0008c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00090	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00093	e8 00 00 00 00	 call	 ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
  00098	e8 00 00 00 00	 call	 __EH_epilog3
  0009d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 20	 add	 ecx, 32			; 00000020H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 30	 add	 ecx, 48			; 00000030H
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 40	 add	 ecx, 64			; 00000040H
  00027	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$4:
  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 58	 add	 ecx, 88			; 00000058H
  00032	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$5:
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	83 c1 68	 add	 ecx, 104		; 00000068H
  0003d	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$6:
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  0004b	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$7:
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  00059	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$8:
  0005e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	81 c1 ac 00 00
	00		 add	 ecx, 172		; 000000acH
  00067	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1tagNewShopItemInfo@@QAE@XZ:
  0006d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00071	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00074	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00077	33 c8		 xor	 ecx, eax
  00079	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1tagNewShopItemInfo@@QAE@XZ
  00083	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1tagNewShopItemInfo@@QAE@XZ ENDP			; tagNewShopItemInfo::~tagNewShopItemInfo
PUBLIC	??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<int,std::allocator<int> >::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Cat$509551 = 8					; size = 1
__Cat$509491 = 8					; size = 1
__Cat$509468 = 8					; size = 1
__Cat$509413 = 8					; size = 1
$T509379 = 8						; size = 4
__Right$ = 8						; size = 4
??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<int,std::allocator<int> >::operator=, COMDAT
; _this$ = ecx

; 709  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 710  : 		if (this != &_Right)

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	0f 84 c7 00 00
	00		 je	 $LN1@operator

; 711  : 			{	// worth doing
; 712  : 			this->_Orphan_all();

  00012	53		 push	 ebx
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 713  : 
; 714  : 			if (_Right.size() == 0)

  00019	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]

; 715  : 				clear();	// new sequence empty, erase existing sequence

  0001c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001f	8b cb		 mov	 ecx, ebx
  00021	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00023	c1 f9 02	 sar	 ecx, 2
  00026	85 c9		 test	 ecx, ecx
  00028	75 14		 jne	 SHORT $LN8@operator
  0002a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002c	50		 push	 eax
  0002d	51		 push	 ecx
  0002e	8d 45 08	 lea	 eax, DWORD PTR $T509379[ebp]
  00031	50		 push	 eax
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase

; 716  : 			else if (_Right.size() <= size())

  00039	e9 9a 00 00 00	 jmp	 $LN84@operator
$LN8@operator:
  0003e	8b 16		 mov	 edx, DWORD PTR [esi]
  00040	2b c2		 sub	 eax, edx
  00042	c1 f8 02	 sar	 eax, 2
  00045	3b c8		 cmp	 ecx, eax
  00047	77 1e		 ja	 SHORT $LN6@operator

; 717  : 				{	// enough elements, copy new and destroy old
; 718  : 				pointer _Ptr = _STD _Copy_impl(_Right._Myfirst, _Right._Mylast,
; 719  : 					this->_Myfirst);	// copy new

  00049	ff 75 08	 push	 DWORD PTR __Cat$509413[ebp]
  0004c	52		 push	 edx
  0004d	53		 push	 ebx
  0004e	ff 37		 push	 DWORD PTR [edi]
  00050	e8 00 00 00 00	 call	 ??$_Copy_impl@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<int *,int *>

; 720  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 721  : 				this->_Mylast = this->_Myfirst + _Right.size();

  00055	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00058	2b 07		 sub	 eax, DWORD PTR [edi]
  0005a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005c	83 c4 10	 add	 esp, 16			; 00000010H
  0005f	c1 f8 02	 sar	 eax, 2
  00062	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 722  : 				}
; 723  : 			else if (_Right.size() <= capacity())

  00065	eb 6e		 jmp	 SHORT $LN85@operator
$LN6@operator:
  00067	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  0006a	2b da		 sub	 ebx, edx
  0006c	c1 fb 02	 sar	 ebx, 2
  0006f	3b cb		 cmp	 ecx, ebx
  00071	77 2a		 ja	 SHORT $LN4@operator

; 724  : 				{	// enough room, copy and construct new
; 725  : 				pointer _Ptr = _Right._Myfirst + size();
; 726  : 				_STD _Copy_impl(_Right._Myfirst, _Ptr, this->_Myfirst);

  00073	ff 75 08	 push	 DWORD PTR __Cat$509468[ebp]
  00076	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00078	52		 push	 edx
  00079	8d 1c 81	 lea	 ebx, DWORD PTR [ecx+eax*4]
  0007c	53		 push	 ebx
  0007d	51		 push	 ecx
  0007e	e8 00 00 00 00	 call	 ??$_Copy_impl@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<int *,int *>

; 727  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);

  00083	ff 75 08	 push	 DWORD PTR __Cat$509491[ebp]
  00086	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00089	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  0008c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0008f	51		 push	 ecx
  00090	50		 push	 eax
  00091	57		 push	 edi
  00092	53		 push	 ebx
  00093	e8 00 00 00 00	 call	 ??$_Uninit_copy@HH@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<int,int>
  00098	83 c4 24	 add	 esp, 36			; 00000024H

; 728  : 				}
; 729  : 			else

  0009b	eb 38		 jmp	 SHORT $LN85@operator
$LN4@operator:

; 730  : 				{	// not enough room, allocate new array and construct new
; 731  : 				if (this->_Myfirst != 0)

  0009d	85 d2		 test	 edx, edx
  0009f	74 07		 je	 SHORT $LN74@operator

; 732  : 					{	// discard old array
; 733  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 734  : 					this->_Alval.deallocate(this->_Myfirst,
; 735  : 						this->_Myend - this->_Myfirst);

  000a1	52		 push	 edx
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a7	59		 pop	 ecx
$LN74@operator:

; 736  : 					}
; 737  : 				if (_Buy(_Right.size()))

  000a8	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000ab	2b 07		 sub	 eax, DWORD PTR [edi]
  000ad	8b ce		 mov	 ecx, esi
  000af	c1 f8 02	 sar	 eax, 2
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ; std::vector<int,std::allocator<int> >::_Buy
  000b8	84 c0		 test	 al, al
  000ba	74 1c		 je	 SHORT $LN84@operator

; 738  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 739  : 						this->_Myfirst);

  000bc	ff 75 08	 push	 DWORD PTR __Cat$509551[ebp]
  000bf	8b 06		 mov	 eax, DWORD PTR [esi]
  000c1	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000c4	8b 3f		 mov	 edi, DWORD PTR [edi]
  000c6	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  000c9	52		 push	 edx
  000ca	50		 push	 eax
  000cb	51		 push	 ecx
  000cc	57		 push	 edi
  000cd	e8 00 00 00 00	 call	 ??$_Uninit_copy@HH@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<int,int>
  000d2	83 c4 14	 add	 esp, 20			; 00000014H
$LN85@operator:
  000d5	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN84@operator:
  000d8	5b		 pop	 ebx
$LN1@operator:
  000d9	5f		 pop	 edi

; 740  : 				}
; 741  : 			}
; 742  : 		return (*this);

  000da	8b c6		 mov	 eax, esi
  000dc	5e		 pop	 esi

; 743  : 		}

  000dd	5d		 pop	 ebp
  000de	c2 04 00	 ret	 4
??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<int,std::allocator<int> >::operator=
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@?$vector@HV?$allocator@H@std@@@std@@IAEPAHV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@1@0PAH@Z ; std::vector<int,std::allocator<int> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@?$vector@HV?$allocator@H@std@@@std@@IAEPAHV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@1@0PAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$509570 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@?$vector@HV?$allocator@H@std@@@std@@IAEPAHV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@1@0PAH@Z PROC ; std::vector<int,std::allocator<int> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$509570[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@PAHV?$allocator@H@2@@std@@YAPAHV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PAHAAV?$allocator@H@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >,int *,std::allocator<int> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@@?$vector@HV?$allocator@H@std@@@std@@IAEPAHV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@1@0PAH@Z ENDP ; std::vector<int,std::allocator<int> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > > >
_TEXT	ENDS
PUBLIC	??1?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE@XZ ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::~vector<NewShopDataCache,std::allocator<NewShopDataCache> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE@XZ PROC ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::~vector<NewShopDataCache,std::allocator<NewShopDataCache> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IAEXXZ ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Tidy
??1?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE@XZ ENDP ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::~vector<NewShopDataCache,std::allocator<NewShopDataCache> >
_TEXT	ENDS
PUBLIC	??4tagNewShopItemInfo@@QAEAAU0@ABU0@@Z		; tagNewShopItemInfo::operator=
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??4tagNewShopItemInfo@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4tagNewShopItemInfo@@QAEAAU0@ABU0@@Z PROC		; tagNewShopItemInfo::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00009	8b 07		 mov	 eax, DWORD PTR [edi]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 06		 mov	 DWORD PTR [esi], eax
  0000f	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00018	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0001b	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0001e	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00021	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  00024	50		 push	 eax
  00025	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00028	e8 00 00 00 00	 call	 ??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<int,std::allocator<int> >::operator=
  0002d	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
  00030	50		 push	 eax
  00031	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00034	e8 00 00 00 00	 call	 ??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<int,std::allocator<int> >::operator=
  00039	8d 47 30	 lea	 eax, DWORD PTR [edi+48]
  0003c	50		 push	 eax
  0003d	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00040	e8 00 00 00 00	 call	 ??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<int,std::allocator<int> >::operator=
  00045	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
  00048	50		 push	 eax
  00049	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  0004c	e8 00 00 00 00	 call	 ??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<int,std::allocator<int> >::operator=
  00051	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
  00054	89 46 50	 mov	 DWORD PTR [esi+80], eax
  00057	8b 47 54	 mov	 eax, DWORD PTR [edi+84]
  0005a	89 46 54	 mov	 DWORD PTR [esi+84], eax
  0005d	8d 47 58	 lea	 eax, DWORD PTR [edi+88]
  00060	50		 push	 eax
  00061	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  00064	e8 00 00 00 00	 call	 ??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<int,std::allocator<int> >::operator=
  00069	8d 47 68	 lea	 eax, DWORD PTR [edi+104]
  0006c	50		 push	 eax
  0006d	8d 4e 68	 lea	 ecx, DWORD PTR [esi+104]
  00070	e8 00 00 00 00	 call	 ??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<int,std::allocator<int> >::operator=
  00075	8b 47 78	 mov	 eax, DWORD PTR [edi+120]
  00078	89 46 78	 mov	 DWORD PTR [esi+120], eax
  0007b	8b 47 7c	 mov	 eax, DWORD PTR [edi+124]
  0007e	89 46 7c	 mov	 DWORD PTR [esi+124], eax
  00081	8b 87 80 00 00
	00		 mov	 eax, DWORD PTR [edi+128]
  00087	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax
  0008d	8d 87 84 00 00
	00		 lea	 eax, DWORD PTR [edi+132]
  00093	50		 push	 eax
  00094	8d 8e 84 00 00
	00		 lea	 ecx, DWORD PTR [esi+132]
  0009a	e8 00 00 00 00	 call	 ??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<int,std::allocator<int> >::operator=
  0009f	8b 87 94 00 00
	00		 mov	 eax, DWORD PTR [edi+148]
  000a5	89 86 94 00 00
	00		 mov	 DWORD PTR [esi+148], eax
  000ab	8d 87 98 00 00
	00		 lea	 eax, DWORD PTR [edi+152]
  000b1	50		 push	 eax
  000b2	8d 8e 98 00 00
	00		 lea	 ecx, DWORD PTR [esi+152]
  000b8	e8 00 00 00 00	 call	 ??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<int,std::allocator<int> >::operator=
  000bd	8b 87 a8 00 00
	00		 mov	 eax, DWORD PTR [edi+168]
  000c3	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  000c9	89 86 a8 00 00
	00		 mov	 DWORD PTR [esi+168], eax
  000cf	8d 87 ac 00 00
	00		 lea	 eax, DWORD PTR [edi+172]
  000d5	50		 push	 eax
  000d6	8d 8e ac 00 00
	00		 lea	 ecx, DWORD PTR [esi+172]
  000dc	ff d3		 call	 ebx
  000de	8d 87 bc 00 00
	00		 lea	 eax, DWORD PTR [edi+188]
  000e4	50		 push	 eax
  000e5	8d 8e bc 00 00
	00		 lea	 ecx, DWORD PTR [esi+188]
  000eb	ff d3		 call	 ebx
  000ed	8b 87 cc 00 00
	00		 mov	 eax, DWORD PTR [edi+204]
  000f3	89 86 cc 00 00
	00		 mov	 DWORD PTR [esi+204], eax
  000f9	5f		 pop	 edi
  000fa	8b c6		 mov	 eax, esi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx
  000fe	5d		 pop	 ebp
  000ff	c2 04 00	 ret	 4
??4tagNewShopItemInfo@@QAEAAU0@ABU0@@Z ENDP		; tagNewShopItemInfo::operator=
_TEXT	ENDS
PUBLIC	??_GtagNewShopItemInfo@@QAEPAXI@Z		; tagNewShopItemInfo::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GtagNewShopItemInfo@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GtagNewShopItemInfo@@QAEPAXI@Z PROC			; tagNewShopItemInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1tagNewShopItemInfo@@QAE@XZ
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@3
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@3:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GtagNewShopItemInfo@@QAEPAXI@Z ENDP			; tagNewShopItemInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$509664 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	c1 f8 02	 sar	 eax, 2
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ; std::vector<int,std::allocator<int> >::_Buy
  0002c	84 c0		 test	 al, al
  0002e	74 1f		 je	 SHORT $LN7@vector

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00030	ff 75 08	 push	 DWORD PTR __Cat$509664[ebp]
  00033	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00035	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00038	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003a	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  0003d	52		 push	 edx
  0003e	51		 push	 ecx
  0003f	50		 push	 eax
  00040	57		 push	 edi
  00041	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00044	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@PAHV?$allocator@H@2@@std@@YAPAHV?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@0PAHAAV?$allocator@H@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >,int *,std::allocator<int> >
  00049	83 c4 14	 add	 esp, 20			; 00000014H
  0004c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector:

; 543  : 			_CATCH_END
; 544  : 		}

  0004f	8b c6		 mov	 eax, esi
  00051	e8 00 00 00 00	 call	 __EH_epilog3
  00056	c2 04 00	 ret	 4
__catch$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  00059	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy

; 542  : 			_RERAISE;

  00061	33 db		 xor	 ebx, ebx
  00063	53		 push	 ebx
  00064	53		 push	 ebx
  00065	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector:
$LN37@vector:
  0006a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
PUBLIC	??0ioShopDataCache@@QAE@XZ			; ioShopDataCache::ioShopDataCache
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\ioshopdatacache.cpp
;	COMDAT ??0ioShopDataCache@@QAE@XZ
_TEXT	SEGMENT
??0ioShopDataCache@@QAE@XZ PROC				; ioShopDataCache::ioShopDataCache, COMDAT
; _this$ = ecx

; 12   : {

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	a3 00 00 00 00	 mov	 DWORD PTR ?ms_Singleton@?$Singleton@VioShopDataCache@@@@1PAVioShopDataCache@@A, eax ; Singleton<ioShopDataCache>::ms_Singleton
  00009	89 08		 mov	 DWORD PTR [eax], ecx
  0000b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0000e	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 13   : 
; 14   : }

  00011	c3		 ret	 0
??0ioShopDataCache@@QAE@XZ ENDP				; ioShopDataCache::ioShopDataCache
_TEXT	ENDS
PUBLIC	??1ioShopDataCache@@QAE@XZ			; ioShopDataCache::~ioShopDataCache
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
xdata$x	SEGMENT
__unwindtable$??1ioShopDataCache@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioShopDataCache@@QAE@XZ$0
__ehfuncinfo$??1ioShopDataCache@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ioShopDataCache@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\ioshopdatacache.cpp
xdata$x	ENDS
;	COMDAT ??1ioShopDataCache@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioShopDataCache@@QAE@XZ PROC				; ioShopDataCache::~ioShopDataCache, COMDAT
; _this$ = ecx

; 17   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioShopDataCache@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 18   : 
; 19   : }

  00013	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IAEXXZ ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Tidy
  00018	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_Singleton@?$Singleton@VioShopDataCache@@@@1PAVioShopDataCache@@A, 0 ; Singleton<ioShopDataCache>::ms_Singleton
  0001f	e8 00 00 00 00	 call	 __EH_epilog3
  00024	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioShopDataCache@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$Singleton@VioShopDataCache@@@@QAE@XZ ; Singleton<ioShopDataCache>::~Singleton<ioShopDataCache>
__ehhandler$??1ioShopDataCache@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioShopDataCache@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioShopDataCache@@QAE@XZ ENDP				; ioShopDataCache::~ioShopDataCache
PUBLIC	??$_Copy_impl@PAUtagNewShopItemInfo@@PAU1@@std@@YAPAUtagNewShopItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<tagNewShopItemInfo *,tagNewShopItemInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Copy_impl@PAUtagNewShopItemInfo@@PAU1@@std@@YAPAUtagNewShopItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_impl@PAUtagNewShopItemInfo@@PAU1@@std@@YAPAUtagNewShopItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Copy_impl<tagNewShopItemInfo *,tagNewShopItemInfo *>, COMDAT

; 2142 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 2143 : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00007	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  0000a	74 1a		 je	 SHORT $LN8@Copy_impl
  0000c	56		 push	 esi
  0000d	be d0 00 00 00	 mov	 esi, 208		; 000000d0H
$LL3@Copy_impl:

; 2144 : 		*_Dest = *_First;

  00012	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??4tagNewShopItemInfo@@QAEAAU0@ABU0@@Z
  0001b	01 75 10	 add	 DWORD PTR __Dest$[ebp], esi
  0001e	03 fe		 add	 edi, esi
  00020	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  00023	75 ed		 jne	 SHORT $LL3@Copy_impl
  00025	5e		 pop	 esi
$LN8@Copy_impl:

; 2145 : 	return (_Dest);

  00026	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00029	5f		 pop	 edi

; 2146 : 	}

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Copy_impl@PAUtagNewShopItemInfo@@PAU1@@std@@YAPAUtagNewShopItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_impl<tagNewShopItemInfo *,tagNewShopItemInfo *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUtagNewShopItemInfo@@PAU1@@std@@YAPAUtagNewShopItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<tagNewShopItemInfo *,tagNewShopItemInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAUtagNewShopItemInfo@@PAU1@@std@@YAPAUtagNewShopItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUtagNewShopItemInfo@@PAU1@@std@@YAPAUtagNewShopItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<tagNewShopItemInfo *,tagNewShopItemInfo *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00007	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  0000a	74 1a		 je	 SHORT $LN10@Move
  0000c	56		 push	 esi
  0000d	be d0 00 00 00	 mov	 esi, 208		; 000000d0H
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00012	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??4tagNewShopItemInfo@@QAEAAU0@ABU0@@Z
  0001b	01 75 10	 add	 DWORD PTR __Dest$[ebp], esi
  0001e	03 fe		 add	 edi, esi
  00020	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  00023	75 ed		 jne	 SHORT $LL3@Move
  00025	5e		 pop	 esi
$LN10@Move:

; 2515 : 	return (_Dest);

  00026	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00029	5f		 pop	 edi

; 2516 : 	}

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Move@PAUtagNewShopItemInfo@@PAU1@@std@@YAPAUtagNewShopItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<tagNewShopItemInfo *,tagNewShopItemInfo *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UtagNewShopItemInfo@@@std@@YAXPAUtagNewShopItemInfo@@@Z ; std::_Destroy<tagNewShopItemInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UtagNewShopItemInfo@@@std@@YAXPAUtagNewShopItemInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UtagNewShopItemInfo@@@std@@YAXPAUtagNewShopItemInfo@@@Z PROC ; std::_Destroy<tagNewShopItemInfo>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 64   : 	}

  00006	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  00007	e9 00 00 00 00	 jmp	 ??1tagNewShopItemInfo@@QAE@XZ
??$_Destroy@UtagNewShopItemInfo@@@std@@YAXPAUtagNewShopItemInfo@@@Z ENDP ; std::_Destroy<tagNewShopItemInfo>
_TEXT	ENDS
PUBLIC	??0tagNewShopItemInfo@@QAE@ABU0@@Z		; tagNewShopItemInfo::tagNewShopItemInfo
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0tagNewShopItemInfo@@QAE@ABU0@@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??0tagNewShopItemInfo@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0tagNewShopItemInfo@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0tagNewShopItemInfo@@QAE@ABU0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0tagNewShopItemInfo@@QAE@ABU0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0tagNewShopItemInfo@@QAE@ABU0@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0tagNewShopItemInfo@@QAE@ABU0@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0tagNewShopItemInfo@@QAE@ABU0@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0tagNewShopItemInfo@@QAE@ABU0@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0tagNewShopItemInfo@@QAE@ABU0@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0tagNewShopItemInfo@@QAE@ABU0@@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0tagNewShopItemInfo@@QAE@ABU0@@Z$8
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0tagNewShopItemInfo@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0tagNewShopItemInfo@@QAE@ABU0@@Z PROC			; tagNewShopItemInfo::tagNewShopItemInfo, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0tagNewShopItemInfo@@QAE@ABU0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00014	8b 07		 mov	 eax, DWORD PTR [edi]
  00016	89 06		 mov	 DWORD PTR [esi], eax
  00018	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001b	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001e	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00021	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00024	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00027	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0002a	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  0002d	50		 push	 eax
  0002e	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00031	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  00036	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
  0003d	50		 push	 eax
  0003e	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00041	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  00046	8d 47 30	 lea	 eax, DWORD PTR [edi+48]
  00049	50		 push	 eax
  0004a	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  0004d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00051	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  00056	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
  00059	50		 push	 eax
  0005a	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  0005d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00061	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  00066	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
  00069	89 46 50	 mov	 DWORD PTR [esi+80], eax
  0006c	8b 47 54	 mov	 eax, DWORD PTR [edi+84]
  0006f	89 46 54	 mov	 DWORD PTR [esi+84], eax
  00072	8d 47 58	 lea	 eax, DWORD PTR [edi+88]
  00075	50		 push	 eax
  00076	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  00079	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0007d	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  00082	8d 47 68	 lea	 eax, DWORD PTR [edi+104]
  00085	50		 push	 eax
  00086	8d 4e 68	 lea	 ecx, DWORD PTR [esi+104]
  00089	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0008d	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  00092	8b 47 78	 mov	 eax, DWORD PTR [edi+120]
  00095	89 46 78	 mov	 DWORD PTR [esi+120], eax
  00098	8b 47 7c	 mov	 eax, DWORD PTR [edi+124]
  0009b	89 46 7c	 mov	 DWORD PTR [esi+124], eax
  0009e	8b 87 80 00 00
	00		 mov	 eax, DWORD PTR [edi+128]
  000a4	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax
  000aa	8d 87 84 00 00
	00		 lea	 eax, DWORD PTR [edi+132]
  000b0	50		 push	 eax
  000b1	8d 8e 84 00 00
	00		 lea	 ecx, DWORD PTR [esi+132]
  000b7	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  000bb	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  000c0	8b 87 94 00 00
	00		 mov	 eax, DWORD PTR [edi+148]
  000c6	89 86 94 00 00
	00		 mov	 DWORD PTR [esi+148], eax
  000cc	8d 87 98 00 00
	00		 lea	 eax, DWORD PTR [edi+152]
  000d2	50		 push	 eax
  000d3	8d 8e 98 00 00
	00		 lea	 ecx, DWORD PTR [esi+152]
  000d9	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000dd	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  000e2	8b 87 a8 00 00
	00		 mov	 eax, DWORD PTR [edi+168]
  000e8	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  000ee	89 86 a8 00 00
	00		 mov	 DWORD PTR [esi+168], eax
  000f4	8d 87 ac 00 00
	00		 lea	 eax, DWORD PTR [edi+172]
  000fa	50		 push	 eax
  000fb	8d 8e ac 00 00
	00		 lea	 ecx, DWORD PTR [esi+172]
  00101	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00105	ff d3		 call	 ebx
  00107	8d 87 bc 00 00
	00		 lea	 eax, DWORD PTR [edi+188]
  0010d	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00111	50		 push	 eax
  00112	8d 8e bc 00 00
	00		 lea	 ecx, DWORD PTR [esi+188]
  00118	ff d3		 call	 ebx
  0011a	8b 87 cc 00 00
	00		 mov	 eax, DWORD PTR [edi+204]
  00120	89 86 cc 00 00
	00		 mov	 DWORD PTR [esi+204], eax
  00126	8b c6		 mov	 eax, esi
  00128	e8 00 00 00 00	 call	 __EH_epilog3
  0012d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0tagNewShopItemInfo@@QAE@ABU0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0tagNewShopItemInfo@@QAE@ABU0@@Z$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 20	 add	 ecx, 32			; 00000020H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0tagNewShopItemInfo@@QAE@ABU0@@Z$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 30	 add	 ecx, 48			; 00000030H
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0tagNewShopItemInfo@@QAE@ABU0@@Z$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 40	 add	 ecx, 64			; 00000040H
  00027	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0tagNewShopItemInfo@@QAE@ABU0@@Z$4:
  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 58	 add	 ecx, 88			; 00000058H
  00032	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0tagNewShopItemInfo@@QAE@ABU0@@Z$5:
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	83 c1 68	 add	 ecx, 104		; 00000068H
  0003d	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0tagNewShopItemInfo@@QAE@ABU0@@Z$6:
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  0004b	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0tagNewShopItemInfo@@QAE@ABU0@@Z$7:
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  00059	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0tagNewShopItemInfo@@QAE@ABU0@@Z$8:
  0005e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	81 c1 ac 00 00
	00		 add	 ecx, 172		; 000000acH
  00067	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0tagNewShopItemInfo@@QAE@ABU0@@Z:
  0006d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00071	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00074	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00077	33 c8		 xor	 ecx, eax
  00079	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0tagNewShopItemInfo@@QAE@ABU0@@Z
  00083	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0tagNewShopItemInfo@@QAE@ABU0@@Z ENDP			; tagNewShopItemInfo::tagNewShopItemInfo
PUBLIC	??$_Copy_impl@PAUtagNewShopItemInfo@@PAU1@@std@@YAPAUtagNewShopItemInfo@@PAU1@00@Z ; std::_Copy_impl<tagNewShopItemInfo *,tagNewShopItemInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Copy_impl@PAUtagNewShopItemInfo@@PAU1@@std@@YAPAUtagNewShopItemInfo@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$509779 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_impl@PAUtagNewShopItemInfo@@PAU1@@std@@YAPAUtagNewShopItemInfo@@PAU1@00@Z PROC ; std::_Copy_impl<tagNewShopItemInfo *,tagNewShopItemInfo *>, COMDAT

; 2163 : 	{	// copy [_First, _Last) to [_Dest, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2164 : 	return (_Copy_impl(_First, _Last,
; 2165 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$509779[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_impl@PAUtagNewShopItemInfo@@PAU1@@std@@YAPAUtagNewShopItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<tagNewShopItemInfo *,tagNewShopItemInfo *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2166 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Copy_impl@PAUtagNewShopItemInfo@@PAU1@@std@@YAPAUtagNewShopItemInfo@@PAU1@00@Z ENDP ; std::_Copy_impl<tagNewShopItemInfo *,tagNewShopItemInfo *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUtagNewShopItemInfo@@PAU1@@std@@YAPAUtagNewShopItemInfo@@PAU1@00@Z ; std::_Move<tagNewShopItemInfo *,tagNewShopItemInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAUtagNewShopItemInfo@@PAU1@@std@@YAPAUtagNewShopItemInfo@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$509786 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUtagNewShopItemInfo@@PAU1@@std@@YAPAUtagNewShopItemInfo@@PAU1@00@Z PROC ; std::_Move<tagNewShopItemInfo *,tagNewShopItemInfo *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$509786[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAUtagNewShopItemInfo@@PAU1@@std@@YAPAUtagNewShopItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<tagNewShopItemInfo *,tagNewShopItemInfo *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAUtagNewShopItemInfo@@PAU1@@std@@YAPAUtagNewShopItemInfo@@PAU1@00@Z ENDP ; std::_Move<tagNewShopItemInfo *,tagNewShopItemInfo *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UtagNewShopItemInfo@@@std@@QAEXPAUtagNewShopItemInfo@@@Z ; std::allocator<tagNewShopItemInfo>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UtagNewShopItemInfo@@@std@@QAEXPAUtagNewShopItemInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UtagNewShopItemInfo@@@std@@QAEXPAUtagNewShopItemInfo@@@Z PROC ; std::allocator<tagNewShopItemInfo>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??1tagNewShopItemInfo@@QAE@XZ

; 214  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?destroy@?$allocator@UtagNewShopItemInfo@@@std@@QAEXPAUtagNewShopItemInfo@@@Z ENDP ; std::allocator<tagNewShopItemInfo>::destroy
_TEXT	ENDS
PUBLIC	??$construct@AAUtagNewShopItemInfo@@@?$allocator@UtagNewShopItemInfo@@@std@@QAEXPAUtagNewShopItemInfo@@AAU2@@Z ; std::allocator<tagNewShopItemInfo>::construct<tagNewShopItemInfo &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$construct@AAUtagNewShopItemInfo@@@?$allocator@UtagNewShopItemInfo@@@std@@QAEXPAUtagNewShopItemInfo@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUtagNewShopItemInfo@@@?$allocator@UtagNewShopItemInfo@@@std@@QAEXPAUtagNewShopItemInfo@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAUtagNewShopItemInfo@@@?$allocator@UtagNewShopItemInfo@@@std@@QAEXPAUtagNewShopItemInfo@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUtagNewShopItemInfo@@@?$allocator@UtagNewShopItemInfo@@@std@@QAEXPAUtagNewShopItemInfo@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@AAUtagNewShopItemInfo@@@?$allocator@UtagNewShopItemInfo@@@std@@QAEXPAUtagNewShopItemInfo@@AAU2@@Z
_TEXT	SEGMENT
$T509803 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUtagNewShopItemInfo@@@?$allocator@UtagNewShopItemInfo@@@std@@QAEXPAUtagNewShopItemInfo@@AAU2@@Z PROC ; std::allocator<tagNewShopItemInfo>::construct<tagNewShopItemInfo &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$construct@AAUtagNewShopItemInfo@@@?$allocator@UtagNewShopItemInfo@@@std@@QAEXPAUtagNewShopItemInfo@@AAU2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T509803[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct@2
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0tagNewShopItemInfo@@QAE@ABU0@@Z
$LN3@construct@2:

; 209  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUtagNewShopItemInfo@@@?$allocator@UtagNewShopItemInfo@@@std@@QAEXPAUtagNewShopItemInfo@@AAU2@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T509803[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$construct@AAUtagNewShopItemInfo@@@?$allocator@UtagNewShopItemInfo@@@std@@QAEXPAUtagNewShopItemInfo@@AAU2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUtagNewShopItemInfo@@@?$allocator@UtagNewShopItemInfo@@@std@@QAEXPAUtagNewShopItemInfo@@AAU2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUtagNewShopItemInfo@@@?$allocator@UtagNewShopItemInfo@@@std@@QAEXPAUtagNewShopItemInfo@@AAU2@@Z ENDP ; std::allocator<tagNewShopItemInfo>::construct<tagNewShopItemInfo &>
PUBLIC	??$_Construct@UtagNewShopItemInfo@@ABU1@@std@@YAXPAUtagNewShopItemInfo@@ABU1@@Z ; std::_Construct<tagNewShopItemInfo,tagNewShopItemInfo const &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@UtagNewShopItemInfo@@ABU1@@std@@YAXPAUtagNewShopItemInfo@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UtagNewShopItemInfo@@ABU1@@std@@YAXPAUtagNewShopItemInfo@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UtagNewShopItemInfo@@ABU1@@std@@YAXPAUtagNewShopItemInfo@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UtagNewShopItemInfo@@ABU1@@std@@YAXPAUtagNewShopItemInfo@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UtagNewShopItemInfo@@ABU1@@std@@YAXPAUtagNewShopItemInfo@@ABU1@@Z
_TEXT	SEGMENT
$T509822 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UtagNewShopItemInfo@@ABU1@@std@@YAXPAUtagNewShopItemInfo@@ABU1@@Z PROC ; std::_Construct<tagNewShopItemInfo,tagNewShopItemInfo const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@UtagNewShopItemInfo@@ABU1@@std@@YAXPAUtagNewShopItemInfo@@ABU1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T509822[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 08		 je	 SHORT $LN3@Construct@2
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	e8 00 00 00 00	 call	 ??0tagNewShopItemInfo@@QAE@ABU0@@Z
$LN3@Construct@2:

; 49   : 	}

  00025	e8 00 00 00 00	 call	 __EH_epilog3
  0002a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UtagNewShopItemInfo@@ABU1@@std@@YAXPAUtagNewShopItemInfo@@ABU1@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T509822[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@UtagNewShopItemInfo@@ABU1@@std@@YAXPAUtagNewShopItemInfo@@ABU1@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UtagNewShopItemInfo@@ABU1@@std@@YAXPAUtagNewShopItemInfo@@ABU1@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UtagNewShopItemInfo@@ABU1@@std@@YAXPAUtagNewShopItemInfo@@ABU1@@Z ENDP ; std::_Construct<tagNewShopItemInfo,tagNewShopItemInfo const &>
PUBLIC	??$_Dest_val@V?$allocator@UtagNewShopItemInfo@@@std@@UtagNewShopItemInfo@@@std@@YAXAAV?$allocator@UtagNewShopItemInfo@@@0@PAUtagNewShopItemInfo@@@Z ; std::_Dest_val<std::allocator<tagNewShopItemInfo>,tagNewShopItemInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@UtagNewShopItemInfo@@@std@@UtagNewShopItemInfo@@@std@@YAXAAV?$allocator@UtagNewShopItemInfo@@@0@PAUtagNewShopItemInfo@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UtagNewShopItemInfo@@@std@@UtagNewShopItemInfo@@@std@@YAXAAV?$allocator@UtagNewShopItemInfo@@@0@PAUtagNewShopItemInfo@@@Z PROC ; std::_Dest_val<std::allocator<tagNewShopItemInfo>,tagNewShopItemInfo>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]

; 288  : 	}

  00006	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  00007	e9 00 00 00 00	 jmp	 ??1tagNewShopItemInfo@@QAE@XZ
??$_Dest_val@V?$allocator@UtagNewShopItemInfo@@@std@@UtagNewShopItemInfo@@@std@@YAXAAV?$allocator@UtagNewShopItemInfo@@@0@PAUtagNewShopItemInfo@@@Z ENDP ; std::_Dest_val<std::allocator<tagNewShopItemInfo>,tagNewShopItemInfo>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UtagNewShopItemInfo@@@std@@UtagNewShopItemInfo@@AAU3@@std@@YAXAAV?$allocator@UtagNewShopItemInfo@@@0@PAUtagNewShopItemInfo@@AAU2@@Z ; std::_Cons_val<std::allocator<tagNewShopItemInfo>,tagNewShopItemInfo,tagNewShopItemInfo &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@UtagNewShopItemInfo@@@std@@UtagNewShopItemInfo@@AAU3@@std@@YAXAAV?$allocator@UtagNewShopItemInfo@@@0@PAUtagNewShopItemInfo@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@UtagNewShopItemInfo@@@std@@UtagNewShopItemInfo@@AAU3@@std@@YAXAAV?$allocator@UtagNewShopItemInfo@@@0@PAUtagNewShopItemInfo@@AAU2@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@UtagNewShopItemInfo@@@std@@UtagNewShopItemInfo@@AAU3@@std@@YAXAAV?$allocator@UtagNewShopItemInfo@@@0@PAUtagNewShopItemInfo@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@UtagNewShopItemInfo@@@std@@UtagNewShopItemInfo@@AAU3@@std@@YAXAAV?$allocator@UtagNewShopItemInfo@@@0@PAUtagNewShopItemInfo@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@UtagNewShopItemInfo@@@std@@UtagNewShopItemInfo@@AAU3@@std@@YAXAAV?$allocator@UtagNewShopItemInfo@@@0@PAUtagNewShopItemInfo@@AAU2@@Z
_TEXT	SEGMENT
$T509880 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UtagNewShopItemInfo@@@std@@UtagNewShopItemInfo@@AAU3@@std@@YAXAAV?$allocator@UtagNewShopItemInfo@@@0@PAUtagNewShopItemInfo@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<tagNewShopItemInfo>,tagNewShopItemInfo,tagNewShopItemInfo &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@UtagNewShopItemInfo@@@std@@UtagNewShopItemInfo@@AAU3@@std@@YAXAAV?$allocator@UtagNewShopItemInfo@@@0@PAUtagNewShopItemInfo@@AAU2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T509880[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val@2
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0tagNewShopItemInfo@@QAE@ABU0@@Z
$LN7@Cons_val@2:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@UtagNewShopItemInfo@@@std@@UtagNewShopItemInfo@@AAU3@@std@@YAXAAV?$allocator@UtagNewShopItemInfo@@@0@PAUtagNewShopItemInfo@@AAU2@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T509880[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@UtagNewShopItemInfo@@@std@@UtagNewShopItemInfo@@AAU3@@std@@YAXAAV?$allocator@UtagNewShopItemInfo@@@0@PAUtagNewShopItemInfo@@AAU2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@UtagNewShopItemInfo@@@std@@UtagNewShopItemInfo@@AAU3@@std@@YAXAAV?$allocator@UtagNewShopItemInfo@@@0@PAUtagNewShopItemInfo@@AAU2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@UtagNewShopItemInfo@@@std@@UtagNewShopItemInfo@@AAU3@@std@@YAXAAV?$allocator@UtagNewShopItemInfo@@@0@PAUtagNewShopItemInfo@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<tagNewShopItemInfo>,tagNewShopItemInfo,tagNewShopItemInfo &>
PUBLIC	?construct@?$allocator@UtagNewShopItemInfo@@@std@@QAEXPAUtagNewShopItemInfo@@ABU3@@Z ; std::allocator<tagNewShopItemInfo>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UtagNewShopItemInfo@@@std@@QAEXPAUtagNewShopItemInfo@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UtagNewShopItemInfo@@@std@@QAEXPAUtagNewShopItemInfo@@ABU3@@Z PROC ; std::allocator<tagNewShopItemInfo>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UtagNewShopItemInfo@@ABU1@@std@@YAXPAUtagNewShopItemInfo@@ABU1@@Z ; std::_Construct<tagNewShopItemInfo,tagNewShopItemInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@UtagNewShopItemInfo@@@std@@QAEXPAUtagNewShopItemInfo@@ABU3@@Z ENDP ; std::allocator<tagNewShopItemInfo>::construct
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAXPAUtagNewShopItemInfo@@0AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<tagNewShopItemInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAXPAUtagNewShopItemInfo@@0AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAXPAUtagNewShopItemInfo@@0AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<tagNewShopItemInfo> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0d		 jmp	 SHORT $LN17@Destroy_ra@3
$LL3@Destroy_ra@3:

; 97   : 		_Dest_val(_Al, _First);

  00009	8b ce		 mov	 ecx, esi
  0000b	e8 00 00 00 00	 call	 ??1tagNewShopItemInfo@@QAE@XZ
  00010	81 c6 d0 00 00
	00		 add	 esi, 208		; 000000d0H
$LN17@Destroy_ra@3:

; 96   : 	for (; _First != _Last; ++_First)

  00016	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00019	75 ee		 jne	 SHORT $LL3@Destroy_ra@3
  0001b	5e		 pop	 esi

; 98   : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Destroy_range@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAXPAUtagNewShopItemInfo@@0AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<tagNewShopItemInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUtagNewShopItemInfo@@PAU1@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAPAUtagNewShopItemInfo@@PAU1@00AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<tagNewShopItemInfo *,tagNewShopItemInfo *,std::allocator<tagNewShopItemInfo> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUtagNewShopItemInfo@@PAU1@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAPAUtagNewShopItemInfo@@PAU1@00AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUtagNewShopItemInfo@@PAU1@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAPAUtagNewShopItemInfo@@PAU1@00AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUtagNewShopItemInfo@@PAU1@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAPAUtagNewShopItemInfo@@PAU1@00AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUtagNewShopItemInfo@@PAU1@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAPAUtagNewShopItemInfo@@PAU1@00AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUtagNewShopItemInfo@@PAU1@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAPAUtagNewShopItemInfo@@PAU1@00AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAUtagNewShopItemInfo@@PAU1@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAPAUtagNewShopItemInfo@@PAU1@00AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUtagNewShopItemInfo@@PAU1@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAPAUtagNewShopItemInfo@@PAU1@00AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUtagNewShopItemInfo@@PAU1@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAPAUtagNewShopItemInfo@@PAU1@00AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagNewShopItemInfo@@PAU1@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAPAUtagNewShopItemInfo@@PAU1@00AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PAUtagNewShopItemInfo@@PAU1@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAPAUtagNewShopItemInfo@@PAU1@00AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<tagNewShopItemInfo *,tagNewShopItemInfo *,std::allocator<tagNewShopItemInfo> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_copy@PAUtagNewShopItemInfo@@PAU1@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAPAUtagNewShopItemInfo@@PAU1@00AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 373  : 
; 374  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00016	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
  00019	be d0 00 00 00	 mov	 esi, 208		; 000000d0H
$LL6@Uninit_cop@2:

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001e	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  00021	74 3a		 je	 SHORT $LN4@Uninit_cop@2

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  00023	57		 push	 edi
  00024	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00027	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0002a	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UtagNewShopItemInfo@@@std@@UtagNewShopItemInfo@@AAU3@@std@@YAXAAV?$allocator@UtagNewShopItemInfo@@@0@PAUtagNewShopItemInfo@@AAU2@@Z ; std::_Cons_val<std::allocator<tagNewShopItemInfo>,tagNewShopItemInfo,tagNewShopItemInfo &>
  0002f	01 75 10	 add	 DWORD PTR __Dest$[ebp], esi
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	03 fe		 add	 edi, esi
  00037	eb e5		 jmp	 SHORT $LL6@Uninit_cop@2
__catch$??$_Uninit_copy@PAUtagNewShopItemInfo@@PAU1@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAPAUtagNewShopItemInfo@@PAU1@00AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00039	8b 7d ec	 mov	 edi, DWORD PTR __Next$[ebp]
  0003c	3b 7d 10	 cmp	 edi, DWORD PTR __Dest$[ebp]
  0003f	74 13		 je	 SHORT $LN1@Uninit_cop@2
  00041	be d0 00 00 00	 mov	 esi, 208		; 000000d0H
$LL3@Uninit_cop@2:

; 379  : 		_Dest_val(_Al, _Next);

  00046	8b cf		 mov	 ecx, edi
  00048	e8 00 00 00 00	 call	 ??1tagNewShopItemInfo@@QAE@XZ
  0004d	03 fe		 add	 edi, esi
  0004f	3b 7d 10	 cmp	 edi, DWORD PTR __Dest$[ebp]
  00052	75 f2		 jne	 SHORT $LL3@Uninit_cop@2
$LN1@Uninit_cop@2:

; 380  : 	_RERAISE;

  00054	6a 00		 push	 0
  00056	6a 00		 push	 0
  00058	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN29@Uninit_cop@2:
$LN4@Uninit_cop@2:

; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  0005d	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00060	e8 00 00 00 00	 call	 __EH_epilog3
  00065	c3		 ret	 0
$LN28@Uninit_cop@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUtagNewShopItemInfo@@PAU1@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAPAUtagNewShopItemInfo@@PAU1@00AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUtagNewShopItemInfo@@PAU1@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAPAUtagNewShopItemInfo@@PAU1@00AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUtagNewShopItemInfo@@PAU1@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAPAUtagNewShopItemInfo@@PAU1@00AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<tagNewShopItemInfo *,tagNewShopItemInfo *,std::allocator<tagNewShopItemInfo> >
PUBLIC	??$_Cons_val@V?$allocator@UtagNewShopItemInfo@@@std@@UtagNewShopItemInfo@@ABU3@@std@@YAXAAV?$allocator@UtagNewShopItemInfo@@@0@PAUtagNewShopItemInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<tagNewShopItemInfo>,tagNewShopItemInfo,tagNewShopItemInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UtagNewShopItemInfo@@@std@@UtagNewShopItemInfo@@ABU3@@std@@YAXAAV?$allocator@UtagNewShopItemInfo@@@0@PAUtagNewShopItemInfo@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UtagNewShopItemInfo@@@std@@UtagNewShopItemInfo@@ABU3@@std@@YAXAAV?$allocator@UtagNewShopItemInfo@@@0@PAUtagNewShopItemInfo@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<tagNewShopItemInfo>,tagNewShopItemInfo,tagNewShopItemInfo const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UtagNewShopItemInfo@@ABU1@@std@@YAXPAUtagNewShopItemInfo@@ABU1@@Z ; std::_Construct<tagNewShopItemInfo,tagNewShopItemInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@UtagNewShopItemInfo@@@std@@UtagNewShopItemInfo@@ABU3@@std@@YAXAAV?$allocator@UtagNewShopItemInfo@@@0@PAUtagNewShopItemInfo@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<tagNewShopItemInfo>,tagNewShopItemInfo,tagNewShopItemInfo const &>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAXPAUtagNewShopItemInfo@@0AAV?$allocator@UtagNewShopItemInfo@@@0@@Z ; std::_Destroy_range<std::allocator<tagNewShopItemInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAXPAUtagNewShopItemInfo@@0AAV?$allocator@UtagNewShopItemInfo@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAXPAUtagNewShopItemInfo@@0AAV?$allocator@UtagNewShopItemInfo@@@0@@Z PROC ; std::_Destroy_range<std::allocator<tagNewShopItemInfo> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0d		 jmp	 SHORT $LN21@Destroy_ra@4
$LL7@Destroy_ra@4:
  00009	8b ce		 mov	 ecx, esi
  0000b	e8 00 00 00 00	 call	 ??1tagNewShopItemInfo@@QAE@XZ
  00010	81 c6 d0 00 00
	00		 add	 esi, 208		; 000000d0H
$LN21@Destroy_ra@4:
  00016	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00019	75 ee		 jne	 SHORT $LL7@Destroy_ra@4
  0001b	5e		 pop	 esi

; 89   : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Destroy_range@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAXPAUtagNewShopItemInfo@@0AAV?$allocator@UtagNewShopItemInfo@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<tagNewShopItemInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PAUtagNewShopItemInfo@@PAU1@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAPAUtagNewShopItemInfo@@PAU1@00AAV?$allocator@UtagNewShopItemInfo@@@0@@Z ; std::_Uninitialized_copy<tagNewShopItemInfo *,tagNewShopItemInfo *,std::allocator<tagNewShopItemInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@PAUtagNewShopItemInfo@@PAU1@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAPAUtagNewShopItemInfo@@PAU1@00AAV?$allocator@UtagNewShopItemInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$510044 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAUtagNewShopItemInfo@@PAU1@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAPAUtagNewShopItemInfo@@PAU1@00AAV?$allocator@UtagNewShopItemInfo@@@0@@Z PROC ; std::_Uninitialized_copy<tagNewShopItemInfo *,tagNewShopItemInfo *,std::allocator<tagNewShopItemInfo> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$510044[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUtagNewShopItemInfo@@PAU1@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAPAUtagNewShopItemInfo@@PAU1@00AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<tagNewShopItemInfo *,tagNewShopItemInfo *,std::allocator<tagNewShopItemInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@PAUtagNewShopItemInfo@@PAU1@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAPAUtagNewShopItemInfo@@PAU1@00AAV?$allocator@UtagNewShopItemInfo@@@0@@Z ENDP ; std::_Uninitialized_copy<tagNewShopItemInfo *,tagNewShopItemInfo *,std::allocator<tagNewShopItemInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@2@@std@@YAPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >,tagNewShopItemInfo *,std::allocator<tagNewShopItemInfo> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@2@@std@@YAPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@2@@std@@YAPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@2@@std@@YAPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@2@@std@@YAPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@2@@std@@YAPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@2@@std@@YAPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@2@@std@@YAPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@2@@std@@YAPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@2@@std@@YAPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@2@@std@@YAPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >,tagNewShopItemInfo *,std::allocator<tagNewShopItemInfo> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@2@@std@@YAPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 373  : 
; 374  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
  00016	be d0 00 00 00	 mov	 esi, 208		; 000000d0H

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

$LL14@Uninit_cop@3:
  0001b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001e	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00021	74 37		 je	 SHORT $LN4@Uninit_cop@3

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  00023	50		 push	 eax
  00024	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00027	e8 00 00 00 00	 call	 ??$_Construct@UtagNewShopItemInfo@@ABU1@@std@@YAXPAUtagNewShopItemInfo@@ABU1@@Z ; std::_Construct<tagNewShopItemInfo,tagNewShopItemInfo const &>
  0002c	01 75 10	 add	 DWORD PTR __Dest$[ebp], esi
  0002f	01 75 08	 add	 DWORD PTR __First$[ebp], esi
  00032	59		 pop	 ecx
  00033	59		 pop	 ecx
  00034	eb e5		 jmp	 SHORT $LL14@Uninit_cop@3
__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@2@@std@@YAPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00036	8b 7d ec	 mov	 edi, DWORD PTR __Next$[ebp]
  00039	3b 7d 10	 cmp	 edi, DWORD PTR __Dest$[ebp]
  0003c	74 13		 je	 SHORT $LN1@Uninit_cop@3
  0003e	be d0 00 00 00	 mov	 esi, 208		; 000000d0H
$LL3@Uninit_cop@3:

; 379  : 		_Dest_val(_Al, _Next);

  00043	8b cf		 mov	 ecx, edi
  00045	e8 00 00 00 00	 call	 ??1tagNewShopItemInfo@@QAE@XZ
  0004a	03 fe		 add	 edi, esi
  0004c	3b 7d 10	 cmp	 edi, DWORD PTR __Dest$[ebp]
  0004f	75 f2		 jne	 SHORT $LL3@Uninit_cop@3
$LN1@Uninit_cop@3:

; 380  : 	_RERAISE;

  00051	6a 00		 push	 0
  00053	6a 00		 push	 0
  00055	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN45@Uninit_cop@3:
$LN4@Uninit_cop@3:

; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  0005a	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  0005d	e8 00 00 00 00	 call	 __EH_epilog3
  00062	c3		 ret	 0
$LN44@Uninit_cop@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@2@@std@@YAPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@2@@std@@YAPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@2@@std@@YAPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >,tagNewShopItemInfo *,std::allocator<tagNewShopItemInfo> >
PUBLIC	?_Destroy@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAEXPAUtagNewShopItemInfo@@0@Z ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAEXPAUtagNewShopItemInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAEXPAUtagNewShopItemInfo@@0@Z PROC ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAXPAUtagNewShopItemInfo@@0AAV?$allocator@UtagNewShopItemInfo@@@0@@Z ; std::_Destroy_range<std::allocator<tagNewShopItemInfo> >
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?_Destroy@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAEXPAUtagNewShopItemInfo@@0@Z ENDP ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	?erase@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@0@Z ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$510206 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@0@Z PROC ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 03		 mov	 DWORD PTR [ebx], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 27		 je	 SHORT $LN1@erase@2

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00017	57		 push	 edi
  00018	ff 75 10	 push	 DWORD PTR __Cat$510206[ebp]
  0001b	50		 push	 eax
  0001c	51		 push	 ecx
  0001d	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  00020	e8 00 00 00 00	 call	 ??$_Move@PAUtagNewShopItemInfo@@PAU1@@std@@YAPAUtagNewShopItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<tagNewShopItemInfo *,tagNewShopItemInfo *>
  00025	8b f8		 mov	 edi, eax

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00027	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0002a	50		 push	 eax
  0002b	ff 76 04	 push	 DWORD PTR [esi+4]
  0002e	57		 push	 edi
  0002f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAXPAUtagNewShopItemInfo@@0AAV?$allocator@UtagNewShopItemInfo@@@0@@Z ; std::_Destroy_range<std::allocator<tagNewShopItemInfo> >
  00034	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1211 : 			this->_Mylast = _Ptr;

  00037	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  0003a	5f		 pop	 edi
$LN1@erase@2:

; 1212 : 			}
; 1213 : 		return (_First);

  0003b	5e		 pop	 esi
  0003c	8b c3		 mov	 eax, ebx
  0003e	5b		 pop	 ebx

; 1214 : 		}

  0003f	5d		 pop	 ebp
  00040	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@0@Z ENDP ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::erase
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAUtagNewShopItemInfo@@@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAEPAUtagNewShopItemInfo@@PAU2@00@Z ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Ucopy<tagNewShopItemInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@PAUtagNewShopItemInfo@@@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAEPAUtagNewShopItemInfo@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$510227 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUtagNewShopItemInfo@@@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAEPAUtagNewShopItemInfo@@PAU2@00@Z PROC ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Ucopy<tagNewShopItemInfo *>, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$510227[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUtagNewShopItemInfo@@PAU1@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAPAUtagNewShopItemInfo@@PAU1@00AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<tagNewShopItemInfo *,tagNewShopItemInfo *,std::allocator<tagNewShopItemInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAUtagNewShopItemInfo@@@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAEPAUtagNewShopItemInfo@@PAU2@00@Z ENDP ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Ucopy<tagNewShopItemInfo *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@2@@std@@YAPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UtagNewShopItemInfo@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >,tagNewShopItemInfo *,std::allocator<tagNewShopItemInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@2@@std@@YAPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UtagNewShopItemInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$510233 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@2@@std@@YAPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UtagNewShopItemInfo@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >,tagNewShopItemInfo *,std::allocator<tagNewShopItemInfo> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$510233[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@2@@std@@YAPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >,tagNewShopItemInfo *,std::allocator<tagNewShopItemInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@2@@std@@YAPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UtagNewShopItemInfo@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >,tagNewShopItemInfo *,std::allocator<tagNewShopItemInfo> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAEXXZ ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Tidy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 1e		 je	 SHORT $LN6@Tidy@3

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0000e	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00011	50		 push	 eax
  00012	ff 76 04	 push	 DWORD PTR [esi+4]
  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAXPAUtagNewShopItemInfo@@0AAV?$allocator@UtagNewShopItemInfo@@@0@@Z ; std::_Destroy_range<std::allocator<tagNewShopItemInfo> >

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0001c	ff 36		 push	 DWORD PTR [esi]
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00023	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@Tidy@3:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00026	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00029	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0002d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00031	5e		 pop	 esi

; 1312 : 		}

  00032	c3		 ret	 0
?_Tidy@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	?clear@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAEXXZ ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T510254 = -4						; size = 4
?clear@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAEXXZ PROC ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T510254[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@0@Z ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAEXXZ ENDP ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::clear
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAEPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@1@0PAU2@@Z ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAEPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$510317 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAEPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$510317[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@2@@std@@YAPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >,tagNewShopItemInfo *,std::allocator<tagNewShopItemInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAEPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > > >
_TEXT	ENDS
PUBLIC	??1?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@XZ ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::~vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::~vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAEXXZ ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Tidy
??1?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::~vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >
_TEXT	ENDS
PUBLIC	??0?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$510406 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	b9 d0 00 00 00	 mov	 ecx, 208		; 000000d0H
  00028	99		 cdq
  00029	f7 f9		 idiv	 ecx
  0002b	8b ce		 mov	 ecx, esi
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?_Buy@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAE_NI@Z ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Buy
  00033	84 c0		 test	 al, al
  00035	74 1f		 je	 SHORT $LN7@vector@2

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00037	ff 75 08	 push	 DWORD PTR __Cat$510406[ebp]
  0003a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003c	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003f	8b 3f		 mov	 edi, DWORD PTR [edi]
  00041	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00044	52		 push	 edx
  00045	51		 push	 ecx
  00046	50		 push	 eax
  00047	57		 push	 edi
  00048	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  0004b	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@std@@PAUtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@2@@std@@YAPAUtagNewShopItemInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> > >,tagNewShopItemInfo *,std::allocator<tagNewShopItemInfo> >
  00050	83 c4 14	 add	 esp, 20			; 00000014H
  00053	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector@2:

; 543  : 			_CATCH_END
; 544  : 		}

  00056	8b c6		 mov	 eax, esi
  00058	e8 00 00 00 00	 call	 __EH_epilog3
  0005d	c2 04 00	 ret	 4
__catch$??0?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  00060	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAEXXZ ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Tidy

; 542  : 			_RERAISE;

  00068	33 db		 xor	 ebx, ebx
  0006a	53		 push	 ebx
  0006b	53		 push	 ebx
  0006c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector@2:
$LN37@vector@2:
  00071	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >
PUBLIC	??4?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
tv559 = -4						; size = 4
tv551 = 8						; size = 4
__Cat$510614 = 8					; size = 1
__Cat$510578 = 8					; size = 1
__Cat$510554 = 8					; size = 1
__Cat$510523 = 8					; size = 1
$T510489 = 8						; size = 4
__Right$ = 8						; size = 4
??4?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::operator=, COMDAT
; _this$ = ecx

; 709  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 710  : 		if (this != &_Right)

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00009	8b f1		 mov	 esi, ecx
  0000b	3b f7		 cmp	 esi, edi
  0000d	0f 84 03 01 00
	00		 je	 $LN1@operator@2

; 711  : 			{	// worth doing
; 712  : 			this->_Orphan_all();

  00013	53		 push	 ebx
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 713  : 
; 714  : 			if (_Right.size() == 0)

  0001a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001d	2b 07		 sub	 eax, DWORD PTR [edi]
  0001f	bb d0 00 00 00	 mov	 ebx, 208		; 000000d0H
  00024	99		 cdq
  00025	8b cb		 mov	 ecx, ebx
  00027	f7 f9		 idiv	 ecx
  00029	89 45 08	 mov	 DWORD PTR tv551[ebp], eax
  0002c	85 c0		 test	 eax, eax

; 715  : 				clear();	// new sequence empty, erase existing sequence

  0002e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00031	75 14		 jne	 SHORT $LN8@operator@2
  00033	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00035	50		 push	 eax
  00036	51		 push	 ecx
  00037	8d 45 08	 lea	 eax, DWORD PTR $T510489[ebp]
  0003a	50		 push	 eax
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?erase@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@@2@0@Z ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::erase

; 716  : 			else if (_Right.size() <= size())

  00042	e9 ce 00 00 00	 jmp	 $LN72@operator@2
$LN8@operator@2:
  00047	2b 06		 sub	 eax, DWORD PTR [esi]
  00049	99		 cdq
  0004a	f7 f9		 idiv	 ecx
  0004c	89 45 fc	 mov	 DWORD PTR tv559[ebp], eax
  0004f	39 45 08	 cmp	 DWORD PTR tv551[ebp], eax
  00052	77 34		 ja	 SHORT $LN6@operator@2

; 717  : 				{	// enough elements, copy new and destroy old
; 718  : 				pointer _Ptr = _STD _Copy_impl(_Right._Myfirst, _Right._Mylast,
; 719  : 					this->_Myfirst);	// copy new

  00054	ff 75 08	 push	 DWORD PTR __Cat$510523[ebp]
  00057	ff 36		 push	 DWORD PTR [esi]
  00059	ff 77 04	 push	 DWORD PTR [edi+4]
  0005c	ff 37		 push	 DWORD PTR [edi]
  0005e	e8 00 00 00 00	 call	 ??$_Copy_impl@PAUtagNewShopItemInfo@@PAU1@@std@@YAPAUtagNewShopItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<tagNewShopItemInfo *,tagNewShopItemInfo *>

; 720  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old

  00063	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00066	51		 push	 ecx
  00067	ff 76 04	 push	 DWORD PTR [esi+4]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAXPAUtagNewShopItemInfo@@0AAV?$allocator@UtagNewShopItemInfo@@@0@@Z ; std::_Destroy_range<std::allocator<tagNewShopItemInfo> >

; 721  : 				this->_Mylast = this->_Myfirst + _Right.size();

  00070	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00073	2b 07		 sub	 eax, DWORD PTR [edi]
  00075	83 c4 1c	 add	 esp, 28			; 0000001cH
  00078	99		 cdq
  00079	f7 fb		 idiv	 ebx
  0007b	69 c0 d0 00 00
	00		 imul	 eax, 208		; 000000d0H
  00081	03 06		 add	 eax, DWORD PTR [esi]

; 722  : 				}
; 723  : 			else if (_Right.size() <= capacity())

  00083	e9 8a 00 00 00	 jmp	 $LN73@operator@2
$LN6@operator@2:
  00088	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0008b	2b 06		 sub	 eax, DWORD PTR [esi]
  0008d	99		 cdq
  0008e	f7 f9		 idiv	 ecx
  00090	39 45 08	 cmp	 DWORD PTR tv551[ebp], eax
  00093	77 33		 ja	 SHORT $LN4@operator@2

; 724  : 				{	// enough room, copy and construct new
; 725  : 				pointer _Ptr = _Right._Myfirst + size();

  00095	8b 5d fc	 mov	 ebx, DWORD PTR tv559[ebp]

; 726  : 				_STD _Copy_impl(_Right._Myfirst, _Ptr, this->_Myfirst);

  00098	ff 75 08	 push	 DWORD PTR __Cat$510554[ebp]
  0009b	69 db d0 00 00
	00		 imul	 ebx, 208		; 000000d0H
  000a1	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000a3	ff 36		 push	 DWORD PTR [esi]
  000a5	03 d9		 add	 ebx, ecx
  000a7	53		 push	 ebx
  000a8	51		 push	 ecx
  000a9	e8 00 00 00 00	 call	 ??$_Copy_impl@PAUtagNewShopItemInfo@@PAU1@@std@@YAPAUtagNewShopItemInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<tagNewShopItemInfo *,tagNewShopItemInfo *>

; 727  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);

  000ae	ff 75 08	 push	 DWORD PTR __Cat$510578[ebp]
  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  000b7	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  000ba	51		 push	 ecx
  000bb	50		 push	 eax
  000bc	57		 push	 edi
  000bd	53		 push	 ebx
  000be	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUtagNewShopItemInfo@@PAU1@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAPAUtagNewShopItemInfo@@PAU1@00AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<tagNewShopItemInfo *,tagNewShopItemInfo *,std::allocator<tagNewShopItemInfo> >
  000c3	83 c4 24	 add	 esp, 36			; 00000024H

; 728  : 				}
; 729  : 			else

  000c6	eb 4a		 jmp	 SHORT $LN73@operator@2
$LN4@operator@2:

; 730  : 				{	// not enough room, allocate new array and construct new
; 731  : 				if (this->_Myfirst != 0)

  000c8	8b 06		 mov	 eax, DWORD PTR [esi]
  000ca	85 c0		 test	 eax, eax
  000cc	74 17		 je	 SHORT $LN62@operator@2

; 732  : 					{	// discard old array
; 733  : 					_Destroy(this->_Myfirst, this->_Mylast);

  000ce	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  000d1	51		 push	 ecx
  000d2	ff 76 04	 push	 DWORD PTR [esi+4]
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAXPAUtagNewShopItemInfo@@0AAV?$allocator@UtagNewShopItemInfo@@@0@@Z ; std::_Destroy_range<std::allocator<tagNewShopItemInfo> >

; 734  : 					this->_Alval.deallocate(this->_Myfirst,
; 735  : 						this->_Myend - this->_Myfirst);

  000db	ff 36		 push	 DWORD PTR [esi]
  000dd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e2	83 c4 10	 add	 esp, 16			; 00000010H
$LN62@operator@2:

; 736  : 					}
; 737  : 				if (_Buy(_Right.size()))

  000e5	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000e8	2b 07		 sub	 eax, DWORD PTR [edi]
  000ea	8b ce		 mov	 ecx, esi
  000ec	99		 cdq
  000ed	f7 fb		 idiv	 ebx
  000ef	50		 push	 eax
  000f0	e8 00 00 00 00	 call	 ?_Buy@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAE_NI@Z ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Buy
  000f5	84 c0		 test	 al, al
  000f7	74 1c		 je	 SHORT $LN72@operator@2

; 738  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 739  : 						this->_Myfirst);

  000f9	ff 75 08	 push	 DWORD PTR __Cat$510614[ebp]
  000fc	8b 06		 mov	 eax, DWORD PTR [esi]
  000fe	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00101	8b 3f		 mov	 edi, DWORD PTR [edi]
  00103	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00106	52		 push	 edx
  00107	50		 push	 eax
  00108	51		 push	 ecx
  00109	57		 push	 edi
  0010a	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUtagNewShopItemInfo@@PAU1@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@YAPAUtagNewShopItemInfo@@PAU1@00AAV?$allocator@UtagNewShopItemInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<tagNewShopItemInfo *,tagNewShopItemInfo *,std::allocator<tagNewShopItemInfo> >
  0010f	83 c4 14	 add	 esp, 20			; 00000014H
$LN73@operator@2:
  00112	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN72@operator@2:
  00115	5b		 pop	 ebx
$LN1@operator@2:
  00116	5f		 pop	 edi

; 740  : 				}
; 741  : 			}
; 742  : 		return (*this);

  00117	8b c6		 mov	 eax, esi
  00119	5e		 pop	 esi

; 743  : 		}

  0011a	c9		 leave
  0011b	c2 04 00	 ret	 4
??4?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::operator=
_TEXT	ENDS
PUBLIC	??_7NewShopDataCache@@6B@			; NewShopDataCache::`vftable'
PUBLIC	??0NewShopDataCache@@QAE@ABU0@@Z		; NewShopDataCache::NewShopDataCache
PUBLIC	??_R4NewShopDataCache@@6B@			; NewShopDataCache::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUNewShopDataCache@@@8			; NewShopDataCache `RTTI Type Descriptor'
PUBLIC	??_R3NewShopDataCache@@8			; NewShopDataCache::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NewShopDataCache@@8			; NewShopDataCache::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NewShopDataCache@@8		; NewShopDataCache::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_ENewShopDataCache@@UAEPAXI@Z:PROC		; NewShopDataCache::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@NewShopDataCache@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@NewShopDataCache@@8 DD FLAT:??_R0?AUNewShopDataCache@@@8 ; NewShopDataCache::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NewShopDataCache@@8
rdata$r	ENDS
;	COMDAT ??_R2NewShopDataCache@@8
rdata$r	SEGMENT
??_R2NewShopDataCache@@8 DD FLAT:??_R1A@?0A@EA@NewShopDataCache@@8 ; NewShopDataCache::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@NewShopCache@@8
rdata$r	ENDS
;	COMDAT ??_R3NewShopDataCache@@8
rdata$r	SEGMENT
??_R3NewShopDataCache@@8 DD 00H				; NewShopDataCache::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2NewShopDataCache@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUNewShopDataCache@@@8
_DATA	SEGMENT
??_R0?AUNewShopDataCache@@@8 DD FLAT:??_7type_info@@6B@	; NewShopDataCache `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUNewShopDataCache@@', 00H
_DATA	ENDS
;	COMDAT ??_R4NewShopDataCache@@6B@
rdata$r	SEGMENT
??_R4NewShopDataCache@@6B@ DD 00H			; NewShopDataCache::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUNewShopDataCache@@@8
	DD	FLAT:??_R3NewShopDataCache@@8
rdata$r	ENDS
;	COMDAT ??_7NewShopDataCache@@6B@
CONST	SEGMENT
??_7NewShopDataCache@@6B@ DD FLAT:??_R4NewShopDataCache@@6B@ ; NewShopDataCache::`vftable'
	DD	FLAT:??_ENewShopDataCache@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0NewShopDataCache@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0NewShopDataCache@@QAE@ABU0@@Z$0
__ehfuncinfo$??0NewShopDataCache@@QAE@ABU0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0NewShopDataCache@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0NewShopDataCache@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0NewShopDataCache@@QAE@ABU0@@Z PROC			; NewShopDataCache::NewShopDataCache, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0NewShopDataCache@@QAE@ABU0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NewShopCache@@6B@
  0001a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00020	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00023	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00026	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00029	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0002c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00030	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  00033	50		 push	 eax
  00034	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00037	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NewShopDataCache@@6B@
  0003d	e8 00 00 00 00	 call	 ??0?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >
  00042	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00045	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00048	8b c6		 mov	 eax, esi
  0004a	e8 00 00 00 00	 call	 __EH_epilog3
  0004f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0NewShopDataCache@@QAE@ABU0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1NewShopCache@@UAE@XZ	; NewShopCache::~NewShopCache
__ehhandler$??0NewShopDataCache@@QAE@ABU0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0NewShopDataCache@@QAE@ABU0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0NewShopDataCache@@QAE@ABU0@@Z ENDP			; NewShopDataCache::NewShopDataCache
PUBLIC	??1NewShopDataCache@@UAE@XZ			; NewShopDataCache::~NewShopDataCache
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1NewShopDataCache@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1NewShopDataCache@@UAE@XZ$0
__ehfuncinfo$??1NewShopDataCache@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1NewShopDataCache@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1NewShopDataCache@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1NewShopDataCache@@UAE@XZ PROC			; NewShopDataCache::~NewShopDataCache, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1NewShopDataCache@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00015	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00018	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAEXXZ ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Tidy
  0001d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NewShopCache@@6B@
  00023	e8 00 00 00 00	 call	 __EH_epilog3
  00028	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1NewShopDataCache@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1NewShopCache@@UAE@XZ	; NewShopCache::~NewShopCache
__ehhandler$??1NewShopDataCache@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1NewShopDataCache@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1NewShopDataCache@@UAE@XZ ENDP			; NewShopDataCache::~NewShopDataCache
PUBLIC	??4NewShopDataCache@@QAEAAU0@ABU0@@Z		; NewShopDataCache::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4NewShopDataCache@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4NewShopDataCache@@QAEAAU0@ABU0@@Z PROC		; NewShopDataCache::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00010	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00013	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00016	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00019	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0001c	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  0001f	50		 push	 eax
  00020	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00023	e8 00 00 00 00	 call	 ??4?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::operator=
  00028	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0002b	89 46 20	 mov	 DWORD PTR [esi+32], eax
  0002e	5f		 pop	 edi
  0002f	8b c6		 mov	 eax, esi
  00031	5e		 pop	 esi
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??4NewShopDataCache@@QAEAAU0@ABU0@@Z ENDP		; NewShopDataCache::operator=
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@$$QAU3@@Z ; std::allocator<NewShopDataCache>::construct
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@$$QAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@$$QAU3@@Z$0
__ehfuncinfo$?construct@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@$$QAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@$$QAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@$$QAU3@@Z
_TEXT	SEGMENT
$T510663 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@$$QAU3@@Z PROC ; std::allocator<NewShopDataCache>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?construct@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@$$QAU3@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T510663[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct@3
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0NewShopDataCache@@QAE@ABU0@@Z
$LN3@construct@3:

; 203  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@$$QAU3@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T510663[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$?construct@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@$$QAU3@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@$$QAU3@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@$$QAU3@@Z ENDP ; std::allocator<NewShopDataCache>::construct
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GNewShopDataCache@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GNewShopDataCache@@UAEPAXI@Z$0
__ehfuncinfo$??_GNewShopDataCache@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_GNewShopDataCache@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??_GNewShopDataCache@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GNewShopDataCache@@UAEPAXI@Z PROC			; NewShopDataCache::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??_GNewShopDataCache@@UAEPAXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00015	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00018	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UtagNewShopItemInfo@@V?$allocator@UtagNewShopItemInfo@@@std@@@std@@IAEXXZ ; std::vector<tagNewShopItemInfo,std::allocator<tagNewShopItemInfo> >::_Tidy
  0001d	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00021	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NewShopCache@@6B@
  00027	74 07		 je	 SHORT $LN1@scalar@4
  00029	56		 push	 esi
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002f	59		 pop	 ecx
$LN1@scalar@4:
  00030	8b c6		 mov	 eax, esi
  00032	e8 00 00 00 00	 call	 __EH_epilog3
  00037	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GNewShopDataCache@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1NewShopCache@@UAE@XZ	; NewShopCache::~NewShopCache
__ehhandler$??_GNewShopDataCache@@UAEPAXI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GNewShopDataCache@@UAEPAXI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GNewShopDataCache@@UAEPAXI@Z ENDP			; NewShopDataCache::`scalar deleting destructor'
PUBLIC	??$construct@AAUNewShopDataCache@@@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@AAU2@@Z ; std::allocator<NewShopDataCache>::construct<NewShopDataCache &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$construct@AAUNewShopDataCache@@@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUNewShopDataCache@@@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAUNewShopDataCache@@@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUNewShopDataCache@@@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@AAUNewShopDataCache@@@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@AAU2@@Z
_TEXT	SEGMENT
$T510712 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUNewShopDataCache@@@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@AAU2@@Z PROC ; std::allocator<NewShopDataCache>::construct<NewShopDataCache &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$construct@AAUNewShopDataCache@@@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@AAU2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T510712[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct@4
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0NewShopDataCache@@QAE@ABU0@@Z
$LN3@construct@4:

; 209  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUNewShopDataCache@@@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@AAU2@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T510712[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$construct@AAUNewShopDataCache@@@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@AAU2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUNewShopDataCache@@@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@AAU2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUNewShopDataCache@@@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@AAU2@@Z ENDP ; std::allocator<NewShopDataCache>::construct<NewShopDataCache &>
PUBLIC	??$_Move@PAUNewShopDataCache@@PAU1@@std@@YAPAUNewShopDataCache@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<NewShopDataCache *,NewShopDataCache *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUNewShopDataCache@@PAU1@@std@@YAPAUNewShopDataCache@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUNewShopDataCache@@PAU1@@std@@YAPAUNewShopDataCache@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<NewShopDataCache *,NewShopDataCache *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 10		 jmp	 SHORT $LN11@Move@2
$LL3@Move@2:

; 2514 : 		*_Dest = _STD move(*_First);

  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ??4NewShopDataCache@@QAEAAU0@ABU0@@Z
  00012	83 45 10 24	 add	 DWORD PTR __Dest$[ebp], 36 ; 00000024H
  00016	83 c6 24	 add	 esi, 36			; 00000024H
$LN11@Move@2:

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	75 eb		 jne	 SHORT $LL3@Move@2

; 2515 : 	return (_Dest);

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00021	5e		 pop	 esi

; 2516 : 	}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Move@PAUNewShopDataCache@@PAU1@@std@@YAPAUNewShopDataCache@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<NewShopDataCache *,NewShopDataCache *>
_TEXT	ENDS
PUBLIC	??$_Construct@UNewShopDataCache@@ABU1@@std@@YAXPAUNewShopDataCache@@ABU1@@Z ; std::_Construct<NewShopDataCache,NewShopDataCache const &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@UNewShopDataCache@@ABU1@@std@@YAXPAUNewShopDataCache@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UNewShopDataCache@@ABU1@@std@@YAXPAUNewShopDataCache@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UNewShopDataCache@@ABU1@@std@@YAXPAUNewShopDataCache@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UNewShopDataCache@@ABU1@@std@@YAXPAUNewShopDataCache@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UNewShopDataCache@@ABU1@@std@@YAXPAUNewShopDataCache@@ABU1@@Z
_TEXT	SEGMENT
$T510740 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UNewShopDataCache@@ABU1@@std@@YAXPAUNewShopDataCache@@ABU1@@Z PROC ; std::_Construct<NewShopDataCache,NewShopDataCache const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@UNewShopDataCache@@ABU1@@std@@YAXPAUNewShopDataCache@@ABU1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T510740[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 08		 je	 SHORT $LN3@Construct@3
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	e8 00 00 00 00	 call	 ??0NewShopDataCache@@QAE@ABU0@@Z
$LN3@Construct@3:

; 49   : 	}

  00025	e8 00 00 00 00	 call	 __EH_epilog3
  0002a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UNewShopDataCache@@ABU1@@std@@YAXPAUNewShopDataCache@@ABU1@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T510740[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@UNewShopDataCache@@ABU1@@std@@YAXPAUNewShopDataCache@@ABU1@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UNewShopDataCache@@ABU1@@std@@YAXPAUNewShopDataCache@@ABU1@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UNewShopDataCache@@ABU1@@std@@YAXPAUNewShopDataCache@@ABU1@@Z ENDP ; std::_Construct<NewShopDataCache,NewShopDataCache const &>
PUBLIC	??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@U3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@$$QAU2@@Z ; std::_Cons_val<std::allocator<NewShopDataCache>,NewShopDataCache,NewShopDataCache>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@U3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@$$QAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@U3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@$$QAU2@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@U3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@$$QAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@U3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@$$QAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@U3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@$$QAU2@@Z
_TEXT	SEGMENT
$T510776 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@U3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<NewShopDataCache>,NewShopDataCache,NewShopDataCache>, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@U3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@$$QAU2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T510776[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val@3
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0NewShopDataCache@@QAE@ABU0@@Z
$LN7@Cons_val@3:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@U3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@$$QAU2@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T510776[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@U3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@$$QAU2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@U3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@$$QAU2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@U3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<NewShopDataCache>,NewShopDataCache,NewShopDataCache>
PUBLIC	??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@AAU3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@AAU2@@Z ; std::_Cons_val<std::allocator<NewShopDataCache>,NewShopDataCache,NewShopDataCache &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@AAU3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@AAU3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@AAU2@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@AAU3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@AAU3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@AAU3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@AAU2@@Z
_TEXT	SEGMENT
$T510809 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@AAU3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<NewShopDataCache>,NewShopDataCache,NewShopDataCache &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@AAU3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@AAU2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T510809[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val@4
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0NewShopDataCache@@QAE@ABU0@@Z
$LN7@Cons_val@4:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@AAU3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@AAU2@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T510809[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@AAU3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@AAU2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@AAU3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@AAU2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@AAU3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<NewShopDataCache>,NewShopDataCache,NewShopDataCache &>
PUBLIC	??$_Move@PAUNewShopDataCache@@PAU1@@std@@YAPAUNewShopDataCache@@PAU1@00@Z ; std::_Move<NewShopDataCache *,NewShopDataCache *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUNewShopDataCache@@PAU1@@std@@YAPAUNewShopDataCache@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$510827 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUNewShopDataCache@@PAU1@@std@@YAPAUNewShopDataCache@@PAU1@00@Z PROC ; std::_Move<NewShopDataCache *,NewShopDataCache *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$510827[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAUNewShopDataCache@@PAU1@@std@@YAPAUNewShopDataCache@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<NewShopDataCache *,NewShopDataCache *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAUNewShopDataCache@@PAU1@@std@@YAPAUNewShopDataCache@@PAU1@00@Z ENDP ; std::_Move<NewShopDataCache *,NewShopDataCache *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@ABU3@@Z ; std::allocator<NewShopDataCache>::construct
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@ABU3@@Z PROC ; std::allocator<NewShopDataCache>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UNewShopDataCache@@ABU1@@std@@YAXPAUNewShopDataCache@@ABU1@@Z ; std::_Construct<NewShopDataCache,NewShopDataCache const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@UNewShopDataCache@@@std@@QAEXPAUNewShopDataCache@@ABU3@@Z ENDP ; std::allocator<NewShopDataCache>::construct
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUNewShopDataCache@@PAU1@V?$allocator@UNewShopDataCache@@@std@@U1@@std@@YAPAUNewShopDataCache@@PAU1@00AAV?$allocator@UNewShopDataCache@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<NewShopDataCache *,NewShopDataCache *,std::allocator<NewShopDataCache>,NewShopDataCache>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUNewShopDataCache@@PAU1@V?$allocator@UNewShopDataCache@@@std@@U1@@std@@YAPAUNewShopDataCache@@PAU1@00AAV?$allocator@UNewShopDataCache@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUNewShopDataCache@@PAU1@V?$allocator@UNewShopDataCache@@@std@@U1@@std@@YAPAUNewShopDataCache@@PAU1@00AAV?$allocator@UNewShopDataCache@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUNewShopDataCache@@PAU1@V?$allocator@UNewShopDataCache@@@std@@U1@@std@@YAPAUNewShopDataCache@@PAU1@00AAV?$allocator@UNewShopDataCache@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUNewShopDataCache@@PAU1@V?$allocator@UNewShopDataCache@@@std@@U1@@std@@YAPAUNewShopDataCache@@PAU1@00AAV?$allocator@UNewShopDataCache@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUNewShopDataCache@@PAU1@V?$allocator@UNewShopDataCache@@@std@@U1@@std@@YAPAUNewShopDataCache@@PAU1@00AAV?$allocator@UNewShopDataCache@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAUNewShopDataCache@@PAU1@V?$allocator@UNewShopDataCache@@@std@@U1@@std@@YAPAUNewShopDataCache@@PAU1@00AAV?$allocator@UNewShopDataCache@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUNewShopDataCache@@PAU1@V?$allocator@UNewShopDataCache@@@std@@U1@@std@@YAPAUNewShopDataCache@@PAU1@00AAV?$allocator@UNewShopDataCache@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUNewShopDataCache@@PAU1@V?$allocator@UNewShopDataCache@@@std@@U1@@std@@YAPAUNewShopDataCache@@PAU1@00AAV?$allocator@UNewShopDataCache@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAUNewShopDataCache@@PAU1@V?$allocator@UNewShopDataCache@@@std@@U1@@std@@YAPAUNewShopDataCache@@PAU1@00AAV?$allocator@UNewShopDataCache@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUNewShopDataCache@@PAU1@V?$allocator@UNewShopDataCache@@@std@@U1@@std@@YAPAUNewShopDataCache@@PAU1@00AAV?$allocator@UNewShopDataCache@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<NewShopDataCache *,NewShopDataCache *,std::allocator<NewShopDataCache>,NewShopDataCache>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_move@PAUNewShopDataCache@@PAU1@V?$allocator@UNewShopDataCache@@@std@@U1@@std@@YAPAUNewShopDataCache@@PAU1@00AAV?$allocator@UNewShopDataCache@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 428  : 
; 429  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00016	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LL6@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	74 34		 je	 SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  0001e	56		 push	 esi
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00025	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@U3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@$$QAU2@@Z ; std::_Cons_val<std::allocator<NewShopDataCache>,NewShopDataCache,NewShopDataCache>
  0002a	83 45 10 24	 add	 DWORD PTR __Dest$[ebp], 36 ; 00000024H
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00031	83 c6 24	 add	 esi, 36			; 00000024H
  00034	eb e3		 jmp	 SHORT $LL6@Uninit_mov
__catch$??$_Uninit_move@PAUNewShopDataCache@@PAU1@V?$allocator@UNewShopDataCache@@@std@@U1@@std@@YAPAUNewShopDataCache@@PAU1@00AAV?$allocator@UNewShopDataCache@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00036	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00039	eb 09		 jmp	 SHORT $LN27@Uninit_mov
$LL3@Uninit_mov:

; 434  : 		_Dest_val(_Al, _Next);

  0003b	8b 06		 mov	 eax, DWORD PTR [esi]
  0003d	8b ce		 mov	 ecx, esi
  0003f	ff 10		 call	 DWORD PTR [eax]
  00041	83 c6 24	 add	 esi, 36			; 00000024H
$LN27@Uninit_mov:

; 435  : 	_RERAISE;

  00044	6a 00		 push	 0
  00046	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00049	75 f0		 jne	 SHORT $LL3@Uninit_mov
  0004b	6a 00		 push	 0
  0004d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN28@Uninit_mov:
$LN4@Uninit_mov:

; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00052	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 438  : 	}

  00055	e8 00 00 00 00	 call	 __EH_epilog3
  0005a	c3		 ret	 0
$LN26@Uninit_mov:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUNewShopDataCache@@PAU1@V?$allocator@UNewShopDataCache@@@std@@U1@@std@@YAPAUNewShopDataCache@@PAU1@00AAV?$allocator@UNewShopDataCache@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUNewShopDataCache@@PAU1@V?$allocator@UNewShopDataCache@@@std@@U1@@std@@YAPAUNewShopDataCache@@PAU1@00AAV?$allocator@UNewShopDataCache@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUNewShopDataCache@@PAU1@V?$allocator@UNewShopDataCache@@@std@@U1@@std@@YAPAUNewShopDataCache@@PAU1@00AAV?$allocator@UNewShopDataCache@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<NewShopDataCache *,NewShopDataCache *,std::allocator<NewShopDataCache>,NewShopDataCache>
PUBLIC	?erase@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@@Z ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::erase
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?erase@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Cat$510880 = 12					; size = 1
__Where$ = 12						; size = 4
?erase@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@@Z PROC ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::erase, COMDAT
; _this$ = ecx

; 1179 : 		{	// erase element at where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1180 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1181 : 			_VIPTR(_Where));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	ff 75 0c	 push	 DWORD PTR __Cat$510880[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	50		 push	 eax
  0000f	ff 76 04	 push	 DWORD PTR [esi+4]
  00012	83 c0 24	 add	 eax, 36			; 00000024H
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??$_Move@PAUNewShopDataCache@@PAU1@@std@@YAPAUNewShopDataCache@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<NewShopDataCache *,NewShopDataCache *>

; 1182 : 		_Destroy(this->_Mylast - 1, this->_Mylast);

  0001b	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0001e	83 c4 10	 add	 esp, 16			; 00000010H
  00021	8d 5f dc	 lea	 ebx, DWORD PTR [edi-36]
  00024	eb 0b		 jmp	 SHORT $LN34@erase@3
$LL15@erase@3:
  00026	8b 03		 mov	 eax, DWORD PTR [ebx]
  00028	6a 00		 push	 0
  0002a	8b cb		 mov	 ecx, ebx
  0002c	ff 10		 call	 DWORD PTR [eax]
  0002e	83 c3 24	 add	 ebx, 36			; 00000024H
$LN34@erase@3:
  00031	3b df		 cmp	 ebx, edi
  00033	75 f1		 jne	 SHORT $LL15@erase@3

; 1183 : 		--this->_Mylast;

  00035	83 46 04 dc	 add	 DWORD PTR [esi+4], -36	; ffffffdcH

; 1184 : 		return (_Make_iter(_Where));

  00039	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003c	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	89 08		 mov	 DWORD PTR [eax], ecx
  00043	5b		 pop	 ebx

; 1185 : 		}

  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
?erase@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@@Z ENDP ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::erase
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@ABU3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@ABU2@@Z ; std::_Cons_val<std::allocator<NewShopDataCache>,NewShopDataCache,NewShopDataCache const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@ABU3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@ABU3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<NewShopDataCache>,NewShopDataCache,NewShopDataCache const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UNewShopDataCache@@ABU1@@std@@YAXPAUNewShopDataCache@@ABU1@@Z ; std::_Construct<NewShopDataCache,NewShopDataCache const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@ABU3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<NewShopDataCache>,NewShopDataCache,NewShopDataCache const &>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUNewShopDataCache@@PAU1@V?$allocator@UNewShopDataCache@@@std@@@std@@YAPAUNewShopDataCache@@PAU1@00AAV?$allocator@UNewShopDataCache@@@0@@Z ; std::_Uninitialized_move<NewShopDataCache *,NewShopDataCache *,std::allocator<NewShopDataCache> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUNewShopDataCache@@PAU1@V?$allocator@UNewShopDataCache@@@std@@@std@@YAPAUNewShopDataCache@@PAU1@00AAV?$allocator@UNewShopDataCache@@@0@@Z
_TEXT	SEGMENT
__Cat$510997 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUNewShopDataCache@@PAU1@V?$allocator@UNewShopDataCache@@@std@@@std@@YAPAUNewShopDataCache@@PAU1@00AAV?$allocator@UNewShopDataCache@@@0@@Z PROC ; std::_Uninitialized_move<NewShopDataCache *,NewShopDataCache *,std::allocator<NewShopDataCache> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$510997[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUNewShopDataCache@@PAU1@V?$allocator@UNewShopDataCache@@@std@@U1@@std@@YAPAUNewShopDataCache@@PAU1@00AAV?$allocator@UNewShopDataCache@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<NewShopDataCache *,NewShopDataCache *,std::allocator<NewShopDataCache>,NewShopDataCache>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAUNewShopDataCache@@PAU1@V?$allocator@UNewShopDataCache@@@std@@@std@@YAPAUNewShopDataCache@@PAU1@00AAV?$allocator@UNewShopDataCache@@@0@@Z ENDP ; std::_Uninitialized_move<NewShopDataCache *,NewShopDataCache *,std::allocator<NewShopDataCache> >
_TEXT	ENDS
PUBLIC	?RemoveCache@ioShopDataCache@@QAEXKKH@Z		; ioShopDataCache::RemoveCache
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\ioshopdatacache.cpp
;	COMDAT ?RemoveCache@ioShopDataCache@@QAEXKKH@Z
_TEXT	SEGMENT
$T511005 = -4						; size = 4
_dwTabID$ = 8						; size = 4
_dwSamllTabID$ = 12					; size = 4
_iSexType$ = 16						; size = 4
?RemoveCache@ioShopDataCache@@QAEXKKH@Z PROC		; ioShopDataCache::RemoveCache, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 29   : 	for( NewShopDataCacheList::iterator iter = m_NewShopDataCacheList.begin(); iter != m_NewShopDataCacheList.end(); )

  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	eb 2b		 jmp	 SHORT $LN38@RemoveCach
$LL4@RemoveCach:

; 30   : 	{
; 31   : 		NewShopDataCache& Cache = *iter;
; 32   : 		if( Cache.dwTab == dwTabID && Cache.dwSamllTab == dwSamllTabID && Cache.m_SexType == iSexType )

  0000b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000e	3b 4d 08	 cmp	 ecx, DWORD PTR _dwTabID$[ebp]
  00011	75 20		 jne	 SHORT $LN2@RemoveCach
  00013	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00016	3b 4d 0c	 cmp	 ecx, DWORD PTR _dwSamllTabID$[ebp]
  00019	75 18		 jne	 SHORT $LN2@RemoveCach
  0001b	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0001e	3b 4d 10	 cmp	 ecx, DWORD PTR _iSexType$[ebp]
  00021	75 10		 jne	 SHORT $LN2@RemoveCach

; 33   : 		{
; 34   : 			iter = m_NewShopDataCacheList.erase( iter );

  00023	50		 push	 eax
  00024	8d 45 fc	 lea	 eax, DWORD PTR $T511005[ebp]
  00027	50		 push	 eax
  00028	8b ce		 mov	 ecx, esi
  0002a	e8 00 00 00 00	 call	 ?erase@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@@2@@Z ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::erase
  0002f	8b 00		 mov	 eax, DWORD PTR [eax]

; 35   : 		}
; 36   : 		else

  00031	eb 03		 jmp	 SHORT $LN38@RemoveCach
$LN2@RemoveCach:

; 37   : 		{
; 38   : 			 ++iter;

  00033	83 c0 24	 add	 eax, 36			; 00000024H
$LN38@RemoveCach:

; 29   : 	for( NewShopDataCacheList::iterator iter = m_NewShopDataCacheList.begin(); iter != m_NewShopDataCacheList.end(); )

  00036	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00039	75 d0		 jne	 SHORT $LL4@RemoveCach
  0003b	5e		 pop	 esi

; 39   : 		}
; 40   : 	}
; 41   : }

  0003c	c9		 leave
  0003d	c2 0c 00	 ret	 12			; 0000000cH
?RemoveCache@ioShopDataCache@@QAEXKKH@Z ENDP		; ioShopDataCache::RemoveCache
_TEXT	ENDS
PUBLIC	??$_Umove@PAUNewShopDataCache@@@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IAEPAUNewShopDataCache@@PAU2@00@Z ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Umove<NewShopDataCache *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAUNewShopDataCache@@@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IAEPAUNewShopDataCache@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUNewShopDataCache@@@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IAEPAUNewShopDataCache@@PAU2@00@Z PROC ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Umove<NewShopDataCache *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUNewShopDataCache@@PAU1@V?$allocator@UNewShopDataCache@@@std@@@std@@YAPAUNewShopDataCache@@PAU1@00AAV?$allocator@UNewShopDataCache@@@0@@Z ; std::_Uninitialized_move<NewShopDataCache *,NewShopDataCache *,std::allocator<NewShopDataCache> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUNewShopDataCache@@@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IAEPAUNewShopDataCache@@PAU2@00@Z ENDP ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Umove<NewShopDataCache *>
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAEXI@Z ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$505867 = -24					; size = 4
$T511168 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAEXI@Z PROC ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	81 7d 08 c7 71
	1c 07		 cmp	 DWORD PTR __Count$[ebp], 119304647 ; 071c71c7H
  00015	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN56@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00022	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00025	2b 06		 sub	 eax, DWORD PTR [esi]
  00027	6a 24		 push	 36			; 00000024H
  00029	99		 cdq
  0002a	59		 pop	 ecx
  0002b	f7 f9		 idiv	 ecx
  0002d	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00030	0f 83 81 00 00
	00		 jae	 $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00036	6a 00		 push	 0
  00038	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0003b	e8 00 00 00 00	 call	 ??$_Allocate@UNewShopDataCache@@@std@@YAPAUNewShopDataCache@@IPAU1@@Z ; std::_Allocate<NewShopDataCache>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00040	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00042	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00046	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00049	52		 push	 edx
  0004a	89 45 e8	 mov	 DWORD PTR __Ptr$505867[ebp], eax
  0004d	ff 75 e8	 push	 DWORD PTR __Ptr$505867[ebp]
  00050	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00053	50		 push	 eax
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUNewShopDataCache@@PAU1@V?$allocator@UNewShopDataCache@@@std@@@std@@YAPAUNewShopDataCache@@PAU1@00AAV?$allocator@UNewShopDataCache@@@0@@Z ; std::_Uninitialized_move<NewShopDataCache *,NewShopDataCache *,std::allocator<NewShopDataCache> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  0005a	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  0005d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005f	83 c4 18	 add	 esp, 24			; 00000018H
  00062	8b c3		 mov	 eax, ebx
  00064	2b c1		 sub	 eax, ecx
  00066	6a 24		 push	 36			; 00000024H
  00068	99		 cdq
  00069	5f		 pop	 edi
  0006a	f7 ff		 idiv	 edi
  0006c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00070	8b f8		 mov	 edi, eax
  00072	85 c9		 test	 ecx, ecx
  00074	74 21		 je	 SHORT $LN48@reserve

; 761  : 			if (this->_Myfirst != 0)
; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  00076	89 4d ec	 mov	 DWORD PTR $T511168[ebp], ecx
  00079	3b cb		 cmp	 ecx, ebx
  0007b	74 12		 je	 SHORT $LN37@reserve
$LN39@reserve:
  0007d	8b 4d ec	 mov	 ecx, DWORD PTR $T511168[ebp]
  00080	8b 01		 mov	 eax, DWORD PTR [ecx]
  00082	6a 00		 push	 0
  00084	ff 10		 call	 DWORD PTR [eax]
  00086	83 45 ec 24	 add	 DWORD PTR $T511168[ebp], 36 ; 00000024H
  0008a	39 5d ec	 cmp	 DWORD PTR $T511168[ebp], ebx
  0008d	75 ee		 jne	 SHORT $LN39@reserve
$LN37@reserve:

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  0008f	ff 36		 push	 DWORD PTR [esi]
  00091	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00096	59		 pop	 ecx
$LN48@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00097	8b ce		 mov	 ecx, esi
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;
; 770  : 			this->_Mylast = _Ptr + _Size;

  0009f	6b ff 24	 imul	 edi, 36			; 00000024H
  000a2	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  000a5	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$505867[ebp]
  000a8	6b c0 24	 imul	 eax, 36			; 00000024H
  000ab	03 c1		 add	 eax, ecx
  000ad	03 f9		 add	 edi, ecx
  000af	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000b2	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  000b5	89 0e		 mov	 DWORD PTR [esi], ecx
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  000b7	e8 00 00 00 00	 call	 __EH_epilog3
  000bc	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000bf	ff 75 e8	 push	 DWORD PTR __Ptr$505867[ebp]
  000c2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c7	59		 pop	 ecx

; 757  : 			_RERAISE;

  000c8	6a 00		 push	 0
  000ca	6a 00		 push	 0
  000cc	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN57@reserve:
$LN55@reserve:
  000d1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAEXI@Z ENDP ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::reserve
PUBLIC	?_Reserve@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IAEXI@Z ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IAEXI@Z PROC ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 24		 push	 36			; 00000024H
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 c7 71 1c 07	 mov	 eax, 119304647		; 071c71c7H
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00030	2b c1		 sub	 eax, ecx
  00032	6a 24		 push	 36			; 00000024H
  00034	99		 cdq
  00035	59		 pop	 ecx
  00036	f7 f9		 idiv	 ecx
  00038	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003b	3b f8		 cmp	 edi, eax
  0003d	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003f	57		 push	 edi
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IBEII@Z ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Grow_to
  00047	50		 push	 eax
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?reserve@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAEXI@Z ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::reserve
$LN1@Reserve:
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 1298 : 		}

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IAEXI@Z ENDP ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Reserve
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAEXABUNewShopDataCache@@@Z ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::push_back
; Function compile flags: /Ogsp
;	COMDAT ?push_back@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAEXABUNewShopDataCache@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAEXABUNewShopDataCache@@@Z PROC ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 37		 jae	 SHORT $LN4@push_back
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 31		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 24		 push	 36			; 00000024H
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IAEXI@Z ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00031	6b ff 24	 imul	 edi, 36			; 00000024H
  00034	03 3e		 add	 edi, DWORD PTR [esi]
  00036	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00039	57		 push	 edi
  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UNewShopDataCache@@@std@@UNewShopDataCache@@AAU3@@std@@YAXAAV?$allocator@UNewShopDataCache@@@0@PAUNewShopDataCache@@AAU2@@Z ; std::_Cons_val<std::allocator<NewShopDataCache>,NewShopDataCache,NewShopDataCache &>
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00046	eb 19		 jmp	 SHORT $LN26@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00048	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0004b	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004d	6a 01		 push	 1
  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@IAEXI@Z ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00056	57		 push	 edi
  00057	ff 76 04	 push	 DWORD PTR [esi+4]
  0005a	e8 00 00 00 00	 call	 ??$_Construct@UNewShopDataCache@@ABU1@@std@@YAXPAUNewShopDataCache@@ABU1@@Z ; std::_Construct<NewShopDataCache,NewShopDataCache const &>
  0005f	59		 pop	 ecx
  00060	59		 pop	 ecx
$LN26@push_back:

; 996  : 			++this->_Mylast;

  00061	83 46 04 24	 add	 DWORD PTR [esi+4], 36	; 00000024H
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
?push_back@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAEXABUNewShopDataCache@@@Z ENDP ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::push_back
_TEXT	ENDS
PUBLIC	?AddCash@ioShopDataCache@@QAEXAAUNewShopDataCache@@@Z ; ioShopDataCache::AddCash
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\ioshopdatacache.cpp
;	COMDAT ?AddCash@ioShopDataCache@@QAEXAAUNewShopDataCache@@@Z
_TEXT	SEGMENT
_Cache$ = 8						; size = 4
?AddCash@ioShopDataCache@@QAEXAAUNewShopDataCache@@@Z PROC ; ioShopDataCache::AddCash, COMDAT
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 23   : 	RemoveCache( Cache.dwTab, Cache.dwSamllTab, Cache.m_SexType );

  00004	8b 75 08	 mov	 esi, DWORD PTR _Cache$[ebp]
  00007	57		 push	 edi
  00008	ff 76 20	 push	 DWORD PTR [esi+32]
  0000b	8b f9		 mov	 edi, ecx
  0000d	ff 76 08	 push	 DWORD PTR [esi+8]
  00010	ff 76 04	 push	 DWORD PTR [esi+4]
  00013	e8 00 00 00 00	 call	 ?RemoveCache@ioShopDataCache@@QAEXKKH@Z ; ioShopDataCache::RemoveCache

; 24   : 	m_NewShopDataCacheList.push_back( Cache );

  00018	56		 push	 esi
  00019	8b cf		 mov	 ecx, edi
  0001b	e8 00 00 00 00	 call	 ?push_back@?$vector@UNewShopDataCache@@V?$allocator@UNewShopDataCache@@@std@@@std@@QAEXABUNewShopDataCache@@@Z ; std::vector<NewShopDataCache,std::allocator<NewShopDataCache> >::push_back
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 25   : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?AddCash@ioShopDataCache@@QAEXAAUNewShopDataCache@@@Z ENDP ; ioShopDataCache::AddCash
_TEXT	ENDS
END
