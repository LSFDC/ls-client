; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioShakeCameraManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
PUBLIC	?ms_Singleton@?$Singleton@VioShakeCameraManager@@@@1PAVioShakeCameraManager@@A ; Singleton<ioShakeCameraManager>::ms_Singleton
;	COMDAT ?ms_Singleton@?$Singleton@VioShakeCameraManager@@@@1PAVioShakeCameraManager@@A
_BSS	SEGMENT
?ms_Singleton@?$Singleton@VioShakeCameraManager@@@@1PAVioShakeCameraManager@@A DD 01H DUP (?) ; Singleton<ioShakeCameraManager>::ms_Singleton
_BSS	ENDS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	??1ioINILoader_e@@QAE@XZ			; ioINILoader_e::~ioINILoader_e
EXTRN	__imp_??1ioINILoader@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1ioINILoader_e@@QAE@XZ
_TEXT	SEGMENT
??1ioINILoader_e@@QAE@XZ PROC				; ioINILoader_e::~ioINILoader_e, COMDAT
; _this$ = ecx
  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioINILoader@@QAE@XZ
??1ioINILoader_e@@QAE@XZ ENDP				; ioINILoader_e::~ioINILoader_e
_TEXT	ENDS
PUBLIC	??0?$Singleton@VioShakeCameraManager@@@@QAE@XZ	; Singleton<ioShakeCameraManager>::Singleton<ioShakeCameraManager>
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
;	COMDAT ??0?$Singleton@VioShakeCameraManager@@@@QAE@XZ
_TEXT	SEGMENT
??0?$Singleton@VioShakeCameraManager@@@@QAE@XZ PROC	; Singleton<ioShakeCameraManager>::Singleton<ioShakeCameraManager>, COMDAT
; _this$ = ecx

; 27   : 	Singleton()

  00000	8b c1		 mov	 eax, ecx

; 28   : 	{
; 29   : 		assert( !ms_Singleton );
; 30   : 		int offset = (int)(T*)1 - (int)(Singleton <T>*)(T*)1;
; 31   : 		ms_Singleton = (T*)((int)this + offset);

  00002	8d 48 fc	 lea	 ecx, DWORD PTR [eax-4]
  00005	89 0d 00 00 00
	00		 mov	 DWORD PTR ?ms_Singleton@?$Singleton@VioShakeCameraManager@@@@1PAVioShakeCameraManager@@A, ecx ; Singleton<ioShakeCameraManager>::ms_Singleton

; 32   : 	}

  0000b	c3		 ret	 0
??0?$Singleton@VioShakeCameraManager@@@@QAE@XZ ENDP	; Singleton<ioShakeCameraManager>::Singleton<ioShakeCameraManager>
_TEXT	ENDS
PUBLIC	??1?$Singleton@VioShakeCameraManager@@@@QAE@XZ	; Singleton<ioShakeCameraManager>::~Singleton<ioShakeCameraManager>
; Function compile flags: /Ogsp
;	COMDAT ??1?$Singleton@VioShakeCameraManager@@@@QAE@XZ
_TEXT	SEGMENT
??1?$Singleton@VioShakeCameraManager@@@@QAE@XZ PROC	; Singleton<ioShakeCameraManager>::~Singleton<ioShakeCameraManager>, COMDAT
; _this$ = ecx

; 36   : 		assert( ms_Singleton );
; 37   : 		ms_Singleton = 0;

  00000	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_Singleton@?$Singleton@VioShakeCameraManager@@@@1PAVioShakeCameraManager@@A, 0 ; Singleton<ioShakeCameraManager>::ms_Singleton

; 38   : 	}

  00007	c3		 ret	 0
??1?$Singleton@VioShakeCameraManager@@@@QAE@XZ ENDP	; Singleton<ioShakeCameraManager>::~Singleton<ioShakeCameraManager>
_TEXT	ENDS
PUBLIC	?GetSingleton@?$Singleton@VioShakeCameraManager@@@@SAAAVioShakeCameraManager@@XZ ; Singleton<ioShakeCameraManager>::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?GetSingleton@?$Singleton@VioShakeCameraManager@@@@SAAAVioShakeCameraManager@@XZ
_TEXT	SEGMENT
?GetSingleton@?$Singleton@VioShakeCameraManager@@@@SAAAVioShakeCameraManager@@XZ PROC ; Singleton<ioShakeCameraManager>::GetSingleton, COMDAT

; 42   : 		assert( ms_Singleton );
; 43   : 		return (*ms_Singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VioShakeCameraManager@@@@1PAVioShakeCameraManager@@A ; Singleton<ioShakeCameraManager>::ms_Singleton

; 44   : 	}

  00005	c3		 ret	 0
?GetSingleton@?$Singleton@VioShakeCameraManager@@@@SAAAVioShakeCameraManager@@XZ ENDP ; Singleton<ioShakeCameraManager>::GetSingleton
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QBEIXZ ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QBEIXZ PROC ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 2c		 push	 44			; 0000002cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QBEIXZ ENDP ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QBEIXZ ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QBEIXZ PROC ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 2c		 push	 44			; 0000002cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QBEIXZ ENDP ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::size
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IBE_NPBUShakeCamera@@@Z ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Inside
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IBE_NPBUShakeCamera@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IBE_NPBUShakeCamera@@@Z PROC ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IBE_NPBUShakeCamera@@@Z ENDP ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Inside
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IBEXXZ ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IBEXXZ PROC ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IBEXXZ ENDP ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Xlen
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IBEXPAUShakeCamera@@0@Z ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IBEXPAUShakeCamera@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IBEXPAUShakeCamera@@0@Z PROC ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IBEXPAUShakeCamera@@0@Z ENDP ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE@XZ ; std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> >::~_Vector_val<ShakeCamera,std::allocator<ShakeCamera> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> >::~_Vector_val<ShakeCamera,std::allocator<ShakeCamera> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> >::~_Vector_val<ShakeCamera,std::allocator<ShakeCamera> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UShakeCamera@@@std@@QAE@XZ	; std::allocator<ShakeCamera>::allocator<ShakeCamera>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UShakeCamera@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UShakeCamera@@@std@@QAE@XZ PROC		; std::allocator<ShakeCamera>::allocator<ShakeCamera>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UShakeCamera@@@std@@QAE@XZ ENDP		; std::allocator<ShakeCamera>::allocator<ShakeCamera>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UShakeCamera@@@std@@QAEXPAUShakeCamera@@I@Z ; std::allocator<ShakeCamera>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UShakeCamera@@@std@@QAEXPAUShakeCamera@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UShakeCamera@@@std@@QAEXPAUShakeCamera@@I@Z PROC ; std::allocator<ShakeCamera>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UShakeCamera@@@std@@QAEXPAUShakeCamera@@I@Z ENDP ; std::allocator<ShakeCamera>::deallocate
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QBEABUShakeCamera@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QBEABUShakeCamera@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QBEABUShakeCamera@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QBEABUShakeCamera@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 2c	 add	 DWORD PTR [eax], 44	; 0000002cH

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::operator++
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??0?$allocator@UShakeCamera@@@std@@QAE@ABV01@@Z	; std::allocator<ShakeCamera>::allocator<ShakeCamera>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UShakeCamera@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UShakeCamera@@@std@@QAE@ABV01@@Z PROC	; std::allocator<ShakeCamera>::allocator<ShakeCamera>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UShakeCamera@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<ShakeCamera>::allocator<ShakeCamera>
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UShakeCamera@@@std@@QBEIXZ ; std::allocator<ShakeCamera>::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@UShakeCamera@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UShakeCamera@@@std@@QBEIXZ PROC	; std::allocator<ShakeCamera>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 5d 74 d1 05	 mov	 eax, 97612893		; 05d1745dH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UShakeCamera@@@std@@QBEIXZ ENDP	; std::allocator<ShakeCamera>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::_Compat
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUShakeCamera@@@std@@YAPBUShakeCamera@@ABU1@@Z ; std::addressof<ShakeCamera const >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBUShakeCamera@@@std@@YAPBUShakeCamera@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUShakeCamera@@@std@@YAPBUShakeCamera@@ABU1@@Z PROC ; std::addressof<ShakeCamera const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUShakeCamera@@@std@@YAPBUShakeCamera@@ABU1@@Z ENDP ; std::addressof<ShakeCamera const >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UShakeCamera@@@std@@YAPAUShakeCamera@@IPAU1@@Z ; std::_Allocate<ShakeCamera>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UShakeCamera@@@std@@YAPAUShakeCamera@@IPAU1@@Z
_TEXT	SEGMENT
$T514981 = -12						; size = 12
$T514986 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UShakeCamera@@@std@@YAPAUShakeCamera@@IPAU1@@Z PROC ; std::_Allocate<ShakeCamera>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 5d 74 d1
	05		 cmp	 ecx, 97612893		; 05d1745dH
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	6b c9 2c	 imul	 ecx, 44			; 0000002cH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T514986[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T514986[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T514981[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T514981[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T514981[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UShakeCamera@@@std@@YAPAUShakeCamera@@IPAU1@@Z ENDP ; std::_Allocate<ShakeCamera>
_TEXT	ENDS
PUBLIC	??$forward@AAUShakeCamera@@@std@@YAAAUShakeCamera@@AAU1@@Z ; std::forward<ShakeCamera &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUShakeCamera@@@std@@YAAAUShakeCamera@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUShakeCamera@@@std@@YAAAUShakeCamera@@AAU1@@Z PROC ; std::forward<ShakeCamera &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUShakeCamera@@@std@@YAAAUShakeCamera@@AAU1@@Z ENDP ; std::forward<ShakeCamera &>
_TEXT	ENDS
PUBLIC	??$construct@AAUShakeCamera@@@?$allocator@UShakeCamera@@@std@@QAEXPAUShakeCamera@@AAU2@@Z ; std::allocator<ShakeCamera>::construct<ShakeCamera &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUShakeCamera@@@?$allocator@UShakeCamera@@@std@@QAEXPAUShakeCamera@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUShakeCamera@@@?$allocator@UShakeCamera@@@std@@QAEXPAUShakeCamera@@AAU2@@Z PROC ; std::allocator<ShakeCamera>::construct<ShakeCamera &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN3@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	6a 0b		 push	 11			; 0000000bH
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN3@construct:
  00015	5f		 pop	 edi

; 209  : 		}

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
??$construct@AAUShakeCamera@@@?$allocator@UShakeCamera@@@std@@QAEXPAUShakeCamera@@AAU2@@Z ENDP ; std::allocator<ShakeCamera>::construct<ShakeCamera &>
_TEXT	ENDS
PUBLIC	??$forward@ABUShakeCamera@@@std@@YAABUShakeCamera@@ABU1@@Z ; std::forward<ShakeCamera const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUShakeCamera@@@std@@YAABUShakeCamera@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUShakeCamera@@@std@@YAABUShakeCamera@@ABU1@@Z PROC ; std::forward<ShakeCamera const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUShakeCamera@@@std@@YAABUShakeCamera@@ABU1@@Z ENDP ; std::forward<ShakeCamera const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UShakeCamera@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUShakeCamera@@0@Z ; std::_Ptr_cat<ShakeCamera,ShakeCamera>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UShakeCamera@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUShakeCamera@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UShakeCamera@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUShakeCamera@@0@Z PROC ; std::_Ptr_cat<ShakeCamera,ShakeCamera>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UShakeCamera@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUShakeCamera@@0@Z ENDP ; std::_Ptr_cat<ShakeCamera,ShakeCamera>
_TEXT	ENDS
PUBLIC	??$_Construct@UShakeCamera@@ABU1@@std@@YAXPAUShakeCamera@@ABU1@@Z ; std::_Construct<ShakeCamera,ShakeCamera const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UShakeCamera@@ABU1@@std@@YAXPAUShakeCamera@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UShakeCamera@@ABU1@@std@@YAXPAUShakeCamera@@ABU1@@Z PROC ; std::_Construct<ShakeCamera,ShakeCamera const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN3@Construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	6a 0b		 push	 11			; 0000000bH
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN3@Construct:
  00015	5f		 pop	 edi

; 49   : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Construct@UShakeCamera@@ABU1@@std@@YAXPAUShakeCamera@@ABU1@@Z ENDP ; std::_Construct<ShakeCamera,ShakeCamera const &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUShakeCamera@@@std@@YAPAUShakeCamera@@PAU1@@Z ; std::_Val_type<ShakeCamera *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUShakeCamera@@@std@@YAPAUShakeCamera@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUShakeCamera@@@std@@YAPAUShakeCamera@@PAU1@@Z PROC ; std::_Val_type<ShakeCamera *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUShakeCamera@@@std@@YAPAUShakeCamera@@PAU1@@Z ENDP ; std::_Val_type<ShakeCamera *>
_TEXT	ENDS
PUBLIC	??$move@AAUShakeCamera@@@std@@YA$$QAUShakeCamera@@AAU1@@Z ; std::move<ShakeCamera &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUShakeCamera@@@std@@YA$$QAUShakeCamera@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUShakeCamera@@@std@@YA$$QAUShakeCamera@@AAU1@@Z PROC ; std::move<ShakeCamera &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUShakeCamera@@@std@@YA$$QAUShakeCamera@@AAU1@@Z ENDP ; std::move<ShakeCamera &>
_TEXT	ENDS
PUBLIC	??$_Destroy@UShakeCamera@@@std@@YAXPAUShakeCamera@@@Z ; std::_Destroy<ShakeCamera>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UShakeCamera@@@std@@YAXPAUShakeCamera@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UShakeCamera@@@std@@YAXPAUShakeCamera@@@Z PROC ; std::_Destroy<ShakeCamera>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UShakeCamera@@@std@@YAXPAUShakeCamera@@@Z ENDP ; std::_Destroy<ShakeCamera>
_TEXT	ENDS
PUBLIC	??$forward@UShakeCamera@@@std@@YA$$QAUShakeCamera@@AAU1@@Z ; std::forward<ShakeCamera>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UShakeCamera@@@std@@YA$$QAUShakeCamera@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UShakeCamera@@@std@@YA$$QAUShakeCamera@@AAU1@@Z PROC ; std::forward<ShakeCamera>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UShakeCamera@@@std@@YA$$QAUShakeCamera@@AAU1@@Z ENDP ; std::forward<ShakeCamera>
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	??0ShakeCamera@@QAE@XZ				; ShakeCamera::ShakeCamera
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioshakecameramanager.h
;	COMDAT ??0ShakeCamera@@QAE@XZ
_TEXT	SEGMENT
??0ShakeCamera@@QAE@XZ PROC				; ShakeCamera::ShakeCamera, COMDAT
; _this$ = ecx

; 35   : 	{
; 36   : 		iShakeID = 0;
; 37   : 		dwShakeChangeTime = 0;
; 38   : 		fShakeRate = 0.0f;

  00000	0f 57 c0	 xorps	 xmm0, xmm0
  00003	8b c1		 mov	 eax, ecx
  00005	33 c9		 xor	 ecx, ecx
  00007	89 08		 mov	 DWORD PTR [eax], ecx
  00009	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0000c	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 39   : 		fShakeAmountX = 0.0f;

  00011	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 40   : 		fShakeAmountY = 0.0f;

  00016	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 41   : 		fEndAmount = 0.0f;

  0001b	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 42   : 
; 43   : 		dwRollChangeTime = 0;

  00020	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 44   : 		dwRollEndSlerp = 0;

  00023	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 45   : 		fRollRate = 0.0f;

  00026	f3 0f 11 40 20	 movss	 DWORD PTR [eax+32], xmm0

; 46   : 		fRollAmount = 0.0f;

  0002b	f3 0f 11 40 24	 movss	 DWORD PTR [eax+36], xmm0

; 47   : 		fRollEndAmount = 0.0f;

  00030	f3 0f 11 40 28	 movss	 DWORD PTR [eax+40], xmm0

; 48   : 	}

  00035	c3		 ret	 0
??0ShakeCamera@@QAE@XZ ENDP				; ShakeCamera::ShakeCamera
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?GetSingleton@ioShakeCameraManager@@SAAAV1@XZ	; ioShakeCameraManager::GetSingleton
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioshakecameramanager.cpp
;	COMDAT ?GetSingleton@ioShakeCameraManager@@SAAAV1@XZ
_TEXT	SEGMENT
?GetSingleton@ioShakeCameraManager@@SAAAV1@XZ PROC	; ioShakeCameraManager::GetSingleton, COMDAT

; 77   : 	return Singleton< ioShakeCameraManager >::GetSingleton();

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VioShakeCameraManager@@@@1PAVioShakeCameraManager@@A ; Singleton<ioShakeCameraManager>::ms_Singleton

; 78   : }

  00005	c3		 ret	 0
?GetSingleton@ioShakeCameraManager@@SAAAV1@XZ ENDP	; ioShakeCameraManager::GetSingleton
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QBEAAUShakeCamera@@XZ ; std::_Vector_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QBEAAUShakeCamera@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QBEAAUShakeCamera@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QBEAAUShakeCamera@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 2c	 add	 DWORD PTR [eax], 44	; 0000002cH

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::operator++
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QBEIXZ ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QBEIXZ PROC ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 5d 74 d1 05	 mov	 eax, 97612893		; 05d1745dH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QBEIXZ ENDP ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE@V?$allocator@UShakeCamera@@@1@@Z ; std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> >::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE@V?$allocator@UShakeCamera@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE@V?$allocator@UShakeCamera@@@1@@Z PROC ; std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> >::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE@V?$allocator@UShakeCamera@@@1@@Z ENDP ; std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> >::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UShakeCamera@@@std@@QAEPAUShakeCamera@@I@Z ; std::allocator<ShakeCamera>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UShakeCamera@@@std@@QAEPAUShakeCamera@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UShakeCamera@@@std@@QAEPAUShakeCamera@@I@Z PROC ; std::allocator<ShakeCamera>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UShakeCamera@@@std@@YAPAUShakeCamera@@IPAU1@@Z ; std::_Allocate<ShakeCamera>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UShakeCamera@@@std@@QAEPAUShakeCamera@@I@Z ENDP ; std::allocator<ShakeCamera>::allocate
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::operator==
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IBEII@Z ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IBEII@Z PROC ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 2c		 push	 44			; 0000002cH
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba 5d 74 d1 05	 mov	 edx, 97612893		; 05d1745dH
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00026	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Grow_to@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IBEII@Z ENDP ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QAE@PAUShakeCamera@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::_Vector_const_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QAE@PAUShakeCamera@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QAE@PAUShakeCamera@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::_Vector_const_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QAE@PAUShakeCamera@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::_Vector_const_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0M@$0BD@@ioINILoader@@QAEHAAY0M@$$CBDAAY0BD@$$CBDH@Z ; ioINILoader::LoadInt_e<12,19>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBD0H@Z:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadInt_e@$0M@$0BD@@ioINILoader@@QAEHAAY0M@$$CBDAAY0BD@$$CBDH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -48					; size = 4
__k$ = -44						; size = 19
__t$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_t$ = 8							; size = 4
_k$ = 12						; size = 4
_i$ = 16						; size = 4
??$LoadInt_e@$0M@$0BD@@ioINILoader@@QAEHAAY0M@$$CBDAAY0BD@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<12,19>, COMDAT
; _this$ = ecx

; 126  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]
  00013	8b 55 0c	 mov	 edx, DWORD PTR _k$[ebp]
  00016	53		 push	 ebx

; 127  : 		_ENCSTR(t, _t);

  00017	8a 18		 mov	 bl, BYTE PTR [eax]
  00019	89 4d d0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0001c	32 c9		 xor	 cl, cl
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	3a d9		 cmp	 bl, cl
  00022	0f 84 3a 01 00
	00		 je	 $LN192@LoadInt_e
  00028	80 f3 ed	 xor	 bl, -19			; ffffffedH
  0002b	88 5d ec	 mov	 BYTE PTR __t$[ebp], bl
  0002e	8a 58 01	 mov	 bl, BYTE PTR [eax+1]
  00031	3a d9		 cmp	 bl, cl
  00033	0f 84 23 01 00
	00		 je	 $LN191@LoadInt_e
  00039	80 f3 ec	 xor	 bl, -20			; ffffffecH
  0003c	88 5d ed	 mov	 BYTE PTR __t$[ebp+1], bl
  0003f	8a 58 02	 mov	 bl, BYTE PTR [eax+2]
  00042	3a d9		 cmp	 bl, cl
  00044	0f 84 0c 01 00
	00		 je	 $LN190@LoadInt_e
  0004a	80 f3 eb	 xor	 bl, -21			; ffffffebH
  0004d	88 5d ee	 mov	 BYTE PTR __t$[ebp+2], bl
  00050	8a 58 03	 mov	 bl, BYTE PTR [eax+3]
  00053	3a d9		 cmp	 bl, cl
  00055	0f 84 f5 00 00
	00		 je	 $LN189@LoadInt_e
  0005b	80 f3 ea	 xor	 bl, -22			; ffffffeaH
  0005e	88 5d ef	 mov	 BYTE PTR __t$[ebp+3], bl
  00061	8a 58 04	 mov	 bl, BYTE PTR [eax+4]
  00064	3a d9		 cmp	 bl, cl
  00066	0f 84 de 00 00
	00		 je	 $LN188@LoadInt_e
  0006c	80 f3 ed	 xor	 bl, -19			; ffffffedH
  0006f	88 5d f0	 mov	 BYTE PTR __t$[ebp+4], bl
  00072	8a 58 05	 mov	 bl, BYTE PTR [eax+5]
  00075	3a d9		 cmp	 bl, cl
  00077	0f 84 c7 00 00
	00		 je	 $LN187@LoadInt_e
  0007d	80 f3 ec	 xor	 bl, -20			; ffffffecH
  00080	88 5d f1	 mov	 BYTE PTR __t$[ebp+5], bl
  00083	8a 58 06	 mov	 bl, BYTE PTR [eax+6]
  00086	3a d9		 cmp	 bl, cl
  00088	0f 84 b0 00 00
	00		 je	 $LN186@LoadInt_e
  0008e	80 f3 eb	 xor	 bl, -21			; ffffffebH
  00091	88 5d f2	 mov	 BYTE PTR __t$[ebp+6], bl
  00094	8a 58 07	 mov	 bl, BYTE PTR [eax+7]
  00097	3a d9		 cmp	 bl, cl
  00099	0f 84 99 00 00
	00		 je	 $LN185@LoadInt_e
  0009f	80 f3 ea	 xor	 bl, -22			; ffffffeaH
  000a2	88 5d f3	 mov	 BYTE PTR __t$[ebp+7], bl
  000a5	8a 58 08	 mov	 bl, BYTE PTR [eax+8]
  000a8	3a d9		 cmp	 bl, cl
  000aa	0f 84 82 00 00
	00		 je	 $LN184@LoadInt_e
  000b0	80 f3 ed	 xor	 bl, -19			; ffffffedH
  000b3	88 5d f4	 mov	 BYTE PTR __t$[ebp+8], bl
  000b6	8a 58 09	 mov	 bl, BYTE PTR [eax+9]
  000b9	3a d9		 cmp	 bl, cl
  000bb	74 6f		 je	 SHORT $LN183@LoadInt_e
  000bd	80 f3 ec	 xor	 bl, -20			; ffffffecH
  000c0	88 5d f5	 mov	 BYTE PTR __t$[ebp+9], bl
  000c3	8a 58 0a	 mov	 bl, BYTE PTR [eax+10]
  000c6	3a d9		 cmp	 bl, cl
  000c8	74 5c		 je	 SHORT $LN182@LoadInt_e
  000ca	80 f3 eb	 xor	 bl, -21			; ffffffebH
  000cd	88 5d f6	 mov	 BYTE PTR __t$[ebp+10], bl
  000d0	38 48 0b	 cmp	 BYTE PTR [eax+11], cl
  000d3	0f 84 8d 00 00
	00		 je	 $LN97@LoadInt_e
  000d9	8a 58 0c	 mov	 bl, BYTE PTR [eax+12]
  000dc	3a d9		 cmp	 bl, cl
  000de	74 40		 je	 SHORT $LN180@LoadInt_e
  000e0	80 f3 ed	 xor	 bl, -19			; ffffffedH
  000e3	88 5d f8	 mov	 BYTE PTR __t$[ebp+12], bl
  000e6	8a 58 0d	 mov	 bl, BYTE PTR [eax+13]
  000e9	3a d9		 cmp	 bl, cl
  000eb	74 2d		 je	 SHORT $LN179@LoadInt_e
  000ed	80 f3 ec	 xor	 bl, -20			; ffffffecH
  000f0	88 5d f9	 mov	 BYTE PTR __t$[ebp+13], bl
  000f3	8a 58 0e	 mov	 bl, BYTE PTR [eax+14]
  000f6	3a d9		 cmp	 bl, cl
  000f8	74 1a		 je	 SHORT $LN178@LoadInt_e
  000fa	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000fd	80 f3 eb	 xor	 bl, -21			; ffffffebH
  00100	88 5d fa	 mov	 BYTE PTR __t$[ebp+14], bl
  00103	3a c1		 cmp	 al, cl
  00105	74 07		 je	 SHORT $LN177@LoadInt_e
  00107	34 ea		 xor	 al, -22			; ffffffeaH
  00109	88 45 fb	 mov	 BYTE PTR __t$[ebp+15], al
  0010c	eb 58		 jmp	 SHORT $LN97@LoadInt_e
$LN177@LoadInt_e:
  0010e	c6 45 fb ea	 mov	 BYTE PTR __t$[ebp+15], -22 ; ffffffeaH
  00112	eb 52		 jmp	 SHORT $LN97@LoadInt_e
$LN178@LoadInt_e:
  00114	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+14], -21 ; ffffffebH
  00118	eb 4c		 jmp	 SHORT $LN97@LoadInt_e
$LN179@LoadInt_e:
  0011a	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+13], -20 ; ffffffecH
  0011e	eb 46		 jmp	 SHORT $LN97@LoadInt_e
$LN180@LoadInt_e:
  00120	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  00124	eb 40		 jmp	 SHORT $LN97@LoadInt_e
$LN182@LoadInt_e:
  00126	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  0012a	eb 3a		 jmp	 SHORT $LN97@LoadInt_e
$LN183@LoadInt_e:
  0012c	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  00130	eb 34		 jmp	 SHORT $LN97@LoadInt_e
$LN184@LoadInt_e:
  00132	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  00136	eb 2e		 jmp	 SHORT $LN97@LoadInt_e
$LN185@LoadInt_e:
  00138	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  0013c	eb 28		 jmp	 SHORT $LN97@LoadInt_e
$LN186@LoadInt_e:
  0013e	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  00142	eb 22		 jmp	 SHORT $LN97@LoadInt_e
$LN187@LoadInt_e:
  00144	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  00148	eb 1c		 jmp	 SHORT $LN97@LoadInt_e
$LN188@LoadInt_e:
  0014a	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  0014e	eb 16		 jmp	 SHORT $LN97@LoadInt_e
$LN189@LoadInt_e:
  00150	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00154	eb 10		 jmp	 SHORT $LN97@LoadInt_e
$LN190@LoadInt_e:
  00156	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  0015a	eb 0a		 jmp	 SHORT $LN97@LoadInt_e
$LN191@LoadInt_e:
  0015c	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  00160	eb 04		 jmp	 SHORT $LN97@LoadInt_e
$LN192@LoadInt_e:
  00162	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN97@LoadInt_e:
  00166	6a 02		 push	 2
  00168	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  0016b	88 4d f7	 mov	 BYTE PTR __t$[ebp+11], cl
  0016e	5e		 pop	 esi
  0016f	bf ed ec eb ea	 mov	 edi, -353637139		; eaebecedH
$LL200@LoadInt_e:
  00174	31 38		 xor	 DWORD PTR [eax], edi
  00176	83 c0 04	 add	 eax, 4
  00179	4e		 dec	 esi
  0017a	75 f8		 jne	 SHORT $LL200@LoadInt_e
  0017c	6a 08		 push	 8
  0017e	5e		 pop	 esi
$LL197@LoadInt_e:
  0017f	8b c6		 mov	 eax, esi
  00181	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00186	79 05		 jns	 SHORT $LN219@LoadInt_e
  00188	48		 dec	 eax
  00189	83 c8 fc	 or	 eax, -4			; fffffffcH
  0018c	40		 inc	 eax
$LN219@LoadInt_e:
  0018d	b3 ed		 mov	 bl, -19			; ffffffedH
  0018f	2a d8		 sub	 bl, al
  00191	30 5c 35 ec	 xor	 BYTE PTR __t$[ebp+esi], bl
  00195	46		 inc	 esi
  00196	83 fe 0b	 cmp	 esi, 11			; 0000000bH
  00199	7c e4		 jl	 SHORT $LL197@LoadInt_e

; 128  : 		_ENCSTR(k, _k);

  0019b	8a 02		 mov	 al, BYTE PTR [edx]
  0019d	3a c1		 cmp	 al, cl
  0019f	0f 84 ca 01 00
	00		 je	 $LN96@LoadInt_e
  001a5	34 ed		 xor	 al, -19			; ffffffedH
  001a7	88 45 d4	 mov	 BYTE PTR __k$[ebp], al
  001aa	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  001ad	3a c1		 cmp	 al, cl
  001af	0f 84 b4 01 00
	00		 je	 $LN95@LoadInt_e
  001b5	34 ec		 xor	 al, -20			; ffffffecH
  001b7	88 45 d5	 mov	 BYTE PTR __k$[ebp+1], al
  001ba	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  001bd	3a c1		 cmp	 al, cl
  001bf	0f 84 9e 01 00
	00		 je	 $LN94@LoadInt_e
  001c5	34 eb		 xor	 al, -21			; ffffffebH
  001c7	88 45 d6	 mov	 BYTE PTR __k$[ebp+2], al
  001ca	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  001cd	3a c1		 cmp	 al, cl
  001cf	0f 84 88 01 00
	00		 je	 $LN93@LoadInt_e
  001d5	34 ea		 xor	 al, -22			; ffffffeaH
  001d7	88 45 d7	 mov	 BYTE PTR __k$[ebp+3], al
  001da	8a 42 04	 mov	 al, BYTE PTR [edx+4]
  001dd	3a c1		 cmp	 al, cl
  001df	0f 84 72 01 00
	00		 je	 $LN92@LoadInt_e
  001e5	34 ed		 xor	 al, -19			; ffffffedH
  001e7	88 45 d8	 mov	 BYTE PTR __k$[ebp+4], al
  001ea	8a 42 05	 mov	 al, BYTE PTR [edx+5]
  001ed	3a c1		 cmp	 al, cl
  001ef	0f 84 5c 01 00
	00		 je	 $LN91@LoadInt_e
  001f5	34 ec		 xor	 al, -20			; ffffffecH
  001f7	88 45 d9	 mov	 BYTE PTR __k$[ebp+5], al
  001fa	8a 42 06	 mov	 al, BYTE PTR [edx+6]
  001fd	3a c1		 cmp	 al, cl
  001ff	0f 84 46 01 00
	00		 je	 $LN90@LoadInt_e
  00205	34 eb		 xor	 al, -21			; ffffffebH
  00207	88 45 da	 mov	 BYTE PTR __k$[ebp+6], al
  0020a	8a 42 07	 mov	 al, BYTE PTR [edx+7]
  0020d	3a c1		 cmp	 al, cl
  0020f	0f 84 30 01 00
	00		 je	 $LN89@LoadInt_e
  00215	34 ea		 xor	 al, -22			; ffffffeaH
  00217	88 45 db	 mov	 BYTE PTR __k$[ebp+7], al
  0021a	8a 42 08	 mov	 al, BYTE PTR [edx+8]
  0021d	3a c1		 cmp	 al, cl
  0021f	0f 84 1a 01 00
	00		 je	 $LN88@LoadInt_e
  00225	34 ed		 xor	 al, -19			; ffffffedH
  00227	88 45 dc	 mov	 BYTE PTR __k$[ebp+8], al
  0022a	8a 42 09	 mov	 al, BYTE PTR [edx+9]
  0022d	3a c1		 cmp	 al, cl
  0022f	0f 84 04 01 00
	00		 je	 $LN87@LoadInt_e
  00235	34 ec		 xor	 al, -20			; ffffffecH
  00237	88 45 dd	 mov	 BYTE PTR __k$[ebp+9], al
  0023a	8a 42 0a	 mov	 al, BYTE PTR [edx+10]
  0023d	3a c1		 cmp	 al, cl
  0023f	0f 84 ee 00 00
	00		 je	 $LN86@LoadInt_e
  00245	34 eb		 xor	 al, -21			; ffffffebH
  00247	88 45 de	 mov	 BYTE PTR __k$[ebp+10], al
  0024a	8a 42 0b	 mov	 al, BYTE PTR [edx+11]
  0024d	3a c1		 cmp	 al, cl
  0024f	0f 84 d8 00 00
	00		 je	 $LN85@LoadInt_e
  00255	34 ea		 xor	 al, -22			; ffffffeaH
  00257	88 45 df	 mov	 BYTE PTR __k$[ebp+11], al
  0025a	8a 42 0c	 mov	 al, BYTE PTR [edx+12]
  0025d	3a c1		 cmp	 al, cl
  0025f	0f 84 c2 00 00
	00		 je	 $LN84@LoadInt_e
  00265	34 ed		 xor	 al, -19			; ffffffedH
  00267	88 45 e0	 mov	 BYTE PTR __k$[ebp+12], al
  0026a	8a 42 0d	 mov	 al, BYTE PTR [edx+13]
  0026d	3a c1		 cmp	 al, cl
  0026f	0f 84 ac 00 00
	00		 je	 $LN83@LoadInt_e
  00275	34 ec		 xor	 al, -20			; ffffffecH
  00277	88 45 e1	 mov	 BYTE PTR __k$[ebp+13], al
  0027a	8a 42 0e	 mov	 al, BYTE PTR [edx+14]
  0027d	3a c1		 cmp	 al, cl
  0027f	0f 84 96 00 00
	00		 je	 $LN82@LoadInt_e
  00285	34 eb		 xor	 al, -21			; ffffffebH
  00287	88 45 e2	 mov	 BYTE PTR __k$[ebp+14], al
  0028a	8a 42 0f	 mov	 al, BYTE PTR [edx+15]
  0028d	3a c1		 cmp	 al, cl
  0028f	0f 84 80 00 00
	00		 je	 $LN81@LoadInt_e
  00295	34 ea		 xor	 al, -22			; ffffffeaH
  00297	88 45 e3	 mov	 BYTE PTR __k$[ebp+15], al
  0029a	8a 42 10	 mov	 al, BYTE PTR [edx+16]
  0029d	3a c1		 cmp	 al, cl
  0029f	74 6e		 je	 SHORT $LN80@LoadInt_e
  002a1	34 ed		 xor	 al, -19			; ffffffedH
  002a3	88 45 e4	 mov	 BYTE PTR __k$[ebp+16], al
  002a6	8a 42 11	 mov	 al, BYTE PTR [edx+17]
  002a9	3a c1		 cmp	 al, cl
  002ab	74 5c		 je	 SHORT $LN79@LoadInt_e
  002ad	34 ec		 xor	 al, -20			; ffffffecH
  002af	88 45 e5	 mov	 BYTE PTR __k$[ebp+17], al
  002b2	38 4a 12	 cmp	 BYTE PTR [edx+18], cl
  002b5	0f 84 b8 00 00
	00		 je	 $LN1@LoadInt_e
  002bb	8a 42 13	 mov	 al, BYTE PTR [edx+19]
  002be	3a c1		 cmp	 al, cl
  002c0	74 41		 je	 SHORT $LN77@LoadInt_e
  002c2	34 ea		 xor	 al, -22			; ffffffeaH
  002c4	88 45 e7	 mov	 BYTE PTR __k$[ebp+19], al
  002c7	8a 42 14	 mov	 al, BYTE PTR [edx+20]
  002ca	3a c1		 cmp	 al, cl
  002cc	74 2f		 je	 SHORT $LN76@LoadInt_e
  002ce	34 ed		 xor	 al, -19			; ffffffedH
  002d0	88 45 e8	 mov	 BYTE PTR __k$[ebp+20], al
  002d3	8a 42 15	 mov	 al, BYTE PTR [edx+21]
  002d6	3a c1		 cmp	 al, cl
  002d8	74 1d		 je	 SHORT $LN75@LoadInt_e
  002da	8a 52 16	 mov	 dl, BYTE PTR [edx+22]
  002dd	34 ec		 xor	 al, -20			; ffffffecH
  002df	88 45 e9	 mov	 BYTE PTR __k$[ebp+21], al
  002e2	3a d1		 cmp	 dl, cl
  002e4	74 0b		 je	 SHORT $LN74@LoadInt_e
  002e6	80 f2 eb	 xor	 dl, -21			; ffffffebH
  002e9	88 55 ea	 mov	 BYTE PTR __k$[ebp+22], dl
  002ec	e9 82 00 00 00	 jmp	 $LN1@LoadInt_e
$LN74@LoadInt_e:
  002f1	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  002f5	eb 7c		 jmp	 SHORT $LN1@LoadInt_e
$LN75@LoadInt_e:
  002f7	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  002fb	eb 76		 jmp	 SHORT $LN1@LoadInt_e
$LN76@LoadInt_e:
  002fd	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00301	eb 70		 jmp	 SHORT $LN1@LoadInt_e
$LN77@LoadInt_e:
  00303	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00307	eb 6a		 jmp	 SHORT $LN1@LoadInt_e
$LN79@LoadInt_e:
  00309	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0030d	eb 64		 jmp	 SHORT $LN1@LoadInt_e
$LN80@LoadInt_e:
  0030f	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00313	eb 5e		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  00315	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00319	eb 58		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  0031b	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0031f	eb 52		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  00321	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00325	eb 4c		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  00327	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0032b	eb 46		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  0032d	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00331	eb 40		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  00333	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00337	eb 3a		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  00339	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0033d	eb 34		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  0033f	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00343	eb 2e		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  00345	c6 45 db ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00349	eb 28		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  0034b	c6 45 da eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0034f	eb 22		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  00351	c6 45 d9 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00355	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  00357	c6 45 d8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0035b	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  0035d	c6 45 d7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00361	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  00363	c6 45 d6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00367	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  00369	c6 45 d5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0036d	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  0036f	c6 45 d4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  00373	6a 04		 push	 4
  00375	8d 45 d4	 lea	 eax, DWORD PTR __k$[ebp]
  00378	88 4d e6	 mov	 BYTE PTR __k$[ebp+18], cl
  0037b	5a		 pop	 edx
$LL208@LoadInt_e:
  0037c	31 38		 xor	 DWORD PTR [eax], edi
  0037e	83 c0 04	 add	 eax, 4
  00381	4a		 dec	 edx
  00382	75 f8		 jne	 SHORT $LL208@LoadInt_e
  00384	6a 10		 push	 16			; 00000010H
  00386	58		 pop	 eax
  00387	5f		 pop	 edi
  00388	5e		 pop	 esi
  00389	5b		 pop	 ebx
$LL205@LoadInt_e:
  0038a	8b c8		 mov	 ecx, eax
  0038c	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00392	79 05		 jns	 SHORT $LN220@LoadInt_e
  00394	49		 dec	 ecx
  00395	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00398	41		 inc	 ecx
$LN220@LoadInt_e:
  00399	b2 ed		 mov	 dl, -19			; ffffffedH
  0039b	2a d1		 sub	 dl, cl
  0039d	30 54 05 d4	 xor	 BYTE PTR __k$[ebp+eax], dl
  003a1	40		 inc	 eax
  003a2	83 f8 12	 cmp	 eax, 18			; 00000012H
  003a5	7c e3		 jl	 SHORT $LL205@LoadInt_e

; 129  : 		return LoadInt(_t, _k, i);

  003a7	ff 75 10	 push	 DWORD PTR _i$[ebp]
  003aa	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  003ad	8d 45 d4	 lea	 eax, DWORD PTR __k$[ebp]
  003b0	50		 push	 eax
  003b1	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  003b4	50		 push	 eax
  003b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBD0H@Z

; 130  : 	}

  003bb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003be	33 cd		 xor	 ecx, ebp
  003c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003c5	c9		 leave
  003c6	c2 0c 00	 ret	 12			; 0000000cH
??$LoadInt_e@$0M@$0BD@@ioINILoader@@QAEHAAY0M@$$CBDAAY0BD@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<12,19>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BG@@ioINILoader@@QAEHAAY0BG@$$CBDH@Z ; ioINILoader::LoadInt_e<22>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BG@@ioINILoader@@QAEHAAY0BG@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -32						; size = 22
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BG@@ioINILoader@@QAEHAAY0BG@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<22>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 15 02 00
	00		 je	 $LN96@LoadInt_e@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 fe 01 00
	00		 je	 $LN95@LoadInt_e@2
  00032	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00035	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 e7 01 00
	00		 je	 $LN94@LoadInt_e@2
  00043	b1 eb		 mov	 cl, -21			; ffffffebH
  00045	32 d1		 xor	 dl, cl
  00047	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 cf 01 00
	00		 je	 $LN93@LoadInt_e@2
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 b7 01 00
	00		 je	 $LN92@LoadInt_e@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 a0 01 00
	00		 je	 $LN91@LoadInt_e@2
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 8a 01 00
	00		 je	 $LN90@LoadInt_e@2
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 75 01 00
	00		 je	 $LN89@LoadInt_e@2
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 5f 01 00
	00		 je	 $LN88@LoadInt_e@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 48 01 00
	00		 je	 $LN87@LoadInt_e@2
  000ba	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bd	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	0f 84 32 01 00
	00		 je	 $LN86@LoadInt_e@2
  000cb	32 d1		 xor	 dl, cl
  000cd	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 1d 01 00
	00		 je	 $LN85@LoadInt_e@2
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 07 01 00
	00		 je	 $LN84@LoadInt_e@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 f0 00 00
	00		 je	 $LN83@LoadInt_e@2
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 da 00 00
	00		 je	 $LN82@LoadInt_e@2
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 c5 00 00
	00		 je	 $LN81@LoadInt_e@2
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 af 00 00
	00		 je	 $LN80@LoadInt_e@2
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 98 00 00
	00		 je	 $LN79@LoadInt_e@2
  0013e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00141	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00147	84 d2		 test	 dl, dl
  00149	0f 84 82 00 00
	00		 je	 $LN78@LoadInt_e@2
  0014f	32 d1		 xor	 dl, cl
  00151	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	74 71		 je	 SHORT $LN77@LoadInt_e@2
  0015b	32 d3		 xor	 dl, bl
  0015d	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00160	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00163	84 d2		 test	 dl, dl
  00165	74 5f		 je	 SHORT $LN76@LoadInt_e@2
  00167	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016a	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0016e	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00171	0f 84 c3 00 00
	00		 je	 $LN1@LoadInt_e@2
  00177	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0017a	84 d2		 test	 dl, dl
  0017c	74 43		 je	 SHORT $LN74@LoadInt_e@2
  0017e	32 d1		 xor	 dl, cl
  00180	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00183	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00186	84 d2		 test	 dl, dl
  00188	74 32		 je	 SHORT $LN73@LoadInt_e@2
  0018a	32 d3		 xor	 dl, bl
  0018c	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  0018f	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  00192	84 d2		 test	 dl, dl
  00194	74 20		 je	 SHORT $LN72@LoadInt_e@2
  00196	8a 40 19	 mov	 al, BYTE PTR [eax+25]
  00199	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0019c	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  0019f	84 c0		 test	 al, al
  001a1	74 0a		 je	 SHORT $LN71@LoadInt_e@2
  001a3	34 ec		 xor	 al, -20			; ffffffecH
  001a5	88 45 f9	 mov	 BYTE PTR __k$[ebp+25], al
  001a8	e9 8d 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN71@LoadInt_e@2:
  001ad	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+25], -20 ; ffffffecH
  001b1	e9 84 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN72@LoadInt_e@2:
  001b6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ba	eb 7e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN73@LoadInt_e@2:
  001bc	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001bf	eb 79		 jmp	 SHORT $LN1@LoadInt_e@2
$LN74@LoadInt_e@2:
  001c1	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001c4	eb 74		 jmp	 SHORT $LN1@LoadInt_e@2
$LN76@LoadInt_e@2:
  001c6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001ca	eb 6e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN77@LoadInt_e@2:
  001cc	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001cf	eb 69		 jmp	 SHORT $LN1@LoadInt_e@2
$LN78@LoadInt_e@2:
  001d1	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  001d4	eb 64		 jmp	 SHORT $LN1@LoadInt_e@2
$LN79@LoadInt_e@2:
  001d6	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  001da	eb 5e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN80@LoadInt_e@2:
  001dc	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001e0	eb 58		 jmp	 SHORT $LN1@LoadInt_e@2
$LN81@LoadInt_e@2:
  001e2	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001e5	eb 53		 jmp	 SHORT $LN1@LoadInt_e@2
$LN82@LoadInt_e@2:
  001e7	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  001ea	eb 4e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN83@LoadInt_e@2:
  001ec	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  001f0	eb 48		 jmp	 SHORT $LN1@LoadInt_e@2
$LN84@LoadInt_e@2:
  001f2	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001f6	eb 42		 jmp	 SHORT $LN1@LoadInt_e@2
$LN85@LoadInt_e@2:
  001f8	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  001fb	eb 3d		 jmp	 SHORT $LN1@LoadInt_e@2
$LN86@LoadInt_e@2:
  001fd	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00200	eb 38		 jmp	 SHORT $LN1@LoadInt_e@2
$LN87@LoadInt_e@2:
  00202	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00206	eb 32		 jmp	 SHORT $LN1@LoadInt_e@2
$LN88@LoadInt_e@2:
  00208	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0020c	eb 2c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN89@LoadInt_e@2:
  0020e	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00211	eb 27		 jmp	 SHORT $LN1@LoadInt_e@2
$LN90@LoadInt_e@2:
  00213	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00216	eb 22		 jmp	 SHORT $LN1@LoadInt_e@2
$LN91@LoadInt_e@2:
  00218	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0021c	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN92@LoadInt_e@2:
  0021e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00222	eb 16		 jmp	 SHORT $LN1@LoadInt_e@2
$LN93@LoadInt_e@2:
  00224	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00228	eb 10		 jmp	 SHORT $LN1@LoadInt_e@2
$LN94@LoadInt_e@2:
  0022a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0022e	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN95@LoadInt_e@2:
  00230	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00234	eb 04		 jmp	 SHORT $LN1@LoadInt_e@2
$LN96@LoadInt_e@2:
  00236	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@2:
  0023a	6a 05		 push	 5
  0023c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0023f	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+21], 0
  00243	5a		 pop	 edx
$LL104@LoadInt_e@2:
  00244	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0024a	83 c0 04	 add	 eax, 4
  0024d	4a		 dec	 edx
  0024e	75 f4		 jne	 SHORT $LL104@LoadInt_e@2

; 120  : 		return LoadInt(_k, i);

  00250	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00253	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00257	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0025a	50		 push	 eax
  0025b	8b ce		 mov	 ecx, esi
  0025d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00263	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00266	5e		 pop	 esi
  00267	33 cd		 xor	 ecx, ebp
  00269	5b		 pop	 ebx
  0026a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0026f	c9		 leave
  00270	c2 08 00	 ret	 8
??$LoadInt_e@$0BG@@ioINILoader@@QAEHAAY0BG@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<22>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z ; ioINILoader::LoadFloat_e<11>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -20						; size = 11
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<11>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 24 01 00
	00		 je	 $LN96@LoadFloat_
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 0d 01 00
	00		 je	 $LN95@LoadFloat_
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 f6 00 00
	00		 je	 $LN94@LoadFloat_
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 df 00 00
	00		 je	 $LN93@LoadFloat_
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 c8 00 00
	00		 je	 $LN92@LoadFloat_
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	0f 84 b1 00 00
	00		 je	 $LN91@LoadFloat_
  00075	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00078	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 9a 00 00
	00		 je	 $LN90@LoadFloat_
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 83 00 00
	00		 je	 $LN89@LoadFloat_
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	74 70		 je	 SHORT $LN88@LoadFloat_
  000a4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a7	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000aa	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ad	84 d2		 test	 dl, dl
  000af	74 5d		 je	 SHORT $LN87@LoadFloat_
  000b1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b4	80 78 0a 00	 cmp	 BYTE PTR [eax+10], 0
  000b8	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bb	0f 84 87 00 00
	00		 je	 $LN1@LoadFloat_
  000c1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c4	84 d2		 test	 dl, dl
  000c6	74 40		 je	 SHORT $LN85@LoadFloat_
  000c8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000cb	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000ce	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d1	84 d2		 test	 dl, dl
  000d3	74 2d		 je	 SHORT $LN84@LoadFloat_
  000d5	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d8	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000db	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000de	84 d2		 test	 dl, dl
  000e0	74 1a		 je	 SHORT $LN83@LoadFloat_
  000e2	8a 40 0e	 mov	 al, BYTE PTR [eax+14]
  000e5	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e8	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000eb	84 c0		 test	 al, al
  000ed	74 07		 je	 SHORT $LN82@LoadFloat_
  000ef	34 eb		 xor	 al, -21			; ffffffebH
  000f1	88 45 fa	 mov	 BYTE PTR __k$[ebp+14], al
  000f4	eb 52		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  000f6	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  000fa	eb 4c		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  000fc	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00100	eb 46		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  00102	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00106	eb 40		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  00108	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0010c	eb 3a		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  0010e	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00112	eb 34		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  00114	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00118	eb 2e		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  0011a	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0011e	eb 28		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  00120	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00124	eb 22		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  00126	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0012a	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  0012c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00130	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  00132	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00136	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  00138	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0013c	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  0013e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00142	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  00144	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  00148	6a 02		 push	 2
  0014a	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014d	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+10], 0
  00151	5a		 pop	 edx
$LL104@LoadFloat_:
  00152	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00158	83 c0 04	 add	 eax, 4
  0015b	4a		 dec	 edx
  0015c	75 f4		 jne	 SHORT $LL104@LoadFloat_
  0015e	6a 08		 push	 8
  00160	58		 pop	 eax
$LL101@LoadFloat_:
  00161	8b c8		 mov	 ecx, eax
  00163	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00169	79 05		 jns	 SHORT $LN111@LoadFloat_
  0016b	49		 dec	 ecx
  0016c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0016f	41		 inc	 ecx
$LN111@LoadFloat_:
  00170	b2 ed		 mov	 dl, -19			; ffffffedH
  00172	2a d1		 sub	 dl, cl
  00174	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  00178	40		 inc	 eax
  00179	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0017c	7c e3		 jl	 SHORT $LL101@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  0017e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00183	51		 push	 ecx
  00184	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00187	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018c	50		 push	 eax
  0018d	8b ce		 mov	 ecx, esi
  0018f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00195	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00198	33 cd		 xor	 ecx, ebp
  0019a	5e		 pop	 esi
  0019b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a0	c9		 leave
  001a1	c2 08 00	 ret	 8
??$LoadFloat_e@$0L@@ioINILoader@@QAEMAAY0L@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<11>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z ; ioINILoader::LoadFloat_e<15>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<15>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 75 01 00
	00		 je	 $LN96@LoadFloat_@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 5e 01 00
	00		 je	 $LN95@LoadFloat_@2
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 46 01 00
	00		 je	 $LN94@LoadFloat_@2
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 2f 01 00
	00		 je	 $LN93@LoadFloat_@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 18 01 00
	00		 je	 $LN92@LoadFloat_@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 02 01 00
	00		 je	 $LN91@LoadFloat_@2
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 ec 00 00
	00		 je	 $LN90@LoadFloat_@2
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 d5 00 00
	00		 je	 $LN89@LoadFloat_@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 be 00 00
	00		 je	 $LN88@LoadFloat_@2
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 a8 00 00
	00		 je	 $LN87@LoadFloat_@2
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 92 00 00
	00		 je	 $LN86@LoadFloat_@2
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 7f		 je	 SHORT $LN85@LoadFloat_@2
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 6c		 je	 SHORT $LN84@LoadFloat_@2
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000e9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000ec	84 d2		 test	 dl, dl
  000ee	74 5a		 je	 SHORT $LN83@LoadFloat_@2
  000f0	32 d1		 xor	 dl, cl
  000f2	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000f6	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000f9	0f 84 9a 00 00
	00		 je	 $LN1@LoadFloat_@2
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 3e		 je	 SHORT $LN81@LoadFloat_@2
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 2b		 je	 SHORT $LN80@LoadFloat_@2
  00113	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00116	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00119	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0011c	84 d2		 test	 dl, dl
  0011e	74 19		 je	 SHORT $LN79@LoadFloat_@2
  00120	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  00123	32 d1		 xor	 dl, cl
  00125	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00128	84 c0		 test	 al, al
  0012a	74 07		 je	 SHORT $LN78@LoadFloat_@2
  0012c	34 eb		 xor	 al, -21			; ffffffebH
  0012e	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00131	eb 66		 jmp	 SHORT $LN1@LoadFloat_@2
$LN78@LoadFloat_@2:
  00133	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00137	eb 60		 jmp	 SHORT $LN1@LoadFloat_@2
$LN79@LoadFloat_@2:
  00139	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  0013c	eb 5b		 jmp	 SHORT $LN1@LoadFloat_@2
$LN80@LoadFloat_@2:
  0013e	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00142	eb 55		 jmp	 SHORT $LN1@LoadFloat_@2
$LN81@LoadFloat_@2:
  00144	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00148	eb 4f		 jmp	 SHORT $LN1@LoadFloat_@2
$LN83@LoadFloat_@2:
  0014a	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0014d	eb 4a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN84@LoadFloat_@2:
  0014f	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00153	eb 44		 jmp	 SHORT $LN1@LoadFloat_@2
$LN85@LoadFloat_@2:
  00155	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00159	eb 3e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN86@LoadFloat_@2:
  0015b	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0015f	eb 38		 jmp	 SHORT $LN1@LoadFloat_@2
$LN87@LoadFloat_@2:
  00161	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  00164	eb 33		 jmp	 SHORT $LN1@LoadFloat_@2
$LN88@LoadFloat_@2:
  00166	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0016a	eb 2d		 jmp	 SHORT $LN1@LoadFloat_@2
$LN89@LoadFloat_@2:
  0016c	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00170	eb 27		 jmp	 SHORT $LN1@LoadFloat_@2
$LN90@LoadFloat_@2:
  00172	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00176	eb 21		 jmp	 SHORT $LN1@LoadFloat_@2
$LN91@LoadFloat_@2:
  00178	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  0017b	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN92@LoadFloat_@2:
  0017d	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00181	eb 16		 jmp	 SHORT $LN1@LoadFloat_@2
$LN93@LoadFloat_@2:
  00183	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00187	eb 10		 jmp	 SHORT $LN1@LoadFloat_@2
$LN94@LoadFloat_@2:
  00189	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0018d	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN95@LoadFloat_@2:
  0018f	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00193	eb 04		 jmp	 SHORT $LN1@LoadFloat_@2
$LN96@LoadFloat_@2:
  00195	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@2:
  00199	6a 03		 push	 3
  0019b	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0019e	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001a2	5a		 pop	 edx
$LL104@LoadFloat_@2:
  001a3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a9	83 c0 04	 add	 eax, 4
  001ac	4a		 dec	 edx
  001ad	75 f4		 jne	 SHORT $LL104@LoadFloat_@2
  001af	6a 0c		 push	 12			; 0000000cH
  001b1	58		 pop	 eax
$LL101@LoadFloat_@2:
  001b2	8b c8		 mov	 ecx, eax
  001b4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001ba	79 05		 jns	 SHORT $LN111@LoadFloat_@2
  001bc	49		 dec	 ecx
  001bd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c0	41		 inc	 ecx
$LN111@LoadFloat_@2:
  001c1	b2 ed		 mov	 dl, -19			; ffffffedH
  001c3	2a d1		 sub	 dl, cl
  001c5	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001c9	40		 inc	 eax
  001ca	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001cd	7c e3		 jl	 SHORT $LL101@LoadFloat_@2

; 137  : 		return LoadFloat(_k, f);

  001cf	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001d4	51		 push	 ecx
  001d5	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001dd	50		 push	 eax
  001de	8b ce		 mov	 ecx, esi
  001e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001e6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e9	33 cd		 xor	 ecx, ebp
  001eb	5e		 pop	 esi
  001ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f1	c9		 leave
  001f2	c2 08 00	 ret	 8
??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<15>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z ; ioINILoader::LoadFloat_e<17>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 17
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<17>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 a7 01 00
	00		 je	 $LN96@LoadFloat_@3
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 90 01 00
	00		 je	 $LN95@LoadFloat_@3
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 78 01 00
	00		 je	 $LN94@LoadFloat_@3
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 61 01 00
	00		 je	 $LN93@LoadFloat_@3
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 4a 01 00
	00		 je	 $LN92@LoadFloat_@3
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 34 01 00
	00		 je	 $LN91@LoadFloat_@3
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 1e 01 00
	00		 je	 $LN90@LoadFloat_@3
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 07 01 00
	00		 je	 $LN89@LoadFloat_@3
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 f0 00 00
	00		 je	 $LN88@LoadFloat_@3
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 da 00 00
	00		 je	 $LN87@LoadFloat_@3
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 c4 00 00
	00		 je	 $LN86@LoadFloat_@3
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 ad 00 00
	00		 je	 $LN85@LoadFloat_@3
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 96 00 00
	00		 je	 $LN84@LoadFloat_@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 80 00 00
	00		 je	 $LN83@LoadFloat_@3
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	74 6e		 je	 SHORT $LN82@LoadFloat_@3
  00108	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010b	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0010e	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00111	84 d2		 test	 dl, dl
  00113	74 5b		 je	 SHORT $LN81@LoadFloat_@3
  00115	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00118	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	0f 84 a6 00 00
	00		 je	 $LN1@LoadFloat_@3
  00125	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00128	84 d2		 test	 dl, dl
  0012a	74 3f		 je	 SHORT $LN79@LoadFloat_@3
  0012c	32 d1		 xor	 dl, cl
  0012e	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00131	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00134	84 d2		 test	 dl, dl
  00136	74 2d		 je	 SHORT $LN78@LoadFloat_@3
  00138	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0013b	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0013e	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00141	84 d2		 test	 dl, dl
  00143	74 1a		 je	 SHORT $LN77@LoadFloat_@3
  00145	8a 40 14	 mov	 al, BYTE PTR [eax+20]
  00148	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014b	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014e	84 c0		 test	 al, al
  00150	74 07		 je	 SHORT $LN76@LoadFloat_@3
  00152	34 ed		 xor	 al, -19			; ffffffedH
  00154	88 45 f8	 mov	 BYTE PTR __k$[ebp+20], al
  00157	eb 72		 jmp	 SHORT $LN1@LoadFloat_@3
$LN76@LoadFloat_@3:
  00159	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0015d	eb 6c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN77@LoadFloat_@3:
  0015f	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00163	eb 66		 jmp	 SHORT $LN1@LoadFloat_@3
$LN78@LoadFloat_@3:
  00165	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00169	eb 60		 jmp	 SHORT $LN1@LoadFloat_@3
$LN79@LoadFloat_@3:
  0016b	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  0016e	eb 5b		 jmp	 SHORT $LN1@LoadFloat_@3
$LN81@LoadFloat_@3:
  00170	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00174	eb 55		 jmp	 SHORT $LN1@LoadFloat_@3
$LN82@LoadFloat_@3:
  00176	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0017a	eb 4f		 jmp	 SHORT $LN1@LoadFloat_@3
$LN83@LoadFloat_@3:
  0017c	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  0017f	eb 4a		 jmp	 SHORT $LN1@LoadFloat_@3
$LN84@LoadFloat_@3:
  00181	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00185	eb 44		 jmp	 SHORT $LN1@LoadFloat_@3
$LN85@LoadFloat_@3:
  00187	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0018b	eb 3e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN86@LoadFloat_@3:
  0018d	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00191	eb 38		 jmp	 SHORT $LN1@LoadFloat_@3
$LN87@LoadFloat_@3:
  00193	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  00196	eb 33		 jmp	 SHORT $LN1@LoadFloat_@3
$LN88@LoadFloat_@3:
  00198	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0019c	eb 2d		 jmp	 SHORT $LN1@LoadFloat_@3
$LN89@LoadFloat_@3:
  0019e	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001a2	eb 27		 jmp	 SHORT $LN1@LoadFloat_@3
$LN90@LoadFloat_@3:
  001a4	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001a8	eb 21		 jmp	 SHORT $LN1@LoadFloat_@3
$LN91@LoadFloat_@3:
  001aa	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001ad	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN92@LoadFloat_@3:
  001af	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001b3	eb 16		 jmp	 SHORT $LN1@LoadFloat_@3
$LN93@LoadFloat_@3:
  001b5	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001b9	eb 10		 jmp	 SHORT $LN1@LoadFloat_@3
$LN94@LoadFloat_@3:
  001bb	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001bf	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@3
$LN95@LoadFloat_@3:
  001c1	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001c5	eb 04		 jmp	 SHORT $LN1@LoadFloat_@3
$LN96@LoadFloat_@3:
  001c7	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@3:
  001cb	6a 04		 push	 4
  001cd	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001d0	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+16], 0
  001d4	5a		 pop	 edx
$LL104@LoadFloat_@3:
  001d5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001db	83 c0 04	 add	 eax, 4
  001de	4a		 dec	 edx
  001df	75 f4		 jne	 SHORT $LL104@LoadFloat_@3

; 137  : 		return LoadFloat(_k, f);

  001e1	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001e6	51		 push	 ecx
  001e7	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ef	50		 push	 eax
  001f0	8b ce		 mov	 ecx, esi
  001f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fb	33 cd		 xor	 ecx, ebp
  001fd	5e		 pop	 esi
  001fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00203	c9		 leave
  00204	c2 08 00	 ret	 8
??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<17>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BB@@ioINILoader@@QAEHAAY0BB@$$CBDH@Z ; ioINILoader::LoadInt_e<17>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BB@@ioINILoader@@QAEHAAY0BB@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -28						; size = 17
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BB@@ioINILoader@@QAEHAAY0BB@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<17>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 a7 01 00
	00		 je	 $LN96@LoadInt_e@3
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 90 01 00
	00		 je	 $LN95@LoadInt_e@3
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 78 01 00
	00		 je	 $LN94@LoadInt_e@3
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 61 01 00
	00		 je	 $LN93@LoadInt_e@3
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 4a 01 00
	00		 je	 $LN92@LoadInt_e@3
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 34 01 00
	00		 je	 $LN91@LoadInt_e@3
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 1e 01 00
	00		 je	 $LN90@LoadInt_e@3
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 07 01 00
	00		 je	 $LN89@LoadInt_e@3
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 f0 00 00
	00		 je	 $LN88@LoadInt_e@3
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 da 00 00
	00		 je	 $LN87@LoadInt_e@3
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 c4 00 00
	00		 je	 $LN86@LoadInt_e@3
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 ad 00 00
	00		 je	 $LN85@LoadInt_e@3
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 96 00 00
	00		 je	 $LN84@LoadInt_e@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 80 00 00
	00		 je	 $LN83@LoadInt_e@3
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	74 6e		 je	 SHORT $LN82@LoadInt_e@3
  00108	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010b	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0010e	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00111	84 d2		 test	 dl, dl
  00113	74 5b		 je	 SHORT $LN81@LoadInt_e@3
  00115	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00118	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	0f 84 a6 00 00
	00		 je	 $LN1@LoadInt_e@3
  00125	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00128	84 d2		 test	 dl, dl
  0012a	74 3f		 je	 SHORT $LN79@LoadInt_e@3
  0012c	32 d1		 xor	 dl, cl
  0012e	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00131	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00134	84 d2		 test	 dl, dl
  00136	74 2d		 je	 SHORT $LN78@LoadInt_e@3
  00138	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0013b	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0013e	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00141	84 d2		 test	 dl, dl
  00143	74 1a		 je	 SHORT $LN77@LoadInt_e@3
  00145	8a 40 14	 mov	 al, BYTE PTR [eax+20]
  00148	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014b	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014e	84 c0		 test	 al, al
  00150	74 07		 je	 SHORT $LN76@LoadInt_e@3
  00152	34 ed		 xor	 al, -19			; ffffffedH
  00154	88 45 f8	 mov	 BYTE PTR __k$[ebp+20], al
  00157	eb 72		 jmp	 SHORT $LN1@LoadInt_e@3
$LN76@LoadInt_e@3:
  00159	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0015d	eb 6c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN77@LoadInt_e@3:
  0015f	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00163	eb 66		 jmp	 SHORT $LN1@LoadInt_e@3
$LN78@LoadInt_e@3:
  00165	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00169	eb 60		 jmp	 SHORT $LN1@LoadInt_e@3
$LN79@LoadInt_e@3:
  0016b	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  0016e	eb 5b		 jmp	 SHORT $LN1@LoadInt_e@3
$LN81@LoadInt_e@3:
  00170	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00174	eb 55		 jmp	 SHORT $LN1@LoadInt_e@3
$LN82@LoadInt_e@3:
  00176	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0017a	eb 4f		 jmp	 SHORT $LN1@LoadInt_e@3
$LN83@LoadInt_e@3:
  0017c	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  0017f	eb 4a		 jmp	 SHORT $LN1@LoadInt_e@3
$LN84@LoadInt_e@3:
  00181	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00185	eb 44		 jmp	 SHORT $LN1@LoadInt_e@3
$LN85@LoadInt_e@3:
  00187	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0018b	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN86@LoadInt_e@3:
  0018d	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00191	eb 38		 jmp	 SHORT $LN1@LoadInt_e@3
$LN87@LoadInt_e@3:
  00193	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  00196	eb 33		 jmp	 SHORT $LN1@LoadInt_e@3
$LN88@LoadInt_e@3:
  00198	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0019c	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@3
$LN89@LoadInt_e@3:
  0019e	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001a2	eb 27		 jmp	 SHORT $LN1@LoadInt_e@3
$LN90@LoadInt_e@3:
  001a4	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001a8	eb 21		 jmp	 SHORT $LN1@LoadInt_e@3
$LN91@LoadInt_e@3:
  001aa	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001ad	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN92@LoadInt_e@3:
  001af	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001b3	eb 16		 jmp	 SHORT $LN1@LoadInt_e@3
$LN93@LoadInt_e@3:
  001b5	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001b9	eb 10		 jmp	 SHORT $LN1@LoadInt_e@3
$LN94@LoadInt_e@3:
  001bb	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001bf	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@3
$LN95@LoadInt_e@3:
  001c1	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001c5	eb 04		 jmp	 SHORT $LN1@LoadInt_e@3
$LN96@LoadInt_e@3:
  001c7	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@3:
  001cb	6a 04		 push	 4
  001cd	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001d0	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+16], 0
  001d4	5a		 pop	 edx
$LL104@LoadInt_e@3:
  001d5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001db	83 c0 04	 add	 eax, 4
  001de	4a		 dec	 edx
  001df	75 f4		 jne	 SHORT $LL104@LoadInt_e@3

; 120  : 		return LoadInt(_k, i);

  001e1	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001e4	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001e7	50		 push	 eax
  001e8	8b ce		 mov	 ecx, esi
  001ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  001f0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f3	33 cd		 xor	 ecx, ebp
  001f5	5e		 pop	 esi
  001f6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fb	c9		 leave
  001fc	c2 08 00	 ret	 8
??$LoadInt_e@$0BB@@ioINILoader@@QAEHAAY0BB@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<17>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0P@@ioINILoader@@QAEHAAY0P@$$CBDH@Z ; ioINILoader::LoadInt_e<15>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0P@@ioINILoader@@QAEHAAY0P@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0P@@ioINILoader@@QAEHAAY0P@$$CBDH@Z PROC	; ioINILoader::LoadInt_e<15>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 75 01 00
	00		 je	 $LN96@LoadInt_e@4
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 5e 01 00
	00		 je	 $LN95@LoadInt_e@4
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 46 01 00
	00		 je	 $LN94@LoadInt_e@4
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 2f 01 00
	00		 je	 $LN93@LoadInt_e@4
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 18 01 00
	00		 je	 $LN92@LoadInt_e@4
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 02 01 00
	00		 je	 $LN91@LoadInt_e@4
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 ec 00 00
	00		 je	 $LN90@LoadInt_e@4
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 d5 00 00
	00		 je	 $LN89@LoadInt_e@4
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 be 00 00
	00		 je	 $LN88@LoadInt_e@4
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 a8 00 00
	00		 je	 $LN87@LoadInt_e@4
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 92 00 00
	00		 je	 $LN86@LoadInt_e@4
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 7f		 je	 SHORT $LN85@LoadInt_e@4
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 6c		 je	 SHORT $LN84@LoadInt_e@4
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000e9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000ec	84 d2		 test	 dl, dl
  000ee	74 5a		 je	 SHORT $LN83@LoadInt_e@4
  000f0	32 d1		 xor	 dl, cl
  000f2	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000f6	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000f9	0f 84 9a 00 00
	00		 je	 $LN1@LoadInt_e@4
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 3e		 je	 SHORT $LN81@LoadInt_e@4
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 2b		 je	 SHORT $LN80@LoadInt_e@4
  00113	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00116	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00119	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0011c	84 d2		 test	 dl, dl
  0011e	74 19		 je	 SHORT $LN79@LoadInt_e@4
  00120	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  00123	32 d1		 xor	 dl, cl
  00125	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00128	84 c0		 test	 al, al
  0012a	74 07		 je	 SHORT $LN78@LoadInt_e@4
  0012c	34 eb		 xor	 al, -21			; ffffffebH
  0012e	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00131	eb 66		 jmp	 SHORT $LN1@LoadInt_e@4
$LN78@LoadInt_e@4:
  00133	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00137	eb 60		 jmp	 SHORT $LN1@LoadInt_e@4
$LN79@LoadInt_e@4:
  00139	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  0013c	eb 5b		 jmp	 SHORT $LN1@LoadInt_e@4
$LN80@LoadInt_e@4:
  0013e	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00142	eb 55		 jmp	 SHORT $LN1@LoadInt_e@4
$LN81@LoadInt_e@4:
  00144	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00148	eb 4f		 jmp	 SHORT $LN1@LoadInt_e@4
$LN83@LoadInt_e@4:
  0014a	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0014d	eb 4a		 jmp	 SHORT $LN1@LoadInt_e@4
$LN84@LoadInt_e@4:
  0014f	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00153	eb 44		 jmp	 SHORT $LN1@LoadInt_e@4
$LN85@LoadInt_e@4:
  00155	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00159	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@4
$LN86@LoadInt_e@4:
  0015b	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0015f	eb 38		 jmp	 SHORT $LN1@LoadInt_e@4
$LN87@LoadInt_e@4:
  00161	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  00164	eb 33		 jmp	 SHORT $LN1@LoadInt_e@4
$LN88@LoadInt_e@4:
  00166	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0016a	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@4
$LN89@LoadInt_e@4:
  0016c	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00170	eb 27		 jmp	 SHORT $LN1@LoadInt_e@4
$LN90@LoadInt_e@4:
  00172	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00176	eb 21		 jmp	 SHORT $LN1@LoadInt_e@4
$LN91@LoadInt_e@4:
  00178	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  0017b	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@4
$LN92@LoadInt_e@4:
  0017d	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00181	eb 16		 jmp	 SHORT $LN1@LoadInt_e@4
$LN93@LoadInt_e@4:
  00183	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00187	eb 10		 jmp	 SHORT $LN1@LoadInt_e@4
$LN94@LoadInt_e@4:
  00189	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0018d	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@4
$LN95@LoadInt_e@4:
  0018f	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00193	eb 04		 jmp	 SHORT $LN1@LoadInt_e@4
$LN96@LoadInt_e@4:
  00195	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@4:
  00199	6a 03		 push	 3
  0019b	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0019e	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001a2	5a		 pop	 edx
$LL104@LoadInt_e@4:
  001a3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a9	83 c0 04	 add	 eax, 4
  001ac	4a		 dec	 edx
  001ad	75 f4		 jne	 SHORT $LL104@LoadInt_e@4
  001af	6a 0c		 push	 12			; 0000000cH
  001b1	58		 pop	 eax
$LL101@LoadInt_e@4:
  001b2	8b c8		 mov	 ecx, eax
  001b4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001ba	79 05		 jns	 SHORT $LN111@LoadInt_e@4
  001bc	49		 dec	 ecx
  001bd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c0	41		 inc	 ecx
$LN111@LoadInt_e@4:
  001c1	b2 ed		 mov	 dl, -19			; ffffffedH
  001c3	2a d1		 sub	 dl, cl
  001c5	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001c9	40		 inc	 eax
  001ca	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001cd	7c e3		 jl	 SHORT $LL101@LoadInt_e@4

; 120  : 		return LoadInt(_k, i);

  001cf	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001d2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001d5	50		 push	 eax
  001d6	8b ce		 mov	 ecx, esi
  001d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  001de	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e1	33 cd		 xor	 ecx, ebp
  001e3	5e		 pop	 esi
  001e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e9	c9		 leave
  001ea	c2 08 00	 ret	 8
??$LoadInt_e@$0P@@ioINILoader@@QAEHAAY0P@$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<15>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0M@@ioINILoader@@QAEMAAY0M@$$CBDM@Z ; ioINILoader::LoadFloat_e<12>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0M@@ioINILoader@@QAEMAAY0M@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0M@@ioINILoader@@QAEMAAY0M@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<12>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 32 01 00
	00		 je	 $LN96@LoadFloat_@4
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 1b 01 00
	00		 je	 $LN95@LoadFloat_@4
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 04 01 00
	00		 je	 $LN94@LoadFloat_@4
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 ec 00 00
	00		 je	 $LN93@LoadFloat_@4
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 d5 00 00
	00		 je	 $LN92@LoadFloat_@4
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 be 00 00
	00		 je	 $LN91@LoadFloat_@4
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 a8 00 00
	00		 je	 $LN90@LoadFloat_@4
  00087	32 d1		 xor	 dl, cl
  00089	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 92 00 00
	00		 je	 $LN89@LoadFloat_@4
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	74 7f		 je	 SHORT $LN88@LoadFloat_@4
  000a4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a7	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000aa	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ad	84 d2		 test	 dl, dl
  000af	74 6c		 je	 SHORT $LN87@LoadFloat_@4
  000b1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b4	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000b7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ba	84 d2		 test	 dl, dl
  000bc	74 5a		 je	 SHORT $LN86@LoadFloat_@4
  000be	32 d1		 xor	 dl, cl
  000c0	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000c4	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000c7	0f 84 89 00 00
	00		 je	 $LN1@LoadFloat_@4
  000cd	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d0	84 d2		 test	 dl, dl
  000d2	74 3e		 je	 SHORT $LN84@LoadFloat_@4
  000d4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d7	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000da	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000dd	84 d2		 test	 dl, dl
  000df	74 2b		 je	 SHORT $LN83@LoadFloat_@4
  000e1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e4	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000e7	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000ea	84 d2		 test	 dl, dl
  000ec	74 19		 je	 SHORT $LN82@LoadFloat_@4
  000ee	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000f1	32 d1		 xor	 dl, cl
  000f3	88 55 fa	 mov	 BYTE PTR __k$[ebp+14], dl
  000f6	84 c0		 test	 al, al
  000f8	74 07		 je	 SHORT $LN81@LoadFloat_@4
  000fa	34 ea		 xor	 al, -22			; ffffffeaH
  000fc	88 45 fb	 mov	 BYTE PTR __k$[ebp+15], al
  000ff	eb 55		 jmp	 SHORT $LN1@LoadFloat_@4
$LN81@LoadFloat_@4:
  00101	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00105	eb 4f		 jmp	 SHORT $LN1@LoadFloat_@4
$LN82@LoadFloat_@4:
  00107	88 4d fa	 mov	 BYTE PTR __k$[ebp+14], cl
  0010a	eb 4a		 jmp	 SHORT $LN1@LoadFloat_@4
$LN83@LoadFloat_@4:
  0010c	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00110	eb 44		 jmp	 SHORT $LN1@LoadFloat_@4
$LN84@LoadFloat_@4:
  00112	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00116	eb 3e		 jmp	 SHORT $LN1@LoadFloat_@4
$LN86@LoadFloat_@4:
  00118	88 4d f6	 mov	 BYTE PTR __k$[ebp+10], cl
  0011b	eb 39		 jmp	 SHORT $LN1@LoadFloat_@4
$LN87@LoadFloat_@4:
  0011d	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00121	eb 33		 jmp	 SHORT $LN1@LoadFloat_@4
$LN88@LoadFloat_@4:
  00123	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00127	eb 2d		 jmp	 SHORT $LN1@LoadFloat_@4
$LN89@LoadFloat_@4:
  00129	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0012d	eb 27		 jmp	 SHORT $LN1@LoadFloat_@4
$LN90@LoadFloat_@4:
  0012f	88 4d f2	 mov	 BYTE PTR __k$[ebp+6], cl
  00132	eb 22		 jmp	 SHORT $LN1@LoadFloat_@4
$LN91@LoadFloat_@4:
  00134	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00138	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN92@LoadFloat_@4:
  0013a	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0013e	eb 16		 jmp	 SHORT $LN1@LoadFloat_@4
$LN93@LoadFloat_@4:
  00140	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00144	eb 10		 jmp	 SHORT $LN1@LoadFloat_@4
$LN94@LoadFloat_@4:
  00146	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0014a	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@4
$LN95@LoadFloat_@4:
  0014c	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00150	eb 04		 jmp	 SHORT $LN1@LoadFloat_@4
$LN96@LoadFloat_@4:
  00152	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@4:
  00156	6a 02		 push	 2
  00158	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0015b	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+11], 0
  0015f	5a		 pop	 edx
$LL104@LoadFloat_@4:
  00160	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00166	83 c0 04	 add	 eax, 4
  00169	4a		 dec	 edx
  0016a	75 f4		 jne	 SHORT $LL104@LoadFloat_@4
  0016c	6a 08		 push	 8
  0016e	58		 pop	 eax
$LL101@LoadFloat_@4:
  0016f	8b c8		 mov	 ecx, eax
  00171	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00177	79 05		 jns	 SHORT $LN111@LoadFloat_@4
  00179	49		 dec	 ecx
  0017a	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0017d	41		 inc	 ecx
$LN111@LoadFloat_@4:
  0017e	b2 ed		 mov	 dl, -19			; ffffffedH
  00180	2a d1		 sub	 dl, cl
  00182	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  00186	40		 inc	 eax
  00187	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0018a	7c e3		 jl	 SHORT $LL101@LoadFloat_@4

; 137  : 		return LoadFloat(_k, f);

  0018c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00191	51		 push	 ecx
  00192	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00195	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019a	50		 push	 eax
  0019b	8b ce		 mov	 ecx, esi
  0019d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001a3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a6	33 cd		 xor	 ecx, ebp
  001a8	5e		 pop	 esi
  001a9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ae	c9		 leave
  001af	c2 08 00	 ret	 8
??$LoadFloat_e@$0M@@ioINILoader@@QAEMAAY0M@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<12>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BA@@ioINILoader@@QAEMAAY0BA@$$CBDM@Z ; ioINILoader::LoadFloat_e<16>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BA@@ioINILoader@@QAEMAAY0BA@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BA@@ioINILoader@@QAEMAAY0BA@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<16>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 8c 01 00
	00		 je	 $LN96@LoadFloat_@5
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 75 01 00
	00		 je	 $LN95@LoadFloat_@5
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 5e 01 00
	00		 je	 $LN94@LoadFloat_@5
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 46 01 00
	00		 je	 $LN93@LoadFloat_@5
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 2f 01 00
	00		 je	 $LN92@LoadFloat_@5
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 18 01 00
	00		 je	 $LN91@LoadFloat_@5
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 02 01 00
	00		 je	 $LN90@LoadFloat_@5
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 ec 00 00
	00		 je	 $LN89@LoadFloat_@5
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 d5 00 00
	00		 je	 $LN88@LoadFloat_@5
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 be 00 00
	00		 je	 $LN87@LoadFloat_@5
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 a8 00 00
	00		 je	 $LN86@LoadFloat_@5
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 92 00 00
	00		 je	 $LN85@LoadFloat_@5
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	74 7f		 je	 SHORT $LN84@LoadFloat_@5
  000e7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f0	84 d2		 test	 dl, dl
  000f2	74 6c		 je	 SHORT $LN83@LoadFloat_@5
  000f4	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f7	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000fa	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000fd	84 d2		 test	 dl, dl
  000ff	74 5a		 je	 SHORT $LN82@LoadFloat_@5
  00101	32 d1		 xor	 dl, cl
  00103	80 78 0f 00	 cmp	 BYTE PTR [eax+15], 0
  00107	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  0010a	0f 84 a0 00 00
	00		 je	 $LN1@LoadFloat_@5
  00110	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00113	84 d2		 test	 dl, dl
  00115	74 3e		 je	 SHORT $LN80@LoadFloat_@5
  00117	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011a	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011d	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00120	84 d2		 test	 dl, dl
  00122	74 2b		 je	 SHORT $LN79@LoadFloat_@5
  00124	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00127	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  0012a	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0012d	84 d2		 test	 dl, dl
  0012f	74 19		 je	 SHORT $LN78@LoadFloat_@5
  00131	8a 40 13	 mov	 al, BYTE PTR [eax+19]
  00134	32 d1		 xor	 dl, cl
  00136	88 55 fa	 mov	 BYTE PTR __k$[ebp+18], dl
  00139	84 c0		 test	 al, al
  0013b	74 07		 je	 SHORT $LN77@LoadFloat_@5
  0013d	34 ea		 xor	 al, -22			; ffffffeaH
  0013f	88 45 fb	 mov	 BYTE PTR __k$[ebp+19], al
  00142	eb 6c		 jmp	 SHORT $LN1@LoadFloat_@5
$LN77@LoadFloat_@5:
  00144	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00148	eb 66		 jmp	 SHORT $LN1@LoadFloat_@5
$LN78@LoadFloat_@5:
  0014a	88 4d fa	 mov	 BYTE PTR __k$[ebp+18], cl
  0014d	eb 61		 jmp	 SHORT $LN1@LoadFloat_@5
$LN79@LoadFloat_@5:
  0014f	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  00153	eb 5b		 jmp	 SHORT $LN1@LoadFloat_@5
$LN80@LoadFloat_@5:
  00155	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00159	eb 55		 jmp	 SHORT $LN1@LoadFloat_@5
$LN82@LoadFloat_@5:
  0015b	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0015e	eb 50		 jmp	 SHORT $LN1@LoadFloat_@5
$LN83@LoadFloat_@5:
  00160	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00164	eb 4a		 jmp	 SHORT $LN1@LoadFloat_@5
$LN84@LoadFloat_@5:
  00166	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0016a	eb 44		 jmp	 SHORT $LN1@LoadFloat_@5
$LN85@LoadFloat_@5:
  0016c	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00170	eb 3e		 jmp	 SHORT $LN1@LoadFloat_@5
$LN86@LoadFloat_@5:
  00172	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  00175	eb 39		 jmp	 SHORT $LN1@LoadFloat_@5
$LN87@LoadFloat_@5:
  00177	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0017b	eb 33		 jmp	 SHORT $LN1@LoadFloat_@5
$LN88@LoadFloat_@5:
  0017d	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00181	eb 2d		 jmp	 SHORT $LN1@LoadFloat_@5
$LN89@LoadFloat_@5:
  00183	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00187	eb 27		 jmp	 SHORT $LN1@LoadFloat_@5
$LN90@LoadFloat_@5:
  00189	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  0018c	eb 22		 jmp	 SHORT $LN1@LoadFloat_@5
$LN91@LoadFloat_@5:
  0018e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00192	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@5
$LN92@LoadFloat_@5:
  00194	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00198	eb 16		 jmp	 SHORT $LN1@LoadFloat_@5
$LN93@LoadFloat_@5:
  0019a	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0019e	eb 10		 jmp	 SHORT $LN1@LoadFloat_@5
$LN94@LoadFloat_@5:
  001a0	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001a4	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@5
$LN95@LoadFloat_@5:
  001a6	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001aa	eb 04		 jmp	 SHORT $LN1@LoadFloat_@5
$LN96@LoadFloat_@5:
  001ac	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@5:
  001b0	6a 03		 push	 3
  001b2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001b5	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+15], 0
  001b9	5a		 pop	 edx
$LL104@LoadFloat_@5:
  001ba	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001c0	83 c0 04	 add	 eax, 4
  001c3	4a		 dec	 edx
  001c4	75 f4		 jne	 SHORT $LL104@LoadFloat_@5
  001c6	6a 0c		 push	 12			; 0000000cH
  001c8	58		 pop	 eax
$LL101@LoadFloat_@5:
  001c9	8b c8		 mov	 ecx, eax
  001cb	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001d1	79 05		 jns	 SHORT $LN111@LoadFloat_@5
  001d3	49		 dec	 ecx
  001d4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001d7	41		 inc	 ecx
$LN111@LoadFloat_@5:
  001d8	b2 ed		 mov	 dl, -19			; ffffffedH
  001da	2a d1		 sub	 dl, cl
  001dc	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001e0	40		 inc	 eax
  001e1	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001e4	7c e3		 jl	 SHORT $LL101@LoadFloat_@5

; 137  : 		return LoadFloat(_k, f);

  001e6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001eb	51		 push	 ecx
  001ec	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f4	50		 push	 eax
  001f5	8b ce		 mov	 ecx, esi
  001f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001fd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00200	33 cd		 xor	 ecx, ebp
  00202	5e		 pop	 esi
  00203	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00208	c9		 leave
  00209	c2 08 00	 ret	 8
??$LoadFloat_e@$0BA@@ioINILoader@@QAEMAAY0BA@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<16>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$09@ioINILoader@@QAEMAAY09$$CBDM@Z ; ioINILoader::LoadFloat_e<10>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$09@ioINILoader@@QAEMAAY09$$CBDM@Z
_TEXT	SEGMENT
__k$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$09@ioINILoader@@QAEMAAY09$$CBDM@Z PROC	; ioINILoader::LoadFloat_e<10>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	84 d2		 test	 dl, dl
  00017	0f 84 0d 01 00
	00		 je	 $LN96@LoadFloat_@6
  0001d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00020	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00023	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00026	84 d2		 test	 dl, dl
  00028	0f 84 f6 00 00
	00		 je	 $LN95@LoadFloat_@6
  0002e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00031	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00034	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00037	84 d2		 test	 dl, dl
  00039	0f 84 df 00 00
	00		 je	 $LN94@LoadFloat_@6
  0003f	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00042	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00045	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00048	84 d2		 test	 dl, dl
  0004a	0f 84 c8 00 00
	00		 je	 $LN93@LoadFloat_@6
  00050	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00053	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00056	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00059	84 d2		 test	 dl, dl
  0005b	0f 84 b1 00 00
	00		 je	 $LN92@LoadFloat_@6
  00061	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00064	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00067	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006a	84 d2		 test	 dl, dl
  0006c	0f 84 9a 00 00
	00		 je	 $LN91@LoadFloat_@6
  00072	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00075	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00078	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007b	84 d2		 test	 dl, dl
  0007d	0f 84 83 00 00
	00		 je	 $LN90@LoadFloat_@6
  00083	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00086	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00089	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008c	84 d2		 test	 dl, dl
  0008e	74 70		 je	 SHORT $LN89@LoadFloat_@6
  00090	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00093	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  00096	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  00099	84 d2		 test	 dl, dl
  0009b	74 5d		 je	 SHORT $LN88@LoadFloat_@6
  0009d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a0	80 78 09 00	 cmp	 BYTE PTR [eax+9], 0
  000a4	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000a7	0f 84 81 00 00
	00		 je	 $LN1@LoadFloat_@6
  000ad	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000b0	84 d2		 test	 dl, dl
  000b2	74 40		 je	 SHORT $LN86@LoadFloat_@6
  000b4	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000b7	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000ba	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000bd	84 d2		 test	 dl, dl
  000bf	74 2d		 je	 SHORT $LN85@LoadFloat_@6
  000c1	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000c4	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000c7	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000ca	84 d2		 test	 dl, dl
  000cc	74 1a		 je	 SHORT $LN84@LoadFloat_@6
  000ce	8a 40 0d	 mov	 al, BYTE PTR [eax+13]
  000d1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d4	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000d7	84 c0		 test	 al, al
  000d9	74 07		 je	 SHORT $LN83@LoadFloat_@6
  000db	34 ec		 xor	 al, -20			; ffffffecH
  000dd	88 45 f9	 mov	 BYTE PTR __k$[ebp+13], al
  000e0	eb 4c		 jmp	 SHORT $LN1@LoadFloat_@6
$LN83@LoadFloat_@6:
  000e2	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  000e6	eb 46		 jmp	 SHORT $LN1@LoadFloat_@6
$LN84@LoadFloat_@6:
  000e8	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  000ec	eb 40		 jmp	 SHORT $LN1@LoadFloat_@6
$LN85@LoadFloat_@6:
  000ee	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  000f2	eb 3a		 jmp	 SHORT $LN1@LoadFloat_@6
$LN86@LoadFloat_@6:
  000f4	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  000f8	eb 34		 jmp	 SHORT $LN1@LoadFloat_@6
$LN88@LoadFloat_@6:
  000fa	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  000fe	eb 2e		 jmp	 SHORT $LN1@LoadFloat_@6
$LN89@LoadFloat_@6:
  00100	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00104	eb 28		 jmp	 SHORT $LN1@LoadFloat_@6
$LN90@LoadFloat_@6:
  00106	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0010a	eb 22		 jmp	 SHORT $LN1@LoadFloat_@6
$LN91@LoadFloat_@6:
  0010c	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00110	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@6
$LN92@LoadFloat_@6:
  00112	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00116	eb 16		 jmp	 SHORT $LN1@LoadFloat_@6
$LN93@LoadFloat_@6:
  00118	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0011c	eb 10		 jmp	 SHORT $LN1@LoadFloat_@6
$LN94@LoadFloat_@6:
  0011e	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00122	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@6
$LN95@LoadFloat_@6:
  00124	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00128	eb 04		 jmp	 SHORT $LN1@LoadFloat_@6
$LN96@LoadFloat_@6:
  0012a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@6:
  0012e	6a 02		 push	 2
  00130	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00133	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+9], 0
  00137	5a		 pop	 edx
$LL104@LoadFloat_@6:
  00138	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0013e	83 c0 04	 add	 eax, 4
  00141	4a		 dec	 edx
  00142	75 f4		 jne	 SHORT $LL104@LoadFloat_@6

; 137  : 		return LoadFloat(_k, f);

  00144	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00149	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0014d	51		 push	 ecx
  0014e	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00151	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00156	50		 push	 eax
  00157	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	c9		 leave
  00168	c2 08 00	 ret	 8
??$LoadFloat_e@$09@ioINILoader@@QAEMAAY09$$CBDM@Z ENDP	; ioINILoader::LoadFloat_e<10>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UShakeCamera@@@std@@UShakeCamera@@AAU3@@std@@YAXAAV?$allocator@UShakeCamera@@@0@PAUShakeCamera@@AAU2@@Z ; std::_Cons_val<std::allocator<ShakeCamera>,ShakeCamera,ShakeCamera &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UShakeCamera@@@std@@UShakeCamera@@AAU3@@std@@YAXAAV?$allocator@UShakeCamera@@@0@PAUShakeCamera@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UShakeCamera@@@std@@UShakeCamera@@AAU3@@std@@YAXAAV?$allocator@UShakeCamera@@@0@PAUShakeCamera@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<ShakeCamera>,ShakeCamera,ShakeCamera &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN7@Cons_val
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	6a 0b		 push	 11			; 0000000bH
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN7@Cons_val:
  00015	5f		 pop	 edi

; 281  : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Cons_val@V?$allocator@UShakeCamera@@@std@@UShakeCamera@@AAU3@@std@@YAXAAV?$allocator@UShakeCamera@@@0@PAUShakeCamera@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<ShakeCamera>,ShakeCamera,ShakeCamera &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UShakeCamera@@@std@@QAEXPAUShakeCamera@@ABU3@@Z ; std::allocator<ShakeCamera>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UShakeCamera@@@std@@QAEXPAUShakeCamera@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UShakeCamera@@@std@@QAEXPAUShakeCamera@@ABU3@@Z PROC ; std::allocator<ShakeCamera>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN5@construct@2
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	6a 0b		 push	 11			; 0000000bH
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN5@construct@2:
  00015	5f		 pop	 edi

; 198  : 		}

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?construct@?$allocator@UShakeCamera@@@std@@QAEXPAUShakeCamera@@ABU3@@Z ENDP ; std::allocator<ShakeCamera>::construct
_TEXT	ENDS
PUBLIC	??$encodeString@$0BM@@ioINILoader_e@@AAEPADAAY0BM@$$CBDPAD@Z ; ioINILoader_e::encodeString<28>
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$encodeString@$0BM@@ioINILoader_e@@AAEPADAAY0BM@$$CBDPAD@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_e$ = 12						; size = 4
??$encodeString@$0BM@@ioINILoader_e@@AAEPADAAY0BM@$$CBDPAD@Z PROC ; ioINILoader_e::encodeString<28>, COMDAT
; _this$ = ecx

; 215  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 216  : 		__ENCSTR(s, e);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00006	8a 11		 mov	 dl, BYTE PTR [ecx]
  00008	8b 45 0c	 mov	 eax, DWORD PTR _e$[ebp]
  0000b	53		 push	 ebx
  0000c	84 d2		 test	 dl, dl
  0000e	0f 84 6a 04 00
	00		 je	 $LN96@encodeStri
  00014	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00017	88 10		 mov	 BYTE PTR [eax], dl
  00019	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  0001c	84 d2		 test	 dl, dl
  0001e	0f 84 54 04 00
	00		 je	 $LN95@encodeStri
  00024	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00027	88 50 01	 mov	 BYTE PTR [eax+1], dl
  0002a	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  0002d	84 d2		 test	 dl, dl
  0002f	0f 84 3d 04 00
	00		 je	 $LN94@encodeStri
  00035	b3 eb		 mov	 bl, -21			; ffffffebH
  00037	32 d3		 xor	 dl, bl
  00039	88 50 02	 mov	 BYTE PTR [eax+2], dl
  0003c	8a 51 03	 mov	 dl, BYTE PTR [ecx+3]
  0003f	84 d2		 test	 dl, dl
  00041	0f 84 25 04 00
	00		 je	 $LN93@encodeStri
  00047	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0004a	88 50 03	 mov	 BYTE PTR [eax+3], dl
  0004d	8a 51 04	 mov	 dl, BYTE PTR [ecx+4]
  00050	84 d2		 test	 dl, dl
  00052	0f 84 0e 04 00
	00		 je	 $LN92@encodeStri
  00058	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0005b	88 50 04	 mov	 BYTE PTR [eax+4], dl
  0005e	8a 51 05	 mov	 dl, BYTE PTR [ecx+5]
  00061	84 d2		 test	 dl, dl
  00063	0f 84 f7 03 00
	00		 je	 $LN91@encodeStri
  00069	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0006c	88 50 05	 mov	 BYTE PTR [eax+5], dl
  0006f	8a 51 06	 mov	 dl, BYTE PTR [ecx+6]
  00072	84 d2		 test	 dl, dl
  00074	0f 84 e1 03 00
	00		 je	 $LN90@encodeStri
  0007a	32 d3		 xor	 dl, bl
  0007c	88 50 06	 mov	 BYTE PTR [eax+6], dl
  0007f	8a 51 07	 mov	 dl, BYTE PTR [ecx+7]
  00082	84 d2		 test	 dl, dl
  00084	0f 84 cb 03 00
	00		 je	 $LN89@encodeStri
  0008a	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0008d	88 50 07	 mov	 BYTE PTR [eax+7], dl
  00090	8a 51 08	 mov	 dl, BYTE PTR [ecx+8]
  00093	84 d2		 test	 dl, dl
  00095	0f 84 b4 03 00
	00		 je	 $LN88@encodeStri
  0009b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0009e	88 50 08	 mov	 BYTE PTR [eax+8], dl
  000a1	8a 51 09	 mov	 dl, BYTE PTR [ecx+9]
  000a4	84 d2		 test	 dl, dl
  000a6	0f 84 9d 03 00
	00		 je	 $LN87@encodeStri
  000ac	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000af	88 50 09	 mov	 BYTE PTR [eax+9], dl
  000b2	8a 51 0a	 mov	 dl, BYTE PTR [ecx+10]
  000b5	84 d2		 test	 dl, dl
  000b7	0f 84 87 03 00
	00		 je	 $LN86@encodeStri
  000bd	32 d3		 xor	 dl, bl
  000bf	88 50 0a	 mov	 BYTE PTR [eax+10], dl
  000c2	8a 51 0b	 mov	 dl, BYTE PTR [ecx+11]
  000c5	84 d2		 test	 dl, dl
  000c7	0f 84 71 03 00
	00		 je	 $LN85@encodeStri
  000cd	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d0	88 50 0b	 mov	 BYTE PTR [eax+11], dl
  000d3	8a 51 0c	 mov	 dl, BYTE PTR [ecx+12]
  000d6	84 d2		 test	 dl, dl
  000d8	0f 84 5a 03 00
	00		 je	 $LN84@encodeStri
  000de	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e1	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  000e4	8a 51 0d	 mov	 dl, BYTE PTR [ecx+13]
  000e7	84 d2		 test	 dl, dl
  000e9	0f 84 43 03 00
	00		 je	 $LN83@encodeStri
  000ef	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f2	88 50 0d	 mov	 BYTE PTR [eax+13], dl
  000f5	8a 51 0e	 mov	 dl, BYTE PTR [ecx+14]
  000f8	84 d2		 test	 dl, dl
  000fa	0f 84 2d 03 00
	00		 je	 $LN82@encodeStri
  00100	32 d3		 xor	 dl, bl
  00102	88 50 0e	 mov	 BYTE PTR [eax+14], dl
  00105	8a 51 0f	 mov	 dl, BYTE PTR [ecx+15]
  00108	84 d2		 test	 dl, dl
  0010a	0f 84 17 03 00
	00		 je	 $LN81@encodeStri
  00110	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00113	88 50 0f	 mov	 BYTE PTR [eax+15], dl
  00116	8a 51 10	 mov	 dl, BYTE PTR [ecx+16]
  00119	84 d2		 test	 dl, dl
  0011b	0f 84 00 03 00
	00		 je	 $LN80@encodeStri
  00121	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00124	88 50 10	 mov	 BYTE PTR [eax+16], dl
  00127	8a 51 11	 mov	 dl, BYTE PTR [ecx+17]
  0012a	84 d2		 test	 dl, dl
  0012c	0f 84 e9 02 00
	00		 je	 $LN79@encodeStri
  00132	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00135	88 50 11	 mov	 BYTE PTR [eax+17], dl
  00138	8a 51 12	 mov	 dl, BYTE PTR [ecx+18]
  0013b	84 d2		 test	 dl, dl
  0013d	0f 84 d3 02 00
	00		 je	 $LN78@encodeStri
  00143	32 d3		 xor	 dl, bl
  00145	88 50 12	 mov	 BYTE PTR [eax+18], dl
  00148	8a 51 13	 mov	 dl, BYTE PTR [ecx+19]
  0014b	84 d2		 test	 dl, dl
  0014d	0f 84 bd 02 00
	00		 je	 $LN77@encodeStri
  00153	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00156	88 50 13	 mov	 BYTE PTR [eax+19], dl
  00159	8a 51 14	 mov	 dl, BYTE PTR [ecx+20]
  0015c	84 d2		 test	 dl, dl
  0015e	0f 84 a6 02 00
	00		 je	 $LN76@encodeStri
  00164	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00167	88 50 14	 mov	 BYTE PTR [eax+20], dl
  0016a	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  0016d	84 d2		 test	 dl, dl
  0016f	0f 84 8f 02 00
	00		 je	 $LN75@encodeStri
  00175	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00178	88 50 15	 mov	 BYTE PTR [eax+21], dl
  0017b	8a 51 16	 mov	 dl, BYTE PTR [ecx+22]
  0017e	84 d2		 test	 dl, dl
  00180	0f 84 79 02 00
	00		 je	 $LN74@encodeStri
  00186	32 d3		 xor	 dl, bl
  00188	88 50 16	 mov	 BYTE PTR [eax+22], dl
  0018b	8a 51 17	 mov	 dl, BYTE PTR [ecx+23]
  0018e	84 d2		 test	 dl, dl
  00190	0f 84 60 02 00
	00		 je	 $LN73@encodeStri
  00196	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00199	88 50 17	 mov	 BYTE PTR [eax+23], dl
  0019c	8a 51 18	 mov	 dl, BYTE PTR [ecx+24]
  0019f	84 d2		 test	 dl, dl
  001a1	0f 84 46 02 00
	00		 je	 $LN72@encodeStri
  001a7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001aa	88 50 18	 mov	 BYTE PTR [eax+24], dl
  001ad	8a 51 19	 mov	 dl, BYTE PTR [ecx+25]
  001b0	84 d2		 test	 dl, dl
  001b2	0f 84 2c 02 00
	00		 je	 $LN71@encodeStri
  001b8	80 f2 ec	 xor	 dl, -20			; ffffffecH
  001bb	88 50 19	 mov	 BYTE PTR [eax+25], dl
  001be	8a 51 1a	 mov	 dl, BYTE PTR [ecx+26]
  001c1	84 d2		 test	 dl, dl
  001c3	0f 84 13 02 00
	00		 je	 $LN70@encodeStri
  001c9	32 d3		 xor	 dl, bl
  001cb	88 50 1a	 mov	 BYTE PTR [eax+26], dl
  001ce	8a 51 1b	 mov	 dl, BYTE PTR [ecx+27]
  001d1	84 d2		 test	 dl, dl
  001d3	0f 84 fa 01 00
	00		 je	 $LN69@encodeStri
  001d9	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001dc	88 50 1b	 mov	 BYTE PTR [eax+27], dl
  001df	8a 51 1c	 mov	 dl, BYTE PTR [ecx+28]
  001e2	84 d2		 test	 dl, dl
  001e4	0f 84 e0 01 00
	00		 je	 $LN68@encodeStri
  001ea	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001ed	88 50 1c	 mov	 BYTE PTR [eax+28], dl
  001f0	8a 51 1d	 mov	 dl, BYTE PTR [ecx+29]
  001f3	84 d2		 test	 dl, dl
  001f5	0f 84 c6 01 00
	00		 je	 $LN67@encodeStri
  001fb	80 f2 ec	 xor	 dl, -20			; ffffffecH
  001fe	88 50 1d	 mov	 BYTE PTR [eax+29], dl
  00201	8a 51 1e	 mov	 dl, BYTE PTR [ecx+30]
  00204	84 d2		 test	 dl, dl
  00206	0f 84 ad 01 00
	00		 je	 $LN66@encodeStri
  0020c	32 d3		 xor	 dl, bl
  0020e	88 50 1e	 mov	 BYTE PTR [eax+30], dl
  00211	8a 51 1f	 mov	 dl, BYTE PTR [ecx+31]
  00214	84 d2		 test	 dl, dl
  00216	0f 84 94 01 00
	00		 je	 $LN65@encodeStri
  0021c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0021f	88 50 1f	 mov	 BYTE PTR [eax+31], dl
  00222	8a 51 20	 mov	 dl, BYTE PTR [ecx+32]
  00225	84 d2		 test	 dl, dl
  00227	0f 84 7a 01 00
	00		 je	 $LN64@encodeStri
  0022d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00230	88 50 20	 mov	 BYTE PTR [eax+32], dl
  00233	8a 51 21	 mov	 dl, BYTE PTR [ecx+33]
  00236	84 d2		 test	 dl, dl
  00238	0f 84 60 01 00
	00		 je	 $LN63@encodeStri
  0023e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00241	88 50 21	 mov	 BYTE PTR [eax+33], dl
  00244	8a 51 22	 mov	 dl, BYTE PTR [ecx+34]
  00247	84 d2		 test	 dl, dl
  00249	0f 84 47 01 00
	00		 je	 $LN62@encodeStri
  0024f	32 d3		 xor	 dl, bl
  00251	88 50 22	 mov	 BYTE PTR [eax+34], dl
  00254	8a 51 23	 mov	 dl, BYTE PTR [ecx+35]
  00257	84 d2		 test	 dl, dl
  00259	0f 84 2e 01 00
	00		 je	 $LN61@encodeStri
  0025f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00262	88 50 23	 mov	 BYTE PTR [eax+35], dl
  00265	8a 51 24	 mov	 dl, BYTE PTR [ecx+36]
  00268	84 d2		 test	 dl, dl
  0026a	0f 84 14 01 00
	00		 je	 $LN60@encodeStri
  00270	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00273	88 50 24	 mov	 BYTE PTR [eax+36], dl
  00276	8a 51 25	 mov	 dl, BYTE PTR [ecx+37]
  00279	84 d2		 test	 dl, dl
  0027b	0f 84 fa 00 00
	00		 je	 $LN59@encodeStri
  00281	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00284	88 50 25	 mov	 BYTE PTR [eax+37], dl
  00287	8a 51 26	 mov	 dl, BYTE PTR [ecx+38]
  0028a	84 d2		 test	 dl, dl
  0028c	0f 84 e1 00 00
	00		 je	 $LN58@encodeStri
  00292	32 d3		 xor	 dl, bl
  00294	88 50 26	 mov	 BYTE PTR [eax+38], dl
  00297	8a 51 27	 mov	 dl, BYTE PTR [ecx+39]
  0029a	84 d2		 test	 dl, dl
  0029c	0f 84 c8 00 00
	00		 je	 $LN57@encodeStri
  002a2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  002a5	88 50 27	 mov	 BYTE PTR [eax+39], dl
  002a8	8a 51 28	 mov	 dl, BYTE PTR [ecx+40]
  002ab	84 d2		 test	 dl, dl
  002ad	0f 84 ae 00 00
	00		 je	 $LN56@encodeStri
  002b3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  002b6	88 50 28	 mov	 BYTE PTR [eax+40], dl
  002b9	8a 51 29	 mov	 dl, BYTE PTR [ecx+41]
  002bc	84 d2		 test	 dl, dl
  002be	0f 84 94 00 00
	00		 je	 $LN55@encodeStri
  002c4	80 f2 ec	 xor	 dl, -20			; ffffffecH
  002c7	88 50 29	 mov	 BYTE PTR [eax+41], dl
  002ca	8a 51 2a	 mov	 dl, BYTE PTR [ecx+42]
  002cd	84 d2		 test	 dl, dl
  002cf	74 7f		 je	 SHORT $LN54@encodeStri
  002d1	32 d3		 xor	 dl, bl
  002d3	88 50 2a	 mov	 BYTE PTR [eax+42], dl
  002d6	8a 51 2b	 mov	 dl, BYTE PTR [ecx+43]
  002d9	84 d2		 test	 dl, dl
  002db	74 6a		 je	 SHORT $LN53@encodeStri
  002dd	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  002e0	88 50 2b	 mov	 BYTE PTR [eax+43], dl
  002e3	8a 51 2c	 mov	 dl, BYTE PTR [ecx+44]
  002e6	84 d2		 test	 dl, dl
  002e8	74 54		 je	 SHORT $LN52@encodeStri
  002ea	80 f2 ed	 xor	 dl, -19			; ffffffedH
  002ed	88 50 2c	 mov	 BYTE PTR [eax+44], dl
  002f0	8a 51 2d	 mov	 dl, BYTE PTR [ecx+45]
  002f3	84 d2		 test	 dl, dl
  002f5	74 3e		 je	 SHORT $LN51@encodeStri
  002f7	80 f2 ec	 xor	 dl, -20			; ffffffecH
  002fa	88 50 2d	 mov	 BYTE PTR [eax+45], dl
  002fd	8a 51 2e	 mov	 dl, BYTE PTR [ecx+46]
  00300	84 d2		 test	 dl, dl
  00302	74 29		 je	 SHORT $LN50@encodeStri
  00304	32 d3		 xor	 dl, bl
  00306	88 50 2e	 mov	 BYTE PTR [eax+46], dl
  00309	8a 51 2f	 mov	 dl, BYTE PTR [ecx+47]
  0030c	84 d2		 test	 dl, dl
  0030e	74 14		 je	 SHORT $LN49@encodeStri
  00310	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00313	88 50 2f	 mov	 BYTE PTR [eax+47], dl
  00316	8a 49 30	 mov	 cl, BYTE PTR [ecx+48]
  00319	80 f1 ed	 xor	 cl, -19			; ffffffedH
  0031c	88 48 30	 mov	 BYTE PTR [eax+48], cl
  0031f	e9 5d 01 00 00	 jmp	 $LN1@encodeStri
$LN49@encodeStri:
  00324	c6 40 2f ea	 mov	 BYTE PTR [eax+47], -22	; ffffffeaH
  00328	e9 54 01 00 00	 jmp	 $LN1@encodeStri
$LN50@encodeStri:
  0032d	88 58 2e	 mov	 BYTE PTR [eax+46], bl
  00330	e9 4c 01 00 00	 jmp	 $LN1@encodeStri
$LN51@encodeStri:
  00335	c6 40 2d ec	 mov	 BYTE PTR [eax+45], -20	; ffffffecH
  00339	e9 43 01 00 00	 jmp	 $LN1@encodeStri
$LN52@encodeStri:
  0033e	c6 40 2c ed	 mov	 BYTE PTR [eax+44], -19	; ffffffedH
  00342	e9 3a 01 00 00	 jmp	 $LN1@encodeStri
$LN53@encodeStri:
  00347	c6 40 2b ea	 mov	 BYTE PTR [eax+43], -22	; ffffffeaH
  0034b	e9 31 01 00 00	 jmp	 $LN1@encodeStri
$LN54@encodeStri:
  00350	88 58 2a	 mov	 BYTE PTR [eax+42], bl
  00353	e9 29 01 00 00	 jmp	 $LN1@encodeStri
$LN55@encodeStri:
  00358	c6 40 29 ec	 mov	 BYTE PTR [eax+41], -20	; ffffffecH
  0035c	e9 20 01 00 00	 jmp	 $LN1@encodeStri
$LN56@encodeStri:
  00361	c6 40 28 ed	 mov	 BYTE PTR [eax+40], -19	; ffffffedH
  00365	e9 17 01 00 00	 jmp	 $LN1@encodeStri
$LN57@encodeStri:
  0036a	c6 40 27 ea	 mov	 BYTE PTR [eax+39], -22	; ffffffeaH
  0036e	e9 0e 01 00 00	 jmp	 $LN1@encodeStri
$LN58@encodeStri:
  00373	88 58 26	 mov	 BYTE PTR [eax+38], bl
  00376	e9 06 01 00 00	 jmp	 $LN1@encodeStri
$LN59@encodeStri:
  0037b	c6 40 25 ec	 mov	 BYTE PTR [eax+37], -20	; ffffffecH
  0037f	e9 fd 00 00 00	 jmp	 $LN1@encodeStri
$LN60@encodeStri:
  00384	c6 40 24 ed	 mov	 BYTE PTR [eax+36], -19	; ffffffedH
  00388	e9 f4 00 00 00	 jmp	 $LN1@encodeStri
$LN61@encodeStri:
  0038d	c6 40 23 ea	 mov	 BYTE PTR [eax+35], -22	; ffffffeaH
  00391	e9 eb 00 00 00	 jmp	 $LN1@encodeStri
$LN62@encodeStri:
  00396	88 58 22	 mov	 BYTE PTR [eax+34], bl
  00399	e9 e3 00 00 00	 jmp	 $LN1@encodeStri
$LN63@encodeStri:
  0039e	c6 40 21 ec	 mov	 BYTE PTR [eax+33], -20	; ffffffecH
  003a2	e9 da 00 00 00	 jmp	 $LN1@encodeStri
$LN64@encodeStri:
  003a7	c6 40 20 ed	 mov	 BYTE PTR [eax+32], -19	; ffffffedH
  003ab	e9 d1 00 00 00	 jmp	 $LN1@encodeStri
$LN65@encodeStri:
  003b0	c6 40 1f ea	 mov	 BYTE PTR [eax+31], -22	; ffffffeaH
  003b4	e9 c8 00 00 00	 jmp	 $LN1@encodeStri
$LN66@encodeStri:
  003b9	88 58 1e	 mov	 BYTE PTR [eax+30], bl
  003bc	e9 c0 00 00 00	 jmp	 $LN1@encodeStri
$LN67@encodeStri:
  003c1	c6 40 1d ec	 mov	 BYTE PTR [eax+29], -20	; ffffffecH
  003c5	e9 b7 00 00 00	 jmp	 $LN1@encodeStri
$LN68@encodeStri:
  003ca	c6 40 1c ed	 mov	 BYTE PTR [eax+28], -19	; ffffffedH
  003ce	e9 ae 00 00 00	 jmp	 $LN1@encodeStri
$LN69@encodeStri:
  003d3	c6 40 1b ea	 mov	 BYTE PTR [eax+27], -22	; ffffffeaH
  003d7	e9 a5 00 00 00	 jmp	 $LN1@encodeStri
$LN70@encodeStri:
  003dc	88 58 1a	 mov	 BYTE PTR [eax+26], bl
  003df	e9 9d 00 00 00	 jmp	 $LN1@encodeStri
$LN71@encodeStri:
  003e4	c6 40 19 ec	 mov	 BYTE PTR [eax+25], -20	; ffffffecH
  003e8	e9 94 00 00 00	 jmp	 $LN1@encodeStri
$LN72@encodeStri:
  003ed	c6 40 18 ed	 mov	 BYTE PTR [eax+24], -19	; ffffffedH
  003f1	e9 8b 00 00 00	 jmp	 $LN1@encodeStri
$LN73@encodeStri:
  003f6	c6 40 17 ea	 mov	 BYTE PTR [eax+23], -22	; ffffffeaH
  003fa	e9 82 00 00 00	 jmp	 $LN1@encodeStri
$LN74@encodeStri:
  003ff	88 58 16	 mov	 BYTE PTR [eax+22], bl
  00402	eb 7d		 jmp	 SHORT $LN1@encodeStri
$LN75@encodeStri:
  00404	c6 40 15 ec	 mov	 BYTE PTR [eax+21], -20	; ffffffecH
  00408	eb 77		 jmp	 SHORT $LN1@encodeStri
$LN76@encodeStri:
  0040a	c6 40 14 ed	 mov	 BYTE PTR [eax+20], -19	; ffffffedH
  0040e	eb 71		 jmp	 SHORT $LN1@encodeStri
$LN77@encodeStri:
  00410	c6 40 13 ea	 mov	 BYTE PTR [eax+19], -22	; ffffffeaH
  00414	eb 6b		 jmp	 SHORT $LN1@encodeStri
$LN78@encodeStri:
  00416	88 58 12	 mov	 BYTE PTR [eax+18], bl
  00419	eb 66		 jmp	 SHORT $LN1@encodeStri
$LN79@encodeStri:
  0041b	c6 40 11 ec	 mov	 BYTE PTR [eax+17], -20	; ffffffecH
  0041f	eb 60		 jmp	 SHORT $LN1@encodeStri
$LN80@encodeStri:
  00421	c6 40 10 ed	 mov	 BYTE PTR [eax+16], -19	; ffffffedH
  00425	eb 5a		 jmp	 SHORT $LN1@encodeStri
$LN81@encodeStri:
  00427	c6 40 0f ea	 mov	 BYTE PTR [eax+15], -22	; ffffffeaH
  0042b	eb 54		 jmp	 SHORT $LN1@encodeStri
$LN82@encodeStri:
  0042d	88 58 0e	 mov	 BYTE PTR [eax+14], bl
  00430	eb 4f		 jmp	 SHORT $LN1@encodeStri
$LN83@encodeStri:
  00432	c6 40 0d ec	 mov	 BYTE PTR [eax+13], -20	; ffffffecH
  00436	eb 49		 jmp	 SHORT $LN1@encodeStri
$LN84@encodeStri:
  00438	c6 40 0c ed	 mov	 BYTE PTR [eax+12], -19	; ffffffedH
  0043c	eb 43		 jmp	 SHORT $LN1@encodeStri
$LN85@encodeStri:
  0043e	c6 40 0b ea	 mov	 BYTE PTR [eax+11], -22	; ffffffeaH
  00442	eb 3d		 jmp	 SHORT $LN1@encodeStri
$LN86@encodeStri:
  00444	88 58 0a	 mov	 BYTE PTR [eax+10], bl
  00447	eb 38		 jmp	 SHORT $LN1@encodeStri
$LN87@encodeStri:
  00449	c6 40 09 ec	 mov	 BYTE PTR [eax+9], -20	; ffffffecH
  0044d	eb 32		 jmp	 SHORT $LN1@encodeStri
$LN88@encodeStri:
  0044f	c6 40 08 ed	 mov	 BYTE PTR [eax+8], -19	; ffffffedH
  00453	eb 2c		 jmp	 SHORT $LN1@encodeStri
$LN89@encodeStri:
  00455	c6 40 07 ea	 mov	 BYTE PTR [eax+7], -22	; ffffffeaH
  00459	eb 26		 jmp	 SHORT $LN1@encodeStri
$LN90@encodeStri:
  0045b	88 58 06	 mov	 BYTE PTR [eax+6], bl
  0045e	eb 21		 jmp	 SHORT $LN1@encodeStri
$LN91@encodeStri:
  00460	c6 40 05 ec	 mov	 BYTE PTR [eax+5], -20	; ffffffecH
  00464	eb 1b		 jmp	 SHORT $LN1@encodeStri
$LN92@encodeStri:
  00466	c6 40 04 ed	 mov	 BYTE PTR [eax+4], -19	; ffffffedH
  0046a	eb 15		 jmp	 SHORT $LN1@encodeStri
$LN93@encodeStri:
  0046c	c6 40 03 ea	 mov	 BYTE PTR [eax+3], -22	; ffffffeaH
  00470	eb 0f		 jmp	 SHORT $LN1@encodeStri
$LN94@encodeStri:
  00472	c6 40 02 eb	 mov	 BYTE PTR [eax+2], -21	; ffffffebH
  00476	eb 09		 jmp	 SHORT $LN1@encodeStri
$LN95@encodeStri:
  00478	c6 40 01 ec	 mov	 BYTE PTR [eax+1], -20	; ffffffecH
  0047c	eb 03		 jmp	 SHORT $LN1@encodeStri
$LN96@encodeStri:
  0047e	c6 00 ed	 mov	 BYTE PTR [eax], -19	; ffffffedH
$LN1@encodeStri:
  00481	6a 06		 push	 6
  00483	5a		 pop	 edx
  00484	8b c8		 mov	 ecx, eax
  00486	c6 40 1b 00	 mov	 BYTE PTR [eax+27], 0
  0048a	5b		 pop	 ebx
$LL104@encodeStri:
  0048b	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  00491	83 c1 04	 add	 ecx, 4
  00494	4a		 dec	 edx
  00495	75 f4		 jne	 SHORT $LL104@encodeStri
  00497	56		 push	 esi
  00498	6a 18		 push	 24			; 00000018H
  0049a	5e		 pop	 esi
$LL101@encodeStri:
  0049b	8b ce		 mov	 ecx, esi
  0049d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  004a3	79 05		 jns	 SHORT $LN111@encodeStri
  004a5	49		 dec	 ecx
  004a6	83 c9 fc	 or	 ecx, -4			; fffffffcH
  004a9	41		 inc	 ecx
$LN111@encodeStri:
  004aa	b2 ed		 mov	 dl, -19			; ffffffedH
  004ac	2a d1		 sub	 dl, cl
  004ae	30 14 06	 xor	 BYTE PTR [esi+eax], dl
  004b1	46		 inc	 esi
  004b2	83 fe 1b	 cmp	 esi, 27			; 0000001bH
  004b5	7c e4		 jl	 SHORT $LL101@encodeStri
  004b7	5e		 pop	 esi

; 217  : 		return e;
; 218  : 	}

  004b8	5d		 pop	 ebp
  004b9	c2 08 00	 ret	 8
??$encodeString@$0BM@@ioINILoader_e@@AAEPADAAY0BM@$$CBDPAD@Z ENDP ; ioINILoader_e::encodeString<28>
_TEXT	ENDS
PUBLIC	??$_Move@PAUShakeCamera@@PAU1@@std@@YAPAUShakeCamera@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ShakeCamera *,ShakeCamera *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUShakeCamera@@PAU1@@std@@YAPAUShakeCamera@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUShakeCamera@@PAU1@@std@@YAPAUShakeCamera@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<ShakeCamera *,ShakeCamera *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00009	74 1a		 je	 SHORT $LN10@Move
  0000b	56		 push	 esi
  0000c	57		 push	 edi
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00010	83 45 10 2c	 add	 DWORD PTR __Dest$[ebp], 44 ; 0000002cH
  00014	8b f0		 mov	 esi, eax
  00016	6a 0b		 push	 11			; 0000000bH
  00018	83 c0 2c	 add	 eax, 44			; 0000002cH
  0001b	59		 pop	 ecx
  0001c	f3 a5		 rep movsd
  0001e	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00021	75 ea		 jne	 SHORT $LL3@Move
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
$LN10@Move:

; 2515 : 	return (_Dest);

  00025	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Move@PAUShakeCamera@@PAU1@@std@@YAPAUShakeCamera@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<ShakeCamera *,ShakeCamera *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UShakeCamera@@@std@@QAEXPAUShakeCamera@@@Z ; std::allocator<ShakeCamera>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UShakeCamera@@@std@@QAEXPAUShakeCamera@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UShakeCamera@@@std@@QAEXPAUShakeCamera@@@Z PROC ; std::allocator<ShakeCamera>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UShakeCamera@@@std@@QAEXPAUShakeCamera@@@Z ENDP ; std::allocator<ShakeCamera>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UShakeCamera@@@std@@QAEXPAUShakeCamera@@$$QAU3@@Z ; std::allocator<ShakeCamera>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UShakeCamera@@@std@@QAEXPAUShakeCamera@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UShakeCamera@@@std@@QAEXPAUShakeCamera@@$$QAU3@@Z PROC ; std::allocator<ShakeCamera>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN3@construct@3
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	6a 0b		 push	 11			; 0000000bH
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN3@construct@3:
  00015	5f		 pop	 edi

; 203  : 		}

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?construct@?$allocator@UShakeCamera@@@std@@QAEXPAUShakeCamera@@$$QAU3@@Z ENDP ; std::allocator<ShakeCamera>::construct
_TEXT	ENDS
PUBLIC	??0?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE@XZ ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::vector<ShakeCamera,std::allocator<ShakeCamera> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE@XZ PROC ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::vector<ShakeCamera,std::allocator<ShakeCamera> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE@XZ ENDP ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::vector<ShakeCamera,std::allocator<ShakeCamera> >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QAE@PAUShakeCamera@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::_Vector_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QAE@PAUShakeCamera@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QAE@PAUShakeCamera@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::_Vector_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@std@@QAE@PAUShakeCamera@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >::_Vector_iterator<std::_Vector_val<ShakeCamera,std::allocator<ShakeCamera> > >
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@@Z ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@@Z PROC ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@@Z ENDP ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$?0$0BM@@ioINILoader_e@@QAE@AAY0BM@$$CBD_N@Z	; ioINILoader_e::ioINILoader_e<28>
EXTRN	__imp_??0ioINILoader@@QAE@PBD_N@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$?0$0BM@@ioINILoader_e@@QAE@AAY0BM@$$CBD_N@Z
_TEXT	SEGMENT
_fn$ = 8						; size = 4
_b$ = 12						; size = 1
??$?0$0BM@@ioINILoader_e@@QAE@AAY0BM@$$CBD_N@Z PROC	; ioINILoader_e::ioINILoader_e<28>, COMDAT
; _this$ = ecx

; 224  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _fn$[ebp]
  0000b	8a 11		 mov	 dl, BYTE PTR [ecx]
  0000d	8d 87 50 03 00
	00		 lea	 eax, DWORD PTR [edi+848]
  00013	84 d2		 test	 dl, dl
  00015	0f 84 6a 04 00
	00		 je	 $LN99@ioINILoade
  0001b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0001e	88 10		 mov	 BYTE PTR [eax], dl
  00020	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00023	84 d2		 test	 dl, dl
  00025	0f 84 54 04 00
	00		 je	 $LN98@ioINILoade
  0002b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0002e	88 50 01	 mov	 BYTE PTR [eax+1], dl
  00031	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  00034	84 d2		 test	 dl, dl
  00036	0f 84 3d 04 00
	00		 je	 $LN97@ioINILoade
  0003c	b3 eb		 mov	 bl, -21			; ffffffebH
  0003e	32 d3		 xor	 dl, bl
  00040	88 50 02	 mov	 BYTE PTR [eax+2], dl
  00043	8a 51 03	 mov	 dl, BYTE PTR [ecx+3]
  00046	84 d2		 test	 dl, dl
  00048	0f 84 25 04 00
	00		 je	 $LN96@ioINILoade
  0004e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00051	88 50 03	 mov	 BYTE PTR [eax+3], dl
  00054	8a 51 04	 mov	 dl, BYTE PTR [ecx+4]
  00057	84 d2		 test	 dl, dl
  00059	0f 84 0e 04 00
	00		 je	 $LN95@ioINILoade
  0005f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00062	88 50 04	 mov	 BYTE PTR [eax+4], dl
  00065	8a 51 05	 mov	 dl, BYTE PTR [ecx+5]
  00068	84 d2		 test	 dl, dl
  0006a	0f 84 f7 03 00
	00		 je	 $LN94@ioINILoade
  00070	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00073	88 50 05	 mov	 BYTE PTR [eax+5], dl
  00076	8a 51 06	 mov	 dl, BYTE PTR [ecx+6]
  00079	84 d2		 test	 dl, dl
  0007b	0f 84 e1 03 00
	00		 je	 $LN93@ioINILoade
  00081	32 d3		 xor	 dl, bl
  00083	88 50 06	 mov	 BYTE PTR [eax+6], dl
  00086	8a 51 07	 mov	 dl, BYTE PTR [ecx+7]
  00089	84 d2		 test	 dl, dl
  0008b	0f 84 cb 03 00
	00		 je	 $LN92@ioINILoade
  00091	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00094	88 50 07	 mov	 BYTE PTR [eax+7], dl
  00097	8a 51 08	 mov	 dl, BYTE PTR [ecx+8]
  0009a	84 d2		 test	 dl, dl
  0009c	0f 84 b4 03 00
	00		 je	 $LN91@ioINILoade
  000a2	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a5	88 50 08	 mov	 BYTE PTR [eax+8], dl
  000a8	8a 51 09	 mov	 dl, BYTE PTR [ecx+9]
  000ab	84 d2		 test	 dl, dl
  000ad	0f 84 9d 03 00
	00		 je	 $LN90@ioINILoade
  000b3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b6	88 50 09	 mov	 BYTE PTR [eax+9], dl
  000b9	8a 51 0a	 mov	 dl, BYTE PTR [ecx+10]
  000bc	84 d2		 test	 dl, dl
  000be	0f 84 87 03 00
	00		 je	 $LN89@ioINILoade
  000c4	32 d3		 xor	 dl, bl
  000c6	88 50 0a	 mov	 BYTE PTR [eax+10], dl
  000c9	8a 51 0b	 mov	 dl, BYTE PTR [ecx+11]
  000cc	84 d2		 test	 dl, dl
  000ce	0f 84 71 03 00
	00		 je	 $LN88@ioINILoade
  000d4	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d7	88 50 0b	 mov	 BYTE PTR [eax+11], dl
  000da	8a 51 0c	 mov	 dl, BYTE PTR [ecx+12]
  000dd	84 d2		 test	 dl, dl
  000df	0f 84 5a 03 00
	00		 je	 $LN87@ioINILoade
  000e5	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e8	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  000eb	8a 51 0d	 mov	 dl, BYTE PTR [ecx+13]
  000ee	84 d2		 test	 dl, dl
  000f0	0f 84 43 03 00
	00		 je	 $LN86@ioINILoade
  000f6	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f9	88 50 0d	 mov	 BYTE PTR [eax+13], dl
  000fc	8a 51 0e	 mov	 dl, BYTE PTR [ecx+14]
  000ff	84 d2		 test	 dl, dl
  00101	0f 84 2d 03 00
	00		 je	 $LN85@ioINILoade
  00107	32 d3		 xor	 dl, bl
  00109	88 50 0e	 mov	 BYTE PTR [eax+14], dl
  0010c	8a 51 0f	 mov	 dl, BYTE PTR [ecx+15]
  0010f	84 d2		 test	 dl, dl
  00111	0f 84 17 03 00
	00		 je	 $LN84@ioINILoade
  00117	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011a	88 50 0f	 mov	 BYTE PTR [eax+15], dl
  0011d	8a 51 10	 mov	 dl, BYTE PTR [ecx+16]
  00120	84 d2		 test	 dl, dl
  00122	0f 84 00 03 00
	00		 je	 $LN83@ioINILoade
  00128	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0012b	88 50 10	 mov	 BYTE PTR [eax+16], dl
  0012e	8a 51 11	 mov	 dl, BYTE PTR [ecx+17]
  00131	84 d2		 test	 dl, dl
  00133	0f 84 e9 02 00
	00		 je	 $LN82@ioINILoade
  00139	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0013c	88 50 11	 mov	 BYTE PTR [eax+17], dl
  0013f	8a 51 12	 mov	 dl, BYTE PTR [ecx+18]
  00142	84 d2		 test	 dl, dl
  00144	0f 84 d3 02 00
	00		 je	 $LN81@ioINILoade
  0014a	32 d3		 xor	 dl, bl
  0014c	88 50 12	 mov	 BYTE PTR [eax+18], dl
  0014f	8a 51 13	 mov	 dl, BYTE PTR [ecx+19]
  00152	84 d2		 test	 dl, dl
  00154	0f 84 bd 02 00
	00		 je	 $LN80@ioINILoade
  0015a	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0015d	88 50 13	 mov	 BYTE PTR [eax+19], dl
  00160	8a 51 14	 mov	 dl, BYTE PTR [ecx+20]
  00163	84 d2		 test	 dl, dl
  00165	0f 84 a6 02 00
	00		 je	 $LN79@ioINILoade
  0016b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016e	88 50 14	 mov	 BYTE PTR [eax+20], dl
  00171	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00174	84 d2		 test	 dl, dl
  00176	0f 84 8f 02 00
	00		 je	 $LN78@ioINILoade
  0017c	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0017f	88 50 15	 mov	 BYTE PTR [eax+21], dl
  00182	8a 51 16	 mov	 dl, BYTE PTR [ecx+22]
  00185	84 d2		 test	 dl, dl
  00187	0f 84 79 02 00
	00		 je	 $LN77@ioINILoade
  0018d	32 d3		 xor	 dl, bl
  0018f	88 50 16	 mov	 BYTE PTR [eax+22], dl
  00192	8a 51 17	 mov	 dl, BYTE PTR [ecx+23]
  00195	84 d2		 test	 dl, dl
  00197	0f 84 60 02 00
	00		 je	 $LN76@ioINILoade
  0019d	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001a0	88 50 17	 mov	 BYTE PTR [eax+23], dl
  001a3	8a 51 18	 mov	 dl, BYTE PTR [ecx+24]
  001a6	84 d2		 test	 dl, dl
  001a8	0f 84 46 02 00
	00		 je	 $LN75@ioINILoade
  001ae	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b1	88 50 18	 mov	 BYTE PTR [eax+24], dl
  001b4	8a 51 19	 mov	 dl, BYTE PTR [ecx+25]
  001b7	84 d2		 test	 dl, dl
  001b9	0f 84 2c 02 00
	00		 je	 $LN74@ioINILoade
  001bf	80 f2 ec	 xor	 dl, -20			; ffffffecH
  001c2	88 50 19	 mov	 BYTE PTR [eax+25], dl
  001c5	8a 51 1a	 mov	 dl, BYTE PTR [ecx+26]
  001c8	84 d2		 test	 dl, dl
  001ca	0f 84 13 02 00
	00		 je	 $LN73@ioINILoade
  001d0	32 d3		 xor	 dl, bl
  001d2	88 50 1a	 mov	 BYTE PTR [eax+26], dl
  001d5	8a 51 1b	 mov	 dl, BYTE PTR [ecx+27]
  001d8	84 d2		 test	 dl, dl
  001da	0f 84 fa 01 00
	00		 je	 $LN72@ioINILoade
  001e0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001e3	88 50 1b	 mov	 BYTE PTR [eax+27], dl
  001e6	8a 51 1c	 mov	 dl, BYTE PTR [ecx+28]
  001e9	84 d2		 test	 dl, dl
  001eb	0f 84 e0 01 00
	00		 je	 $LN71@ioINILoade
  001f1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001f4	88 50 1c	 mov	 BYTE PTR [eax+28], dl
  001f7	8a 51 1d	 mov	 dl, BYTE PTR [ecx+29]
  001fa	84 d2		 test	 dl, dl
  001fc	0f 84 c6 01 00
	00		 je	 $LN70@ioINILoade
  00202	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00205	88 50 1d	 mov	 BYTE PTR [eax+29], dl
  00208	8a 51 1e	 mov	 dl, BYTE PTR [ecx+30]
  0020b	84 d2		 test	 dl, dl
  0020d	0f 84 ad 01 00
	00		 je	 $LN69@ioINILoade
  00213	32 d3		 xor	 dl, bl
  00215	88 50 1e	 mov	 BYTE PTR [eax+30], dl
  00218	8a 51 1f	 mov	 dl, BYTE PTR [ecx+31]
  0021b	84 d2		 test	 dl, dl
  0021d	0f 84 94 01 00
	00		 je	 $LN68@ioINILoade
  00223	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00226	88 50 1f	 mov	 BYTE PTR [eax+31], dl
  00229	8a 51 20	 mov	 dl, BYTE PTR [ecx+32]
  0022c	84 d2		 test	 dl, dl
  0022e	0f 84 7a 01 00
	00		 je	 $LN67@ioINILoade
  00234	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00237	88 50 20	 mov	 BYTE PTR [eax+32], dl
  0023a	8a 51 21	 mov	 dl, BYTE PTR [ecx+33]
  0023d	84 d2		 test	 dl, dl
  0023f	0f 84 60 01 00
	00		 je	 $LN66@ioINILoade
  00245	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00248	88 50 21	 mov	 BYTE PTR [eax+33], dl
  0024b	8a 51 22	 mov	 dl, BYTE PTR [ecx+34]
  0024e	84 d2		 test	 dl, dl
  00250	0f 84 47 01 00
	00		 je	 $LN65@ioINILoade
  00256	32 d3		 xor	 dl, bl
  00258	88 50 22	 mov	 BYTE PTR [eax+34], dl
  0025b	8a 51 23	 mov	 dl, BYTE PTR [ecx+35]
  0025e	84 d2		 test	 dl, dl
  00260	0f 84 2e 01 00
	00		 je	 $LN64@ioINILoade
  00266	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00269	88 50 23	 mov	 BYTE PTR [eax+35], dl
  0026c	8a 51 24	 mov	 dl, BYTE PTR [ecx+36]
  0026f	84 d2		 test	 dl, dl
  00271	0f 84 14 01 00
	00		 je	 $LN63@ioINILoade
  00277	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0027a	88 50 24	 mov	 BYTE PTR [eax+36], dl
  0027d	8a 51 25	 mov	 dl, BYTE PTR [ecx+37]
  00280	84 d2		 test	 dl, dl
  00282	0f 84 fa 00 00
	00		 je	 $LN62@ioINILoade
  00288	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0028b	88 50 25	 mov	 BYTE PTR [eax+37], dl
  0028e	8a 51 26	 mov	 dl, BYTE PTR [ecx+38]
  00291	84 d2		 test	 dl, dl
  00293	0f 84 e1 00 00
	00		 je	 $LN61@ioINILoade
  00299	32 d3		 xor	 dl, bl
  0029b	88 50 26	 mov	 BYTE PTR [eax+38], dl
  0029e	8a 51 27	 mov	 dl, BYTE PTR [ecx+39]
  002a1	84 d2		 test	 dl, dl
  002a3	0f 84 c8 00 00
	00		 je	 $LN60@ioINILoade
  002a9	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  002ac	88 50 27	 mov	 BYTE PTR [eax+39], dl
  002af	8a 51 28	 mov	 dl, BYTE PTR [ecx+40]
  002b2	84 d2		 test	 dl, dl
  002b4	0f 84 ae 00 00
	00		 je	 $LN59@ioINILoade
  002ba	80 f2 ed	 xor	 dl, -19			; ffffffedH
  002bd	88 50 28	 mov	 BYTE PTR [eax+40], dl
  002c0	8a 51 29	 mov	 dl, BYTE PTR [ecx+41]
  002c3	84 d2		 test	 dl, dl
  002c5	0f 84 94 00 00
	00		 je	 $LN58@ioINILoade
  002cb	80 f2 ec	 xor	 dl, -20			; ffffffecH
  002ce	88 50 29	 mov	 BYTE PTR [eax+41], dl
  002d1	8a 51 2a	 mov	 dl, BYTE PTR [ecx+42]
  002d4	84 d2		 test	 dl, dl
  002d6	74 7f		 je	 SHORT $LN57@ioINILoade
  002d8	32 d3		 xor	 dl, bl
  002da	88 50 2a	 mov	 BYTE PTR [eax+42], dl
  002dd	8a 51 2b	 mov	 dl, BYTE PTR [ecx+43]
  002e0	84 d2		 test	 dl, dl
  002e2	74 6a		 je	 SHORT $LN56@ioINILoade
  002e4	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  002e7	88 50 2b	 mov	 BYTE PTR [eax+43], dl
  002ea	8a 51 2c	 mov	 dl, BYTE PTR [ecx+44]
  002ed	84 d2		 test	 dl, dl
  002ef	74 54		 je	 SHORT $LN55@ioINILoade
  002f1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  002f4	88 50 2c	 mov	 BYTE PTR [eax+44], dl
  002f7	8a 51 2d	 mov	 dl, BYTE PTR [ecx+45]
  002fa	84 d2		 test	 dl, dl
  002fc	74 3e		 je	 SHORT $LN54@ioINILoade
  002fe	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00301	88 50 2d	 mov	 BYTE PTR [eax+45], dl
  00304	8a 51 2e	 mov	 dl, BYTE PTR [ecx+46]
  00307	84 d2		 test	 dl, dl
  00309	74 29		 je	 SHORT $LN53@ioINILoade
  0030b	32 d3		 xor	 dl, bl
  0030d	88 50 2e	 mov	 BYTE PTR [eax+46], dl
  00310	8a 51 2f	 mov	 dl, BYTE PTR [ecx+47]
  00313	84 d2		 test	 dl, dl
  00315	74 14		 je	 SHORT $LN52@ioINILoade
  00317	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0031a	88 50 2f	 mov	 BYTE PTR [eax+47], dl
  0031d	8a 49 30	 mov	 cl, BYTE PTR [ecx+48]
  00320	80 f1 ed	 xor	 cl, -19			; ffffffedH
  00323	88 48 30	 mov	 BYTE PTR [eax+48], cl
  00326	e9 5d 01 00 00	 jmp	 $LN4@ioINILoade
$LN52@ioINILoade:
  0032b	c6 40 2f ea	 mov	 BYTE PTR [eax+47], -22	; ffffffeaH
  0032f	e9 54 01 00 00	 jmp	 $LN4@ioINILoade
$LN53@ioINILoade:
  00334	88 58 2e	 mov	 BYTE PTR [eax+46], bl
  00337	e9 4c 01 00 00	 jmp	 $LN4@ioINILoade
$LN54@ioINILoade:
  0033c	c6 40 2d ec	 mov	 BYTE PTR [eax+45], -20	; ffffffecH
  00340	e9 43 01 00 00	 jmp	 $LN4@ioINILoade
$LN55@ioINILoade:
  00345	c6 40 2c ed	 mov	 BYTE PTR [eax+44], -19	; ffffffedH
  00349	e9 3a 01 00 00	 jmp	 $LN4@ioINILoade
$LN56@ioINILoade:
  0034e	c6 40 2b ea	 mov	 BYTE PTR [eax+43], -22	; ffffffeaH
  00352	e9 31 01 00 00	 jmp	 $LN4@ioINILoade
$LN57@ioINILoade:
  00357	88 58 2a	 mov	 BYTE PTR [eax+42], bl
  0035a	e9 29 01 00 00	 jmp	 $LN4@ioINILoade
$LN58@ioINILoade:
  0035f	c6 40 29 ec	 mov	 BYTE PTR [eax+41], -20	; ffffffecH
  00363	e9 20 01 00 00	 jmp	 $LN4@ioINILoade
$LN59@ioINILoade:
  00368	c6 40 28 ed	 mov	 BYTE PTR [eax+40], -19	; ffffffedH
  0036c	e9 17 01 00 00	 jmp	 $LN4@ioINILoade
$LN60@ioINILoade:
  00371	c6 40 27 ea	 mov	 BYTE PTR [eax+39], -22	; ffffffeaH
  00375	e9 0e 01 00 00	 jmp	 $LN4@ioINILoade
$LN61@ioINILoade:
  0037a	88 58 26	 mov	 BYTE PTR [eax+38], bl
  0037d	e9 06 01 00 00	 jmp	 $LN4@ioINILoade
$LN62@ioINILoade:
  00382	c6 40 25 ec	 mov	 BYTE PTR [eax+37], -20	; ffffffecH
  00386	e9 fd 00 00 00	 jmp	 $LN4@ioINILoade
$LN63@ioINILoade:
  0038b	c6 40 24 ed	 mov	 BYTE PTR [eax+36], -19	; ffffffedH
  0038f	e9 f4 00 00 00	 jmp	 $LN4@ioINILoade
$LN64@ioINILoade:
  00394	c6 40 23 ea	 mov	 BYTE PTR [eax+35], -22	; ffffffeaH
  00398	e9 eb 00 00 00	 jmp	 $LN4@ioINILoade
$LN65@ioINILoade:
  0039d	88 58 22	 mov	 BYTE PTR [eax+34], bl
  003a0	e9 e3 00 00 00	 jmp	 $LN4@ioINILoade
$LN66@ioINILoade:
  003a5	c6 40 21 ec	 mov	 BYTE PTR [eax+33], -20	; ffffffecH
  003a9	e9 da 00 00 00	 jmp	 $LN4@ioINILoade
$LN67@ioINILoade:
  003ae	c6 40 20 ed	 mov	 BYTE PTR [eax+32], -19	; ffffffedH
  003b2	e9 d1 00 00 00	 jmp	 $LN4@ioINILoade
$LN68@ioINILoade:
  003b7	c6 40 1f ea	 mov	 BYTE PTR [eax+31], -22	; ffffffeaH
  003bb	e9 c8 00 00 00	 jmp	 $LN4@ioINILoade
$LN69@ioINILoade:
  003c0	88 58 1e	 mov	 BYTE PTR [eax+30], bl
  003c3	e9 c0 00 00 00	 jmp	 $LN4@ioINILoade
$LN70@ioINILoade:
  003c8	c6 40 1d ec	 mov	 BYTE PTR [eax+29], -20	; ffffffecH
  003cc	e9 b7 00 00 00	 jmp	 $LN4@ioINILoade
$LN71@ioINILoade:
  003d1	c6 40 1c ed	 mov	 BYTE PTR [eax+28], -19	; ffffffedH
  003d5	e9 ae 00 00 00	 jmp	 $LN4@ioINILoade
$LN72@ioINILoade:
  003da	c6 40 1b ea	 mov	 BYTE PTR [eax+27], -22	; ffffffeaH
  003de	e9 a5 00 00 00	 jmp	 $LN4@ioINILoade
$LN73@ioINILoade:
  003e3	88 58 1a	 mov	 BYTE PTR [eax+26], bl
  003e6	e9 9d 00 00 00	 jmp	 $LN4@ioINILoade
$LN74@ioINILoade:
  003eb	c6 40 19 ec	 mov	 BYTE PTR [eax+25], -20	; ffffffecH
  003ef	e9 94 00 00 00	 jmp	 $LN4@ioINILoade
$LN75@ioINILoade:
  003f4	c6 40 18 ed	 mov	 BYTE PTR [eax+24], -19	; ffffffedH
  003f8	e9 8b 00 00 00	 jmp	 $LN4@ioINILoade
$LN76@ioINILoade:
  003fd	c6 40 17 ea	 mov	 BYTE PTR [eax+23], -22	; ffffffeaH
  00401	e9 82 00 00 00	 jmp	 $LN4@ioINILoade
$LN77@ioINILoade:
  00406	88 58 16	 mov	 BYTE PTR [eax+22], bl
  00409	eb 7d		 jmp	 SHORT $LN4@ioINILoade
$LN78@ioINILoade:
  0040b	c6 40 15 ec	 mov	 BYTE PTR [eax+21], -20	; ffffffecH
  0040f	eb 77		 jmp	 SHORT $LN4@ioINILoade
$LN79@ioINILoade:
  00411	c6 40 14 ed	 mov	 BYTE PTR [eax+20], -19	; ffffffedH
  00415	eb 71		 jmp	 SHORT $LN4@ioINILoade
$LN80@ioINILoade:
  00417	c6 40 13 ea	 mov	 BYTE PTR [eax+19], -22	; ffffffeaH
  0041b	eb 6b		 jmp	 SHORT $LN4@ioINILoade
$LN81@ioINILoade:
  0041d	88 58 12	 mov	 BYTE PTR [eax+18], bl
  00420	eb 66		 jmp	 SHORT $LN4@ioINILoade
$LN82@ioINILoade:
  00422	c6 40 11 ec	 mov	 BYTE PTR [eax+17], -20	; ffffffecH
  00426	eb 60		 jmp	 SHORT $LN4@ioINILoade
$LN83@ioINILoade:
  00428	c6 40 10 ed	 mov	 BYTE PTR [eax+16], -19	; ffffffedH
  0042c	eb 5a		 jmp	 SHORT $LN4@ioINILoade
$LN84@ioINILoade:
  0042e	c6 40 0f ea	 mov	 BYTE PTR [eax+15], -22	; ffffffeaH
  00432	eb 54		 jmp	 SHORT $LN4@ioINILoade
$LN85@ioINILoade:
  00434	88 58 0e	 mov	 BYTE PTR [eax+14], bl
  00437	eb 4f		 jmp	 SHORT $LN4@ioINILoade
$LN86@ioINILoade:
  00439	c6 40 0d ec	 mov	 BYTE PTR [eax+13], -20	; ffffffecH
  0043d	eb 49		 jmp	 SHORT $LN4@ioINILoade
$LN87@ioINILoade:
  0043f	c6 40 0c ed	 mov	 BYTE PTR [eax+12], -19	; ffffffedH
  00443	eb 43		 jmp	 SHORT $LN4@ioINILoade
$LN88@ioINILoade:
  00445	c6 40 0b ea	 mov	 BYTE PTR [eax+11], -22	; ffffffeaH
  00449	eb 3d		 jmp	 SHORT $LN4@ioINILoade
$LN89@ioINILoade:
  0044b	88 58 0a	 mov	 BYTE PTR [eax+10], bl
  0044e	eb 38		 jmp	 SHORT $LN4@ioINILoade
$LN90@ioINILoade:
  00450	c6 40 09 ec	 mov	 BYTE PTR [eax+9], -20	; ffffffecH
  00454	eb 32		 jmp	 SHORT $LN4@ioINILoade
$LN91@ioINILoade:
  00456	c6 40 08 ed	 mov	 BYTE PTR [eax+8], -19	; ffffffedH
  0045a	eb 2c		 jmp	 SHORT $LN4@ioINILoade
$LN92@ioINILoade:
  0045c	c6 40 07 ea	 mov	 BYTE PTR [eax+7], -22	; ffffffeaH
  00460	eb 26		 jmp	 SHORT $LN4@ioINILoade
$LN93@ioINILoade:
  00462	88 58 06	 mov	 BYTE PTR [eax+6], bl
  00465	eb 21		 jmp	 SHORT $LN4@ioINILoade
$LN94@ioINILoade:
  00467	c6 40 05 ec	 mov	 BYTE PTR [eax+5], -20	; ffffffecH
  0046b	eb 1b		 jmp	 SHORT $LN4@ioINILoade
$LN95@ioINILoade:
  0046d	c6 40 04 ed	 mov	 BYTE PTR [eax+4], -19	; ffffffedH
  00471	eb 15		 jmp	 SHORT $LN4@ioINILoade
$LN96@ioINILoade:
  00473	c6 40 03 ea	 mov	 BYTE PTR [eax+3], -22	; ffffffeaH
  00477	eb 0f		 jmp	 SHORT $LN4@ioINILoade
$LN97@ioINILoade:
  00479	c6 40 02 eb	 mov	 BYTE PTR [eax+2], -21	; ffffffebH
  0047d	eb 09		 jmp	 SHORT $LN4@ioINILoade
$LN98@ioINILoade:
  0047f	c6 40 01 ec	 mov	 BYTE PTR [eax+1], -20	; ffffffecH
  00483	eb 03		 jmp	 SHORT $LN4@ioINILoade
$LN99@ioINILoade:
  00485	c6 00 ed	 mov	 BYTE PTR [eax], -19	; ffffffedH
$LN4@ioINILoade:
  00488	6a 06		 push	 6
  0048a	8b c8		 mov	 ecx, eax
  0048c	c6 40 1b 00	 mov	 BYTE PTR [eax+27], 0
  00490	5a		 pop	 edx
$LL107@ioINILoade:
  00491	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  00497	83 c1 04	 add	 ecx, 4
  0049a	4a		 dec	 edx
  0049b	75 f4		 jne	 SHORT $LL107@ioINILoade
  0049d	6a 18		 push	 24			; 00000018H
  0049f	5e		 pop	 esi
$LL104@ioINILoade:
  004a0	8b ce		 mov	 ecx, esi
  004a2	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  004a8	79 05		 jns	 SHORT $LN114@ioINILoade
  004aa	49		 dec	 ecx
  004ab	83 c9 fc	 or	 ecx, -4			; fffffffcH
  004ae	41		 inc	 ecx
$LN114@ioINILoade:
  004af	b2 ed		 mov	 dl, -19			; ffffffedH
  004b1	2a d1		 sub	 dl, cl
  004b3	30 14 06	 xor	 BYTE PTR [esi+eax], dl
  004b6	46		 inc	 esi
  004b7	83 fe 1b	 cmp	 esi, 27			; 0000001bH
  004ba	7c e4		 jl	 SHORT $LL104@ioINILoade
  004bc	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  004bf	8b cf		 mov	 ecx, edi
  004c1	50		 push	 eax
  004c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioINILoader@@QAE@PBD_N@Z

; 225  : 	}

  004c8	8b c7		 mov	 eax, edi
  004ca	5f		 pop	 edi
  004cb	5e		 pop	 esi
  004cc	5b		 pop	 ebx
  004cd	5d		 pop	 ebp
  004ce	c2 08 00	 ret	 8
??$?0$0BM@@ioINILoader_e@@QAE@AAY0BM@$$CBD_N@Z ENDP	; ioINILoader_e::ioINILoader_e<28>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UShakeCamera@@@std@@UShakeCamera@@ABU3@@std@@YAXAAV?$allocator@UShakeCamera@@@0@PAUShakeCamera@@ABU2@@Z ; std::_Cons_val<std::allocator<ShakeCamera>,ShakeCamera,ShakeCamera const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UShakeCamera@@@std@@UShakeCamera@@ABU3@@std@@YAXAAV?$allocator@UShakeCamera@@@0@PAUShakeCamera@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UShakeCamera@@@std@@UShakeCamera@@ABU3@@std@@YAXAAV?$allocator@UShakeCamera@@@0@PAUShakeCamera@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<ShakeCamera>,ShakeCamera,ShakeCamera const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN9@Cons_val@2
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	6a 0b		 push	 11			; 0000000bH
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN9@Cons_val@2:
  00015	5f		 pop	 edi

; 281  : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Cons_val@V?$allocator@UShakeCamera@@@std@@UShakeCamera@@ABU3@@std@@YAXAAV?$allocator@UShakeCamera@@@0@PAUShakeCamera@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<ShakeCamera>,ShakeCamera,ShakeCamera const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUShakeCamera@@PAU1@@std@@YAPAUShakeCamera@@PAU1@00@Z ; std::_Move<ShakeCamera *,ShakeCamera *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUShakeCamera@@PAU1@@std@@YAPAUShakeCamera@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$515682 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUShakeCamera@@PAU1@@std@@YAPAUShakeCamera@@PAU1@00@Z PROC ; std::_Move<ShakeCamera *,ShakeCamera *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$515682[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAUShakeCamera@@PAU1@@std@@YAPAUShakeCamera@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ShakeCamera *,ShakeCamera *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAUShakeCamera@@PAU1@@std@@YAPAUShakeCamera@@PAU1@00@Z ENDP ; std::_Move<ShakeCamera *,ShakeCamera *>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UShakeCamera@@@std@@UShakeCamera@@@std@@YAXAAV?$allocator@UShakeCamera@@@0@PAUShakeCamera@@@Z ; std::_Dest_val<std::allocator<ShakeCamera>,ShakeCamera>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UShakeCamera@@@std@@UShakeCamera@@@std@@YAXAAV?$allocator@UShakeCamera@@@0@PAUShakeCamera@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UShakeCamera@@@std@@UShakeCamera@@@std@@YAXAAV?$allocator@UShakeCamera@@@0@PAUShakeCamera@@@Z PROC ; std::_Dest_val<std::allocator<ShakeCamera>,ShakeCamera>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UShakeCamera@@@std@@UShakeCamera@@@std@@YAXAAV?$allocator@UShakeCamera@@@0@PAUShakeCamera@@@Z ENDP ; std::_Dest_val<std::allocator<ShakeCamera>,ShakeCamera>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UShakeCamera@@@std@@UShakeCamera@@U3@@std@@YAXAAV?$allocator@UShakeCamera@@@0@PAUShakeCamera@@$$QAU2@@Z ; std::_Cons_val<std::allocator<ShakeCamera>,ShakeCamera,ShakeCamera>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UShakeCamera@@@std@@UShakeCamera@@U3@@std@@YAXAAV?$allocator@UShakeCamera@@@0@PAUShakeCamera@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UShakeCamera@@@std@@UShakeCamera@@U3@@std@@YAXAAV?$allocator@UShakeCamera@@@0@PAUShakeCamera@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<ShakeCamera>,ShakeCamera,ShakeCamera>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN7@Cons_val@3
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	6a 0b		 push	 11			; 0000000bH
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN7@Cons_val@3:
  00015	5f		 pop	 edi

; 281  : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Cons_val@V?$allocator@UShakeCamera@@@std@@UShakeCamera@@U3@@std@@YAXAAV?$allocator@UShakeCamera@@@0@PAUShakeCamera@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<ShakeCamera>,ShakeCamera,ShakeCamera>
_TEXT	ENDS
PUBLIC	?begin@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@XZ ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@XZ PROC ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@XZ ENDP ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@XZ ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@XZ PROC ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@XZ ENDP ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::end
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UShakeCamera@@@std@@@std@@YAXPAUShakeCamera@@0AAV?$allocator@UShakeCamera@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ShakeCamera> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UShakeCamera@@@std@@@std@@YAXPAUShakeCamera@@0AAV?$allocator@UShakeCamera@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UShakeCamera@@@std@@@std@@YAXPAUShakeCamera@@0AAV?$allocator@UShakeCamera@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ShakeCamera> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UShakeCamera@@@std@@@std@@YAXPAUShakeCamera@@0AAV?$allocator@UShakeCamera@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ShakeCamera> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUShakeCamera@@PAU1@V?$allocator@UShakeCamera@@@std@@U1@@std@@YAPAUShakeCamera@@PAU1@00AAV?$allocator@UShakeCamera@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ShakeCamera *,ShakeCamera *,std::allocator<ShakeCamera>,ShakeCamera>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUShakeCamera@@PAU1@V?$allocator@UShakeCamera@@@std@@U1@@std@@YAPAUShakeCamera@@PAU1@00AAV?$allocator@UShakeCamera@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUShakeCamera@@PAU1@V?$allocator@UShakeCamera@@@std@@U1@@std@@YAPAUShakeCamera@@PAU1@00AAV?$allocator@UShakeCamera@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ShakeCamera *,ShakeCamera *,std::allocator<ShakeCamera>,ShakeCamera>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 16		 jmp	 SHORT $LN24@Uninit_mov
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00009	56		 push	 esi
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UShakeCamera@@@std@@UShakeCamera@@U3@@std@@YAXAAV?$allocator@UShakeCamera@@@0@PAUShakeCamera@@$$QAU2@@Z ; std::_Cons_val<std::allocator<ShakeCamera>,ShakeCamera,ShakeCamera>
  00015	83 45 10 2c	 add	 DWORD PTR __Dest$[ebp], 44 ; 0000002cH
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	83 c6 2c	 add	 esi, 44			; 0000002cH
$LN24@Uninit_mov:

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001f	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00022	75 e5		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00024	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00027	5e		 pop	 esi

; 438  : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Uninit_move@PAUShakeCamera@@PAU1@V?$allocator@UShakeCamera@@@std@@U1@@std@@YAPAUShakeCamera@@PAU1@00AAV?$allocator@UShakeCamera@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ShakeCamera *,ShakeCamera *,std::allocator<ShakeCamera>,ShakeCamera>
_TEXT	ENDS
PUBLIC	?SetShakeCamera@ioShakeCameraManager@@QAEXHH@Z	; ioShakeCameraManager::SetShakeCamera
EXTRN	?RollCameraStart@ioPlayStage@@QAEXABUShakeCamera@@@Z:PROC ; ioPlayStage::RollCameraStart
EXTRN	?ShakeCameraStart@ioPlayStage@@QAEXABUShakeCamera@@H@Z:PROC ; ioPlayStage::ShakeCameraStart
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioshakecameramanager.cpp
;	COMDAT ?SetShakeCamera@ioShakeCameraManager@@QAEXHH@Z
_TEXT	SEGMENT
_iShakeType$ = 8					; size = 4
_iPriority$ = 12					; size = 4
?SetShakeCamera@ioShakeCameraManager@@QAEXHH@Z PROC	; ioShakeCameraManager::SetShakeCamera, COMDAT
; _this$ = ecx

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 56   : 	if( iShakeType <= 0)

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _iShakeType$[ebp]
  00009	85 c9		 test	 ecx, ecx
  0000b	7e 30		 jle	 SHORT $LN1@SetShakeCa

; 57   : 		return;
; 58   : 
; 59   : 	ShakeCameraList::iterator iter = m_ShakeCameraList.begin();
; 60   : 	for( ; iter!= m_ShakeCameraList.end() ; ++iter )

  0000d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00010	57		 push	 edi
  00011	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00014	eb 07		 jmp	 SHORT $LN43@SetShakeCa
$LL19@SetShakeCa:

; 61   : 	{
; 62   : 		const ShakeCamera &eShake = *iter;
; 63   : 		if( eShake.iShakeID == iShakeType )

  00016	39 0f		 cmp	 DWORD PTR [edi], ecx
  00018	74 09		 je	 SHORT $LN40@SetShakeCa

; 57   : 		return;
; 58   : 
; 59   : 	ShakeCameraList::iterator iter = m_ShakeCameraList.begin();
; 60   : 	for( ; iter!= m_ShakeCameraList.end() ; ++iter )

  0001a	83 c7 2c	 add	 edi, 44			; 0000002cH
$LN43@SetShakeCa:
  0001d	3b f8		 cmp	 edi, eax
  0001f	75 f5		 jne	 SHORT $LL19@SetShakeCa

; 61   : 	{
; 62   : 		const ShakeCamera &eShake = *iter;
; 63   : 		if( eShake.iShakeID == iShakeType )

  00021	eb 19		 jmp	 SHORT $LN42@SetShakeCa
$LN40@SetShakeCa:

; 64   : 		{
; 65   : 			if( m_pPlayStage )

  00023	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00026	85 c9		 test	 ecx, ecx
  00028	74 12		 je	 SHORT $LN42@SetShakeCa

; 66   : 			{
; 67   : 				m_pPlayStage->ShakeCameraStart( eShake, iPriority );

  0002a	ff 75 0c	 push	 DWORD PTR _iPriority$[ebp]
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ?ShakeCameraStart@ioPlayStage@@QAEXABUShakeCamera@@H@Z ; ioPlayStage::ShakeCameraStart

; 68   : 				m_pPlayStage->RollCameraStart( eShake );

  00033	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00036	57		 push	 edi
  00037	e8 00 00 00 00	 call	 ?RollCameraStart@ioPlayStage@@QAEXABUShakeCamera@@@Z ; ioPlayStage::RollCameraStart
$LN42@SetShakeCa:
  0003c	5f		 pop	 edi
$LN1@SetShakeCa:
  0003d	5e		 pop	 esi

; 69   : 			}
; 70   : 			break;
; 71   : 		}
; 72   : 	}
; 73   : }

  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
?SetShakeCamera@ioShakeCameraManager@@QAEXHH@Z ENDP	; ioShakeCameraManager::SetShakeCamera
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UShakeCamera@@@std@@@std@@YAXPAUShakeCamera@@0AAV?$allocator@UShakeCamera@@@0@@Z ; std::_Destroy_range<std::allocator<ShakeCamera> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UShakeCamera@@@std@@@std@@YAXPAUShakeCamera@@0AAV?$allocator@UShakeCamera@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UShakeCamera@@@std@@@std@@YAXPAUShakeCamera@@0AAV?$allocator@UShakeCamera@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ShakeCamera> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UShakeCamera@@@std@@@std@@YAXPAUShakeCamera@@0AAV?$allocator@UShakeCamera@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ShakeCamera> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUShakeCamera@@PAU1@V?$allocator@UShakeCamera@@@std@@@std@@YAPAUShakeCamera@@PAU1@00AAV?$allocator@UShakeCamera@@@0@@Z ; std::_Uninitialized_move<ShakeCamera *,ShakeCamera *,std::allocator<ShakeCamera> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUShakeCamera@@PAU1@V?$allocator@UShakeCamera@@@std@@@std@@YAPAUShakeCamera@@PAU1@00AAV?$allocator@UShakeCamera@@@0@@Z
_TEXT	SEGMENT
__Cat$515939 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUShakeCamera@@PAU1@V?$allocator@UShakeCamera@@@std@@@std@@YAPAUShakeCamera@@PAU1@00AAV?$allocator@UShakeCamera@@@0@@Z PROC ; std::_Uninitialized_move<ShakeCamera *,ShakeCamera *,std::allocator<ShakeCamera> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$515939[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUShakeCamera@@PAU1@V?$allocator@UShakeCamera@@@std@@U1@@std@@YAPAUShakeCamera@@PAU1@00AAV?$allocator@UShakeCamera@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ShakeCamera *,ShakeCamera *,std::allocator<ShakeCamera>,ShakeCamera>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAUShakeCamera@@PAU1@V?$allocator@UShakeCamera@@@std@@@std@@YAPAUShakeCamera@@PAU1@00AAV?$allocator@UShakeCamera@@@0@@Z ENDP ; std::_Uninitialized_move<ShakeCamera *,ShakeCamera *,std::allocator<ShakeCamera> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IAEXPAUShakeCamera@@0@Z ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IAEXPAUShakeCamera@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IAEXPAUShakeCamera@@0@Z PROC ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IAEXPAUShakeCamera@@0@Z ENDP ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IAEXXZ ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IAEXXZ PROC ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN21@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN21@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IAEXXZ ENDP ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Umove@PAUShakeCamera@@@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IAEPAUShakeCamera@@PAU2@00@Z ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Umove<ShakeCamera *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAUShakeCamera@@@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IAEPAUShakeCamera@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUShakeCamera@@@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IAEPAUShakeCamera@@PAU2@00@Z PROC ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Umove<ShakeCamera *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUShakeCamera@@PAU1@V?$allocator@UShakeCamera@@@std@@@std@@YAPAUShakeCamera@@PAU1@00AAV?$allocator@UShakeCamera@@@0@@Z ; std::_Uninitialized_move<ShakeCamera *,ShakeCamera *,std::allocator<ShakeCamera> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUShakeCamera@@@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IAEPAUShakeCamera@@PAU2@00@Z ENDP ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Umove<ShakeCamera *>
_TEXT	ENDS
PUBLIC	??1?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE@XZ ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::~vector<ShakeCamera,std::allocator<ShakeCamera> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE@XZ PROC ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::~vector<ShakeCamera,std::allocator<ShakeCamera> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IAEXXZ ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Tidy
??1?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE@XZ ENDP ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::~vector<ShakeCamera,std::allocator<ShakeCamera> >
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXI@Z ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::reserve
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
__Ptr$512249 = 8					; size = 4
__Count$ = 8						; size = 4
?reserve@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXI@Z PROC ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00011	81 fb 5d 74 d1
	05		 cmp	 ebx, 97612893		; 05d1745dH
  00017	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN56@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00024	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00027	2b 06		 sub	 eax, DWORD PTR [esi]
  00029	6a 2c		 push	 44			; 0000002cH
  0002b	99		 cdq
  0002c	59		 pop	 ecx
  0002d	f7 f9		 idiv	 ecx
  0002f	3b c3		 cmp	 eax, ebx
  00031	73 6b		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00033	6a 00		 push	 0
  00035	53		 push	 ebx
  00036	e8 00 00 00 00	 call	 ??$_Allocate@UShakeCamera@@@std@@YAPAUShakeCamera@@IPAU1@@Z ; std::_Allocate<ShakeCamera>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  0003b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00041	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00044	52		 push	 edx
  00045	89 45 08	 mov	 DWORD PTR __Ptr$512249[ebp], eax
  00048	ff 75 08	 push	 DWORD PTR __Ptr$512249[ebp]
  0004b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004e	50		 push	 eax
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUShakeCamera@@PAU1@V?$allocator@UShakeCamera@@@std@@@std@@YAPAUShakeCamera@@PAU1@00AAV?$allocator@UShakeCamera@@@0@@Z ; std::_Uninitialized_move<ShakeCamera *,ShakeCamera *,std::allocator<ShakeCamera> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00055	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00057	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005a	83 c4 18	 add	 esp, 24			; 00000018H
  0005d	2b c1		 sub	 eax, ecx
  0005f	6a 2c		 push	 44			; 0000002cH
  00061	99		 cdq
  00062	5f		 pop	 edi
  00063	f7 ff		 idiv	 edi
  00065	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00069	8b f8		 mov	 edi, eax
  0006b	85 c9		 test	 ecx, ecx
  0006d	74 12		 je	 SHORT $LN48@reserve

; 761  : 			if (this->_Myfirst != 0)

  0006f	eb 03		 jmp	 SHORT $LN55@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

$LL39@reserve:
  00071	83 c1 2c	 add	 ecx, 44			; 0000002cH
$LN55@reserve:
  00074	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  00077	75 f8		 jne	 SHORT $LL39@reserve

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00079	ff 36		 push	 DWORD PTR [esi]
  0007b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00080	59		 pop	 ecx
$LN48@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00081	8b ce		 mov	 ecx, esi
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00089	6b db 2c	 imul	 ebx, 44			; 0000002cH

; 770  : 			this->_Mylast = _Ptr + _Size;

  0008c	6b ff 2c	 imul	 edi, 44			; 0000002cH
  0008f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$512249[ebp]
  00092	03 d8		 add	 ebx, eax
  00094	03 f8		 add	 edi, eax
  00096	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00099	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  0009c	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  0009e	e8 00 00 00 00	 call	 __EH_epilog3
  000a3	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000a6	ff 75 08	 push	 DWORD PTR __Ptr$512249[ebp]
  000a9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ae	59		 pop	 ecx

; 757  : 			_RERAISE;

  000af	6a 00		 push	 0
  000b1	6a 00		 push	 0
  000b3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN57@reserve:
$LN54@reserve:
  000b8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXI@Z ENDP ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::reserve
PUBLIC	?erase@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@0@Z ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$516303 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@0@Z PROC ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$516303[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAUShakeCamera@@PAU1@@std@@YAPAUShakeCamera@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ShakeCamera *,ShakeCamera *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@0@Z ENDP ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::erase
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IAEXI@Z ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IAEXI@Z PROC ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 2c		 push	 44			; 0000002cH
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 5d 74 d1 05	 mov	 eax, 97612893		; 05d1745dH
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00030	2b c1		 sub	 eax, ecx
  00032	6a 2c		 push	 44			; 0000002cH
  00034	99		 cdq
  00035	59		 pop	 ecx
  00036	f7 f9		 idiv	 ecx
  00038	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003b	3b f8		 cmp	 edi, eax
  0003d	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003f	57		 push	 edi
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IBEII@Z ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Grow_to
  00047	50		 push	 eax
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?reserve@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXI@Z ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::reserve
$LN1@Reserve:
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 1298 : 		}

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Reserve
_TEXT	ENDS
PUBLIC	??_7ioShakeCameraManager@@6B@			; ioShakeCameraManager::`vftable'
PUBLIC	??0ioShakeCameraManager@@QAE@PAVioPlayStage@@@Z	; ioShakeCameraManager::ioShakeCameraManager
PUBLIC	??_R4ioShakeCameraManager@@6B@			; ioShakeCameraManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioShakeCameraManager@@@8		; ioShakeCameraManager `RTTI Type Descriptor'
PUBLIC	??_R3ioShakeCameraManager@@8			; ioShakeCameraManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioShakeCameraManager@@8			; ioShakeCameraManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioShakeCameraManager@@8		; ioShakeCameraManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@?$Singleton@VioShakeCameraManager@@@@8 ; Singleton<ioShakeCameraManager>::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AV?$Singleton@VioShakeCameraManager@@@@@8	; Singleton<ioShakeCameraManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$Singleton@VioShakeCameraManager@@@@8	; Singleton<ioShakeCameraManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$Singleton@VioShakeCameraManager@@@@8	; Singleton<ioShakeCameraManager>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$Singleton@VioShakeCameraManager@@@@8 ; Singleton<ioShakeCameraManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EioShakeCameraManager@@UAEPAXI@Z:PROC	; ioShakeCameraManager::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$Singleton@VioShakeCameraManager@@@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R1A@?0A@EA@?$Singleton@VioShakeCameraManager@@@@8 DD FLAT:??_R0?AV?$Singleton@VioShakeCameraManager@@@@@8 ; Singleton<ioShakeCameraManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Singleton@VioShakeCameraManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$Singleton@VioShakeCameraManager@@@@8
rdata$r	SEGMENT
??_R2?$Singleton@VioShakeCameraManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$Singleton@VioShakeCameraManager@@@@8 ; Singleton<ioShakeCameraManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$Singleton@VioShakeCameraManager@@@@8
rdata$r	SEGMENT
??_R3?$Singleton@VioShakeCameraManager@@@@8 DD 00H	; Singleton<ioShakeCameraManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$Singleton@VioShakeCameraManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$Singleton@VioShakeCameraManager@@@@@8
_DATA	SEGMENT
??_R0?AV?$Singleton@VioShakeCameraManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; Singleton<ioShakeCameraManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$Singleton@VioShakeCameraManager@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@?$Singleton@VioShakeCameraManager@@@@8
rdata$r	SEGMENT
??_R13?0A@EA@?$Singleton@VioShakeCameraManager@@@@8 DD FLAT:??_R0?AV?$Singleton@VioShakeCameraManager@@@@@8 ; Singleton<ioShakeCameraManager>::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Singleton@VioShakeCameraManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioShakeCameraManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioShakeCameraManager@@8 DD FLAT:??_R0?AVioShakeCameraManager@@@8 ; ioShakeCameraManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioShakeCameraManager@@8
rdata$r	ENDS
;	COMDAT ??_R2ioShakeCameraManager@@8
rdata$r	SEGMENT
??_R2ioShakeCameraManager@@8 DD FLAT:??_R1A@?0A@EA@ioShakeCameraManager@@8 ; ioShakeCameraManager::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@?$Singleton@VioShakeCameraManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3ioShakeCameraManager@@8
rdata$r	SEGMENT
??_R3ioShakeCameraManager@@8 DD 00H			; ioShakeCameraManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioShakeCameraManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioShakeCameraManager@@@8
_DATA	SEGMENT
??_R0?AVioShakeCameraManager@@@8 DD FLAT:??_7type_info@@6B@ ; ioShakeCameraManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioShakeCameraManager@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioShakeCameraManager@@6B@
rdata$r	SEGMENT
??_R4ioShakeCameraManager@@6B@ DD 00H			; ioShakeCameraManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioShakeCameraManager@@@8
	DD	FLAT:??_R3ioShakeCameraManager@@8
rdata$r	ENDS
;	COMDAT ??_7ioShakeCameraManager@@6B@
CONST	SEGMENT
??_7ioShakeCameraManager@@6B@ DD FLAT:??_R4ioShakeCameraManager@@6B@ ; ioShakeCameraManager::`vftable'
	DD	FLAT:??_EioShakeCameraManager@@UAEPAXI@Z
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioshakecameramanager.cpp
CONST	ENDS
;	COMDAT ??0ioShakeCameraManager@@QAE@PAVioPlayStage@@@Z
_TEXT	SEGMENT
_pStage$ = 8						; size = 4
??0ioShakeCameraManager@@QAE@PAVioPlayStage@@@Z PROC	; ioShakeCameraManager::ioShakeCameraManager, COMDAT
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	a3 00 00 00 00	 mov	 DWORD PTR ?ms_Singleton@?$Singleton@VioShakeCameraManager@@@@1PAVioShakeCameraManager@@A, eax ; Singleton<ioShakeCameraManager>::ms_Singleton
  0000a	33 c9		 xor	 ecx, ecx
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ioShakeCameraManager@@6B@
  00012	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00015	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00018	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 12   : 	m_pPlayStage = pStage;

  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _pStage$[ebp]
  0001e	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 13   : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??0ioShakeCameraManager@@QAE@PAVioPlayStage@@@Z ENDP	; ioShakeCameraManager::ioShakeCameraManager
_TEXT	ENDS
PUBLIC	??1ioShakeCameraManager@@UAE@XZ			; ioShakeCameraManager::~ioShakeCameraManager
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
xdata$x	SEGMENT
__unwindtable$??1ioShakeCameraManager@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioShakeCameraManager@@UAE@XZ$0
__ehfuncinfo$??1ioShakeCameraManager@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ioShakeCameraManager@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioshakecameramanager.cpp
xdata$x	ENDS
;	COMDAT ??1ioShakeCameraManager@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioShakeCameraManager@@UAE@XZ PROC			; ioShakeCameraManager::~ioShakeCameraManager, COMDAT
; _this$ = ecx

; 16   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioShakeCameraManager@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioShakeCameraManager@@6B@
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 17   : }

  00019	83 c1 04	 add	 ecx, 4
  0001c	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IAEXXZ ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Tidy
  00021	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_Singleton@?$Singleton@VioShakeCameraManager@@@@1PAVioShakeCameraManager@@A, 0 ; Singleton<ioShakeCameraManager>::ms_Singleton
  00028	e8 00 00 00 00	 call	 __EH_epilog3
  0002d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioShakeCameraManager@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$Singleton@VioShakeCameraManager@@@@QAE@XZ ; Singleton<ioShakeCameraManager>::~Singleton<ioShakeCameraManager>
__ehhandler$??1ioShakeCameraManager@@UAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioShakeCameraManager@@UAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioShakeCameraManager@@UAE@XZ ENDP			; ioShakeCameraManager::~ioShakeCameraManager
PUBLIC	?push_back@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXABUShakeCamera@@@Z ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXABUShakeCamera@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXABUShakeCamera@@@Z PROC ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 34		 jae	 SHORT $LN4@push_back
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 2e		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 2c		 push	 44			; 0000002cH
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IAEXI@Z ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00031	6b ff 2c	 imul	 edi, 44			; 0000002cH
  00034	03 3e		 add	 edi, DWORD PTR [esi]
  00036	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00039	57		 push	 edi
  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UShakeCamera@@@std@@UShakeCamera@@AAU3@@std@@YAXAAV?$allocator@UShakeCamera@@@0@PAUShakeCamera@@AAU2@@Z ; std::_Cons_val<std::allocator<ShakeCamera>,ShakeCamera,ShakeCamera &>

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00043	eb 1b		 jmp	 SHORT $LN20@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00045	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00048	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004a	6a 01		 push	 1
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@IAEXI@Z ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00053	57		 push	 edi
  00054	ff 76 04	 push	 DWORD PTR [esi+4]
  00057	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UShakeCamera@@@std@@UShakeCamera@@ABU3@@std@@YAXAAV?$allocator@UShakeCamera@@@0@PAUShakeCamera@@ABU2@@Z ; std::_Cons_val<std::allocator<ShakeCamera>,ShakeCamera,ShakeCamera const &>
$LN20@push_back:
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00063	83 46 04 2c	 add	 DWORD PTR [esi+4], 44	; 0000002cH
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
?push_back@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXABUShakeCamera@@@Z ENDP ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::push_back
_TEXT	ENDS
PUBLIC	?clear@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXXZ ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T516499 = -4						; size = 4
?clear@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXXZ PROC ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T516499[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@0@Z ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXXZ ENDP ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::clear
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioShakeCameraManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioShakeCameraManager@@UAEPAXI@Z PROC		; ioShakeCameraManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioShakeCameraManager@@UAE@XZ ; ioShakeCameraManager::~ioShakeCameraManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@2:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioShakeCameraManager@@UAEPAXI@Z ENDP		; ioShakeCameraManager::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	?InitManager@ioShakeCameraManager@@QAEXXZ	; ioShakeCameraManager::InitManager
EXTRN	__imp_?SetTitle@ioINILoader@@QAEXPBD@Z:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioshakecameramanager.cpp
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?InitManager@ioShakeCameraManager@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitManager@ioShakeCameraManager@@QAEXXZ$0
__ehfuncinfo$?InitManager@ioShakeCameraManager@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?InitManager@ioShakeCameraManager@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?InitManager@ioShakeCameraManager@@QAEXXZ
_TEXT	SEGMENT
_eShake$512003 = -1336					; size = 44
tv10144 = -1292						; size = 4
tv13112 = -1288						; size = 4
tv13104 = -1288						; size = 4
tv13095 = -1288						; size = 4
tv13179 = -1284						; size = 4
tv1405 = -1280						; size = 4
$T516620 = -1280					; size = 4
_kLoader$ = -1276					; size = 912
_szBuf$ = -364						; size = 260
__k$518036 = -104					; size = 12
__k$518317 = -88					; size = 10
___encStr$511853 = -72					; size = 8
__k$517292 = -60					; size = 11
__t$516901 = -60					; size = 12
__k$517162 = -44					; size = 22
__k$516998 = -44					; size = 19
__k$518174 = -40					; size = 16
__k$517911 = -40					; size = 15
__k$517786 = -40					; size = 17
__k$517653 = -40					; size = 17
__k$517524 = -40					; size = 15
__k$517399 = -40					; size = 15
__$EHRec$ = -12						; size = 12
?InitManager@ioShakeCameraManager@@QAEXXZ PROC		; ioShakeCameraManager::InitManager, COMDAT
; _this$ = ecx

; 20   : {

  00000	68 2c 05 00 00	 push	 1324			; 0000052cH
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?InitManager@ioShakeCameraManager@@QAEXXZ
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS

; 21   : 	m_ShakeCameraList.clear();

  0000f	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  00012	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00015	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00017	50		 push	 eax
  00018	51		 push	 ecx
  00019	8d 85 00 fb ff
	ff		 lea	 eax, DWORD PTR $T516620[ebp]
  0001f	50		 push	 eax
  00020	8b ca		 mov	 ecx, edx
  00022	89 95 f4 fa ff
	ff		 mov	 DWORD PTR tv10144[ebp], edx
  00028	e8 00 00 00 00	 call	 ?erase@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@@2@0@Z ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::erase

; 22   : 
; 23   : 	ioINILoader_e kLoader( "config/sp2_shake_camera.ini" );

  0002d	6a 06		 push	 6
  0002f	c7 85 54 fe ff
	ff 8e 83 85 8c	 mov	 DWORD PTR _kLoader$[ebp+848], -1937407090 ; 8c85838eH
  00039	c7 85 58 fe ff
	ff 84 8b c4 99	 mov	 DWORD PTR _kLoader$[ebp+852], -1715172476 ; 99c48b84H
  00043	c7 85 5c fe ff
	ff 9d de b4 99	 mov	 DWORD PTR _kLoader$[ebp+856], -1716199779 ; 99b4de9dH
  0004d	c7 85 60 fe ff
	ff 85 8d 80 8f	 mov	 DWORD PTR _kLoader$[ebp+860], -1887400571 ; 8f808d85H
  00057	c7 85 64 fe ff
	ff b2 8f 8a 87	 mov	 DWORD PTR _kLoader$[ebp+864], -2020962382 ; 878a8fb2H
  00061	c7 85 68 fe ff
	ff 88 9e 8a c4	 mov	 DWORD PTR _kLoader$[ebp+868], -997548408 ; c48a9e88H
  0006b	8d 85 54 fe ff
	ff		 lea	 eax, DWORD PTR _kLoader$[ebp+848]
  00071	33 db		 xor	 ebx, ebx
  00073	c7 85 6c fe ff
	ff 84 82 82 00	 mov	 DWORD PTR _kLoader$[ebp+872], 8553092 ; 00828284H
  0007d	59		 pop	 ecx
  0007e	bf ed ec eb ea	 mov	 edi, -353637139		; eaebecedH
$LL232@InitManage:
  00083	31 38		 xor	 DWORD PTR [eax], edi
  00085	83 c0 04	 add	 eax, 4
  00088	49		 dec	 ecx
  00089	75 f8		 jne	 SHORT $LL232@InitManage
  0008b	6a 18		 push	 24			; 00000018H
  0008d	5e		 pop	 esi
$LL229@InitManage:
  0008e	8b c6		 mov	 eax, esi
  00090	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00095	79 05		 jns	 SHORT $LN1583@InitManage
  00097	48		 dec	 eax
  00098	83 c8 fc	 or	 eax, -4			; fffffffcH
  0009b	40		 inc	 eax
$LN1583@InitManage:
  0009c	b1 ed		 mov	 cl, -19			; ffffffedH
  0009e	2a c8		 sub	 cl, al
  000a0	30 8c 35 54 fe
	ff ff		 xor	 BYTE PTR _kLoader$[ebp+esi+848], cl
  000a7	46		 inc	 esi
  000a8	83 fe 1b	 cmp	 esi, 27			; 0000001bH
  000ab	7c e1		 jl	 SHORT $LL229@InitManage
  000ad	6a 01		 push	 1
  000af	8d 85 54 fe ff
	ff		 lea	 eax, DWORD PTR _kLoader$[ebp+848]
  000b5	50		 push	 eax
  000b6	8d 8d 04 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioINILoader@@QAE@PBD_N@Z
  000c2	6a 02		 push	 2
  000c4	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 24   : 
; 25   : 	int iNumItem = kLoader.LoadInt_e( "common_info", "shake_camera_count", 0 );

  000c7	c7 45 c4 8e 83
	86 87		 mov	 DWORD PTR __t$516901[ebp], -2021227634 ; 8786838eH
  000ce	c7 45 c8 82 82
	b4 83		 mov	 DWORD PTR __t$516901[ebp+4], -2085322110 ; 83b48282H
  000d5	8d 45 c4	 lea	 eax, DWORD PTR __t$516901[ebp]
  000d8	c7 45 cc 83 8a
	84 00		 mov	 DWORD PTR __t$516901[ebp+8], 8686211 ; 00848a83H
  000df	59		 pop	 ecx
$LL434@InitManage:
  000e0	31 38		 xor	 DWORD PTR [eax], edi
  000e2	83 c0 04	 add	 eax, 4
  000e5	49		 dec	 ecx
  000e6	75 f8		 jne	 SHORT $LL434@InitManage
  000e8	6a 08		 push	 8
  000ea	5e		 pop	 esi
$LL431@InitManage:
  000eb	8b c6		 mov	 eax, esi
  000ed	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  000f2	79 05		 jns	 SHORT $LN1584@InitManage
  000f4	48		 dec	 eax
  000f5	83 c8 fc	 or	 eax, -4			; fffffffcH
  000f8	40		 inc	 eax
$LN1584@InitManage:
  000f9	b1 ed		 mov	 cl, -19			; ffffffedH
  000fb	2a c8		 sub	 cl, al
  000fd	30 4c 35 c4	 xor	 BYTE PTR __t$516901[ebp+esi], cl
  00101	46		 inc	 esi
  00102	83 fe 0b	 cmp	 esi, 11			; 0000000bH
  00105	7c e4		 jl	 SHORT $LL431@InitManage
  00107	6a 04		 push	 4
  00109	c7 45 d4 9e 84
	8a 81		 mov	 DWORD PTR __k$516998[ebp], -2121628514 ; 818a849eH
  00110	c7 45 d8 88 b3
	88 8b		 mov	 DWORD PTR __k$516998[ebp+4], -1953975416 ; 8b88b388H
  00117	c7 45 dc 80 89
	99 8b		 mov	 DWORD PTR __k$516998[ebp+8], -1952872064 ; 8b998980H
  0011e	c7 45 e0 b2 8f
	84 9f		 mov	 DWORD PTR __k$516998[ebp+12], -1618702414 ; 9f848fb2H
  00125	66 c7 45 e4 83
	98		 mov	 WORD PTR __k$516998[ebp+16], 39043 ; 00009883H
  0012b	8d 45 d4	 lea	 eax, DWORD PTR __k$516998[ebp]
  0012e	88 5d e6	 mov	 BYTE PTR __k$516998[ebp+18], bl
  00131	59		 pop	 ecx
$LL442@InitManage:
  00132	31 38		 xor	 DWORD PTR [eax], edi
  00134	83 c0 04	 add	 eax, 4
  00137	49		 dec	 ecx
  00138	75 f8		 jne	 SHORT $LL442@InitManage
  0013a	6a 10		 push	 16			; 00000010H
  0013c	5e		 pop	 esi
$LL439@InitManage:
  0013d	8b c6		 mov	 eax, esi
  0013f	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00144	79 05		 jns	 SHORT $LN1585@InitManage
  00146	48		 dec	 eax
  00147	83 c8 fc	 or	 eax, -4			; fffffffcH
  0014a	40		 inc	 eax
$LN1585@InitManage:
  0014b	b1 ed		 mov	 cl, -19			; ffffffedH
  0014d	2a c8		 sub	 cl, al
  0014f	30 4c 35 d4	 xor	 BYTE PTR __k$516998[ebp+esi], cl
  00153	46		 inc	 esi
  00154	83 fe 12	 cmp	 esi, 18			; 00000012H
  00157	7c e4		 jl	 SHORT $LL439@InitManage
  00159	53		 push	 ebx
  0015a	8d 45 d4	 lea	 eax, DWORD PTR __k$516998[ebp]
  0015d	50		 push	 eax
  0015e	8d 45 c4	 lea	 eax, DWORD PTR __t$516901[ebp]
  00161	50		 push	 eax
  00162	8d 8d 04 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  00168	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBD0H@Z

; 26   : 	m_ShakeCameraList.reserve( iNumItem );

  0016e	8b 8d f4 fa ff
	ff		 mov	 ecx, DWORD PTR tv10144[ebp]
  00174	8b f0		 mov	 esi, eax
  00176	56		 push	 esi
  00177	e8 00 00 00 00	 call	 ?reserve@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXI@Z ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::reserve

; 27   : 
; 28   : 	char szBuf[MAX_PATH];
; 29   : 	for( int i=0 ; i<iNumItem ; i++ )

  0017c	3b f3		 cmp	 esi, ebx
  0017e	0f 8e 7f 04 00
	00		 jle	 $LN100@InitManage

; 24   : 
; 25   : 	int iNumItem = kLoader.LoadInt_e( "common_info", "shake_camera_count", 0 );

  00184	c7 85 fc fa ff
	ff 01 00 00 00	 mov	 DWORD PTR tv13179[ebp], 1
  0018e	89 b5 00 fb ff
	ff		 mov	 DWORD PTR tv1405[ebp], esi
$LL102@InitManage:

; 30   : 	{
; 31   : 		wsprintf_e( szBuf, "shake%d", i+1 );

  00194	6a 04		 push	 4
  00196	c7 45 b8 9e 84
	8a 81		 mov	 DWORD PTR ___encStr$511853[ebp], -2121628514 ; 818a849eH
  0019d	31 7d b8	 xor	 DWORD PTR ___encStr$511853[ebp], edi
  001a0	c7 45 bc 88 c9
	8f 00		 mov	 DWORD PTR ___encStr$511853[ebp+4], 9423240 ; 008fc988H
  001a7	5e		 pop	 esi
$LL447@InitManage:
  001a8	8b c6		 mov	 eax, esi
  001aa	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  001af	79 05		 jns	 SHORT $LN1586@InitManage
  001b1	48		 dec	 eax
  001b2	83 c8 fc	 or	 eax, -4			; fffffffcH
  001b5	40		 inc	 eax
$LN1586@InitManage:
  001b6	b1 ed		 mov	 cl, -19			; ffffffedH
  001b8	2a c8		 sub	 cl, al
  001ba	30 4c 35 b8	 xor	 BYTE PTR ___encStr$511853[ebp+esi], cl
  001be	46		 inc	 esi
  001bf	83 fe 07	 cmp	 esi, 7
  001c2	7c e4		 jl	 SHORT $LL447@InitManage
  001c4	8b b5 fc fa ff
	ff		 mov	 esi, DWORD PTR tv13179[ebp]
  001ca	56		 push	 esi
  001cb	8d 45 b8	 lea	 eax, DWORD PTR ___encStr$511853[ebp]
  001ce	50		 push	 eax
  001cf	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  001d5	50		 push	 eax
  001d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  001dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 32   : 		kLoader.SetTitle( szBuf );

  001df	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  001e5	50		 push	 eax
  001e6	8d 8d 04 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  001ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitle@ioINILoader@@QAEXPBD@Z
  001f2	6a 05		 push	 5

; 33   : 
; 34   : 		ShakeCamera eShake;
; 35   : 		eShake.iShakeID = i+1;

  001f4	89 b5 c8 fa ff
	ff		 mov	 DWORD PTR _eShake$512003[ebp], esi

; 36   : 		eShake.dwShakeChangeTime = kLoader.LoadInt_e( "direction_change_time", 0 );

  001fa	c7 45 d4 89 85
	99 8f		 mov	 DWORD PTR __k$517162[ebp], -1885764215 ; 8f998589H
  00201	c7 45 d8 8e 98
	82 85		 mov	 DWORD PTR __k$517162[ebp+4], -2055038834 ; 8582988eH
  00208	c7 45 dc 83 b3
	88 82		 mov	 DWORD PTR __k$517162[ebp+8], -2104970365 ; 8288b383H
  0020f	c7 45 e0 8c 82
	8c 8f		 mov	 DWORD PTR __k$517162[ebp+12], -1886616948 ; 8f8c828cH
  00216	c7 45 e4 b2 98
	82 87		 mov	 DWORD PTR __k$517162[ebp+16], -2021484366 ; 878298b2H
  0021d	8d 45 d4	 lea	 eax, DWORD PTR __k$517162[ebp]
  00220	66 c7 45 e8 88
	00		 mov	 WORD PTR __k$517162[ebp+20], 136 ; 00000088H
  00226	59		 pop	 ecx
$LL558@InitManage:
  00227	31 38		 xor	 DWORD PTR [eax], edi
  00229	83 c0 04	 add	 eax, 4
  0022c	49		 dec	 ecx
  0022d	75 f8		 jne	 SHORT $LL558@InitManage
  0022f	80 75 e8 ed	 xor	 BYTE PTR __k$517162[ebp+20], -19 ; ffffffedH
  00233	53		 push	 ebx
  00234	8d 45 d4	 lea	 eax, DWORD PTR __k$517162[ebp]
  00237	50		 push	 eax
  00238	8d 8d 04 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  0023e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00244	6a 02		 push	 2
  00246	89 85 cc fa ff
	ff		 mov	 DWORD PTR _eShake$512003[ebp+4], eax

; 37   : 		eShake.fShakeRate = kLoader.LoadFloat_e( "shake_rate", 0.0f );

  0024c	c7 45 c4 9e 84
	8a 81		 mov	 DWORD PTR __k$517292[ebp], -2121628514 ; 818a849eH
  00253	c7 45 c8 88 b3
	99 8b		 mov	 DWORD PTR __k$517292[ebp+4], -1952861304 ; 8b99b388H
  0025a	66 c7 45 cc 99
	89		 mov	 WORD PTR __k$517292[ebp+8], 35225 ; 00008999H
  00260	8d 45 c4	 lea	 eax, DWORD PTR __k$517292[ebp]
  00263	88 5d ce	 mov	 BYTE PTR __k$517292[ebp+10], bl
  00266	59		 pop	 ecx
$LL664@InitManage:
  00267	31 38		 xor	 DWORD PTR [eax], edi
  00269	83 c0 04	 add	 eax, 4
  0026c	49		 dec	 ecx
  0026d	75 f8		 jne	 SHORT $LL664@InitManage
  0026f	6a 08		 push	 8
  00271	5e		 pop	 esi
$LL661@InitManage:
  00272	8b c6		 mov	 eax, esi
  00274	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00279	79 05		 jns	 SHORT $LN1587@InitManage
  0027b	48		 dec	 eax
  0027c	83 c8 fc	 or	 eax, -4			; fffffffcH
  0027f	40		 inc	 eax
$LN1587@InitManage:
  00280	b1 ed		 mov	 cl, -19			; ffffffedH
  00282	2a c8		 sub	 cl, al
  00284	30 4c 35 c4	 xor	 BYTE PTR __k$517292[ebp+esi], cl
  00288	46		 inc	 esi
  00289	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  0028c	7c e4		 jl	 SHORT $LL661@InitManage
  0028e	0f 57 c0	 xorps	 xmm0, xmm0
  00291	51		 push	 ecx
  00292	8d 45 c4	 lea	 eax, DWORD PTR __k$517292[ebp]
  00295	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029a	50		 push	 eax
  0029b	8d 8d 04 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  002a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  002a7	d9 9d d0 fa ff
	ff		 fstp	 DWORD PTR _eShake$512003[ebp+8]
  002ad	6a 03		 push	 3

; 38   : 		eShake.fShakeAmountX = kLoader.LoadFloat_e( "shake_amount_x", 0.0f );

  002af	c7 45 d8 9e 84
	8a 81		 mov	 DWORD PTR __k$517399[ebp], -2121628514 ; 818a849eH
  002b6	c7 45 dc 88 b3
	8a 87		 mov	 DWORD PTR __k$517399[ebp+4], -2020953208 ; 878ab388H
  002bd	c7 45 e0 82 99
	85 9e		 mov	 DWORD PTR __k$517399[ebp+8], -1635411582 ; 9e859982H
  002c4	66 c7 45 e4 b2
	94		 mov	 WORD PTR __k$517399[ebp+12], 38066 ; 000094b2H
  002ca	8d 45 d8	 lea	 eax, DWORD PTR __k$517399[ebp]
  002cd	88 5d e6	 mov	 BYTE PTR __k$517399[ebp+14], bl
  002d0	59		 pop	 ecx
$LL770@InitManage:
  002d1	31 38		 xor	 DWORD PTR [eax], edi
  002d3	83 c0 04	 add	 eax, 4
  002d6	49		 dec	 ecx
  002d7	75 f8		 jne	 SHORT $LL770@InitManage
  002d9	6a 0c		 push	 12			; 0000000cH
  002db	5e		 pop	 esi
$LL767@InitManage:
  002dc	8b c6		 mov	 eax, esi
  002de	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  002e3	79 05		 jns	 SHORT $LN1588@InitManage
  002e5	48		 dec	 eax
  002e6	83 c8 fc	 or	 eax, -4			; fffffffcH
  002e9	40		 inc	 eax
$LN1588@InitManage:
  002ea	b1 ed		 mov	 cl, -19			; ffffffedH
  002ec	2a c8		 sub	 cl, al
  002ee	30 4c 35 d8	 xor	 BYTE PTR __k$517399[ebp+esi], cl
  002f2	46		 inc	 esi
  002f3	83 fe 0e	 cmp	 esi, 14			; 0000000eH
  002f6	7c e4		 jl	 SHORT $LL767@InitManage
  002f8	0f 57 c0	 xorps	 xmm0, xmm0
  002fb	51		 push	 ecx
  002fc	8d 45 d8	 lea	 eax, DWORD PTR __k$517399[ebp]
  002ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00304	50		 push	 eax
  00305	8d 8d 04 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  0030b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00311	d9 9d d4 fa ff
	ff		 fstp	 DWORD PTR _eShake$512003[ebp+12]
  00317	6a 03		 push	 3

; 39   : 		eShake.fShakeAmountY = kLoader.LoadFloat_e( "shake_amount_y", 0.0f );

  00319	c7 45 d8 9e 84
	8a 81		 mov	 DWORD PTR __k$517524[ebp], -2121628514 ; 818a849eH
  00320	c7 45 dc 88 b3
	8a 87		 mov	 DWORD PTR __k$517524[ebp+4], -2020953208 ; 878ab388H
  00327	c7 45 e0 82 99
	85 9e		 mov	 DWORD PTR __k$517524[ebp+8], -1635411582 ; 9e859982H
  0032e	66 c7 45 e4 b2
	95		 mov	 WORD PTR __k$517524[ebp+12], 38322 ; 000095b2H
  00334	8d 45 d8	 lea	 eax, DWORD PTR __k$517524[ebp]
  00337	88 5d e6	 mov	 BYTE PTR __k$517524[ebp+14], bl
  0033a	59		 pop	 ecx
$LL876@InitManage:
  0033b	31 38		 xor	 DWORD PTR [eax], edi
  0033d	83 c0 04	 add	 eax, 4
  00340	49		 dec	 ecx
  00341	75 f8		 jne	 SHORT $LL876@InitManage
  00343	6a 0c		 push	 12			; 0000000cH
  00345	5e		 pop	 esi
$LL873@InitManage:
  00346	8b c6		 mov	 eax, esi
  00348	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0034d	79 05		 jns	 SHORT $LN1589@InitManage
  0034f	48		 dec	 eax
  00350	83 c8 fc	 or	 eax, -4			; fffffffcH
  00353	40		 inc	 eax
$LN1589@InitManage:
  00354	b1 ed		 mov	 cl, -19			; ffffffedH
  00356	2a c8		 sub	 cl, al
  00358	30 4c 35 d8	 xor	 BYTE PTR __k$517524[ebp+esi], cl
  0035c	46		 inc	 esi
  0035d	83 fe 0e	 cmp	 esi, 14			; 0000000eH
  00360	7c e4		 jl	 SHORT $LL873@InitManage
  00362	0f 57 c0	 xorps	 xmm0, xmm0
  00365	51		 push	 ecx
  00366	8d 45 d8	 lea	 eax, DWORD PTR __k$517524[ebp]
  00369	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036e	50		 push	 eax
  0036f	8d 8d 04 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  00375	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0037b	d9 9d d8 fa ff
	ff		 fstp	 DWORD PTR _eShake$512003[ebp+16]

; 40   : 
; 41   : 		eShake.fEndAmount = kLoader.LoadFloat_e( "shake_end_amount", FLOAT1 );

  00381	b8 01 00 00 00	 mov	 eax, 1
  00386	6a 04		 push	 4
  00388	5e		 pop	 esi
  00389	c7 45 d8 9e 84
	8a 81		 mov	 DWORD PTR __k$517653[ebp], -2121628514 ; 818a849eH
  00390	c7 45 dc 88 b3
	8e 84		 mov	 DWORD PTR __k$517653[ebp+4], -2071022712 ; 848eb388H
  00397	c7 45 e0 89 b3
	8a 87		 mov	 DWORD PTR __k$517653[ebp+8], -2020953207 ; 878ab389H
  0039e	c7 45 e4 82 99
	85 9e		 mov	 DWORD PTR __k$517653[ebp+12], -1635411582 ; 9e859982H
  003a5	8d 4d d8	 lea	 ecx, DWORD PTR __k$517653[ebp]
  003a8	88 5d e8	 mov	 BYTE PTR __k$517653[ebp+16], bl
  003ab	8b d6		 mov	 edx, esi
$LL984@InitManage:
  003ad	31 39		 xor	 DWORD PTR [ecx], edi
  003af	03 ce		 add	 ecx, esi
  003b1	4a		 dec	 edx
  003b2	75 f9		 jne	 SHORT $LL984@InitManage
  003b4	89 85 f8 fa ff
	ff		 mov	 DWORD PTR tv13112[ebp], eax
  003ba	db 85 f8 fa ff
	ff		 fild	 DWORD PTR tv13112[ebp]
  003c0	85 c0		 test	 eax, eax
  003c2	79 06		 jns	 SHORT $LN1590@InitManage
  003c4	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN1590@InitManage:
  003ca	51		 push	 ecx
  003cb	8d 45 d8	 lea	 eax, DWORD PTR __k$517653[ebp]
  003ce	d9 1c 24	 fstp	 DWORD PTR [esp]
  003d1	50		 push	 eax
  003d2	8d 8d 04 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  003d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  003de	d9 9d dc fa ff
	ff		 fstp	 DWORD PTR _eShake$512003[ebp+20]

; 42   : 		eShake.fEndAmount = max( FLOAT1, eShake.fEndAmount );

  003e4	b8 01 00 00 00	 mov	 eax, 1
  003e9	89 85 f8 fa ff
	ff		 mov	 DWORD PTR tv13104[ebp], eax
  003ef	db 85 f8 fa ff
	ff		 fild	 DWORD PTR tv13104[ebp]
  003f5	85 c0		 test	 eax, eax
  003f7	79 06		 jns	 SHORT $LN1591@InitManage
  003f9	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN1591@InitManage:
  003ff	d9 85 dc fa ff
	ff		 fld	 DWORD PTR _eShake$512003[ebp+20]
  00405	d9 c9		 fxch	 ST(1)
  00407	df f1		 fcomip	 ST(1)
  00409	dd d8		 fstp	 ST(0)
  0040b	76 21		 jbe	 SHORT $LN105@InitManage
  0040d	b8 01 00 00 00	 mov	 eax, 1
  00412	89 85 f8 fa ff
	ff		 mov	 DWORD PTR tv13095[ebp], eax
  00418	db 85 f8 fa ff
	ff		 fild	 DWORD PTR tv13095[ebp]
  0041e	85 c0		 test	 eax, eax
  00420	79 06		 jns	 SHORT $LN1592@InitManage
  00422	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN1592@InitManage:
  00428	d9 9d dc fa ff
	ff		 fstp	 DWORD PTR _eShake$512003[ebp+20]
$LN105@InitManage:

; 43   : 
; 44   : 		eShake.dwRollChangeTime = kLoader.LoadInt_e( "roll_change_time", 0 );

  0042e	c7 45 d8 9f 83
	87 86		 mov	 DWORD PTR __k$517786[ebp], -2037939297 ; 8687839fH
  00435	c7 45 dc b2 8f
	83 8b		 mov	 DWORD PTR __k$517786[ebp+4], -1954312270 ; 8b838fb2H
  0043c	c7 45 e0 83 8b
	8e b5		 mov	 DWORD PTR __k$517786[ebp+8], -1248949373 ; b58e8b83H
  00443	c7 45 e4 99 85
	86 8f		 mov	 DWORD PTR __k$517786[ebp+12], -1887009383 ; 8f868599H
  0044a	8d 45 d8	 lea	 eax, DWORD PTR __k$517786[ebp]
  0044d	88 5d e8	 mov	 BYTE PTR __k$517786[ebp+16], bl
  00450	8b ce		 mov	 ecx, esi
$LL1094@InitManage:
  00452	31 38		 xor	 DWORD PTR [eax], edi
  00454	03 c6		 add	 eax, esi
  00456	49		 dec	 ecx
  00457	75 f9		 jne	 SHORT $LL1094@InitManage
  00459	53		 push	 ebx
  0045a	8d 45 d8	 lea	 eax, DWORD PTR __k$517786[ebp]
  0045d	50		 push	 eax
  0045e	8d 8d 04 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  00464	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  0046a	6a 03		 push	 3
  0046c	89 85 e0 fa ff
	ff		 mov	 DWORD PTR _eShake$512003[ebp+24], eax

; 45   : 		eShake.dwRollEndSlerp = kLoader.LoadInt_e( "roll_end_slerp", 0 );

  00472	c7 45 d8 9f 83
	87 86		 mov	 DWORD PTR __k$517911[ebp], -2037939297 ; 8687839fH
  00479	c7 45 dc b2 89
	85 8e		 mov	 DWORD PTR __k$517911[ebp+4], -1903851086 ; 8e8589b2H
  00480	c7 45 e0 b2 9f
	87 8f		 mov	 DWORD PTR __k$517911[ebp+8], -1886937166 ; 8f879fb2H
  00487	66 c7 45 e4 9f
	9c		 mov	 WORD PTR __k$517911[ebp+12], 40095 ; 00009c9fH
  0048d	8d 45 d8	 lea	 eax, DWORD PTR __k$517911[ebp]
  00490	88 5d e6	 mov	 BYTE PTR __k$517911[ebp+14], bl
  00493	59		 pop	 ecx
$LL1200@InitManage:
  00494	31 38		 xor	 DWORD PTR [eax], edi
  00496	03 c6		 add	 eax, esi
  00498	49		 dec	 ecx
  00499	75 f9		 jne	 SHORT $LL1200@InitManage
  0049b	6a 0c		 push	 12			; 0000000cH
  0049d	5e		 pop	 esi
$LL1197@InitManage:
  0049e	8b c6		 mov	 eax, esi
  004a0	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  004a5	79 05		 jns	 SHORT $LN1593@InitManage
  004a7	48		 dec	 eax
  004a8	83 c8 fc	 or	 eax, -4			; fffffffcH
  004ab	40		 inc	 eax
$LN1593@InitManage:
  004ac	b1 ed		 mov	 cl, -19			; ffffffedH
  004ae	2a c8		 sub	 cl, al
  004b0	30 4c 35 d8	 xor	 BYTE PTR __k$517911[ebp+esi], cl
  004b4	46		 inc	 esi
  004b5	83 fe 0e	 cmp	 esi, 14			; 0000000eH
  004b8	7c e4		 jl	 SHORT $LL1197@InitManage
  004ba	53		 push	 ebx
  004bb	8d 45 d8	 lea	 eax, DWORD PTR __k$517911[ebp]
  004be	50		 push	 eax
  004bf	8d 8d 04 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  004c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  004cb	6a 02		 push	 2
  004cd	89 85 e4 fa ff
	ff		 mov	 DWORD PTR _eShake$512003[ebp+28], eax

; 46   : 		eShake.fRollAmount = kLoader.LoadFloat_e( "roll_amount", 0.0f );

  004d3	c7 45 98 9f 83
	87 86		 mov	 DWORD PTR __k$518036[ebp], -2037939297 ; 8687839fH
  004da	c7 45 9c b2 8d
	86 85		 mov	 DWORD PTR __k$518036[ebp+4], -2054779470 ; 85868db2H
  004e1	8d 45 98	 lea	 eax, DWORD PTR __k$518036[ebp]
  004e4	c7 45 a0 98 82
	9f 00		 mov	 DWORD PTR __k$518036[ebp+8], 10453656 ; 009f8298H
  004eb	59		 pop	 ecx
$LL1306@InitManage:
  004ec	31 38		 xor	 DWORD PTR [eax], edi
  004ee	83 c0 04	 add	 eax, 4
  004f1	49		 dec	 ecx
  004f2	75 f8		 jne	 SHORT $LL1306@InitManage
  004f4	6a 08		 push	 8
  004f6	5e		 pop	 esi
$LL1303@InitManage:
  004f7	8b c6		 mov	 eax, esi
  004f9	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  004fe	79 05		 jns	 SHORT $LN1594@InitManage
  00500	48		 dec	 eax
  00501	83 c8 fc	 or	 eax, -4			; fffffffcH
  00504	40		 inc	 eax
$LN1594@InitManage:
  00505	b1 ed		 mov	 cl, -19			; ffffffedH
  00507	2a c8		 sub	 cl, al
  00509	30 4c 35 98	 xor	 BYTE PTR __k$518036[ebp+esi], cl
  0050d	46		 inc	 esi
  0050e	83 fe 0b	 cmp	 esi, 11			; 0000000bH
  00511	7c e4		 jl	 SHORT $LL1303@InitManage
  00513	0f 57 c0	 xorps	 xmm0, xmm0
  00516	51		 push	 ecx
  00517	8d 45 98	 lea	 eax, DWORD PTR __k$518036[ebp]
  0051a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0051f	50		 push	 eax
  00520	8d 8d 04 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  00526	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0052c	d9 9d ec fa ff
	ff		 fstp	 DWORD PTR _eShake$512003[ebp+36]
  00532	6a 03		 push	 3

; 47   : 		eShake.fRollEndAmount = kLoader.LoadFloat_e( "roll_end_amount", 0.0f );

  00534	c7 45 d8 9f 83
	87 86		 mov	 DWORD PTR __k$518174[ebp], -2037939297 ; 8687839fH
  0053b	c7 45 dc b2 89
	85 8e		 mov	 DWORD PTR __k$518174[ebp+4], -1903851086 ; 8e8589b2H
  00542	c7 45 e0 b2 8d
	86 85		 mov	 DWORD PTR __k$518174[ebp+8], -2054779470 ; 85868db2H
  00549	8d 45 d8	 lea	 eax, DWORD PTR __k$518174[ebp]
  0054c	c7 45 e4 98 82
	9f 00		 mov	 DWORD PTR __k$518174[ebp+12], 10453656 ; 009f8298H
  00553	59		 pop	 ecx
$LL1412@InitManage:
  00554	31 38		 xor	 DWORD PTR [eax], edi
  00556	83 c0 04	 add	 eax, 4
  00559	49		 dec	 ecx
  0055a	75 f8		 jne	 SHORT $LL1412@InitManage
  0055c	6a 0c		 push	 12			; 0000000cH
  0055e	5e		 pop	 esi
$LL1409@InitManage:
  0055f	8b c6		 mov	 eax, esi
  00561	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00566	79 05		 jns	 SHORT $LN1595@InitManage
  00568	48		 dec	 eax
  00569	83 c8 fc	 or	 eax, -4			; fffffffcH
  0056c	40		 inc	 eax
$LN1595@InitManage:
  0056d	b1 ed		 mov	 cl, -19			; ffffffedH
  0056f	2a c8		 sub	 cl, al
  00571	30 4c 35 d8	 xor	 BYTE PTR __k$518174[ebp+esi], cl
  00575	46		 inc	 esi
  00576	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00579	7c e4		 jl	 SHORT $LL1409@InitManage
  0057b	0f 57 c0	 xorps	 xmm0, xmm0
  0057e	51		 push	 ecx
  0057f	8d 45 d8	 lea	 eax, DWORD PTR __k$518174[ebp]
  00582	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00587	50		 push	 eax
  00588	8d 8d 04 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  0058e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00594	d9 9d f0 fa ff
	ff		 fstp	 DWORD PTR _eShake$512003[ebp+40]
  0059a	6a 02		 push	 2

; 48   : 		eShake.fRollRate = kLoader.LoadFloat_e( "roll_rate", 0.0f );

  0059c	c7 45 a8 9f 83
	87 86		 mov	 DWORD PTR __k$518317[ebp], -2037939297 ; 8687839fH
  005a3	c7 45 ac b2 9e
	8a 9e		 mov	 DWORD PTR __k$518317[ebp+4], -1635082574 ; 9e8a9eb2H
  005aa	8d 45 a8	 lea	 eax, DWORD PTR __k$518317[ebp]
  005ad	66 c7 45 b0 88
	00		 mov	 WORD PTR __k$518317[ebp+8], 136 ; 00000088H
  005b3	59		 pop	 ecx
$LL1518@InitManage:
  005b4	31 38		 xor	 DWORD PTR [eax], edi
  005b6	83 c0 04	 add	 eax, 4
  005b9	49		 dec	 ecx
  005ba	75 f8		 jne	 SHORT $LL1518@InitManage
  005bc	0f 57 c0	 xorps	 xmm0, xmm0
  005bf	80 75 b0 ed	 xor	 BYTE PTR __k$518317[ebp+8], -19 ; ffffffedH
  005c3	51		 push	 ecx
  005c4	8d 45 a8	 lea	 eax, DWORD PTR __k$518317[ebp]
  005c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005cc	50		 push	 eax
  005cd	8d 8d 04 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  005d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  005d9	d9 9d e8 fa ff
	ff		 fstp	 DWORD PTR _eShake$512003[ebp+32]

; 49   : 
; 50   : 		m_ShakeCameraList.push_back( eShake );

  005df	8b 8d f4 fa ff
	ff		 mov	 ecx, DWORD PTR tv10144[ebp]
  005e5	8d 85 c8 fa ff
	ff		 lea	 eax, DWORD PTR _eShake$512003[ebp]
  005eb	50		 push	 eax
  005ec	e8 00 00 00 00	 call	 ?push_back@?$vector@UShakeCamera@@V?$allocator@UShakeCamera@@@std@@@std@@QAEXABUShakeCamera@@@Z ; std::vector<ShakeCamera,std::allocator<ShakeCamera> >::push_back
  005f1	ff 85 fc fa ff
	ff		 inc	 DWORD PTR tv13179[ebp]
  005f7	ff 8d 00 fb ff
	ff		 dec	 DWORD PTR tv1405[ebp]
  005fd	0f 85 91 fb ff
	ff		 jne	 $LL102@InitManage
$LN100@InitManage:

; 51   : 	}
; 52   : }

  00603	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00607	8d 8d 04 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  0060d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioINILoader@@QAE@XZ
  00613	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00618	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InitManager@ioShakeCameraManager@@QAEXXZ$0:
  00000	8d 8d 04 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1ioINILoader_e@@QAE@XZ
__ehhandler$?InitManager@ioShakeCameraManager@@QAEXXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a c4 fa ff
	ff		 mov	 ecx, DWORD PTR [edx-1340]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?InitManager@ioShakeCameraManager@@QAEXXZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?InitManager@ioShakeCameraManager@@QAEXXZ ENDP		; ioShakeCameraManager::InitManager
END
