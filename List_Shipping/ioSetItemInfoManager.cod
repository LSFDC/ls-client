; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioSetItemInfoManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?ms_Singleton@?$Singleton@VioSetItemInfoManager@@@@1PAVioSetItemInfoManager@@A ; Singleton<ioSetItemInfoManager>::ms_Singleton
;	COMDAT ?ms_Singleton@?$Singleton@VioSetItemInfoManager@@@@1PAVioSetItemInfoManager@@A
_BSS	SEGMENT
?ms_Singleton@?$Singleton@VioSetItemInfoManager@@@@1PAVioSetItemInfoManager@@A DD 01H DUP (?) ; Singleton<ioSetItemInfoManager>::ms_Singleton
_BSS	ENDS
PUBLIC	??1ioINILoader_e@@QAE@XZ			; ioINILoader_e::~ioINILoader_e
EXTRN	__imp_??1ioINILoader@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1ioINILoader_e@@QAE@XZ
_TEXT	SEGMENT
??1ioINILoader_e@@QAE@XZ PROC				; ioINILoader_e::~ioINILoader_e, COMDAT
; _this$ = ecx
  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioINILoader@@QAE@XZ
??1ioINILoader_e@@QAE@XZ ENDP				; ioINILoader_e::~ioINILoader_e
_TEXT	ENDS
PUBLIC	??0?$Singleton@VioSetItemInfoManager@@@@QAE@XZ	; Singleton<ioSetItemInfoManager>::Singleton<ioSetItemInfoManager>
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
;	COMDAT ??0?$Singleton@VioSetItemInfoManager@@@@QAE@XZ
_TEXT	SEGMENT
??0?$Singleton@VioSetItemInfoManager@@@@QAE@XZ PROC	; Singleton<ioSetItemInfoManager>::Singleton<ioSetItemInfoManager>, COMDAT
; _this$ = ecx

; 27   : 	Singleton()

  00000	8b c1		 mov	 eax, ecx

; 28   : 	{
; 29   : 		assert( !ms_Singleton );
; 30   : 		int offset = (int)(T*)1 - (int)(Singleton <T>*)(T*)1;
; 31   : 		ms_Singleton = (T*)((int)this + offset);

  00002	8d 48 fc	 lea	 ecx, DWORD PTR [eax-4]
  00005	89 0d 00 00 00
	00		 mov	 DWORD PTR ?ms_Singleton@?$Singleton@VioSetItemInfoManager@@@@1PAVioSetItemInfoManager@@A, ecx ; Singleton<ioSetItemInfoManager>::ms_Singleton

; 32   : 	}

  0000b	c3		 ret	 0
??0?$Singleton@VioSetItemInfoManager@@@@QAE@XZ ENDP	; Singleton<ioSetItemInfoManager>::Singleton<ioSetItemInfoManager>
_TEXT	ENDS
PUBLIC	??1?$Singleton@VioSetItemInfoManager@@@@QAE@XZ	; Singleton<ioSetItemInfoManager>::~Singleton<ioSetItemInfoManager>
; Function compile flags: /Ogsp
;	COMDAT ??1?$Singleton@VioSetItemInfoManager@@@@QAE@XZ
_TEXT	SEGMENT
??1?$Singleton@VioSetItemInfoManager@@@@QAE@XZ PROC	; Singleton<ioSetItemInfoManager>::~Singleton<ioSetItemInfoManager>, COMDAT
; _this$ = ecx

; 36   : 		assert( ms_Singleton );
; 37   : 		ms_Singleton = 0;

  00000	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_Singleton@?$Singleton@VioSetItemInfoManager@@@@1PAVioSetItemInfoManager@@A, 0 ; Singleton<ioSetItemInfoManager>::ms_Singleton

; 38   : 	}

  00007	c3		 ret	 0
??1?$Singleton@VioSetItemInfoManager@@@@QAE@XZ ENDP	; Singleton<ioSetItemInfoManager>::~Singleton<ioSetItemInfoManager>
_TEXT	ENDS
PUBLIC	?GetSingleton@?$Singleton@VioSetItemInfoManager@@@@SAAAVioSetItemInfoManager@@XZ ; Singleton<ioSetItemInfoManager>::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?GetSingleton@?$Singleton@VioSetItemInfoManager@@@@SAAAVioSetItemInfoManager@@XZ
_TEXT	SEGMENT
?GetSingleton@?$Singleton@VioSetItemInfoManager@@@@SAAAVioSetItemInfoManager@@XZ PROC ; Singleton<ioSetItemInfoManager>::GetSingleton, COMDAT

; 42   : 		assert( ms_Singleton );
; 43   : 		return (*ms_Singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VioSetItemInfoManager@@@@1PAVioSetItemInfoManager@@A ; Singleton<ioSetItemInfoManager>::ms_Singleton

; 44   : 	}

  00005	c3		 ret	 0
?GetSingleton@?$Singleton@VioSetItemInfoManager@@@@SAAAVioSetItemInfoManager@@XZ ENDP ; Singleton<ioSetItemInfoManager>::GetSingleton
_TEXT	ENDS
PUBLIC	?size@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBEIXZ ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBEABQAVioSetItemInfo@@I@Z ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBEABQAVioSetItemInfo@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBEABQAVioSetItemInfo@@I@Z PROC ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::operator[], COMDAT
; _this$ = ecx

; 912  : 		{	// subscript nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 913  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 914  : 		if (size() <= _Pos)
; 915  : 			{	// report error
; 916  : 			_DEBUG_ERROR("vector subscript out of range");
; 917  : 			_SCL_SECURE_OUT_OF_RANGE;
; 918  : 			}
; 919  : 
; 920  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 921  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 922  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 923  : 
; 924  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pos$[ebp]
  00008	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 925  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBEABQAVioSetItemInfo@@I@Z ENDP ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::operator[]
_TEXT	ENDS
PUBLIC	??A?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAEAAPAVioSetItemInfo@@I@Z ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAEAAPAVioSetItemInfo@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAEAAPAVioSetItemInfo@@I@Z PROC ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pos$[ebp]
  00008	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAEAAPAVioSetItemInfo@@I@Z ENDP ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::operator[]
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >, COMDAT
; _this$ = ecx

; 40   : 		{	// construct with null pointer

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0

; 41   : 		}

  00005	c3		 ret	 0
??0?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QBEABQAVioSetItemInfo@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QBEABQAVioSetItemInfo@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QBEABQAVioSetItemInfo@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QBEABQAVioSetItemInfo@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::operator++
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IBE_NPBQAVioSetItemInfo@@@Z ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Inside
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IBE_NPBQAVioSetItemInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IBE_NPBQAVioSetItemInfo@@@Z PROC ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IBE_NPBQAVioSetItemInfo@@@Z ENDP ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IBEXPAPAVioSetItemInfo@@0@Z ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IBEXPAPAVioSetItemInfo@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IBEXPAPAVioSetItemInfo@@0@Z PROC ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IBEXPAPAVioSetItemInfo@@0@Z ENDP ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::~_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::~_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::~_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVioSetItemInfo@@@std@@QAE@XZ	; std::allocator<ioSetItemInfo *>::allocator<ioSetItemInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVioSetItemInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAVioSetItemInfo@@@std@@QAE@XZ PROC	; std::allocator<ioSetItemInfo *>::allocator<ioSetItemInfo *>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@PAVioSetItemInfo@@@std@@QAE@XZ ENDP	; std::allocator<ioSetItemInfo *>::allocator<ioSetItemInfo *>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBEIXZ ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IBEXXZ ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVioSetItemInfo@@@std@@QAE@ABV01@@Z ; std::allocator<ioSetItemInfo *>::allocator<ioSetItemInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVioSetItemInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAVioSetItemInfo@@@std@@QAE@ABV01@@Z PROC ; std::allocator<ioSetItemInfo *>::allocator<ioSetItemInfo *>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@PAVioSetItemInfo@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<ioSetItemInfo *>::allocator<ioSetItemInfo *>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAVioSetItemInfo@@@std@@QAEXPAPAVioSetItemInfo@@I@Z ; std::allocator<ioSetItemInfo *>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@PAVioSetItemInfo@@@std@@QAEXPAPAVioSetItemInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVioSetItemInfo@@@std@@QAEXPAPAVioSetItemInfo@@I@Z PROC ; std::allocator<ioSetItemInfo *>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@PAVioSetItemInfo@@@std@@QAEXPAPAVioSetItemInfo@@I@Z ENDP ; std::allocator<ioSetItemInfo *>::deallocate
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::_Compat
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVioSetItemInfo@@@std@@QBEIXZ ; std::allocator<ioSetItemInfo *>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@PAVioSetItemInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAVioSetItemInfo@@@std@@QBEIXZ PROC ; std::allocator<ioSetItemInfo *>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAVioSetItemInfo@@@std@@QBEIXZ ENDP ; std::allocator<ioSetItemInfo *>::max_size
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBEABKXZ ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBEABKXZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBEABKXZ PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBEABKXZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator++
_TEXT	ENDS
PUBLIC	??$forward@V?$vector@KV?$allocator@K@std@@@std@@@std@@YA$$QAV?$vector@KV?$allocator@K@std@@@0@AAV10@@Z ; std::forward<std::vector<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@V?$vector@KV?$allocator@K@std@@@std@@@std@@YA$$QAV?$vector@KV?$allocator@K@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$vector@KV?$allocator@K@std@@@std@@@std@@YA$$QAV?$vector@KV?$allocator@K@std@@@0@AAV10@@Z PROC ; std::forward<std::vector<unsigned long,std::allocator<unsigned long> > >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$vector@KV?$allocator@K@std@@@std@@@std@@YA$$QAV?$vector@KV?$allocator@K@std@@@0@AAV10@@Z ENDP ; std::forward<std::vector<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
PUBLIC	??$addressof@QAVioSetItemInfo@@@std@@YAPBQAVioSetItemInfo@@ABQAV1@@Z ; std::addressof<ioSetItemInfo * const>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@QAVioSetItemInfo@@@std@@YAPBQAVioSetItemInfo@@ABQAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAVioSetItemInfo@@@std@@YAPBQAVioSetItemInfo@@ABQAV1@@Z PROC ; std::addressof<ioSetItemInfo * const>, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@QAVioSetItemInfo@@@std@@YAPBQAVioSetItemInfo@@ABQAV1@@Z ENDP ; std::addressof<ioSetItemInfo * const>
_TEXT	ENDS
PUBLIC	??$forward@K@std@@YA$$QAKAAK@Z			; std::forward<unsigned long>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@K@std@@YA$$QAKAAK@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@K@std@@YA$$QAKAAK@Z PROC			; std::forward<unsigned long>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@K@std@@YA$$QAKAAK@Z ENDP			; std::forward<unsigned long>
_TEXT	ENDS
PUBLIC	??$addressof@K@std@@YAPAKAAK@Z			; std::addressof<unsigned long>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@K@std@@YAPAKAAK@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@K@std@@YAPAKAAK@Z PROC			; std::addressof<unsigned long>, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@K@std@@YAPAKAAK@Z ENDP			; std::addressof<unsigned long>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@PAVioSetItemInfo@@@std@@YAPAPAVioSetItemInfo@@IPAPAV1@@Z ; std::_Allocate<ioSetItemInfo *>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@PAVioSetItemInfo@@@std@@YAPAPAVioSetItemInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T507095 = -12						; size = 12
$T507100 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVioSetItemInfo@@@std@@YAPAPAVioSetItemInfo@@IPAPAV1@@Z PROC ; std::_Allocate<ioSetItemInfo *>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3e		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate
  00017	8b c1		 mov	 eax, ecx
  00019	c1 e0 02	 shl	 eax, 2
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	59		 pop	 ecx
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	83 65 08 00	 and	 DWORD PTR $T507100[ebp], 0
  0002b	8d 45 08	 lea	 eax, DWORD PTR $T507100[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T507095[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00038	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003d	8d 45 f4	 lea	 eax, DWORD PTR $T507095[ebp]
  00040	50		 push	 eax
  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T507095[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00048	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004d	c9		 leave
  0004e	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@PAVioSetItemInfo@@@std@@YAPAPAVioSetItemInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<ioSetItemInfo *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@K@std@@QAEXPAK$$QAK@Z	; std::allocator<unsigned long>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@K@std@@QAEXPAK$$QAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@K@std@@QAEXPAK$$QAK@Z PROC	; std::allocator<unsigned long>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@construct:

; 203  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?construct@?$allocator@K@std@@QAEXPAK$$QAK@Z ENDP	; std::allocator<unsigned long>::construct
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	??$forward@AAPAVioSetItemInfo@@@std@@YAAAPAVioSetItemInfo@@AAPAV1@@Z ; std::forward<ioSetItemInfo * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAPAVioSetItemInfo@@@std@@YAAAPAVioSetItemInfo@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAVioSetItemInfo@@@std@@YAAAPAVioSetItemInfo@@AAPAV1@@Z PROC ; std::forward<ioSetItemInfo * &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAVioSetItemInfo@@@std@@YAAAPAVioSetItemInfo@@AAPAV1@@Z ENDP ; std::forward<ioSetItemInfo * &>
_TEXT	ENDS
PUBLIC	??$construct@AAPAVioSetItemInfo@@@?$allocator@PAVioSetItemInfo@@@std@@QAEXPAPAVioSetItemInfo@@AAPAV2@@Z ; std::allocator<ioSetItemInfo *>::construct<ioSetItemInfo * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAPAVioSetItemInfo@@@?$allocator@PAVioSetItemInfo@@@std@@QAEXPAPAVioSetItemInfo@@AAPAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAPAVioSetItemInfo@@@?$allocator@PAVioSetItemInfo@@@std@@QAEXPAPAVioSetItemInfo@@AAPAV2@@Z PROC ; std::allocator<ioSetItemInfo *>::construct<ioSetItemInfo * &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@construct@2
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@construct@2:

; 209  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@AAPAVioSetItemInfo@@@?$allocator@PAVioSetItemInfo@@@std@@QAEXPAPAVioSetItemInfo@@AAPAV2@@Z ENDP ; std::allocator<ioSetItemInfo *>::construct<ioSetItemInfo * &>
_TEXT	ENDS
PUBLIC	??$forward@ABQAVioSetItemInfo@@@std@@YAABQAVioSetItemInfo@@ABQAV1@@Z ; std::forward<ioSetItemInfo * const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABQAVioSetItemInfo@@@std@@YAABQAVioSetItemInfo@@ABQAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAVioSetItemInfo@@@std@@YAABQAVioSetItemInfo@@ABQAV1@@Z PROC ; std::forward<ioSetItemInfo * const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABQAVioSetItemInfo@@@std@@YAABQAVioSetItemInfo@@ABQAV1@@Z ENDP ; std::forward<ioSetItemInfo * const &>
_TEXT	ENDS
PUBLIC	??$?8KK@std@@YA_NABV?$allocator@K@0@0@Z		; std::operator==<unsigned long,unsigned long>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$?8KK@std@@YA_NABV?$allocator@K@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8KK@std@@YA_NABV?$allocator@K@0@0@Z PROC		; std::operator==<unsigned long,unsigned long>, COMDAT

; 263  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 264  : 	}

  00002	c3		 ret	 0
??$?8KK@std@@YA_NABV?$allocator@K@0@0@Z ENDP		; std::operator==<unsigned long,unsigned long>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAVioSetItemInfo@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVioSetItemInfo@@0@Z ; std::_Ptr_cat<ioSetItemInfo *,ioSetItemInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAVioSetItemInfo@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVioSetItemInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVioSetItemInfo@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVioSetItemInfo@@0@Z PROC ; std::_Ptr_cat<ioSetItemInfo *,ioSetItemInfo *>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@PAVioSetItemInfo@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVioSetItemInfo@@0@Z ENDP ; std::_Ptr_cat<ioSetItemInfo *,ioSetItemInfo *>
_TEXT	ENDS
PUBLIC	??$_Move@PAPAVioSetItemInfo@@PAPAV1@@std@@YAPAPAVioSetItemInfo@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<ioSetItemInfo * *,ioSetItemInfo * *>
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAPAVioSetItemInfo@@PAPAV1@@std@@YAPAPAVioSetItemInfo@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAPAVioSetItemInfo@@PAPAV1@@std@@YAPAPAVioSetItemInfo@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<ioSetItemInfo * *,ioSetItemInfo * *>, COMDAT

; 2522 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2523 : 	ptrdiff_t _Count = _Last - _First;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	57		 push	 edi

; 2524 : 	_CSTD memmove(&*_Dest, &*_First,
; 2525 : 		_Count * sizeof (*_First));

  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0000e	c1 fe 02	 sar	 esi, 2
  00011	c1 e6 02	 shl	 esi, 2
  00014	56		 push	 esi
  00015	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00018	57		 push	 edi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2526 : 	return (_Dest + _Count);

  00022	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 2527 : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Move@PAPAVioSetItemInfo@@PAPAV1@@std@@YAPAPAVioSetItemInfo@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<ioSetItemInfo * *,ioSetItemInfo * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVioSetItemInfo@@@std@@@std@@YAXPAPAVioSetItemInfo@@0AAV?$allocator@PAVioSetItemInfo@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ioSetItemInfo *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVioSetItemInfo@@@std@@@std@@YAXPAPAVioSetItemInfo@@0AAV?$allocator@PAVioSetItemInfo@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAVioSetItemInfo@@@std@@@std@@YAXPAPAVioSetItemInfo@@0AAV?$allocator@PAVioSetItemInfo@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ioSetItemInfo *> >, COMDAT

; 105  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAVioSetItemInfo@@@std@@@std@@YAXPAPAVioSetItemInfo@@0AAV?$allocator@PAVioSetItemInfo@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioSetItemInfo *> >
_TEXT	ENDS
PUBLIC	??$_Construct@PAVioSetItemInfo@@ABQAV1@@std@@YAXPAPAVioSetItemInfo@@ABQAV1@@Z ; std::_Construct<ioSetItemInfo *,ioSetItemInfo * const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Construct@PAVioSetItemInfo@@ABQAV1@@std@@YAXPAPAVioSetItemInfo@@ABQAV1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAVioSetItemInfo@@ABQAV1@@std@@YAXPAPAVioSetItemInfo@@ABQAV1@@Z PROC ; std::_Construct<ioSetItemInfo *,ioSetItemInfo * const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@Construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@Construct:

; 49   : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Construct@PAVioSetItemInfo@@ABQAV1@@std@@YAXPAPAVioSetItemInfo@@ABQAV1@@Z ENDP ; std::_Construct<ioSetItemInfo *,ioSetItemInfo * const &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAPAVioSetItemInfo@@@std@@YAPAPAVioSetItemInfo@@PAPAV1@@Z ; std::_Val_type<ioSetItemInfo * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAVioSetItemInfo@@@std@@YAPAPAVioSetItemInfo@@PAPAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAVioSetItemInfo@@@std@@YAPAPAVioSetItemInfo@@PAPAV1@@Z PROC ; std::_Val_type<ioSetItemInfo * *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAPAVioSetItemInfo@@@std@@YAPAPAVioSetItemInfo@@PAPAV1@@Z ENDP ; std::_Val_type<ioSetItemInfo * *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAVioSetItemInfo@@PAV1@PAV1@@std@@YAPAPAVioSetItemInfo@@PAPAV1@00AAV?$allocator@PAVioSetItemInfo@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioSetItemInfo *,ioSetItemInfo *,ioSetItemInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAVioSetItemInfo@@PAV1@PAV1@@std@@YAPAPAVioSetItemInfo@@PAPAV1@00AAV?$allocator@PAVioSetItemInfo@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVioSetItemInfo@@PAV1@PAV1@@std@@YAPAPAVioSetItemInfo@@PAPAV1@00AAV?$allocator@PAVioSetItemInfo@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ioSetItemInfo *,ioSetItemInfo *,ioSetItemInfo *>, COMDAT

; 456  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 457  : 	_DEBUG_RANGE(_First, _Last);
; 458  : 	_DEBUG_POINTER(_Dest);
; 459  : 	size_t _Count = (size_t)(_Last - _First);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2

; 460  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 461  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 462  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninit_move@PAVioSetItemInfo@@PAV1@PAV1@@std@@YAPAPAVioSetItemInfo@@PAPAV1@00AAV?$allocator@PAVioSetItemInfo@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ioSetItemInfo *,ioSetItemInfo *,ioSetItemInfo *>
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetSetCode@ioSetItemInfo@@QBEKXZ		; ioSetItemInfo::GetSetCode
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosetiteminfo.h
;	COMDAT ?GetSetCode@ioSetItemInfo@@QBEKXZ
_TEXT	SEGMENT
?GetSetCode@ioSetItemInfo@@QBEKXZ PROC			; ioSetItemInfo::GetSetCode, COMDAT
; _this$ = ecx

; 116  : 	inline DWORD GetSetCode() const { return m_dwSetCode; }

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	c3		 ret	 0
?GetSetCode@ioSetItemInfo@@QBEKXZ ENDP			; ioSetItemInfo::GetSetCode
_TEXT	ENDS
PUBLIC	?GetName@ioSetItemInfo@@QBEABVioHashString@@XZ	; ioSetItemInfo::GetName
; Function compile flags: /Ogsp
;	COMDAT ?GetName@ioSetItemInfo@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetName@ioSetItemInfo@@QBEABVioHashString@@XZ PROC	; ioSetItemInfo::GetName, COMDAT
; _this$ = ecx

; 117  : 	inline const ioHashString& GetName() const { return m_SetName; }

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00003	c3		 ret	 0
?GetName@ioSetItemInfo@@QBEABVioHashString@@XZ ENDP	; ioSetItemInfo::GetName
_TEXT	ENDS
PUBLIC	?GetSetItemSkillName@ioSetItemInfo@@QBEABVioHashString@@XZ ; ioSetItemInfo::GetSetItemSkillName
; Function compile flags: /Ogsp
;	COMDAT ?GetSetItemSkillName@ioSetItemInfo@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetSetItemSkillName@ioSetItemInfo@@QBEABVioHashString@@XZ PROC ; ioSetItemInfo::GetSetItemSkillName, COMDAT
; _this$ = ecx

; 124  : 	inline const ioHashString& GetSetItemSkillName() const { return m_SetItemSkillName; }

  00000	8d 81 80 00 00
	00		 lea	 eax, DWORD PTR [ecx+128]
  00006	c3		 ret	 0
?GetSetItemSkillName@ioSetItemInfo@@QBEABVioHashString@@XZ ENDP ; ioSetItemInfo::GetSetItemSkillName
_TEXT	ENDS
PUBLIC	?GetShopOrder@ioSetItemInfo@@QBEHXZ		; ioSetItemInfo::GetShopOrder
; Function compile flags: /Ogsp
;	COMDAT ?GetShopOrder@ioSetItemInfo@@QBEHXZ
_TEXT	SEGMENT
?GetShopOrder@ioSetItemInfo@@QBEHXZ PROC		; ioSetItemInfo::GetShopOrder, COMDAT
; _this$ = ecx

; 127  : 	inline int GetShopOrder() const { return m_iShopOrder; }

  00000	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
  00003	c3		 ret	 0
?GetShopOrder@ioSetItemInfo@@QBEHXZ ENDP		; ioSetItemInfo::GetShopOrder
_TEXT	ENDS
PUBLIC	?GetRecommendedShopOrder@ioSetItemInfo@@QBEHXZ	; ioSetItemInfo::GetRecommendedShopOrder
; Function compile flags: /Ogsp
;	COMDAT ?GetRecommendedShopOrder@ioSetItemInfo@@QBEHXZ
_TEXT	SEGMENT
?GetRecommendedShopOrder@ioSetItemInfo@@QBEHXZ PROC	; ioSetItemInfo::GetRecommendedShopOrder, COMDAT
; _this$ = ecx

; 128  : 	inline int GetRecommendedShopOrder() const { return m_iRecommendedShopOrder; }

  00000	8b 41 68	 mov	 eax, DWORD PTR [ecx+104]
  00003	c3		 ret	 0
?GetRecommendedShopOrder@ioSetItemInfo@@QBEHXZ ENDP	; ioSetItemInfo::GetRecommendedShopOrder
_TEXT	ENDS
PUBLIC	?GetShopMarkType@ioSetItemInfo@@QBEHXZ		; ioSetItemInfo::GetShopMarkType
; Function compile flags: /Ogsp
;	COMDAT ?GetShopMarkType@ioSetItemInfo@@QBEHXZ
_TEXT	SEGMENT
?GetShopMarkType@ioSetItemInfo@@QBEHXZ PROC		; ioSetItemInfo::GetShopMarkType, COMDAT
; _this$ = ecx

; 129  : 	inline int GetShopMarkType() const { return m_iShopMarkType; }

  00000	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  00003	c3		 ret	 0
?GetShopMarkType@ioSetItemInfo@@QBEHXZ ENDP		; ioSetItemInfo::GetShopMarkType
_TEXT	ENDS
PUBLIC	?SetShopOrder@ioSetItemInfo@@QAEXH@Z		; ioSetItemInfo::SetShopOrder
; Function compile flags: /Ogsp
;	COMDAT ?SetShopOrder@ioSetItemInfo@@QAEXH@Z
_TEXT	SEGMENT
_iShopOrder$ = 8					; size = 4
?SetShopOrder@ioSetItemInfo@@QAEXH@Z PROC		; ioSetItemInfo::SetShopOrder, COMDAT
; _this$ = ecx

; 135  : 	inline void SetShopOrder( int iShopOrder ) { m_iShopOrder = iShopOrder; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iShopOrder$[ebp]
  00006	89 41 64	 mov	 DWORD PTR [ecx+100], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetShopOrder@ioSetItemInfo@@QAEXH@Z ENDP		; ioSetItemInfo::SetShopOrder
_TEXT	ENDS
PUBLIC	?SetShopMarkType@ioSetItemInfo@@QAEXH@Z		; ioSetItemInfo::SetShopMarkType
; Function compile flags: /Ogsp
;	COMDAT ?SetShopMarkType@ioSetItemInfo@@QAEXH@Z
_TEXT	SEGMENT
_iShopMarkType$ = 8					; size = 4
?SetShopMarkType@ioSetItemInfo@@QAEXH@Z PROC		; ioSetItemInfo::SetShopMarkType, COMDAT
; _this$ = ecx

; 137  : 	inline void SetShopMarkType( int iShopMarkType ) { m_iShopMarkType = iShopMarkType; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iShopMarkType$[ebp]
  00006	89 41 6c	 mov	 DWORD PTR [ecx+108], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetShopMarkType@ioSetItemInfo@@QAEXH@Z ENDP		; ioSetItemInfo::SetShopMarkType
_TEXT	ENDS
PUBLIC	?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::size
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@KV?$allocator@K@std@@@std@@IBE_NPBK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@KV?$allocator@K@std@@@std@@IBE_NPBK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@KV?$allocator@K@std@@@std@@IBE_NPBK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside@2
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside@2
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside@2
$LN3@Inside@2:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside@2:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@KV?$allocator@K@std@@@std@@IBE_NPBK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@KV?$allocator@K@std@@@std@@IBEXPAK0@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@KV?$allocator@K@std@@@std@@IBEXPAK0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@KV?$allocator@K@std@@@std@@IBEXPAK0@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@KV?$allocator@K@std@@@std@@IBEXPAK0@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@KV?$allocator@K@std@@@std@@QAE@XZ ; std::_Vector_val<unsigned long,std::allocator<unsigned long> >::~_Vector_val<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::_Vector_val<unsigned long,std::allocator<unsigned long> >::~_Vector_val<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<unsigned long,std::allocator<unsigned long> >::~_Vector_val<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::capacity
; Function compile flags: /Ogsp
;	COMDAT ?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::capacity
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@KV?$allocator@K@std@@@std@@IBEXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@KV?$allocator@K@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@KV?$allocator@K@std@@@std@@IBEXXZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@2:
$LN3@Xlen@2:
  0000b	cc		 int	 3
?_Xlen@?$vector@KV?$allocator@K@std@@@std@@IBEXXZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@K@std@@QAE@ABV01@@Z		; std::allocator<unsigned long>::allocator<unsigned long>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@K@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@K@std@@QAE@ABV01@@Z PROC			; std::allocator<unsigned long>::allocator<unsigned long>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@K@std@@QAE@ABV01@@Z ENDP			; std::allocator<unsigned long>::allocator<unsigned long>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@K@std@@QAEXPAKI@Z	; std::allocator<unsigned long>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@K@std@@QAEXPAKI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@K@std@@QAEXPAKI@Z PROC		; std::allocator<unsigned long>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@K@std@@QAEXPAKI@Z ENDP		; std::allocator<unsigned long>::deallocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@K@std@@QBEIXZ		; std::allocator<unsigned long>::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@K@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@K@std@@QBEIXZ PROC		; std::allocator<unsigned long>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@K@std@@QBEIXZ ENDP		; std::allocator<unsigned long>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAE@PAKPBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAE@PAKPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAE@PAKPBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAE@PAKPBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::_Compat
_TEXT	ENDS
PUBLIC	??$_Allocate@K@std@@YAPAKIPAK@Z			; std::_Allocate<unsigned long>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Allocate@K@std@@YAPAKIPAK@Z
_TEXT	SEGMENT
$T507235 = -12						; size = 12
$T507239 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@K@std@@YAPAKIPAK@Z PROC			; std::_Allocate<unsigned long>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3e		 je	 SHORT $LN5@Allocate@2

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate@2
  00017	8b c1		 mov	 eax, ecx
  00019	c1 e0 02	 shl	 eax, 2
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	59		 pop	 ecx
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 26		 jne	 SHORT $LN5@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	83 65 08 00	 and	 DWORD PTR $T507239[ebp], 0
  0002b	8d 45 08	 lea	 eax, DWORD PTR $T507239[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T507235[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00038	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003d	8d 45 f4	 lea	 eax, DWORD PTR $T507235[ebp]
  00040	50		 push	 eax
  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T507235[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00048	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:

; 40   : 	}

  0004d	c9		 leave
  0004e	c3		 ret	 0
$LN9@Allocate@2:
??$_Allocate@K@std@@YAPAKIPAK@Z ENDP			; std::_Allocate<unsigned long>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@KK@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAK0@Z ; std::_Ptr_cat<unsigned long,unsigned long>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@KK@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAK0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@KK@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAK0@Z PROC ; std::_Ptr_cat<unsigned long,unsigned long>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@KK@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAK0@Z ENDP ; std::_Ptr_cat<unsigned long,unsigned long>
_TEXT	ENDS
PUBLIC	??$_Move@PAKPAK@std@@YAPAKPAK00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<unsigned long *,unsigned long *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAKPAK@std@@YAPAKPAK00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAKPAK@std@@YAPAKPAK00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<unsigned long *,unsigned long *>, COMDAT

; 2522 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2523 : 	ptrdiff_t _Count = _Last - _First;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	57		 push	 edi

; 2524 : 	_CSTD memmove(&*_Dest, &*_First,
; 2525 : 		_Count * sizeof (*_First));

  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0000e	c1 fe 02	 sar	 esi, 2
  00011	c1 e6 02	 shl	 esi, 2
  00014	56		 push	 esi
  00015	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00018	57		 push	 edi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2526 : 	return (_Dest + _Count);

  00022	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 2527 : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Move@PAKPAK@std@@YAPAKPAK00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<unsigned long *,unsigned long *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<unsigned long> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned long> >, COMDAT

; 105  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??$_Val_type@PAK@std@@YAPAKPAK@Z		; std::_Val_type<unsigned long *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAK@std@@YAPAKPAK@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAK@std@@YAPAKPAK@Z PROC			; std::_Val_type<unsigned long *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAK@std@@YAPAKPAK@Z ENDP			; std::_Val_type<unsigned long *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@KKK@std@@YAPAKPAK00AAV?$allocator@K@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<unsigned long,unsigned long,unsigned long>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@KKK@std@@YAPAKPAK00AAV?$allocator@K@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@KKK@std@@YAPAKPAK00AAV?$allocator@K@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<unsigned long,unsigned long,unsigned long>, COMDAT

; 456  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 457  : 	_DEBUG_RANGE(_First, _Last);
; 458  : 	_DEBUG_POINTER(_Dest);
; 459  : 	size_t _Count = (size_t)(_Last - _First);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2

; 460  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 461  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 462  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninit_move@KKK@std@@YAPAKPAK00AAV?$allocator@K@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<unsigned long,unsigned long,unsigned long>
_TEXT	ENDS
PUBLIC	?GetSingeton@ioSetItemInfoManager@@SAAAV1@XZ	; ioSetItemInfoManager::GetSingeton
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosetiteminfomanager.cpp
;	COMDAT ?GetSingeton@ioSetItemInfoManager@@SAAAV1@XZ
_TEXT	SEGMENT
?GetSingeton@ioSetItemInfoManager@@SAAAV1@XZ PROC	; ioSetItemInfoManager::GetSingeton, COMDAT

; 22   : 	return Singleton< ioSetItemInfoManager >::GetSingleton();

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VioSetItemInfoManager@@@@1PAVioSetItemInfoManager@@A ; Singleton<ioSetItemInfoManager>::ms_Singleton

; 23   : }

  00005	c3		 ret	 0
?GetSingeton@ioSetItemInfoManager@@SAAAV1@XZ ENDP	; ioSetItemInfoManager::GetSingeton
_TEXT	ENDS
PUBLIC	?GetTotalSetCount@ioSetItemInfoManager@@QBEHXZ	; ioSetItemInfoManager::GetTotalSetCount
; Function compile flags: /Ogsp
;	COMDAT ?GetTotalSetCount@ioSetItemInfoManager@@QBEHXZ
_TEXT	SEGMENT
?GetTotalSetCount@ioSetItemInfoManager@@QBEHXZ PROC	; ioSetItemInfoManager::GetTotalSetCount, COMDAT
; _this$ = ecx

; 148  : 	return m_SetInfoList.size();

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	c1 f8 02	 sar	 eax, 2

; 149  : }

  00009	c3		 ret	 0
?GetTotalSetCount@ioSetItemInfoManager@@QBEHXZ ENDP	; ioSetItemInfoManager::GetTotalSetCount
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::_Vector_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::_Vector_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >, COMDAT
; _this$ = ecx

; 298  : 	_Vector_iterator()

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0

; 299  : 		{	// construct with null vector pointer
; 300  : 		}

  00005	c3		 ret	 0
??0?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::_Vector_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QBEAAPAVioSetItemInfo@@XZ ; std::_Vector_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QBEAAPAVioSetItemInfo@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QBEAAPAVioSetItemInfo@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QBEAAPAVioSetItemInfo@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::operator++
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE@V?$allocator@PAVioSetItemInfo@@@1@@Z ; std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE@V?$allocator@PAVioSetItemInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE@V?$allocator@PAVioSetItemInfo@@@1@@Z PROC ; std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE@V?$allocator@PAVioSetItemInfo@@@1@@Z ENDP ; std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QAE@PAPAVioSetItemInfo@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QAE@PAPAVioSetItemInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QAE@PAPAVioSetItemInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QAE@PAPAVioSetItemInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::operator==
_TEXT	ENDS
PUBLIC	?get_allocator@?$vector@KV?$allocator@K@std@@@std@@QBE?AV?$allocator@K@2@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::get_allocator
; Function compile flags: /Ogsp
;	COMDAT ?get_allocator@?$vector@KV?$allocator@K@std@@@std@@QBE?AV?$allocator@K@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$vector@KV?$allocator@K@std@@@std@@QBE?AV?$allocator@K@2@XZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::get_allocator, COMDAT
; _this$ = ecx

; 893  : 		{	// return allocator object for values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 894  : 		return (this->_Alval);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 895  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?get_allocator@?$vector@KV?$allocator@K@std@@@std@@QBE?AV?$allocator@K@2@XZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::get_allocator
_TEXT	ENDS
PUBLIC	?max_size@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBEIXZ ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IBEII@Z ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IBEII@Z PROC ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  0000d	c1 f8 02	 sar	 eax, 2
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00023	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?_Grow_to@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IBEII@Z ENDP ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Grow_to
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBEAAKXZ ; std::_Vector_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBEAAKXZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBEAAKXZ PROC ; std::_Vector_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBEAAKXZ ENDP ; std::_Vector_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator++
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAVioSetItemInfo@@@std@@QAEPAPAVioSetItemInfo@@I@Z ; std::allocator<ioSetItemInfo *>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@PAVioSetItemInfo@@@std@@QAEPAPAVioSetItemInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVioSetItemInfo@@@std@@QAEPAPAVioSetItemInfo@@I@Z PROC ; std::allocator<ioSetItemInfo *>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@PAVioSetItemInfo@@@std@@YAPAPAVioSetItemInfo@@IPAPAV1@@Z ; std::_Allocate<ioSetItemInfo *>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@PAVioSetItemInfo@@@std@@QAEPAPAVioSetItemInfo@@I@Z ENDP ; std::allocator<ioSetItemInfo *>::allocate
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$06$0N@@ioINILoader@@QAEHAAY06$$CBDAAY0N@$$CBDH@Z ; ioINILoader::LoadInt_e<7,13>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBD0H@Z:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadInt_e@$06$0N@@ioINILoader@@QAEHAAY06$$CBDAAY0N@$$CBDH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -40					; size = 4
__k$ = -36						; size = 13
__t$ = -16						; size = 7
__$ArrayPad$ = -4					; size = 4
_t$ = 8							; size = 4
_k$ = 12						; size = 4
_i$ = 16						; size = 4
??$LoadInt_e@$06$0N@@ioINILoader@@QAEHAAY06$$CBDAAY0N@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<7,13>, COMDAT
; _this$ = ecx

; 126  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 55 08	 mov	 edx, DWORD PTR _t$[ebp]
  00013	8b 45 0c	 mov	 eax, DWORD PTR _k$[ebp]
  00016	53		 push	 ebx

; 127  : 		_ENCSTR(t, _t);

  00017	8a 1a		 mov	 bl, BYTE PTR [edx]
  00019	89 4d d8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0001c	32 c9		 xor	 cl, cl
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	3a d9		 cmp	 bl, cl
  00022	0f 84 c0 00 00
	00		 je	 $LN192@LoadInt_e
  00028	80 f3 ed	 xor	 bl, -19			; ffffffedH
  0002b	88 5d f0	 mov	 BYTE PTR __t$[ebp], bl
  0002e	8a 5a 01	 mov	 bl, BYTE PTR [edx+1]
  00031	3a d9		 cmp	 bl, cl
  00033	0f 84 a9 00 00
	00		 je	 $LN191@LoadInt_e
  00039	80 f3 ec	 xor	 bl, -20			; ffffffecH
  0003c	88 5d f1	 mov	 BYTE PTR __t$[ebp+1], bl
  0003f	8a 5a 02	 mov	 bl, BYTE PTR [edx+2]
  00042	3a d9		 cmp	 bl, cl
  00044	0f 84 92 00 00
	00		 je	 $LN190@LoadInt_e
  0004a	80 f3 eb	 xor	 bl, -21			; ffffffebH
  0004d	88 5d f2	 mov	 BYTE PTR __t$[ebp+2], bl
  00050	8a 5a 03	 mov	 bl, BYTE PTR [edx+3]
  00053	3a d9		 cmp	 bl, cl
  00055	74 7f		 je	 SHORT $LN189@LoadInt_e
  00057	80 f3 ea	 xor	 bl, -22			; ffffffeaH
  0005a	88 5d f3	 mov	 BYTE PTR __t$[ebp+3], bl
  0005d	8a 5a 04	 mov	 bl, BYTE PTR [edx+4]
  00060	3a d9		 cmp	 bl, cl
  00062	74 6c		 je	 SHORT $LN188@LoadInt_e
  00064	80 f3 ed	 xor	 bl, -19			; ffffffedH
  00067	88 5d f4	 mov	 BYTE PTR __t$[ebp+4], bl
  0006a	8a 5a 05	 mov	 bl, BYTE PTR [edx+5]
  0006d	3a d9		 cmp	 bl, cl
  0006f	74 59		 je	 SHORT $LN187@LoadInt_e
  00071	80 f3 ec	 xor	 bl, -20			; ffffffecH
  00074	88 5d f5	 mov	 BYTE PTR __t$[ebp+5], bl
  00077	38 4a 06	 cmp	 BYTE PTR [edx+6], cl
  0007a	74 70		 je	 SHORT $LN97@LoadInt_e
  0007c	8a 5a 07	 mov	 bl, BYTE PTR [edx+7]
  0007f	3a d9		 cmp	 bl, cl
  00081	74 41		 je	 SHORT $LN185@LoadInt_e
  00083	80 f3 ea	 xor	 bl, -22			; ffffffeaH
  00086	88 5d f7	 mov	 BYTE PTR __t$[ebp+7], bl
  00089	8a 5a 08	 mov	 bl, BYTE PTR [edx+8]
  0008c	3a d9		 cmp	 bl, cl
  0008e	74 2e		 je	 SHORT $LN184@LoadInt_e
  00090	80 f3 ed	 xor	 bl, -19			; ffffffedH
  00093	88 5d f8	 mov	 BYTE PTR __t$[ebp+8], bl
  00096	8a 5a 09	 mov	 bl, BYTE PTR [edx+9]
  00099	3a d9		 cmp	 bl, cl
  0009b	74 1b		 je	 SHORT $LN183@LoadInt_e
  0009d	8a 52 0a	 mov	 dl, BYTE PTR [edx+10]
  000a0	80 f3 ec	 xor	 bl, -20			; ffffffecH
  000a3	88 5d f9	 mov	 BYTE PTR __t$[ebp+9], bl
  000a6	3a d1		 cmp	 dl, cl
  000a8	74 08		 je	 SHORT $LN182@LoadInt_e
  000aa	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ad	88 55 fa	 mov	 BYTE PTR __t$[ebp+10], dl
  000b0	eb 3a		 jmp	 SHORT $LN97@LoadInt_e
$LN182@LoadInt_e:
  000b2	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000b6	eb 34		 jmp	 SHORT $LN97@LoadInt_e
$LN183@LoadInt_e:
  000b8	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  000bc	eb 2e		 jmp	 SHORT $LN97@LoadInt_e
$LN184@LoadInt_e:
  000be	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  000c2	eb 28		 jmp	 SHORT $LN97@LoadInt_e
$LN185@LoadInt_e:
  000c4	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  000c8	eb 22		 jmp	 SHORT $LN97@LoadInt_e
$LN187@LoadInt_e:
  000ca	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  000ce	eb 1c		 jmp	 SHORT $LN97@LoadInt_e
$LN188@LoadInt_e:
  000d0	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  000d4	eb 16		 jmp	 SHORT $LN97@LoadInt_e
$LN189@LoadInt_e:
  000d6	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  000da	eb 10		 jmp	 SHORT $LN97@LoadInt_e
$LN190@LoadInt_e:
  000dc	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  000e0	eb 0a		 jmp	 SHORT $LN97@LoadInt_e
$LN191@LoadInt_e:
  000e2	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  000e6	eb 04		 jmp	 SHORT $LN97@LoadInt_e
$LN192@LoadInt_e:
  000e8	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN97@LoadInt_e:
  000ec	bf ed ec eb ea	 mov	 edi, -353637139		; eaebecedH
  000f1	31 7d f0	 xor	 DWORD PTR __t$[ebp], edi
  000f4	6a 04		 push	 4
  000f6	88 4d f6	 mov	 BYTE PTR __t$[ebp+6], cl
  000f9	5e		 pop	 esi
$LL197@LoadInt_e:
  000fa	8b d6		 mov	 edx, esi
  000fc	81 e2 03 00 00
	80		 and	 edx, -2147483645	; 80000003H
  00102	79 05		 jns	 SHORT $LN219@LoadInt_e
  00104	4a		 dec	 edx
  00105	83 ca fc	 or	 edx, -4			; fffffffcH
  00108	42		 inc	 edx
$LN219@LoadInt_e:
  00109	b3 ed		 mov	 bl, -19			; ffffffedH
  0010b	2a da		 sub	 bl, dl
  0010d	30 5c 35 f0	 xor	 BYTE PTR __t$[ebp+esi], bl
  00111	46		 inc	 esi
  00112	83 fe 06	 cmp	 esi, 6
  00115	7c e3		 jl	 SHORT $LL197@LoadInt_e

; 128  : 		_ENCSTR(k, _k);

  00117	8a 10		 mov	 dl, BYTE PTR [eax]
  00119	3a d1		 cmp	 dl, cl
  0011b	0f 84 51 01 00
	00		 je	 $LN96@LoadInt_e
  00121	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00124	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  00127	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0012a	3a d1		 cmp	 dl, cl
  0012c	0f 84 3a 01 00
	00		 je	 $LN95@LoadInt_e
  00132	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00135	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00138	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0013b	3a d1		 cmp	 dl, cl
  0013d	0f 84 23 01 00
	00		 je	 $LN94@LoadInt_e
  00143	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00146	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  00149	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0014c	3a d1		 cmp	 dl, cl
  0014e	0f 84 0c 01 00
	00		 je	 $LN93@LoadInt_e
  00154	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00157	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  0015a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0015d	3a d1		 cmp	 dl, cl
  0015f	0f 84 f5 00 00
	00		 je	 $LN92@LoadInt_e
  00165	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00168	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  0016b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0016e	3a d1		 cmp	 dl, cl
  00170	0f 84 de 00 00
	00		 je	 $LN91@LoadInt_e
  00176	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00179	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  0017c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0017f	3a d1		 cmp	 dl, cl
  00181	0f 84 c7 00 00
	00		 je	 $LN90@LoadInt_e
  00187	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0018a	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  0018d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00190	3a d1		 cmp	 dl, cl
  00192	0f 84 b0 00 00
	00		 je	 $LN89@LoadInt_e
  00198	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0019b	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  0019e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  001a1	3a d1		 cmp	 dl, cl
  001a3	0f 84 99 00 00
	00		 je	 $LN88@LoadInt_e
  001a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001ac	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  001af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  001b2	3a d1		 cmp	 dl, cl
  001b4	0f 84 82 00 00
	00		 je	 $LN87@LoadInt_e
  001ba	80 f2 ec	 xor	 dl, -20			; ffffffecH
  001bd	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  001c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  001c3	3a d1		 cmp	 dl, cl
  001c5	74 6f		 je	 SHORT $LN86@LoadInt_e
  001c7	80 f2 eb	 xor	 dl, -21			; ffffffebH
  001ca	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  001cd	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  001d0	3a d1		 cmp	 dl, cl
  001d2	74 5c		 je	 SHORT $LN85@LoadInt_e
  001d4	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001d7	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  001da	38 48 0c	 cmp	 BYTE PTR [eax+12], cl
  001dd	0f 84 93 00 00
	00		 je	 $LN1@LoadInt_e
  001e3	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  001e6	3a d1		 cmp	 dl, cl
  001e8	74 40		 je	 SHORT $LN83@LoadInt_e
  001ea	80 f2 ec	 xor	 dl, -20			; ffffffecH
  001ed	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  001f0	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  001f3	3a d1		 cmp	 dl, cl
  001f5	74 2d		 je	 SHORT $LN82@LoadInt_e
  001f7	80 f2 eb	 xor	 dl, -21			; ffffffebH
  001fa	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  001fd	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00200	3a d1		 cmp	 dl, cl
  00202	74 1a		 je	 SHORT $LN81@LoadInt_e
  00204	8a 40 10	 mov	 al, BYTE PTR [eax+16]
  00207	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0020a	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  0020d	3a c1		 cmp	 al, cl
  0020f	74 07		 je	 SHORT $LN80@LoadInt_e
  00211	34 ed		 xor	 al, -19			; ffffffedH
  00213	88 45 ec	 mov	 BYTE PTR __k$[ebp+16], al
  00216	eb 5e		 jmp	 SHORT $LN1@LoadInt_e
$LN80@LoadInt_e:
  00218	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0021c	eb 58		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  0021e	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00222	eb 52		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  00224	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00228	eb 4c		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  0022a	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  0022e	eb 46		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  00230	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00234	eb 40		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  00236	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0023a	eb 3a		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  0023c	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00240	eb 34		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  00242	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00246	eb 2e		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  00248	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0024c	eb 28		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  0024e	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00252	eb 22		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  00254	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00258	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  0025a	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0025e	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  00260	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00264	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  00266	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0026a	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  0026c	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00270	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  00272	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  00276	6a 03		 push	 3
  00278	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  0027b	88 4d e8	 mov	 BYTE PTR __k$[ebp+12], cl
  0027e	5a		 pop	 edx
$LL208@LoadInt_e:
  0027f	31 38		 xor	 DWORD PTR [eax], edi
  00281	83 c0 04	 add	 eax, 4
  00284	4a		 dec	 edx
  00285	75 f8		 jne	 SHORT $LL208@LoadInt_e

; 129  : 		return LoadInt(_t, _k, i);

  00287	ff 75 10	 push	 DWORD PTR _i$[ebp]
  0028a	8b 4d d8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0028d	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  00290	50		 push	 eax
  00291	8d 45 f0	 lea	 eax, DWORD PTR __t$[ebp]
  00294	50		 push	 eax
  00295	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBD0H@Z

; 130  : 	}

  0029b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0029e	5f		 pop	 edi
  0029f	5e		 pop	 esi
  002a0	33 cd		 xor	 ecx, ebp
  002a2	5b		 pop	 ebx
  002a3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002a8	c9		 leave
  002a9	c2 0c 00	 ret	 12			; 0000000cH
??$LoadInt_e@$06$0N@@ioINILoader@@QAEHAAY06$$CBDAAY0N@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<7,13>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@PAVioSetItemInfo@@@std@@PAVioSetItemInfo@@AAPAV3@@std@@YAXAAV?$allocator@PAVioSetItemInfo@@@0@PAPAVioSetItemInfo@@AAPAV2@@Z ; std::_Cons_val<std::allocator<ioSetItemInfo *>,ioSetItemInfo *,ioSetItemInfo * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@PAVioSetItemInfo@@@std@@PAVioSetItemInfo@@AAPAV3@@std@@YAXAAV?$allocator@PAVioSetItemInfo@@@0@PAPAVioSetItemInfo@@AAPAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAVioSetItemInfo@@@std@@PAVioSetItemInfo@@AAPAV3@@std@@YAXAAV?$allocator@PAVioSetItemInfo@@@0@PAPAVioSetItemInfo@@AAPAV2@@Z PROC ; std::_Cons_val<std::allocator<ioSetItemInfo *>,ioSetItemInfo *,ioSetItemInfo * &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@Cons_val:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@PAVioSetItemInfo@@@std@@PAVioSetItemInfo@@AAPAV3@@std@@YAXAAV?$allocator@PAVioSetItemInfo@@@0@PAPAVioSetItemInfo@@AAPAV2@@Z ENDP ; std::_Cons_val<std::allocator<ioSetItemInfo *>,ioSetItemInfo *,ioSetItemInfo * &>
_TEXT	ENDS
PUBLIC	??$?9KK@std@@YA_NABV?$allocator@K@0@0@Z		; std::operator!=<unsigned long,unsigned long>
; Function compile flags: /Ogsp
;	COMDAT ??$?9KK@std@@YA_NABV?$allocator@K@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9KK@std@@YA_NABV?$allocator@K@0@0@Z PROC		; std::operator!=<unsigned long,unsigned long>, COMDAT

; 271  : 	return (!(_Left == _Right));

  00000	32 c0		 xor	 al, al

; 272  : 	}

  00002	c3		 ret	 0
??$?9KK@std@@YA_NABV?$allocator@K@0@0@Z ENDP		; std::operator!=<unsigned long,unsigned long>
_TEXT	ENDS
PUBLIC	??$_Move@PAPAVioSetItemInfo@@PAPAV1@@std@@YAPAPAVioSetItemInfo@@PAPAV1@00@Z ; std::_Move<ioSetItemInfo * *,ioSetItemInfo * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAPAVioSetItemInfo@@PAPAV1@@std@@YAPAPAVioSetItemInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
__Cat$507438 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAPAVioSetItemInfo@@PAPAV1@@std@@YAPAPAVioSetItemInfo@@PAPAV1@00@Z PROC ; std::_Move<ioSetItemInfo * *,ioSetItemInfo * *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$507438[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAPAVioSetItemInfo@@PAPAV1@@std@@YAPAPAVioSetItemInfo@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<ioSetItemInfo * *,ioSetItemInfo * *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAPAVioSetItemInfo@@PAPAV1@@std@@YAPAPAVioSetItemInfo@@PAPAV1@00@Z ENDP ; std::_Move<ioSetItemInfo * *,ioSetItemInfo * *>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@K@std@@KK@std@@YAXAAV?$allocator@K@0@PAK$$QAK@Z ; std::_Cons_val<std::allocator<unsigned long>,unsigned long,unsigned long>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@K@std@@KK@std@@YAXAAV?$allocator@K@0@PAK$$QAK@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@K@std@@KK@std@@YAXAAV?$allocator@K@0@PAK$$QAK@Z PROC ; std::_Cons_val<std::allocator<unsigned long>,unsigned long,unsigned long>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN7@Cons_val@2
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@Cons_val@2:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@K@std@@KK@std@@YAXAAV?$allocator@K@0@PAK$$QAK@Z ENDP ; std::_Cons_val<std::allocator<unsigned long>,unsigned long,unsigned long>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVioSetItemInfo@@@std@@@std@@YAXPAPAVioSetItemInfo@@0AAV?$allocator@PAVioSetItemInfo@@@0@@Z ; std::_Destroy_range<std::allocator<ioSetItemInfo *> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@PAVioSetItemInfo@@@std@@@std@@YAXPAPAVioSetItemInfo@@0AAV?$allocator@PAVioSetItemInfo@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVioSetItemInfo@@@std@@@std@@YAXPAPAVioSetItemInfo@@0AAV?$allocator@PAVioSetItemInfo@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ioSetItemInfo *> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAVioSetItemInfo@@@std@@@std@@YAXPAPAVioSetItemInfo@@0AAV?$allocator@PAVioSetItemInfo@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioSetItemInfo *> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAVioSetItemInfo@@@std@@QAEXPAPAVioSetItemInfo@@ABQAV3@@Z ; std::allocator<ioSetItemInfo *>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@PAVioSetItemInfo@@@std@@QAEXPAPAVioSetItemInfo@@ABQAV3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAVioSetItemInfo@@@std@@QAEXPAPAVioSetItemInfo@@ABQAV3@@Z PROC ; std::allocator<ioSetItemInfo *>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN5@construct@3
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN5@construct@3:

; 198  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?construct@?$allocator@PAVioSetItemInfo@@@std@@QAEXPAPAVioSetItemInfo@@ABQAV3@@Z ENDP ; std::allocator<ioSetItemInfo *>::construct
_TEXT	ENDS
PUBLIC	??$encodeString@$0BM@@ioINILoader_e@@AAEPADAAY0BM@$$CBDPAD@Z ; ioINILoader_e::encodeString<28>
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$encodeString@$0BM@@ioINILoader_e@@AAEPADAAY0BM@$$CBDPAD@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_e$ = 12						; size = 4
??$encodeString@$0BM@@ioINILoader_e@@AAEPADAAY0BM@$$CBDPAD@Z PROC ; ioINILoader_e::encodeString<28>, COMDAT
; _this$ = ecx

; 215  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 216  : 		__ENCSTR(s, e);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00006	8a 11		 mov	 dl, BYTE PTR [ecx]
  00008	8b 45 0c	 mov	 eax, DWORD PTR _e$[ebp]
  0000b	53		 push	 ebx
  0000c	84 d2		 test	 dl, dl
  0000e	0f 84 6a 04 00
	00		 je	 $LN96@encodeStri
  00014	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00017	88 10		 mov	 BYTE PTR [eax], dl
  00019	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  0001c	84 d2		 test	 dl, dl
  0001e	0f 84 54 04 00
	00		 je	 $LN95@encodeStri
  00024	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00027	88 50 01	 mov	 BYTE PTR [eax+1], dl
  0002a	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  0002d	84 d2		 test	 dl, dl
  0002f	0f 84 3d 04 00
	00		 je	 $LN94@encodeStri
  00035	b3 eb		 mov	 bl, -21			; ffffffebH
  00037	32 d3		 xor	 dl, bl
  00039	88 50 02	 mov	 BYTE PTR [eax+2], dl
  0003c	8a 51 03	 mov	 dl, BYTE PTR [ecx+3]
  0003f	84 d2		 test	 dl, dl
  00041	0f 84 25 04 00
	00		 je	 $LN93@encodeStri
  00047	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0004a	88 50 03	 mov	 BYTE PTR [eax+3], dl
  0004d	8a 51 04	 mov	 dl, BYTE PTR [ecx+4]
  00050	84 d2		 test	 dl, dl
  00052	0f 84 0e 04 00
	00		 je	 $LN92@encodeStri
  00058	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0005b	88 50 04	 mov	 BYTE PTR [eax+4], dl
  0005e	8a 51 05	 mov	 dl, BYTE PTR [ecx+5]
  00061	84 d2		 test	 dl, dl
  00063	0f 84 f7 03 00
	00		 je	 $LN91@encodeStri
  00069	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0006c	88 50 05	 mov	 BYTE PTR [eax+5], dl
  0006f	8a 51 06	 mov	 dl, BYTE PTR [ecx+6]
  00072	84 d2		 test	 dl, dl
  00074	0f 84 e1 03 00
	00		 je	 $LN90@encodeStri
  0007a	32 d3		 xor	 dl, bl
  0007c	88 50 06	 mov	 BYTE PTR [eax+6], dl
  0007f	8a 51 07	 mov	 dl, BYTE PTR [ecx+7]
  00082	84 d2		 test	 dl, dl
  00084	0f 84 cb 03 00
	00		 je	 $LN89@encodeStri
  0008a	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0008d	88 50 07	 mov	 BYTE PTR [eax+7], dl
  00090	8a 51 08	 mov	 dl, BYTE PTR [ecx+8]
  00093	84 d2		 test	 dl, dl
  00095	0f 84 b4 03 00
	00		 je	 $LN88@encodeStri
  0009b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0009e	88 50 08	 mov	 BYTE PTR [eax+8], dl
  000a1	8a 51 09	 mov	 dl, BYTE PTR [ecx+9]
  000a4	84 d2		 test	 dl, dl
  000a6	0f 84 9d 03 00
	00		 je	 $LN87@encodeStri
  000ac	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000af	88 50 09	 mov	 BYTE PTR [eax+9], dl
  000b2	8a 51 0a	 mov	 dl, BYTE PTR [ecx+10]
  000b5	84 d2		 test	 dl, dl
  000b7	0f 84 87 03 00
	00		 je	 $LN86@encodeStri
  000bd	32 d3		 xor	 dl, bl
  000bf	88 50 0a	 mov	 BYTE PTR [eax+10], dl
  000c2	8a 51 0b	 mov	 dl, BYTE PTR [ecx+11]
  000c5	84 d2		 test	 dl, dl
  000c7	0f 84 71 03 00
	00		 je	 $LN85@encodeStri
  000cd	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d0	88 50 0b	 mov	 BYTE PTR [eax+11], dl
  000d3	8a 51 0c	 mov	 dl, BYTE PTR [ecx+12]
  000d6	84 d2		 test	 dl, dl
  000d8	0f 84 5a 03 00
	00		 je	 $LN84@encodeStri
  000de	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e1	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  000e4	8a 51 0d	 mov	 dl, BYTE PTR [ecx+13]
  000e7	84 d2		 test	 dl, dl
  000e9	0f 84 43 03 00
	00		 je	 $LN83@encodeStri
  000ef	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f2	88 50 0d	 mov	 BYTE PTR [eax+13], dl
  000f5	8a 51 0e	 mov	 dl, BYTE PTR [ecx+14]
  000f8	84 d2		 test	 dl, dl
  000fa	0f 84 2d 03 00
	00		 je	 $LN82@encodeStri
  00100	32 d3		 xor	 dl, bl
  00102	88 50 0e	 mov	 BYTE PTR [eax+14], dl
  00105	8a 51 0f	 mov	 dl, BYTE PTR [ecx+15]
  00108	84 d2		 test	 dl, dl
  0010a	0f 84 17 03 00
	00		 je	 $LN81@encodeStri
  00110	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00113	88 50 0f	 mov	 BYTE PTR [eax+15], dl
  00116	8a 51 10	 mov	 dl, BYTE PTR [ecx+16]
  00119	84 d2		 test	 dl, dl
  0011b	0f 84 00 03 00
	00		 je	 $LN80@encodeStri
  00121	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00124	88 50 10	 mov	 BYTE PTR [eax+16], dl
  00127	8a 51 11	 mov	 dl, BYTE PTR [ecx+17]
  0012a	84 d2		 test	 dl, dl
  0012c	0f 84 e9 02 00
	00		 je	 $LN79@encodeStri
  00132	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00135	88 50 11	 mov	 BYTE PTR [eax+17], dl
  00138	8a 51 12	 mov	 dl, BYTE PTR [ecx+18]
  0013b	84 d2		 test	 dl, dl
  0013d	0f 84 d3 02 00
	00		 je	 $LN78@encodeStri
  00143	32 d3		 xor	 dl, bl
  00145	88 50 12	 mov	 BYTE PTR [eax+18], dl
  00148	8a 51 13	 mov	 dl, BYTE PTR [ecx+19]
  0014b	84 d2		 test	 dl, dl
  0014d	0f 84 bd 02 00
	00		 je	 $LN77@encodeStri
  00153	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00156	88 50 13	 mov	 BYTE PTR [eax+19], dl
  00159	8a 51 14	 mov	 dl, BYTE PTR [ecx+20]
  0015c	84 d2		 test	 dl, dl
  0015e	0f 84 a6 02 00
	00		 je	 $LN76@encodeStri
  00164	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00167	88 50 14	 mov	 BYTE PTR [eax+20], dl
  0016a	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  0016d	84 d2		 test	 dl, dl
  0016f	0f 84 8f 02 00
	00		 je	 $LN75@encodeStri
  00175	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00178	88 50 15	 mov	 BYTE PTR [eax+21], dl
  0017b	8a 51 16	 mov	 dl, BYTE PTR [ecx+22]
  0017e	84 d2		 test	 dl, dl
  00180	0f 84 79 02 00
	00		 je	 $LN74@encodeStri
  00186	32 d3		 xor	 dl, bl
  00188	88 50 16	 mov	 BYTE PTR [eax+22], dl
  0018b	8a 51 17	 mov	 dl, BYTE PTR [ecx+23]
  0018e	84 d2		 test	 dl, dl
  00190	0f 84 60 02 00
	00		 je	 $LN73@encodeStri
  00196	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00199	88 50 17	 mov	 BYTE PTR [eax+23], dl
  0019c	8a 51 18	 mov	 dl, BYTE PTR [ecx+24]
  0019f	84 d2		 test	 dl, dl
  001a1	0f 84 46 02 00
	00		 je	 $LN72@encodeStri
  001a7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001aa	88 50 18	 mov	 BYTE PTR [eax+24], dl
  001ad	8a 51 19	 mov	 dl, BYTE PTR [ecx+25]
  001b0	84 d2		 test	 dl, dl
  001b2	0f 84 2c 02 00
	00		 je	 $LN71@encodeStri
  001b8	80 f2 ec	 xor	 dl, -20			; ffffffecH
  001bb	88 50 19	 mov	 BYTE PTR [eax+25], dl
  001be	8a 51 1a	 mov	 dl, BYTE PTR [ecx+26]
  001c1	84 d2		 test	 dl, dl
  001c3	0f 84 13 02 00
	00		 je	 $LN70@encodeStri
  001c9	32 d3		 xor	 dl, bl
  001cb	88 50 1a	 mov	 BYTE PTR [eax+26], dl
  001ce	8a 51 1b	 mov	 dl, BYTE PTR [ecx+27]
  001d1	84 d2		 test	 dl, dl
  001d3	0f 84 fa 01 00
	00		 je	 $LN69@encodeStri
  001d9	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001dc	88 50 1b	 mov	 BYTE PTR [eax+27], dl
  001df	8a 51 1c	 mov	 dl, BYTE PTR [ecx+28]
  001e2	84 d2		 test	 dl, dl
  001e4	0f 84 e0 01 00
	00		 je	 $LN68@encodeStri
  001ea	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001ed	88 50 1c	 mov	 BYTE PTR [eax+28], dl
  001f0	8a 51 1d	 mov	 dl, BYTE PTR [ecx+29]
  001f3	84 d2		 test	 dl, dl
  001f5	0f 84 c6 01 00
	00		 je	 $LN67@encodeStri
  001fb	80 f2 ec	 xor	 dl, -20			; ffffffecH
  001fe	88 50 1d	 mov	 BYTE PTR [eax+29], dl
  00201	8a 51 1e	 mov	 dl, BYTE PTR [ecx+30]
  00204	84 d2		 test	 dl, dl
  00206	0f 84 ad 01 00
	00		 je	 $LN66@encodeStri
  0020c	32 d3		 xor	 dl, bl
  0020e	88 50 1e	 mov	 BYTE PTR [eax+30], dl
  00211	8a 51 1f	 mov	 dl, BYTE PTR [ecx+31]
  00214	84 d2		 test	 dl, dl
  00216	0f 84 94 01 00
	00		 je	 $LN65@encodeStri
  0021c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0021f	88 50 1f	 mov	 BYTE PTR [eax+31], dl
  00222	8a 51 20	 mov	 dl, BYTE PTR [ecx+32]
  00225	84 d2		 test	 dl, dl
  00227	0f 84 7a 01 00
	00		 je	 $LN64@encodeStri
  0022d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00230	88 50 20	 mov	 BYTE PTR [eax+32], dl
  00233	8a 51 21	 mov	 dl, BYTE PTR [ecx+33]
  00236	84 d2		 test	 dl, dl
  00238	0f 84 60 01 00
	00		 je	 $LN63@encodeStri
  0023e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00241	88 50 21	 mov	 BYTE PTR [eax+33], dl
  00244	8a 51 22	 mov	 dl, BYTE PTR [ecx+34]
  00247	84 d2		 test	 dl, dl
  00249	0f 84 47 01 00
	00		 je	 $LN62@encodeStri
  0024f	32 d3		 xor	 dl, bl
  00251	88 50 22	 mov	 BYTE PTR [eax+34], dl
  00254	8a 51 23	 mov	 dl, BYTE PTR [ecx+35]
  00257	84 d2		 test	 dl, dl
  00259	0f 84 2e 01 00
	00		 je	 $LN61@encodeStri
  0025f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00262	88 50 23	 mov	 BYTE PTR [eax+35], dl
  00265	8a 51 24	 mov	 dl, BYTE PTR [ecx+36]
  00268	84 d2		 test	 dl, dl
  0026a	0f 84 14 01 00
	00		 je	 $LN60@encodeStri
  00270	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00273	88 50 24	 mov	 BYTE PTR [eax+36], dl
  00276	8a 51 25	 mov	 dl, BYTE PTR [ecx+37]
  00279	84 d2		 test	 dl, dl
  0027b	0f 84 fa 00 00
	00		 je	 $LN59@encodeStri
  00281	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00284	88 50 25	 mov	 BYTE PTR [eax+37], dl
  00287	8a 51 26	 mov	 dl, BYTE PTR [ecx+38]
  0028a	84 d2		 test	 dl, dl
  0028c	0f 84 e1 00 00
	00		 je	 $LN58@encodeStri
  00292	32 d3		 xor	 dl, bl
  00294	88 50 26	 mov	 BYTE PTR [eax+38], dl
  00297	8a 51 27	 mov	 dl, BYTE PTR [ecx+39]
  0029a	84 d2		 test	 dl, dl
  0029c	0f 84 c8 00 00
	00		 je	 $LN57@encodeStri
  002a2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  002a5	88 50 27	 mov	 BYTE PTR [eax+39], dl
  002a8	8a 51 28	 mov	 dl, BYTE PTR [ecx+40]
  002ab	84 d2		 test	 dl, dl
  002ad	0f 84 ae 00 00
	00		 je	 $LN56@encodeStri
  002b3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  002b6	88 50 28	 mov	 BYTE PTR [eax+40], dl
  002b9	8a 51 29	 mov	 dl, BYTE PTR [ecx+41]
  002bc	84 d2		 test	 dl, dl
  002be	0f 84 94 00 00
	00		 je	 $LN55@encodeStri
  002c4	80 f2 ec	 xor	 dl, -20			; ffffffecH
  002c7	88 50 29	 mov	 BYTE PTR [eax+41], dl
  002ca	8a 51 2a	 mov	 dl, BYTE PTR [ecx+42]
  002cd	84 d2		 test	 dl, dl
  002cf	74 7f		 je	 SHORT $LN54@encodeStri
  002d1	32 d3		 xor	 dl, bl
  002d3	88 50 2a	 mov	 BYTE PTR [eax+42], dl
  002d6	8a 51 2b	 mov	 dl, BYTE PTR [ecx+43]
  002d9	84 d2		 test	 dl, dl
  002db	74 6a		 je	 SHORT $LN53@encodeStri
  002dd	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  002e0	88 50 2b	 mov	 BYTE PTR [eax+43], dl
  002e3	8a 51 2c	 mov	 dl, BYTE PTR [ecx+44]
  002e6	84 d2		 test	 dl, dl
  002e8	74 54		 je	 SHORT $LN52@encodeStri
  002ea	80 f2 ed	 xor	 dl, -19			; ffffffedH
  002ed	88 50 2c	 mov	 BYTE PTR [eax+44], dl
  002f0	8a 51 2d	 mov	 dl, BYTE PTR [ecx+45]
  002f3	84 d2		 test	 dl, dl
  002f5	74 3e		 je	 SHORT $LN51@encodeStri
  002f7	80 f2 ec	 xor	 dl, -20			; ffffffecH
  002fa	88 50 2d	 mov	 BYTE PTR [eax+45], dl
  002fd	8a 51 2e	 mov	 dl, BYTE PTR [ecx+46]
  00300	84 d2		 test	 dl, dl
  00302	74 29		 je	 SHORT $LN50@encodeStri
  00304	32 d3		 xor	 dl, bl
  00306	88 50 2e	 mov	 BYTE PTR [eax+46], dl
  00309	8a 51 2f	 mov	 dl, BYTE PTR [ecx+47]
  0030c	84 d2		 test	 dl, dl
  0030e	74 14		 je	 SHORT $LN49@encodeStri
  00310	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00313	88 50 2f	 mov	 BYTE PTR [eax+47], dl
  00316	8a 49 30	 mov	 cl, BYTE PTR [ecx+48]
  00319	80 f1 ed	 xor	 cl, -19			; ffffffedH
  0031c	88 48 30	 mov	 BYTE PTR [eax+48], cl
  0031f	e9 5d 01 00 00	 jmp	 $LN1@encodeStri
$LN49@encodeStri:
  00324	c6 40 2f ea	 mov	 BYTE PTR [eax+47], -22	; ffffffeaH
  00328	e9 54 01 00 00	 jmp	 $LN1@encodeStri
$LN50@encodeStri:
  0032d	88 58 2e	 mov	 BYTE PTR [eax+46], bl
  00330	e9 4c 01 00 00	 jmp	 $LN1@encodeStri
$LN51@encodeStri:
  00335	c6 40 2d ec	 mov	 BYTE PTR [eax+45], -20	; ffffffecH
  00339	e9 43 01 00 00	 jmp	 $LN1@encodeStri
$LN52@encodeStri:
  0033e	c6 40 2c ed	 mov	 BYTE PTR [eax+44], -19	; ffffffedH
  00342	e9 3a 01 00 00	 jmp	 $LN1@encodeStri
$LN53@encodeStri:
  00347	c6 40 2b ea	 mov	 BYTE PTR [eax+43], -22	; ffffffeaH
  0034b	e9 31 01 00 00	 jmp	 $LN1@encodeStri
$LN54@encodeStri:
  00350	88 58 2a	 mov	 BYTE PTR [eax+42], bl
  00353	e9 29 01 00 00	 jmp	 $LN1@encodeStri
$LN55@encodeStri:
  00358	c6 40 29 ec	 mov	 BYTE PTR [eax+41], -20	; ffffffecH
  0035c	e9 20 01 00 00	 jmp	 $LN1@encodeStri
$LN56@encodeStri:
  00361	c6 40 28 ed	 mov	 BYTE PTR [eax+40], -19	; ffffffedH
  00365	e9 17 01 00 00	 jmp	 $LN1@encodeStri
$LN57@encodeStri:
  0036a	c6 40 27 ea	 mov	 BYTE PTR [eax+39], -22	; ffffffeaH
  0036e	e9 0e 01 00 00	 jmp	 $LN1@encodeStri
$LN58@encodeStri:
  00373	88 58 26	 mov	 BYTE PTR [eax+38], bl
  00376	e9 06 01 00 00	 jmp	 $LN1@encodeStri
$LN59@encodeStri:
  0037b	c6 40 25 ec	 mov	 BYTE PTR [eax+37], -20	; ffffffecH
  0037f	e9 fd 00 00 00	 jmp	 $LN1@encodeStri
$LN60@encodeStri:
  00384	c6 40 24 ed	 mov	 BYTE PTR [eax+36], -19	; ffffffedH
  00388	e9 f4 00 00 00	 jmp	 $LN1@encodeStri
$LN61@encodeStri:
  0038d	c6 40 23 ea	 mov	 BYTE PTR [eax+35], -22	; ffffffeaH
  00391	e9 eb 00 00 00	 jmp	 $LN1@encodeStri
$LN62@encodeStri:
  00396	88 58 22	 mov	 BYTE PTR [eax+34], bl
  00399	e9 e3 00 00 00	 jmp	 $LN1@encodeStri
$LN63@encodeStri:
  0039e	c6 40 21 ec	 mov	 BYTE PTR [eax+33], -20	; ffffffecH
  003a2	e9 da 00 00 00	 jmp	 $LN1@encodeStri
$LN64@encodeStri:
  003a7	c6 40 20 ed	 mov	 BYTE PTR [eax+32], -19	; ffffffedH
  003ab	e9 d1 00 00 00	 jmp	 $LN1@encodeStri
$LN65@encodeStri:
  003b0	c6 40 1f ea	 mov	 BYTE PTR [eax+31], -22	; ffffffeaH
  003b4	e9 c8 00 00 00	 jmp	 $LN1@encodeStri
$LN66@encodeStri:
  003b9	88 58 1e	 mov	 BYTE PTR [eax+30], bl
  003bc	e9 c0 00 00 00	 jmp	 $LN1@encodeStri
$LN67@encodeStri:
  003c1	c6 40 1d ec	 mov	 BYTE PTR [eax+29], -20	; ffffffecH
  003c5	e9 b7 00 00 00	 jmp	 $LN1@encodeStri
$LN68@encodeStri:
  003ca	c6 40 1c ed	 mov	 BYTE PTR [eax+28], -19	; ffffffedH
  003ce	e9 ae 00 00 00	 jmp	 $LN1@encodeStri
$LN69@encodeStri:
  003d3	c6 40 1b ea	 mov	 BYTE PTR [eax+27], -22	; ffffffeaH
  003d7	e9 a5 00 00 00	 jmp	 $LN1@encodeStri
$LN70@encodeStri:
  003dc	88 58 1a	 mov	 BYTE PTR [eax+26], bl
  003df	e9 9d 00 00 00	 jmp	 $LN1@encodeStri
$LN71@encodeStri:
  003e4	c6 40 19 ec	 mov	 BYTE PTR [eax+25], -20	; ffffffecH
  003e8	e9 94 00 00 00	 jmp	 $LN1@encodeStri
$LN72@encodeStri:
  003ed	c6 40 18 ed	 mov	 BYTE PTR [eax+24], -19	; ffffffedH
  003f1	e9 8b 00 00 00	 jmp	 $LN1@encodeStri
$LN73@encodeStri:
  003f6	c6 40 17 ea	 mov	 BYTE PTR [eax+23], -22	; ffffffeaH
  003fa	e9 82 00 00 00	 jmp	 $LN1@encodeStri
$LN74@encodeStri:
  003ff	88 58 16	 mov	 BYTE PTR [eax+22], bl
  00402	eb 7d		 jmp	 SHORT $LN1@encodeStri
$LN75@encodeStri:
  00404	c6 40 15 ec	 mov	 BYTE PTR [eax+21], -20	; ffffffecH
  00408	eb 77		 jmp	 SHORT $LN1@encodeStri
$LN76@encodeStri:
  0040a	c6 40 14 ed	 mov	 BYTE PTR [eax+20], -19	; ffffffedH
  0040e	eb 71		 jmp	 SHORT $LN1@encodeStri
$LN77@encodeStri:
  00410	c6 40 13 ea	 mov	 BYTE PTR [eax+19], -22	; ffffffeaH
  00414	eb 6b		 jmp	 SHORT $LN1@encodeStri
$LN78@encodeStri:
  00416	88 58 12	 mov	 BYTE PTR [eax+18], bl
  00419	eb 66		 jmp	 SHORT $LN1@encodeStri
$LN79@encodeStri:
  0041b	c6 40 11 ec	 mov	 BYTE PTR [eax+17], -20	; ffffffecH
  0041f	eb 60		 jmp	 SHORT $LN1@encodeStri
$LN80@encodeStri:
  00421	c6 40 10 ed	 mov	 BYTE PTR [eax+16], -19	; ffffffedH
  00425	eb 5a		 jmp	 SHORT $LN1@encodeStri
$LN81@encodeStri:
  00427	c6 40 0f ea	 mov	 BYTE PTR [eax+15], -22	; ffffffeaH
  0042b	eb 54		 jmp	 SHORT $LN1@encodeStri
$LN82@encodeStri:
  0042d	88 58 0e	 mov	 BYTE PTR [eax+14], bl
  00430	eb 4f		 jmp	 SHORT $LN1@encodeStri
$LN83@encodeStri:
  00432	c6 40 0d ec	 mov	 BYTE PTR [eax+13], -20	; ffffffecH
  00436	eb 49		 jmp	 SHORT $LN1@encodeStri
$LN84@encodeStri:
  00438	c6 40 0c ed	 mov	 BYTE PTR [eax+12], -19	; ffffffedH
  0043c	eb 43		 jmp	 SHORT $LN1@encodeStri
$LN85@encodeStri:
  0043e	c6 40 0b ea	 mov	 BYTE PTR [eax+11], -22	; ffffffeaH
  00442	eb 3d		 jmp	 SHORT $LN1@encodeStri
$LN86@encodeStri:
  00444	88 58 0a	 mov	 BYTE PTR [eax+10], bl
  00447	eb 38		 jmp	 SHORT $LN1@encodeStri
$LN87@encodeStri:
  00449	c6 40 09 ec	 mov	 BYTE PTR [eax+9], -20	; ffffffecH
  0044d	eb 32		 jmp	 SHORT $LN1@encodeStri
$LN88@encodeStri:
  0044f	c6 40 08 ed	 mov	 BYTE PTR [eax+8], -19	; ffffffedH
  00453	eb 2c		 jmp	 SHORT $LN1@encodeStri
$LN89@encodeStri:
  00455	c6 40 07 ea	 mov	 BYTE PTR [eax+7], -22	; ffffffeaH
  00459	eb 26		 jmp	 SHORT $LN1@encodeStri
$LN90@encodeStri:
  0045b	88 58 06	 mov	 BYTE PTR [eax+6], bl
  0045e	eb 21		 jmp	 SHORT $LN1@encodeStri
$LN91@encodeStri:
  00460	c6 40 05 ec	 mov	 BYTE PTR [eax+5], -20	; ffffffecH
  00464	eb 1b		 jmp	 SHORT $LN1@encodeStri
$LN92@encodeStri:
  00466	c6 40 04 ed	 mov	 BYTE PTR [eax+4], -19	; ffffffedH
  0046a	eb 15		 jmp	 SHORT $LN1@encodeStri
$LN93@encodeStri:
  0046c	c6 40 03 ea	 mov	 BYTE PTR [eax+3], -22	; ffffffeaH
  00470	eb 0f		 jmp	 SHORT $LN1@encodeStri
$LN94@encodeStri:
  00472	c6 40 02 eb	 mov	 BYTE PTR [eax+2], -21	; ffffffebH
  00476	eb 09		 jmp	 SHORT $LN1@encodeStri
$LN95@encodeStri:
  00478	c6 40 01 ec	 mov	 BYTE PTR [eax+1], -20	; ffffffecH
  0047c	eb 03		 jmp	 SHORT $LN1@encodeStri
$LN96@encodeStri:
  0047e	c6 00 ed	 mov	 BYTE PTR [eax], -19	; ffffffedH
$LN1@encodeStri:
  00481	6a 06		 push	 6
  00483	5a		 pop	 edx
  00484	8b c8		 mov	 ecx, eax
  00486	c6 40 1b 00	 mov	 BYTE PTR [eax+27], 0
  0048a	5b		 pop	 ebx
$LL104@encodeStri:
  0048b	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  00491	83 c1 04	 add	 ecx, 4
  00494	4a		 dec	 edx
  00495	75 f4		 jne	 SHORT $LL104@encodeStri
  00497	56		 push	 esi
  00498	6a 18		 push	 24			; 00000018H
  0049a	5e		 pop	 esi
$LL101@encodeStri:
  0049b	8b ce		 mov	 ecx, esi
  0049d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  004a3	79 05		 jns	 SHORT $LN111@encodeStri
  004a5	49		 dec	 ecx
  004a6	83 c9 fc	 or	 ecx, -4			; fffffffcH
  004a9	41		 inc	 ecx
$LN111@encodeStri:
  004aa	b2 ed		 mov	 dl, -19			; ffffffedH
  004ac	2a d1		 sub	 dl, cl
  004ae	30 14 06	 xor	 BYTE PTR [esi+eax], dl
  004b1	46		 inc	 esi
  004b2	83 fe 1b	 cmp	 esi, 27			; 0000001bH
  004b5	7c e4		 jl	 SHORT $LL101@encodeStri
  004b7	5e		 pop	 esi

; 217  : 		return e;
; 218  : 	}

  004b8	5d		 pop	 ebp
  004b9	c2 08 00	 ret	 8
??$encodeString@$0BM@@ioINILoader_e@@AAEPADAAY0BM@$$CBDPAD@Z ENDP ; ioINILoader_e::encodeString<28>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAPAVioSetItemInfo@@PAPAV1@V?$allocator@PAVioSetItemInfo@@@std@@@std@@YAPAPAVioSetItemInfo@@PAPAV1@00AAV?$allocator@PAVioSetItemInfo@@@0@@Z ; std::_Uninitialized_move<ioSetItemInfo * *,ioSetItemInfo * *,std::allocator<ioSetItemInfo *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAPAVioSetItemInfo@@PAPAV1@V?$allocator@PAVioSetItemInfo@@@std@@@std@@YAPAPAVioSetItemInfo@@PAPAV1@00AAV?$allocator@PAVioSetItemInfo@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVioSetItemInfo@@PAPAV1@V?$allocator@PAVioSetItemInfo@@@std@@@std@@YAPAPAVioSetItemInfo@@PAPAV1@00AAV?$allocator@PAVioSetItemInfo@@@0@@Z PROC ; std::_Uninitialized_move<ioSetItemInfo * *,ioSetItemInfo * *,std::allocator<ioSetItemInfo *> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2
  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 472  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAVioSetItemInfo@@PAPAV1@V?$allocator@PAVioSetItemInfo@@@std@@@std@@YAPAPAVioSetItemInfo@@PAPAV1@00AAV?$allocator@PAVioSetItemInfo@@@0@@Z ENDP ; std::_Uninitialized_move<ioSetItemInfo * *,ioSetItemInfo * *,std::allocator<ioSetItemInfo *> >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@KV?$allocator@K@std@@@std@@IBEII@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@KV?$allocator@K@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@KV?$allocator@K@std@@@std@@IBEII@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  0000d	c1 f8 02	 sar	 eax, 2
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to@2
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to@2
$LN4@Grow_to@2:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to@2:

; 1279 : 		if (_Capacity < _Count)

  00020	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00023	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?_Grow_to@?$vector@KV?$allocator@K@std@@@std@@IBEII@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAE@PAKPBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::_Vector_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAE@PAKPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAE@PAKPBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::_Vector_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QAE@PAKPBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::_Vector_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@K@std@@QAEPAKI@Z		; std::allocator<unsigned long>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@K@std@@QAEPAKI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@K@std@@QAEPAKI@Z PROC		; std::allocator<unsigned long>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@K@std@@YAPAKIPAK@Z ; std::_Allocate<unsigned long>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@K@std@@QAEPAKI@Z ENDP		; std::allocator<unsigned long>::allocate
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator==
_TEXT	ENDS
PUBLIC	??$_Move@PAKPAK@std@@YAPAKPAK00@Z		; std::_Move<unsigned long *,unsigned long *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAKPAK@std@@YAPAKPAK00@Z
_TEXT	SEGMENT
__Cat$507589 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAKPAK@std@@YAPAKPAK00@Z PROC			; std::_Move<unsigned long *,unsigned long *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$507589[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAKPAK@std@@YAPAKPAK00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<unsigned long *,unsigned long *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAKPAK@std@@YAPAKPAK00@Z ENDP			; std::_Move<unsigned long *,unsigned long *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z ; std::_Destroy_range<std::allocator<unsigned long> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned long> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAKPAKV?$allocator@K@std@@@std@@YAPAKPAK00AAV?$allocator@K@0@@Z ; std::_Uninitialized_move<unsigned long *,unsigned long *,std::allocator<unsigned long> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAKPAKV?$allocator@K@std@@@std@@YAPAKPAK00AAV?$allocator@K@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAKPAKV?$allocator@K@std@@@std@@YAPAKPAK00AAV?$allocator@K@0@@Z PROC ; std::_Uninitialized_move<unsigned long *,unsigned long *,std::allocator<unsigned long> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2
  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 472  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAKPAKV?$allocator@K@std@@@std@@YAPAKPAK00AAV?$allocator@K@0@@Z ENDP ; std::_Uninitialized_move<unsigned long *,unsigned long *,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	?GetSetInfoByIdx@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@H@Z ; ioSetItemInfoManager::GetSetInfoByIdx
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosetiteminfomanager.cpp
;	COMDAT ?GetSetInfoByIdx@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@H@Z
_TEXT	SEGMENT
_iIdx$ = 8						; size = 4
?GetSetInfoByIdx@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@H@Z PROC ; ioSetItemInfoManager::GetSetInfoByIdx, COMDAT
; _this$ = ecx

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 98   : 	if( COMPARE( iIdx, 0, GetTotalSetCount() ) )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iIdx$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	78 15		 js	 SHORT $LN1@GetSetInfo
  0000a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0000d	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  00010	c1 fa 02	 sar	 edx, 2
  00013	3b c2		 cmp	 eax, edx
  00015	7d 08		 jge	 SHORT $LN1@GetSetInfo

; 99   : 		return m_SetInfoList[iIdx];

  00017	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001a	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  0001d	eb 02		 jmp	 SHORT $LN2@GetSetInfo
$LN1@GetSetInfo:

; 100  : 
; 101  : 	return NULL;

  0001f	33 c0		 xor	 eax, eax
$LN2@GetSetInfo:

; 102  : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?GetSetInfoByIdx@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@H@Z ENDP ; ioSetItemInfoManager::GetSetInfoByIdx
_TEXT	ENDS
PUBLIC	??0?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE@XZ ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@XZ ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@XZ ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::end
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QAE@PAPAVioSetItemInfo@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::_Vector_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QAE@PAPAVioSetItemInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QAE@PAPAVioSetItemInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::_Vector_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@std@@QAE@PAPAVioSetItemInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >::_Vector_iterator<std::_Vector_val<ioSetItemInfo *,std::allocator<ioSetItemInfo *> > >
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@@Z ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@@Z PROC ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@@Z ENDP ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IAEXPAPAVioSetItemInfo@@0@Z ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IAEXPAPAVioSetItemInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IAEXPAPAVioSetItemInfo@@0@Z PROC ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IAEXPAPAVioSetItemInfo@@0@Z ENDP ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Destroy
_TEXT	ENDS
PUBLIC	??$?0$0BM@@ioINILoader_e@@QAE@AAY0BM@$$CBD_N@Z	; ioINILoader_e::ioINILoader_e<28>
EXTRN	__imp_??0ioINILoader@@QAE@PBD_N@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$?0$0BM@@ioINILoader_e@@QAE@AAY0BM@$$CBD_N@Z
_TEXT	SEGMENT
_fn$ = 8						; size = 4
_b$ = 12						; size = 1
??$?0$0BM@@ioINILoader_e@@QAE@AAY0BM@$$CBD_N@Z PROC	; ioINILoader_e::ioINILoader_e<28>, COMDAT
; _this$ = ecx

; 224  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _fn$[ebp]
  0000b	8a 11		 mov	 dl, BYTE PTR [ecx]
  0000d	8d 87 50 03 00
	00		 lea	 eax, DWORD PTR [edi+848]
  00013	84 d2		 test	 dl, dl
  00015	0f 84 6a 04 00
	00		 je	 $LN99@ioINILoade
  0001b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0001e	88 10		 mov	 BYTE PTR [eax], dl
  00020	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00023	84 d2		 test	 dl, dl
  00025	0f 84 54 04 00
	00		 je	 $LN98@ioINILoade
  0002b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0002e	88 50 01	 mov	 BYTE PTR [eax+1], dl
  00031	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  00034	84 d2		 test	 dl, dl
  00036	0f 84 3d 04 00
	00		 je	 $LN97@ioINILoade
  0003c	b3 eb		 mov	 bl, -21			; ffffffebH
  0003e	32 d3		 xor	 dl, bl
  00040	88 50 02	 mov	 BYTE PTR [eax+2], dl
  00043	8a 51 03	 mov	 dl, BYTE PTR [ecx+3]
  00046	84 d2		 test	 dl, dl
  00048	0f 84 25 04 00
	00		 je	 $LN96@ioINILoade
  0004e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00051	88 50 03	 mov	 BYTE PTR [eax+3], dl
  00054	8a 51 04	 mov	 dl, BYTE PTR [ecx+4]
  00057	84 d2		 test	 dl, dl
  00059	0f 84 0e 04 00
	00		 je	 $LN95@ioINILoade
  0005f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00062	88 50 04	 mov	 BYTE PTR [eax+4], dl
  00065	8a 51 05	 mov	 dl, BYTE PTR [ecx+5]
  00068	84 d2		 test	 dl, dl
  0006a	0f 84 f7 03 00
	00		 je	 $LN94@ioINILoade
  00070	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00073	88 50 05	 mov	 BYTE PTR [eax+5], dl
  00076	8a 51 06	 mov	 dl, BYTE PTR [ecx+6]
  00079	84 d2		 test	 dl, dl
  0007b	0f 84 e1 03 00
	00		 je	 $LN93@ioINILoade
  00081	32 d3		 xor	 dl, bl
  00083	88 50 06	 mov	 BYTE PTR [eax+6], dl
  00086	8a 51 07	 mov	 dl, BYTE PTR [ecx+7]
  00089	84 d2		 test	 dl, dl
  0008b	0f 84 cb 03 00
	00		 je	 $LN92@ioINILoade
  00091	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00094	88 50 07	 mov	 BYTE PTR [eax+7], dl
  00097	8a 51 08	 mov	 dl, BYTE PTR [ecx+8]
  0009a	84 d2		 test	 dl, dl
  0009c	0f 84 b4 03 00
	00		 je	 $LN91@ioINILoade
  000a2	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a5	88 50 08	 mov	 BYTE PTR [eax+8], dl
  000a8	8a 51 09	 mov	 dl, BYTE PTR [ecx+9]
  000ab	84 d2		 test	 dl, dl
  000ad	0f 84 9d 03 00
	00		 je	 $LN90@ioINILoade
  000b3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b6	88 50 09	 mov	 BYTE PTR [eax+9], dl
  000b9	8a 51 0a	 mov	 dl, BYTE PTR [ecx+10]
  000bc	84 d2		 test	 dl, dl
  000be	0f 84 87 03 00
	00		 je	 $LN89@ioINILoade
  000c4	32 d3		 xor	 dl, bl
  000c6	88 50 0a	 mov	 BYTE PTR [eax+10], dl
  000c9	8a 51 0b	 mov	 dl, BYTE PTR [ecx+11]
  000cc	84 d2		 test	 dl, dl
  000ce	0f 84 71 03 00
	00		 je	 $LN88@ioINILoade
  000d4	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d7	88 50 0b	 mov	 BYTE PTR [eax+11], dl
  000da	8a 51 0c	 mov	 dl, BYTE PTR [ecx+12]
  000dd	84 d2		 test	 dl, dl
  000df	0f 84 5a 03 00
	00		 je	 $LN87@ioINILoade
  000e5	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e8	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  000eb	8a 51 0d	 mov	 dl, BYTE PTR [ecx+13]
  000ee	84 d2		 test	 dl, dl
  000f0	0f 84 43 03 00
	00		 je	 $LN86@ioINILoade
  000f6	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f9	88 50 0d	 mov	 BYTE PTR [eax+13], dl
  000fc	8a 51 0e	 mov	 dl, BYTE PTR [ecx+14]
  000ff	84 d2		 test	 dl, dl
  00101	0f 84 2d 03 00
	00		 je	 $LN85@ioINILoade
  00107	32 d3		 xor	 dl, bl
  00109	88 50 0e	 mov	 BYTE PTR [eax+14], dl
  0010c	8a 51 0f	 mov	 dl, BYTE PTR [ecx+15]
  0010f	84 d2		 test	 dl, dl
  00111	0f 84 17 03 00
	00		 je	 $LN84@ioINILoade
  00117	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011a	88 50 0f	 mov	 BYTE PTR [eax+15], dl
  0011d	8a 51 10	 mov	 dl, BYTE PTR [ecx+16]
  00120	84 d2		 test	 dl, dl
  00122	0f 84 00 03 00
	00		 je	 $LN83@ioINILoade
  00128	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0012b	88 50 10	 mov	 BYTE PTR [eax+16], dl
  0012e	8a 51 11	 mov	 dl, BYTE PTR [ecx+17]
  00131	84 d2		 test	 dl, dl
  00133	0f 84 e9 02 00
	00		 je	 $LN82@ioINILoade
  00139	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0013c	88 50 11	 mov	 BYTE PTR [eax+17], dl
  0013f	8a 51 12	 mov	 dl, BYTE PTR [ecx+18]
  00142	84 d2		 test	 dl, dl
  00144	0f 84 d3 02 00
	00		 je	 $LN81@ioINILoade
  0014a	32 d3		 xor	 dl, bl
  0014c	88 50 12	 mov	 BYTE PTR [eax+18], dl
  0014f	8a 51 13	 mov	 dl, BYTE PTR [ecx+19]
  00152	84 d2		 test	 dl, dl
  00154	0f 84 bd 02 00
	00		 je	 $LN80@ioINILoade
  0015a	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0015d	88 50 13	 mov	 BYTE PTR [eax+19], dl
  00160	8a 51 14	 mov	 dl, BYTE PTR [ecx+20]
  00163	84 d2		 test	 dl, dl
  00165	0f 84 a6 02 00
	00		 je	 $LN79@ioINILoade
  0016b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016e	88 50 14	 mov	 BYTE PTR [eax+20], dl
  00171	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00174	84 d2		 test	 dl, dl
  00176	0f 84 8f 02 00
	00		 je	 $LN78@ioINILoade
  0017c	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0017f	88 50 15	 mov	 BYTE PTR [eax+21], dl
  00182	8a 51 16	 mov	 dl, BYTE PTR [ecx+22]
  00185	84 d2		 test	 dl, dl
  00187	0f 84 79 02 00
	00		 je	 $LN77@ioINILoade
  0018d	32 d3		 xor	 dl, bl
  0018f	88 50 16	 mov	 BYTE PTR [eax+22], dl
  00192	8a 51 17	 mov	 dl, BYTE PTR [ecx+23]
  00195	84 d2		 test	 dl, dl
  00197	0f 84 60 02 00
	00		 je	 $LN76@ioINILoade
  0019d	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001a0	88 50 17	 mov	 BYTE PTR [eax+23], dl
  001a3	8a 51 18	 mov	 dl, BYTE PTR [ecx+24]
  001a6	84 d2		 test	 dl, dl
  001a8	0f 84 46 02 00
	00		 je	 $LN75@ioINILoade
  001ae	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b1	88 50 18	 mov	 BYTE PTR [eax+24], dl
  001b4	8a 51 19	 mov	 dl, BYTE PTR [ecx+25]
  001b7	84 d2		 test	 dl, dl
  001b9	0f 84 2c 02 00
	00		 je	 $LN74@ioINILoade
  001bf	80 f2 ec	 xor	 dl, -20			; ffffffecH
  001c2	88 50 19	 mov	 BYTE PTR [eax+25], dl
  001c5	8a 51 1a	 mov	 dl, BYTE PTR [ecx+26]
  001c8	84 d2		 test	 dl, dl
  001ca	0f 84 13 02 00
	00		 je	 $LN73@ioINILoade
  001d0	32 d3		 xor	 dl, bl
  001d2	88 50 1a	 mov	 BYTE PTR [eax+26], dl
  001d5	8a 51 1b	 mov	 dl, BYTE PTR [ecx+27]
  001d8	84 d2		 test	 dl, dl
  001da	0f 84 fa 01 00
	00		 je	 $LN72@ioINILoade
  001e0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001e3	88 50 1b	 mov	 BYTE PTR [eax+27], dl
  001e6	8a 51 1c	 mov	 dl, BYTE PTR [ecx+28]
  001e9	84 d2		 test	 dl, dl
  001eb	0f 84 e0 01 00
	00		 je	 $LN71@ioINILoade
  001f1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001f4	88 50 1c	 mov	 BYTE PTR [eax+28], dl
  001f7	8a 51 1d	 mov	 dl, BYTE PTR [ecx+29]
  001fa	84 d2		 test	 dl, dl
  001fc	0f 84 c6 01 00
	00		 je	 $LN70@ioINILoade
  00202	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00205	88 50 1d	 mov	 BYTE PTR [eax+29], dl
  00208	8a 51 1e	 mov	 dl, BYTE PTR [ecx+30]
  0020b	84 d2		 test	 dl, dl
  0020d	0f 84 ad 01 00
	00		 je	 $LN69@ioINILoade
  00213	32 d3		 xor	 dl, bl
  00215	88 50 1e	 mov	 BYTE PTR [eax+30], dl
  00218	8a 51 1f	 mov	 dl, BYTE PTR [ecx+31]
  0021b	84 d2		 test	 dl, dl
  0021d	0f 84 94 01 00
	00		 je	 $LN68@ioINILoade
  00223	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00226	88 50 1f	 mov	 BYTE PTR [eax+31], dl
  00229	8a 51 20	 mov	 dl, BYTE PTR [ecx+32]
  0022c	84 d2		 test	 dl, dl
  0022e	0f 84 7a 01 00
	00		 je	 $LN67@ioINILoade
  00234	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00237	88 50 20	 mov	 BYTE PTR [eax+32], dl
  0023a	8a 51 21	 mov	 dl, BYTE PTR [ecx+33]
  0023d	84 d2		 test	 dl, dl
  0023f	0f 84 60 01 00
	00		 je	 $LN66@ioINILoade
  00245	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00248	88 50 21	 mov	 BYTE PTR [eax+33], dl
  0024b	8a 51 22	 mov	 dl, BYTE PTR [ecx+34]
  0024e	84 d2		 test	 dl, dl
  00250	0f 84 47 01 00
	00		 je	 $LN65@ioINILoade
  00256	32 d3		 xor	 dl, bl
  00258	88 50 22	 mov	 BYTE PTR [eax+34], dl
  0025b	8a 51 23	 mov	 dl, BYTE PTR [ecx+35]
  0025e	84 d2		 test	 dl, dl
  00260	0f 84 2e 01 00
	00		 je	 $LN64@ioINILoade
  00266	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00269	88 50 23	 mov	 BYTE PTR [eax+35], dl
  0026c	8a 51 24	 mov	 dl, BYTE PTR [ecx+36]
  0026f	84 d2		 test	 dl, dl
  00271	0f 84 14 01 00
	00		 je	 $LN63@ioINILoade
  00277	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0027a	88 50 24	 mov	 BYTE PTR [eax+36], dl
  0027d	8a 51 25	 mov	 dl, BYTE PTR [ecx+37]
  00280	84 d2		 test	 dl, dl
  00282	0f 84 fa 00 00
	00		 je	 $LN62@ioINILoade
  00288	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0028b	88 50 25	 mov	 BYTE PTR [eax+37], dl
  0028e	8a 51 26	 mov	 dl, BYTE PTR [ecx+38]
  00291	84 d2		 test	 dl, dl
  00293	0f 84 e1 00 00
	00		 je	 $LN61@ioINILoade
  00299	32 d3		 xor	 dl, bl
  0029b	88 50 26	 mov	 BYTE PTR [eax+38], dl
  0029e	8a 51 27	 mov	 dl, BYTE PTR [ecx+39]
  002a1	84 d2		 test	 dl, dl
  002a3	0f 84 c8 00 00
	00		 je	 $LN60@ioINILoade
  002a9	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  002ac	88 50 27	 mov	 BYTE PTR [eax+39], dl
  002af	8a 51 28	 mov	 dl, BYTE PTR [ecx+40]
  002b2	84 d2		 test	 dl, dl
  002b4	0f 84 ae 00 00
	00		 je	 $LN59@ioINILoade
  002ba	80 f2 ed	 xor	 dl, -19			; ffffffedH
  002bd	88 50 28	 mov	 BYTE PTR [eax+40], dl
  002c0	8a 51 29	 mov	 dl, BYTE PTR [ecx+41]
  002c3	84 d2		 test	 dl, dl
  002c5	0f 84 94 00 00
	00		 je	 $LN58@ioINILoade
  002cb	80 f2 ec	 xor	 dl, -20			; ffffffecH
  002ce	88 50 29	 mov	 BYTE PTR [eax+41], dl
  002d1	8a 51 2a	 mov	 dl, BYTE PTR [ecx+42]
  002d4	84 d2		 test	 dl, dl
  002d6	74 7f		 je	 SHORT $LN57@ioINILoade
  002d8	32 d3		 xor	 dl, bl
  002da	88 50 2a	 mov	 BYTE PTR [eax+42], dl
  002dd	8a 51 2b	 mov	 dl, BYTE PTR [ecx+43]
  002e0	84 d2		 test	 dl, dl
  002e2	74 6a		 je	 SHORT $LN56@ioINILoade
  002e4	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  002e7	88 50 2b	 mov	 BYTE PTR [eax+43], dl
  002ea	8a 51 2c	 mov	 dl, BYTE PTR [ecx+44]
  002ed	84 d2		 test	 dl, dl
  002ef	74 54		 je	 SHORT $LN55@ioINILoade
  002f1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  002f4	88 50 2c	 mov	 BYTE PTR [eax+44], dl
  002f7	8a 51 2d	 mov	 dl, BYTE PTR [ecx+45]
  002fa	84 d2		 test	 dl, dl
  002fc	74 3e		 je	 SHORT $LN54@ioINILoade
  002fe	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00301	88 50 2d	 mov	 BYTE PTR [eax+45], dl
  00304	8a 51 2e	 mov	 dl, BYTE PTR [ecx+46]
  00307	84 d2		 test	 dl, dl
  00309	74 29		 je	 SHORT $LN53@ioINILoade
  0030b	32 d3		 xor	 dl, bl
  0030d	88 50 2e	 mov	 BYTE PTR [eax+46], dl
  00310	8a 51 2f	 mov	 dl, BYTE PTR [ecx+47]
  00313	84 d2		 test	 dl, dl
  00315	74 14		 je	 SHORT $LN52@ioINILoade
  00317	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0031a	88 50 2f	 mov	 BYTE PTR [eax+47], dl
  0031d	8a 49 30	 mov	 cl, BYTE PTR [ecx+48]
  00320	80 f1 ed	 xor	 cl, -19			; ffffffedH
  00323	88 48 30	 mov	 BYTE PTR [eax+48], cl
  00326	e9 5d 01 00 00	 jmp	 $LN4@ioINILoade
$LN52@ioINILoade:
  0032b	c6 40 2f ea	 mov	 BYTE PTR [eax+47], -22	; ffffffeaH
  0032f	e9 54 01 00 00	 jmp	 $LN4@ioINILoade
$LN53@ioINILoade:
  00334	88 58 2e	 mov	 BYTE PTR [eax+46], bl
  00337	e9 4c 01 00 00	 jmp	 $LN4@ioINILoade
$LN54@ioINILoade:
  0033c	c6 40 2d ec	 mov	 BYTE PTR [eax+45], -20	; ffffffecH
  00340	e9 43 01 00 00	 jmp	 $LN4@ioINILoade
$LN55@ioINILoade:
  00345	c6 40 2c ed	 mov	 BYTE PTR [eax+44], -19	; ffffffedH
  00349	e9 3a 01 00 00	 jmp	 $LN4@ioINILoade
$LN56@ioINILoade:
  0034e	c6 40 2b ea	 mov	 BYTE PTR [eax+43], -22	; ffffffeaH
  00352	e9 31 01 00 00	 jmp	 $LN4@ioINILoade
$LN57@ioINILoade:
  00357	88 58 2a	 mov	 BYTE PTR [eax+42], bl
  0035a	e9 29 01 00 00	 jmp	 $LN4@ioINILoade
$LN58@ioINILoade:
  0035f	c6 40 29 ec	 mov	 BYTE PTR [eax+41], -20	; ffffffecH
  00363	e9 20 01 00 00	 jmp	 $LN4@ioINILoade
$LN59@ioINILoade:
  00368	c6 40 28 ed	 mov	 BYTE PTR [eax+40], -19	; ffffffedH
  0036c	e9 17 01 00 00	 jmp	 $LN4@ioINILoade
$LN60@ioINILoade:
  00371	c6 40 27 ea	 mov	 BYTE PTR [eax+39], -22	; ffffffeaH
  00375	e9 0e 01 00 00	 jmp	 $LN4@ioINILoade
$LN61@ioINILoade:
  0037a	88 58 26	 mov	 BYTE PTR [eax+38], bl
  0037d	e9 06 01 00 00	 jmp	 $LN4@ioINILoade
$LN62@ioINILoade:
  00382	c6 40 25 ec	 mov	 BYTE PTR [eax+37], -20	; ffffffecH
  00386	e9 fd 00 00 00	 jmp	 $LN4@ioINILoade
$LN63@ioINILoade:
  0038b	c6 40 24 ed	 mov	 BYTE PTR [eax+36], -19	; ffffffedH
  0038f	e9 f4 00 00 00	 jmp	 $LN4@ioINILoade
$LN64@ioINILoade:
  00394	c6 40 23 ea	 mov	 BYTE PTR [eax+35], -22	; ffffffeaH
  00398	e9 eb 00 00 00	 jmp	 $LN4@ioINILoade
$LN65@ioINILoade:
  0039d	88 58 22	 mov	 BYTE PTR [eax+34], bl
  003a0	e9 e3 00 00 00	 jmp	 $LN4@ioINILoade
$LN66@ioINILoade:
  003a5	c6 40 21 ec	 mov	 BYTE PTR [eax+33], -20	; ffffffecH
  003a9	e9 da 00 00 00	 jmp	 $LN4@ioINILoade
$LN67@ioINILoade:
  003ae	c6 40 20 ed	 mov	 BYTE PTR [eax+32], -19	; ffffffedH
  003b2	e9 d1 00 00 00	 jmp	 $LN4@ioINILoade
$LN68@ioINILoade:
  003b7	c6 40 1f ea	 mov	 BYTE PTR [eax+31], -22	; ffffffeaH
  003bb	e9 c8 00 00 00	 jmp	 $LN4@ioINILoade
$LN69@ioINILoade:
  003c0	88 58 1e	 mov	 BYTE PTR [eax+30], bl
  003c3	e9 c0 00 00 00	 jmp	 $LN4@ioINILoade
$LN70@ioINILoade:
  003c8	c6 40 1d ec	 mov	 BYTE PTR [eax+29], -20	; ffffffecH
  003cc	e9 b7 00 00 00	 jmp	 $LN4@ioINILoade
$LN71@ioINILoade:
  003d1	c6 40 1c ed	 mov	 BYTE PTR [eax+28], -19	; ffffffedH
  003d5	e9 ae 00 00 00	 jmp	 $LN4@ioINILoade
$LN72@ioINILoade:
  003da	c6 40 1b ea	 mov	 BYTE PTR [eax+27], -22	; ffffffeaH
  003de	e9 a5 00 00 00	 jmp	 $LN4@ioINILoade
$LN73@ioINILoade:
  003e3	88 58 1a	 mov	 BYTE PTR [eax+26], bl
  003e6	e9 9d 00 00 00	 jmp	 $LN4@ioINILoade
$LN74@ioINILoade:
  003eb	c6 40 19 ec	 mov	 BYTE PTR [eax+25], -20	; ffffffecH
  003ef	e9 94 00 00 00	 jmp	 $LN4@ioINILoade
$LN75@ioINILoade:
  003f4	c6 40 18 ed	 mov	 BYTE PTR [eax+24], -19	; ffffffedH
  003f8	e9 8b 00 00 00	 jmp	 $LN4@ioINILoade
$LN76@ioINILoade:
  003fd	c6 40 17 ea	 mov	 BYTE PTR [eax+23], -22	; ffffffeaH
  00401	e9 82 00 00 00	 jmp	 $LN4@ioINILoade
$LN77@ioINILoade:
  00406	88 58 16	 mov	 BYTE PTR [eax+22], bl
  00409	eb 7d		 jmp	 SHORT $LN4@ioINILoade
$LN78@ioINILoade:
  0040b	c6 40 15 ec	 mov	 BYTE PTR [eax+21], -20	; ffffffecH
  0040f	eb 77		 jmp	 SHORT $LN4@ioINILoade
$LN79@ioINILoade:
  00411	c6 40 14 ed	 mov	 BYTE PTR [eax+20], -19	; ffffffedH
  00415	eb 71		 jmp	 SHORT $LN4@ioINILoade
$LN80@ioINILoade:
  00417	c6 40 13 ea	 mov	 BYTE PTR [eax+19], -22	; ffffffeaH
  0041b	eb 6b		 jmp	 SHORT $LN4@ioINILoade
$LN81@ioINILoade:
  0041d	88 58 12	 mov	 BYTE PTR [eax+18], bl
  00420	eb 66		 jmp	 SHORT $LN4@ioINILoade
$LN82@ioINILoade:
  00422	c6 40 11 ec	 mov	 BYTE PTR [eax+17], -20	; ffffffecH
  00426	eb 60		 jmp	 SHORT $LN4@ioINILoade
$LN83@ioINILoade:
  00428	c6 40 10 ed	 mov	 BYTE PTR [eax+16], -19	; ffffffedH
  0042c	eb 5a		 jmp	 SHORT $LN4@ioINILoade
$LN84@ioINILoade:
  0042e	c6 40 0f ea	 mov	 BYTE PTR [eax+15], -22	; ffffffeaH
  00432	eb 54		 jmp	 SHORT $LN4@ioINILoade
$LN85@ioINILoade:
  00434	88 58 0e	 mov	 BYTE PTR [eax+14], bl
  00437	eb 4f		 jmp	 SHORT $LN4@ioINILoade
$LN86@ioINILoade:
  00439	c6 40 0d ec	 mov	 BYTE PTR [eax+13], -20	; ffffffecH
  0043d	eb 49		 jmp	 SHORT $LN4@ioINILoade
$LN87@ioINILoade:
  0043f	c6 40 0c ed	 mov	 BYTE PTR [eax+12], -19	; ffffffedH
  00443	eb 43		 jmp	 SHORT $LN4@ioINILoade
$LN88@ioINILoade:
  00445	c6 40 0b ea	 mov	 BYTE PTR [eax+11], -22	; ffffffeaH
  00449	eb 3d		 jmp	 SHORT $LN4@ioINILoade
$LN89@ioINILoade:
  0044b	88 58 0a	 mov	 BYTE PTR [eax+10], bl
  0044e	eb 38		 jmp	 SHORT $LN4@ioINILoade
$LN90@ioINILoade:
  00450	c6 40 09 ec	 mov	 BYTE PTR [eax+9], -20	; ffffffecH
  00454	eb 32		 jmp	 SHORT $LN4@ioINILoade
$LN91@ioINILoade:
  00456	c6 40 08 ed	 mov	 BYTE PTR [eax+8], -19	; ffffffedH
  0045a	eb 2c		 jmp	 SHORT $LN4@ioINILoade
$LN92@ioINILoade:
  0045c	c6 40 07 ea	 mov	 BYTE PTR [eax+7], -22	; ffffffeaH
  00460	eb 26		 jmp	 SHORT $LN4@ioINILoade
$LN93@ioINILoade:
  00462	88 58 06	 mov	 BYTE PTR [eax+6], bl
  00465	eb 21		 jmp	 SHORT $LN4@ioINILoade
$LN94@ioINILoade:
  00467	c6 40 05 ec	 mov	 BYTE PTR [eax+5], -20	; ffffffecH
  0046b	eb 1b		 jmp	 SHORT $LN4@ioINILoade
$LN95@ioINILoade:
  0046d	c6 40 04 ed	 mov	 BYTE PTR [eax+4], -19	; ffffffedH
  00471	eb 15		 jmp	 SHORT $LN4@ioINILoade
$LN96@ioINILoade:
  00473	c6 40 03 ea	 mov	 BYTE PTR [eax+3], -22	; ffffffeaH
  00477	eb 0f		 jmp	 SHORT $LN4@ioINILoade
$LN97@ioINILoade:
  00479	c6 40 02 eb	 mov	 BYTE PTR [eax+2], -21	; ffffffebH
  0047d	eb 09		 jmp	 SHORT $LN4@ioINILoade
$LN98@ioINILoade:
  0047f	c6 40 01 ec	 mov	 BYTE PTR [eax+1], -20	; ffffffecH
  00483	eb 03		 jmp	 SHORT $LN4@ioINILoade
$LN99@ioINILoade:
  00485	c6 00 ed	 mov	 BYTE PTR [eax], -19	; ffffffedH
$LN4@ioINILoade:
  00488	6a 06		 push	 6
  0048a	8b c8		 mov	 ecx, eax
  0048c	c6 40 1b 00	 mov	 BYTE PTR [eax+27], 0
  00490	5a		 pop	 edx
$LL107@ioINILoade:
  00491	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  00497	83 c1 04	 add	 ecx, 4
  0049a	4a		 dec	 edx
  0049b	75 f4		 jne	 SHORT $LL107@ioINILoade
  0049d	6a 18		 push	 24			; 00000018H
  0049f	5e		 pop	 esi
$LL104@ioINILoade:
  004a0	8b ce		 mov	 ecx, esi
  004a2	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  004a8	79 05		 jns	 SHORT $LN114@ioINILoade
  004aa	49		 dec	 ecx
  004ab	83 c9 fc	 or	 ecx, -4			; fffffffcH
  004ae	41		 inc	 ecx
$LN114@ioINILoade:
  004af	b2 ed		 mov	 dl, -19			; ffffffedH
  004b1	2a d1		 sub	 dl, cl
  004b3	30 14 06	 xor	 BYTE PTR [esi+eax], dl
  004b6	46		 inc	 esi
  004b7	83 fe 1b	 cmp	 esi, 27			; 0000001bH
  004ba	7c e4		 jl	 SHORT $LL104@ioINILoade
  004bc	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  004bf	8b cf		 mov	 ecx, edi
  004c1	50		 push	 eax
  004c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioINILoader@@QAE@PBD_N@Z

; 225  : 	}

  004c8	8b c7		 mov	 eax, edi
  004ca	5f		 pop	 edi
  004cb	5e		 pop	 esi
  004cc	5b		 pop	 ebx
  004cd	5d		 pop	 ebp
  004ce	c2 08 00	 ret	 8
??$?0$0BM@@ioINILoader_e@@QAE@AAY0BM@$$CBD_N@Z ENDP	; ioINILoader_e::ioINILoader_e<28>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@PAVioSetItemInfo@@@std@@PAVioSetItemInfo@@ABQAV3@@std@@YAXAAV?$allocator@PAVioSetItemInfo@@@0@PAPAVioSetItemInfo@@ABQAV2@@Z ; std::_Cons_val<std::allocator<ioSetItemInfo *>,ioSetItemInfo *,ioSetItemInfo * const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@PAVioSetItemInfo@@@std@@PAVioSetItemInfo@@ABQAV3@@std@@YAXAAV?$allocator@PAVioSetItemInfo@@@0@PAPAVioSetItemInfo@@ABQAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAVioSetItemInfo@@@std@@PAVioSetItemInfo@@ABQAV3@@std@@YAXAAV?$allocator@PAVioSetItemInfo@@@0@PAPAVioSetItemInfo@@ABQAV2@@Z PROC ; std::_Cons_val<std::allocator<ioSetItemInfo *>,ioSetItemInfo *,ioSetItemInfo * const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN9@Cons_val@3
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN9@Cons_val@3:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@PAVioSetItemInfo@@@std@@PAVioSetItemInfo@@ABQAV3@@std@@YAXAAV?$allocator@PAVioSetItemInfo@@@0@PAPAVioSetItemInfo@@ABQAV2@@Z ENDP ; std::_Cons_val<std::allocator<ioSetItemInfo *>,ioSetItemInfo *,ioSetItemInfo * const &>
_TEXT	ENDS
PUBLIC	??$_Umove@PAPAVioSetItemInfo@@@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IAEPAPAVioSetItemInfo@@PAPAV2@00@Z ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Umove<ioSetItemInfo * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAVioSetItemInfo@@@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IAEPAPAVioSetItemInfo@@PAPAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVioSetItemInfo@@@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IAEPAPAVioSetItemInfo@@PAPAV2@00@Z PROC ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Umove<ioSetItemInfo * *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVioSetItemInfo@@PAPAV1@V?$allocator@PAVioSetItemInfo@@@std@@@std@@YAPAPAVioSetItemInfo@@PAPAV1@00AAV?$allocator@PAVioSetItemInfo@@@0@@Z ; std::_Uninitialized_move<ioSetItemInfo * *,ioSetItemInfo * *,std::allocator<ioSetItemInfo *> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAPAVioSetItemInfo@@@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IAEPAPAVioSetItemInfo@@PAPAV2@00@Z ENDP ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Umove<ioSetItemInfo * *>
_TEXT	ENDS
PUBLIC	?begin@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@XZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@XZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@XZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@XZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@KV?$allocator@K@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@KV?$allocator@K@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@KV?$allocator@K@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@KV?$allocator@K@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@KV?$allocator@K@std@@@std@@IAEXPAK0@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@KV?$allocator@K@std@@@std@@IAEXPAK0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@KV?$allocator@K@std@@@std@@IAEXPAK0@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@KV?$allocator@K@std@@@std@@IAEXPAK0@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Destroy
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned long,std::allocator<unsigned long> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Umove@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove<unsigned long *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove<unsigned long *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAKPAKV?$allocator@K@std@@@std@@YAPAKPAK00AAV?$allocator@K@0@@Z ; std::_Uninitialized_move<unsigned long *,unsigned long *,std::allocator<unsigned long> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove<unsigned long *>
_TEXT	ENDS
PUBLIC	?GetSetInfoByName@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@ABVioHashString@@@Z ; ioSetItemInfoManager::GetSetInfoByName
EXTRN	__imp_??8ioHashString@@QBE_NABV0@@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosetiteminfomanager.cpp
;	COMDAT ?GetSetInfoByName@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@ABVioHashString@@@Z
_TEXT	SEGMENT
_szName$ = 8						; size = 4
?GetSetInfoByName@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@ABVioHashString@@@Z PROC ; ioSetItemInfoManager::GetSetInfoByName, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 106  : 	SetItemInfoList::const_iterator iter;
; 107  : 	for( iter=m_SetInfoList.begin() ; iter!=m_SetInfoList.end() ; ++iter )

  00007	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0000a	eb 15		 jmp	 SHORT $LN38@GetSetInfo@2
$LL15@GetSetInfo@2:

; 108  : 	{
; 109  : 		if( (*iter)->GetName() == szName )

  0000c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000e	ff 75 08	 push	 DWORD PTR _szName$[ebp]
  00011	83 c1 08	 add	 ecx, 8
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??8ioHashString@@QBE_NABV0@@Z
  0001a	84 c0		 test	 al, al
  0001c	75 10		 jne	 SHORT $LN36@GetSetInfo@2

; 106  : 	SetItemInfoList::const_iterator iter;
; 107  : 	for( iter=m_SetInfoList.begin() ; iter!=m_SetInfoList.end() ; ++iter )

  0001e	83 c6 04	 add	 esi, 4
$LN38@GetSetInfo@2:
  00021	3b 77 08	 cmp	 esi, DWORD PTR [edi+8]
  00024	75 e6		 jne	 SHORT $LL15@GetSetInfo@2

; 111  : 	}
; 112  : 
; 113  : 	return NULL;

  00026	33 c0		 xor	 eax, eax
$LN5@GetSetInfo@2:
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 114  : }

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
$LN36@GetSetInfo@2:

; 110  : 			return *iter;

  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	eb f6		 jmp	 SHORT $LN5@GetSetInfo@2
?GetSetInfoByName@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@ABVioHashString@@@Z ENDP ; ioSetItemInfoManager::GetSetInfoByName
_TEXT	ENDS
PUBLIC	?GetSetInfoByCode@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@K@Z ; ioSetItemInfoManager::GetSetInfoByCode
; Function compile flags: /Ogsp
;	COMDAT ?GetSetInfoByCode@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@K@Z
_TEXT	SEGMENT
_dwSetCode$ = 8						; size = 4
?GetSetInfoByCode@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@K@Z PROC ; ioSetItemInfoManager::GetSetInfoByCode, COMDAT
; _this$ = ecx

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 118  : 	SetItemInfoList::const_iterator iter;
; 119  : 	for( iter=m_SetInfoList.begin() ; iter!=m_SetInfoList.end() ; ++iter )

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00009	eb 0d		 jmp	 SHORT $LN38@GetSetInfo@3
$LL15@GetSetInfo@3:

; 120  : 	{
; 121  : 		if( (*iter)->GetSetCode() == dwSetCode )

  0000b	8b 10		 mov	 edx, DWORD PTR [eax]
  0000d	8b 52 1c	 mov	 edx, DWORD PTR [edx+28]
  00010	3b 55 08	 cmp	 edx, DWORD PTR _dwSetCode$[ebp]
  00013	74 0d		 je	 SHORT $LN36@GetSetInfo@3

; 118  : 	SetItemInfoList::const_iterator iter;
; 119  : 	for( iter=m_SetInfoList.begin() ; iter!=m_SetInfoList.end() ; ++iter )

  00015	83 c0 04	 add	 eax, 4
$LN38@GetSetInfo@3:
  00018	3b c1		 cmp	 eax, ecx
  0001a	75 ef		 jne	 SHORT $LL15@GetSetInfo@3

; 123  : 	}
; 124  : 
; 125  : 	return NULL;

  0001c	33 c0		 xor	 eax, eax
$LN5@GetSetInfo@3:

; 126  : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
$LN36@GetSetInfo@3:

; 122  : 			return *iter;

  00022	8b 00		 mov	 eax, DWORD PTR [eax]
  00024	eb f8		 jmp	 SHORT $LN5@GetSetInfo@3
?GetSetInfoByCode@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@K@Z ENDP ; ioSetItemInfoManager::GetSetInfoByCode
_TEXT	ENDS
PUBLIC	?GetSetInfoByItemCode@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@K@Z ; ioSetItemInfoManager::GetSetInfoByItemCode
; Function compile flags: /Ogsp
;	COMDAT ?GetSetInfoByItemCode@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@K@Z
_TEXT	SEGMENT
_dwItemCode$ = 8					; size = 4
?GetSetInfoByItemCode@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@K@Z PROC ; ioSetItemInfoManager::GetSetInfoByItemCode, COMDAT
; _this$ = ecx

; 129  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 130  : 	DWORD dwSetCode = SET_ITEM_CODE + dwItemCode % DEFAULT_BASIC_ITEM_CODE;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwItemCode$[ebp]
  00006	56		 push	 esi
  00007	33 d2		 xor	 edx, edx
  00009	be a0 86 01 00	 mov	 esi, 100000		; 000186a0H
  0000e	f7 f6		 div	 esi
  00010	81 c2 60 ae 0a
	00		 add	 edx, 700000		; 000aae60H

; 131  : 	return GetSetInfoByCode( dwSetCode );

  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 ?GetSetInfoByCode@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@K@Z ; ioSetItemInfoManager::GetSetInfoByCode
  0001c	5e		 pop	 esi

; 132  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?GetSetInfoByItemCode@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@K@Z ENDP ; ioSetItemInfoManager::GetSetInfoByItemCode
_TEXT	ENDS
PUBLIC	?GetSetInfoByClass@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@H@Z ; ioSetItemInfoManager::GetSetInfoByClass
; Function compile flags: /Ogsp
;	COMDAT ?GetSetInfoByClass@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@H@Z
_TEXT	SEGMENT
_iClassType$ = 8					; size = 4
?GetSetInfoByClass@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@H@Z PROC ; ioSetItemInfoManager::GetSetInfoByClass, COMDAT
; _this$ = ecx

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 136  : 	SetItemInfoList::const_iterator iter;
; 137  : 	for( iter=m_SetInfoList.begin() ; iter!=m_SetInfoList.end() ; ++iter )

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00009	eb 13		 jmp	 SHORT $LN38@GetSetInfo@4
$LL15@GetSetInfo@4:

; 138  : 	{
; 139  : 		if( (*iter)->GetSetCode() - SET_ITEM_CODE == iClassType )

  0000b	8b 10		 mov	 edx, DWORD PTR [eax]
  0000d	8b 52 1c	 mov	 edx, DWORD PTR [edx+28]
  00010	81 ea 60 ae 0a
	00		 sub	 edx, 700000		; 000aae60H
  00016	3b 55 08	 cmp	 edx, DWORD PTR _iClassType$[ebp]
  00019	74 0d		 je	 SHORT $LN36@GetSetInfo@4

; 136  : 	SetItemInfoList::const_iterator iter;
; 137  : 	for( iter=m_SetInfoList.begin() ; iter!=m_SetInfoList.end() ; ++iter )

  0001b	83 c0 04	 add	 eax, 4
$LN38@GetSetInfo@4:
  0001e	3b c1		 cmp	 eax, ecx
  00020	75 e9		 jne	 SHORT $LL15@GetSetInfo@4

; 141  : 	}
; 142  : 
; 143  : 	return NULL;

  00022	33 c0		 xor	 eax, eax
$LN5@GetSetInfo@4:

; 144  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
$LN36@GetSetInfo@4:

; 140  : 			return *iter;

  00028	8b 00		 mov	 eax, DWORD PTR [eax]
  0002a	eb f8		 jmp	 SHORT $LN5@GetSetInfo@4
?GetSetInfoByClass@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@H@Z ENDP ; ioSetItemInfoManager::GetSetInfoByClass
_TEXT	ENDS
PUBLIC	?GetSetItemSkillName@ioSetItemInfoManager@@QBEXKHAAVioHashString@@@Z ; ioSetItemInfoManager::GetSetItemSkillName
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
EXTRN	__imp_?Clear@ioHashString@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?GetSetItemSkillName@ioSetItemInfoManager@@QBEXKHAAVioHashString@@@Z
_TEXT	SEGMENT
_dwSetCode$ = 8						; size = 4
_iLevel$ = 12						; size = 4
_szName$ = 16						; size = 4
?GetSetItemSkillName@ioSetItemInfoManager@@QBEXKHAAVioHashString@@@Z PROC ; ioSetItemInfoManager::GetSetItemSkillName, COMDAT
; _this$ = ecx

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 153  : 	szName.Clear();

  00006	8b 4d 10	 mov	 ecx, DWORD PTR _szName$[ebp]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Clear@ioHashString@@QAEXXZ

; 154  : 
; 155  : 	const ioSetItemInfo *pInfo = GetSetInfoByCode( dwSetCode );

  0000f	ff 75 08	 push	 DWORD PTR _dwSetCode$[ebp]
  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ?GetSetInfoByCode@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@K@Z ; ioSetItemInfoManager::GetSetInfoByCode
  00019	5e		 pop	 esi

; 156  : 	if( pInfo )

  0001a	85 c0		 test	 eax, eax
  0001c	74 0d		 je	 SHORT $LN1@GetSetItem

; 157  : 	{
; 158  : 		szName = pInfo->GetSetItemSkillName();

  0001e	8b 4d 10	 mov	 ecx, DWORD PTR _szName$[ebp]
  00021	83 e8 80	 sub	 eax, -128		; ffffff80H
  00024	50		 push	 eax
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
$LN1@GetSetItem:

; 159  : 	}
; 160  : }

  0002b	5d		 pop	 ebp
  0002c	c2 0c 00	 ret	 12			; 0000000cH
?GetSetItemSkillName@ioSetItemInfoManager@@QBEXKHAAVioHashString@@@Z ENDP ; ioSetItemInfoManager::GetSetItemSkillName
_TEXT	ENDS
PUBLIC	?GetSetIdxByCode@ioSetItemInfoManager@@QBEHK@Z	; ioSetItemInfoManager::GetSetIdxByCode
; Function compile flags: /Ogsp
;	COMDAT ?GetSetIdxByCode@ioSetItemInfoManager@@QBEHK@Z
_TEXT	SEGMENT
_dwSetCode$ = 8						; size = 4
?GetSetIdxByCode@ioSetItemInfoManager@@QBEHK@Z PROC	; ioSetItemInfoManager::GetSetIdxByCode, COMDAT
; _this$ = ecx

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 164  : 	int iIdx=0;
; 165  : 	SetItemInfoList::const_iterator iter;
; 166  : 	for( iter=m_SetInfoList.begin() ; iter!=m_SetInfoList.end() ; ++iter )

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00009	56		 push	 esi
  0000a	33 c0		 xor	 eax, eax
  0000c	eb 0e		 jmp	 SHORT $LN36@GetSetIdxB
$LL15@GetSetIdxB:

; 167  : 	{
; 168  : 		if( (*iter)->GetSetCode() == dwSetCode )

  0000e	8b 32		 mov	 esi, DWORD PTR [edx]
  00010	8b 76 1c	 mov	 esi, DWORD PTR [esi+28]
  00013	3b 75 08	 cmp	 esi, DWORD PTR _dwSetCode$[ebp]
  00016	74 0b		 je	 SHORT $LN5@GetSetIdxB

; 169  : 			return iIdx;
; 170  : 		iIdx++;

  00018	40		 inc	 eax
  00019	83 c2 04	 add	 edx, 4
$LN36@GetSetIdxB:

; 164  : 	int iIdx=0;
; 165  : 	SetItemInfoList::const_iterator iter;
; 166  : 	for( iter=m_SetInfoList.begin() ; iter!=m_SetInfoList.end() ; ++iter )

  0001c	3b d1		 cmp	 edx, ecx
  0001e	75 ee		 jne	 SHORT $LL15@GetSetIdxB

; 171  : 	}
; 172  : 
; 173  : 	return -1;	

  00020	83 c8 ff	 or	 eax, -1
$LN5@GetSetIdxB:
  00023	5e		 pop	 esi

; 174  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?GetSetIdxByCode@ioSetItemInfoManager@@QBEHK@Z ENDP	; ioSetItemInfoManager::GetSetIdxByCode
_TEXT	ENDS
PUBLIC	?GetSetItemShopOrder@ioSetItemInfoManager@@QBEHK@Z ; ioSetItemInfoManager::GetSetItemShopOrder
; Function compile flags: /Ogsp
;	COMDAT ?GetSetItemShopOrder@ioSetItemInfoManager@@QBEHK@Z
_TEXT	SEGMENT
_dwSetCode$ = 8						; size = 4
?GetSetItemShopOrder@ioSetItemInfoManager@@QBEHK@Z PROC	; ioSetItemInfoManager::GetSetItemShopOrder, COMDAT
; _this$ = ecx

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 178  : 	const ioSetItemInfo *pInfo = GetSetInfoByCode( dwSetCode );

  00003	ff 75 08	 push	 DWORD PTR _dwSetCode$[ebp]
  00006	e8 00 00 00 00	 call	 ?GetSetInfoByCode@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@K@Z ; ioSetItemInfoManager::GetSetInfoByCode

; 179  : 	if( !pInfo )

  0000b	85 c0		 test	 eax, eax
  0000d	75 07		 jne	 SHORT $LN1@GetSetItem@2

; 180  : 		return ORDER_DEFAULT; // ORDER_DEFAULT

  0000f	b8 ff c9 9a 3b	 mov	 eax, 999999999		; 3b9ac9ffH
  00014	eb 03		 jmp	 SHORT $LN2@GetSetItem@2
$LN1@GetSetItem@2:

; 181  : 
; 182  : 	return pInfo->GetShopOrder();

  00016	8b 40 64	 mov	 eax, DWORD PTR [eax+100]
$LN2@GetSetItem@2:

; 183  : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?GetSetItemShopOrder@ioSetItemInfoManager@@QBEHK@Z ENDP	; ioSetItemInfoManager::GetSetItemShopOrder
_TEXT	ENDS
PUBLIC	?GetSetItemShopMarkType@ioSetItemInfoManager@@QBEHK@Z ; ioSetItemInfoManager::GetSetItemShopMarkType
; Function compile flags: /Ogsp
;	COMDAT ?GetSetItemShopMarkType@ioSetItemInfoManager@@QBEHK@Z
_TEXT	SEGMENT
_dwSetCode$ = 8						; size = 4
?GetSetItemShopMarkType@ioSetItemInfoManager@@QBEHK@Z PROC ; ioSetItemInfoManager::GetSetItemShopMarkType, COMDAT
; _this$ = ecx

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 200  : 	const ioSetItemInfo *pInfo = GetSetInfoByCode( dwSetCode );

  00003	ff 75 08	 push	 DWORD PTR _dwSetCode$[ebp]
  00006	e8 00 00 00 00	 call	 ?GetSetInfoByCode@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@K@Z ; ioSetItemInfoManager::GetSetInfoByCode

; 201  : 	if( !pInfo )

  0000b	85 c0		 test	 eax, eax
  0000d	74 03		 je	 SHORT $LN2@GetSetItem@3
$LN1@GetSetItem@3:

; 202  : 		return 0; // SHOP_MARK_TYPE_NONE
; 203  : 
; 204  : 	return pInfo->GetShopMarkType();

  0000f	8b 40 6c	 mov	 eax, DWORD PTR [eax+108]
$LN2@GetSetItem@3:

; 205  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?GetSetItemShopMarkType@ioSetItemInfoManager@@QBEHK@Z ENDP ; ioSetItemInfoManager::GetSetItemShopMarkType
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@XZ ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@XZ ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::end
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@0@Z ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$508398 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@0@Z PROC ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$508398[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAPAVioSetItemInfo@@PAPAV1@@std@@YAPAPAVioSetItemInfo@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<ioSetItemInfo * *,ioSetItemInfo * *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@0@Z ENDP ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IAEXXZ ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN12@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN12@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAEXI@Z ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::reserve
; Function compile flags: /Ogsp
;	COMDAT ?reserve@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?reserve@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAEXI@Z PROC ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 747  : 		if (max_size() < _Count)

  00003	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN43@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  0001a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001d	2b 06		 sub	 eax, DWORD PTR [esi]
  0001f	c1 f8 02	 sar	 eax, 2
  00022	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00025	73 52		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00027	53		 push	 ebx
  00028	57		 push	 edi
  00029	6a 00		 push	 0
  0002b	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0002e	e8 00 00 00 00	 call	 ??$_Allocate@PAVioSetItemInfo@@@std@@YAPAPAVioSetItemInfo@@IPAPAV1@@Z ; std::_Allocate<ioSetItemInfo *>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00033	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00035	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00038	52		 push	 edx
  00039	8b d8		 mov	 ebx, eax
  0003b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003e	53		 push	 ebx
  0003f	50		 push	 eax
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVioSetItemInfo@@PAPAV1@V?$allocator@PAVioSetItemInfo@@@std@@@std@@YAPAPAVioSetItemInfo@@PAPAV1@00AAV?$allocator@PAVioSetItemInfo@@@0@@Z ; std::_Uninitialized_move<ioSetItemInfo * *,ioSetItemInfo * *,std::allocator<ioSetItemInfo *> >

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);
; 757  : 			_RERAISE;
; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00046	8b 06		 mov	 eax, DWORD PTR [esi]
  00048	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0004b	2b f8		 sub	 edi, eax
  0004d	83 c4 18	 add	 esp, 24			; 00000018H
  00050	c1 ff 02	 sar	 edi, 2

; 761  : 			if (this->_Myfirst != 0)

  00053	85 c0		 test	 eax, eax
  00055	74 07		 je	 SHORT $LN39@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005d	59		 pop	 ecx
$LN39@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0005e	8b ce		 mov	 ecx, esi
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00066	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00069	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  0006c	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  0006f	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00072	5f		 pop	 edi

; 771  : 			this->_Myfirst = _Ptr;

  00073	89 1e		 mov	 DWORD PTR [esi], ebx
  00075	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00078	5b		 pop	 ebx
$LN3@reserve:
  00079	5e		 pop	 esi

; 772  : 			}
; 773  : 		}

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
$LN42@reserve:
?reserve@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAEXI@Z ENDP ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::reserve
_TEXT	ENDS
PUBLIC	?erase@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@0@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$508623 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@0@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase@2

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$508623[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAKPAK@std@@YAPAKPAK00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<unsigned long *,unsigned long *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase@2:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@0@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN12@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN12@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@KV?$allocator@K@std@@@std@@QAEXI@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::reserve
; Function compile flags: /Ogsp
;	COMDAT ?reserve@?$vector@KV?$allocator@K@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?reserve@?$vector@KV?$allocator@K@std@@@std@@QAEXI@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 747  : 		if (max_size() < _Count)

  00003	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	76 0b		 jbe	 SHORT $LN5@reserve@2

; 748  : 			_Xlen();	// result too long

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN43@reserve@2:
$LN5@reserve@2:

; 749  : 		else if (capacity() < _Count)

  0001a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001d	2b 06		 sub	 eax, DWORD PTR [esi]
  0001f	c1 f8 02	 sar	 eax, 2
  00022	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00025	73 52		 jae	 SHORT $LN3@reserve@2

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00027	53		 push	 ebx
  00028	57		 push	 edi
  00029	6a 00		 push	 0
  0002b	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0002e	e8 00 00 00 00	 call	 ??$_Allocate@K@std@@YAPAKIPAK@Z ; std::_Allocate<unsigned long>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00033	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00035	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00038	52		 push	 edx
  00039	8b d8		 mov	 ebx, eax
  0003b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003e	53		 push	 ebx
  0003f	50		 push	 eax
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAKPAKV?$allocator@K@std@@@std@@YAPAKPAK00AAV?$allocator@K@0@@Z ; std::_Uninitialized_move<unsigned long *,unsigned long *,std::allocator<unsigned long> >

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);
; 757  : 			_RERAISE;
; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00046	8b 06		 mov	 eax, DWORD PTR [esi]
  00048	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0004b	2b f8		 sub	 edi, eax
  0004d	83 c4 18	 add	 esp, 24			; 00000018H
  00050	c1 ff 02	 sar	 edi, 2

; 761  : 			if (this->_Myfirst != 0)

  00053	85 c0		 test	 eax, eax
  00055	74 07		 je	 SHORT $LN39@reserve@2

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005d	59		 pop	 ecx
$LN39@reserve@2:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0005e	8b ce		 mov	 ecx, esi
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00066	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00069	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  0006c	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  0006f	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00072	5f		 pop	 edi

; 771  : 			this->_Myfirst = _Ptr;

  00073	89 1e		 mov	 DWORD PTR [esi], ebx
  00075	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00078	5b		 pop	 ebx
$LN3@reserve@2:
  00079	5e		 pop	 esi

; 772  : 			}
; 773  : 		}

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
$LN42@reserve@2:
?reserve@?$vector@KV?$allocator@K@std@@@std@@QAEXI@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::reserve
_TEXT	ENDS
PUBLIC	?SetSetItemShopOrder@ioSetItemInfoManager@@QAEXKH@Z ; ioSetItemInfoManager::SetSetItemShopOrder
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosetiteminfomanager.cpp
;	COMDAT ?SetSetItemShopOrder@ioSetItemInfoManager@@QAEXKH@Z
_TEXT	SEGMENT
_dwSetCode$ = 8						; size = 4
_iShopOrder$ = 12					; size = 4
?SetSetItemShopOrder@ioSetItemInfoManager@@QAEXKH@Z PROC ; ioSetItemInfoManager::SetSetItemShopOrder, COMDAT
; _this$ = ecx

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 	SetItemInfoList::iterator iter;
; 188  : 	for( iter=m_SetInfoList.begin() ; iter!=m_SetInfoList.end() ; ++iter )

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00009	eb 0d		 jmp	 SHORT $LN52@SetSetItem
$LL21@SetSetItem:

; 189  : 	{
; 190  : 		if( (*iter)->GetSetCode() == dwSetCode )

  0000b	8b 10		 mov	 edx, DWORD PTR [eax]
  0000d	8b 52 1c	 mov	 edx, DWORD PTR [edx+28]
  00010	3b 55 08	 cmp	 edx, DWORD PTR _dwSetCode$[ebp]
  00013	74 09		 je	 SHORT $LN50@SetSetItem

; 187  : 	SetItemInfoList::iterator iter;
; 188  : 	for( iter=m_SetInfoList.begin() ; iter!=m_SetInfoList.end() ; ++iter )

  00015	83 c0 04	 add	 eax, 4
$LN52@SetSetItem:
  00018	3b c1		 cmp	 eax, ecx
  0001a	75 ef		 jne	 SHORT $LL21@SetSetItem

; 189  : 	{
; 190  : 		if( (*iter)->GetSetCode() == dwSetCode )

  0001c	eb 08		 jmp	 SHORT $LN2@SetSetItem
$LN50@SetSetItem:

; 191  : 		{
; 192  : 			(*iter)->SetShopOrder( iShopOrder );

  0001e	8b 00		 mov	 eax, DWORD PTR [eax]
  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _iShopOrder$[ebp]
  00023	89 48 64	 mov	 DWORD PTR [eax+100], ecx
$LN2@SetSetItem:

; 193  : 			return;
; 194  : 		}
; 195  : 	}
; 196  : }

  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
?SetSetItemShopOrder@ioSetItemInfoManager@@QAEXKH@Z ENDP ; ioSetItemInfoManager::SetSetItemShopOrder
_TEXT	ENDS
PUBLIC	?SetSetItemShopMarkType@ioSetItemInfoManager@@QAEXKH@Z ; ioSetItemInfoManager::SetSetItemShopMarkType
; Function compile flags: /Ogsp
;	COMDAT ?SetSetItemShopMarkType@ioSetItemInfoManager@@QAEXKH@Z
_TEXT	SEGMENT
_dwSetCode$ = 8						; size = 4
_iShopMarkType$ = 12					; size = 4
?SetSetItemShopMarkType@ioSetItemInfoManager@@QAEXKH@Z PROC ; ioSetItemInfoManager::SetSetItemShopMarkType, COMDAT
; _this$ = ecx

; 208  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 209  : 	SetItemInfoList::iterator iter;
; 210  : 	for( iter=m_SetInfoList.begin() ; iter!=m_SetInfoList.end() ; ++iter )

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00009	eb 0d		 jmp	 SHORT $LN52@SetSetItem@2
$LL21@SetSetItem@2:

; 211  : 	{
; 212  : 		if( (*iter)->GetSetCode() == dwSetCode )

  0000b	8b 10		 mov	 edx, DWORD PTR [eax]
  0000d	8b 52 1c	 mov	 edx, DWORD PTR [edx+28]
  00010	3b 55 08	 cmp	 edx, DWORD PTR _dwSetCode$[ebp]
  00013	74 09		 je	 SHORT $LN50@SetSetItem@2

; 209  : 	SetItemInfoList::iterator iter;
; 210  : 	for( iter=m_SetInfoList.begin() ; iter!=m_SetInfoList.end() ; ++iter )

  00015	83 c0 04	 add	 eax, 4
$LN52@SetSetItem@2:
  00018	3b c1		 cmp	 eax, ecx
  0001a	75 ef		 jne	 SHORT $LL21@SetSetItem@2

; 211  : 	{
; 212  : 		if( (*iter)->GetSetCode() == dwSetCode )

  0001c	eb 08		 jmp	 SHORT $LN2@SetSetItem@2
$LN50@SetSetItem@2:

; 213  : 		{
; 214  : 			(*iter)->SetShopMarkType( iShopMarkType );

  0001e	8b 00		 mov	 eax, DWORD PTR [eax]
  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _iShopMarkType$[ebp]
  00023	89 48 6c	 mov	 DWORD PTR [eax+108], ecx
$LN2@SetSetItem@2:

; 215  : 			return;
; 216  : 		}
; 217  : 	}
; 218  : }

  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
?SetSetItemShopMarkType@ioSetItemInfoManager@@QAEXKH@Z ENDP ; ioSetItemInfoManager::SetSetItemShopMarkType
_TEXT	ENDS
PUBLIC	?GetSetItemRecommandedCnt@ioSetItemInfoManager@@QAEHXZ ; ioSetItemInfoManager::GetSetItemRecommandedCnt
; Function compile flags: /Ogsp
;	COMDAT ?GetSetItemRecommandedCnt@ioSetItemInfoManager@@QAEHXZ
_TEXT	SEGMENT
?GetSetItemRecommandedCnt@ioSetItemInfoManager@@QAEHXZ PROC ; ioSetItemInfoManager::GetSetItemRecommandedCnt, COMDAT
; _this$ = ecx

; 222  : 	int iCount = 0;
; 223  : 	SetItemInfoList::iterator iter;
; 224  : 	for( iter=m_SetInfoList.begin() ; iter!=m_SetInfoList.end() ; ++iter )

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00006	33 c0		 xor	 eax, eax
  00008	3b d1		 cmp	 edx, ecx
  0000a	74 15		 je	 SHORT $LN2@GetSetItem@4
  0000c	56		 push	 esi
$LL21@GetSetItem@4:

; 225  : 	{
; 226  : 		if( (*iter)->GetRecommendedShopOrder() != ORDER_DEFAULT )

  0000d	8b 32		 mov	 esi, DWORD PTR [edx]
  0000f	81 7e 68 ff c9
	9a 3b		 cmp	 DWORD PTR [esi+104], 999999999 ; 3b9ac9ffH
  00016	74 01		 je	 SHORT $LN3@GetSetItem@4

; 227  : 			iCount++;

  00018	40		 inc	 eax
$LN3@GetSetItem@4:

; 222  : 	int iCount = 0;
; 223  : 	SetItemInfoList::iterator iter;
; 224  : 	for( iter=m_SetInfoList.begin() ; iter!=m_SetInfoList.end() ; ++iter )

  00019	83 c2 04	 add	 edx, 4
  0001c	3b d1		 cmp	 edx, ecx
  0001e	75 ed		 jne	 SHORT $LL21@GetSetItem@4
  00020	5e		 pop	 esi
$LN2@GetSetItem@4:

; 228  : 	}
; 229  : 
; 230  : 	return iCount;
; 231  : }

  00021	c3		 ret	 0
?GetSetItemRecommandedCnt@ioSetItemInfoManager@@QAEHXZ ENDP ; ioSetItemInfoManager::GetSetItemRecommandedCnt
_TEXT	ENDS
PUBLIC	??1?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE@XZ ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::~vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::~vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IAEXXZ ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Tidy
??1?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::~vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAEXXZ ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T509113 = -4						; size = 4
?clear@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAEXXZ PROC ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T509113[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@0@Z ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAEXXZ ENDP ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IAEXI@Z ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx

; 1292 : 		if (max_size() - _Count < _Size)

  0000d	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  00012	2b 55 08	 sub	 edx, DWORD PTR __Count$[ebp]
  00015	c1 f8 02	 sar	 eax, 2
  00018	3b d0		 cmp	 edx, eax
  0001a	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0002a	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  0002d	2b d1		 sub	 edx, ecx
  0002f	c1 fa 02	 sar	 edx, 2
  00032	3b c2		 cmp	 eax, edx
  00034	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IBEII@Z ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Grow_to
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?reserve@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAEXI@Z ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::reserve
$LN1@Reserve:
  00046	5e		 pop	 esi

; 1298 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Reserve
_TEXT	ENDS
PUBLIC	??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy
??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@KV?$allocator@K@std@@@std@@QAEXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@KV?$allocator@K@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T509207 = -4						; size = 4
?clear@?$vector@KV?$allocator@K@std@@@std@@QAEXXZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T509207[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@KV?$allocator@K@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@KV?$allocator@K@std@@@std@@@2@0@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@KV?$allocator@K@std@@@std@@QAEXXZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@KV?$allocator@K@std@@@std@@IAEXI@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@KV?$allocator@K@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@KV?$allocator@K@std@@@std@@IAEXI@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx

; 1292 : 		if (max_size() - _Count < _Size)

  0000d	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  00012	2b 55 08	 sub	 edx, DWORD PTR __Count$[ebp]
  00015	c1 f8 02	 sar	 eax, 2
  00018	3b d0		 cmp	 edx, eax
  0001a	73 0b		 jae	 SHORT $LN4@Reserve@2

; 1293 : 			_Xlen();

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve@2:
$LN4@Reserve@2:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0002a	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  0002d	2b d1		 sub	 edx, ecx
  0002f	c1 fa 02	 sar	 edx, 2
  00032	3b c2		 cmp	 eax, edx
  00034	76 10		 jbe	 SHORT $LN1@Reserve@2

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@KV?$allocator@K@std@@@std@@IBEII@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Grow_to
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?reserve@?$vector@KV?$allocator@K@std@@@std@@QAEXI@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::reserve
$LN1@Reserve@2:
  00046	5e		 pop	 esi

; 1298 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN20@Reserve@2:
?_Reserve@?$vector@KV?$allocator@K@std@@@std@@IAEXI@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Reserve
_TEXT	ENDS
PUBLIC	??_7ioSetItemInfoManager@@6B@			; ioSetItemInfoManager::`vftable'
PUBLIC	??0ioSetItemInfoManager@@QAE@XZ			; ioSetItemInfoManager::ioSetItemInfoManager
PUBLIC	??_R4ioSetItemInfoManager@@6B@			; ioSetItemInfoManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioSetItemInfoManager@@@8		; ioSetItemInfoManager `RTTI Type Descriptor'
PUBLIC	??_R3ioSetItemInfoManager@@8			; ioSetItemInfoManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioSetItemInfoManager@@8			; ioSetItemInfoManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioSetItemInfoManager@@8		; ioSetItemInfoManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@?$Singleton@VioSetItemInfoManager@@@@8 ; Singleton<ioSetItemInfoManager>::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AV?$Singleton@VioSetItemInfoManager@@@@@8	; Singleton<ioSetItemInfoManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$Singleton@VioSetItemInfoManager@@@@8	; Singleton<ioSetItemInfoManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$Singleton@VioSetItemInfoManager@@@@8	; Singleton<ioSetItemInfoManager>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$Singleton@VioSetItemInfoManager@@@@8 ; Singleton<ioSetItemInfoManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EioSetItemInfoManager@@UAEPAXI@Z:PROC	; ioSetItemInfoManager::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$Singleton@VioSetItemInfoManager@@@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R1A@?0A@EA@?$Singleton@VioSetItemInfoManager@@@@8 DD FLAT:??_R0?AV?$Singleton@VioSetItemInfoManager@@@@@8 ; Singleton<ioSetItemInfoManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Singleton@VioSetItemInfoManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$Singleton@VioSetItemInfoManager@@@@8
rdata$r	SEGMENT
??_R2?$Singleton@VioSetItemInfoManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$Singleton@VioSetItemInfoManager@@@@8 ; Singleton<ioSetItemInfoManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$Singleton@VioSetItemInfoManager@@@@8
rdata$r	SEGMENT
??_R3?$Singleton@VioSetItemInfoManager@@@@8 DD 00H	; Singleton<ioSetItemInfoManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$Singleton@VioSetItemInfoManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$Singleton@VioSetItemInfoManager@@@@@8
_DATA	SEGMENT
??_R0?AV?$Singleton@VioSetItemInfoManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; Singleton<ioSetItemInfoManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$Singleton@VioSetItemInfoManager@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@?$Singleton@VioSetItemInfoManager@@@@8
rdata$r	SEGMENT
??_R13?0A@EA@?$Singleton@VioSetItemInfoManager@@@@8 DD FLAT:??_R0?AV?$Singleton@VioSetItemInfoManager@@@@@8 ; Singleton<ioSetItemInfoManager>::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Singleton@VioSetItemInfoManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioSetItemInfoManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioSetItemInfoManager@@8 DD FLAT:??_R0?AVioSetItemInfoManager@@@8 ; ioSetItemInfoManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioSetItemInfoManager@@8
rdata$r	ENDS
;	COMDAT ??_R2ioSetItemInfoManager@@8
rdata$r	SEGMENT
??_R2ioSetItemInfoManager@@8 DD FLAT:??_R1A@?0A@EA@ioSetItemInfoManager@@8 ; ioSetItemInfoManager::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@?$Singleton@VioSetItemInfoManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3ioSetItemInfoManager@@8
rdata$r	SEGMENT
??_R3ioSetItemInfoManager@@8 DD 00H			; ioSetItemInfoManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioSetItemInfoManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioSetItemInfoManager@@@8
_DATA	SEGMENT
??_R0?AVioSetItemInfoManager@@@8 DD FLAT:??_7type_info@@6B@ ; ioSetItemInfoManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioSetItemInfoManager@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioSetItemInfoManager@@6B@
rdata$r	SEGMENT
??_R4ioSetItemInfoManager@@6B@ DD 00H			; ioSetItemInfoManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioSetItemInfoManager@@@8
	DD	FLAT:??_R3ioSetItemInfoManager@@8
rdata$r	ENDS
;	COMDAT ??_7ioSetItemInfoManager@@6B@
CONST	SEGMENT
??_7ioSetItemInfoManager@@6B@ DD FLAT:??_R4ioSetItemInfoManager@@6B@ ; ioSetItemInfoManager::`vftable'
	DD	FLAT:??_EioSetItemInfoManager@@UAEPAXI@Z
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosetiteminfomanager.cpp
CONST	ENDS
;	COMDAT ??0ioSetItemInfoManager@@QAE@XZ
_TEXT	SEGMENT
??0ioSetItemInfoManager@@QAE@XZ PROC			; ioSetItemInfoManager::ioSetItemInfoManager, COMDAT
; _this$ = ecx

; 12   : {

  00000	8b c1		 mov	 eax, ecx
  00002	a3 00 00 00 00	 mov	 DWORD PTR ?ms_Singleton@?$Singleton@VioSetItemInfoManager@@@@1PAVioSetItemInfoManager@@A, eax ; Singleton<ioSetItemInfoManager>::ms_Singleton
  00007	33 c9		 xor	 ecx, ecx
  00009	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ioSetItemInfoManager@@6B@
  0000f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00012	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00015	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 13   : }

  00018	c3		 ret	 0
??0ioSetItemInfoManager@@QAE@XZ ENDP			; ioSetItemInfoManager::ioSetItemInfoManager
_TEXT	ENDS
PUBLIC	?DestroyAllInfo@ioSetItemInfoManager@@IAEXXZ	; ioSetItemInfoManager::DestroyAllInfo
; Function compile flags: /Ogsp
;	COMDAT ?DestroyAllInfo@ioSetItemInfoManager@@IAEXXZ
_TEXT	SEGMENT
$T509485 = -4						; size = 4
?DestroyAllInfo@ioSetItemInfoManager@@IAEXXZ PROC	; ioSetItemInfoManager::DestroyAllInfo, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b d9		 mov	 ebx, ecx
  00008	57		 push	 edi

; 27   : 	SetItemInfoList::iterator iter;
; 28   : 	for( iter=m_SetInfoList.begin() ; iter!=m_SetInfoList.end() ; ++iter )

  00009	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  0000c	eb 0f		 jmp	 SHORT $LN62@DestroyAll
$LL22@DestroyAll:

; 29   : 	{
; 30   : 		delete *iter;

  0000e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00010	85 c9		 test	 ecx, ecx
  00012	74 06		 je	 SHORT $LN2@DestroyAll
  00014	8b 01		 mov	 eax, DWORD PTR [ecx]
  00016	6a 01		 push	 1
  00018	ff 10		 call	 DWORD PTR [eax]
$LN2@DestroyAll:

; 27   : 	SetItemInfoList::iterator iter;
; 28   : 	for( iter=m_SetInfoList.begin() ; iter!=m_SetInfoList.end() ; ++iter )

  0001a	83 c7 04	 add	 edi, 4
$LN62@DestroyAll:
  0001d	3b 7b 08	 cmp	 edi, DWORD PTR [ebx+8]
  00020	75 ec		 jne	 SHORT $LL22@DestroyAll

; 31   : 	}
; 32   : 	m_SetInfoList.clear();

  00022	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00025	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00028	50		 push	 eax
  00029	51		 push	 ecx
  0002a	8d 45 fc	 lea	 eax, DWORD PTR $T509485[ebp]
  0002d	50		 push	 eax
  0002e	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00031	e8 00 00 00 00	 call	 ?erase@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@@2@0@Z ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::erase
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx

; 33   : }

  00039	c9		 leave
  0003a	c3		 ret	 0
?DestroyAllInfo@ioSetItemInfoManager@@IAEXXZ ENDP	; ioSetItemInfoManager::DestroyAllInfo
_TEXT	ENDS
PUBLIC	?push_back@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAEXABQAVioSetItemInfo@@@Z ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAEXABQAVioSetItemInfo@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAEXABQAVioSetItemInfo@@@Z PROC ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 27		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 21		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 980  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IAEXI@Z ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0002a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002d	85 c0		 test	 eax, eax
  0002f	74 20		 je	 SHORT $LN39@push_back
  00031	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00033	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00036	eb 17		 jmp	 SHORT $LN46@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00038	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0003b	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0003d	6a 01		 push	 1
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IAEXI@Z ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00046	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00049	85 c0		 test	 eax, eax
  0004b	74 04		 je	 SHORT $LN39@push_back
  0004d	8b 0f		 mov	 ecx, DWORD PTR [edi]
$LN46@push_back:
  0004f	89 08		 mov	 DWORD PTR [eax], ecx
$LN39@push_back:

; 996  : 			++this->_Mylast;

  00051	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?push_back@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAEXABQAVioSetItemInfo@@@Z ENDP ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$vector@KV?$allocator@K@std@@@std@@QAEX$$QAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::push_back
; Function compile flags: /Ogsp
;	COMDAT ?push_back@?$vector@KV?$allocator@K@std@@@std@@QAEX$$QAK@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@KV?$allocator@K@std@@@std@@QAEX$$QAK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::push_back, COMDAT
; _this$ = ecx

; 631  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 632  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 27		 jae	 SHORT $LN4@push_back@2
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 21		 ja	 SHORT $LN4@push_back@2

; 633  : 			{	// push back an element
; 634  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 635  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back@2

; 636  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@KV?$allocator@K@std@@@std@@IAEXI@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Reserve
$LN3@push_back@2:

; 637  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 638  : 			_Cons_val(this->_Alval,
; 639  : 				this->_Mylast,
; 640  : 				_STD forward<_Ty>(this->_Myfirst[_Idx]));

  0002a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002d	85 c0		 test	 eax, eax
  0002f	74 20		 je	 SHORT $LN41@push_back@2
  00031	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00033	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]

; 641  : 			++this->_Mylast;
; 642  : 			}
; 643  : 		else

  00036	eb 17		 jmp	 SHORT $LN48@push_back@2
$LN4@push_back@2:

; 644  : 			{	// push back a non-element
; 645  : 			if (this->_Mylast == this->_Myend)

  00038	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0003b	75 09		 jne	 SHORT $LN1@push_back@2

; 646  : 				_Reserve(1);

  0003d	6a 01		 push	 1
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?_Reserve@?$vector@KV?$allocator@K@std@@@std@@IAEXI@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Reserve
$LN1@push_back@2:

; 647  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 648  : 			_Cons_val(this->_Alval,
; 649  : 				this->_Mylast,
; 650  : 				_STD forward<_Ty>(_Val));

  00046	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00049	85 c0		 test	 eax, eax
  0004b	74 04		 je	 SHORT $LN41@push_back@2
  0004d	8b 0f		 mov	 ecx, DWORD PTR [edi]
$LN48@push_back@2:
  0004f	89 08		 mov	 DWORD PTR [eax], ecx
$LN41@push_back@2:

; 651  : 			++this->_Mylast;

  00051	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi

; 652  : 			}
; 653  : 		}

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?push_back@?$vector@KV?$allocator@K@std@@@std@@QAEX$$QAK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::push_back
_TEXT	ENDS
PUBLIC	??1ioSetItemInfoManager@@UAE@XZ			; ioSetItemInfoManager::~ioSetItemInfoManager
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
xdata$x	SEGMENT
__unwindtable$??1ioSetItemInfoManager@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioSetItemInfoManager@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioSetItemInfoManager@@UAE@XZ$1
__ehfuncinfo$??1ioSetItemInfoManager@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1ioSetItemInfoManager@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosetiteminfomanager.cpp
xdata$x	ENDS
;	COMDAT ??1ioSetItemInfoManager@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioSetItemInfoManager@@UAE@XZ PROC			; ioSetItemInfoManager::~ioSetItemInfoManager, COMDAT
; _this$ = ecx

; 16   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioSetItemInfoManager@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioSetItemInfoManager@@6B@
  00017	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 17   : 	DestroyAllInfo();

  0001e	e8 00 00 00 00	 call	 ?DestroyAllInfo@ioSetItemInfoManager@@IAEXXZ ; ioSetItemInfoManager::DestroyAllInfo

; 18   : }

  00023	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00026	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0002a	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@IAEXXZ ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::_Tidy
  0002f	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_Singleton@?$Singleton@VioSetItemInfoManager@@@@1PAVioSetItemInfoManager@@A, 0 ; Singleton<ioSetItemInfoManager>::ms_Singleton
  00036	e8 00 00 00 00	 call	 __EH_epilog3
  0003b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioSetItemInfoManager@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$Singleton@VioSetItemInfoManager@@@@QAE@XZ ; Singleton<ioSetItemInfoManager>::~Singleton<ioSetItemInfoManager>
__unwindfunclet$??1ioSetItemInfoManager@@UAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 04	 add	 ecx, 4
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAE@XZ ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::~vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >
__ehhandler$??1ioSetItemInfoManager@@UAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioSetItemInfoManager@@UAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioSetItemInfoManager@@UAE@XZ ENDP			; ioSetItemInfoManager::~ioSetItemInfoManager
PUBLIC	??_C@_0DI@MFAIAGKI@ioSetItemInfoManager?3?3AddSetItem@ ; `string'
PUBLIC	??_C@_0DI@NONGMAED@ioSetItemInfoManager?3?3AddSetItem@ ; `string'
PUBLIC	?AddSetItemInfo@ioSetItemInfoManager@@IAE_NPAVioSetItemInfo@@@Z ; ioSetItemInfoManager::AddSetItemInfo
EXTRN	__imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ:PROC
EXTRN	__imp_?LOG@@3VCLog@@A:BYTE
EXTRN	__imp_?c_str@ioHashString@@QBEPBDXZ:PROC
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
;	COMDAT ??_C@_0DI@MFAIAGKI@ioSetItemInfoManager?3?3AddSetItem@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosetiteminfo.h
CONST	SEGMENT
??_C@_0DI@MFAIAGKI@ioSetItemInfoManager?3?3AddSetItem@ DB 'ioSetItemInfoM'
	DB	'anager::AddSetItemInfo - %s Already Exist', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@NONGMAED@ioSetItemInfoManager?3?3AddSetItem@
CONST	SEGMENT
??_C@_0DI@NONGMAED@ioSetItemInfoManager?3?3AddSetItem@ DB 'ioSetItemInfoM'
	DB	'anager::AddSetItemInfo - %d Already Exist', 00H ; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosetiteminfomanager.cpp
CONST	ENDS
;	COMDAT ?AddSetItemInfo@ioSetItemInfoManager@@IAE_NPAVioSetItemInfo@@@Z
_TEXT	SEGMENT
_pInfo$ = 8						; size = 4
?AddSetItemInfo@ioSetItemInfoManager@@IAE_NPAVioSetItemInfo@@@Z PROC ; ioSetItemInfoManager::AddSetItemInfo, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 64   : 	const ioHashString &rkName = pInfo->GetName();

  00005	8b 75 08	 mov	 esi, DWORD PTR _pInfo$[ebp]
  00008	57		 push	 edi
  00009	8b d9		 mov	 ebx, ecx
  0000b	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]

; 65   : 	if( rkName.IsEmpty() || GetSetInfoByName( rkName ) )

  0000e	8b cf		 mov	 ecx, edi
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00016	84 c0		 test	 al, al
  00018	75 37		 jne	 SHORT $LN3@AddSetItem
  0001a	57		 push	 edi
  0001b	8b cb		 mov	 ecx, ebx
  0001d	e8 00 00 00 00	 call	 ?GetSetInfoByName@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@ABVioHashString@@@Z ; ioSetItemInfoManager::GetSetInfoByName
  00022	85 c0		 test	 eax, eax
  00024	75 2b		 jne	 SHORT $LN3@AddSetItem

; 70   : 	}
; 71   : 
; 72   : 	DWORD dwSetCode = pInfo->GetSetCode();

  00026	8b 76 1c	 mov	 esi, DWORD PTR [esi+28]

; 73   : 	if( dwSetCode == 0 || GetSetInfoByCode( dwSetCode ) )

  00029	85 f6		 test	 esi, esi
  0002b	74 1c		 je	 SHORT $LN1@AddSetItem
  0002d	56		 push	 esi
  0002e	8b cb		 mov	 ecx, ebx
  00030	e8 00 00 00 00	 call	 ?GetSetInfoByCode@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@K@Z ; ioSetItemInfoManager::GetSetInfoByCode
  00035	85 c0		 test	 eax, eax
  00037	75 10		 jne	 SHORT $LN1@AddSetItem

; 77   : 	}
; 78   : 
; 79   : 	m_SetInfoList.push_back( pInfo );

  00039	8d 45 08	 lea	 eax, DWORD PTR _pInfo$[ebp]
  0003c	50		 push	 eax
  0003d	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00040	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVioSetItemInfo@@V?$allocator@PAVioSetItemInfo@@@std@@@std@@QAEXABQAVioSetItemInfo@@@Z ; std::vector<ioSetItemInfo *,std::allocator<ioSetItemInfo *> >::push_back

; 80   : 	return true;

  00045	b0 01		 mov	 al, 1
  00047	eb 29		 jmp	 SHORT $LN5@AddSetItem
$LN1@AddSetItem:

; 74   : 	{
; 75   : 		LOG.PrintTimeAndLog( 0, "ioSetItemInfoManager::AddSetItemInfo - %d Already Exist", dwSetCode );

  00049	56		 push	 esi
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@NONGMAED@ioSetItemInfoManager?3?3AddSetItem@

; 76   : 		return false;

  0004f	eb 0e		 jmp	 SHORT $LN11@AddSetItem
$LN3@AddSetItem:

; 66   : 	{
; 67   : 		LOG.PrintTimeAndLog( 0, "ioSetItemInfoManager::AddSetItemInfo - %s Already Exist",
; 68   : 								rkName.c_str() );

  00051	8b cf		 mov	 ecx, edi
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  00059	50		 push	 eax
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@MFAIAGKI@ioSetItemInfoManager?3?3AddSetItem@
$LN11@AddSetItem:
  0005f	6a 00		 push	 0
  00061	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  0006d	83 c4 10	 add	 esp, 16			; 00000010H

; 69   : 		return false;

  00070	32 c0		 xor	 al, al
$LN5@AddSetItem:
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx

; 81   : }

  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
?AddSetItemInfo@ioSetItemInfoManager@@IAE_NPAVioSetItemInfo@@@Z ENDP ; ioSetItemInfoManager::AddSetItemInfo
_TEXT	ENDS
PUBLIC	?_Assign_rv@?$vector@KV?$allocator@K@std@@@std@@QAEX$$QAV12@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Assign_rv
EXTRN	__imp_?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Assign_rv@?$vector@KV?$allocator@K@std@@@std@@QAEX$$QAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Assign_rv@?$vector@KV?$allocator@K@std@@@std@@QAEX$$QAV12@@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Assign_rv, COMDAT
; _this$ = ecx

; 606  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 607  : 		if (this == &_Right)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	3b fe		 cmp	 edi, esi
  0000c	74 28		 je	 SHORT $LN1@Assign_rv

; 608  : 			;
; 609  : 		else if (get_allocator() != _Right.get_allocator())
; 610  : 			{	// move construct a copy
; 611  : 			clear();
; 612  : 			for (iterator _Next = _Right.begin(); _Next != _Right.end();
; 613  : 				++_Next)
; 614  : 				push_back(_STD forward<_Ty>(*_Next));
; 615  : 			}
; 616  : 		else
; 617  : 			{	// clear this and steal from _Right
; 618  : 			_Tidy();

  0000e	e8 00 00 00 00	 call	 ?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy

; 619  : 			this->_Swap_all((_Myt&)_Right);

  00013	56		 push	 esi
  00014	8b cf		 mov	 ecx, edi
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z

; 620  : 			this->_Myfirst = _Right._Myfirst;

  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax

; 621  : 			this->_Mylast = _Right._Mylast;

  00020	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00023	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 622  : 			this->_Myend = _Right._Myend;

  00026	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00029	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 623  : 
; 624  : 			_Right._Myfirst = 0;

  0002c	33 c0		 xor	 eax, eax
  0002e	89 06		 mov	 DWORD PTR [esi], eax

; 625  : 			_Right._Mylast = 0;

  00030	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 626  : 			_Right._Myend = 0;

  00033	89 46 08	 mov	 DWORD PTR [esi+8], eax
$LN1@Assign_rv:
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi

; 627  : 			}
; 628  : 		}

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?_Assign_rv@?$vector@KV?$allocator@K@std@@@std@@QAEX$$QAV12@@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Assign_rv
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioSetItemInfoManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioSetItemInfoManager@@UAEPAXI@Z PROC		; ioSetItemInfoManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioSetItemInfoManager@@UAE@XZ ; ioSetItemInfoManager::~ioSetItemInfoManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@2:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioSetItemInfoManager@@UAEPAXI@Z ENDP		; ioSetItemInfoManager::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??4?$vector@KV?$allocator@K@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$vector@KV?$allocator@K@std@@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$vector@KV?$allocator@K@std@@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::operator=, COMDAT
; _this$ = ecx

; 600  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 601  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  00004	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?_Assign_rv@?$vector@KV?$allocator@K@std@@@std@@QAEX$$QAV12@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Assign_rv

; 602  : 		return (*this);

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi

; 603  : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??4?$vector@KV?$allocator@K@std@@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::operator=
_TEXT	ENDS
PUBLIC	?ParsingSetItemCode@ioSetItemInfoManager@@IAEXXZ ; ioSetItemInfoManager::ParsingSetItemCode
EXTRN	?GetSetItemList@ioItemMaker@@QAE?AV?$vector@KV?$allocator@K@std@@@std@@K@Z:PROC ; ioItemMaker::GetSetItemList
EXTRN	?GetSingleton@ioItemMaker@@SAAAV1@XZ:PROC	; ioItemMaker::GetSingleton
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ParsingSetItemCode@ioSetItemInfoManager@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParsingSetItemCode@ioSetItemInfoManager@@IAEXXZ$0
__ehfuncinfo$?ParsingSetItemCode@ioSetItemInfoManager@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ParsingSetItemCode@ioSetItemInfoManager@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosetiteminfomanager.cpp
xdata$x	ENDS
;	COMDAT ?ParsingSetItemCode@ioSetItemInfoManager@@IAEXXZ
_TEXT	SEGMENT
$T509975 = -32						; size = 16
_i$505440 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?ParsingSetItemCode@ioSetItemInfoManager@@IAEXXZ PROC	; ioSetItemInfoManager::ParsingSetItemCode, COMDAT
; _this$ = ecx

; 84   : {

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?ParsingSetItemCode@ioSetItemInfoManager@@IAEXXZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b d9		 mov	 ebx, ecx

; 85   : 	int iTotalSet = GetTotalSetCount();

  0000e	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]
  00011	2b 73 04	 sub	 esi, DWORD PTR [ebx+4]

; 86   : 	for( int i=0 ; i<iTotalSet ; i++ )

  00014	83 65 f0 00	 and	 DWORD PTR _i$505440[ebp], 0
  00018	c1 fe 02	 sar	 esi, 2
  0001b	85 f6		 test	 esi, esi
  0001d	7e 41		 jle	 SHORT $LN2@ParsingSet
$LN4@ParsingSet:

; 87   : 	{
; 88   : 		ioSetItemInfo *pInfo = m_SetInfoList[i];

  0001f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00022	8b 4d f0	 mov	 ecx, DWORD PTR _i$505440[ebp]
  00025	8b 3c 88	 mov	 edi, DWORD PTR [eax+ecx*4]

; 89   : 		if( pInfo )

  00028	85 ff		 test	 edi, edi
  0002a	74 2c		 je	 SHORT $LN3@ParsingSet

; 90   : 		{
; 91   : 			pInfo->m_vSetItemCodeList = g_ItemMaker.GetSetItemList( pInfo->GetSetCode() );

  0002c	ff 77 1c	 push	 DWORD PTR [edi+28]
  0002f	8d 45 e0	 lea	 eax, DWORD PTR $T509975[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?GetSingleton@ioItemMaker@@SAAAV1@XZ ; ioItemMaker::GetSingleton
  00038	8b c8		 mov	 ecx, eax
  0003a	e8 00 00 00 00	 call	 ?GetSetItemList@ioItemMaker@@QAE?AV?$vector@KV?$allocator@K@std@@@std@@K@Z ; ioItemMaker::GetSetItemList
  0003f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	8d 4f 70	 lea	 ecx, DWORD PTR [edi+112]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?_Assign_rv@?$vector@KV?$allocator@K@std@@@std@@QAEX$$QAV12@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Assign_rv
  0004c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00050	8d 4d e0	 lea	 ecx, DWORD PTR $T509975[ebp]
  00053	e8 00 00 00 00	 call	 ?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy
$LN3@ParsingSet:

; 86   : 	for( int i=0 ; i<iTotalSet ; i++ )

  00058	ff 45 f0	 inc	 DWORD PTR _i$505440[ebp]
  0005b	39 75 f0	 cmp	 DWORD PTR _i$505440[ebp], esi
  0005e	7c bf		 jl	 SHORT $LN4@ParsingSet
$LN2@ParsingSet:

; 92   : 		}
; 93   : 	}
; 94   : }

  00060	e8 00 00 00 00	 call	 __EH_epilog3
  00065	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ParsingSetItemCode@ioSetItemInfoManager@@IAEXXZ$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR $T509975[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
__ehhandler$?ParsingSetItemCode@ioSetItemInfoManager@@IAEXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ParsingSetItemCode@ioSetItemInfoManager@@IAEXXZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ParsingSetItemCode@ioSetItemInfoManager@@IAEXXZ ENDP	; ioSetItemInfoManager::ParsingSetItemCode
PUBLIC	??_C@_0DD@FGHNCCME@ioSetItemInfoManager?3?3LoadInfoLi@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	?LoadInfoList@ioSetItemInfoManager@@QAEXXZ	; ioSetItemInfoManager::LoadInfoList
EXTRN	?LoadInfo@ioSetItemInfo@@QAEXAAVioINILoader@@@Z:PROC ; ioSetItemInfo::LoadInfo
EXTRN	??0ioSetItemInfo@@IAE@XZ:PROC			; ioSetItemInfo::ioSetItemInfo
EXTRN	__imp_?SetTitle@ioINILoader@@QAEXPBD@Z:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT ??_C@_0DD@FGHNCCME@ioSetItemInfoManager?3?3LoadInfoLi@
CONST	SEGMENT
??_C@_0DD@FGHNCCME@ioSetItemInfoManager?3?3LoadInfoLi@ DB 'ioSetItemInfoM'
	DB	'anager::LoadInfoList - %s Add Failed', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadInfoList@ioSetItemInfoManager@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadInfoList@ioSetItemInfoManager@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadInfoList@ioSetItemInfoManager@@QAEXXZ$1
__ehfuncinfo$?LoadInfoList@ioSetItemInfoManager@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadInfoList@ioSetItemInfoManager@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?LoadInfoList@ioSetItemInfoManager@@QAEXXZ
_TEXT	SEGMENT
$T510024 = -1240					; size = 4
_iMaxInfo$ = -1236					; size = 4
tv3243 = -1232						; size = 4
_this$GSCopy$ = -1228					; size = 4
_kLoader$ = -1224					; size = 912
_szTitle$ = -312					; size = 260
__k$510393 = -52					; size = 13
___encStr$505262 = -32					; size = 11
__t$510296 = -28					; size = 7
__$EHRec$ = -12						; size = 12
?LoadInfoList@ioSetItemInfoManager@@QAEXXZ PROC		; ioSetItemInfoManager::LoadInfoList, COMDAT
; _this$ = ecx

; 36   : {

  00000	68 cc 04 00 00	 push	 1228			; 000004ccH
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?LoadInfoList@ioSetItemInfoManager@@QAEXXZ
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS

; 43   : 	for( int i=0 ; i<iMaxInfo ; i++ )

  0000f	89 8d 34 fb ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00015	e8 00 00 00 00	 call	 ?DestroyAllInfo@ioSetItemInfoManager@@IAEXXZ ; ioSetItemInfoManager::DestroyAllInfo
  0001a	6a 06		 push	 6
  0001c	c7 85 88 fe ff
	ff 8e 83 85 8c	 mov	 DWORD PTR _kLoader$[ebp+848], -1937407090 ; 8c85838eH
  00026	c7 85 8c fe ff
	ff 84 8b c4 99	 mov	 DWORD PTR _kLoader$[ebp+852], -1715172476 ; 99c48b84H
  00030	c7 85 90 fe ff
	ff 9d de b4 99	 mov	 DWORD PTR _kLoader$[ebp+856], -1716199779 ; 99b4de9dH
  0003a	c7 85 94 fe ff
	ff 88 98 82 9e	 mov	 DWORD PTR _kLoader$[ebp+860], -1635608440 ; 9e829888H
  00044	c7 85 98 fe ff
	ff 88 81 b4 83	 mov	 DWORD PTR _kLoader$[ebp+864], -2085322360 ; 83b48188H
  0004e	c7 85 9c fe ff
	ff 83 8a 84 c4	 mov	 DWORD PTR _kLoader$[ebp+868], -997946749 ; c4848a83H
  00058	8d 85 88 fe ff
	ff		 lea	 eax, DWORD PTR _kLoader$[ebp+848]
  0005e	33 db		 xor	 ebx, ebx
  00060	c7 85 a0 fe ff
	ff 84 82 82 00	 mov	 DWORD PTR _kLoader$[ebp+872], 8553092 ; 00828284H
  0006a	59		 pop	 ecx
  0006b	bf ed ec eb ea	 mov	 edi, -353637139		; eaebecedH
$LL219@LoadInfoLi:

; 37   : 	DestroyAllInfo();
; 38   : 
; 39   : 	ioINILoader_e kLoader( "config/sp2_setitem_info.ini" );

  00070	31 38		 xor	 DWORD PTR [eax], edi
  00072	83 c0 04	 add	 eax, 4
  00075	49		 dec	 ecx
  00076	75 f8		 jne	 SHORT $LL219@LoadInfoLi
  00078	6a 18		 push	 24			; 00000018H
  0007a	5e		 pop	 esi
$LL216@LoadInfoLi:
  0007b	8b c6		 mov	 eax, esi
  0007d	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00082	79 05		 jns	 SHORT $LN465@LoadInfoLi
  00084	48		 dec	 eax
  00085	83 c8 fc	 or	 eax, -4			; fffffffcH
  00088	40		 inc	 eax
$LN465@LoadInfoLi:
  00089	b1 ed		 mov	 cl, -19			; ffffffedH
  0008b	2a c8		 sub	 cl, al
  0008d	30 8c 35 88 fe
	ff ff		 xor	 BYTE PTR _kLoader$[ebp+esi+848], cl
  00094	46		 inc	 esi
  00095	83 fe 1b	 cmp	 esi, 27			; 0000001bH
  00098	7c e1		 jl	 SHORT $LL216@LoadInfoLi
  0009a	6a 01		 push	 1
  0009c	8d 85 88 fe ff
	ff		 lea	 eax, DWORD PTR _kLoader$[ebp+848]
  000a2	50		 push	 eax
  000a3	8d 8d 38 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioINILoader@@QAE@PBD_N@Z

; 40   : 
; 41   : 	char szTitle[MAX_PATH];
; 42   : 	int iMaxInfo = kLoader.LoadInt_e( "common", "max_set_item", 0 );

  000af	6a 04		 push	 4
  000b1	c7 45 e4 8e 83
	86 87		 mov	 DWORD PTR __t$510296[ebp], -2021227634 ; 8786838eH
  000b8	31 7d e4	 xor	 DWORD PTR __t$510296[ebp], edi
  000bb	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  000be	66 c7 45 e8 82
	82		 mov	 WORD PTR __t$510296[ebp+4], 33410 ; 00008282H
  000c4	88 5d ea	 mov	 BYTE PTR __t$510296[ebp+6], bl
  000c7	58		 pop	 eax
$LL418@LoadInfoLi:
  000c8	8b c8		 mov	 ecx, eax
  000ca	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000d0	79 05		 jns	 SHORT $LN466@LoadInfoLi
  000d2	49		 dec	 ecx
  000d3	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000d6	41		 inc	 ecx
$LN466@LoadInfoLi:
  000d7	b2 ed		 mov	 dl, -19			; ffffffedH
  000d9	2a d1		 sub	 dl, cl
  000db	30 54 05 e4	 xor	 BYTE PTR __t$510296[ebp+eax], dl
  000df	40		 inc	 eax
  000e0	83 f8 06	 cmp	 eax, 6
  000e3	7c e3		 jl	 SHORT $LL418@LoadInfoLi
  000e5	6a 03		 push	 3
  000e7	c7 45 cc 80 8d
	93 b5		 mov	 DWORD PTR __k$510393[ebp], -1248621184 ; b5938d80H
  000ee	c7 45 d0 9e 89
	9f b5		 mov	 DWORD PTR __k$510393[ebp+4], -1247835746 ; b59f899eH
  000f5	c7 45 d4 84 98
	8e 87		 mov	 DWORD PTR __k$510393[ebp+8], -2020697980 ; 878e9884H
  000fc	8d 45 cc	 lea	 eax, DWORD PTR __k$510393[ebp]
  000ff	88 5d d8	 mov	 BYTE PTR __k$510393[ebp+12], bl
  00102	59		 pop	 ecx
$LL429@LoadInfoLi:
  00103	31 38		 xor	 DWORD PTR [eax], edi
  00105	83 c0 04	 add	 eax, 4
  00108	49		 dec	 ecx
  00109	75 f8		 jne	 SHORT $LL429@LoadInfoLi
  0010b	53		 push	 ebx
  0010c	8d 45 cc	 lea	 eax, DWORD PTR __k$510393[ebp]
  0010f	50		 push	 eax
  00110	8d 45 e4	 lea	 eax, DWORD PTR __t$510296[ebp]
  00113	50		 push	 eax
  00114	8d 8d 38 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  0011a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBD0H@Z

; 43   : 	for( int i=0 ; i<iMaxInfo ; i++ )

  00120	33 d2		 xor	 edx, edx
  00122	89 85 2c fb ff
	ff		 mov	 DWORD PTR _iMaxInfo$[ebp], eax
  00128	3b c3		 cmp	 eax, ebx
  0012a	0f 8e f9 00 00
	00		 jle	 $LN102@LoadInfoLi
$LN104@LoadInfoLi:

; 44   : 	{
; 45   : 		wsprintf_e( szTitle, "set_item%d", i+1 );

  00130	6a 02		 push	 2
  00132	c7 45 e0 9e 89
	9f b5		 mov	 DWORD PTR ___encStr$505262[ebp], -1247835746 ; b59f899eH
  00139	c7 45 e4 84 98
	8e 87		 mov	 DWORD PTR ___encStr$505262[ebp+4], -2020697980 ; 878e9884H
  00140	66 c7 45 e8 c8
	88		 mov	 WORD PTR ___encStr$505262[ebp+8], 35016 ; 000088c8H
  00146	8d 45 e0	 lea	 eax, DWORD PTR ___encStr$505262[ebp]
  00149	88 5d ea	 mov	 BYTE PTR ___encStr$505262[ebp+10], bl
  0014c	59		 pop	 ecx
$LL437@LoadInfoLi:
  0014d	31 38		 xor	 DWORD PTR [eax], edi
  0014f	83 c0 04	 add	 eax, 4
  00152	49		 dec	 ecx
  00153	75 f8		 jne	 SHORT $LL437@LoadInfoLi
  00155	6a 08		 push	 8
  00157	5e		 pop	 esi
$LL434@LoadInfoLi:
  00158	8b c6		 mov	 eax, esi
  0015a	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0015f	79 05		 jns	 SHORT $LN467@LoadInfoLi
  00161	48		 dec	 eax
  00162	83 c8 fc	 or	 eax, -4			; fffffffcH
  00165	40		 inc	 eax
$LN467@LoadInfoLi:
  00166	b1 ed		 mov	 cl, -19			; ffffffedH
  00168	2a c8		 sub	 cl, al
  0016a	30 4c 35 e0	 xor	 BYTE PTR ___encStr$505262[ebp+esi], cl
  0016e	46		 inc	 esi
  0016f	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00172	7c e4		 jl	 SHORT $LL434@LoadInfoLi
  00174	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00177	50		 push	 eax
  00178	89 85 30 fb ff
	ff		 mov	 DWORD PTR tv3243[ebp], eax
  0017e	8d 45 e0	 lea	 eax, DWORD PTR ___encStr$505262[ebp]
  00181	50		 push	 eax
  00182	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _szTitle$[ebp]
  00188	50		 push	 eax
  00189	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  0018f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 46   : 		kLoader.SetTitle( szTitle );

  00192	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _szTitle$[ebp]
  00198	50		 push	 eax
  00199	8d 8d 38 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  0019f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitle@ioINILoader@@QAEXPBD@Z

; 47   : 
; 48   : 		ioSetItemInfo *pInfo = new ioSetItemInfo;

  001a5	68 e4 00 00 00	 push	 228			; 000000e4H
  001aa	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001af	59		 pop	 ecx
  001b0	89 85 28 fb ff
	ff		 mov	 DWORD PTR $T510024[ebp], eax
  001b6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001ba	3b c3		 cmp	 eax, ebx
  001bc	74 0b		 je	 SHORT $LN107@LoadInfoLi
  001be	8b c8		 mov	 ecx, eax
  001c0	e8 00 00 00 00	 call	 ??0ioSetItemInfo@@IAE@XZ ; ioSetItemInfo::ioSetItemInfo
  001c5	8b f0		 mov	 esi, eax
  001c7	eb 02		 jmp	 SHORT $LN108@LoadInfoLi
$LN107@LoadInfoLi:
  001c9	33 f6		 xor	 esi, esi
$LN108@LoadInfoLi:

; 49   : 		pInfo->LoadInfo( kLoader );

  001cb	8d 85 38 fb ff
	ff		 lea	 eax, DWORD PTR _kLoader$[ebp]
  001d1	50		 push	 eax
  001d2	8b ce		 mov	 ecx, esi
  001d4	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  001d7	e8 00 00 00 00	 call	 ?LoadInfo@ioSetItemInfo@@QAEXAAVioINILoader@@@Z ; ioSetItemInfo::LoadInfo

; 50   : 
; 51   : 		if( !AddSetItemInfo( pInfo ) )

  001dc	8b 8d 34 fb ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001e2	56		 push	 esi
  001e3	e8 00 00 00 00	 call	 ?AddSetItemInfo@ioSetItemInfoManager@@IAE_NPAVioSetItemInfo@@@Z ; ioSetItemInfoManager::AddSetItemInfo
  001e8	84 c0		 test	 al, al
  001ea	75 2b		 jne	 SHORT $LN103@LoadInfoLi

; 52   : 		{
; 53   : 			LOG.PrintTimeAndLog( 0, "ioSetItemInfoManager::LoadInfoList - %s Add Failed",
; 54   : 									pInfo->GetName().c_str() );

  001ec	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  001ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  001f5	50		 push	 eax
  001f6	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@FGHNCCME@ioSetItemInfoManager?3?3LoadInfoLi@
  001fb	53		 push	 ebx
  001fc	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  00202	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00208	83 c4 10	 add	 esp, 16			; 00000010H

; 55   : 			SAFEDELETE( pInfo );

  0020b	3b f3		 cmp	 esi, ebx
  0020d	74 08		 je	 SHORT $LN103@LoadInfoLi
  0020f	8b 06		 mov	 eax, DWORD PTR [esi]
  00211	6a 01		 push	 1
  00213	8b ce		 mov	 ecx, esi
  00215	ff 10		 call	 DWORD PTR [eax]
$LN103@LoadInfoLi:

; 43   : 	for( int i=0 ; i<iMaxInfo ; i++ )

  00217	8b 95 30 fb ff
	ff		 mov	 edx, DWORD PTR tv3243[ebp]
  0021d	3b 95 2c fb ff
	ff		 cmp	 edx, DWORD PTR _iMaxInfo$[ebp]
  00223	0f 8c 07 ff ff
	ff		 jl	 $LN104@LoadInfoLi
$LN102@LoadInfoLi:

; 56   : 		}
; 57   : 	}
; 58   : 
; 59   : 	ParsingSetItemCode();

  00229	8b 8d 34 fb ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0022f	e8 00 00 00 00	 call	 ?ParsingSetItemCode@ioSetItemInfoManager@@IAEXXZ ; ioSetItemInfoManager::ParsingSetItemCode

; 60   : }

  00234	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00238	8d 8d 38 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  0023e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioINILoader@@QAE@XZ
  00244	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00249	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadInfoList@ioSetItemInfoManager@@QAEXXZ$0:
  00000	8d 8d 38 fb ff
	ff		 lea	 ecx, DWORD PTR _kLoader$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1ioINILoader_e@@QAE@XZ
__unwindfunclet$?LoadInfoList@ioSetItemInfoManager@@QAEXXZ$1:
  0000b	ff b5 28 fb ff
	ff		 push	 DWORD PTR $T510024[ebp]
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	59		 pop	 ecx
  00017	c3		 ret	 0
__ehhandler$?LoadInfoList@ioSetItemInfoManager@@QAEXXZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 8a 24 fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1244]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadInfoList@ioSetItemInfoManager@@QAEXXZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadInfoList@ioSetItemInfoManager@@QAEXXZ ENDP		; ioSetItemInfoManager::LoadInfoList
END
