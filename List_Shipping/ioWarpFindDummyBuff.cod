; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioWarpFindDummyBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ	; ioBaseChar::GetCharName
; Function compile flags: /Ogsp
;	COMDAT ?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ PROC	; ioBaseChar::GetCharName, COMDAT
; _this$ = ecx

; 2594 : 	inline const ioHashString& GetCharName() const { return m_Name; }

  00000	8d 81 d4 02 00
	00		 lea	 eax, DWORD PTR [ecx+724]
  00006	c3		 ret	 0
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ ENDP	; ioBaseChar::GetCharName
_TEXT	ENDS
PUBLIC	?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ	; ioBaseChar::GetCreator
; Function compile flags: /Ogsp
;	COMDAT ?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ
_TEXT	SEGMENT
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ PROC	; ioBaseChar::GetCreator, COMDAT
; _this$ = ecx

; 4013 : 	inline ioPlayStage* GetCreator() { return m_pCreator; }

  00000	8b 81 44 03 00
	00		 mov	 eax, DWORD PTR [ecx+836]
  00006	c3		 ret	 0
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ ENDP	; ioBaseChar::GetCreator
_TEXT	ENDS
PUBLIC	??_7ioWarpFindDummyBuff@@6B@			; ioWarpFindDummyBuff::`vftable'
PUBLIC	??0ioWarpFindDummyBuff@@QAE@XZ			; ioWarpFindDummyBuff::ioWarpFindDummyBuff
PUBLIC	??_R4ioWarpFindDummyBuff@@6B@			; ioWarpFindDummyBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioWarpFindDummyBuff@@@8			; ioWarpFindDummyBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioWarpFindDummyBuff@@8			; ioWarpFindDummyBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWarpFindDummyBuff@@8			; ioWarpFindDummyBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioWarpFindDummyBuff@@8		; ioWarpFindDummyBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioWarpFindDummyBuff@@UAEXAAVioINILoader@@@Z ; ioWarpFindDummyBuff::LoadProperty
PUBLIC	?Clone@ioWarpFindDummyBuff@@UAEPAVioBuff@@XZ	; ioWarpFindDummyBuff::Clone
PUBLIC	?StartBuff@ioWarpFindDummyBuff@@UAEXPAVioBaseChar@@@Z ; ioWarpFindDummyBuff::StartBuff
PUBLIC	?ApplyStartBuff@ioWarpFindDummyBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioWarpFindDummyBuff::ApplyStartBuff
PUBLIC	?ProcessBuff@ioWarpFindDummyBuff@@UAEXM@Z	; ioWarpFindDummyBuff::ProcessBuff
PUBLIC	?EndBuff@ioWarpFindDummyBuff@@UAEXXZ		; ioWarpFindDummyBuff::EndBuff
PUBLIC	?ApplyExtraBuffInfo@ioWarpFindDummyBuff@@UAEXAAVSP2Packet@@@Z ; ioWarpFindDummyBuff::ApplyExtraBuffInfo
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioWarpFindDummyBuff@@UAEPAXI@Z:PROC		; ioWarpFindDummyBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iowarpfinddummybuff.cpp
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWarpFindDummyBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWarpFindDummyBuff@@8 DD FLAT:??_R0?AVioWarpFindDummyBuff@@@8 ; ioWarpFindDummyBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWarpFindDummyBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioWarpFindDummyBuff@@8
rdata$r	SEGMENT
??_R2ioWarpFindDummyBuff@@8 DD FLAT:??_R1A@?0A@EA@ioWarpFindDummyBuff@@8 ; ioWarpFindDummyBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioWarpFindDummyBuff@@8
rdata$r	SEGMENT
??_R3ioWarpFindDummyBuff@@8 DD 00H			; ioWarpFindDummyBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioWarpFindDummyBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWarpFindDummyBuff@@@8
_DATA	SEGMENT
??_R0?AVioWarpFindDummyBuff@@@8 DD FLAT:??_7type_info@@6B@ ; ioWarpFindDummyBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWarpFindDummyBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioWarpFindDummyBuff@@6B@
rdata$r	SEGMENT
??_R4ioWarpFindDummyBuff@@6B@ DD 00H			; ioWarpFindDummyBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioWarpFindDummyBuff@@@8
	DD	FLAT:??_R3ioWarpFindDummyBuff@@8
rdata$r	ENDS
;	COMDAT ??_7ioWarpFindDummyBuff@@6B@
CONST	SEGMENT
??_7ioWarpFindDummyBuff@@6B@ DD FLAT:??_R4ioWarpFindDummyBuff@@6B@ ; ioWarpFindDummyBuff::`vftable'
	DD	FLAT:?LoadProperty@ioWarpFindDummyBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioWarpFindDummyBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioWarpFindDummyBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioWarpFindDummyBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioWarpFindDummyBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioWarpFindDummyBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioWarpFindDummyBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioWarpFindDummyBuff@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioWarpFindDummyBuff@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioWarpFindDummyBuff@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioWarpFindDummyBuff@@QAE@XZ$1
__ehfuncinfo$??0ioWarpFindDummyBuff@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ioWarpFindDummyBuff@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioWarpFindDummyBuff@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioWarpFindDummyBuff@@QAE@XZ PROC			; ioWarpFindDummyBuff::ioWarpFindDummyBuff, COMDAT
; _this$ = ecx

; 12   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioWarpFindDummyBuff@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff
  00016	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  0001c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00020	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioWarpFindDummyBuff@@6B@
  0002c	ff d7		 call	 edi
  0002e	8d 8e 7c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2428]
  00034	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00038	ff d7		 call	 edi

; 13   : }

  0003a	8b c6		 mov	 eax, esi
  0003c	e8 00 00 00 00	 call	 __EH_epilog3
  00041	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioWarpFindDummyBuff@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??0ioWarpFindDummyBuff@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 6c 09 00
	00		 add	 ecx, 2412		; 0000096cH
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0ioWarpFindDummyBuff@@QAE@XZ:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioWarpFindDummyBuff@@QAE@XZ
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioWarpFindDummyBuff@@QAE@XZ ENDP			; ioWarpFindDummyBuff::ioWarpFindDummyBuff
PUBLIC	??0ioWarpFindDummyBuff@@QAE@ABV0@@Z		; ioWarpFindDummyBuff::ioWarpFindDummyBuff
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
EXTRN	__fltused:DWORD
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioWarpFindDummyBuff@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioWarpFindDummyBuff@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioWarpFindDummyBuff@@QAE@ABV0@@Z$1
__ehfuncinfo$??0ioWarpFindDummyBuff@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ioWarpFindDummyBuff@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioWarpFindDummyBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioWarpFindDummyBuff@@QAE@ABV0@@Z PROC		; ioWarpFindDummyBuff::ioWarpFindDummyBuff, COMDAT
; _this$ = ecx

; 20   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioWarpFindDummyBuff@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  0001a	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00020	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00024	8d 87 6c 09 00
	00		 lea	 eax, DWORD PTR [edi+2412]
  0002a	50		 push	 eax
  0002b	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00031	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioWarpFindDummyBuff@@6B@
  00037	ff d3		 call	 ebx
  00039	8d 87 7c 09 00
	00		 lea	 eax, DWORD PTR [edi+2428]
  0003f	50		 push	 eax
  00040	8d 8e 7c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2428]
  00046	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0004a	ff d3		 call	 ebx
  0004c	d9 87 8c 09 00
	00		 fld	 DWORD PTR [edi+2444]
  00052	d9 9e 8c 09 00
	00		 fstp	 DWORD PTR [esi+2444]

; 21   : }

  00058	8b c6		 mov	 eax, esi
  0005a	e8 00 00 00 00	 call	 __EH_epilog3
  0005f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioWarpFindDummyBuff@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??0ioWarpFindDummyBuff@@QAE@ABV0@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 6c 09 00
	00		 add	 ecx, 2412		; 0000096cH
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0ioWarpFindDummyBuff@@QAE@ABV0@@Z:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioWarpFindDummyBuff@@QAE@ABV0@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioWarpFindDummyBuff@@QAE@ABV0@@Z ENDP		; ioWarpFindDummyBuff::ioWarpFindDummyBuff
PUBLIC	??1ioWarpFindDummyBuff@@UAE@XZ			; ioWarpFindDummyBuff::~ioWarpFindDummyBuff
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioWarpFindDummyBuff@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioWarpFindDummyBuff@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioWarpFindDummyBuff@@UAE@XZ$1
__ehfuncinfo$??1ioWarpFindDummyBuff@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1ioWarpFindDummyBuff@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioWarpFindDummyBuff@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioWarpFindDummyBuff@@UAE@XZ PROC			; ioWarpFindDummyBuff::~ioWarpFindDummyBuff, COMDAT
; _this$ = ecx

; 24   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioWarpFindDummyBuff@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioWarpFindDummyBuff@@6B@

; 25   : }

  00017	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0001d	8d 8e 7c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2428]
  00023	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0002a	ff d7		 call	 edi
  0002c	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00032	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00036	ff d7		 call	 edi
  00038	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0003c	8b ce		 mov	 ecx, esi
  0003e	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  00043	e8 00 00 00 00	 call	 __EH_epilog3
  00048	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioWarpFindDummyBuff@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__unwindfunclet$??1ioWarpFindDummyBuff@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 6c 09 00
	00		 add	 ecx, 2412		; 0000096cH
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1ioWarpFindDummyBuff@@UAE@XZ:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioWarpFindDummyBuff@@UAE@XZ
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioWarpFindDummyBuff@@UAE@XZ ENDP			; ioWarpFindDummyBuff::~ioWarpFindDummyBuff
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioWarpFindDummyBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioWarpFindDummyBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioWarpFindDummyBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioWarpFindDummyBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioWarpFindDummyBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T543197 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioWarpFindDummyBuff@@UAEPAVioBuff@@XZ PROC	; ioWarpFindDummyBuff::Clone, COMDAT
; _this$ = ecx

; 42   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioWarpFindDummyBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 43   : 	return new ioWarpFindDummyBuff( *this );

  0000e	68 94 09 00 00	 push	 2452			; 00000994H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T543197[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioWarpFindDummyBuff@@QAE@ABV0@@Z ; ioWarpFindDummyBuff::ioWarpFindDummyBuff
$LN3@Clone:

; 44   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioWarpFindDummyBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T543197[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioWarpFindDummyBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioWarpFindDummyBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioWarpFindDummyBuff@@UAEPAVioBuff@@XZ ENDP	; ioWarpFindDummyBuff::Clone
EXTRN	?SetState@ioBaseChar@@QAEXH_N@Z:PROC		; ioBaseChar::SetState
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
; Function compile flags: /Ogsp
;	COMDAT ?EndBuff@ioWarpFindDummyBuff@@UAEXXZ
_TEXT	SEGMENT
?EndBuff@ioWarpFindDummyBuff@@UAEXXZ PROC		; ioWarpFindDummyBuff::EndBuff, COMDAT
; _this$ = ecx

; 94   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 95   : 	ioBuff::EndBuff();

  00003	e8 00 00 00 00	 call	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff

; 96   : 
; 97   : 	if ( m_pOwner && m_pOwner->GetState() == CS_ETC_STATE )

  00008	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0000e	85 c9		 test	 ecx, ecx
  00010	74 18		 je	 SHORT $LN1@EndBuff
  00012	80 b9 10 03 00
	00 0f		 cmp	 BYTE PTR [ecx+784], 15	; 0000000fH
  00019	75 0f		 jne	 SHORT $LN1@EndBuff

; 98   : 		m_pOwner->SetState( CS_DELAY, m_bSendDelayNetWork );

  0001b	0f b6 86 f9 08
	00 00		 movzx	 eax, BYTE PTR [esi+2297]
  00022	50		 push	 eax
  00023	6a 00		 push	 0
  00025	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState
$LN1@EndBuff:
  0002a	5e		 pop	 esi

; 99   : }

  0002b	c3		 ret	 0
?EndBuff@ioWarpFindDummyBuff@@UAEXXZ ENDP		; ioWarpFindDummyBuff::EndBuff
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ	; ioGameEntity::GetGroup
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
;	COMDAT ?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ
_TEXT	SEGMENT
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ PROC	; ioGameEntity::GetGroup, COMDAT
; _this$ = ecx

; 166  : 	inline ioEntityGroup* GetGroup() const { return m_pGroup; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ ENDP	; ioGameEntity::GetGroup
_TEXT	ENDS
PUBLIC	?GetName@ioBuff@@QBEABVioHashString@@XZ		; ioBuff::GetName
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
;	COMDAT ?GetName@ioBuff@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetName@ioBuff@@QBEABVioHashString@@XZ PROC		; ioBuff::GetName, COMDAT
; _this$ = ecx

; 440  : 	inline const ioHashString& GetName() const { return m_Name; }

  00000	8d 81 34 02 00
	00		 lea	 eax, DWORD PTR [ecx+564]
  00006	c3		 ret	 0
?GetName@ioBuff@@QBEABVioHashString@@XZ ENDP		; ioBuff::GetName
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioWarpFindDummyBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioWarpFindDummyBuff@@UAEPAXI@Z PROC			; ioWarpFindDummyBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioWarpFindDummyBuff@@UAE@XZ ; ioWarpFindDummyBuff::~ioWarpFindDummyBuff
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioWarpFindDummyBuff@@UAEPAXI@Z ENDP			; ioWarpFindDummyBuff::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
EXTRN	??5SP2Packet@@QAEAAV0@AAUD3DXVECTOR3@@@Z:PROC	; SP2Packet::operator>>
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iowarpfinddummybuff.cpp
;	COMDAT ?ApplyExtraBuffInfo@ioWarpFindDummyBuff@@UAEXAAVSP2Packet@@@Z
_TEXT	SEGMENT
_vNewPos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_rkPacket$ = 8						; size = 4
?ApplyExtraBuffInfo@ioWarpFindDummyBuff@@UAEXAAVSP2Packet@@@Z PROC ; ioWarpFindDummyBuff::ApplyExtraBuffInfo, COMDAT
; _this$ = ecx

; 102  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi

; 103  : 	D3DXVECTOR3 vNewPos;
; 104  : 	rkPacket >> vNewPos;

  00011	8d 45 f0	 lea	 eax, DWORD PTR _vNewPos$[ebp]
  00014	8b f1		 mov	 esi, ecx
  00016	8b 4d 08	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAUD3DXVECTOR3@@@Z ; SP2Packet::operator>>

; 105  : 
; 106  : 	if ( m_pOwner )

  0001f	83 be 74 02 00
	00 00		 cmp	 DWORD PTR [esi+628], 0
  00026	74 11		 je	 SHORT $LN1@ApplyExtra

; 107  : 		m_pOwner->SetWorldPosition( vNewPos );

  00028	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  0002e	8b 10		 mov	 edx, DWORD PTR [eax]
  00030	8d 4d f0	 lea	 ecx, DWORD PTR _vNewPos$[ebp]
  00033	51		 push	 ecx
  00034	8b c8		 mov	 ecx, eax
  00036	ff 52 44	 call	 DWORD PTR [edx+68]
$LN1@ApplyExtra:

; 108  : 
; 109  : 	SetReserveEndBuff();

  00039	8b ce		 mov	 ecx, esi
  0003b	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 110  : }

  00040	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00043	33 cd		 xor	 ecx, ebp
  00045	5e		 pop	 esi
  00046	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004b	c9		 leave
  0004c	c2 04 00	 ret	 4
?ApplyExtraBuffInfo@ioWarpFindDummyBuff@@UAEXAAVSP2Packet@@@Z ENDP ; ioWarpFindDummyBuff::ApplyExtraBuffInfo
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?WarpChar@ioWarpFindDummyBuff@@IAE_NPAVioBaseChar@@@Z ; ioWarpFindDummyBuff::WarpChar
EXTRN	??1SP2Packet@@UAE@XZ:PROC			; SP2Packet::~SP2Packet
EXTRN	?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z:PROC ; P2PNetwork::SendToAllPlayingUser
EXTRN	??6SP2Packet@@QAEAAV0@ABUD3DXVECTOR3@@@Z:PROC	; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z:PROC	; SP2Packet::operator<<
EXTRN	??0SP2Packet@@QAE@K@Z:PROC			; SP2Packet::SP2Packet
EXTRN	?FindDummyCharToName@ioDummyCharManager@@QAEPAVioDummyChar@@PAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioDummyCharManager::FindDummyCharToName
EXTRN	?GetSingleton@ioDummyCharManager@@SAAAV1@XZ:PROC ; ioDummyCharManager::GetSingleton
EXTRN	?GetBaseChar@ioPlayStage@@QAEPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioPlayStage::GetBaseChar
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	__chkstk:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
xdata$x	SEGMENT
__unwindtable$?WarpChar@ioWarpFindDummyBuff@@IAE_NPAVioBaseChar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WarpChar@ioWarpFindDummyBuff@@IAE_NPAVioBaseChar@@@Z$0
__ehfuncinfo$?WarpChar@ioWarpFindDummyBuff@@IAE_NPAVioBaseChar@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?WarpChar@ioWarpFindDummyBuff@@IAE_NPAVioBaseChar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iowarpfinddummybuff.cpp
xdata$x	ENDS
;	COMDAT ?WarpChar@ioWarpFindDummyBuff@@IAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32824					; size = 4
_kPacket$541965 = -32820				; size = 32792
_vDummyPos$541963 = -28					; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
?WarpChar@ioWarpFindDummyBuff@@IAE_NPAVioBaseChar@@@Z PROC ; ioWarpFindDummyBuff::WarpChar, COMDAT
; _this$ = ecx

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?WarpChar@ioWarpFindDummyBuff@@IAE_NPAVioBaseChar@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 2c 80 00 00	 mov	 eax, 32812		; 0000802cH
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 5d 08	 mov	 ebx, DWORD PTR _pOwner$[ebp]
  00035	8b f1		 mov	 esi, ecx

; 132  : 			{
; 133  : 				SP2Packet kPacket( CUPK_APPLY_EXTRA_BUFF_INFO );

  00037	89 b5 c8 7f ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  0003d	85 db		 test	 ebx, ebx
  0003f	0f 84 07 01 00
	00		 je	 $LN5@WarpChar

; 114  : 	if ( !pOwner || !pOwner->IsNeedProcess() || 
; 115  : 		 m_CreateChar.IsEmpty() || m_szFindDummyName.IsEmpty() )

  00045	8b 03		 mov	 eax, DWORD PTR [ebx]
  00047	8b cb		 mov	 ecx, ebx
  00049	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  0004f	84 c0		 test	 al, al
  00051	0f 84 f5 00 00
	00		 je	 $LN5@WarpChar
  00057	8d be 88 02 00
	00		 lea	 edi, DWORD PTR [esi+648]
  0005d	8b cf		 mov	 ecx, edi
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00065	84 c0		 test	 al, al
  00067	0f 85 df 00 00
	00		 jne	 $LN5@WarpChar
  0006d	81 c6 6c 09 00
	00		 add	 esi, 2412		; 0000096cH
  00073	8b ce		 mov	 ecx, esi
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0007b	84 c0		 test	 al, al
  0007d	0f 85 c9 00 00
	00		 jne	 $LN5@WarpChar

; 117  : 	
; 118  : 	ioPlayStage *pPlayStage = pOwner->GetCreator();

  00083	8b 8b 44 03 00
	00		 mov	 ecx, DWORD PTR [ebx+836]

; 119  : 	if ( !pPlayStage )

  00089	85 c9		 test	 ecx, ecx

; 120  : 		return false;

  0008b	0f 84 bb 00 00
	00		 je	 $LN5@WarpChar

; 121  : 	
; 122  : 	ioBaseChar *pCreateChar = pPlayStage->GetBaseChar( m_CreateChar );

  00091	57		 push	 edi
  00092	e8 00 00 00 00	 call	 ?GetBaseChar@ioPlayStage@@QAEPAVioBaseChar@@ABVioHashString@@@Z ; ioPlayStage::GetBaseChar

; 123  : 	if ( pCreateChar )

  00097	85 c0		 test	 eax, eax
  00099	0f 84 ad 00 00
	00		 je	 $LN5@WarpChar

; 124  : 	{
; 125  : 		ioDummyChar *pDummyChar = g_DummyCharMgr.FindDummyCharToName( pCreateChar, m_szFindDummyName );

  0009f	56		 push	 esi
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 ?GetSingleton@ioDummyCharManager@@SAAAV1@XZ ; ioDummyCharManager::GetSingleton
  000a6	8b c8		 mov	 ecx, eax
  000a8	e8 00 00 00 00	 call	 ?FindDummyCharToName@ioDummyCharManager@@QAEPAVioDummyChar@@PAVioBaseChar@@ABVioHashString@@@Z ; ioDummyCharManager::FindDummyCharToName

; 126  : 		if ( pDummyChar )

  000ad	85 c0		 test	 eax, eax
  000af	0f 84 97 00 00
	00		 je	 $LN5@WarpChar

; 127  : 		{
; 128  : 			D3DXVECTOR3 vDummyPos = pDummyChar->GetWorldPosition();

  000b5	8b 10		 mov	 edx, DWORD PTR [eax]
  000b7	8b c8		 mov	 ecx, eax
  000b9	ff 52 70	 call	 DWORD PTR [edx+112]
  000bc	8b f0		 mov	 esi, eax

; 129  : 			pOwner->SetWorldPosition( vDummyPos );

  000be	8b 03		 mov	 eax, DWORD PTR [ebx]
  000c0	8d 7d e4	 lea	 edi, DWORD PTR _vDummyPos$541963[ebp]
  000c3	a5		 movsd
  000c4	a5		 movsd
  000c5	8d 4d e4	 lea	 ecx, DWORD PTR _vDummyPos$541963[ebp]
  000c8	51		 push	 ecx
  000c9	8b cb		 mov	 ecx, ebx
  000cb	a5		 movsd
  000cc	ff 50 44	 call	 DWORD PTR [eax+68]

; 130  : 
; 131  : 			if ( pOwner->IsNeedSendNetwork() )

  000cf	8b 03		 mov	 eax, DWORD PTR [ebx]
  000d1	8b cb		 mov	 ecx, ebx
  000d3	ff 90 04 01 00
	00		 call	 DWORD PTR [eax+260]
  000d9	84 c0		 test	 al, al
  000db	74 6b		 je	 SHORT $LN1@WarpChar

; 132  : 			{
; 133  : 				SP2Packet kPacket( CUPK_APPLY_EXTRA_BUFF_INFO );

  000dd	68 45 42 00 00	 push	 16965			; 00004245H
  000e2	8d 8d cc 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$541965[ebp]
  000e8	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet
  000ed	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 134  : 				kPacket << pOwner->GetCharName();

  000f1	81 c3 d4 02 00
	00		 add	 ebx, 724		; 000002d4H
  000f7	53		 push	 ebx
  000f8	8d 8d cc 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$541965[ebp]
  000fe	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 135  : 				kPacket << GetName();

  00103	8b 85 c8 7f ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  00109	05 34 02 00 00	 add	 eax, 564		; 00000234H
  0010e	50		 push	 eax
  0010f	8d 8d cc 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$541965[ebp]
  00115	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 136  : 				kPacket << vDummyPos;

  0011a	8d 45 e4	 lea	 eax, DWORD PTR _vDummyPos$541963[ebp]
  0011d	50		 push	 eax
  0011e	8d 8d cc 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$541965[ebp]
  00124	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABUD3DXVECTOR3@@@Z ; SP2Packet::operator<<

; 137  : 				P2PNetwork::SendToAllPlayingUser( kPacket );

  00129	8d 85 cc 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$541965[ebp]
  0012f	6a 00		 push	 0
  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 ?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z ; P2PNetwork::SendToAllPlayingUser

; 138  : 			}

  00137	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0013b	59		 pop	 ecx
  0013c	59		 pop	 ecx
  0013d	8d 8d cc 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$541965[ebp]
  00143	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN1@WarpChar:

; 139  : 			return true;

  00148	b0 01		 mov	 al, 1

; 140  : 		}
; 141  : 		return false;

  0014a	eb 02		 jmp	 SHORT $LN7@WarpChar
$LN5@WarpChar:

; 116  : 		return false;

  0014c	32 c0		 xor	 al, al
$LN7@WarpChar:

; 142  : 	}
; 143  : 	return false;
; 144  : }

  0014e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00151	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00158	59		 pop	 ecx
  00159	5f		 pop	 edi
  0015a	5e		 pop	 esi
  0015b	5b		 pop	 ebx
  0015c	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015f	33 cd		 xor	 ecx, ebp
  00161	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00166	c9		 leave
  00167	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?WarpChar@ioWarpFindDummyBuff@@IAE_NPAVioBaseChar@@@Z$0:
  00000	8d 8d cc 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$541965[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?WarpChar@ioWarpFindDummyBuff@@IAE_NPAVioBaseChar@@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a c4 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32828]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?WarpChar@ioWarpFindDummyBuff@@IAE_NPAVioBaseChar@@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?WarpChar@ioWarpFindDummyBuff@@IAE_NPAVioBaseChar@@@Z ENDP ; ioWarpFindDummyBuff::WarpChar
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@41f0000000000000
PUBLIC	__real@42c80000
PUBLIC	?SetWarpState@ioWarpFindDummyBuff@@IAEXPAVioBaseChar@@@Z ; ioWarpFindDummyBuff::SetWarpState
EXTRN	?CheckCharColSkipSkillTime@ioBaseChar@@QAEXHMK@Z:PROC ; ioBaseChar::CheckCharColSkipSkillTime
EXTRN	__imp_?SetActionAni@ioEntityGroup@@QAE_NHMMMMMM_N0@Z:PROC
EXTRN	__imp_?GetAnimationFullTime@ioEntityGroup@@QAEMH@Z:PROC
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	__imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z:PROC
EXTRN	__imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z:PROC
EXTRN	__imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z:PROC
EXTRN	__ftol2:PROC
;	COMDAT __real@3f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@41f0000000000000
CONST	SEGMENT
__real@41f0000000000000 DQ 041f0000000000000r	; 4.29497e+009
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iowarpfinddummybuff.cpp
CONST	ENDS
;	COMDAT ?SetWarpState@ioWarpFindDummyBuff@@IAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
tv167 = -8						; size = 4
_fTimeRate$ = -4					; size = 4
_pOwner$ = 8						; size = 4
?SetWarpState@ioWarpFindDummyBuff@@IAEXPAVioBaseChar@@@Z PROC ; ioWarpFindDummyBuff::SetWarpState, COMDAT
; _this$ = ecx

; 147  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 148  : 	if ( !pOwner )

  00005	8b 45 08	 mov	 eax, DWORD PTR _pOwner$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	85 c0		 test	 eax, eax
  0000d	0f 84 21 01 00
	00		 je	 $LN3@SetWarpSta

; 149  : 		return;
; 150  : 
; 151  : 	ioEntityGroup *pGrp = pOwner->GetGroup();

  00013	53		 push	 ebx
  00014	57		 push	 edi
  00015	8b 78 04	 mov	 edi, DWORD PTR [eax+4]

; 152  : 
; 153  : 	int nAniID = pGrp->GetAnimationIdx( m_szWarpAni );

  00018	8d 86 7c 09 00
	00		 lea	 eax, DWORD PTR [esi+2428]
  0001e	50		 push	 eax
  0001f	8b cf		 mov	 ecx, edi
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z
  00027	8b d8		 mov	 ebx, eax

; 154  : 	if( nAniID == -1 )	

  00029	83 fb ff	 cmp	 ebx, -1
  0002c	0f 84 00 01 00
	00		 je	 $LN7@SetWarpSta

; 155  : 		return;
; 156  : 
; 157  : 	float fTimeRate  = m_fWarpAniRate;

  00032	f3 0f 10 86 8c
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2444]

; 158  : 
; 159  : 	pGrp->ClearAllLoopAni( 100.0f, true );

  0003a	6a 01		 push	 1
  0003c	51		 push	 ecx
  0003d	f3 0f 11 45 fc	 movss	 DWORD PTR _fTimeRate$[ebp], xmm0
  00042	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0004a	8b cf		 mov	 ecx, edi
  0004c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 160  : 	pGrp->ClearAllActionAni( 100.0f, true );

  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0005f	6a 01		 push	 1
  00061	51		 push	 ecx
  00062	8b cf		 mov	 ecx, edi
  00064	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 161  : 
; 162  : 	DWORD dwCurTime = FRAMEGETTIME();

  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00075	8b c8		 mov	 ecx, eax
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 163  : 	m_dwMotionEndTime = dwCurTime;
; 164  : 
; 165  : 	m_dwMotionEndTime += pGrp->GetAnimationFullTime( nAniID ) * fTimeRate;

  0007d	53		 push	 ebx
  0007e	8b cf		 mov	 ecx, edi
  00080	89 86 90 09 00
	00		 mov	 DWORD PTR [esi+2448], eax
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationFullTime@ioEntityGroup@@QAEMH@Z
  0008c	d8 4d fc	 fmul	 DWORD PTR _fTimeRate$[ebp]
  0008f	8b 86 90 09 00
	00		 mov	 eax, DWORD PTR [esi+2448]
  00095	db 86 90 09 00
	00		 fild	 DWORD PTR [esi+2448]
  0009b	85 c0		 test	 eax, eax
  0009d	79 06		 jns	 SHORT $LN9@SetWarpSta
  0009f	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@41f0000000000000
$LN9@SetWarpSta:
  000a5	de c1		 faddp	 ST(1), ST(0)
  000a7	e8 00 00 00 00	 call	 __ftol2

; 166  : 	
; 167  : 	pGrp->SetActionAni( nAniID, 100.0f, 100.0f, 1.0f, 1.0f/fTimeRate );

  000ac	0f 57 c0	 xorps	 xmm0, xmm0
  000af	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000b7	6a 01		 push	 1
  000b9	6a 00		 push	 0
  000bb	83 ec 18	 sub	 esp, 24			; 00000018H
  000be	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  000c4	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  000ca	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fTimeRate$[ebp]
  000cf	0f 5a c0	 cvtps2pd xmm0, xmm0
  000d2	f2 0f 5e c8	 divsd	 xmm1, xmm0
  000d6	8b cf		 mov	 ecx, edi
  000d8	89 86 90 09 00
	00		 mov	 DWORD PTR [esi+2448], eax
  000de	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  000e2	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  000e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000f0	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  000fe	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00104	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00109	53		 push	 ebx
  0010a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetActionAni@ioEntityGroup@@QAE_NHMMMMMM_N0@Z

; 168  : 
; 169  : 	pOwner->CheckCharColSkipSkillTime( nAniID, fTimeRate );

  00110	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fTimeRate$[ebp]
  00115	6a 00		 push	 0
  00117	51		 push	 ecx
  00118	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  0011b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00120	53		 push	 ebx
  00121	e8 00 00 00 00	 call	 ?CheckCharColSkipSkillTime@ioBaseChar@@QAEXHMK@Z ; ioBaseChar::CheckCharColSkipSkillTime

; 170  : 
; 171  : 	pOwner->SetState( CS_ETC_STATE );

  00126	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  00129	6a 01		 push	 1
  0012b	6a 0f		 push	 15			; 0000000fH
  0012d	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState
$LN7@SetWarpSta:
  00132	5f		 pop	 edi
  00133	5b		 pop	 ebx
$LN3@SetWarpSta:
  00134	5e		 pop	 esi

; 172  : }

  00135	c9		 leave
  00136	c2 04 00	 ret	 4
?SetWarpState@ioWarpFindDummyBuff@@IAEXPAVioBaseChar@@@Z ENDP ; ioWarpFindDummyBuff::SetWarpState
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<16>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -28					; size = 4
__k$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<16>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 8c 01 00
	00		 je	 $LN96@LoadString
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 75 01 00
	00		 je	 $LN95@LoadString
  00039	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003c	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  0003f	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00042	84 d2		 test	 dl, dl
  00044	0f 84 5e 01 00
	00		 je	 $LN94@LoadString
  0004a	b1 eb		 mov	 cl, -21			; ffffffebH
  0004c	32 d1		 xor	 dl, cl
  0004e	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 46 01 00
	00		 je	 $LN93@LoadString
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 2f 01 00
	00		 je	 $LN92@LoadString
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 18 01 00
	00		 je	 $LN91@LoadString
  0007e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00081	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  00084	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00087	84 d2		 test	 dl, dl
  00089	0f 84 02 01 00
	00		 je	 $LN90@LoadString
  0008f	32 d1		 xor	 dl, cl
  00091	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 ec 00 00
	00		 je	 $LN89@LoadString
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 d5 00 00
	00		 je	 $LN88@LoadString
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 be 00 00
	00		 je	 $LN87@LoadString
  000c1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000c4	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 a8 00 00
	00		 je	 $LN86@LoadString
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 92 00 00
	00		 je	 $LN85@LoadString
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	74 7f		 je	 SHORT $LN84@LoadString
  000ef	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f2	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f5	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f8	84 d2		 test	 dl, dl
  000fa	74 6c		 je	 SHORT $LN83@LoadString
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	74 5a		 je	 SHORT $LN82@LoadString
  00109	32 d1		 xor	 dl, cl
  0010b	80 78 0f 00	 cmp	 BYTE PTR [eax+15], 0
  0010f	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	0f 84 a0 00 00
	00		 je	 $LN111@LoadString
  00118	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0011b	84 d2		 test	 dl, dl
  0011d	74 3e		 je	 SHORT $LN80@LoadString
  0011f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00122	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00125	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00128	84 d2		 test	 dl, dl
  0012a	74 2b		 je	 SHORT $LN79@LoadString
  0012c	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0012f	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00132	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00135	84 d2		 test	 dl, dl
  00137	74 19		 je	 SHORT $LN78@LoadString
  00139	8a 40 13	 mov	 al, BYTE PTR [eax+19]
  0013c	32 d1		 xor	 dl, cl
  0013e	88 55 fa	 mov	 BYTE PTR __k$[ebp+18], dl
  00141	84 c0		 test	 al, al
  00143	74 07		 je	 SHORT $LN77@LoadString
  00145	34 ea		 xor	 al, -22			; ffffffeaH
  00147	88 45 fb	 mov	 BYTE PTR __k$[ebp+19], al
  0014a	eb 6c		 jmp	 SHORT $LN111@LoadString
$LN77@LoadString:
  0014c	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00150	eb 66		 jmp	 SHORT $LN111@LoadString
$LN78@LoadString:
  00152	88 4d fa	 mov	 BYTE PTR __k$[ebp+18], cl
  00155	eb 61		 jmp	 SHORT $LN111@LoadString
$LN79@LoadString:
  00157	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0015b	eb 5b		 jmp	 SHORT $LN111@LoadString
$LN80@LoadString:
  0015d	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00161	eb 55		 jmp	 SHORT $LN111@LoadString
$LN82@LoadString:
  00163	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  00166	eb 50		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  00168	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  0016c	eb 4a		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  0016e	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00172	eb 44		 jmp	 SHORT $LN111@LoadString
$LN85@LoadString:
  00174	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00178	eb 3e		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  0017a	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  0017d	eb 39		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  0017f	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00183	eb 33		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  00185	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00189	eb 2d		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  0018b	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0018f	eb 27		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  00191	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  00194	eb 22		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  00196	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0019a	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  0019c	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001a0	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  001a2	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001a6	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  001a8	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001ac	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  001ae	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001b2	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  001b4	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  001b8	6a 03		 push	 3
  001ba	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001bd	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+15], 0
  001c1	5a		 pop	 edx
$LL104@LoadString:
  001c2	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001c8	83 c0 04	 add	 eax, 4
  001cb	4a		 dec	 edx
  001cc	75 f4		 jne	 SHORT $LL104@LoadString
  001ce	6a 0c		 push	 12			; 0000000cH
  001d0	58		 pop	 eax
$LL101@LoadString:
  001d1	8b c8		 mov	 ecx, eax
  001d3	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001d9	79 05		 jns	 SHORT $LN112@LoadString
  001db	49		 dec	 ecx
  001dc	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001df	41		 inc	 ecx
$LN112@LoadString:
  001e0	b2 ed		 mov	 dl, -19			; ffffffedH
  001e2	2a d1		 sub	 dl, cl
  001e4	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001e8	40		 inc	 eax
  001e9	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001ec	7c e3		 jl	 SHORT $LL101@LoadString

; 163  : 		LoadString(_k, d, b, i);

  001ee	ff 75 14	 push	 DWORD PTR _i$[ebp]
  001f1	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001f4	57		 push	 edi
  001f5	56		 push	 esi
  001f6	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001f9	50		 push	 eax
  001fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00200	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00203	5f		 pop	 edi
  00204	33 cd		 xor	 ecx, ebp
  00206	5e		 pop	 esi
  00207	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020c	c9		 leave
  0020d	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<16>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$08@ioINILoader@@QAEXAAY08$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<9>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$08@ioINILoader@@QAEXAAY08$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 9
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$08@ioINILoader@@QAEXAAY08$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<9>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	84 d2		 test	 dl, dl
  0001f	0f 84 ee 00 00
	00		 je	 $LN96@LoadString@2
  00025	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00028	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  0002b	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002e	84 d2		 test	 dl, dl
  00030	0f 84 d7 00 00
	00		 je	 $LN95@LoadString@2
  00036	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00039	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  0003c	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003f	84 d2		 test	 dl, dl
  00041	0f 84 c0 00 00
	00		 je	 $LN94@LoadString@2
  00047	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004a	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  0004d	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00050	84 d2		 test	 dl, dl
  00052	0f 84 a9 00 00
	00		 je	 $LN93@LoadString@2
  00058	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005b	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  0005e	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00061	84 d2		 test	 dl, dl
  00063	0f 84 92 00 00
	00		 je	 $LN92@LoadString@2
  00069	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006c	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006f	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00072	84 d2		 test	 dl, dl
  00074	74 7f		 je	 SHORT $LN91@LoadString@2
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	74 6c		 je	 SHORT $LN90@LoadString@2
  00083	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00086	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00089	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008c	84 d2		 test	 dl, dl
  0008e	74 59		 je	 SHORT $LN89@LoadString@2
  00090	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00093	80 78 08 00	 cmp	 BYTE PTR [eax+8], 0
  00097	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009a	74 7b		 je	 SHORT $LN1@LoadString@2
  0009c	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  0009f	84 d2		 test	 dl, dl
  000a1	74 40		 je	 SHORT $LN87@LoadString@2
  000a3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000a6	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000a9	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ac	84 d2		 test	 dl, dl
  000ae	74 2d		 je	 SHORT $LN86@LoadString@2
  000b0	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000b3	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000b6	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000b9	84 d2		 test	 dl, dl
  000bb	74 1a		 je	 SHORT $LN85@LoadString@2
  000bd	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  000c0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000c3	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000c6	84 c0		 test	 al, al
  000c8	74 07		 je	 SHORT $LN84@LoadString@2
  000ca	34 ed		 xor	 al, -19			; ffffffedH
  000cc	88 45 f8	 mov	 BYTE PTR __k$[ebp+12], al
  000cf	eb 46		 jmp	 SHORT $LN1@LoadString@2
$LN84@LoadString@2:
  000d1	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  000d5	eb 40		 jmp	 SHORT $LN1@LoadString@2
$LN85@LoadString@2:
  000d7	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  000db	eb 3a		 jmp	 SHORT $LN1@LoadString@2
$LN86@LoadString@2:
  000dd	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  000e1	eb 34		 jmp	 SHORT $LN1@LoadString@2
$LN87@LoadString@2:
  000e3	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  000e7	eb 2e		 jmp	 SHORT $LN1@LoadString@2
$LN89@LoadString@2:
  000e9	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  000ed	eb 28		 jmp	 SHORT $LN1@LoadString@2
$LN90@LoadString@2:
  000ef	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  000f3	eb 22		 jmp	 SHORT $LN1@LoadString@2
$LN91@LoadString@2:
  000f5	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  000f9	eb 1c		 jmp	 SHORT $LN1@LoadString@2
$LN92@LoadString@2:
  000fb	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  000ff	eb 16		 jmp	 SHORT $LN1@LoadString@2
$LN93@LoadString@2:
  00101	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00105	eb 10		 jmp	 SHORT $LN1@LoadString@2
$LN94@LoadString@2:
  00107	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0010b	eb 0a		 jmp	 SHORT $LN1@LoadString@2
$LN95@LoadString@2:
  0010d	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00111	eb 04		 jmp	 SHORT $LN1@LoadString@2
$LN96@LoadString@2:
  00113	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadString@2:
  00117	6a 02		 push	 2
  00119	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0011c	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+8], 0
  00120	5a		 pop	 edx
$LL104@LoadString@2:
  00121	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00127	83 c0 04	 add	 eax, 4
  0012a	4a		 dec	 edx
  0012b	75 f4		 jne	 SHORT $LL104@LoadString@2

; 163  : 		LoadString(_k, d, b, i);

  0012d	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00130	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00133	57		 push	 edi
  00134	56		 push	 esi
  00135	50		 push	 eax
  00136	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  0013c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013f	5f		 pop	 edi
  00140	33 cd		 xor	 ecx, ebp
  00142	5e		 pop	 esi
  00143	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00148	c9		 leave
  00149	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$08@ioINILoader@@QAEXAAY08$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<9>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0O@@ioINILoader@@QAEMAAY0O@$$CBDM@Z ; ioINILoader::LoadFloat_e<14>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0O@@ioINILoader@@QAEMAAY0O@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -24						; size = 14
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0O@@ioINILoader@@QAEMAAY0O@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<14>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 64 01 00
	00		 je	 $LN96@LoadFloat_
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 4d 01 00
	00		 je	 $LN95@LoadFloat_
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 36 01 00
	00		 je	 $LN94@LoadFloat_
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 1e 01 00
	00		 je	 $LN93@LoadFloat_
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 07 01 00
	00		 je	 $LN92@LoadFloat_
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 f0 00 00
	00		 je	 $LN91@LoadFloat_
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 da 00 00
	00		 je	 $LN90@LoadFloat_
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 c4 00 00
	00		 je	 $LN89@LoadFloat_
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 ad 00 00
	00		 je	 $LN88@LoadFloat_
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 96 00 00
	00		 je	 $LN87@LoadFloat_
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 80 00 00
	00		 je	 $LN86@LoadFloat_
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 6e		 je	 SHORT $LN85@LoadFloat_
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 5b		 je	 SHORT $LN84@LoadFloat_
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	0f 84 95 00 00
	00		 je	 $LN1@LoadFloat_
  000f3	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f6	84 d2		 test	 dl, dl
  000f8	74 3f		 je	 SHORT $LN82@LoadFloat_
  000fa	32 d1		 xor	 dl, cl
  000fc	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 2d		 je	 SHORT $LN81@LoadFloat_
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 1a		 je	 SHORT $LN80@LoadFloat_
  00113	8a 40 11	 mov	 al, BYTE PTR [eax+17]
  00116	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00119	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011c	84 c0		 test	 al, al
  0011e	74 07		 je	 SHORT $LN79@LoadFloat_
  00120	34 ec		 xor	 al, -20			; ffffffecH
  00122	88 45 f9	 mov	 BYTE PTR __k$[ebp+17], al
  00125	eb 61		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  00127	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0012b	eb 5b		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  0012d	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00131	eb 55		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  00133	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00137	eb 4f		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  00139	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0013c	eb 4a		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  0013e	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00142	eb 44		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  00144	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00148	eb 3e		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  0014a	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  0014d	eb 39		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  0014f	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00153	eb 33		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  00155	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00159	eb 2d		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  0015b	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0015f	eb 27		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  00161	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  00164	eb 22		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  00166	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0016a	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  0016c	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00170	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  00172	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00176	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  00178	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0017c	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  0017e	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00182	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  00184	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  00188	6a 03		 push	 3
  0018a	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0018d	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+13], 0
  00191	5a		 pop	 edx
$LL104@LoadFloat_:
  00192	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00198	83 c0 04	 add	 eax, 4
  0019b	4a		 dec	 edx
  0019c	75 f4		 jne	 SHORT $LL104@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  0019e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001a3	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001a7	51		 push	 ecx
  001a8	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b0	50		 push	 eax
  001b1	8b ce		 mov	 ecx, esi
  001b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001b9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bc	33 cd		 xor	 ecx, ebp
  001be	5e		 pop	 esi
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	c9		 leave
  001c5	c2 08 00	 ret	 8
??$LoadFloat_e@$0O@@ioINILoader@@QAEMAAY0O@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<14>
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	_rkLoader$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
EXTRN	_memset:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iowarpfinddummybuff.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioWarpFindDummyBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -292					; size = 4
_rkLoader$GSCopy$ = -288				; size = 4
_szBuf$ = -284						; size = 260
__k$543624 = -24					; size = 14
__k$543374 = -24					; size = 16
__k$543499 = -20					; size = 9
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioWarpFindDummyBuff@@UAEXAAVioINILoader@@@Z PROC ; ioWarpFindDummyBuff::LoadProperty, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _rkLoader$[ebp]
  00017	57		 push	 edi
  00018	8b f9		 mov	 edi, ecx

; 29   : 	ioBuff::LoadProperty( rkLoader );

  0001a	56		 push	 esi

; 34   : 
; 35   : 	rkLoader.LoadString_e( "warp_ani", "", szBuf, MAX_PATH );

  0001b	89 bd dc fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00021	89 b5 e0 fe ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], esi
  00027	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty
  0002c	68 03 01 00 00	 push	 259			; 00000103H
  00031	8d 85 e5 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp+1]
  00037	6a 00		 push	 0
  00039	50		 push	 eax
  0003a	c6 85 e4 fe ff
	ff 00		 mov	 BYTE PTR _szBuf$[ebp], 0
  00041	e8 00 00 00 00	 call	 _memset
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH
  00049	6a 03		 push	 3
  0004b	c7 45 e8 8b 85
	85 8e		 mov	 DWORD PTR __k$543374[ebp], -1903852149 ; 8e85858bH
  00052	c7 45 ec b2 88
	9e 87		 mov	 DWORD PTR __k$543374[ebp+4], -2019653454 ; 879e88b2H
  00059	c7 45 f0 80 95
	b4 84		 mov	 DWORD PTR __k$543374[ebp+8], -2068540032 ; 84b49580H
  00060	8d 45 e8	 lea	 eax, DWORD PTR __k$543374[ebp]
  00063	c7 45 f4 8c 81
	8e 00		 mov	 DWORD PTR __k$543374[ebp+12], 9339276 ; 008e818cH
  0006a	59		 pop	 ecx
$LL106@LoadProper:

; 30   : 
; 31   : 	char szBuf[MAX_PATH] = "";
; 32   : 	rkLoader.LoadString_e( "find_dummy_name", "", szBuf, MAX_PATH );

  0006b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00071	83 c0 04	 add	 eax, 4
  00074	49		 dec	 ecx
  00075	75 f4		 jne	 SHORT $LL106@LoadProper
  00077	6a 0c		 push	 12			; 0000000cH
  00079	58		 pop	 eax
$LL103@LoadProper:
  0007a	8b c8		 mov	 ecx, eax
  0007c	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00082	79 05		 jns	 SHORT $LN333@LoadProper
  00084	49		 dec	 ecx
  00085	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00088	41		 inc	 ecx
$LN333@LoadProper:
  00089	b2 ed		 mov	 dl, -19			; ffffffedH
  0008b	2a d1		 sub	 dl, cl
  0008d	30 54 05 e8	 xor	 BYTE PTR __k$543374[ebp+eax], dl
  00091	40		 inc	 eax
  00092	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00095	7c e3		 jl	 SHORT $LL103@LoadProper
  00097	53		 push	 ebx
  00098	68 04 01 00 00	 push	 260			; 00000104H
  0009d	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000a3	50		 push	 eax
  000a4	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  000a9	53		 push	 ebx
  000aa	8d 45 e8	 lea	 eax, DWORD PTR __k$543374[ebp]
  000ad	8b ce		 mov	 ecx, esi
  000af	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z
  000b5	50		 push	 eax
  000b6	ff d6		 call	 esi

; 33   : 	m_szFindDummyName = szBuf;

  000b8	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000be	8d 8f 6c 09 00
	00		 lea	 ecx, DWORD PTR [edi+2412]
  000c4	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  000ca	50		 push	 eax
  000cb	ff d7		 call	 edi
  000cd	6a 02		 push	 2

; 34   : 
; 35   : 	rkLoader.LoadString_e( "warp_ani", "", szBuf, MAX_PATH );

  000cf	c7 45 ec 9a 8d
	99 9a		 mov	 DWORD PTR __k$543499[ebp], -1701212774 ; 9a998d9aH
  000d6	c7 45 f0 b2 8d
	85 83		 mov	 DWORD PTR __k$543499[ebp+4], -2088399438 ; 83858db2H
  000dd	8d 45 ec	 lea	 eax, DWORD PTR __k$543499[ebp]
  000e0	c6 45 f4 00	 mov	 BYTE PTR __k$543499[ebp+8], 0
  000e4	59		 pop	 ecx
$LL212@LoadProper:
  000e5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000eb	83 c0 04	 add	 eax, 4
  000ee	49		 dec	 ecx
  000ef	75 f4		 jne	 SHORT $LL212@LoadProper
  000f1	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  000f7	68 04 01 00 00	 push	 260			; 00000104H
  000fc	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00102	50		 push	 eax
  00103	53		 push	 ebx
  00104	8d 45 ec	 lea	 eax, DWORD PTR __k$543499[ebp]
  00107	50		 push	 eax
  00108	ff d6		 call	 esi

; 36   : 	m_szWarpAni = szBuf;

  0010a	8b b5 dc fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00110	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00116	50		 push	 eax
  00117	8d 8e 7c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2428]
  0011d	ff d7		 call	 edi
  0011f	6a 03		 push	 3
  00121	59		 pop	 ecx

; 37   : 
; 38   : 	m_fWarpAniRate = rkLoader.LoadFloat_e( "warp_ani_rate", 1.0f );

  00122	c7 45 e8 9a 8d
	99 9a		 mov	 DWORD PTR __k$543624[ebp], -1701212774 ; 9a998d9aH
  00129	c7 45 ec b2 8d
	85 83		 mov	 DWORD PTR __k$543624[ebp+4], -2088399438 ; 83858db2H
  00130	c7 45 f0 b2 9e
	8a 9e		 mov	 DWORD PTR __k$543624[ebp+8], -1635082574 ; 9e8a9eb2H
  00137	8d 45 e8	 lea	 eax, DWORD PTR __k$543624[ebp]
  0013a	66 c7 45 f4 88
	00		 mov	 WORD PTR __k$543624[ebp+12], 136 ; 00000088H
  00140	5b		 pop	 ebx
$LL318@LoadProper:
  00141	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00147	83 c0 04	 add	 eax, 4
  0014a	49		 dec	 ecx
  0014b	75 f4		 jne	 SHORT $LL318@LoadProper
  0014d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00155	80 75 f4 ed	 xor	 BYTE PTR __k$543624[ebp+12], -19 ; ffffffedH
  00159	51		 push	 ecx
  0015a	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00160	8d 45 e8	 lea	 eax, DWORD PTR __k$543624[ebp]
  00163	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00168	50		 push	 eax
  00169	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0016f	d9 9e 8c 09 00
	00		 fstp	 DWORD PTR [esi+2444]

; 39   : }

  00175	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00178	5f		 pop	 edi
  00179	33 cd		 xor	 ecx, ebp
  0017b	5e		 pop	 esi
  0017c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00181	c9		 leave
  00182	c2 04 00	 ret	 4
?LoadProperty@ioWarpFindDummyBuff@@UAEXAAVioINILoader@@@Z ENDP ; ioWarpFindDummyBuff::LoadProperty
_TEXT	ENDS
EXTRN	?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z:PROC	; ioBuff::StartBuff
; Function compile flags: /Ogsp
;	COMDAT ?StartBuff@ioWarpFindDummyBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?StartBuff@ioWarpFindDummyBuff@@UAEXPAVioBaseChar@@@Z PROC ; ioWarpFindDummyBuff::StartBuff, COMDAT
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 48   : 	ioBuff::StartBuff( pOwner );

  00004	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z ; ioBuff::StartBuff

; 49   : 
; 50   : 	SetWarpState( pOwner );

  0000e	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	e8 00 00 00 00	 call	 ?SetWarpState@ioWarpFindDummyBuff@@IAEXPAVioBaseChar@@@Z ; ioWarpFindDummyBuff::SetWarpState
  00018	5e		 pop	 esi

; 51   : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?StartBuff@ioWarpFindDummyBuff@@UAEXPAVioBaseChar@@@Z ENDP ; ioWarpFindDummyBuff::StartBuff
_TEXT	ENDS
EXTRN	?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z:PROC ; ioBuff::ApplyStartBuff
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioWarpFindDummyBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioWarpFindDummyBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioWarpFindDummyBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 55   : 	if( !ioBuff::ApplyStartBuff( pOwner, dwGlobalTime, dwGapTime ) )

  00004	ff 75 10	 push	 DWORD PTR _dwGapTime$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0000f	e8 00 00 00 00	 call	 ?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBuff::ApplyStartBuff
  00014	84 c0		 test	 al, al
  00016	74 0c		 je	 SHORT $LN2@ApplyStart
$LN1@ApplyStart:

; 56   : 		return false;
; 57   : 
; 58   : 	SetWarpState( pOwner );

  00018	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0001b	8b ce		 mov	 ecx, esi
  0001d	e8 00 00 00 00	 call	 ?SetWarpState@ioWarpFindDummyBuff@@IAEXPAVioBaseChar@@@Z ; ioWarpFindDummyBuff::SetWarpState

; 59   : 
; 60   : 	return true;

  00022	b0 01		 mov	 al, 1
$LN2@ApplyStart:
  00024	5e		 pop	 esi

; 61   : }

  00025	5d		 pop	 ebp
  00026	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioWarpFindDummyBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioWarpFindDummyBuff::ApplyStartBuff
_TEXT	ENDS
EXTRN	?CheckCallingAreaWeapon@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingAreaWeapon
EXTRN	?CheckCallingProcess@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingProcess
EXTRN	?CheckSwitchType@ioBuff@@IAE_NM@Z:PROC		; ioBuff::CheckSwitchType
EXTRN	?ProcessBuff@ioBuff@@UAEXM@Z:PROC		; ioBuff::ProcessBuff
; Function compile flags: /Ogsp
;	COMDAT ?ProcessBuff@ioWarpFindDummyBuff@@UAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioWarpFindDummyBuff@@UAEXM@Z PROC		; ioWarpFindDummyBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 64   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 65   : 	if ( m_dwMotionEndTime > 0 && m_dwMotionEndTime < FRAMEGETTIME() && 
; 66   : 		 WarpChar( m_pOwner ) )

  00006	83 be 90 09 00
	00 00		 cmp	 DWORD PTR [esi+2448], 0
  0000d	57		 push	 edi
  0000e	76 30		 jbe	 SHORT $LN7@ProcessBuf
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00016	8b c8		 mov	 ecx, eax
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0001e	39 86 90 09 00
	00		 cmp	 DWORD PTR [esi+2448], eax
  00024	73 1a		 jae	 SHORT $LN7@ProcessBuf
  00026	ff b6 74 02 00
	00		 push	 DWORD PTR [esi+628]
  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ?WarpChar@ioWarpFindDummyBuff@@IAE_NPAVioBaseChar@@@Z ; ioWarpFindDummyBuff::WarpChar
  00033	84 c0		 test	 al, al
  00035	74 09		 je	 SHORT $LN7@ProcessBuf

; 67   : 	{
; 68   : 		SetReserveEndBuff();

  00037	8b ce		 mov	 ecx, esi
$LN10@ProcessBuf:
  00039	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 69   : 		return;

  0003e	eb 4e		 jmp	 SHORT $LN5@ProcessBuf
$LN7@ProcessBuf:

; 70   : 	}
; 71   : 
; 72   : 	switch( m_iOperationType )

  00040	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  00046	83 e8 00	 sub	 eax, 0
  00049	74 3c		 je	 SHORT $LN1@ProcessBuf
  0004b	48		 dec	 eax
  0004c	74 06		 je	 SHORT $LN2@ProcessBuf
  0004e	48		 dec	 eax
  0004f	74 17		 je	 SHORT $LN4@ProcessBuf
  00051	48		 dec	 eax
  00052	75 3a		 jne	 SHORT $LN5@ProcessBuf
$LN2@ProcessBuf:

; 83   : 	case OT_DELAY:
; 84   : 	case OT_ACTIVE:
; 85   : 		ioBuff::ProcessBuff( fTimePerSec );

  00054	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00059	51		 push	 ecx
  0005a	8b ce		 mov	 ecx, esi
  0005c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00061	e8 00 00 00 00	 call	 ?ProcessBuff@ioBuff@@UAEXM@Z ; ioBuff::ProcessBuff

; 86   : 		break;

  00066	eb 26		 jmp	 SHORT $LN5@ProcessBuf
$LN4@ProcessBuf:

; 73   : 	{
; 74   : 	case OT_SWITCH:
; 75   : 		if( !CheckSwitchType( fTimePerSec ) )

  00068	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  0006d	51		 push	 ecx
  0006e	8b ce		 mov	 ecx, esi
  00070	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00075	e8 00 00 00 00	 call	 ?CheckSwitchType@ioBuff@@IAE_NM@Z ; ioBuff::CheckSwitchType

; 76   : 		{
; 77   : 			SetReserveEndBuff();

  0007a	8b ce		 mov	 ecx, esi
  0007c	84 c0		 test	 al, al

; 78   : 			return;

  0007e	74 b9		 je	 SHORT $LN10@ProcessBuf

; 79   : 		}
; 80   : 
; 81   : 		CheckCallingProcess();

  00080	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 82   : 		break;

  00085	eb 07		 jmp	 SHORT $LN5@ProcessBuf
$LN1@ProcessBuf:

; 87   : 	case OT_PASSIVE:
; 88   : 		CheckCallingAreaWeapon();

  00087	8b ce		 mov	 ecx, esi
  00089	e8 00 00 00 00	 call	 ?CheckCallingAreaWeapon@ioBuff@@IAEXXZ ; ioBuff::CheckCallingAreaWeapon
$LN5@ProcessBuf:
  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi

; 89   : 		break;
; 90   : 	}
; 91   : }

  00090	5d		 pop	 ebp
  00091	c2 04 00	 ret	 4
?ProcessBuff@ioWarpFindDummyBuff@@UAEXM@Z ENDP		; ioWarpFindDummyBuff::ProcessBuff
_TEXT	ENDS
END
