; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioDurationScaleBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	??_7ioDurationScaleBuff@@6B@			; ioDurationScaleBuff::`vftable'
PUBLIC	??0ioDurationScaleBuff@@QAE@XZ			; ioDurationScaleBuff::ioDurationScaleBuff
PUBLIC	??_R4ioDurationScaleBuff@@6B@			; ioDurationScaleBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioDurationScaleBuff@@@8			; ioDurationScaleBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioDurationScaleBuff@@8			; ioDurationScaleBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioDurationScaleBuff@@8			; ioDurationScaleBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioDurationScaleBuff@@8		; ioDurationScaleBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioDurationScaleBuff@@UAEXAAVioINILoader@@@Z ; ioDurationScaleBuff::LoadProperty
PUBLIC	?Clone@ioDurationScaleBuff@@UAEPAVioBuff@@XZ	; ioDurationScaleBuff::Clone
PUBLIC	?StartBuff@ioDurationScaleBuff@@UAEXPAVioBaseChar@@@Z ; ioDurationScaleBuff::StartBuff
PUBLIC	?ApplyStartBuff@ioDurationScaleBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioDurationScaleBuff::ApplyStartBuff
PUBLIC	?ProcessBuff@ioDurationScaleBuff@@UAEXM@Z	; ioDurationScaleBuff::ProcessBuff
PUBLIC	?EndBuff@ioDurationScaleBuff@@UAEXXZ		; ioDurationScaleBuff::EndBuff
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
EXTRN	__fltused:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyExtraBuffInfo
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioDurationScaleBuff@@UAEPAXI@Z:PROC		; ioDurationScaleBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodurationscalebuff.cpp
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioDurationScaleBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioDurationScaleBuff@@8 DD FLAT:??_R0?AVioDurationScaleBuff@@@8 ; ioDurationScaleBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioDurationScaleBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioDurationScaleBuff@@8
rdata$r	SEGMENT
??_R2ioDurationScaleBuff@@8 DD FLAT:??_R1A@?0A@EA@ioDurationScaleBuff@@8 ; ioDurationScaleBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioDurationScaleBuff@@8
rdata$r	SEGMENT
??_R3ioDurationScaleBuff@@8 DD 00H			; ioDurationScaleBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioDurationScaleBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioDurationScaleBuff@@@8
_DATA	SEGMENT
??_R0?AVioDurationScaleBuff@@@8 DD FLAT:??_7type_info@@6B@ ; ioDurationScaleBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioDurationScaleBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioDurationScaleBuff@@6B@
rdata$r	SEGMENT
??_R4ioDurationScaleBuff@@6B@ DD 00H			; ioDurationScaleBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioDurationScaleBuff@@@8
	DD	FLAT:??_R3ioDurationScaleBuff@@8
rdata$r	ENDS
;	COMDAT ??_7ioDurationScaleBuff@@6B@
CONST	SEGMENT
??_7ioDurationScaleBuff@@6B@ DD FLAT:??_R4ioDurationScaleBuff@@6B@ ; ioDurationScaleBuff::`vftable'
	DD	FLAT:?LoadProperty@ioDurationScaleBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioDurationScaleBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioDurationScaleBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioDurationScaleBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioDurationScaleBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioDurationScaleBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioDurationScaleBuff@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0ioDurationScaleBuff@@QAE@XZ
_TEXT	SEGMENT
??0ioDurationScaleBuff@@QAE@XZ PROC			; ioDurationScaleBuff::ioDurationScaleBuff, COMDAT
; _this$ = ecx

; 10   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff

; 11   : 	m_iGrade = 0;
; 12   : 	m_fScaleValue = 0.0f;

  00008	0f 57 c0	 xorps	 xmm0, xmm0
  0000b	83 a6 6c 09 00
	00 00		 and	 DWORD PTR [esi+2412], 0
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioDurationScaleBuff@@6B@
  00018	f3 0f 11 86 70
	09 00 00	 movss	 DWORD PTR [esi+2416], xmm0

; 13   : 	m_fScaleBalance = 0.0f;

  00020	f3 0f 11 86 74
	09 00 00	 movss	 DWORD PTR [esi+2420], xmm0

; 14   : }

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	c3		 ret	 0
??0ioDurationScaleBuff@@QAE@XZ ENDP			; ioDurationScaleBuff::ioDurationScaleBuff
_TEXT	ENDS
PUBLIC	??0ioDurationScaleBuff@@QAE@ABV0@@Z		; ioDurationScaleBuff::ioDurationScaleBuff
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
; Function compile flags: /Ogsp
;	COMDAT ??0ioDurationScaleBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??0ioDurationScaleBuff@@QAE@ABV0@@Z PROC		; ioDurationScaleBuff::ioDurationScaleBuff, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioDurationScaleBuff@@6B@

; 19   : 	m_iGrade = rhs.m_iGrade;

  00016	8b 87 6c 09 00
	00		 mov	 eax, DWORD PTR [edi+2412]
  0001c	89 86 6c 09 00
	00		 mov	 DWORD PTR [esi+2412], eax

; 20   : 	m_fScaleValue = rhs.m_fScaleValue;

  00022	d9 87 70 09 00
	00		 fld	 DWORD PTR [edi+2416]
  00028	d9 9e 70 09 00
	00		 fstp	 DWORD PTR [esi+2416]

; 21   : 	m_fScaleBalance = rhs.m_fScaleBalance;
; 22   : }

  0002e	8b c6		 mov	 eax, esi
  00030	d9 87 74 09 00
	00		 fld	 DWORD PTR [edi+2420]
  00036	5f		 pop	 edi
  00037	d9 9e 74 09 00
	00		 fstp	 DWORD PTR [esi+2420]
  0003d	5e		 pop	 esi
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
??0ioDurationScaleBuff@@QAE@ABV0@@Z ENDP		; ioDurationScaleBuff::ioDurationScaleBuff
_TEXT	ENDS
PUBLIC	??1ioDurationScaleBuff@@UAE@XZ			; ioDurationScaleBuff::~ioDurationScaleBuff
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
; Function compile flags: /Ogsp
;	COMDAT ??1ioDurationScaleBuff@@UAE@XZ
_TEXT	SEGMENT
??1ioDurationScaleBuff@@UAE@XZ PROC			; ioDurationScaleBuff::~ioDurationScaleBuff, COMDAT
; _this$ = ecx

; 25   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioDurationScaleBuff@@6B@

; 26   : }

  00006	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
??1ioDurationScaleBuff@@UAE@XZ ENDP			; ioDurationScaleBuff::~ioDurationScaleBuff
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioDurationScaleBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioDurationScaleBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioDurationScaleBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioDurationScaleBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioDurationScaleBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T524593 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioDurationScaleBuff@@UAEPAVioBuff@@XZ PROC	; ioDurationScaleBuff::Clone, COMDAT
; _this$ = ecx

; 38   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioDurationScaleBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 39   : 	return new ioDurationScaleBuff( *this );

  0000e	68 78 09 00 00	 push	 2424			; 00000978H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T524593[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioDurationScaleBuff@@QAE@ABV0@@Z ; ioDurationScaleBuff::ioDurationScaleBuff
$LN3@Clone:

; 40   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioDurationScaleBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T524593[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioDurationScaleBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioDurationScaleBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioDurationScaleBuff@@UAEPAVioBuff@@XZ ENDP	; ioDurationScaleBuff::Clone
EXTRN	?CheckCallingAreaWeapon@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingAreaWeapon
EXTRN	?CheckCallingProcess@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingProcess
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
EXTRN	?CheckSwitchType@ioBuff@@IAE_NM@Z:PROC		; ioBuff::CheckSwitchType
EXTRN	?ProcessBuff@ioBuff@@UAEXM@Z:PROC		; ioBuff::ProcessBuff
; Function compile flags: /Ogsp
;	COMDAT ?ProcessBuff@ioDurationScaleBuff@@UAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioDurationScaleBuff@@UAEXM@Z PROC		; ioDurationScaleBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 44   : 	switch( m_iOperationType )

  00006	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  0000c	83 e8 00	 sub	 eax, 0
  0000f	74 3f		 je	 SHORT $LN1@ProcessBuf
  00011	48		 dec	 eax
  00012	74 06		 je	 SHORT $LN2@ProcessBuf
  00014	48		 dec	 eax
  00015	74 15		 je	 SHORT $LN4@ProcessBuf
  00017	48		 dec	 eax
  00018	75 3b		 jne	 SHORT $LN5@ProcessBuf
$LN2@ProcessBuf:

; 55   : 	case OT_DELAY:
; 56   : 	case OT_ACTIVE:
; 57   : 		ioBuff::ProcessBuff( fTimePerSec );

  0001a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  0001f	51		 push	 ecx
  00020	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00025	e8 00 00 00 00	 call	 ?ProcessBuff@ioBuff@@UAEXM@Z ; ioBuff::ProcessBuff

; 58   : 		break;

  0002a	eb 29		 jmp	 SHORT $LN5@ProcessBuf
$LN4@ProcessBuf:

; 45   : 	{
; 46   : 	case OT_SWITCH:
; 47   : 		if( !CheckSwitchType( fTimePerSec ) )

  0002c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00031	51		 push	 ecx
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	e8 00 00 00 00	 call	 ?CheckSwitchType@ioBuff@@IAE_NM@Z ; ioBuff::CheckSwitchType

; 48   : 		{
; 49   : 			SetReserveEndBuff();

  0003c	8b ce		 mov	 ecx, esi
  0003e	84 c0		 test	 al, al
  00040	75 07		 jne	 SHORT $LN3@ProcessBuf
  00042	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 50   : 			return;

  00047	eb 0c		 jmp	 SHORT $LN5@ProcessBuf
$LN3@ProcessBuf:

; 51   : 		}
; 52   : 
; 53   : 		CheckCallingProcess();

  00049	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 54   : 		break;

  0004e	eb 05		 jmp	 SHORT $LN5@ProcessBuf
$LN1@ProcessBuf:

; 59   : 	case OT_PASSIVE:
; 60   : 		CheckCallingAreaWeapon();

  00050	e8 00 00 00 00	 call	 ?CheckCallingAreaWeapon@ioBuff@@IAEXXZ ; ioBuff::CheckCallingAreaWeapon
$LN5@ProcessBuf:
  00055	5e		 pop	 esi

; 61   : 		break;
; 62   : 	}
; 63   : }

  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
?ProcessBuff@ioDurationScaleBuff@@UAEXM@Z ENDP		; ioDurationScaleBuff::ProcessBuff
_TEXT	ENDS
PUBLIC	?GetScaleByPlayLevel@ioDurationScaleBuff@@IAEMH@Z ; ioDurationScaleBuff::GetScaleByPlayLevel
; Function compile flags: /Ogsp
;	COMDAT ?GetScaleByPlayLevel@ioDurationScaleBuff@@IAEMH@Z
_TEXT	SEGMENT
tv162 = -4						; size = 4
tv179 = 8						; size = 4
tv167 = 8						; size = 4
tv165 = 8						; size = 4
tv163 = 8						; size = 4
_iPlayLevel$ = 8					; size = 4
?GetScaleByPlayLevel@ioDurationScaleBuff@@IAEMH@Z PROC	; ioDurationScaleBuff::GetScaleByPlayLevel, COMDAT
; _this$ = ecx

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 67   : 	float fScale = ( ( iPlayLevel - 1 ) * m_fScaleValue ) / 
; 68   : 		( ( iPlayLevel - 1 ) + m_fScaleValue );

  00004	8b 45 08	 mov	 eax, DWORD PTR _iPlayLevel$[ebp]
  00007	d9 81 70 09 00
	00		 fld	 DWORD PTR [ecx+2416]
  0000d	d9 5d fc	 fstp	 DWORD PTR tv162[ebp]
  00010	48		 dec	 eax
  00011	89 45 08	 mov	 DWORD PTR tv179[ebp], eax
  00014	db 45 08	 fild	 DWORD PTR tv179[ebp]
  00017	d9 5d 08	 fstp	 DWORD PTR tv165[ebp]

; 69   : 	fScale /= m_fScaleBalance;
; 70   : 	
; 71   : 	return fScale;

  0001a	d9 45 08	 fld	 DWORD PTR tv165[ebp]
  0001d	d8 4d fc	 fmul	 DWORD PTR tv162[ebp]
  00020	d9 45 08	 fld	 DWORD PTR tv165[ebp]
  00023	d8 45 fc	 fadd	 DWORD PTR tv162[ebp]
  00026	de f9		 fdivp	 ST(1), ST(0)
  00028	d9 5d 08	 fstp	 DWORD PTR tv167[ebp]
  0002b	d9 45 08	 fld	 DWORD PTR tv167[ebp]
  0002e	d8 b1 74 09 00
	00		 fdiv	 DWORD PTR [ecx+2420]
  00034	d9 5d 08	 fstp	 DWORD PTR tv163[ebp]
  00037	d9 45 08	 fld	 DWORD PTR tv163[ebp]

; 72   : }

  0003a	c9		 leave
  0003b	c2 04 00	 ret	 4
?GetScaleByPlayLevel@ioDurationScaleBuff@@IAEMH@Z ENDP	; ioDurationScaleBuff::GetScaleByPlayLevel
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
_TEXT	ENDS
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioDurationScaleBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioDurationScaleBuff@@UAEPAXI@Z PROC			; ioDurationScaleBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioDurationScaleBuff@@6B@
  0000c	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 07		 je	 SHORT $LN1@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	59		 pop	 ecx
$LN1@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??_GioDurationScaleBuff@@UAEPAXI@Z ENDP			; ioDurationScaleBuff::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	__$ArrayPad$
EXTRN	?IsHasCrown@ioBaseChar@@QBE_NXZ:PROC		; ioBaseChar::IsHasCrown
EXTRN	?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z:PROC	; ioBuff::StartBuff
EXTRN	___security_cookie:DWORD
;	COMDAT __real@4f800000
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodurationscalebuff.cpp
CONST	ENDS
;	COMDAT ?StartBuff@ioDurationScaleBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
tv207 = -24						; size = 4
tv198 = -24						; size = 4
tv213 = -20						; size = 4
_fScale$ = -20						; size = 4
$T523799 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pOwner$ = 8						; size = 4
?StartBuff@ioDurationScaleBuff@@UAEXPAVioBaseChar@@@Z PROC ; ioDurationScaleBuff::StartBuff, COMDAT
; _this$ = ecx

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _pOwner$[ebp]
  00013	56		 push	 esi

; 76   : 	ioBuff::StartBuff( pOwner );

  00014	50		 push	 eax
  00015	8b f1		 mov	 esi, ecx
  00017	e8 00 00 00 00	 call	 ?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z ; ioBuff::StartBuff

; 77   : 	if(m_pOwner->IsHasCrown()) return;

  0001c	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00022	e8 00 00 00 00	 call	 ?IsHasCrown@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsHasCrown
  00027	84 c0		 test	 al, al
  00029	0f 85 84 00 00
	00		 jne	 $LN2@StartBuff

; 78   : 
; 79   : 	float fScale = FLOAT1 + GetScaleByPlayLevel( m_iGrade );

  0002f	b8 01 00 00 00	 mov	 eax, 1
  00034	ff b6 6c 09 00
	00		 push	 DWORD PTR [esi+2412]
  0003a	8b ce		 mov	 ecx, esi
  0003c	8b d0		 mov	 edx, eax
  0003e	e8 00 00 00 00	 call	 ?GetScaleByPlayLevel@ioDurationScaleBuff@@IAEMH@Z ; ioDurationScaleBuff::GetScaleByPlayLevel
  00043	89 55 ec	 mov	 DWORD PTR tv213[ebp], edx
  00046	db 45 ec	 fild	 DWORD PTR tv213[ebp]
  00049	85 d2		 test	 edx, edx
  0004b	79 06		 jns	 SHORT $LN14@StartBuff
  0004d	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN14@StartBuff:
  00053	de c1		 faddp	 ST(1), ST(0)
  00055	d9 5d ec	 fstp	 DWORD PTR _fScale$[ebp]

; 80   : 	fScale = max( fScale, FLOAT1 );

  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	d9 45 ec	 fld	 DWORD PTR _fScale$[ebp]
  00060	89 45 e8	 mov	 DWORD PTR tv207[ebp], eax
  00063	db 45 e8	 fild	 DWORD PTR tv207[ebp]
  00066	85 c0		 test	 eax, eax
  00068	79 06		 jns	 SHORT $LN15@StartBuff
  0006a	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN15@StartBuff:
  00070	d9 c9		 fxch	 ST(1)
  00072	df f1		 fcomip	 ST(1)
  00074	dd d8		 fstp	 ST(0)
  00076	77 18		 ja	 SHORT $LN5@StartBuff
  00078	b8 01 00 00 00	 mov	 eax, 1
  0007d	89 45 e8	 mov	 DWORD PTR tv198[ebp], eax
  00080	db 45 e8	 fild	 DWORD PTR tv198[ebp]
  00083	85 c0		 test	 eax, eax
  00085	79 06		 jns	 SHORT $LN16@StartBuff
  00087	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN16@StartBuff:
  0008d	d9 5d ec	 fstp	 DWORD PTR _fScale$[ebp]
$LN5@StartBuff:

; 81   : 	m_pOwner->SetWorldScale( D3DXVECTOR3(fScale, fScale, fScale) );

  00090	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _fScale$[ebp]
  00095	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0009b	8d 55 f0	 lea	 edx, DWORD PTR $T523799[ebp]
  0009e	f3 0f 11 45 f0	 movss	 DWORD PTR $T523799[ebp], xmm0
  000a3	f3 0f 11 45 f4	 movss	 DWORD PTR $T523799[ebp+4], xmm0
  000a8	f3 0f 11 45 f8	 movss	 DWORD PTR $T523799[ebp+8], xmm0
  000ad	8b 01		 mov	 eax, DWORD PTR [ecx]
  000af	52		 push	 edx
  000b0	ff 50 4c	 call	 DWORD PTR [eax+76]
$LN2@StartBuff:

; 82   : }

  000b3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b6	33 cd		 xor	 ecx, ebp
  000b8	5e		 pop	 esi
  000b9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000be	c9		 leave
  000bf	c2 04 00	 ret	 4
?StartBuff@ioDurationScaleBuff@@UAEXPAVioBaseChar@@@Z ENDP ; ioDurationScaleBuff::StartBuff
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z:PROC ; ioBuff::ApplyStartBuff
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioDurationScaleBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
tv205 = -24						; size = 4
tv196 = -24						; size = 4
tv211 = -20						; size = 4
_fScale$ = -20						; size = 4
$T523812 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pOwner$ = 8						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioDurationScaleBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioDurationScaleBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _pOwner$[ebp]
  00013	56		 push	 esi

; 86   : 	if( !ioBuff::ApplyStartBuff( pOwner, dwGlobalTime, dwGapTime) )

  00014	ff 75 10	 push	 DWORD PTR _dwGapTime$[ebp]
  00017	8b f1		 mov	 esi, ecx
  00019	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBuff::ApplyStartBuff
  00022	84 c0		 test	 al, al
  00024	75 07		 jne	 SHORT $LN2@ApplyStart
$LN18@ApplyStart:

; 87   : 		return false;

  00026	32 c0		 xor	 al, al
  00028	e9 95 00 00 00	 jmp	 $LN3@ApplyStart
$LN2@ApplyStart:

; 88   : 
; 89   : 	if( m_pOwner->IsHasCrown() )

  0002d	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00033	e8 00 00 00 00	 call	 ?IsHasCrown@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsHasCrown
  00038	84 c0		 test	 al, al

; 90   : 		return false;

  0003a	75 ea		 jne	 SHORT $LN18@ApplyStart

; 91   : 
; 92   : 	float fScale = FLOAT1 + GetScaleByPlayLevel( m_iGrade );

  0003c	b8 01 00 00 00	 mov	 eax, 1
  00041	ff b6 6c 09 00
	00		 push	 DWORD PTR [esi+2412]
  00047	8b ce		 mov	 ecx, esi
  00049	8b d0		 mov	 edx, eax
  0004b	e8 00 00 00 00	 call	 ?GetScaleByPlayLevel@ioDurationScaleBuff@@IAEMH@Z ; ioDurationScaleBuff::GetScaleByPlayLevel
  00050	89 55 ec	 mov	 DWORD PTR tv211[ebp], edx
  00053	db 45 ec	 fild	 DWORD PTR tv211[ebp]
  00056	85 d2		 test	 edx, edx
  00058	79 06		 jns	 SHORT $LN15@ApplyStart
  0005a	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN15@ApplyStart:
  00060	de c1		 faddp	 ST(1), ST(0)
  00062	d9 5d ec	 fstp	 DWORD PTR _fScale$[ebp]

; 93   : 	fScale = max( fScale, FLOAT1 );

  00065	b8 01 00 00 00	 mov	 eax, 1
  0006a	d9 45 ec	 fld	 DWORD PTR _fScale$[ebp]
  0006d	89 45 e8	 mov	 DWORD PTR tv205[ebp], eax
  00070	db 45 e8	 fild	 DWORD PTR tv205[ebp]
  00073	85 c0		 test	 eax, eax
  00075	79 06		 jns	 SHORT $LN16@ApplyStart
  00077	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN16@ApplyStart:
  0007d	d9 c9		 fxch	 ST(1)
  0007f	df f1		 fcomip	 ST(1)
  00081	dd d8		 fstp	 ST(0)
  00083	77 18		 ja	 SHORT $LN6@ApplyStart
  00085	b8 01 00 00 00	 mov	 eax, 1
  0008a	89 45 e8	 mov	 DWORD PTR tv196[ebp], eax
  0008d	db 45 e8	 fild	 DWORD PTR tv196[ebp]
  00090	85 c0		 test	 eax, eax
  00092	79 06		 jns	 SHORT $LN17@ApplyStart
  00094	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN17@ApplyStart:
  0009a	d9 5d ec	 fstp	 DWORD PTR _fScale$[ebp]
$LN6@ApplyStart:

; 94   : 	m_pOwner->SetWorldScale( D3DXVECTOR3(fScale, fScale, fScale) );

  0009d	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _fScale$[ebp]
  000a2	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  000a8	8d 55 f0	 lea	 edx, DWORD PTR $T523812[ebp]
  000ab	f3 0f 11 45 f0	 movss	 DWORD PTR $T523812[ebp], xmm0
  000b0	f3 0f 11 45 f4	 movss	 DWORD PTR $T523812[ebp+4], xmm0
  000b5	f3 0f 11 45 f8	 movss	 DWORD PTR $T523812[ebp+8], xmm0
  000ba	8b 01		 mov	 eax, DWORD PTR [ecx]
  000bc	52		 push	 edx
  000bd	ff 50 4c	 call	 DWORD PTR [eax+76]

; 95   : 
; 96   : 	return true;

  000c0	b0 01		 mov	 al, 1
$LN3@ApplyStart:

; 97   : }

  000c2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c5	33 cd		 xor	 ecx, ebp
  000c7	5e		 pop	 esi
  000c8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cd	c9		 leave
  000ce	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioDurationScaleBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioDurationScaleBuff::ApplyStartBuff
_TEXT	ENDS
PUBLIC	__real@3dcccccd
PUBLIC	__real@3fb99999a0000000
PUBLIC	__$ArrayPad$
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
EXTRN	?GetScaleByPlayLevel@ioBaseChar@@QAEMH@Z:PROC	; ioBaseChar::GetScaleByPlayLevel
;	COMDAT __real@3dcccccd
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3fb99999a0000000
CONST	SEGMENT
__real@3fb99999a0000000 DQ 03fb99999a0000000r	; 0.1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodurationscalebuff.cpp
CONST	ENDS
;	COMDAT ?EndBuff@ioDurationScaleBuff@@UAEXXZ
_TEXT	SEGMENT
tv288 = -24						; size = 4
tv278 = -24						; size = 4
tv295 = -20						; size = 4
_fScale$ = -20						; size = 4
$T523826 = -16						; size = 12
$T523824 = -16						; size = 12
_vCurScale$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
?EndBuff@ioDurationScaleBuff@@UAEXXZ PROC		; ioDurationScaleBuff::EndBuff, COMDAT
; _this$ = ecx

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b d9		 mov	 ebx, ecx

; 101  : 	if(!m_pOwner) return;

  00013	8b 8b 74 02 00
	00		 mov	 ecx, DWORD PTR [ebx+628]
  00019	85 c9		 test	 ecx, ecx
  0001b	0f 84 d4 00 00
	00		 je	 $LN5@EndBuff

; 102  : 	if(m_pOwner->IsHasCrown()) return;

  00021	e8 00 00 00 00	 call	 ?IsHasCrown@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsHasCrown
  00026	84 c0		 test	 al, al
  00028	0f 85 c7 00 00
	00		 jne	 $LN5@EndBuff

; 103  : 
; 104  : 	float fScale = FLOAT1 + m_pOwner->GetScaleByPlayLevel( 1 );

  0002e	56		 push	 esi
  0002f	57		 push	 edi
  00030	b8 01 00 00 00	 mov	 eax, 1
  00035	8b 8b 74 02 00
	00		 mov	 ecx, DWORD PTR [ebx+628]
  0003b	6a 01		 push	 1
  0003d	8b f0		 mov	 esi, eax
  0003f	e8 00 00 00 00	 call	 ?GetScaleByPlayLevel@ioBaseChar@@QAEMH@Z ; ioBaseChar::GetScaleByPlayLevel
  00044	89 75 ec	 mov	 DWORD PTR tv295[ebp], esi
  00047	db 45 ec	 fild	 DWORD PTR tv295[ebp]
  0004a	85 f6		 test	 esi, esi
  0004c	79 06		 jns	 SHORT $LN19@EndBuff
  0004e	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN19@EndBuff:
  00054	de c1		 faddp	 ST(1), ST(0)
  00056	d9 5d ec	 fstp	 DWORD PTR _fScale$[ebp]

; 105  : 	fScale = max( fScale, FLOAT1 );

  00059	b8 01 00 00 00	 mov	 eax, 1
  0005e	d9 45 ec	 fld	 DWORD PTR _fScale$[ebp]
  00061	89 45 e8	 mov	 DWORD PTR tv288[ebp], eax
  00064	db 45 e8	 fild	 DWORD PTR tv288[ebp]
  00067	85 c0		 test	 eax, eax
  00069	79 06		 jns	 SHORT $LN20@EndBuff
  0006b	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN20@EndBuff:
  00071	d9 c9		 fxch	 ST(1)
  00073	df f1		 fcomip	 ST(1)
  00075	dd d8		 fstp	 ST(0)
  00077	77 18		 ja	 SHORT $LN8@EndBuff
  00079	b8 01 00 00 00	 mov	 eax, 1
  0007e	89 45 e8	 mov	 DWORD PTR tv278[ebp], eax
  00081	db 45 e8	 fild	 DWORD PTR tv278[ebp]
  00084	85 c0		 test	 eax, eax
  00086	79 06		 jns	 SHORT $LN21@EndBuff
  00088	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN21@EndBuff:
  0008e	d9 5d ec	 fstp	 DWORD PTR _fScale$[ebp]
$LN8@EndBuff:

; 106  : 
; 107  : 	D3DXVECTOR3 vCurScale = m_pOwner->GetWorldScale();

  00091	8b 8b 74 02 00
	00		 mov	 ecx, DWORD PTR [ebx+628]
  00097	8b 01		 mov	 eax, DWORD PTR [ecx]
  00099	ff 50 78	 call	 DWORD PTR [eax+120]

; 108  : 	if( vCurScale.y == 0.1f )
; 109  : 		m_pOwner->SetWorldScale( D3DXVECTOR3(fScale, 0.1f, fScale) );

  0009c	8b 8b 74 02 00
	00		 mov	 ecx, DWORD PTR [ebx+628]
  000a2	8b f0		 mov	 esi, eax
  000a4	8d 7d f0	 lea	 edi, DWORD PTR _vCurScale$[ebp]
  000a7	a5		 movsd
  000a8	a5		 movsd
  000a9	a5		 movsd
  000aa	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _vCurScale$[ebp+4]
  000af	0f 5a c0	 cvtps2pd xmm0, xmm0
  000b2	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@3fb99999a0000000
  000ba	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _fScale$[ebp]
  000bf	5f		 pop	 edi
  000c0	9f		 lahf
  000c1	5e		 pop	 esi
  000c2	8d 55 f0	 lea	 edx, DWORD PTR $T523824[ebp]
  000c5	f3 0f 11 45 f0	 movss	 DWORD PTR $T523824[ebp], xmm0
  000ca	f3 0f 11 45 f8	 movss	 DWORD PTR $T523824[ebp+8], xmm0
  000cf	52		 push	 edx
  000d0	f6 c4 44	 test	 ah, 68			; 00000044H
  000d3	7a 0f		 jp	 SHORT $LN2@EndBuff
  000d5	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3dcccccd
  000dd	f3 0f 11 4d f4	 movss	 DWORD PTR $T523824[ebp+4], xmm1

; 110  : 	else

  000e2	eb 05		 jmp	 SHORT $LN22@EndBuff
$LN2@EndBuff:

; 111  : 		m_pOwner->SetWorldScale( D3DXVECTOR3(fScale, fScale, fScale) );

  000e4	f3 0f 11 45 f4	 movss	 DWORD PTR $T523826[ebp+4], xmm0
$LN22@EndBuff:
  000e9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000eb	ff 50 4c	 call	 DWORD PTR [eax+76]

; 112  : 
; 113  : 	ioBuff::EndBuff();

  000ee	8b cb		 mov	 ecx, ebx
  000f0	e8 00 00 00 00	 call	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff
$LN5@EndBuff:

; 114  : }

  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	5b		 pop	 ebx
  000fb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00100	c9		 leave
  00101	c3		 ret	 0
?EndBuff@ioDurationScaleBuff@@UAEXXZ ENDP		; ioDurationScaleBuff::EndBuff
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0M@@ioINILoader@@QAEHAAY0M@$$CBDH@Z ; ioINILoader::LoadInt_e<12>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadInt_e@$0M@@ioINILoader@@QAEHAAY0M@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0M@@ioINILoader@@QAEHAAY0M@$$CBDH@Z PROC	; ioINILoader::LoadInt_e<12>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 32 01 00
	00		 je	 $LN96@LoadInt_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 1b 01 00
	00		 je	 $LN95@LoadInt_e
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 04 01 00
	00		 je	 $LN94@LoadInt_e
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 ec 00 00
	00		 je	 $LN93@LoadInt_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 d5 00 00
	00		 je	 $LN92@LoadInt_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 be 00 00
	00		 je	 $LN91@LoadInt_e
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 a8 00 00
	00		 je	 $LN90@LoadInt_e
  00087	32 d1		 xor	 dl, cl
  00089	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 92 00 00
	00		 je	 $LN89@LoadInt_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	74 7f		 je	 SHORT $LN88@LoadInt_e
  000a4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a7	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000aa	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ad	84 d2		 test	 dl, dl
  000af	74 6c		 je	 SHORT $LN87@LoadInt_e
  000b1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b4	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000b7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ba	84 d2		 test	 dl, dl
  000bc	74 5a		 je	 SHORT $LN86@LoadInt_e
  000be	32 d1		 xor	 dl, cl
  000c0	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000c4	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000c7	0f 84 89 00 00
	00		 je	 $LN1@LoadInt_e
  000cd	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d0	84 d2		 test	 dl, dl
  000d2	74 3e		 je	 SHORT $LN84@LoadInt_e
  000d4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d7	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000da	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000dd	84 d2		 test	 dl, dl
  000df	74 2b		 je	 SHORT $LN83@LoadInt_e
  000e1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e4	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000e7	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000ea	84 d2		 test	 dl, dl
  000ec	74 19		 je	 SHORT $LN82@LoadInt_e
  000ee	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000f1	32 d1		 xor	 dl, cl
  000f3	88 55 fa	 mov	 BYTE PTR __k$[ebp+14], dl
  000f6	84 c0		 test	 al, al
  000f8	74 07		 je	 SHORT $LN81@LoadInt_e
  000fa	34 ea		 xor	 al, -22			; ffffffeaH
  000fc	88 45 fb	 mov	 BYTE PTR __k$[ebp+15], al
  000ff	eb 55		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  00101	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00105	eb 4f		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  00107	88 4d fa	 mov	 BYTE PTR __k$[ebp+14], cl
  0010a	eb 4a		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  0010c	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00110	eb 44		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  00112	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00116	eb 3e		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  00118	88 4d f6	 mov	 BYTE PTR __k$[ebp+10], cl
  0011b	eb 39		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  0011d	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00121	eb 33		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  00123	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00127	eb 2d		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  00129	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0012d	eb 27		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  0012f	88 4d f2	 mov	 BYTE PTR __k$[ebp+6], cl
  00132	eb 22		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  00134	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00138	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  0013a	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0013e	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  00140	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00144	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  00146	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0014a	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  0014c	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00150	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  00152	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  00156	6a 02		 push	 2
  00158	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0015b	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+11], 0
  0015f	5a		 pop	 edx
$LL104@LoadInt_e:
  00160	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00166	83 c0 04	 add	 eax, 4
  00169	4a		 dec	 edx
  0016a	75 f4		 jne	 SHORT $LL104@LoadInt_e
  0016c	6a 08		 push	 8
  0016e	58		 pop	 eax
$LL101@LoadInt_e:
  0016f	8b c8		 mov	 ecx, eax
  00171	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00177	79 05		 jns	 SHORT $LN111@LoadInt_e
  00179	49		 dec	 ecx
  0017a	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0017d	41		 inc	 ecx
$LN111@LoadInt_e:
  0017e	b2 ed		 mov	 dl, -19			; ffffffedH
  00180	2a d1		 sub	 dl, cl
  00182	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  00186	40		 inc	 eax
  00187	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0018a	7c e3		 jl	 SHORT $LL101@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  0018c	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0018f	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00192	50		 push	 eax
  00193	8b ce		 mov	 ecx, esi
  00195	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  0019b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0019e	33 cd		 xor	 ecx, ebp
  001a0	5e		 pop	 esi
  001a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a6	c9		 leave
  001a7	c2 08 00	 ret	 8
??$LoadInt_e@$0M@@ioINILoader@@QAEHAAY0M@$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<12>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z ; ioINILoader::LoadFloat_e<15>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<15>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 75 01 00
	00		 je	 $LN96@LoadFloat_
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 5e 01 00
	00		 je	 $LN95@LoadFloat_
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 46 01 00
	00		 je	 $LN94@LoadFloat_
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 2f 01 00
	00		 je	 $LN93@LoadFloat_
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 18 01 00
	00		 je	 $LN92@LoadFloat_
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 02 01 00
	00		 je	 $LN91@LoadFloat_
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 ec 00 00
	00		 je	 $LN90@LoadFloat_
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 d5 00 00
	00		 je	 $LN89@LoadFloat_
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 be 00 00
	00		 je	 $LN88@LoadFloat_
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 a8 00 00
	00		 je	 $LN87@LoadFloat_
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 92 00 00
	00		 je	 $LN86@LoadFloat_
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 7f		 je	 SHORT $LN85@LoadFloat_
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 6c		 je	 SHORT $LN84@LoadFloat_
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000e9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000ec	84 d2		 test	 dl, dl
  000ee	74 5a		 je	 SHORT $LN83@LoadFloat_
  000f0	32 d1		 xor	 dl, cl
  000f2	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000f6	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000f9	0f 84 9a 00 00
	00		 je	 $LN1@LoadFloat_
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 3e		 je	 SHORT $LN81@LoadFloat_
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 2b		 je	 SHORT $LN80@LoadFloat_
  00113	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00116	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00119	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0011c	84 d2		 test	 dl, dl
  0011e	74 19		 je	 SHORT $LN79@LoadFloat_
  00120	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  00123	32 d1		 xor	 dl, cl
  00125	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00128	84 c0		 test	 al, al
  0012a	74 07		 je	 SHORT $LN78@LoadFloat_
  0012c	34 eb		 xor	 al, -21			; ffffffebH
  0012e	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00131	eb 66		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  00133	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00137	eb 60		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  00139	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  0013c	eb 5b		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  0013e	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00142	eb 55		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  00144	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00148	eb 4f		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  0014a	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0014d	eb 4a		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  0014f	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00153	eb 44		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  00155	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00159	eb 3e		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  0015b	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0015f	eb 38		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  00161	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  00164	eb 33		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  00166	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0016a	eb 2d		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  0016c	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00170	eb 27		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  00172	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00176	eb 21		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  00178	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  0017b	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  0017d	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00181	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  00183	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00187	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  00189	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0018d	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  0018f	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00193	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  00195	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  00199	6a 03		 push	 3
  0019b	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0019e	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001a2	5a		 pop	 edx
$LL104@LoadFloat_:
  001a3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a9	83 c0 04	 add	 eax, 4
  001ac	4a		 dec	 edx
  001ad	75 f4		 jne	 SHORT $LL104@LoadFloat_
  001af	6a 0c		 push	 12			; 0000000cH
  001b1	58		 pop	 eax
$LL101@LoadFloat_:
  001b2	8b c8		 mov	 ecx, eax
  001b4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001ba	79 05		 jns	 SHORT $LN111@LoadFloat_
  001bc	49		 dec	 ecx
  001bd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c0	41		 inc	 ecx
$LN111@LoadFloat_:
  001c1	b2 ed		 mov	 dl, -19			; ffffffedH
  001c3	2a d1		 sub	 dl, cl
  001c5	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001c9	40		 inc	 eax
  001ca	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001cd	7c e3		 jl	 SHORT $LL101@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  001cf	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001d4	51		 push	 ecx
  001d5	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001dd	50		 push	 eax
  001de	8b ce		 mov	 ecx, esi
  001e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001e6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e9	33 cd		 xor	 ecx, ebp
  001eb	5e		 pop	 esi
  001ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f1	c9		 leave
  001f2	c2 08 00	 ret	 8
??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<15>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0O@@ioINILoader@@QAEMAAY0O@$$CBDM@Z ; ioINILoader::LoadFloat_e<14>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0O@@ioINILoader@@QAEMAAY0O@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -24						; size = 14
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0O@@ioINILoader@@QAEMAAY0O@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<14>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 64 01 00
	00		 je	 $LN96@LoadFloat_@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 4d 01 00
	00		 je	 $LN95@LoadFloat_@2
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 36 01 00
	00		 je	 $LN94@LoadFloat_@2
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 1e 01 00
	00		 je	 $LN93@LoadFloat_@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 07 01 00
	00		 je	 $LN92@LoadFloat_@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 f0 00 00
	00		 je	 $LN91@LoadFloat_@2
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 da 00 00
	00		 je	 $LN90@LoadFloat_@2
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 c4 00 00
	00		 je	 $LN89@LoadFloat_@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 ad 00 00
	00		 je	 $LN88@LoadFloat_@2
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 96 00 00
	00		 je	 $LN87@LoadFloat_@2
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 80 00 00
	00		 je	 $LN86@LoadFloat_@2
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 6e		 je	 SHORT $LN85@LoadFloat_@2
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 5b		 je	 SHORT $LN84@LoadFloat_@2
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	0f 84 95 00 00
	00		 je	 $LN1@LoadFloat_@2
  000f3	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f6	84 d2		 test	 dl, dl
  000f8	74 3f		 je	 SHORT $LN82@LoadFloat_@2
  000fa	32 d1		 xor	 dl, cl
  000fc	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 2d		 je	 SHORT $LN81@LoadFloat_@2
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 1a		 je	 SHORT $LN80@LoadFloat_@2
  00113	8a 40 11	 mov	 al, BYTE PTR [eax+17]
  00116	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00119	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011c	84 c0		 test	 al, al
  0011e	74 07		 je	 SHORT $LN79@LoadFloat_@2
  00120	34 ec		 xor	 al, -20			; ffffffecH
  00122	88 45 f9	 mov	 BYTE PTR __k$[ebp+17], al
  00125	eb 61		 jmp	 SHORT $LN1@LoadFloat_@2
$LN79@LoadFloat_@2:
  00127	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0012b	eb 5b		 jmp	 SHORT $LN1@LoadFloat_@2
$LN80@LoadFloat_@2:
  0012d	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00131	eb 55		 jmp	 SHORT $LN1@LoadFloat_@2
$LN81@LoadFloat_@2:
  00133	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00137	eb 4f		 jmp	 SHORT $LN1@LoadFloat_@2
$LN82@LoadFloat_@2:
  00139	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0013c	eb 4a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN84@LoadFloat_@2:
  0013e	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00142	eb 44		 jmp	 SHORT $LN1@LoadFloat_@2
$LN85@LoadFloat_@2:
  00144	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00148	eb 3e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN86@LoadFloat_@2:
  0014a	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  0014d	eb 39		 jmp	 SHORT $LN1@LoadFloat_@2
$LN87@LoadFloat_@2:
  0014f	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00153	eb 33		 jmp	 SHORT $LN1@LoadFloat_@2
$LN88@LoadFloat_@2:
  00155	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00159	eb 2d		 jmp	 SHORT $LN1@LoadFloat_@2
$LN89@LoadFloat_@2:
  0015b	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0015f	eb 27		 jmp	 SHORT $LN1@LoadFloat_@2
$LN90@LoadFloat_@2:
  00161	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  00164	eb 22		 jmp	 SHORT $LN1@LoadFloat_@2
$LN91@LoadFloat_@2:
  00166	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0016a	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN92@LoadFloat_@2:
  0016c	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00170	eb 16		 jmp	 SHORT $LN1@LoadFloat_@2
$LN93@LoadFloat_@2:
  00172	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00176	eb 10		 jmp	 SHORT $LN1@LoadFloat_@2
$LN94@LoadFloat_@2:
  00178	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0017c	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN95@LoadFloat_@2:
  0017e	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00182	eb 04		 jmp	 SHORT $LN1@LoadFloat_@2
$LN96@LoadFloat_@2:
  00184	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@2:
  00188	6a 03		 push	 3
  0018a	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0018d	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+13], 0
  00191	5a		 pop	 edx
$LL104@LoadFloat_@2:
  00192	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00198	83 c0 04	 add	 eax, 4
  0019b	4a		 dec	 edx
  0019c	75 f4		 jne	 SHORT $LL104@LoadFloat_@2

; 137  : 		return LoadFloat(_k, f);

  0019e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001a3	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001a7	51		 push	 ecx
  001a8	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b0	50		 push	 eax
  001b1	8b ce		 mov	 ecx, esi
  001b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001b9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bc	33 cd		 xor	 ecx, ebp
  001be	5e		 pop	 esi
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	c9		 leave
  001c5	c2 08 00	 ret	 8
??$LoadFloat_e@$0O@@ioINILoader@@QAEMAAY0O@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<14>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodurationscalebuff.cpp
;	COMDAT ?LoadProperty@ioDurationScaleBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
tv2775 = -28						; size = 4
tv2767 = -28						; size = 4
_i$524931 = -28						; size = 4
__k$525114 = -24					; size = 14
__k$524942 = -24					; size = 15
__k$524813 = -24					; size = 12
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioDurationScaleBuff@@UAEXAAVioINILoader@@@Z PROC ; ioDurationScaleBuff::LoadProperty, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 30   : 	ioBuff::LoadProperty( rkLoader );

  00015	57		 push	 edi
  00016	8b f1		 mov	 esi, ecx
  00018	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty

; 31   : 
; 32   : 	m_iGrade = rkLoader.LoadInt_e( "scale_grade", 20 );

  0001d	6a 02		 push	 2
  0001f	c7 45 e8 9e 8f
	8a 86		 mov	 DWORD PTR __k$524813[ebp], -2037739618 ; 868a8f9eH
  00026	c7 45 ec 88 b3
	8c 98		 mov	 DWORD PTR __k$524813[ebp+4], -1735609464 ; 988cb388H
  0002d	8d 45 e8	 lea	 eax, DWORD PTR __k$524813[ebp]
  00030	c7 45 f0 8c 88
	8e 00		 mov	 DWORD PTR __k$524813[ebp+8], 9341068 ; 008e888cH
  00037	59		 pop	 ecx
$LL106@LoadProper:
  00038	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0003e	83 c0 04	 add	 eax, 4
  00041	49		 dec	 ecx
  00042	75 f4		 jne	 SHORT $LL106@LoadProper
  00044	6a 08		 push	 8
  00046	58		 pop	 eax
$LL103@LoadProper:
  00047	8b c8		 mov	 ecx, eax
  00049	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0004f	79 05		 jns	 SHORT $LN337@LoadProper
  00051	49		 dec	 ecx
  00052	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00055	41		 inc	 ecx
$LN337@LoadProper:
  00056	b2 ed		 mov	 dl, -19			; ffffffedH
  00058	2a d1		 sub	 dl, cl
  0005a	30 54 05 e8	 xor	 BYTE PTR __k$524813[ebp+eax], dl
  0005e	40		 inc	 eax
  0005f	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00062	7c e3		 jl	 SHORT $LL103@LoadProper
  00064	6a 14		 push	 20			; 00000014H
  00066	8d 45 e8	 lea	 eax, DWORD PTR __k$524813[ebp]
  00069	50		 push	 eax
  0006a	8b cf		 mov	 ecx, edi
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00072	89 86 6c 09 00
	00		 mov	 DWORD PTR [esi+2412], eax

; 33   : 	m_fScaleValue = rkLoader.LoadFloat_e( "scale_increase", FLOAT1 );

  00078	b8 01 00 00 00	 mov	 eax, 1
  0007d	6a 03		 push	 3
  0007f	c7 45 e8 9e 8f
	8a 86		 mov	 DWORD PTR __k$524942[ebp], -2037739618 ; 868a8f9eH
  00086	c7 45 ec 88 b3
	82 84		 mov	 DWORD PTR __k$524942[ebp+4], -2071809144 ; 8482b388H
  0008d	c7 45 f0 8e 9e
	8e 8b		 mov	 DWORD PTR __k$524942[ebp+8], -1953587570 ; 8b8e9e8eH
  00094	66 c7 45 f4 9e
	89		 mov	 WORD PTR __k$524942[ebp+12], 35230 ; 0000899eH
  0009a	8d 4d e8	 lea	 ecx, DWORD PTR __k$524942[ebp]
  0009d	c6 45 f6 00	 mov	 BYTE PTR __k$524942[ebp+14], 0
  000a1	5a		 pop	 edx
$LL214@LoadProper:
  000a2	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  000a8	83 c1 04	 add	 ecx, 4
  000ab	4a		 dec	 edx
  000ac	75 f4		 jne	 SHORT $LL214@LoadProper
  000ae	c7 45 e4 0c 00
	00 00		 mov	 DWORD PTR _i$524931[ebp], 12 ; 0000000cH
$LL211@LoadProper:
  000b5	8b 4d e4	 mov	 ecx, DWORD PTR _i$524931[ebp]
  000b8	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000be	79 05		 jns	 SHORT $LN338@LoadProper
  000c0	49		 dec	 ecx
  000c1	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000c4	41		 inc	 ecx
$LN338@LoadProper:
  000c5	b2 ed		 mov	 dl, -19			; ffffffedH
  000c7	2a d1		 sub	 dl, cl
  000c9	8b 4d e4	 mov	 ecx, DWORD PTR _i$524931[ebp]
  000cc	30 54 0d e8	 xor	 BYTE PTR __k$524942[ebp+ecx], dl
  000d0	ff 45 e4	 inc	 DWORD PTR _i$524931[ebp]
  000d3	83 7d e4 0e	 cmp	 DWORD PTR _i$524931[ebp], 14 ; 0000000eH
  000d7	7c dc		 jl	 SHORT $LL211@LoadProper
  000d9	89 45 e4	 mov	 DWORD PTR tv2775[ebp], eax
  000dc	db 45 e4	 fild	 DWORD PTR tv2775[ebp]
  000df	85 c0		 test	 eax, eax
  000e1	79 06		 jns	 SHORT $LN339@LoadProper
  000e3	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN339@LoadProper:
  000e9	51		 push	 ecx
  000ea	8d 45 e8	 lea	 eax, DWORD PTR __k$524942[ebp]
  000ed	d9 1c 24	 fstp	 DWORD PTR [esp]
  000f0	50		 push	 eax
  000f1	8b cf		 mov	 ecx, edi
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  000f9	d9 9e 70 09 00
	00		 fstp	 DWORD PTR [esi+2416]

; 34   : 	m_fScaleBalance = rkLoader.LoadFloat_e( "scale_balance", FLOAT1 );

  000ff	b8 01 00 00 00	 mov	 eax, 1
  00104	6a 03		 push	 3
  00106	c7 45 e8 9e 8f
	8a 86		 mov	 DWORD PTR __k$525114[ebp], -2037739618 ; 868a8f9eH
  0010d	c7 45 ec 88 b3
	89 8b		 mov	 DWORD PTR __k$525114[ebp+4], -1953909880 ; 8b89b388H
  00114	c7 45 f0 81 8d
	85 89		 mov	 DWORD PTR __k$525114[ebp+8], -1987736191 ; 89858d81H
  0011b	8d 4d e8	 lea	 ecx, DWORD PTR __k$525114[ebp]
  0011e	66 c7 45 f4 88
	00		 mov	 WORD PTR __k$525114[ebp+12], 136 ; 00000088H
  00124	5a		 pop	 edx
$LL322@LoadProper:
  00125	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  0012b	83 c1 04	 add	 ecx, 4
  0012e	4a		 dec	 edx
  0012f	75 f4		 jne	 SHORT $LL322@LoadProper
  00131	80 75 f4 ed	 xor	 BYTE PTR __k$525114[ebp+12], -19 ; ffffffedH
  00135	89 45 e4	 mov	 DWORD PTR tv2767[ebp], eax
  00138	db 45 e4	 fild	 DWORD PTR tv2767[ebp]
  0013b	85 c0		 test	 eax, eax
  0013d	79 06		 jns	 SHORT $LN340@LoadProper
  0013f	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN340@LoadProper:
  00145	51		 push	 ecx
  00146	8d 45 e8	 lea	 eax, DWORD PTR __k$525114[ebp]
  00149	d9 1c 24	 fstp	 DWORD PTR [esp]
  0014c	50		 push	 eax
  0014d	8b cf		 mov	 ecx, edi
  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00155	d9 9e 74 09 00
	00		 fstp	 DWORD PTR [esi+2420]

; 35   : }

  0015b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015e	5f		 pop	 edi
  0015f	33 cd		 xor	 ecx, ebp
  00161	5e		 pop	 esi
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	c9		 leave
  00168	c2 04 00	 ret	 4
?LoadProperty@ioDurationScaleBuff@@UAEXAAVioINILoader@@@Z ENDP ; ioDurationScaleBuff::LoadProperty
_TEXT	ENDS
END
