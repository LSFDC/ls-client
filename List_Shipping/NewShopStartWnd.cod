; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\GUI\NewShopStartWnd.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?Clear@ADProductLink@@QAEXXZ			; ADProductLink::Clear
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioshopmanager.h
;	COMDAT ?Clear@ADProductLink@@QAEXXZ
_TEXT	SEGMENT
?Clear@ADProductLink@@QAEXXZ PROC			; ADProductLink::Clear, COMDAT
; _this$ = ecx

; 71   : 		m_eADProductType	= ADPT_NONE;

  00000	33 c0		 xor	 eax, eax
  00002	89 01		 mov	 DWORD PTR [ecx], eax

; 72   : 		m_iTab				= 0;

  00004	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 73   : 		m_iSubTab			= 0;

  00007	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 74   : 
; 75   : 		m_iValue1			= 0;

  0000a	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 76   : 		m_iValue2			= 0;

  0000d	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 77   : 		m_iValue3			= 0;

  00010	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 78   : 	}

  00013	c3		 ret	 0
?Clear@ADProductLink@@QAEXXZ ENDP			; ADProductLink::Clear
_TEXT	ENDS
PUBLIC	?IsAvailableLink@ADProductLink@@QBE_NHHH@Z	; ADProductLink::IsAvailableLink
; Function compile flags: /Ogsp
;	COMDAT ?IsAvailableLink@ADProductLink@@QBE_NHHH@Z
_TEXT	SEGMENT
_iValue1$ = 8						; size = 4
_iValue2$ = 12						; size = 4
_iValue3$ = 16						; size = 4
?IsAvailableLink@ADProductLink@@QBE_NHHH@Z PROC		; ADProductLink::IsAvailableLink, COMDAT
; _this$ = ecx

; 81   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 82   : 		switch( m_eADProductType )

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	48		 dec	 eax
  00006	74 39		 je	 SHORT $LN10@IsAvailabl
  00008	48		 dec	 eax
  00009	48		 dec	 eax
  0000a	74 0d		 je	 SHORT $LN4@IsAvailabl
  0000c	48		 dec	 eax
  0000d	48		 dec	 eax
  0000e	74 31		 je	 SHORT $LN10@IsAvailabl
  00010	48		 dec	 eax
  00011	48		 dec	 eax
  00012	74 15		 je	 SHORT $LN6@IsAvailabl
  00014	83 e8 05	 sub	 eax, 5
  00017	75 34		 jne	 SHORT $LN9@IsAvailabl
$LN4@IsAvailabl:

; 100  : 			}
; 101  : 			break;
; 102  : 		case ADPT_ETC:
; 103  : 			{
; 104  : 				if( m_iValue1 == iValue1 && m_iValue2 == iValue2 )

  00019	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0001c	3b 45 08	 cmp	 eax, DWORD PTR _iValue1$[ebp]
  0001f	75 2c		 jne	 SHORT $LN9@IsAvailabl
  00021	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00024	3b 45 0c	 cmp	 eax, DWORD PTR _iValue2$[ebp]

; 105  : 					return true;

  00027	eb 1e		 jmp	 SHORT $LN15@IsAvailabl
$LN6@IsAvailabl:

; 88   : 			}
; 89   : 			break;
; 90   : 		case ADPT_EXTRA:
; 91   : 			{
; 92   : 				if( m_iValue1 == iValue1 )
; 93   : 					return true;
; 94   : 			}
; 95   : 			break;
; 96   : 		case ADPT_DECO:
; 97   : 			{
; 98   : 				if( m_iValue1 == iValue1 && m_iValue2 == iValue2 && m_iValue3 == iValue3 )

  00029	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0002c	3b 45 08	 cmp	 eax, DWORD PTR _iValue1$[ebp]
  0002f	75 1c		 jne	 SHORT $LN9@IsAvailabl
  00031	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00034	3b 45 0c	 cmp	 eax, DWORD PTR _iValue2$[ebp]
  00037	75 14		 jne	 SHORT $LN9@IsAvailabl
  00039	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0003c	3b 45 10	 cmp	 eax, DWORD PTR _iValue3$[ebp]

; 99   : 					return true;

  0003f	eb 06		 jmp	 SHORT $LN15@IsAvailabl
$LN10@IsAvailabl:

; 83   : 		{
; 84   : 		case ADPT_SOLDIER:
; 85   : 			{
; 86   : 				if( m_iValue1 == iValue1 )

  00041	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00044	3b 45 08	 cmp	 eax, DWORD PTR _iValue1$[ebp]
$LN15@IsAvailabl:
  00047	75 04		 jne	 SHORT $LN9@IsAvailabl

; 87   : 					return true;

  00049	b0 01		 mov	 al, 1
  0004b	eb 02		 jmp	 SHORT $LN13@IsAvailabl
$LN9@IsAvailabl:

; 106  : 			}
; 107  : 			break;
; 108  : 		case ADPT_COSTUME:
; 109  : 			{
; 110  : 				if( m_iValue1 == iValue1 && m_iValue2 == iValue2 )
; 111  : 					return true;
; 112  : 			}
; 113  : 			break;
; 114  : 		}
; 115  : 
; 116  : 		return false;

  0004d	32 c0		 xor	 al, al
$LN13@IsAvailabl:

; 117  : 	}

  0004f	5d		 pop	 ebp
  00050	c2 0c 00	 ret	 12			; 0000000cH
?IsAvailableLink@ADProductLink@@QBE_NHHH@Z ENDP		; ADProductLink::IsAvailableLink
_TEXT	ENDS
PUBLIC	?IsNoneLink@ADProductLink@@QBE_NXZ		; ADProductLink::IsNoneLink
; Function compile flags: /Ogsp
;	COMDAT ?IsNoneLink@ADProductLink@@QBE_NXZ
_TEXT	SEGMENT
?IsNoneLink@ADProductLink@@QBE_NXZ PROC			; ADProductLink::IsNoneLink, COMDAT
; _this$ = ecx

; 121  : 		if( m_eADProductType == ADPT_NONE )

  00000	33 c0		 xor	 eax, eax
  00002	39 01		 cmp	 DWORD PTR [ecx], eax
  00004	75 03		 jne	 SHORT $LN2@IsNoneLink
$LN5@IsNoneLink:

; 122  : 			return true;

  00006	b0 01		 mov	 al, 1

; 128  : 	}

  00008	c3		 ret	 0
$LN2@IsNoneLink:

; 123  : 
; 124  : 		if( m_iTab == 0 && m_iSubTab == 0 )

  00009	39 41 04	 cmp	 DWORD PTR [ecx+4], eax
  0000c	75 05		 jne	 SHORT $LN1@IsNoneLink
  0000e	39 41 08	 cmp	 DWORD PTR [ecx+8], eax

; 125  : 			return true;

  00011	74 f3		 je	 SHORT $LN5@IsNoneLink
$LN1@IsNoneLink:

; 126  : 
; 127  : 		return IsAvailableLink( 0, 0, 0 );

  00013	50		 push	 eax
  00014	50		 push	 eax
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?IsAvailableLink@ADProductLink@@QBE_NHHH@Z ; ADProductLink::IsAvailableLink

; 128  : 	}

  0001b	c3		 ret	 0
?IsNoneLink@ADProductLink@@QBE_NXZ ENDP			; ADProductLink::IsNoneLink
_TEXT	ENDS
PUBLIC	?iwm_hide@NewShopStartWnd@@UAEXXZ		; NewShopStartWnd::iwm_hide
EXTRN	__imp_?HideChildWnd@ioWnd@@QAEXK_N@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\newshopstartwnd.cpp
;	COMDAT ?iwm_hide@NewShopStartWnd@@UAEXXZ
_TEXT	SEGMENT
?iwm_hide@NewShopStartWnd@@UAEXXZ PROC			; NewShopStartWnd::iwm_hide, COMDAT
; _this$ = ecx

; 57   : {	

  00000	56		 push	 esi

; 58   : 	HideChildWnd( ID_AD_IMAGE_WND );

  00001	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z
  00007	57		 push	 edi
  00008	6a 00		 push	 0
  0000a	6a 02		 push	 2
  0000c	8b f9		 mov	 edi, ecx
  0000e	ff d6		 call	 esi

; 59   : 	HideChildWnd( ID_AD_TEXT_WND );

  00010	6a 00		 push	 0
  00012	6a 01		 push	 1
  00014	8b cf		 mov	 ecx, edi
  00016	ff d6		 call	 esi
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi

; 60   : }

  0001a	c3		 ret	 0
?iwm_hide@NewShopStartWnd@@UAEXXZ ENDP			; NewShopStartWnd::iwm_hide
_TEXT	ENDS
PUBLIC	__real@3f266666
PUBLIC	??_R0?AVioWnd@@@8				; ioWnd `RTTI Type Descriptor'
PUBLIC	??_R0?AVioButton@@@8				; ioButton `RTTI Type Descriptor'
PUBLIC	?ParseCategoryButton@NewShopStartWnd@@IAEXXZ	; NewShopStartWnd::ParseCategoryButton
EXTRN	?GetADCategoryCount@ioShopManager@@QAEHXZ:PROC	; ioShopManager::GetADCategoryCount
EXTRN	?GetSingleton@ioShopManager@@SAAAV1@XZ:PROC	; ioShopManager::GetSingleton
EXTRN	__imp_?SetWndPos@ioWnd@@QAEXHH@Z:PROC
EXTRN	__imp_?GetWidth@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?GetTextWidth@ioFontManager@@QAEMPBDW4TextStyle@@MH@Z:PROC
EXTRN	__imp_?GetSingleton@ioFontManager@@SAAAV1@XZ:PROC
EXTRN	__imp_?c_str@ioHashString@@QBEPBDXZ:PROC
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	__imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z:PROC
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
EXTRN	___RTDynamicCast:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT ??_R0?AVioWnd@@@8
_DATA	SEGMENT
??_R0?AVioWnd@@@8 DD FLAT:??_7type_info@@6B@		; ioWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVioButton@@@8
_DATA	SEGMENT
??_R0?AVioButton@@@8 DD FLAT:??_7type_info@@6B@		; ioButton `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioButton@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ParseCategoryButton@NewShopStartWnd@@IAEXXZ
_TEXT	SEGMENT
_pCategoryNext$ = -12					; size = 4
_this$ = -8						; size = 4
_pCategoryPrev$ = -4					; size = 4
?ParseCategoryButton@NewShopStartWnd@@IAEXXZ PROC	; NewShopStartWnd::ParseCategoryButton, COMDAT
; _this$ = ecx

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 122  : 	ioButton* pCategoryPrev = dynamic_cast<ioButton*>( FindChildWnd( ID_CATEGORY_PREV_BTN ) );

  00008	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  0000e	57		 push	 edi
  0000f	6a 00		 push	 0
  00011	bb 00 00 00 00	 mov	 ebx, OFFSET ??_R0?AVioButton@@@8
  00016	53		 push	 ebx
  00017	bf 00 00 00 00	 mov	 edi, OFFSET ??_R0?AVioWnd@@@8
  0001c	57		 push	 edi
  0001d	6a 00		 push	 0
  0001f	6a 03		 push	 3
  00021	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00024	ff d6		 call	 esi
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ___RTDynamicCast
  0002c	83 c4 14	 add	 esp, 20			; 00000014H

; 123  : 	ioButton* pCategoryNext = dynamic_cast<ioButton*>( FindChildWnd( ID_CATEGORY_NEXT_BTN ) );

  0002f	6a 00		 push	 0
  00031	53		 push	 ebx
  00032	57		 push	 edi
  00033	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  00036	6a 00		 push	 0
  00038	6a 04		 push	 4
  0003a	8b cf		 mov	 ecx, edi
  0003c	89 45 fc	 mov	 DWORD PTR _pCategoryPrev$[ebp], eax
  0003f	ff d6		 call	 esi
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ___RTDynamicCast

; 124  : 	if( !pCategoryPrev || !pCategoryNext )

  00047	33 db		 xor	 ebx, ebx
  00049	83 c4 14	 add	 esp, 20			; 00000014H
  0004c	89 45 f4	 mov	 DWORD PTR _pCategoryNext$[ebp], eax
  0004f	39 5d fc	 cmp	 DWORD PTR _pCategoryPrev$[ebp], ebx
  00052	0f 84 be 00 00
	00		 je	 $LN8@ParseCateg
  00058	3b c3		 cmp	 eax, ebx
  0005a	0f 84 b6 00 00
	00		 je	 $LN8@ParseCateg

; 125  : 		return;
; 126  : 
; 127  : 	//버튼 카테고리 타이틀 좌우측에 일정 간격을 두고 위치하도록 조정
; 128  : 	int iWidth = 0;
; 129  : 	if( !m_CurrCategoryName.IsEmpty() )

  00060	8d 8f 68 01 00
	00		 lea	 ecx, DWORD PTR [edi+360]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0006c	84 c0		 test	 al, al
  0006e	75 32		 jne	 SHORT $LN7@ParseCateg

; 130  : 	{
; 131  : 		iWidth = g_FontMgr.GetTextWidth( m_CurrCategoryName.c_str(), TS_NORMAL, FONT_SIZE_13 );

  00070	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00078	53		 push	 ebx
  00079	51		 push	 ecx
  0007a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007f	53		 push	 ebx
  00080	8d 8f 68 01 00
	00		 lea	 ecx, DWORD PTR [edi+360]
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  0008c	50		 push	 eax
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFontManager@@SAAAV1@XZ
  00093	8b c8		 mov	 ecx, eax
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetTextWidth@ioFontManager@@QAEMPBDW4TextStyle@@MH@Z
  0009b	e8 00 00 00 00	 call	 __ftol2_sse
  000a0	8b d8		 mov	 ebx, eax
$LN7@ParseCateg:

; 132  : 	}
; 133  : 
; 134  : 	if( pCategoryPrev )
; 135  : 		pCategoryPrev->SetWndPos( CATEGORY_TITLE_X - iWidth / 2 - pCategoryPrev->GetWidth()- CATEGORY_TITLE_OFFSET, CATEGORY_TITLE_Y );

  000a2	8b 4d fc	 mov	 ecx, DWORD PTR _pCategoryPrev$[ebp]
  000a5	8b c3		 mov	 eax, ebx
  000a7	99		 cdq
  000a8	2b c2		 sub	 eax, edx
  000aa	8b d8		 mov	 ebx, eax
  000ac	bf 12 01 00 00	 mov	 edi, 274		; 00000112H
  000b1	57		 push	 edi
  000b2	d1 fb		 sar	 ebx, 1
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioWnd@@QBEHXZ
  000ba	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?SetWndPos@ioWnd@@QAEXHH@Z
  000c0	8d 4f 4e	 lea	 ecx, DWORD PTR [edi+78]
  000c3	2b cb		 sub	 ecx, ebx
  000c5	2b c8		 sub	 ecx, eax
  000c7	51		 push	 ecx
  000c8	8b 4d fc	 mov	 ecx, DWORD PTR _pCategoryPrev$[ebp]
  000cb	ff d6		 call	 esi

; 136  : 
; 137  : 	if( pCategoryNext )			
; 138  : 		pCategoryNext->SetWndPos( CATEGORY_TITLE_X + iWidth / 2 + CATEGORY_TITLE_OFFSET, CATEGORY_TITLE_Y );

  000cd	57		 push	 edi
  000ce	8b 7d f4	 mov	 edi, DWORD PTR _pCategoryNext$[ebp]
  000d1	81 c3 8e 01 00
	00		 add	 ebx, 398		; 0000018eH
  000d7	53		 push	 ebx
  000d8	8b cf		 mov	 ecx, edi
  000da	ff d6		 call	 esi

; 139  : 
; 140  : 	//카테고리 버튼 활성/비활성화 체크
; 141  : 	if( m_CurrCategoryIndex <= 0 )

  000dc	8b 75 f8	 mov	 esi, DWORD PTR _this$[ebp]
  000df	83 be 64 01 00
	00 00		 cmp	 DWORD PTR [esi+356], 0

; 142  : 	{
; 143  : 		pCategoryPrev->SetInActive();

  000e6	8b 4d fc	 mov	 ecx, DWORD PTR _pCategoryPrev$[ebp]
  000e9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000eb	7f 05		 jg	 SHORT $LN4@ParseCateg
  000ed	ff 50 24	 call	 DWORD PTR [eax+36]

; 144  : 	}
; 145  : 	else

  000f0	eb 03		 jmp	 SHORT $LN3@ParseCateg
$LN4@ParseCateg:

; 146  : 	{
; 147  : 		pCategoryPrev->SetActive();

  000f2	ff 50 20	 call	 DWORD PTR [eax+32]
$LN3@ParseCateg:

; 148  : 	}
; 149  : 
; 150  : 	if( m_CurrCategoryIndex >= g_ShopManager.GetADCategoryCount() - 1 )

  000f5	e8 00 00 00 00	 call	 ?GetSingleton@ioShopManager@@SAAAV1@XZ ; ioShopManager::GetSingleton
  000fa	8b c8		 mov	 ecx, eax
  000fc	e8 00 00 00 00	 call	 ?GetADCategoryCount@ioShopManager@@QAEHXZ ; ioShopManager::GetADCategoryCount
  00101	48		 dec	 eax
  00102	39 86 64 01 00
	00		 cmp	 DWORD PTR [esi+356], eax

; 151  : 	{
; 152  : 		pCategoryNext->SetInActive();

  00108	8b 07		 mov	 eax, DWORD PTR [edi]
  0010a	8b cf		 mov	 ecx, edi
  0010c	7c 05		 jl	 SHORT $LN2@ParseCateg
  0010e	ff 50 24	 call	 DWORD PTR [eax+36]

; 153  : 	}
; 154  : 	else

  00111	eb 03		 jmp	 SHORT $LN8@ParseCateg
$LN2@ParseCateg:

; 155  : 	{
; 156  : 		pCategoryNext->SetActive();

  00113	ff 50 20	 call	 DWORD PTR [eax+32]
$LN8@ParseCateg:
  00116	5f		 pop	 edi
  00117	5e		 pop	 esi
  00118	5b		 pop	 ebx

; 157  : 	}
; 158  : }

  00119	c9		 leave
  0011a	c3		 ret	 0
?ParseCategoryButton@NewShopStartWnd@@IAEXXZ ENDP	; NewShopStartWnd::ParseCategoryButton
_TEXT	ENDS
PUBLIC	?OnProcess@NewShopStartWnd@@MAEXM@Z		; NewShopStartWnd::OnProcess
EXTRN	__imp_?IsShow@ioWnd@@QBE_NXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?OnProcess@NewShopStartWnd@@MAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?OnProcess@NewShopStartWnd@@MAEXM@Z PROC		; NewShopStartWnd::OnProcess, COMDAT
; _this$ = ecx

; 276  : 	if( !IsShow() )

  00000	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ

; 277  : 		return;
; 278  : }

  00006	c2 04 00	 ret	 4
?OnProcess@NewShopStartWnd@@MAEXM@Z ENDP		; NewShopStartWnd::OnProcess
_TEXT	ENDS
PUBLIC	??_C@_0BK@IKMDPNLD@NewShopStartWnd?3?3OnRender?$AA@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?OnRender@NewShopStartWnd@@MAEXXZ		; NewShopStartWnd::OnRender
EXTRN	??1ioComplexStringPrinter@@QAE@XZ:PROC		; ioComplexStringPrinter::~ioComplexStringPrinter
EXTRN	?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z:PROC ; ioComplexStringPrinter::PrintFullText
EXTRN	?AddTextPiece@ioComplexStringPrinter@@QAEXMPBDH@Z:PROC ; ioComplexStringPrinter::AddTextPiece
EXTRN	__imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z:PROC
EXTRN	__imp_?GetSingleton@ioStringManager@@SAAAV1@XZ:PROC
EXTRN	?SetTextColor@ioComplexStringPrinter@@QAEXK@Z:PROC ; ioComplexStringPrinter::SetTextColor
EXTRN	?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z:PROC ; ioComplexStringPrinter::SetBkColor
EXTRN	?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z:PROC ; ioComplexStringPrinter::SetTextStyle
EXTRN	??0ioComplexStringPrinter@@QAE@XZ:PROC		; ioComplexStringPrinter::ioComplexStringPrinter
EXTRN	__imp_?PrintText@ioFontManager@@QAAXMMMPBDZZ:PROC
EXTRN	__imp_?SetTextColor@ioFontManager@@QAEXK@Z:PROC
EXTRN	__imp_?SetBkColor@ioFontManager@@QAEXHHH@Z:PROC
EXTRN	__imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z:PROC
EXTRN	__imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z:PROC
EXTRN	__imp_?GetDerivedPosY@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?GetDerivedPosX@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?OnRender@ioWnd@@MAEXXZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT ??_C@_0BK@IKMDPNLD@NewShopStartWnd?3?3OnRender?$AA@
CONST	SEGMENT
??_C@_0BK@IKMDPNLD@NewShopStartWnd?3?3OnRender?$AA@ DB 'NewShopStartWnd::'
	DB	'OnRender', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnRender@NewShopStartWnd@@MAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnRender@NewShopStartWnd@@MAEXXZ$0
__ehfuncinfo$?OnRender@NewShopStartWnd@@MAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnRender@NewShopStartWnd@@MAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?OnRender@NewShopStartWnd@@MAEXXZ
_TEXT	SEGMENT
_kPrinter$ = -52					; size = 32
_iXPos$ = -20						; size = 4
_iYPos$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?OnRender@NewShopStartWnd@@MAEXXZ PROC			; NewShopStartWnd::OnRender, COMDAT
; _this$ = ecx

; 281  : {

  00000	6a 28		 push	 40			; 00000028H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?OnRender@NewShopStartWnd@@MAEXXZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b d9		 mov	 ebx, ecx

; 282  : 	ioWnd::OnRender();

  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnRender@ioWnd@@MAEXXZ

; 283  : 
; 284  : 	int iXPos = GetDerivedPosX();

  00014	8b cb		 mov	 ecx, ebx
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosX@ioWnd@@QBEHXZ

; 285  : 	int iYPos = GetDerivedPosY();

  0001c	8b cb		 mov	 ecx, ebx
  0001e	89 45 ec	 mov	 DWORD PTR _iXPos$[ebp], eax
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ

; 286  : 
; 287  : 	if( m_pProductFrm )

  00027	33 f6		 xor	 esi, esi
  00029	89 45 f0	 mov	 DWORD PTR _iYPos$[ebp], eax
  0002c	39 b3 60 01 00
	00		 cmp	 DWORD PTR [ebx+352], esi
  00032	74 2d		 je	 SHORT $LN2@OnRender

; 288  : 		m_pProductFrm->Render( iXPos, iYPos );

  00034	66 0f 6e 45 f0	 movd	 xmm0, DWORD PTR _iYPos$[ebp]
  00039	8b 83 60 01 00
	00		 mov	 eax, DWORD PTR [ebx+352]
  0003f	8b 10		 mov	 edx, DWORD PTR [eax]
  00041	56		 push	 esi
  00042	56		 push	 esi
  00043	56		 push	 esi
  00044	56		 push	 esi
  00045	51		 push	 ecx
  00046	51		 push	 ecx
  00047	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0004a	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00050	66 0f 6e 45 ec	 movd	 xmm0, DWORD PTR _iXPos$[ebp]
  00055	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00058	8b c8		 mov	 ecx, eax
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	ff 12		 call	 DWORD PTR [edx]
$LN2@OnRender:

; 289  : 
; 290  : 	g_FontMgr.SetAlignType( TAT_CENTER );

  00061	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetSingleton@ioFontManager@@SAAAV1@XZ
  00067	6a 01		 push	 1
  00069	ff d7		 call	 edi
  0006b	8b c8		 mov	 ecx, eax
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z

; 291  : 	g_FontMgr.SetTextStyle( TS_NORMAL );

  00073	56		 push	 esi
  00074	ff d7		 call	 edi
  00076	8b c8		 mov	 ecx, eax
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z

; 292  : 	g_FontMgr.SetBkColor( 0, 0, 0 );

  0007e	56		 push	 esi
  0007f	56		 push	 esi
  00080	56		 push	 esi
  00081	ff d7		 call	 edi
  00083	8b c8		 mov	 ecx, eax
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetBkColor@ioFontManager@@QAEXHHH@Z

; 293  : 	g_FontMgr.SetTextColor( TCT_DEFAULT_WHITE );

  0008b	6a ff		 push	 -1
  0008d	ff d7		 call	 edi
  0008f	8b c8		 mov	 ecx, eax
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 294  : 
; 295  : 	if( !m_CurrCategoryName.IsEmpty() )

  00097	8d 8b 68 01 00
	00		 lea	 ecx, DWORD PTR [ebx+360]
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  000a3	84 c0		 test	 al, al
  000a5	75 53		 jne	 SHORT $LN1@OnRender

; 296  : 	{	
; 297  : 		g_FontMgr.PrintText( iXPos + CATEGORY_TITLE_X, iYPos + CATEGORY_TITLE_TEXT_Y - 1, FONT_SIZE_13, m_CurrCategoryName.c_str() );

  000a7	8d 8b 68 01 00
	00		 lea	 ecx, DWORD PTR [ebx+360]
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  000b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  000bb	50		 push	 eax
  000bc	8b 45 f0	 mov	 eax, DWORD PTR _iYPos$[ebp]
  000bf	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000c2	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000c8	05 11 01 00 00	 add	 eax, 273		; 00000111H
  000cd	0f 57 c0	 xorps	 xmm0, xmm0
  000d0	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000d4	8b 45 ec	 mov	 eax, DWORD PTR _iXPos$[ebp]
  000d7	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000dd	05 77 01 00 00	 add	 eax, 375		; 00000177H
  000e2	0f 57 c0	 xorps	 xmm0, xmm0
  000e5	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ee	ff d7		 call	 edi
  000f0	50		 push	 eax
  000f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAAXMMMPBDZZ
  000f7	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@OnRender:

; 298  : 	}
; 299  : 
; 300  : 	ioComplexStringPrinter kPrinter;

  000fa	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  000fd	e8 00 00 00 00	 call	 ??0ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::ioComplexStringPrinter

; 301  : 	kPrinter.SetTextStyle( TS_NORMAL );

  00102	56		 push	 esi
  00103	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00106	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  00109	e8 00 00 00 00	 call	 ?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z ; ioComplexStringPrinter::SetTextStyle

; 302  : 	kPrinter.SetBkColor( 0, 0, 0 );

  0010e	56		 push	 esi
  0010f	56		 push	 esi
  00110	56		 push	 esi
  00111	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00114	e8 00 00 00 00	 call	 ?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z ; ioComplexStringPrinter::SetBkColor

; 303  : 	kPrinter.SetTextColor( TCT_DEFAULT_WHITE );

  00119	6a ff		 push	 -1
  0011b	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  0011e	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 304  : 	kPrinter.AddTextPiece( FONT_SIZE_13, STR(1), m_CurrCategoryIndex + 1 );

  00123	8b 83 64 01 00
	00		 mov	 eax, DWORD PTR [ebx+356]
  00129	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  0012f	40		 inc	 eax
  00130	50		 push	 eax
  00131	56		 push	 esi
  00132	6a 01		 push	 1
  00134	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00139	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@IKMDPNLD@NewShopStartWnd?3?3OnRender?$AA@
  0013e	ff d7		 call	 edi
  00140	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00146	8b c8		 mov	 ecx, eax
  00148	ff d3		 call	 ebx
  0014a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00152	50		 push	 eax
  00153	51		 push	 ecx
  00154	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00157	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015c	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAEXMPBDH@Z ; ioComplexStringPrinter::AddTextPiece

; 305  : 
; 306  : 	kPrinter.SetTextStyle( TS_NORMAL );

  00161	56		 push	 esi
  00162	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00165	e8 00 00 00 00	 call	 ?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z ; ioComplexStringPrinter::SetTextStyle

; 307  : 	kPrinter.SetBkColor( 0, 0, 0 );

  0016a	56		 push	 esi
  0016b	56		 push	 esi
  0016c	56		 push	 esi
  0016d	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00170	e8 00 00 00 00	 call	 ?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z ; ioComplexStringPrinter::SetBkColor

; 308  : 	kPrinter.SetTextColor( TCT_DEFAULT_LIGHTGRAY );

  00175	68 a7 a7 a7 ff	 push	 -5789785		; ffa7a7a7H
  0017a	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  0017d	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 309  : 	kPrinter.AddTextPiece( FONT_SIZE_13, STR(2), g_ShopManager.GetADCategoryCount() );

  00182	e8 00 00 00 00	 call	 ?GetSingleton@ioShopManager@@SAAAV1@XZ ; ioShopManager::GetSingleton
  00187	8b c8		 mov	 ecx, eax
  00189	e8 00 00 00 00	 call	 ?GetADCategoryCount@ioShopManager@@QAEHXZ ; ioShopManager::GetADCategoryCount
  0018e	50		 push	 eax
  0018f	56		 push	 esi
  00190	6a 02		 push	 2
  00192	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00197	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@IKMDPNLD@NewShopStartWnd?3?3OnRender?$AA@
  0019c	ff d7		 call	 edi
  0019e	8b c8		 mov	 ecx, eax
  001a0	ff d3		 call	 ebx
  001a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  001aa	50		 push	 eax
  001ab	51		 push	 ecx
  001ac	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  001af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b4	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAEXMPBDH@Z ; ioComplexStringPrinter::AddTextPiece

; 310  : 	kPrinter.PrintFullText( iXPos + CATEGORY_PAGE_X, iYPos + CATEGORY_PAGE_Y, TAT_LEFT );

  001b9	8b 45 f0	 mov	 eax, DWORD PTR _iYPos$[ebp]
  001bc	68 ff 00 00 00	 push	 255			; 000000ffH
  001c1	56		 push	 esi
  001c2	05 12 01 00 00	 add	 eax, 274		; 00000112H
  001c7	0f 57 c0	 xorps	 xmm0, xmm0
  001ca	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  001ce	8b 45 ec	 mov	 eax, DWORD PTR _iXPos$[ebp]
  001d1	51		 push	 ecx
  001d2	51		 push	 ecx
  001d3	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001d9	05 bf 02 00 00	 add	 eax, 703		; 000002bfH
  001de	0f 57 c0	 xorps	 xmm0, xmm0
  001e1	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  001e5	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  001e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ed	e8 00 00 00 00	 call	 ?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z ; ioComplexStringPrinter::PrintFullText

; 311  : }

  001f2	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001f6	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  001f9	e8 00 00 00 00	 call	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
  001fe	e8 00 00 00 00	 call	 __EH_epilog3
  00203	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnRender@NewShopStartWnd@@MAEXXZ$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
__ehhandler$?OnRender@NewShopStartWnd@@MAEXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnRender@NewShopStartWnd@@MAEXXZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnRender@NewShopStartWnd@@MAEXXZ ENDP			; NewShopStartWnd::OnRender
PUBLIC	?iwm_show@ioProductLinkButton@@UAEXXZ		; ioProductLinkButton::iwm_show
; Function compile flags: /Ogsp
;	COMDAT ?iwm_show@ioProductLinkButton@@UAEXXZ
_TEXT	SEGMENT
?iwm_show@ioProductLinkButton@@UAEXXZ PROC		; ioProductLinkButton::iwm_show, COMDAT
; _this$ = ecx

; 335  : }

  00000	c3		 ret	 0
?iwm_show@ioProductLinkButton@@UAEXXZ ENDP		; ioProductLinkButton::iwm_show
_TEXT	ENDS
PUBLIC	?iwm_hide@ioProductLinkButton@@UAEXXZ		; ioProductLinkButton::iwm_hide
; Function compile flags: /Ogsp
;	COMDAT ?iwm_hide@ioProductLinkButton@@UAEXXZ
_TEXT	SEGMENT
?iwm_hide@ioProductLinkButton@@UAEXXZ PROC		; ioProductLinkButton::iwm_hide, COMDAT
; _this$ = ecx

; 339  : }

  00000	c3		 ret	 0
?iwm_hide@ioProductLinkButton@@UAEXXZ ENDP		; ioProductLinkButton::iwm_hide
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_R0?AVNewShopWnd@@@8				; NewShopWnd `RTTI Type Descriptor'
PUBLIC	?MoveDirectLink@ioProductLinkButton@@QAEXXZ	; ioProductLinkButton::MoveDirectLink
EXTRN	?SetDirectSmallTab@NewShopWnd@@QAEXHHHH_N@Z:PROC ; NewShopWnd::SetDirectSmallTab
EXTRN	?SetReserveDecoSex@NewShopWnd@@QAEXH@Z:PROC	; NewShopWnd::SetReserveDecoSex
EXTRN	__imp_?FindWnd@ioGUIManager@@QAEPAVioWnd@@K@Z:PROC
EXTRN	?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ:PROC	; ioSP2GUIManager::GetSingleton
;	COMDAT ??_R0?AVNewShopWnd@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\newshopstartwnd.cpp
_DATA	SEGMENT
??_R0?AVNewShopWnd@@@8 DD FLAT:??_7type_info@@6B@	; NewShopWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNewShopWnd@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?MoveDirectLink@ioProductLinkButton@@QAEXXZ
_TEXT	SEGMENT
?MoveDirectLink@ioProductLinkButton@@QAEXXZ PROC	; ioProductLinkButton::MoveDirectLink, COMDAT
; _this$ = ecx

; 625  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 626  : 	NewShopWnd *pNewShopWnd = dynamic_cast<NewShopWnd*> ( g_GUIMgr.FindWnd( NEW_SHOP_WND ) );

  00002	6a 00		 push	 0
  00004	68 00 00 00 00	 push	 OFFSET ??_R0?AVNewShopWnd@@@8
  00009	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  0000e	6a 00		 push	 0
  00010	68 f8 17 00 00	 push	 6136			; 000017f8H
  00015	8b f1		 mov	 esi, ecx
  00017	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  0001c	8b c8		 mov	 ecx, eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindWnd@ioGUIManager@@QAEPAVioWnd@@K@Z
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ___RTDynamicCast
  0002a	8b d8		 mov	 ebx, eax
  0002c	83 c4 14	 add	 esp, 20			; 00000014H

; 627  : 	if( !pNewShopWnd )

  0002f	85 db		 test	 ebx, ebx
  00031	74 5e		 je	 SHORT $LN1@MoveDirect

; 628  : 		return;
; 629  : 
; 630  : 	if( m_CurrADProductLink.IsNoneLink() )

  00033	57		 push	 edi
  00034	8d 8e 2c 02 00
	00		 lea	 ecx, DWORD PTR [esi+556]
  0003a	e8 00 00 00 00	 call	 ?IsNoneLink@ADProductLink@@QBE_NXZ ; ADProductLink::IsNoneLink
  0003f	84 c0		 test	 al, al
  00041	75 4d		 jne	 SHORT $LN7@MoveDirect

; 631  : 		return;
; 632  : 
; 633  : 	if( m_CurrADProductLink.m_eADProductType == ADPT_DECO )

  00043	83 be 2c 02 00
	00 07		 cmp	 DWORD PTR [esi+556], 7

; 634  : 	{
; 635  : 		pNewShopWnd->SetReserveDecoSex( m_CurrADProductLink.m_iValue1 );

  0004a	8b cb		 mov	 ecx, ebx
  0004c	75 1d		 jne	 SHORT $LN2@MoveDirect
  0004e	ff b6 38 02 00
	00		 push	 DWORD PTR [esi+568]
  00054	e8 00 00 00 00	 call	 ?SetReserveDecoSex@NewShopWnd@@QAEXH@Z ; NewShopWnd::SetReserveDecoSex

; 636  : 		pNewShopWnd->SetDirectSmallTab( m_CurrADProductLink.m_iTab, NewShopWnd::ID_SMALL_TAB_1_BTN + m_CurrADProductLink.m_iSubTab, m_CurrADProductLink.m_iValue2, m_CurrADProductLink.m_iValue3 );

  00059	6a 01		 push	 1
  0005b	ff b6 40 02 00
	00		 push	 DWORD PTR [esi+576]
  00061	8b cb		 mov	 ecx, ebx
  00063	ff b6 3c 02 00
	00		 push	 DWORD PTR [esi+572]

; 637  : 	}
; 638  : 	else

  00069	eb 0e		 jmp	 SHORT $LN8@MoveDirect
$LN2@MoveDirect:

; 639  : 	{
; 640  : 		pNewShopWnd->SetDirectSmallTab( m_CurrADProductLink.m_iTab, NewShopWnd::ID_SMALL_TAB_1_BTN + m_CurrADProductLink.m_iSubTab, m_CurrADProductLink.m_iValue1, m_CurrADProductLink.m_iValue2 );

  0006b	6a 01		 push	 1
  0006d	ff b6 3c 02 00
	00		 push	 DWORD PTR [esi+572]
  00073	ff b6 38 02 00
	00		 push	 DWORD PTR [esi+568]
$LN8@MoveDirect:
  00079	8b 86 34 02 00
	00		 mov	 eax, DWORD PTR [esi+564]
  0007f	05 c9 00 00 00	 add	 eax, 201		; 000000c9H
  00084	50		 push	 eax
  00085	ff b6 30 02 00
	00		 push	 DWORD PTR [esi+560]
  0008b	e8 00 00 00 00	 call	 ?SetDirectSmallTab@NewShopWnd@@QAEXHHHH_N@Z ; NewShopWnd::SetDirectSmallTab
$LN7@MoveDirect:
  00090	5f		 pop	 edi
$LN1@MoveDirect:
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx

; 641  : 	}
; 642  : }

  00093	c3		 ret	 0
?MoveDirectLink@ioProductLinkButton@@QAEXXZ ENDP	; ioProductLinkButton::MoveDirectLink
_TEXT	ENDS
PUBLIC	?OnProcess@ioProductLinkButton@@MAEXM@Z		; ioProductLinkButton::OnProcess
; Function compile flags: /Ogsp
;	COMDAT ?OnProcess@ioProductLinkButton@@MAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?OnProcess@ioProductLinkButton@@MAEXM@Z PROC		; ioProductLinkButton::OnProcess, COMDAT
; _this$ = ecx

; 646  : 	if( !IsShow() )

  00000	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ

; 647  : 		return;
; 648  : 
; 649  : }

  00006	c2 04 00	 ret	 4
?OnProcess@ioProductLinkButton@@MAEXM@Z ENDP		; ioProductLinkButton::OnProcess
_TEXT	ENDS
PUBLIC	??_C@_0CE@BMJEMBEF@ioProductLinkButton?3?3OnNormalRen@ ; `string'
PUBLIC	__real@3f000000
PUBLIC	__real@42a60000
PUBLIC	?OnNormalRender@ioProductLinkButton@@MAEXHH@Z	; ioProductLinkButton::OnNormalRender
EXTRN	__imp_?PrintText@ioFontManager@@QAEXMMMPBD0@Z:PROC
EXTRN	__imp_?SetTextColor@ioFontManager@@QAEXHHH@Z:PROC
EXTRN	__imp_?PrintTextWidthCut@ioFontManager@@QAAXMMMMPBDZZ:PROC
;	COMDAT ??_C@_0CE@BMJEMBEF@ioProductLinkButton?3?3OnNormalRen@
CONST	SEGMENT
??_C@_0CE@BMJEMBEF@ioProductLinkButton?3?3OnNormalRen@ DB 'ioProductLinkB'
	DB	'utton::OnNormalRender', 00H			; `string'
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@42a60000
CONST	SEGMENT
__real@42a60000 DD 042a60000r			; 83
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?OnNormalRender@ioProductLinkButton@@MAEXHH@Z
_TEXT	SEGMENT
tv234 = -8						; size = 4
_this$ = -8						; size = 4
tv230 = -4						; size = 4
_iXPos$ = 8						; size = 4
_iYPos$ = 12						; size = 4
?OnNormalRender@ioProductLinkButton@@MAEXHH@Z PROC	; ioProductLinkButton::OnNormalRender, COMDAT
; _this$ = ecx

; 652  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	8b d9		 mov	 ebx, ecx
  00008	56		 push	 esi
  00009	57		 push	 edi

; 653  : 	if( !m_szName.IsEmpty() )

  0000a	8d 8b fc 01 00
	00		 lea	 ecx, DWORD PTR [ebx+508]
  00010	89 5d f8	 mov	 DWORD PTR _this$[ebp], ebx
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00019	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?GetSingleton@ioFontManager@@SAAAV1@XZ
  0001f	84 c0		 test	 al, al
  00021	0f 85 93 00 00
	00		 jne	 $LN4@OnNormalRe

; 654  : 	{
; 655  : 		g_FontMgr.SetAlignType( TAT_CENTER );

  00027	6a 01		 push	 1
  00029	ff d6		 call	 esi
  0002b	8b c8		 mov	 ecx, eax
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z

; 656  : 		g_FontMgr.SetTextStyle( TS_NORMAL );

  00033	6a 00		 push	 0
  00035	ff d6		 call	 esi
  00037	8b c8		 mov	 ecx, eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z

; 657  : 		g_FontMgr.SetBkColor( 0, 0, 0 );

  0003f	33 c0		 xor	 eax, eax
  00041	50		 push	 eax
  00042	50		 push	 eax
  00043	50		 push	 eax
  00044	ff d6		 call	 esi
  00046	8b c8		 mov	 ecx, eax
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetBkColor@ioFontManager@@QAEXHHH@Z

; 658  : 		g_FontMgr.SetTextColor( TCT_DEFAULT_DARKGRAY );		

  0004e	68 3a 3a 3a ff	 push	 -12961222		; ff3a3a3aH
  00053	ff d6		 call	 esi
  00055	8b c8		 mov	 ecx, eax
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 659  : 		g_FontMgr.PrintTextWidthCut( iXPos + 45, iYPos + 65, FONT_SIZE_10, 83, m_szName.c_str() );

  0005d	8d 8b fc 01 00
	00		 lea	 ecx, DWORD PTR [ebx+508]
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  00069	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42a60000
  00071	50		 push	 eax
  00072	8b 45 0c	 mov	 eax, DWORD PTR _iYPos$[ebp]
  00075	83 ec 10	 sub	 esp, 16			; 00000010H
  00078	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0007e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00086	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0008c	83 c0 41	 add	 eax, 65			; 00000041H
  0008f	0f 57 c0	 xorps	 xmm0, xmm0
  00092	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00096	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  00099	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0009f	83 c0 2d	 add	 eax, 45			; 0000002dH
  000a2	0f 57 c0	 xorps	 xmm0, xmm0
  000a5	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ae	ff d6		 call	 esi
  000b0	50		 push	 eax
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTextWidthCut@ioFontManager@@QAAXMMMMPBDZZ
  000b7	83 c4 18	 add	 esp, 24			; 00000018H
$LN4@OnNormalRe:

; 660  : 	}
; 661  : 
; 662  : 	if( !m_szGold.IsEmpty() )

  000ba	8d 8b 0c 02 00
	00		 lea	 ecx, DWORD PTR [ebx+524]
  000c0	89 4d fc	 mov	 DWORD PTR tv230[ebp], ecx
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  000c9	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  000cf	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  000d5	84 c0		 test	 al, al
  000d7	75 23		 jne	 SHORT $LN3@OnNormalRe

; 663  : 	{
; 664  : 		g_FontMgr.SetTextColor( 141, 87, 4 );

  000d9	6a 04		 push	 4
  000db	6a 57		 push	 87			; 00000057H
  000dd	68 8d 00 00 00	 push	 141			; 0000008dH
  000e2	ff d6		 call	 esi
  000e4	8b c8		 mov	 ecx, eax
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXHHH@Z

; 665  : 		g_FontMgr.PrintText( iXPos + 45, iYPos + 78, FONT_SIZE_10, STR(1), m_szGold.c_str() );

  000ec	8b 4d fc	 mov	 ecx, DWORD PTR tv230[ebp]
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  000f5	50		 push	 eax
  000f6	6a 00		 push	 0
  000f8	6a 01		 push	 1
  000fa	eb 33		 jmp	 SHORT $LN7@OnNormalRe
$LN3@OnNormalRe:

; 666  : 	}
; 667  : 	else if( !m_szPeso.IsEmpty() )

  000fc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ff	81 c1 1c 02 00
	00		 add	 ecx, 540		; 0000021cH
  00105	89 4d f8	 mov	 DWORD PTR tv234[ebp], ecx
  00108	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0010e	84 c0		 test	 al, al
  00110	75 6e		 jne	 SHORT $LN1@OnNormalRe

; 668  : 	{
; 669  : 		g_FontMgr.SetTextColor( TCT_DEFAULT_BLUE );

  00112	68 b2 46 16 ff	 push	 -15317326		; ff1646b2H
  00117	ff d6		 call	 esi
  00119	8b c8		 mov	 ecx, eax
  0011b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 670  : 		g_FontMgr.PrintText( iXPos + 45, iYPos + 78, FONT_SIZE_10, STR(2), m_szPeso.c_str() );

  00121	8b 4d f8	 mov	 ecx, DWORD PTR tv234[ebp]
  00124	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  0012a	50		 push	 eax
  0012b	6a 00		 push	 0
  0012d	6a 02		 push	 2
$LN7@OnNormalRe:
  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00134	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@BMJEMBEF@ioProductLinkButton?3?3OnNormalRen@
  00139	ff d3		 call	 ebx
  0013b	8b c8		 mov	 ecx, eax
  0013d	ff d7		 call	 edi
  0013f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00147	50		 push	 eax
  00148	8b 45 0c	 mov	 eax, DWORD PTR _iYPos$[ebp]
  0014b	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0014e	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00154	83 c0 4e	 add	 eax, 78			; 0000004eH
  00157	0f 57 c0	 xorps	 xmm0, xmm0
  0015a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0015e	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  00161	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00167	83 c0 2d	 add	 eax, 45			; 0000002dH
  0016a	0f 57 c0	 xorps	 xmm0, xmm0
  0016d	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00171	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00176	ff d6		 call	 esi
  00178	8b c8		 mov	 ecx, eax
  0017a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAEXMMMPBD0@Z
$LN1@OnNormalRe:

; 671  : 	}
; 672  : 
; 673  : 	g_FontMgr.SetTextColor( TCT_DEFAULT_DARKGRAY );

  00180	68 3a 3a 3a ff	 push	 -12961222		; ff3a3a3aH
  00185	ff d6		 call	 esi
  00187	8b c8		 mov	 ecx, eax
  00189	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 674  : 	g_FontMgr.PrintText( iXPos + 45, iYPos + 100, FONT_SIZE_10, STR(3) );

  0018f	6a 00		 push	 0
  00191	6a 03		 push	 3
  00193	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00198	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@BMJEMBEF@ioProductLinkButton?3?3OnNormalRen@
  0019d	ff d3		 call	 ebx
  0019f	8b c8		 mov	 ecx, eax
  001a1	ff d7		 call	 edi
  001a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001ab	50		 push	 eax
  001ac	8b 45 0c	 mov	 eax, DWORD PTR _iYPos$[ebp]
  001af	83 ec 0c	 sub	 esp, 12			; 0000000cH
  001b2	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  001b8	83 c0 64	 add	 eax, 100		; 00000064H
  001bb	0f 57 c0	 xorps	 xmm0, xmm0
  001be	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  001c2	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  001c5	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001cb	83 c0 2d	 add	 eax, 45			; 0000002dH
  001ce	0f 57 c0	 xorps	 xmm0, xmm0
  001d1	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  001d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001da	ff d6		 call	 esi
  001dc	50		 push	 eax
  001dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAAXMMMPBDZZ
  001e3	83 c4 14	 add	 esp, 20			; 00000014H
  001e6	5f		 pop	 edi
  001e7	5e		 pop	 esi
  001e8	5b		 pop	 ebx

; 675  : }

  001e9	c9		 leave
  001ea	c2 08 00	 ret	 8
?OnNormalRender@ioProductLinkButton@@MAEXHH@Z ENDP	; ioProductLinkButton::OnNormalRender
_TEXT	ENDS
PUBLIC	?OnDrawNormal@ioProductLinkButton@@MAEXHH@Z	; ioProductLinkButton::OnDrawNormal
EXTRN	__imp_?OnDrawNormal@ioButton@@MAEXHH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?OnDrawNormal@ioProductLinkButton@@MAEXHH@Z
_TEXT	SEGMENT
_iXPos$ = 8						; size = 4
_iYPos$ = 12						; size = 4
?OnDrawNormal@ioProductLinkButton@@MAEXHH@Z PROC	; ioProductLinkButton::OnDrawNormal, COMDAT
; _this$ = ecx

; 678  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 679  : 	ioButton::OnDrawNormal( iXPos, iYPos );

  00004	ff 75 0c	 push	 DWORD PTR _iYPos$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR _iXPos$[ebp]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnDrawNormal@ioButton@@MAEXHH@Z

; 680  : 	OnNormalRender( iXPos, iYPos );

  00012	ff 75 0c	 push	 DWORD PTR _iYPos$[ebp]
  00015	8b 06		 mov	 eax, DWORD PTR [esi]
  00017	ff 75 08	 push	 DWORD PTR _iXPos$[ebp]
  0001a	8b ce		 mov	 ecx, esi
  0001c	ff 90 5c 01 00
	00		 call	 DWORD PTR [eax+348]
  00022	5e		 pop	 esi

; 681  : }

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?OnDrawNormal@ioProductLinkButton@@MAEXHH@Z ENDP	; ioProductLinkButton::OnDrawNormal
_TEXT	ENDS
PUBLIC	?OnDrawOvered@ioProductLinkButton@@MAEXHH@Z	; ioProductLinkButton::OnDrawOvered
EXTRN	__imp_?OnDrawOvered@ioButton@@MAEXHH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?OnDrawOvered@ioProductLinkButton@@MAEXHH@Z
_TEXT	SEGMENT
_iXPos$ = 8						; size = 4
_iYPos$ = 12						; size = 4
?OnDrawOvered@ioProductLinkButton@@MAEXHH@Z PROC	; ioProductLinkButton::OnDrawOvered, COMDAT
; _this$ = ecx

; 684  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 685  : 	ioButton::OnDrawOvered( iXPos, iYPos );

  00004	ff 75 0c	 push	 DWORD PTR _iYPos$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR _iXPos$[ebp]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnDrawOvered@ioButton@@MAEXHH@Z

; 686  : 	OnNormalRender( iXPos, iYPos );

  00012	ff 75 0c	 push	 DWORD PTR _iYPos$[ebp]
  00015	8b 06		 mov	 eax, DWORD PTR [esi]
  00017	ff 75 08	 push	 DWORD PTR _iXPos$[ebp]
  0001a	8b ce		 mov	 ecx, esi
  0001c	ff 90 5c 01 00
	00		 call	 DWORD PTR [eax+348]
  00022	5e		 pop	 esi

; 687  : }

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?OnDrawOvered@ioProductLinkButton@@MAEXHH@Z ENDP	; ioProductLinkButton::OnDrawOvered
_TEXT	ENDS
PUBLIC	?OnDrawPushed@ioProductLinkButton@@MAEXHH@Z	; ioProductLinkButton::OnDrawPushed
EXTRN	__imp_?OnDrawPushed@ioButton@@MAEXHH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?OnDrawPushed@ioProductLinkButton@@MAEXHH@Z
_TEXT	SEGMENT
_iXPos$ = 8						; size = 4
_iYPos$ = 12						; size = 4
?OnDrawPushed@ioProductLinkButton@@MAEXHH@Z PROC	; ioProductLinkButton::OnDrawPushed, COMDAT
; _this$ = ecx

; 690  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 691  : 	ioButton::OnDrawPushed( iXPos, iYPos );

  00004	ff 75 0c	 push	 DWORD PTR _iYPos$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR _iXPos$[ebp]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnDrawPushed@ioButton@@MAEXHH@Z

; 692  : 	OnNormalRender( iXPos, iYPos );

  00012	ff 75 0c	 push	 DWORD PTR _iYPos$[ebp]
  00015	8b 06		 mov	 eax, DWORD PTR [esi]
  00017	ff 75 08	 push	 DWORD PTR _iXPos$[ebp]
  0001a	8b ce		 mov	 ecx, esi
  0001c	ff 90 5c 01 00
	00		 call	 DWORD PTR [eax+348]
  00022	5e		 pop	 esi

; 693  : }

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?OnDrawPushed@ioProductLinkButton@@MAEXHH@Z ENDP	; ioProductLinkButton::OnDrawPushed
_TEXT	ENDS
PUBLIC	??_C@_01JOAMLHOP@?9?$AA@			; `string'
PUBLIC	??_C@_0CE@NNOFDBBF@ioProductLinkButton?3?3OnDrawDisab@ ; `string'
PUBLIC	?OnDrawDisabled@ioProductLinkButton@@MAEXHH@Z	; ioProductLinkButton::OnDrawDisabled
EXTRN	__imp_?OnDrawDisabled@ioButton@@MAEXHH@Z:PROC
;	COMDAT ??_C@_01JOAMLHOP@?9?$AA@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9?$AA@ DB '-', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NNOFDBBF@ioProductLinkButton?3?3OnDrawDisab@
CONST	SEGMENT
??_C@_0CE@NNOFDBBF@ioProductLinkButton?3?3OnDrawDisab@ DB 'ioProductLinkB'
	DB	'utton::OnDrawDisabled', 00H			; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?OnDrawDisabled@ioProductLinkButton@@MAEXHH@Z
_TEXT	SEGMENT
tv163 = 8						; size = 4
_iXPos$ = 8						; size = 4
_iYPos$ = 12						; size = 4
?OnDrawDisabled@ioProductLinkButton@@MAEXHH@Z PROC	; ioProductLinkButton::OnDrawDisabled, COMDAT
; _this$ = ecx

; 696  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 697  : 	ioButton::OnDrawDisabled( iXPos, iYPos );

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _iYPos$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	53		 push	 ebx
  0000a	ff 75 08	 push	 DWORD PTR _iXPos$[ebp]
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnDrawDisabled@ioButton@@MAEXHH@Z

; 698  : 
; 699  : 	g_FontMgr.SetAlignType( TAT_CENTER );

  00013	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?GetSingleton@ioFontManager@@SAAAV1@XZ
  00019	6a 01		 push	 1
  0001b	ff d6		 call	 esi
  0001d	8b c8		 mov	 ecx, eax
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z

; 700  : 	g_FontMgr.SetTextStyle( TS_NORMAL );

  00025	33 ff		 xor	 edi, edi
  00027	57		 push	 edi
  00028	ff d6		 call	 esi
  0002a	8b c8		 mov	 ecx, eax
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z

; 701  : 	g_FontMgr.SetBkColor( 0, 0, 0 );

  00032	57		 push	 edi
  00033	57		 push	 edi
  00034	57		 push	 edi
  00035	ff d6		 call	 esi
  00037	8b c8		 mov	 ecx, eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetBkColor@ioFontManager@@QAEXHHH@Z

; 702  : 	g_FontMgr.SetTextColor( TCT_DEFAULT_LIGHTGRAY );

  0003f	68 a7 a7 a7 ff	 push	 -5789785		; ffa7a7a7H
  00044	ff d6		 call	 esi
  00046	8b c8		 mov	 ecx, eax
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 703  : 	g_FontMgr.PrintText( iXPos + 45, iYPos + 63, FONT_SIZE_10, STR(1) );

  0004e	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  00051	57		 push	 edi
  00052	6a 01		 push	 1
  00054	83 c0 2d	 add	 eax, 45			; 0000002dH
  00057	0f 57 c0	 xorps	 xmm0, xmm0
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0005f	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NNOFDBBF@ioProductLinkButton?3?3OnDrawDisab@
  00068	f3 0f 11 45 08	 movss	 DWORD PTR tv163[ebp], xmm0
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00073	8b c8		 mov	 ecx, eax
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  0007b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00083	50		 push	 eax
  00084	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00087	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0008d	8d 43 3f	 lea	 eax, DWORD PTR [ebx+63]
  00090	0f 57 c0	 xorps	 xmm0, xmm0
  00093	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00097	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0009d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv163[ebp]
  000a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a7	ff d6		 call	 esi
  000a9	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?PrintText@ioFontManager@@QAAXMMMPBDZZ
  000af	50		 push	 eax
  000b0	ff d7		 call	 edi

; 704  : 	g_FontMgr.PrintText( iXPos + 45, iYPos + 78, FONT_SIZE_10, "-");

  000b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000ba	83 c4 14	 add	 esp, 20			; 00000014H
  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_01JOAMLHOP@?9?$AA@
  000c2	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000c5	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000cb	0f 57 c0	 xorps	 xmm0, xmm0
  000ce	83 c3 4e	 add	 ebx, 78			; 0000004eH
  000d1	f3 0f 2a c3	 cvtsi2ss xmm0, ebx
  000d5	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000db	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv163[ebp]
  000e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e5	ff d6		 call	 esi
  000e7	50		 push	 eax
  000e8	ff d7		 call	 edi
  000ea	83 c4 14	 add	 esp, 20			; 00000014H
  000ed	5f		 pop	 edi
  000ee	5e		 pop	 esi
  000ef	5b		 pop	 ebx

; 705  : }

  000f0	5d		 pop	 ebp
  000f1	c2 08 00	 ret	 8
?OnDrawDisabled@ioProductLinkButton@@MAEXHH@Z ENDP	; ioProductLinkButton::OnDrawDisabled
_TEXT	ENDS
PUBLIC	??_7ioProductIconButton@@6B@			; ioProductIconButton::`vftable'
PUBLIC	??0ioProductIconButton@@QAE@XZ			; ioProductIconButton::ioProductIconButton
PUBLIC	??_R4ioProductIconButton@@6B@			; ioProductIconButton::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioProductIconButton@@@8			; ioProductIconButton `RTTI Type Descriptor'
PUBLIC	??_R3ioProductIconButton@@8			; ioProductIconButton::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioProductIconButton@@8			; ioProductIconButton::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioProductIconButton@@8		; ioProductIconButton::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioButton@@8			; ioButton::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3ioButton@@8				; ioButton::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioButton@@8				; ioButton::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioWnd@@8				; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3ioWnd@@8					; ioWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWnd@@8					; ioWnd::`RTTI Base Class Array'
PUBLIC	?AddRenderFrame@ioProductIconButton@@MAEXABVioHashString@@PAVioUIRenderFrame@@@Z ; ioProductIconButton::AddRenderFrame
PUBLIC	?AddRenderImage@ioProductIconButton@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z ; ioProductIconButton::AddRenderImage
PUBLIC	?OnProcess@ioProductIconButton@@MAEXM@Z		; ioProductIconButton::OnProcess
PUBLIC	?OnDrawNormal@ioProductIconButton@@MAEXHH@Z	; ioProductIconButton::OnDrawNormal
PUBLIC	?OnDrawOvered@ioProductIconButton@@MAEXHH@Z	; ioProductIconButton::OnDrawOvered
PUBLIC	?OnDrawPushed@ioProductIconButton@@MAEXHH@Z	; ioProductIconButton::OnDrawPushed
PUBLIC	?OnDrawDisabled@ioProductIconButton@@MAEXHH@Z	; ioProductIconButton::OnDrawDisabled
EXTRN	__imp_??0ioButton@@QAE@XZ:PROC
EXTRN	?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z:PROC ; ioWnd::AddTooltipHelp
EXTRN	?ParseExtraInfo@ioButton@@UAEXAAVioXMLElement@@@Z:PROC ; ioButton::ParseExtraInfo
EXTRN	?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC ; ioWnd::AddNamedRenderImage
EXTRN	?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z:PROC ; ioWnd::RemoveNamedRenderImage
EXTRN	?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z:PROC ; ioWnd::GetNamedRenderImage
EXTRN	?SetWindowAlpha@ioButton@@UAEXH@Z:PROC		; ioButton::SetWindowAlpha
EXTRN	?SetActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetActive
EXTRN	?SetInActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetInActive
EXTRN	?ClearElementImageList@ioWnd@@UAEXXZ:PROC	; ioWnd::ClearElementImageList
EXTRN	?SetSize@ioWnd@@UAEXHH@Z:PROC			; ioWnd::SetSize
EXTRN	?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z:PROC	; ioWnd::SetPositionToDefault
EXTRN	?IsNeedProcess@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsNeedProcess
EXTRN	?IsCanMouseReaction@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsCanMouseReaction
EXTRN	?AddChild@ioWnd@@UAEXPAV1@@Z:PROC		; ioWnd::AddChild
EXTRN	?DeleteChild@ioWnd@@UAEXK@Z:PROC		; ioWnd::DeleteChild
EXTRN	?DeleteAllChild@ioWnd@@UAEXXZ:PROC		; ioWnd::DeleteAllChild
EXTRN	?OnRenderShowAndHide@ioWnd@@MAE_NXZ:PROC	; ioWnd::OnRenderShowAndHide
EXTRN	?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z:PROC ; ioWnd::OnRenderShowAndHideByDefault
EXTRN	?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByTop
EXTRN	?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByDown
EXTRN	?OnRender@ioButton@@MAEXXZ:PROC			; ioButton::OnRender
EXTRN	?OnRenderAfterChild@ioWnd@@MAEXXZ:PROC		; ioWnd::OnRenderAfterChild
EXTRN	?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z:PROC	; ioWnd::OnMouseProcess
EXTRN	?CheckFrameReSize@ioButton@@MAEXHHHH@Z:PROC	; ioButton::CheckFrameReSize
EXTRN	?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z:PROC ; ioWnd::RenderImageList
EXTRN	?iwm_create@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_create
EXTRN	?iwm_destroy@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_destroy
EXTRN	?iwm_lbuttondown@ioButton@@UAEXABVioMouse@@@Z:PROC ; ioButton::iwm_lbuttondown
EXTRN	?iwm_lbuttonup@ioButton@@UAEXABVioMouse@@@Z:PROC ; ioButton::iwm_lbuttonup
EXTRN	?iwm_lbuttonDBLCLK@ioButton@@UAEXABVioMouse@@@Z:PROC ; ioButton::iwm_lbuttonDBLCLK
EXTRN	?iwm_rbuttondown@ioButton@@UAEXABVioMouse@@@Z:PROC ; ioButton::iwm_rbuttondown
EXTRN	?iwm_rbuttonup@ioButton@@UAEXABVioMouse@@@Z:PROC ; ioButton::iwm_rbuttonup
EXTRN	?iwm_command@ioWnd@@UAEXPAV1@HK@Z:PROC		; ioWnd::iwm_command
EXTRN	?iwm_mouseover@ioButton@@UAEXABVioMouse@@@Z:PROC ; ioButton::iwm_mouseover
EXTRN	?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mousemove
EXTRN	?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseleave
EXTRN	?iwm_vscroll@ioWnd@@UAEXKH@Z:PROC		; ioWnd::iwm_vscroll
EXTRN	?iwm_wheel@ioWnd@@UAEXH@Z:PROC			; ioWnd::iwm_wheel
EXTRN	?iwm_show@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_show
EXTRN	?iwm_hide@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_hide
EXTRN	?iwm_esc@ioWnd@@UAE_NXZ:PROC			; ioWnd::iwm_esc
EXTRN	?iwm_spacebar@ioWnd@@UAE_NXZ:PROC		; ioWnd::iwm_spacebar
EXTRN	?iwm_gototop@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_gototop
EXTRN	?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragenter
EXTRN	?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragover
EXTRN	?iwm_dragleave@ioWnd@@UAEXXZ:PROC		; ioWnd::iwm_dragleave
EXTRN	?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z:PROC ; ioWnd::iwm_dropitem
EXTRN	?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z:PROC ; ioWnd::iwm_dropdone
EXTRN	?IsEXType@ioWnd@@UBE_NXZ:PROC			; ioWnd::IsEXType
EXTRN	?GetWndType@ioButton@@UBEKXZ:PROC		; ioButton::GetWndType
EXTRN	?RenderWnd@ioWnd@@UAEXXZ:PROC			; ioWnd::RenderWnd
EXTRN	?SetIDEX@ioWnd@@UAEXAAK_N@Z:PROC		; ioWnd::SetIDEX
EXTRN	?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC	; ioWnd::ParseXML
EXTRN	?GetHeaderFileName@ioButton@@UAEPBDXZ:PROC	; ioButton::GetHeaderFileName
EXTRN	?GetTemplateName@ioButton@@UAEPBDXZ:PROC	; ioButton::GetTemplateName
EXTRN	?GetDefClassName@ioButton@@UBEPBDXZ:PROC	; ioButton::GetDefClassName
EXTRN	?_Clone@ioButton@@UAEPAVioWnd@@XZ:PROC		; ioButton::_Clone
EXTRN	?Copy@ioButton@@UAEXPAVioWnd@@@Z:PROC		; ioButton::Copy
EXTRN	?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z:PROC	; ioWnd::Save
EXTRN	?SetSaveData@ioButton@@UAEXAAVioXMLElement@@@Z:PROC ; ioButton::SetSaveData
EXTRN	?SetPosX@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosX
EXTRN	?SetPosY@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosY
EXTRN	?SetWidth@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetWidth
EXTRN	?SetHeight@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetHeight
EXTRN	?GetNumFixedRenderFrame@ioButton@@UBEHXZ:PROC	; ioButton::GetNumFixedRenderFrame
EXTRN	?GetFixedRenderFrameType@ioButton@@UAEPBDH@Z:PROC ; ioButton::GetFixedRenderFrameType
EXTRN	?GetRenderFrame@ioButton@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioButton::GetRenderFrame
EXTRN	?GetNumFixedRenderImage@ioButton@@UBEHXZ:PROC	; ioButton::GetNumFixedRenderImage
EXTRN	?GetFixedRenderImageType@ioButton@@UAEPBDH@Z:PROC ; ioButton::GetFixedRenderImageType
EXTRN	?GetRenderImage@ioButton@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioButton::GetRenderImage
EXTRN	?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z:PROC ; ioWnd::AddEffect
EXTRN	?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z:PROC ; ioWnd::GetEffect
EXTRN	??_EioProductIconButton@@UAEPAXI@Z:PROC		; ioProductIconButton::`vector deleting destructor'
EXTRN	?OnDrawOveredAdd@ioButton@@MAEXHH@Z:PROC	; ioButton::OnDrawOveredAdd
EXTRN	?OnDrawExDisabledNormal@ioButton@@MAEXHH@Z:PROC	; ioButton::OnDrawExDisabledNormal
EXTRN	?OnDrawExDisabledOvered@ioButton@@MAEXHH@Z:PROC	; ioButton::OnDrawExDisabledOvered
EXTRN	?OnDrawExDisabledPushed@ioButton@@MAEXHH@Z:PROC	; ioButton::OnDrawExDisabledPushed
EXTRN	?OnDrawBack@ioButton@@MAEXHH@Z:PROC		; ioButton::OnDrawBack
EXTRN	?OnDrawNormalList@ioButton@@MAEXHH@Z:PROC	; ioButton::OnDrawNormalList
EXTRN	?OnDrawDisableList@ioButton@@MAEXHH@Z:PROC	; ioButton::OnDrawDisableList
;	COMDAT ??_R2ioWnd@@8
rdata$r	SEGMENT
??_R2ioWnd@@8 DD FLAT:??_R1A@?0A@EA@ioWnd@@8		; ioWnd::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWnd@@8
rdata$r	SEGMENT
??_R3ioWnd@@8 DD 00H					; ioWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWnd@@8 DD FLAT:??_R0?AVioWnd@@@8	; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2ioButton@@8
rdata$r	SEGMENT
??_R2ioButton@@8 DD FLAT:??_R1A@?0A@EA@ioButton@@8	; ioButton::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3ioButton@@8
rdata$r	SEGMENT
??_R3ioButton@@8 DD 00H					; ioButton::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioButton@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioButton@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioButton@@8 DD FLAT:??_R0?AVioButton@@@8	; ioButton::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioButton@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioProductIconButton@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioProductIconButton@@8 DD FLAT:??_R0?AVioProductIconButton@@@8 ; ioProductIconButton::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioProductIconButton@@8
rdata$r	ENDS
;	COMDAT ??_R2ioProductIconButton@@8
rdata$r	SEGMENT
??_R2ioProductIconButton@@8 DD FLAT:??_R1A@?0A@EA@ioProductIconButton@@8 ; ioProductIconButton::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioButton@@8
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3ioProductIconButton@@8
rdata$r	SEGMENT
??_R3ioProductIconButton@@8 DD 00H			; ioProductIconButton::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ioProductIconButton@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioProductIconButton@@@8
_DATA	SEGMENT
??_R0?AVioProductIconButton@@@8 DD FLAT:??_7type_info@@6B@ ; ioProductIconButton `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioProductIconButton@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioProductIconButton@@6B@
rdata$r	SEGMENT
??_R4ioProductIconButton@@6B@ DD 00H			; ioProductIconButton::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioProductIconButton@@@8
	DD	FLAT:??_R3ioProductIconButton@@8
rdata$r	ENDS
;	COMDAT ??_7ioProductIconButton@@6B@
CONST	SEGMENT
??_7ioProductIconButton@@6B@ DD FLAT:??_R4ioProductIconButton@@6B@ ; ioProductIconButton::`vftable'
	DD	FLAT:?AddRenderFrame@ioProductIconButton@@MAEXABVioHashString@@PAVioUIRenderFrame@@@Z
	DD	FLAT:?AddRenderImage@ioProductIconButton@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z
	DD	FLAT:?ParseExtraInfo@ioButton@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z
	DD	FLAT:?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z
	DD	FLAT:?SetWindowAlpha@ioButton@@UAEXH@Z
	DD	FLAT:?SetActive@ioWnd@@UAEXXZ
	DD	FLAT:?SetInActive@ioWnd@@UAEXXZ
	DD	FLAT:?ClearElementImageList@ioWnd@@UAEXXZ
	DD	FLAT:?SetSize@ioWnd@@UAEXHH@Z
	DD	FLAT:?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z
	DD	FLAT:?IsNeedProcess@ioWnd@@UBE_NXZ
	DD	FLAT:?IsCanMouseReaction@ioWnd@@UBE_NXZ
	DD	FLAT:?AddChild@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?DeleteChild@ioWnd@@UAEXK@Z
	DD	FLAT:?DeleteAllChild@ioWnd@@UAEXXZ
	DD	FLAT:?OnRenderShowAndHide@ioWnd@@MAE_NXZ
	DD	FLAT:?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRender@ioButton@@MAEXXZ
	DD	FLAT:?OnRenderAfterChild@ioWnd@@MAEXXZ
	DD	FLAT:?OnProcess@ioProductIconButton@@MAEXM@Z
	DD	FLAT:?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z
	DD	FLAT:?CheckFrameReSize@ioButton@@MAEXHHHH@Z
	DD	FLAT:?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z
	DD	FLAT:?iwm_create@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_destroy@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_lbuttondown@ioButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonup@ioButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonDBLCLK@ioButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttondown@ioButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttonup@ioButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_command@ioWnd@@UAEXPAV1@HK@Z
	DD	FLAT:?iwm_mouseover@ioButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_vscroll@ioWnd@@UAEXKH@Z
	DD	FLAT:?iwm_wheel@ioWnd@@UAEXH@Z
	DD	FLAT:?iwm_show@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_hide@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_esc@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_spacebar@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_gototop@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragleave@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z
	DD	FLAT:?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z
	DD	FLAT:?IsEXType@ioWnd@@UBE_NXZ
	DD	FLAT:?GetWndType@ioButton@@UBEKXZ
	DD	FLAT:?RenderWnd@ioWnd@@UAEXXZ
	DD	FLAT:?SetIDEX@ioWnd@@UAEXAAK_N@Z
	DD	FLAT:?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?GetHeaderFileName@ioButton@@UAEPBDXZ
	DD	FLAT:?GetTemplateName@ioButton@@UAEPBDXZ
	DD	FLAT:?GetDefClassName@ioButton@@UBEPBDXZ
	DD	FLAT:?_Clone@ioButton@@UAEPAVioWnd@@XZ
	DD	FLAT:?Copy@ioButton@@UAEXPAVioWnd@@@Z
	DD	FLAT:?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z
	DD	FLAT:?SetSaveData@ioButton@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?SetPosX@ioWnd@@UAEXH@Z
	DD	FLAT:?SetPosY@ioWnd@@UAEXH@Z
	DD	FLAT:?SetWidth@ioWnd@@UAEXH@Z
	DD	FLAT:?SetHeight@ioWnd@@UAEXH@Z
	DD	FLAT:?GetNumFixedRenderFrame@ioButton@@UBEHXZ
	DD	FLAT:?GetFixedRenderFrameType@ioButton@@UAEPBDH@Z
	DD	FLAT:?GetRenderFrame@ioButton@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?GetNumFixedRenderImage@ioButton@@UBEHXZ
	DD	FLAT:?GetFixedRenderImageType@ioButton@@UAEPBDH@Z
	DD	FLAT:?GetRenderImage@ioButton@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z
	DD	FLAT:?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z
	DD	FLAT:??_EioProductIconButton@@UAEPAXI@Z
	DD	FLAT:?OnDrawNormal@ioProductIconButton@@MAEXHH@Z
	DD	FLAT:?OnDrawOvered@ioProductIconButton@@MAEXHH@Z
	DD	FLAT:?OnDrawOveredAdd@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawPushed@ioProductIconButton@@MAEXHH@Z
	DD	FLAT:?OnDrawDisabled@ioProductIconButton@@MAEXHH@Z
	DD	FLAT:?OnDrawExDisabledNormal@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawExDisabledOvered@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawExDisabledPushed@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawBack@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawNormalList@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawDisableList@ioButton@@MAEXHH@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0ioProductIconButton@@QAE@XZ
_TEXT	SEGMENT
??0ioProductIconButton@@QAE@XZ PROC			; ioProductIconButton::ioProductIconButton, COMDAT
; _this$ = ecx

; 710  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioButton@@QAE@XZ

; 711  : 	m_pIcon					= NULL;

  00009	33 c0		 xor	 eax, eax

; 712  : 	m_pIconBack				= NULL;
; 713  : 	m_pIconEmpty			= NULL;
; 714  : 	m_pNewMark				= NULL;
; 715  : 	m_pHotMark				= NULL;
; 716  : 	m_pEventMark			= NULL;
; 717  : 	m_pLimitMark			= NULL;
; 718  : 	m_pLimitDayMark			= NULL;
; 719  : 	m_pSoldOutMark			= NULL;
; 720  : 	m_pGradeLimitClearMark	= NULL;
; 721  : 	m_pNumText				= NULL;
; 722  : 	m_pPlusText				= NULL;
; 723  : 	m_pCostumeMark			= NULL;
; 724  : 
; 725  : 	m_pStateBlueFrm			= NULL;
; 726  : 	m_pStatePinkFrm			= NULL;
; 727  : 	m_pStateRedFrm			= NULL;
; 728  : 
; 729  : 	m_iMarkType				= SHOP_MARK_TYPE_NONE;
; 730  : 	m_iReinForceNumber		= 0;
; 731  : 	m_iLimitDay				= 0;
; 732  : 
; 733  : 	m_bCostume				= false;
; 734  : 	m_bScreen				= false;
; 735  : 
; 736  : 	m_dwScreenTime			= 200;

  0000b	b9 c8 00 00 00	 mov	 ecx, 200		; 000000c8H
  00010	89 86 fc 01 00
	00		 mov	 DWORD PTR [esi+508], eax
  00016	89 86 00 02 00
	00		 mov	 DWORD PTR [esi+512], eax
  0001c	89 86 04 02 00
	00		 mov	 DWORD PTR [esi+516], eax
  00022	89 86 08 02 00
	00		 mov	 DWORD PTR [esi+520], eax
  00028	89 86 0c 02 00
	00		 mov	 DWORD PTR [esi+524], eax
  0002e	89 86 10 02 00
	00		 mov	 DWORD PTR [esi+528], eax
  00034	89 86 14 02 00
	00		 mov	 DWORD PTR [esi+532], eax
  0003a	89 86 18 02 00
	00		 mov	 DWORD PTR [esi+536], eax
  00040	89 86 1c 02 00
	00		 mov	 DWORD PTR [esi+540], eax
  00046	89 86 20 02 00
	00		 mov	 DWORD PTR [esi+544], eax
  0004c	89 86 24 02 00
	00		 mov	 DWORD PTR [esi+548], eax
  00052	89 86 28 02 00
	00		 mov	 DWORD PTR [esi+552], eax
  00058	89 86 2c 02 00
	00		 mov	 DWORD PTR [esi+556], eax
  0005e	89 86 30 02 00
	00		 mov	 DWORD PTR [esi+560], eax
  00064	89 86 34 02 00
	00		 mov	 DWORD PTR [esi+564], eax
  0006a	89 86 38 02 00
	00		 mov	 DWORD PTR [esi+568], eax
  00070	89 86 3c 02 00
	00		 mov	 DWORD PTR [esi+572], eax
  00076	89 86 40 02 00
	00		 mov	 DWORD PTR [esi+576], eax
  0007c	89 86 44 02 00
	00		 mov	 DWORD PTR [esi+580], eax
  00082	66 89 86 48 02
	00 00		 mov	 WORD PTR [esi+584], ax

; 737  : 	m_dwScreenGapTime		= 200;
; 738  : 	m_dwScreenCheckTime		= 0;

  00089	89 86 54 02 00
	00		 mov	 DWORD PTR [esi+596], eax

; 739  : 	m_nGradeType = 0;

  0008f	89 86 58 02 00
	00		 mov	 DWORD PTR [esi+600], eax
  00095	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioProductIconButton@@6B@
  0009b	89 8e 4c 02 00
	00		 mov	 DWORD PTR [esi+588], ecx
  000a1	89 8e 50 02 00
	00		 mov	 DWORD PTR [esi+592], ecx

; 740  : }

  000a7	8b c6		 mov	 eax, esi
  000a9	5e		 pop	 esi
  000aa	c3		 ret	 0
??0ioProductIconButton@@QAE@XZ ENDP			; ioProductIconButton::ioProductIconButton
_TEXT	ENDS
PUBLIC	??1ioProductIconButton@@UAE@XZ			; ioProductIconButton::~ioProductIconButton
EXTRN	__imp_??1ioButton@@UAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioProductIconButton@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioProductIconButton@@UAE@XZ$0
__ehfuncinfo$??1ioProductIconButton@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ioProductIconButton@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioProductIconButton@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioProductIconButton@@UAE@XZ PROC			; ioProductIconButton::~ioProductIconButton, COMDAT
; _this$ = ecx

; 743  : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioProductIconButton@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioProductIconButton@@6B@

; 744  : 	SAFEDELETE( m_pIcon );

  00017	8b 8e fc 01 00
	00		 mov	 ecx, DWORD PTR [esi+508]
  0001d	33 ff		 xor	 edi, edi
  0001f	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00022	3b cf		 cmp	 ecx, edi
  00024	74 0d		 je	 SHORT $LN16@ioProductI
  00026	8b 01		 mov	 eax, DWORD PTR [ecx]
  00028	6a 01		 push	 1
  0002a	ff 50 40	 call	 DWORD PTR [eax+64]
  0002d	89 be fc 01 00
	00		 mov	 DWORD PTR [esi+508], edi
$LN16@ioProductI:

; 745  : 	SAFEDELETE( m_pIconBack );

  00033	8b 8e 00 02 00
	00		 mov	 ecx, DWORD PTR [esi+512]
  00039	3b cf		 cmp	 ecx, edi
  0003b	74 0d		 je	 SHORT $LN15@ioProductI
  0003d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003f	6a 01		 push	 1
  00041	ff 50 40	 call	 DWORD PTR [eax+64]
  00044	89 be 00 02 00
	00		 mov	 DWORD PTR [esi+512], edi
$LN15@ioProductI:

; 746  : 	SAFEDELETE( m_pIconEmpty );

  0004a	8b 8e 04 02 00
	00		 mov	 ecx, DWORD PTR [esi+516]
  00050	3b cf		 cmp	 ecx, edi
  00052	74 0d		 je	 SHORT $LN14@ioProductI
  00054	8b 01		 mov	 eax, DWORD PTR [ecx]
  00056	6a 01		 push	 1
  00058	ff 50 40	 call	 DWORD PTR [eax+64]
  0005b	89 be 04 02 00
	00		 mov	 DWORD PTR [esi+516], edi
$LN14@ioProductI:

; 747  : 	SAFEDELETE( m_pNewMark );

  00061	8b 8e 08 02 00
	00		 mov	 ecx, DWORD PTR [esi+520]
  00067	3b cf		 cmp	 ecx, edi
  00069	74 0d		 je	 SHORT $LN13@ioProductI
  0006b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0006d	6a 01		 push	 1
  0006f	ff 50 40	 call	 DWORD PTR [eax+64]
  00072	89 be 08 02 00
	00		 mov	 DWORD PTR [esi+520], edi
$LN13@ioProductI:

; 748  : 	SAFEDELETE( m_pHotMark );

  00078	8b 8e 0c 02 00
	00		 mov	 ecx, DWORD PTR [esi+524]
  0007e	3b cf		 cmp	 ecx, edi
  00080	74 0d		 je	 SHORT $LN12@ioProductI
  00082	8b 01		 mov	 eax, DWORD PTR [ecx]
  00084	6a 01		 push	 1
  00086	ff 50 40	 call	 DWORD PTR [eax+64]
  00089	89 be 0c 02 00
	00		 mov	 DWORD PTR [esi+524], edi
$LN12@ioProductI:

; 749  : 	SAFEDELETE( m_pEventMark );

  0008f	8b 8e 10 02 00
	00		 mov	 ecx, DWORD PTR [esi+528]
  00095	3b cf		 cmp	 ecx, edi
  00097	74 0d		 je	 SHORT $LN11@ioProductI
  00099	8b 01		 mov	 eax, DWORD PTR [ecx]
  0009b	6a 01		 push	 1
  0009d	ff 50 40	 call	 DWORD PTR [eax+64]
  000a0	89 be 10 02 00
	00		 mov	 DWORD PTR [esi+528], edi
$LN11@ioProductI:

; 750  : 	SAFEDELETE( m_pLimitMark );

  000a6	8b 8e 14 02 00
	00		 mov	 ecx, DWORD PTR [esi+532]
  000ac	3b cf		 cmp	 ecx, edi
  000ae	74 0d		 je	 SHORT $LN10@ioProductI
  000b0	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b2	6a 01		 push	 1
  000b4	ff 50 40	 call	 DWORD PTR [eax+64]
  000b7	89 be 14 02 00
	00		 mov	 DWORD PTR [esi+532], edi
$LN10@ioProductI:

; 751  : 	SAFEDELETE( m_pSoldOutMark );

  000bd	8b 8e 1c 02 00
	00		 mov	 ecx, DWORD PTR [esi+540]
  000c3	3b cf		 cmp	 ecx, edi
  000c5	74 0d		 je	 SHORT $LN9@ioProductI
  000c7	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c9	6a 01		 push	 1
  000cb	ff 50 40	 call	 DWORD PTR [eax+64]
  000ce	89 be 1c 02 00
	00		 mov	 DWORD PTR [esi+540], edi
$LN9@ioProductI:

; 752  : 	SAFEDELETE( m_pLimitDayMark );

  000d4	8b 8e 18 02 00
	00		 mov	 ecx, DWORD PTR [esi+536]
  000da	3b cf		 cmp	 ecx, edi
  000dc	74 0d		 je	 SHORT $LN8@ioProductI
  000de	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e0	6a 01		 push	 1
  000e2	ff 50 40	 call	 DWORD PTR [eax+64]
  000e5	89 be 18 02 00
	00		 mov	 DWORD PTR [esi+536], edi
$LN8@ioProductI:

; 753  : 	SAFEDELETE( m_pGradeLimitClearMark );

  000eb	8b 8e 20 02 00
	00		 mov	 ecx, DWORD PTR [esi+544]
  000f1	3b cf		 cmp	 ecx, edi
  000f3	74 0d		 je	 SHORT $LN7@ioProductI
  000f5	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f7	6a 01		 push	 1
  000f9	ff 50 40	 call	 DWORD PTR [eax+64]
  000fc	89 be 20 02 00
	00		 mov	 DWORD PTR [esi+544], edi
$LN7@ioProductI:

; 754  : 	SAFEDELETE( m_pNumText );

  00102	8b 8e 24 02 00
	00		 mov	 ecx, DWORD PTR [esi+548]
  00108	3b cf		 cmp	 ecx, edi
  0010a	74 0d		 je	 SHORT $LN6@ioProductI
  0010c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0010e	6a 01		 push	 1
  00110	ff 50 40	 call	 DWORD PTR [eax+64]
  00113	89 be 24 02 00
	00		 mov	 DWORD PTR [esi+548], edi
$LN6@ioProductI:

; 755  : 	SAFEDELETE( m_pPlusText );

  00119	8b 8e 28 02 00
	00		 mov	 ecx, DWORD PTR [esi+552]
  0011f	3b cf		 cmp	 ecx, edi
  00121	74 0d		 je	 SHORT $LN5@ioProductI
  00123	8b 01		 mov	 eax, DWORD PTR [ecx]
  00125	6a 01		 push	 1
  00127	ff 50 40	 call	 DWORD PTR [eax+64]
  0012a	89 be 28 02 00
	00		 mov	 DWORD PTR [esi+552], edi
$LN5@ioProductI:

; 756  : 	SAFEDELETE( m_pCostumeMark );

  00130	8b 8e 2c 02 00
	00		 mov	 ecx, DWORD PTR [esi+556]
  00136	3b cf		 cmp	 ecx, edi
  00138	74 0d		 je	 SHORT $LN4@ioProductI
  0013a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0013c	6a 01		 push	 1
  0013e	ff 50 40	 call	 DWORD PTR [eax+64]
  00141	89 be 2c 02 00
	00		 mov	 DWORD PTR [esi+556], edi
$LN4@ioProductI:

; 757  : 
; 758  : 	SAFEDELETE( m_pStateBlueFrm );

  00147	8b 8e 30 02 00
	00		 mov	 ecx, DWORD PTR [esi+560]
  0014d	3b cf		 cmp	 ecx, edi
  0014f	74 0d		 je	 SHORT $LN3@ioProductI
  00151	8b 01		 mov	 eax, DWORD PTR [ecx]
  00153	6a 01		 push	 1
  00155	ff 50 40	 call	 DWORD PTR [eax+64]
  00158	89 be 30 02 00
	00		 mov	 DWORD PTR [esi+560], edi
$LN3@ioProductI:

; 759  : 	SAFEDELETE( m_pStatePinkFrm );

  0015e	8b 8e 34 02 00
	00		 mov	 ecx, DWORD PTR [esi+564]
  00164	3b cf		 cmp	 ecx, edi
  00166	74 0d		 je	 SHORT $LN2@ioProductI
  00168	8b 01		 mov	 eax, DWORD PTR [ecx]
  0016a	6a 01		 push	 1
  0016c	ff 50 40	 call	 DWORD PTR [eax+64]
  0016f	89 be 34 02 00
	00		 mov	 DWORD PTR [esi+564], edi
$LN2@ioProductI:

; 760  : 	SAFEDELETE( m_pStateRedFrm );

  00175	8b 8e 38 02 00
	00		 mov	 ecx, DWORD PTR [esi+568]
  0017b	3b cf		 cmp	 ecx, edi
  0017d	74 0d		 je	 SHORT $LN1@ioProductI
  0017f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00181	6a 01		 push	 1
  00183	ff 50 40	 call	 DWORD PTR [eax+64]
  00186	89 be 38 02 00
	00		 mov	 DWORD PTR [esi+568], edi
$LN1@ioProductI:

; 761  : }

  0018c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00190	8b ce		 mov	 ecx, esi
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioButton@@UAE@XZ
  00198	e8 00 00 00 00	 call	 __EH_epilog3
  0019d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioProductIconButton@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioButton@@UAE@XZ
__ehhandler$??1ioProductIconButton@@UAE@XZ:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioProductIconButton@@UAE@XZ
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioProductIconButton@@UAE@XZ ENDP			; ioProductIconButton::~ioProductIconButton
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	__real@3f2b851f
PUBLIC	?OnIconRender@ioProductIconButton@@IAEXHHW4UIRenderType@@0@Z ; ioProductIconButton::OnIconRender
EXTRN	?RenderGradeIconBack@ioUIImageRenderManager@@QAEXHHHMW4UIRenderType@@W4TextureFilterOption@@HHH_N0@Z:PROC ; ioUIImageRenderManager::RenderGradeIconBack
EXTRN	?GetSingleton@ioUIImageRenderManager@@SAAAV1@XZ:PROC ; ioUIImageRenderManager::GetSingleton
EXTRN	__imp_?GetHeight@ioWnd@@QBEHXZ:PROC
;	COMDAT __real@3f2b851f
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\newshopstartwnd.cpp
CONST	SEGMENT
__real@3f2b851f DD 03f2b851fr			; 0.67
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?OnIconRender@ioProductIconButton@@IAEXHHW4UIRenderType@@0@Z
_TEXT	SEGMENT
_iXPos$ = 8						; size = 4
_iYPos$ = 12						; size = 4
_eIconBackType$ = 16					; size = 4
_eIconType$ = 20					; size = 4
?OnIconRender@ioProductIconButton@@IAEXHHW4UIRenderType@@0@Z PROC ; ioProductIconButton::OnIconRender, COMDAT
; _this$ = ecx

; 940  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx

; 941  : 	if( m_pIconBack )

  00008	33 ff		 xor	 edi, edi
  0000a	39 be 00 02 00
	00		 cmp	 DWORD PTR [esi+512], edi
  00010	74 4f		 je	 SHORT $LN6@OnIconRend

; 942  : 		m_pIconBack->Render( iXPos + GetWidth()/2, iYPos + GetHeight()/2, eIconBackType, TFO_BILINEAR );

  00012	8b 86 00 02 00
	00		 mov	 eax, DWORD PTR [esi+512]
  00018	8b 18		 mov	 ebx, DWORD PTR [eax]
  0001a	57		 push	 edi
  0001b	57		 push	 edi
  0001c	6a 01		 push	 1
  0001e	ff 75 10	 push	 DWORD PTR _eIconBackType$[ebp]
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioWnd@@QBEHXZ
  00027	99		 cdq
  00028	2b c2		 sub	 eax, edx
  0002a	d1 f8		 sar	 eax, 1
  0002c	03 45 0c	 add	 eax, DWORD PTR _iYPos$[ebp]
  0002f	51		 push	 ecx
  00030	0f 57 c0	 xorps	 xmm0, xmm0
  00033	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00037	8b ce		 mov	 ecx, esi
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioWnd@@QBEHXZ
  00044	99		 cdq
  00045	2b c2		 sub	 eax, edx
  00047	d1 f8		 sar	 eax, 1
  00049	03 45 08	 add	 eax, DWORD PTR _iXPos$[ebp]
  0004c	51		 push	 ecx
  0004d	8b 8e 00 02 00
	00		 mov	 ecx, DWORD PTR [esi+512]
  00053	0f 57 c0	 xorps	 xmm0, xmm0
  00056	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	ff 13		 call	 DWORD PTR [ebx]
$LN6@OnIconRend:

; 943  : 
; 944  : 	if ( eIconType != UI_RENDER_SCREEN )

  00061	83 7d 14 01	 cmp	 DWORD PTR _eIconType$[ebp], 1
  00065	74 50		 je	 SHORT $LN2@OnIconRend

; 945  : 		g_UIImageRenderMgr.RenderGradeIconBack( m_nGradeType, iXPos + GetWidth()/2, iYPos + GetHeight()/2, 0.67f, eIconType );

  00067	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2b851f
  0006f	57		 push	 edi
  00070	57		 push	 edi
  00071	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00076	50		 push	 eax
  00077	50		 push	 eax
  00078	50		 push	 eax
  00079	57		 push	 edi
  0007a	ff 75 14	 push	 DWORD PTR _eIconType$[ebp]
  0007d	51		 push	 ecx
  0007e	8b ce		 mov	 ecx, esi
  00080	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioWnd@@QBEHXZ
  0008b	99		 cdq
  0008c	2b c2		 sub	 eax, edx
  0008e	d1 f8		 sar	 eax, 1
  00090	03 45 0c	 add	 eax, DWORD PTR _iYPos$[ebp]
  00093	8b ce		 mov	 ecx, esi
  00095	50		 push	 eax
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioWnd@@QBEHXZ
  0009c	99		 cdq
  0009d	2b c2		 sub	 eax, edx
  0009f	d1 f8		 sar	 eax, 1
  000a1	03 45 08	 add	 eax, DWORD PTR _iXPos$[ebp]
  000a4	50		 push	 eax
  000a5	ff b6 58 02 00
	00		 push	 DWORD PTR [esi+600]
  000ab	e8 00 00 00 00	 call	 ?GetSingleton@ioUIImageRenderManager@@SAAAV1@XZ ; ioUIImageRenderManager::GetSingleton
  000b0	8b c8		 mov	 ecx, eax
  000b2	e8 00 00 00 00	 call	 ?RenderGradeIconBack@ioUIImageRenderManager@@QAEXHHHMW4UIRenderType@@W4TextureFilterOption@@HHH_N0@Z ; ioUIImageRenderManager::RenderGradeIconBack
$LN2@OnIconRend:

; 946  : 
; 947  : 	if( m_pIcon )

  000b7	39 be fc 01 00
	00		 cmp	 DWORD PTR [esi+508], edi
  000bd	74 51		 je	 SHORT $LN1@OnIconRend

; 948  : 		m_pIcon->Render( iXPos + GetWidth()/2, iYPos + GetHeight()/2, eIconType, TFO_BILINEAR );

  000bf	8b 86 fc 01 00
	00		 mov	 eax, DWORD PTR [esi+508]
  000c5	8b 18		 mov	 ebx, DWORD PTR [eax]
  000c7	57		 push	 edi
  000c8	57		 push	 edi
  000c9	6a 01		 push	 1
  000cb	ff 75 14	 push	 DWORD PTR _eIconType$[ebp]
  000ce	8b ce		 mov	 ecx, esi
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioWnd@@QBEHXZ
  000d6	99		 cdq
  000d7	2b c2		 sub	 eax, edx
  000d9	d1 f8		 sar	 eax, 1
  000db	03 45 0c	 add	 eax, DWORD PTR _iYPos$[ebp]
  000de	51		 push	 ecx
  000df	0f 57 c0	 xorps	 xmm0, xmm0
  000e2	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000e6	8b ce		 mov	 ecx, esi
  000e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioWnd@@QBEHXZ
  000f3	99		 cdq
  000f4	2b c2		 sub	 eax, edx
  000f6	d1 f8		 sar	 eax, 1
  000f8	03 45 08	 add	 eax, DWORD PTR _iXPos$[ebp]
  000fb	51		 push	 ecx
  000fc	8b 8e fc 01 00
	00		 mov	 ecx, DWORD PTR [esi+508]
  00102	0f 57 c0	 xorps	 xmm0, xmm0
  00105	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00109	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010e	ff 13		 call	 DWORD PTR [ebx]
$LN1@OnIconRend:
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx

; 949  : }

  00113	5d		 pop	 ebp
  00114	c2 10 00	 ret	 16			; 00000010H
?OnIconRender@ioProductIconButton@@IAEXHHW4UIRenderType@@0@Z ENDP ; ioProductIconButton::OnIconRender
_TEXT	ENDS
PUBLIC	??_C@_05EADLFBFB@D?9Day?$AA@			; `string'
PUBLIC	__real@3f0ccccd
PUBLIC	??_C@_0CC@EJMLEDMO@ioProductIconButton?3?3OnMarkRende@ ; `string'
PUBLIC	?OnMarkRender@ioProductIconButton@@IAEXHH@Z	; ioProductIconButton::OnMarkRender
EXTRN	__imp_?PrintText@ioFontManager@@QAEXMMMPBDH@Z:PROC
;	COMDAT ??_C@_05EADLFBFB@D?9Day?$AA@
CONST	SEGMENT
??_C@_05EADLFBFB@D?9Day?$AA@ DB 'D-Day', 00H		; `string'
CONST	ENDS
;	COMDAT __real@3f0ccccd
CONST	SEGMENT
__real@3f0ccccd DD 03f0ccccdr			; 0.55
CONST	ENDS
;	COMDAT ??_C@_0CC@EJMLEDMO@ioProductIconButton?3?3OnMarkRende@
CONST	SEGMENT
??_C@_0CC@EJMLEDMO@ioProductIconButton?3?3OnMarkRende@ DB 'ioProductIconB'
	DB	'utton::OnMarkRender', 00H			; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?OnMarkRender@ioProductIconButton@@IAEXHH@Z
_TEXT	SEGMENT
tv719 = -8						; size = 4
tv717 = -4						; size = 4
_iXPos$ = 8						; size = 4
tv773 = 12						; size = 4
_iYPos$ = 12						; size = 4
?OnMarkRender@ioProductIconButton@@IAEXHH@Z PROC	; ioProductIconButton::OnMarkRender, COMDAT
; _this$ = ecx

; 953  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 954  : 	if( m_iMarkType == SHOP_MARK_TYPE_NEW )

  00009	8b 86 3c 02 00
	00		 mov	 eax, DWORD PTR [esi+572]
  0000f	83 f8 02	 cmp	 eax, 2
  00012	75 41		 jne	 SHORT $LN39@OnMarkRend

; 955  : 	{
; 956  : 		if( m_pNewMark )

  00014	33 db		 xor	 ebx, ebx
  00016	39 9e 08 02 00
	00		 cmp	 DWORD PTR [esi+520], ebx
  0001c	0f 84 4d 06 00
	00		 je	 $LN3@OnMarkRend

; 957  : 			m_pNewMark->Render( iXPos + X_MARK_OFFSET, iYPos + Y_MARK_OFFSET, UI_RENDER_NORMAL );

  00022	8b 8e 08 02 00
	00		 mov	 ecx, DWORD PTR [esi+520]
$LN47@OnMarkRend:
  00028	8b 55 0c	 mov	 edx, DWORD PTR _iYPos$[ebp]
  0002b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002d	53		 push	 ebx
  0002e	53		 push	 ebx
  0002f	53		 push	 ebx
  00030	53		 push	 ebx
  00031	83 c2 fb	 add	 edx, -5			; fffffffbH
  00034	0f 57 c0	 xorps	 xmm0, xmm0
  00037	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0003b	8b 55 08	 mov	 edx, DWORD PTR _iXPos$[ebp]
  0003e	51		 push	 ecx
  0003f	51		 push	 ecx
  00040	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00046	83 c2 f3	 add	 edx, -13		; fffffff3H
  00049	0f 57 c0	 xorps	 xmm0, xmm0
  0004c	f3 0f 2a c2	 cvtsi2ss xmm0, edx

; 958  : 	}

  00050	e9 a7 00 00 00	 jmp	 $LN46@OnMarkRend
$LN39@OnMarkRend:

; 959  : 	else if( m_iMarkType == SHOP_MARK_TYPE_HIT )

  00055	83 f8 03	 cmp	 eax, 3
  00058	75 16		 jne	 SHORT $LN36@OnMarkRend

; 960  : 	{
; 961  : 		if( m_pHotMark )

  0005a	33 db		 xor	 ebx, ebx
  0005c	39 9e 0c 02 00
	00		 cmp	 DWORD PTR [esi+524], ebx
  00062	0f 84 07 06 00
	00		 je	 $LN3@OnMarkRend

; 962  : 			m_pHotMark->Render( iXPos + X_MARK_OFFSET, iYPos + Y_MARK_OFFSET, UI_RENDER_NORMAL );

  00068	8b 8e 0c 02 00
	00		 mov	 ecx, DWORD PTR [esi+524]

; 963  : 	}

  0006e	eb b8		 jmp	 SHORT $LN47@OnMarkRend
$LN36@OnMarkRend:

; 964  : 	else if( m_iMarkType == SHOP_MARK_TYPE_SALE )

  00070	83 f8 01	 cmp	 eax, 1
  00073	0f 84 f6 05 00
	00		 je	 $LN3@OnMarkRend

; 965  : 	{
; 966  : 	}
; 967  : 	else if( m_iMarkType == SHOP_MARK_TYPE_EVENT )

  00079	83 f8 04	 cmp	 eax, 4
  0007c	0f 85 86 00 00
	00		 jne	 $LN31@OnMarkRend

; 968  : 	{
; 969  : 		if( m_pEventMark )

  00082	33 db		 xor	 ebx, ebx
  00084	39 9e 10 02 00
	00		 cmp	 DWORD PTR [esi+528], ebx
  0008a	0f 84 df 05 00
	00		 je	 $LN3@OnMarkRend

; 970  : 		{
; 971  : 			m_pEventMark->Render( iXPos + X_MARK_OFFSET, iYPos + Y_MARK_OFFSET, UI_RENDER_NORMAL );

  00090	8b 45 0c	 mov	 eax, DWORD PTR _iYPos$[ebp]
  00093	8b 8e 10 02 00
	00		 mov	 ecx, DWORD PTR [esi+528]
  00099	53		 push	 ebx
  0009a	53		 push	 ebx
  0009b	83 c0 fb	 add	 eax, -5			; fffffffbH
  0009e	53		 push	 ebx
  0009f	0f 57 c0	 xorps	 xmm0, xmm0
  000a2	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000a6	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  000a9	53		 push	 ebx
  000aa	83 c0 f3	 add	 eax, -13		; fffffff3H
  000ad	51		 push	 ecx
  000ae	51		 push	 ecx
  000af	0f 57 c9	 xorps	 xmm1, xmm1
  000b2	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  000b6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b8	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000be	f3 0f 11 45 fc	 movss	 DWORD PTR tv717[ebp], xmm0
  000c3	f3 0f 11 4d f8	 movss	 DWORD PTR tv719[ebp], xmm1
  000c8	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  000cd	ff 10		 call	 DWORD PTR [eax]

; 972  : 			if( m_bScreen )

  000cf	38 9e 49 02 00
	00		 cmp	 BYTE PTR [esi+585], bl
  000d5	0f 84 94 05 00
	00		 je	 $LN3@OnMarkRend

; 973  : 				m_pEventMark->Render( iXPos + X_MARK_OFFSET, iYPos + Y_MARK_OFFSET, UI_RENDER_SCREEN );

  000db	8b b6 10 02 00
	00		 mov	 esi, DWORD PTR [esi+528]
  000e1	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR tv717[ebp]
  000e6	8b 06		 mov	 eax, DWORD PTR [esi]
  000e8	53		 push	 ebx
  000e9	53		 push	 ebx
  000ea	53		 push	 ebx
  000eb	6a 01		 push	 1
  000ed	51		 push	 ecx
  000ee	51		 push	 ecx
  000ef	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000f5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR tv719[ebp]
  000fa	8b ce		 mov	 ecx, esi
$LN46@OnMarkRend:
  000fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00101	ff 10		 call	 DWORD PTR [eax]

; 974  : 		}
; 975  : 	}

  00103	e9 67 05 00 00	 jmp	 $LN3@OnMarkRend
$LN31@OnMarkRend:
  00108	57		 push	 edi

; 976  : 	else if( m_iMarkType == SHOP_MARK_TYPE_BOUGHT )

  00109	83 f8 05	 cmp	 eax, 5
  0010c	0f 85 0d 01 00
	00		 jne	 $LN27@OnMarkRend

; 977  : 	{
; 978  : 		if( m_pStateBlueFrm )

  00112	8b 7d 0c	 mov	 edi, DWORD PTR _iYPos$[ebp]
  00115	33 db		 xor	 ebx, ebx
  00117	39 9e 30 02 00
	00		 cmp	 DWORD PTR [esi+560], ebx
  0011d	74 6c		 je	 SHORT $LN25@OnMarkRend

; 979  : 		{
; 980  : 			m_pStateBlueFrm->Render( iXPos + X_MARK_OFFSET, iYPos + Y_MARK_OFFSET, UI_RENDER_NORMAL );

  0011f	8b 8e 30 02 00
	00		 mov	 ecx, DWORD PTR [esi+560]
  00125	53		 push	 ebx
  00126	53		 push	 ebx
  00127	53		 push	 ebx
  00128	8d 47 fb	 lea	 eax, DWORD PTR [edi-5]
  0012b	0f 57 c0	 xorps	 xmm0, xmm0
  0012e	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00132	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  00135	53		 push	 ebx
  00136	83 c0 f3	 add	 eax, -13		; fffffff3H
  00139	51		 push	 ecx
  0013a	51		 push	 ecx
  0013b	0f 57 c9	 xorps	 xmm1, xmm1
  0013e	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00142	8b 01		 mov	 eax, DWORD PTR [ecx]
  00144	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0014a	f3 0f 11 45 fc	 movss	 DWORD PTR tv717[ebp], xmm0
  0014f	f3 0f 11 4d f8	 movss	 DWORD PTR tv719[ebp], xmm1
  00154	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00159	ff 10		 call	 DWORD PTR [eax]

; 981  : 			if( m_bScreen )

  0015b	38 9e 49 02 00
	00		 cmp	 BYTE PTR [esi+585], bl
  00161	74 28		 je	 SHORT $LN25@OnMarkRend

; 982  : 				m_pStateBlueFrm->Render( iXPos + X_MARK_OFFSET, iYPos + Y_MARK_OFFSET, UI_RENDER_SCREEN );

  00163	8b b6 30 02 00
	00		 mov	 esi, DWORD PTR [esi+560]
  00169	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR tv717[ebp]
  0016e	8b 06		 mov	 eax, DWORD PTR [esi]
  00170	53		 push	 ebx
  00171	53		 push	 ebx
  00172	53		 push	 ebx
  00173	6a 01		 push	 1
  00175	51		 push	 ecx
  00176	51		 push	 ecx
  00177	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0017d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR tv719[ebp]
  00182	8b ce		 mov	 ecx, esi
  00184	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00189	ff 10		 call	 DWORD PTR [eax]
$LN25@OnMarkRend:

; 983  : 		}
; 984  : 
; 985  : 		g_FontMgr.SetTextStyle( TS_BOLD );

  0018b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?GetSingleton@ioFontManager@@SAAAV1@XZ
  00191	6a 08		 push	 8
  00193	ff d6		 call	 esi
  00195	8b c8		 mov	 ecx, eax
  00197	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z

; 986  : 		g_FontMgr.SetAlignType( TAT_CENTER );

  0019d	6a 01		 push	 1
  0019f	ff d6		 call	 esi
  001a1	8b c8		 mov	 ecx, eax
  001a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z

; 987  : 		g_FontMgr.SetBkColor( 0, 0, 0 );

  001a9	53		 push	 ebx
  001aa	53		 push	 ebx
  001ab	53		 push	 ebx
  001ac	ff d6		 call	 esi
  001ae	8b c8		 mov	 ecx, eax
  001b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetBkColor@ioFontManager@@QAEXHHH@Z

; 988  : 		g_FontMgr.SetTextColor( TCT_DEFAULT_WHITE );

  001b6	6a ff		 push	 -1
  001b8	ff d6		 call	 esi
  001ba	8b c8		 mov	 ecx, eax
  001bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 989  : 		g_FontMgr.PrintText( iXPos + X_TEXT_OFFSET, iYPos + Y_TEXT_OFFSET, FONT_SIZE_11, STR(1) );

  001c2	53		 push	 ebx
  001c3	6a 01		 push	 1
  001c5	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  001ca	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@EJMLEDMO@ioProductIconButton?3?3OnMarkRende@
  001cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  001d5	8b c8		 mov	 ecx, eax
  001d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  001dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  001e5	50		 push	 eax
  001e6	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  001e9	83 ec 0c	 sub	 esp, 12			; 0000000cH
  001ec	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  001f2	0f 57 c0	 xorps	 xmm0, xmm0
  001f5	83 c7 fd	 add	 edi, -3			; fffffffdH
  001f8	f3 0f 2a c7	 cvtsi2ss xmm0, edi
  001fc	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00202	83 c0 08	 add	 eax, 8
  00205	0f 57 c0	 xorps	 xmm0, xmm0
  00208	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0020c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00211	ff d6		 call	 esi
  00213	50		 push	 eax
  00214	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAAXMMMPBDZZ
  0021a	e9 0c 03 00 00	 jmp	 $LN43@OnMarkRend
$LN27@OnMarkRend:

; 990  : 	}
; 991  : 	else if( m_iMarkType == SHOP_MARK_TYPE_LIMIT_GOODS )

  0021f	83 f8 06	 cmp	 eax, 6
  00222	75 64		 jne	 SHORT $LN23@OnMarkRend

; 992  : 	{
; 993  : 		if( m_pLimitMark )

  00224	33 db		 xor	 ebx, ebx
  00226	39 9e 14 02 00
	00		 cmp	 DWORD PTR [esi+532], ebx
  0022c	0f 84 3c 04 00
	00		 je	 $LN42@OnMarkRend

; 994  : 		{
; 995  : 			m_pLimitMark->Render( iXPos + X_MARK_OFFSET, iYPos + Y_MARK_OFFSET, UI_RENDER_NORMAL );

  00232	8b 45 0c	 mov	 eax, DWORD PTR _iYPos$[ebp]
  00235	8b 8e 14 02 00
	00		 mov	 ecx, DWORD PTR [esi+532]
  0023b	53		 push	 ebx
  0023c	53		 push	 ebx
  0023d	83 c0 fb	 add	 eax, -5			; fffffffbH
  00240	53		 push	 ebx
  00241	0f 57 c0	 xorps	 xmm0, xmm0
  00244	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00248	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  0024b	53		 push	 ebx
  0024c	83 c0 f3	 add	 eax, -13		; fffffff3H
  0024f	51		 push	 ecx
  00250	51		 push	 ecx
  00251	0f 57 c9	 xorps	 xmm1, xmm1
  00254	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00258	8b 01		 mov	 eax, DWORD PTR [ecx]
  0025a	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00260	f3 0f 11 45 fc	 movss	 DWORD PTR tv717[ebp], xmm0
  00265	f3 0f 11 4d f8	 movss	 DWORD PTR tv719[ebp], xmm1
  0026a	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0026f	ff 10		 call	 DWORD PTR [eax]

; 996  : 			if( m_bScreen )

  00271	38 9e 49 02 00
	00		 cmp	 BYTE PTR [esi+585], bl
  00277	0f 84 f1 03 00
	00		 je	 $LN42@OnMarkRend

; 997  : 				m_pLimitMark->Render( iXPos + X_MARK_OFFSET, iYPos + Y_MARK_OFFSET, UI_RENDER_SCREEN );

  0027d	8b b6 14 02 00
	00		 mov	 esi, DWORD PTR [esi+532]

; 998  : 		}
; 999  : 	}

  00283	e9 37 01 00 00	 jmp	 $LN44@OnMarkRend
$LN23@OnMarkRend:

; 1000 : 	else if( m_iMarkType == SHOP_MARK_TYPE_LIMIT_DAYS )

  00288	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0028b	75 64		 jne	 SHORT $LN19@OnMarkRend

; 1001 : 	{
; 1002 : 		if( m_pLimitDayMark )

  0028d	33 db		 xor	 ebx, ebx
  0028f	39 9e 18 02 00
	00		 cmp	 DWORD PTR [esi+536], ebx
  00295	0f 84 d3 03 00
	00		 je	 $LN42@OnMarkRend

; 1003 : 		{
; 1004 : 			m_pLimitDayMark->Render( iXPos + X_MARK_OFFSET, iYPos + Y_MARK_OFFSET, UI_RENDER_NORMAL );

  0029b	8b 45 0c	 mov	 eax, DWORD PTR _iYPos$[ebp]
  0029e	8b 8e 18 02 00
	00		 mov	 ecx, DWORD PTR [esi+536]
  002a4	53		 push	 ebx
  002a5	53		 push	 ebx
  002a6	83 c0 fb	 add	 eax, -5			; fffffffbH
  002a9	53		 push	 ebx
  002aa	0f 57 c0	 xorps	 xmm0, xmm0
  002ad	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  002b1	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  002b4	53		 push	 ebx
  002b5	83 c0 f3	 add	 eax, -13		; fffffff3H
  002b8	51		 push	 ecx
  002b9	51		 push	 ecx
  002ba	0f 57 c9	 xorps	 xmm1, xmm1
  002bd	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  002c1	8b 01		 mov	 eax, DWORD PTR [ecx]
  002c3	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  002c9	f3 0f 11 45 fc	 movss	 DWORD PTR tv717[ebp], xmm0
  002ce	f3 0f 11 4d f8	 movss	 DWORD PTR tv719[ebp], xmm1
  002d3	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  002d8	ff 10		 call	 DWORD PTR [eax]

; 1005 : 			if( m_bScreen )

  002da	38 9e 49 02 00
	00		 cmp	 BYTE PTR [esi+585], bl
  002e0	0f 84 88 03 00
	00		 je	 $LN42@OnMarkRend

; 1006 : 				m_pLimitDayMark->Render( iXPos + X_MARK_OFFSET, iYPos + Y_MARK_OFFSET, UI_RENDER_SCREEN );

  002e6	8b b6 18 02 00
	00		 mov	 esi, DWORD PTR [esi+536]

; 1007 : 		}
; 1008 : 	}

  002ec	e9 ce 00 00 00	 jmp	 $LN44@OnMarkRend
$LN19@OnMarkRend:

; 1009 : 	else if( m_iMarkType == SHOP_MARK_TYPE_SOLD_OUT )

  002f1	83 f8 07	 cmp	 eax, 7
  002f4	75 61		 jne	 SHORT $LN15@OnMarkRend

; 1010 : 	{
; 1011 : 		if( m_pSoldOutMark )

  002f6	33 db		 xor	 ebx, ebx
  002f8	39 9e 1c 02 00
	00		 cmp	 DWORD PTR [esi+540], ebx
  002fe	0f 84 6a 03 00
	00		 je	 $LN42@OnMarkRend

; 1012 : 		{
; 1013 : 			m_pSoldOutMark->Render( iXPos + X_MARK_OFFSET, iYPos + Y_MARK_OFFSET, UI_RENDER_NORMAL );

  00304	8b 45 0c	 mov	 eax, DWORD PTR _iYPos$[ebp]
  00307	8b 8e 1c 02 00
	00		 mov	 ecx, DWORD PTR [esi+540]
  0030d	53		 push	 ebx
  0030e	53		 push	 ebx
  0030f	83 c0 fb	 add	 eax, -5			; fffffffbH
  00312	53		 push	 ebx
  00313	0f 57 c0	 xorps	 xmm0, xmm0
  00316	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0031a	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  0031d	53		 push	 ebx
  0031e	83 c0 f3	 add	 eax, -13		; fffffff3H
  00321	51		 push	 ecx
  00322	51		 push	 ecx
  00323	0f 57 c9	 xorps	 xmm1, xmm1
  00326	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  0032a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0032c	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00332	f3 0f 11 45 fc	 movss	 DWORD PTR tv717[ebp], xmm0
  00337	f3 0f 11 4d f8	 movss	 DWORD PTR tv719[ebp], xmm1
  0033c	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00341	ff 10		 call	 DWORD PTR [eax]

; 1014 : 			if( m_bScreen )

  00343	38 9e 49 02 00
	00		 cmp	 BYTE PTR [esi+585], bl
  00349	0f 84 1f 03 00
	00		 je	 $LN42@OnMarkRend

; 1015 : 				m_pSoldOutMark->Render( iXPos + X_MARK_OFFSET, iYPos + Y_MARK_OFFSET, UI_RENDER_SCREEN );

  0034f	8b b6 1c 02 00
	00		 mov	 esi, DWORD PTR [esi+540]

; 1016 : 		}
; 1017 : 	}

  00355	eb 68		 jmp	 SHORT $LN44@OnMarkRend
$LN15@OnMarkRend:

; 1018 : 	else if( m_iMarkType == SHOP_MARK_TYPE_GRADE_LIMIT_CLEAR )

  00357	83 f8 09	 cmp	 eax, 9
  0035a	0f 85 86 00 00
	00		 jne	 $LN11@OnMarkRend

; 1019 : 	{
; 1020 : 		if( m_pGradeLimitClearMark )

  00360	33 db		 xor	 ebx, ebx
  00362	39 9e 20 02 00
	00		 cmp	 DWORD PTR [esi+544], ebx
  00368	0f 84 00 03 00
	00		 je	 $LN42@OnMarkRend

; 1021 : 		{
; 1022 : 			m_pGradeLimitClearMark->Render( iXPos + X_MARK_OFFSET, iYPos + Y_MARK_OFFSET, UI_RENDER_NORMAL );

  0036e	8b 45 0c	 mov	 eax, DWORD PTR _iYPos$[ebp]
  00371	8b 8e 20 02 00
	00		 mov	 ecx, DWORD PTR [esi+544]
  00377	53		 push	 ebx
  00378	53		 push	 ebx
  00379	83 c0 fb	 add	 eax, -5			; fffffffbH
  0037c	53		 push	 ebx
  0037d	0f 57 c0	 xorps	 xmm0, xmm0
  00380	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00384	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  00387	53		 push	 ebx
  00388	83 c0 f3	 add	 eax, -13		; fffffff3H
  0038b	51		 push	 ecx
  0038c	51		 push	 ecx
  0038d	0f 57 c9	 xorps	 xmm1, xmm1
  00390	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00394	8b 01		 mov	 eax, DWORD PTR [ecx]
  00396	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0039c	f3 0f 11 45 fc	 movss	 DWORD PTR tv717[ebp], xmm0
  003a1	f3 0f 11 4d f8	 movss	 DWORD PTR tv719[ebp], xmm1
  003a6	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  003ab	ff 10		 call	 DWORD PTR [eax]

; 1023 : 			if( m_bScreen )

  003ad	38 9e 49 02 00
	00		 cmp	 BYTE PTR [esi+585], bl
  003b3	0f 84 b5 02 00
	00		 je	 $LN42@OnMarkRend

; 1024 : 				m_pGradeLimitClearMark->Render( iXPos + X_MARK_OFFSET, iYPos + Y_MARK_OFFSET, UI_RENDER_SCREEN );

  003b9	8b b6 20 02 00
	00		 mov	 esi, DWORD PTR [esi+544]
$LN44@OnMarkRend:
  003bf	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR tv717[ebp]
  003c4	8b 06		 mov	 eax, DWORD PTR [esi]
  003c6	53		 push	 ebx
  003c7	53		 push	 ebx
  003c8	53		 push	 ebx
  003c9	6a 01		 push	 1
  003cb	51		 push	 ecx
  003cc	51		 push	 ecx
  003cd	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  003d3	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR tv719[ebp]
  003d8	8b ce		 mov	 ecx, esi
  003da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003df	ff 10		 call	 DWORD PTR [eax]

; 1025 : 		}
; 1026 : 	}

  003e1	e9 88 02 00 00	 jmp	 $LN42@OnMarkRend
$LN11@OnMarkRend:

; 1027 : 	else if( m_iMarkType == SHOP_MARK_TYPE_DATE )

  003e6	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  003e9	0f 85 7f 02 00
	00		 jne	 $LN42@OnMarkRend

; 1028 : 	{	
; 1029 : 		g_FontMgr.SetTextStyle( TS_NORMAL );

  003ef	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetSingleton@ioFontManager@@SAAAV1@XZ
  003f5	33 db		 xor	 ebx, ebx
  003f7	53		 push	 ebx
  003f8	ff d7		 call	 edi
  003fa	8b c8		 mov	 ecx, eax
  003fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z

; 1030 : 		g_FontMgr.SetAlignType( TAT_CENTER );

  00402	6a 01		 push	 1
  00404	ff d7		 call	 edi
  00406	8b c8		 mov	 ecx, eax
  00408	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z

; 1031 : 		g_FontMgr.SetBkColor( 0, 0, 0 );

  0040e	53		 push	 ebx
  0040f	53		 push	 ebx
  00410	53		 push	 ebx
  00411	ff d7		 call	 edi
  00413	8b c8		 mov	 ecx, eax
  00415	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetBkColor@ioFontManager@@QAEXHHH@Z

; 1032 : 		g_FontMgr.SetTextColor( TCT_DEFAULT_WHITE );

  0041b	6a ff		 push	 -1
  0041d	ff d7		 call	 edi
  0041f	8b c8		 mov	 ecx, eax
  00421	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 1033 : 
; 1034 : 		if( m_iLimitDay == 0 )

  00427	39 9e 44 02 00
	00		 cmp	 DWORD PTR [esi+580], ebx
  0042d	0f 85 00 01 00
	00		 jne	 $LN6@OnMarkRend

; 1035 : 		{
; 1036 : 			if( m_pStateRedFrm )

  00433	39 9e 38 02 00
	00		 cmp	 DWORD PTR [esi+568], ebx
  00439	74 6d		 je	 SHORT $LN4@OnMarkRend

; 1037 : 			{
; 1038 : 				m_pStateRedFrm->Render( iXPos + X_MARK_OFFSET, iYPos + Y_MARK_OFFSET, UI_RENDER_NORMAL );

  0043b	8b 45 0c	 mov	 eax, DWORD PTR _iYPos$[ebp]
  0043e	8b 8e 38 02 00
	00		 mov	 ecx, DWORD PTR [esi+568]
  00444	53		 push	 ebx
  00445	53		 push	 ebx
  00446	83 c0 fb	 add	 eax, -5			; fffffffbH
  00449	53		 push	 ebx
  0044a	0f 57 c0	 xorps	 xmm0, xmm0
  0044d	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00451	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  00454	53		 push	 ebx
  00455	83 c0 f3	 add	 eax, -13		; fffffff3H
  00458	51		 push	 ecx
  00459	51		 push	 ecx
  0045a	0f 57 c9	 xorps	 xmm1, xmm1
  0045d	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00461	8b 01		 mov	 eax, DWORD PTR [ecx]
  00463	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00469	f3 0f 11 45 fc	 movss	 DWORD PTR tv717[ebp], xmm0
  0046e	f3 0f 11 4d f8	 movss	 DWORD PTR tv719[ebp], xmm1
  00473	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00478	ff 10		 call	 DWORD PTR [eax]

; 1039 : 				if( m_bScreen )

  0047a	38 9e 49 02 00
	00		 cmp	 BYTE PTR [esi+585], bl
  00480	74 26		 je	 SHORT $LN4@OnMarkRend

; 1040 : 					m_pStateRedFrm->Render( iXPos + X_MARK_OFFSET, iYPos + Y_MARK_OFFSET, UI_RENDER_SCREEN );

  00482	8b 8e 38 02 00
	00		 mov	 ecx, DWORD PTR [esi+568]
  00488	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR tv717[ebp]
  0048d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0048f	53		 push	 ebx
  00490	53		 push	 ebx
  00491	53		 push	 ebx
  00492	6a 01		 push	 1
  00494	51		 push	 ecx
  00495	51		 push	 ecx
  00496	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0049c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR tv719[ebp]
  004a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a6	ff 10		 call	 DWORD PTR [eax]
$LN4@OnMarkRend:

; 1041 : 			}
; 1042 : 
; 1043 : 			g_FontMgr.PrintText( iXPos + X_TEXT_OFFSET, iYPos + Y_TEXT_OFFSET, FONT_SIZE_10, "D-Day" );

  004a8	8b 45 0c	 mov	 eax, DWORD PTR _iYPos$[ebp]
  004ab	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  004b3	83 c0 fd	 add	 eax, -3			; fffffffdH
  004b6	0f 57 c0	 xorps	 xmm0, xmm0
  004b9	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  004bd	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  004c0	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_05EADLFBFB@D?9Day?$AA@
  004c5	53		 push	 ebx
  004c6	83 ec 0c	 sub	 esp, 12			; 0000000cH
  004c9	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  004cf	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  004d5	f3 0f 11 45 0c	 movss	 DWORD PTR tv773[ebp], xmm0
  004da	83 c0 08	 add	 eax, 8
  004dd	0f 57 c0	 xorps	 xmm0, xmm0
  004e0	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  004e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e9	ff d7		 call	 edi
  004eb	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?PrintText@ioFontManager@@QAAXMMMPBDZZ
  004f1	50		 push	 eax
  004f2	ff d6		 call	 esi

; 1044 : 			g_FontMgr.PrintText( iXPos + X_TEXT_OFFSET - 1, iYPos + Y_TEXT_OFFSET, FONT_SIZE_10, "D-Day" );

  004f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  004fc	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  004ff	83 c4 14	 add	 esp, 20			; 00000014H
  00502	53		 push	 ebx
  00503	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00506	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0050c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR tv773[ebp]
  00511	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00517	83 c0 07	 add	 eax, 7
  0051a	0f 57 c0	 xorps	 xmm0, xmm0
  0051d	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00521	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00526	ff d7		 call	 edi
  00528	50		 push	 eax
  00529	ff d6		 call	 esi
$LN43@OnMarkRend:
  0052b	83 c4 14	 add	 esp, 20			; 00000014H

; 1045 : 		}
; 1046 : 		else

  0052e	e9 3b 01 00 00	 jmp	 $LN42@OnMarkRend
$LN6@OnMarkRend:

; 1047 : 		{
; 1048 : 			if( m_pStatePinkFrm )

  00533	39 9e 34 02 00
	00		 cmp	 DWORD PTR [esi+564], ebx
  00539	74 6d		 je	 SHORT $LN1@OnMarkRend

; 1049 : 			{
; 1050 : 				m_pStatePinkFrm->Render( iXPos + X_MARK_OFFSET, iYPos + Y_MARK_OFFSET, UI_RENDER_NORMAL );

  0053b	8b 45 0c	 mov	 eax, DWORD PTR _iYPos$[ebp]
  0053e	8b 8e 34 02 00
	00		 mov	 ecx, DWORD PTR [esi+564]
  00544	53		 push	 ebx
  00545	53		 push	 ebx
  00546	83 c0 fb	 add	 eax, -5			; fffffffbH
  00549	53		 push	 ebx
  0054a	0f 57 c0	 xorps	 xmm0, xmm0
  0054d	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00551	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  00554	53		 push	 ebx
  00555	83 c0 f3	 add	 eax, -13		; fffffff3H
  00558	51		 push	 ecx
  00559	51		 push	 ecx
  0055a	0f 57 c9	 xorps	 xmm1, xmm1
  0055d	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00561	8b 01		 mov	 eax, DWORD PTR [ecx]
  00563	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00569	f3 0f 11 45 fc	 movss	 DWORD PTR tv717[ebp], xmm0
  0056e	f3 0f 11 4d f8	 movss	 DWORD PTR tv719[ebp], xmm1
  00573	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00578	ff 10		 call	 DWORD PTR [eax]

; 1051 : 				if( m_bScreen )

  0057a	38 9e 49 02 00
	00		 cmp	 BYTE PTR [esi+585], bl
  00580	74 26		 je	 SHORT $LN1@OnMarkRend

; 1052 : 					m_pStatePinkFrm->Render( iXPos + X_MARK_OFFSET, iYPos + Y_MARK_OFFSET, UI_RENDER_SCREEN );

  00582	8b 8e 34 02 00
	00		 mov	 ecx, DWORD PTR [esi+564]
  00588	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR tv717[ebp]
  0058d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0058f	53		 push	 ebx
  00590	53		 push	 ebx
  00591	53		 push	 ebx
  00592	6a 01		 push	 1
  00594	51		 push	 ecx
  00595	51		 push	 ecx
  00596	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0059c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR tv719[ebp]
  005a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a6	ff 10		 call	 DWORD PTR [eax]
$LN1@OnMarkRend:

; 1053 : 			}
; 1054 : 
; 1055 : 			g_FontMgr.PrintText( iXPos + X_TEXT_OFFSET, iYPos + Y_TEXT_OFFSET, FONT_SIZE_10, STR(2), m_iLimitDay );

  005a8	ff b6 44 02 00
	00		 push	 DWORD PTR [esi+580]
  005ae	8b 45 0c	 mov	 eax, DWORD PTR _iYPos$[ebp]
  005b1	53		 push	 ebx
  005b2	6a 02		 push	 2
  005b4	83 c0 fd	 add	 eax, -3			; fffffffdH
  005b7	0f 57 c0	 xorps	 xmm0, xmm0
  005ba	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  005bf	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  005c3	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@EJMLEDMO@ioProductIconButton?3?3OnMarkRende@
  005c8	f3 0f 11 45 0c	 movss	 DWORD PTR tv773[ebp], xmm0
  005cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  005d3	8b c8		 mov	 ecx, eax
  005d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  005db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  005e3	50		 push	 eax
  005e4	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  005e7	83 ec 0c	 sub	 esp, 12			; 0000000cH
  005ea	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  005f0	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR tv773[ebp]
  005f5	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  005fb	83 c0 08	 add	 eax, 8
  005fe	0f 57 c0	 xorps	 xmm0, xmm0
  00601	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00605	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060a	ff d7		 call	 edi
  0060c	8b c8		 mov	 ecx, eax
  0060e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAEXMMMPBDH@Z

; 1056 : 			g_FontMgr.PrintText( iXPos + X_TEXT_OFFSET - 1, iYPos + Y_TEXT_OFFSET, FONT_SIZE_10, STR(3), m_iLimitDay );

  00614	ff b6 44 02 00
	00		 push	 DWORD PTR [esi+580]
  0061a	53		 push	 ebx
  0061b	6a 03		 push	 3
  0061d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00622	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@EJMLEDMO@ioProductIconButton?3?3OnMarkRende@
  00627	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  0062d	8b c8		 mov	 ecx, eax
  0062f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00635	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0063d	50		 push	 eax
  0063e	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  00641	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00644	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0064a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR tv773[ebp]
  0064f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00655	83 c0 07	 add	 eax, 7
  00658	0f 57 c0	 xorps	 xmm0, xmm0
  0065b	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0065f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00664	ff d7		 call	 edi
  00666	8b c8		 mov	 ecx, eax
  00668	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAEXMMMPBDH@Z
$LN42@OnMarkRend:
  0066e	5f		 pop	 edi
$LN3@OnMarkRend:
  0066f	5e		 pop	 esi
  00670	5b		 pop	 ebx

; 1057 : 		}
; 1058 : 		
; 1059 : 	}
; 1060 : }

  00671	c9		 leave
  00672	c2 08 00	 ret	 8
?OnMarkRender@ioProductIconButton@@IAEXHH@Z ENDP	; ioProductIconButton::OnMarkRender
_TEXT	ENDS
PUBLIC	?OnCostumeRender@ioProductIconButton@@IAEXHH@Z	; ioProductIconButton::OnCostumeRender
; Function compile flags: /Ogsp
;	COMDAT ?OnCostumeRender@ioProductIconButton@@IAEXHH@Z
_TEXT	SEGMENT
_iXPos$ = 8						; size = 4
_iYPos$ = 12						; size = 4
?OnCostumeRender@ioProductIconButton@@IAEXHH@Z PROC	; ioProductIconButton::OnCostumeRender, COMDAT
; _this$ = ecx

; 1063 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1064 : 	// UI코스튬 관련 (코스튬 마크)
; 1065 : 	if( m_bCostume && m_pCostumeMark )

  00006	33 c0		 xor	 eax, eax
  00008	38 86 48 02 00
	00		 cmp	 BYTE PTR [esi+584], al
  0000e	74 58		 je	 SHORT $LN1@OnCostumeR
  00010	39 86 2c 02 00
	00		 cmp	 DWORD PTR [esi+556], eax
  00016	74 50		 je	 SHORT $LN1@OnCostumeR

; 1066 : 		m_pCostumeMark->Render( iXPos + GetWidth()/2, iYPos + GetHeight()/2, UI_RENDER_NORMAL );

  00018	8b 8e 2c 02 00
	00		 mov	 ecx, DWORD PTR [esi+556]
  0001e	57		 push	 edi
  0001f	8b 39		 mov	 edi, DWORD PTR [ecx]
  00021	50		 push	 eax
  00022	50		 push	 eax
  00023	50		 push	 eax
  00024	50		 push	 eax
  00025	8b ce		 mov	 ecx, esi
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioWnd@@QBEHXZ
  0002d	99		 cdq
  0002e	2b c2		 sub	 eax, edx
  00030	d1 f8		 sar	 eax, 1
  00032	03 45 0c	 add	 eax, DWORD PTR _iYPos$[ebp]
  00035	51		 push	 ecx
  00036	0f 57 c0	 xorps	 xmm0, xmm0
  00039	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0003d	8b ce		 mov	 ecx, esi
  0003f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioWnd@@QBEHXZ
  0004a	99		 cdq
  0004b	2b c2		 sub	 eax, edx
  0004d	d1 f8		 sar	 eax, 1
  0004f	03 45 08	 add	 eax, DWORD PTR _iXPos$[ebp]
  00052	51		 push	 ecx
  00053	8b 8e 2c 02 00
	00		 mov	 ecx, DWORD PTR [esi+556]
  00059	0f 57 c0	 xorps	 xmm0, xmm0
  0005c	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00060	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00065	ff 17		 call	 DWORD PTR [edi]
  00067	5f		 pop	 edi
$LN1@OnCostumeR:
  00068	5e		 pop	 esi

; 1067 : }

  00069	5d		 pop	 ebp
  0006a	c2 08 00	 ret	 8
?OnCostumeRender@ioProductIconButton@@IAEXHH@Z ENDP	; ioProductIconButton::OnCostumeRender
_TEXT	ENDS
PUBLIC	__real@c0800000
PUBLIC	__real@3f800000
PUBLIC	?OnNumberRender@ioProductIconButton@@IAEXHH@Z	; ioProductIconButton::OnNumberRender
EXTRN	__imp_?RenderNum@ioUIRenderImage@@QAEXMMHMMW4UIRenderType@@W4TextureFilterOption@@0W4RenerNumerFormatting@1@@Z:PROC
;	COMDAT __real@c0800000
CONST	SEGMENT
__real@c0800000 DD 0c0800000r			; -4
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?OnNumberRender@ioProductIconButton@@IAEXHH@Z
_TEXT	SEGMENT
tv217 = 8						; size = 4
_iXPos$ = 8						; size = 4
_iYPos$ = 12						; size = 4
?OnNumberRender@ioProductIconButton@@IAEXHH@Z PROC	; ioProductIconButton::OnNumberRender, COMDAT
; _this$ = ecx

; 1070 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1071 : 	if( m_iReinForceNumber <= 0 || !m_pNumText || !m_pPlusText )

  00007	33 db		 xor	 ebx, ebx
  00009	39 9e 40 02 00
	00		 cmp	 DWORD PTR [esi+576], ebx
  0000f	0f 8e e5 00 00
	00		 jle	 $LN5@OnNumberRe
  00015	39 9e 24 02 00
	00		 cmp	 DWORD PTR [esi+548], ebx
  0001b	0f 84 d9 00 00
	00		 je	 $LN5@OnNumberRe
  00021	39 9e 28 02 00
	00		 cmp	 DWORD PTR [esi+552], ebx
  00027	0f 84 cd 00 00
	00		 je	 $LN5@OnNumberRe

; 1072 : 		return;
; 1073 : 		
; 1074 : 	int iNewXPos	= iXPos + GetWidth()/2;

  0002d	57		 push	 edi
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioWnd@@QBEHXZ
  00034	99		 cdq
  00035	2b c2		 sub	 eax, edx
  00037	8b f8		 mov	 edi, eax
  00039	d1 ff		 sar	 edi, 1
  0003b	03 7d 08	 add	 edi, DWORD PTR _iXPos$[ebp]

; 1075 : 	int iNewYPos	= iYPos + GetHeight()/2;

  0003e	8b ce		 mov	 ecx, esi
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioWnd@@QBEHXZ

; 1076 : 	int iCurPos		= 0;
; 1077 : 	int iDefaultPos	= iNewXPos;
; 1078 : 	int iCurYPos	= iNewYPos + REINFORCE_Y;

  00046	8b 4d 0c	 mov	 ecx, DWORD PTR _iYPos$[ebp]
  00049	99		 cdq
  0004a	2b c2		 sub	 eax, edx
  0004c	d1 f8		 sar	 eax, 1
  0004e	8d 4c 08 09	 lea	 ecx, DWORD PTR [eax+ecx+9]

; 1079 : 	int iTotalSize	= 0;
; 1080 : 
; 1081 : 	if( m_iReinForceNumber < 10 )

  00052	8b 86 40 02 00
	00		 mov	 eax, DWORD PTR [esi+576]
  00058	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0005b	7d 05		 jge	 SHORT $LN4@OnNumberRe

; 1082 : 		iTotalSize = PLUS_SIZE + NUM_SIZE - NUM_GAP;

  0005d	6a 1e		 push	 30			; 0000001eH
  0005f	58		 pop	 eax
  00060	eb 11		 jmp	 SHORT $LN2@OnNumberRe
$LN4@OnNumberRe:

; 1083 : 	else if( m_iReinForceNumber < 100 )

  00062	33 d2		 xor	 edx, edx
  00064	83 f8 64	 cmp	 eax, 100		; 00000064H
  00067	0f 9d c2	 setge	 dl
  0006a	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  0006d	83 e0 f0	 and	 eax, -16		; fffffff0H
  00070	83 c0 3e	 add	 eax, 62			; 0000003eH
$LN2@OnNumberRe:

; 1084 : 		iTotalSize = PLUS_SIZE + NUM_SIZE*2 - NUM_GAP*2;
; 1085 : 	else
; 1086 : 		iTotalSize = PLUS_SIZE + NUM_SIZE*3 - NUM_GAP*3;
; 1087 : 
; 1088 : 	iCurPos = iDefaultPos - (iTotalSize / 2);
; 1089 : 	m_pPlusText->Render( iCurPos, iCurYPos );

  00073	53		 push	 ebx
  00074	53		 push	 ebx
  00075	99		 cdq
  00076	53		 push	 ebx
  00077	2b c2		 sub	 eax, edx
  00079	53		 push	 ebx
  0007a	51		 push	 ecx
  0007b	d1 f8		 sar	 eax, 1
  0007d	0f 57 c0	 xorps	 xmm0, xmm0
  00080	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00084	51		 push	 ecx
  00085	2b f8		 sub	 edi, eax
  00087	8b 86 28 02 00
	00		 mov	 eax, DWORD PTR [esi+552]
  0008d	8b 10		 mov	 edx, DWORD PTR [eax]
  0008f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00095	f3 0f 11 45 08	 movss	 DWORD PTR tv217[ebp], xmm0
  0009a	0f 57 c0	 xorps	 xmm0, xmm0
  0009d	f3 0f 2a c7	 cvtsi2ss xmm0, edi
  000a1	8b c8		 mov	 ecx, eax
  000a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a8	ff 12		 call	 DWORD PTR [edx]

; 1090 : 
; 1091 : 	iCurPos += PLUS_SIZE-NUM_GAP;
; 1092 : 	m_pNumText->RenderNum( iCurPos, iCurYPos, m_iReinForceNumber, -NUM_GAP );

  000aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000b2	53		 push	 ebx
  000b3	53		 push	 ebx
  000b4	53		 push	 ebx
  000b5	53		 push	 ebx
  000b6	51		 push	 ecx
  000b7	51		 push	 ecx
  000b8	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  000c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cb	ff b6 40 02 00
	00		 push	 DWORD PTR [esi+576]
  000d1	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv217[ebp]
  000d6	51		 push	 ecx
  000d7	51		 push	 ecx
  000d8	8b 8e 24 02 00
	00		 mov	 ecx, DWORD PTR [esi+548]
  000de	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000e4	83 c7 0a	 add	 edi, 10			; 0000000aH
  000e7	0f 57 c0	 xorps	 xmm0, xmm0
  000ea	f3 0f 2a c7	 cvtsi2ss xmm0, edi
  000ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?RenderNum@ioUIRenderImage@@QAEXMMHMMW4UIRenderType@@W4TextureFilterOption@@0W4RenerNumerFormatting@1@@Z
  000f9	5f		 pop	 edi
$LN5@OnNumberRe:
  000fa	5e		 pop	 esi
  000fb	5b		 pop	 ebx

; 1093 : }

  000fc	5d		 pop	 ebp
  000fd	c2 08 00	 ret	 8
?OnNumberRender@ioProductIconButton@@IAEXHH@Z ENDP	; ioProductIconButton::OnNumberRender
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?OnDrawNormal@ioProductIconButton@@MAEXHH@Z
_TEXT	SEGMENT
_iXPos$ = 8						; size = 4
_iYPos$ = 12						; size = 4
?OnDrawNormal@ioProductIconButton@@MAEXHH@Z PROC	; ioProductIconButton::OnDrawNormal, COMDAT
; _this$ = ecx

; 1096 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1097 : 	ioButton::OnDrawNormal( iXPos, iYPos );

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _iXPos$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR _iYPos$[ebp]
  0000c	57		 push	 edi
  0000d	53		 push	 ebx
  0000e	8b f1		 mov	 esi, ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnDrawNormal@ioButton@@MAEXHH@Z

; 1098 : 
; 1099 : 	OnIconRender( iXPos, iYPos, UI_RENDER_MULTIPLY, UI_RENDER_NORMAL );

  00016	6a 00		 push	 0
  00018	6a 08		 push	 8
  0001a	57		 push	 edi
  0001b	53		 push	 ebx
  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?OnIconRender@ioProductIconButton@@IAEXHHW4UIRenderType@@0@Z ; ioProductIconButton::OnIconRender

; 1100 : 	OnMarkRender( iXPos, iYPos );

  00023	57		 push	 edi
  00024	53		 push	 ebx
  00025	8b ce		 mov	 ecx, esi
  00027	e8 00 00 00 00	 call	 ?OnMarkRender@ioProductIconButton@@IAEXHH@Z ; ioProductIconButton::OnMarkRender

; 1101 : 	OnCostumeRender( iXPos, iYPos );

  0002c	57		 push	 edi
  0002d	53		 push	 ebx
  0002e	8b ce		 mov	 ecx, esi
  00030	e8 00 00 00 00	 call	 ?OnCostumeRender@ioProductIconButton@@IAEXHH@Z ; ioProductIconButton::OnCostumeRender
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx

; 1102 : }

  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
?OnDrawNormal@ioProductIconButton@@MAEXHH@Z ENDP	; ioProductIconButton::OnDrawNormal
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?OnDrawOvered@ioProductIconButton@@MAEXHH@Z
_TEXT	SEGMENT
_iXPos$ = 8						; size = 4
_iYPos$ = 12						; size = 4
?OnDrawOvered@ioProductIconButton@@MAEXHH@Z PROC	; ioProductIconButton::OnDrawOvered, COMDAT
; _this$ = ecx

; 1105 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1106 : 	ioButton::OnDrawOvered( iXPos, iYPos );

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _iXPos$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR _iYPos$[ebp]
  0000c	57		 push	 edi
  0000d	53		 push	 ebx
  0000e	8b f1		 mov	 esi, ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnDrawOvered@ioButton@@MAEXHH@Z

; 1107 : 
; 1108 : 	OnIconRender( iXPos, iYPos, UI_RENDER_MULTIPLY, UI_RENDER_NORMAL );

  00016	6a 00		 push	 0
  00018	6a 08		 push	 8
  0001a	57		 push	 edi
  0001b	53		 push	 ebx
  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?OnIconRender@ioProductIconButton@@IAEXHHW4UIRenderType@@0@Z ; ioProductIconButton::OnIconRender

; 1109 : 	OnIconRender( iXPos, iYPos, UI_RENDER_MULTIPLY, UI_RENDER_SCREEN );

  00023	6a 01		 push	 1
  00025	6a 08		 push	 8
  00027	57		 push	 edi
  00028	53		 push	 ebx
  00029	8b ce		 mov	 ecx, esi
  0002b	e8 00 00 00 00	 call	 ?OnIconRender@ioProductIconButton@@IAEXHHW4UIRenderType@@0@Z ; ioProductIconButton::OnIconRender

; 1110 : 	OnMarkRender( iXPos, iYPos );

  00030	57		 push	 edi
  00031	53		 push	 ebx
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?OnMarkRender@ioProductIconButton@@IAEXHH@Z ; ioProductIconButton::OnMarkRender

; 1111 : 	OnCostumeRender( iXPos, iYPos );

  00039	57		 push	 edi
  0003a	53		 push	 ebx
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?OnCostumeRender@ioProductIconButton@@IAEXHH@Z ; ioProductIconButton::OnCostumeRender
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx

; 1112 : }

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
?OnDrawOvered@ioProductIconButton@@MAEXHH@Z ENDP	; ioProductIconButton::OnDrawOvered
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?OnDrawPushed@ioProductIconButton@@MAEXHH@Z
_TEXT	SEGMENT
_iXPos$ = 8						; size = 4
_iYPos$ = 12						; size = 4
?OnDrawPushed@ioProductIconButton@@MAEXHH@Z PROC	; ioProductIconButton::OnDrawPushed, COMDAT
; _this$ = ecx

; 1115 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1116 : 	ioButton::OnDrawPushed( iXPos, iYPos );

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _iXPos$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR _iYPos$[ebp]
  0000c	57		 push	 edi
  0000d	53		 push	 ebx
  0000e	8b f1		 mov	 esi, ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnDrawPushed@ioButton@@MAEXHH@Z

; 1117 : 	
; 1118 : 	OnIconRender( iXPos, iYPos, UI_RENDER_MULTIPLY, UI_RENDER_NORMAL );

  00016	6a 00		 push	 0
  00018	6a 08		 push	 8
  0001a	57		 push	 edi
  0001b	53		 push	 ebx
  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?OnIconRender@ioProductIconButton@@IAEXHHW4UIRenderType@@0@Z ; ioProductIconButton::OnIconRender

; 1119 : 	OnIconRender( iXPos, iYPos, UI_RENDER_MULTIPLY, UI_RENDER_SCREEN );

  00023	6a 01		 push	 1
  00025	6a 08		 push	 8
  00027	57		 push	 edi
  00028	53		 push	 ebx
  00029	8b ce		 mov	 ecx, esi
  0002b	e8 00 00 00 00	 call	 ?OnIconRender@ioProductIconButton@@IAEXHHW4UIRenderType@@0@Z ; ioProductIconButton::OnIconRender

; 1120 : 	OnMarkRender( iXPos, iYPos );

  00030	57		 push	 edi
  00031	53		 push	 ebx
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?OnMarkRender@ioProductIconButton@@IAEXHH@Z ; ioProductIconButton::OnMarkRender

; 1121 : 	OnCostumeRender( iXPos, iYPos );

  00039	57		 push	 edi
  0003a	53		 push	 ebx
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?OnCostumeRender@ioProductIconButton@@IAEXHH@Z ; ioProductIconButton::OnCostumeRender
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx

; 1122 : }

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
?OnDrawPushed@ioProductIconButton@@MAEXHH@Z ENDP	; ioProductIconButton::OnDrawPushed
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?OnDrawDisabled@ioProductIconButton@@MAEXHH@Z
_TEXT	SEGMENT
_iXPos$ = 8						; size = 4
_iYPos$ = 12						; size = 4
?OnDrawDisabled@ioProductIconButton@@MAEXHH@Z PROC	; ioProductIconButton::OnDrawDisabled, COMDAT
; _this$ = ecx

; 1125 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1126 : 	ioButton::OnDrawDisabled( iXPos, iYPos );

  00004	ff 75 0c	 push	 DWORD PTR _iYPos$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR _iXPos$[ebp]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnDrawDisabled@ioButton@@MAEXHH@Z

; 1127 : 
; 1128 : 	if( m_pIconEmpty )

  00012	33 c0		 xor	 eax, eax
  00014	39 86 04 02 00
	00		 cmp	 DWORD PTR [esi+516], eax
  0001a	74 52		 je	 SHORT $LN1@OnDrawDisa

; 1129 : 		m_pIconEmpty->Render( iXPos + GetWidth()/2, iYPos + GetHeight()/2, UI_RENDER_MULTIPLY, TFO_BILINEAR );

  0001c	8b 8e 04 02 00
	00		 mov	 ecx, DWORD PTR [esi+516]
  00022	57		 push	 edi
  00023	8b 39		 mov	 edi, DWORD PTR [ecx]
  00025	50		 push	 eax
  00026	50		 push	 eax
  00027	6a 01		 push	 1
  00029	6a 08		 push	 8
  0002b	8b ce		 mov	 ecx, esi
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioWnd@@QBEHXZ
  00033	99		 cdq
  00034	2b c2		 sub	 eax, edx
  00036	d1 f8		 sar	 eax, 1
  00038	03 45 0c	 add	 eax, DWORD PTR _iYPos$[ebp]
  0003b	51		 push	 ecx
  0003c	0f 57 c0	 xorps	 xmm0, xmm0
  0003f	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00043	8b ce		 mov	 ecx, esi
  00045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioWnd@@QBEHXZ
  00050	99		 cdq
  00051	2b c2		 sub	 eax, edx
  00053	d1 f8		 sar	 eax, 1
  00055	03 45 08	 add	 eax, DWORD PTR _iXPos$[ebp]
  00058	51		 push	 ecx
  00059	8b 8e 04 02 00
	00		 mov	 ecx, DWORD PTR [esi+516]
  0005f	0f 57 c0	 xorps	 xmm0, xmm0
  00062	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00066	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006b	ff 17		 call	 DWORD PTR [edi]
  0006d	5f		 pop	 edi
$LN1@OnDrawDisa:
  0006e	5e		 pop	 esi

; 1130 : }

  0006f	5d		 pop	 ebp
  00070	c2 08 00	 ret	 8
?OnDrawDisabled@ioProductIconButton@@MAEXHH@Z ENDP	; ioProductIconButton::OnDrawDisabled
_TEXT	ENDS
PUBLIC	?GetSingleton@?$Singleton@VioEtcItemManager@@@@SAAAVioEtcItemManager@@XZ ; Singleton<ioEtcItemManager>::GetSingleton
EXTRN	?ms_Singleton@?$Singleton@VioEtcItemManager@@@@1PAVioEtcItemManager@@A:DWORD ; Singleton<ioEtcItemManager>::ms_Singleton
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
;	COMDAT ?GetSingleton@?$Singleton@VioEtcItemManager@@@@SAAAVioEtcItemManager@@XZ
_TEXT	SEGMENT
?GetSingleton@?$Singleton@VioEtcItemManager@@@@SAAAVioEtcItemManager@@XZ PROC ; Singleton<ioEtcItemManager>::GetSingleton, COMDAT

; 42   : 		assert( ms_Singleton );
; 43   : 		return (*ms_Singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VioEtcItemManager@@@@1PAVioEtcItemManager@@A ; Singleton<ioEtcItemManager>::ms_Singleton

; 44   : 	}

  00005	c3		 ret	 0
?GetSingleton@?$Singleton@VioEtcItemManager@@@@SAAAVioEtcItemManager@@XZ ENDP ; Singleton<ioEtcItemManager>::GetSingleton
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEABHXZ ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEABHXZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEABHXZ PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEABHXZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator++
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEAAHXZ ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEAAHXZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEAAHXZ PROC ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEAAHXZ ENDP ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::operator++
_TEXT	ENDS
PUBLIC	?size@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QBEIXZ ; std::vector<ADProduct,std::allocator<ADProduct> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QBEIXZ PROC ; std::vector<ADProduct,std::allocator<ADProduct> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 18		 push	 24			; 00000018H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QBEIXZ ENDP ; std::vector<ADProduct,std::allocator<ADProduct> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEAAUADProduct@@I@Z ; std::vector<ADProduct,std::allocator<ADProduct> >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEAAUADProduct@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEAAUADProduct@@I@Z PROC ; std::vector<ADProduct,std::allocator<ADProduct> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	6b c0 18	 imul	 eax, 24			; 00000018H
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEAAUADProduct@@I@Z ENDP ; std::vector<ADProduct,std::allocator<ADProduct> >::operator[]
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IBE_NPBUADProduct@@@Z ; std::vector<ADProduct,std::allocator<ADProduct> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IBE_NPBUADProduct@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IBE_NPBUADProduct@@@Z PROC ; std::vector<ADProduct,std::allocator<ADProduct> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IBE_NPBUADProduct@@@Z ENDP ; std::vector<ADProduct,std::allocator<ADProduct> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IBEXPAUADProduct@@0@Z ; std::vector<ADProduct,std::allocator<ADProduct> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IBEXPAUADProduct@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IBEXPAUADProduct@@0@Z PROC ; std::vector<ADProduct,std::allocator<ADProduct> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IBEXPAUADProduct@@0@Z ENDP ; std::vector<ADProduct,std::allocator<ADProduct> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE@XZ ; std::_Vector_val<ADProduct,std::allocator<ADProduct> >::~_Vector_val<ADProduct,std::allocator<ADProduct> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ADProduct,std::allocator<ADProduct> >::~_Vector_val<ADProduct,std::allocator<ADProduct> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ADProduct,std::allocator<ADProduct> >::~_Vector_val<ADProduct,std::allocator<ADProduct> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UADProduct@@@std@@QAE@XZ		; std::allocator<ADProduct>::allocator<ADProduct>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UADProduct@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UADProduct@@@std@@QAE@XZ PROC		; std::allocator<ADProduct>::allocator<ADProduct>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UADProduct@@@std@@QAE@XZ ENDP		; std::allocator<ADProduct>::allocator<ADProduct>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QBEIXZ ; std::vector<ADProduct,std::allocator<ADProduct> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QBEIXZ PROC ; std::vector<ADProduct,std::allocator<ADProduct> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 18		 push	 24			; 00000018H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QBEIXZ ENDP ; std::vector<ADProduct,std::allocator<ADProduct> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IBEXXZ ; std::vector<ADProduct,std::allocator<ADProduct> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IBEXXZ PROC ; std::vector<ADProduct,std::allocator<ADProduct> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IBEXXZ ENDP ; std::vector<ADProduct,std::allocator<ADProduct> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UADProduct@@@std@@QAE@ABV01@@Z	; std::allocator<ADProduct>::allocator<ADProduct>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UADProduct@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UADProduct@@@std@@QAE@ABV01@@Z PROC	; std::allocator<ADProduct>::allocator<ADProduct>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UADProduct@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<ADProduct>::allocator<ADProduct>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UADProduct@@@std@@QAEXPAUADProduct@@I@Z ; std::allocator<ADProduct>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UADProduct@@@std@@QAEXPAUADProduct@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UADProduct@@@std@@QAEXPAUADProduct@@I@Z PROC ; std::allocator<ADProduct>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UADProduct@@@std@@QAEXPAUADProduct@@I@Z ENDP ; std::allocator<ADProduct>::deallocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UADProduct@@@std@@QBEIXZ	; std::allocator<ADProduct>::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@UADProduct@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UADProduct@@@std@@QBEIXZ PROC	; std::allocator<ADProduct>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UADProduct@@@std@@QBEIXZ ENDP	; std::allocator<ADProduct>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@std@@QAE@PAUADProduct@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ADProduct,std::allocator<ADProduct> > >::_Vector_const_iterator<std::_Vector_val<ADProduct,std::allocator<ADProduct> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@std@@QAE@PAUADProduct@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@std@@QAE@PAUADProduct@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ADProduct,std::allocator<ADProduct> > >::_Vector_const_iterator<std::_Vector_val<ADProduct,std::allocator<ADProduct> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@std@@QAE@PAUADProduct@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ADProduct,std::allocator<ADProduct> > >::_Vector_const_iterator<std::_Vector_val<ADProduct,std::allocator<ADProduct> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ADProduct,std::allocator<ADProduct> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ADProduct,std::allocator<ADProduct> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ADProduct,std::allocator<ADProduct> > >::_Compat
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUADProduct@@@std@@YAPBUADProduct@@ABU1@@Z ; std::addressof<ADProduct const >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBUADProduct@@@std@@YAPBUADProduct@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUADProduct@@@std@@YAPBUADProduct@@ABU1@@Z PROC ; std::addressof<ADProduct const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUADProduct@@@std@@YAPBUADProduct@@ABU1@@Z ENDP ; std::addressof<ADProduct const >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UADProduct@@@std@@YAPAUADProduct@@IPAU1@@Z ; std::_Allocate<ADProduct>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UADProduct@@@std@@YAPAUADProduct@@IPAU1@@Z
_TEXT	SEGMENT
$T510557 = -12						; size = 12
$T510562 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UADProduct@@@std@@YAPAUADProduct@@IPAU1@@Z PROC ; std::_Allocate<ADProduct>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 aa aa aa
	0a		 cmp	 ecx, 178956970		; 0aaaaaaaH
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	6b c9 18	 imul	 ecx, 24			; 00000018H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T510562[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T510562[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T510557[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T510557[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T510557[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UADProduct@@@std@@YAPAUADProduct@@IPAU1@@Z ENDP ; std::_Allocate<ADProduct>
_TEXT	ENDS
PUBLIC	??$forward@AAUADProduct@@@std@@YAAAUADProduct@@AAU1@@Z ; std::forward<ADProduct &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUADProduct@@@std@@YAAAUADProduct@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUADProduct@@@std@@YAAAUADProduct@@AAU1@@Z PROC ; std::forward<ADProduct &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUADProduct@@@std@@YAAAUADProduct@@AAU1@@Z ENDP ; std::forward<ADProduct &>
_TEXT	ENDS
PUBLIC	??$construct@AAUADProduct@@@?$allocator@UADProduct@@@std@@QAEXPAUADProduct@@AAU2@@Z ; std::allocator<ADProduct>::construct<ADProduct &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUADProduct@@@?$allocator@UADProduct@@@std@@QAEXPAUADProduct@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUADProduct@@@?$allocator@UADProduct@@@std@@QAEXPAUADProduct@@AAU2@@Z PROC ; std::allocator<ADProduct>::construct<ADProduct &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN3@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	6a 06		 push	 6
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN3@construct:
  00015	5f		 pop	 edi

; 209  : 		}

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
??$construct@AAUADProduct@@@?$allocator@UADProduct@@@std@@QAEXPAUADProduct@@AAU2@@Z ENDP ; std::allocator<ADProduct>::construct<ADProduct &>
_TEXT	ENDS
PUBLIC	??$forward@ABUADProduct@@@std@@YAABUADProduct@@ABU1@@Z ; std::forward<ADProduct const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUADProduct@@@std@@YAABUADProduct@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUADProduct@@@std@@YAABUADProduct@@ABU1@@Z PROC ; std::forward<ADProduct const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUADProduct@@@std@@YAABUADProduct@@ABU1@@Z ENDP ; std::forward<ADProduct const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UADProduct@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUADProduct@@0@Z ; std::_Ptr_cat<ADProduct,ADProduct>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UADProduct@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUADProduct@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UADProduct@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUADProduct@@0@Z PROC ; std::_Ptr_cat<ADProduct,ADProduct>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UADProduct@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUADProduct@@0@Z ENDP ; std::_Ptr_cat<ADProduct,ADProduct>
_TEXT	ENDS
PUBLIC	??$_Construct@UADProduct@@ABU1@@std@@YAXPAUADProduct@@ABU1@@Z ; std::_Construct<ADProduct,ADProduct const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UADProduct@@ABU1@@std@@YAXPAUADProduct@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UADProduct@@ABU1@@std@@YAXPAUADProduct@@ABU1@@Z PROC ; std::_Construct<ADProduct,ADProduct const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN3@Construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	6a 06		 push	 6
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN3@Construct:
  00015	5f		 pop	 edi

; 49   : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Construct@UADProduct@@ABU1@@std@@YAXPAUADProduct@@ABU1@@Z ENDP ; std::_Construct<ADProduct,ADProduct const &>
_TEXT	ENDS
PUBLIC	??$move@AAUADProduct@@@std@@YA$$QAUADProduct@@AAU1@@Z ; std::move<ADProduct &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUADProduct@@@std@@YA$$QAUADProduct@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUADProduct@@@std@@YA$$QAUADProduct@@AAU1@@Z PROC ; std::move<ADProduct &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUADProduct@@@std@@YA$$QAUADProduct@@AAU1@@Z ENDP ; std::move<ADProduct &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUADProduct@@@std@@YAPAUADProduct@@PAU1@@Z ; std::_Val_type<ADProduct *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUADProduct@@@std@@YAPAUADProduct@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUADProduct@@@std@@YAPAUADProduct@@PAU1@@Z PROC ; std::_Val_type<ADProduct *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUADProduct@@@std@@YAPAUADProduct@@PAU1@@Z ENDP ; std::_Val_type<ADProduct *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UADProduct@@@std@@YAXPAUADProduct@@@Z ; std::_Destroy<ADProduct>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UADProduct@@@std@@YAXPAUADProduct@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UADProduct@@@std@@YAXPAUADProduct@@@Z PROC	; std::_Destroy<ADProduct>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UADProduct@@@std@@YAXPAUADProduct@@@Z ENDP	; std::_Destroy<ADProduct>
_TEXT	ENDS
PUBLIC	??$forward@UADProduct@@@std@@YA$$QAUADProduct@@AAU1@@Z ; std::forward<ADProduct>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UADProduct@@@std@@YA$$QAUADProduct@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UADProduct@@@std@@YA$$QAUADProduct@@AAU1@@Z PROC ; std::forward<ADProduct>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UADProduct@@@std@@YA$$QAUADProduct@@AAU1@@Z ENDP ; std::forward<ADProduct>
_TEXT	ENDS
PUBLIC	??0CTimeSpan@ATL@@QAE@_J@Z			; ATL::CTimeSpan::CTimeSpan
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\atltime.inl
;	COMDAT ??0CTimeSpan@ATL@@QAE@_J@Z
_TEXT	SEGMENT
_time$ = 8						; size = 8
??0CTimeSpan@ATL@@QAE@_J@Z PROC				; ATL::CTimeSpan::CTimeSpan, COMDAT
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR _time$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _time$[ebp+4]
  0000d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 34   : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0CTimeSpan@ATL@@QAE@_J@Z ENDP				; ATL::CTimeSpan::CTimeSpan
_TEXT	ENDS
PUBLIC	?GetDays@CTimeSpan@ATL@@QBE_JXZ			; ATL::CTimeSpan::GetDays
EXTRN	__alldiv:PROC
; Function compile flags: /Ogsp
;	COMDAT ?GetDays@CTimeSpan@ATL@@QBE_JXZ
_TEXT	SEGMENT
?GetDays@CTimeSpan@ATL@@QBE_JXZ PROC			; ATL::CTimeSpan::GetDays, COMDAT
; _this$ = ecx

; 47   : 	return( m_timeSpan/(24*3600) );

  00000	6a 00		 push	 0
  00002	68 80 51 01 00	 push	 86400			; 00015180H
  00007	ff 71 04	 push	 DWORD PTR [ecx+4]
  0000a	ff 31		 push	 DWORD PTR [ecx]
  0000c	e8 00 00 00 00	 call	 __alldiv

; 48   : }

  00011	c3		 ret	 0
?GetDays@CTimeSpan@ATL@@QBE_JXZ ENDP			; ATL::CTimeSpan::GetDays
_TEXT	ENDS
PUBLIC	??0CTime@ATL@@QAE@XZ				; ATL::CTime::CTime
; Function compile flags: /Ogsp
;	COMDAT ??0CTime@ATL@@QAE@XZ
_TEXT	SEGMENT
??0CTime@ATL@@QAE@XZ PROC				; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 166  : {

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0
  00005	83 60 04 00	 and	 DWORD PTR [eax+4], 0

; 167  : }

  00009	c3		 ret	 0
??0CTime@ATL@@QAE@XZ ENDP				; ATL::CTime::CTime
_TEXT	ENDS
PUBLIC	??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z		; ATL::CTime::operator-
; Function compile flags: /Ogsp
;	COMDAT ??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_time$ = 12						; size = 8
??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z PROC		; ATL::CTime::operator-, COMDAT
; _this$ = ecx

; 304  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 305  : 	return( CTimeSpan( m_time-time.m_time ) );

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	2b 55 0c	 sub	 edx, DWORD PTR _time$[ebp]
  00008	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000b	1b 4d 10	 sbb	 ecx, DWORD PTR _time$[ebp+4]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	89 10		 mov	 DWORD PTR [eax], edx
  00013	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 306  : }

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z ENDP		; ATL::CTime::operator-
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetGradeType@CostumeShopInfo@@QBEHXZ		; CostumeShopInfo::GetGradeType
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iocostumeshopinfomanager.h
;	COMDAT ?GetGradeType@CostumeShopInfo@@QBEHXZ
_TEXT	SEGMENT
?GetGradeType@CostumeShopInfo@@QBEHXZ PROC		; CostumeShopInfo::GetGradeType, COMDAT
; _this$ = ecx

; 60   : 	inline int GetGradeType() const { return m_nGradeType; }

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	c3		 ret	 0
?GetGradeType@CostumeShopInfo@@QBEHXZ ENDP		; CostumeShopInfo::GetGradeType
_TEXT	ENDS
PUBLIC	?GetName@CostumeShopInfo@@QAEAAVioHashString@@XZ ; CostumeShopInfo::GetName
; Function compile flags: /Ogsp
;	COMDAT ?GetName@CostumeShopInfo@@QAEAAVioHashString@@XZ
_TEXT	SEGMENT
?GetName@CostumeShopInfo@@QAEAAVioHashString@@XZ PROC	; CostumeShopInfo::GetName, COMDAT
; _this$ = ecx

; 63   : 	inline ioHashString &GetName() { return m_szName; }

  00000	8d 41 40	 lea	 eax, DWORD PTR [ecx+64]
  00003	c3		 ret	 0
?GetName@CostumeShopInfo@@QAEAAVioHashString@@XZ ENDP	; CostumeShopInfo::GetName
_TEXT	ENDS
PUBLIC	?GetIconName@CostumeShopInfo@@QAEAAVioHashString@@XZ ; CostumeShopInfo::GetIconName
; Function compile flags: /Ogsp
;	COMDAT ?GetIconName@CostumeShopInfo@@QAEAAVioHashString@@XZ
_TEXT	SEGMENT
?GetIconName@CostumeShopInfo@@QAEAAVioHashString@@XZ PROC ; CostumeShopInfo::GetIconName, COMDAT
; _this$ = ecx

; 64   : 	inline ioHashString &GetIconName() { return m_szIconName; }

  00000	8d 41 50	 lea	 eax, DWORD PTR [ecx+80]
  00003	c3		 ret	 0
?GetIconName@CostumeShopInfo@@QAEAAVioHashString@@XZ ENDP ; CostumeShopInfo::GetIconName
_TEXT	ENDS
PUBLIC	?GetNeedCash@CostumeShopInfo@@QBEHXZ		; CostumeShopInfo::GetNeedCash
; Function compile flags: /Ogsp
;	COMDAT ?GetNeedCash@CostumeShopInfo@@QBEHXZ
_TEXT	SEGMENT
?GetNeedCash@CostumeShopInfo@@QBEHXZ PROC		; CostumeShopInfo::GetNeedCash, COMDAT
; _this$ = ecx

; 66   : 	inline int GetNeedCash() const { return m_nNeedCash; }

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	c3		 ret	 0
?GetNeedCash@CostumeShopInfo@@QBEHXZ ENDP		; CostumeShopInfo::GetNeedCash
_TEXT	ENDS
PUBLIC	?GetShopMarkType@CostumeShopInfo@@QBEHXZ	; CostumeShopInfo::GetShopMarkType
; Function compile flags: /Ogsp
;	COMDAT ?GetShopMarkType@CostumeShopInfo@@QBEHXZ
_TEXT	SEGMENT
?GetShopMarkType@CostumeShopInfo@@QBEHXZ PROC		; CostumeShopInfo::GetShopMarkType, COMDAT
; _this$ = ecx

; 73   : 	inline int GetShopMarkType() const { return m_nShopMarkType; }	

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	c3		 ret	 0
?GetShopMarkType@CostumeShopInfo@@QBEHXZ ENDP		; CostumeShopInfo::GetShopMarkType
_TEXT	ENDS
PUBLIC	?IsActive@CostumeShopInfo@@QBE_NXZ		; CostumeShopInfo::IsActive
; Function compile flags: /Ogsp
;	COMDAT ?IsActive@CostumeShopInfo@@QBE_NXZ
_TEXT	SEGMENT
?IsActive@CostumeShopInfo@@QBE_NXZ PROC			; CostumeShopInfo::IsActive, COMDAT
; _this$ = ecx

; 76   : 	inline bool IsActive() const { return m_bActive; }

  00000	8a 41 3d	 mov	 al, BYTE PTR [ecx+61]
  00003	c3		 ret	 0
?IsActive@CostumeShopInfo@@QBE_NXZ ENDP			; CostumeShopInfo::IsActive
_TEXT	ENDS
PUBLIC	?SetToolTipWndID@ioLSMouse@@QAEXK@Z		; ioLSMouse::SetToolTipWndID
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iolsmouse.h
;	COMDAT ?SetToolTipWndID@ioLSMouse@@QAEXK@Z
_TEXT	SEGMENT
_dwToolTipWndID$ = 8					; size = 4
?SetToolTipWndID@ioLSMouse@@QAEXK@Z PROC		; ioLSMouse::SetToolTipWndID, COMDAT
; _this$ = ecx

; 56   : 	void SetToolTipWndID(DWORD dwToolTipWndID) { m_dwToolTipWndID = dwToolTipWndID; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _dwToolTipWndID$[ebp]
  00006	89 41 74	 mov	 DWORD PTR [ecx+116], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetToolTipWndID@ioLSMouse@@QAEXK@Z ENDP		; ioLSMouse::SetToolTipWndID
_TEXT	ENDS
PUBLIC	?GetMouse@ioApplication@@QAEPAVioLSMouse@@XZ	; ioApplication::GetMouse
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioapplication.h
;	COMDAT ?GetMouse@ioApplication@@QAEPAVioLSMouse@@XZ
_TEXT	SEGMENT
?GetMouse@ioApplication@@QAEPAVioLSMouse@@XZ PROC	; ioApplication::GetMouse, COMDAT
; _this$ = ecx

; 796  : 	inline ioLSMouse* GetMouse(){ return &m_Mouse;	}

  00000	8d 81 90 00 00
	00		 lea	 eax, DWORD PTR [ecx+144]
  00006	c3		 ret	 0
?GetMouse@ioApplication@@QAEPAVioLSMouse@@XZ ENDP	; ioApplication::GetMouse
_TEXT	ENDS
PUBLIC	?GetGradeType@ioEtcItem@@QBEHXZ			; ioEtcItem::GetGradeType
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioetcitem.h
;	COMDAT ?GetGradeType@ioEtcItem@@QBEHXZ
_TEXT	SEGMENT
?GetGradeType@ioEtcItem@@QBEHXZ PROC			; ioEtcItem::GetGradeType, COMDAT
; _this$ = ecx

; 440  : 	inline int GetGradeType() const { return m_nGradeType; }

  00000	8b 81 84 01 00
	00		 mov	 eax, DWORD PTR [ecx+388]
  00006	c3		 ret	 0
?GetGradeType@ioEtcItem@@QBEHXZ ENDP			; ioEtcItem::GetGradeType
_TEXT	ENDS
PUBLIC	?GetIconName@ioEtcItem@@QBEABVioHashString@@XZ	; ioEtcItem::GetIconName
; Function compile flags: /Ogsp
;	COMDAT ?GetIconName@ioEtcItem@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetIconName@ioEtcItem@@QBEABVioHashString@@XZ PROC	; ioEtcItem::GetIconName, COMDAT
; _this$ = ecx

; 467  : 	inline const ioHashString& GetIconName() const { return m_IconName; }

  00000	8d 81 60 01 00
	00		 lea	 eax, DWORD PTR [ecx+352]
  00006	c3		 ret	 0
?GetIconName@ioEtcItem@@QBEABVioHashString@@XZ ENDP	; ioEtcItem::GetIconName
_TEXT	ENDS
PUBLIC	?GetGroup@RandomMachineInfo@@QBEHXZ		; RandomMachineInfo::GetGroup
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioextraiteminfomanager.h
;	COMDAT ?GetGroup@RandomMachineInfo@@QBEHXZ
_TEXT	SEGMENT
?GetGroup@RandomMachineInfo@@QBEHXZ PROC		; RandomMachineInfo::GetGroup, COMDAT
; _this$ = ecx

; 114  : 	inline int GetGroup() const { return m_iGroup; }

  00000	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00003	c3		 ret	 0
?GetGroup@RandomMachineInfo@@QBEHXZ ENDP		; RandomMachineInfo::GetGroup
_TEXT	ENDS
PUBLIC	?GetName@RandomMachineInfo@@QBEABVioHashString@@XZ ; RandomMachineInfo::GetName
; Function compile flags: /Ogsp
;	COMDAT ?GetName@RandomMachineInfo@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetName@RandomMachineInfo@@QBEABVioHashString@@XZ PROC	; RandomMachineInfo::GetName, COMDAT
; _this$ = ecx

; 116  : 	inline const ioHashString& GetName() const { return m_Name; }

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00003	c3		 ret	 0
?GetName@RandomMachineInfo@@QBEABVioHashString@@XZ ENDP	; RandomMachineInfo::GetName
_TEXT	ENDS
PUBLIC	?GetIconName@RandomMachineInfo@@QBEABVioHashString@@XZ ; RandomMachineInfo::GetIconName
; Function compile flags: /Ogsp
;	COMDAT ?GetIconName@RandomMachineInfo@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetIconName@RandomMachineInfo@@QBEABVioHashString@@XZ PROC ; RandomMachineInfo::GetIconName, COMDAT
; _this$ = ecx

; 117  : 	inline const ioHashString& GetIconName() const { return m_IconName; }

  00000	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  00003	c3		 ret	 0
?GetIconName@RandomMachineInfo@@QBEABVioHashString@@XZ ENDP ; RandomMachineInfo::GetIconName
_TEXT	ENDS
PUBLIC	?GetNeedCash@RandomMachineInfo@@QBEHXZ		; RandomMachineInfo::GetNeedCash
; Function compile flags: /Ogsp
;	COMDAT ?GetNeedCash@RandomMachineInfo@@QBEHXZ
_TEXT	SEGMENT
?GetNeedCash@RandomMachineInfo@@QBEHXZ PROC		; RandomMachineInfo::GetNeedCash, COMDAT
; _this$ = ecx

; 119  : 	inline int GetNeedCash() const { return m_iNeedCash; }

  00000	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  00003	c3		 ret	 0
?GetNeedCash@RandomMachineInfo@@QBEHXZ ENDP		; RandomMachineInfo::GetNeedCash
_TEXT	ENDS
PUBLIC	?GetShopMarkType@RandomMachineInfo@@QBEHXZ	; RandomMachineInfo::GetShopMarkType
; Function compile flags: /Ogsp
;	COMDAT ?GetShopMarkType@RandomMachineInfo@@QBEHXZ
_TEXT	SEGMENT
?GetShopMarkType@RandomMachineInfo@@QBEHXZ PROC		; RandomMachineInfo::GetShopMarkType, COMDAT
; _this$ = ecx

; 126  : 	inline int GetShopMarkType() const { return m_iShopMarkType; }	

  00000	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  00003	c3		 ret	 0
?GetShopMarkType@RandomMachineInfo@@QBEHXZ ENDP		; RandomMachineInfo::GetShopMarkType
_TEXT	ENDS
PUBLIC	?GetLimitDate@RandomMachineInfo@@QBEHXZ		; RandomMachineInfo::GetLimitDate
; Function compile flags: /Ogsp
;	COMDAT ?GetLimitDate@RandomMachineInfo@@QBEHXZ
_TEXT	SEGMENT
?GetLimitDate@RandomMachineInfo@@QBEHXZ PROC		; RandomMachineInfo::GetLimitDate, COMDAT
; _this$ = ecx

; 127  : 	inline int GetLimitDate() const { return m_iLimitDate; }

  00000	8b 41 78	 mov	 eax, DWORD PTR [ecx+120]
  00003	c3		 ret	 0
?GetLimitDate@RandomMachineInfo@@QBEHXZ ENDP		; RandomMachineInfo::GetLimitDate
_TEXT	ENDS
PUBLIC	?IsActive@RandomMachineInfo@@QBE_NXZ		; RandomMachineInfo::IsActive
; Function compile flags: /Ogsp
;	COMDAT ?IsActive@RandomMachineInfo@@QBE_NXZ
_TEXT	SEGMENT
?IsActive@RandomMachineInfo@@QBE_NXZ PROC		; RandomMachineInfo::IsActive, COMDAT
; _this$ = ecx

; 129  : 	inline bool IsActive() const { return m_bActive; }

  00000	8a 41 71	 mov	 al, BYTE PTR [ecx+113]
  00003	c3		 ret	 0
?IsActive@RandomMachineInfo@@QBE_NXZ ENDP		; RandomMachineInfo::IsActive
_TEXT	ENDS
PUBLIC	?GetGradeType@RandomMachineInfo@@QBEHXZ		; RandomMachineInfo::GetGradeType
; Function compile flags: /Ogsp
;	COMDAT ?GetGradeType@RandomMachineInfo@@QBEHXZ
_TEXT	SEGMENT
?GetGradeType@RandomMachineInfo@@QBEHXZ PROC		; RandomMachineInfo::GetGradeType, COMDAT
; _this$ = ecx

; 131  : 	inline int GetGradeType() const { return m_nGradeType; }

  00000	8b 81 8c 00 00
	00		 mov	 eax, DWORD PTR [ecx+140]
  00006	c3		 ret	 0
?GetGradeType@RandomMachineInfo@@QBEHXZ ENDP		; RandomMachineInfo::GetGradeType
_TEXT	ENDS
PUBLIC	?GetName@ioSetItemInfo@@QBEABVioHashString@@XZ	; ioSetItemInfo::GetName
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iosetiteminfo.h
;	COMDAT ?GetName@ioSetItemInfo@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetName@ioSetItemInfo@@QBEABVioHashString@@XZ PROC	; ioSetItemInfo::GetName, COMDAT
; _this$ = ecx

; 117  : 	inline const ioHashString& GetName() const { return m_SetName; }

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00003	c3		 ret	 0
?GetName@ioSetItemInfo@@QBEABVioHashString@@XZ ENDP	; ioSetItemInfo::GetName
_TEXT	ENDS
PUBLIC	?GetShopMarkType@ioSetItemInfo@@QBEHXZ		; ioSetItemInfo::GetShopMarkType
; Function compile flags: /Ogsp
;	COMDAT ?GetShopMarkType@ioSetItemInfo@@QBEHXZ
_TEXT	SEGMENT
?GetShopMarkType@ioSetItemInfo@@QBEHXZ PROC		; ioSetItemInfo::GetShopMarkType, COMDAT
; _this$ = ecx

; 129  : 	inline int GetShopMarkType() const { return m_iShopMarkType; }

  00000	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  00003	c3		 ret	 0
?GetShopMarkType@ioSetItemInfo@@QBEHXZ ENDP		; ioSetItemInfo::GetShopMarkType
_TEXT	ENDS
PUBLIC	??0?$allocator@H@std@@QAE@XZ			; std::allocator<int>::allocator<int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@H@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@H@std@@QAE@XZ PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@H@std@@QAE@XZ ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >
_TEXT	ENDS
PUBLIC	??0?$allocator@H@std@@QAE@ABV01@@Z		; std::allocator<int>::allocator<int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@H@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@H@std@@QAE@ABV01@@Z PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@H@std@@QAE@ABV01@@Z ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@H@std@@QAEXPAHI@Z	; std::allocator<int>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@H@std@@QAEXPAHI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@H@std@@QAEXPAHI@Z PROC		; std::allocator<int>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@H@std@@QAEXPAHI@Z ENDP		; std::allocator<int>::deallocate
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z ; std::vector<int,std::allocator<int> >::_Make_iter
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z PROC ; std::vector<int,std::allocator<int> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z ENDP ; std::vector<int,std::allocator<int> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Compat
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z PROC ; std::_Ptr_cat<int,int>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ENDP ; std::_Ptr_cat<int,int>
_TEXT	ENDS
PUBLIC	??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<int *,int *>
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<int *,int *>, COMDAT

; 2522 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2523 : 	ptrdiff_t _Count = _Last - _First;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	57		 push	 edi

; 2524 : 	_CSTD memmove(&*_Dest, &*_First,
; 2525 : 		_Count * sizeof (*_First));

  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0000e	c1 fe 02	 sar	 esi, 2
  00011	c1 e6 02	 shl	 esi, 2
  00014	56		 push	 esi
  00015	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00018	57		 push	 edi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2526 : 	return (_Dest + _Count);

  00022	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 2527 : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<int *,int *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 105  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	??0ADProductLink@@QAE@XZ			; ADProductLink::ADProductLink
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioshopmanager.h
;	COMDAT ??0ADProductLink@@QAE@XZ
_TEXT	SEGMENT
??0ADProductLink@@QAE@XZ PROC				; ADProductLink::ADProductLink, COMDAT
; _this$ = ecx

; 64   : 	ADProductLink()

  00000	8b c1		 mov	 eax, ecx

; 65   : 	{
; 66   : 		Clear();

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0000f	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00012	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 67   : 	}

  00015	c3		 ret	 0
??0ADProductLink@@QAE@XZ ENDP				; ADProductLink::ADProductLink
_TEXT	ENDS
PUBLIC	?SetPositionToDefault@NewShopStartWnd@@MAEXHH_N0@Z ; NewShopStartWnd::SetPositionToDefault
EXTRN	__imp_?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\newshopstartwnd.cpp
;	COMDAT ?SetPositionToDefault@NewShopStartWnd@@MAEXHH_N0@Z
_TEXT	SEGMENT
_iParentWidth$ = 8					; size = 4
_iParentHeight$ = 12					; size = 4
_bChildMove$ = 16					; size = 1
_bCreate$ = 20						; size = 1
?SetPositionToDefault@NewShopStartWnd@@MAEXHH_N0@Z PROC	; NewShopStartWnd::SetPositionToDefault, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 64   : 	ioWnd::SetPositionToDefault( iParentWidth, iParentHeight, bChildMove, bCreate );

  00004	ff 75 14	 push	 DWORD PTR _bCreate$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 10	 push	 DWORD PTR _bChildMove$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR _iParentHeight$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR _iParentWidth$[ebp]
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z

; 65   : 
; 66   : 	ParseCategoryButton();

  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?ParseCategoryButton@NewShopStartWnd@@IAEXXZ ; NewShopStartWnd::ParseCategoryButton
  0001f	5e		 pop	 esi

; 67   : }

  00020	5d		 pop	 ebp
  00021	c2 10 00	 ret	 16			; 00000010H
?SetPositionToDefault@NewShopStartWnd@@MAEXHH_N0@Z ENDP	; NewShopStartWnd::SetPositionToDefault
_TEXT	ENDS
PUBLIC	?GetPageMax@NewShopStartWnd@@IAEHXZ		; NewShopStartWnd::GetPageMax
; Function compile flags: /Ogsp
;	COMDAT ?GetPageMax@NewShopStartWnd@@IAEHXZ
_TEXT	SEGMENT
?GetPageMax@NewShopStartWnd@@IAEHXZ PROC		; NewShopStartWnd::GetPageMax, COMDAT
; _this$ = ecx

; 190  : 	return (int)(m_CurrADProductList.size()-1) / (ID_GOODS_BTN_MAX - ID_GOODS_01_BTN);

  00000	8b 81 7c 01 00
	00		 mov	 eax, DWORD PTR [ecx+380]
  00006	2b 81 78 01 00
	00		 sub	 eax, DWORD PTR [ecx+376]
  0000c	6a 18		 push	 24			; 00000018H
  0000e	99		 cdq
  0000f	59		 pop	 ecx
  00010	f7 f9		 idiv	 ecx
  00012	6a 07		 push	 7
  00014	59		 pop	 ecx
  00015	48		 dec	 eax
  00016	99		 cdq
  00017	f7 f9		 idiv	 ecx

; 191  : }

  00019	c3		 ret	 0
?GetPageMax@NewShopStartWnd@@IAEHXZ ENDP		; NewShopStartWnd::GetPageMax
_TEXT	ENDS
PUBLIC	?iwm_command@ioProductLinkButton@@MAEXPAVioWnd@@HK@Z ; ioProductLinkButton::iwm_command
EXTRN	__imp_?GetID@ioWnd@@QBEKXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?iwm_command@ioProductLinkButton@@MAEXPAVioWnd@@HK@Z
_TEXT	SEGMENT
_pWnd$ = 8						; size = 4
_cmd$ = 12						; size = 4
_param$ = 16						; size = 4
?iwm_command@ioProductLinkButton@@MAEXPAVioWnd@@HK@Z PROC ; ioProductLinkButton::iwm_command, COMDAT
; _this$ = ecx

; 342  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 343  : 	DWORD dwID = pWnd->GetID();

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _pWnd$[ebp]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetID@ioWnd@@QBEKXZ

; 344  : 	switch( dwID )

  0000f	48		 dec	 eax
  00010	75 0d		 jne	 SHORT $LN1@iwm_comman

; 345  : 	{
; 346  : 	case ID_ICON_BTN:
; 347  : 		{
; 348  : 			if( cmd == IOBN_BTNUP )

  00012	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  00016	75 07		 jne	 SHORT $LN1@iwm_comman

; 349  : 			{
; 350  : 				MoveDirectLink();

  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?MoveDirectLink@ioProductLinkButton@@QAEXXZ ; ioProductLinkButton::MoveDirectLink
$LN1@iwm_comman:
  0001f	5e		 pop	 esi

; 351  : 			}
; 352  : 		}
; 353  : 		break;
; 354  : 	}
; 355  : }

  00020	5d		 pop	 ebp
  00021	c2 0c 00	 ret	 12			; 0000000cH
?iwm_command@ioProductLinkButton@@MAEXPAVioWnd@@HK@Z ENDP ; ioProductLinkButton::iwm_command
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioProductIconButton@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioProductIconButton@@UAEPAXI@Z PROC			; ioProductIconButton::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioProductIconButton@@UAE@XZ ; ioProductIconButton::~ioProductIconButton
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@2:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioProductIconButton@@UAEPAXI@Z ENDP			; ioProductIconButton::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?SetProductIconInfo@ioProductIconButton@@QAEXABVioHashString@@HHH_NH@Z ; ioProductIconButton::SetProductIconInfo
EXTRN	?ConvertCTime@DateHelp@@YAXKAAVCTime@ATL@@@Z:PROC ; DateHelp::ConvertCTime
EXTRN	?GetCurrTime@DateHelp@@YAABVCTime@ATL@@XZ:PROC	; DateHelp::GetCurrTime
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	__imp_?CreateImageByFullName@ioUIImageSetManager@@QAEPAVioUIRenderImage@@ABVioHashString@@_N@Z:PROC
EXTRN	__imp_?GetSingleton@ioUIImageSetManager@@SAAAV1@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?SetProductIconInfo@ioProductIconButton@@QAEXABVioHashString@@HHH_NH@Z
_TEXT	SEGMENT
_kLimitTime$507693 = -8					; size = 8
_szIconName$ = 8					; size = 4
_iMarkType$ = 12					; size = 4
_iReinForceNumber$ = 16					; size = 4
_iLimitDate$ = 20					; size = 4
_bCostume$ = 24						; size = 1
_nGradeType$ = 28					; size = 4
?SetProductIconInfo@ioProductIconButton@@QAEXABVioHashString@@HHH_NH@Z PROC ; ioProductIconButton::SetProductIconInfo, COMDAT
; _this$ = ecx

; 764  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 765  : 	SAFEDELETE( m_pIcon );

  00008	8b 8e fc 01 00
	00		 mov	 ecx, DWORD PTR [esi+508]
  0000e	57		 push	 edi
  0000f	33 ff		 xor	 edi, edi
  00011	3b cf		 cmp	 ecx, edi
  00013	74 0d		 je	 SHORT $LN5@SetProduct
  00015	8b 01		 mov	 eax, DWORD PTR [ecx]
  00017	6a 01		 push	 1
  00019	ff 50 40	 call	 DWORD PTR [eax+64]
  0001c	89 be fc 01 00
	00		 mov	 DWORD PTR [esi+508], edi
$LN5@SetProduct:

; 766  : 	m_nGradeType = nGradeType;

  00022	8b 45 1c	 mov	 eax, DWORD PTR _nGradeType$[ebp]

; 767  : 
; 768  : 	if( !szIconName.IsEmpty() )

  00025	8b 4d 08	 mov	 ecx, DWORD PTR _szIconName$[ebp]
  00028	89 86 58 02 00
	00		 mov	 DWORD PTR [esi+600], eax
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00034	84 c0		 test	 al, al

; 769  : 	{
; 770  : 		SetActive();

  00036	8b 06		 mov	 eax, DWORD PTR [esi]
  00038	8b ce		 mov	 ecx, esi
  0003a	0f 85 b9 00 00
	00		 jne	 $LN4@SetProduct
  00040	ff 50 20	 call	 DWORD PTR [eax+32]

; 771  : 		m_pIcon				= g_UIImageSetMgr.CreateImageByFullName( szIconName );

  00043	57		 push	 edi
  00044	ff 75 08	 push	 DWORD PTR _szIconName$[ebp]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioUIImageSetManager@@SAAAV1@XZ
  0004d	8b c8		 mov	 ecx, eax
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CreateImageByFullName@ioUIImageSetManager@@QAEPAVioUIRenderImage@@ABVioHashString@@_N@Z
  00055	89 86 fc 01 00
	00		 mov	 DWORD PTR [esi+508], eax

; 772  : 		m_iMarkType			= iMarkType;

  0005b	8b 45 0c	 mov	 eax, DWORD PTR _iMarkType$[ebp]
  0005e	89 86 3c 02 00
	00		 mov	 DWORD PTR [esi+572], eax

; 773  : 		m_iReinForceNumber	= iReinForceNumber;

  00064	8b 45 10	 mov	 eax, DWORD PTR _iReinForceNumber$[ebp]
  00067	89 86 40 02 00
	00		 mov	 DWORD PTR [esi+576], eax

; 774  : 		m_bCostume			= bCostume;

  0006d	8a 45 18	 mov	 al, BYTE PTR _bCostume$[ebp]
  00070	88 86 48 02 00
	00		 mov	 BYTE PTR [esi+584], al

; 775  : 		m_iLimitDay			= 0;

  00076	89 be 44 02 00
	00		 mov	 DWORD PTR [esi+580], edi

; 776  : 		m_dwScreenCheckTime = FRAMEGETTIME();

  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00082	8b c8		 mov	 ecx, eax
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0008a	89 86 54 02 00
	00		 mov	 DWORD PTR [esi+596], eax

; 777  : 
; 778  : 		if( 0 < iLimitDate )

  00090	39 7d 14	 cmp	 DWORD PTR _iLimitDate$[ebp], edi
  00093	7e 43		 jle	 SHORT $LN3@SetProduct

; 779  : 		{
; 780  : 			CTime kLimitTime;

  00095	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00099	53		 push	 ebx
  0009a	66 0f 13 45 f8	 movlpd	 QWORD PTR _kLimitTime$507693[ebp], xmm0

; 781  : 			CTime kCurrTime = DateHelp::GetCurrTime();

  0009f	e8 00 00 00 00	 call	 ?GetCurrTime@DateHelp@@YAABVCTime@ATL@@XZ ; DateHelp::GetCurrTime
  000a4	8b 38		 mov	 edi, DWORD PTR [eax]
  000a6	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]

; 782  : 			DateHelp::ConvertCTime( iLimitDate, kLimitTime );

  000a9	8d 45 f8	 lea	 eax, DWORD PTR _kLimitTime$507693[ebp]
  000ac	50		 push	 eax
  000ad	ff 75 14	 push	 DWORD PTR _iLimitDate$[ebp]
  000b0	e8 00 00 00 00	 call	 ?ConvertCTime@DateHelp@@YAXKAAVCTime@ATL@@@Z ; DateHelp::ConvertCTime

; 783  : 			CTimeSpan TimeGap = kLimitTime - kCurrTime;

  000b5	8b 45 f8	 mov	 eax, DWORD PTR _kLimitTime$507693[ebp]
  000b8	59		 pop	 ecx
  000b9	59		 pop	 ecx
  000ba	8b 4d fc	 mov	 ecx, DWORD PTR _kLimitTime$507693[ebp+4]

; 784  : 			m_iLimitDay = TimeGap.GetDays();

  000bd	6a 00		 push	 0
  000bf	2b c7		 sub	 eax, edi
  000c1	68 80 51 01 00	 push	 86400			; 00015180H
  000c6	1b cb		 sbb	 ecx, ebx
  000c8	51		 push	 ecx
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 __alldiv
  000cf	89 86 44 02 00
	00		 mov	 DWORD PTR [esi+580], eax
  000d5	33 ff		 xor	 edi, edi
  000d7	5b		 pop	 ebx
$LN3@SetProduct:

; 785  : 		}
; 786  : 
; 787  : 		if( m_pIcon )

  000d8	8b b6 fc 01 00
	00		 mov	 esi, DWORD PTR [esi+508]
  000de	3b f7		 cmp	 esi, edi
  000e0	74 33		 je	 SHORT $LN1@SetProduct

; 788  : 			m_pIcon->SetScale( 0.67f );

  000e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2b851f
  000ea	8b 06		 mov	 eax, DWORD PTR [esi]
  000ec	51		 push	 ecx
  000ed	8b ce		 mov	 ecx, esi
  000ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f4	ff 50 1c	 call	 DWORD PTR [eax+28]

; 789  : 	}
; 790  : 	else

  000f7	eb 1c		 jmp	 SHORT $LN1@SetProduct
$LN4@SetProduct:

; 791  : 	{
; 792  : 		m_iMarkType			= SHOP_MARK_TYPE_NONE;

  000f9	89 be 3c 02 00
	00		 mov	 DWORD PTR [esi+572], edi

; 793  : 		m_iReinForceNumber	= 0;

  000ff	89 be 40 02 00
	00		 mov	 DWORD PTR [esi+576], edi

; 794  : 		m_bCostume			= false;

  00105	c6 86 48 02 00
	00 00		 mov	 BYTE PTR [esi+584], 0

; 795  : 		m_iLimitDay			= 0;

  0010c	89 be 44 02 00
	00		 mov	 DWORD PTR [esi+580], edi

; 796  : 
; 797  : 		SetInActive();

  00112	ff 50 24	 call	 DWORD PTR [eax+36]
$LN1@SetProduct:
  00115	5f		 pop	 edi
  00116	5e		 pop	 esi

; 798  : 	}
; 799  : }

  00117	c9		 leave
  00118	c2 18 00	 ret	 24			; 00000018H
?SetProductIconInfo@ioProductIconButton@@QAEXABVioHashString@@HHH_NH@Z ENDP ; ioProductIconButton::SetProductIconInfo
_TEXT	ENDS
EXTRN	?GetSingleton@ioApplication@@SAAAV1@XZ:PROC	; ioApplication::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?OnProcess@ioProductIconButton@@MAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?OnProcess@ioProductIconButton@@MAEXM@Z PROC		; ioProductIconButton::OnProcess, COMDAT
; _this$ = ecx

; 906  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 907  : 	if( !IsShow() )

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  00009	84 c0		 test	 al, al
  0000b	0f 84 8e 00 00
	00		 je	 $LN13@OnProcess

; 908  : 		return;
; 909  : 
; 910  : 	if( m_dwScreenCheckTime > 0 && m_dwScreenGapTime > 0 && m_dwScreenTime > 0 )

  00011	53		 push	 ebx
  00012	33 db		 xor	 ebx, ebx
  00014	39 9e 54 02 00
	00		 cmp	 DWORD PTR [esi+596], ebx
  0001a	76 55		 jbe	 SHORT $LN3@OnProcess
  0001c	39 9e 50 02 00
	00		 cmp	 DWORD PTR [esi+592], ebx
  00022	76 4d		 jbe	 SHORT $LN3@OnProcess
  00024	39 9e 4c 02 00
	00		 cmp	 DWORD PTR [esi+588], ebx
  0002a	76 45		 jbe	 SHORT $LN3@OnProcess

; 911  : 	{
; 912  : 		DWORD dwCurTime = FRAMEGETTIME();

  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00032	8b c8		 mov	 ecx, eax
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 913  : 		if( m_bScreen )
; 914  : 		{
; 915  : 			if( m_dwScreenCheckTime+m_dwScreenTime < dwCurTime )

  0003a	8b 8e 54 02 00
	00		 mov	 ecx, DWORD PTR [esi+596]
  00040	38 9e 49 02 00
	00		 cmp	 BYTE PTR [esi+585], bl
  00046	74 12		 je	 SHORT $LN6@OnProcess
  00048	03 8e 4c 02 00
	00		 add	 ecx, DWORD PTR [esi+588]
  0004e	3b c8		 cmp	 ecx, eax
  00050	73 1f		 jae	 SHORT $LN3@OnProcess

; 916  : 			{
; 917  : 				m_bScreen = false;

  00052	88 9e 49 02 00
	00		 mov	 BYTE PTR [esi+585], bl

; 918  : 				m_dwScreenCheckTime = dwCurTime;
; 919  : 			}
; 920  : 		}
; 921  : 		else

  00058	eb 11		 jmp	 SHORT $LN17@OnProcess
$LN6@OnProcess:

; 922  : 		{
; 923  : 			if( m_dwScreenCheckTime+m_dwScreenGapTime < dwCurTime )

  0005a	03 8e 50 02 00
	00		 add	 ecx, DWORD PTR [esi+592]
  00060	3b c8		 cmp	 ecx, eax
  00062	73 0d		 jae	 SHORT $LN3@OnProcess

; 924  : 			{
; 925  : 				m_bScreen = true;

  00064	c6 86 49 02 00
	00 01		 mov	 BYTE PTR [esi+585], 1
$LN17@OnProcess:

; 926  : 				m_dwScreenCheckTime = dwCurTime;

  0006b	89 86 54 02 00
	00		 mov	 DWORD PTR [esi+596], eax
$LN3@OnProcess:

; 927  : 			}
; 928  : 		}
; 929  : 	}
; 930  : 
; 931  : 	if( m_bOver && !m_bClicked )

  00071	38 9e a8 00 00
	00		 cmp	 BYTE PTR [esi+168], bl
  00077	74 25		 je	 SHORT $LN15@OnProcess
  00079	38 9e a6 00 00
	00		 cmp	 BYTE PTR [esi+166], bl
  0007f	75 1d		 jne	 SHORT $LN15@OnProcess

; 932  : 	{
; 933  : 		ioLSMouse *pMouse = g_App.GetMouse();

  00081	57		 push	 edi
  00082	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton
  00087	8b f8		 mov	 edi, eax
  00089	81 c7 90 00 00
	00		 add	 edi, 144		; 00000090H

; 934  : 		if( pMouse )

  0008f	74 0c		 je	 SHORT $LN16@OnProcess

; 935  : 			pMouse->SetToolTipWndID( m_pParent->GetID() );

  00091	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetID@ioWnd@@QBEKXZ
  0009a	89 47 74	 mov	 DWORD PTR [edi+116], eax
$LN16@OnProcess:
  0009d	5f		 pop	 edi
$LN15@OnProcess:
  0009e	5b		 pop	 ebx
$LN13@OnProcess:
  0009f	5e		 pop	 esi

; 936  : 	}	
; 937  : }

  000a0	c2 04 00	 ret	 4
?OnProcess@ioProductIconButton@@MAEXM@Z ENDP		; ioProductIconButton::OnProcess
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE@V?$allocator@UADProduct@@@1@@Z ; std::_Vector_val<ADProduct,std::allocator<ADProduct> >::_Vector_val<ADProduct,std::allocator<ADProduct> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE@V?$allocator@UADProduct@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE@V?$allocator@UADProduct@@@1@@Z PROC ; std::_Vector_val<ADProduct,std::allocator<ADProduct> >::_Vector_val<ADProduct,std::allocator<ADProduct> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE@V?$allocator@UADProduct@@@1@@Z ENDP ; std::_Vector_val<ADProduct,std::allocator<ADProduct> >::_Vector_val<ADProduct,std::allocator<ADProduct> >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QBEIXZ ; std::vector<ADProduct,std::allocator<ADProduct> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QBEIXZ PROC ; std::vector<ADProduct,std::allocator<ADProduct> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QBEIXZ ENDP ; std::vector<ADProduct,std::allocator<ADProduct> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IBEII@Z ; std::vector<ADProduct,std::allocator<ADProduct> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IBEII@Z PROC ; std::vector<ADProduct,std::allocator<ADProduct> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 18		 push	 24			; 00000018H
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba aa aa aa 0a	 mov	 edx, 178956970		; 0aaaaaaaH
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00026	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Grow_to@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IBEII@Z ENDP ; std::vector<ADProduct,std::allocator<ADProduct> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@std@@QAE@PAUADProduct@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<ADProduct,std::allocator<ADProduct> > >::_Vector_iterator<std::_Vector_val<ADProduct,std::allocator<ADProduct> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@std@@QAE@PAUADProduct@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@std@@QAE@PAUADProduct@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ADProduct,std::allocator<ADProduct> > >::_Vector_iterator<std::_Vector_val<ADProduct,std::allocator<ADProduct> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@std@@QAE@PAUADProduct@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ADProduct,std::allocator<ADProduct> > >::_Vector_iterator<std::_Vector_val<ADProduct,std::allocator<ADProduct> > >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UADProduct@@@std@@QAEPAUADProduct@@I@Z ; std::allocator<ADProduct>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UADProduct@@@std@@QAEPAUADProduct@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UADProduct@@@std@@QAEPAUADProduct@@I@Z PROC ; std::allocator<ADProduct>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UADProduct@@@std@@YAPAUADProduct@@IPAU1@@Z ; std::_Allocate<ADProduct>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UADProduct@@@std@@QAEPAUADProduct@@I@Z ENDP ; std::allocator<ADProduct>::allocate
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ADProduct,std::allocator<ADProduct> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ADProduct,std::allocator<ADProduct> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ADProduct,std::allocator<ADProduct> > >::operator==
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$0L@@@YA_NABVioHashString@@AAY0L@$$CBD@Z	; operator==<11>
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iohashstring.h
;	COMDAT ??$?8$0L@@@YA_NABVioHashString@@AAY0L@$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 11
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$0L@@@YA_NABVioHashString@@AAY0L@$$CBD@Z PROC	; operator==<11>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 24 01 00
	00		 je	 $LN96@operator
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 0d 01 00
	00		 je	 $LN95@operator
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 f6 00 00
	00		 je	 $LN94@operator
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 df 00 00
	00		 je	 $LN93@operator
  00055	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00058	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  0005b	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005e	84 d2		 test	 dl, dl
  00060	0f 84 c8 00 00
	00		 je	 $LN92@operator
  00066	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00069	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006c	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006f	84 d2		 test	 dl, dl
  00071	0f 84 b1 00 00
	00		 je	 $LN91@operator
  00077	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007a	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 9a 00 00
	00		 je	 $LN90@operator
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 83 00 00
	00		 je	 $LN89@operator
  00099	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009c	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  0009f	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a2	84 d2		 test	 dl, dl
  000a4	74 70		 je	 SHORT $LN88@operator
  000a6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a9	88 55 f4	 mov	 BYTE PTR __t$[ebp+8], dl
  000ac	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000af	84 d2		 test	 dl, dl
  000b1	74 5d		 je	 SHORT $LN87@operator
  000b3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b6	80 78 0a 00	 cmp	 BYTE PTR [eax+10], 0
  000ba	88 55 f5	 mov	 BYTE PTR __t$[ebp+9], dl
  000bd	0f 84 87 00 00
	00		 je	 $LN1@operator
  000c3	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c6	84 d2		 test	 dl, dl
  000c8	74 40		 je	 SHORT $LN85@operator
  000ca	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000cd	88 55 f7	 mov	 BYTE PTR __t$[ebp+11], dl
  000d0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d3	84 d2		 test	 dl, dl
  000d5	74 2d		 je	 SHORT $LN84@operator
  000d7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000da	88 55 f8	 mov	 BYTE PTR __t$[ebp+12], dl
  000dd	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000e0	84 d2		 test	 dl, dl
  000e2	74 1a		 je	 SHORT $LN83@operator
  000e4	8a 40 0e	 mov	 al, BYTE PTR [eax+14]
  000e7	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ea	88 55 f9	 mov	 BYTE PTR __t$[ebp+13], dl
  000ed	84 c0		 test	 al, al
  000ef	74 07		 je	 SHORT $LN82@operator
  000f1	34 eb		 xor	 al, -21			; ffffffebH
  000f3	88 45 fa	 mov	 BYTE PTR __t$[ebp+14], al
  000f6	eb 52		 jmp	 SHORT $LN1@operator
$LN82@operator:
  000f8	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+14], -21 ; ffffffebH
  000fc	eb 4c		 jmp	 SHORT $LN1@operator
$LN83@operator:
  000fe	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+13], -20 ; ffffffecH
  00102	eb 46		 jmp	 SHORT $LN1@operator
$LN84@operator:
  00104	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  00108	eb 40		 jmp	 SHORT $LN1@operator
$LN85@operator:
  0010a	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  0010e	eb 3a		 jmp	 SHORT $LN1@operator
$LN87@operator:
  00110	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  00114	eb 34		 jmp	 SHORT $LN1@operator
$LN88@operator:
  00116	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  0011a	eb 2e		 jmp	 SHORT $LN1@operator
$LN89@operator:
  0011c	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  00120	eb 28		 jmp	 SHORT $LN1@operator
$LN90@operator:
  00122	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  00126	eb 22		 jmp	 SHORT $LN1@operator
$LN91@operator:
  00128	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  0012c	eb 1c		 jmp	 SHORT $LN1@operator
$LN92@operator:
  0012e	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00132	eb 16		 jmp	 SHORT $LN1@operator
$LN93@operator:
  00134	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00138	eb 10		 jmp	 SHORT $LN1@operator
$LN94@operator:
  0013a	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  0013e	eb 0a		 jmp	 SHORT $LN1@operator
$LN95@operator:
  00140	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  00144	eb 04		 jmp	 SHORT $LN1@operator
$LN96@operator:
  00146	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator:
  0014a	6a 02		 push	 2
  0014c	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  0014f	c6 45 f6 00	 mov	 BYTE PTR __t$[ebp+10], 0
  00153	5a		 pop	 edx
$LL104@operator:
  00154	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0015a	83 c0 04	 add	 eax, 4
  0015d	4a		 dec	 edx
  0015e	75 f4		 jne	 SHORT $LL104@operator
  00160	6a 08		 push	 8
  00162	58		 pop	 eax
$LL101@operator:
  00163	8b c8		 mov	 ecx, eax
  00165	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0016b	79 05		 jns	 SHORT $LN115@operator
  0016d	49		 dec	 ecx
  0016e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00171	41		 inc	 ecx
$LN115@operator:
  00172	b2 ed		 mov	 dl, -19			; ffffffedH
  00174	2a d1		 sub	 dl, cl
  00176	30 54 05 ec	 xor	 BYTE PTR __t$[ebp+eax], dl
  0017a	40		 inc	 eax
  0017b	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0017e	7c e3		 jl	 SHORT $LL101@operator
  00180	8b cf		 mov	 ecx, edi
  00182	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator:
  0018b	8a 08		 mov	 cl, BYTE PTR [eax]
  0018d	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0018f	75 1a		 jne	 SHORT $LN112@operator
  00191	84 c9		 test	 cl, cl
  00193	74 12		 je	 SHORT $LN113@operator
  00195	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00198	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0019b	75 0e		 jne	 SHORT $LN112@operator
  0019d	83 c0 02	 add	 eax, 2
  001a0	83 c6 02	 add	 esi, 2
  001a3	84 c9		 test	 cl, cl
  001a5	75 e4		 jne	 SHORT $LL111@operator
$LN113@operator:
  001a7	33 c0		 xor	 eax, eax
  001a9	eb 05		 jmp	 SHORT $LN114@operator
$LN112@operator:
  001ab	1b c0		 sbb	 eax, eax
  001ad	83 d8 ff	 sbb	 eax, -1
$LN114@operator:
  001b0	33 c9		 xor	 ecx, ecx
  001b2	85 c0		 test	 eax, eax
  001b4	0f 94 c0	 sete	 al

; 148  : }

  001b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ba	5f		 pop	 edi
  001bb	33 cd		 xor	 ecx, ebp
  001bd	5e		 pop	 esi
  001be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c3	c9		 leave
  001c4	c3		 ret	 0
??$?8$0L@@@YA_NABVioHashString@@AAY0L@$$CBD@Z ENDP	; operator==<11>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z	; operator==<9>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 9
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z PROC	; operator==<9>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _lhs$[ebp]
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 ee 00 00
	00		 je	 $LN96@operator@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 d7 00 00
	00		 je	 $LN95@operator@2
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 c0 00 00
	00		 je	 $LN94@operator@2
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 a9 00 00
	00		 je	 $LN93@operator@2
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 92 00 00
	00		 je	 $LN92@operator@2
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	74 7f		 je	 SHORT $LN91@operator@2
  00071	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00074	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  00077	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007a	84 d2		 test	 dl, dl
  0007c	74 6c		 je	 SHORT $LN90@operator@2
  0007e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00081	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  00084	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00087	84 d2		 test	 dl, dl
  00089	74 59		 je	 SHORT $LN89@operator@2
  0008b	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0008e	80 78 08 00	 cmp	 BYTE PTR [eax+8], 0
  00092	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  00095	74 7b		 je	 SHORT $LN1@operator@2
  00097	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  0009a	84 d2		 test	 dl, dl
  0009c	74 40		 je	 SHORT $LN87@operator@2
  0009e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000a1	88 55 f5	 mov	 BYTE PTR __t$[ebp+9], dl
  000a4	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000a7	84 d2		 test	 dl, dl
  000a9	74 2d		 je	 SHORT $LN86@operator@2
  000ab	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ae	88 55 f6	 mov	 BYTE PTR __t$[ebp+10], dl
  000b1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000b4	84 d2		 test	 dl, dl
  000b6	74 1a		 je	 SHORT $LN85@operator@2
  000b8	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  000bb	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000be	88 55 f7	 mov	 BYTE PTR __t$[ebp+11], dl
  000c1	84 c0		 test	 al, al
  000c3	74 07		 je	 SHORT $LN84@operator@2
  000c5	34 ed		 xor	 al, -19			; ffffffedH
  000c7	88 45 f8	 mov	 BYTE PTR __t$[ebp+12], al
  000ca	eb 46		 jmp	 SHORT $LN1@operator@2
$LN84@operator@2:
  000cc	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  000d0	eb 40		 jmp	 SHORT $LN1@operator@2
$LN85@operator@2:
  000d2	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  000d6	eb 3a		 jmp	 SHORT $LN1@operator@2
$LN86@operator@2:
  000d8	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000dc	eb 34		 jmp	 SHORT $LN1@operator@2
$LN87@operator@2:
  000de	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  000e2	eb 2e		 jmp	 SHORT $LN1@operator@2
$LN89@operator@2:
  000e4	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  000e8	eb 28		 jmp	 SHORT $LN1@operator@2
$LN90@operator@2:
  000ea	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  000ee	eb 22		 jmp	 SHORT $LN1@operator@2
$LN91@operator@2:
  000f0	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  000f4	eb 1c		 jmp	 SHORT $LN1@operator@2
$LN92@operator@2:
  000f6	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  000fa	eb 16		 jmp	 SHORT $LN1@operator@2
$LN93@operator@2:
  000fc	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00100	eb 10		 jmp	 SHORT $LN1@operator@2
$LN94@operator@2:
  00102	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  00106	eb 0a		 jmp	 SHORT $LN1@operator@2
$LN95@operator@2:
  00108	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  0010c	eb 04		 jmp	 SHORT $LN1@operator@2
$LN96@operator@2:
  0010e	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@2:
  00112	6a 02		 push	 2
  00114	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  00117	c6 45 f4 00	 mov	 BYTE PTR __t$[ebp+8], 0
  0011b	5a		 pop	 edx
$LL104@operator@2:
  0011c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00122	83 c0 04	 add	 eax, 4
  00125	4a		 dec	 edx
  00126	75 f4		 jne	 SHORT $LL104@operator@2
  00128	56		 push	 esi
  00129	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@2:
  00132	8a 08		 mov	 cl, BYTE PTR [eax]
  00134	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00136	75 1a		 jne	 SHORT $LN112@operator@2
  00138	84 c9		 test	 cl, cl
  0013a	74 12		 je	 SHORT $LN113@operator@2
  0013c	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0013f	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00142	75 0e		 jne	 SHORT $LN112@operator@2
  00144	83 c0 02	 add	 eax, 2
  00147	83 c6 02	 add	 esi, 2
  0014a	84 c9		 test	 cl, cl
  0014c	75 e4		 jne	 SHORT $LL111@operator@2
$LN113@operator@2:
  0014e	33 c0		 xor	 eax, eax
  00150	eb 05		 jmp	 SHORT $LN114@operator@2
$LN112@operator@2:
  00152	1b c0		 sbb	 eax, eax
  00154	83 d8 ff	 sbb	 eax, -1
$LN114@operator@2:
  00157	33 c9		 xor	 ecx, ecx
  00159	85 c0		 test	 eax, eax
  0015b	0f 94 c0	 sete	 al

; 148  : }

  0015e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00161	33 cd		 xor	 ecx, ebp
  00163	5e		 pop	 esi
  00164	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00169	c9		 leave
  0016a	c3		 ret	 0
??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z ENDP	; operator==<9>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z	; operator==<10>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z PROC	; operator==<10>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _lhs$[ebp]
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 0d 01 00
	00		 je	 $LN96@operator@3
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 f6 00 00
	00		 je	 $LN95@operator@3
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 df 00 00
	00		 je	 $LN94@operator@3
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 c8 00 00
	00		 je	 $LN93@operator@3
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 b1 00 00
	00		 je	 $LN92@operator@3
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	0f 84 9a 00 00
	00		 je	 $LN91@operator@3
  00075	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00078	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 83 00 00
	00		 je	 $LN90@operator@3
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	74 70		 je	 SHORT $LN89@operator@3
  00093	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00096	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  00099	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  0009c	84 d2		 test	 dl, dl
  0009e	74 5d		 je	 SHORT $LN88@operator@3
  000a0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a3	80 78 09 00	 cmp	 BYTE PTR [eax+9], 0
  000a7	88 55 f4	 mov	 BYTE PTR __t$[ebp+8], dl
  000aa	0f 84 81 00 00
	00		 je	 $LN1@operator@3
  000b0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000b3	84 d2		 test	 dl, dl
  000b5	74 40		 je	 SHORT $LN86@operator@3
  000b7	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ba	88 55 f6	 mov	 BYTE PTR __t$[ebp+10], dl
  000bd	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c0	84 d2		 test	 dl, dl
  000c2	74 2d		 je	 SHORT $LN85@operator@3
  000c4	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000c7	88 55 f7	 mov	 BYTE PTR __t$[ebp+11], dl
  000ca	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000cd	84 d2		 test	 dl, dl
  000cf	74 1a		 je	 SHORT $LN84@operator@3
  000d1	8a 40 0d	 mov	 al, BYTE PTR [eax+13]
  000d4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d7	88 55 f8	 mov	 BYTE PTR __t$[ebp+12], dl
  000da	84 c0		 test	 al, al
  000dc	74 07		 je	 SHORT $LN83@operator@3
  000de	34 ec		 xor	 al, -20			; ffffffecH
  000e0	88 45 f9	 mov	 BYTE PTR __t$[ebp+13], al
  000e3	eb 4c		 jmp	 SHORT $LN1@operator@3
$LN83@operator@3:
  000e5	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+13], -20 ; ffffffecH
  000e9	eb 46		 jmp	 SHORT $LN1@operator@3
$LN84@operator@3:
  000eb	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  000ef	eb 40		 jmp	 SHORT $LN1@operator@3
$LN85@operator@3:
  000f1	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  000f5	eb 3a		 jmp	 SHORT $LN1@operator@3
$LN86@operator@3:
  000f7	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000fb	eb 34		 jmp	 SHORT $LN1@operator@3
$LN88@operator@3:
  000fd	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  00101	eb 2e		 jmp	 SHORT $LN1@operator@3
$LN89@operator@3:
  00103	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  00107	eb 28		 jmp	 SHORT $LN1@operator@3
$LN90@operator@3:
  00109	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  0010d	eb 22		 jmp	 SHORT $LN1@operator@3
$LN91@operator@3:
  0010f	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  00113	eb 1c		 jmp	 SHORT $LN1@operator@3
$LN92@operator@3:
  00115	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00119	eb 16		 jmp	 SHORT $LN1@operator@3
$LN93@operator@3:
  0011b	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  0011f	eb 10		 jmp	 SHORT $LN1@operator@3
$LN94@operator@3:
  00121	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  00125	eb 0a		 jmp	 SHORT $LN1@operator@3
$LN95@operator@3:
  00127	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  0012b	eb 04		 jmp	 SHORT $LN1@operator@3
$LN96@operator@3:
  0012d	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@3:
  00131	6a 02		 push	 2
  00133	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  00136	c6 45 f5 00	 mov	 BYTE PTR __t$[ebp+9], 0
  0013a	5a		 pop	 edx
$LL104@operator@3:
  0013b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00141	83 c0 04	 add	 eax, 4
  00144	4a		 dec	 edx
  00145	75 f4		 jne	 SHORT $LL104@operator@3
  00147	80 75 f4 ed	 xor	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  0014b	56		 push	 esi
  0014c	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@3:
  00155	8a 08		 mov	 cl, BYTE PTR [eax]
  00157	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00159	75 1a		 jne	 SHORT $LN112@operator@3
  0015b	84 c9		 test	 cl, cl
  0015d	74 12		 je	 SHORT $LN113@operator@3
  0015f	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00162	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00165	75 0e		 jne	 SHORT $LN112@operator@3
  00167	83 c0 02	 add	 eax, 2
  0016a	83 c6 02	 add	 esi, 2
  0016d	84 c9		 test	 cl, cl
  0016f	75 e4		 jne	 SHORT $LL111@operator@3
$LN113@operator@3:
  00171	33 c0		 xor	 eax, eax
  00173	eb 05		 jmp	 SHORT $LN114@operator@3
$LN112@operator@3:
  00175	1b c0		 sbb	 eax, eax
  00177	83 d8 ff	 sbb	 eax, -1
$LN114@operator@3:
  0017a	33 c9		 xor	 ecx, ecx
  0017c	85 c0		 test	 eax, eax
  0017e	0f 94 c0	 sete	 al

; 148  : }

  00181	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00184	33 cd		 xor	 ecx, ebp
  00186	5e		 pop	 esi
  00187	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018c	c9		 leave
  0018d	c3		 ret	 0
??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z ENDP	; operator==<10>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$07@@YA_NABVioHashString@@AAY07$$CBD@Z	; operator==<8>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$07@@YA_NABVioHashString@@AAY07$$CBD@Z
_TEXT	SEGMENT
__t$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$07@@YA_NABVioHashString@@AAY07$$CBD@Z PROC	; operator==<8>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 d7 00 00
	00		 je	 $LN96@operator@4
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 f0	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 c0 00 00
	00		 je	 $LN95@operator@4
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 f1	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 a9 00 00
	00		 je	 $LN94@operator@4
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 f2	 mov	 BYTE PTR __t$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 92 00 00
	00		 je	 $LN93@operator@4
  00055	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00058	88 55 f3	 mov	 BYTE PTR __t$[ebp+3], dl
  0005b	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005e	84 d2		 test	 dl, dl
  00060	74 7f		 je	 SHORT $LN92@operator@4
  00062	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00065	88 55 f4	 mov	 BYTE PTR __t$[ebp+4], dl
  00068	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006b	84 d2		 test	 dl, dl
  0006d	74 6c		 je	 SHORT $LN91@operator@4
  0006f	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00072	88 55 f5	 mov	 BYTE PTR __t$[ebp+5], dl
  00075	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00078	84 d2		 test	 dl, dl
  0007a	74 59		 je	 SHORT $LN90@operator@4
  0007c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0007f	80 78 07 00	 cmp	 BYTE PTR [eax+7], 0
  00083	88 55 f6	 mov	 BYTE PTR __t$[ebp+6], dl
  00086	74 75		 je	 SHORT $LN1@operator@4
  00088	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  0008b	84 d2		 test	 dl, dl
  0008d	74 40		 je	 SHORT $LN88@operator@4
  0008f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00092	88 55 f8	 mov	 BYTE PTR __t$[ebp+8], dl
  00095	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  00098	84 d2		 test	 dl, dl
  0009a	74 2d		 je	 SHORT $LN87@operator@4
  0009c	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0009f	88 55 f9	 mov	 BYTE PTR __t$[ebp+9], dl
  000a2	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000a5	84 d2		 test	 dl, dl
  000a7	74 1a		 je	 SHORT $LN86@operator@4
  000a9	8a 40 0b	 mov	 al, BYTE PTR [eax+11]
  000ac	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000af	88 55 fa	 mov	 BYTE PTR __t$[ebp+10], dl
  000b2	84 c0		 test	 al, al
  000b4	74 07		 je	 SHORT $LN85@operator@4
  000b6	34 ea		 xor	 al, -22			; ffffffeaH
  000b8	88 45 fb	 mov	 BYTE PTR __t$[ebp+11], al
  000bb	eb 40		 jmp	 SHORT $LN1@operator@4
$LN85@operator@4:
  000bd	c6 45 fb ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  000c1	eb 3a		 jmp	 SHORT $LN1@operator@4
$LN86@operator@4:
  000c3	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000c7	eb 34		 jmp	 SHORT $LN1@operator@4
$LN87@operator@4:
  000c9	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  000cd	eb 2e		 jmp	 SHORT $LN1@operator@4
$LN88@operator@4:
  000cf	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  000d3	eb 28		 jmp	 SHORT $LN1@operator@4
$LN90@operator@4:
  000d5	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  000d9	eb 22		 jmp	 SHORT $LN1@operator@4
$LN91@operator@4:
  000db	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  000df	eb 1c		 jmp	 SHORT $LN1@operator@4
$LN92@operator@4:
  000e1	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  000e5	eb 16		 jmp	 SHORT $LN1@operator@4
$LN93@operator@4:
  000e7	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  000eb	eb 10		 jmp	 SHORT $LN1@operator@4
$LN94@operator@4:
  000ed	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  000f1	eb 0a		 jmp	 SHORT $LN1@operator@4
$LN95@operator@4:
  000f3	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  000f7	eb 04		 jmp	 SHORT $LN1@operator@4
$LN96@operator@4:
  000f9	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@4:
  000fd	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __t$[ebp], -353637139 ; eaebecedH
  00104	6a 04		 push	 4
  00106	c6 45 f7 00	 mov	 BYTE PTR __t$[ebp+7], 0
  0010a	58		 pop	 eax
$LL101@operator@4:
  0010b	8b c8		 mov	 ecx, eax
  0010d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00113	79 05		 jns	 SHORT $LN115@operator@4
  00115	49		 dec	 ecx
  00116	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00119	41		 inc	 ecx
$LN115@operator@4:
  0011a	b2 ed		 mov	 dl, -19			; ffffffedH
  0011c	2a d1		 sub	 dl, cl
  0011e	30 54 05 f0	 xor	 BYTE PTR __t$[ebp+eax], dl
  00122	40		 inc	 eax
  00123	83 f8 07	 cmp	 eax, 7
  00126	7c e3		 jl	 SHORT $LL101@operator@4
  00128	8b cf		 mov	 ecx, edi
  0012a	8d 75 f0	 lea	 esi, DWORD PTR __t$[ebp]
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@4:
  00133	8a 08		 mov	 cl, BYTE PTR [eax]
  00135	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00137	75 1a		 jne	 SHORT $LN112@operator@4
  00139	84 c9		 test	 cl, cl
  0013b	74 12		 je	 SHORT $LN113@operator@4
  0013d	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00140	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00143	75 0e		 jne	 SHORT $LN112@operator@4
  00145	83 c0 02	 add	 eax, 2
  00148	83 c6 02	 add	 esi, 2
  0014b	84 c9		 test	 cl, cl
  0014d	75 e4		 jne	 SHORT $LL111@operator@4
$LN113@operator@4:
  0014f	33 c0		 xor	 eax, eax
  00151	eb 05		 jmp	 SHORT $LN114@operator@4
$LN112@operator@4:
  00153	1b c0		 sbb	 eax, eax
  00155	83 d8 ff	 sbb	 eax, -1
$LN114@operator@4:
  00158	33 c9		 xor	 ecx, ecx
  0015a	85 c0		 test	 eax, eax
  0015c	0f 94 c0	 sete	 al

; 148  : }

  0015f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00162	5f		 pop	 edi
  00163	33 cd		 xor	 ecx, ebp
  00165	5e		 pop	 esi
  00166	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016b	c9		 leave
  0016c	c3		 ret	 0
??$?8$07@@YA_NABVioHashString@@AAY07$$CBD@Z ENDP	; operator==<8>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$0N@@@YA_NABVioHashString@@AAY0N@$$CBD@Z	; operator==<13>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$0N@@@YA_NABVioHashString@@AAY0N@$$CBD@Z
_TEXT	SEGMENT
__t$ = -24						; size = 13
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$0N@@@YA_NABVioHashString@@AAY0N@$$CBD@Z PROC	; operator==<13>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 4d 01 00
	00		 je	 $LN96@operator@5
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 e8	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 36 01 00
	00		 je	 $LN95@operator@5
  00033	b1 ec		 mov	 cl, -20			; ffffffecH
  00035	32 d1		 xor	 dl, cl
  00037	88 55 e9	 mov	 BYTE PTR __t$[ebp+1], dl
  0003a	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003d	84 d2		 test	 dl, dl
  0003f	0f 84 1e 01 00
	00		 je	 $LN94@operator@5
  00045	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00048	88 55 ea	 mov	 BYTE PTR __t$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 07 01 00
	00		 je	 $LN93@operator@5
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 eb	 mov	 BYTE PTR __t$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 f0 00 00
	00		 je	 $LN92@operator@5
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 ec	 mov	 BYTE PTR __t$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 da 00 00
	00		 je	 $LN91@operator@5
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 ed	 mov	 BYTE PTR __t$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 c4 00 00
	00		 je	 $LN90@operator@5
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 ee	 mov	 BYTE PTR __t$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 ad 00 00
	00		 je	 $LN89@operator@5
  00099	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009c	88 55 ef	 mov	 BYTE PTR __t$[ebp+7], dl
  0009f	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a2	84 d2		 test	 dl, dl
  000a4	0f 84 96 00 00
	00		 je	 $LN88@operator@5
  000aa	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ad	88 55 f0	 mov	 BYTE PTR __t$[ebp+8], dl
  000b0	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b3	84 d2		 test	 dl, dl
  000b5	0f 84 80 00 00
	00		 je	 $LN87@operator@5
  000bb	32 d1		 xor	 dl, cl
  000bd	88 55 f1	 mov	 BYTE PTR __t$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	74 6e		 je	 SHORT $LN86@operator@5
  000c7	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ca	88 55 f2	 mov	 BYTE PTR __t$[ebp+10], dl
  000cd	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d0	84 d2		 test	 dl, dl
  000d2	74 5b		 je	 SHORT $LN85@operator@5
  000d4	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d7	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  000db	88 55 f3	 mov	 BYTE PTR __t$[ebp+11], dl
  000de	0f 84 8f 00 00
	00		 je	 $LN1@operator@5
  000e4	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000e7	84 d2		 test	 dl, dl
  000e9	74 3f		 je	 SHORT $LN83@operator@5
  000eb	32 d1		 xor	 dl, cl
  000ed	88 55 f5	 mov	 BYTE PTR __t$[ebp+13], dl
  000f0	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f3	84 d2		 test	 dl, dl
  000f5	74 2d		 je	 SHORT $LN82@operator@5
  000f7	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000fa	88 55 f6	 mov	 BYTE PTR __t$[ebp+14], dl
  000fd	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00100	84 d2		 test	 dl, dl
  00102	74 1a		 je	 SHORT $LN81@operator@5
  00104	8a 40 10	 mov	 al, BYTE PTR [eax+16]
  00107	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0010a	88 55 f7	 mov	 BYTE PTR __t$[ebp+15], dl
  0010d	84 c0		 test	 al, al
  0010f	74 07		 je	 SHORT $LN80@operator@5
  00111	34 ed		 xor	 al, -19			; ffffffedH
  00113	88 45 f8	 mov	 BYTE PTR __t$[ebp+16], al
  00116	eb 5b		 jmp	 SHORT $LN1@operator@5
$LN80@operator@5:
  00118	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+16], -19 ; ffffffedH
  0011c	eb 55		 jmp	 SHORT $LN1@operator@5
$LN81@operator@5:
  0011e	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+15], -22 ; ffffffeaH
  00122	eb 4f		 jmp	 SHORT $LN1@operator@5
$LN82@operator@5:
  00124	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+14], -21 ; ffffffebH
  00128	eb 49		 jmp	 SHORT $LN1@operator@5
$LN83@operator@5:
  0012a	88 4d f5	 mov	 BYTE PTR __t$[ebp+13], cl
  0012d	eb 44		 jmp	 SHORT $LN1@operator@5
$LN85@operator@5:
  0012f	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  00133	eb 3e		 jmp	 SHORT $LN1@operator@5
$LN86@operator@5:
  00135	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  00139	eb 38		 jmp	 SHORT $LN1@operator@5
$LN87@operator@5:
  0013b	88 4d f1	 mov	 BYTE PTR __t$[ebp+9], cl
  0013e	eb 33		 jmp	 SHORT $LN1@operator@5
$LN88@operator@5:
  00140	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  00144	eb 2d		 jmp	 SHORT $LN1@operator@5
$LN89@operator@5:
  00146	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  0014a	eb 27		 jmp	 SHORT $LN1@operator@5
$LN90@operator@5:
  0014c	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  00150	eb 21		 jmp	 SHORT $LN1@operator@5
$LN91@operator@5:
  00152	88 4d ed	 mov	 BYTE PTR __t$[ebp+5], cl
  00155	eb 1c		 jmp	 SHORT $LN1@operator@5
$LN92@operator@5:
  00157	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  0015b	eb 16		 jmp	 SHORT $LN1@operator@5
$LN93@operator@5:
  0015d	c6 45 eb ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00161	eb 10		 jmp	 SHORT $LN1@operator@5
$LN94@operator@5:
  00163	c6 45 ea eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  00167	eb 0a		 jmp	 SHORT $LN1@operator@5
$LN95@operator@5:
  00169	c6 45 e9 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  0016d	eb 04		 jmp	 SHORT $LN1@operator@5
$LN96@operator@5:
  0016f	c6 45 e8 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@5:
  00173	6a 03		 push	 3
  00175	8d 45 e8	 lea	 eax, DWORD PTR __t$[ebp]
  00178	c6 45 f4 00	 mov	 BYTE PTR __t$[ebp+12], 0
  0017c	5a		 pop	 edx
$LL104@operator@5:
  0017d	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00183	83 c0 04	 add	 eax, 4
  00186	4a		 dec	 edx
  00187	75 f4		 jne	 SHORT $LL104@operator@5
  00189	8b cf		 mov	 ecx, edi
  0018b	8d 75 e8	 lea	 esi, DWORD PTR __t$[ebp]
  0018e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@5:
  00194	8a 08		 mov	 cl, BYTE PTR [eax]
  00196	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00198	75 1a		 jne	 SHORT $LN112@operator@5
  0019a	84 c9		 test	 cl, cl
  0019c	74 12		 je	 SHORT $LN113@operator@5
  0019e	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  001a1	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  001a4	75 0e		 jne	 SHORT $LN112@operator@5
  001a6	83 c0 02	 add	 eax, 2
  001a9	83 c6 02	 add	 esi, 2
  001ac	84 c9		 test	 cl, cl
  001ae	75 e4		 jne	 SHORT $LL111@operator@5
$LN113@operator@5:
  001b0	33 c0		 xor	 eax, eax
  001b2	eb 05		 jmp	 SHORT $LN114@operator@5
$LN112@operator@5:
  001b4	1b c0		 sbb	 eax, eax
  001b6	83 d8 ff	 sbb	 eax, -1
$LN114@operator@5:
  001b9	33 c9		 xor	 ecx, ecx
  001bb	85 c0		 test	 eax, eax
  001bd	0f 94 c0	 sete	 al

; 148  : }

  001c0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c3	5f		 pop	 edi
  001c4	33 cd		 xor	 ecx, ebp
  001c6	5e		 pop	 esi
  001c7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001cc	c9		 leave
  001cd	c3		 ret	 0
??$?8$0N@@@YA_NABVioHashString@@AAY0N@$$CBD@Z ENDP	; operator==<13>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z	; operator==<12>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z PROC	; operator==<12>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 32 01 00
	00		 je	 $LN96@operator@6
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 1b 01 00
	00		 je	 $LN95@operator@6
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 04 01 00
	00		 je	 $LN94@operator@6
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 ec 00 00
	00		 je	 $LN93@operator@6
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 d5 00 00
	00		 je	 $LN92@operator@6
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 be 00 00
	00		 je	 $LN91@operator@6
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 a8 00 00
	00		 je	 $LN90@operator@6
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 92 00 00
	00		 je	 $LN89@operator@6
  00099	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009c	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  0009f	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a2	84 d2		 test	 dl, dl
  000a4	74 7f		 je	 SHORT $LN88@operator@6
  000a6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a9	88 55 f4	 mov	 BYTE PTR __t$[ebp+8], dl
  000ac	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000af	84 d2		 test	 dl, dl
  000b1	74 6c		 je	 SHORT $LN87@operator@6
  000b3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b6	88 55 f5	 mov	 BYTE PTR __t$[ebp+9], dl
  000b9	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000bc	84 d2		 test	 dl, dl
  000be	74 5a		 je	 SHORT $LN86@operator@6
  000c0	32 d1		 xor	 dl, cl
  000c2	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000c6	88 55 f6	 mov	 BYTE PTR __t$[ebp+10], dl
  000c9	0f 84 89 00 00
	00		 je	 $LN1@operator@6
  000cf	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d2	84 d2		 test	 dl, dl
  000d4	74 3e		 je	 SHORT $LN84@operator@6
  000d6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d9	88 55 f8	 mov	 BYTE PTR __t$[ebp+12], dl
  000dc	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000df	84 d2		 test	 dl, dl
  000e1	74 2b		 je	 SHORT $LN83@operator@6
  000e3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e6	88 55 f9	 mov	 BYTE PTR __t$[ebp+13], dl
  000e9	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000ec	84 d2		 test	 dl, dl
  000ee	74 19		 je	 SHORT $LN82@operator@6
  000f0	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000f3	32 d1		 xor	 dl, cl
  000f5	88 55 fa	 mov	 BYTE PTR __t$[ebp+14], dl
  000f8	84 c0		 test	 al, al
  000fa	74 07		 je	 SHORT $LN81@operator@6
  000fc	34 ea		 xor	 al, -22			; ffffffeaH
  000fe	88 45 fb	 mov	 BYTE PTR __t$[ebp+15], al
  00101	eb 55		 jmp	 SHORT $LN1@operator@6
$LN81@operator@6:
  00103	c6 45 fb ea	 mov	 BYTE PTR __t$[ebp+15], -22 ; ffffffeaH
  00107	eb 4f		 jmp	 SHORT $LN1@operator@6
$LN82@operator@6:
  00109	88 4d fa	 mov	 BYTE PTR __t$[ebp+14], cl
  0010c	eb 4a		 jmp	 SHORT $LN1@operator@6
$LN83@operator@6:
  0010e	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+13], -20 ; ffffffecH
  00112	eb 44		 jmp	 SHORT $LN1@operator@6
$LN84@operator@6:
  00114	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  00118	eb 3e		 jmp	 SHORT $LN1@operator@6
$LN86@operator@6:
  0011a	88 4d f6	 mov	 BYTE PTR __t$[ebp+10], cl
  0011d	eb 39		 jmp	 SHORT $LN1@operator@6
$LN87@operator@6:
  0011f	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  00123	eb 33		 jmp	 SHORT $LN1@operator@6
$LN88@operator@6:
  00125	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  00129	eb 2d		 jmp	 SHORT $LN1@operator@6
$LN89@operator@6:
  0012b	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  0012f	eb 27		 jmp	 SHORT $LN1@operator@6
$LN90@operator@6:
  00131	88 4d f2	 mov	 BYTE PTR __t$[ebp+6], cl
  00134	eb 22		 jmp	 SHORT $LN1@operator@6
$LN91@operator@6:
  00136	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  0013a	eb 1c		 jmp	 SHORT $LN1@operator@6
$LN92@operator@6:
  0013c	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00140	eb 16		 jmp	 SHORT $LN1@operator@6
$LN93@operator@6:
  00142	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00146	eb 10		 jmp	 SHORT $LN1@operator@6
$LN94@operator@6:
  00148	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  0014c	eb 0a		 jmp	 SHORT $LN1@operator@6
$LN95@operator@6:
  0014e	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  00152	eb 04		 jmp	 SHORT $LN1@operator@6
$LN96@operator@6:
  00154	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@6:
  00158	6a 02		 push	 2
  0015a	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  0015d	c6 45 f7 00	 mov	 BYTE PTR __t$[ebp+11], 0
  00161	5a		 pop	 edx
$LL104@operator@6:
  00162	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00168	83 c0 04	 add	 eax, 4
  0016b	4a		 dec	 edx
  0016c	75 f4		 jne	 SHORT $LL104@operator@6
  0016e	6a 08		 push	 8
  00170	58		 pop	 eax
$LL101@operator@6:
  00171	8b c8		 mov	 ecx, eax
  00173	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00179	79 05		 jns	 SHORT $LN115@operator@6
  0017b	49		 dec	 ecx
  0017c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0017f	41		 inc	 ecx
$LN115@operator@6:
  00180	b2 ed		 mov	 dl, -19			; ffffffedH
  00182	2a d1		 sub	 dl, cl
  00184	30 54 05 ec	 xor	 BYTE PTR __t$[ebp+eax], dl
  00188	40		 inc	 eax
  00189	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0018c	7c e3		 jl	 SHORT $LL101@operator@6
  0018e	8b cf		 mov	 ecx, edi
  00190	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  00193	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@6:
  00199	8a 08		 mov	 cl, BYTE PTR [eax]
  0019b	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0019d	75 1a		 jne	 SHORT $LN112@operator@6
  0019f	84 c9		 test	 cl, cl
  001a1	74 12		 je	 SHORT $LN113@operator@6
  001a3	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  001a6	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  001a9	75 0e		 jne	 SHORT $LN112@operator@6
  001ab	83 c0 02	 add	 eax, 2
  001ae	83 c6 02	 add	 esi, 2
  001b1	84 c9		 test	 cl, cl
  001b3	75 e4		 jne	 SHORT $LL111@operator@6
$LN113@operator@6:
  001b5	33 c0		 xor	 eax, eax
  001b7	eb 05		 jmp	 SHORT $LN114@operator@6
$LN112@operator@6:
  001b9	1b c0		 sbb	 eax, eax
  001bb	83 d8 ff	 sbb	 eax, -1
$LN114@operator@6:
  001be	33 c9		 xor	 ecx, ecx
  001c0	85 c0		 test	 eax, eax
  001c2	0f 94 c0	 sete	 al

; 148  : }

  001c5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c8	5f		 pop	 edi
  001c9	33 cd		 xor	 ecx, ebp
  001cb	5e		 pop	 esi
  001cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d1	c9		 leave
  001d2	c3		 ret	 0
??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z ENDP	; operator==<12>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$0BE@@@YA_NABVioHashString@@AAY0BE@$$CBD@Z	; operator==<20>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$0BE@@@YA_NABVioHashString@@AAY0BE@$$CBD@Z
_TEXT	SEGMENT
__t$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$0BE@@@YA_NABVioHashString@@AAY0BE@$$CBD@Z PROC	; operator==<20>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001b	84 d2		 test	 dl, dl
  0001d	0f 84 dd 01 00
	00		 je	 $LN96@operator@7
  00023	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00026	88 55 e4	 mov	 BYTE PTR __t$[ebp], dl
  00029	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002c	84 d2		 test	 dl, dl
  0002e	0f 84 c6 01 00
	00		 je	 $LN95@operator@7
  00034	b3 ec		 mov	 bl, -20			; ffffffecH
  00036	32 d3		 xor	 dl, bl
  00038	88 55 e5	 mov	 BYTE PTR __t$[ebp+1], dl
  0003b	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003e	84 d2		 test	 dl, dl
  00040	0f 84 ae 01 00
	00		 je	 $LN94@operator@7
  00046	b1 eb		 mov	 cl, -21			; ffffffebH
  00048	32 d1		 xor	 dl, cl
  0004a	88 55 e6	 mov	 BYTE PTR __t$[ebp+2], dl
  0004d	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00050	84 d2		 test	 dl, dl
  00052	0f 84 96 01 00
	00		 je	 $LN93@operator@7
  00058	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005b	88 55 e7	 mov	 BYTE PTR __t$[ebp+3], dl
  0005e	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00061	84 d2		 test	 dl, dl
  00063	0f 84 7f 01 00
	00		 je	 $LN92@operator@7
  00069	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006c	88 55 e8	 mov	 BYTE PTR __t$[ebp+4], dl
  0006f	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00072	84 d2		 test	 dl, dl
  00074	0f 84 69 01 00
	00		 je	 $LN91@operator@7
  0007a	32 d3		 xor	 dl, bl
  0007c	88 55 e9	 mov	 BYTE PTR __t$[ebp+5], dl
  0007f	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00082	84 d2		 test	 dl, dl
  00084	0f 84 54 01 00
	00		 je	 $LN90@operator@7
  0008a	32 d1		 xor	 dl, cl
  0008c	88 55 ea	 mov	 BYTE PTR __t$[ebp+6], dl
  0008f	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00092	84 d2		 test	 dl, dl
  00094	0f 84 3e 01 00
	00		 je	 $LN89@operator@7
  0009a	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009d	88 55 eb	 mov	 BYTE PTR __t$[ebp+7], dl
  000a0	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a3	84 d2		 test	 dl, dl
  000a5	0f 84 27 01 00
	00		 je	 $LN88@operator@7
  000ab	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ae	88 55 ec	 mov	 BYTE PTR __t$[ebp+8], dl
  000b1	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b4	84 d2		 test	 dl, dl
  000b6	0f 84 11 01 00
	00		 je	 $LN87@operator@7
  000bc	32 d3		 xor	 dl, bl
  000be	88 55 ed	 mov	 BYTE PTR __t$[ebp+9], dl
  000c1	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c4	84 d2		 test	 dl, dl
  000c6	0f 84 fc 00 00
	00		 je	 $LN86@operator@7
  000cc	32 d1		 xor	 dl, cl
  000ce	88 55 ee	 mov	 BYTE PTR __t$[ebp+10], dl
  000d1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d4	84 d2		 test	 dl, dl
  000d6	0f 84 e6 00 00
	00		 je	 $LN85@operator@7
  000dc	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000df	88 55 ef	 mov	 BYTE PTR __t$[ebp+11], dl
  000e2	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e5	84 d2		 test	 dl, dl
  000e7	0f 84 cf 00 00
	00		 je	 $LN84@operator@7
  000ed	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f0	88 55 f0	 mov	 BYTE PTR __t$[ebp+12], dl
  000f3	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f6	84 d2		 test	 dl, dl
  000f8	0f 84 b9 00 00
	00		 je	 $LN83@operator@7
  000fe	32 d3		 xor	 dl, bl
  00100	88 55 f1	 mov	 BYTE PTR __t$[ebp+13], dl
  00103	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00106	84 d2		 test	 dl, dl
  00108	0f 84 a4 00 00
	00		 je	 $LN82@operator@7
  0010e	32 d1		 xor	 dl, cl
  00110	88 55 f2	 mov	 BYTE PTR __t$[ebp+14], dl
  00113	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00116	84 d2		 test	 dl, dl
  00118	0f 84 8e 00 00
	00		 je	 $LN81@operator@7
  0011e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00121	88 55 f3	 mov	 BYTE PTR __t$[ebp+15], dl
  00124	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00127	84 d2		 test	 dl, dl
  00129	74 7b		 je	 SHORT $LN80@operator@7
  0012b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0012e	88 55 f4	 mov	 BYTE PTR __t$[ebp+16], dl
  00131	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00134	84 d2		 test	 dl, dl
  00136	74 69		 je	 SHORT $LN79@operator@7
  00138	32 d3		 xor	 dl, bl
  0013a	88 55 f5	 mov	 BYTE PTR __t$[ebp+17], dl
  0013d	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00140	84 d2		 test	 dl, dl
  00142	74 58		 je	 SHORT $LN78@operator@7
  00144	32 d1		 xor	 dl, cl
  00146	80 78 13 00	 cmp	 BYTE PTR [eax+19], 0
  0014a	88 55 f6	 mov	 BYTE PTR __t$[ebp+18], dl
  0014d	0f 84 b1 00 00
	00		 je	 $LN1@operator@7
  00153	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00156	84 d2		 test	 dl, dl
  00158	74 3c		 je	 SHORT $LN76@operator@7
  0015a	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0015d	88 55 f8	 mov	 BYTE PTR __t$[ebp+20], dl
  00160	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00163	84 d2		 test	 dl, dl
  00165	74 2a		 je	 SHORT $LN75@operator@7
  00167	32 d3		 xor	 dl, bl
  00169	88 55 f9	 mov	 BYTE PTR __t$[ebp+21], dl
  0016c	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0016f	84 d2		 test	 dl, dl
  00171	74 19		 je	 SHORT $LN74@operator@7
  00173	8a 40 17	 mov	 al, BYTE PTR [eax+23]
  00176	32 d1		 xor	 dl, cl
  00178	88 55 fa	 mov	 BYTE PTR __t$[ebp+22], dl
  0017b	84 c0		 test	 al, al
  0017d	74 07		 je	 SHORT $LN73@operator@7
  0017f	34 ea		 xor	 al, -22			; ffffffeaH
  00181	88 45 fb	 mov	 BYTE PTR __t$[ebp+23], al
  00184	eb 7e		 jmp	 SHORT $LN1@operator@7
$LN73@operator@7:
  00186	c6 45 fb ea	 mov	 BYTE PTR __t$[ebp+23], -22 ; ffffffeaH
  0018a	eb 78		 jmp	 SHORT $LN1@operator@7
$LN74@operator@7:
  0018c	88 4d fa	 mov	 BYTE PTR __t$[ebp+22], cl
  0018f	eb 73		 jmp	 SHORT $LN1@operator@7
$LN75@operator@7:
  00191	88 5d f9	 mov	 BYTE PTR __t$[ebp+21], bl
  00194	eb 6e		 jmp	 SHORT $LN1@operator@7
$LN76@operator@7:
  00196	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+20], -19 ; ffffffedH
  0019a	eb 68		 jmp	 SHORT $LN1@operator@7
$LN78@operator@7:
  0019c	88 4d f6	 mov	 BYTE PTR __t$[ebp+18], cl
  0019f	eb 63		 jmp	 SHORT $LN1@operator@7
$LN79@operator@7:
  001a1	88 5d f5	 mov	 BYTE PTR __t$[ebp+17], bl
  001a4	eb 5e		 jmp	 SHORT $LN1@operator@7
$LN80@operator@7:
  001a6	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+16], -19 ; ffffffedH
  001aa	eb 58		 jmp	 SHORT $LN1@operator@7
$LN81@operator@7:
  001ac	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+15], -22 ; ffffffeaH
  001b0	eb 52		 jmp	 SHORT $LN1@operator@7
$LN82@operator@7:
  001b2	88 4d f2	 mov	 BYTE PTR __t$[ebp+14], cl
  001b5	eb 4d		 jmp	 SHORT $LN1@operator@7
$LN83@operator@7:
  001b7	88 5d f1	 mov	 BYTE PTR __t$[ebp+13], bl
  001ba	eb 48		 jmp	 SHORT $LN1@operator@7
$LN84@operator@7:
  001bc	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  001c0	eb 42		 jmp	 SHORT $LN1@operator@7
$LN85@operator@7:
  001c2	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  001c6	eb 3c		 jmp	 SHORT $LN1@operator@7
$LN86@operator@7:
  001c8	88 4d ee	 mov	 BYTE PTR __t$[ebp+10], cl
  001cb	eb 37		 jmp	 SHORT $LN1@operator@7
$LN87@operator@7:
  001cd	88 5d ed	 mov	 BYTE PTR __t$[ebp+9], bl
  001d0	eb 32		 jmp	 SHORT $LN1@operator@7
$LN88@operator@7:
  001d2	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  001d6	eb 2c		 jmp	 SHORT $LN1@operator@7
$LN89@operator@7:
  001d8	c6 45 eb ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  001dc	eb 26		 jmp	 SHORT $LN1@operator@7
$LN90@operator@7:
  001de	88 4d ea	 mov	 BYTE PTR __t$[ebp+6], cl
  001e1	eb 21		 jmp	 SHORT $LN1@operator@7
$LN91@operator@7:
  001e3	88 5d e9	 mov	 BYTE PTR __t$[ebp+5], bl
  001e6	eb 1c		 jmp	 SHORT $LN1@operator@7
$LN92@operator@7:
  001e8	c6 45 e8 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  001ec	eb 16		 jmp	 SHORT $LN1@operator@7
$LN93@operator@7:
  001ee	c6 45 e7 ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  001f2	eb 10		 jmp	 SHORT $LN1@operator@7
$LN94@operator@7:
  001f4	c6 45 e6 eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  001f8	eb 0a		 jmp	 SHORT $LN1@operator@7
$LN95@operator@7:
  001fa	c6 45 e5 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  001fe	eb 04		 jmp	 SHORT $LN1@operator@7
$LN96@operator@7:
  00200	c6 45 e4 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@7:
  00204	6a 04		 push	 4
  00206	8d 45 e4	 lea	 eax, DWORD PTR __t$[ebp]
  00209	c6 45 f7 00	 mov	 BYTE PTR __t$[ebp+19], 0
  0020d	5a		 pop	 edx
$LL104@operator@7:
  0020e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00214	83 c0 04	 add	 eax, 4
  00217	4a		 dec	 edx
  00218	75 f4		 jne	 SHORT $LL104@operator@7
  0021a	6a 10		 push	 16			; 00000010H
  0021c	58		 pop	 eax
$LL101@operator@7:
  0021d	8b c8		 mov	 ecx, eax
  0021f	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00225	79 05		 jns	 SHORT $LN115@operator@7
  00227	49		 dec	 ecx
  00228	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0022b	41		 inc	 ecx
$LN115@operator@7:
  0022c	b2 ed		 mov	 dl, -19			; ffffffedH
  0022e	2a d1		 sub	 dl, cl
  00230	30 54 05 e4	 xor	 BYTE PTR __t$[ebp+eax], dl
  00234	40		 inc	 eax
  00235	83 f8 13	 cmp	 eax, 19			; 00000013H
  00238	7c e3		 jl	 SHORT $LL101@operator@7
  0023a	8b cf		 mov	 ecx, edi
  0023c	8d 75 e4	 lea	 esi, DWORD PTR __t$[ebp]
  0023f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@7:
  00245	8a 08		 mov	 cl, BYTE PTR [eax]
  00247	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00249	75 1a		 jne	 SHORT $LN112@operator@7
  0024b	84 c9		 test	 cl, cl
  0024d	74 12		 je	 SHORT $LN113@operator@7
  0024f	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00252	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00255	75 0e		 jne	 SHORT $LN112@operator@7
  00257	83 c0 02	 add	 eax, 2
  0025a	83 c6 02	 add	 esi, 2
  0025d	84 c9		 test	 cl, cl
  0025f	75 e4		 jne	 SHORT $LL111@operator@7
$LN113@operator@7:
  00261	33 c0		 xor	 eax, eax
  00263	eb 05		 jmp	 SHORT $LN114@operator@7
$LN112@operator@7:
  00265	1b c0		 sbb	 eax, eax
  00267	83 d8 ff	 sbb	 eax, -1
$LN114@operator@7:
  0026a	33 c9		 xor	 ecx, ecx
  0026c	85 c0		 test	 eax, eax
  0026e	0f 94 c0	 sete	 al

; 148  : }

  00271	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00274	5f		 pop	 edi
  00275	5e		 pop	 esi
  00276	33 cd		 xor	 ecx, ebp
  00278	5b		 pop	 ebx
  00279	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0027e	c9		 leave
  0027f	c3		 ret	 0
??$?8$0BE@@@YA_NABVioHashString@@AAY0BE@$$CBD@Z ENDP	; operator==<20>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UADProduct@@@std@@UADProduct@@AAU3@@std@@YAXAAV?$allocator@UADProduct@@@0@PAUADProduct@@AAU2@@Z ; std::_Cons_val<std::allocator<ADProduct>,ADProduct,ADProduct &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UADProduct@@@std@@UADProduct@@AAU3@@std@@YAXAAV?$allocator@UADProduct@@@0@PAUADProduct@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UADProduct@@@std@@UADProduct@@AAU3@@std@@YAXAAV?$allocator@UADProduct@@@0@PAUADProduct@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<ADProduct>,ADProduct,ADProduct &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN7@Cons_val
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	6a 06		 push	 6
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN7@Cons_val:
  00015	5f		 pop	 edi

; 281  : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Cons_val@V?$allocator@UADProduct@@@std@@UADProduct@@AAU3@@std@@YAXAAV?$allocator@UADProduct@@@0@PAUADProduct@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<ADProduct>,ADProduct,ADProduct &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UADProduct@@@std@@QAEXPAUADProduct@@ABU3@@Z ; std::allocator<ADProduct>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UADProduct@@@std@@QAEXPAUADProduct@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UADProduct@@@std@@QAEXPAUADProduct@@ABU3@@Z PROC ; std::allocator<ADProduct>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN5@construct@2
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	6a 06		 push	 6
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN5@construct@2:
  00015	5f		 pop	 edi

; 198  : 		}

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?construct@?$allocator@UADProduct@@@std@@QAEXPAUADProduct@@ABU3@@Z ENDP ; std::allocator<ADProduct>::construct
_TEXT	ENDS
PUBLIC	??$_Move@PAUADProduct@@PAU1@@std@@YAPAUADProduct@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ADProduct *,ADProduct *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUADProduct@@PAU1@@std@@YAPAUADProduct@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUADProduct@@PAU1@@std@@YAPAUADProduct@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<ADProduct *,ADProduct *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00009	74 1a		 je	 SHORT $LN10@Move
  0000b	56		 push	 esi
  0000c	57		 push	 edi
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00010	83 45 10 18	 add	 DWORD PTR __Dest$[ebp], 24 ; 00000018H
  00014	8b f0		 mov	 esi, eax
  00016	6a 06		 push	 6
  00018	83 c0 18	 add	 eax, 24			; 00000018H
  0001b	59		 pop	 ecx
  0001c	f3 a5		 rep movsd
  0001e	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00021	75 ea		 jne	 SHORT $LL3@Move
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
$LN10@Move:

; 2515 : 	return (_Dest);

  00025	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Move@PAUADProduct@@PAU1@@std@@YAPAUADProduct@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<ADProduct *,ADProduct *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UADProduct@@@std@@QAEXPAUADProduct@@@Z ; std::allocator<ADProduct>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UADProduct@@@std@@QAEXPAUADProduct@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UADProduct@@@std@@QAEXPAUADProduct@@@Z PROC ; std::allocator<ADProduct>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UADProduct@@@std@@QAEXPAUADProduct@@@Z ENDP ; std::allocator<ADProduct>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UADProduct@@@std@@QAEXPAUADProduct@@$$QAU3@@Z ; std::allocator<ADProduct>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UADProduct@@@std@@QAEXPAUADProduct@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UADProduct@@@std@@QAEXPAUADProduct@@$$QAU3@@Z PROC ; std::allocator<ADProduct>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN3@construct@3
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	6a 06		 push	 6
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN3@construct@3:
  00015	5f		 pop	 edi

; 203  : 		}

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?construct@?$allocator@UADProduct@@@std@@QAEXPAUADProduct@@$$QAU3@@Z ENDP ; std::allocator<ADProduct>::construct
_TEXT	ENDS
PUBLIC	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::end
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z PROC ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z ENDP ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator==
_TEXT	ENDS
PUBLIC	??$_Move@PAHPAH@std@@YAPAHPAH00@Z		; std::_Move<int *,int *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAHPAH@std@@YAPAHPAH00@Z
_TEXT	SEGMENT
__Cat$511165 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAHPAH@std@@YAPAHPAH00@Z PROC			; std::_Move<int *,int *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$511165[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<int *,int *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAHPAH@std@@YAPAHPAH00@Z ENDP			; std::_Move<int *,int *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?AddRenderFrame@NewShopStartWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z ; NewShopStartWnd::AddRenderFrame
EXTRN	__imp_?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\newshopstartwnd.cpp
;	COMDAT ?AddRenderFrame@NewShopStartWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -24					; size = 4
__t$511211 = -20					; size = 11
__$ArrayPad$ = -4					; size = 4
_szType$ = 8						; size = 4
_pFrame$ = 12						; size = 4
?AddRenderFrame@NewShopStartWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z PROC ; NewShopStartWnd::AddRenderFrame, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _pFrame$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _szType$[ebp]

; 33   : 	if( szType == "ProductFrm" )

  00019	6a 02		 push	 2
  0001b	89 4d e8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0001e	c7 45 ec bd 9e
	84 8e		 mov	 DWORD PTR __t$511211[ebp], -1903911235 ; 8e849ebdH
  00025	c7 45 f0 98 8f
	9f ac		 mov	 DWORD PTR __t$511211[ebp+4], -1398829160 ; ac9f8f98H
  0002c	66 c7 45 f4 9f
	81		 mov	 WORD PTR __t$511211[ebp+8], 33183 ; 0000819fH
  00032	8d 45 ec	 lea	 eax, DWORD PTR __t$511211[ebp]
  00035	c6 45 f6 00	 mov	 BYTE PTR __t$511211[ebp+10], 0
  00039	59		 pop	 ecx
$LL111@AddRenderF:
  0003a	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00040	83 c0 04	 add	 eax, 4
  00043	49		 dec	 ecx
  00044	75 f4		 jne	 SHORT $LL111@AddRenderF
  00046	6a 08		 push	 8
  00048	58		 pop	 eax
$LL108@AddRenderF:
  00049	8b c8		 mov	 ecx, eax
  0004b	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00051	79 05		 jns	 SHORT $LN122@AddRenderF
  00053	49		 dec	 ecx
  00054	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00057	41		 inc	 ecx
$LN122@AddRenderF:
  00058	b2 ed		 mov	 dl, -19			; ffffffedH
  0005a	2a d1		 sub	 dl, cl
  0005c	30 54 05 ec	 xor	 BYTE PTR __t$511211[ebp+eax], dl
  00060	40		 inc	 eax
  00061	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00064	7c e3		 jl	 SHORT $LL108@AddRenderF
  00066	8b cf		 mov	 ecx, edi
  00068	8d 75 ec	 lea	 esi, DWORD PTR __t$511211[ebp]
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL118@AddRenderF:
  00071	8a 08		 mov	 cl, BYTE PTR [eax]
  00073	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00075	75 1a		 jne	 SHORT $LN119@AddRenderF
  00077	84 c9		 test	 cl, cl
  00079	74 12		 je	 SHORT $LN120@AddRenderF
  0007b	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0007e	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00081	75 0e		 jne	 SHORT $LN119@AddRenderF
  00083	83 c0 02	 add	 eax, 2
  00086	83 c6 02	 add	 esi, 2
  00089	84 c9		 test	 cl, cl
  0008b	75 e4		 jne	 SHORT $LL118@AddRenderF
$LN120@AddRenderF:
  0008d	33 c0		 xor	 eax, eax
  0008f	eb 05		 jmp	 SHORT $LN121@AddRenderF
$LN119@AddRenderF:
  00091	1b c0		 sbb	 eax, eax
  00093	83 d8 ff	 sbb	 eax, -1
$LN121@AddRenderF:
  00096	85 c0		 test	 eax, eax
  00098	75 23		 jne	 SHORT $LN3@AddRenderF

; 34   : 	{
; 35   : 		SAFEDELETE( m_pProductFrm );

  0009a	8b 75 e8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0009d	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  000a3	85 c9		 test	 ecx, ecx
  000a5	74 0e		 je	 SHORT $LN2@AddRenderF
  000a7	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a9	6a 01		 push	 1
  000ab	ff 50 40	 call	 DWORD PTR [eax+64]
  000ae	83 a6 60 01 00
	00 00		 and	 DWORD PTR [esi+352], 0
$LN2@AddRenderF:

; 36   : 		m_pProductFrm = pFrame;

  000b5	89 9e 60 01 00
	00		 mov	 DWORD PTR [esi+352], ebx

; 37   : 	}
; 38   : 	else

  000bb	eb 0b		 jmp	 SHORT $LN1@AddRenderF
$LN3@AddRenderF:

; 39   : 	{
; 40   : 		ioWnd::AddRenderFrame( szType, pFrame );

  000bd	8b 4d e8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  000c0	53		 push	 ebx
  000c1	57		 push	 edi
  000c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
$LN1@AddRenderF:

; 41   : 	}
; 42   : }

  000c8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	33 cd		 xor	 ecx, ebp
  000cf	5b		 pop	 ebx
  000d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d5	c9		 leave
  000d6	c2 08 00	 ret	 8
?AddRenderFrame@NewShopStartWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z ENDP ; NewShopStartWnd::AddRenderFrame
_TEXT	ENDS
PUBLIC	?ParsePageButton@NewShopStartWnd@@IAEXXZ	; NewShopStartWnd::ParsePageButton
; Function compile flags: /Ogsp
;	COMDAT ?ParsePageButton@NewShopStartWnd@@IAEXXZ
_TEXT	SEGMENT
_pPagePrev$ = -8					; size = 4
_this$ = -4						; size = 4
?ParsePageButton@NewShopStartWnd@@IAEXXZ PROC		; NewShopStartWnd::ParsePageButton, COMDAT
; _this$ = ecx

; 161  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi

; 162  : 	//페이지 버튼
; 163  : 	ioButton* pPagePrev = dynamic_cast<ioButton*>( FindChildWnd( ID_PAGE_PREV_BTN ) );

  00007	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  0000d	57		 push	 edi
  0000e	6a 00		 push	 0
  00010	bb 00 00 00 00	 mov	 ebx, OFFSET ??_R0?AVioButton@@@8
  00015	53		 push	 ebx
  00016	bf 00 00 00 00	 mov	 edi, OFFSET ??_R0?AVioWnd@@@8
  0001b	57		 push	 edi
  0001c	6a 00		 push	 0
  0001e	6a 05		 push	 5
  00020	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00023	ff d6		 call	 esi
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ___RTDynamicCast
  0002b	83 c4 14	 add	 esp, 20			; 00000014H

; 164  : 	ioButton* pPageNext = dynamic_cast<ioButton*>( FindChildWnd( ID_PAGE_NEXT_BTN ) );

  0002e	6a 00		 push	 0
  00030	53		 push	 ebx
  00031	57		 push	 edi
  00032	8b 7d fc	 mov	 edi, DWORD PTR _this$[ebp]
  00035	6a 00		 push	 0
  00037	6a 06		 push	 6
  00039	8b cf		 mov	 ecx, edi
  0003b	89 45 f8	 mov	 DWORD PTR _pPagePrev$[ebp], eax
  0003e	ff d6		 call	 esi
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ___RTDynamicCast

; 165  : 	if( !pPagePrev || !pPageNext )

  00046	8b 4d f8	 mov	 ecx, DWORD PTR _pPagePrev$[ebp]
  00049	83 c4 14	 add	 esp, 20			; 00000014H
  0004c	8b f0		 mov	 esi, eax
  0004e	85 c9		 test	 ecx, ecx
  00050	74 32		 je	 SHORT $LN5@ParsePageB
  00052	85 f6		 test	 esi, esi
  00054	74 2e		 je	 SHORT $LN5@ParsePageB

; 166  : 		return;
; 167  : 
; 168  : 	//페이지 버튼 활성/비활성화 체크
; 169  : 	if( m_iCurrPage <= 0 )

  00056	83 bf 88 01 00
	00 00		 cmp	 DWORD PTR [edi+392], 0

; 170  : 	{
; 171  : 		pPagePrev->SetInActive();

  0005d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005f	7f 05		 jg	 SHORT $LN4@ParsePageB
  00061	ff 50 24	 call	 DWORD PTR [eax+36]

; 172  : 	}
; 173  : 	else

  00064	eb 03		 jmp	 SHORT $LN3@ParsePageB
$LN4@ParsePageB:

; 174  : 	{
; 175  : 		pPagePrev->SetActive();

  00066	ff 50 20	 call	 DWORD PTR [eax+32]
$LN3@ParsePageB:

; 176  : 	}
; 177  : 
; 178  : 	if( m_iCurrPage >= GetPageMax() )

  00069	8b cf		 mov	 ecx, edi
  0006b	e8 00 00 00 00	 call	 ?GetPageMax@NewShopStartWnd@@IAEHXZ ; NewShopStartWnd::GetPageMax
  00070	39 87 88 01 00
	00		 cmp	 DWORD PTR [edi+392], eax

; 179  : 	{
; 180  : 		pPageNext->SetInActive();

  00076	8b 06		 mov	 eax, DWORD PTR [esi]
  00078	8b ce		 mov	 ecx, esi
  0007a	7c 05		 jl	 SHORT $LN2@ParsePageB
  0007c	ff 50 24	 call	 DWORD PTR [eax+36]

; 181  : 	}
; 182  : 	else

  0007f	eb 03		 jmp	 SHORT $LN5@ParsePageB
$LN2@ParsePageB:

; 183  : 	{
; 184  : 		pPageNext->SetActive();

  00081	ff 50 20	 call	 DWORD PTR [eax+32]
$LN5@ParsePageB:
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx

; 185  : 	}
; 186  : }

  00087	c9		 leave
  00088	c3		 ret	 0
?ParsePageButton@NewShopStartWnd@@IAEXXZ ENDP		; NewShopStartWnd::ParsePageButton
_TEXT	ENDS
PUBLIC	?ParseButton@ioProductLinkButton@@IAEXABVioHashString@@HHH_NH@Z ; ioProductLinkButton::ParseButton
; Function compile flags: /Ogsp
;	COMDAT ?ParseButton@ioProductLinkButton@@IAEXABVioHashString@@HHH_NH@Z
_TEXT	SEGMENT
_szIconName$ = 8					; size = 4
_iMarkType$ = 12					; size = 4
_iNumber$ = 16						; size = 4
_iLimitDate$ = 20					; size = 4
_bCostume$ = 24						; size = 1
_nGradeType$ = 28					; size = 4
?ParseButton@ioProductLinkButton@@IAEXABVioHashString@@HHH_NH@Z PROC ; ioProductLinkButton::ParseButton, COMDAT
; _this$ = ecx

; 616  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 617  : 	ioProductIconButton* pButton = dynamic_cast<ioProductIconButton*>( FindChildWnd( ID_ICON_BTN ) );

  00003	6a 00		 push	 0
  00005	68 00 00 00 00	 push	 OFFSET ??_R0?AVioProductIconButton@@@8
  0000a	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  0000f	6a 00		 push	 0
  00011	6a 01		 push	 1
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ___RTDynamicCast
  0001f	83 c4 14	 add	 esp, 20			; 00000014H

; 618  : 	if( pButton )

  00022	85 c0		 test	 eax, eax
  00024	74 08		 je	 SHORT $LN1@ParseButto

; 619  : 	{
; 620  : 		pButton->SetProductIconInfo( szIconName, iMarkType, iNumber, iLimitDate, bCostume, nGradeType );

  00026	8b c8		 mov	 ecx, eax

; 621  : 	}
; 622  : }

  00028	5d		 pop	 ebp

; 619  : 	{
; 620  : 		pButton->SetProductIconInfo( szIconName, iMarkType, iNumber, iLimitDate, bCostume, nGradeType );

  00029	e9 00 00 00 00	 jmp	 ?SetProductIconInfo@ioProductIconButton@@QAEXABVioHashString@@HHH_NH@Z ; ioProductIconButton::SetProductIconInfo
$LN1@ParseButto:

; 621  : 	}
; 622  : }

  0002e	5d		 pop	 ebp
  0002f	c2 18 00	 ret	 24			; 00000018H
?ParseButton@ioProductLinkButton@@IAEXABVioHashString@@HHH_NH@Z ENDP ; ioProductLinkButton::ParseButton
_TEXT	ENDS
PUBLIC	_pImage$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	_szType$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_?AddRenderImage@ioButton@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?AddRenderImage@ioProductIconButton@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -40					; size = 4
_szType$GSCopy$ = -36					; size = 4
_pImage$GSCopy$ = -32					; size = 4
__t$512391 = -28					; size = 20
__t$512844 = -24					; size = 13
__t$512219 = -24					; size = 13
__t$512641 = -20					; size = 9
__t$512266 = -20					; size = 12
__t$512029 = -20					; size = 10
__t$511891 = -20					; size = 10
__t$511529 = -20					; size = 10
__t$511404 = -20					; size = 9
__t$512529 = -16					; size = 8
__t$511779 = -16					; size = 8
__t$511654 = -16					; size = 8
__$ArrayPad$ = -4					; size = 4
_szType$ = 8						; size = 4
_pImage$ = 12						; size = 4
?AddRenderImage@ioProductIconButton@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z PROC ; ioProductIconButton::AddRenderImage, COMDAT
; _this$ = ecx

; 802  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _szType$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 863  : 	}
; 864  : 	else if( szType == "CostumeImage" )

  00016	89 45 dc	 mov	 DWORD PTR _szType$GSCopy$[ebp], eax
  00019	8b 45 0c	 mov	 eax, DWORD PTR _pImage$[ebp]
  0001c	33 db		 xor	 ebx, ebx
  0001e	6a 02		 push	 2
  00020	89 4d d8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00023	89 45 e0	 mov	 DWORD PTR _pImage$GSCopy$[ebp], eax
  00026	c7 45 ec a4 8f
	84 84		 mov	 DWORD PTR __t$511404[ebp], -2071687260 ; 84848fa4H
  0002d	c7 45 f0 af 8d
	88 81		 mov	 DWORD PTR __t$511404[ebp+4], -2121757265 ; 81888dafH
  00034	8d 45 ec	 lea	 eax, DWORD PTR __t$511404[ebp]
  00037	88 5d f4	 mov	 BYTE PTR __t$511404[ebp+8], bl
  0003a	59		 pop	 ecx
  0003b	bf ed ec eb ea	 mov	 edi, -353637139		; eaebecedH
$LL169@AddRenderI:

; 803  : 	if( szType == "IconBack" )

  00040	31 38		 xor	 DWORD PTR [eax], edi
  00042	83 c0 04	 add	 eax, 4
  00045	49		 dec	 ecx
  00046	75 f8		 jne	 SHORT $LL169@AddRenderI
  00048	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  0004b	8d 75 ec	 lea	 esi, DWORD PTR __t$511404[ebp]
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1397@AddRenderI:
  00054	8a 08		 mov	 cl, BYTE PTR [eax]
  00056	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00058	75 1a		 jne	 SHORT $LN1398@AddRenderI
  0005a	3a cb		 cmp	 cl, bl
  0005c	74 12		 je	 SHORT $LN1445@AddRenderI
  0005e	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00061	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00064	75 0e		 jne	 SHORT $LN1398@AddRenderI
  00066	83 c0 02	 add	 eax, 2
  00069	83 c6 02	 add	 esi, 2
  0006c	3a cb		 cmp	 cl, bl
  0006e	75 e4		 jne	 SHORT $LL1397@AddRenderI
$LN1445@AddRenderI:
  00070	33 c0		 xor	 eax, eax
  00072	eb 05		 jmp	 SHORT $LN1400@AddRenderI
$LN1398@AddRenderI:
  00074	1b c0		 sbb	 eax, eax
  00076	83 d8 ff	 sbb	 eax, -1
$LN1400@AddRenderI:
  00079	3b c3		 cmp	 eax, ebx
  0007b	75 25		 jne	 SHORT $LN1386@AddRenderI

; 804  : 	{
; 805  : 		SAFEDELETE( m_pIconBack );

  0007d	8b 75 d8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00080	8b 8e 00 02 00
	00		 mov	 ecx, DWORD PTR [esi+512]
  00086	3b cb		 cmp	 ecx, ebx
  00088	74 0d		 je	 SHORT $LN38@AddRenderI
  0008a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008c	6a 01		 push	 1
  0008e	ff 50 40	 call	 DWORD PTR [eax+64]
  00091	89 9e 00 02 00
	00		 mov	 DWORD PTR [esi+512], ebx
$LN38@AddRenderI:

; 806  : 		m_pIconBack = pImage;

  00097	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  0009a	89 86 00 02 00
	00		 mov	 DWORD PTR [esi+512], eax

; 807  : 
; 808  : 		if( m_pIconBack )		
; 809  : 			m_pIconBack->SetScale( 0.67f );
; 810  : 	}

  000a0	eb 7e		 jmp	 SHORT $LN1456@AddRenderI
$LN1386@AddRenderI:

; 811  : 	else if( szType == "IconEmpty" )

  000a2	6a 02		 push	 2
  000a4	c7 45 ec a4 8f
	84 84		 mov	 DWORD PTR __t$511529[ebp], -2071687260 ; 84848fa4H
  000ab	c7 45 f0 a8 81
	9b 9e		 mov	 DWORD PTR __t$511529[ebp+4], -1633975896 ; 9e9b81a8H
  000b2	8d 45 ec	 lea	 eax, DWORD PTR __t$511529[ebp]
  000b5	66 c7 45 f4 94
	00		 mov	 WORD PTR __t$511529[ebp+8], 148 ; 00000094H
  000bb	59		 pop	 ecx
$LL275@AddRenderI:
  000bc	31 38		 xor	 DWORD PTR [eax], edi
  000be	83 c0 04	 add	 eax, 4
  000c1	49		 dec	 ecx
  000c2	75 f8		 jne	 SHORT $LL275@AddRenderI
  000c4	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  000c7	80 75 f4 ed	 xor	 BYTE PTR __t$511529[ebp+8], -19 ; ffffffedH
  000cb	8d 75 ec	 lea	 esi, DWORD PTR __t$511529[ebp]
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1401@AddRenderI:
  000d4	8a 08		 mov	 cl, BYTE PTR [eax]
  000d6	3a 0e		 cmp	 cl, BYTE PTR [esi]
  000d8	75 1a		 jne	 SHORT $LN1402@AddRenderI
  000da	3a cb		 cmp	 cl, bl
  000dc	74 12		 je	 SHORT $LN1403@AddRenderI
  000de	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000e1	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  000e4	75 0e		 jne	 SHORT $LN1402@AddRenderI
  000e6	83 c0 02	 add	 eax, 2
  000e9	83 c6 02	 add	 esi, 2
  000ec	3a cb		 cmp	 cl, bl
  000ee	75 e4		 jne	 SHORT $LL1401@AddRenderI
$LN1403@AddRenderI:
  000f0	33 c0		 xor	 eax, eax
  000f2	eb 05		 jmp	 SHORT $LN1404@AddRenderI
$LN1402@AddRenderI:
  000f4	1b c0		 sbb	 eax, eax
  000f6	83 d8 ff	 sbb	 eax, -1
$LN1404@AddRenderI:
  000f9	3b c3		 cmp	 eax, ebx
  000fb	75 32		 jne	 SHORT $LN1387@AddRenderI

; 812  : 	{	
; 813  : 		SAFEDELETE( m_pIconEmpty );

  000fd	8b 75 d8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00100	8b 8e 04 02 00
	00		 mov	 ecx, DWORD PTR [esi+516]
  00106	3b cb		 cmp	 ecx, ebx
  00108	74 0d		 je	 SHORT $LN34@AddRenderI
  0010a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0010c	6a 01		 push	 1
  0010e	ff 50 40	 call	 DWORD PTR [eax+64]
  00111	89 9e 04 02 00
	00		 mov	 DWORD PTR [esi+516], ebx
$LN34@AddRenderI:

; 814  : 		m_pIconEmpty = pImage;

  00117	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  0011a	89 86 04 02 00
	00		 mov	 DWORD PTR [esi+516], eax
$LN1456@AddRenderI:

; 815  : 
; 816  : 		if( m_pIconEmpty )		

  00120	3b c3		 cmp	 eax, ebx
  00122	0f 84 aa 05 00
	00		 je	 $LN1@AddRenderI

; 817  : 			m_pIconEmpty->SetScale( 0.67f );

  00128	8b c8		 mov	 ecx, eax

; 818  : 	}

  0012a	e9 7f 05 00 00	 jmp	 $LN1455@AddRenderI
$LN1387@AddRenderI:

; 819  : 	else if( szType == "NewMark" )

  0012f	6a 04		 push	 4
  00131	c7 45 f0 a3 89
	9c a7		 mov	 DWORD PTR __t$511654[ebp], -1482913373 ; a79c89a3H
  00138	31 7d f0	 xor	 DWORD PTR __t$511654[ebp], edi
  0013b	c7 45 f4 8c 9e
	80 00		 mov	 DWORD PTR __t$511654[ebp+4], 8429196 ; 00809e8cH
  00142	58		 pop	 eax
$LL378@AddRenderI:
  00143	8b c8		 mov	 ecx, eax
  00145	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0014b	79 05		 jns	 SHORT $LN1450@AddRenderI
  0014d	49		 dec	 ecx
  0014e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00151	41		 inc	 ecx
$LN1450@AddRenderI:
  00152	b2 ed		 mov	 dl, -19			; ffffffedH
  00154	2a d1		 sub	 dl, cl
  00156	30 54 05 f0	 xor	 BYTE PTR __t$511654[ebp+eax], dl
  0015a	40		 inc	 eax
  0015b	83 f8 07	 cmp	 eax, 7
  0015e	7c e3		 jl	 SHORT $LL378@AddRenderI
  00160	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00163	8d 75 f0	 lea	 esi, DWORD PTR __t$511654[ebp]
  00166	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1405@AddRenderI:
  0016c	8a 08		 mov	 cl, BYTE PTR [eax]
  0016e	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00170	75 1a		 jne	 SHORT $LN1406@AddRenderI
  00172	3a cb		 cmp	 cl, bl
  00174	74 12		 je	 SHORT $LN1407@AddRenderI
  00176	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00179	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0017c	75 0e		 jne	 SHORT $LN1406@AddRenderI
  0017e	83 c0 02	 add	 eax, 2
  00181	83 c6 02	 add	 esi, 2
  00184	3a cb		 cmp	 cl, bl
  00186	75 e4		 jne	 SHORT $LL1405@AddRenderI
$LN1407@AddRenderI:
  00188	33 c0		 xor	 eax, eax
  0018a	eb 05		 jmp	 SHORT $LN1408@AddRenderI
$LN1406@AddRenderI:
  0018c	1b c0		 sbb	 eax, eax
  0018e	83 d8 ff	 sbb	 eax, -1
$LN1408@AddRenderI:
  00191	3b c3		 cmp	 eax, ebx
  00193	75 28		 jne	 SHORT $LN1388@AddRenderI

; 820  : 	{
; 821  : 		SAFEDELETE( m_pNewMark );

  00195	8b 75 d8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00198	8b 8e 08 02 00
	00		 mov	 ecx, DWORD PTR [esi+520]
  0019e	3b cb		 cmp	 ecx, ebx
  001a0	74 0d		 je	 SHORT $LN30@AddRenderI
  001a2	8b 01		 mov	 eax, DWORD PTR [ecx]
  001a4	6a 01		 push	 1
  001a6	ff 50 40	 call	 DWORD PTR [eax+64]
  001a9	89 9e 08 02 00
	00		 mov	 DWORD PTR [esi+520], ebx
$LN30@AddRenderI:

; 822  : 		m_pNewMark = pImage;

  001af	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  001b2	89 86 08 02 00
	00		 mov	 DWORD PTR [esi+520], eax
  001b8	e9 15 05 00 00	 jmp	 $LN1@AddRenderI
$LN1388@AddRenderI:

; 823  : 	}
; 824  : 	else if( szType == "HotMark" )

  001bd	6a 04		 push	 4
  001bf	c7 45 f0 a5 83
	9f a7		 mov	 DWORD PTR __t$511779[ebp], -1482718299 ; a79f83a5H
  001c6	31 7d f0	 xor	 DWORD PTR __t$511779[ebp], edi
  001c9	c7 45 f4 8c 9e
	80 00		 mov	 DWORD PTR __t$511779[ebp+4], 8429196 ; 00809e8cH
  001d0	58		 pop	 eax
$LL484@AddRenderI:
  001d1	8b c8		 mov	 ecx, eax
  001d3	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001d9	79 05		 jns	 SHORT $LN1451@AddRenderI
  001db	49		 dec	 ecx
  001dc	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001df	41		 inc	 ecx
$LN1451@AddRenderI:
  001e0	b2 ed		 mov	 dl, -19			; ffffffedH
  001e2	2a d1		 sub	 dl, cl
  001e4	30 54 05 f0	 xor	 BYTE PTR __t$511779[ebp+eax], dl
  001e8	40		 inc	 eax
  001e9	83 f8 07	 cmp	 eax, 7
  001ec	7c e3		 jl	 SHORT $LL484@AddRenderI
  001ee	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  001f1	8d 75 f0	 lea	 esi, DWORD PTR __t$511779[ebp]
  001f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1409@AddRenderI:
  001fa	8a 08		 mov	 cl, BYTE PTR [eax]
  001fc	3a 0e		 cmp	 cl, BYTE PTR [esi]
  001fe	75 1a		 jne	 SHORT $LN1410@AddRenderI
  00200	3a cb		 cmp	 cl, bl
  00202	74 12		 je	 SHORT $LN1446@AddRenderI
  00204	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00207	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0020a	75 0e		 jne	 SHORT $LN1410@AddRenderI
  0020c	83 c0 02	 add	 eax, 2
  0020f	83 c6 02	 add	 esi, 2
  00212	3a cb		 cmp	 cl, bl
  00214	75 e4		 jne	 SHORT $LL1409@AddRenderI
$LN1446@AddRenderI:
  00216	33 c0		 xor	 eax, eax
  00218	eb 05		 jmp	 SHORT $LN1412@AddRenderI
$LN1410@AddRenderI:
  0021a	1b c0		 sbb	 eax, eax
  0021c	83 d8 ff	 sbb	 eax, -1
$LN1412@AddRenderI:
  0021f	3b c3		 cmp	 eax, ebx
  00221	75 28		 jne	 SHORT $LN1389@AddRenderI

; 825  : 	{
; 826  : 		SAFEDELETE( m_pHotMark );

  00223	8b 75 d8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00226	8b 8e 0c 02 00
	00		 mov	 ecx, DWORD PTR [esi+524]
  0022c	3b cb		 cmp	 ecx, ebx
  0022e	74 0d		 je	 SHORT $LN27@AddRenderI
  00230	8b 01		 mov	 eax, DWORD PTR [ecx]
  00232	6a 01		 push	 1
  00234	ff 50 40	 call	 DWORD PTR [eax+64]
  00237	89 9e 0c 02 00
	00		 mov	 DWORD PTR [esi+524], ebx
$LN27@AddRenderI:

; 827  : 		m_pHotMark = pImage;

  0023d	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00240	89 86 0c 02 00
	00		 mov	 DWORD PTR [esi+524], eax
  00246	e9 87 04 00 00	 jmp	 $LN1@AddRenderI
$LN1389@AddRenderI:

; 828  : 	}
; 829  : 	else if( szType == "EventMark" )

  0024b	6a 02		 push	 2
  0024d	c7 45 ec a8 9a
	8e 84		 mov	 DWORD PTR __t$511891[ebp], -2071029080 ; 848e9aa8H
  00254	c7 45 f0 99 a1
	8a 98		 mov	 DWORD PTR __t$511891[ebp+4], -1735745127 ; 988aa199H
  0025b	8d 45 ec	 lea	 eax, DWORD PTR __t$511891[ebp]
  0025e	66 c7 45 f4 86
	00		 mov	 WORD PTR __t$511891[ebp+8], 134 ; 00000086H
  00264	59		 pop	 ecx
$LL593@AddRenderI:
  00265	31 38		 xor	 DWORD PTR [eax], edi
  00267	83 c0 04	 add	 eax, 4
  0026a	49		 dec	 ecx
  0026b	75 f8		 jne	 SHORT $LL593@AddRenderI
  0026d	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00270	80 75 f4 ed	 xor	 BYTE PTR __t$511891[ebp+8], -19 ; ffffffedH
  00274	8d 75 ec	 lea	 esi, DWORD PTR __t$511891[ebp]
  00277	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1413@AddRenderI:
  0027d	8a 08		 mov	 cl, BYTE PTR [eax]
  0027f	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00281	75 1a		 jne	 SHORT $LN1414@AddRenderI
  00283	3a cb		 cmp	 cl, bl
  00285	74 12		 je	 SHORT $LN1447@AddRenderI
  00287	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0028a	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0028d	75 0e		 jne	 SHORT $LN1414@AddRenderI
  0028f	83 c0 02	 add	 eax, 2
  00292	83 c6 02	 add	 esi, 2
  00295	3a cb		 cmp	 cl, bl
  00297	75 e4		 jne	 SHORT $LL1413@AddRenderI
$LN1447@AddRenderI:
  00299	33 c0		 xor	 eax, eax
  0029b	eb 05		 jmp	 SHORT $LN1416@AddRenderI
$LN1414@AddRenderI:
  0029d	1b c0		 sbb	 eax, eax
  0029f	83 d8 ff	 sbb	 eax, -1
$LN1416@AddRenderI:
  002a2	3b c3		 cmp	 eax, ebx
  002a4	75 28		 jne	 SHORT $LN1390@AddRenderI

; 830  : 	{
; 831  : 		SAFEDELETE( m_pEventMark );

  002a6	8b 75 d8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  002a9	8b 8e 10 02 00
	00		 mov	 ecx, DWORD PTR [esi+528]
  002af	3b cb		 cmp	 ecx, ebx
  002b1	74 0d		 je	 SHORT $LN24@AddRenderI
  002b3	8b 01		 mov	 eax, DWORD PTR [ecx]
  002b5	6a 01		 push	 1
  002b7	ff 50 40	 call	 DWORD PTR [eax+64]
  002ba	89 9e 10 02 00
	00		 mov	 DWORD PTR [esi+528], ebx
$LN24@AddRenderI:

; 832  : 		m_pEventMark = pImage;

  002c0	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  002c3	89 86 10 02 00
	00		 mov	 DWORD PTR [esi+528], eax
  002c9	e9 04 04 00 00	 jmp	 $LN1@AddRenderI
$LN1390@AddRenderI:

; 833  : 	}
; 834  : 	else if( szType == "LimitMark" )

  002ce	6a 02		 push	 2
  002d0	c7 45 ec a1 85
	86 83		 mov	 DWORD PTR __t$512029[ebp], -2088335967 ; 838685a1H
  002d7	c7 45 f0 99 a1
	8a 98		 mov	 DWORD PTR __t$512029[ebp+4], -1735745127 ; 988aa199H
  002de	8d 45 ec	 lea	 eax, DWORD PTR __t$512029[ebp]
  002e1	66 c7 45 f4 86
	00		 mov	 WORD PTR __t$512029[ebp+8], 134 ; 00000086H
  002e7	59		 pop	 ecx
$LL699@AddRenderI:
  002e8	31 38		 xor	 DWORD PTR [eax], edi
  002ea	83 c0 04	 add	 eax, 4
  002ed	49		 dec	 ecx
  002ee	75 f8		 jne	 SHORT $LL699@AddRenderI
  002f0	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  002f3	80 75 f4 ed	 xor	 BYTE PTR __t$512029[ebp+8], -19 ; ffffffedH
  002f7	8d 75 ec	 lea	 esi, DWORD PTR __t$512029[ebp]
  002fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1417@AddRenderI:
  00300	8a 08		 mov	 cl, BYTE PTR [eax]
  00302	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00304	75 1a		 jne	 SHORT $LN1418@AddRenderI
  00306	3a cb		 cmp	 cl, bl
  00308	74 12		 je	 SHORT $LN1419@AddRenderI
  0030a	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0030d	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00310	75 0e		 jne	 SHORT $LN1418@AddRenderI
  00312	83 c0 02	 add	 eax, 2
  00315	83 c6 02	 add	 esi, 2
  00318	3a cb		 cmp	 cl, bl
  0031a	75 e4		 jne	 SHORT $LL1417@AddRenderI
$LN1419@AddRenderI:
  0031c	33 c0		 xor	 eax, eax
  0031e	eb 05		 jmp	 SHORT $LN1420@AddRenderI
$LN1418@AddRenderI:
  00320	1b c0		 sbb	 eax, eax
  00322	83 d8 ff	 sbb	 eax, -1
$LN1420@AddRenderI:
  00325	3b c3		 cmp	 eax, ebx
  00327	75 28		 jne	 SHORT $LN1391@AddRenderI

; 835  : 	{
; 836  : 		SAFEDELETE( m_pLimitMark );

  00329	8b 75 d8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0032c	8b 8e 14 02 00
	00		 mov	 ecx, DWORD PTR [esi+532]
  00332	3b cb		 cmp	 ecx, ebx
  00334	74 0d		 je	 SHORT $LN21@AddRenderI
  00336	8b 01		 mov	 eax, DWORD PTR [ecx]
  00338	6a 01		 push	 1
  0033a	ff 50 40	 call	 DWORD PTR [eax+64]
  0033d	89 9e 14 02 00
	00		 mov	 DWORD PTR [esi+532], ebx
$LN21@AddRenderI:

; 837  : 		m_pLimitMark = pImage;

  00343	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00346	89 86 14 02 00
	00		 mov	 DWORD PTR [esi+532], eax
  0034c	e9 81 03 00 00	 jmp	 $LN1@AddRenderI
$LN1391@AddRenderI:

; 838  : 	}
; 839  : 	else if( szType == "LimitDayMark" )

  00351	6a 03		 push	 3
  00353	c7 45 e8 a1 85
	86 83		 mov	 DWORD PTR __t$512219[ebp], -2088335967 ; 838685a1H
  0035a	c7 45 ec 99 a8
	8a 93		 mov	 DWORD PTR __t$512219[ebp+4], -1819629415 ; 938aa899H
  00361	c7 45 f0 a0 8d
	99 81		 mov	 DWORD PTR __t$512219[ebp+8], -2120643168 ; 81998da0H
  00368	8d 45 e8	 lea	 eax, DWORD PTR __t$512219[ebp]
  0036b	88 5d f4	 mov	 BYTE PTR __t$512219[ebp+12], bl
  0036e	59		 pop	 ecx
$LL805@AddRenderI:
  0036f	31 38		 xor	 DWORD PTR [eax], edi
  00371	83 c0 04	 add	 eax, 4
  00374	49		 dec	 ecx
  00375	75 f8		 jne	 SHORT $LL805@AddRenderI
  00377	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  0037a	8d 75 e8	 lea	 esi, DWORD PTR __t$512219[ebp]
  0037d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1421@AddRenderI:
  00383	8a 08		 mov	 cl, BYTE PTR [eax]
  00385	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00387	75 1a		 jne	 SHORT $LN1422@AddRenderI
  00389	3a cb		 cmp	 cl, bl
  0038b	74 12		 je	 SHORT $LN1448@AddRenderI
  0038d	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00390	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00393	75 0e		 jne	 SHORT $LN1422@AddRenderI
  00395	83 c0 02	 add	 eax, 2
  00398	83 c6 02	 add	 esi, 2
  0039b	3a cb		 cmp	 cl, bl
  0039d	75 e4		 jne	 SHORT $LL1421@AddRenderI
$LN1448@AddRenderI:
  0039f	33 c0		 xor	 eax, eax
  003a1	eb 05		 jmp	 SHORT $LN1424@AddRenderI
$LN1422@AddRenderI:
  003a3	1b c0		 sbb	 eax, eax
  003a5	83 d8 ff	 sbb	 eax, -1
$LN1424@AddRenderI:
  003a8	3b c3		 cmp	 eax, ebx
  003aa	75 28		 jne	 SHORT $LN1392@AddRenderI

; 840  : 	{
; 841  : 		SAFEDELETE( m_pLimitDayMark );

  003ac	8b 75 d8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  003af	8b 8e 18 02 00
	00		 mov	 ecx, DWORD PTR [esi+536]
  003b5	3b cb		 cmp	 ecx, ebx
  003b7	74 0d		 je	 SHORT $LN18@AddRenderI
  003b9	8b 01		 mov	 eax, DWORD PTR [ecx]
  003bb	6a 01		 push	 1
  003bd	ff 50 40	 call	 DWORD PTR [eax+64]
  003c0	89 9e 18 02 00
	00		 mov	 DWORD PTR [esi+536], ebx
$LN18@AddRenderI:

; 842  : 		m_pLimitDayMark = pImage;

  003c6	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  003c9	89 86 18 02 00
	00		 mov	 DWORD PTR [esi+536], eax
  003cf	e9 fe 02 00 00	 jmp	 $LN1@AddRenderI
$LN1392@AddRenderI:

; 843  : 	}
; 844  : 	else if( szType == "SoldOutMark" )

  003d4	6a 02		 push	 2
  003d6	c7 45 ec be 83
	87 8e		 mov	 DWORD PTR __t$512266[ebp], -1903721538 ; 8e8783beH
  003dd	c7 45 f0 a2 99
	9f a7		 mov	 DWORD PTR __t$512266[ebp+4], -1482712670 ; a79f99a2H
  003e4	8d 45 ec	 lea	 eax, DWORD PTR __t$512266[ebp]
  003e7	c7 45 f4 8c 9e
	80 00		 mov	 DWORD PTR __t$512266[ebp+8], 8429196 ; 00809e8cH
  003ee	59		 pop	 ecx
$LL911@AddRenderI:
  003ef	31 38		 xor	 DWORD PTR [eax], edi
  003f1	83 c0 04	 add	 eax, 4
  003f4	49		 dec	 ecx
  003f5	75 f8		 jne	 SHORT $LL911@AddRenderI
  003f7	6a 08		 push	 8
  003f9	58		 pop	 eax
$LL908@AddRenderI:
  003fa	8b c8		 mov	 ecx, eax
  003fc	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00402	79 05		 jns	 SHORT $LN1452@AddRenderI
  00404	49		 dec	 ecx
  00405	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00408	41		 inc	 ecx
$LN1452@AddRenderI:
  00409	b2 ed		 mov	 dl, -19			; ffffffedH
  0040b	2a d1		 sub	 dl, cl
  0040d	30 54 05 ec	 xor	 BYTE PTR __t$512266[ebp+eax], dl
  00411	40		 inc	 eax
  00412	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00415	7c e3		 jl	 SHORT $LL908@AddRenderI
  00417	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  0041a	8d 75 ec	 lea	 esi, DWORD PTR __t$512266[ebp]
  0041d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1425@AddRenderI:
  00423	8a 08		 mov	 cl, BYTE PTR [eax]
  00425	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00427	75 1a		 jne	 SHORT $LN1426@AddRenderI
  00429	3a cb		 cmp	 cl, bl
  0042b	74 12		 je	 SHORT $LN1427@AddRenderI
  0042d	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00430	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00433	75 0e		 jne	 SHORT $LN1426@AddRenderI
  00435	83 c0 02	 add	 eax, 2
  00438	83 c6 02	 add	 esi, 2
  0043b	3a cb		 cmp	 cl, bl
  0043d	75 e4		 jne	 SHORT $LL1425@AddRenderI
$LN1427@AddRenderI:
  0043f	33 c0		 xor	 eax, eax
  00441	eb 05		 jmp	 SHORT $LN1428@AddRenderI
$LN1426@AddRenderI:
  00443	1b c0		 sbb	 eax, eax
  00445	83 d8 ff	 sbb	 eax, -1
$LN1428@AddRenderI:
  00448	3b c3		 cmp	 eax, ebx
  0044a	75 28		 jne	 SHORT $LN1393@AddRenderI

; 845  : 	{
; 846  : 		SAFEDELETE( m_pSoldOutMark );

  0044c	8b 75 d8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0044f	8b 8e 1c 02 00
	00		 mov	 ecx, DWORD PTR [esi+540]
  00455	3b cb		 cmp	 ecx, ebx
  00457	74 0d		 je	 SHORT $LN15@AddRenderI
  00459	8b 01		 mov	 eax, DWORD PTR [ecx]
  0045b	6a 01		 push	 1
  0045d	ff 50 40	 call	 DWORD PTR [eax+64]
  00460	89 9e 1c 02 00
	00		 mov	 DWORD PTR [esi+540], ebx
$LN15@AddRenderI:

; 847  : 		m_pSoldOutMark = pImage;

  00466	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00469	89 86 1c 02 00
	00		 mov	 DWORD PTR [esi+540], eax
  0046f	e9 5e 02 00 00	 jmp	 $LN1@AddRenderI
$LN1393@AddRenderI:

; 848  : 	}
; 849  : 	else if( szType == "GradeLimitClearMark" )

  00474	6a 04		 push	 4
  00476	c7 45 e4 aa 9e
	8a 8e		 mov	 DWORD PTR __t$512391[ebp], -1903518038 ; 8e8a9eaaH
  0047d	c7 45 e8 88 a0
	82 87		 mov	 DWORD PTR __t$512391[ebp+4], -2021482360 ; 8782a088H
  00484	c7 45 ec 84 98
	a8 86		 mov	 DWORD PTR __t$512391[ebp+8], -2035771260 ; 86a89884H
  0048b	c7 45 f0 88 8d
	99 a7		 mov	 DWORD PTR __t$512391[ebp+12], -1483108984 ; a7998d88H
  00492	8d 45 e4	 lea	 eax, DWORD PTR __t$512391[ebp]
  00495	c7 45 f4 8c 9e
	80 00		 mov	 DWORD PTR __t$512391[ebp+16], 8429196 ; 00809e8cH
  0049c	59		 pop	 ecx
$LL1017@AddRenderI:
  0049d	31 38		 xor	 DWORD PTR [eax], edi
  0049f	83 c0 04	 add	 eax, 4
  004a2	49		 dec	 ecx
  004a3	75 f8		 jne	 SHORT $LL1017@AddRenderI
  004a5	6a 10		 push	 16			; 00000010H
  004a7	58		 pop	 eax
$LL1014@AddRenderI:
  004a8	8b c8		 mov	 ecx, eax
  004aa	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  004b0	79 05		 jns	 SHORT $LN1453@AddRenderI
  004b2	49		 dec	 ecx
  004b3	83 c9 fc	 or	 ecx, -4			; fffffffcH
  004b6	41		 inc	 ecx
$LN1453@AddRenderI:
  004b7	b2 ed		 mov	 dl, -19			; ffffffedH
  004b9	2a d1		 sub	 dl, cl
  004bb	30 54 05 e4	 xor	 BYTE PTR __t$512391[ebp+eax], dl
  004bf	40		 inc	 eax
  004c0	83 f8 13	 cmp	 eax, 19			; 00000013H
  004c3	7c e3		 jl	 SHORT $LL1014@AddRenderI
  004c5	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  004c8	8d 75 e4	 lea	 esi, DWORD PTR __t$512391[ebp]
  004cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1429@AddRenderI:
  004d1	8a 08		 mov	 cl, BYTE PTR [eax]
  004d3	3a 0e		 cmp	 cl, BYTE PTR [esi]
  004d5	75 1a		 jne	 SHORT $LN1430@AddRenderI
  004d7	3a cb		 cmp	 cl, bl
  004d9	74 12		 je	 SHORT $LN1431@AddRenderI
  004db	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  004de	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  004e1	75 0e		 jne	 SHORT $LN1430@AddRenderI
  004e3	83 c0 02	 add	 eax, 2
  004e6	83 c6 02	 add	 esi, 2
  004e9	3a cb		 cmp	 cl, bl
  004eb	75 e4		 jne	 SHORT $LL1429@AddRenderI
$LN1431@AddRenderI:
  004ed	33 c0		 xor	 eax, eax
  004ef	eb 05		 jmp	 SHORT $LN1432@AddRenderI
$LN1430@AddRenderI:
  004f1	1b c0		 sbb	 eax, eax
  004f3	83 d8 ff	 sbb	 eax, -1
$LN1432@AddRenderI:
  004f6	3b c3		 cmp	 eax, ebx
  004f8	75 28		 jne	 SHORT $LN1394@AddRenderI

; 850  : 	{
; 851  : 		SAFEDELETE( m_pGradeLimitClearMark );

  004fa	8b 75 d8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  004fd	8b 8e 20 02 00
	00		 mov	 ecx, DWORD PTR [esi+544]
  00503	3b cb		 cmp	 ecx, ebx
  00505	74 0d		 je	 SHORT $LN12@AddRenderI
  00507	8b 01		 mov	 eax, DWORD PTR [ecx]
  00509	6a 01		 push	 1
  0050b	ff 50 40	 call	 DWORD PTR [eax+64]
  0050e	89 9e 20 02 00
	00		 mov	 DWORD PTR [esi+544], ebx
$LN12@AddRenderI:

; 852  : 		m_pGradeLimitClearMark = pImage;

  00514	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00517	89 86 20 02 00
	00		 mov	 DWORD PTR [esi+544], eax
  0051d	e9 b0 01 00 00	 jmp	 $LN1@AddRenderI
$LN1394@AddRenderI:

; 853  : 	}
; 854  : 	else if( szType == "NumText" )

  00522	6a 04		 push	 4
  00524	c7 45 f0 a3 99
	86 be		 mov	 DWORD PTR __t$512529[ebp], -1098475101 ; be8699a3H
  0052b	31 7d f0	 xor	 DWORD PTR __t$512529[ebp], edi
  0052e	c7 45 f4 88 94
	9f 00		 mov	 DWORD PTR __t$512529[ebp+4], 10458248 ; 009f9488H
  00535	58		 pop	 eax
$LL1120@AddRenderI:
  00536	8b c8		 mov	 ecx, eax
  00538	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0053e	79 05		 jns	 SHORT $LN1454@AddRenderI
  00540	49		 dec	 ecx
  00541	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00544	41		 inc	 ecx
$LN1454@AddRenderI:
  00545	b2 ed		 mov	 dl, -19			; ffffffedH
  00547	2a d1		 sub	 dl, cl
  00549	30 54 05 f0	 xor	 BYTE PTR __t$512529[ebp+eax], dl
  0054d	40		 inc	 eax
  0054e	83 f8 07	 cmp	 eax, 7
  00551	7c e3		 jl	 SHORT $LL1120@AddRenderI
  00553	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00556	8d 75 f0	 lea	 esi, DWORD PTR __t$512529[ebp]
  00559	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1433@AddRenderI:
  0055f	8a 08		 mov	 cl, BYTE PTR [eax]
  00561	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00563	75 1a		 jne	 SHORT $LN1434@AddRenderI
  00565	3a cb		 cmp	 cl, bl
  00567	74 12		 je	 SHORT $LN1449@AddRenderI
  00569	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0056c	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0056f	75 0e		 jne	 SHORT $LN1434@AddRenderI
  00571	83 c0 02	 add	 eax, 2
  00574	83 c6 02	 add	 esi, 2
  00577	3a cb		 cmp	 cl, bl
  00579	75 e4		 jne	 SHORT $LL1433@AddRenderI
$LN1449@AddRenderI:
  0057b	33 c0		 xor	 eax, eax
  0057d	eb 05		 jmp	 SHORT $LN1436@AddRenderI
$LN1434@AddRenderI:
  0057f	1b c0		 sbb	 eax, eax
  00581	83 d8 ff	 sbb	 eax, -1
$LN1436@AddRenderI:
  00584	3b c3		 cmp	 eax, ebx
  00586	75 28		 jne	 SHORT $LN1395@AddRenderI

; 855  : 	{
; 856  : 		SAFEDELETE( m_pNumText );

  00588	8b 75 d8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0058b	8b 8e 24 02 00
	00		 mov	 ecx, DWORD PTR [esi+548]
  00591	3b cb		 cmp	 ecx, ebx
  00593	74 0d		 je	 SHORT $LN9@AddRenderI
  00595	8b 01		 mov	 eax, DWORD PTR [ecx]
  00597	6a 01		 push	 1
  00599	ff 50 40	 call	 DWORD PTR [eax+64]
  0059c	89 9e 24 02 00
	00		 mov	 DWORD PTR [esi+548], ebx
$LN9@AddRenderI:

; 857  : 		m_pNumText = pImage;

  005a2	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  005a5	89 86 24 02 00
	00		 mov	 DWORD PTR [esi+548], eax
  005ab	e9 22 01 00 00	 jmp	 $LN1@AddRenderI
$LN1395@AddRenderI:

; 858  : 	}
; 859  : 	else if( szType == "PlusText" )

  005b0	6a 02		 push	 2
  005b2	c7 45 ec bd 80
	9e 99		 mov	 DWORD PTR __t$512641[ebp], -1717665603 ; 999e80bdH
  005b9	c7 45 f0 b9 89
	93 9e		 mov	 DWORD PTR __t$512641[ebp+4], -1634498119 ; 9e9389b9H
  005c0	8d 45 ec	 lea	 eax, DWORD PTR __t$512641[ebp]
  005c3	88 5d f4	 mov	 BYTE PTR __t$512641[ebp+8], bl
  005c6	59		 pop	 ecx
$LL1229@AddRenderI:
  005c7	31 38		 xor	 DWORD PTR [eax], edi
  005c9	83 c0 04	 add	 eax, 4
  005cc	49		 dec	 ecx
  005cd	75 f8		 jne	 SHORT $LL1229@AddRenderI
  005cf	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  005d2	8d 75 ec	 lea	 esi, DWORD PTR __t$512641[ebp]
  005d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1437@AddRenderI:
  005db	8a 08		 mov	 cl, BYTE PTR [eax]
  005dd	3a 0e		 cmp	 cl, BYTE PTR [esi]
  005df	75 1a		 jne	 SHORT $LN1438@AddRenderI
  005e1	3a cb		 cmp	 cl, bl
  005e3	74 12		 je	 SHORT $LN1439@AddRenderI
  005e5	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  005e8	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  005eb	75 0e		 jne	 SHORT $LN1438@AddRenderI
  005ed	83 c0 02	 add	 eax, 2
  005f0	83 c6 02	 add	 esi, 2
  005f3	3a cb		 cmp	 cl, bl
  005f5	75 e4		 jne	 SHORT $LL1437@AddRenderI
$LN1439@AddRenderI:
  005f7	33 c0		 xor	 eax, eax
  005f9	eb 05		 jmp	 SHORT $LN1440@AddRenderI
$LN1438@AddRenderI:
  005fb	1b c0		 sbb	 eax, eax
  005fd	83 d8 ff	 sbb	 eax, -1
$LN1440@AddRenderI:
  00600	3b c3		 cmp	 eax, ebx
  00602	75 28		 jne	 SHORT $LN1396@AddRenderI

; 860  : 	{
; 861  : 		SAFEDELETE( m_pPlusText );

  00604	8b 75 d8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00607	8b 8e 28 02 00
	00		 mov	 ecx, DWORD PTR [esi+552]
  0060d	3b cb		 cmp	 ecx, ebx
  0060f	74 0d		 je	 SHORT $LN6@AddRenderI
  00611	8b 01		 mov	 eax, DWORD PTR [ecx]
  00613	6a 01		 push	 1
  00615	ff 50 40	 call	 DWORD PTR [eax+64]
  00618	89 9e 28 02 00
	00		 mov	 DWORD PTR [esi+552], ebx
$LN6@AddRenderI:

; 862  : 		m_pPlusText = pImage;

  0061e	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00621	89 86 28 02 00
	00		 mov	 DWORD PTR [esi+552], eax
  00627	e9 a6 00 00 00	 jmp	 $LN1@AddRenderI
$LN1396@AddRenderI:

; 863  : 	}
; 864  : 	else if( szType == "CostumeImage" )

  0062c	6a 03		 push	 3
  0062e	c7 45 e8 ae 83
	98 9e		 mov	 DWORD PTR __t$512844[ebp], -1634171986 ; 9e9883aeH
  00635	c7 45 ec 98 81
	8e a3		 mov	 DWORD PTR __t$512844[ebp+4], -1550941800 ; a38e8198H
  0063c	c7 45 f0 80 8d
	8c 8f		 mov	 DWORD PTR __t$512844[ebp+8], -1886614144 ; 8f8c8d80H
  00643	8d 45 e8	 lea	 eax, DWORD PTR __t$512844[ebp]
  00646	88 5d f4	 mov	 BYTE PTR __t$512844[ebp+12], bl
  00649	59		 pop	 ecx
$LL1335@AddRenderI:
  0064a	31 38		 xor	 DWORD PTR [eax], edi
  0064c	83 c0 04	 add	 eax, 4
  0064f	49		 dec	 ecx
  00650	75 f8		 jne	 SHORT $LL1335@AddRenderI
  00652	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00655	8d 75 e8	 lea	 esi, DWORD PTR __t$512844[ebp]
  00658	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1441@AddRenderI:
  0065e	8a 08		 mov	 cl, BYTE PTR [eax]
  00660	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00662	75 1a		 jne	 SHORT $LN1442@AddRenderI
  00664	3a cb		 cmp	 cl, bl
  00666	74 12		 je	 SHORT $LN1443@AddRenderI
  00668	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0066b	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0066e	75 0e		 jne	 SHORT $LN1442@AddRenderI
  00670	83 c0 02	 add	 eax, 2
  00673	83 c6 02	 add	 esi, 2
  00676	3a cb		 cmp	 cl, bl
  00678	75 e4		 jne	 SHORT $LL1441@AddRenderI
$LN1443@AddRenderI:
  0067a	33 c0		 xor	 eax, eax
  0067c	eb 05		 jmp	 SHORT $LN1444@AddRenderI
$LN1442@AddRenderI:
  0067e	1b c0		 sbb	 eax, eax
  00680	83 d8 ff	 sbb	 eax, -1
$LN1444@AddRenderI:
  00683	3b c3		 cmp	 eax, ebx
  00685	75 3c		 jne	 SHORT $LN4@AddRenderI

; 865  : 	{
; 866  : 		SAFEDELETE( m_pCostumeMark );

  00687	8b 75 d8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0068a	8b 8e 2c 02 00
	00		 mov	 ecx, DWORD PTR [esi+556]
  00690	3b cb		 cmp	 ecx, ebx
  00692	74 0d		 je	 SHORT $LN3@AddRenderI
  00694	8b 01		 mov	 eax, DWORD PTR [ecx]
  00696	6a 01		 push	 1
  00698	ff 50 40	 call	 DWORD PTR [eax+64]
  0069b	89 9e 2c 02 00
	00		 mov	 DWORD PTR [esi+556], ebx
$LN3@AddRenderI:

; 867  : 		m_pCostumeMark = pImage;

  006a1	8b 4d e0	 mov	 ecx, DWORD PTR _pImage$GSCopy$[ebp]
  006a4	89 8e 2c 02 00
	00		 mov	 DWORD PTR [esi+556], ecx

; 868  : 
; 869  : 		if( m_pCostumeMark )		

  006aa	3b cb		 cmp	 ecx, ebx
  006ac	74 24		 je	 SHORT $LN1@AddRenderI
$LN1455@AddRenderI:

; 870  : 			m_pCostumeMark->SetScale( 0.67f );

  006ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2b851f
  006b6	8b 01		 mov	 eax, DWORD PTR [ecx]
  006b8	51		 push	 ecx
  006b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006be	ff 50 1c	 call	 DWORD PTR [eax+28]

; 871  : 	}
; 872  : 	else

  006c1	eb 0f		 jmp	 SHORT $LN1@AddRenderI
$LN4@AddRenderI:

; 873  : 	{
; 874  : 		ioButton::AddRenderImage( szType, pImage );	

  006c3	ff 75 e0	 push	 DWORD PTR _pImage$GSCopy$[ebp]
  006c6	8b 4d d8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  006c9	ff 75 dc	 push	 DWORD PTR _szType$GSCopy$[ebp]
  006cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AddRenderImage@ioButton@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
$LN1@AddRenderI:

; 875  : 	}	
; 876  : }

  006d2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006d5	5f		 pop	 edi
  006d6	5e		 pop	 esi
  006d7	33 cd		 xor	 ecx, ebp
  006d9	5b		 pop	 ebx
  006da	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006df	c9		 leave
  006e0	c2 08 00	 ret	 8
?AddRenderImage@ioProductIconButton@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z ENDP ; ioProductIconButton::AddRenderImage
_TEXT	ENDS
PUBLIC	_pFrame$GSCopy$
PUBLIC	_szType$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_?AddRenderFrame@ioButton@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?AddRenderFrame@ioProductIconButton@@MAEXABVioHashString@@PAVioUIRenderFrame@@@Z
_TEXT	SEGMENT
_szType$GSCopy$ = -36					; size = 4
_pFrame$GSCopy$ = -32					; size = 4
_this$GSCopy$ = -28					; size = 4
__t$513277 = -24					; size = 12
__t$513230 = -24					; size = 13
__t$513094 = -24					; size = 13
__$ArrayPad$ = -4					; size = 4
_szType$ = 8						; size = 4
_pFrame$ = 12						; size = 4
?AddRenderFrame@ioProductIconButton@@MAEXABVioHashString@@PAVioUIRenderFrame@@@Z PROC ; ioProductIconButton::AddRenderFrame, COMDAT
; _this$ = ecx

; 879  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _pFrame$[ebp]
  00013	8b 55 08	 mov	 edx, DWORD PTR _szType$[ebp]
  00016	53		 push	 ebx

; 880  : 	if( pFrame )

  00017	33 db		 xor	 ebx, ebx
  00019	89 4d e4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx

; 891  : 		}
; 892  : 		else if( szType == "StateRedFrm" )

  0001c	89 55 dc	 mov	 DWORD PTR _szType$GSCopy$[ebp], edx
  0001f	89 45 e0	 mov	 DWORD PTR _pFrame$GSCopy$[ebp], eax
  00022	3b c3		 cmp	 eax, ebx
  00024	0f 84 ba 01 00
	00		 je	 $LN1@AddRenderF@2

; 881  : 	{
; 882  : 		if( szType == "StateBlueFrm" )

  0002a	57		 push	 edi
  0002b	6a 03		 push	 3
  0002d	c7 45 e8 be 98
	8a 9e		 mov	 DWORD PTR __t$513094[ebp], -1635084098 ; 9e8a98beH
  00034	c7 45 ec 88 ae
	87 9f		 mov	 DWORD PTR __t$513094[ebp+4], -1618497912 ; 9f87ae88H
  0003b	c7 45 f0 88 aa
	99 87		 mov	 DWORD PTR __t$513094[ebp+8], -2019972472 ; 8799aa88H
  00042	8d 45 e8	 lea	 eax, DWORD PTR __t$513094[ebp]
  00045	88 5d f4	 mov	 BYTE PTR __t$513094[ebp+12], bl
  00048	59		 pop	 ecx
  00049	bf ed ec eb ea	 mov	 edi, -353637139		; eaebecedH
$LL122@AddRenderF@2:
  0004e	31 38		 xor	 DWORD PTR [eax], edi
  00050	83 c0 04	 add	 eax, 4
  00053	49		 dec	 ecx
  00054	75 f8		 jne	 SHORT $LL122@AddRenderF@2
  00056	56		 push	 esi
  00057	8b ca		 mov	 ecx, edx
  00059	8d 75 e8	 lea	 esi, DWORD PTR __t$513094[ebp]
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL351@AddRenderF@2:
  00062	8a 08		 mov	 cl, BYTE PTR [eax]
  00064	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00066	75 1a		 jne	 SHORT $LN352@AddRenderF@2
  00068	3a cb		 cmp	 cl, bl
  0006a	74 12		 je	 SHORT $LN353@AddRenderF@2
  0006c	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0006f	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00072	75 0e		 jne	 SHORT $LN352@AddRenderF@2
  00074	83 c0 02	 add	 eax, 2
  00077	83 c6 02	 add	 esi, 2
  0007a	3a cb		 cmp	 cl, bl
  0007c	75 e4		 jne	 SHORT $LL351@AddRenderF@2
$LN353@AddRenderF@2:
  0007e	33 c0		 xor	 eax, eax
  00080	eb 05		 jmp	 SHORT $LN354@AddRenderF@2
$LN352@AddRenderF@2:
  00082	1b c0		 sbb	 eax, eax
  00084	83 d8 ff	 sbb	 eax, -1
$LN354@AddRenderF@2:
  00087	3b c3		 cmp	 eax, ebx
  00089	75 28		 jne	 SHORT $LN349@AddRenderF@2

; 883  : 		{
; 884  : 			SAFEDELETE( m_pStateBlueFrm );

  0008b	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0008e	8b 8e 30 02 00
	00		 mov	 ecx, DWORD PTR [esi+560]
  00094	3b cb		 cmp	 ecx, ebx
  00096	74 0d		 je	 SHORT $LN8@AddRenderF@2
  00098	8b 01		 mov	 eax, DWORD PTR [ecx]
  0009a	6a 01		 push	 1
  0009c	ff 50 40	 call	 DWORD PTR [eax+64]
  0009f	89 9e 30 02 00
	00		 mov	 DWORD PTR [esi+560], ebx
$LN8@AddRenderF@2:

; 885  : 			m_pStateBlueFrm = pFrame;

  000a5	8b 45 e0	 mov	 eax, DWORD PTR _pFrame$GSCopy$[ebp]
  000a8	89 86 30 02 00
	00		 mov	 DWORD PTR [esi+560], eax
  000ae	e9 2f 01 00 00	 jmp	 $LN364@AddRenderF@2
$LN349@AddRenderF@2:

; 886  : 		}
; 887  : 		else if( szType == "StatePinkFrm" )

  000b3	6a 03		 push	 3
  000b5	c7 45 e8 be 98
	8a 9e		 mov	 DWORD PTR __t$513230[ebp], -1635084098 ; 9e8a98beH
  000bc	c7 45 ec 88 bc
	82 84		 mov	 DWORD PTR __t$513230[ebp+4], -2071806840 ; 8482bc88H
  000c3	c7 45 f0 86 aa
	99 87		 mov	 DWORD PTR __t$513230[ebp+8], -2019972474 ; 8799aa86H
  000ca	8d 45 e8	 lea	 eax, DWORD PTR __t$513230[ebp]
  000cd	88 5d f4	 mov	 BYTE PTR __t$513230[ebp+12], bl
  000d0	59		 pop	 ecx
$LL228@AddRenderF@2:
  000d1	31 38		 xor	 DWORD PTR [eax], edi
  000d3	83 c0 04	 add	 eax, 4
  000d6	49		 dec	 ecx
  000d7	75 f8		 jne	 SHORT $LL228@AddRenderF@2
  000d9	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  000dc	8d 75 e8	 lea	 esi, DWORD PTR __t$513230[ebp]
  000df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL355@AddRenderF@2:
  000e5	8a 08		 mov	 cl, BYTE PTR [eax]
  000e7	3a 0e		 cmp	 cl, BYTE PTR [esi]
  000e9	75 1a		 jne	 SHORT $LN356@AddRenderF@2
  000eb	3a cb		 cmp	 cl, bl
  000ed	74 12		 je	 SHORT $LN357@AddRenderF@2
  000ef	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000f2	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  000f5	75 0e		 jne	 SHORT $LN356@AddRenderF@2
  000f7	83 c0 02	 add	 eax, 2
  000fa	83 c6 02	 add	 esi, 2
  000fd	3a cb		 cmp	 cl, bl
  000ff	75 e4		 jne	 SHORT $LL355@AddRenderF@2
$LN357@AddRenderF@2:
  00101	33 c0		 xor	 eax, eax
  00103	eb 05		 jmp	 SHORT $LN358@AddRenderF@2
$LN356@AddRenderF@2:
  00105	1b c0		 sbb	 eax, eax
  00107	83 d8 ff	 sbb	 eax, -1
$LN358@AddRenderF@2:
  0010a	3b c3		 cmp	 eax, ebx
  0010c	75 28		 jne	 SHORT $LN350@AddRenderF@2

; 888  : 		{
; 889  : 			SAFEDELETE( m_pStatePinkFrm );

  0010e	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00111	8b 8e 34 02 00
	00		 mov	 ecx, DWORD PTR [esi+564]
  00117	3b cb		 cmp	 ecx, ebx
  00119	74 0d		 je	 SHORT $LN5@AddRenderF@2
  0011b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0011d	6a 01		 push	 1
  0011f	ff 50 40	 call	 DWORD PTR [eax+64]
  00122	89 9e 34 02 00
	00		 mov	 DWORD PTR [esi+564], ebx
$LN5@AddRenderF@2:

; 890  : 			m_pStatePinkFrm = pFrame;

  00128	8b 45 e0	 mov	 eax, DWORD PTR _pFrame$GSCopy$[ebp]
  0012b	89 86 34 02 00
	00		 mov	 DWORD PTR [esi+564], eax
  00131	e9 ac 00 00 00	 jmp	 $LN364@AddRenderF@2
$LN350@AddRenderF@2:

; 891  : 		}
; 892  : 		else if( szType == "StateRedFrm" )

  00136	6a 02		 push	 2
  00138	c7 45 e8 be 98
	8a 9e		 mov	 DWORD PTR __t$513277[ebp], -1635084098 ; 9e8a98beH
  0013f	c7 45 ec 88 be
	8e 8e		 mov	 DWORD PTR __t$513277[ebp+4], -1903247736 ; 8e8ebe88H
  00146	8d 45 e8	 lea	 eax, DWORD PTR __t$513277[ebp]
  00149	c7 45 f0 ab 9e
	86 00		 mov	 DWORD PTR __t$513277[ebp+8], 8822443 ; 00869eabH
  00150	59		 pop	 ecx
$LL334@AddRenderF@2:
  00151	31 38		 xor	 DWORD PTR [eax], edi
  00153	83 c0 04	 add	 eax, 4
  00156	49		 dec	 ecx
  00157	75 f8		 jne	 SHORT $LL334@AddRenderF@2
  00159	6a 08		 push	 8
  0015b	58		 pop	 eax
$LL331@AddRenderF@2:
  0015c	8b c8		 mov	 ecx, eax
  0015e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00164	79 05		 jns	 SHORT $LN365@AddRenderF@2
  00166	49		 dec	 ecx
  00167	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0016a	41		 inc	 ecx
$LN365@AddRenderF@2:
  0016b	b2 ed		 mov	 dl, -19			; ffffffedH
  0016d	2a d1		 sub	 dl, cl
  0016f	30 54 05 e8	 xor	 BYTE PTR __t$513277[ebp+eax], dl
  00173	40		 inc	 eax
  00174	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00177	7c e3		 jl	 SHORT $LL331@AddRenderF@2
  00179	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  0017c	8d 75 e8	 lea	 esi, DWORD PTR __t$513277[ebp]
  0017f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL359@AddRenderF@2:
  00185	8a 08		 mov	 cl, BYTE PTR [eax]
  00187	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00189	75 1a		 jne	 SHORT $LN360@AddRenderF@2
  0018b	3a cb		 cmp	 cl, bl
  0018d	74 12		 je	 SHORT $LN361@AddRenderF@2
  0018f	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00192	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00195	75 0e		 jne	 SHORT $LN360@AddRenderF@2
  00197	83 c0 02	 add	 eax, 2
  0019a	83 c6 02	 add	 esi, 2
  0019d	3a cb		 cmp	 cl, bl
  0019f	75 e4		 jne	 SHORT $LL359@AddRenderF@2
$LN361@AddRenderF@2:
  001a1	33 c0		 xor	 eax, eax
  001a3	eb 05		 jmp	 SHORT $LN362@AddRenderF@2
$LN360@AddRenderF@2:
  001a5	1b c0		 sbb	 eax, eax
  001a7	83 d8 ff	 sbb	 eax, -1
$LN362@AddRenderF@2:
  001aa	3b c3		 cmp	 eax, ebx
  001ac	75 25		 jne	 SHORT $LN3@AddRenderF@2

; 893  : 		{
; 894  : 			SAFEDELETE( m_pStateRedFrm );

  001ae	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  001b1	8b 8e 38 02 00
	00		 mov	 ecx, DWORD PTR [esi+568]
  001b7	3b cb		 cmp	 ecx, ebx
  001b9	74 0d		 je	 SHORT $LN2@AddRenderF@2
  001bb	8b 01		 mov	 eax, DWORD PTR [ecx]
  001bd	6a 01		 push	 1
  001bf	ff 50 40	 call	 DWORD PTR [eax+64]
  001c2	89 9e 38 02 00
	00		 mov	 DWORD PTR [esi+568], ebx
$LN2@AddRenderF@2:

; 895  : 			m_pStateRedFrm = pFrame;

  001c8	8b 45 e0	 mov	 eax, DWORD PTR _pFrame$GSCopy$[ebp]
  001cb	89 86 38 02 00
	00		 mov	 DWORD PTR [esi+568], eax

; 896  : 		}
; 897  : 		else

  001d1	eb 0f		 jmp	 SHORT $LN364@AddRenderF@2
$LN3@AddRenderF@2:

; 898  : 		{	
; 899  : 			ioButton::AddRenderFrame( szType, pFrame );

  001d3	ff 75 e0	 push	 DWORD PTR _pFrame$GSCopy$[ebp]
  001d6	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001d9	ff 75 dc	 push	 DWORD PTR _szType$GSCopy$[ebp]
  001dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AddRenderFrame@ioButton@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
$LN364@AddRenderF@2:
  001e2	5e		 pop	 esi
  001e3	5f		 pop	 edi
$LN1@AddRenderF@2:

; 900  : 		}
; 901  : 	}
; 902  : }

  001e4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e7	33 cd		 xor	 ecx, ebp
  001e9	5b		 pop	 ebx
  001ea	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ef	c9		 leave
  001f0	c2 08 00	 ret	 8
?AddRenderFrame@ioProductIconButton@@MAEXABVioHashString@@PAVioUIRenderFrame@@@Z ENDP ; ioProductIconButton::AddRenderFrame
_TEXT	ENDS
PUBLIC	??0?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE@XZ ; std::vector<ADProduct,std::allocator<ADProduct> >::vector<ADProduct,std::allocator<ADProduct> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE@XZ PROC ; std::vector<ADProduct,std::allocator<ADProduct> >::vector<ADProduct,std::allocator<ADProduct> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE@XZ ENDP ; std::vector<ADProduct,std::allocator<ADProduct> >::vector<ADProduct,std::allocator<ADProduct> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@XZ ; std::vector<ADProduct,std::allocator<ADProduct> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@XZ PROC ; std::vector<ADProduct,std::allocator<ADProduct> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@XZ ENDP ; std::vector<ADProduct,std::allocator<ADProduct> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@XZ ; std::vector<ADProduct,std::allocator<ADProduct> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@XZ PROC ; std::vector<ADProduct,std::allocator<ADProduct> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@XZ ENDP ; std::vector<ADProduct,std::allocator<ADProduct> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@@Z ; std::vector<ADProduct,std::allocator<ADProduct> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@@Z PROC ; std::vector<ADProduct,std::allocator<ADProduct> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@@Z ENDP ; std::vector<ADProduct,std::allocator<ADProduct> >::_Make_iter
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ADProduct,std::allocator<ADProduct> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ADProduct,std::allocator<ADProduct> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ADProduct,std::allocator<ADProduct> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UADProduct@@@std@@UADProduct@@ABU3@@std@@YAXAAV?$allocator@UADProduct@@@0@PAUADProduct@@ABU2@@Z ; std::_Cons_val<std::allocator<ADProduct>,ADProduct,ADProduct const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UADProduct@@@std@@UADProduct@@ABU3@@std@@YAXAAV?$allocator@UADProduct@@@0@PAUADProduct@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UADProduct@@@std@@UADProduct@@ABU3@@std@@YAXAAV?$allocator@UADProduct@@@0@PAUADProduct@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<ADProduct>,ADProduct,ADProduct const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN9@Cons_val@2
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	6a 06		 push	 6
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN9@Cons_val@2:
  00015	5f		 pop	 edi

; 281  : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Cons_val@V?$allocator@UADProduct@@@std@@UADProduct@@ABU3@@std@@YAXAAV?$allocator@UADProduct@@@0@PAUADProduct@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<ADProduct>,ADProduct,ADProduct const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUADProduct@@PAU1@@std@@YAPAUADProduct@@PAU1@00@Z ; std::_Move<ADProduct *,ADProduct *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUADProduct@@PAU1@@std@@YAPAUADProduct@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$513546 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUADProduct@@PAU1@@std@@YAPAUADProduct@@PAU1@00@Z PROC ; std::_Move<ADProduct *,ADProduct *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$513546[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAUADProduct@@PAU1@@std@@YAPAUADProduct@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ADProduct *,ADProduct *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAUADProduct@@PAU1@@std@@YAPAUADProduct@@PAU1@00@Z ENDP ; std::_Move<ADProduct *,ADProduct *>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UADProduct@@@std@@UADProduct@@@std@@YAXAAV?$allocator@UADProduct@@@0@PAUADProduct@@@Z ; std::_Dest_val<std::allocator<ADProduct>,ADProduct>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UADProduct@@@std@@UADProduct@@@std@@YAXAAV?$allocator@UADProduct@@@0@PAUADProduct@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UADProduct@@@std@@UADProduct@@@std@@YAXAAV?$allocator@UADProduct@@@0@PAUADProduct@@@Z PROC ; std::_Dest_val<std::allocator<ADProduct>,ADProduct>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UADProduct@@@std@@UADProduct@@@std@@YAXAAV?$allocator@UADProduct@@@0@PAUADProduct@@@Z ENDP ; std::_Dest_val<std::allocator<ADProduct>,ADProduct>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UADProduct@@@std@@UADProduct@@U3@@std@@YAXAAV?$allocator@UADProduct@@@0@PAUADProduct@@$$QAU2@@Z ; std::_Cons_val<std::allocator<ADProduct>,ADProduct,ADProduct>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UADProduct@@@std@@UADProduct@@U3@@std@@YAXAAV?$allocator@UADProduct@@@0@PAUADProduct@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UADProduct@@@std@@UADProduct@@U3@@std@@YAXAAV?$allocator@UADProduct@@@0@PAUADProduct@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<ADProduct>,ADProduct,ADProduct>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN7@Cons_val@3
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	6a 06		 push	 6
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN7@Cons_val@3:
  00015	5f		 pop	 edi

; 281  : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Cons_val@V?$allocator@UADProduct@@@std@@UADProduct@@U3@@std@@YAXAAV?$allocator@UADProduct@@@0@PAUADProduct@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<ADProduct>,ADProduct,ADProduct>
_TEXT	ENDS
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Destroy
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator!=
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?SetSoldierInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z ; ioProductLinkButton::SetSoldierInfo
EXTRN	?GetMySoldierIconName@ioMyInfo@@QAEAAVioHashString@@H@Z:PROC ; ioMyInfo::GetMySoldierIconName
EXTRN	?GetPowerUpGradeType@ioUIImageRenderManager@@QAEHH@Z:PROC ; ioUIImageRenderManager::GetPowerUpGradeType
EXTRN	?CreateSoldierItemInfo@NewShopItemHelp@@YA_NPBVioSetItemInfo@@AAUtagNewShopItemInfo@@@Z:PROC ; NewShopItemHelp::CreateSoldierItemInfo
EXTRN	?GetClassArray@ioMyInfo@@QAEHH@Z:PROC		; ioMyInfo::GetClassArray
EXTRN	?GetSingleton@ioMyInfo@@SAAAV1@XZ:PROC		; ioMyInfo::GetSingleton
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?ConvertNumToStrComma@Help@@YAXHPADH@Z:PROC	; Help::ConvertNumToStrComma
EXTRN	?GetClassBuyPeso@ioClassPrice@@QAEHHH_N@Z:PROC	; ioClassPrice::GetClassBuyPeso
EXTRN	?GetLimitDatePeso@ioClassPrice@@QAEHHH@Z:PROC	; ioClassPrice::GetLimitDatePeso
EXTRN	?GetMortmainCharCash@ioClassPrice@@QAEHH@Z:PROC	; ioClassPrice::GetMortmainCharCash
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
EXTRN	?IsAvailableDate@NewShopItemHelp@@YA_NK@Z:PROC	; NewShopItemHelp::IsAvailableDate
EXTRN	?GetLimitDate@ioSetItemInfo@@QBEKXZ:PROC	; ioSetItemInfo::GetLimitDate
EXTRN	?GetSetInfoByClass@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@H@Z:PROC ; ioSetItemInfoManager::GetSetInfoByClass
EXTRN	?GetSingeton@ioSetItemInfoManager@@SAAAV1@XZ:PROC ; ioSetItemInfoManager::GetSingeton
EXTRN	?IsActive@ioClassPrice@@QAE_NH@Z:PROC		; ioClassPrice::IsActive
EXTRN	?GetSingleton@ioClassPrice@@SAAAV1@XZ:PROC	; ioClassPrice::GetSingleton
EXTRN	_memset:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\newshopstartwnd.cpp
;	COMDAT ?SetSoldierInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z
_TEXT	SEGMENT
_iPeso$ = -276						; size = 4
_pInfo$ = -272						; size = 4
_this$GSCopy$ = -268					; size = 4
_eShopMarkType$ = -268					; size = 4
_iGold$ = -268						; size = 4
_szComma$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_Product$ = 8						; size = 4
?SetSoldierInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z PROC ; ioProductLinkButton::SetSoldierInfo, COMDAT
; _this$ = ecx

; 397  : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _Product$[ebp]
  00017	56		 push	 esi

; 398  : 	if( !g_ClassPrice.IsActive( Product.m_Link.m_iValue1 ) )

  00018	ff 73 0c	 push	 DWORD PTR [ebx+12]
  0001b	8b f1		 mov	 esi, ecx

; 438  : 	}
; 439  : 
; 440  : 	NewShopItemHelp::CreateSoldierItemInfo( pInfo, m_ShopItemInfo );

  0001d	89 b5 f4 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  00023	e8 00 00 00 00	 call	 ?GetSingleton@ioClassPrice@@SAAAV1@XZ ; ioClassPrice::GetSingleton
  00028	8b c8		 mov	 ecx, eax
  0002a	e8 00 00 00 00	 call	 ?IsActive@ioClassPrice@@QAE_NH@Z ; ioClassPrice::IsActive
  0002f	84 c0		 test	 al, al
  00031	0f 84 a1 01 00
	00		 je	 $LN10@SetSoldier
$LN9@SetSoldier:
  00037	57		 push	 edi

; 399  : 		return false;
; 400  : 		
; 401  : 	int iClassType = Product.m_Link.m_iValue1;
; 402  : 	const ioSetItemInfo *pInfo = g_SetItemInfoMgr.GetSetInfoByClass( iClassType );

  00038	ff 73 0c	 push	 DWORD PTR [ebx+12]
  0003b	e8 00 00 00 00	 call	 ?GetSingeton@ioSetItemInfoManager@@SAAAV1@XZ ; ioSetItemInfoManager::GetSingeton
  00040	8b c8		 mov	 ecx, eax
  00042	e8 00 00 00 00	 call	 ?GetSetInfoByClass@ioSetItemInfoManager@@QBEPBVioSetItemInfo@@H@Z ; ioSetItemInfoManager::GetSetInfoByClass
  00047	8b f8		 mov	 edi, eax
  00049	89 bd f0 fe ff
	ff		 mov	 DWORD PTR _pInfo$[ebp], edi

; 403  : 	if( !pInfo )

  0004f	85 ff		 test	 edi, edi

; 404  : 		return false;

  00051	74 30		 je	 SHORT $LN23@SetSoldier

; 405  : 
; 406  : 	if( pInfo->GetShopMarkType() == SHOP_MARK_TYPE_DATE && 0 < pInfo->GetLimitDate() )

  00053	83 7f 6c 0a	 cmp	 DWORD PTR [edi+108], 10	; 0000000aH
  00057	75 1d		 jne	 SHORT $LN6@SetSoldier
  00059	8b cf		 mov	 ecx, edi
  0005b	e8 00 00 00 00	 call	 ?GetLimitDate@ioSetItemInfo@@QBEKXZ ; ioSetItemInfo::GetLimitDate
  00060	85 c0		 test	 eax, eax
  00062	74 12		 je	 SHORT $LN6@SetSoldier

; 407  : 	{
; 408  : 		if( !NewShopItemHelp::IsAvailableDate( pInfo->GetLimitDate() ) )

  00064	8b cf		 mov	 ecx, edi
  00066	e8 00 00 00 00	 call	 ?GetLimitDate@ioSetItemInfo@@QBEKXZ ; ioSetItemInfo::GetLimitDate
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ?IsAvailableDate@NewShopItemHelp@@YA_NK@Z ; NewShopItemHelp::IsAvailableDate
  00071	59		 pop	 ecx
  00072	84 c0		 test	 al, al

; 409  : 			return false;

  00074	74 0d		 je	 SHORT $LN23@SetSoldier
$LN6@SetSoldier:

; 410  : 	}
; 411  : 
; 412  : 	if( pInfo->GetName().IsEmpty() )

  00076	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0007f	84 c0		 test	 al, al
  00081	74 07		 je	 SHORT $LN5@SetSoldier
$LN23@SetSoldier:

; 413  : 		return false;

  00083	32 c0		 xor	 al, al
  00085	e9 4d 01 00 00	 jmp	 $LN21@SetSoldier
$LN5@SetSoldier:

; 414  : 
; 415  : 	m_CurrADProductLink	= Product.m_Link;
; 416  : 	m_szName			= pInfo->GetName();

  0008a	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _pInfo$[ebp]
  00090	6a 06		 push	 6
  00092	8d be 2c 02 00
	00		 lea	 edi, DWORD PTR [esi+556]
  00098	59		 pop	 ecx
  00099	8b f3		 mov	 esi, ebx
  0009b	f3 a5		 rep movsd
  0009d	8b b5 f4 fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  000a3	83 c0 08	 add	 eax, 8
  000a6	50		 push	 eax
  000a7	8d 8e fc 01 00
	00		 lea	 ecx, DWORD PTR [esi+508]
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 417  : 		
; 418  : 	int iGold = g_ClassPrice.GetMortmainCharCash( Product.m_Link.m_iValue1 );	

  000b3	ff 73 0c	 push	 DWORD PTR [ebx+12]
  000b6	e8 00 00 00 00	 call	 ?GetSingleton@ioClassPrice@@SAAAV1@XZ ; ioClassPrice::GetSingleton
  000bb	8b c8		 mov	 ecx, eax
  000bd	e8 00 00 00 00	 call	 ?GetMortmainCharCash@ioClassPrice@@QAEHH@Z ; ioClassPrice::GetMortmainCharCash

; 419  : 	int iPeso = g_ClassPrice.GetClassBuyPeso( Product.m_Link.m_iValue1, g_ClassPrice.GetLimitDatePeso( Product.m_Link.m_iValue1 , 0 ) );

  000c2	33 ff		 xor	 edi, edi
  000c4	57		 push	 edi
  000c5	57		 push	 edi
  000c6	ff 73 0c	 push	 DWORD PTR [ebx+12]
  000c9	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _iGold$[ebp], eax
  000cf	e8 00 00 00 00	 call	 ?GetSingleton@ioClassPrice@@SAAAV1@XZ ; ioClassPrice::GetSingleton
  000d4	8b c8		 mov	 ecx, eax
  000d6	e8 00 00 00 00	 call	 ?GetLimitDatePeso@ioClassPrice@@QAEHHH@Z ; ioClassPrice::GetLimitDatePeso
  000db	50		 push	 eax
  000dc	ff 73 0c	 push	 DWORD PTR [ebx+12]
  000df	e8 00 00 00 00	 call	 ?GetSingleton@ioClassPrice@@SAAAV1@XZ ; ioClassPrice::GetSingleton
  000e4	8b c8		 mov	 ecx, eax
  000e6	e8 00 00 00 00	 call	 ?GetClassBuyPeso@ioClassPrice@@QAEHHH_N@Z ; ioClassPrice::GetClassBuyPeso

; 420  : 
; 421  : 	char szComma[MAX_PATH]="";

  000eb	68 03 01 00 00	 push	 259			; 00000103H
  000f0	89 85 ec fe ff
	ff		 mov	 DWORD PTR _iPeso$[ebp], eax
  000f6	8d 85 f9 fe ff
	ff		 lea	 eax, DWORD PTR _szComma$[ebp+1]
  000fc	57		 push	 edi
  000fd	50		 push	 eax
  000fe	c6 85 f8 fe ff
	ff 00		 mov	 BYTE PTR _szComma$[ebp], 0
  00105	e8 00 00 00 00	 call	 _memset
  0010a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 422  : 	if( 0 < iGold )
; 423  : 	{
; 424  : 		Help::ConvertNumToStrComma( iGold, szComma, sizeof( szComma ) );

  0010d	68 04 01 00 00	 push	 260			; 00000104H
  00112	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szComma$[ebp]
  00118	50		 push	 eax
  00119	39 bd f4 fe ff
	ff		 cmp	 DWORD PTR _iGold$[ebp], edi
  0011f	7e 13		 jle	 SHORT $LN4@SetSoldier
  00121	ff b5 f4 fe ff
	ff		 push	 DWORD PTR _iGold$[ebp]
  00127	e8 00 00 00 00	 call	 ?ConvertNumToStrComma@Help@@YAXHPADH@Z ; Help::ConvertNumToStrComma

; 425  : 		m_szGold = szComma;

  0012c	8d 8e 0c 02 00
	00		 lea	 ecx, DWORD PTR [esi+524]

; 426  : 	}
; 427  : 	else

  00132	eb 11		 jmp	 SHORT $LN22@SetSoldier
$LN4@SetSoldier:

; 428  : 	{
; 429  : 		Help::ConvertNumToStrComma( iPeso, szComma, sizeof( szComma ) );

  00134	ff b5 ec fe ff
	ff		 push	 DWORD PTR _iPeso$[ebp]
  0013a	e8 00 00 00 00	 call	 ?ConvertNumToStrComma@Help@@YAXHPADH@Z ; Help::ConvertNumToStrComma

; 430  : 		m_szPeso = szComma;

  0013f	8d 8e 1c 02 00
	00		 lea	 ecx, DWORD PTR [esi+540]
$LN22@SetSoldier:
  00145	83 c4 0c	 add	 esp, 12			; 0000000cH
  00148	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szComma$[ebp]
  0014e	50		 push	 eax
  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 431  : 	}
; 432  : 
; 433  : 	int eShopMarkType = pInfo->GetShopMarkType();

  00155	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _pInfo$[ebp]
  0015b	8b 40 6c	 mov	 eax, DWORD PTR [eax+108]
  0015e	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _eShopMarkType$[ebp], eax

; 434  : 	if( eShopMarkType == SHOP_MARK_TYPE_NONE )

  00164	3b c7		 cmp	 eax, edi
  00166	75 1e		 jne	 SHORT $LN20@SetSoldier

; 435  : 	{
; 436  : 		if( g_MyInfo.GetClassArray( Product.m_Link.m_iValue1 ) != -1 )

  00168	ff 73 0c	 push	 DWORD PTR [ebx+12]
  0016b	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00170	8b c8		 mov	 ecx, eax
  00172	e8 00 00 00 00	 call	 ?GetClassArray@ioMyInfo@@QAEHH@Z ; ioMyInfo::GetClassArray
  00177	83 f8 ff	 cmp	 eax, -1
  0017a	74 0a		 je	 SHORT $LN20@SetSoldier

; 437  : 			eShopMarkType = SHOP_MARK_TYPE_BOUGHT;

  0017c	c7 85 f4 fe ff
	ff 05 00 00 00	 mov	 DWORD PTR _eShopMarkType$[ebp], 5
$LN20@SetSoldier:

; 438  : 	}
; 439  : 
; 440  : 	NewShopItemHelp::CreateSoldierItemInfo( pInfo, m_ShopItemInfo );

  00186	8d 86 44 02 00
	00		 lea	 eax, DWORD PTR [esi+580]
  0018c	50		 push	 eax
  0018d	ff b5 f0 fe ff
	ff		 push	 DWORD PTR _pInfo$[ebp]
  00193	e8 00 00 00 00	 call	 ?CreateSoldierItemInfo@NewShopItemHelp@@YA_NPBVioSetItemInfo@@AAUtagNewShopItemInfo@@@Z ; NewShopItemHelp::CreateSoldierItemInfo
  00198	59		 pop	 ecx
  00199	59		 pop	 ecx

; 441  : 
; 442  : 	ParseButton( g_MyInfo.GetMySoldierIconName( Product.m_Link.m_iValue1 ), eShopMarkType, 0, pInfo->GetLimitDate(), false, g_UIImageRenderMgr.GetPowerUpGradeType( Product.m_Link.m_iValue1 ) );

  0019a	ff 73 0c	 push	 DWORD PTR [ebx+12]
  0019d	e8 00 00 00 00	 call	 ?GetSingleton@ioUIImageRenderManager@@SAAAV1@XZ ; ioUIImageRenderManager::GetSingleton
  001a2	8b c8		 mov	 ecx, eax
  001a4	e8 00 00 00 00	 call	 ?GetPowerUpGradeType@ioUIImageRenderManager@@QAEHH@Z ; ioUIImageRenderManager::GetPowerUpGradeType
  001a9	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _pInfo$[ebp]
  001af	50		 push	 eax
  001b0	57		 push	 edi
  001b1	e8 00 00 00 00	 call	 ?GetLimitDate@ioSetItemInfo@@QBEKXZ ; ioSetItemInfo::GetLimitDate
  001b6	50		 push	 eax
  001b7	57		 push	 edi
  001b8	ff b5 f4 fe ff
	ff		 push	 DWORD PTR _eShopMarkType$[ebp]
  001be	ff 73 0c	 push	 DWORD PTR [ebx+12]
  001c1	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  001c6	8b c8		 mov	 ecx, eax
  001c8	e8 00 00 00 00	 call	 ?GetMySoldierIconName@ioMyInfo@@QAEAAVioHashString@@H@Z ; ioMyInfo::GetMySoldierIconName
  001cd	50		 push	 eax
  001ce	8b ce		 mov	 ecx, esi
  001d0	e8 00 00 00 00	 call	 ?ParseButton@ioProductLinkButton@@IAEXABVioHashString@@HHH_NH@Z ; ioProductLinkButton::ParseButton

; 443  : 	return true;

  001d5	b0 01		 mov	 al, 1
$LN21@SetSoldier:
  001d7	5f		 pop	 edi
$LN10@SetSoldier:

; 444  : }

  001d8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001db	5e		 pop	 esi
  001dc	33 cd		 xor	 ecx, ebp
  001de	5b		 pop	 ebx
  001df	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e4	c9		 leave
  001e5	c2 04 00	 ret	 4
?SetSoldierInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z ENDP ; ioProductLinkButton::SetSoldierInfo
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?SetExtraItemInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z ; ioProductLinkButton::SetExtraItemInfo
EXTRN	?CreateExtraItemInfo@NewShopItemHelp@@YA_NPBVRandomMachineInfo@@AAUtagNewShopItemInfo@@@Z:PROC ; NewShopItemHelp::CreateExtraItemInfo
EXTRN	?GetNeedPeso@RandomMachineInfo@@QBEHH@Z:PROC	; RandomMachineInfo::GetNeedPeso
EXTRN	?GetRandomMachineInfo@ioExtraItemInfoManager@@QAEPAVRandomMachineInfo@@H@Z:PROC ; ioExtraItemInfoManager::GetRandomMachineInfo
EXTRN	?GetSingleton@ioExtraItemInfoManager@@SAAAV1@XZ:PROC ; ioExtraItemInfoManager::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?SetExtraItemInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z
_TEXT	SEGMENT
_nReinForce$ = -272					; size = 4
_this$GSCopy$ = -268					; size = 4
_iPeso$ = -268						; size = 4
_szComma$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_Product$ = 8						; size = 4
?SetExtraItemInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z PROC ; ioProductLinkButton::SetExtraItemInfo, COMDAT
; _this$ = ecx

; 447  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _Product$[ebp]
  00018	57		 push	 edi

; 448  : 	RandomMachineInfo *pInfo = g_ExtraItemInfoMgr.GetRandomMachineInfo( Product.m_Link.m_iValue1 );

  00019	ff 76 0c	 push	 DWORD PTR [esi+12]
  0001c	8b f9		 mov	 edi, ecx

; 481  : 	}
; 482  : 	
; 483  : 	NewShopItemHelp::CreateExtraItemInfo( pInfo, m_ShopItemInfo );

  0001e	89 bd f4 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00024	e8 00 00 00 00	 call	 ?GetSingleton@ioExtraItemInfoManager@@SAAAV1@XZ ; ioExtraItemInfoManager::GetSingleton
  00029	8b c8		 mov	 ecx, eax
  0002b	e8 00 00 00 00	 call	 ?GetRandomMachineInfo@ioExtraItemInfoManager@@QAEPAVRandomMachineInfo@@H@Z ; ioExtraItemInfoManager::GetRandomMachineInfo
  00030	8b d8		 mov	 ebx, eax
  00032	85 db		 test	 ebx, ebx
  00034	75 07		 jne	 SHORT $LN7@SetExtraIt
$LN35@SetExtraIt:

; 449  : 	if( !pInfo )
; 450  : 		return false;

  00036	32 c0		 xor	 al, al
  00038	e9 05 01 00 00	 jmp	 $LN8@SetExtraIt
$LN7@SetExtraIt:

; 451  : 
; 452  : 	if( !pInfo->IsActive() )

  0003d	80 7b 71 00	 cmp	 BYTE PTR [ebx+113], 0

; 453  : 		return false;

  00041	74 f3		 je	 SHORT $LN35@SetExtraIt

; 454  : 
; 455  : 	if( pInfo->GetShopMarkType() == SHOP_MARK_TYPE_DATE && 0 < pInfo->GetLimitDate() )

  00043	83 7b 6c 0a	 cmp	 DWORD PTR [ebx+108], 10	; 0000000aH
  00047	75 12		 jne	 SHORT $LN4@SetExtraIt
  00049	8b 43 78	 mov	 eax, DWORD PTR [ebx+120]
  0004c	85 c0		 test	 eax, eax
  0004e	7e 0b		 jle	 SHORT $LN4@SetExtraIt

; 456  : 	{
; 457  : 		if( !NewShopItemHelp::IsAvailableDate( pInfo->GetLimitDate() ) )

  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?IsAvailableDate@NewShopItemHelp@@YA_NK@Z ; NewShopItemHelp::IsAvailableDate
  00056	59		 pop	 ecx
  00057	84 c0		 test	 al, al

; 458  : 			return false;

  00059	74 db		 je	 SHORT $LN35@SetExtraIt
$LN4@SetExtraIt:

; 459  : 	}
; 460  : 
; 461  : 	if( pInfo->GetName().IsEmpty() )

  0005b	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00064	84 c0		 test	 al, al

; 462  : 		return false;

  00066	75 ce		 jne	 SHORT $LN35@SetExtraIt

; 463  : 
; 464  : 	m_CurrADProductLink = Product.m_Link;

  00068	6a 06		 push	 6
  0006a	59		 pop	 ecx
  0006b	81 c7 2c 02 00
	00		 add	 edi, 556		; 0000022cH
  00071	f3 a5		 rep movsd

; 465  : 
; 466  : 	m_szName		= pInfo->GetName();

  00073	8b b5 f4 fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00079	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  0007c	50		 push	 eax
  0007d	8d 8e fc 01 00
	00		 lea	 ecx, DWORD PTR [esi+508]
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 467  : 	int iGold		= pInfo->GetNeedCash();

  00089	8b 7b 50	 mov	 edi, DWORD PTR [ebx+80]

; 468  : 	int iPeso		= pInfo->GetNeedPeso( 0 );

  0008c	6a 00		 push	 0
  0008e	8b cb		 mov	 ecx, ebx
  00090	e8 00 00 00 00	 call	 ?GetNeedPeso@RandomMachineInfo@@QBEHH@Z ; RandomMachineInfo::GetNeedPeso
  00095	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _iPeso$[ebp], eax

; 469  : 	int nReinForce	= ( pInfo->GetGroup() % PRESENT_EXTRAITEM_DIVISION_1 ) / PRESENT_EXTRAITEM_DIVISION_2;

  0009b	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  0009e	99		 cdq
  0009f	b9 00 e1 f5 05	 mov	 ecx, 100000000		; 05f5e100H
  000a4	f7 f9		 idiv	 ecx
  000a6	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H

; 470  : 	
; 471  : 	char szComma[MAX_PATH]="";

  000ab	68 03 01 00 00	 push	 259			; 00000103H
  000b0	6a 00		 push	 0
  000b2	c6 85 f8 fe ff
	ff 00		 mov	 BYTE PTR _szComma$[ebp], 0
  000b9	8b c2		 mov	 eax, edx
  000bb	99		 cdq
  000bc	f7 f9		 idiv	 ecx
  000be	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _nReinForce$[ebp], eax
  000c4	8d 85 f9 fe ff
	ff		 lea	 eax, DWORD PTR _szComma$[ebp+1]
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 _memset
  000d0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 472  : 	if( 0 < iGold )
; 473  : 	{
; 474  : 		Help::ConvertNumToStrComma( iGold, szComma, sizeof( szComma ) );

  000d3	68 04 01 00 00	 push	 260			; 00000104H
  000d8	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szComma$[ebp]
  000de	50		 push	 eax
  000df	85 ff		 test	 edi, edi
  000e1	7e 0e		 jle	 SHORT $LN2@SetExtraIt
  000e3	57		 push	 edi
  000e4	e8 00 00 00 00	 call	 ?ConvertNumToStrComma@Help@@YAXHPADH@Z ; Help::ConvertNumToStrComma

; 475  : 		m_szGold = szComma;

  000e9	8d 8e 0c 02 00
	00		 lea	 ecx, DWORD PTR [esi+524]

; 476  : 	}
; 477  : 	else

  000ef	eb 11		 jmp	 SHORT $LN34@SetExtraIt
$LN2@SetExtraIt:

; 478  : 	{
; 479  : 		Help::ConvertNumToStrComma( iPeso, szComma, sizeof( szComma ) );

  000f1	ff b5 f4 fe ff
	ff		 push	 DWORD PTR _iPeso$[ebp]
  000f7	e8 00 00 00 00	 call	 ?ConvertNumToStrComma@Help@@YAXHPADH@Z ; Help::ConvertNumToStrComma

; 480  : 		m_szPeso = szComma;

  000fc	8d 8e 1c 02 00
	00		 lea	 ecx, DWORD PTR [esi+540]
$LN34@SetExtraIt:
  00102	83 c4 0c	 add	 esp, 12			; 0000000cH
  00105	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szComma$[ebp]
  0010b	50		 push	 eax
  0010c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 481  : 	}
; 482  : 	
; 483  : 	NewShopItemHelp::CreateExtraItemInfo( pInfo, m_ShopItemInfo );

  00112	8d 86 44 02 00
	00		 lea	 eax, DWORD PTR [esi+580]
  00118	50		 push	 eax
  00119	53		 push	 ebx
  0011a	e8 00 00 00 00	 call	 ?CreateExtraItemInfo@NewShopItemHelp@@YA_NPBVRandomMachineInfo@@AAUtagNewShopItemInfo@@@Z ; NewShopItemHelp::CreateExtraItemInfo
  0011f	59		 pop	 ecx
  00120	59		 pop	 ecx

; 484  : 
; 485  : 	ParseButton( pInfo->GetIconName(), pInfo->GetShopMarkType(), nReinForce, pInfo->GetLimitDate(), false, pInfo->GetGradeType() );

  00121	ff b3 8c 00 00
	00		 push	 DWORD PTR [ebx+140]
  00127	83 c3 18	 add	 ebx, 24			; 00000018H
  0012a	6a 00		 push	 0
  0012c	ff 73 60	 push	 DWORD PTR [ebx+96]
  0012f	8b ce		 mov	 ecx, esi
  00131	ff b5 f0 fe ff
	ff		 push	 DWORD PTR _nReinForce$[ebp]
  00137	ff 73 54	 push	 DWORD PTR [ebx+84]
  0013a	53		 push	 ebx
  0013b	e8 00 00 00 00	 call	 ?ParseButton@ioProductLinkButton@@IAEXABVioHashString@@HHH_NH@Z ; ioProductLinkButton::ParseButton

; 486  : 
; 487  : 	return true;

  00140	b0 01		 mov	 al, 1
$LN8@SetExtraIt:

; 488  : }

  00142	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	33 cd		 xor	 ecx, ebp
  00149	5b		 pop	 ebx
  0014a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014f	c9		 leave
  00150	c2 04 00	 ret	 4
?SetExtraItemInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z ENDP ; ioProductLinkButton::SetExtraItemInfo
_TEXT	ENDS
PUBLIC	_Product$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?SetDecoInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z ; ioProductLinkButton::SetDecoInfo
EXTRN	?CreateDecoItemInfo@NewShopItemHelp@@YA_NPBUtagDecoData@@HHAAUtagNewShopItemInfo@@@Z:PROC ; NewShopItemHelp::CreateDecoItemInfo
EXTRN	?GetDecoDataPtr@ioDecorationPrice@@QAEPBUtagDecoData@@HHH@Z:PROC ; ioDecorationPrice::GetDecoDataPtr
EXTRN	?GetSingleton@ioDecorationPrice@@SAAAV1@XZ:PROC	; ioDecorationPrice::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?SetDecoInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z
_TEXT	SEGMENT
_Product$GSCopy$ = -272					; size = 4
_this$GSCopy$ = -268					; size = 4
_iPeso$ = -268						; size = 4
_szComma$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_Product$ = 8						; size = 4
?SetDecoInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z PROC ; ioProductLinkButton::SetDecoInfo, COMDAT
; _this$ = ecx

; 491  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _Product$[ebp]

; 492  : 	const DecoData* pInfo = g_DecorationPrice.GetDecoDataPtr( Product.m_Link.m_iValue1, Product.m_Link.m_iValue2, Product.m_Link.m_iValue3 - 1 );

  00018	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001b	57		 push	 edi
  0001c	48		 dec	 eax
  0001d	50		 push	 eax
  0001e	ff 76 10	 push	 DWORD PTR [esi+16]
  00021	8b f9		 mov	 edi, ecx
  00023	ff 76 0c	 push	 DWORD PTR [esi+12]

; 524  : 	}
; 525  : 
; 526  : 	NewShopItemHelp::CreateDecoItemInfo( pInfo,Product.m_Link.m_iValue1, Product.m_Link.m_iValue2, m_ShopItemInfo );

  00026	89 bd f4 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  0002c	89 b5 f0 fe ff
	ff		 mov	 DWORD PTR _Product$GSCopy$[ebp], esi
  00032	e8 00 00 00 00	 call	 ?GetSingleton@ioDecorationPrice@@SAAAV1@XZ ; ioDecorationPrice::GetSingleton
  00037	8b c8		 mov	 ecx, eax
  00039	e8 00 00 00 00	 call	 ?GetDecoDataPtr@ioDecorationPrice@@QAEPBUtagDecoData@@HHH@Z ; ioDecorationPrice::GetDecoDataPtr
  0003e	8b d8		 mov	 ebx, eax
  00040	85 db		 test	 ebx, ebx
  00042	75 07		 jne	 SHORT $LN7@SetDecoInf
$LN11@SetDecoInf:

; 493  : 	if( !pInfo )
; 494  : 		return false;

  00044	32 c0		 xor	 al, al
  00046	e9 e4 00 00 00	 jmp	 $LN8@SetDecoInf
$LN7@SetDecoInf:

; 495  : 
; 496  : 	if( !pInfo->m_bActive )

  0004b	80 7b 45 00	 cmp	 BYTE PTR [ebx+69], 0

; 497  : 		return false;

  0004f	74 f3		 je	 SHORT $LN11@SetDecoInf

; 498  : 
; 499  : 	if( pInfo->m_iShopMarkType == SHOP_MARK_TYPE_DATE && 0 < pInfo->m_iLimitDate )

  00051	83 7b 5c 0a	 cmp	 DWORD PTR [ebx+92], 10	; 0000000aH
  00055	75 12		 jne	 SHORT $LN4@SetDecoInf
  00057	8b 43 60	 mov	 eax, DWORD PTR [ebx+96]
  0005a	85 c0		 test	 eax, eax
  0005c	7e 0b		 jle	 SHORT $LN4@SetDecoInf

; 500  : 	{
; 501  : 		if( !NewShopItemHelp::IsAvailableDate( pInfo->m_iLimitDate ) )

  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ?IsAvailableDate@NewShopItemHelp@@YA_NK@Z ; NewShopItemHelp::IsAvailableDate
  00064	59		 pop	 ecx
  00065	84 c0		 test	 al, al

; 502  : 			return false;

  00067	74 db		 je	 SHORT $LN11@SetDecoInf
$LN4@SetDecoInf:

; 503  : 	}
; 504  : 	
; 505  : 	if( pInfo->m_szName.IsEmpty() )

  00069	8b cb		 mov	 ecx, ebx
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00071	84 c0		 test	 al, al

; 506  : 		return false;

  00073	75 cf		 jne	 SHORT $LN11@SetDecoInf

; 507  : 
; 508  : 	m_CurrADProductLink = Product.m_Link;

  00075	6a 06		 push	 6
  00077	59		 pop	 ecx
  00078	81 c7 2c 02 00
	00		 add	 edi, 556		; 0000022cH
  0007e	f3 a5		 rep movsd

; 509  : 
; 510  : 	m_szName	= pInfo->m_szName;

  00080	8b b5 f4 fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00086	53		 push	 ebx
  00087	8d 8e fc 01 00
	00		 lea	 ecx, DWORD PTR [esi+508]
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 511  : 	int iGold	= pInfo->m_iCash;
; 512  : 	int iPeso	= pInfo->m_iPeso;

  00093	8b 43 34	 mov	 eax, DWORD PTR [ebx+52]
  00096	8b 7b 38	 mov	 edi, DWORD PTR [ebx+56]

; 513  : 	
; 514  : 	char szComma[MAX_PATH]="";

  00099	68 03 01 00 00	 push	 259			; 00000103H
  0009e	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _iPeso$[ebp], eax
  000a4	8d 85 f9 fe ff
	ff		 lea	 eax, DWORD PTR _szComma$[ebp+1]
  000aa	6a 00		 push	 0
  000ac	50		 push	 eax
  000ad	c6 85 f8 fe ff
	ff 00		 mov	 BYTE PTR _szComma$[ebp], 0
  000b4	e8 00 00 00 00	 call	 _memset
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 515  : 	if( 0 < iGold )
; 516  : 	{
; 517  : 		Help::ConvertNumToStrComma( iGold, szComma, sizeof( szComma ) );

  000bc	68 04 01 00 00	 push	 260			; 00000104H
  000c1	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szComma$[ebp]
  000c7	50		 push	 eax
  000c8	85 ff		 test	 edi, edi
  000ca	7e 0e		 jle	 SHORT $LN2@SetDecoInf
  000cc	57		 push	 edi
  000cd	e8 00 00 00 00	 call	 ?ConvertNumToStrComma@Help@@YAXHPADH@Z ; Help::ConvertNumToStrComma

; 518  : 		m_szGold = szComma;

  000d2	8d 8e 0c 02 00
	00		 lea	 ecx, DWORD PTR [esi+524]

; 519  : 	}
; 520  : 	else

  000d8	eb 11		 jmp	 SHORT $LN10@SetDecoInf
$LN2@SetDecoInf:

; 521  : 	{
; 522  : 		Help::ConvertNumToStrComma( iPeso, szComma, sizeof( szComma ) );

  000da	ff b5 f4 fe ff
	ff		 push	 DWORD PTR _iPeso$[ebp]
  000e0	e8 00 00 00 00	 call	 ?ConvertNumToStrComma@Help@@YAXHPADH@Z ; Help::ConvertNumToStrComma

; 523  : 		m_szPeso = szComma;

  000e5	8d 8e 1c 02 00
	00		 lea	 ecx, DWORD PTR [esi+540]
$LN10@SetDecoInf:
  000eb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ee	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szComma$[ebp]
  000f4	50		 push	 eax
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 524  : 	}
; 525  : 
; 526  : 	NewShopItemHelp::CreateDecoItemInfo( pInfo,Product.m_Link.m_iValue1, Product.m_Link.m_iValue2, m_ShopItemInfo );

  000fb	8d 86 44 02 00
	00		 lea	 eax, DWORD PTR [esi+580]
  00101	50		 push	 eax
  00102	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _Product$GSCopy$[ebp]
  00108	ff 70 10	 push	 DWORD PTR [eax+16]
  0010b	ff 70 0c	 push	 DWORD PTR [eax+12]
  0010e	53		 push	 ebx
  0010f	e8 00 00 00 00	 call	 ?CreateDecoItemInfo@NewShopItemHelp@@YA_NPBUtagDecoData@@HHAAUtagNewShopItemInfo@@@Z ; NewShopItemHelp::CreateDecoItemInfo
  00114	83 c4 10	 add	 esp, 16			; 00000010H

; 527  : 
; 528  : 	ParseButton( pInfo->m_szIcon, pInfo->m_iShopMarkType, 0, pInfo->m_iLimitDate, false, 0 );

  00117	33 c0		 xor	 eax, eax
  00119	50		 push	 eax
  0011a	50		 push	 eax
  0011b	ff 73 60	 push	 DWORD PTR [ebx+96]
  0011e	83 c3 10	 add	 ebx, 16			; 00000010H
  00121	50		 push	 eax
  00122	ff 73 4c	 push	 DWORD PTR [ebx+76]
  00125	8b ce		 mov	 ecx, esi
  00127	53		 push	 ebx
  00128	e8 00 00 00 00	 call	 ?ParseButton@ioProductLinkButton@@IAEXABVioHashString@@HHH_NH@Z ; ioProductLinkButton::ParseButton

; 529  : 
; 530  : 	return true;

  0012d	b0 01		 mov	 al, 1
$LN8@SetDecoInf:

; 531  : }

  0012f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00132	5f		 pop	 edi
  00133	5e		 pop	 esi
  00134	33 cd		 xor	 ecx, ebp
  00136	5b		 pop	 ebx
  00137	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013c	c9		 leave
  0013d	c2 04 00	 ret	 4
?SetDecoInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z ENDP ; ioProductLinkButton::SetDecoInfo
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	?SetEtcInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z ; ioProductLinkButton::SetEtcInfo
EXTRN	?CreateEtcItemInfo@NewShopItemHelp@@YA_NPAVioEtcItem@@HAAUtagNewShopItemInfo@@@Z:PROC ; NewShopItemHelp::CreateEtcItemInfo
EXTRN	?GetPeso@ioEtcItem@@QBEHH@Z:PROC		; ioEtcItem::GetPeso
EXTRN	?GetCash@ioEtcItem@@QBEHH@Z:PROC		; ioEtcItem::GetCash
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	?GetShopName@ioEtcItem@@QAE?AVioHashString@@H@Z:PROC ; ioEtcItem::GetShopName
EXTRN	?GetLimitDate@ioEtcItem@@QBEHH@Z:PROC		; ioEtcItem::GetLimitDate
EXTRN	?GetShopMarkType@ioEtcItem@@QBEHH@Z:PROC	; ioEtcItem::GetShopMarkType
EXTRN	?IsActive@ioEtcItem@@QBE_NH@Z:PROC		; ioEtcItem::IsActive
EXTRN	?FindEtcItem@ioEtcItemManager@@QAEPAVioEtcItem@@K@Z:PROC ; ioEtcItemManager::FindEtcItem
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioetcitem.h
xdata$x	SEGMENT
__unwindtable$?SetEtcInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetEtcInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SetEtcInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z$1
__ehfuncinfo$?SetEtcInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetEtcInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\newshopstartwnd.cpp
xdata$x	ENDS
;	COMDAT ?SetEtcInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z
_TEXT	SEGMENT
$T513716 = -324						; size = 16
$T513717 = -308						; size = 16
_iPeso$ = -292						; size = 4
_iArray$ = -288						; size = 4
_this$GSCopy$ = -284					; size = 4
_iGold$ = -284						; size = 4
$T513715 = -277						; size = 1
_szComma$ = -276					; size = 260
__$EHRec$ = -12						; size = 12
_Product$ = 8						; size = 4
?SetEtcInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z PROC ; ioProductLinkButton::SetEtcInfo, COMDAT
; _this$ = ecx

; 534  : {

  00000	68 38 01 00 00	 push	 312			; 00000138H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?SetEtcInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b 75 08	 mov	 esi, DWORD PTR _Product$[ebp]

; 535  : 	ioEtcItem *pEtcItem = g_EtcItemMgr.FindEtcItem( Product.m_Link.m_iValue1 );

  00012	ff 76 0c	 push	 DWORD PTR [esi+12]
  00015	89 8d e4 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0001b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_Singleton@?$Singleton@VioEtcItemManager@@@@1PAVioEtcItemManager@@A ; Singleton<ioEtcItemManager>::ms_Singleton
  00021	e8 00 00 00 00	 call	 ?FindEtcItem@ioEtcItemManager@@QAEPAVioEtcItem@@K@Z ; ioEtcItemManager::FindEtcItem
  00026	8b d8		 mov	 ebx, eax

; 536  : 	if( !pEtcItem )

  00028	85 db		 test	 ebx, ebx
  0002a	75 07		 jne	 SHORT $LN7@SetEtcInfo
$LN20@SetEtcInfo:

; 537  : 		return false;

  0002c	32 c0		 xor	 al, al
  0002e	e9 9b 01 00 00	 jmp	 $LN8@SetEtcInfo
$LN7@SetEtcInfo:

; 538  : 
; 539  : 	int iArray = Product.m_Link.m_iValue2 - 1;

  00033	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  00036	4f		 dec	 edi

; 540  : 	if( !pEtcItem->IsActive( iArray ) )

  00037	57		 push	 edi
  00038	8b cb		 mov	 ecx, ebx
  0003a	89 bd e0 fe ff
	ff		 mov	 DWORD PTR _iArray$[ebp], edi
  00040	e8 00 00 00 00	 call	 ?IsActive@ioEtcItem@@QBE_NH@Z ; ioEtcItem::IsActive
  00045	84 c0		 test	 al, al

; 541  : 		return false;

  00047	74 e3		 je	 SHORT $LN20@SetEtcInfo

; 542  : 
; 543  : 	if( pEtcItem->GetShopMarkType( iArray ) == SHOP_MARK_TYPE_DATE && 0 < pEtcItem->GetLimitDate( iArray ) )

  00049	57		 push	 edi
  0004a	8b cb		 mov	 ecx, ebx
  0004c	e8 00 00 00 00	 call	 ?GetShopMarkType@ioEtcItem@@QBEHH@Z ; ioEtcItem::GetShopMarkType
  00051	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00054	75 1f		 jne	 SHORT $LN4@SetEtcInfo
  00056	57		 push	 edi
  00057	8b cb		 mov	 ecx, ebx
  00059	e8 00 00 00 00	 call	 ?GetLimitDate@ioEtcItem@@QBEHH@Z ; ioEtcItem::GetLimitDate
  0005e	85 c0		 test	 eax, eax
  00060	7e 13		 jle	 SHORT $LN4@SetEtcInfo

; 544  : 	{
; 545  : 		if( !NewShopItemHelp::IsAvailableDate( pEtcItem->GetLimitDate( iArray ) ) )

  00062	57		 push	 edi
  00063	8b cb		 mov	 ecx, ebx
  00065	e8 00 00 00 00	 call	 ?GetLimitDate@ioEtcItem@@QBEHH@Z ; ioEtcItem::GetLimitDate
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?IsAvailableDate@NewShopItemHelp@@YA_NK@Z ; NewShopItemHelp::IsAvailableDate
  00070	59		 pop	 ecx
  00071	84 c0		 test	 al, al

; 546  : 			return false;

  00073	74 b7		 je	 SHORT $LN20@SetEtcInfo
$LN4@SetEtcInfo:

; 547  : 	}
; 548  : 
; 549  : 	if( pEtcItem->GetShopName( iArray ).IsEmpty() )

  00075	57		 push	 edi
  00076	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR $T513716[ebp]
  0007c	50		 push	 eax
  0007d	8b cb		 mov	 ecx, ebx
  0007f	e8 00 00 00 00	 call	 ?GetShopName@ioEtcItem@@QAE?AVioHashString@@H@Z ; ioEtcItem::GetShopName
  00084	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00088	8b c8		 mov	 ecx, eax
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00090	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00094	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR $T513716[ebp]
  0009a	88 85 eb fe ff
	ff		 mov	 BYTE PTR $T513715[ebp], al
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  000a6	80 bd eb fe ff
	ff 00		 cmp	 BYTE PTR $T513715[ebp], 0

; 550  : 		return false;

  000ad	0f 85 79 ff ff
	ff		 jne	 $LN20@SetEtcInfo

; 551  : 
; 552  : 	m_CurrADProductLink = Product.m_Link;

  000b3	8b bd e4 fe ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  000b9	6a 06		 push	 6
  000bb	59		 pop	 ecx

; 553  : 
; 554  : 	m_szName	= pEtcItem->GetShopName( iArray );

  000bc	ff b5 e0 fe ff
	ff		 push	 DWORD PTR _iArray$[ebp]
  000c2	81 c7 2c 02 00
	00		 add	 edi, 556		; 0000022cH
  000c8	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR $T513717[ebp]
  000ce	f3 a5		 rep movsd
  000d0	50		 push	 eax
  000d1	8b cb		 mov	 ecx, ebx
  000d3	e8 00 00 00 00	 call	 ?GetShopName@ioEtcItem@@QAE?AVioHashString@@H@Z ; ioEtcItem::GetShopName
  000d8	8b b5 e4 fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  000de	50		 push	 eax
  000df	8d 8e fc 01 00
	00		 lea	 ecx, DWORD PTR [esi+508]
  000e5	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  000f2	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000f6	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR $T513717[ebp]
  000fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 555  : 	int iGold	= pEtcItem->GetCash( iArray );

  00102	ff b5 e0 fe ff
	ff		 push	 DWORD PTR _iArray$[ebp]
  00108	8b cb		 mov	 ecx, ebx
  0010a	e8 00 00 00 00	 call	 ?GetCash@ioEtcItem@@QBEHH@Z ; ioEtcItem::GetCash

; 556  : 	int iPeso	= pEtcItem->GetPeso( 0 );

  0010f	33 ff		 xor	 edi, edi
  00111	57		 push	 edi
  00112	8b cb		 mov	 ecx, ebx
  00114	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _iGold$[ebp], eax
  0011a	e8 00 00 00 00	 call	 ?GetPeso@ioEtcItem@@QBEHH@Z ; ioEtcItem::GetPeso

; 557  : 
; 558  : 	char szComma[MAX_PATH]="";

  0011f	68 03 01 00 00	 push	 259			; 00000103H
  00124	89 85 dc fe ff
	ff		 mov	 DWORD PTR _iPeso$[ebp], eax
  0012a	8d 85 ed fe ff
	ff		 lea	 eax, DWORD PTR _szComma$[ebp+1]
  00130	57		 push	 edi
  00131	50		 push	 eax
  00132	c6 85 ec fe ff
	ff 00		 mov	 BYTE PTR _szComma$[ebp], 0
  00139	e8 00 00 00 00	 call	 _memset
  0013e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 559  : 	if( 0 < iGold )
; 560  : 	{
; 561  : 		Help::ConvertNumToStrComma( iGold, szComma, sizeof( szComma ) );

  00141	68 04 01 00 00	 push	 260			; 00000104H
  00146	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szComma$[ebp]
  0014c	50		 push	 eax
  0014d	39 bd e4 fe ff
	ff		 cmp	 DWORD PTR _iGold$[ebp], edi
  00153	7e 13		 jle	 SHORT $LN2@SetEtcInfo
  00155	ff b5 e4 fe ff
	ff		 push	 DWORD PTR _iGold$[ebp]
  0015b	e8 00 00 00 00	 call	 ?ConvertNumToStrComma@Help@@YAXHPADH@Z ; Help::ConvertNumToStrComma

; 562  : 		m_szGold = szComma;

  00160	8d 8e 0c 02 00
	00		 lea	 ecx, DWORD PTR [esi+524]

; 563  : 	}
; 564  : 	else

  00166	eb 11		 jmp	 SHORT $LN19@SetEtcInfo
$LN2@SetEtcInfo:

; 565  : 	{
; 566  : 		Help::ConvertNumToStrComma( iPeso, szComma, sizeof( szComma ) );

  00168	ff b5 dc fe ff
	ff		 push	 DWORD PTR _iPeso$[ebp]
  0016e	e8 00 00 00 00	 call	 ?ConvertNumToStrComma@Help@@YAXHPADH@Z ; Help::ConvertNumToStrComma

; 567  : 		m_szPeso = szComma;

  00173	8d 8e 1c 02 00
	00		 lea	 ecx, DWORD PTR [esi+540]
$LN19@SetEtcInfo:
  00179	83 c4 0c	 add	 esp, 12			; 0000000cH
  0017c	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szComma$[ebp]
  00182	50		 push	 eax
  00183	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 568  : 	}
; 569  : 
; 570  : 	NewShopItemHelp::CreateEtcItemInfo( pEtcItem, 0, m_ShopItemInfo );

  00189	8d 86 44 02 00
	00		 lea	 eax, DWORD PTR [esi+580]
  0018f	50		 push	 eax
  00190	57		 push	 edi
  00191	53		 push	 ebx
  00192	e8 00 00 00 00	 call	 ?CreateEtcItemInfo@NewShopItemHelp@@YA_NPAVioEtcItem@@HAAUtagNewShopItemInfo@@@Z ; NewShopItemHelp::CreateEtcItemInfo
  00197	83 c4 0c	 add	 esp, 12			; 0000000cH

; 571  : 	ParseButton( pEtcItem->GetIconName(), pEtcItem->GetShopMarkType( iArray ), 0, pEtcItem->GetLimitDate( iArray ), false, pEtcItem->GetGradeType() );

  0019a	ff b3 84 01 00
	00		 push	 DWORD PTR [ebx+388]
  001a0	8b cb		 mov	 ecx, ebx
  001a2	57		 push	 edi
  001a3	ff b5 e0 fe ff
	ff		 push	 DWORD PTR _iArray$[ebp]
  001a9	e8 00 00 00 00	 call	 ?GetLimitDate@ioEtcItem@@QBEHH@Z ; ioEtcItem::GetLimitDate
  001ae	50		 push	 eax
  001af	57		 push	 edi
  001b0	ff b5 e0 fe ff
	ff		 push	 DWORD PTR _iArray$[ebp]
  001b6	8b cb		 mov	 ecx, ebx
  001b8	e8 00 00 00 00	 call	 ?GetShopMarkType@ioEtcItem@@QBEHH@Z ; ioEtcItem::GetShopMarkType
  001bd	50		 push	 eax
  001be	81 c3 60 01 00
	00		 add	 ebx, 352		; 00000160H
  001c4	53		 push	 ebx
  001c5	8b ce		 mov	 ecx, esi
  001c7	e8 00 00 00 00	 call	 ?ParseButton@ioProductLinkButton@@IAEXABVioHashString@@HHH_NH@Z ; ioProductLinkButton::ParseButton

; 572  : 
; 573  : 	return true;

  001cc	b0 01		 mov	 al, 1
$LN8@SetEtcInfo:

; 574  : }

  001ce	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001d3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetEtcInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z$0:
  00000	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR $T513716[ebp]
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?SetEtcInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z$1:
  0000c	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR $T513717[ebp]
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?SetEtcInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 8a b8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-328]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetEtcInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetEtcInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z ENDP ; ioProductLinkButton::SetEtcInfo
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?SetCostumeInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z ; ioProductLinkButton::SetCostumeInfo
EXTRN	?CreateCostumeInfo@NewShopItemHelp@@YA_NPAVCostumeShopInfo@@AAUtagNewShopItemInfo@@@Z:PROC ; NewShopItemHelp::CreateCostumeInfo
EXTRN	?GetNeedPeso@CostumeShopInfo@@QBEHH@Z:PROC	; CostumeShopInfo::GetNeedPeso
EXTRN	?GetCostumeMachineInfo@ioCostumeShopInfoManager@@QAEPAVCostumeShopInfo@@H@Z:PROC ; ioCostumeShopInfoManager::GetCostumeMachineInfo
EXTRN	?GetSingleton@ioCostumeShopInfoManager@@SAAAV1@XZ:PROC ; ioCostumeShopInfoManager::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?SetCostumeInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z
_TEXT	SEGMENT
_iPeso$ = -272						; size = 4
_this$GSCopy$ = -268					; size = 4
_iGold$ = -268						; size = 4
_szComma$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_Product$ = 8						; size = 4
?SetCostumeInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z PROC ; ioProductLinkButton::SetCostumeInfo, COMDAT
; _this$ = ecx

; 577  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _Product$[ebp]
  00018	57		 push	 edi

; 578  : 	CostumeShopInfo* pCsotume = g_CostumeShopInfoMgr.GetCostumeMachineInfo( Product.m_Link.m_iValue1 );

  00019	ff 76 0c	 push	 DWORD PTR [esi+12]
  0001c	8b f9		 mov	 edi, ecx

; 607  : 	}
; 608  : 
; 609  : 	NewShopItemHelp::CreateCostumeInfo( pCsotume, m_ShopItemInfo );

  0001e	89 bd f4 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00024	e8 00 00 00 00	 call	 ?GetSingleton@ioCostumeShopInfoManager@@SAAAV1@XZ ; ioCostumeShopInfoManager::GetSingleton
  00029	8b c8		 mov	 ecx, eax
  0002b	e8 00 00 00 00	 call	 ?GetCostumeMachineInfo@ioCostumeShopInfoManager@@QAEPAVCostumeShopInfo@@H@Z ; ioCostumeShopInfoManager::GetCostumeMachineInfo
  00030	8b d8		 mov	 ebx, eax
  00032	85 db		 test	 ebx, ebx
  00034	75 07		 jne	 SHORT $LN6@SetCostume
$LN24@SetCostume:

; 579  : 	if( !pCsotume )
; 580  : 		return false;

  00036	32 c0		 xor	 al, al
  00038	e9 e7 00 00 00	 jmp	 $LN7@SetCostume
$LN6@SetCostume:

; 581  : 
; 582  : 	if( !pCsotume->IsActive() )

  0003d	80 7b 3d 00	 cmp	 BYTE PTR [ebx+61], 0

; 583  : 		return false;

  00041	74 f3		 je	 SHORT $LN24@SetCostume

; 584  : 	
; 585  : 	if( pCsotume->GetName().IsEmpty() )

  00043	8d 4b 40	 lea	 ecx, DWORD PTR [ebx+64]
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0004c	84 c0		 test	 al, al

; 586  : 		return false;

  0004e	75 e6		 jne	 SHORT $LN24@SetCostume

; 587  : 
; 588  : 	m_CurrADProductLink = Product.m_Link;

  00050	6a 06		 push	 6
  00052	59		 pop	 ecx
  00053	81 c7 2c 02 00
	00		 add	 edi, 556		; 0000022cH
  00059	f3 a5		 rep movsd

; 589  : 
; 590  : 	m_szName	= pCsotume->GetName();

  0005b	8b b5 f4 fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00061	8d 43 40	 lea	 eax, DWORD PTR [ebx+64]
  00064	50		 push	 eax
  00065	8d 8e fc 01 00
	00		 lea	 ecx, DWORD PTR [esi+508]
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 591  : 	int iGold	= pCsotume->GetNeedCash();

  00071	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]

; 592  : 	int	iPeso	= pCsotume->GetNeedPeso( 0 );

  00074	6a 00		 push	 0
  00076	8b cb		 mov	 ecx, ebx
  00078	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _iGold$[ebp], eax
  0007e	e8 00 00 00 00	 call	 ?GetNeedPeso@CostumeShopInfo@@QBEHH@Z ; CostumeShopInfo::GetNeedPeso

; 593  : 
; 594  : 	if( m_szName.IsEmpty() )

  00083	8d 8e fc 01 00
	00		 lea	 ecx, DWORD PTR [esi+508]
  00089	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _iPeso$[ebp], eax
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00095	84 c0		 test	 al, al

; 595  : 		return false;

  00097	75 9d		 jne	 SHORT $LN24@SetCostume

; 596  : 		
; 597  : 	char szComma[MAX_PATH]="";

  00099	68 03 01 00 00	 push	 259			; 00000103H
  0009e	88 85 f8 fe ff
	ff		 mov	 BYTE PTR _szComma$[ebp], al
  000a4	33 ff		 xor	 edi, edi
  000a6	8d 85 f9 fe ff
	ff		 lea	 eax, DWORD PTR _szComma$[ebp+1]
  000ac	57		 push	 edi
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 _memset
  000b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 598  : 	if( 0 < iGold )
; 599  : 	{
; 600  : 		Help::ConvertNumToStrComma( iGold, szComma, sizeof( szComma ) );

  000b6	68 04 01 00 00	 push	 260			; 00000104H
  000bb	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szComma$[ebp]
  000c1	50		 push	 eax
  000c2	39 bd f4 fe ff
	ff		 cmp	 DWORD PTR _iGold$[ebp], edi
  000c8	7e 13		 jle	 SHORT $LN2@SetCostume
  000ca	ff b5 f4 fe ff
	ff		 push	 DWORD PTR _iGold$[ebp]
  000d0	e8 00 00 00 00	 call	 ?ConvertNumToStrComma@Help@@YAXHPADH@Z ; Help::ConvertNumToStrComma

; 601  : 		m_szGold = szComma;

  000d5	8d 8e 0c 02 00
	00		 lea	 ecx, DWORD PTR [esi+524]

; 602  : 	}
; 603  : 	else

  000db	eb 11		 jmp	 SHORT $LN23@SetCostume
$LN2@SetCostume:

; 604  : 	{
; 605  : 		Help::ConvertNumToStrComma( iPeso, szComma, sizeof( szComma ) );

  000dd	ff b5 f0 fe ff
	ff		 push	 DWORD PTR _iPeso$[ebp]
  000e3	e8 00 00 00 00	 call	 ?ConvertNumToStrComma@Help@@YAXHPADH@Z ; Help::ConvertNumToStrComma

; 606  : 		m_szPeso = szComma;

  000e8	8d 8e 1c 02 00
	00		 lea	 ecx, DWORD PTR [esi+540]
$LN23@SetCostume:
  000ee	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f1	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szComma$[ebp]
  000f7	50		 push	 eax
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 607  : 	}
; 608  : 
; 609  : 	NewShopItemHelp::CreateCostumeInfo( pCsotume, m_ShopItemInfo );

  000fe	8d 86 44 02 00
	00		 lea	 eax, DWORD PTR [esi+580]
  00104	50		 push	 eax
  00105	53		 push	 ebx
  00106	e8 00 00 00 00	 call	 ?CreateCostumeInfo@NewShopItemHelp@@YA_NPAVCostumeShopInfo@@AAUtagNewShopItemInfo@@@Z ; NewShopItemHelp::CreateCostumeInfo
  0010b	59		 pop	 ecx
  0010c	59		 pop	 ecx

; 610  : 	ParseButton( pCsotume->GetIconName(), pCsotume->GetShopMarkType(), 0, 0, true, pCsotume->GetGradeType() );

  0010d	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00110	83 c3 50	 add	 ebx, 80			; 00000050H
  00113	6a 01		 push	 1
  00115	57		 push	 edi
  00116	57		 push	 edi
  00117	ff 73 e0	 push	 DWORD PTR [ebx-32]
  0011a	8b ce		 mov	 ecx, esi
  0011c	53		 push	 ebx
  0011d	e8 00 00 00 00	 call	 ?ParseButton@ioProductLinkButton@@IAEXABVioHashString@@HHH_NH@Z ; ioProductLinkButton::ParseButton

; 611  : 
; 612  : 	return true;

  00122	b0 01		 mov	 al, 1
$LN7@SetCostume:

; 613  : }

  00124	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	33 cd		 xor	 ecx, ebp
  0012b	5b		 pop	 ebx
  0012c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00131	c9		 leave
  00132	c2 04 00	 ret	 4
?SetCostumeInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z ENDP ; ioProductLinkButton::SetCostumeInfo
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UADProduct@@@std@@@std@@YAXPAUADProduct@@0AAV?$allocator@UADProduct@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ADProduct> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UADProduct@@@std@@@std@@YAXPAUADProduct@@0AAV?$allocator@UADProduct@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UADProduct@@@std@@@std@@YAXPAUADProduct@@0AAV?$allocator@UADProduct@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ADProduct> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UADProduct@@@std@@@std@@YAXPAUADProduct@@0AAV?$allocator@UADProduct@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ADProduct> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUADProduct@@PAU1@V?$allocator@UADProduct@@@std@@U1@@std@@YAPAUADProduct@@PAU1@00AAV?$allocator@UADProduct@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ADProduct *,ADProduct *,std::allocator<ADProduct>,ADProduct>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUADProduct@@PAU1@V?$allocator@UADProduct@@@std@@U1@@std@@YAPAUADProduct@@PAU1@00AAV?$allocator@UADProduct@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUADProduct@@PAU1@V?$allocator@UADProduct@@@std@@U1@@std@@YAPAUADProduct@@PAU1@00AAV?$allocator@UADProduct@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ADProduct *,ADProduct *,std::allocator<ADProduct>,ADProduct>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 16		 jmp	 SHORT $LN24@Uninit_mov
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00009	56		 push	 esi
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UADProduct@@@std@@UADProduct@@U3@@std@@YAXAAV?$allocator@UADProduct@@@0@PAUADProduct@@$$QAU2@@Z ; std::_Cons_val<std::allocator<ADProduct>,ADProduct,ADProduct>
  00015	83 45 10 18	 add	 DWORD PTR __Dest$[ebp], 24 ; 00000018H
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	83 c6 18	 add	 esi, 24			; 00000018H
$LN24@Uninit_mov:

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001f	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00022	75 e5		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00024	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00027	5e		 pop	 esi

; 438  : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Uninit_move@PAUADProduct@@PAU1@V?$allocator@UADProduct@@@std@@U1@@std@@YAPAUADProduct@@PAU1@00AAV?$allocator@UADProduct@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ADProduct *,ADProduct *,std::allocator<ADProduct>,ADProduct>
_TEXT	ENDS
PUBLIC	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$513897 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z PROC ; std::vector<int,std::allocator<int> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$513897[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<int *,int *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z ENDP ; std::vector<int,std::allocator<int> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN12@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN12@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UADProduct@@@std@@@std@@YAXPAUADProduct@@0AAV?$allocator@UADProduct@@@0@@Z ; std::_Destroy_range<std::allocator<ADProduct> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UADProduct@@@std@@@std@@YAXPAUADProduct@@0AAV?$allocator@UADProduct@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UADProduct@@@std@@@std@@YAXPAUADProduct@@0AAV?$allocator@UADProduct@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ADProduct> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UADProduct@@@std@@@std@@YAXPAUADProduct@@0AAV?$allocator@UADProduct@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ADProduct> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUADProduct@@PAU1@V?$allocator@UADProduct@@@std@@@std@@YAPAUADProduct@@PAU1@00AAV?$allocator@UADProduct@@@0@@Z ; std::_Uninitialized_move<ADProduct *,ADProduct *,std::allocator<ADProduct> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUADProduct@@PAU1@V?$allocator@UADProduct@@@std@@@std@@YAPAUADProduct@@PAU1@00AAV?$allocator@UADProduct@@@0@@Z
_TEXT	SEGMENT
__Cat$514009 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUADProduct@@PAU1@V?$allocator@UADProduct@@@std@@@std@@YAPAUADProduct@@PAU1@00AAV?$allocator@UADProduct@@@0@@Z PROC ; std::_Uninitialized_move<ADProduct *,ADProduct *,std::allocator<ADProduct> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$514009[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUADProduct@@PAU1@V?$allocator@UADProduct@@@std@@U1@@std@@YAPAUADProduct@@PAU1@00AAV?$allocator@UADProduct@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ADProduct *,ADProduct *,std::allocator<ADProduct>,ADProduct>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAUADProduct@@PAU1@V?$allocator@UADProduct@@@std@@@std@@YAPAUADProduct@@PAU1@00AAV?$allocator@UADProduct@@@0@@Z ENDP ; std::_Uninitialized_move<ADProduct *,ADProduct *,std::allocator<ADProduct> >
_TEXT	ENDS
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ; std::vector<int,std::allocator<int> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T514027 = -4						; size = 4
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ PROC	; std::vector<int,std::allocator<int> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T514027[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ENDP	; std::vector<int,std::allocator<int> >::clear
_TEXT	ENDS
PUBLIC	??1tagNewShopItemInfo@@QAE@XZ			; tagNewShopItemInfo::~tagNewShopItemInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1tagNewShopItemInfo@@QAE@XZ DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??1tagNewShopItemInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1tagNewShopItemInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$8
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1tagNewShopItemInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1tagNewShopItemInfo@@QAE@XZ PROC			; tagNewShopItemInfo::~tagNewShopItemInfo, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1tagNewShopItemInfo@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00017	8d 8e bc 00 00
	00		 lea	 ecx, DWORD PTR [esi+188]
  0001d	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 8
  00024	ff d7		 call	 edi
  00026	8d 8e ac 00 00
	00		 lea	 ecx, DWORD PTR [esi+172]
  0002c	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00030	ff d7		 call	 edi
  00032	8d 8e 98 00 00
	00		 lea	 ecx, DWORD PTR [esi+152]
  00038	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  0003c	e8 00 00 00 00	 call	 ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
  00041	8d 8e 84 00 00
	00		 lea	 ecx, DWORD PTR [esi+132]
  00047	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0004b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
  00050	8d 4e 68	 lea	 ecx, DWORD PTR [esi+104]
  00053	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00057	e8 00 00 00 00	 call	 ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
  0005c	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  0005f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00063	e8 00 00 00 00	 call	 ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
  00068	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  0006b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0006f	e8 00 00 00 00	 call	 ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
  00074	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00077	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0007b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
  00080	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00083	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00087	e8 00 00 00 00	 call	 ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
  0008c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00090	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00093	e8 00 00 00 00	 call	 ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
  00098	e8 00 00 00 00	 call	 __EH_epilog3
  0009d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 20	 add	 ecx, 32			; 00000020H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 30	 add	 ecx, 48			; 00000030H
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 40	 add	 ecx, 64			; 00000040H
  00027	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$4:
  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 58	 add	 ecx, 88			; 00000058H
  00032	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$5:
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	83 c1 68	 add	 ecx, 104		; 00000068H
  0003d	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$6:
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  0004b	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$7:
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  00059	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??1tagNewShopItemInfo@@QAE@XZ$8:
  0005e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	81 c1 ac 00 00
	00		 add	 ecx, 172		; 000000acH
  00067	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1tagNewShopItemInfo@@QAE@XZ:
  0006d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00071	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00074	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00077	33 c8		 xor	 ecx, eax
  00079	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1tagNewShopItemInfo@@QAE@XZ
  00083	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1tagNewShopItemInfo@@QAE@XZ ENDP			; tagNewShopItemInfo::~tagNewShopItemInfo
PUBLIC	??_7ioProductLinkButton@@6B@			; ioProductLinkButton::`vftable'
PUBLIC	??1ioProductLinkButton@@UAE@XZ			; ioProductLinkButton::~ioProductLinkButton
PUBLIC	??_R4ioProductLinkButton@@6B@			; ioProductLinkButton::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioProductLinkButton@@@8			; ioProductLinkButton `RTTI Type Descriptor'
PUBLIC	??_R3ioProductLinkButton@@8			; ioProductLinkButton::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioProductLinkButton@@8			; ioProductLinkButton::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioProductLinkButton@@8		; ioProductLinkButton::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	?AddRenderFrame@ioButton@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z:PROC ; ioButton::AddRenderFrame
EXTRN	?AddRenderImage@ioButton@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC ; ioButton::AddRenderImage
EXTRN	??_EioProductLinkButton@@UAEPAXI@Z:PROC		; ioProductLinkButton::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@ioProductLinkButton@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\newshopstartwnd.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@ioProductLinkButton@@8 DD FLAT:??_R0?AVioProductLinkButton@@@8 ; ioProductLinkButton::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioProductLinkButton@@8
rdata$r	ENDS
;	COMDAT ??_R2ioProductLinkButton@@8
rdata$r	SEGMENT
??_R2ioProductLinkButton@@8 DD FLAT:??_R1A@?0A@EA@ioProductLinkButton@@8 ; ioProductLinkButton::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioButton@@8
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3ioProductLinkButton@@8
rdata$r	SEGMENT
??_R3ioProductLinkButton@@8 DD 00H			; ioProductLinkButton::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ioProductLinkButton@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioProductLinkButton@@@8
_DATA	SEGMENT
??_R0?AVioProductLinkButton@@@8 DD FLAT:??_7type_info@@6B@ ; ioProductLinkButton `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioProductLinkButton@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioProductLinkButton@@6B@
rdata$r	SEGMENT
??_R4ioProductLinkButton@@6B@ DD 00H			; ioProductLinkButton::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioProductLinkButton@@@8
	DD	FLAT:??_R3ioProductLinkButton@@8
rdata$r	ENDS
;	COMDAT ??_7ioProductLinkButton@@6B@
CONST	SEGMENT
??_7ioProductLinkButton@@6B@ DD FLAT:??_R4ioProductLinkButton@@6B@ ; ioProductLinkButton::`vftable'
	DD	FLAT:?AddRenderFrame@ioButton@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
	DD	FLAT:?AddRenderImage@ioButton@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z
	DD	FLAT:?ParseExtraInfo@ioButton@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z
	DD	FLAT:?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z
	DD	FLAT:?SetWindowAlpha@ioButton@@UAEXH@Z
	DD	FLAT:?SetActive@ioWnd@@UAEXXZ
	DD	FLAT:?SetInActive@ioWnd@@UAEXXZ
	DD	FLAT:?ClearElementImageList@ioWnd@@UAEXXZ
	DD	FLAT:?SetSize@ioWnd@@UAEXHH@Z
	DD	FLAT:?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z
	DD	FLAT:?IsNeedProcess@ioWnd@@UBE_NXZ
	DD	FLAT:?IsCanMouseReaction@ioWnd@@UBE_NXZ
	DD	FLAT:?AddChild@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?DeleteChild@ioWnd@@UAEXK@Z
	DD	FLAT:?DeleteAllChild@ioWnd@@UAEXXZ
	DD	FLAT:?OnRenderShowAndHide@ioWnd@@MAE_NXZ
	DD	FLAT:?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRender@ioButton@@MAEXXZ
	DD	FLAT:?OnRenderAfterChild@ioWnd@@MAEXXZ
	DD	FLAT:?OnProcess@ioProductLinkButton@@MAEXM@Z
	DD	FLAT:?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z
	DD	FLAT:?CheckFrameReSize@ioButton@@MAEXHHHH@Z
	DD	FLAT:?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z
	DD	FLAT:?iwm_create@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_destroy@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_lbuttondown@ioButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonup@ioButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonDBLCLK@ioButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttondown@ioButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttonup@ioButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_command@ioProductLinkButton@@MAEXPAVioWnd@@HK@Z
	DD	FLAT:?iwm_mouseover@ioButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_vscroll@ioWnd@@UAEXKH@Z
	DD	FLAT:?iwm_wheel@ioWnd@@UAEXH@Z
	DD	FLAT:?iwm_show@ioProductLinkButton@@UAEXXZ
	DD	FLAT:?iwm_hide@ioProductLinkButton@@UAEXXZ
	DD	FLAT:?iwm_esc@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_spacebar@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_gototop@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragleave@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z
	DD	FLAT:?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z
	DD	FLAT:?IsEXType@ioWnd@@UBE_NXZ
	DD	FLAT:?GetWndType@ioButton@@UBEKXZ
	DD	FLAT:?RenderWnd@ioWnd@@UAEXXZ
	DD	FLAT:?SetIDEX@ioWnd@@UAEXAAK_N@Z
	DD	FLAT:?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?GetHeaderFileName@ioButton@@UAEPBDXZ
	DD	FLAT:?GetTemplateName@ioButton@@UAEPBDXZ
	DD	FLAT:?GetDefClassName@ioButton@@UBEPBDXZ
	DD	FLAT:?_Clone@ioButton@@UAEPAVioWnd@@XZ
	DD	FLAT:?Copy@ioButton@@UAEXPAVioWnd@@@Z
	DD	FLAT:?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z
	DD	FLAT:?SetSaveData@ioButton@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?SetPosX@ioWnd@@UAEXH@Z
	DD	FLAT:?SetPosY@ioWnd@@UAEXH@Z
	DD	FLAT:?SetWidth@ioWnd@@UAEXH@Z
	DD	FLAT:?SetHeight@ioWnd@@UAEXH@Z
	DD	FLAT:?GetNumFixedRenderFrame@ioButton@@UBEHXZ
	DD	FLAT:?GetFixedRenderFrameType@ioButton@@UAEPBDH@Z
	DD	FLAT:?GetRenderFrame@ioButton@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?GetNumFixedRenderImage@ioButton@@UBEHXZ
	DD	FLAT:?GetFixedRenderImageType@ioButton@@UAEPBDH@Z
	DD	FLAT:?GetRenderImage@ioButton@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z
	DD	FLAT:?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z
	DD	FLAT:??_EioProductLinkButton@@UAEPAXI@Z
	DD	FLAT:?OnDrawNormal@ioProductLinkButton@@MAEXHH@Z
	DD	FLAT:?OnDrawOvered@ioProductLinkButton@@MAEXHH@Z
	DD	FLAT:?OnDrawOveredAdd@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawPushed@ioProductLinkButton@@MAEXHH@Z
	DD	FLAT:?OnDrawDisabled@ioProductLinkButton@@MAEXHH@Z
	DD	FLAT:?OnDrawExDisabledNormal@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawExDisabledOvered@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawExDisabledPushed@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawBack@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawNormalList@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawDisableList@ioButton@@MAEXHH@Z
	DD	FLAT:?OnNormalRender@ioProductLinkButton@@MAEXHH@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioProductLinkButton@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioProductLinkButton@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioProductLinkButton@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1ioProductLinkButton@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1ioProductLinkButton@@UAE@XZ$3
__ehfuncinfo$??1ioProductLinkButton@@UAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1ioProductLinkButton@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioProductLinkButton@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioProductLinkButton@@UAE@XZ PROC			; ioProductLinkButton::~ioProductLinkButton, COMDAT
; _this$ = ecx

; 321  : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioProductLinkButton@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioProductLinkButton@@6B@

; 322  : }

  00017	8d 8e 44 02 00
	00		 lea	 ecx, DWORD PTR [esi+580]
  0001d	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  00024	e8 00 00 00 00	 call	 ??1tagNewShopItemInfo@@QAE@XZ
  00029	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0002f	8d 8e 1c 02 00
	00		 lea	 ecx, DWORD PTR [esi+540]
  00035	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00039	ff d7		 call	 edi
  0003b	8d 8e 0c 02 00
	00		 lea	 ecx, DWORD PTR [esi+524]
  00041	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00045	ff d7		 call	 edi
  00047	8d 8e fc 01 00
	00		 lea	 ecx, DWORD PTR [esi+508]
  0004d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00051	ff d7		 call	 edi
  00053	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00057	8b ce		 mov	 ecx, esi
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioButton@@UAE@XZ
  0005f	e8 00 00 00 00	 call	 __EH_epilog3
  00064	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioProductLinkButton@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioButton@@UAE@XZ
__unwindfunclet$??1ioProductLinkButton@@UAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	81 c1 fc 01 00
	00		 add	 ecx, 508		; 000001fcH
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioProductLinkButton@@UAE@XZ$2:
  00018	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	81 c1 0c 02 00
	00		 add	 ecx, 524		; 0000020cH
  00021	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioProductLinkButton@@UAE@XZ$3:
  00027	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	81 c1 1c 02 00
	00		 add	 ecx, 540		; 0000021cH
  00030	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1ioProductLinkButton@@UAE@XZ:
  00036	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioProductLinkButton@@UAE@XZ
  0004c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioProductLinkButton@@UAE@XZ ENDP			; ioProductLinkButton::~ioProductLinkButton
PUBLIC	?_Destroy@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IAEXPAUADProduct@@0@Z ; std::vector<ADProduct,std::allocator<ADProduct> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IAEXPAUADProduct@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IAEXPAUADProduct@@0@Z PROC ; std::vector<ADProduct,std::allocator<ADProduct> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IAEXPAUADProduct@@0@Z ENDP ; std::vector<ADProduct,std::allocator<ADProduct> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Umove@PAUADProduct@@@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IAEPAUADProduct@@PAU2@00@Z ; std::vector<ADProduct,std::allocator<ADProduct> >::_Umove<ADProduct *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAUADProduct@@@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IAEPAUADProduct@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUADProduct@@@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IAEPAUADProduct@@PAU2@00@Z PROC ; std::vector<ADProduct,std::allocator<ADProduct> >::_Umove<ADProduct *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUADProduct@@PAU1@V?$allocator@UADProduct@@@std@@@std@@YAPAUADProduct@@PAU1@00AAV?$allocator@UADProduct@@@0@@Z ; std::_Uninitialized_move<ADProduct *,ADProduct *,std::allocator<ADProduct> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUADProduct@@@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IAEPAUADProduct@@PAU2@00@Z ENDP ; std::vector<ADProduct,std::allocator<ADProduct> >::_Umove<ADProduct *>
_TEXT	ENDS
PUBLIC	?Clear@tagNewShopItemInfo@@QAEXXZ		; tagNewShopItemInfo::Clear
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\newshopdatadefine.h
;	COMDAT ?Clear@tagNewShopItemInfo@@QAEXXZ
_TEXT	SEGMENT
$T514855 = -4						; size = 4
$T514775 = -4						; size = 4
$T514695 = -4						; size = 4
$T514614 = -4						; size = 4
$T514534 = -4						; size = 4
$T514454 = -4						; size = 4
$T514374 = -4						; size = 4
$T514294 = -4						; size = 4
?Clear@tagNewShopItemInfo@@QAEXXZ PROC			; tagNewShopItemInfo::Clear, COMDAT
; _this$ = ecx

; 84   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 85   : 		m_iItemType			= 0;

  00004	33 c0		 xor	 eax, eax
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	89 06		 mov	 DWORD PTR [esi], eax

; 86   : 		m_iSortPoint		= 0;    

  0000b	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 87   : 		m_iShopMarkType		= SHOP_MARK_TYPE_NONE;

  0000e	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 88   : 		m_bShowPeso			= false;

  00011	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 89   : 		m_dwStampEtcItem	= 0;

  00014	89 46 50	 mov	 DWORD PTR [esi+80], eax

; 90   : 		m_iNeedLevel		= 0;

  00017	89 46 54	 mov	 DWORD PTR [esi+84], eax

; 91   : 		m_iValue0			= 0;

  0001a	89 46 78	 mov	 DWORD PTR [esi+120], eax

; 92   : 		m_iValue1			= 0;

  0001d	89 46 7c	 mov	 DWORD PTR [esi+124], eax

; 93   : 		m_iValue2			= 0;

  00020	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax

; 94   : 		m_iLimit			= 0;

  00026	89 86 94 00 00
	00		 mov	 DWORD PTR [esi+148], eax

; 95   : 		m_iLimitDate		= 0;

  0002c	89 86 cc 00 00
	00		 mov	 DWORD PTR [esi+204], eax

; 96   : 		m_iSubscriptionType = SUBSCRIPTION_NONE;

  00032	89 86 a8 00 00
	00		 mov	 DWORD PTR [esi+168], eax

; 97   : 		
; 98   : 
; 99   : 		m_vPeso.clear();

  00038	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  0003b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	50		 push	 eax
  00041	52		 push	 edx
  00042	8d 45 fc	 lea	 eax, DWORD PTR $T514294[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase

; 100  : 		m_vCash.clear();

  0004b	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  0004e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00051	8b 11		 mov	 edx, DWORD PTR [ecx]
  00053	50		 push	 eax
  00054	52		 push	 edx
  00055	8d 45 fc	 lea	 eax, DWORD PTR $T514374[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase

; 101  : 		m_vStamp.clear();

  0005e	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00061	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	50		 push	 eax
  00067	52		 push	 edx
  00068	8d 45 fc	 lea	 eax, DWORD PTR $T514454[ebp]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase

; 102  : 		m_vTournamentCoin.clear();

  00071	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  00074	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00077	8b 11		 mov	 edx, DWORD PTR [ecx]
  00079	50		 push	 eax
  0007a	52		 push	 edx
  0007b	8d 45 fc	 lea	 eax, DWORD PTR $T514534[ebp]
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase

; 103  : 
; 104  : 		m_vBonusPeso.clear();

  00084	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  00087	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0008a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008c	50		 push	 eax
  0008d	52		 push	 edx
  0008e	8d 45 fc	 lea	 eax, DWORD PTR $T514614[ebp]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase

; 105  : 		m_vManualIndex.clear();

  00097	8d 4e 68	 lea	 ecx, DWORD PTR [esi+104]
  0009a	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0009d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009f	50		 push	 eax
  000a0	52		 push	 edx
  000a1	8d 45 fc	 lea	 eax, DWORD PTR $T514695[ebp]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase

; 106  : 
; 107  : 
; 108  : 		m_vValue3.clear();

  000aa	8d 8e 84 00 00
	00		 lea	 ecx, DWORD PTR [esi+132]
  000b0	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000b3	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b5	50		 push	 eax
  000b6	52		 push	 edx
  000b7	8d 45 fc	 lea	 eax, DWORD PTR $T514775[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase

; 109  : 		m_vSubscriptionType.clear();

  000c0	8d 8e 98 00 00
	00		 lea	 ecx, DWORD PTR [esi+152]
  000c6	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000c9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000cb	50		 push	 eax
  000cc	52		 push	 edx
  000cd	8d 45 fc	 lea	 eax, DWORD PTR $T514855[ebp]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase
  000d6	5e		 pop	 esi

; 110  : 	}

  000d7	c9		 leave
  000d8	c3		 ret	 0
?Clear@tagNewShopItemInfo@@QAEXXZ ENDP			; tagNewShopItemInfo::Clear
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioProductLinkButton@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioProductLinkButton@@UAEPAXI@Z PROC			; ioProductLinkButton::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioProductLinkButton@@UAE@XZ ; ioProductLinkButton::~ioProductLinkButton
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@3
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@3:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioProductLinkButton@@UAEPAXI@Z ENDP			; ioProductLinkButton::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Clear@ioProductLinkButton@@QAEXXZ		; ioProductLinkButton::Clear
EXTRN	__imp_?Clear@ioHashString@@QAEXXZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\newshopstartwnd.cpp
;	COMDAT ?Clear@ioProductLinkButton@@QAEXXZ
_TEXT	SEGMENT
?Clear@ioProductLinkButton@@QAEXXZ PROC			; ioProductLinkButton::Clear, COMDAT
; _this$ = ecx

; 325  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 326  : 	m_szName.Clear();

  00004	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?Clear@ioHashString@@QAEXXZ
  0000a	8d 8e fc 01 00
	00		 lea	 ecx, DWORD PTR [esi+508]
  00010	ff d7		 call	 edi

; 327  : 	m_szGold.Clear();

  00012	8d 8e 0c 02 00
	00		 lea	 ecx, DWORD PTR [esi+524]
  00018	ff d7		 call	 edi

; 328  : 	m_szPeso.Clear();

  0001a	8d 8e 1c 02 00
	00		 lea	 ecx, DWORD PTR [esi+540]
  00020	ff d7		 call	 edi

; 329  : 	m_CurrADProductLink.Clear();

  00022	33 c9		 xor	 ecx, ecx
  00024	89 8e 2c 02 00
	00		 mov	 DWORD PTR [esi+556], ecx
  0002a	89 8e 30 02 00
	00		 mov	 DWORD PTR [esi+560], ecx
  00030	89 8e 34 02 00
	00		 mov	 DWORD PTR [esi+564], ecx
  00036	89 8e 38 02 00
	00		 mov	 DWORD PTR [esi+568], ecx
  0003c	89 8e 3c 02 00
	00		 mov	 DWORD PTR [esi+572], ecx
  00042	89 8e 40 02 00
	00		 mov	 DWORD PTR [esi+576], ecx
  00048	5f		 pop	 edi

; 330  : 	m_ShopItemInfo.Clear();

  00049	8d 8e 44 02 00
	00		 lea	 ecx, DWORD PTR [esi+580]
  0004f	5e		 pop	 esi
  00050	e9 00 00 00 00	 jmp	 ?Clear@tagNewShopItemInfo@@QAEXXZ ; tagNewShopItemInfo::Clear
?Clear@ioProductLinkButton@@QAEXXZ ENDP			; ioProductLinkButton::Clear
_TEXT	ENDS
PUBLIC	?SetBlank@ioProductLinkButton@@QAEXXZ		; ioProductLinkButton::SetBlank
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetBlank@ioProductLinkButton@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetBlank@ioProductLinkButton@@QAEXXZ$0
__ehfuncinfo$?SetBlank@ioProductLinkButton@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetBlank@ioProductLinkButton@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?SetBlank@ioProductLinkButton@@QAEXXZ
_TEXT	SEGMENT
$T514886 = -28						; size = 16
__$EHRec$ = -12						; size = 12
?SetBlank@ioProductLinkButton@@QAEXXZ PROC		; ioProductLinkButton::SetBlank, COMDAT
; _this$ = ecx

; 358  : {

  00000	6a 10		 push	 16			; 00000010H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?SetBlank@ioProductLinkButton@@QAEXXZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 359  : 	SetInActive();

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	ff 50 24	 call	 DWORD PTR [eax+36]

; 360  : 	Clear();

  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?Clear@ioProductLinkButton@@QAEXXZ ; ioProductLinkButton::Clear

; 361  : 	ParseButton( "", SHOP_MARK_TYPE_NONE, 0, 0, false, 0 );

  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0001f	8d 4d e4	 lea	 ecx, DWORD PTR $T514886[ebp]
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  00028	33 c0		 xor	 eax, eax
  0002a	50		 push	 eax
  0002b	50		 push	 eax
  0002c	50		 push	 eax
  0002d	50		 push	 eax
  0002e	50		 push	 eax
  0002f	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00032	8d 45 e4	 lea	 eax, DWORD PTR $T514886[ebp]
  00035	50		 push	 eax
  00036	8b ce		 mov	 ecx, esi
  00038	e8 00 00 00 00	 call	 ?ParseButton@ioProductLinkButton@@IAEXABVioHashString@@HHH_NH@Z ; ioProductLinkButton::ParseButton
  0003d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00041	8d 4d e4	 lea	 ecx, DWORD PTR $T514886[ebp]
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 362  : }

  0004a	e8 00 00 00 00	 call	 __EH_epilog3
  0004f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetBlank@ioProductLinkButton@@QAEXXZ$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR $T514886[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?SetBlank@ioProductLinkButton@@QAEXXZ:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetBlank@ioProductLinkButton@@QAEXXZ
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetBlank@ioProductLinkButton@@QAEXXZ ENDP		; ioProductLinkButton::SetBlank
PUBLIC	?SetProductInfo@ioProductLinkButton@@QAEXAAUADProduct@@@Z ; ioProductLinkButton::SetProductInfo
; Function compile flags: /Ogsp
;	COMDAT ?SetProductInfo@ioProductLinkButton@@QAEXAAUADProduct@@@Z
_TEXT	SEGMENT
_Product$ = 8						; size = 4
?SetProductInfo@ioProductLinkButton@@QAEXAAUADProduct@@@Z PROC ; ioProductLinkButton::SetProductInfo, COMDAT
; _this$ = ecx

; 365  : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 366  : 	SetActive();

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	ff 50 20	 call	 DWORD PTR [eax+32]

; 367  : 	Clear();

  0000b	8b ce		 mov	 ecx, esi
  0000d	e8 00 00 00 00	 call	 ?Clear@ioProductLinkButton@@QAEXXZ ; ioProductLinkButton::Clear

; 368  : 
; 369  : 	switch( Product.m_Link.m_eADProductType )

  00012	8b 4d 08	 mov	 ecx, DWORD PTR _Product$[ebp]
  00015	8b 01		 mov	 eax, DWORD PTR [ecx]
  00017	48		 dec	 eax
  00018	74 39		 je	 SHORT $LN10@SetProduct@2
  0001a	48		 dec	 eax
  0001b	48		 dec	 eax
  0001c	74 2b		 je	 SHORT $LN4@SetProduct@2
  0001e	48		 dec	 eax
  0001f	48		 dec	 eax
  00020	74 1d		 je	 SHORT $LN8@SetProduct@2
  00022	48		 dec	 eax
  00023	48		 dec	 eax
  00024	74 0f		 je	 SHORT $LN6@SetProduct@2
  00026	83 e8 05	 sub	 eax, 5
  00029	75 34		 jne	 SHORT $LN9@SetProduct@2

; 387  : 	case ADPT_COSTUME:
; 388  : 		if( SetCostumeInfo( Product ) )

  0002b	51		 push	 ecx
  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ?SetCostumeInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z ; ioProductLinkButton::SetCostumeInfo

; 389  : 			return;
; 390  : 		break;

  00033	eb 26		 jmp	 SHORT $LN15@SetProduct@2
$LN6@SetProduct@2:

; 379  : 	case ADPT_DECO:
; 380  : 		if( SetDecoInfo( Product ) )

  00035	51		 push	 ecx
  00036	8b ce		 mov	 ecx, esi
  00038	e8 00 00 00 00	 call	 ?SetDecoInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z ; ioProductLinkButton::SetDecoInfo

; 381  : 			return;
; 382  : 		break;

  0003d	eb 1c		 jmp	 SHORT $LN15@SetProduct@2
$LN8@SetProduct@2:

; 373  : 			return;
; 374  : 		break;
; 375  : 	case ADPT_EXTRA:
; 376  : 		if( SetExtraItemInfo( Product ) )

  0003f	51		 push	 ecx
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?SetExtraItemInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z ; ioProductLinkButton::SetExtraItemInfo

; 377  : 			return;
; 378  : 		break;

  00047	eb 12		 jmp	 SHORT $LN15@SetProduct@2
$LN4@SetProduct@2:

; 383  : 	case ADPT_ETC:
; 384  : 		if( SetEtcInfo( Product ) )

  00049	51		 push	 ecx
  0004a	8b ce		 mov	 ecx, esi
  0004c	e8 00 00 00 00	 call	 ?SetEtcInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z ; ioProductLinkButton::SetEtcInfo

; 385  : 			return;
; 386  : 		break;

  00051	eb 08		 jmp	 SHORT $LN15@SetProduct@2
$LN10@SetProduct@2:

; 370  : 	{
; 371  : 	case ADPT_SOLDIER:
; 372  : 		if( SetSoldierInfo( Product ) )

  00053	51		 push	 ecx
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ?SetSoldierInfo@ioProductLinkButton@@IAE_NAAUADProduct@@@Z ; ioProductLinkButton::SetSoldierInfo
$LN15@SetProduct@2:
  0005b	84 c0		 test	 al, al
  0005d	75 07		 jne	 SHORT $LN13@SetProduct@2
$LN9@SetProduct@2:

; 391  : 	}
; 392  : 		
; 393  : 	SetBlank();

  0005f	8b ce		 mov	 ecx, esi
  00061	e8 00 00 00 00	 call	 ?SetBlank@ioProductLinkButton@@QAEXXZ ; ioProductLinkButton::SetBlank
$LN13@SetProduct@2:
  00066	5e		 pop	 esi

; 394  : }

  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
?SetProductInfo@ioProductLinkButton@@QAEXAAUADProduct@@@Z ENDP ; ioProductLinkButton::SetProductInfo
_TEXT	ENDS
PUBLIC	?erase@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@0@Z ; std::vector<ADProduct,std::allocator<ADProduct> >::erase
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?erase@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$514972 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@0@Z PROC ; std::vector<ADProduct,std::allocator<ADProduct> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase@2

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$514972[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAUADProduct@@PAU1@@std@@YAPAUADProduct@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ADProduct *,ADProduct *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase@2:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@0@Z ENDP ; std::vector<ADProduct,std::allocator<ADProduct> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IAEXXZ ; std::vector<ADProduct,std::allocator<ADProduct> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IAEXXZ PROC ; std::vector<ADProduct,std::allocator<ADProduct> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN21@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN21@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IAEXXZ ENDP ; std::vector<ADProduct,std::allocator<ADProduct> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXI@Z ; std::vector<ADProduct,std::allocator<ADProduct> >::reserve
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
__Ptr$508221 = 8					; size = 4
__Count$ = 8						; size = 4
?reserve@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXI@Z PROC ; std::vector<ADProduct,std::allocator<ADProduct> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00011	81 fb aa aa aa
	0a		 cmp	 ebx, 178956970		; 0aaaaaaaH
  00017	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN56@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00024	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00027	2b 06		 sub	 eax, DWORD PTR [esi]
  00029	6a 18		 push	 24			; 00000018H
  0002b	99		 cdq
  0002c	59		 pop	 ecx
  0002d	f7 f9		 idiv	 ecx
  0002f	3b c3		 cmp	 eax, ebx
  00031	73 6b		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00033	6a 00		 push	 0
  00035	53		 push	 ebx
  00036	e8 00 00 00 00	 call	 ??$_Allocate@UADProduct@@@std@@YAPAUADProduct@@IPAU1@@Z ; std::_Allocate<ADProduct>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  0003b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00041	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00044	52		 push	 edx
  00045	89 45 08	 mov	 DWORD PTR __Ptr$508221[ebp], eax
  00048	ff 75 08	 push	 DWORD PTR __Ptr$508221[ebp]
  0004b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004e	50		 push	 eax
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUADProduct@@PAU1@V?$allocator@UADProduct@@@std@@@std@@YAPAUADProduct@@PAU1@00AAV?$allocator@UADProduct@@@0@@Z ; std::_Uninitialized_move<ADProduct *,ADProduct *,std::allocator<ADProduct> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00055	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00057	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005a	83 c4 18	 add	 esp, 24			; 00000018H
  0005d	2b c1		 sub	 eax, ecx
  0005f	6a 18		 push	 24			; 00000018H
  00061	99		 cdq
  00062	5f		 pop	 edi
  00063	f7 ff		 idiv	 edi
  00065	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00069	8b f8		 mov	 edi, eax
  0006b	85 c9		 test	 ecx, ecx
  0006d	74 12		 je	 SHORT $LN48@reserve

; 761  : 			if (this->_Myfirst != 0)

  0006f	eb 03		 jmp	 SHORT $LN55@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

$LL39@reserve:
  00071	83 c1 18	 add	 ecx, 24			; 00000018H
$LN55@reserve:
  00074	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  00077	75 f8		 jne	 SHORT $LL39@reserve

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00079	ff 36		 push	 DWORD PTR [esi]
  0007b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00080	59		 pop	 ecx
$LN48@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00081	8b ce		 mov	 ecx, esi
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00089	6b db 18	 imul	 ebx, 24			; 00000018H

; 770  : 			this->_Mylast = _Ptr + _Size;

  0008c	6b ff 18	 imul	 edi, 24			; 00000018H
  0008f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$508221[ebp]
  00092	03 d8		 add	 ebx, eax
  00094	03 f8		 add	 edi, eax
  00096	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00099	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  0009c	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  0009e	e8 00 00 00 00	 call	 __EH_epilog3
  000a3	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000a6	ff 75 08	 push	 DWORD PTR __Ptr$508221[ebp]
  000a9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ae	59		 pop	 ecx

; 757  : 			_RERAISE;

  000af	6a 00		 push	 0
  000b1	6a 00		 push	 0
  000b3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN57@reserve:
$LN54@reserve:
  000b8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXI@Z ENDP ; std::vector<ADProduct,std::allocator<ADProduct> >::reserve
PUBLIC	??0tagNewShopItemInfo@@QAE@XZ			; tagNewShopItemInfo::tagNewShopItemInfo
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__ehfuncinfo$??0tagNewShopItemInfo@@QAE@XZ DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??0tagNewShopItemInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0tagNewShopItemInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0tagNewShopItemInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0tagNewShopItemInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0tagNewShopItemInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0tagNewShopItemInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0tagNewShopItemInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0tagNewShopItemInfo@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0tagNewShopItemInfo@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0tagNewShopItemInfo@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0tagNewShopItemInfo@@QAE@XZ$8
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\newshopdatadefine.h
xdata$x	ENDS
;	COMDAT ??0tagNewShopItemInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0tagNewShopItemInfo@@QAE@XZ PROC			; tagNewShopItemInfo::tagNewShopItemInfo, COMDAT
; _this$ = ecx

; 78   : 	tagNewShopItemInfo()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0tagNewShopItemInfo@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	33 c0		 xor	 eax, eax
  00013	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00016	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00019	89 46 18	 mov	 DWORD PTR [esi+24], eax
  0001c	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  0001f	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00022	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00025	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00028	89 46 30	 mov	 DWORD PTR [esi+48], eax
  0002b	89 46 34	 mov	 DWORD PTR [esi+52], eax
  0002e	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00031	89 46 40	 mov	 DWORD PTR [esi+64], eax
  00034	89 46 44	 mov	 DWORD PTR [esi+68], eax
  00037	89 46 48	 mov	 DWORD PTR [esi+72], eax
  0003a	89 46 58	 mov	 DWORD PTR [esi+88], eax
  0003d	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00040	89 46 60	 mov	 DWORD PTR [esi+96], eax
  00043	89 46 68	 mov	 DWORD PTR [esi+104], eax
  00046	89 46 6c	 mov	 DWORD PTR [esi+108], eax
  00049	89 46 70	 mov	 DWORD PTR [esi+112], eax
  0004c	89 86 84 00 00
	00		 mov	 DWORD PTR [esi+132], eax
  00052	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax
  00058	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax
  0005e	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
  00064	89 86 9c 00 00
	00		 mov	 DWORD PTR [esi+156], eax
  0006a	89 86 a0 00 00
	00		 mov	 DWORD PTR [esi+160], eax
  00070	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00076	8d 8e ac 00 00
	00		 lea	 ecx, DWORD PTR [esi+172]
  0007c	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00080	ff d7		 call	 edi
  00082	8d 8e bc 00 00
	00		 lea	 ecx, DWORD PTR [esi+188]
  00088	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  0008c	ff d7		 call	 edi

; 79   : 	{
; 80   : 		Clear();

  0008e	8b ce		 mov	 ecx, esi
  00090	e8 00 00 00 00	 call	 ?Clear@tagNewShopItemInfo@@QAEXXZ ; tagNewShopItemInfo::Clear

; 81   : 	}

  00095	8b c6		 mov	 eax, esi
  00097	e8 00 00 00 00	 call	 __EH_epilog3
  0009c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0tagNewShopItemInfo@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0tagNewShopItemInfo@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 20	 add	 ecx, 32			; 00000020H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0tagNewShopItemInfo@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 30	 add	 ecx, 48			; 00000030H
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0tagNewShopItemInfo@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 40	 add	 ecx, 64			; 00000040H
  00027	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0tagNewShopItemInfo@@QAE@XZ$4:
  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 58	 add	 ecx, 88			; 00000058H
  00032	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0tagNewShopItemInfo@@QAE@XZ$5:
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	83 c1 68	 add	 ecx, 104		; 00000068H
  0003d	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0tagNewShopItemInfo@@QAE@XZ$6:
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  0004b	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0tagNewShopItemInfo@@QAE@XZ$7:
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  00059	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0tagNewShopItemInfo@@QAE@XZ$8:
  0005e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	81 c1 ac 00 00
	00		 add	 ecx, 172		; 000000acH
  00067	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0tagNewShopItemInfo@@QAE@XZ:
  0006d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00071	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00074	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00077	33 c8		 xor	 ecx, eax
  00079	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0tagNewShopItemInfo@@QAE@XZ
  00083	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0tagNewShopItemInfo@@QAE@XZ ENDP			; tagNewShopItemInfo::tagNewShopItemInfo
PUBLIC	?ParseButton@NewShopStartWnd@@IAEXXZ		; NewShopStartWnd::ParseButton
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\newshopstartwnd.cpp
;	COMDAT ?ParseButton@NewShopStartWnd@@IAEXXZ
_TEXT	SEGMENT
_pButton$507331 = -12					; size = 4
tv259 = -8						; size = 4
tv245 = -4						; size = 4
?ParseButton@NewShopStartWnd@@IAEXXZ PROC		; NewShopStartWnd::ParseButton, COMDAT
; _this$ = ecx

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b d9		 mov	 ebx, ecx

; 97   : 	int iPos		= 0;
; 98   : 	int iCurrPage	= m_iCurrPage * (ID_GOODS_BTN_MAX - ID_GOODS_01_BTN);

  0000a	8b b3 88 01 00
	00		 mov	 esi, DWORD PTR [ebx+392]
  00010	6b f6 07	 imul	 esi, 7
  00013	8b c6		 mov	 eax, esi
  00015	6b c0 18	 imul	 eax, 24			; 00000018H
  00018	57		 push	 edi
  00019	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR tv245[ebp], 10 ; 0000000aH
  00020	89 45 f8	 mov	 DWORD PTR tv259[ebp], eax
$LL6@ParseButto@2:

; 101  : 	{
; 102  : 		ioProductLinkButton* pButton = dynamic_cast<ioProductLinkButton*>( FindChildWnd( iButtonID ) );

  00023	6a 00		 push	 0
  00025	68 00 00 00 00	 push	 OFFSET ??_R0?AVioProductLinkButton@@@8
  0002a	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  0002f	6a 00		 push	 0
  00031	ff 75 fc	 push	 DWORD PTR tv245[ebp]
  00034	8b cb		 mov	 ecx, ebx
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ___RTDynamicCast
  00042	83 c4 14	 add	 esp, 20			; 00000014H
  00045	89 45 f4	 mov	 DWORD PTR _pButton$507331[ebp], eax

; 103  : 		if( pButton )

  00048	85 c0		 test	 eax, eax
  0004a	74 42		 je	 SHORT $LN5@ParseButto@2

; 104  : 		{
; 105  : 			if( COMPARE( iCurrPage + iPos, 0, (int)m_CurrADProductList.size() ) )

  0004c	8b 45 fc	 mov	 eax, DWORD PTR tv245[ebp]
  0004f	8d 44 06 f6	 lea	 eax, DWORD PTR [esi+eax-10]
  00053	85 c0		 test	 eax, eax
  00055	78 2f		 js	 SHORT $LN15@ParseButto@2
  00057	8b bb 78 01 00
	00		 mov	 edi, DWORD PTR [ebx+376]
  0005d	8b 83 7c 01 00
	00		 mov	 eax, DWORD PTR [ebx+380]
  00063	2b c7		 sub	 eax, edi
  00065	6a 18		 push	 24			; 00000018H
  00067	99		 cdq
  00068	59		 pop	 ecx
  00069	f7 f9		 idiv	 ecx
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR tv245[ebp]
  0006e	8d 4c 0e f6	 lea	 ecx, DWORD PTR [esi+ecx-10]
  00072	3b c8		 cmp	 ecx, eax
  00074	7d 10		 jge	 SHORT $LN15@ParseButto@2

; 106  : 			{	
; 107  : 				pButton->SetProductInfo( m_CurrADProductList[iCurrPage + iPos] );

  00076	8b 45 f8	 mov	 eax, DWORD PTR tv259[ebp]
  00079	8b 4d f4	 mov	 ecx, DWORD PTR _pButton$507331[ebp]
  0007c	03 c7		 add	 eax, edi
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?SetProductInfo@ioProductLinkButton@@QAEXAAUADProduct@@@Z ; ioProductLinkButton::SetProductInfo

; 108  : 			}
; 109  : 			else

  00084	eb 08		 jmp	 SHORT $LN5@ParseButto@2
$LN15@ParseButto@2:

; 110  : 			{
; 111  : 				pButton->SetBlank();

  00086	8b 4d f4	 mov	 ecx, DWORD PTR _pButton$507331[ebp]
  00089	e8 00 00 00 00	 call	 ?SetBlank@ioProductLinkButton@@QAEXXZ ; ioProductLinkButton::SetBlank
$LN5@ParseButto@2:

; 99   : 
; 100  : 	for( int iButtonID = ID_GOODS_01_BTN; iButtonID < ID_GOODS_BTN_MAX; ++iButtonID, ++iPos )

  0008e	83 45 f8 18	 add	 DWORD PTR tv259[ebp], 24 ; 00000018H
  00092	ff 45 fc	 inc	 DWORD PTR tv245[ebp]
  00095	83 7d fc 11	 cmp	 DWORD PTR tv245[ebp], 17 ; 00000011H
  00099	7c 88		 jl	 SHORT $LL6@ParseButto@2

; 112  : 			}
; 113  : 		}
; 114  : 	}
; 115  : 
; 116  : 	ParseCategoryButton();

  0009b	8b cb		 mov	 ecx, ebx
  0009d	e8 00 00 00 00	 call	 ?ParseCategoryButton@NewShopStartWnd@@IAEXXZ ; NewShopStartWnd::ParseCategoryButton

; 117  : 	ParsePageButton();

  000a2	8b cb		 mov	 ecx, ebx
  000a4	e8 00 00 00 00	 call	 ?ParsePageButton@NewShopStartWnd@@IAEXXZ ; NewShopStartWnd::ParsePageButton
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx

; 118  : }

  000ac	c9		 leave
  000ad	c3		 ret	 0
?ParseButton@NewShopStartWnd@@IAEXXZ ENDP		; NewShopStartWnd::ParseButton
_TEXT	ENDS
PUBLIC	??0ioProductLinkButton@@QAE@XZ			; ioProductLinkButton::ioProductLinkButton
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioshopmanager.h
xdata$x	SEGMENT
__ehfuncinfo$??0ioProductLinkButton@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0ioProductLinkButton@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0ioProductLinkButton@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioProductLinkButton@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioProductLinkButton@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioProductLinkButton@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ioProductLinkButton@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0ioProductLinkButton@@QAE@XZ$4
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\newshopstartwnd.cpp
xdata$x	ENDS
;	COMDAT ??0ioProductLinkButton@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioProductLinkButton@@QAE@XZ PROC			; ioProductLinkButton::ioProductLinkButton, COMDAT
; _this$ = ecx

; 316  : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioProductLinkButton@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioButton@@QAE@XZ
  00017	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  0001d	33 db		 xor	 ebx, ebx
  0001f	8d 8e fc 01 00
	00		 lea	 ecx, DWORD PTR [esi+508]
  00025	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioProductLinkButton@@6B@
  0002e	ff d7		 call	 edi
  00030	8d 8e 0c 02 00
	00		 lea	 ecx, DWORD PTR [esi+524]
  00036	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0003a	ff d7		 call	 edi
  0003c	8d 8e 1c 02 00
	00		 lea	 ecx, DWORD PTR [esi+540]
  00042	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00046	ff d7		 call	 edi
  00048	8d 8e 44 02 00
	00		 lea	 ecx, DWORD PTR [esi+580]
  0004e	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00052	89 9e 2c 02 00
	00		 mov	 DWORD PTR [esi+556], ebx
  00058	89 9e 30 02 00
	00		 mov	 DWORD PTR [esi+560], ebx
  0005e	89 9e 34 02 00
	00		 mov	 DWORD PTR [esi+564], ebx
  00064	89 9e 38 02 00
	00		 mov	 DWORD PTR [esi+568], ebx
  0006a	89 9e 3c 02 00
	00		 mov	 DWORD PTR [esi+572], ebx
  00070	89 9e 40 02 00
	00		 mov	 DWORD PTR [esi+576], ebx
  00076	e8 00 00 00 00	 call	 ??0tagNewShopItemInfo@@QAE@XZ ; tagNewShopItemInfo::tagNewShopItemInfo

; 317  : 	Clear();

  0007b	8b ce		 mov	 ecx, esi
  0007d	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00081	e8 00 00 00 00	 call	 ?Clear@ioProductLinkButton@@QAEXXZ ; ioProductLinkButton::Clear

; 318  : }

  00086	8b c6		 mov	 eax, esi
  00088	e8 00 00 00 00	 call	 __EH_epilog3
  0008d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioProductLinkButton@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioButton@@UAE@XZ
__unwindfunclet$??0ioProductLinkButton@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	81 c1 fc 01 00
	00		 add	 ecx, 508		; 000001fcH
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioProductLinkButton@@QAE@XZ$2:
  00018	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	81 c1 0c 02 00
	00		 add	 ecx, 524		; 0000020cH
  00021	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioProductLinkButton@@QAE@XZ$3:
  00027	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	81 c1 1c 02 00
	00		 add	 ecx, 540		; 0000021cH
  00030	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioProductLinkButton@@QAE@XZ$4:
  00036	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	81 c1 44 02 00
	00		 add	 ecx, 580		; 00000244H
  0003f	e9 00 00 00 00	 jmp	 ??1tagNewShopItemInfo@@QAE@XZ
__ehhandler$??0ioProductLinkButton@@QAE@XZ:
  00044	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00048	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004b	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0004e	33 c8		 xor	 ecx, eax
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioProductLinkButton@@QAE@XZ
  0005a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioProductLinkButton@@QAE@XZ ENDP			; ioProductLinkButton::ioProductLinkButton
PUBLIC	??1?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE@XZ ; std::vector<ADProduct,std::allocator<ADProduct> >::~vector<ADProduct,std::allocator<ADProduct> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE@XZ PROC ; std::vector<ADProduct,std::allocator<ADProduct> >::~vector<ADProduct,std::allocator<ADProduct> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IAEXXZ ; std::vector<ADProduct,std::allocator<ADProduct> >::_Tidy
??1?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE@XZ ENDP ; std::vector<ADProduct,std::allocator<ADProduct> >::~vector<ADProduct,std::allocator<ADProduct> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXXZ ; std::vector<ADProduct,std::allocator<ADProduct> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T515531 = -4						; size = 4
?clear@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXXZ PROC ; std::vector<ADProduct,std::allocator<ADProduct> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T515531[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@0@Z ; std::vector<ADProduct,std::allocator<ADProduct> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXXZ ENDP ; std::vector<ADProduct,std::allocator<ADProduct> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IAEXI@Z ; std::vector<ADProduct,std::allocator<ADProduct> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IAEXI@Z PROC ; std::vector<ADProduct,std::allocator<ADProduct> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 18		 push	 24			; 00000018H
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00030	2b c1		 sub	 eax, ecx
  00032	6a 18		 push	 24			; 00000018H
  00034	99		 cdq
  00035	59		 pop	 ecx
  00036	f7 f9		 idiv	 ecx
  00038	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003b	3b f8		 cmp	 edi, eax
  0003d	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003f	57		 push	 edi
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IBEII@Z ; std::vector<ADProduct,std::allocator<ADProduct> >::_Grow_to
  00047	50		 push	 eax
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?reserve@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXI@Z ; std::vector<ADProduct,std::allocator<ADProduct> >::reserve
$LN1@Reserve:
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 1298 : 		}

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ADProduct,std::allocator<ADProduct> >::_Reserve
_TEXT	ENDS
PUBLIC	??_7NewShopStartWnd@@6B@			; NewShopStartWnd::`vftable'
PUBLIC	??0NewShopStartWnd@@QAE@XZ			; NewShopStartWnd::NewShopStartWnd
PUBLIC	??_R4NewShopStartWnd@@6B@			; NewShopStartWnd::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVNewShopStartWnd@@@8			; NewShopStartWnd `RTTI Type Descriptor'
PUBLIC	??_R3NewShopStartWnd@@8				; NewShopStartWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NewShopStartWnd@@8				; NewShopStartWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NewShopStartWnd@@8		; NewShopStartWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?iwm_command@NewShopStartWnd@@UAEXPAVioWnd@@HK@Z ; NewShopStartWnd::iwm_command
PUBLIC	?iwm_show@NewShopStartWnd@@UAEXXZ		; NewShopStartWnd::iwm_show
EXTRN	__imp_??1ioWnd@@UAE@XZ:PROC
EXTRN	__imp_??0ioWnd@@QAE@XZ:PROC
EXTRN	?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC ; ioWnd::AddRenderImage
EXTRN	?ParseExtraInfo@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::ParseExtraInfo
EXTRN	?SetWindowAlpha@ioWnd@@UAEXH@Z:PROC		; ioWnd::SetWindowAlpha
EXTRN	?CheckFrameReSize@ioWnd@@MAEXHHHH@Z:PROC	; ioWnd::CheckFrameReSize
EXTRN	?iwm_lbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_lbuttondown
EXTRN	?iwm_lbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_lbuttonup
EXTRN	?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z:PROC ; ioWnd::iwm_lbuttonDBLCLK
EXTRN	?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttondown
EXTRN	?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttonup
EXTRN	?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseover
EXTRN	?GetWndType@ioWnd@@UBEKXZ:PROC			; ioWnd::GetWndType
EXTRN	?GetHeaderFileName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetHeaderFileName
EXTRN	?GetTemplateName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetTemplateName
EXTRN	?GetDefClassName@ioWnd@@UBEPBDXZ:PROC		; ioWnd::GetDefClassName
EXTRN	?_Clone@ioWnd@@UAEPAV1@XZ:PROC			; ioWnd::_Clone
EXTRN	?Copy@ioWnd@@UAEXPAV1@@Z:PROC			; ioWnd::Copy
EXTRN	?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::SetSaveData
EXTRN	?GetNumFixedRenderFrame@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderFrame
EXTRN	?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderFrameType
EXTRN	?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderFrame
EXTRN	?GetNumFixedRenderImage@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderImage
EXTRN	?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderImageType
EXTRN	?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderImage
EXTRN	??_ENewShopStartWnd@@UAEPAXI@Z:PROC		; NewShopStartWnd::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@NewShopStartWnd@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R1A@?0A@EA@NewShopStartWnd@@8 DD FLAT:??_R0?AVNewShopStartWnd@@@8 ; NewShopStartWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NewShopStartWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2NewShopStartWnd@@8
rdata$r	SEGMENT
??_R2NewShopStartWnd@@8 DD FLAT:??_R1A@?0A@EA@NewShopStartWnd@@8 ; NewShopStartWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3NewShopStartWnd@@8
rdata$r	SEGMENT
??_R3NewShopStartWnd@@8 DD 00H				; NewShopStartWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2NewShopStartWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVNewShopStartWnd@@@8
_DATA	SEGMENT
??_R0?AVNewShopStartWnd@@@8 DD FLAT:??_7type_info@@6B@	; NewShopStartWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNewShopStartWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R4NewShopStartWnd@@6B@
rdata$r	SEGMENT
??_R4NewShopStartWnd@@6B@ DD 00H			; NewShopStartWnd::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVNewShopStartWnd@@@8
	DD	FLAT:??_R3NewShopStartWnd@@8
rdata$r	ENDS
;	COMDAT ??_7NewShopStartWnd@@6B@
CONST	SEGMENT
??_7NewShopStartWnd@@6B@ DD FLAT:??_R4NewShopStartWnd@@6B@ ; NewShopStartWnd::`vftable'
	DD	FLAT:?AddRenderFrame@NewShopStartWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
	DD	FLAT:?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z
	DD	FLAT:?ParseExtraInfo@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z
	DD	FLAT:?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z
	DD	FLAT:?SetWindowAlpha@ioWnd@@UAEXH@Z
	DD	FLAT:?SetActive@ioWnd@@UAEXXZ
	DD	FLAT:?SetInActive@ioWnd@@UAEXXZ
	DD	FLAT:?ClearElementImageList@ioWnd@@UAEXXZ
	DD	FLAT:?SetSize@ioWnd@@UAEXHH@Z
	DD	FLAT:?SetPositionToDefault@NewShopStartWnd@@MAEXHH_N0@Z
	DD	FLAT:?IsNeedProcess@ioWnd@@UBE_NXZ
	DD	FLAT:?IsCanMouseReaction@ioWnd@@UBE_NXZ
	DD	FLAT:?AddChild@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?DeleteChild@ioWnd@@UAEXK@Z
	DD	FLAT:?DeleteAllChild@ioWnd@@UAEXXZ
	DD	FLAT:?OnRenderShowAndHide@ioWnd@@MAE_NXZ
	DD	FLAT:?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRender@NewShopStartWnd@@MAEXXZ
	DD	FLAT:?OnRenderAfterChild@ioWnd@@MAEXXZ
	DD	FLAT:?OnProcess@NewShopStartWnd@@MAEXM@Z
	DD	FLAT:?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z
	DD	FLAT:?CheckFrameReSize@ioWnd@@MAEXHHHH@Z
	DD	FLAT:?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z
	DD	FLAT:?iwm_create@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_destroy@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_lbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_command@NewShopStartWnd@@UAEXPAVioWnd@@HK@Z
	DD	FLAT:?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_vscroll@ioWnd@@UAEXKH@Z
	DD	FLAT:?iwm_wheel@ioWnd@@UAEXH@Z
	DD	FLAT:?iwm_show@NewShopStartWnd@@UAEXXZ
	DD	FLAT:?iwm_hide@NewShopStartWnd@@UAEXXZ
	DD	FLAT:?iwm_esc@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_spacebar@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_gototop@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragleave@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z
	DD	FLAT:?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z
	DD	FLAT:?IsEXType@ioWnd@@UBE_NXZ
	DD	FLAT:?GetWndType@ioWnd@@UBEKXZ
	DD	FLAT:?RenderWnd@ioWnd@@UAEXXZ
	DD	FLAT:?SetIDEX@ioWnd@@UAEXAAK_N@Z
	DD	FLAT:?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?GetHeaderFileName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetTemplateName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetDefClassName@ioWnd@@UBEPBDXZ
	DD	FLAT:?_Clone@ioWnd@@UAEPAV1@XZ
	DD	FLAT:?Copy@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z
	DD	FLAT:?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?SetPosX@ioWnd@@UAEXH@Z
	DD	FLAT:?SetPosY@ioWnd@@UAEXH@Z
	DD	FLAT:?SetWidth@ioWnd@@UAEXH@Z
	DD	FLAT:?SetHeight@ioWnd@@UAEXH@Z
	DD	FLAT:?GetNumFixedRenderFrame@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?GetNumFixedRenderImage@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z
	DD	FLAT:?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z
	DD	FLAT:??_ENewShopStartWnd@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0NewShopStartWnd@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0NewShopStartWnd@@QAE@XZ$0
__ehfuncinfo$??0NewShopStartWnd@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0NewShopStartWnd@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\newshopstartwnd.cpp
xdata$x	ENDS
;	COMDAT ??0NewShopStartWnd@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0NewShopStartWnd@@QAE@XZ PROC				; NewShopStartWnd::NewShopStartWnd, COMDAT
; _this$ = ecx

; 20   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0NewShopStartWnd@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioWnd@@QAE@XZ
  00017	33 ff		 xor	 edi, edi
  00019	8d 8e 68 01 00
	00		 lea	 ecx, DWORD PTR [esi+360]
  0001f	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00022	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NewShopStartWnd@@6B@
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ
  0002e	89 be 78 01 00
	00		 mov	 DWORD PTR [esi+376], edi
  00034	89 be 7c 01 00
	00		 mov	 DWORD PTR [esi+380], edi
  0003a	89 be 80 01 00
	00		 mov	 DWORD PTR [esi+384], edi

; 21   : 	m_pProductFrm	= NULL;

  00040	89 be 60 01 00
	00		 mov	 DWORD PTR [esi+352], edi

; 22   : 
; 23   : 	m_iCurrPage		= 0;

  00046	89 be 88 01 00
	00		 mov	 DWORD PTR [esi+392], edi

; 24   : }

  0004c	8b c6		 mov	 eax, esi
  0004e	e8 00 00 00 00	 call	 __EH_epilog3
  00053	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0NewShopStartWnd@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
__ehhandler$??0NewShopStartWnd@@QAE@XZ:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0NewShopStartWnd@@QAE@XZ
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0NewShopStartWnd@@QAE@XZ ENDP				; NewShopStartWnd::NewShopStartWnd
PUBLIC	??1NewShopStartWnd@@UAE@XZ			; NewShopStartWnd::~NewShopStartWnd
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??1NewShopStartWnd@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1NewShopStartWnd@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1NewShopStartWnd@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1NewShopStartWnd@@UAE@XZ$2
__ehfuncinfo$??1NewShopStartWnd@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1NewShopStartWnd@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\newshopstartwnd.cpp
xdata$x	ENDS
;	COMDAT ??1NewShopStartWnd@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1NewShopStartWnd@@UAE@XZ PROC				; NewShopStartWnd::~NewShopStartWnd, COMDAT
; _this$ = ecx

; 27   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1NewShopStartWnd@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NewShopStartWnd@@6B@

; 28   : 	SAFEDELETE( m_pProductFrm );

  00017	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  0001d	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00024	85 c9		 test	 ecx, ecx
  00026	74 0e		 je	 SHORT $LN1@NewShopSta
  00028	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002a	6a 01		 push	 1
  0002c	ff 50 40	 call	 DWORD PTR [eax+64]
  0002f	83 a6 60 01 00
	00 00		 and	 DWORD PTR [esi+352], 0
$LN1@NewShopSta:

; 29   : }

  00036	8d 8e 78 01 00
	00		 lea	 ecx, DWORD PTR [esi+376]
  0003c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00040	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IAEXXZ ; std::vector<ADProduct,std::allocator<ADProduct> >::_Tidy
  00045	8d 8e 68 01 00
	00		 lea	 ecx, DWORD PTR [esi+360]
  0004b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00055	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00059	8b ce		 mov	 ecx, esi
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
  00061	e8 00 00 00 00	 call	 __EH_epilog3
  00066	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1NewShopStartWnd@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
__unwindfunclet$??1NewShopStartWnd@@UAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	81 c1 68 01 00
	00		 add	 ecx, 360		; 00000168H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1NewShopStartWnd@@UAE@XZ$2:
  00018	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	81 c1 78 01 00
	00		 add	 ecx, 376		; 00000178H
  00021	e9 00 00 00 00	 jmp	 ??1?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE@XZ ; std::vector<ADProduct,std::allocator<ADProduct> >::~vector<ADProduct,std::allocator<ADProduct> >
__ehhandler$??1NewShopStartWnd@@UAE@XZ:
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1NewShopStartWnd@@UAE@XZ
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1NewShopStartWnd@@UAE@XZ ENDP				; NewShopStartWnd::~NewShopStartWnd
PUBLIC	?push_back@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXABUADProduct@@@Z ; std::vector<ADProduct,std::allocator<ADProduct> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXABUADProduct@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXABUADProduct@@@Z PROC ; std::vector<ADProduct,std::allocator<ADProduct> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 34		 jae	 SHORT $LN4@push_back
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 2e		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 18		 push	 24			; 00000018H
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IAEXI@Z ; std::vector<ADProduct,std::allocator<ADProduct> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00031	6b ff 18	 imul	 edi, 24			; 00000018H
  00034	03 3e		 add	 edi, DWORD PTR [esi]
  00036	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00039	57		 push	 edi
  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UADProduct@@@std@@UADProduct@@AAU3@@std@@YAXAAV?$allocator@UADProduct@@@0@PAUADProduct@@AAU2@@Z ; std::_Cons_val<std::allocator<ADProduct>,ADProduct,ADProduct &>

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00043	eb 1b		 jmp	 SHORT $LN20@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00045	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00048	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004a	6a 01		 push	 1
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@IAEXI@Z ; std::vector<ADProduct,std::allocator<ADProduct> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00053	57		 push	 edi
  00054	ff 76 04	 push	 DWORD PTR [esi+4]
  00057	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UADProduct@@@std@@UADProduct@@ABU3@@std@@YAXAAV?$allocator@UADProduct@@@0@PAUADProduct@@ABU2@@Z ; std::_Cons_val<std::allocator<ADProduct>,ADProduct,ADProduct const &>
$LN20@push_back:
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00063	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
?push_back@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXABUADProduct@@@Z ENDP ; std::vector<ADProduct,std::allocator<ADProduct> >::push_back
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GNewShopStartWnd@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GNewShopStartWnd@@UAEPAXI@Z PROC			; NewShopStartWnd::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1NewShopStartWnd@@UAE@XZ ; NewShopStartWnd::~NewShopStartWnd
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@4
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@4:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GNewShopStartWnd@@UAEPAXI@Z ENDP			; NewShopStartWnd::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?ParseProduct@NewShopStartWnd@@IAEXXZ		; NewShopStartWnd::ParseProduct
EXTRN	?GetADProduct@ioShopManager@@QAEPBUADProduct@@H@Z:PROC ; ioShopManager::GetADProduct
EXTRN	?GetADCategoryProductList@ioShopManager@@QAEXHAAV?$vector@HV?$allocator@H@std@@@std@@@Z:PROC ; ioShopManager::GetADCategoryProductList
EXTRN	?GetADCategoryName@ioShopManager@@QAEPBVioHashString@@H@Z:PROC ; ioShopManager::GetADCategoryName
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ParseProduct@NewShopStartWnd@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseProduct@NewShopStartWnd@@IAEXXZ$0
__ehfuncinfo$?ParseProduct@NewShopStartWnd@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ParseProduct@NewShopStartWnd@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\newshopstartwnd.cpp
xdata$x	ENDS
;	COMDAT ?ParseProduct@NewShopStartWnd@@IAEXXZ
_TEXT	SEGMENT
_PrductList$507312 = -32				; size = 16
$T515762 = -16						; size = 4
_i$507307 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?ParseProduct@NewShopStartWnd@@IAEXXZ PROC		; NewShopStartWnd::ParseProduct, COMDAT
; _this$ = ecx

; 70   : {

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?ParseProduct@NewShopStartWnd@@IAEXXZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx

; 71   : 	const ioHashString* CategoryName = g_ShopManager.GetADCategoryName( m_CurrCategoryIndex );

  0000e	ff b7 64 01 00
	00		 push	 DWORD PTR [edi+356]
  00014	e8 00 00 00 00	 call	 ?GetSingleton@ioShopManager@@SAAAV1@XZ ; ioShopManager::GetSingleton
  00019	8b c8		 mov	 ecx, eax
  0001b	e8 00 00 00 00	 call	 ?GetADCategoryName@ioShopManager@@QAEPBVioHashString@@H@Z ; ioShopManager::GetADCategoryName
  00020	8b f0		 mov	 esi, eax

; 72   : 	if( CategoryName && !CategoryName->IsEmpty() )

  00022	33 db		 xor	 ebx, ebx
  00024	3b f3		 cmp	 esi, ebx
  00026	74 19		 je	 SHORT $LN9@ParseProdu
  00028	8b ce		 mov	 ecx, esi
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00030	84 c0		 test	 al, al
  00032	75 0d		 jne	 SHORT $LN9@ParseProdu

; 73   : 	{
; 74   : 		m_CurrCategoryName = *CategoryName;

  00034	56		 push	 esi
  00035	8d 8f 68 01 00
	00		 lea	 ecx, DWORD PTR [edi+360]
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
$LN9@ParseProdu:

; 75   : 	}
; 76   : 
; 77   : 	m_CurrADProductList.clear();

  00041	8b 87 7c 01 00
	00		 mov	 eax, DWORD PTR [edi+380]
  00047	8b 8f 78 01 00
	00		 mov	 ecx, DWORD PTR [edi+376]
  0004d	50		 push	 eax
  0004e	51		 push	 ecx
  0004f	8d 45 f0	 lea	 eax, DWORD PTR $T515762[ebp]
  00052	50		 push	 eax
  00053	8d 8f 78 01 00
	00		 lea	 ecx, DWORD PTR [edi+376]
  00059	e8 00 00 00 00	 call	 ?erase@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@@2@0@Z ; std::vector<ADProduct,std::allocator<ADProduct> >::erase

; 78   : 	for( int i = 0; i < g_ShopManager.GetADCategoryCount(); ++i )

  0005e	89 5d f0	 mov	 DWORD PTR _i$507307[ebp], ebx
  00061	e8 00 00 00 00	 call	 ?GetSingleton@ioShopManager@@SAAAV1@XZ ; ioShopManager::GetSingleton
  00066	8b c8		 mov	 ecx, eax
  00068	e8 00 00 00 00	 call	 ?GetADCategoryCount@ioShopManager@@QAEHXZ ; ioShopManager::GetADCategoryCount
  0006d	85 c0		 test	 eax, eax
  0006f	7e 79		 jle	 SHORT $LN6@ParseProdu
$LL8@ParseProdu:

; 79   : 	{	
; 80   : 		if( m_CurrCategoryIndex == i )

  00071	8b 45 f0	 mov	 eax, DWORD PTR _i$507307[ebp]
  00074	39 87 64 01 00
	00		 cmp	 DWORD PTR [edi+356], eax
  0007a	75 5a		 jne	 SHORT $LN7@ParseProdu

; 81   : 		{
; 82   : 			IntVec PrductList;

  0007c	89 5d e0	 mov	 DWORD PTR _PrductList$507312[ebp], ebx
  0007f	89 5d e4	 mov	 DWORD PTR _PrductList$507312[ebp+4], ebx
  00082	89 5d e8	 mov	 DWORD PTR _PrductList$507312[ebp+8], ebx

; 83   : 			g_ShopManager.GetADCategoryProductList( i, PrductList );

  00085	8d 45 e0	 lea	 eax, DWORD PTR _PrductList$507312[ebp]
  00088	50		 push	 eax
  00089	ff 75 f0	 push	 DWORD PTR _i$507307[ebp]
  0008c	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0008f	e8 00 00 00 00	 call	 ?GetSingleton@ioShopManager@@SAAAV1@XZ ; ioShopManager::GetSingleton
  00094	8b c8		 mov	 ecx, eax
  00096	e8 00 00 00 00	 call	 ?GetADCategoryProductList@ioShopManager@@QAEXHAAV?$vector@HV?$allocator@H@std@@@std@@@Z ; ioShopManager::GetADCategoryProductList

; 84   : 			for( IntVec::iterator iter = PrductList.begin(); iter != PrductList.end(); ++iter )

  0009b	8b 5d e0	 mov	 ebx, DWORD PTR _PrductList$507312[ebp]
  0009e	eb 23		 jmp	 SHORT $LN78@ParseProdu
$LL49@ParseProdu:

; 85   : 			{
; 86   : 				int Index = *iter;

  000a0	8b 03		 mov	 eax, DWORD PTR [ebx]

; 87   : 				const ADProduct* pProduct = g_ShopManager.GetADProduct( Index - 1 );

  000a2	48		 dec	 eax
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ?GetSingleton@ioShopManager@@SAAAV1@XZ ; ioShopManager::GetSingleton
  000a9	8b c8		 mov	 ecx, eax
  000ab	e8 00 00 00 00	 call	 ?GetADProduct@ioShopManager@@QAEPBUADProduct@@H@Z ; ioShopManager::GetADProduct

; 88   : 				if( pProduct )

  000b0	85 c0		 test	 eax, eax
  000b2	74 0c		 je	 SHORT $LN3@ParseProdu

; 89   : 					m_CurrADProductList.push_back( *pProduct );

  000b4	50		 push	 eax
  000b5	8d 8f 78 01 00
	00		 lea	 ecx, DWORD PTR [edi+376]
  000bb	e8 00 00 00 00	 call	 ?push_back@?$vector@UADProduct@@V?$allocator@UADProduct@@@std@@@std@@QAEXABUADProduct@@@Z ; std::vector<ADProduct,std::allocator<ADProduct> >::push_back
$LN3@ParseProdu:

; 84   : 			for( IntVec::iterator iter = PrductList.begin(); iter != PrductList.end(); ++iter )

  000c0	83 c3 04	 add	 ebx, 4
$LN78@ParseProdu:
  000c3	3b 5d e4	 cmp	 ebx, DWORD PTR _PrductList$507312[ebp+4]
  000c6	75 d8		 jne	 SHORT $LL49@ParseProdu

; 90   : 			}
; 91   : 		}

  000c8	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000cc	8d 4d e0	 lea	 ecx, DWORD PTR _PrductList$507312[ebp]
  000cf	e8 00 00 00 00	 call	 ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
  000d4	33 db		 xor	 ebx, ebx
$LN7@ParseProdu:

; 78   : 	for( int i = 0; i < g_ShopManager.GetADCategoryCount(); ++i )

  000d6	ff 45 f0	 inc	 DWORD PTR _i$507307[ebp]
  000d9	e8 00 00 00 00	 call	 ?GetSingleton@ioShopManager@@SAAAV1@XZ ; ioShopManager::GetSingleton
  000de	8b c8		 mov	 ecx, eax
  000e0	e8 00 00 00 00	 call	 ?GetADCategoryCount@ioShopManager@@QAEHXZ ; ioShopManager::GetADCategoryCount
  000e5	39 45 f0	 cmp	 DWORD PTR _i$507307[ebp], eax
  000e8	7c 87		 jl	 SHORT $LL8@ParseProdu
$LN6@ParseProdu:

; 92   : 	}
; 93   : }

  000ea	e8 00 00 00 00	 call	 __EH_epilog3
  000ef	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ParseProduct@NewShopStartWnd@@IAEXXZ$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _PrductList$507312[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__ehhandler$?ParseProduct@NewShopStartWnd@@IAEXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ParseProduct@NewShopStartWnd@@IAEXXZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ParseProduct@NewShopStartWnd@@IAEXXZ ENDP		; NewShopStartWnd::ParseProduct
PUBLIC	??_R0?AVADImagePanelWnd@@@8			; ADImagePanelWnd `RTTI Type Descriptor'
EXTRN	?MoveDirectLink@ADImagePanelWnd@@QAEXXZ:PROC	; ADImagePanelWnd::MoveDirectLink
EXTRN	?IsSliding@ADImagePanelWnd@@QAE_NXZ:PROC	; ADImagePanelWnd::IsSliding
;	COMDAT ??_R0?AVADImagePanelWnd@@@8
_DATA	SEGMENT
??_R0?AVADImagePanelWnd@@@8 DD FLAT:??_7type_info@@6B@	; ADImagePanelWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVADImagePanelWnd@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?iwm_command@NewShopStartWnd@@UAEXPAVioWnd@@HK@Z
_TEXT	SEGMENT
_pWnd$ = 8						; size = 4
_cmd$ = 12						; size = 4
_param$ = 16						; size = 4
?iwm_command@NewShopStartWnd@@UAEXPAVioWnd@@HK@Z PROC	; NewShopStartWnd::iwm_command, COMDAT
; _this$ = ecx

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 195  : 
; 196  : 	DWORD dwID = pWnd->GetID();

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _pWnd$[ebp]
  00009	57		 push	 edi
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetID@ioWnd@@QBEKXZ

; 197  : 	switch( dwID )

  00010	83 f8 02	 cmp	 eax, 2
  00013	0f 84 2b 01 00
	00		 je	 $LN14@iwm_comman@2
  00019	83 f8 03	 cmp	 eax, 3
  0001c	0f 84 ef 00 00
	00		 je	 $LN8@iwm_comman@2
  00022	83 f8 04	 cmp	 eax, 4
  00025	0f 84 a6 00 00
	00		 je	 $LN6@iwm_comman@2
  0002b	83 f8 05	 cmp	 eax, 5
  0002e	74 7f		 je	 SHORT $LN4@iwm_comman@2
  00030	83 f8 06	 cmp	 eax, 6
  00033	74 43		 je	 SHORT $LN2@iwm_comman@2
  00035	83 c0 f6	 add	 eax, -10		; fffffff6H
  00038	83 f8 06	 cmp	 eax, 6
  0003b	0f 87 3a 01 00
	00		 ja	 $LN12@iwm_comman@2

; 206  : 			}
; 207  : 		}
; 208  : 		break;
; 209  : 	case ID_GOODS_01_BTN:
; 210  : 	case ID_GOODS_02_BTN:
; 211  : 	case ID_GOODS_03_BTN:
; 212  : 	case ID_GOODS_04_BTN:
; 213  : 	case ID_GOODS_05_BTN:
; 214  : 	case ID_GOODS_06_BTN:
; 215  : 	case ID_GOODS_07_BTN:
; 216  : 		{
; 217  : 			if( cmd == IOBN_BTNUP )

  00041	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  00045	0f 85 30 01 00
	00		 jne	 $LN12@iwm_comman@2

; 218  : 			{
; 219  : 				ioProductLinkButton* pButton = dynamic_cast<ioProductLinkButton*>( pWnd );

  0004b	6a 00		 push	 0
  0004d	68 00 00 00 00	 push	 OFFSET ??_R0?AVioProductLinkButton@@@8
  00052	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  00057	6a 00		 push	 0
  00059	ff 75 08	 push	 DWORD PTR _pWnd$[ebp]
  0005c	e8 00 00 00 00	 call	 ___RTDynamicCast
  00061	83 c4 14	 add	 esp, 20			; 00000014H

; 220  : 				if( pButton )

  00064	85 c0		 test	 eax, eax
  00066	0f 84 0f 01 00
	00		 je	 $LN12@iwm_comman@2

; 221  : 					pButton->MoveDirectLink();

  0006c	8b c8		 mov	 ecx, eax
  0006e	e8 00 00 00 00	 call	 ?MoveDirectLink@ioProductLinkButton@@QAEXXZ ; ioProductLinkButton::MoveDirectLink

; 222  : 			}
; 223  : 		}
; 224  : 		break;

  00073	e9 03 01 00 00	 jmp	 $LN12@iwm_comman@2
$LN2@iwm_comman@2:

; 260  : 	case ID_PAGE_NEXT_BTN:
; 261  : 		{
; 262  : 			if( cmd == IOBN_BTNUP )

  00078	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  0007c	0f 85 f9 00 00
	00		 jne	 $LN12@iwm_comman@2

; 263  : 			{
; 264  : 				m_iCurrPage++;

  00082	ff 86 88 01 00
	00		 inc	 DWORD PTR [esi+392]
  00088	8b be 88 01 00
	00		 mov	 edi, DWORD PTR [esi+392]

; 265  : 				m_iCurrPage = min( GetPageMax(), m_iCurrPage );

  0008e	8b ce		 mov	 ecx, esi
  00090	e8 00 00 00 00	 call	 ?GetPageMax@NewShopStartWnd@@IAEHXZ ; NewShopStartWnd::GetPageMax
  00095	3b c7		 cmp	 eax, edi
  00097	7d 09		 jge	 SHORT $LN25@iwm_comman@2
  00099	8b ce		 mov	 ecx, esi
  0009b	e8 00 00 00 00	 call	 ?GetPageMax@NewShopStartWnd@@IAEHXZ ; NewShopStartWnd::GetPageMax
  000a0	eb 02		 jmp	 SHORT $LN26@iwm_comman@2
$LN25@iwm_comman@2:
  000a2	8b c7		 mov	 eax, edi
$LN26@iwm_comman@2:
  000a4	89 86 88 01 00
	00		 mov	 DWORD PTR [esi+392], eax

; 266  : 				ParseProduct();
; 267  : 				ParseButton();
; 268  : 			}
; 269  : 		}
; 270  : 		break;

  000aa	e9 85 00 00 00	 jmp	 $LN28@iwm_comman@2
$LN4@iwm_comman@2:

; 249  : 	case ID_PAGE_PREV_BTN:
; 250  : 		{
; 251  : 			if( cmd == IOBN_BTNUP )

  000af	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  000b3	0f 85 c2 00 00
	00		 jne	 $LN12@iwm_comman@2

; 252  : 			{
; 253  : 				m_iCurrPage--;

  000b9	ff 8e 88 01 00
	00		 dec	 DWORD PTR [esi+392]
  000bf	8b 8e 88 01 00
	00		 mov	 ecx, DWORD PTR [esi+392]

; 254  : 				m_iCurrPage = max( 0, m_iCurrPage );

  000c5	79 02		 jns	 SHORT $LN23@iwm_comman@2
  000c7	33 c9		 xor	 ecx, ecx
$LN23@iwm_comman@2:
  000c9	89 8e 88 01 00
	00		 mov	 DWORD PTR [esi+392], ecx

; 255  : 				ParseProduct();
; 256  : 				ParseButton();
; 257  : 			}
; 258  : 		}
; 259  : 		break;

  000cf	eb 63		 jmp	 SHORT $LN28@iwm_comman@2
$LN6@iwm_comman@2:

; 237  : 	case ID_CATEGORY_NEXT_BTN:
; 238  : 		{
; 239  : 			if( cmd == IOBN_BTNUP )

  000d1	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  000d5	0f 85 a0 00 00
	00		 jne	 $LN12@iwm_comman@2

; 240  : 			{
; 241  : 				m_CurrCategoryIndex++;

  000db	ff 86 64 01 00
	00		 inc	 DWORD PTR [esi+356]

; 242  : 				m_CurrCategoryIndex = min( g_ShopManager.GetADCategoryCount() - 1, m_CurrCategoryIndex );

  000e1	8b be 64 01 00
	00		 mov	 edi, DWORD PTR [esi+356]
  000e7	e8 00 00 00 00	 call	 ?GetSingleton@ioShopManager@@SAAAV1@XZ ; ioShopManager::GetSingleton
  000ec	8b c8		 mov	 ecx, eax
  000ee	e8 00 00 00 00	 call	 ?GetADCategoryCount@ioShopManager@@QAEHXZ ; ioShopManager::GetADCategoryCount
  000f3	48		 dec	 eax
  000f4	3b c7		 cmp	 eax, edi
  000f6	7d 0f		 jge	 SHORT $LN21@iwm_comman@2
  000f8	e8 00 00 00 00	 call	 ?GetSingleton@ioShopManager@@SAAAV1@XZ ; ioShopManager::GetSingleton
  000fd	8b c8		 mov	 ecx, eax
  000ff	e8 00 00 00 00	 call	 ?GetADCategoryCount@ioShopManager@@QAEHXZ ; ioShopManager::GetADCategoryCount
  00104	48		 dec	 eax
  00105	eb 02		 jmp	 SHORT $LN22@iwm_comman@2
$LN21@iwm_comman@2:
  00107	8b c7		 mov	 eax, edi
$LN22@iwm_comman@2:
  00109	89 86 64 01 00
	00		 mov	 DWORD PTR [esi+356], eax

; 243  : 				m_iCurrPage			= 0;
; 244  : 				ParseProduct();
; 245  : 				ParseButton();
; 246  : 			}
; 247  : 		}
; 248  : 		break;

  0010f	eb 1c		 jmp	 SHORT $LN27@iwm_comman@2
$LN8@iwm_comman@2:

; 225  : 	case ID_CATEGORY_PREV_BTN:
; 226  : 		{
; 227  : 			if( cmd == IOBN_BTNUP )

  00111	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  00115	75 64		 jne	 SHORT $LN12@iwm_comman@2

; 228  : 			{				
; 229  : 				m_CurrCategoryIndex--;

  00117	ff 8e 64 01 00
	00		 dec	 DWORD PTR [esi+356]
  0011d	8b 8e 64 01 00
	00		 mov	 ecx, DWORD PTR [esi+356]

; 230  : 				m_CurrCategoryIndex	= max( 0, m_CurrCategoryIndex );

  00123	79 02		 jns	 SHORT $LN19@iwm_comman@2
  00125	33 c9		 xor	 ecx, ecx
$LN19@iwm_comman@2:
  00127	89 8e 64 01 00
	00		 mov	 DWORD PTR [esi+356], ecx
$LN27@iwm_comman@2:

; 231  : 				m_iCurrPage			= 0;

  0012d	83 a6 88 01 00
	00 00		 and	 DWORD PTR [esi+392], 0
$LN28@iwm_comman@2:

; 232  : 				ParseProduct();

  00134	8b ce		 mov	 ecx, esi
  00136	e8 00 00 00 00	 call	 ?ParseProduct@NewShopStartWnd@@IAEXXZ ; NewShopStartWnd::ParseProduct

; 233  : 				ParseButton();

  0013b	8b ce		 mov	 ecx, esi
  0013d	e8 00 00 00 00	 call	 ?ParseButton@NewShopStartWnd@@IAEXXZ ; NewShopStartWnd::ParseButton

; 234  : 			}
; 235  : 		}
; 236  : 		break;

  00142	eb 37		 jmp	 SHORT $LN12@iwm_comman@2
$LN14@iwm_comman@2:

; 198  : 	{
; 199  : 	case ID_AD_IMAGE_WND:
; 200  : 		{
; 201  : 			if( cmd == IOBN_BTNUP )

  00144	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  00148	75 31		 jne	 SHORT $LN12@iwm_comman@2

; 202  : 			{
; 203  : 				ADImagePanelWnd* pAD = dynamic_cast<ADImagePanelWnd*>( pWnd );

  0014a	6a 00		 push	 0
  0014c	68 00 00 00 00	 push	 OFFSET ??_R0?AVADImagePanelWnd@@@8
  00151	68 00 00 00 00	 push	 OFFSET ??_R0?AVioWnd@@@8
  00156	6a 00		 push	 0
  00158	ff 75 08	 push	 DWORD PTR _pWnd$[ebp]
  0015b	e8 00 00 00 00	 call	 ___RTDynamicCast
  00160	8b f0		 mov	 esi, eax
  00162	83 c4 14	 add	 esp, 20			; 00000014H

; 204  : 				if( pAD && !pAD->IsSliding() )

  00165	85 f6		 test	 esi, esi
  00167	74 12		 je	 SHORT $LN12@iwm_comman@2
  00169	8b ce		 mov	 ecx, esi
  0016b	e8 00 00 00 00	 call	 ?IsSliding@ADImagePanelWnd@@QAE_NXZ ; ADImagePanelWnd::IsSliding
  00170	84 c0		 test	 al, al
  00172	75 07		 jne	 SHORT $LN12@iwm_comman@2

; 205  : 					pAD->MoveDirectLink();

  00174	8b ce		 mov	 ecx, esi
  00176	e8 00 00 00 00	 call	 ?MoveDirectLink@ADImagePanelWnd@@QAEXXZ ; ADImagePanelWnd::MoveDirectLink
$LN12@iwm_comman@2:
  0017b	5f		 pop	 edi
  0017c	5e		 pop	 esi

; 271  : 	}
; 272  : }

  0017d	5d		 pop	 ebp
  0017e	c2 0c 00	 ret	 12			; 0000000cH
?iwm_command@NewShopStartWnd@@UAEXPAVioWnd@@HK@Z ENDP	; NewShopStartWnd::iwm_command
_TEXT	ENDS
EXTRN	__imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?iwm_show@NewShopStartWnd@@UAEXXZ
_TEXT	SEGMENT
?iwm_show@NewShopStartWnd@@UAEXXZ PROC			; NewShopStartWnd::iwm_show, COMDAT
; _this$ = ecx

; 45   : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 46   : 	m_CurrCategoryIndex	= 0;
; 47   : 	m_iCurrPage			= 0;
; 48   : 
; 49   : 	ShowChildWnd( ID_AD_IMAGE_WND );

  00002	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z
  00008	8b f1		 mov	 esi, ecx
  0000a	83 a6 64 01 00
	00 00		 and	 DWORD PTR [esi+356], 0
  00011	83 a6 88 01 00
	00 00		 and	 DWORD PTR [esi+392], 0
  00018	6a 00		 push	 0
  0001a	6a 02		 push	 2
  0001c	ff d7		 call	 edi

; 50   : 	ShowChildWnd( ID_AD_TEXT_WND );

  0001e	6a 00		 push	 0
  00020	6a 01		 push	 1
  00022	8b ce		 mov	 ecx, esi
  00024	ff d7		 call	 edi

; 51   : 
; 52   : 	ParseProduct();

  00026	8b ce		 mov	 ecx, esi
  00028	e8 00 00 00 00	 call	 ?ParseProduct@NewShopStartWnd@@IAEXXZ ; NewShopStartWnd::ParseProduct
  0002d	5f		 pop	 edi

; 53   : 	ParseButton();

  0002e	8b ce		 mov	 ecx, esi
  00030	5e		 pop	 esi
  00031	e9 00 00 00 00	 jmp	 ?ParseButton@NewShopStartWnd@@IAEXXZ ; NewShopStartWnd::ParseButton
?iwm_show@NewShopStartWnd@@UAEXXZ ENDP			; NewShopStartWnd::iwm_show
_TEXT	ENDS
END
