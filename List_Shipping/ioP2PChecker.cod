; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioP2PChecker.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?ms_Singleton@?$Singleton@VioP2PChecker@@@@1PAVioP2PChecker@@A ; Singleton<ioP2PChecker>::ms_Singleton
;	COMDAT ?ms_Singleton@?$Singleton@VioP2PChecker@@@@1PAVioP2PChecker@@A
_BSS	SEGMENT
?ms_Singleton@?$Singleton@VioP2PChecker@@@@1PAVioP2PChecker@@A DD 01H DUP (?) ; Singleton<ioP2PChecker>::ms_Singleton
_BSS	ENDS
PUBLIC	??_C@_0BE@MPAHBKIE@Control?5UDP?5Log?5OFF?$AA@	; `string'
PUBLIC	??_C@_0BD@OKOJHDJL@Control?5UDP?5Log?5ON?$AA@	; `string'
PUBLIC	?SwitchRecvLog@ioP2PChecker@@QAEXXZ		; ioP2PChecker::SwitchRecvLog
EXTRN	__imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ:PROC
EXTRN	__imp_?LOG@@3VCLog@@A:BYTE
;	COMDAT ??_C@_0BE@MPAHBKIE@Control?5UDP?5Log?5OFF?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iop2pchecker.cpp
CONST	SEGMENT
??_C@_0BE@MPAHBKIE@Control?5UDP?5Log?5OFF?$AA@ DB 'Control UDP Log OFF', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OKOJHDJL@Control?5UDP?5Log?5ON?$AA@
CONST	SEGMENT
??_C@_0BD@OKOJHDJL@Control?5UDP?5Log?5ON?$AA@ DB 'Control UDP Log ON', 00H ; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?SwitchRecvLog@ioP2PChecker@@QAEXXZ
_TEXT	SEGMENT
?SwitchRecvLog@ioP2PChecker@@QAEXXZ PROC		; ioP2PChecker::SwitchRecvLog, COMDAT
; _this$ = ecx

; 121  : 	m_bView = !m_bView;

  00000	33 d2		 xor	 edx, edx
  00002	38 51 28	 cmp	 BYTE PTR [ecx+40], dl
  00005	0f 94 c0	 sete	 al
  00008	88 41 28	 mov	 BYTE PTR [ecx+40], al

; 122  : 	if( m_bView )

  0000b	3a c2		 cmp	 al, dl
  0000d	74 07		 je	 SHORT $LN2@SwitchRecv

; 123  : 		LOG.PrintTimeAndLog( 0, "Control UDP Log ON" );

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OKOJHDJL@Control?5UDP?5Log?5ON?$AA@

; 124  : 	else

  00014	eb 05		 jmp	 SHORT $LN5@SwitchRecv
$LN2@SwitchRecv:

; 125  : 		LOG.PrintTimeAndLog( 0, "Control UDP Log OFF" );

  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@MPAHBKIE@Control?5UDP?5Log?5OFF?$AA@
$LN5@SwitchRecv:
  0001b	52		 push	 edx
  0001c	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 126  : }

  0002b	c3		 ret	 0
?SwitchRecvLog@ioP2PChecker@@QAEXXZ ENDP		; ioP2PChecker::SwitchRecvLog
_TEXT	ENDS
PUBLIC	??1RecvLog@ioP2PChecker@@QAE@XZ			; ioP2PChecker::RecvLog::~RecvLog
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1RecvLog@ioP2PChecker@@QAE@XZ
_TEXT	SEGMENT
??1RecvLog@ioP2PChecker@@QAE@XZ PROC			; ioP2PChecker::RecvLog::~RecvLog, COMDAT
; _this$ = ecx
  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??1RecvLog@ioP2PChecker@@QAE@XZ ENDP			; ioP2PChecker::RecvLog::~RecvLog
_TEXT	ENDS
PUBLIC	??0?$Singleton@VioP2PChecker@@@@QAE@XZ		; Singleton<ioP2PChecker>::Singleton<ioP2PChecker>
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
;	COMDAT ??0?$Singleton@VioP2PChecker@@@@QAE@XZ
_TEXT	SEGMENT
??0?$Singleton@VioP2PChecker@@@@QAE@XZ PROC		; Singleton<ioP2PChecker>::Singleton<ioP2PChecker>, COMDAT
; _this$ = ecx

; 27   : 	Singleton()

  00000	8b c1		 mov	 eax, ecx

; 28   : 	{
; 29   : 		assert( !ms_Singleton );
; 30   : 		int offset = (int)(T*)1 - (int)(Singleton <T>*)(T*)1;
; 31   : 		ms_Singleton = (T*)((int)this + offset);

  00002	8d 48 fc	 lea	 ecx, DWORD PTR [eax-4]
  00005	89 0d 00 00 00
	00		 mov	 DWORD PTR ?ms_Singleton@?$Singleton@VioP2PChecker@@@@1PAVioP2PChecker@@A, ecx ; Singleton<ioP2PChecker>::ms_Singleton

; 32   : 	}

  0000b	c3		 ret	 0
??0?$Singleton@VioP2PChecker@@@@QAE@XZ ENDP		; Singleton<ioP2PChecker>::Singleton<ioP2PChecker>
_TEXT	ENDS
PUBLIC	??1?$Singleton@VioP2PChecker@@@@QAE@XZ		; Singleton<ioP2PChecker>::~Singleton<ioP2PChecker>
; Function compile flags: /Ogsp
;	COMDAT ??1?$Singleton@VioP2PChecker@@@@QAE@XZ
_TEXT	SEGMENT
??1?$Singleton@VioP2PChecker@@@@QAE@XZ PROC		; Singleton<ioP2PChecker>::~Singleton<ioP2PChecker>, COMDAT
; _this$ = ecx

; 36   : 		assert( ms_Singleton );
; 37   : 		ms_Singleton = 0;

  00000	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_Singleton@?$Singleton@VioP2PChecker@@@@1PAVioP2PChecker@@A, 0 ; Singleton<ioP2PChecker>::ms_Singleton

; 38   : 	}

  00007	c3		 ret	 0
??1?$Singleton@VioP2PChecker@@@@QAE@XZ ENDP		; Singleton<ioP2PChecker>::~Singleton<ioP2PChecker>
_TEXT	ENDS
PUBLIC	?GetSingleton@?$Singleton@VioP2PChecker@@@@SAAAVioP2PChecker@@XZ ; Singleton<ioP2PChecker>::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?GetSingleton@?$Singleton@VioP2PChecker@@@@SAAAVioP2PChecker@@XZ
_TEXT	SEGMENT
?GetSingleton@?$Singleton@VioP2PChecker@@@@SAAAVioP2PChecker@@XZ PROC ; Singleton<ioP2PChecker>::GetSingleton, COMDAT

; 42   : 		assert( ms_Singleton );
; 43   : 		return (*ms_Singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VioP2PChecker@@@@1PAVioP2PChecker@@A ; Singleton<ioP2PChecker>::ms_Singleton

; 44   : 	}

  00005	c3		 ret	 0
?GetSingleton@?$Singleton@VioP2PChecker@@@@SAAAVioP2PChecker@@XZ ENDP ; Singleton<ioP2PChecker>::GetSingleton
_TEXT	ENDS
PUBLIC	?size@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QBEIXZ ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QBEIXZ PROC ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 18		 push	 24			; 00000018H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEAAUPacketData@ioP2PChecker@@I@Z ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEAAUPacketData@ioP2PChecker@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEAAUPacketData@ioP2PChecker@@I@Z PROC ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	6b c0 18	 imul	 eax, 24			; 00000018H
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEAAUPacketData@ioP2PChecker@@I@Z ENDP ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::operator[]
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IBE_NPBUPacketData@ioP2PChecker@@@Z ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IBE_NPBUPacketData@ioP2PChecker@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IBE_NPBUPacketData@ioP2PChecker@@@Z PROC ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IBE_NPBUPacketData@ioP2PChecker@@@Z ENDP ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IBEXPAUPacketData@ioP2PChecker@@0@Z ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IBEXPAUPacketData@ioP2PChecker@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IBEXPAUPacketData@ioP2PChecker@@0@Z PROC ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IBEXPAUPacketData@ioP2PChecker@@0@Z ENDP ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE@XZ ; std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::~_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::~_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::~_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UPacketData@ioP2PChecker@@@std@@QAE@XZ ; std::allocator<ioP2PChecker::PacketData>::allocator<ioP2PChecker::PacketData>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UPacketData@ioP2PChecker@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UPacketData@ioP2PChecker@@@std@@QAE@XZ PROC ; std::allocator<ioP2PChecker::PacketData>::allocator<ioP2PChecker::PacketData>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UPacketData@ioP2PChecker@@@std@@QAE@XZ ENDP ; std::allocator<ioP2PChecker::PacketData>::allocator<ioP2PChecker::PacketData>
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IBE_NPBURecvLog@ioP2PChecker@@@Z ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Inside
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IBE_NPBURecvLog@ioP2PChecker@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IBE_NPBURecvLog@ioP2PChecker@@@Z PROC ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside@2
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside@2
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside@2
$LN3@Inside@2:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside@2:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IBE_NPBURecvLog@ioP2PChecker@@@Z ENDP ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Inside
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IBEXPAURecvLog@ioP2PChecker@@0@Z ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Orphan_range
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IBEXPAURecvLog@ioP2PChecker@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IBEXPAURecvLog@ioP2PChecker@@0@Z PROC ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IBEXPAURecvLog@ioP2PChecker@@0@Z ENDP ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE@XZ ; std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::~_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::~_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::~_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >
_TEXT	ENDS
PUBLIC	??0?$allocator@URecvLog@ioP2PChecker@@@std@@QAE@XZ ; std::allocator<ioP2PChecker::RecvLog>::allocator<ioP2PChecker::RecvLog>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@URecvLog@ioP2PChecker@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@URecvLog@ioP2PChecker@@@std@@QAE@XZ PROC	; std::allocator<ioP2PChecker::RecvLog>::allocator<ioP2PChecker::RecvLog>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@URecvLog@ioP2PChecker@@@std@@QAE@XZ ENDP	; std::allocator<ioP2PChecker::RecvLog>::allocator<ioP2PChecker::RecvLog>
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >, COMDAT
; _this$ = ecx

; 40   : 		{	// construct with null pointer

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0

; 41   : 		}

  00005	c3		 ret	 0
??0?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBEABUPacketData@ioP2PChecker@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBEABUPacketData@ioP2PChecker@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBEABUPacketData@ioP2PChecker@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBEABUPacketData@ioP2PChecker@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator*
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QBEIXZ ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QBEIXZ PROC ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 18		 push	 24			; 00000018H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IBEXXZ ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IBEXXZ PROC ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IBEXXZ ENDP ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UPacketData@ioP2PChecker@@@std@@QAE@ABV01@@Z ; std::allocator<ioP2PChecker::PacketData>::allocator<ioP2PChecker::PacketData>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UPacketData@ioP2PChecker@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UPacketData@ioP2PChecker@@@std@@QAE@ABV01@@Z PROC ; std::allocator<ioP2PChecker::PacketData>::allocator<ioP2PChecker::PacketData>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UPacketData@ioP2PChecker@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<ioP2PChecker::PacketData>::allocator<ioP2PChecker::PacketData>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UPacketData@ioP2PChecker@@@std@@QAEXPAUPacketData@ioP2PChecker@@I@Z ; std::allocator<ioP2PChecker::PacketData>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UPacketData@ioP2PChecker@@@std@@QAEXPAUPacketData@ioP2PChecker@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UPacketData@ioP2PChecker@@@std@@QAEXPAUPacketData@ioP2PChecker@@I@Z PROC ; std::allocator<ioP2PChecker::PacketData>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UPacketData@ioP2PChecker@@@std@@QAEXPAUPacketData@ioP2PChecker@@I@Z ENDP ; std::allocator<ioP2PChecker::PacketData>::deallocate
_TEXT	ENDS
PUBLIC	?capacity@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QBEIXZ ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QBEIXZ PROC ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 14		 push	 20			; 00000014H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QBEIXZ ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QBEIXZ PROC ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 14		 push	 20			; 00000014H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::size
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IBEXXZ ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IBEXXZ PROC ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@2:
$LN3@Xlen@2:
  0000b	cc		 int	 3
?_Xlen@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IBEXXZ ENDP ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@URecvLog@ioP2PChecker@@@std@@QAE@ABV01@@Z ; std::allocator<ioP2PChecker::RecvLog>::allocator<ioP2PChecker::RecvLog>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@URecvLog@ioP2PChecker@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@URecvLog@ioP2PChecker@@@std@@QAE@ABV01@@Z PROC ; std::allocator<ioP2PChecker::RecvLog>::allocator<ioP2PChecker::RecvLog>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@URecvLog@ioP2PChecker@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<ioP2PChecker::RecvLog>::allocator<ioP2PChecker::RecvLog>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@I@Z ; std::allocator<ioP2PChecker::RecvLog>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@I@Z PROC ; std::allocator<ioP2PChecker::RecvLog>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@I@Z ENDP ; std::allocator<ioP2PChecker::RecvLog>::deallocate
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 18	 add	 DWORD PTR [eax], 24	; 00000018H

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator++
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::_Compat
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QBEABURecvLog@ioP2PChecker@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QBEABURecvLog@ioP2PChecker@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QBEABURecvLog@ioP2PChecker@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QBEABURecvLog@ioP2PChecker@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::operator*
_TEXT	ENDS
PUBLIC	??F?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::operator--
; Function compile flags: /Ogsp
;	COMDAT ??F?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::operator--, COMDAT
; _this$ = ecx

; 122  : 		{	// predecrement

  00000	8b c1		 mov	 eax, ecx

; 123  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 124  : 		if (this->_Getcont() == 0
; 125  : 			|| this->_Ptr == 0
; 126  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 127  : 			{	// report error
; 128  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 129  : 			_SCL_SECURE_OUT_OF_RANGE;
; 130  : 			}
; 131  : 
; 132  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 133  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 134  : 		_SCL_SECURE_VALIDATE_RANGE(
; 135  : 			this->_Ptr != 0
; 136  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 137  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 138  : 
; 139  : 		--this->_Ptr;

  00002	83 00 ec	 add	 DWORD PTR [eax], -20	; ffffffecH

; 140  : 		return (*this);
; 141  : 		}

  00005	c3		 ret	 0
??F?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::operator--
_TEXT	ENDS
PUBLIC	??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@1@@Z ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >::_Revranit<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@1@@Z PROC ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >::_Revranit<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >, COMDAT
; _this$ = ecx

; 1027 : 		{	// construct wrapped iterator from _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1028 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@1@@Z ENDP ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >::_Revranit<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UPacketData@ioP2PChecker@@@std@@QBEIXZ ; std::allocator<ioP2PChecker::PacketData>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UPacketData@ioP2PChecker@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UPacketData@ioP2PChecker@@@std@@QBEIXZ PROC ; std::allocator<ioP2PChecker::PacketData>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UPacketData@ioP2PChecker@@@std@@QBEIXZ ENDP ; std::allocator<ioP2PChecker::PacketData>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@URecvLog@ioP2PChecker@@@std@@QBEIXZ ; std::allocator<ioP2PChecker::RecvLog>::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@URecvLog@ioP2PChecker@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@URecvLog@ioP2PChecker@@@std@@QBEIXZ PROC ; std::allocator<ioP2PChecker::RecvLog>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@URecvLog@ioP2PChecker@@@std@@QBEIXZ ENDP ; std::allocator<ioP2PChecker::RecvLog>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >, COMDAT
; _this$ = ecx

; 40   : 		{	// construct with null pointer

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0

; 41   : 		}

  00005	c3		 ret	 0
??0?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::_Compat
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUPacketData@ioP2PChecker@@@std@@YAPBUPacketData@ioP2PChecker@@ABU12@@Z ; std::addressof<ioP2PChecker::PacketData const >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBUPacketData@ioP2PChecker@@@std@@YAPBUPacketData@ioP2PChecker@@ABU12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUPacketData@ioP2PChecker@@@std@@YAPBUPacketData@ioP2PChecker@@ABU12@@Z PROC ; std::addressof<ioP2PChecker::PacketData const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUPacketData@ioP2PChecker@@@std@@YAPBUPacketData@ioP2PChecker@@ABU12@@Z ENDP ; std::addressof<ioP2PChecker::PacketData const >
_TEXT	ENDS
PUBLIC	??$addressof@$$CBURecvLog@ioP2PChecker@@@std@@YAPBURecvLog@ioP2PChecker@@ABU12@@Z ; std::addressof<ioP2PChecker::RecvLog const >
; Function compile flags: /Ogsp
;	COMDAT ??$addressof@$$CBURecvLog@ioP2PChecker@@@std@@YAPBURecvLog@ioP2PChecker@@ABU12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBURecvLog@ioP2PChecker@@@std@@YAPBURecvLog@ioP2PChecker@@ABU12@@Z PROC ; std::addressof<ioP2PChecker::RecvLog const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBURecvLog@ioP2PChecker@@@std@@YAPBURecvLog@ioP2PChecker@@ABU12@@Z ENDP ; std::addressof<ioP2PChecker::RecvLog const >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UPacketData@ioP2PChecker@@@std@@YAPAUPacketData@ioP2PChecker@@IPAU12@@Z ; std::_Allocate<ioP2PChecker::PacketData>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UPacketData@ioP2PChecker@@@std@@YAPAUPacketData@ioP2PChecker@@IPAU12@@Z
_TEXT	SEGMENT
$T508319 = -12						; size = 12
$T508324 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UPacketData@ioP2PChecker@@@std@@YAPAUPacketData@ioP2PChecker@@IPAU12@@Z PROC ; std::_Allocate<ioP2PChecker::PacketData>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 aa aa aa
	0a		 cmp	 ecx, 178956970		; 0aaaaaaaH
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	6b c9 18	 imul	 ecx, 24			; 00000018H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T508324[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T508324[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T508319[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T508319[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T508319[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UPacketData@ioP2PChecker@@@std@@YAPAUPacketData@ioP2PChecker@@IPAU12@@Z ENDP ; std::_Allocate<ioP2PChecker::PacketData>
_TEXT	ENDS
PUBLIC	??$_Allocate@URecvLog@ioP2PChecker@@@std@@YAPAURecvLog@ioP2PChecker@@IPAU12@@Z ; std::_Allocate<ioP2PChecker::RecvLog>
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@URecvLog@ioP2PChecker@@@std@@YAPAURecvLog@ioP2PChecker@@IPAU12@@Z
_TEXT	SEGMENT
$T508329 = -12						; size = 12
$T508333 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@URecvLog@ioP2PChecker@@@std@@YAPAURecvLog@ioP2PChecker@@IPAU12@@Z PROC ; std::_Allocate<ioP2PChecker::RecvLog>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate@2

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 cc cc cc
	0c		 cmp	 ecx, 214748364		; 0cccccccH
  00015	77 0e		 ja	 SHORT $LN1@Allocate@2
  00017	6b c9 14	 imul	 ecx, 20			; 00000014H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T508333[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T508333[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T508329[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T508329[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T508329[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate@2:
??$_Allocate@URecvLog@ioP2PChecker@@@std@@YAPAURecvLog@ioP2PChecker@@IPAU12@@Z ENDP ; std::_Allocate<ioP2PChecker::RecvLog>
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator-
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??G?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator-, COMDAT
; _this$ = ecx

; 190  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 191  : 		_Compat(_Right);
; 192  : 		return (this->_Ptr - _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	6a 18		 push	 24			; 00000018H
  0000c	99		 cdq
  0000d	59		 pop	 ecx
  0000e	f7 f9		 idiv	 ecx

; 193  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??G?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator-
_TEXT	ENDS
PUBLIC	??$forward@AAUPacketData@ioP2PChecker@@@std@@YAAAUPacketData@ioP2PChecker@@AAU12@@Z ; std::forward<ioP2PChecker::PacketData &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUPacketData@ioP2PChecker@@@std@@YAAAUPacketData@ioP2PChecker@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUPacketData@ioP2PChecker@@@std@@YAAAUPacketData@ioP2PChecker@@AAU12@@Z PROC ; std::forward<ioP2PChecker::PacketData &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUPacketData@ioP2PChecker@@@std@@YAAAUPacketData@ioP2PChecker@@AAU12@@Z ENDP ; std::forward<ioP2PChecker::PacketData &>
_TEXT	ENDS
PUBLIC	??$construct@AAUPacketData@ioP2PChecker@@@?$allocator@UPacketData@ioP2PChecker@@@std@@QAEXPAUPacketData@ioP2PChecker@@AAU23@@Z ; std::allocator<ioP2PChecker::PacketData>::construct<ioP2PChecker::PacketData &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUPacketData@ioP2PChecker@@@?$allocator@UPacketData@ioP2PChecker@@@std@@QAEXPAUPacketData@ioP2PChecker@@AAU23@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUPacketData@ioP2PChecker@@@?$allocator@UPacketData@ioP2PChecker@@@std@@QAEXPAUPacketData@ioP2PChecker@@AAU23@@Z PROC ; std::allocator<ioP2PChecker::PacketData>::construct<ioP2PChecker::PacketData &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN3@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	6a 06		 push	 6
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN3@construct:
  00015	5f		 pop	 edi

; 209  : 		}

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
??$construct@AAUPacketData@ioP2PChecker@@@?$allocator@UPacketData@ioP2PChecker@@@std@@QAEXPAUPacketData@ioP2PChecker@@AAU23@@Z ENDP ; std::allocator<ioP2PChecker::PacketData>::construct<ioP2PChecker::PacketData &>
_TEXT	ENDS
PUBLIC	??$forward@ABUPacketData@ioP2PChecker@@@std@@YAABUPacketData@ioP2PChecker@@ABU12@@Z ; std::forward<ioP2PChecker::PacketData const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUPacketData@ioP2PChecker@@@std@@YAABUPacketData@ioP2PChecker@@ABU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUPacketData@ioP2PChecker@@@std@@YAABUPacketData@ioP2PChecker@@ABU12@@Z PROC ; std::forward<ioP2PChecker::PacketData const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUPacketData@ioP2PChecker@@@std@@YAABUPacketData@ioP2PChecker@@ABU12@@Z ENDP ; std::forward<ioP2PChecker::PacketData const &>
_TEXT	ENDS
PUBLIC	??$forward@AAURecvLog@ioP2PChecker@@@std@@YAAAURecvLog@ioP2PChecker@@AAU12@@Z ; std::forward<ioP2PChecker::RecvLog &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@AAURecvLog@ioP2PChecker@@@std@@YAAAURecvLog@ioP2PChecker@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAURecvLog@ioP2PChecker@@@std@@YAAAURecvLog@ioP2PChecker@@AAU12@@Z PROC ; std::forward<ioP2PChecker::RecvLog &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAURecvLog@ioP2PChecker@@@std@@YAAAURecvLog@ioP2PChecker@@AAU12@@Z ENDP ; std::forward<ioP2PChecker::RecvLog &>
_TEXT	ENDS
PUBLIC	??$forward@ABURecvLog@ioP2PChecker@@@std@@YAABURecvLog@ioP2PChecker@@ABU12@@Z ; std::forward<ioP2PChecker::RecvLog const &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@ABURecvLog@ioP2PChecker@@@std@@YAABURecvLog@ioP2PChecker@@ABU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABURecvLog@ioP2PChecker@@@std@@YAABURecvLog@ioP2PChecker@@ABU12@@Z PROC ; std::forward<ioP2PChecker::RecvLog const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABURecvLog@ioP2PChecker@@@std@@YAABURecvLog@ioP2PChecker@@ABU12@@Z ENDP ; std::forward<ioP2PChecker::RecvLog const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UPacketData@ioP2PChecker@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUPacketData@ioP2PChecker@@0@Z ; std::_Ptr_cat<ioP2PChecker::PacketData,ioP2PChecker::PacketData>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UPacketData@ioP2PChecker@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUPacketData@ioP2PChecker@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UPacketData@ioP2PChecker@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUPacketData@ioP2PChecker@@0@Z PROC ; std::_Ptr_cat<ioP2PChecker::PacketData,ioP2PChecker::PacketData>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UPacketData@ioP2PChecker@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUPacketData@ioP2PChecker@@0@Z ENDP ; std::_Ptr_cat<ioP2PChecker::PacketData,ioP2PChecker::PacketData>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@URecvLog@ioP2PChecker@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAURecvLog@ioP2PChecker@@0@Z ; std::_Ptr_cat<ioP2PChecker::RecvLog,ioP2PChecker::RecvLog>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@URecvLog@ioP2PChecker@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAURecvLog@ioP2PChecker@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@URecvLog@ioP2PChecker@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAURecvLog@ioP2PChecker@@0@Z PROC ; std::_Ptr_cat<ioP2PChecker::RecvLog,ioP2PChecker::RecvLog>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@URecvLog@ioP2PChecker@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAURecvLog@ioP2PChecker@@0@Z ENDP ; std::_Ptr_cat<ioP2PChecker::RecvLog,ioP2PChecker::RecvLog>
_TEXT	ENDS
PUBLIC	??$_Construct@UPacketData@ioP2PChecker@@ABU12@@std@@YAXPAUPacketData@ioP2PChecker@@ABU12@@Z ; std::_Construct<ioP2PChecker::PacketData,ioP2PChecker::PacketData const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UPacketData@ioP2PChecker@@ABU12@@std@@YAXPAUPacketData@ioP2PChecker@@ABU12@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UPacketData@ioP2PChecker@@ABU12@@std@@YAXPAUPacketData@ioP2PChecker@@ABU12@@Z PROC ; std::_Construct<ioP2PChecker::PacketData,ioP2PChecker::PacketData const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN3@Construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	6a 06		 push	 6
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN3@Construct:
  00015	5f		 pop	 edi

; 49   : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Construct@UPacketData@ioP2PChecker@@ABU12@@std@@YAXPAUPacketData@ioP2PChecker@@ABU12@@Z ENDP ; std::_Construct<ioP2PChecker::PacketData,ioP2PChecker::PacketData const &>
_TEXT	ENDS
PUBLIC	??0RecvLog@ioP2PChecker@@QAE@ABU01@@Z		; ioP2PChecker::RecvLog::RecvLog
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0RecvLog@ioP2PChecker@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0RecvLog@ioP2PChecker@@QAE@ABU01@@Z PROC		; ioP2PChecker::RecvLog::RecvLog, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00011	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00014	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00017	5f		 pop	 edi
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??0RecvLog@ioP2PChecker@@QAE@ABU01@@Z ENDP		; ioP2PChecker::RecvLog::RecvLog
_TEXT	ENDS
PUBLIC	??4RecvLog@ioP2PChecker@@QAEAAU01@ABU01@@Z	; ioP2PChecker::RecvLog::operator=
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??4RecvLog@ioP2PChecker@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4RecvLog@ioP2PChecker@@QAEAAU01@ABU01@@Z PROC		; ioP2PChecker::RecvLog::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  00011	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00014	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00017	5f		 pop	 edi
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??4RecvLog@ioP2PChecker@@QAEAAU01@ABU01@@Z ENDP		; ioP2PChecker::RecvLog::operator=
_TEXT	ENDS
PUBLIC	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBEPAUPacketData@ioP2PChecker@@XZ ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::_Unchecked
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBEPAUPacketData@ioP2PChecker@@XZ
_TEXT	SEGMENT
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBEPAUPacketData@ioP2PChecker@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::_Unchecked, COMDAT
; _this$ = ecx

; 317  : 		return (_Unchecked_type(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 318  : 		}

  00002	c3		 ret	 0
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBEPAUPacketData@ioP2PChecker@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::_Unchecked
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	??$move@AAUPacketData@ioP2PChecker@@@std@@YA$$QAUPacketData@ioP2PChecker@@AAU12@@Z ; std::move<ioP2PChecker::PacketData &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUPacketData@ioP2PChecker@@@std@@YA$$QAUPacketData@ioP2PChecker@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUPacketData@ioP2PChecker@@@std@@YA$$QAUPacketData@ioP2PChecker@@AAU12@@Z PROC ; std::move<ioP2PChecker::PacketData &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUPacketData@ioP2PChecker@@@std@@YA$$QAUPacketData@ioP2PChecker@@AAU12@@Z ENDP ; std::move<ioP2PChecker::PacketData &>
_TEXT	ENDS
PUBLIC	??$move@AAURecvLog@ioP2PChecker@@@std@@YA$$QAURecvLog@ioP2PChecker@@AAU12@@Z ; std::move<ioP2PChecker::RecvLog &>
; Function compile flags: /Ogsp
;	COMDAT ??$move@AAURecvLog@ioP2PChecker@@@std@@YA$$QAURecvLog@ioP2PChecker@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAURecvLog@ioP2PChecker@@@std@@YA$$QAURecvLog@ioP2PChecker@@AAU12@@Z PROC ; std::move<ioP2PChecker::RecvLog &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAURecvLog@ioP2PChecker@@@std@@YA$$QAURecvLog@ioP2PChecker@@AAU12@@Z ENDP ; std::move<ioP2PChecker::RecvLog &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUPacketData@ioP2PChecker@@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@@Z ; std::_Val_type<ioP2PChecker::PacketData *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUPacketData@ioP2PChecker@@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUPacketData@ioP2PChecker@@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@@Z PROC ; std::_Val_type<ioP2PChecker::PacketData *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUPacketData@ioP2PChecker@@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@@Z ENDP ; std::_Val_type<ioP2PChecker::PacketData *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAURecvLog@ioP2PChecker@@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@@Z ; std::_Val_type<ioP2PChecker::RecvLog *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Val_type@PAURecvLog@ioP2PChecker@@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAURecvLog@ioP2PChecker@@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@@Z PROC ; std::_Val_type<ioP2PChecker::RecvLog *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAURecvLog@ioP2PChecker@@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@@Z ENDP ; std::_Val_type<ioP2PChecker::RecvLog *>
_TEXT	ENDS
PUBLIC	?base@?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@XZ ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >::base
; Function compile flags: /Ogsp
;	COMDAT ?base@?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?base@?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@XZ PROC ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >::base, COMDAT
; _this$ = ecx

; 1038 : 		{	// return wrapped iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1039 : 		return (current);

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1040 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?base@?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@XZ ENDP ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >::base
_TEXT	ENDS
PUBLIC	??$_Unchecked@PAUPacketData@ioP2PChecker@@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@@Z ; std::_Unchecked<ioP2PChecker::PacketData *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Unchecked@PAUPacketData@ioP2PChecker@@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUPacketData@ioP2PChecker@@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@@Z PROC ; std::_Unchecked<ioP2PChecker::PacketData *>, COMDAT

; 266  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 267  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 268  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAUPacketData@ioP2PChecker@@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@@Z ENDP ; std::_Unchecked<ioP2PChecker::PacketData *>
_TEXT	ENDS
PUBLIC	??$_Dist_type@PAUPacketData@ioP2PChecker@@@std@@YAPAHPAUPacketData@ioP2PChecker@@@Z ; std::_Dist_type<ioP2PChecker::PacketData *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dist_type@PAUPacketData@ioP2PChecker@@@std@@YAPAHPAUPacketData@ioP2PChecker@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAUPacketData@ioP2PChecker@@@std@@YAPAHPAUPacketData@ioP2PChecker@@@Z PROC ; std::_Dist_type<ioP2PChecker::PacketData *>, COMDAT

; 850  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 851  : 	}

  00002	c3		 ret	 0
??$_Dist_type@PAUPacketData@ioP2PChecker@@@std@@YAPAHPAUPacketData@ioP2PChecker@@@Z ENDP ; std::_Dist_type<ioP2PChecker::PacketData *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UPacketData@ioP2PChecker@@@std@@YAXPAUPacketData@ioP2PChecker@@@Z ; std::_Destroy<ioP2PChecker::PacketData>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UPacketData@ioP2PChecker@@@std@@YAXPAUPacketData@ioP2PChecker@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UPacketData@ioP2PChecker@@@std@@YAXPAUPacketData@ioP2PChecker@@@Z PROC ; std::_Destroy<ioP2PChecker::PacketData>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UPacketData@ioP2PChecker@@@std@@YAXPAUPacketData@ioP2PChecker@@@Z ENDP ; std::_Destroy<ioP2PChecker::PacketData>
_TEXT	ENDS
PUBLIC	??_GRecvLog@ioP2PChecker@@QAEPAXI@Z		; ioP2PChecker::RecvLog::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GRecvLog@ioP2PChecker@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GRecvLog@ioP2PChecker@@QAEPAXI@Z PROC		; ioP2PChecker::RecvLog::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0000c	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00010	74 07		 je	 SHORT $LN1@scalar@2
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@2:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_GRecvLog@ioP2PChecker@@QAEPAXI@Z ENDP		; ioP2PChecker::RecvLog::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$forward@AAPAUPacketData@ioP2PChecker@@@std@@YAAAPAUPacketData@ioP2PChecker@@AAPAU12@@Z ; std::forward<ioP2PChecker::PacketData * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAPAUPacketData@ioP2PChecker@@@std@@YAAAPAUPacketData@ioP2PChecker@@AAPAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAUPacketData@ioP2PChecker@@@std@@YAAAPAUPacketData@ioP2PChecker@@AAPAU12@@Z PROC ; std::forward<ioP2PChecker::PacketData * &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAUPacketData@ioP2PChecker@@@std@@YAAAPAUPacketData@ioP2PChecker@@AAPAU12@@Z ENDP ; std::forward<ioP2PChecker::PacketData * &>
_TEXT	ENDS
PUBLIC	??$?0AAPAUPacketData@ioP2PChecker@@AAPAU01@@?$_Pair_base@PAUPacketData@ioP2PChecker@@PAU12@@std@@QAE@AAPAUPacketData@ioP2PChecker@@0@Z ; std::_Pair_base<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>::_Pair_base<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *><ioP2PChecker::PacketData * &,ioP2PChecker::PacketData * &>
; Function compile flags: /Ogsp
;	COMDAT ??$?0AAPAUPacketData@ioP2PChecker@@AAPAU01@@?$_Pair_base@PAUPacketData@ioP2PChecker@@PAU12@@std@@QAE@AAPAUPacketData@ioP2PChecker@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAUPacketData@ioP2PChecker@@AAPAU01@@?$_Pair_base@PAUPacketData@ioP2PChecker@@PAU12@@std@@QAE@AAPAUPacketData@ioP2PChecker@@0@Z PROC ; std::_Pair_base<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>::_Pair_base<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *><ioP2PChecker::PacketData * &,ioP2PChecker::PacketData * &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00011	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 164  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAPAUPacketData@ioP2PChecker@@AAPAU01@@?$_Pair_base@PAUPacketData@ioP2PChecker@@PAU12@@std@@QAE@AAPAUPacketData@ioP2PChecker@@0@Z ENDP ; std::_Pair_base<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>::_Pair_base<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *><ioP2PChecker::PacketData * &,ioP2PChecker::PacketData * &>
_TEXT	ENDS
PUBLIC	??$_Move@AAUPacketData@ioP2PChecker@@@std@@YA$$QAUPacketData@ioP2PChecker@@AAU12@@Z ; std::_Move<ioP2PChecker::PacketData &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@AAUPacketData@ioP2PChecker@@@std@@YA$$QAUPacketData@ioP2PChecker@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAUPacketData@ioP2PChecker@@@std@@YA$$QAUPacketData@ioP2PChecker@@AAU12@@Z PROC ; std::_Move<ioP2PChecker::PacketData &>, COMDAT

; 94   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAUPacketData@ioP2PChecker@@@std@@YA$$QAUPacketData@ioP2PChecker@@AAU12@@Z ENDP ; std::_Move<ioP2PChecker::PacketData &>
_TEXT	ENDS
PUBLIC	??$forward@UPacketData@ioP2PChecker@@@std@@YA$$QAUPacketData@ioP2PChecker@@AAU12@@Z ; std::forward<ioP2PChecker::PacketData>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@UPacketData@ioP2PChecker@@@std@@YA$$QAUPacketData@ioP2PChecker@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UPacketData@ioP2PChecker@@@std@@YA$$QAUPacketData@ioP2PChecker@@AAU12@@Z PROC ; std::forward<ioP2PChecker::PacketData>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UPacketData@ioP2PChecker@@@std@@YA$$QAUPacketData@ioP2PChecker@@AAU12@@Z ENDP ; std::forward<ioP2PChecker::PacketData>
_TEXT	ENDS
PUBLIC	??$forward@URecvLog@ioP2PChecker@@@std@@YA$$QAURecvLog@ioP2PChecker@@AAU12@@Z ; std::forward<ioP2PChecker::RecvLog>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@URecvLog@ioP2PChecker@@@std@@YA$$QAURecvLog@ioP2PChecker@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@URecvLog@ioP2PChecker@@@std@@YA$$QAURecvLog@ioP2PChecker@@AAU12@@Z PROC ; std::forward<ioP2PChecker::RecvLog>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@URecvLog@ioP2PChecker@@@std@@YA$$QAURecvLog@ioP2PChecker@@AAU12@@Z ENDP ; std::forward<ioP2PChecker::RecvLog>
_TEXT	ENDS
PUBLIC	??$_Move_backward@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move_backward@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move_backward@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move_backward<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>, COMDAT

; 2617 : 	{	// move [_First, _Last) backwards to [..., _Dest), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2618 : 	while (_First != _Last)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	39 45 08	 cmp	 DWORD PTR __First$[ebp], eax
  00009	74 1a		 je	 SHORT $LN9@Move_backw
  0000b	56		 push	 esi
  0000c	57		 push	 edi
$LL2@Move_backw:

; 2619 : 		*--_Dest = _STD move(*--_Last);

  0000d	83 6d 10 18	 sub	 DWORD PTR __Dest$[ebp], 24 ; 00000018H
  00011	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00014	83 e8 18	 sub	 eax, 24			; 00000018H
  00017	6a 06		 push	 6
  00019	59		 pop	 ecx
  0001a	8b f0		 mov	 esi, eax
  0001c	f3 a5		 rep movsd
  0001e	3b 45 08	 cmp	 eax, DWORD PTR __First$[ebp]
  00021	75 ea		 jne	 SHORT $LL2@Move_backw
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
$LN9@Move_backw:

; 2620 : 	return (_Dest);

  00025	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2621 : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Move_backward@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move_backward<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>
_TEXT	ENDS
PUBLIC	??0PacketData@ioP2PChecker@@QAE@XZ		; ioP2PChecker::PacketData::PacketData
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iop2pchecker.h
;	COMDAT ??0PacketData@ioP2PChecker@@QAE@XZ
_TEXT	SEGMENT
??0PacketData@ioP2PChecker@@QAE@XZ PROC			; ioP2PChecker::PacketData::PacketData, COMDAT
; _this$ = ecx

; 17   : 		PacketData()

  00000	8b c1		 mov	 eax, ecx

; 18   : 		{
; 19   : 			m_dwID = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 20   : 			m_iSendCount = 0;

  00006	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00009	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 21   : 			m_iRecvCount = 0;

  0000c	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0000f	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 22   : 		}

  00012	c3		 ret	 0
??0PacketData@ioP2PChecker@@QAE@XZ ENDP			; ioP2PChecker::PacketData::PacketData
_TEXT	ENDS
PUBLIC	??RPacketSendSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketSendSort::operator()
; Function compile flags: /Ogsp
;	COMDAT ??RPacketSendSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z
_TEXT	SEGMENT
_lhs$ = 8						; size = 4
_rhs$ = 12						; size = 4
??RPacketSendSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z PROC ; ioP2PChecker::PacketSendSort::operator(), COMDAT
; _this$ = ecx

; 32   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 33   : 			if( lhs.m_iSendCount == 0 )

  00005	8b 75 08	 mov	 esi, DWORD PTR _lhs$[ebp]
  00008	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  0000b	57		 push	 edi
  0000c	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  0000f	8b c3		 mov	 eax, ebx
  00011	0b c7		 or	 eax, edi

; 34   : 				return false;

  00013	74 25		 je	 SHORT $LN1@operator

; 35   : 			if( lhs.m_iSendCount > rhs.m_iSendCount )

  00015	8b 45 0c	 mov	 eax, DWORD PTR _rhs$[ebp]
  00018	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0001b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001e	3b fa		 cmp	 edi, edx
  00020	7c 0a		 jl	 SHORT $LN4@operator
  00022	7f 04		 jg	 SHORT $LN8@operator
  00024	3b d9		 cmp	 ebx, ecx
  00026	76 06		 jbe	 SHORT $LN9@operator
$LN8@operator:

; 36   : 			{
; 37   : 				return true;

  00028	b0 01		 mov	 al, 1
  0002a	eb 10		 jmp	 SHORT $LN6@operator
$LN4@operator:

; 38   : 			}				
; 39   : 			else if( lhs.m_iSendCount == rhs.m_iSendCount )

  0002c	3b d9		 cmp	 ebx, ecx
$LN9@operator:
  0002e	75 0a		 jne	 SHORT $LN1@operator
  00030	3b fa		 cmp	 edi, edx
  00032	75 06		 jne	 SHORT $LN1@operator

; 40   : 			{
; 41   : 				if( lhs.m_dwID < rhs.m_dwID )

  00034	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00036	3b 08		 cmp	 ecx, DWORD PTR [eax]

; 42   : 					return true;

  00038	72 ee		 jb	 SHORT $LN8@operator
$LN1@operator:

; 43   : 			}
; 44   : 			return false;

  0003a	32 c0		 xor	 al, al
$LN6@operator:
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx

; 45   : 		}

  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
??RPacketSendSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ENDP ; ioP2PChecker::PacketSendSort::operator()
_TEXT	ENDS
PUBLIC	??RPacketRecvSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketRecvSort::operator()
; Function compile flags: /Ogsp
;	COMDAT ??RPacketRecvSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z
_TEXT	SEGMENT
_lhs$ = 8						; size = 4
_rhs$ = 12						; size = 4
??RPacketRecvSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z PROC ; ioP2PChecker::PacketRecvSort::operator(), COMDAT
; _this$ = ecx

; 52   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 53   : 			if( lhs.m_iRecvCount == 0 )

  00005	8b 75 08	 mov	 esi, DWORD PTR _lhs$[ebp]
  00008	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  0000b	57		 push	 edi
  0000c	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0000f	8b c3		 mov	 eax, ebx
  00011	0b c7		 or	 eax, edi

; 54   : 				return false;

  00013	74 25		 je	 SHORT $LN1@operator@2

; 55   : 			if( lhs.m_iRecvCount > rhs.m_iRecvCount )

  00015	8b 45 0c	 mov	 eax, DWORD PTR _rhs$[ebp]
  00018	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0001b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0001e	3b fa		 cmp	 edi, edx
  00020	7c 0a		 jl	 SHORT $LN4@operator@2
  00022	7f 04		 jg	 SHORT $LN8@operator@2
  00024	3b d9		 cmp	 ebx, ecx
  00026	76 06		 jbe	 SHORT $LN9@operator@2
$LN8@operator@2:

; 56   : 			{
; 57   : 				return true;

  00028	b0 01		 mov	 al, 1
  0002a	eb 10		 jmp	 SHORT $LN6@operator@2
$LN4@operator@2:

; 58   : 			}				
; 59   : 			else if( lhs.m_iRecvCount == rhs.m_iRecvCount )

  0002c	3b d9		 cmp	 ebx, ecx
$LN9@operator@2:
  0002e	75 0a		 jne	 SHORT $LN1@operator@2
  00030	3b fa		 cmp	 edi, edx
  00032	75 06		 jne	 SHORT $LN1@operator@2

; 60   : 			{
; 61   : 				if( lhs.m_dwID < rhs.m_dwID )

  00034	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00036	3b 08		 cmp	 ecx, DWORD PTR [eax]

; 62   : 					return true;

  00038	72 ee		 jb	 SHORT $LN8@operator@2
$LN1@operator@2:

; 63   : 			}
; 64   : 			return false;

  0003a	32 c0		 xor	 al, al
$LN6@operator@2:
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx

; 65   : 		}

  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
??RPacketRecvSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ENDP ; ioP2PChecker::PacketRecvSort::operator()
_TEXT	ENDS
PUBLIC	??0RecvLog@ioP2PChecker@@QAE@XZ			; ioP2PChecker::RecvLog::RecvLog
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0RecvLog@ioP2PChecker@@QAE@XZ
_TEXT	SEGMENT
??0RecvLog@ioP2PChecker@@QAE@XZ PROC			; ioP2PChecker::RecvLog::RecvLog, COMDAT
; _this$ = ecx

; 75   : 		RecvLog()

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 76   : 		{
; 77   : 			m_dwColor = 0xFFFFB400;

  00009	c7 46 10 00 b4
	ff ff		 mov	 DWORD PTR [esi+16], -19456 ; ffffb400H

; 78   : 		}

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi
  00013	c3		 ret	 0
??0RecvLog@ioP2PChecker@@QAE@XZ ENDP			; ioP2PChecker::RecvLog::RecvLog
_TEXT	ENDS
PUBLIC	?IsRecvLog@ioP2PChecker@@QAE_NXZ		; ioP2PChecker::IsRecvLog
; Function compile flags: /Ogsp
;	COMDAT ?IsRecvLog@ioP2PChecker@@QAE_NXZ
_TEXT	SEGMENT
?IsRecvLog@ioP2PChecker@@QAE_NXZ PROC			; ioP2PChecker::IsRecvLog, COMDAT
; _this$ = ecx

; 89   : 	bool IsRecvLog(){ return m_bView; }

  00000	8a 41 28	 mov	 al, BYTE PTR [ecx+40]
  00003	c3		 ret	 0
?IsRecvLog@ioP2PChecker@@QAE_NXZ ENDP			; ioP2PChecker::IsRecvLog
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?GetSingleton@ioP2PChecker@@SAAAV1@XZ		; ioP2PChecker::GetSingleton
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iop2pchecker.cpp
;	COMDAT ?GetSingleton@ioP2PChecker@@SAAAV1@XZ
_TEXT	SEGMENT
?GetSingleton@ioP2PChecker@@SAAAV1@XZ PROC		; ioP2PChecker::GetSingleton, COMDAT

; 21   : 	return Singleton< ioP2PChecker >::GetSingleton();

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_Singleton@?$Singleton@VioP2PChecker@@@@1PAVioP2PChecker@@A ; Singleton<ioP2PChecker>::ms_Singleton

; 22   : }

  00005	c3		 ret	 0
?GetSingleton@ioP2PChecker@@SAAAV1@XZ ENDP		; ioP2PChecker::GetSingleton
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >, COMDAT
; _this$ = ecx

; 298  : 	_Vector_iterator()

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0

; 299  : 		{	// construct with null vector pointer
; 300  : 		}

  00005	c3		 ret	 0
??0?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBEAAUPacketData@ioP2PChecker@@XZ ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBEAAUPacketData@ioP2PChecker@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBEAAUPacketData@ioP2PChecker@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBEAAUPacketData@ioP2PChecker@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator*
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE@V?$allocator@UPacketData@ioP2PChecker@@@1@@Z ; std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE@V?$allocator@UPacketData@ioP2PChecker@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE@V?$allocator@UPacketData@ioP2PChecker@@@1@@Z PROC ; std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE@V?$allocator@UPacketData@ioP2PChecker@@@1@@Z ENDP ; std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE@V?$allocator@URecvLog@ioP2PChecker@@@1@@Z ; std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE@V?$allocator@URecvLog@ioP2PChecker@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE@V?$allocator@URecvLog@ioP2PChecker@@@1@@Z PROC ; std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE@V?$allocator@URecvLog@ioP2PChecker@@@1@@Z ENDP ; std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 18	 add	 DWORD PTR [eax], 24	; 00000018H

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator++
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator==
_TEXT	ENDS
PUBLIC	??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@1@@Z ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > > >::reverse_iterator<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@1@@Z PROC ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > > >::reverse_iterator<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > > >, COMDAT
; _this$ = ecx

; 1249 : 		{	// construct wrapped iterator from _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1250 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@1@@Z ENDP ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > > >::reverse_iterator<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > > >
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QBEAAURecvLog@ioP2PChecker@@XZ ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QBEAAURecvLog@ioP2PChecker@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QBEAAURecvLog@ioP2PChecker@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QBEAAURecvLog@ioP2PChecker@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::operator*
_TEXT	ENDS
PUBLIC	??F?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::operator--
; Function compile flags: /Ogsp
;	COMDAT ??F?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::operator--, COMDAT
; _this$ = ecx

; 344  : 		{	// predecrement

  00000	8b c1		 mov	 eax, ecx

; 345  : 		--*(_Mybase *)this;

  00002	83 00 ec	 add	 DWORD PTR [eax], -20	; ffffffecH

; 346  : 		return (*this);
; 347  : 		}

  00005	c3		 ret	 0
??F?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::operator--
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QBEIXZ ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QBEIXZ PROC ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IBEII@Z ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IBEII@Z PROC ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 18		 push	 24			; 00000018H
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba aa aa aa 0a	 mov	 edx, 178956970		; 0aaaaaaaH
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00026	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Grow_to@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IBEII@Z ENDP ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Grow_to
_TEXT	ENDS
PUBLIC	?max_size@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QBEIXZ ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QBEIXZ PROC ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IBEII@Z ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IBEII@Z PROC ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 14		 push	 20			; 00000014H
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba cc cc cc 0c	 mov	 edx, 214748364		; 0cccccccH
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to@2
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to@2
$LN4@Grow_to@2:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to@2:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00026	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Grow_to@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IBEII@Z ENDP ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAE@PAUPacketData@ioP2PChecker@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAE@PAUPacketData@ioP2PChecker@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAE@PAUPacketData@ioP2PChecker@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAE@PAUPacketData@ioP2PChecker@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >, COMDAT
; _this$ = ecx

; 298  : 	_Vector_iterator()

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0

; 299  : 		{	// construct with null vector pointer
; 300  : 		}

  00005	c3		 ret	 0
??0?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >
_TEXT	ENDS
PUBLIC	??E?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@std@@QAEAAV01@XZ ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??E?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@std@@QAEAAV01@XZ PROC ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >::operator++, COMDAT
; _this$ = ecx

; 1054 : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 1055 : 		--current;

  00002	83 00 ec	 add	 DWORD PTR [eax], -20	; ffffffecH

; 1056 : 		return (*this);
; 1057 : 		}

  00005	c3		 ret	 0
??E?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@std@@QAEAAV01@XZ ENDP ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >::operator++
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UPacketData@ioP2PChecker@@@std@@QAEPAUPacketData@ioP2PChecker@@I@Z ; std::allocator<ioP2PChecker::PacketData>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UPacketData@ioP2PChecker@@@std@@QAEPAUPacketData@ioP2PChecker@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UPacketData@ioP2PChecker@@@std@@QAEPAUPacketData@ioP2PChecker@@I@Z PROC ; std::allocator<ioP2PChecker::PacketData>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UPacketData@ioP2PChecker@@@std@@YAPAUPacketData@ioP2PChecker@@IPAU12@@Z ; std::_Allocate<ioP2PChecker::PacketData>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UPacketData@ioP2PChecker@@@std@@QAEPAUPacketData@ioP2PChecker@@I@Z ENDP ; std::allocator<ioP2PChecker::PacketData>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEPAURecvLog@ioP2PChecker@@I@Z ; std::allocator<ioP2PChecker::RecvLog>::allocate
; Function compile flags: /Ogsp
;	COMDAT ?allocate@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEPAURecvLog@ioP2PChecker@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEPAURecvLog@ioP2PChecker@@I@Z PROC ; std::allocator<ioP2PChecker::RecvLog>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@URecvLog@ioP2PChecker@@@std@@YAPAURecvLog@ioP2PChecker@@IPAU12@@Z ; std::_Allocate<ioP2PChecker::RecvLog>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEPAURecvLog@ioP2PChecker@@I@Z ENDP ; std::allocator<ioP2PChecker::RecvLog>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QAE@PAURecvLog@ioP2PChecker@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QAE@PAURecvLog@ioP2PChecker@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QAE@PAURecvLog@ioP2PChecker@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QAE@PAURecvLog@ioP2PChecker@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::operator==
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UPacketData@ioP2PChecker@@@std@@UPacketData@ioP2PChecker@@AAU34@@std@@YAXAAV?$allocator@UPacketData@ioP2PChecker@@@0@PAUPacketData@ioP2PChecker@@AAU23@@Z ; std::_Cons_val<std::allocator<ioP2PChecker::PacketData>,ioP2PChecker::PacketData,ioP2PChecker::PacketData &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UPacketData@ioP2PChecker@@@std@@UPacketData@ioP2PChecker@@AAU34@@std@@YAXAAV?$allocator@UPacketData@ioP2PChecker@@@0@PAUPacketData@ioP2PChecker@@AAU23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UPacketData@ioP2PChecker@@@std@@UPacketData@ioP2PChecker@@AAU34@@std@@YAXAAV?$allocator@UPacketData@ioP2PChecker@@@0@PAUPacketData@ioP2PChecker@@AAU23@@Z PROC ; std::_Cons_val<std::allocator<ioP2PChecker::PacketData>,ioP2PChecker::PacketData,ioP2PChecker::PacketData &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN7@Cons_val
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	6a 06		 push	 6
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN7@Cons_val:
  00015	5f		 pop	 edi

; 281  : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Cons_val@V?$allocator@UPacketData@ioP2PChecker@@@std@@UPacketData@ioP2PChecker@@AAU34@@std@@YAXAAV?$allocator@UPacketData@ioP2PChecker@@@0@PAUPacketData@ioP2PChecker@@AAU23@@Z ENDP ; std::_Cons_val<std::allocator<ioP2PChecker::PacketData>,ioP2PChecker::PacketData,ioP2PChecker::PacketData &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UPacketData@ioP2PChecker@@@std@@QAEXPAUPacketData@ioP2PChecker@@ABU34@@Z ; std::allocator<ioP2PChecker::PacketData>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UPacketData@ioP2PChecker@@@std@@QAEXPAUPacketData@ioP2PChecker@@ABU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UPacketData@ioP2PChecker@@@std@@QAEXPAUPacketData@ioP2PChecker@@ABU34@@Z PROC ; std::allocator<ioP2PChecker::PacketData>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN5@construct@2
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	6a 06		 push	 6
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN5@construct@2:
  00015	5f		 pop	 edi

; 198  : 		}

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?construct@?$allocator@UPacketData@ioP2PChecker@@@std@@QAEXPAUPacketData@ioP2PChecker@@ABU34@@Z ENDP ; std::allocator<ioP2PChecker::PacketData>::construct
_TEXT	ENDS
PUBLIC	??G?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@1@@Z ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator-
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??G?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator-, COMDAT
; _this$ = ecx

; 380  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  : 		return (*(_Mybase *)this - _Right);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	6a 18		 push	 24			; 00000018H
  0000c	99		 cdq
  0000d	59		 pop	 ecx
  0000e	f7 f9		 idiv	 ecx

; 382  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??G?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator-
_TEXT	ENDS
PUBLIC	??$_Unchecked@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@YAPAUPacketData@ioP2PChecker@@V?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Unchecked@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@YAPAUPacketData@ioP2PChecker@@V?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
??$_Unchecked@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@YAPAUPacketData@ioP2PChecker@@V?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >, COMDAT

; 393  : 	{	// convert to unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 394  : 	return (_Iter._Unchecked());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iter$[ebp]

; 395  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@YAPAUPacketData@ioP2PChecker@@V?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >
_TEXT	ENDS
PUBLIC	??$construct@AAURecvLog@ioP2PChecker@@@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@AAU23@@Z ; std::allocator<ioP2PChecker::RecvLog>::construct<ioP2PChecker::RecvLog &>
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@AAURecvLog@ioP2PChecker@@@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@AAU23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAURecvLog@ioP2PChecker@@@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@AAU23@@Z$0
__ehfuncinfo$??$construct@AAURecvLog@ioP2PChecker@@@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@AAU23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAURecvLog@ioP2PChecker@@@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@AAU23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@AAURecvLog@ioP2PChecker@@@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@AAU23@@Z
_TEXT	SEGMENT
$T508693 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAURecvLog@ioP2PChecker@@@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@AAU23@@Z PROC ; std::allocator<ioP2PChecker::RecvLog>::construct<ioP2PChecker::RecvLog &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$construct@AAURecvLog@ioP2PChecker@@@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@AAU23@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0000c	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  0000f	89 75 f0	 mov	 DWORD PTR $T508693[ebp], esi
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 f6		 test	 esi, esi
  00018	74 12		 je	 SHORT $LN3@construct@3
  0001a	8b 7d 0c	 mov	 edi, DWORD PTR __Val$[ebp]
  0001d	57		 push	 edi
  0001e	8b ce		 mov	 ecx, esi
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00026	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00029	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN3@construct@3:

; 209  : 		}

  0002c	e8 00 00 00 00	 call	 __EH_epilog3
  00031	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAURecvLog@ioP2PChecker@@@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@AAU23@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T508693[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$construct@AAURecvLog@ioP2PChecker@@@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@AAU23@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAURecvLog@ioP2PChecker@@@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@AAU23@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAURecvLog@ioP2PChecker@@@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@AAU23@@Z ENDP ; std::allocator<ioP2PChecker::RecvLog>::construct<ioP2PChecker::RecvLog &>
PUBLIC	??$_Move@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00009	74 1a		 je	 SHORT $LN10@Move
  0000b	56		 push	 esi
  0000c	57		 push	 edi
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00010	83 45 10 18	 add	 DWORD PTR __Dest$[ebp], 24 ; 00000018H
  00014	8b f0		 mov	 esi, eax
  00016	6a 06		 push	 6
  00018	83 c0 18	 add	 eax, 24			; 00000018H
  0001b	59		 pop	 ecx
  0001c	f3 a5		 rep movsd
  0001e	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00021	75 ea		 jne	 SHORT $LL3@Move
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
$LN10@Move:

; 2515 : 	return (_Dest);

  00025	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Move@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>
_TEXT	ENDS
PUBLIC	??$_Move@PAURecvLog@ioP2PChecker@@PAU12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAURecvLog@ioP2PChecker@@PAU12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAURecvLog@ioP2PChecker@@PAU12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 1a		 jmp	 SHORT $LN13@Move@2
$LL3@Move@2:

; 2514 : 		*_Dest = _STD move(*_First);

  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000c	56		 push	 esi
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  00013	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00016	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00019	83 45 10 14	 add	 DWORD PTR __Dest$[ebp], 20 ; 00000014H
  0001d	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00020	83 c6 14	 add	 esi, 20			; 00000014H
$LN13@Move@2:

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00023	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00026	75 e1		 jne	 SHORT $LL3@Move@2

; 2515 : 	return (_Dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0002b	5e		 pop	 esi

; 2516 : 	}

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Move@PAURecvLog@ioP2PChecker@@PAU12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog *>
_TEXT	ENDS
PUBLIC	??$_Construct@URecvLog@ioP2PChecker@@ABU12@@std@@YAXPAURecvLog@ioP2PChecker@@ABU12@@Z ; std::_Construct<ioP2PChecker::RecvLog,ioP2PChecker::RecvLog const &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??$_Construct@URecvLog@ioP2PChecker@@ABU12@@std@@YAXPAURecvLog@ioP2PChecker@@ABU12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@URecvLog@ioP2PChecker@@ABU12@@std@@YAXPAURecvLog@ioP2PChecker@@ABU12@@Z$0
__ehfuncinfo$??$_Construct@URecvLog@ioP2PChecker@@ABU12@@std@@YAXPAURecvLog@ioP2PChecker@@ABU12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@URecvLog@ioP2PChecker@@ABU12@@std@@YAXPAURecvLog@ioP2PChecker@@ABU12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@URecvLog@ioP2PChecker@@ABU12@@std@@YAXPAURecvLog@ioP2PChecker@@ABU12@@Z
_TEXT	SEGMENT
$T508742 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@URecvLog@ioP2PChecker@@ABU12@@std@@YAXPAURecvLog@ioP2PChecker@@ABU12@@Z PROC ; std::_Construct<ioP2PChecker::RecvLog,ioP2PChecker::RecvLog const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@URecvLog@ioP2PChecker@@ABU12@@std@@YAXPAURecvLog@ioP2PChecker@@ABU12@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  0000f	89 75 08	 mov	 DWORD PTR __Vptr$[ebp], esi

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 75 f0	 mov	 DWORD PTR $T508742[ebp], esi
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 f6		 test	 esi, esi
  0001b	74 12		 je	 SHORT $LN3@Construct@2
  0001d	8b 7d 0c	 mov	 edi, DWORD PTR __Val$[ebp]
  00020	57		 push	 edi
  00021	8b ce		 mov	 ecx, esi
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN3@Construct@2:

; 49   : 	}

  0002f	e8 00 00 00 00	 call	 __EH_epilog3
  00034	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@URecvLog@ioP2PChecker@@ABU12@@std@@YAXPAURecvLog@ioP2PChecker@@ABU12@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T508742[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@URecvLog@ioP2PChecker@@ABU12@@std@@YAXPAURecvLog@ioP2PChecker@@ABU12@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@URecvLog@ioP2PChecker@@ABU12@@std@@YAXPAURecvLog@ioP2PChecker@@ABU12@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@URecvLog@ioP2PChecker@@ABU12@@std@@YAXPAURecvLog@ioP2PChecker@@ABU12@@Z ENDP ; std::_Construct<ioP2PChecker::RecvLog,ioP2PChecker::RecvLog const &>
PUBLIC	??$_Equal@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@std@@QBE_NABV01@@Z ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >::_Equal<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Equal@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$_Equal@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@std@@QBE_NABV01@@Z PROC ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >::_Equal<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >, COMDAT
; _this$ = ecx

; 1081 : 		bool _Equal(const _Revranit<_RanIt2, _Base2>& _Right) const

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1082 : 		{	// test for iterator equality
; 1083 : 		return (current == _Right.base());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	33 d2		 xor	 edx, edx
  0000a	39 01		 cmp	 DWORD PTR [ecx], eax
  0000c	0f 94 c0	 sete	 al

; 1084 : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??$_Equal@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@std@@QBE_NABV01@@Z ENDP ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >::_Equal<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UPacketData@ioP2PChecker@@@std@@QAEXPAUPacketData@ioP2PChecker@@@Z ; std::allocator<ioP2PChecker::PacketData>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UPacketData@ioP2PChecker@@@std@@QAEXPAUPacketData@ioP2PChecker@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UPacketData@ioP2PChecker@@@std@@QAEXPAUPacketData@ioP2PChecker@@@Z PROC ; std::allocator<ioP2PChecker::PacketData>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UPacketData@ioP2PChecker@@@std@@QAEXPAUPacketData@ioP2PChecker@@@Z ENDP ; std::allocator<ioP2PChecker::PacketData>::destroy
_TEXT	ENDS
PUBLIC	??$?0AAPAUPacketData@ioP2PChecker@@AAPAU01@@?$pair@PAUPacketData@ioP2PChecker@@PAU12@@std@@QAE@AAPAUPacketData@ioP2PChecker@@0@Z ; std::pair<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>::pair<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *><ioP2PChecker::PacketData * &,ioP2PChecker::PacketData * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0AAPAUPacketData@ioP2PChecker@@AAPAU01@@?$pair@PAUPacketData@ioP2PChecker@@PAU12@@std@@QAE@AAPAUPacketData@ioP2PChecker@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAUPacketData@ioP2PChecker@@AAPAU01@@?$pair@PAUPacketData@ioP2PChecker@@PAU12@@std@@QAE@AAPAUPacketData@ioP2PChecker@@0@Z PROC ; std::pair<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>::pair<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *><ioP2PChecker::PacketData * &,ioP2PChecker::PacketData * &>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00011	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 248  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAPAUPacketData@ioP2PChecker@@AAPAU01@@?$pair@PAUPacketData@ioP2PChecker@@PAU12@@std@@QAE@AAPAUPacketData@ioP2PChecker@@0@Z ENDP ; std::pair<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>::pair<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *><ioP2PChecker::PacketData * &,ioP2PChecker::PacketData * &>
_TEXT	ENDS
PUBLIC	??$_Destroy@URecvLog@ioP2PChecker@@@std@@YAXPAURecvLog@ioP2PChecker@@@Z ; std::_Destroy<ioP2PChecker::RecvLog>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@URecvLog@ioP2PChecker@@@std@@YAXPAURecvLog@ioP2PChecker@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@URecvLog@ioP2PChecker@@@std@@YAXPAURecvLog@ioP2PChecker@@@Z PROC ; std::_Destroy<ioP2PChecker::RecvLog>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 64   : 	}

  00006	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Destroy@URecvLog@ioP2PChecker@@@std@@YAXPAURecvLog@ioP2PChecker@@@Z ENDP ; std::_Destroy<ioP2PChecker::RecvLog>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UPacketData@ioP2PChecker@@@std@@QAEXPAUPacketData@ioP2PChecker@@$$QAU34@@Z ; std::allocator<ioP2PChecker::PacketData>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UPacketData@ioP2PChecker@@@std@@QAEXPAUPacketData@ioP2PChecker@@$$QAU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UPacketData@ioP2PChecker@@@std@@QAEXPAUPacketData@ioP2PChecker@@$$QAU34@@Z PROC ; std::allocator<ioP2PChecker::PacketData>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN3@construct@4
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	6a 06		 push	 6
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN3@construct@4:
  00015	5f		 pop	 edi

; 203  : 		}

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?construct@?$allocator@UPacketData@ioP2PChecker@@@std@@QAEXPAUPacketData@ioP2PChecker@@$$QAU34@@Z ENDP ; std::allocator<ioP2PChecker::PacketData>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@$$QAU34@@Z ; std::allocator<ioP2PChecker::RecvLog>::construct
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@$$QAU34@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@$$QAU34@@Z$0
__ehfuncinfo$?construct@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@$$QAU34@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@$$QAU34@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@$$QAU34@@Z
_TEXT	SEGMENT
$T508832 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@$$QAU34@@Z PROC ; std::allocator<ioP2PChecker::RecvLog>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?construct@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@$$QAU34@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0000c	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  0000f	89 75 f0	 mov	 DWORD PTR $T508832[ebp], esi
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 f6		 test	 esi, esi
  00018	74 12		 je	 SHORT $LN3@construct@5
  0001a	8b 7d 0c	 mov	 edi, DWORD PTR __Val$[ebp]
  0001d	57		 push	 edi
  0001e	8b ce		 mov	 ecx, esi
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00026	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00029	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN3@construct@5:

; 203  : 		}

  0002c	e8 00 00 00 00	 call	 __EH_epilog3
  00031	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@$$QAU34@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T508832[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$?construct@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@$$QAU34@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@$$QAU34@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@$$QAU34@@Z ENDP ; std::allocator<ioP2PChecker::RecvLog>::construct
PUBLIC	??$swap@UPacketData@ioP2PChecker@@@std@@YAXAAUPacketData@ioP2PChecker@@0@Z ; std::swap<ioP2PChecker::PacketData>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$swap@UPacketData@ioP2PChecker@@@std@@YAXAAUPacketData@ioP2PChecker@@0@Z
_TEXT	SEGMENT
__Tmp$ = -24						; size = 24
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@UPacketData@ioP2PChecker@@@std@@YAXAAUPacketData@ioP2PChecker@@0@Z PROC ; std::swap<ioP2PChecker::PacketData>, COMDAT

; 101  : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi

; 102  : 	_Ty _Tmp = _Move(_Left);

  00007	8b 75 08	 mov	 esi, DWORD PTR __Left$[ebp]
  0000a	57		 push	 edi
  0000b	6a 06		 push	 6
  0000d	59		 pop	 ecx

; 103  : 	_Left = _Move(_Right);

  0000e	6a 06		 push	 6
  00010	8d 7d e8	 lea	 edi, DWORD PTR __Tmp$[ebp]
  00013	f3 a5		 rep movsd
  00015	8b 75 0c	 mov	 esi, DWORD PTR __Right$[ebp]
  00018	8b 7d 08	 mov	 edi, DWORD PTR __Left$[ebp]
  0001b	59		 pop	 ecx
  0001c	f3 a5		 rep movsd

; 104  : 	_Right = _Move(_Tmp);

  0001e	8b 7d 0c	 mov	 edi, DWORD PTR __Right$[ebp]
  00021	6a 06		 push	 6
  00023	59		 pop	 ecx
  00024	8d 75 e8	 lea	 esi, DWORD PTR __Tmp$[ebp]
  00027	f3 a5		 rep movsd
  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi

; 105  : 	}

  0002b	c9		 leave
  0002c	c3		 ret	 0
??$swap@UPacketData@ioP2PChecker@@@std@@YAXAAUPacketData@ioP2PChecker@@0@Z ENDP ; std::swap<ioP2PChecker::PacketData>
_TEXT	ENDS
PUBLIC	??$_Move_backward@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00@Z ; std::_Move_backward<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move_backward@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00@Z
_TEXT	SEGMENT
__Cat$508868 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move_backward@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00@Z PROC ; std::_Move_backward<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>, COMDAT

; 2638 : 	{	// move [_First, _Last) backwards to [..., _Dest), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2639 : 	return (_Move_backward(_First, _Last,
; 2640 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$508868[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move_backward@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2641 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move_backward@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00@Z ENDP ; std::_Move_backward<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>
_TEXT	ENDS
PUBLIC	??$_Push_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@HH$$QAU12@VPacketSendSort@2@@Z ; std::_Push_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketSendSort>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Push_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@HH$$QAU12@VPacketSendSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Push_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@HH$$QAU12@VPacketSendSort@2@@Z PROC ; std::_Push_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketSendSort>, COMDAT

; 2455 : 	{	// percolate _Hole to _Top or where _Val belongs, using operator<

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 2456 : 	for (_Diff _Idx = (_Hole - 1) / 2;

  00006	8b 7d 0c	 mov	 edi, DWORD PTR __Hole$[ebp]
  00009	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  0000c	99		 cdq
  0000d	2b c2		 sub	 eax, edx
  0000f	8b d8		 mov	 ebx, eax
  00011	d1 fb		 sar	 ebx, 1
  00013	eb 2f		 jmp	 SHORT $LN13@Push_heap
$LL3@Push_heap:

; 2457 : 		_Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val);
; 2458 : 		_Idx = (_Hole - 1) / 2)

  00015	ff 75 14	 push	 DWORD PTR __Val$[ebp]
  00018	8b f3		 mov	 esi, ebx
  0001a	6b f6 18	 imul	 esi, 24			; 00000018H
  0001d	03 75 08	 add	 esi, DWORD PTR __First$[ebp]
  00020	8d 4d 18	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00023	56		 push	 esi
  00024	e8 00 00 00 00	 call	 ??RPacketSendSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketSendSort::operator()
  00029	84 c0		 test	 al, al
  0002b	74 1c		 je	 SHORT $LN12@Push_heap

; 2459 : 		{	// move _Hole up to parent
; 2460 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  0002d	6b ff 18	 imul	 edi, 24			; 00000018H
  00030	03 7d 08	 add	 edi, DWORD PTR __First$[ebp]
  00033	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  00036	99		 cdq
  00037	6a 06		 push	 6
  00039	59		 pop	 ecx
  0003a	2b c2		 sub	 eax, edx
  0003c	f3 a5		 rep movsd
  0003e	d1 f8		 sar	 eax, 1

; 2461 : 		_Hole = _Idx;

  00040	8b fb		 mov	 edi, ebx
  00042	8b d8		 mov	 ebx, eax
$LN13@Push_heap:

; 2457 : 		_Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val);
; 2458 : 		_Idx = (_Hole - 1) / 2)

  00044	39 7d 10	 cmp	 DWORD PTR __Top$[ebp], edi
  00047	7c cc		 jl	 SHORT $LL3@Push_heap
$LN12@Push_heap:

; 2462 : 		}
; 2463 : 
; 2464 : 	*(_First + _Hole) = _Move(_Val);	// drop _Val into final hole

  00049	8b 75 14	 mov	 esi, DWORD PTR __Val$[ebp]
  0004c	6b ff 18	 imul	 edi, 24			; 00000018H
  0004f	03 7d 08	 add	 edi, DWORD PTR __First$[ebp]
  00052	6a 06		 push	 6
  00054	59		 pop	 ecx
  00055	f3 a5		 rep movsd
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx

; 2465 : 	}

  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
??$_Push_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@HH$$QAU12@VPacketSendSort@2@@Z ENDP ; std::_Push_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketSendSort>
_TEXT	ENDS
PUBLIC	??$_Push_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@HH$$QAU12@VPacketRecvSort@2@@Z ; std::_Push_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketRecvSort>
; Function compile flags: /Ogsp
;	COMDAT ??$_Push_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@HH$$QAU12@VPacketRecvSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Push_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@HH$$QAU12@VPacketRecvSort@2@@Z PROC ; std::_Push_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketRecvSort>, COMDAT

; 2455 : 	{	// percolate _Hole to _Top or where _Val belongs, using operator<

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 2456 : 	for (_Diff _Idx = (_Hole - 1) / 2;

  00006	8b 7d 0c	 mov	 edi, DWORD PTR __Hole$[ebp]
  00009	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  0000c	99		 cdq
  0000d	2b c2		 sub	 eax, edx
  0000f	8b d8		 mov	 ebx, eax
  00011	d1 fb		 sar	 ebx, 1
  00013	eb 2f		 jmp	 SHORT $LN13@Push_heap@2
$LL3@Push_heap@2:

; 2457 : 		_Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val);
; 2458 : 		_Idx = (_Hole - 1) / 2)

  00015	ff 75 14	 push	 DWORD PTR __Val$[ebp]
  00018	8b f3		 mov	 esi, ebx
  0001a	6b f6 18	 imul	 esi, 24			; 00000018H
  0001d	03 75 08	 add	 esi, DWORD PTR __First$[ebp]
  00020	8d 4d 18	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00023	56		 push	 esi
  00024	e8 00 00 00 00	 call	 ??RPacketRecvSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketRecvSort::operator()
  00029	84 c0		 test	 al, al
  0002b	74 1c		 je	 SHORT $LN12@Push_heap@2

; 2459 : 		{	// move _Hole up to parent
; 2460 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  0002d	6b ff 18	 imul	 edi, 24			; 00000018H
  00030	03 7d 08	 add	 edi, DWORD PTR __First$[ebp]
  00033	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  00036	99		 cdq
  00037	6a 06		 push	 6
  00039	59		 pop	 ecx
  0003a	2b c2		 sub	 eax, edx
  0003c	f3 a5		 rep movsd
  0003e	d1 f8		 sar	 eax, 1

; 2461 : 		_Hole = _Idx;

  00040	8b fb		 mov	 edi, ebx
  00042	8b d8		 mov	 ebx, eax
$LN13@Push_heap@2:

; 2457 : 		_Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val);
; 2458 : 		_Idx = (_Hole - 1) / 2)

  00044	39 7d 10	 cmp	 DWORD PTR __Top$[ebp], edi
  00047	7c cc		 jl	 SHORT $LL3@Push_heap@2
$LN12@Push_heap@2:

; 2462 : 		}
; 2463 : 
; 2464 : 	*(_First + _Hole) = _Move(_Val);	// drop _Val into final hole

  00049	8b 75 14	 mov	 esi, DWORD PTR __Val$[ebp]
  0004c	6b ff 18	 imul	 edi, 24			; 00000018H
  0004f	03 7d 08	 add	 edi, DWORD PTR __First$[ebp]
  00052	6a 06		 push	 6
  00054	59		 pop	 ecx
  00055	f3 a5		 rep movsd
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx

; 2465 : 	}

  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
??$_Push_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@HH$$QAU12@VPacketRecvSort@2@@Z ENDP ; std::_Push_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketRecvSort>
_TEXT	ENDS
PUBLIC	??0?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE@XZ ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE@XZ PROC ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >
_TEXT	ENDS
PUBLIC	??0?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE@XZ ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE@XZ PROC ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator++, COMDAT
; _this$ = ecx

; 337  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 338  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 339  : 		++*this;

  0000a	83 c2 18	 add	 edx, 24			; 00000018H
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 340  : 		return (_Tmp);
; 341  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
??E?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator++
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::operator!=
_TEXT	ENDS
PUBLIC	??D?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@std@@QBEAAURecvLog@ioP2PChecker@@XZ ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??D?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@std@@QBEAAURecvLog@ioP2PChecker@@XZ
_TEXT	SEGMENT
??D?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@std@@QBEAAURecvLog@ioP2PChecker@@XZ PROC ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >::operator*, COMDAT
; _this$ = ecx

; 1044 : 		_RanIt _Tmp = current;
; 1045 : 		return (*--_Tmp);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 e8 14	 sub	 eax, 20			; 00000014H

; 1046 : 		}

  00005	c3		 ret	 0
??D?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@std@@QBEAAURecvLog@ioP2PChecker@@XZ ENDP ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >::operator*
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAE@PAUPacketData@ioP2PChecker@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAE@PAUPacketData@ioP2PChecker@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAE@PAUPacketData@ioP2PChecker@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@QAE@PAUPacketData@ioP2PChecker@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >
_TEXT	ENDS
PUBLIC	??E?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > > >::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??E?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > > >::operator++, COMDAT
; _this$ = ecx

; 1264 : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 1265 : 		++*((_Mybase *)this);

  00002	83 00 ec	 add	 DWORD PTR [eax], -20	; ffffffecH

; 1266 : 		return (*this);
; 1267 : 		}

  00005	c3		 ret	 0
??E?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > > >::operator++
_TEXT	ENDS
PUBLIC	??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@std@@QAE@XZ ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >::_Revranit<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@std@@QAE@XZ PROC ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >::_Revranit<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >, COMDAT
; _this$ = ecx

; 1021 : 	_Revranit()

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0

; 1022 : 		{	// construct with default wrapped iterator
; 1023 : 		}

  00005	c3		 ret	 0
??0?$_Revranit@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@URecvLog@ioP2PChecker@@HPAU34@AAU34@@2@@std@@QAE@XZ ENDP ; std::_Revranit<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >::_Revranit<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::iterator<std::random_access_iterator_tag,ioP2PChecker::RecvLog,int,ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog &> >
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@@Z ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Make_iter
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Make_iter@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@@Z PROC ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@@Z ENDP ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Make_iter
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QAE@PAURecvLog@ioP2PChecker@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QAE@PAURecvLog@ioP2PChecker@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QAE@PAURecvLog@ioP2PChecker@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QAE@PAURecvLog@ioP2PChecker@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UPacketData@ioP2PChecker@@@std@@UPacketData@ioP2PChecker@@ABU34@@std@@YAXAAV?$allocator@UPacketData@ioP2PChecker@@@0@PAUPacketData@ioP2PChecker@@ABU23@@Z ; std::_Cons_val<std::allocator<ioP2PChecker::PacketData>,ioP2PChecker::PacketData,ioP2PChecker::PacketData const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UPacketData@ioP2PChecker@@@std@@UPacketData@ioP2PChecker@@ABU34@@std@@YAXAAV?$allocator@UPacketData@ioP2PChecker@@@0@PAUPacketData@ioP2PChecker@@ABU23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UPacketData@ioP2PChecker@@@std@@UPacketData@ioP2PChecker@@ABU34@@std@@YAXAAV?$allocator@UPacketData@ioP2PChecker@@@0@PAUPacketData@ioP2PChecker@@ABU23@@Z PROC ; std::_Cons_val<std::allocator<ioP2PChecker::PacketData>,ioP2PChecker::PacketData,ioP2PChecker::PacketData const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN9@Cons_val@2
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	6a 06		 push	 6
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN9@Cons_val@2:
  00015	5f		 pop	 edi

; 281  : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Cons_val@V?$allocator@UPacketData@ioP2PChecker@@@std@@UPacketData@ioP2PChecker@@ABU34@@std@@YAXAAV?$allocator@UPacketData@ioP2PChecker@@@0@PAUPacketData@ioP2PChecker@@ABU23@@Z ENDP ; std::_Cons_val<std::allocator<ioP2PChecker::PacketData>,ioP2PChecker::PacketData,ioP2PChecker::PacketData const &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@URecvLog@ioP2PChecker@@@std@@URecvLog@ioP2PChecker@@AAU34@@std@@YAXAAV?$allocator@URecvLog@ioP2PChecker@@@0@PAURecvLog@ioP2PChecker@@AAU23@@Z ; std::_Cons_val<std::allocator<ioP2PChecker::RecvLog>,ioP2PChecker::RecvLog,ioP2PChecker::RecvLog &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@URecvLog@ioP2PChecker@@@std@@URecvLog@ioP2PChecker@@AAU34@@std@@YAXAAV?$allocator@URecvLog@ioP2PChecker@@@0@PAURecvLog@ioP2PChecker@@AAU23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@URecvLog@ioP2PChecker@@@std@@URecvLog@ioP2PChecker@@AAU34@@std@@YAXAAV?$allocator@URecvLog@ioP2PChecker@@@0@PAURecvLog@ioP2PChecker@@AAU23@@Z PROC ; std::_Cons_val<std::allocator<ioP2PChecker::RecvLog>,ioP2PChecker::RecvLog,ioP2PChecker::RecvLog &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  0000c	e8 00 00 00 00	 call	 ??$construct@AAURecvLog@ioP2PChecker@@@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@AAU23@@Z ; std::allocator<ioP2PChecker::RecvLog>::construct<ioP2PChecker::RecvLog &>

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@URecvLog@ioP2PChecker@@@std@@URecvLog@ioP2PChecker@@AAU34@@std@@YAXAAV?$allocator@URecvLog@ioP2PChecker@@@0@PAURecvLog@ioP2PChecker@@AAU23@@Z ENDP ; std::_Cons_val<std::allocator<ioP2PChecker::RecvLog>,ioP2PChecker::RecvLog,ioP2PChecker::RecvLog &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00@Z ; std::_Move<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00@Z
_TEXT	SEGMENT
__Cat$509095 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00@Z PROC ; std::_Move<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$509095[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00@Z ENDP ; std::_Move<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>
_TEXT	ENDS
PUBLIC	??$_Move@PAURecvLog@ioP2PChecker@@PAU12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00@Z ; std::_Move<ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAURecvLog@ioP2PChecker@@PAU12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00@Z
_TEXT	SEGMENT
__Cat$509102 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAURecvLog@ioP2PChecker@@PAU12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00@Z PROC ; std::_Move<ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$509102[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAURecvLog@ioP2PChecker@@PAU12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAURecvLog@ioP2PChecker@@PAU12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00@Z ENDP ; std::_Move<ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@ABU34@@Z ; std::allocator<ioP2PChecker::RecvLog>::construct
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@ABU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@ABU34@@Z PROC ; std::allocator<ioP2PChecker::RecvLog>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@URecvLog@ioP2PChecker@@ABU12@@std@@YAXPAURecvLog@ioP2PChecker@@ABU12@@Z ; std::_Construct<ioP2PChecker::RecvLog,ioP2PChecker::RecvLog const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@ABU34@@Z ENDP ; std::allocator<ioP2PChecker::RecvLog>::construct
_TEXT	ENDS
PUBLIC	??$?8V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@V01@@std@@YA_NABV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@0@0@Z ; std::operator==<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$?8V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@V01@@std@@YA_NABV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@V01@@std@@YA_NABV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@0@0@Z PROC ; std::operator==<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > > >, COMDAT

; 1342 : 	{	// test for reverse_iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1343 : 	return (_Left._Equal(_Right));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]
  0000b	33 c9		 xor	 ecx, ecx
  0000d	39 02		 cmp	 DWORD PTR [edx], eax
  0000f	0f 94 c0	 sete	 al

; 1344 : 	}

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??$?8V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@V01@@std@@YA_NABV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@0@0@Z ENDP ; std::operator==<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > > >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UPacketData@ioP2PChecker@@@std@@UPacketData@ioP2PChecker@@@std@@YAXAAV?$allocator@UPacketData@ioP2PChecker@@@0@PAUPacketData@ioP2PChecker@@@Z ; std::_Dest_val<std::allocator<ioP2PChecker::PacketData>,ioP2PChecker::PacketData>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UPacketData@ioP2PChecker@@@std@@UPacketData@ioP2PChecker@@@std@@YAXAAV?$allocator@UPacketData@ioP2PChecker@@@0@PAUPacketData@ioP2PChecker@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UPacketData@ioP2PChecker@@@std@@UPacketData@ioP2PChecker@@@std@@YAXAAV?$allocator@UPacketData@ioP2PChecker@@@0@PAUPacketData@ioP2PChecker@@@Z PROC ; std::_Dest_val<std::allocator<ioP2PChecker::PacketData>,ioP2PChecker::PacketData>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UPacketData@ioP2PChecker@@@std@@UPacketData@ioP2PChecker@@@std@@YAXAAV?$allocator@UPacketData@ioP2PChecker@@@0@PAUPacketData@ioP2PChecker@@@Z ENDP ; std::_Dest_val<std::allocator<ioP2PChecker::PacketData>,ioP2PChecker::PacketData>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@@Z ; std::allocator<ioP2PChecker::RecvLog>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@@Z PROC ; std::allocator<ioP2PChecker::RecvLog>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 214  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?destroy@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@@Z ENDP ; std::allocator<ioP2PChecker::RecvLog>::destroy
_TEXT	ENDS
PUBLIC	??$iter_swap@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAXPAUPacketData@ioP2PChecker@@0@Z ; std::iter_swap<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$iter_swap@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAXPAUPacketData@ioP2PChecker@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAXPAUPacketData@ioP2PChecker@@0@Z PROC ; std::iter_swap<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>, COMDAT

; 2133 : 	{	// swap *_Left and *_Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2135 : 	}

  00003	5d		 pop	 ebp

; 2134 : 	swap(*_Left, *_Right);

  00004	e9 00 00 00 00	 jmp	 ??$swap@UPacketData@ioP2PChecker@@@std@@YAXAAUPacketData@ioP2PChecker@@0@Z ; std::swap<ioP2PChecker::PacketData>
??$iter_swap@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAXPAUPacketData@ioP2PChecker@@0@Z ENDP ; std::iter_swap<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@U12@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@0@Z ; std::_Insertion_sort1<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort,ioP2PChecker::PacketData>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Insertion_sort1@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@U12@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@0@Z
_TEXT	SEGMENT
__Val$507601 = -36					; size = 24
__Next1$507600 = -12					; size = 4
tv205 = -8						; size = 4
__First1$507611 = -4					; size = 4
__Cat$509178 = 8					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
??$_Insertion_sort1@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@U12@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@0@Z PROC ; std::_Insertion_sort1<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort,ioP2PChecker::PacketData>, COMDAT

; 3650 : 	{	// insertion sort [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	53		 push	 ebx

; 3651 : 	if (_First != _Last)

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0000a	3b 5d 0c	 cmp	 ebx, DWORD PTR __Last$[ebp]
  0000d	0f 84 91 00 00
	00		 je	 $LN6@Insertion_

; 3652 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  00013	83 c3 18	 add	 ebx, 24			; 00000018H
  00016	3b 5d 0c	 cmp	 ebx, DWORD PTR __Last$[ebp]
  00019	0f 84 85 00 00
	00		 je	 $LN6@Insertion_
  0001f	8d 43 e8	 lea	 eax, DWORD PTR [ebx-24]
  00022	56		 push	 esi
  00023	89 45 f8	 mov	 DWORD PTR tv205[ebp], eax
  00026	57		 push	 edi
$LL7@Insertion_:

; 3653 : 			{	// order next element
; 3654 : 			_BidIt _Next1 = _Next;
; 3655 : 			_Ty _Val = _Move(*_Next);

  00027	6a 06		 push	 6
  00029	59		 pop	 ecx

; 3656 : 
; 3657 : 			if (_DEBUG_LT_PRED(_Pred, _Val, *_First))

  0002a	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0002d	8b f3		 mov	 esi, ebx
  0002f	8d 7d dc	 lea	 edi, DWORD PTR __Val$507601[ebp]
  00032	8d 45 dc	 lea	 eax, DWORD PTR __Val$507601[ebp]
  00035	f3 a5		 rep movsd
  00037	50		 push	 eax
  00038	8d 4d 10	 lea	 ecx, DWORD PTR __Pred$[ebp]
  0003b	89 5d f4	 mov	 DWORD PTR __Next1$507600[ebp], ebx
  0003e	e8 00 00 00 00	 call	 ??RPacketSendSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketSendSort::operator()
  00043	84 c0		 test	 al, al

; 3658 : 				{	// found new earliest element, move to front
; 3659 : 				_Move_backward(_First, _Next, ++_Next1);

  00045	8b 45 f8	 mov	 eax, DWORD PTR tv205[ebp]
  00048	74 16		 je	 SHORT $LN5@Insertion_
  0004a	ff 75 08	 push	 DWORD PTR __Cat$509178[ebp]
  0004d	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00050	83 c0 30	 add	 eax, 48			; 00000030H
  00053	50		 push	 eax
  00054	53		 push	 ebx
  00055	57		 push	 edi
  00056	e8 00 00 00 00	 call	 ??$_Move_backward@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>
  0005b	83 c4 10	 add	 esp, 16			; 00000010H

; 3660 : 				*_First = _Move(_Val);
; 3661 : 				}
; 3662 : 			else

  0005e	eb 2e		 jmp	 SHORT $LN28@Insertion_
$LN5@Insertion_:

; 3663 : 				{	// look for insertion point after first
; 3664 : 				for (_BidIt _First1 = _Next1;
; 3665 : 					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);
; 3666 : 					_Next1 = _First1)

  00060	89 45 fc	 mov	 DWORD PTR __First1$507611[ebp], eax
  00063	50		 push	 eax
  00064	eb 15		 jmp	 SHORT $LN30@Insertion_
$LL27@Insertion_:

; 3667 : 					*_Next1 = _Move(*_First1);	// move hole down

  00066	8b 75 fc	 mov	 esi, DWORD PTR __First1$507611[ebp]
  00069	8b 45 fc	 mov	 eax, DWORD PTR __First1$507611[ebp]
  0006c	83 6d fc 18	 sub	 DWORD PTR __First1$507611[ebp], 24 ; 00000018H
  00070	6a 06		 push	 6
  00072	59		 pop	 ecx
  00073	ff 75 fc	 push	 DWORD PTR __First1$507611[ebp]
  00076	f3 a5		 rep movsd
  00078	89 45 f4	 mov	 DWORD PTR __Next1$507600[ebp], eax
$LN30@Insertion_:

; 3663 : 				{	// look for insertion point after first
; 3664 : 				for (_BidIt _First1 = _Next1;
; 3665 : 					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);
; 3666 : 					_Next1 = _First1)

  0007b	8d 45 dc	 lea	 eax, DWORD PTR __Val$507601[ebp]
  0007e	50		 push	 eax
  0007f	8d 4d 10	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00082	e8 00 00 00 00	 call	 ??RPacketSendSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketSendSort::operator()

; 3668 : 				*_Next1 = _Move(_Val);	// insert element in hole

  00087	8b 7d f4	 mov	 edi, DWORD PTR __Next1$507600[ebp]
  0008a	84 c0		 test	 al, al
  0008c	75 d8		 jne	 SHORT $LL27@Insertion_
$LN28@Insertion_:

; 3652 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  0008e	83 45 f8 18	 add	 DWORD PTR tv205[ebp], 24 ; 00000018H

; 3668 : 				*_Next1 = _Move(_Val);	// insert element in hole

  00092	6a 06		 push	 6
  00094	83 c3 18	 add	 ebx, 24			; 00000018H
  00097	59		 pop	 ecx
  00098	8d 75 dc	 lea	 esi, DWORD PTR __Val$507601[ebp]
  0009b	f3 a5		 rep movsd
  0009d	3b 5d 0c	 cmp	 ebx, DWORD PTR __Last$[ebp]
  000a0	75 85		 jne	 SHORT $LL7@Insertion_
  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
$LN6@Insertion_:
  000a4	5b		 pop	 ebx

; 3669 : 				}
; 3670 : 			}
; 3671 : 	}

  000a5	c9		 leave
  000a6	c3		 ret	 0
??$_Insertion_sort1@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@U12@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@0@Z ENDP ; std::_Insertion_sort1<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort,ioP2PChecker::PacketData>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@U12@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@0@Z ; std::_Insertion_sort1<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort,ioP2PChecker::PacketData>
; Function compile flags: /Ogsp
;	COMDAT ??$_Insertion_sort1@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@U12@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@0@Z
_TEXT	SEGMENT
__Val$507663 = -36					; size = 24
__Next1$507662 = -12					; size = 4
tv205 = -8						; size = 4
__First1$507666 = -4					; size = 4
__Cat$509212 = 8					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
??$_Insertion_sort1@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@U12@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@0@Z PROC ; std::_Insertion_sort1<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort,ioP2PChecker::PacketData>, COMDAT

; 3650 : 	{	// insertion sort [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	53		 push	 ebx

; 3651 : 	if (_First != _Last)

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0000a	3b 5d 0c	 cmp	 ebx, DWORD PTR __Last$[ebp]
  0000d	0f 84 91 00 00
	00		 je	 $LN6@Insertion_@2

; 3652 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  00013	83 c3 18	 add	 ebx, 24			; 00000018H
  00016	3b 5d 0c	 cmp	 ebx, DWORD PTR __Last$[ebp]
  00019	0f 84 85 00 00
	00		 je	 $LN6@Insertion_@2
  0001f	8d 43 e8	 lea	 eax, DWORD PTR [ebx-24]
  00022	56		 push	 esi
  00023	89 45 f8	 mov	 DWORD PTR tv205[ebp], eax
  00026	57		 push	 edi
$LL7@Insertion_@2:

; 3653 : 			{	// order next element
; 3654 : 			_BidIt _Next1 = _Next;
; 3655 : 			_Ty _Val = _Move(*_Next);

  00027	6a 06		 push	 6
  00029	59		 pop	 ecx

; 3656 : 
; 3657 : 			if (_DEBUG_LT_PRED(_Pred, _Val, *_First))

  0002a	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0002d	8b f3		 mov	 esi, ebx
  0002f	8d 7d dc	 lea	 edi, DWORD PTR __Val$507663[ebp]
  00032	8d 45 dc	 lea	 eax, DWORD PTR __Val$507663[ebp]
  00035	f3 a5		 rep movsd
  00037	50		 push	 eax
  00038	8d 4d 10	 lea	 ecx, DWORD PTR __Pred$[ebp]
  0003b	89 5d f4	 mov	 DWORD PTR __Next1$507662[ebp], ebx
  0003e	e8 00 00 00 00	 call	 ??RPacketRecvSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketRecvSort::operator()
  00043	84 c0		 test	 al, al

; 3658 : 				{	// found new earliest element, move to front
; 3659 : 				_Move_backward(_First, _Next, ++_Next1);

  00045	8b 45 f8	 mov	 eax, DWORD PTR tv205[ebp]
  00048	74 16		 je	 SHORT $LN5@Insertion_@2
  0004a	ff 75 08	 push	 DWORD PTR __Cat$509212[ebp]
  0004d	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00050	83 c0 30	 add	 eax, 48			; 00000030H
  00053	50		 push	 eax
  00054	53		 push	 ebx
  00055	57		 push	 edi
  00056	e8 00 00 00 00	 call	 ??$_Move_backward@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>
  0005b	83 c4 10	 add	 esp, 16			; 00000010H

; 3660 : 				*_First = _Move(_Val);
; 3661 : 				}
; 3662 : 			else

  0005e	eb 2e		 jmp	 SHORT $LN28@Insertion_@2
$LN5@Insertion_@2:

; 3663 : 				{	// look for insertion point after first
; 3664 : 				for (_BidIt _First1 = _Next1;
; 3665 : 					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);
; 3666 : 					_Next1 = _First1)

  00060	89 45 fc	 mov	 DWORD PTR __First1$507666[ebp], eax
  00063	50		 push	 eax
  00064	eb 15		 jmp	 SHORT $LN30@Insertion_@2
$LL27@Insertion_@2:

; 3667 : 					*_Next1 = _Move(*_First1);	// move hole down

  00066	8b 75 fc	 mov	 esi, DWORD PTR __First1$507666[ebp]
  00069	8b 45 fc	 mov	 eax, DWORD PTR __First1$507666[ebp]
  0006c	83 6d fc 18	 sub	 DWORD PTR __First1$507666[ebp], 24 ; 00000018H
  00070	6a 06		 push	 6
  00072	59		 pop	 ecx
  00073	ff 75 fc	 push	 DWORD PTR __First1$507666[ebp]
  00076	f3 a5		 rep movsd
  00078	89 45 f4	 mov	 DWORD PTR __Next1$507662[ebp], eax
$LN30@Insertion_@2:

; 3663 : 				{	// look for insertion point after first
; 3664 : 				for (_BidIt _First1 = _Next1;
; 3665 : 					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);
; 3666 : 					_Next1 = _First1)

  0007b	8d 45 dc	 lea	 eax, DWORD PTR __Val$507663[ebp]
  0007e	50		 push	 eax
  0007f	8d 4d 10	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00082	e8 00 00 00 00	 call	 ??RPacketRecvSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketRecvSort::operator()

; 3668 : 				*_Next1 = _Move(_Val);	// insert element in hole

  00087	8b 7d f4	 mov	 edi, DWORD PTR __Next1$507662[ebp]
  0008a	84 c0		 test	 al, al
  0008c	75 d8		 jne	 SHORT $LL27@Insertion_@2
$LN28@Insertion_@2:

; 3652 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  0008e	83 45 f8 18	 add	 DWORD PTR tv205[ebp], 24 ; 00000018H

; 3668 : 				*_Next1 = _Move(_Val);	// insert element in hole

  00092	6a 06		 push	 6
  00094	83 c3 18	 add	 ebx, 24			; 00000018H
  00097	59		 pop	 ecx
  00098	8d 75 dc	 lea	 esi, DWORD PTR __Val$507663[ebp]
  0009b	f3 a5		 rep movsd
  0009d	3b 5d 0c	 cmp	 ebx, DWORD PTR __Last$[ebp]
  000a0	75 85		 jne	 SHORT $LL7@Insertion_@2
  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
$LN6@Insertion_@2:
  000a4	5b		 pop	 ebx

; 3669 : 				}
; 3670 : 			}
; 3671 : 	}

  000a5	c9		 leave
  000a6	c3		 ret	 0
??$_Insertion_sort1@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@U12@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@0@Z ENDP ; std::_Insertion_sort1<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort,ioP2PChecker::PacketData>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UPacketData@ioP2PChecker@@@std@@UPacketData@ioP2PChecker@@U34@@std@@YAXAAV?$allocator@UPacketData@ioP2PChecker@@@0@PAUPacketData@ioP2PChecker@@$$QAU23@@Z ; std::_Cons_val<std::allocator<ioP2PChecker::PacketData>,ioP2PChecker::PacketData,ioP2PChecker::PacketData>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UPacketData@ioP2PChecker@@@std@@UPacketData@ioP2PChecker@@U34@@std@@YAXAAV?$allocator@UPacketData@ioP2PChecker@@@0@PAUPacketData@ioP2PChecker@@$$QAU23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UPacketData@ioP2PChecker@@@std@@UPacketData@ioP2PChecker@@U34@@std@@YAXAAV?$allocator@UPacketData@ioP2PChecker@@@0@PAUPacketData@ioP2PChecker@@$$QAU23@@Z PROC ; std::_Cons_val<std::allocator<ioP2PChecker::PacketData>,ioP2PChecker::PacketData,ioP2PChecker::PacketData>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0a		 je	 SHORT $LN7@Cons_val@3
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	6a 06		 push	 6
  00011	59		 pop	 ecx
  00012	f3 a5		 rep movsd
  00014	5e		 pop	 esi
$LN7@Cons_val@3:
  00015	5f		 pop	 edi

; 281  : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Cons_val@V?$allocator@UPacketData@ioP2PChecker@@@std@@UPacketData@ioP2PChecker@@U34@@std@@YAXAAV?$allocator@UPacketData@ioP2PChecker@@@0@PAUPacketData@ioP2PChecker@@$$QAU23@@Z ENDP ; std::_Cons_val<std::allocator<ioP2PChecker::PacketData>,ioP2PChecker::PacketData,ioP2PChecker::PacketData>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@URecvLog@ioP2PChecker@@@std@@URecvLog@ioP2PChecker@@U34@@std@@YAXAAV?$allocator@URecvLog@ioP2PChecker@@@0@PAURecvLog@ioP2PChecker@@$$QAU23@@Z ; std::_Cons_val<std::allocator<ioP2PChecker::RecvLog>,ioP2PChecker::RecvLog,ioP2PChecker::RecvLog>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@URecvLog@ioP2PChecker@@@std@@URecvLog@ioP2PChecker@@U34@@std@@YAXAAV?$allocator@URecvLog@ioP2PChecker@@@0@PAURecvLog@ioP2PChecker@@$$QAU23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@URecvLog@ioP2PChecker@@@std@@URecvLog@ioP2PChecker@@U34@@std@@YAXAAV?$allocator@URecvLog@ioP2PChecker@@@0@PAURecvLog@ioP2PChecker@@$$QAU23@@Z PROC ; std::_Cons_val<std::allocator<ioP2PChecker::RecvLog>,ioP2PChecker::RecvLog,ioP2PChecker::RecvLog>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  0000c	e8 00 00 00 00	 call	 ?construct@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@$$QAU34@@Z ; std::allocator<ioP2PChecker::RecvLog>::construct

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@URecvLog@ioP2PChecker@@@std@@URecvLog@ioP2PChecker@@U34@@std@@YAXAAV?$allocator@URecvLog@ioP2PChecker@@@0@PAURecvLog@ioP2PChecker@@$$QAU23@@Z ENDP ; std::_Cons_val<std::allocator<ioP2PChecker::RecvLog>,ioP2PChecker::RecvLog,ioP2PChecker::RecvLog>
_TEXT	ENDS
PUBLIC	??$_Med3@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketSendSort@2@@Z ; std::_Med3<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Med3@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketSendSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Med3@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketSendSort@2@@Z PROC ; std::_Med3<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>, COMDAT

; 3683 : 	{	// sort median of three elements to middle

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3684 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Mid$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000b	57		 push	 edi
  0000c	56		 push	 esi
  0000d	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00010	e8 00 00 00 00	 call	 ??RPacketSendSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketSendSort::operator()
  00015	84 c0		 test	 al, al
  00017	74 09		 je	 SHORT $LN6@Med3

; 3685 : 		_STD iter_swap(_Mid, _First);

  00019	57		 push	 edi
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ??$swap@UPacketData@ioP2PChecker@@@std@@YAXAAUPacketData@ioP2PChecker@@0@Z ; std::swap<ioP2PChecker::PacketData>
  00020	59		 pop	 ecx
  00021	59		 pop	 ecx
$LN6@Med3:

; 3686 : 	if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid))

  00022	56		 push	 esi
  00023	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  00026	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00029	e8 00 00 00 00	 call	 ??RPacketSendSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketSendSort::operator()
  0002e	84 c0		 test	 al, al
  00030	74 0b		 je	 SHORT $LN8@Med3

; 3687 : 		_STD iter_swap(_Last, _Mid);

  00032	56		 push	 esi
  00033	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  00036	e8 00 00 00 00	 call	 ??$swap@UPacketData@ioP2PChecker@@@std@@YAXAAUPacketData@ioP2PChecker@@0@Z ; std::swap<ioP2PChecker::PacketData>
  0003b	59		 pop	 ecx
  0003c	59		 pop	 ecx
$LN8@Med3:

; 3688 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  0003d	57		 push	 edi
  0003e	56		 push	 esi
  0003f	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00042	e8 00 00 00 00	 call	 ??RPacketSendSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketSendSort::operator()
  00047	84 c0		 test	 al, al
  00049	74 09		 je	 SHORT $LN10@Med3

; 3689 : 		_STD iter_swap(_Mid, _First);

  0004b	57		 push	 edi
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 ??$swap@UPacketData@ioP2PChecker@@@std@@YAXAAUPacketData@ioP2PChecker@@0@Z ; std::swap<ioP2PChecker::PacketData>
  00052	59		 pop	 ecx
  00053	59		 pop	 ecx
$LN10@Med3:
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi

; 3690 : 	}

  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
??$_Med3@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketSendSort@2@@Z ENDP ; std::_Med3<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@HH$$QAU12@VPacketSendSort@2@@Z ; std::_Adjust_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketSendSort>
; Function compile flags: /Ogsp
;	COMDAT ??$_Adjust_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@HH$$QAU12@VPacketSendSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Top$ = 12						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Adjust_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@HH$$QAU12@VPacketSendSort@2@@Z PROC ; std::_Adjust_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketSendSort>, COMDAT

; 2565 : 	{	// percolate _Hole to _Bottom, then push _Val, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 2566 : 	_Diff _Top = _Hole;

  00006	8b 7d 0c	 mov	 edi, DWORD PTR __Hole$[ebp]
  00009	89 7d 0c	 mov	 DWORD PTR __Top$[ebp], edi

; 2567 : 	_Diff _Idx = 2 * _Hole + 2;

  0000c	8d 5c 3f 02	 lea	 ebx, DWORD PTR [edi+edi+2]
  00010	eb 33		 jmp	 SHORT $LN17@Adjust_hea
$LL5@Adjust_hea:

; 2570 : 		{	// move _Hole down to larger child
; 2571 : 		if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1))))

  00012	8b c3		 mov	 eax, ebx
  00014	6b c0 18	 imul	 eax, 24			; 00000018H
  00017	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
  0001a	8d 48 e8	 lea	 ecx, DWORD PTR [eax-24]
  0001d	51		 push	 ecx
  0001e	50		 push	 eax
  0001f	8d 4d 18	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00022	e8 00 00 00 00	 call	 ??RPacketSendSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketSendSort::operator()
  00027	84 c0		 test	 al, al
  00029	74 01		 je	 SHORT $LN2@Adjust_hea

; 2572 : 			--_Idx;

  0002b	4b		 dec	 ebx
$LN2@Adjust_hea:

; 2573 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  0002c	8b f3		 mov	 esi, ebx
  0002e	6b ff 18	 imul	 edi, 24			; 00000018H
  00031	6b f6 18	 imul	 esi, 24			; 00000018H
  00034	03 75 08	 add	 esi, DWORD PTR __First$[ebp]
  00037	03 7d 08	 add	 edi, DWORD PTR __First$[ebp]
  0003a	6a 06		 push	 6
  0003c	59		 pop	 ecx
  0003d	f3 a5		 rep movsd

; 2574 : 		_Hole = _Idx;

  0003f	8b fb		 mov	 edi, ebx
  00041	8d 5c 1b 02	 lea	 ebx, DWORD PTR [ebx+ebx+2]
$LN17@Adjust_hea:

; 2568 : 
; 2569 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

  00045	3b 5d 10	 cmp	 ebx, DWORD PTR __Bottom$[ebp]
  00048	7c c8		 jl	 SHORT $LL5@Adjust_hea

; 2575 : 		}
; 2576 : 
; 2577 : 	if (_Idx == _Bottom)

  0004a	75 1b		 jne	 SHORT $LN16@Adjust_hea

; 2578 : 		{	// only child at bottom, move _Hole down to it
; 2579 : 		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));

  0004c	8b 4d 10	 mov	 ecx, DWORD PTR __Bottom$[ebp]
  0004f	6b ff 18	 imul	 edi, 24			; 00000018H
  00052	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00055	6b c9 18	 imul	 ecx, 24			; 00000018H
  00058	8d 74 01 e8	 lea	 esi, DWORD PTR [ecx+eax-24]
  0005c	03 f8		 add	 edi, eax
  0005e	6a 06		 push	 6
  00060	59		 pop	 ecx
  00061	f3 a5		 rep movsd

; 2580 : 		_Hole = _Bottom - 1;

  00063	8b 7d 10	 mov	 edi, DWORD PTR __Bottom$[ebp]
  00066	4f		 dec	 edi
$LN16@Adjust_hea:

; 2581 : 		}
; 2582 : 	_Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);

  00067	ff 75 18	 push	 DWORD PTR __Pred$[ebp]
  0006a	ff 75 14	 push	 DWORD PTR __Val$[ebp]
  0006d	ff 75 0c	 push	 DWORD PTR __Top$[ebp]
  00070	57		 push	 edi
  00071	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00074	e8 00 00 00 00	 call	 ??$_Push_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@HH$$QAU12@VPacketSendSort@2@@Z ; std::_Push_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketSendSort>
  00079	83 c4 14	 add	 esp, 20			; 00000014H
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx

; 2583 : 	}

  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
??$_Adjust_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@HH$$QAU12@VPacketSendSort@2@@Z ENDP ; std::_Adjust_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketSendSort>
_TEXT	ENDS
PUBLIC	??$_Med3@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketRecvSort@2@@Z ; std::_Med3<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>
; Function compile flags: /Ogsp
;	COMDAT ??$_Med3@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketRecvSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Med3@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketRecvSort@2@@Z PROC ; std::_Med3<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>, COMDAT

; 3683 : 	{	// sort median of three elements to middle

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3684 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Mid$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000b	57		 push	 edi
  0000c	56		 push	 esi
  0000d	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00010	e8 00 00 00 00	 call	 ??RPacketRecvSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketRecvSort::operator()
  00015	84 c0		 test	 al, al
  00017	74 09		 je	 SHORT $LN6@Med3@2

; 3685 : 		_STD iter_swap(_Mid, _First);

  00019	57		 push	 edi
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ??$swap@UPacketData@ioP2PChecker@@@std@@YAXAAUPacketData@ioP2PChecker@@0@Z ; std::swap<ioP2PChecker::PacketData>
  00020	59		 pop	 ecx
  00021	59		 pop	 ecx
$LN6@Med3@2:

; 3686 : 	if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid))

  00022	56		 push	 esi
  00023	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  00026	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00029	e8 00 00 00 00	 call	 ??RPacketRecvSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketRecvSort::operator()
  0002e	84 c0		 test	 al, al
  00030	74 0b		 je	 SHORT $LN8@Med3@2

; 3687 : 		_STD iter_swap(_Last, _Mid);

  00032	56		 push	 esi
  00033	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  00036	e8 00 00 00 00	 call	 ??$swap@UPacketData@ioP2PChecker@@@std@@YAXAAUPacketData@ioP2PChecker@@0@Z ; std::swap<ioP2PChecker::PacketData>
  0003b	59		 pop	 ecx
  0003c	59		 pop	 ecx
$LN8@Med3@2:

; 3688 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  0003d	57		 push	 edi
  0003e	56		 push	 esi
  0003f	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00042	e8 00 00 00 00	 call	 ??RPacketRecvSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketRecvSort::operator()
  00047	84 c0		 test	 al, al
  00049	74 09		 je	 SHORT $LN10@Med3@2

; 3689 : 		_STD iter_swap(_Mid, _First);

  0004b	57		 push	 edi
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 ??$swap@UPacketData@ioP2PChecker@@@std@@YAXAAUPacketData@ioP2PChecker@@0@Z ; std::swap<ioP2PChecker::PacketData>
  00052	59		 pop	 ecx
  00053	59		 pop	 ecx
$LN10@Med3@2:
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi

; 3690 : 	}

  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
??$_Med3@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketRecvSort@2@@Z ENDP ; std::_Med3<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@HH$$QAU12@VPacketRecvSort@2@@Z ; std::_Adjust_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketRecvSort>
; Function compile flags: /Ogsp
;	COMDAT ??$_Adjust_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@HH$$QAU12@VPacketRecvSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Top$ = 12						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Adjust_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@HH$$QAU12@VPacketRecvSort@2@@Z PROC ; std::_Adjust_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketRecvSort>, COMDAT

; 2565 : 	{	// percolate _Hole to _Bottom, then push _Val, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 2566 : 	_Diff _Top = _Hole;

  00006	8b 7d 0c	 mov	 edi, DWORD PTR __Hole$[ebp]
  00009	89 7d 0c	 mov	 DWORD PTR __Top$[ebp], edi

; 2567 : 	_Diff _Idx = 2 * _Hole + 2;

  0000c	8d 5c 3f 02	 lea	 ebx, DWORD PTR [edi+edi+2]
  00010	eb 33		 jmp	 SHORT $LN17@Adjust_hea@2
$LL5@Adjust_hea@2:

; 2570 : 		{	// move _Hole down to larger child
; 2571 : 		if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1))))

  00012	8b c3		 mov	 eax, ebx
  00014	6b c0 18	 imul	 eax, 24			; 00000018H
  00017	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
  0001a	8d 48 e8	 lea	 ecx, DWORD PTR [eax-24]
  0001d	51		 push	 ecx
  0001e	50		 push	 eax
  0001f	8d 4d 18	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00022	e8 00 00 00 00	 call	 ??RPacketRecvSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketRecvSort::operator()
  00027	84 c0		 test	 al, al
  00029	74 01		 je	 SHORT $LN2@Adjust_hea@2

; 2572 : 			--_Idx;

  0002b	4b		 dec	 ebx
$LN2@Adjust_hea@2:

; 2573 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  0002c	8b f3		 mov	 esi, ebx
  0002e	6b ff 18	 imul	 edi, 24			; 00000018H
  00031	6b f6 18	 imul	 esi, 24			; 00000018H
  00034	03 75 08	 add	 esi, DWORD PTR __First$[ebp]
  00037	03 7d 08	 add	 edi, DWORD PTR __First$[ebp]
  0003a	6a 06		 push	 6
  0003c	59		 pop	 ecx
  0003d	f3 a5		 rep movsd

; 2574 : 		_Hole = _Idx;

  0003f	8b fb		 mov	 edi, ebx
  00041	8d 5c 1b 02	 lea	 ebx, DWORD PTR [ebx+ebx+2]
$LN17@Adjust_hea@2:

; 2568 : 
; 2569 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

  00045	3b 5d 10	 cmp	 ebx, DWORD PTR __Bottom$[ebp]
  00048	7c c8		 jl	 SHORT $LL5@Adjust_hea@2

; 2575 : 		}
; 2576 : 
; 2577 : 	if (_Idx == _Bottom)

  0004a	75 1b		 jne	 SHORT $LN16@Adjust_hea@2

; 2578 : 		{	// only child at bottom, move _Hole down to it
; 2579 : 		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));

  0004c	8b 4d 10	 mov	 ecx, DWORD PTR __Bottom$[ebp]
  0004f	6b ff 18	 imul	 edi, 24			; 00000018H
  00052	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00055	6b c9 18	 imul	 ecx, 24			; 00000018H
  00058	8d 74 01 e8	 lea	 esi, DWORD PTR [ecx+eax-24]
  0005c	03 f8		 add	 edi, eax
  0005e	6a 06		 push	 6
  00060	59		 pop	 ecx
  00061	f3 a5		 rep movsd

; 2580 : 		_Hole = _Bottom - 1;

  00063	8b 7d 10	 mov	 edi, DWORD PTR __Bottom$[ebp]
  00066	4f		 dec	 edi
$LN16@Adjust_hea@2:

; 2581 : 		}
; 2582 : 	_Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);

  00067	ff 75 18	 push	 DWORD PTR __Pred$[ebp]
  0006a	ff 75 14	 push	 DWORD PTR __Val$[ebp]
  0006d	ff 75 0c	 push	 DWORD PTR __Top$[ebp]
  00070	57		 push	 edi
  00071	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00074	e8 00 00 00 00	 call	 ??$_Push_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@HH$$QAU12@VPacketRecvSort@2@@Z ; std::_Push_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketRecvSort>
  00079	83 c4 14	 add	 esp, 20			; 00000014H
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx

; 2583 : 	}

  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
??$_Adjust_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@HH$$QAU12@VPacketRecvSort@2@@Z ENDP ; std::_Adjust_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketRecvSort>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00$$QAU12@VPacketSendSort@2@PAH@Z ; std::_Pop_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketSendSort>
; Function compile flags: /Ogsp
;	COMDAT ??$_Pop_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00$$QAU12@VPacketSendSort@2@PAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
___formal$ = 28						; size = 4
??$_Pop_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00$$QAU12@VPacketSendSort@2@PAH@Z PROC ; std::_Pop_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketSendSort>, COMDAT

; 2591 : 	{	// pop *_First to *_Dest and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2592 : 	*_Dest = _Move(*_First);
; 2593 : 	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),
; 2594 : 		_Move(_Val), _Pred);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000d	57		 push	 edi
  0000e	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00011	6a 06		 push	 6
  00013	59		 pop	 ecx
  00014	ff 75 18	 push	 DWORD PTR __Pred$[ebp]
  00017	f3 a5		 rep movsd
  00019	ff 75 14	 push	 DWORD PTR __Val$[ebp]
  0001c	99		 cdq
  0001d	6a 18		 push	 24			; 00000018H
  0001f	59		 pop	 ecx
  00020	f7 f9		 idiv	 ecx
  00022	50		 push	 eax
  00023	6a 00		 push	 0
  00025	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00028	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@HH$$QAU12@VPacketSendSort@2@@Z ; std::_Adjust_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketSendSort>
  0002d	83 c4 14	 add	 esp, 20			; 00000014H
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi

; 2595 : 	}

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
??$_Pop_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00$$QAU12@VPacketSendSort@2@PAH@Z ENDP ; std::_Pop_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketSendSort>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00$$QAU12@VPacketRecvSort@2@PAH@Z ; std::_Pop_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketRecvSort>
; Function compile flags: /Ogsp
;	COMDAT ??$_Pop_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00$$QAU12@VPacketRecvSort@2@PAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
___formal$ = 28						; size = 4
??$_Pop_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00$$QAU12@VPacketRecvSort@2@PAH@Z PROC ; std::_Pop_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketRecvSort>, COMDAT

; 2591 : 	{	// pop *_First to *_Dest and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2592 : 	*_Dest = _Move(*_First);
; 2593 : 	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),
; 2594 : 		_Move(_Val), _Pred);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000d	57		 push	 edi
  0000e	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00011	6a 06		 push	 6
  00013	59		 pop	 ecx
  00014	ff 75 18	 push	 DWORD PTR __Pred$[ebp]
  00017	f3 a5		 rep movsd
  00019	ff 75 14	 push	 DWORD PTR __Val$[ebp]
  0001c	99		 cdq
  0001d	6a 18		 push	 24			; 00000018H
  0001f	59		 pop	 ecx
  00020	f7 f9		 idiv	 ecx
  00022	50		 push	 eax
  00023	6a 00		 push	 0
  00025	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00028	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@HH$$QAU12@VPacketRecvSort@2@@Z ; std::_Adjust_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketRecvSort>
  0002d	83 c4 14	 add	 esp, 20			; 00000014H
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi

; 2595 : 	}

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
??$_Pop_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00$$QAU12@VPacketRecvSort@2@PAH@Z ENDP ; std::_Pop_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketRecvSort>
_TEXT	ENDS
PUBLIC	?begin@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@XZ ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@XZ PROC ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@XZ ENDP ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@XZ ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@XZ PROC ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@XZ ENDP ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::end
_TEXT	ENDS
PUBLIC	??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@std@@QAE@XZ ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > > >::reverse_iterator<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > > >::reverse_iterator<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > > >, COMDAT
; _this$ = ecx

; 1243 : 	reverse_iterator()

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0

; 1244 : 		{	// construct with default wrapped iterator
; 1245 : 		}

  00005	c3		 ret	 0
??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > > >::reverse_iterator<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > > >
_TEXT	ENDS
PUBLIC	??E?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > > >::operator++, COMDAT
; _this$ = ecx

; 1270 : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1271 : 		_Myt _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 1272 : 		++*this;

  0000a	83 c2 ec	 add	 edx, -20		; ffffffecH
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 1273 : 		return (_Tmp);
; 1274 : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
??E?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > > >::operator++
_TEXT	ENDS
PUBLIC	?begin@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@XZ ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@XZ PROC ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@XZ ENDP ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@XZ ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@XZ PROC ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@XZ ENDP ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@@Z ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@@Z PROC ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@@Z ENDP ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$?9V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@V01@@std@@YA_NABV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@0@0@Z ; std::operator!=<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$?9V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@V01@@std@@YA_NABV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@V01@@std@@YA_NABV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@0@0@Z PROC ; std::operator!=<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > > >, COMDAT

; 1350 : 	{	// test for reverse_iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1351 : 	return (!(_Left == _Right));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]
  0000b	33 c9		 xor	 ecx, ecx
  0000d	39 02		 cmp	 DWORD PTR [edx], eax
  0000f	0f 95 c0	 setne	 al

; 1352 : 	}

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??$?9V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@V01@@std@@YA_NABV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@0@0@Z ENDP ; std::operator!=<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > >,std::_Vector_iterator<std::_Vector_val<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> > > >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@URecvLog@ioP2PChecker@@@std@@URecvLog@ioP2PChecker@@ABU34@@std@@YAXAAV?$allocator@URecvLog@ioP2PChecker@@@0@PAURecvLog@ioP2PChecker@@ABU23@@Z ; std::_Cons_val<std::allocator<ioP2PChecker::RecvLog>,ioP2PChecker::RecvLog,ioP2PChecker::RecvLog const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@URecvLog@ioP2PChecker@@@std@@URecvLog@ioP2PChecker@@ABU34@@std@@YAXAAV?$allocator@URecvLog@ioP2PChecker@@@0@PAURecvLog@ioP2PChecker@@ABU23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@URecvLog@ioP2PChecker@@@std@@URecvLog@ioP2PChecker@@ABU34@@std@@YAXAAV?$allocator@URecvLog@ioP2PChecker@@@0@PAURecvLog@ioP2PChecker@@ABU23@@Z PROC ; std::_Cons_val<std::allocator<ioP2PChecker::RecvLog>,ioP2PChecker::RecvLog,ioP2PChecker::RecvLog const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@URecvLog@ioP2PChecker@@ABU12@@std@@YAXPAURecvLog@ioP2PChecker@@ABU12@@Z ; std::_Construct<ioP2PChecker::RecvLog,ioP2PChecker::RecvLog const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@URecvLog@ioP2PChecker@@@std@@URecvLog@ioP2PChecker@@ABU34@@std@@YAXAAV?$allocator@URecvLog@ioP2PChecker@@@0@PAURecvLog@ioP2PChecker@@ABU23@@Z ENDP ; std::_Cons_val<std::allocator<ioP2PChecker::RecvLog>,ioP2PChecker::RecvLog,ioP2PChecker::RecvLog const &>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@YAXPAUPacketData@ioP2PChecker@@0AAV?$allocator@UPacketData@ioP2PChecker@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ioP2PChecker::PacketData> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@YAXPAUPacketData@ioP2PChecker@@0AAV?$allocator@UPacketData@ioP2PChecker@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@YAXPAUPacketData@ioP2PChecker@@0AAV?$allocator@UPacketData@ioP2PChecker@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ioP2PChecker::PacketData> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@YAXPAUPacketData@ioP2PChecker@@0AAV?$allocator@UPacketData@ioP2PChecker@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioP2PChecker::PacketData> >
_TEXT	ENDS
PUBLIC	??$_Insertion_sort@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@@Z ; std::_Insertion_sort<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Insertion_sort@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Insertion_sort@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@@Z PROC ; std::_Insertion_sort<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>, COMDAT

; 3676 : 	{	// insertion sort [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3677 : 	_Insertion_sort1(_First, _Last, _Pred, _Val_type(_First));

  00003	6a 00		 push	 0
  00005	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00008	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Insertion_sort1@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@U12@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@0@Z ; std::_Insertion_sort1<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort,ioP2PChecker::PacketData>
  00013	83 c4 10	 add	 esp, 16			; 00000010H

; 3678 : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Insertion_sort@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@@Z ENDP ; std::_Insertion_sort<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@@Z ; std::_Insertion_sort<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>
; Function compile flags: /Ogsp
;	COMDAT ??$_Insertion_sort@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Insertion_sort@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@@Z PROC ; std::_Insertion_sort<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>, COMDAT

; 3676 : 	{	// insertion sort [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3677 : 	_Insertion_sort1(_First, _Last, _Pred, _Val_type(_First));

  00003	6a 00		 push	 0
  00005	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00008	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Insertion_sort1@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@U12@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@0@Z ; std::_Insertion_sort1<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort,ioP2PChecker::PacketData>
  00013	83 c4 10	 add	 esp, 16			; 00000010H

; 3678 : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Insertion_sort@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@@Z ENDP ; std::_Insertion_sort<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUPacketData@ioP2PChecker@@PAU12@V?$allocator@UPacketData@ioP2PChecker@@@std@@U12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00AAV?$allocator@UPacketData@ioP2PChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *,std::allocator<ioP2PChecker::PacketData>,ioP2PChecker::PacketData>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUPacketData@ioP2PChecker@@PAU12@V?$allocator@UPacketData@ioP2PChecker@@@std@@U12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00AAV?$allocator@UPacketData@ioP2PChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUPacketData@ioP2PChecker@@PAU12@V?$allocator@UPacketData@ioP2PChecker@@@std@@U12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00AAV?$allocator@UPacketData@ioP2PChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *,std::allocator<ioP2PChecker::PacketData>,ioP2PChecker::PacketData>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 16		 jmp	 SHORT $LN24@Uninit_mov
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00009	56		 push	 esi
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UPacketData@ioP2PChecker@@@std@@UPacketData@ioP2PChecker@@U34@@std@@YAXAAV?$allocator@UPacketData@ioP2PChecker@@@0@PAUPacketData@ioP2PChecker@@$$QAU23@@Z ; std::_Cons_val<std::allocator<ioP2PChecker::PacketData>,ioP2PChecker::PacketData,ioP2PChecker::PacketData>
  00015	83 45 10 18	 add	 DWORD PTR __Dest$[ebp], 24 ; 00000018H
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	83 c6 18	 add	 esi, 24			; 00000018H
$LN24@Uninit_mov:

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001f	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00022	75 e5		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00024	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00027	5e		 pop	 esi

; 438  : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Uninit_move@PAUPacketData@ioP2PChecker@@PAU12@V?$allocator@UPacketData@ioP2PChecker@@@std@@U12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00AAV?$allocator@UPacketData@ioP2PChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *,std::allocator<ioP2PChecker::PacketData>,ioP2PChecker::PacketData>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@URecvLog@ioP2PChecker@@@std@@URecvLog@ioP2PChecker@@@std@@YAXAAV?$allocator@URecvLog@ioP2PChecker@@@0@PAURecvLog@ioP2PChecker@@@Z ; std::_Dest_val<std::allocator<ioP2PChecker::RecvLog>,ioP2PChecker::RecvLog>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@URecvLog@ioP2PChecker@@@std@@URecvLog@ioP2PChecker@@@std@@YAXAAV?$allocator@URecvLog@ioP2PChecker@@@0@PAURecvLog@ioP2PChecker@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@URecvLog@ioP2PChecker@@@std@@URecvLog@ioP2PChecker@@@std@@YAXAAV?$allocator@URecvLog@ioP2PChecker@@@0@PAURecvLog@ioP2PChecker@@@Z PROC ; std::_Dest_val<std::allocator<ioP2PChecker::RecvLog>,ioP2PChecker::RecvLog>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]

; 288  : 	}

  00006	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Dest_val@V?$allocator@URecvLog@ioP2PChecker@@@std@@URecvLog@ioP2PChecker@@@std@@YAXAAV?$allocator@URecvLog@ioP2PChecker@@@0@PAURecvLog@ioP2PChecker@@@Z ENDP ; std::_Dest_val<std::allocator<ioP2PChecker::RecvLog>,ioP2PChecker::RecvLog>
_TEXT	ENDS
PUBLIC	??$_Median@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketSendSort@2@@Z ; std::_Median<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Median@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketSendSort@2@@Z
_TEXT	SEGMENT
tv200 = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
tv203 = 16						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Median@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketSendSort@2@@Z PROC ; std::_Median<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>, COMDAT

; 3695 : 	{	// sort median element to middle

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3696 : 	if (40 < _Last - _First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000a	56		 push	 esi
  0000b	8b c3		 mov	 eax, ebx
  0000d	2b c1		 sub	 eax, ecx
  0000f	6a 18		 push	 24			; 00000018H
  00011	99		 cdq
  00012	5e		 pop	 esi
  00013	f7 fe		 idiv	 esi
  00015	83 f8 28	 cmp	 eax, 40			; 00000028H
  00018	7e 68		 jle	 SHORT $LN2@Median

; 3697 : 		{	// median of nine
; 3698 : 		size_t _Step = (_Last - _First + 1) / 8;

  0001a	40		 inc	 eax
  0001b	99		 cdq
  0001c	83 e2 07	 and	 edx, 7
  0001f	03 c2		 add	 eax, edx
  00021	57		 push	 edi

; 3699 : 		_Med3(_First, _First + _Step, _First + 2 * _Step, _Pred);

  00022	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00025	c1 f8 03	 sar	 eax, 3
  00028	8b f8		 mov	 edi, eax
  0002a	8b f0		 mov	 esi, eax
  0002c	6b ff 30	 imul	 edi, 48			; 00000030H
  0002f	6b f6 18	 imul	 esi, 24			; 00000018H
  00032	8d 14 0f	 lea	 edx, DWORD PTR [edi+ecx]
  00035	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  00038	52		 push	 edx
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	89 45 08	 mov	 DWORD PTR tv200[ebp], eax
  0003e	e8 00 00 00 00	 call	 ??$_Med3@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketSendSort@2@@Z ; std::_Med3<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>

; 3700 : 		_Med3(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00043	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  00046	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00049	8d 0c 06	 lea	 ecx, DWORD PTR [esi+eax]
  0004c	51		 push	 ecx
  0004d	50		 push	 eax
  0004e	2b c6		 sub	 eax, esi
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$_Med3@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketSendSort@2@@Z ; std::_Med3<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>

; 3701 : 		_Med3(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);

  00056	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00059	89 5d 10	 mov	 DWORD PTR tv203[ebp], ebx
  0005c	29 75 10	 sub	 DWORD PTR tv203[ebp], esi
  0005f	53		 push	 ebx
  00060	ff 75 10	 push	 DWORD PTR tv203[ebp]
  00063	2b df		 sub	 ebx, edi
  00065	53		 push	 ebx
  00066	e8 00 00 00 00	 call	 ??$_Med3@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketSendSort@2@@Z ; std::_Med3<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>

; 3702 : 		_Med3(_First + _Step, _Mid, _Last - _Step, _Pred);

  0006b	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0006e	ff 75 10	 push	 DWORD PTR tv203[ebp]
  00071	ff 75 0c	 push	 DWORD PTR __Mid$[ebp]
  00074	ff 75 08	 push	 DWORD PTR tv200[ebp]
  00077	e8 00 00 00 00	 call	 ??$_Med3@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketSendSort@2@@Z ; std::_Med3<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>
  0007c	83 c4 40	 add	 esp, 64			; 00000040H
  0007f	5f		 pop	 edi

; 3703 : 		}
; 3704 : 	else

  00080	eb 10		 jmp	 SHORT $LN1@Median
$LN2@Median:

; 3705 : 		_Med3(_First, _Mid, _Last, _Pred);

  00082	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00085	53		 push	 ebx
  00086	ff 75 0c	 push	 DWORD PTR __Mid$[ebp]
  00089	51		 push	 ecx
  0008a	e8 00 00 00 00	 call	 ??$_Med3@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketSendSort@2@@Z ; std::_Med3<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>
  0008f	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@Median:
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx

; 3706 : 	}

  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
??$_Median@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketSendSort@2@@Z ENDP ; std::_Median<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>
_TEXT	ENDS
PUBLIC	??$_Make_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@PAH0@Z ; std::_Make_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketSendSort>
; Function compile flags: /Ogsp
;	COMDAT ??$_Make_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@PAH0@Z
_TEXT	SEGMENT
__Val$507566 = -28					; size = 24
__Bottom$ = -4						; size = 4
__First$ = 8						; size = 4
tv149 = 12						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
??$_Make_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@PAH0@Z PROC ; std::_Make_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketSendSort>, COMDAT

; 2658 : 	{	// make nontrivial [_First, _Last) into a heap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 2659 : 	_Diff _Bottom = _Last - _First;

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0000c	53		 push	 ebx
  0000d	99		 cdq
  0000e	6a 18		 push	 24			; 00000018H
  00010	59		 pop	 ecx
  00011	f7 f9		 idiv	 ecx
  00013	89 45 fc	 mov	 DWORD PTR __Bottom$[ebp], eax

; 2660 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

  00016	99		 cdq
  00017	2b c2		 sub	 eax, edx
  00019	8b d8		 mov	 ebx, eax
  0001b	d1 fb		 sar	 ebx, 1
  0001d	85 db		 test	 ebx, ebx
  0001f	7e 3a		 jle	 SHORT $LN1@Make_heap

; 2659 : 	_Diff _Bottom = _Last - _First;

  00021	56		 push	 esi
  00022	8b f3		 mov	 esi, ebx
  00024	6b f6 18	 imul	 esi, 24			; 00000018H
  00027	03 75 08	 add	 esi, DWORD PTR __First$[ebp]
  0002a	57		 push	 edi
  0002b	eb 03		 jmp	 SHORT $LN2@Make_heap
$LL11@Make_heap:
  0002d	8b 75 0c	 mov	 esi, DWORD PTR tv149[ebp]
$LN2@Make_heap:

; 2661 : 		{	// reheap top half, bottom to top
; 2662 : 		--_Hole;
; 2663 : 		_Ty _Val = _Move(*(_First + _Hole));

  00030	6a 06		 push	 6
  00032	59		 pop	 ecx

; 2664 : 		_Adjust_heap(_First, _Hole, _Bottom,
; 2665 : 			_Move(_Val), _Pred);

  00033	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00036	8d 45 e4	 lea	 eax, DWORD PTR __Val$507566[ebp]
  00039	50		 push	 eax
  0003a	ff 75 fc	 push	 DWORD PTR __Bottom$[ebp]
  0003d	4b		 dec	 ebx
  0003e	83 ee 18	 sub	 esi, 24			; 00000018H
  00041	53		 push	 ebx
  00042	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00045	8d 7d e4	 lea	 edi, DWORD PTR __Val$507566[ebp]
  00048	89 75 0c	 mov	 DWORD PTR tv149[ebp], esi
  0004b	f3 a5		 rep movsd
  0004d	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@HH$$QAU12@VPacketSendSort@2@@Z ; std::_Adjust_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketSendSort>
  00052	83 c4 14	 add	 esp, 20			; 00000014H
  00055	85 db		 test	 ebx, ebx
  00057	7f d4		 jg	 SHORT $LL11@Make_heap
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
$LN1@Make_heap:
  0005b	5b		 pop	 ebx

; 2666 : 		}
; 2667 : 	}

  0005c	c9		 leave
  0005d	c3		 ret	 0
??$_Make_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@PAH0@Z ENDP ; std::_Make_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketSendSort>
_TEXT	ENDS
PUBLIC	??$_Median@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketRecvSort@2@@Z ; std::_Median<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>
; Function compile flags: /Ogsp
;	COMDAT ??$_Median@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketRecvSort@2@@Z
_TEXT	SEGMENT
tv200 = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
tv203 = 16						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Median@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketRecvSort@2@@Z PROC ; std::_Median<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>, COMDAT

; 3695 : 	{	// sort median element to middle

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3696 : 	if (40 < _Last - _First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000a	56		 push	 esi
  0000b	8b c3		 mov	 eax, ebx
  0000d	2b c1		 sub	 eax, ecx
  0000f	6a 18		 push	 24			; 00000018H
  00011	99		 cdq
  00012	5e		 pop	 esi
  00013	f7 fe		 idiv	 esi
  00015	83 f8 28	 cmp	 eax, 40			; 00000028H
  00018	7e 68		 jle	 SHORT $LN2@Median@2

; 3697 : 		{	// median of nine
; 3698 : 		size_t _Step = (_Last - _First + 1) / 8;

  0001a	40		 inc	 eax
  0001b	99		 cdq
  0001c	83 e2 07	 and	 edx, 7
  0001f	03 c2		 add	 eax, edx
  00021	57		 push	 edi

; 3699 : 		_Med3(_First, _First + _Step, _First + 2 * _Step, _Pred);

  00022	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00025	c1 f8 03	 sar	 eax, 3
  00028	8b f8		 mov	 edi, eax
  0002a	8b f0		 mov	 esi, eax
  0002c	6b ff 30	 imul	 edi, 48			; 00000030H
  0002f	6b f6 18	 imul	 esi, 24			; 00000018H
  00032	8d 14 0f	 lea	 edx, DWORD PTR [edi+ecx]
  00035	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  00038	52		 push	 edx
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	89 45 08	 mov	 DWORD PTR tv200[ebp], eax
  0003e	e8 00 00 00 00	 call	 ??$_Med3@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketRecvSort@2@@Z ; std::_Med3<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>

; 3700 : 		_Med3(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00043	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  00046	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00049	8d 0c 06	 lea	 ecx, DWORD PTR [esi+eax]
  0004c	51		 push	 ecx
  0004d	50		 push	 eax
  0004e	2b c6		 sub	 eax, esi
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$_Med3@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketRecvSort@2@@Z ; std::_Med3<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>

; 3701 : 		_Med3(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);

  00056	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00059	89 5d 10	 mov	 DWORD PTR tv203[ebp], ebx
  0005c	29 75 10	 sub	 DWORD PTR tv203[ebp], esi
  0005f	53		 push	 ebx
  00060	ff 75 10	 push	 DWORD PTR tv203[ebp]
  00063	2b df		 sub	 ebx, edi
  00065	53		 push	 ebx
  00066	e8 00 00 00 00	 call	 ??$_Med3@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketRecvSort@2@@Z ; std::_Med3<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>

; 3702 : 		_Med3(_First + _Step, _Mid, _Last - _Step, _Pred);

  0006b	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0006e	ff 75 10	 push	 DWORD PTR tv203[ebp]
  00071	ff 75 0c	 push	 DWORD PTR __Mid$[ebp]
  00074	ff 75 08	 push	 DWORD PTR tv200[ebp]
  00077	e8 00 00 00 00	 call	 ??$_Med3@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketRecvSort@2@@Z ; std::_Med3<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>
  0007c	83 c4 40	 add	 esp, 64			; 00000040H
  0007f	5f		 pop	 edi

; 3703 : 		}
; 3704 : 	else

  00080	eb 10		 jmp	 SHORT $LN1@Median@2
$LN2@Median@2:

; 3705 : 		_Med3(_First, _Mid, _Last, _Pred);

  00082	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00085	53		 push	 ebx
  00086	ff 75 0c	 push	 DWORD PTR __Mid$[ebp]
  00089	51		 push	 ecx
  0008a	e8 00 00 00 00	 call	 ??$_Med3@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketRecvSort@2@@Z ; std::_Med3<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>
  0008f	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@Median@2:
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx

; 3706 : 	}

  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
??$_Median@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketRecvSort@2@@Z ENDP ; std::_Median<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>
_TEXT	ENDS
PUBLIC	??$_Make_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@PAH0@Z ; std::_Make_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketRecvSort>
; Function compile flags: /Ogsp
;	COMDAT ??$_Make_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@PAH0@Z
_TEXT	SEGMENT
__Val$507633 = -28					; size = 24
__Bottom$ = -4						; size = 4
__First$ = 8						; size = 4
tv149 = 12						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
??$_Make_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@PAH0@Z PROC ; std::_Make_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketRecvSort>, COMDAT

; 2658 : 	{	// make nontrivial [_First, _Last) into a heap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 2659 : 	_Diff _Bottom = _Last - _First;

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0000c	53		 push	 ebx
  0000d	99		 cdq
  0000e	6a 18		 push	 24			; 00000018H
  00010	59		 pop	 ecx
  00011	f7 f9		 idiv	 ecx
  00013	89 45 fc	 mov	 DWORD PTR __Bottom$[ebp], eax

; 2660 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

  00016	99		 cdq
  00017	2b c2		 sub	 eax, edx
  00019	8b d8		 mov	 ebx, eax
  0001b	d1 fb		 sar	 ebx, 1
  0001d	85 db		 test	 ebx, ebx
  0001f	7e 3a		 jle	 SHORT $LN1@Make_heap@2

; 2659 : 	_Diff _Bottom = _Last - _First;

  00021	56		 push	 esi
  00022	8b f3		 mov	 esi, ebx
  00024	6b f6 18	 imul	 esi, 24			; 00000018H
  00027	03 75 08	 add	 esi, DWORD PTR __First$[ebp]
  0002a	57		 push	 edi
  0002b	eb 03		 jmp	 SHORT $LN2@Make_heap@2
$LL11@Make_heap@2:
  0002d	8b 75 0c	 mov	 esi, DWORD PTR tv149[ebp]
$LN2@Make_heap@2:

; 2661 : 		{	// reheap top half, bottom to top
; 2662 : 		--_Hole;
; 2663 : 		_Ty _Val = _Move(*(_First + _Hole));

  00030	6a 06		 push	 6
  00032	59		 pop	 ecx

; 2664 : 		_Adjust_heap(_First, _Hole, _Bottom,
; 2665 : 			_Move(_Val), _Pred);

  00033	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00036	8d 45 e4	 lea	 eax, DWORD PTR __Val$507633[ebp]
  00039	50		 push	 eax
  0003a	ff 75 fc	 push	 DWORD PTR __Bottom$[ebp]
  0003d	4b		 dec	 ebx
  0003e	83 ee 18	 sub	 esi, 24			; 00000018H
  00041	53		 push	 ebx
  00042	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00045	8d 7d e4	 lea	 edi, DWORD PTR __Val$507633[ebp]
  00048	89 75 0c	 mov	 DWORD PTR tv149[ebp], esi
  0004b	f3 a5		 rep movsd
  0004d	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@HH$$QAU12@VPacketRecvSort@2@@Z ; std::_Adjust_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketRecvSort>
  00052	83 c4 14	 add	 esp, 20			; 00000014H
  00055	85 db		 test	 ebx, ebx
  00057	7f d4		 jg	 SHORT $LL11@Make_heap@2
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
$LN1@Make_heap@2:
  0005b	5b		 pop	 ebx

; 2666 : 		}
; 2667 : 	}

  0005c	c9		 leave
  0005d	c3		 ret	 0
??$_Make_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@PAH0@Z ENDP ; std::_Make_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketRecvSort>
_TEXT	ENDS
PUBLIC	??$_Pop_heap_0@PAUPacketData@ioP2PChecker@@U12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@0@Z ; std::_Pop_heap_0<ioP2PChecker::PacketData *,ioP2PChecker::PacketData,ioP2PChecker::PacketSendSort>
; Function compile flags: /Ogsp
;	COMDAT ??$_Pop_heap_0@PAUPacketData@ioP2PChecker@@U12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@0@Z
_TEXT	SEGMENT
__Val$ = -24						; size = 24
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
??$_Pop_heap_0@PAUPacketData@ioP2PChecker@@U12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@0@Z PROC ; std::_Pop_heap_0<ioP2PChecker::PacketData *,ioP2PChecker::PacketData,ioP2PChecker::PacketSendSort>, COMDAT

; 2601 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2602 : 	_Ty _Val = _Move(*(_Last - 1));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	83 ec 18	 sub	 esp, 24			; 00000018H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	6a 06		 push	 6
  0000d	59		 pop	 ecx
  0000e	83 c0 e8	 add	 eax, -24		; ffffffe8H

; 2603 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2604 : 		_Move(_Val), _Pred, _Dist_type(_First));

  00011	6a 00		 push	 0
  00013	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00016	8b f0		 mov	 esi, eax
  00018	8d 7d e8	 lea	 edi, DWORD PTR __Val$[ebp]
  0001b	f3 a5		 rep movsd
  0001d	8d 4d e8	 lea	 ecx, DWORD PTR __Val$[ebp]
  00020	51		 push	 ecx
  00021	50		 push	 eax
  00022	50		 push	 eax
  00023	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00026	e8 00 00 00 00	 call	 ??$_Pop_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00$$QAU12@VPacketSendSort@2@PAH@Z ; std::_Pop_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketSendSort>
  0002b	83 c4 18	 add	 esp, 24			; 00000018H
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi

; 2605 : 	}

  00030	c9		 leave
  00031	c3		 ret	 0
??$_Pop_heap_0@PAUPacketData@ioP2PChecker@@U12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@0@Z ENDP ; std::_Pop_heap_0<ioP2PChecker::PacketData *,ioP2PChecker::PacketData,ioP2PChecker::PacketSendSort>
_TEXT	ENDS
PUBLIC	??$_Pop_heap_0@PAUPacketData@ioP2PChecker@@U12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@0@Z ; std::_Pop_heap_0<ioP2PChecker::PacketData *,ioP2PChecker::PacketData,ioP2PChecker::PacketRecvSort>
; Function compile flags: /Ogsp
;	COMDAT ??$_Pop_heap_0@PAUPacketData@ioP2PChecker@@U12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@0@Z
_TEXT	SEGMENT
__Val$ = -24						; size = 24
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
??$_Pop_heap_0@PAUPacketData@ioP2PChecker@@U12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@0@Z PROC ; std::_Pop_heap_0<ioP2PChecker::PacketData *,ioP2PChecker::PacketData,ioP2PChecker::PacketRecvSort>, COMDAT

; 2601 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2602 : 	_Ty _Val = _Move(*(_Last - 1));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	83 ec 18	 sub	 esp, 24			; 00000018H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	6a 06		 push	 6
  0000d	59		 pop	 ecx
  0000e	83 c0 e8	 add	 eax, -24		; ffffffe8H

; 2603 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2604 : 		_Move(_Val), _Pred, _Dist_type(_First));

  00011	6a 00		 push	 0
  00013	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00016	8b f0		 mov	 esi, eax
  00018	8d 7d e8	 lea	 edi, DWORD PTR __Val$[ebp]
  0001b	f3 a5		 rep movsd
  0001d	8d 4d e8	 lea	 ecx, DWORD PTR __Val$[ebp]
  00020	51		 push	 ecx
  00021	50		 push	 eax
  00022	50		 push	 eax
  00023	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00026	e8 00 00 00 00	 call	 ??$_Pop_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00$$QAU12@VPacketRecvSort@2@PAH@Z ; std::_Pop_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketRecvSort>
  0002b	83 c4 18	 add	 esp, 24			; 00000018H
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi

; 2605 : 	}

  00030	c9		 leave
  00031	c3		 ret	 0
??$_Pop_heap_0@PAUPacketData@ioP2PChecker@@U12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@0@Z ENDP ; std::_Pop_heap_0<ioP2PChecker::PacketData *,ioP2PChecker::PacketData,ioP2PChecker::PacketRecvSort>
_TEXT	ENDS
PUBLIC	?rbegin@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@2@XZ ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::rbegin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?rbegin@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?rbegin@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@2@XZ PROC ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::rbegin, COMDAT
; _this$ = ecx

; 806  : 		{	// return iterator for beginning of reversed mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 807  : 		return (reverse_iterator(end()));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 808  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?rbegin@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@2@XZ ENDP ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::rbegin
_TEXT	ENDS
PUBLIC	?rend@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@2@XZ ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::rend
; Function compile flags: /Ogsp
;	COMDAT ?rend@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?rend@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@2@XZ PROC ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::rend, COMDAT
; _this$ = ecx

; 816  : 		{	// return iterator for end of reversed mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 817  : 		return (reverse_iterator(begin()));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 818  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?rend@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@std@@@2@XZ ENDP ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::rend
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@YAXPAUPacketData@ioP2PChecker@@0AAV?$allocator@UPacketData@ioP2PChecker@@@0@@Z ; std::_Destroy_range<std::allocator<ioP2PChecker::PacketData> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@YAXPAUPacketData@ioP2PChecker@@0AAV?$allocator@UPacketData@ioP2PChecker@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@YAXPAUPacketData@ioP2PChecker@@0AAV?$allocator@UPacketData@ioP2PChecker@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ioP2PChecker::PacketData> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@YAXPAUPacketData@ioP2PChecker@@0AAV?$allocator@UPacketData@ioP2PChecker@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioP2PChecker::PacketData> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUPacketData@ioP2PChecker@@PAU12@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00AAV?$allocator@UPacketData@ioP2PChecker@@@0@@Z ; std::_Uninitialized_move<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *,std::allocator<ioP2PChecker::PacketData> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUPacketData@ioP2PChecker@@PAU12@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00AAV?$allocator@UPacketData@ioP2PChecker@@@0@@Z
_TEXT	SEGMENT
__Cat$509762 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUPacketData@ioP2PChecker@@PAU12@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00AAV?$allocator@UPacketData@ioP2PChecker@@@0@@Z PROC ; std::_Uninitialized_move<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *,std::allocator<ioP2PChecker::PacketData> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$509762[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUPacketData@ioP2PChecker@@PAU12@V?$allocator@UPacketData@ioP2PChecker@@@std@@U12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00AAV?$allocator@UPacketData@ioP2PChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *,std::allocator<ioP2PChecker::PacketData>,ioP2PChecker::PacketData>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAUPacketData@ioP2PChecker@@PAU12@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00AAV?$allocator@UPacketData@ioP2PChecker@@@0@@Z ENDP ; std::_Uninitialized_move<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *,std::allocator<ioP2PChecker::PacketData> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@YAXPAURecvLog@ioP2PChecker@@0AAV?$allocator@URecvLog@ioP2PChecker@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ioP2PChecker::RecvLog> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@YAXPAURecvLog@ioP2PChecker@@0AAV?$allocator@URecvLog@ioP2PChecker@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@YAXPAURecvLog@ioP2PChecker@@0AAV?$allocator@URecvLog@ioP2PChecker@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ioP2PChecker::RecvLog> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN20@Destroy_ra
$LL3@Destroy_ra:

; 97   : 		_Dest_val(_Al, _First);

  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 14	 add	 esi, 20			; 00000014H
$LN20@Destroy_ra:

; 96   : 	for (; _First != _Last; ++_First)

  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL3@Destroy_ra
  00019	5e		 pop	 esi

; 98   : 	}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Destroy_range@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@YAXPAURecvLog@ioP2PChecker@@0AAV?$allocator@URecvLog@ioP2PChecker@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioP2PChecker::RecvLog> >
_TEXT	ENDS
PUBLIC	??$_Unguarded_partition@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YA?AU?$pair@PAUPacketData@ioP2PChecker@@PAU12@@0@PAUPacketData@ioP2PChecker@@0VPacketSendSort@3@@Z ; std::_Unguarded_partition<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Unguarded_partition@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YA?AU?$pair@PAUPacketData@ioP2PChecker@@PAU12@@0@PAUPacketData@ioP2PChecker@@0VPacketSendSort@3@@Z
_TEXT	SEGMENT
tv352 = -8						; size = 4
tv264 = -8						; size = 4
__Glast$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Unguarded_partition@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YA?AU?$pair@PAUPacketData@ioP2PChecker@@PAU12@@0@PAUPacketData@ioP2PChecker@@0VPacketSendSort@3@@Z PROC ; std::_Unguarded_partition<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>, COMDAT

; 3712 : 	{	// partition [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 3713 : 	_RanIt _Mid = _First + (_Last - _First) / 2;

  00005	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00008	53		 push	 ebx
  00009	8b 5d 0c	 mov	 ebx, DWORD PTR __First$[ebp]
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b c1		 mov	 eax, ecx
  00010	2b c3		 sub	 eax, ebx
  00012	6a 18		 push	 24			; 00000018H
  00014	5e		 pop	 esi
  00015	99		 cdq
  00016	f7 fe		 idiv	 esi

; 3714 : 	_Median(_First, _Mid, _Last - 1, _Pred);

  00018	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0001b	83 c1 e8	 add	 ecx, -24		; ffffffe8H
  0001e	51		 push	 ecx
  0001f	99		 cdq
  00020	2b c2		 sub	 eax, edx
  00022	8b f0		 mov	 esi, eax
  00024	d1 fe		 sar	 esi, 1
  00026	6b f6 18	 imul	 esi, 24			; 00000018H
  00029	03 f3		 add	 esi, ebx
  0002b	56		 push	 esi
  0002c	53		 push	 ebx
  0002d	e8 00 00 00 00	 call	 ??$_Median@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketSendSort@2@@Z ; std::_Median<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 3715 : 	_RanIt _Pfirst = _Mid;
; 3716 : 	_RanIt _Plast = _Pfirst + 1;

  00035	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
  00038	eb 27		 jmp	 SHORT $LN72@Unguarded_
$LL27@Unguarded_:

; 3717 : 
; 3718 : 	while (_First < _Pfirst
; 3719 : 		&& !_DEBUG_LT_PRED(_Pred, *(_Pfirst - 1), *_Pfirst)
; 3720 : 		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))

  0003a	8d 46 e8	 lea	 eax, DWORD PTR [esi-24]
  0003d	56		 push	 esi
  0003e	50		 push	 eax
  0003f	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00042	89 45 f8	 mov	 DWORD PTR tv264[ebp], eax
  00045	e8 00 00 00 00	 call	 ??RPacketSendSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketSendSort::operator()
  0004a	84 c0		 test	 al, al
  0004c	75 38		 jne	 SHORT $LN73@Unguarded_
  0004e	ff 75 f8	 push	 DWORD PTR tv264[ebp]
  00051	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00054	56		 push	 esi
  00055	e8 00 00 00 00	 call	 ??RPacketSendSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketSendSort::operator()
  0005a	84 c0		 test	 al, al
  0005c	75 28		 jne	 SHORT $LN73@Unguarded_

; 3721 : 		--_Pfirst;

  0005e	8b 75 f8	 mov	 esi, DWORD PTR tv264[ebp]
$LN72@Unguarded_:

; 3717 : 
; 3718 : 	while (_First < _Pfirst
; 3719 : 		&& !_DEBUG_LT_PRED(_Pred, *(_Pfirst - 1), *_Pfirst)
; 3720 : 		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))

  00061	3b de		 cmp	 ebx, esi
  00063	72 d5		 jb	 SHORT $LL27@Unguarded_

; 3725 : 		++_Plast;

  00065	eb 1f		 jmp	 SHORT $LN73@Unguarded_
$LL25@Unguarded_:

; 3722 : 	while (_Plast < _Last
; 3723 : 		&& !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst)
; 3724 : 		&& !_Pred(*_Pfirst, *_Plast))

  00067	56		 push	 esi
  00068	57		 push	 edi
  00069	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  0006c	e8 00 00 00 00	 call	 ??RPacketSendSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketSendSort::operator()
  00071	84 c0		 test	 al, al
  00073	75 16		 jne	 SHORT $LN24@Unguarded_
  00075	57		 push	 edi
  00076	56		 push	 esi
  00077	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  0007a	e8 00 00 00 00	 call	 ??RPacketSendSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketSendSort::operator()
  0007f	84 c0		 test	 al, al
  00081	75 08		 jne	 SHORT $LN24@Unguarded_

; 3725 : 		++_Plast;

  00083	83 c7 18	 add	 edi, 24			; 00000018H
$LN73@Unguarded_:

; 3722 : 	while (_Plast < _Last
; 3723 : 		&& !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst)
; 3724 : 		&& !_Pred(*_Pfirst, *_Plast))

  00086	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  00089	72 dc		 jb	 SHORT $LL25@Unguarded_
$LN24@Unguarded_:

; 3726 : 
; 3727 : 	_RanIt _Gfirst = _Plast;

  0008b	8b df		 mov	 ebx, edi

; 3728 : 	_RanIt _Glast = _Pfirst;

  0008d	89 75 fc	 mov	 DWORD PTR __Glast$[ebp], esi

; 3729 : 
; 3730 : 	for (; ; )
; 3731 : 		{	// partition
; 3732 : 		for (; _Gfirst < _Last; ++_Gfirst)

  00090	eb 2d		 jmp	 SHORT $LN75@Unguarded_
$LL21@Unguarded_:

; 3733 : 			if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst))

  00092	53		 push	 ebx
  00093	56		 push	 esi
  00094	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00097	e8 00 00 00 00	 call	 ??RPacketSendSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketSendSort::operator()
  0009c	84 c0		 test	 al, al
  0009e	75 1c		 jne	 SHORT $LN20@Unguarded_

; 3734 : 				;
; 3735 : 			else if (_Pred(*_Gfirst, *_Pfirst))

  000a0	56		 push	 esi
  000a1	53		 push	 ebx
  000a2	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000a5	e8 00 00 00 00	 call	 ??RPacketSendSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketSendSort::operator()
  000aa	84 c0		 test	 al, al
  000ac	75 16		 jne	 SHORT $LN69@Unguarded_

; 3736 : 				break;
; 3737 : 			else
; 3738 : 				_STD iter_swap(_Plast++, _Gfirst);

  000ae	8b c7		 mov	 eax, edi
  000b0	53		 push	 ebx
  000b1	83 c7 18	 add	 edi, 24			; 00000018H
  000b4	50		 push	 eax
$LN76@Unguarded_:
  000b5	e8 00 00 00 00	 call	 ??$swap@UPacketData@ioP2PChecker@@@std@@YAXAAUPacketData@ioP2PChecker@@0@Z ; std::swap<ioP2PChecker::PacketData>
  000ba	59		 pop	 ecx
  000bb	59		 pop	 ecx
$LN20@Unguarded_:

; 3729 : 
; 3730 : 	for (; ; )
; 3731 : 		{	// partition
; 3732 : 		for (; _Gfirst < _Last; ++_Gfirst)

  000bc	83 c3 18	 add	 ebx, 24			; 00000018H
$LN75@Unguarded_:
  000bf	3b 5d 10	 cmp	 ebx, DWORD PTR __Last$[ebp]
  000c2	72 ce		 jb	 SHORT $LL21@Unguarded_
$LN69@Unguarded_:

; 3739 : 		for (; _First < _Glast; --_Glast)

  000c4	8b 45 fc	 mov	 eax, DWORD PTR __Glast$[ebp]
  000c7	39 45 0c	 cmp	 DWORD PTR __First$[ebp], eax
  000ca	73 44		 jae	 SHORT $LN71@Unguarded_
  000cc	83 c0 e8	 add	 eax, -24		; ffffffe8H
  000cf	89 45 f8	 mov	 DWORD PTR tv352[ebp], eax
$LL70@Unguarded_:

; 3740 : 			if (_DEBUG_LT_PRED(_Pred, *(_Glast - 1), *_Pfirst))

  000d2	56		 push	 esi
  000d3	ff 75 f8	 push	 DWORD PTR tv352[ebp]
  000d6	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000d9	e8 00 00 00 00	 call	 ??RPacketSendSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketSendSort::operator()
  000de	84 c0		 test	 al, al
  000e0	75 1e		 jne	 SHORT $LN13@Unguarded_

; 3741 : 				;
; 3742 : 			else if (_Pred(*_Pfirst, *(_Glast - 1)))

  000e2	ff 75 f8	 push	 DWORD PTR tv352[ebp]
  000e5	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000e8	56		 push	 esi
  000e9	e8 00 00 00 00	 call	 ??RPacketSendSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketSendSort::operator()
  000ee	84 c0		 test	 al, al
  000f0	75 1e		 jne	 SHORT $LN71@Unguarded_

; 3743 : 				break;
; 3744 : 			else
; 3745 : 				_STD iter_swap(--_Pfirst, _Glast - 1);

  000f2	ff 75 f8	 push	 DWORD PTR tv352[ebp]
  000f5	83 ee 18	 sub	 esi, 24			; 00000018H
  000f8	56		 push	 esi
  000f9	e8 00 00 00 00	 call	 ??$swap@UPacketData@ioP2PChecker@@@std@@YAXAAUPacketData@ioP2PChecker@@0@Z ; std::swap<ioP2PChecker::PacketData>
  000fe	59		 pop	 ecx
  000ff	59		 pop	 ecx
$LN13@Unguarded_:

; 3739 : 		for (; _First < _Glast; --_Glast)

  00100	83 6d fc 18	 sub	 DWORD PTR __Glast$[ebp], 24 ; 00000018H
  00104	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00107	83 6d f8 18	 sub	 DWORD PTR tv352[ebp], 24 ; 00000018H
  0010b	3b 45 fc	 cmp	 eax, DWORD PTR __Glast$[ebp]
  0010e	72 c2		 jb	 SHORT $LL70@Unguarded_
$LN71@Unguarded_:

; 3746 : 		if (_Glast == _First && _Gfirst == _Last)

  00110	8b 45 fc	 mov	 eax, DWORD PTR __Glast$[ebp]
  00113	3b 45 0c	 cmp	 eax, DWORD PTR __First$[ebp]
  00116	75 1f		 jne	 SHORT $LN6@Unguarded_
  00118	3b 5d 10	 cmp	 ebx, DWORD PTR __Last$[ebp]
  0011b	74 4d		 je	 SHORT $LN64@Unguarded_

; 3748 : 
; 3749 : 		if (_Glast == _First)
; 3750 : 			{	// no room at bottom, rotate pivot upward
; 3751 : 			if (_Plast != _Gfirst)

  0011d	3b fb		 cmp	 edi, ebx
  0011f	74 09		 je	 SHORT $LN46@Unguarded_

; 3752 : 				_STD iter_swap(_Pfirst, _Plast);

  00121	57		 push	 edi
  00122	56		 push	 esi
  00123	e8 00 00 00 00	 call	 ??$swap@UPacketData@ioP2PChecker@@@std@@YAXAAUPacketData@ioP2PChecker@@0@Z ; std::swap<ioP2PChecker::PacketData>
  00128	59		 pop	 ecx
  00129	59		 pop	 ecx
$LN46@Unguarded_:

; 3753 : 			++_Plast;
; 3754 : 			_STD iter_swap(_Pfirst++, _Gfirst++);

  0012a	53		 push	 ebx
  0012b	56		 push	 esi
  0012c	83 c7 18	 add	 edi, 24			; 00000018H
  0012f	83 c6 18	 add	 esi, 24			; 00000018H
  00132	83 c3 18	 add	 ebx, 24			; 00000018H
  00135	eb 20		 jmp	 SHORT $LN74@Unguarded_
$LN6@Unguarded_:

; 3755 : 			}
; 3756 : 		else if (_Gfirst == _Last)
; 3757 : 			{	// no room at top, rotate pivot downward
; 3758 : 			if (--_Glast != --_Pfirst)

  00137	83 e8 18	 sub	 eax, 24			; 00000018H
  0013a	89 45 fc	 mov	 DWORD PTR __Glast$[ebp], eax
  0013d	3b 5d 10	 cmp	 ebx, DWORD PTR __Last$[ebp]
  00140	75 21		 jne	 SHORT $LN3@Unguarded_
  00142	83 ee 18	 sub	 esi, 24			; 00000018H
  00145	3b c6		 cmp	 eax, esi
  00147	74 09		 je	 SHORT $LN50@Unguarded_

; 3759 : 				_STD iter_swap(_Glast, _Pfirst);

  00149	56		 push	 esi
  0014a	50		 push	 eax
  0014b	e8 00 00 00 00	 call	 ??$swap@UPacketData@ioP2PChecker@@@std@@YAXAAUPacketData@ioP2PChecker@@0@Z ; std::swap<ioP2PChecker::PacketData>
  00150	59		 pop	 ecx
  00151	59		 pop	 ecx
$LN50@Unguarded_:

; 3760 : 			_STD iter_swap(_Pfirst, --_Plast);

  00152	83 ef 18	 sub	 edi, 24			; 00000018H
  00155	57		 push	 edi
  00156	56		 push	 esi
$LN74@Unguarded_:
  00157	e8 00 00 00 00	 call	 ??$swap@UPacketData@ioP2PChecker@@@std@@YAXAAUPacketData@ioP2PChecker@@0@Z ; std::swap<ioP2PChecker::PacketData>
  0015c	59		 pop	 ecx
  0015d	59		 pop	 ecx

; 3761 : 			}
; 3762 : 		else

  0015e	e9 5c ff ff ff	 jmp	 $LN75@Unguarded_
$LN3@Unguarded_:

; 3763 : 			_STD iter_swap(_Gfirst++, --_Glast);

  00163	50		 push	 eax
  00164	53		 push	 ebx

; 3764 : 		}

  00165	e9 4b ff ff ff	 jmp	 $LN76@Unguarded_
$LN64@Unguarded_:

; 3747 : 			return (_STD pair<_RanIt, _RanIt>(_Pfirst, _Plast));

  0016a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0016d	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00170	5f		 pop	 edi
  00171	89 30		 mov	 DWORD PTR [eax], esi
  00173	5e		 pop	 esi
  00174	5b		 pop	 ebx

; 3765 : 	}

  00175	c9		 leave
  00176	c3		 ret	 0
??$_Unguarded_partition@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YA?AU?$pair@PAUPacketData@ioP2PChecker@@PAU12@@0@PAUPacketData@ioP2PChecker@@0VPacketSendSort@3@@Z ENDP ; std::_Unguarded_partition<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>
_TEXT	ENDS
PUBLIC	??$make_heap@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@@Z ; std::make_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>
; Function compile flags: /Ogsp
;	COMDAT ??$make_heap@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$make_heap@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@@Z PROC ; std::make_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>, COMDAT

; 2672 : 	{	// make [_First, _Last) into a heap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2673 : 	_DEBUG_RANGE(_First, _Last);
; 2674 : 	_DEBUG_POINTER(_Pred);
; 2675 : 	if (1 < _Last - _First)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00009	6a 18		 push	 24			; 00000018H
  0000b	99		 cdq
  0000c	59		 pop	 ecx
  0000d	f7 f9		 idiv	 ecx
  0000f	83 f8 01	 cmp	 eax, 1
  00012	7e 15		 jle	 SHORT $LN1@make_heap

; 2676 : 		_Make_heap(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2677 : 			_Dist_type(_First), _Val_type(_First));

  00014	6a 00		 push	 0
  00016	6a 00		 push	 0
  00018	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  0001b	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0001e	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Make_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@PAH0@Z ; std::_Make_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketSendSort>
  00026	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@make_heap:

; 2678 : 	}

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??$make_heap@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@@Z ENDP ; std::make_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>
_TEXT	ENDS
PUBLIC	??$_Unguarded_partition@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YA?AU?$pair@PAUPacketData@ioP2PChecker@@PAU12@@0@PAUPacketData@ioP2PChecker@@0VPacketRecvSort@3@@Z ; std::_Unguarded_partition<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>
; Function compile flags: /Ogsp
;	COMDAT ??$_Unguarded_partition@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YA?AU?$pair@PAUPacketData@ioP2PChecker@@PAU12@@0@PAUPacketData@ioP2PChecker@@0VPacketRecvSort@3@@Z
_TEXT	SEGMENT
tv352 = -8						; size = 4
tv264 = -8						; size = 4
__Glast$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Unguarded_partition@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YA?AU?$pair@PAUPacketData@ioP2PChecker@@PAU12@@0@PAUPacketData@ioP2PChecker@@0VPacketRecvSort@3@@Z PROC ; std::_Unguarded_partition<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>, COMDAT

; 3712 : 	{	// partition [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 3713 : 	_RanIt _Mid = _First + (_Last - _First) / 2;

  00005	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00008	53		 push	 ebx
  00009	8b 5d 0c	 mov	 ebx, DWORD PTR __First$[ebp]
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b c1		 mov	 eax, ecx
  00010	2b c3		 sub	 eax, ebx
  00012	6a 18		 push	 24			; 00000018H
  00014	5e		 pop	 esi
  00015	99		 cdq
  00016	f7 fe		 idiv	 esi

; 3714 : 	_Median(_First, _Mid, _Last - 1, _Pred);

  00018	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0001b	83 c1 e8	 add	 ecx, -24		; ffffffe8H
  0001e	51		 push	 ecx
  0001f	99		 cdq
  00020	2b c2		 sub	 eax, edx
  00022	8b f0		 mov	 esi, eax
  00024	d1 fe		 sar	 esi, 1
  00026	6b f6 18	 imul	 esi, 24			; 00000018H
  00029	03 f3		 add	 esi, ebx
  0002b	56		 push	 esi
  0002c	53		 push	 ebx
  0002d	e8 00 00 00 00	 call	 ??$_Median@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@00VPacketRecvSort@2@@Z ; std::_Median<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 3715 : 	_RanIt _Pfirst = _Mid;
; 3716 : 	_RanIt _Plast = _Pfirst + 1;

  00035	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
  00038	eb 27		 jmp	 SHORT $LN72@Unguarded_@2
$LL27@Unguarded_@2:

; 3717 : 
; 3718 : 	while (_First < _Pfirst
; 3719 : 		&& !_DEBUG_LT_PRED(_Pred, *(_Pfirst - 1), *_Pfirst)
; 3720 : 		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))

  0003a	8d 46 e8	 lea	 eax, DWORD PTR [esi-24]
  0003d	56		 push	 esi
  0003e	50		 push	 eax
  0003f	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00042	89 45 f8	 mov	 DWORD PTR tv264[ebp], eax
  00045	e8 00 00 00 00	 call	 ??RPacketRecvSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketRecvSort::operator()
  0004a	84 c0		 test	 al, al
  0004c	75 38		 jne	 SHORT $LN73@Unguarded_@2
  0004e	ff 75 f8	 push	 DWORD PTR tv264[ebp]
  00051	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00054	56		 push	 esi
  00055	e8 00 00 00 00	 call	 ??RPacketRecvSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketRecvSort::operator()
  0005a	84 c0		 test	 al, al
  0005c	75 28		 jne	 SHORT $LN73@Unguarded_@2

; 3721 : 		--_Pfirst;

  0005e	8b 75 f8	 mov	 esi, DWORD PTR tv264[ebp]
$LN72@Unguarded_@2:

; 3717 : 
; 3718 : 	while (_First < _Pfirst
; 3719 : 		&& !_DEBUG_LT_PRED(_Pred, *(_Pfirst - 1), *_Pfirst)
; 3720 : 		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))

  00061	3b de		 cmp	 ebx, esi
  00063	72 d5		 jb	 SHORT $LL27@Unguarded_@2

; 3725 : 		++_Plast;

  00065	eb 1f		 jmp	 SHORT $LN73@Unguarded_@2
$LL25@Unguarded_@2:

; 3722 : 	while (_Plast < _Last
; 3723 : 		&& !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst)
; 3724 : 		&& !_Pred(*_Pfirst, *_Plast))

  00067	56		 push	 esi
  00068	57		 push	 edi
  00069	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  0006c	e8 00 00 00 00	 call	 ??RPacketRecvSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketRecvSort::operator()
  00071	84 c0		 test	 al, al
  00073	75 16		 jne	 SHORT $LN24@Unguarded_@2
  00075	57		 push	 edi
  00076	56		 push	 esi
  00077	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  0007a	e8 00 00 00 00	 call	 ??RPacketRecvSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketRecvSort::operator()
  0007f	84 c0		 test	 al, al
  00081	75 08		 jne	 SHORT $LN24@Unguarded_@2

; 3725 : 		++_Plast;

  00083	83 c7 18	 add	 edi, 24			; 00000018H
$LN73@Unguarded_@2:

; 3722 : 	while (_Plast < _Last
; 3723 : 		&& !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst)
; 3724 : 		&& !_Pred(*_Pfirst, *_Plast))

  00086	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  00089	72 dc		 jb	 SHORT $LL25@Unguarded_@2
$LN24@Unguarded_@2:

; 3726 : 
; 3727 : 	_RanIt _Gfirst = _Plast;

  0008b	8b df		 mov	 ebx, edi

; 3728 : 	_RanIt _Glast = _Pfirst;

  0008d	89 75 fc	 mov	 DWORD PTR __Glast$[ebp], esi

; 3729 : 
; 3730 : 	for (; ; )
; 3731 : 		{	// partition
; 3732 : 		for (; _Gfirst < _Last; ++_Gfirst)

  00090	eb 2d		 jmp	 SHORT $LN75@Unguarded_@2
$LL21@Unguarded_@2:

; 3733 : 			if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst))

  00092	53		 push	 ebx
  00093	56		 push	 esi
  00094	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00097	e8 00 00 00 00	 call	 ??RPacketRecvSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketRecvSort::operator()
  0009c	84 c0		 test	 al, al
  0009e	75 1c		 jne	 SHORT $LN20@Unguarded_@2

; 3734 : 				;
; 3735 : 			else if (_Pred(*_Gfirst, *_Pfirst))

  000a0	56		 push	 esi
  000a1	53		 push	 ebx
  000a2	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000a5	e8 00 00 00 00	 call	 ??RPacketRecvSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketRecvSort::operator()
  000aa	84 c0		 test	 al, al
  000ac	75 16		 jne	 SHORT $LN69@Unguarded_@2

; 3736 : 				break;
; 3737 : 			else
; 3738 : 				_STD iter_swap(_Plast++, _Gfirst);

  000ae	8b c7		 mov	 eax, edi
  000b0	53		 push	 ebx
  000b1	83 c7 18	 add	 edi, 24			; 00000018H
  000b4	50		 push	 eax
$LN76@Unguarded_@2:
  000b5	e8 00 00 00 00	 call	 ??$swap@UPacketData@ioP2PChecker@@@std@@YAXAAUPacketData@ioP2PChecker@@0@Z ; std::swap<ioP2PChecker::PacketData>
  000ba	59		 pop	 ecx
  000bb	59		 pop	 ecx
$LN20@Unguarded_@2:

; 3729 : 
; 3730 : 	for (; ; )
; 3731 : 		{	// partition
; 3732 : 		for (; _Gfirst < _Last; ++_Gfirst)

  000bc	83 c3 18	 add	 ebx, 24			; 00000018H
$LN75@Unguarded_@2:
  000bf	3b 5d 10	 cmp	 ebx, DWORD PTR __Last$[ebp]
  000c2	72 ce		 jb	 SHORT $LL21@Unguarded_@2
$LN69@Unguarded_@2:

; 3739 : 		for (; _First < _Glast; --_Glast)

  000c4	8b 45 fc	 mov	 eax, DWORD PTR __Glast$[ebp]
  000c7	39 45 0c	 cmp	 DWORD PTR __First$[ebp], eax
  000ca	73 44		 jae	 SHORT $LN71@Unguarded_@2
  000cc	83 c0 e8	 add	 eax, -24		; ffffffe8H
  000cf	89 45 f8	 mov	 DWORD PTR tv352[ebp], eax
$LL70@Unguarded_@2:

; 3740 : 			if (_DEBUG_LT_PRED(_Pred, *(_Glast - 1), *_Pfirst))

  000d2	56		 push	 esi
  000d3	ff 75 f8	 push	 DWORD PTR tv352[ebp]
  000d6	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000d9	e8 00 00 00 00	 call	 ??RPacketRecvSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketRecvSort::operator()
  000de	84 c0		 test	 al, al
  000e0	75 1e		 jne	 SHORT $LN13@Unguarded_@2

; 3741 : 				;
; 3742 : 			else if (_Pred(*_Pfirst, *(_Glast - 1)))

  000e2	ff 75 f8	 push	 DWORD PTR tv352[ebp]
  000e5	8d 4d 14	 lea	 ecx, DWORD PTR __Pred$[ebp]
  000e8	56		 push	 esi
  000e9	e8 00 00 00 00	 call	 ??RPacketRecvSort@ioP2PChecker@@QBE_NABUPacketData@1@0@Z ; ioP2PChecker::PacketRecvSort::operator()
  000ee	84 c0		 test	 al, al
  000f0	75 1e		 jne	 SHORT $LN71@Unguarded_@2

; 3743 : 				break;
; 3744 : 			else
; 3745 : 				_STD iter_swap(--_Pfirst, _Glast - 1);

  000f2	ff 75 f8	 push	 DWORD PTR tv352[ebp]
  000f5	83 ee 18	 sub	 esi, 24			; 00000018H
  000f8	56		 push	 esi
  000f9	e8 00 00 00 00	 call	 ??$swap@UPacketData@ioP2PChecker@@@std@@YAXAAUPacketData@ioP2PChecker@@0@Z ; std::swap<ioP2PChecker::PacketData>
  000fe	59		 pop	 ecx
  000ff	59		 pop	 ecx
$LN13@Unguarded_@2:

; 3739 : 		for (; _First < _Glast; --_Glast)

  00100	83 6d fc 18	 sub	 DWORD PTR __Glast$[ebp], 24 ; 00000018H
  00104	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00107	83 6d f8 18	 sub	 DWORD PTR tv352[ebp], 24 ; 00000018H
  0010b	3b 45 fc	 cmp	 eax, DWORD PTR __Glast$[ebp]
  0010e	72 c2		 jb	 SHORT $LL70@Unguarded_@2
$LN71@Unguarded_@2:

; 3746 : 		if (_Glast == _First && _Gfirst == _Last)

  00110	8b 45 fc	 mov	 eax, DWORD PTR __Glast$[ebp]
  00113	3b 45 0c	 cmp	 eax, DWORD PTR __First$[ebp]
  00116	75 1f		 jne	 SHORT $LN6@Unguarded_@2
  00118	3b 5d 10	 cmp	 ebx, DWORD PTR __Last$[ebp]
  0011b	74 4d		 je	 SHORT $LN64@Unguarded_@2

; 3748 : 
; 3749 : 		if (_Glast == _First)
; 3750 : 			{	// no room at bottom, rotate pivot upward
; 3751 : 			if (_Plast != _Gfirst)

  0011d	3b fb		 cmp	 edi, ebx
  0011f	74 09		 je	 SHORT $LN46@Unguarded_@2

; 3752 : 				_STD iter_swap(_Pfirst, _Plast);

  00121	57		 push	 edi
  00122	56		 push	 esi
  00123	e8 00 00 00 00	 call	 ??$swap@UPacketData@ioP2PChecker@@@std@@YAXAAUPacketData@ioP2PChecker@@0@Z ; std::swap<ioP2PChecker::PacketData>
  00128	59		 pop	 ecx
  00129	59		 pop	 ecx
$LN46@Unguarded_@2:

; 3753 : 			++_Plast;
; 3754 : 			_STD iter_swap(_Pfirst++, _Gfirst++);

  0012a	53		 push	 ebx
  0012b	56		 push	 esi
  0012c	83 c7 18	 add	 edi, 24			; 00000018H
  0012f	83 c6 18	 add	 esi, 24			; 00000018H
  00132	83 c3 18	 add	 ebx, 24			; 00000018H
  00135	eb 20		 jmp	 SHORT $LN74@Unguarded_@2
$LN6@Unguarded_@2:

; 3755 : 			}
; 3756 : 		else if (_Gfirst == _Last)
; 3757 : 			{	// no room at top, rotate pivot downward
; 3758 : 			if (--_Glast != --_Pfirst)

  00137	83 e8 18	 sub	 eax, 24			; 00000018H
  0013a	89 45 fc	 mov	 DWORD PTR __Glast$[ebp], eax
  0013d	3b 5d 10	 cmp	 ebx, DWORD PTR __Last$[ebp]
  00140	75 21		 jne	 SHORT $LN3@Unguarded_@2
  00142	83 ee 18	 sub	 esi, 24			; 00000018H
  00145	3b c6		 cmp	 eax, esi
  00147	74 09		 je	 SHORT $LN50@Unguarded_@2

; 3759 : 				_STD iter_swap(_Glast, _Pfirst);

  00149	56		 push	 esi
  0014a	50		 push	 eax
  0014b	e8 00 00 00 00	 call	 ??$swap@UPacketData@ioP2PChecker@@@std@@YAXAAUPacketData@ioP2PChecker@@0@Z ; std::swap<ioP2PChecker::PacketData>
  00150	59		 pop	 ecx
  00151	59		 pop	 ecx
$LN50@Unguarded_@2:

; 3760 : 			_STD iter_swap(_Pfirst, --_Plast);

  00152	83 ef 18	 sub	 edi, 24			; 00000018H
  00155	57		 push	 edi
  00156	56		 push	 esi
$LN74@Unguarded_@2:
  00157	e8 00 00 00 00	 call	 ??$swap@UPacketData@ioP2PChecker@@@std@@YAXAAUPacketData@ioP2PChecker@@0@Z ; std::swap<ioP2PChecker::PacketData>
  0015c	59		 pop	 ecx
  0015d	59		 pop	 ecx

; 3761 : 			}
; 3762 : 		else

  0015e	e9 5c ff ff ff	 jmp	 $LN75@Unguarded_@2
$LN3@Unguarded_@2:

; 3763 : 			_STD iter_swap(_Gfirst++, --_Glast);

  00163	50		 push	 eax
  00164	53		 push	 ebx

; 3764 : 		}

  00165	e9 4b ff ff ff	 jmp	 $LN76@Unguarded_@2
$LN64@Unguarded_@2:

; 3747 : 			return (_STD pair<_RanIt, _RanIt>(_Pfirst, _Plast));

  0016a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0016d	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00170	5f		 pop	 edi
  00171	89 30		 mov	 DWORD PTR [eax], esi
  00173	5e		 pop	 esi
  00174	5b		 pop	 ebx

; 3765 : 	}

  00175	c9		 leave
  00176	c3		 ret	 0
??$_Unguarded_partition@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YA?AU?$pair@PAUPacketData@ioP2PChecker@@PAU12@@0@PAUPacketData@ioP2PChecker@@0VPacketRecvSort@3@@Z ENDP ; std::_Unguarded_partition<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>
_TEXT	ENDS
PUBLIC	??$make_heap@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@@Z ; std::make_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>
; Function compile flags: /Ogsp
;	COMDAT ??$make_heap@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$make_heap@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@@Z PROC ; std::make_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>, COMDAT

; 2672 : 	{	// make [_First, _Last) into a heap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2673 : 	_DEBUG_RANGE(_First, _Last);
; 2674 : 	_DEBUG_POINTER(_Pred);
; 2675 : 	if (1 < _Last - _First)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00009	6a 18		 push	 24			; 00000018H
  0000b	99		 cdq
  0000c	59		 pop	 ecx
  0000d	f7 f9		 idiv	 ecx
  0000f	83 f8 01	 cmp	 eax, 1
  00012	7e 15		 jle	 SHORT $LN1@make_heap@2

; 2676 : 		_Make_heap(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2677 : 			_Dist_type(_First), _Val_type(_First));

  00014	6a 00		 push	 0
  00016	6a 00		 push	 0
  00018	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  0001b	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0001e	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Make_heap@PAUPacketData@ioP2PChecker@@HU12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@PAH0@Z ; std::_Make_heap<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketData,ioP2PChecker::PacketRecvSort>
  00026	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@make_heap@2:

; 2678 : 	}

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??$make_heap@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@@Z ENDP ; std::make_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAURecvLog@ioP2PChecker@@PAU12@V?$allocator@URecvLog@ioP2PChecker@@@std@@U12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00AAV?$allocator@URecvLog@ioP2PChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog *,std::allocator<ioP2PChecker::RecvLog>,ioP2PChecker::RecvLog>
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iop2pchecker.cpp
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAURecvLog@ioP2PChecker@@PAU12@V?$allocator@URecvLog@ioP2PChecker@@@std@@U12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00AAV?$allocator@URecvLog@ioP2PChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAURecvLog@ioP2PChecker@@PAU12@V?$allocator@URecvLog@ioP2PChecker@@@std@@U12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00AAV?$allocator@URecvLog@ioP2PChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAURecvLog@ioP2PChecker@@PAU12@V?$allocator@URecvLog@ioP2PChecker@@@std@@U12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00AAV?$allocator@URecvLog@ioP2PChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAURecvLog@ioP2PChecker@@PAU12@V?$allocator@URecvLog@ioP2PChecker@@@std@@U12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00AAV?$allocator@URecvLog@ioP2PChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAURecvLog@ioP2PChecker@@PAU12@V?$allocator@URecvLog@ioP2PChecker@@@std@@U12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00AAV?$allocator@URecvLog@ioP2PChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$3
__ehfuncinfo$??$_Uninit_move@PAURecvLog@ioP2PChecker@@PAU12@V?$allocator@URecvLog@ioP2PChecker@@@std@@U12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00AAV?$allocator@URecvLog@ioP2PChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAURecvLog@ioP2PChecker@@PAU12@V?$allocator@URecvLog@ioP2PChecker@@@std@@U12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00AAV?$allocator@URecvLog@ioP2PChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAURecvLog@ioP2PChecker@@PAU12@V?$allocator@URecvLog@ioP2PChecker@@@std@@U12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00AAV?$allocator@URecvLog@ioP2PChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAURecvLog@ioP2PChecker@@PAU12@V?$allocator@URecvLog@ioP2PChecker@@@std@@U12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00AAV?$allocator@URecvLog@ioP2PChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAURecvLog@ioP2PChecker@@PAU12@V?$allocator@URecvLog@ioP2PChecker@@@std@@U12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00AAV?$allocator@URecvLog@ioP2PChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog *,std::allocator<ioP2PChecker::RecvLog>,ioP2PChecker::RecvLog>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_move@PAURecvLog@ioP2PChecker@@PAU12@V?$allocator@URecvLog@ioP2PChecker@@@std@@U12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00AAV?$allocator@URecvLog@ioP2PChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 428  : 
; 429  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00016	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LL6@Uninit_mov@2:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	74 33		 je	 SHORT $LN4@Uninit_mov@2

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  0001e	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00021	56		 push	 esi
  00022	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00025	e8 00 00 00 00	 call	 ?construct@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@$$QAU34@@Z ; std::allocator<ioP2PChecker::RecvLog>::construct
  0002a	83 45 10 14	 add	 DWORD PTR __Dest$[ebp], 20 ; 00000014H
  0002e	83 c6 14	 add	 esi, 20			; 00000014H
  00031	eb e6		 jmp	 SHORT $LL6@Uninit_mov@2
__catch$??$_Uninit_move@PAURecvLog@ioP2PChecker@@PAU12@V?$allocator@URecvLog@ioP2PChecker@@@std@@U12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00AAV?$allocator@URecvLog@ioP2PChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00033	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00036	eb 0b		 jmp	 SHORT $LN36@Uninit_mov@2
$LL3@Uninit_mov@2:

; 434  : 		_Dest_val(_Al, _Next);

  00038	8b ce		 mov	 ecx, esi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00040	83 c6 14	 add	 esi, 20			; 00000014H
$LN36@Uninit_mov@2:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00043	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00046	75 f0		 jne	 SHORT $LL3@Uninit_mov@2

; 435  : 	_RERAISE;

  00048	6a 00		 push	 0
  0004a	6a 00		 push	 0
  0004c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN37@Uninit_mov@2:
$LN4@Uninit_mov@2:

; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00051	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 438  : 	}

  00054	e8 00 00 00 00	 call	 __EH_epilog3
  00059	c3		 ret	 0
$LN35@Uninit_mov@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAURecvLog@ioP2PChecker@@PAU12@V?$allocator@URecvLog@ioP2PChecker@@@std@@U12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00AAV?$allocator@URecvLog@ioP2PChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAURecvLog@ioP2PChecker@@PAU12@V?$allocator@URecvLog@ioP2PChecker@@@std@@U12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00AAV?$allocator@URecvLog@ioP2PChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAURecvLog@ioP2PChecker@@PAU12@V?$allocator@URecvLog@ioP2PChecker@@@std@@U12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00AAV?$allocator@URecvLog@ioP2PChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog *,std::allocator<ioP2PChecker::RecvLog>,ioP2PChecker::RecvLog>
PUBLIC	??$_Pop_heap@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@@Z ; std::_Pop_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Pop_heap@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Pop_heap@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@@Z PROC ; std::_Pop_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>, COMDAT

; 2610 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2611 : 	_Pop_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2612 : 		_Val_type(_First));

  00003	6a 00		 push	 0
  00005	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00008	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Pop_heap_0@PAUPacketData@ioP2PChecker@@U12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@0@Z ; std::_Pop_heap_0<ioP2PChecker::PacketData *,ioP2PChecker::PacketData,ioP2PChecker::PacketSendSort>
  00013	83 c4 10	 add	 esp, 16			; 00000010H

; 2613 : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Pop_heap@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@@Z ENDP ; std::_Pop_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@@Z ; std::_Pop_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>
; Function compile flags: /Ogsp
;	COMDAT ??$_Pop_heap@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Pop_heap@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@@Z PROC ; std::_Pop_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>, COMDAT

; 2610 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2611 : 	_Pop_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2612 : 		_Val_type(_First));

  00003	6a 00		 push	 0
  00005	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00008	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Pop_heap_0@PAUPacketData@ioP2PChecker@@U12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@0@Z ; std::_Pop_heap_0<ioP2PChecker::PacketData *,ioP2PChecker::PacketData,ioP2PChecker::PacketRecvSort>
  00013	83 c4 10	 add	 esp, 16			; 00000010H

; 2613 : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Pop_heap@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@@Z ENDP ; std::_Pop_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>
_TEXT	ENDS
PUBLIC	__real@3f266666
PUBLIC	?RenderLog@ioP2PChecker@@QAEXHH@Z		; ioP2PChecker::RenderLog
EXTRN	__imp_?PrintText@ioFontManager@@QAAXMMMPBDZZ:PROC
EXTRN	__imp_?c_str@ioHashString@@QBEPBDXZ:PROC
EXTRN	__imp_?SetTextColor@ioFontManager@@QAEXK@Z:PROC
EXTRN	__imp_?SetBkColor@ioFontManager@@QAEXHHH@Z:PROC
EXTRN	__imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z:PROC
EXTRN	__imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z:PROC
EXTRN	__imp_?GetSingleton@ioFontManager@@SAAAV1@XZ:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@3f266666
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iop2pchecker.cpp
CONST	ENDS
;	COMDAT ?RenderLog@ioP2PChecker@@QAEXHH@Z
_TEXT	SEGMENT
$T510106 = -8						; size = 4
_i$ = -4						; size = 4
tv307 = 8						; size = 4
_iXPos$ = 8						; size = 4
_iYPos$ = 12						; size = 4
?RenderLog@ioP2PChecker@@QAEXHH@Z PROC			; ioP2PChecker::RenderLog, COMDAT
; _this$ = ecx

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi

; 156  : 	g_FontMgr.SetAlignType( TAT_LEFT );

  00007	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?GetSingleton@ioFontManager@@SAAAV1@XZ
  0000d	57		 push	 edi
  0000e	33 db		 xor	 ebx, ebx
  00010	53		 push	 ebx
  00011	8b f9		 mov	 edi, ecx
  00013	ff d6		 call	 esi
  00015	8b c8		 mov	 ecx, eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z

; 157  : 	g_FontMgr.SetTextStyle( TS_OUTLINE_FULL_2X );

  0001d	6a 05		 push	 5
  0001f	ff d6		 call	 esi
  00021	8b c8		 mov	 ecx, eax
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z

; 158  : 	g_FontMgr.SetBkColor( 0, 0, 0 );

  00029	53		 push	 ebx
  0002a	53		 push	 ebx
  0002b	53		 push	 ebx
  0002c	ff d6		 call	 esi
  0002e	8b c8		 mov	 ecx, eax
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetBkColor@ioFontManager@@QAEXHHH@Z

; 159  : 	
; 160  : 	
; 161  : 	vRecvLog::reverse_iterator riter, riEnd;
; 162  : 	riEnd = m_vRecvLog.rend();

  00036	8b 47 18	 mov	 eax, DWORD PTR [edi+24]

; 163  : 	int i = 0;
; 164  : 	for(riter = m_vRecvLog.rbegin();riter != riEnd;riter++)

  00039	8b 7f 1c	 mov	 edi, DWORD PTR [edi+28]
  0003c	89 45 f8	 mov	 DWORD PTR $T510106[ebp], eax
  0003f	89 5d fc	 mov	 DWORD PTR _i$[ebp], ebx
  00042	3b f8		 cmp	 edi, eax
  00044	74 7c		 je	 SHORT $LN84@RenderLog

; 156  : 	g_FontMgr.SetAlignType( TAT_LEFT );

  00046	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  00049	8b 5d 0c	 mov	 ebx, DWORD PTR _iYPos$[ebp]
  0004c	83 c0 0a	 add	 eax, 10			; 0000000aH

; 163  : 	int i = 0;
; 164  : 	for(riter = m_vRecvLog.rbegin();riter != riEnd;riter++)

  0004f	0f 57 c0	 xorps	 xmm0, xmm0
  00052	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00056	83 c7 ec	 add	 edi, -20		; ffffffecH
  00059	f3 0f 11 45 08	 movss	 DWORD PTR tv307[ebp], xmm0
  0005e	83 c3 4b	 add	 ebx, 75			; 0000004bH
$LL59@RenderLog:

; 165  : 	{
; 166  : 		RecvLog &kLog = *riter;
; 167  : 		g_FontMgr.SetTextColor( kLog.m_dwColor );

  00061	ff 77 10	 push	 DWORD PTR [edi+16]
  00064	ff d6		 call	 esi
  00066	8b c8		 mov	 ecx, eax
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 168  : 		g_FontMgr.PrintText( iXPos + 10, iYPos + 75 + (i*20), FONT_SIZE_13, kLog.m_szLog.c_str() );		

  0006e	8b cf		 mov	 ecx, edi
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  00076	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  0007e	50		 push	 eax
  0007f	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00082	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00088	0f 57 c0	 xorps	 xmm0, xmm0
  0008b	f3 0f 2a c3	 cvtsi2ss xmm0, ebx
  0008f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00095	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv307[ebp]
  0009a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009f	ff d6		 call	 esi
  000a1	50		 push	 eax
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAAXMMMPBDZZ
  000a8	83 c4 14	 add	 esp, 20			; 00000014H

; 169  : 		if( ++i >= 10 )

  000ab	ff 45 fc	 inc	 DWORD PTR _i$[ebp]
  000ae	83 c3 14	 add	 ebx, 20			; 00000014H
  000b1	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  000b5	7d 0b		 jge	 SHORT $LN84@RenderLog

; 163  : 	int i = 0;
; 164  : 	for(riter = m_vRecvLog.rbegin();riter != riEnd;riter++)

  000b7	83 ef 14	 sub	 edi, 20			; 00000014H
  000ba	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  000bd	3b 45 f8	 cmp	 eax, DWORD PTR $T510106[ebp]
  000c0	75 9f		 jne	 SHORT $LL59@RenderLog
$LN84@RenderLog:
  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx

; 170  : 			break;
; 171  : 	}
; 172  : }

  000c5	c9		 leave
  000c6	c2 08 00	 ret	 8
?RenderLog@ioP2PChecker@@QAEXHH@Z ENDP			; ioP2PChecker::RenderLog
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IAEXPAUPacketData@ioP2PChecker@@0@Z ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IAEXPAUPacketData@ioP2PChecker@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IAEXPAUPacketData@ioP2PChecker@@0@Z PROC ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IAEXPAUPacketData@ioP2PChecker@@0@Z ENDP ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Umove@PAUPacketData@ioP2PChecker@@@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IAEPAUPacketData@ioP2PChecker@@PAU23@00@Z ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Umove<ioP2PChecker::PacketData *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAUPacketData@ioP2PChecker@@@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IAEPAUPacketData@ioP2PChecker@@PAU23@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUPacketData@ioP2PChecker@@@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IAEPAUPacketData@ioP2PChecker@@PAU23@00@Z PROC ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Umove<ioP2PChecker::PacketData *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUPacketData@ioP2PChecker@@PAU12@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00AAV?$allocator@UPacketData@ioP2PChecker@@@0@@Z ; std::_Uninitialized_move<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *,std::allocator<ioP2PChecker::PacketData> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUPacketData@ioP2PChecker@@@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IAEPAUPacketData@ioP2PChecker@@PAU23@00@Z ENDP ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Umove<ioP2PChecker::PacketData *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@YAXPAURecvLog@ioP2PChecker@@0AAV?$allocator@URecvLog@ioP2PChecker@@@0@@Z ; std::_Destroy_range<std::allocator<ioP2PChecker::RecvLog> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@YAXPAURecvLog@ioP2PChecker@@0AAV?$allocator@URecvLog@ioP2PChecker@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@YAXPAURecvLog@ioP2PChecker@@0AAV?$allocator@URecvLog@ioP2PChecker@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ioP2PChecker::RecvLog> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN24@Destroy_ra@2
$LL7@Destroy_ra@2:
  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 14	 add	 esi, 20			; 00000014H
$LN24@Destroy_ra@2:
  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL7@Destroy_ra@2
  00019	5e		 pop	 esi

; 89   : 	}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Destroy_range@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@YAXPAURecvLog@ioP2PChecker@@0AAV?$allocator@URecvLog@ioP2PChecker@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioP2PChecker::RecvLog> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAURecvLog@ioP2PChecker@@PAU12@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00AAV?$allocator@URecvLog@ioP2PChecker@@@0@@Z ; std::_Uninitialized_move<ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog *,std::allocator<ioP2PChecker::RecvLog> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAURecvLog@ioP2PChecker@@PAU12@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00AAV?$allocator@URecvLog@ioP2PChecker@@@0@@Z
_TEXT	SEGMENT
__Cat$510506 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAURecvLog@ioP2PChecker@@PAU12@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00AAV?$allocator@URecvLog@ioP2PChecker@@@0@@Z PROC ; std::_Uninitialized_move<ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog *,std::allocator<ioP2PChecker::RecvLog> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$510506[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAURecvLog@ioP2PChecker@@PAU12@V?$allocator@URecvLog@ioP2PChecker@@@std@@U12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00AAV?$allocator@URecvLog@ioP2PChecker@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog *,std::allocator<ioP2PChecker::RecvLog>,ioP2PChecker::RecvLog>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAURecvLog@ioP2PChecker@@PAU12@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00AAV?$allocator@URecvLog@ioP2PChecker@@@0@@Z ENDP ; std::_Uninitialized_move<ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog *,std::allocator<ioP2PChecker::RecvLog> >
_TEXT	ENDS
PUBLIC	??$_Sort_heap@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@@Z ; std::_Sort_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Sort_heap@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Sort_heap@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@@Z PROC ; std::_Sort_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>, COMDAT

; 2700 : 	{	// order heap by repeatedly popping, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2701 : 	for (; 1 < _Last - _First; --_Last)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	2b 4d 08	 sub	 ecx, DWORD PTR __First$[ebp]
  00009	57		 push	 edi
  0000a	8b c1		 mov	 eax, ecx
  0000c	6a 18		 push	 24			; 00000018H
  0000e	99		 cdq
  0000f	5f		 pop	 edi
  00010	f7 ff		 idiv	 edi
  00012	83 f8 01	 cmp	 eax, 1
  00015	7e 29		 jle	 SHORT $LN1@Sort_heap
  00017	8b f9		 mov	 edi, ecx
$LL3@Sort_heap:

; 2702 : 		_Pop_heap(_First, _Last, _Pred);

  00019	6a 00		 push	 0
  0001b	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  0001e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00021	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00024	e8 00 00 00 00	 call	 ??$_Pop_heap_0@PAUPacketData@ioP2PChecker@@U12@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@0@Z ; std::_Pop_heap_0<ioP2PChecker::PacketData *,ioP2PChecker::PacketData,ioP2PChecker::PacketSendSort>
  00029	83 c4 10	 add	 esp, 16			; 00000010H
  0002c	83 ef 18	 sub	 edi, 24			; 00000018H
  0002f	8b c7		 mov	 eax, edi
  00031	6a 18		 push	 24			; 00000018H
  00033	99		 cdq
  00034	59		 pop	 ecx
  00035	f7 f9		 idiv	 ecx
  00037	83 6d 0c 18	 sub	 DWORD PTR __Last$[ebp], 24 ; 00000018H
  0003b	83 f8 01	 cmp	 eax, 1
  0003e	7f d9		 jg	 SHORT $LL3@Sort_heap
$LN1@Sort_heap:
  00040	5f		 pop	 edi

; 2703 : 	}

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
??$_Sort_heap@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@@Z ENDP ; std::_Sort_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>
_TEXT	ENDS
PUBLIC	??$_Sort_heap@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@@Z ; std::_Sort_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>
; Function compile flags: /Ogsp
;	COMDAT ??$_Sort_heap@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Sort_heap@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@@Z PROC ; std::_Sort_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>, COMDAT

; 2700 : 	{	// order heap by repeatedly popping, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2701 : 	for (; 1 < _Last - _First; --_Last)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	2b 4d 08	 sub	 ecx, DWORD PTR __First$[ebp]
  00009	57		 push	 edi
  0000a	8b c1		 mov	 eax, ecx
  0000c	6a 18		 push	 24			; 00000018H
  0000e	99		 cdq
  0000f	5f		 pop	 edi
  00010	f7 ff		 idiv	 edi
  00012	83 f8 01	 cmp	 eax, 1
  00015	7e 29		 jle	 SHORT $LN1@Sort_heap@2
  00017	8b f9		 mov	 edi, ecx
$LL3@Sort_heap@2:

; 2702 : 		_Pop_heap(_First, _Last, _Pred);

  00019	6a 00		 push	 0
  0001b	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  0001e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00021	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00024	e8 00 00 00 00	 call	 ??$_Pop_heap_0@PAUPacketData@ioP2PChecker@@U12@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@0@Z ; std::_Pop_heap_0<ioP2PChecker::PacketData *,ioP2PChecker::PacketData,ioP2PChecker::PacketRecvSort>
  00029	83 c4 10	 add	 esp, 16			; 00000010H
  0002c	83 ef 18	 sub	 edi, 24			; 00000018H
  0002f	8b c7		 mov	 eax, edi
  00031	6a 18		 push	 24			; 00000018H
  00033	99		 cdq
  00034	59		 pop	 ecx
  00035	f7 f9		 idiv	 ecx
  00037	83 6d 0c 18	 sub	 DWORD PTR __Last$[ebp], 24 ; 00000018H
  0003b	83 f8 01	 cmp	 eax, 1
  0003e	7f d9		 jg	 SHORT $LL3@Sort_heap@2
$LN1@Sort_heap@2:
  00040	5f		 pop	 edi

; 2703 : 	}

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
??$_Sort_heap@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@@Z ENDP ; std::_Sort_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>
_TEXT	ENDS
PUBLIC	?erase@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@0@Z ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::erase
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?erase@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$510630 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@0@Z PROC ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$510630[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAUPacketData@ioP2PChecker@@PAU12@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@0@Z ENDP ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IAEXXZ ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IAEXXZ PROC ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN21@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN21@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IAEXXZ ENDP ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXI@Z ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
__Ptr$505983 = 8					; size = 4
__Count$ = 8						; size = 4
?reserve@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXI@Z PROC ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00011	81 fb aa aa aa
	0a		 cmp	 ebx, 178956970		; 0aaaaaaaH
  00017	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN56@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00024	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00027	2b 06		 sub	 eax, DWORD PTR [esi]
  00029	6a 18		 push	 24			; 00000018H
  0002b	99		 cdq
  0002c	59		 pop	 ecx
  0002d	f7 f9		 idiv	 ecx
  0002f	3b c3		 cmp	 eax, ebx
  00031	73 6b		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00033	6a 00		 push	 0
  00035	53		 push	 ebx
  00036	e8 00 00 00 00	 call	 ??$_Allocate@UPacketData@ioP2PChecker@@@std@@YAPAUPacketData@ioP2PChecker@@IPAU12@@Z ; std::_Allocate<ioP2PChecker::PacketData>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  0003b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00041	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00044	52		 push	 edx
  00045	89 45 08	 mov	 DWORD PTR __Ptr$505983[ebp], eax
  00048	ff 75 08	 push	 DWORD PTR __Ptr$505983[ebp]
  0004b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004e	50		 push	 eax
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUPacketData@ioP2PChecker@@PAU12@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@YAPAUPacketData@ioP2PChecker@@PAU12@00AAV?$allocator@UPacketData@ioP2PChecker@@@0@@Z ; std::_Uninitialized_move<ioP2PChecker::PacketData *,ioP2PChecker::PacketData *,std::allocator<ioP2PChecker::PacketData> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00055	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00057	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005a	83 c4 18	 add	 esp, 24			; 00000018H
  0005d	2b c1		 sub	 eax, ecx
  0005f	6a 18		 push	 24			; 00000018H
  00061	99		 cdq
  00062	5f		 pop	 edi
  00063	f7 ff		 idiv	 edi
  00065	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00069	8b f8		 mov	 edi, eax
  0006b	85 c9		 test	 ecx, ecx
  0006d	74 12		 je	 SHORT $LN48@reserve

; 761  : 			if (this->_Myfirst != 0)

  0006f	eb 03		 jmp	 SHORT $LN55@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

$LL39@reserve:
  00071	83 c1 18	 add	 ecx, 24			; 00000018H
$LN55@reserve:
  00074	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  00077	75 f8		 jne	 SHORT $LL39@reserve

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00079	ff 36		 push	 DWORD PTR [esi]
  0007b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00080	59		 pop	 ecx
$LN48@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00081	8b ce		 mov	 ecx, esi
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00089	6b db 18	 imul	 ebx, 24			; 00000018H

; 770  : 			this->_Mylast = _Ptr + _Size;

  0008c	6b ff 18	 imul	 edi, 24			; 00000018H
  0008f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$505983[ebp]
  00092	03 d8		 add	 ebx, eax
  00094	03 f8		 add	 edi, eax
  00096	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00099	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  0009c	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  0009e	e8 00 00 00 00	 call	 __EH_epilog3
  000a3	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000a6	ff 75 08	 push	 DWORD PTR __Ptr$505983[ebp]
  000a9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ae	59		 pop	 ecx

; 757  : 			_RERAISE;

  000af	6a 00		 push	 0
  000b1	6a 00		 push	 0
  000b3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN57@reserve:
$LN54@reserve:
  000b8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXI@Z ENDP ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::reserve
PUBLIC	?_Destroy@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IAEXPAURecvLog@ioP2PChecker@@0@Z ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IAEXPAURecvLog@ioP2PChecker@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IAEXPAURecvLog@ioP2PChecker@@0@Z PROC ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN26@Destroy
$LL9@Destroy:
  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 14	 add	 esi, 20			; 00000014H
$LN26@Destroy:
  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL9@Destroy
  00019	5e		 pop	 esi

; 1271 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?_Destroy@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IAEXPAURecvLog@ioP2PChecker@@0@Z ENDP ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Umove@PAURecvLog@ioP2PChecker@@@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IAEPAURecvLog@ioP2PChecker@@PAU23@00@Z ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Umove<ioP2PChecker::RecvLog *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAURecvLog@ioP2PChecker@@@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IAEPAURecvLog@ioP2PChecker@@PAU23@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAURecvLog@ioP2PChecker@@@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IAEPAURecvLog@ioP2PChecker@@PAU23@00@Z PROC ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Umove<ioP2PChecker::RecvLog *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAURecvLog@ioP2PChecker@@PAU12@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00AAV?$allocator@URecvLog@ioP2PChecker@@@0@@Z ; std::_Uninitialized_move<ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog *,std::allocator<ioP2PChecker::RecvLog> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAURecvLog@ioP2PChecker@@@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IAEPAURecvLog@ioP2PChecker@@PAU23@00@Z ENDP ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Umove<ioP2PChecker::RecvLog *>
_TEXT	ENDS
PUBLIC	??$sort_heap@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@@Z ; std::sort_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$sort_heap@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$sort_heap@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@@Z PROC ; std::sort_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>, COMDAT

; 2708 : 	{	// order heap by repeatedly popping, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2709 : 	_DEBUG_RANGE(_First, _Last);
; 2710 : 	_DEBUG_POINTER(_Pred);
; 2711 : 	_DEBUG_HEAP_PRED(_First, _Last, _Pred);
; 2712 : 	_Sort_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);

  00003	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00009	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000c	e8 00 00 00 00	 call	 ??$_Sort_heap@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@@Z ; std::_Sort_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>
  00011	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2713 : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$sort_heap@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@@Z ENDP ; std::sort_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>
_TEXT	ENDS
PUBLIC	??$sort_heap@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@@Z ; std::sort_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>
; Function compile flags: /Ogsp
;	COMDAT ??$sort_heap@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$sort_heap@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@@Z PROC ; std::sort_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>, COMDAT

; 2708 : 	{	// order heap by repeatedly popping, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2709 : 	_DEBUG_RANGE(_First, _Last);
; 2710 : 	_DEBUG_POINTER(_Pred);
; 2711 : 	_DEBUG_HEAP_PRED(_First, _Last, _Pred);
; 2712 : 	_Sort_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);

  00003	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00009	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000c	e8 00 00 00 00	 call	 ??$_Sort_heap@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@@Z ; std::_Sort_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>
  00011	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2713 : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$sort_heap@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@@Z ENDP ; std::sort_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>
_TEXT	ENDS
PUBLIC	??1?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE@XZ ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::~vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE@XZ PROC ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::~vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IAEXXZ ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Tidy
??1?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::~vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXXZ ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T511045 = -4						; size = 4
?clear@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXXZ PROC ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T511045[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@0@Z ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXXZ ENDP ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IAEXI@Z ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IAEXI@Z PROC ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 18		 push	 24			; 00000018H
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00030	2b c1		 sub	 eax, ecx
  00032	6a 18		 push	 24			; 00000018H
  00034	99		 cdq
  00035	59		 pop	 ecx
  00036	f7 f9		 idiv	 ecx
  00038	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003b	3b f8		 cmp	 edi, eax
  0003d	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003f	57		 push	 edi
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IBEII@Z ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Grow_to
  00047	50		 push	 eax
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?reserve@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXI@Z ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::reserve
$LN1@Reserve:
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 1298 : 		}

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Reserve
_TEXT	ENDS
PUBLIC	?erase@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@0@Z ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T511270 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$511200 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@0@Z PROC ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00004	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __First_arg$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 4d 10	 cmp	 ecx, DWORD PTR __Last_arg$[ebp]
  00012	74 38		 je	 SHORT $LN1@erase@2

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00017	53		 push	 ebx
  00018	57		 push	 edi
  00019	ff 75 10	 push	 DWORD PTR __Cat$511200[ebp]
  0001c	51		 push	 ecx
  0001d	50		 push	 eax
  0001e	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Move@PAURecvLog@ioP2PChecker@@PAU12@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog *>

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00026	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00029	8b d8		 mov	 ebx, eax
  0002b	83 c4 10	 add	 esp, 16			; 00000010H
  0002e	89 5d fc	 mov	 DWORD PTR $T511270[ebp], ebx
  00031	3b df		 cmp	 ebx, edi
  00033	74 12		 je	 SHORT $LN36@erase@2
$LL55@erase@2:
  00035	8b 4d fc	 mov	 ecx, DWORD PTR $T511270[ebp]
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0003e	83 45 fc 14	 add	 DWORD PTR $T511270[ebp], 20 ; 00000014H
  00042	39 7d fc	 cmp	 DWORD PTR $T511270[ebp], edi
  00045	75 ee		 jne	 SHORT $LL55@erase@2
$LN36@erase@2:

; 1211 : 			this->_Mylast = _Ptr;

  00047	5f		 pop	 edi
  00048	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0004b	5b		 pop	 ebx
$LN1@erase@2:

; 1212 : 			}
; 1213 : 		return (_First);

  0004c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0004f	5e		 pop	 esi

; 1214 : 		}

  00050	c9		 leave
  00051	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@0@Z ENDP ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IAEXXZ ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IAEXXZ PROC ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 28		 je	 SHORT $LN27@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	53		 push	 ebx
  00009	57		 push	 edi
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  00010	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00013	8b 3e		 mov	 edi, DWORD PTR [esi]
  00015	eb 0b		 jmp	 SHORT $LN31@Tidy@2
$LL12@Tidy@2:
  00017	8b cf		 mov	 ecx, edi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0001f	83 c7 14	 add	 edi, 20			; 00000014H
$LN31@Tidy@2:
  00022	3b fb		 cmp	 edi, ebx
  00024	75 f1		 jne	 SHORT $LL12@Tidy@2

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00026	ff 36		 push	 DWORD PTR [esi]
  00028	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002d	59		 pop	 ecx
  0002e	5f		 pop	 edi
  0002f	5b		 pop	 ebx
$LN27@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00030	33 c0		 xor	 eax, eax
  00032	89 06		 mov	 DWORD PTR [esi], eax

; 1310 : 		this->_Mylast = 0;

  00034	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1311 : 		this->_Myend = 0;

  00037	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003a	5e		 pop	 esi

; 1312 : 		}

  0003b	c3		 ret	 0
?_Tidy@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IAEXXZ ENDP ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXI@Z ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXI@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXI@Z$3
__ehfuncinfo$?reserve@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$506023 = -24					; size = 4
$T511552 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXI@Z PROC ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	81 7d 08 cc cc
	cc 0c		 cmp	 DWORD PTR __Count$[ebp], 214748364 ; 0cccccccH
  00015	76 0b		 jbe	 SHORT $LN5@reserve@2

; 748  : 			_Xlen();	// result too long

  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN62@reserve@2:
$LN5@reserve@2:

; 749  : 		else if (capacity() < _Count)

  00022	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00025	2b 06		 sub	 eax, DWORD PTR [esi]
  00027	6a 14		 push	 20			; 00000014H
  00029	99		 cdq
  0002a	59		 pop	 ecx
  0002b	f7 f9		 idiv	 ecx
  0002d	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00030	0f 83 81 00 00
	00		 jae	 $LN3@reserve@2

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00036	6a 00		 push	 0
  00038	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0003b	e8 00 00 00 00	 call	 ??$_Allocate@URecvLog@ioP2PChecker@@@std@@YAPAURecvLog@ioP2PChecker@@IPAU12@@Z ; std::_Allocate<ioP2PChecker::RecvLog>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00040	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00042	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00046	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00049	52		 push	 edx
  0004a	89 45 e8	 mov	 DWORD PTR __Ptr$506023[ebp], eax
  0004d	ff 75 e8	 push	 DWORD PTR __Ptr$506023[ebp]
  00050	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00053	50		 push	 eax
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAURecvLog@ioP2PChecker@@PAU12@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@YAPAURecvLog@ioP2PChecker@@PAU12@00AAV?$allocator@URecvLog@ioP2PChecker@@@0@@Z ; std::_Uninitialized_move<ioP2PChecker::RecvLog *,ioP2PChecker::RecvLog *,std::allocator<ioP2PChecker::RecvLog> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  0005a	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  0005d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005f	83 c4 18	 add	 esp, 24			; 00000018H
  00062	8b c3		 mov	 eax, ebx
  00064	2b c1		 sub	 eax, ecx
  00066	6a 14		 push	 20			; 00000014H
  00068	99		 cdq
  00069	5f		 pop	 edi
  0006a	f7 ff		 idiv	 edi
  0006c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00070	8b f8		 mov	 edi, eax
  00072	85 c9		 test	 ecx, ecx
  00074	74 21		 je	 SHORT $LN54@reserve@2

; 761  : 			if (this->_Myfirst != 0)
; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  00076	89 4d ec	 mov	 DWORD PTR $T511552[ebp], ecx
  00079	3b cb		 cmp	 ecx, ebx
  0007b	74 12		 je	 SHORT $LN37@reserve@2
$LN39@reserve@2:
  0007d	8b 4d ec	 mov	 ecx, DWORD PTR $T511552[ebp]
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00086	83 45 ec 14	 add	 DWORD PTR $T511552[ebp], 20 ; 00000014H
  0008a	39 5d ec	 cmp	 DWORD PTR $T511552[ebp], ebx
  0008d	75 ee		 jne	 SHORT $LN39@reserve@2
$LN37@reserve@2:

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  0008f	ff 36		 push	 DWORD PTR [esi]
  00091	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00096	59		 pop	 ecx
$LN54@reserve@2:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00097	8b ce		 mov	 ecx, esi
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;
; 770  : 			this->_Mylast = _Ptr + _Size;

  0009f	6b ff 14	 imul	 edi, 20			; 00000014H
  000a2	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  000a5	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$506023[ebp]
  000a8	6b c0 14	 imul	 eax, 20			; 00000014H
  000ab	03 c1		 add	 eax, ecx
  000ad	03 f9		 add	 edi, ecx
  000af	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000b2	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  000b5	89 0e		 mov	 DWORD PTR [esi], ecx
$LN3@reserve@2:

; 772  : 			}
; 773  : 		}

  000b7	e8 00 00 00 00	 call	 __EH_epilog3
  000bc	c2 04 00	 ret	 4
__catch$?reserve@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000bf	ff 75 e8	 push	 DWORD PTR __Ptr$506023[ebp]
  000c2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c7	59		 pop	 ecx

; 757  : 			_RERAISE;

  000c8	6a 00		 push	 0
  000ca	6a 00		 push	 0
  000cc	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN63@reserve@2:
$LN61@reserve@2:
  000d1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXI@Z ENDP ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::reserve
PUBLIC	??$_Sort@PAUPacketData@ioP2PChecker@@HVPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0HVPacketSendSort@2@@Z ; std::_Sort<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketSendSort>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Sort@PAUPacketData@ioP2PChecker@@HVPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0HVPacketSendSort@2@@Z
_TEXT	SEGMENT
__Mid$506933 = -8					; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort@PAUPacketData@ioP2PChecker@@HVPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0HVPacketSendSort@2@@Z PROC ; std::_Sort<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketSendSort>, COMDAT

; 3771 : 	{	// order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx

; 3772 : 	_Diff _Count;
; 3773 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

  00006	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00009	57		 push	 edi
  0000a	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000d	8b c7		 mov	 eax, edi
  0000f	2b c3		 sub	 eax, ebx
  00011	6a 18		 push	 24			; 00000018H
  00013	99		 cdq
  00014	59		 pop	 ecx
  00015	f7 f9		 idiv	 ecx
  00017	83 f8 20	 cmp	 eax, 32			; 00000020H
  0001a	0f 8e 9c 00 00
	00		 jle	 $LN22@Sort
  00020	56		 push	 esi
  00021	8b 75 10	 mov	 esi, DWORD PTR __Ideal$[ebp]
$LL7@Sort:
  00024	85 f6		 test	 esi, esi
  00026	7e 75		 jle	 SHORT $LN6@Sort

; 3774 : 		{	// divide and conquer by quicksort
; 3775 : 		_STD pair<_RanIt, _RanIt> _Mid =
; 3776 : 			_Unguarded_partition(_First, _Last, _Pred);

  00028	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0002b	8d 45 f8	 lea	 eax, DWORD PTR __Mid$506933[ebp]
  0002e	57		 push	 edi
  0002f	53		 push	 ebx
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$_Unguarded_partition@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YA?AU?$pair@PAUPacketData@ioP2PChecker@@PAU12@@0@PAUPacketData@ioP2PChecker@@0VPacketSendSort@3@@Z ; std::_Unguarded_partition<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>

; 3777 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions

  00036	8b c6		 mov	 eax, esi
  00038	99		 cdq
  00039	2b c2		 sub	 eax, edx
  0003b	d1 f8		 sar	 eax, 1
  0003d	8b f0		 mov	 esi, eax
  0003f	99		 cdq
  00040	2b c2		 sub	 eax, edx
  00042	d1 f8		 sar	 eax, 1
  00044	03 f0		 add	 esi, eax
  00046	83 c4 10	 add	 esp, 16			; 00000010H

; 3778 : 
; 3779 : 		if (_Mid.first - _First < _Last - _Mid.second)

  00049	8b c7		 mov	 eax, edi
  0004b	2b 45 fc	 sub	 eax, DWORD PTR __Mid$506933[ebp+4]
  0004e	6a 18		 push	 24			; 00000018H
  00050	99		 cdq
  00051	59		 pop	 ecx
  00052	f7 f9		 idiv	 ecx
  00054	6a 18		 push	 24			; 00000018H
  00056	8b c8		 mov	 ecx, eax
  00058	8b 45 f8	 mov	 eax, DWORD PTR __Mid$506933[ebp]
  0005b	2b c3		 sub	 eax, ebx
  0005d	5b		 pop	 ebx
  0005e	99		 cdq
  0005f	f7 fb		 idiv	 ebx

; 3780 : 			{	// loop on second half
; 3781 : 			_Sort(_First, _Mid.first, _Ideal, _Pred);

  00061	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00064	56		 push	 esi
  00065	3b c1		 cmp	 eax, ecx
  00067	7d 13		 jge	 SHORT $LN5@Sort
  00069	ff 75 f8	 push	 DWORD PTR __Mid$506933[ebp]
  0006c	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0006f	e8 00 00 00 00	 call	 ??$_Sort@PAUPacketData@ioP2PChecker@@HVPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0HVPacketSendSort@2@@Z ; std::_Sort<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketSendSort>

; 3782 : 			_First = _Mid.second;

  00074	8b 5d fc	 mov	 ebx, DWORD PTR __Mid$506933[ebp+4]
  00077	89 5d 08	 mov	 DWORD PTR __First$[ebp], ebx

; 3783 : 			}
; 3784 : 		else

  0007a	eb 0f		 jmp	 SHORT $LN23@Sort
$LN5@Sort:

; 3785 : 			{	// loop on first half
; 3786 : 			_Sort(_Mid.second, _Last, _Ideal, _Pred);

  0007c	57		 push	 edi
  0007d	ff 75 fc	 push	 DWORD PTR __Mid$506933[ebp+4]
  00080	e8 00 00 00 00	 call	 ??$_Sort@PAUPacketData@ioP2PChecker@@HVPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0HVPacketSendSort@2@@Z ; std::_Sort<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketSendSort>

; 3787 : 			_Last = _Mid.first;

  00085	8b 7d f8	 mov	 edi, DWORD PTR __Mid$506933[ebp]
  00088	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
$LN23@Sort:

; 3772 : 	_Diff _Count;
; 3773 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

  0008b	83 c4 10	 add	 esp, 16			; 00000010H
  0008e	8b c7		 mov	 eax, edi
  00090	2b c3		 sub	 eax, ebx
  00092	6a 18		 push	 24			; 00000018H
  00094	99		 cdq
  00095	59		 pop	 ecx
  00096	f7 f9		 idiv	 ecx
  00098	83 f8 20	 cmp	 eax, 32			; 00000020H
  0009b	7f 87		 jg	 SHORT $LL7@Sort
$LN6@Sort:
  0009d	5e		 pop	 esi

; 3788 : 			}
; 3789 : 		}
; 3790 : 
; 3791 : 	if (_ISORT_MAX < _Count)

  0009e	83 f8 20	 cmp	 eax, 32			; 00000020H
  000a1	7e 19		 jle	 SHORT $LN22@Sort

; 3792 : 		{	// heap sort if too many divisions
; 3793 : 		_STD make_heap(_First, _Last, _Pred);

  000a3	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000a6	57		 push	 edi
  000a7	53		 push	 ebx
  000a8	e8 00 00 00 00	 call	 ??$make_heap@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@@Z ; std::make_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>

; 3794 : 		_STD sort_heap(_First, _Last, _Pred);

  000ad	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000b0	57		 push	 edi
  000b1	53		 push	 ebx
  000b2	e8 00 00 00 00	 call	 ??$_Sort_heap@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@@Z ; std::_Sort_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort>
  000b7	83 c4 18	 add	 esp, 24			; 00000018H
  000ba	eb 14		 jmp	 SHORT $LN16@Sort
$LN22@Sort:

; 3795 : 		}
; 3796 : 	else if (1 < _Count)

  000bc	83 f8 01	 cmp	 eax, 1
  000bf	7e 0f		 jle	 SHORT $LN16@Sort

; 3797 : 		_Insertion_sort(_First, _Last, _Pred);	// small

  000c1	6a 00		 push	 0
  000c3	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000c6	57		 push	 edi
  000c7	53		 push	 ebx
  000c8	e8 00 00 00 00	 call	 ??$_Insertion_sort1@PAUPacketData@ioP2PChecker@@VPacketSendSort@2@U12@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketSendSort@2@0@Z ; std::_Insertion_sort1<ioP2PChecker::PacketData *,ioP2PChecker::PacketSendSort,ioP2PChecker::PacketData>
  000cd	83 c4 10	 add	 esp, 16			; 00000010H
$LN16@Sort:
  000d0	5f		 pop	 edi
  000d1	5b		 pop	 ebx

; 3798 : 	}

  000d2	c9		 leave
  000d3	c3		 ret	 0
??$_Sort@PAUPacketData@ioP2PChecker@@HVPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0HVPacketSendSort@2@@Z ENDP ; std::_Sort<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketSendSort>
_TEXT	ENDS
PUBLIC	??$_Sort@PAUPacketData@ioP2PChecker@@HVPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0HVPacketRecvSort@2@@Z ; std::_Sort<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketRecvSort>
; Function compile flags: /Ogsp
;	COMDAT ??$_Sort@PAUPacketData@ioP2PChecker@@HVPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0HVPacketRecvSort@2@@Z
_TEXT	SEGMENT
__Mid$507001 = -8					; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort@PAUPacketData@ioP2PChecker@@HVPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0HVPacketRecvSort@2@@Z PROC ; std::_Sort<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketRecvSort>, COMDAT

; 3771 : 	{	// order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx

; 3772 : 	_Diff _Count;
; 3773 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

  00006	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00009	57		 push	 edi
  0000a	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000d	8b c7		 mov	 eax, edi
  0000f	2b c3		 sub	 eax, ebx
  00011	6a 18		 push	 24			; 00000018H
  00013	99		 cdq
  00014	59		 pop	 ecx
  00015	f7 f9		 idiv	 ecx
  00017	83 f8 20	 cmp	 eax, 32			; 00000020H
  0001a	0f 8e 9c 00 00
	00		 jle	 $LN22@Sort@2
  00020	56		 push	 esi
  00021	8b 75 10	 mov	 esi, DWORD PTR __Ideal$[ebp]
$LL7@Sort@2:
  00024	85 f6		 test	 esi, esi
  00026	7e 75		 jle	 SHORT $LN6@Sort@2

; 3774 : 		{	// divide and conquer by quicksort
; 3775 : 		_STD pair<_RanIt, _RanIt> _Mid =
; 3776 : 			_Unguarded_partition(_First, _Last, _Pred);

  00028	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0002b	8d 45 f8	 lea	 eax, DWORD PTR __Mid$507001[ebp]
  0002e	57		 push	 edi
  0002f	53		 push	 ebx
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$_Unguarded_partition@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YA?AU?$pair@PAUPacketData@ioP2PChecker@@PAU12@@0@PAUPacketData@ioP2PChecker@@0VPacketRecvSort@3@@Z ; std::_Unguarded_partition<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>

; 3777 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions

  00036	8b c6		 mov	 eax, esi
  00038	99		 cdq
  00039	2b c2		 sub	 eax, edx
  0003b	d1 f8		 sar	 eax, 1
  0003d	8b f0		 mov	 esi, eax
  0003f	99		 cdq
  00040	2b c2		 sub	 eax, edx
  00042	d1 f8		 sar	 eax, 1
  00044	03 f0		 add	 esi, eax
  00046	83 c4 10	 add	 esp, 16			; 00000010H

; 3778 : 
; 3779 : 		if (_Mid.first - _First < _Last - _Mid.second)

  00049	8b c7		 mov	 eax, edi
  0004b	2b 45 fc	 sub	 eax, DWORD PTR __Mid$507001[ebp+4]
  0004e	6a 18		 push	 24			; 00000018H
  00050	99		 cdq
  00051	59		 pop	 ecx
  00052	f7 f9		 idiv	 ecx
  00054	6a 18		 push	 24			; 00000018H
  00056	8b c8		 mov	 ecx, eax
  00058	8b 45 f8	 mov	 eax, DWORD PTR __Mid$507001[ebp]
  0005b	2b c3		 sub	 eax, ebx
  0005d	5b		 pop	 ebx
  0005e	99		 cdq
  0005f	f7 fb		 idiv	 ebx

; 3780 : 			{	// loop on second half
; 3781 : 			_Sort(_First, _Mid.first, _Ideal, _Pred);

  00061	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00064	56		 push	 esi
  00065	3b c1		 cmp	 eax, ecx
  00067	7d 13		 jge	 SHORT $LN5@Sort@2
  00069	ff 75 f8	 push	 DWORD PTR __Mid$507001[ebp]
  0006c	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0006f	e8 00 00 00 00	 call	 ??$_Sort@PAUPacketData@ioP2PChecker@@HVPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0HVPacketRecvSort@2@@Z ; std::_Sort<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketRecvSort>

; 3782 : 			_First = _Mid.second;

  00074	8b 5d fc	 mov	 ebx, DWORD PTR __Mid$507001[ebp+4]
  00077	89 5d 08	 mov	 DWORD PTR __First$[ebp], ebx

; 3783 : 			}
; 3784 : 		else

  0007a	eb 0f		 jmp	 SHORT $LN23@Sort@2
$LN5@Sort@2:

; 3785 : 			{	// loop on first half
; 3786 : 			_Sort(_Mid.second, _Last, _Ideal, _Pred);

  0007c	57		 push	 edi
  0007d	ff 75 fc	 push	 DWORD PTR __Mid$507001[ebp+4]
  00080	e8 00 00 00 00	 call	 ??$_Sort@PAUPacketData@ioP2PChecker@@HVPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0HVPacketRecvSort@2@@Z ; std::_Sort<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketRecvSort>

; 3787 : 			_Last = _Mid.first;

  00085	8b 7d f8	 mov	 edi, DWORD PTR __Mid$507001[ebp]
  00088	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
$LN23@Sort@2:

; 3772 : 	_Diff _Count;
; 3773 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

  0008b	83 c4 10	 add	 esp, 16			; 00000010H
  0008e	8b c7		 mov	 eax, edi
  00090	2b c3		 sub	 eax, ebx
  00092	6a 18		 push	 24			; 00000018H
  00094	99		 cdq
  00095	59		 pop	 ecx
  00096	f7 f9		 idiv	 ecx
  00098	83 f8 20	 cmp	 eax, 32			; 00000020H
  0009b	7f 87		 jg	 SHORT $LL7@Sort@2
$LN6@Sort@2:
  0009d	5e		 pop	 esi

; 3788 : 			}
; 3789 : 		}
; 3790 : 
; 3791 : 	if (_ISORT_MAX < _Count)

  0009e	83 f8 20	 cmp	 eax, 32			; 00000020H
  000a1	7e 19		 jle	 SHORT $LN22@Sort@2

; 3792 : 		{	// heap sort if too many divisions
; 3793 : 		_STD make_heap(_First, _Last, _Pred);

  000a3	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000a6	57		 push	 edi
  000a7	53		 push	 ebx
  000a8	e8 00 00 00 00	 call	 ??$make_heap@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@@Z ; std::make_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>

; 3794 : 		_STD sort_heap(_First, _Last, _Pred);

  000ad	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000b0	57		 push	 edi
  000b1	53		 push	 ebx
  000b2	e8 00 00 00 00	 call	 ??$_Sort_heap@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@@Z ; std::_Sort_heap<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort>
  000b7	83 c4 18	 add	 esp, 24			; 00000018H
  000ba	eb 14		 jmp	 SHORT $LN16@Sort@2
$LN22@Sort@2:

; 3795 : 		}
; 3796 : 	else if (1 < _Count)

  000bc	83 f8 01	 cmp	 eax, 1
  000bf	7e 0f		 jle	 SHORT $LN16@Sort@2

; 3797 : 		_Insertion_sort(_First, _Last, _Pred);	// small

  000c1	6a 00		 push	 0
  000c3	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000c6	57		 push	 edi
  000c7	53		 push	 ebx
  000c8	e8 00 00 00 00	 call	 ??$_Insertion_sort1@PAUPacketData@ioP2PChecker@@VPacketRecvSort@2@U12@@std@@YAXPAUPacketData@ioP2PChecker@@0VPacketRecvSort@2@0@Z ; std::_Insertion_sort1<ioP2PChecker::PacketData *,ioP2PChecker::PacketRecvSort,ioP2PChecker::PacketData>
  000cd	83 c4 10	 add	 esp, 16			; 00000010H
$LN16@Sort@2:
  000d0	5f		 pop	 edi
  000d1	5b		 pop	 ebx

; 3798 : 	}

  000d2	c9		 leave
  000d3	c3		 ret	 0
??$_Sort@PAUPacketData@ioP2PChecker@@HVPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0HVPacketRecvSort@2@@Z ENDP ; std::_Sort<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketRecvSort>
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXABUPacketData@ioP2PChecker@@@Z ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXABUPacketData@ioP2PChecker@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXABUPacketData@ioP2PChecker@@@Z PROC ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 34		 jae	 SHORT $LN4@push_back
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 2e		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 18		 push	 24			; 00000018H
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IAEXI@Z ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00031	6b ff 18	 imul	 edi, 24			; 00000018H
  00034	03 3e		 add	 edi, DWORD PTR [esi]
  00036	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00039	57		 push	 edi
  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UPacketData@ioP2PChecker@@@std@@UPacketData@ioP2PChecker@@AAU34@@std@@YAXAAV?$allocator@UPacketData@ioP2PChecker@@@0@PAUPacketData@ioP2PChecker@@AAU23@@Z ; std::_Cons_val<std::allocator<ioP2PChecker::PacketData>,ioP2PChecker::PacketData,ioP2PChecker::PacketData &>

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00043	eb 1b		 jmp	 SHORT $LN20@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00045	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00048	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004a	6a 01		 push	 1
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IAEXI@Z ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00053	57		 push	 edi
  00054	ff 76 04	 push	 DWORD PTR [esi+4]
  00057	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UPacketData@ioP2PChecker@@@std@@UPacketData@ioP2PChecker@@ABU34@@std@@YAXAAV?$allocator@UPacketData@ioP2PChecker@@@0@PAUPacketData@ioP2PChecker@@ABU23@@Z ; std::_Cons_val<std::allocator<ioP2PChecker::PacketData>,ioP2PChecker::PacketData,ioP2PChecker::PacketData const &>
$LN20@push_back:
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00063	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
?push_back@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXABUPacketData@ioP2PChecker@@@Z ENDP ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::push_back
_TEXT	ENDS
PUBLIC	??1?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE@XZ ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::~vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE@XZ PROC ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::~vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IAEXXZ ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Tidy
??1?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::~vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXXZ ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T511711 = -4						; size = 4
?clear@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXXZ PROC ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T511711[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@0@Z ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXXZ ENDP ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IAEXI@Z ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IAEXI@Z PROC ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 14		 push	 20			; 00000014H
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0b		 jae	 SHORT $LN4@Reserve@2

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve@2:
$LN4@Reserve@2:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00030	2b c1		 sub	 eax, ecx
  00032	6a 14		 push	 20			; 00000014H
  00034	99		 cdq
  00035	59		 pop	 ecx
  00036	f7 f9		 idiv	 ecx
  00038	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003b	3b f8		 cmp	 edi, eax
  0003d	76 10		 jbe	 SHORT $LN1@Reserve@2

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003f	57		 push	 edi
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IBEII@Z ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Grow_to
  00047	50		 push	 eax
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?reserve@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXI@Z ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::reserve
$LN1@Reserve@2:
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 1298 : 		}

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN20@Reserve@2:
?_Reserve@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Reserve
_TEXT	ENDS
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@VPacketSendSort@ioP2PChecker@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@0@0VPacketSendSort@ioP2PChecker@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >,ioP2PChecker::PacketSendSort>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@VPacketSendSort@ioP2PChecker@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@0@0VPacketSendSort@ioP2PChecker@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$sort@V?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@VPacketSendSort@ioP2PChecker@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@0@0VPacketSendSort@ioP2PChecker@@@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >,ioP2PChecker::PacketSendSort>, COMDAT

; 3803 : 	{	// order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3804 : 	_DEBUG_RANGE(_First, _Last);
; 3805 : 	_DEBUG_POINTER(_Pred);
; 3806 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);

  00003	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0000c	6a 18		 push	 24			; 00000018H
  0000e	59		 pop	 ecx
  0000f	99		 cdq
  00010	f7 f9		 idiv	 ecx
  00012	50		 push	 eax
  00013	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00016	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00019	e8 00 00 00 00	 call	 ??$_Sort@PAUPacketData@ioP2PChecker@@HVPacketSendSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0HVPacketSendSort@2@@Z ; std::_Sort<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketSendSort>
  0001e	83 c4 10	 add	 esp, 16			; 00000010H

; 3807 : 	}

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??$sort@V?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@VPacketSendSort@ioP2PChecker@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@0@0VPacketSendSort@ioP2PChecker@@@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >,ioP2PChecker::PacketSendSort>
_TEXT	ENDS
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@VPacketRecvSort@ioP2PChecker@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@0@0VPacketRecvSort@ioP2PChecker@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >,ioP2PChecker::PacketRecvSort>
; Function compile flags: /Ogsp
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@VPacketRecvSort@ioP2PChecker@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@0@0VPacketRecvSort@ioP2PChecker@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$sort@V?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@VPacketRecvSort@ioP2PChecker@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@0@0VPacketRecvSort@ioP2PChecker@@@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >,ioP2PChecker::PacketRecvSort>, COMDAT

; 3803 : 	{	// order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3804 : 	_DEBUG_RANGE(_First, _Last);
; 3805 : 	_DEBUG_POINTER(_Pred);
; 3806 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);

  00003	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0000c	6a 18		 push	 24			; 00000018H
  0000e	59		 pop	 ecx
  0000f	99		 cdq
  00010	f7 f9		 idiv	 ecx
  00012	50		 push	 eax
  00013	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00016	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00019	e8 00 00 00 00	 call	 ??$_Sort@PAUPacketData@ioP2PChecker@@HVPacketRecvSort@2@@std@@YAXPAUPacketData@ioP2PChecker@@0HVPacketRecvSort@2@@Z ; std::_Sort<ioP2PChecker::PacketData *,int,ioP2PChecker::PacketRecvSort>
  0001e	83 c4 10	 add	 esp, 16			; 00000010H

; 3807 : 	}

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??$sort@V?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@VPacketRecvSort@ioP2PChecker@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@0@0VPacketRecvSort@ioP2PChecker@@@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >,ioP2PChecker::PacketRecvSort>
_TEXT	ENDS
PUBLIC	??_7ioP2PChecker@@6B@				; ioP2PChecker::`vftable'
PUBLIC	??0ioP2PChecker@@QAE@XZ				; ioP2PChecker::ioP2PChecker
PUBLIC	??_R4ioP2PChecker@@6B@				; ioP2PChecker::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioP2PChecker@@@8			; ioP2PChecker `RTTI Type Descriptor'
PUBLIC	??_R3ioP2PChecker@@8				; ioP2PChecker::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioP2PChecker@@8				; ioP2PChecker::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioP2PChecker@@8			; ioP2PChecker::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@?$Singleton@VioP2PChecker@@@@8	; Singleton<ioP2PChecker>::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AV?$Singleton@VioP2PChecker@@@@@8		; Singleton<ioP2PChecker> `RTTI Type Descriptor'
PUBLIC	??_R3?$Singleton@VioP2PChecker@@@@8		; Singleton<ioP2PChecker>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$Singleton@VioP2PChecker@@@@8		; Singleton<ioP2PChecker>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$Singleton@VioP2PChecker@@@@8	; Singleton<ioP2PChecker>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EioP2PChecker@@UAEPAXI@Z:PROC		; ioP2PChecker::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$Singleton@VioP2PChecker@@@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R1A@?0A@EA@?$Singleton@VioP2PChecker@@@@8 DD FLAT:??_R0?AV?$Singleton@VioP2PChecker@@@@@8 ; Singleton<ioP2PChecker>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Singleton@VioP2PChecker@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$Singleton@VioP2PChecker@@@@8
rdata$r	SEGMENT
??_R2?$Singleton@VioP2PChecker@@@@8 DD FLAT:??_R1A@?0A@EA@?$Singleton@VioP2PChecker@@@@8 ; Singleton<ioP2PChecker>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$Singleton@VioP2PChecker@@@@8
rdata$r	SEGMENT
??_R3?$Singleton@VioP2PChecker@@@@8 DD 00H		; Singleton<ioP2PChecker>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$Singleton@VioP2PChecker@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$Singleton@VioP2PChecker@@@@@8
_DATA	SEGMENT
??_R0?AV?$Singleton@VioP2PChecker@@@@@8 DD FLAT:??_7type_info@@6B@ ; Singleton<ioP2PChecker> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$Singleton@VioP2PChecker@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@?$Singleton@VioP2PChecker@@@@8
rdata$r	SEGMENT
??_R13?0A@EA@?$Singleton@VioP2PChecker@@@@8 DD FLAT:??_R0?AV?$Singleton@VioP2PChecker@@@@@8 ; Singleton<ioP2PChecker>::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Singleton@VioP2PChecker@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioP2PChecker@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioP2PChecker@@8 DD FLAT:??_R0?AVioP2PChecker@@@8 ; ioP2PChecker::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioP2PChecker@@8
rdata$r	ENDS
;	COMDAT ??_R2ioP2PChecker@@8
rdata$r	SEGMENT
??_R2ioP2PChecker@@8 DD FLAT:??_R1A@?0A@EA@ioP2PChecker@@8 ; ioP2PChecker::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@?$Singleton@VioP2PChecker@@@@8
rdata$r	ENDS
;	COMDAT ??_R3ioP2PChecker@@8
rdata$r	SEGMENT
??_R3ioP2PChecker@@8 DD 00H				; ioP2PChecker::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioP2PChecker@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioP2PChecker@@@8
_DATA	SEGMENT
??_R0?AVioP2PChecker@@@8 DD FLAT:??_7type_info@@6B@	; ioP2PChecker `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioP2PChecker@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioP2PChecker@@6B@
rdata$r	SEGMENT
??_R4ioP2PChecker@@6B@ DD 00H				; ioP2PChecker::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioP2PChecker@@@8
	DD	FLAT:??_R3ioP2PChecker@@8
rdata$r	ENDS
;	COMDAT ??_7ioP2PChecker@@6B@
CONST	SEGMENT
??_7ioP2PChecker@@6B@ DD FLAT:??_R4ioP2PChecker@@6B@	; ioP2PChecker::`vftable'
	DD	FLAT:??_EioP2PChecker@@UAEPAXI@Z
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iop2pchecker.cpp
CONST	ENDS
;	COMDAT ??0ioP2PChecker@@QAE@XZ
_TEXT	SEGMENT
??0ioP2PChecker@@QAE@XZ PROC				; ioP2PChecker::ioP2PChecker, COMDAT
; _this$ = ecx

; 10   : {

  00000	8b c1		 mov	 eax, ecx
  00002	a3 00 00 00 00	 mov	 DWORD PTR ?ms_Singleton@?$Singleton@VioP2PChecker@@@@1PAVioP2PChecker@@A, eax ; Singleton<ioP2PChecker>::ms_Singleton
  00007	33 c9		 xor	 ecx, ecx
  00009	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ioP2PChecker@@6B@
  0000f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00012	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00015	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00018	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  0001b	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  0001e	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  00021	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 11   : 	m_bView = false;

  00024	88 48 28	 mov	 BYTE PTR [eax+40], cl

; 12   : }

  00027	c3		 ret	 0
??0ioP2PChecker@@QAE@XZ ENDP				; ioP2PChecker::ioP2PChecker
_TEXT	ENDS
PUBLIC	??1ioP2PChecker@@UAE@XZ				; ioP2PChecker::~ioP2PChecker
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iosingleton.h
xdata$x	SEGMENT
__unwindtable$??1ioP2PChecker@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioP2PChecker@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioP2PChecker@@UAE@XZ$1
__ehfuncinfo$??1ioP2PChecker@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1ioP2PChecker@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iop2pchecker.cpp
xdata$x	ENDS
;	COMDAT ??1ioP2PChecker@@UAE@XZ
_TEXT	SEGMENT
$T511994 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioP2PChecker@@UAE@XZ PROC				; ioP2PChecker::~ioP2PChecker, COMDAT
; _this$ = ecx

; 15   : {	

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioP2PChecker@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7ioP2PChecker@@6B@

; 16   : 	m_vPacketList.clear();

  00017	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0001a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0001d	50		 push	 eax
  0001e	51		 push	 ecx
  0001f	8d 45 ec	 lea	 eax, DWORD PTR $T511994[ebp]
  00022	50		 push	 eax
  00023	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00026	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0002d	e8 00 00 00 00	 call	 ?erase@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@0@Z ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::erase

; 17   : }

  00032	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  00035	e8 00 00 00 00	 call	 ?_Tidy@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IAEXXZ ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Tidy
  0003a	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  0003d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00041	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@IAEXXZ ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::_Tidy
  00046	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_Singleton@?$Singleton@VioP2PChecker@@@@1PAVioP2PChecker@@A, 0 ; Singleton<ioP2PChecker>::ms_Singleton
  0004d	e8 00 00 00 00	 call	 __EH_epilog3
  00052	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioP2PChecker@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$Singleton@VioP2PChecker@@@@QAE@XZ ; Singleton<ioP2PChecker>::~Singleton<ioP2PChecker>
__unwindfunclet$??1ioP2PChecker@@UAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 04	 add	 ecx, 4
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE@XZ ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::~vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >
__ehhandler$??1ioP2PChecker@@UAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioP2PChecker@@UAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioP2PChecker@@UAE@XZ ENDP				; ioP2PChecker::~ioP2PChecker
PUBLIC	?Initialize@ioP2PChecker@@QAEXXZ		; ioP2PChecker::Initialize
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?Initialize@ioP2PChecker@@QAEXXZ
_TEXT	SEGMENT
$T512180 = -4						; size = 4
$T512100 = -4						; size = 4
?Initialize@ioP2PChecker@@QAEXXZ PROC			; ioP2PChecker::Initialize, COMDAT
; _this$ = ecx

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 26   : 	m_vPacketList.clear();

  00007	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0000a	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	50		 push	 eax
  00010	52		 push	 edx
  00011	8d 45 fc	 lea	 eax, DWORD PTR $T512100[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?erase@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@2@0@Z ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::erase

; 27   : 	m_vRecvLog.clear();

  0001a	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0001d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00020	8b 11		 mov	 edx, DWORD PTR [ecx]
  00022	50		 push	 eax
  00023	52		 push	 edx
  00024	8d 45 fc	 lea	 eax, DWORD PTR $T512180[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?erase@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@@2@0@Z ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::erase

; 28   : 	m_dwProcessTime = FRAMEGETTIME();

  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00033	8b c8		 mov	 ecx, eax
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0003b	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0003e	5e		 pop	 esi

; 29   : }

  0003f	c9		 leave
  00040	c3		 ret	 0
?Initialize@ioP2PChecker@@QAEXXZ ENDP			; ioP2PChecker::Initialize
_TEXT	ENDS
PUBLIC	?AddSendPacket@ioP2PChecker@@QAEXK@Z		; ioP2PChecker::AddSendPacket
; Function compile flags: /Ogsp
;	COMDAT ?AddSendPacket@ioP2PChecker@@QAEXK@Z
_TEXT	SEGMENT
_kData$ = -24						; size = 24
_dwID$ = 8						; size = 4
?AddSendPacket@ioP2PChecker@@QAEXK@Z PROC		; ioP2PChecker::AddSendPacket, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 33   : 	vPacketData::iterator iter,iEnd;
; 34   : 	iEnd = m_vPacketList.end();

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	83 ec 18	 sub	 esp, 24			; 00000018H

; 35   : 	for(iter = m_vPacketList.begin();iter != iEnd;iter++)

  00009	83 c1 04	 add	 ecx, 4
  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR _dwID$[ebp]
  00012	eb 07		 jmp	 SHORT $LN52@AddSendPac
$LL35@AddSendPac:

; 36   : 	{
; 37   : 		PacketData &kData = *iter;
; 38   : 		if( kData.m_dwID == dwID )

  00014	39 30		 cmp	 DWORD PTR [eax], esi
  00016	74 2c		 je	 SHORT $LN50@AddSendPac

; 35   : 	for(iter = m_vPacketList.begin();iter != iEnd;iter++)

  00018	83 c0 18	 add	 eax, 24			; 00000018H
$LN52@AddSendPac:
  0001b	3b c2		 cmp	 eax, edx
  0001d	75 f5		 jne	 SHORT $LL35@AddSendPac

; 42   : 		}
; 43   : 	}
; 44   : 
; 45   : 	PacketData kData;
; 46   : 	kData.m_dwID = dwID;
; 47   : 	kData.m_iSendCount = 1;

  0001f	83 65 f4 00	 and	 DWORD PTR _kData$[ebp+12], 0

; 48   : 	m_vPacketList.push_back( kData );

  00023	8d 45 e8	 lea	 eax, DWORD PTR _kData$[ebp]
  00026	66 0f 57 c0	 xorpd	 xmm0, xmm0
  0002a	50		 push	 eax
  0002b	66 0f 13 45 f8	 movlpd	 QWORD PTR _kData$[ebp+16], xmm0
  00030	89 75 e8	 mov	 DWORD PTR _kData$[ebp], esi
  00033	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _kData$[ebp+8], 1
  0003a	e8 00 00 00 00	 call	 ?push_back@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXABUPacketData@ioP2PChecker@@@Z ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::push_back
$LN5@AddSendPac:
  0003f	5e		 pop	 esi

; 49   : }

  00040	c9		 leave
  00041	c2 04 00	 ret	 4
$LN50@AddSendPac:

; 39   : 		{
; 40   : 			kData.m_iSendCount++;

  00044	83 40 08 01	 add	 DWORD PTR [eax+8], 1
  00048	83 50 0c 00	 adc	 DWORD PTR [eax+12], 0

; 41   : 			return;

  0004c	eb f1		 jmp	 SHORT $LN5@AddSendPac
?AddSendPacket@ioP2PChecker@@QAEXK@Z ENDP		; ioP2PChecker::AddSendPacket
_TEXT	ENDS
PUBLIC	?AddRecvPacket@ioP2PChecker@@QAEXK@Z		; ioP2PChecker::AddRecvPacket
; Function compile flags: /Ogsp
;	COMDAT ?AddRecvPacket@ioP2PChecker@@QAEXK@Z
_TEXT	SEGMENT
_kData$ = -24						; size = 24
_dwID$ = 8						; size = 4
?AddRecvPacket@ioP2PChecker@@QAEXK@Z PROC		; ioP2PChecker::AddRecvPacket, COMDAT
; _this$ = ecx

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 53   : 	vPacketData::iterator iter,iEnd;
; 54   : 	iEnd = m_vPacketList.end();

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	83 ec 18	 sub	 esp, 24			; 00000018H

; 55   : 	for(iter = m_vPacketList.begin();iter != iEnd;iter++)

  00009	83 c1 04	 add	 ecx, 4
  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR _dwID$[ebp]
  00012	eb 07		 jmp	 SHORT $LN52@AddRecvPac
$LL35@AddRecvPac:

; 56   : 	{
; 57   : 		PacketData &kData = *iter;
; 58   : 		if( kData.m_dwID == dwID )

  00014	39 30		 cmp	 DWORD PTR [eax], esi
  00016	74 2c		 je	 SHORT $LN50@AddRecvPac

; 55   : 	for(iter = m_vPacketList.begin();iter != iEnd;iter++)

  00018	83 c0 18	 add	 eax, 24			; 00000018H
$LN52@AddRecvPac:
  0001b	3b c2		 cmp	 eax, edx
  0001d	75 f5		 jne	 SHORT $LL35@AddRecvPac

; 62   : 		}
; 63   : 	}
; 64   : 
; 65   : 	PacketData kData;
; 66   : 	kData.m_dwID = dwID;
; 67   : 	kData.m_iRecvCount = 1;

  0001f	83 65 fc 00	 and	 DWORD PTR _kData$[ebp+20], 0

; 68   : 	m_vPacketList.push_back( kData );

  00023	8d 45 e8	 lea	 eax, DWORD PTR _kData$[ebp]
  00026	66 0f 57 c0	 xorpd	 xmm0, xmm0
  0002a	50		 push	 eax
  0002b	66 0f 13 45 f0	 movlpd	 QWORD PTR _kData$[ebp+8], xmm0
  00030	89 75 e8	 mov	 DWORD PTR _kData$[ebp], esi
  00033	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _kData$[ebp+16], 1
  0003a	e8 00 00 00 00	 call	 ?push_back@?$vector@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@QAEXABUPacketData@ioP2PChecker@@@Z ; std::vector<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> >::push_back
$LN5@AddRecvPac:
  0003f	5e		 pop	 esi

; 69   : }

  00040	c9		 leave
  00041	c2 04 00	 ret	 4
$LN50@AddRecvPac:

; 59   : 		{
; 60   : 			kData.m_iRecvCount++;

  00044	83 40 10 01	 add	 DWORD PTR [eax+16], 1
  00048	83 50 14 00	 adc	 DWORD PTR [eax+20], 0

; 61   : 			return;

  0004c	eb f1		 jmp	 SHORT $LN5@AddRecvPac
?AddRecvPacket@ioP2PChecker@@QAEXK@Z ENDP		; ioP2PChecker::AddRecvPacket
_TEXT	ENDS
PUBLIC	??_C@_0N@GLJBFLAE@0x?$CFx?5?3?5?$CFI64d?$AA@	; `string'
PUBLIC	??_C@_04CGFJFPFD@none?$AA@			; `string'
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	?SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z ; ioP2PChecker::SendPacketLog
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	__imp__sprintf:PROC
EXTRN	_atexit:PROC
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
EXTRN	_memset:PROC
;	COMDAT ?szReturn@?1??SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@4V3@A
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_BSS	SEGMENT
?szReturn@?1??SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@4V3@A DB 010H DUP (?) ; `ioP2PChecker::SendPacketLog'::`2'::szReturn
_BSS	ENDS
;	COMDAT ?$S1@?1??SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@4IA
_BSS	SEGMENT
?$S1@?1??SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@4IA DD 01H DUP (?) ; `ioP2PChecker::SendPacketLog'::`2'::$S1
_BSS	ENDS
;	COMDAT ??_C@_0N@GLJBFLAE@0x?$CFx?5?3?5?$CFI64d?$AA@
CONST	SEGMENT
??_C@_0N@GLJBFLAE@0x?$CFx?5?3?5?$CFI64d?$AA@ DB '0x%x : %I64d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04CGFJFPFD@none?$AA@
CONST	SEGMENT
??_C@_04CGFJFPFD@none?$AA@ DB 'none', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z$0
__ehfuncinfo$?SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iop2pchecker.cpp
xdata$x	ENDS
;	COMDAT ?SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z
_TEXT	SEGMENT
$T512436 = -284						; size = 1
$T512441 = -284						; size = 4
___$ReturnUdt$GSCopy$ = -280				; size = 4
_szTemp$505287 = -276					; size = 260
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_iArray$ = 12						; size = 4
?SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z PROC ; ioP2PChecker::SendPacketLog, COMDAT
; _this$ = ecx

; 72   : {

  00000	68 10 01 00 00	 push	 272			; 00000110H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS

; 90   : 	}
; 91   : 
; 92   : 	return szReturn;

  0000f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00012	83 a5 e4 fe ff
	ff 00		 and	 DWORD PTR $T512441[ebp], 0
  00019	f6 05 00 00 00
	00 01		 test	 BYTE PTR ?$S1@?1??SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@4IA, 1
  00020	8b 7d 0c	 mov	 edi, DWORD PTR _iArray$[ebp]
  00023	8b f1		 mov	 esi, ecx
  00025	89 85 e8 fe ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], eax
  0002b	bb 00 00 00 00	 mov	 ebx, OFFSET ?szReturn@?1??SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@4V3@A
  00030	75 27		 jne	 SHORT $LN6@SendPacket

; 73   : 	static ioHashString szReturn = "none";

  00032	83 0d 00 00 00
	00 01		 or	 DWORD PTR ?$S1@?1??SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@4IA, 1
  00039	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_04CGFJFPFD@none?$AA@
  00042	8b cb		 mov	 ecx, ebx
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0004a	68 00 00 00 00	 push	 OFFSET ??__FszReturn@?1??SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@YAXXZ ; `ioP2PChecker::SendPacketLog'::`2'::`dynamic atexit destructor for 'szReturn''
  0004f	e8 00 00 00 00	 call	 _atexit
  00054	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00058	59		 pop	 ecx
$LN6@SendPacket:

; 74   : 	
; 75   : 	std::sort( m_vPacketList.begin(), m_vPacketList.end(), PacketSendSort() );

  00059	ff b5 e4 fe ff
	ff		 push	 DWORD PTR $T512436[ebp]
  0005f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00062	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00065	50		 push	 eax
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 ??$sort@V?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@VPacketSendSort@ioP2PChecker@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@0@0VPacketSendSort@ioP2PChecker@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >,ioP2PChecker::PacketSendSort>
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 77   : 	if( !COMPARE( iArray, 0, iSize ) )

  0006f	85 ff		 test	 edi, edi
  00071	78 66		 js	 SHORT $LN4@SendPacket

; 76   : 	int iSize = m_vPacketList.size();

  00073	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00076	2b 46 04	 sub	 eax, DWORD PTR [esi+4]
  00079	6a 18		 push	 24			; 00000018H
  0007b	99		 cdq
  0007c	59		 pop	 ecx
  0007d	f7 f9		 idiv	 ecx

; 77   : 	if( !COMPARE( iArray, 0, iSize ) )

  0007f	3b f8		 cmp	 edi, eax
  00081	7d 56		 jge	 SHORT $LN4@SendPacket

; 80   : 	}
; 81   : 	else if( m_vPacketList[iArray].m_iSendCount == 0 )

  00083	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00086	6b ff 18	 imul	 edi, 24			; 00000018H
  00089	8b 4c 38 08	 mov	 ecx, DWORD PTR [eax+edi+8]
  0008d	0b 4c 38 0c	 or	 ecx, DWORD PTR [eax+edi+12]

; 82   : 	{
; 83   : 		szReturn = "none";
; 84   : 	}
; 85   : 	else

  00091	74 46		 je	 SHORT $LN4@SendPacket

; 86   : 	{
; 87   : 		char szTemp[MAX_PATH] = "";

  00093	68 03 01 00 00	 push	 259			; 00000103H
  00098	8d 85 ed fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$505287[ebp+1]
  0009e	6a 00		 push	 0
  000a0	50		 push	 eax
  000a1	c6 85 ec fe ff
	ff 00		 mov	 BYTE PTR _szTemp$505287[ebp], 0
  000a8	e8 00 00 00 00	 call	 _memset

; 88   : 		sprintf( szTemp, "0x%x : %I64d", m_vPacketList[iArray].m_dwID, m_vPacketList[iArray].m_iSendCount );

  000ad	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b0	ff 74 38 0c	 push	 DWORD PTR [eax+edi+12]
  000b4	ff 74 38 08	 push	 DWORD PTR [eax+edi+8]
  000b8	ff 34 38	 push	 DWORD PTR [eax+edi]
  000bb	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$505287[ebp]
  000c1	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GLJBFLAE@0x?$CFx?5?3?5?$CFI64d?$AA@
  000c6	50		 push	 eax
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf
  000cd	83 c4 20	 add	 esp, 32			; 00000020H

; 89   : 		szReturn = szTemp;

  000d0	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$505287[ebp]
  000d6	50		 push	 eax
  000d7	eb 05		 jmp	 SHORT $LN38@SendPacket
$LN4@SendPacket:

; 78   : 	{
; 79   : 		szReturn = "none";

  000d9	68 00 00 00 00	 push	 OFFSET ??_C@_04CGFJFPFD@none?$AA@
$LN38@SendPacket:
  000de	8b cb		 mov	 ecx, ebx
  000e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 90   : 	}
; 91   : 
; 92   : 	return szReturn;

  000e6	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  000ec	53		 push	 ebx
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  000f3	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]

; 93   : }

  000f9	e8 00 00 00 00	 call	 __EH_epilog3_GS
  000fe	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z$0:
  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$S1@?1??SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@4IA
  00005	83 e0 fe	 and	 eax, -2			; fffffffeH
  00008	a3 00 00 00 00	 mov	 DWORD PTR ?$S1@?1??SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@4IA, eax
  0000d	c3		 ret	 0
__ehhandler$?SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 8a e0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-288]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z
  00031	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z ENDP ; ioP2PChecker::SendPacketLog
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	?RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z ; ioP2PChecker::RecvPacketLog
;	COMDAT ?szReturn@?1??RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@4V3@A
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_BSS	SEGMENT
?szReturn@?1??RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@4V3@A DB 010H DUP (?) ; `ioP2PChecker::RecvPacketLog'::`2'::szReturn
_BSS	ENDS
;	COMDAT ?$S2@?1??RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@4IA
_BSS	SEGMENT
?$S2@?1??RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@4IA DD 01H DUP (?) ; `ioP2PChecker::RecvPacketLog'::`2'::$S2
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z$0
__ehfuncinfo$?RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iop2pchecker.cpp
xdata$x	ENDS
;	COMDAT ?RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z
_TEXT	SEGMENT
$T512523 = -284						; size = 1
$T512528 = -284						; size = 4
___$ReturnUdt$GSCopy$ = -280				; size = 4
_szTemp$505317 = -276					; size = 260
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_iArray$ = 12						; size = 4
?RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z PROC ; ioP2PChecker::RecvPacketLog, COMDAT
; _this$ = ecx

; 96   : {

  00000	68 10 01 00 00	 push	 272			; 00000110H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS

; 114  : 	}
; 115  : 
; 116  : 	return szReturn;

  0000f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00012	83 a5 e4 fe ff
	ff 00		 and	 DWORD PTR $T512528[ebp], 0
  00019	f6 05 00 00 00
	00 01		 test	 BYTE PTR ?$S2@?1??RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@4IA, 1
  00020	8b 7d 0c	 mov	 edi, DWORD PTR _iArray$[ebp]
  00023	8b f1		 mov	 esi, ecx
  00025	89 85 e8 fe ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], eax
  0002b	bb 00 00 00 00	 mov	 ebx, OFFSET ?szReturn@?1??RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@4V3@A
  00030	75 27		 jne	 SHORT $LN6@RecvPacket

; 97   : 	static ioHashString szReturn = "none";

  00032	83 0d 00 00 00
	00 01		 or	 DWORD PTR ?$S2@?1??RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@4IA, 1
  00039	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_04CGFJFPFD@none?$AA@
  00042	8b cb		 mov	 ecx, ebx
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0004a	68 00 00 00 00	 push	 OFFSET ??__FszReturn@?1??RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@YAXXZ ; `ioP2PChecker::RecvPacketLog'::`2'::`dynamic atexit destructor for 'szReturn''
  0004f	e8 00 00 00 00	 call	 _atexit
  00054	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00058	59		 pop	 ecx
$LN6@RecvPacket:

; 98   : 
; 99   : 	std::sort( m_vPacketList.begin(), m_vPacketList.end(), PacketRecvSort() );

  00059	ff b5 e4 fe ff
	ff		 push	 DWORD PTR $T512523[ebp]
  0005f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00062	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00065	50		 push	 eax
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 ??$sort@V?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@std@@VPacketRecvSort@ioP2PChecker@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@UPacketData@ioP2PChecker@@V?$allocator@UPacketData@ioP2PChecker@@@std@@@std@@@0@0VPacketRecvSort@ioP2PChecker@@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<ioP2PChecker::PacketData,std::allocator<ioP2PChecker::PacketData> > >,ioP2PChecker::PacketRecvSort>
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 101  : 	if( !COMPARE( iArray, 0, iSize ) )

  0006f	85 ff		 test	 edi, edi
  00071	78 66		 js	 SHORT $LN4@RecvPacket

; 100  : 	int iSize = m_vPacketList.size();

  00073	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00076	2b 46 04	 sub	 eax, DWORD PTR [esi+4]
  00079	6a 18		 push	 24			; 00000018H
  0007b	99		 cdq
  0007c	59		 pop	 ecx
  0007d	f7 f9		 idiv	 ecx

; 101  : 	if( !COMPARE( iArray, 0, iSize ) )

  0007f	3b f8		 cmp	 edi, eax
  00081	7d 56		 jge	 SHORT $LN4@RecvPacket

; 104  : 	}
; 105  : 	else if( m_vPacketList[iArray].m_iRecvCount == 0 )

  00083	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00086	6b ff 18	 imul	 edi, 24			; 00000018H
  00089	8b 4c 38 10	 mov	 ecx, DWORD PTR [eax+edi+16]
  0008d	0b 4c 38 14	 or	 ecx, DWORD PTR [eax+edi+20]

; 106  : 	{
; 107  : 		szReturn = "none";
; 108  : 	}
; 109  : 	else

  00091	74 46		 je	 SHORT $LN4@RecvPacket

; 110  : 	{
; 111  : 		char szTemp[MAX_PATH] = "";

  00093	68 03 01 00 00	 push	 259			; 00000103H
  00098	8d 85 ed fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$505317[ebp+1]
  0009e	6a 00		 push	 0
  000a0	50		 push	 eax
  000a1	c6 85 ec fe ff
	ff 00		 mov	 BYTE PTR _szTemp$505317[ebp], 0
  000a8	e8 00 00 00 00	 call	 _memset

; 112  : 		sprintf( szTemp, "0x%x : %I64d", m_vPacketList[iArray].m_dwID, m_vPacketList[iArray].m_iRecvCount );

  000ad	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b0	ff 74 38 14	 push	 DWORD PTR [eax+edi+20]
  000b4	ff 74 38 10	 push	 DWORD PTR [eax+edi+16]
  000b8	ff 34 38	 push	 DWORD PTR [eax+edi]
  000bb	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$505317[ebp]
  000c1	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GLJBFLAE@0x?$CFx?5?3?5?$CFI64d?$AA@
  000c6	50		 push	 eax
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf
  000cd	83 c4 20	 add	 esp, 32			; 00000020H

; 113  : 		szReturn = szTemp;

  000d0	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$505317[ebp]
  000d6	50		 push	 eax
  000d7	eb 05		 jmp	 SHORT $LN38@RecvPacket
$LN4@RecvPacket:

; 102  : 	{
; 103  : 		szReturn = "none";

  000d9	68 00 00 00 00	 push	 OFFSET ??_C@_04CGFJFPFD@none?$AA@
$LN38@RecvPacket:
  000de	8b cb		 mov	 ecx, ebx
  000e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 114  : 	}
; 115  : 
; 116  : 	return szReturn;

  000e6	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  000ec	53		 push	 ebx
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  000f3	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]

; 117  : }

  000f9	e8 00 00 00 00	 call	 __EH_epilog3_GS
  000fe	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z$0:
  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$S2@?1??RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@4IA
  00005	83 e0 fe	 and	 eax, -2			; fffffffeH
  00008	a3 00 00 00 00	 mov	 DWORD PTR ?$S2@?1??RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@4IA, eax
  0000d	c3		 ret	 0
__ehhandler$?RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 8a e0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-288]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z
  00031	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z ENDP ; ioP2PChecker::RecvPacketLog
PUBLIC	?push_back@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXABURecvLog@ioP2PChecker@@@Z ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXABURecvLog@ioP2PChecker@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXABURecvLog@ioP2PChecker@@@Z PROC ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 33		 jae	 SHORT $LN4@push_back@2
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 2d		 ja	 SHORT $LN4@push_back@2

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 14		 push	 20			; 00000014H
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back@2

; 981  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IAEXI@Z ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Reserve
$LN3@push_back@2:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00031	6b ff 14	 imul	 edi, 20			; 00000014H
  00034	03 3e		 add	 edi, DWORD PTR [esi]
  00036	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00039	57		 push	 edi
  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	e8 00 00 00 00	 call	 ??$construct@AAURecvLog@ioP2PChecker@@@?$allocator@URecvLog@ioP2PChecker@@@std@@QAEXPAURecvLog@ioP2PChecker@@AAU23@@Z ; std::allocator<ioP2PChecker::RecvLog>::construct<ioP2PChecker::RecvLog &>

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00042	eb 19		 jmp	 SHORT $LN30@push_back@2
$LN4@push_back@2:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00044	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00047	75 09		 jne	 SHORT $LN1@push_back@2

; 991  : 				_Reserve(1);

  00049	6a 01		 push	 1
  0004b	8b ce		 mov	 ecx, esi
  0004d	e8 00 00 00 00	 call	 ?_Reserve@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@IAEXI@Z ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::_Reserve
$LN1@push_back@2:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00052	57		 push	 edi
  00053	ff 76 04	 push	 DWORD PTR [esi+4]
  00056	e8 00 00 00 00	 call	 ??$_Construct@URecvLog@ioP2PChecker@@ABU12@@std@@YAXPAURecvLog@ioP2PChecker@@ABU12@@Z ; std::_Construct<ioP2PChecker::RecvLog,ioP2PChecker::RecvLog const &>
  0005b	59		 pop	 ecx
  0005c	59		 pop	 ecx
$LN30@push_back@2:

; 996  : 			++this->_Mylast;

  0005d	83 46 04 14	 add	 DWORD PTR [esi+4], 20	; 00000014H
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?push_back@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXABURecvLog@ioP2PChecker@@@Z ENDP ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::push_back
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioP2PChecker@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioP2PChecker@@UAEPAXI@Z PROC			; ioP2PChecker::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioP2PChecker@@UAE@XZ	; ioP2PChecker::~ioP2PChecker
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@3
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@3:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioP2PChecker@@UAEPAXI@Z ENDP			; ioP2PChecker::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_0CH@JLAGPLMO@CUPK_CHAR_CONTROL?5?3?5?$CFs?5?$CI?5?$CFd?0?5?$CFd?5@ ; `string'
PUBLIC	?SetControlLog@ioP2PChecker@@QAEXKVioHashString@@HH_N@Z ; ioP2PChecker::SetControlLog
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iop2pchecker.cpp
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@JLAGPLMO@CUPK_CHAR_CONTROL?5?3?5?$CFs?5?$CI?5?$CFd?0?5?$CFd?5@
CONST	SEGMENT
??_C@_0CH@JLAGPLMO@CUPK_CHAR_CONTROL?5?3?5?$CFs?5?$CI?5?$CFd?0?5?$CFd?5@ DB 'C'
	DB	'UPK_CHAR_CONTROL : %s ( %d, %d ) : %d', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetControlLog@ioP2PChecker@@QAEXKVioHashString@@HH_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetControlLog@ioP2PChecker@@QAEXKVioHashString@@HH_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SetControlLog@ioP2PChecker@@QAEXKVioHashString@@HH_N@Z$1
__ehfuncinfo$?SetControlLog@ioP2PChecker@@QAEXKVioHashString@@HH_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetControlLog@ioP2PChecker@@QAEXKVioHashString@@HH_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?SetControlLog@ioP2PChecker@@QAEXKVioHashString@@HH_N@Z
_TEXT	SEGMENT
_kRecvLog$ = -296					; size = 20
_szLog$505342 = -276					; size = 260
__$EHRec$ = -12						; size = 12
_dwPacket$ = 8						; size = 4
_szSendID$ = 12						; size = 16
_iSendIndex$ = 28					; size = 4
_iPrevIndex$ = 32					; size = 4
_bParsing$ = 36						; size = 1
?SetControlLog@ioP2PChecker@@QAEXKVioHashString@@HH_N@Z PROC ; ioP2PChecker::SetControlLog, COMDAT
; _this$ = ecx

; 129  : {

  00000	68 1c 01 00 00	 push	 284			; 0000011cH
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?SetControlLog@ioP2PChecker@@QAEXKVioHashString@@HH_N@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b f1		 mov	 esi, ecx
  00011	33 db		 xor	 ebx, ebx
  00013	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 130  : 	if( !IsRecvLog() ) return;

  00016	38 5e 28	 cmp	 BYTE PTR [esi+40], bl
  00019	75 12		 jne	 SHORT $LN7@SetControl
$LN25@SetControl:
  0001b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0001f	8d 4d 0c	 lea	 ecx, DWORD PTR _szSendID$[ebp]
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00028	e9 e2 00 00 00	 jmp	 $LN8@SetControl
$LN7@SetControl:

; 131  : 
; 132  : 	if( iSendIndex - 1 == iPrevIndex )

  0002d	8b 7d 1c	 mov	 edi, DWORD PTR _iSendIndex$[ebp]
  00030	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  00033	3b 45 20	 cmp	 eax, DWORD PTR _iPrevIndex$[ebp]

; 133  : 		return;

  00036	74 e3		 je	 SHORT $LN25@SetControl

; 134  : 
; 135  : 	RecvLog kRecvLog;	

  00038	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _kRecvLog$[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00044	c7 85 e8 fe ff
	ff 00 b4 ff ff	 mov	 DWORD PTR _kRecvLog$[ebp+16], -19456 ; ffffb400H

; 136  : 	switch( dwPacket )

  0004e	81 7d 08 04 41
	00 00		 cmp	 DWORD PTR _dwPacket$[ebp], 16644 ; 00004104H
  00055	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 143  : 		}
; 144  : 		break;
; 145  : 	default:
; 146  : 		return;

  00059	0f 85 96 00 00
	00		 jne	 $LN24@SetControl

; 137  : 	{
; 138  : 	case CUPK_CHAR_CONTROL:
; 139  : 		{
; 140  : 			char szLog[MAX_PATH] = "";

  0005f	68 03 01 00 00	 push	 259			; 00000103H
  00064	8d 85 ed fe ff
	ff		 lea	 eax, DWORD PTR _szLog$505342[ebp+1]
  0006a	53		 push	 ebx
  0006b	50		 push	 eax
  0006c	88 9d ec fe ff
	ff		 mov	 BYTE PTR _szLog$505342[ebp], bl
  00072	e8 00 00 00 00	 call	 _memset

; 141  : 			sprintf( szLog, "CUPK_CHAR_CONTROL : %s ( %d, %d ) : %d", szSendID.c_str(), iPrevIndex, iSendIndex, bParsing );

  00077	0f b6 45 24	 movzx	 eax, BYTE PTR _bParsing$[ebp]
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007e	50		 push	 eax
  0007f	57		 push	 edi
  00080	ff 75 20	 push	 DWORD PTR _iPrevIndex$[ebp]
  00083	8d 4d 0c	 lea	 ecx, DWORD PTR _szSendID$[ebp]
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  0008c	50		 push	 eax
  0008d	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szLog$505342[ebp]
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@JLAGPLMO@CUPK_CHAR_CONTROL?5?3?5?$CFs?5?$CI?5?$CFd?0?5?$CFd?5@
  00098	50		 push	 eax
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf
  0009f	83 c4 18	 add	 esp, 24			; 00000018H

; 142  : 			kRecvLog.m_szLog = szLog;

  000a2	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szLog$505342[ebp]
  000a8	50		 push	 eax
  000a9	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _kRecvLog$[ebp]
  000af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 147  : 	}	
; 148  : 	if( !bParsing )

  000b5	38 5d 24	 cmp	 BYTE PTR _bParsing$[ebp], bl
  000b8	75 0a		 jne	 SHORT $LN1@SetControl

; 149  : 		kRecvLog.m_dwColor = 0xFFFF0000;

  000ba	c7 85 e8 fe ff
	ff 00 00 ff ff	 mov	 DWORD PTR _kRecvLog$[ebp+16], -65536 ; ffff0000H
$LN1@SetControl:

; 150  : 	m_vRecvLog.push_back( kRecvLog );

  000c4	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _kRecvLog$[ebp]
  000ca	50		 push	 eax
  000cb	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  000ce	e8 00 00 00 00	 call	 ?push_back@?$vector@URecvLog@ioP2PChecker@@V?$allocator@URecvLog@ioP2PChecker@@@std@@@std@@QAEXABURecvLog@ioP2PChecker@@@Z ; std::vector<ioP2PChecker::RecvLog,std::allocator<ioP2PChecker::RecvLog> >::push_back

; 151  : 	LOG.PrintTimeAndLog( 0, "%s", kRecvLog.m_szLog.c_str() );

  000d3	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _kRecvLog$[ebp]
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  000df	50		 push	 eax
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  000e5	53		 push	 ebx
  000e6	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  000f2	83 c4 10	 add	 esp, 16			; 00000010H
$LN24@SetControl:

; 152  : }

  000f5	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  000fb	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _kRecvLog$[ebp]
  00101	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00104	ff d6		 call	 esi
  00106	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0010a	8d 4d 0c	 lea	 ecx, DWORD PTR _szSendID$[ebp]
  0010d	ff d6		 call	 esi
$LN8@SetControl:
  0010f	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00114	c2 20 00	 ret	 32			; 00000020H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetControlLog@ioP2PChecker@@QAEXKVioHashString@@HH_N@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR _szSendID$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?SetControlLog@ioP2PChecker@@QAEXKVioHashString@@HH_N@Z$1:
  00009	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _kRecvLog$[ebp]
  0000f	e9 00 00 00 00	 jmp	 ??1RecvLog@ioP2PChecker@@QAE@XZ
__ehhandler$?SetControlLog@ioP2PChecker@@QAEXKVioHashString@@HH_N@Z:
  00014	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00018	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001b	8b 8a d4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-300]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetControlLog@ioP2PChecker@@QAEXKVioHashString@@HH_N@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetControlLog@ioP2PChecker@@QAEXKVioHashString@@HH_N@Z ENDP ; ioP2PChecker::SetControlLog
; Function compile flags: /Ogsp
;	COMDAT ??__FszReturn@?1??SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@YAXXZ
text$yd	SEGMENT
??__FszReturn@?1??SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@YAXXZ PROC ; `ioP2PChecker::SendPacketLog'::`2'::`dynamic atexit destructor for 'szReturn'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?szReturn@?1??SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@4V3@A
  00005	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??__FszReturn@?1??SendPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@YAXXZ ENDP ; `ioP2PChecker::SendPacketLog'::`2'::`dynamic atexit destructor for 'szReturn''
; Function compile flags: /Ogsp
text$yd	ENDS
;	COMDAT ??__FszReturn@?1??RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@YAXXZ
text$yd	SEGMENT
??__FszReturn@?1??RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@YAXXZ PROC ; `ioP2PChecker::RecvPacketLog'::`2'::`dynamic atexit destructor for 'szReturn'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?szReturn@?1??RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@4V3@A
  00005	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??__FszReturn@?1??RecvPacketLog@ioP2PChecker@@QAE?AVioHashString@@H@Z@YAXXZ ENDP ; `ioP2PChecker::RecvPacketLog'::`2'::`dynamic atexit destructor for 'szReturn''
text$yd	ENDS
END
