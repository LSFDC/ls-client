; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioGalaxyObjectItem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ	; ioBaseChar::GetCreator
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ
_TEXT	SEGMENT
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ PROC	; ioBaseChar::GetCreator, COMDAT
; _this$ = ecx

; 4013 : 	inline ioPlayStage* GetCreator() { return m_pCreator; }

  00000	8b 81 44 03 00
	00		 mov	 eax, DWORD PTR [ecx+836]
  00006	c3		 ret	 0
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ ENDP	; ioBaseChar::GetCreator
_TEXT	ENDS
PUBLIC	??_R0?AVioExtendJump@@@8			; ioExtendJump `RTTI Type Descriptor'
PUBLIC	??_R0?AVioDoubleJump2@@@8			; ioDoubleJump2 `RTTI Type Descriptor'
PUBLIC	?ToDoubleJump2@@YAPAVioDoubleJump2@@PAVioExtendJump@@@Z ; ToDoubleJump2
EXTRN	___RTDynamicCast:PROC
;	COMDAT ??_R0?AVioExtendJump@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodoublejump2.h
_DATA	SEGMENT
??_R0?AVioExtendJump@@@8 DD FLAT:??_7type_info@@6B@	; ioExtendJump `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioExtendJump@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVioDoubleJump2@@@8
_DATA	SEGMENT
??_R0?AVioDoubleJump2@@@8 DD FLAT:??_7type_info@@6B@	; ioDoubleJump2 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioDoubleJump2@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ToDoubleJump2@@YAPAVioDoubleJump2@@PAVioExtendJump@@@Z
_TEXT	SEGMENT
_pJump$ = 8						; size = 4
?ToDoubleJump2@@YAPAVioDoubleJump2@@PAVioExtendJump@@@Z PROC ; ToDoubleJump2, COMDAT

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 131  : 	if( !pJump || pJump->GetType() != JT_DOUBLE_JUMP2 )

  00004	8b 75 08	 mov	 esi, DWORD PTR _pJump$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 25		 je	 SHORT $LN1@ToDoubleJu
  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 50 08	 call	 DWORD PTR [eax+8]
  00012	83 f8 1d	 cmp	 eax, 29			; 0000001dH
  00015	75 19		 jne	 SHORT $LN1@ToDoubleJu

; 133  : 
; 134  : 	return dynamic_cast< ioDoubleJump2* >( pJump );

  00017	6a 00		 push	 0
  00019	68 00 00 00 00	 push	 OFFSET ??_R0?AVioDoubleJump2@@@8
  0001e	68 00 00 00 00	 push	 OFFSET ??_R0?AVioExtendJump@@@8
  00023	6a 00		 push	 0
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ___RTDynamicCast
  0002b	83 c4 14	 add	 esp, 20			; 00000014H
  0002e	eb 02		 jmp	 SHORT $LN3@ToDoubleJu
$LN1@ToDoubleJu:

; 132  : 		return NULL;

  00030	33 c0		 xor	 eax, eax
$LN3@ToDoubleJu:
  00032	5e		 pop	 esi

; 135  : }

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?ToDoubleJump2@@YAPAVioDoubleJump2@@PAVioExtendJump@@@Z ENDP ; ToDoubleJump2
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?SetExtraInfoToWeapon@ioGalaxyObjectItem@@UAEXPAVioWeapon@@_N@Z ; ioGalaxyObjectItem::SetExtraInfoToWeapon
EXTRN	?SetExtraInfoToWeapon@ioObjectItem@@UAEXPAVioWeapon@@_N@Z:PROC ; ioObjectItem::SetExtraInfoToWeapon
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogalaxyobjectitem.cpp
;	COMDAT ?SetExtraInfoToWeapon@ioGalaxyObjectItem@@UAEXPAVioWeapon@@_N@Z
_TEXT	SEGMENT
_pWeapon$ = 8						; size = 4
_bJumpAttack$ = 12					; size = 1
?SetExtraInfoToWeapon@ioGalaxyObjectItem@@UAEXPAVioWeapon@@_N@Z PROC ; ioGalaxyObjectItem::SetExtraInfoToWeapon, COMDAT
; _this$ = ecx

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 120  : 	if( !pWeapon )

  00003	83 7d 08 00	 cmp	 DWORD PTR _pWeapon$[ebp], 0
  00007	74 06		 je	 SHORT $LN2@SetExtraIn

; 124  : }

  00009	5d		 pop	 ebp

; 121  : 		return;
; 122  : 
; 123  : 	ioObjectItem::SetExtraInfoToWeapon( pWeapon, bJumpAttack );

  0000a	e9 00 00 00 00	 jmp	 ?SetExtraInfoToWeapon@ioObjectItem@@UAEXPAVioWeapon@@_N@Z ; ioObjectItem::SetExtraInfoToWeapon
$LN2@SetExtraIn:

; 124  : }

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?SetExtraInfoToWeapon@ioGalaxyObjectItem@@UAEXPAVioWeapon@@_N@Z ENDP ; ioGalaxyObjectItem::SetExtraInfoToWeapon
_TEXT	ENDS
PUBLIC	?GetObjectSubType@ioGalaxyObjectItem@@UBE?AW4ObjectSubType@ioObjectItem@@XZ ; ioGalaxyObjectItem::GetObjectSubType
; Function compile flags: /Ogsp
;	COMDAT ?GetObjectSubType@ioGalaxyObjectItem@@UBE?AW4ObjectSubType@ioObjectItem@@XZ
_TEXT	SEGMENT
?GetObjectSubType@ioGalaxyObjectItem@@UBE?AW4ObjectSubType@ioObjectItem@@XZ PROC ; ioGalaxyObjectItem::GetObjectSubType, COMDAT
; _this$ = ecx

; 128  : 	return OST_GALAXY;

  00000	6a 0e		 push	 14			; 0000000eH
  00002	58		 pop	 eax

; 129  : }

  00003	c3		 ret	 0
?GetObjectSubType@ioGalaxyObjectItem@@UBE?AW4ObjectSubType@ioObjectItem@@XZ ENDP ; ioGalaxyObjectItem::GetObjectSubType
_TEXT	ENDS
PUBLIC	?OnReleased@ioGalaxyObjectItem@@UAEXPAVioBaseChar@@@Z ; ioGalaxyObjectItem::OnReleased
EXTRN	?EndMapEffect@ioBaseChar@@QAEXK_N@Z:PROC	; ioBaseChar::EndMapEffect
EXTRN	?ClearExternalComboAttackList@ioDoubleJump2@@QAEXXZ:PROC ; ioDoubleJump2::ClearExternalComboAttackList
EXTRN	?OnReleased@ioObjectItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioObjectItem::OnReleased
; Function compile flags: /Ogsp
;	COMDAT ?OnReleased@ioGalaxyObjectItem@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?OnReleased@ioGalaxyObjectItem@@UAEXPAVioBaseChar@@@Z PROC ; ioGalaxyObjectItem::OnReleased, COMDAT
; _this$ = ecx

; 164  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 165  : 	ioObjectItem::OnReleased( pOwner );

  00004	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?OnReleased@ioObjectItem@@UAEXPAVioBaseChar@@@Z ; ioObjectItem::OnReleased

; 166  : 
; 167  : 	ioDoubleJump2* pJump = ToDoubleJump2( m_pExtendJump );

  0000e	ff b6 c8 0b 00
	00		 push	 DWORD PTR [esi+3016]
  00014	e8 00 00 00 00	 call	 ?ToDoubleJump2@@YAPAVioDoubleJump2@@PAVioExtendJump@@@Z ; ToDoubleJump2
  00019	59		 pop	 ecx

; 168  : 	if( pJump )

  0001a	85 c0		 test	 eax, eax
  0001c	74 07		 je	 SHORT $LN2@OnReleased

; 169  : 	{
; 170  : 		pJump->ClearExternalComboAttackList();

  0001e	8b c8		 mov	 ecx, eax
  00020	e8 00 00 00 00	 call	 ?ClearExternalComboAttackList@ioDoubleJump2@@QAEXXZ ; ioDoubleJump2::ClearExternalComboAttackList
$LN2@OnReleased:

; 171  : 	}
; 172  : 
; 173  : 	if( m_GatherMeteoEffectID != 0 )

  00025	8b 86 44 1b 00
	00		 mov	 eax, DWORD PTR [esi+6980]
  0002b	85 c0		 test	 eax, eax
  0002d	74 12		 je	 SHORT $LN1@OnReleased

; 174  : 	{
; 175  : 		pOwner->EndMapEffect( m_GatherMeteoEffectID );

  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  00032	6a 01		 push	 1
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?EndMapEffect@ioBaseChar@@QAEXK_N@Z ; ioBaseChar::EndMapEffect

; 176  : 		m_GatherMeteoEffectID = 0;

  0003a	83 a6 44 1b 00
	00 00		 and	 DWORD PTR [esi+6980], 0
$LN1@OnReleased:
  00041	5e		 pop	 esi

; 177  : 	}
; 178  : }

  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?OnReleased@ioGalaxyObjectItem@@UAEXPAVioBaseChar@@@Z ENDP ; ioGalaxyObjectItem::OnReleased
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 58	 add	 DWORD PTR [eax], 88	; 00000058H

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >::operator++
_TEXT	ENDS
PUBLIC	?size@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QBEIXZ ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QBEIXZ PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 58		 push	 88			; 00000058H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::size
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IBE_NPBUGalaxyAttack@ioGalaxyObjectItem@@@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IBE_NPBUGalaxyAttack@ioGalaxyObjectItem@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IBE_NPBUGalaxyAttack@ioGalaxyObjectItem@@@Z PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IBE_NPBUGalaxyAttack@ioGalaxyObjectItem@@@Z ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IBEXPAUGalaxyAttack@ioGalaxyObjectItem@@0@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IBEXPAUGalaxyAttack@ioGalaxyObjectItem@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IBEXPAUGalaxyAttack@ioGalaxyObjectItem@@0@Z PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IBEXPAUGalaxyAttack@ioGalaxyObjectItem@@0@Z ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@XZ ; std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::~_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::~_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::~_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAE@XZ ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::allocator<ioGalaxyObjectItem::GalaxyAttack>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAE@XZ PROC ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::allocator<ioGalaxyObjectItem::GalaxyAttack>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAE@XZ ENDP ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::allocator<ioGalaxyObjectItem::GalaxyAttack>
_TEXT	ENDS
PUBLIC	??0?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAE@ABV01@@Z ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::allocator<ioGalaxyObjectItem::GalaxyAttack>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAE@ABV01@@Z PROC ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::allocator<ioGalaxyObjectItem::GalaxyAttack>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::allocator<ioGalaxyObjectItem::GalaxyAttack>
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QAE@PAUGalaxyAttack@ioGalaxyObjectItem@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QAE@PAUGalaxyAttack@ioGalaxyObjectItem@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QAE@PAUGalaxyAttack@ioGalaxyObjectItem@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QAE@PAUGalaxyAttack@ioGalaxyObjectItem@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QBEABUGalaxyAttack@ioGalaxyObjectItem@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QBEABUGalaxyAttack@ioGalaxyObjectItem@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QBEABUGalaxyAttack@ioGalaxyObjectItem@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QBEABUGalaxyAttack@ioGalaxyObjectItem@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >::operator*
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QBEIXZ ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::capacity
; Function compile flags: /Ogsp
;	COMDAT ?capacity@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QBEIXZ PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 58		 push	 88			; 00000058H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IBEXXZ ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IBEXXZ PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IBEXXZ ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Xlen
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@I@Z ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@I@Z PROC ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@I@Z ENDP ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::deallocate
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >::_Compat
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QAE@PAUGalaxyAttack@ioGalaxyObjectItem@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >::_Vector_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QAE@PAUGalaxyAttack@ioGalaxyObjectItem@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QAE@PAUGalaxyAttack@ioGalaxyObjectItem@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >::_Vector_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QAE@PAUGalaxyAttack@ioGalaxyObjectItem@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >::_Vector_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QBEIXZ ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QBEIXZ PROC ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 2e ba e8 02	 mov	 eax, 48806446		; 02e8ba2eH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QBEIXZ ENDP ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::max_size
_TEXT	ENDS
PUBLIC	??$sprintf_s@$0BAE@@@YAHAAY0BAE@DPBDZZ		; sprintf_s<260>
EXTRN	__imp__vsprintf_s:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\stdio.h
;	COMDAT ??$sprintf_s@$0BAE@@@YAHAAY0BAE@DPBDZZ
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Format$ = 12						; size = 4
??$sprintf_s@$0BAE@@@YAHAAY0BAE@DPBDZZ PROC		; sprintf_s<260>, COMDAT

; 323  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1_ARGLIST(int, sprintf_s, vsprintf_s, _Deref_post_z_ char, _Dest, _In_z_ _Printf_format_string_ const char *, _Format)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000a	68 04 01 00 00	 push	 260			; 00000104H
  0000f	ff 75 08	 push	 DWORD PTR __Dest$[ebp]
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__vsprintf_s
  00018	83 c4 10	 add	 esp, 16			; 00000010H
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$sprintf_s@$0BAE@@@YAHAAY0BAE@DPBDZZ ENDP		; sprintf_s<260>
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUGalaxyAttack@ioGalaxyObjectItem@@@std@@YAPBUGalaxyAttack@ioGalaxyObjectItem@@ABU12@@Z ; std::addressof<ioGalaxyObjectItem::GalaxyAttack const >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBUGalaxyAttack@ioGalaxyObjectItem@@@std@@YAPBUGalaxyAttack@ioGalaxyObjectItem@@ABU12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUGalaxyAttack@ioGalaxyObjectItem@@@std@@YAPBUGalaxyAttack@ioGalaxyObjectItem@@ABU12@@Z PROC ; std::addressof<ioGalaxyObjectItem::GalaxyAttack const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUGalaxyAttack@ioGalaxyObjectItem@@@std@@YAPBUGalaxyAttack@ioGalaxyObjectItem@@ABU12@@Z ENDP ; std::addressof<ioGalaxyObjectItem::GalaxyAttack const >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UGalaxyAttack@ioGalaxyObjectItem@@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@IPAU12@@Z ; std::_Allocate<ioGalaxyObjectItem::GalaxyAttack>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UGalaxyAttack@ioGalaxyObjectItem@@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@IPAU12@@Z
_TEXT	SEGMENT
$T552414 = -12						; size = 12
$T552419 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UGalaxyAttack@ioGalaxyObjectItem@@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@IPAU12@@Z PROC ; std::_Allocate<ioGalaxyObjectItem::GalaxyAttack>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 2e ba e8
	02		 cmp	 ecx, 48806446		; 02e8ba2eH
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	6b c9 58	 imul	 ecx, 88			; 00000058H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T552419[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T552419[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T552414[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T552414[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T552414[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UGalaxyAttack@ioGalaxyObjectItem@@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@IPAU12@@Z ENDP ; std::_Allocate<ioGalaxyObjectItem::GalaxyAttack>
_TEXT	ENDS
PUBLIC	??$forward@AAUGalaxyAttack@ioGalaxyObjectItem@@@std@@YAAAUGalaxyAttack@ioGalaxyObjectItem@@AAU12@@Z ; std::forward<ioGalaxyObjectItem::GalaxyAttack &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUGalaxyAttack@ioGalaxyObjectItem@@@std@@YAAAUGalaxyAttack@ioGalaxyObjectItem@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUGalaxyAttack@ioGalaxyObjectItem@@@std@@YAAAUGalaxyAttack@ioGalaxyObjectItem@@AAU12@@Z PROC ; std::forward<ioGalaxyObjectItem::GalaxyAttack &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUGalaxyAttack@ioGalaxyObjectItem@@@std@@YAAAUGalaxyAttack@ioGalaxyObjectItem@@AAU12@@Z ENDP ; std::forward<ioGalaxyObjectItem::GalaxyAttack &>
_TEXT	ENDS
PUBLIC	??$forward@ABUGalaxyAttack@ioGalaxyObjectItem@@@std@@YAABUGalaxyAttack@ioGalaxyObjectItem@@ABU12@@Z ; std::forward<ioGalaxyObjectItem::GalaxyAttack const &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@ABUGalaxyAttack@ioGalaxyObjectItem@@@std@@YAABUGalaxyAttack@ioGalaxyObjectItem@@ABU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUGalaxyAttack@ioGalaxyObjectItem@@@std@@YAABUGalaxyAttack@ioGalaxyObjectItem@@ABU12@@Z PROC ; std::forward<ioGalaxyObjectItem::GalaxyAttack const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUGalaxyAttack@ioGalaxyObjectItem@@@std@@YAABUGalaxyAttack@ioGalaxyObjectItem@@ABU12@@Z ENDP ; std::forward<ioGalaxyObjectItem::GalaxyAttack const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UGalaxyAttack@ioGalaxyObjectItem@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUGalaxyAttack@ioGalaxyObjectItem@@0@Z ; std::_Ptr_cat<ioGalaxyObjectItem::GalaxyAttack,ioGalaxyObjectItem::GalaxyAttack>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UGalaxyAttack@ioGalaxyObjectItem@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUGalaxyAttack@ioGalaxyObjectItem@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UGalaxyAttack@ioGalaxyObjectItem@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUGalaxyAttack@ioGalaxyObjectItem@@0@Z PROC ; std::_Ptr_cat<ioGalaxyObjectItem::GalaxyAttack,ioGalaxyObjectItem::GalaxyAttack>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UGalaxyAttack@ioGalaxyObjectItem@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUGalaxyAttack@ioGalaxyObjectItem@@0@Z ENDP ; std::_Ptr_cat<ioGalaxyObjectItem::GalaxyAttack,ioGalaxyObjectItem::GalaxyAttack>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@AAPAUGalaxyAttack@ioGalaxyObjectItem@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >,ioGalaxyObjectItem::GalaxyAttack *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@AAPAUGalaxyAttack@ioGalaxyObjectItem@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@AAPAUGalaxyAttack@ioGalaxyObjectItem@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >,ioGalaxyObjectItem::GalaxyAttack *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@AAPAUGalaxyAttack@ioGalaxyObjectItem@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >,ioGalaxyObjectItem::GalaxyAttack *>
_TEXT	ENDS
PUBLIC	??$move@AAUGalaxyAttack@ioGalaxyObjectItem@@@std@@YA$$QAUGalaxyAttack@ioGalaxyObjectItem@@AAU12@@Z ; std::move<ioGalaxyObjectItem::GalaxyAttack &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUGalaxyAttack@ioGalaxyObjectItem@@@std@@YA$$QAUGalaxyAttack@ioGalaxyObjectItem@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUGalaxyAttack@ioGalaxyObjectItem@@@std@@YA$$QAUGalaxyAttack@ioGalaxyObjectItem@@AAU12@@Z PROC ; std::move<ioGalaxyObjectItem::GalaxyAttack &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUGalaxyAttack@ioGalaxyObjectItem@@@std@@YA$$QAUGalaxyAttack@ioGalaxyObjectItem@@AAU12@@Z ENDP ; std::move<ioGalaxyObjectItem::GalaxyAttack &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUGalaxyAttack@ioGalaxyObjectItem@@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@@Z ; std::_Val_type<ioGalaxyObjectItem::GalaxyAttack *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUGalaxyAttack@ioGalaxyObjectItem@@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUGalaxyAttack@ioGalaxyObjectItem@@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@@Z PROC ; std::_Val_type<ioGalaxyObjectItem::GalaxyAttack *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUGalaxyAttack@ioGalaxyObjectItem@@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@@Z ENDP ; std::_Val_type<ioGalaxyObjectItem::GalaxyAttack *>
_TEXT	ENDS
PUBLIC	??$forward@UGalaxyAttack@ioGalaxyObjectItem@@@std@@YA$$QAUGalaxyAttack@ioGalaxyObjectItem@@AAU12@@Z ; std::forward<ioGalaxyObjectItem::GalaxyAttack>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UGalaxyAttack@ioGalaxyObjectItem@@@std@@YA$$QAUGalaxyAttack@ioGalaxyObjectItem@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UGalaxyAttack@ioGalaxyObjectItem@@@std@@YA$$QAUGalaxyAttack@ioGalaxyObjectItem@@AAU12@@Z PROC ; std::forward<ioGalaxyObjectItem::GalaxyAttack>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UGalaxyAttack@ioGalaxyObjectItem@@@std@@YA$$QAUGalaxyAttack@ioGalaxyObjectItem@@AAU12@@Z ENDP ; std::forward<ioGalaxyObjectItem::GalaxyAttack>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 28	 add	 DWORD PTR [eax], 40	; 00000028H

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator++
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 0c	 add	 DWORD PTR [eax], 12	; 0000000cH

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator++
_TEXT	ENDS
PUBLIC	??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z ; std::forward<WeaponInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z PROC ; std::forward<WeaponInfo const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z ENDP ; std::forward<WeaponInfo const &>
_TEXT	ENDS
PUBLIC	??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z ; std::forward<ForceInfo const &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z PROC ; std::forward<ForceInfo const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z ENDP ; std::forward<ForceInfo const &>
_TEXT	ENDS
PUBLIC	??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z ; std::_Construct<ForceInfo,ForceInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z PROC ; std::_Construct<ForceInfo,ForceInfo const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN3@Construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN3@Construct:
  00013	5f		 pop	 edi

; 49   : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z ENDP ; std::_Construct<ForceInfo,ForceInfo const &>
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	??1WeaponInfo@@QAE@XZ				; WeaponInfo::~WeaponInfo
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1WeaponInfo@@QAE@XZ
_TEXT	SEGMENT
??1WeaponInfo@@QAE@XZ PROC				; WeaponInfo::~WeaponInfo, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??1WeaponInfo@@QAE@XZ ENDP				; WeaponInfo::~WeaponInfo
_TEXT	ENDS
PUBLIC	?OnProcessState@ioObjectItem@@UAEXPAVioPlayStage@@PAVioBaseChar@@@Z ; ioObjectItem::OnProcessState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioobjectitem.h
;	COMDAT ?OnProcessState@ioObjectItem@@UAEXPAVioPlayStage@@PAVioBaseChar@@@Z
_TEXT	SEGMENT
_pStage$ = 8						; size = 4
_pOwner$ = 12						; size = 4
?OnProcessState@ioObjectItem@@UAEXPAVioPlayStage@@PAVioBaseChar@@@Z PROC ; ioObjectItem::OnProcessState, COMDAT
; _this$ = ecx

; 156  : 	virtual void OnProcessState( ioPlayStage *pStage, ioBaseChar *pOwner ){};

  00000	c2 08 00	 ret	 8
?OnProcessState@ioObjectItem@@UAEXPAVioPlayStage@@PAVioBaseChar@@@Z ENDP ; ioObjectItem::OnProcessState
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::~_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::~_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::~_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UWeaponInfo@@@std@@QAE@XZ	; std::allocator<WeaponInfo>::allocator<WeaponInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UWeaponInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UWeaponInfo@@@std@@QAE@XZ PROC		; std::allocator<WeaponInfo>::allocator<WeaponInfo>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UWeaponInfo@@@std@@QAE@XZ ENDP		; std::allocator<WeaponInfo>::allocator<WeaponInfo>
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::~_Vector_val<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::~_Vector_val<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::~_Vector_val<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UForceInfo@@@std@@QAE@XZ		; std::allocator<ForceInfo>::allocator<ForceInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UForceInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UForceInfo@@@std@@QAE@XZ PROC		; std::allocator<ForceInfo>::allocator<ForceInfo>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UForceInfo@@@std@@QAE@XZ ENDP		; std::allocator<ForceInfo>::allocator<ForceInfo>
_TEXT	ENDS
PUBLIC	??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z	; std::allocator<WeaponInfo>::allocator<WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z PROC	; std::allocator<WeaponInfo>::allocator<WeaponInfo>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<WeaponInfo>::allocator<WeaponInfo>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z ; std::allocator<WeaponInfo>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z PROC ; std::allocator<WeaponInfo>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z ENDP ; std::allocator<WeaponInfo>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z	; std::allocator<ForceInfo>::allocator<ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z PROC	; std::allocator<ForceInfo>::allocator<ForceInfo>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<ForceInfo>::allocator<ForceInfo>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z ; std::allocator<ForceInfo>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z PROC ; std::allocator<ForceInfo>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z ENDP ; std::allocator<ForceInfo>::deallocate
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z ; std::_Ptr_cat<WeaponInfo,WeaponInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z PROC ; std::_Ptr_cat<WeaponInfo,WeaponInfo>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z ENDP ; std::_Ptr_cat<WeaponInfo,WeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z ; std::_Ptr_cat<ForceInfo,ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z PROC ; std::_Ptr_cat<ForceInfo,ForceInfo>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z ENDP ; std::_Ptr_cat<ForceInfo,ForceInfo>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 28		 push	 40			; 00000028H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 28		 push	 40			; 00000028H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::size
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::capacity
; Function compile flags: /Ogsp
;	COMDAT ?capacity@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 0c		 push	 12			; 0000000cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 0c		 push	 12			; 0000000cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::size
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@2:
$LN3@Xlen@2:
  0000b	cc		 int	 3
?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Xlen
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@3:
$LN3@Xlen@3:
  0000b	cc		 int	 3
?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Xlen
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ	; std::allocator<WeaponInfo>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ PROC	; std::allocator<WeaponInfo>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ ENDP	; std::allocator<WeaponInfo>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ	; std::allocator<ForceInfo>::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ PROC	; std::allocator<ForceInfo>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ ENDP	; std::allocator<ForceInfo>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Compat
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Compat
_TEXT	ENDS
PUBLIC	??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ; std::_Allocate<WeaponInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z
_TEXT	SEGMENT
$T552567 = -12						; size = 12
$T552571 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z PROC ; std::_Allocate<WeaponInfo>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate@2

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 66 66 66
	06		 cmp	 ecx, 107374182		; 06666666H
  00015	77 0e		 ja	 SHORT $LN1@Allocate@2
  00017	6b c9 28	 imul	 ecx, 40			; 00000028H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T552571[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T552571[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T552567[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T552567[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T552567[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate@2:
??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ENDP ; std::_Allocate<WeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ; std::_Allocate<ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z
_TEXT	SEGMENT
$T552576 = -12						; size = 12
$T552580 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z PROC ; std::_Allocate<ForceInfo>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate@3

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 55 55 55
	15		 cmp	 ecx, 357913941		; 15555555H
  00015	77 0e		 ja	 SHORT $LN1@Allocate@3
  00017	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate@3
$LN1@Allocate@3:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T552580[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T552580[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T552576[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T552576[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T552576[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@3:
$LN5@Allocate@3:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate@3:
??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ENDP ; std::_Allocate<ForceInfo>
_TEXT	ENDS
PUBLIC	??$_Copy_impl@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<ForceInfo *,ForceInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Copy_impl@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_impl@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Copy_impl<ForceInfo *,ForceInfo *>, COMDAT

; 2142 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2143 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00009	74 18		 je	 SHORT $LN8@Copy_impl
  0000b	56		 push	 esi
  0000c	57		 push	 edi
$LL3@Copy_impl:

; 2144 : 		*_Dest = *_First;

  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00010	83 45 10 0c	 add	 DWORD PTR __Dest$[ebp], 12 ; 0000000cH
  00014	8b f0		 mov	 esi, eax
  00016	a5		 movsd
  00017	a5		 movsd
  00018	83 c0 0c	 add	 eax, 12			; 0000000cH
  0001b	a5		 movsd
  0001c	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001f	75 ec		 jne	 SHORT $LL3@Copy_impl
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
$LN8@Copy_impl:

; 2145 : 	return (_Dest);

  00023	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2146 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Copy_impl@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_impl<ForceInfo *,ForceInfo *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z ; std::_Destroy<ForceInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z PROC	; std::_Destroy<ForceInfo>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z ENDP	; std::_Destroy<ForceInfo>
_TEXT	ENDS
PUBLIC	??4WeaponInfo@@QAEAAU0@ABU0@@Z			; WeaponInfo::operator=
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??4WeaponInfo@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4WeaponInfo@@QAEAAU0@ABU0@@Z PROC			; WeaponInfo::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	8b 07		 mov	 eax, DWORD PTR [edi]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00011	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00014	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00017	50		 push	 eax
  00018	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  00021	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00024	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00027	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0002a	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0002d	8a 47 20	 mov	 al, BYTE PTR [edi+32]
  00030	88 46 20	 mov	 BYTE PTR [esi+32], al
  00033	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00036	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00039	5f		 pop	 edi
  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??4WeaponInfo@@QAEAAU0@ABU0@@Z ENDP			; WeaponInfo::operator=
_TEXT	ENDS
PUBLIC	??_GWeaponInfo@@QAEPAXI@Z			; WeaponInfo::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GWeaponInfo@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GWeaponInfo@@QAEPAXI@Z PROC				; WeaponInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0000f	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00013	74 07		 je	 SHORT $LN1@scalar@2
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	59		 pop	 ecx
$LN1@scalar@2:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GWeaponInfo@@QAEPAXI@Z ENDP				; WeaponInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$move@AAUWeaponInfo@@@std@@YA$$QAUWeaponInfo@@AAU1@@Z ; std::move<WeaponInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUWeaponInfo@@@std@@YA$$QAUWeaponInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUWeaponInfo@@@std@@YA$$QAUWeaponInfo@@AAU1@@Z PROC ; std::move<WeaponInfo &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUWeaponInfo@@@std@@YA$$QAUWeaponInfo@@AAU1@@Z ENDP ; std::move<WeaponInfo &>
_TEXT	ENDS
PUBLIC	??$move@AAUForceInfo@@@std@@YA$$QAUForceInfo@@AAU1@@Z ; std::move<ForceInfo &>
; Function compile flags: /Ogsp
;	COMDAT ??$move@AAUForceInfo@@@std@@YA$$QAUForceInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUForceInfo@@@std@@YA$$QAUForceInfo@@AAU1@@Z PROC ; std::move<ForceInfo &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUForceInfo@@@std@@YA$$QAUForceInfo@@AAU1@@Z ENDP ; std::move<ForceInfo &>
_TEXT	ENDS
PUBLIC	??$forward@AAUWeaponInfo@@@std@@YAAAUWeaponInfo@@AAU1@@Z ; std::forward<WeaponInfo &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@AAUWeaponInfo@@@std@@YAAAUWeaponInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUWeaponInfo@@@std@@YAAAUWeaponInfo@@AAU1@@Z PROC ; std::forward<WeaponInfo &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUWeaponInfo@@@std@@YAAAUWeaponInfo@@AAU1@@Z ENDP ; std::forward<WeaponInfo &>
_TEXT	ENDS
PUBLIC	??$forward@AAUForceInfo@@@std@@YAAAUForceInfo@@AAU1@@Z ; std::forward<ForceInfo &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@AAUForceInfo@@@std@@YAAAUForceInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUForceInfo@@@std@@YAAAUForceInfo@@AAU1@@Z PROC ; std::forward<ForceInfo &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUForceInfo@@@std@@YAAAUForceInfo@@AAU1@@Z ENDP ; std::forward<ForceInfo &>
_TEXT	ENDS
PUBLIC	??$construct@AAUForceInfo@@@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@AAU2@@Z ; std::allocator<ForceInfo>::construct<ForceInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUForceInfo@@@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUForceInfo@@@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@AAU2@@Z PROC ; std::allocator<ForceInfo>::construct<ForceInfo &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN3@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN3@construct:
  00013	5f		 pop	 edi

; 209  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$construct@AAUForceInfo@@@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@AAU2@@Z ENDP ; std::allocator<ForceInfo>::construct<ForceInfo &>
_TEXT	ENDS
PUBLIC	??0WeaponInfo@@QAE@ABU0@@Z			; WeaponInfo::WeaponInfo
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0WeaponInfo@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0WeaponInfo@@QAE@ABU0@@Z PROC				; WeaponInfo::WeaponInfo, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	8b 07		 mov	 eax, DWORD PTR [edi]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00011	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00014	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00017	50		 push	 eax
  00018	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00021	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00024	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00027	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0002a	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0002d	8a 47 20	 mov	 al, BYTE PTR [edi+32]
  00030	88 46 20	 mov	 BYTE PTR [esi+32], al
  00033	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00036	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00039	5f		 pop	 edi
  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??0WeaponInfo@@QAE@ABU0@@Z ENDP				; WeaponInfo::WeaponInfo
_TEXT	ENDS
PUBLIC	__real@4049000000000000
PUBLIC	__$ArrayPad$
PUBLIC	?OnProcessState@ioGalaxyObjectItem@@UAEXPAVioPlayStage@@PAVioBaseChar@@@Z ; ioGalaxyObjectItem::OnProcessState
EXTRN	?SetWorldPosition@ioMapEffect@@QAEXABUD3DXVECTOR3@@@Z:PROC ; ioMapEffect::SetWorldPosition
EXTRN	?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z:PROC ; ioPlayStage::FindMapEffect
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT __real@4049000000000000
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
CONST	SEGMENT
__real@4049000000000000 DQ 04049000000000000r	; 50
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogalaxyobjectitem.cpp
CONST	ENDS
;	COMDAT ?OnProcessState@ioGalaxyObjectItem@@UAEXPAVioPlayStage@@PAVioBaseChar@@@Z
_TEXT	SEGMENT
$T552634 = -24						; size = 4
$T552633 = -20						; size = 4
_fOffset$549650 = -20					; size = 4
_vPos$549652 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_pStage$ = 8						; size = 4
_pOwner$ = 12						; size = 4
?OnProcessState@ioGalaxyObjectItem@@UAEXPAVioPlayStage@@PAVioBaseChar@@@Z PROC ; ioGalaxyObjectItem::OnProcessState, COMDAT
; _this$ = ecx

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 0c	 mov	 esi, DWORD PTR _pOwner$[ebp]
  00015	57		 push	 edi
  00016	8b f9		 mov	 edi, ecx

; 187  : 	ioObjectItem::OnProcessState( pStage, pOwner );
; 188  : 
; 189  : 	ioMapEffect* pMapEffect = pStage->FindMapEffect( m_GatherMeteoEffectID );

  00018	ff b7 44 1b 00
	00		 push	 DWORD PTR [edi+6980]
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _pStage$[ebp]
  00021	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect
  00026	8b d8		 mov	 ebx, eax

; 190  : 	if( pMapEffect )

  00028	85 db		 test	 ebx, ebx
  0002a	0f 84 98 00 00
	00		 je	 $LN2@OnProcessS

; 191  : 	{
; 192  : 		float fOffset = m_fHeightOffSet;

  00030	f3 0f 10 87 4c
	1b 00 00	 movss	 xmm0, DWORD PTR [edi+6988]

; 193  : 		if( pOwner->IsNeedProcess() )

  00038	8b 06		 mov	 eax, DWORD PTR [esi]
  0003a	8b ce		 mov	 ecx, esi
  0003c	f3 0f 11 45 ec	 movss	 DWORD PTR _fOffset$549650[ebp], xmm0
  00041	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  00047	84 c0		 test	 al, al
  00049	74 19		 je	 SHORT $LN1@OnProcessS

; 194  : 			fOffset += 50.0f;

  0004b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _fOffset$549650[ebp]
  00050	0f 5a c0	 cvtps2pd xmm0, xmm0
  00053	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4049000000000000
  0005b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0005f	f3 0f 11 45 ec	 movss	 DWORD PTR _fOffset$549650[ebp], xmm0
$LN1@OnProcessS:

; 195  : 
; 196  : 		D3DXVECTOR3 vPos( pOwner->GetWorldPosition().x, pOwner->GetWorldPosition().y + fOffset, pOwner->GetWorldPosition().z );

  00064	8b 06		 mov	 eax, DWORD PTR [esi]
  00066	8b ce		 mov	 ecx, esi
  00068	ff 50 70	 call	 DWORD PTR [eax+112]
  0006b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0006f	8b 06		 mov	 eax, DWORD PTR [esi]
  00071	8b ce		 mov	 ecx, esi
  00073	f3 0f 11 45 e8	 movss	 DWORD PTR $T552634[ebp], xmm0
  00078	ff 50 70	 call	 DWORD PTR [eax+112]
  0007b	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00080	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _fOffset$549650[ebp]
  00085	8b 06		 mov	 eax, DWORD PTR [esi]
  00087	0f 5a c0	 cvtps2pd xmm0, xmm0
  0008a	0f 5a c9	 cvtps2pd xmm1, xmm1
  0008d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00091	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00095	8b ce		 mov	 ecx, esi
  00097	f3 0f 11 45 ec	 movss	 DWORD PTR $T552633[ebp], xmm0
  0009c	ff 50 70	 call	 DWORD PTR [eax+112]
  0009f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000a4	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR $T552634[ebp]

; 197  : 		pMapEffect->SetWorldPosition( vPos );

  000a9	8d 45 f0	 lea	 eax, DWORD PTR _vPos$549652[ebp]
  000ac	f3 0f 11 4d f0	 movss	 DWORD PTR _vPos$549652[ebp], xmm1
  000b1	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR $T552633[ebp]
  000b6	50		 push	 eax
  000b7	8b cb		 mov	 ecx, ebx
  000b9	f3 0f 11 4d f4	 movss	 DWORD PTR _vPos$549652[ebp+4], xmm1
  000be	f3 0f 11 45 f8	 movss	 DWORD PTR _vPos$549652[ebp+8], xmm0
  000c3	e8 00 00 00 00	 call	 ?SetWorldPosition@ioMapEffect@@QAEXABUD3DXVECTOR3@@@Z ; ioMapEffect::SetWorldPosition
$LN2@OnProcessS:

; 198  : 	}
; 199  : }

  000c8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	33 cd		 xor	 ecx, ebp
  000cf	5b		 pop	 ebx
  000d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d5	c9		 leave
  000d6	c2 08 00	 ret	 8
?OnProcessState@ioGalaxyObjectItem@@UAEXPAVioPlayStage@@PAVioBaseChar@@@Z ENDP ; ioGalaxyObjectItem::OnProcessState
_TEXT	ENDS
PUBLIC	?begin@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@XZ ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@XZ PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@XZ ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@XZ ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@XZ PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@XZ ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::end
_TEXT	ENDS
PUBLIC	??C?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QBEPBUGalaxyAttack@ioGalaxyObjectItem@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >::operator->
; Function compile flags: /Ogsp
;	COMDAT ??C?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QBEPBUGalaxyAttack@ioGalaxyObjectItem@@XZ
_TEXT	SEGMENT
??C?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QBEPBUGalaxyAttack@ioGalaxyObjectItem@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >::operator->, COMDAT
; _this$ = ecx

; 89   : 		return (&**this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 90   : 		}

  00002	c3		 ret	 0
??C?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QBEPBUGalaxyAttack@ioGalaxyObjectItem@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >::operator->
_TEXT	ENDS
PUBLIC	?begin@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@XZ ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@XZ PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@XZ ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@XZ ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@XZ PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@XZ ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::end
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@1@@Z ; std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@1@@Z PROC ; std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@1@@Z ENDP ; std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >::operator==
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@@Z PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@@Z ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Make_iter
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QBEIXZ ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QBEIXZ PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 2e ba e8 02	 mov	 eax, 48806446		; 02e8ba2eH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IBEII@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IBEII@Z PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 58		 push	 88			; 00000058H
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba 2e ba e8 02	 mov	 edx, 48806446		; 02e8ba2eH
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00026	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Grow_to@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IBEII@Z ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Grow_to
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEPAUGalaxyAttack@ioGalaxyObjectItem@@I@Z ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEPAUGalaxyAttack@ioGalaxyObjectItem@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEPAUGalaxyAttack@ioGalaxyObjectItem@@I@Z PROC ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UGalaxyAttack@ioGalaxyObjectItem@@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@IPAU12@@Z ; std::_Allocate<ioGalaxyObjectItem::GalaxyAttack>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEPAUGalaxyAttack@ioGalaxyObjectItem@@I@Z ENDP ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::allocate
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<20>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
__k$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<20>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 dd 01 00
	00		 je	 $LN96@LoadString
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 c6 01 00
	00		 je	 $LN95@LoadString
  0003a	b3 ec		 mov	 bl, -20			; ffffffecH
  0003c	32 d3		 xor	 dl, bl
  0003e	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00041	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00044	84 d2		 test	 dl, dl
  00046	0f 84 ae 01 00
	00		 je	 $LN94@LoadString
  0004c	b1 eb		 mov	 cl, -21			; ffffffebH
  0004e	32 d1		 xor	 dl, cl
  00050	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00053	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00056	84 d2		 test	 dl, dl
  00058	0f 84 96 01 00
	00		 je	 $LN93@LoadString
  0005e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00061	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 7f 01 00
	00		 je	 $LN92@LoadString
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 69 01 00
	00		 je	 $LN91@LoadString
  00080	32 d3		 xor	 dl, bl
  00082	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  00085	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00088	84 d2		 test	 dl, dl
  0008a	0f 84 54 01 00
	00		 je	 $LN90@LoadString
  00090	32 d1		 xor	 dl, cl
  00092	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  00095	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00098	84 d2		 test	 dl, dl
  0009a	0f 84 3e 01 00
	00		 je	 $LN89@LoadString
  000a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a3	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 27 01 00
	00		 je	 $LN88@LoadString
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 11 01 00
	00		 je	 $LN87@LoadString
  000c2	32 d3		 xor	 dl, bl
  000c4	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 fc 00 00
	00		 je	 $LN86@LoadString
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 e6 00 00
	00		 je	 $LN85@LoadString
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 cf 00 00
	00		 je	 $LN84@LoadString
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 b9 00 00
	00		 je	 $LN83@LoadString
  00104	32 d3		 xor	 dl, bl
  00106	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 a4 00 00
	00		 je	 $LN82@LoadString
  00114	32 d1		 xor	 dl, cl
  00116	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00119	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011c	84 d2		 test	 dl, dl
  0011e	0f 84 8e 00 00
	00		 je	 $LN81@LoadString
  00124	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00127	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	74 7b		 je	 SHORT $LN80@LoadString
  00131	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00134	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00137	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013a	84 d2		 test	 dl, dl
  0013c	74 69		 je	 SHORT $LN79@LoadString
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	74 58		 je	 SHORT $LN78@LoadString
  0014a	32 d1		 xor	 dl, cl
  0014c	80 78 13 00	 cmp	 BYTE PTR [eax+19], 0
  00150	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	0f 84 b1 00 00
	00		 je	 $LN111@LoadString
  00159	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0015c	84 d2		 test	 dl, dl
  0015e	74 3c		 je	 SHORT $LN76@LoadString
  00160	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00163	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  00166	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00169	84 d2		 test	 dl, dl
  0016b	74 2a		 je	 SHORT $LN75@LoadString
  0016d	32 d3		 xor	 dl, bl
  0016f	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  00172	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00175	84 d2		 test	 dl, dl
  00177	74 19		 je	 SHORT $LN74@LoadString
  00179	8a 40 17	 mov	 al, BYTE PTR [eax+23]
  0017c	32 d1		 xor	 dl, cl
  0017e	88 55 fa	 mov	 BYTE PTR __k$[ebp+22], dl
  00181	84 c0		 test	 al, al
  00183	74 07		 je	 SHORT $LN73@LoadString
  00185	34 ea		 xor	 al, -22			; ffffffeaH
  00187	88 45 fb	 mov	 BYTE PTR __k$[ebp+23], al
  0018a	eb 7e		 jmp	 SHORT $LN111@LoadString
$LN73@LoadString:
  0018c	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00190	eb 78		 jmp	 SHORT $LN111@LoadString
$LN74@LoadString:
  00192	88 4d fa	 mov	 BYTE PTR __k$[ebp+22], cl
  00195	eb 73		 jmp	 SHORT $LN111@LoadString
$LN75@LoadString:
  00197	88 5d f9	 mov	 BYTE PTR __k$[ebp+21], bl
  0019a	eb 6e		 jmp	 SHORT $LN111@LoadString
$LN76@LoadString:
  0019c	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001a0	eb 68		 jmp	 SHORT $LN111@LoadString
$LN78@LoadString:
  001a2	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  001a5	eb 63		 jmp	 SHORT $LN111@LoadString
$LN79@LoadString:
  001a7	88 5d f5	 mov	 BYTE PTR __k$[ebp+17], bl
  001aa	eb 5e		 jmp	 SHORT $LN111@LoadString
$LN80@LoadString:
  001ac	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001b0	eb 58		 jmp	 SHORT $LN111@LoadString
$LN81@LoadString:
  001b2	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001b6	eb 52		 jmp	 SHORT $LN111@LoadString
$LN82@LoadString:
  001b8	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  001bb	eb 4d		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  001bd	88 5d f1	 mov	 BYTE PTR __k$[ebp+13], bl
  001c0	eb 48		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  001c2	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001c6	eb 42		 jmp	 SHORT $LN111@LoadString
$LN85@LoadString:
  001c8	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001cc	eb 3c		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  001ce	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001d1	eb 37		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  001d3	88 5d ed	 mov	 BYTE PTR __k$[ebp+9], bl
  001d6	eb 32		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  001d8	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001dc	eb 2c		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  001de	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001e2	eb 26		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  001e4	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001e7	eb 21		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  001e9	88 5d e9	 mov	 BYTE PTR __k$[ebp+5], bl
  001ec	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  001ee	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001f2	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  001f4	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001f8	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  001fa	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001fe	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  00200	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00204	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  00206	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  0020a	6a 04		 push	 4
  0020c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0020f	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+19], 0
  00213	5a		 pop	 edx
$LL104@LoadString:
  00214	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0021a	83 c0 04	 add	 eax, 4
  0021d	4a		 dec	 edx
  0021e	75 f4		 jne	 SHORT $LL104@LoadString
  00220	6a 10		 push	 16			; 00000010H
  00222	58		 pop	 eax
$LL101@LoadString:
  00223	8b c8		 mov	 ecx, eax
  00225	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0022b	79 05		 jns	 SHORT $LN112@LoadString
  0022d	49		 dec	 ecx
  0022e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00231	41		 inc	 ecx
$LN112@LoadString:
  00232	b2 ed		 mov	 dl, -19			; ffffffedH
  00234	2a d1		 sub	 dl, cl
  00236	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  0023a	40		 inc	 eax
  0023b	83 f8 13	 cmp	 eax, 19			; 00000013H
  0023e	7c e3		 jl	 SHORT $LL101@LoadString

; 163  : 		LoadString(_k, d, b, i);

  00240	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00243	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00246	57		 push	 edi
  00247	56		 push	 esi
  00248	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0024b	50		 push	 eax
  0024c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00252	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00255	5f		 pop	 edi
  00256	5e		 pop	 esi
  00257	33 cd		 xor	 ecx, ebp
  00259	5b		 pop	 ebx
  0025a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025f	c9		 leave
  00260	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<20>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BB@@ioINILoader@@QAEHAAY0BB@$$CBDH@Z ; ioINILoader::LoadInt_e<17>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BB@@ioINILoader@@QAEHAAY0BB@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -28						; size = 17
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BB@@ioINILoader@@QAEHAAY0BB@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<17>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 a7 01 00
	00		 je	 $LN96@LoadInt_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 90 01 00
	00		 je	 $LN95@LoadInt_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 78 01 00
	00		 je	 $LN94@LoadInt_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 61 01 00
	00		 je	 $LN93@LoadInt_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 4a 01 00
	00		 je	 $LN92@LoadInt_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 34 01 00
	00		 je	 $LN91@LoadInt_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 1e 01 00
	00		 je	 $LN90@LoadInt_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 07 01 00
	00		 je	 $LN89@LoadInt_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 f0 00 00
	00		 je	 $LN88@LoadInt_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 da 00 00
	00		 je	 $LN87@LoadInt_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 c4 00 00
	00		 je	 $LN86@LoadInt_e
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 ad 00 00
	00		 je	 $LN85@LoadInt_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 96 00 00
	00		 je	 $LN84@LoadInt_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 80 00 00
	00		 je	 $LN83@LoadInt_e
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	74 6e		 je	 SHORT $LN82@LoadInt_e
  00108	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010b	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0010e	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00111	84 d2		 test	 dl, dl
  00113	74 5b		 je	 SHORT $LN81@LoadInt_e
  00115	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00118	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	0f 84 a6 00 00
	00		 je	 $LN1@LoadInt_e
  00125	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00128	84 d2		 test	 dl, dl
  0012a	74 3f		 je	 SHORT $LN79@LoadInt_e
  0012c	32 d1		 xor	 dl, cl
  0012e	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00131	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00134	84 d2		 test	 dl, dl
  00136	74 2d		 je	 SHORT $LN78@LoadInt_e
  00138	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0013b	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0013e	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00141	84 d2		 test	 dl, dl
  00143	74 1a		 je	 SHORT $LN77@LoadInt_e
  00145	8a 40 14	 mov	 al, BYTE PTR [eax+20]
  00148	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014b	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014e	84 c0		 test	 al, al
  00150	74 07		 je	 SHORT $LN76@LoadInt_e
  00152	34 ed		 xor	 al, -19			; ffffffedH
  00154	88 45 f8	 mov	 BYTE PTR __k$[ebp+20], al
  00157	eb 72		 jmp	 SHORT $LN1@LoadInt_e
$LN76@LoadInt_e:
  00159	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0015d	eb 6c		 jmp	 SHORT $LN1@LoadInt_e
$LN77@LoadInt_e:
  0015f	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00163	eb 66		 jmp	 SHORT $LN1@LoadInt_e
$LN78@LoadInt_e:
  00165	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00169	eb 60		 jmp	 SHORT $LN1@LoadInt_e
$LN79@LoadInt_e:
  0016b	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  0016e	eb 5b		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  00170	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00174	eb 55		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  00176	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0017a	eb 4f		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  0017c	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  0017f	eb 4a		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  00181	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00185	eb 44		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  00187	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0018b	eb 3e		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  0018d	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00191	eb 38		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  00193	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  00196	eb 33		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  00198	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0019c	eb 2d		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  0019e	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001a2	eb 27		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  001a4	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001a8	eb 21		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  001aa	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001ad	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  001af	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001b3	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  001b5	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001b9	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  001bb	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001bf	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  001c1	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001c5	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  001c7	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  001cb	6a 04		 push	 4
  001cd	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001d0	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+16], 0
  001d4	5a		 pop	 edx
$LL104@LoadInt_e:
  001d5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001db	83 c0 04	 add	 eax, 4
  001de	4a		 dec	 edx
  001df	75 f4		 jne	 SHORT $LL104@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  001e1	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001e4	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001e7	50		 push	 eax
  001e8	8b ce		 mov	 ecx, esi
  001ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  001f0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f3	33 cd		 xor	 ecx, ebp
  001f5	5e		 pop	 esi
  001f6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fb	c9		 leave
  001fc	c2 08 00	 ret	 8
??$LoadInt_e@$0BB@@ioINILoader@@QAEHAAY0BB@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<17>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0P@@ioINILoader@@QAEHAAY0P@$$CBDH@Z ; ioINILoader::LoadInt_e<15>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0P@@ioINILoader@@QAEHAAY0P@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0P@@ioINILoader@@QAEHAAY0P@$$CBDH@Z PROC	; ioINILoader::LoadInt_e<15>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 75 01 00
	00		 je	 $LN96@LoadInt_e@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 5e 01 00
	00		 je	 $LN95@LoadInt_e@2
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 46 01 00
	00		 je	 $LN94@LoadInt_e@2
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 2f 01 00
	00		 je	 $LN93@LoadInt_e@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 18 01 00
	00		 je	 $LN92@LoadInt_e@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 02 01 00
	00		 je	 $LN91@LoadInt_e@2
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 ec 00 00
	00		 je	 $LN90@LoadInt_e@2
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 d5 00 00
	00		 je	 $LN89@LoadInt_e@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 be 00 00
	00		 je	 $LN88@LoadInt_e@2
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 a8 00 00
	00		 je	 $LN87@LoadInt_e@2
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 92 00 00
	00		 je	 $LN86@LoadInt_e@2
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 7f		 je	 SHORT $LN85@LoadInt_e@2
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 6c		 je	 SHORT $LN84@LoadInt_e@2
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000e9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000ec	84 d2		 test	 dl, dl
  000ee	74 5a		 je	 SHORT $LN83@LoadInt_e@2
  000f0	32 d1		 xor	 dl, cl
  000f2	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000f6	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000f9	0f 84 9a 00 00
	00		 je	 $LN1@LoadInt_e@2
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 3e		 je	 SHORT $LN81@LoadInt_e@2
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 2b		 je	 SHORT $LN80@LoadInt_e@2
  00113	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00116	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00119	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0011c	84 d2		 test	 dl, dl
  0011e	74 19		 je	 SHORT $LN79@LoadInt_e@2
  00120	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  00123	32 d1		 xor	 dl, cl
  00125	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00128	84 c0		 test	 al, al
  0012a	74 07		 je	 SHORT $LN78@LoadInt_e@2
  0012c	34 eb		 xor	 al, -21			; ffffffebH
  0012e	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00131	eb 66		 jmp	 SHORT $LN1@LoadInt_e@2
$LN78@LoadInt_e@2:
  00133	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00137	eb 60		 jmp	 SHORT $LN1@LoadInt_e@2
$LN79@LoadInt_e@2:
  00139	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  0013c	eb 5b		 jmp	 SHORT $LN1@LoadInt_e@2
$LN80@LoadInt_e@2:
  0013e	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00142	eb 55		 jmp	 SHORT $LN1@LoadInt_e@2
$LN81@LoadInt_e@2:
  00144	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00148	eb 4f		 jmp	 SHORT $LN1@LoadInt_e@2
$LN83@LoadInt_e@2:
  0014a	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0014d	eb 4a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN84@LoadInt_e@2:
  0014f	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00153	eb 44		 jmp	 SHORT $LN1@LoadInt_e@2
$LN85@LoadInt_e@2:
  00155	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00159	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN86@LoadInt_e@2:
  0015b	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0015f	eb 38		 jmp	 SHORT $LN1@LoadInt_e@2
$LN87@LoadInt_e@2:
  00161	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  00164	eb 33		 jmp	 SHORT $LN1@LoadInt_e@2
$LN88@LoadInt_e@2:
  00166	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0016a	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@2
$LN89@LoadInt_e@2:
  0016c	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00170	eb 27		 jmp	 SHORT $LN1@LoadInt_e@2
$LN90@LoadInt_e@2:
  00172	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00176	eb 21		 jmp	 SHORT $LN1@LoadInt_e@2
$LN91@LoadInt_e@2:
  00178	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  0017b	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN92@LoadInt_e@2:
  0017d	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00181	eb 16		 jmp	 SHORT $LN1@LoadInt_e@2
$LN93@LoadInt_e@2:
  00183	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00187	eb 10		 jmp	 SHORT $LN1@LoadInt_e@2
$LN94@LoadInt_e@2:
  00189	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0018d	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN95@LoadInt_e@2:
  0018f	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00193	eb 04		 jmp	 SHORT $LN1@LoadInt_e@2
$LN96@LoadInt_e@2:
  00195	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@2:
  00199	6a 03		 push	 3
  0019b	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0019e	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001a2	5a		 pop	 edx
$LL104@LoadInt_e@2:
  001a3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a9	83 c0 04	 add	 eax, 4
  001ac	4a		 dec	 edx
  001ad	75 f4		 jne	 SHORT $LL104@LoadInt_e@2
  001af	6a 0c		 push	 12			; 0000000cH
  001b1	58		 pop	 eax
$LL101@LoadInt_e@2:
  001b2	8b c8		 mov	 ecx, eax
  001b4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001ba	79 05		 jns	 SHORT $LN111@LoadInt_e@2
  001bc	49		 dec	 ecx
  001bd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c0	41		 inc	 ecx
$LN111@LoadInt_e@2:
  001c1	b2 ed		 mov	 dl, -19			; ffffffedH
  001c3	2a d1		 sub	 dl, cl
  001c5	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001c9	40		 inc	 eax
  001ca	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001cd	7c e3		 jl	 SHORT $LL101@LoadInt_e@2

; 120  : 		return LoadInt(_k, i);

  001cf	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001d2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001d5	50		 push	 eax
  001d6	8b ce		 mov	 ecx, esi
  001d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  001de	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e1	33 cd		 xor	 ecx, ebp
  001e3	5e		 pop	 esi
  001e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e9	c9		 leave
  001ea	c2 08 00	 ret	 8
??$LoadInt_e@$0P@@ioINILoader@@QAEHAAY0P@$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<15>
_TEXT	ENDS
PUBLIC	?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end
_TEXT	ENDS
PUBLIC	?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z ; std::allocator<ForceInfo>::construct
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z PROC ; std::allocator<ForceInfo>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN5@construct@2
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN5@construct@2:
  00013	5f		 pop	 edi

; 198  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z ENDP ; std::allocator<ForceInfo>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
_TEXT	SEGMENT
$T552910 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z PROC ; std::_Construct<WeaponInfo,WeaponInfo const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T552910[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 08		 je	 SHORT $LN3@Construct@2
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@ABU0@@Z
$LN3@Construct@2:

; 49   : 	}

  00025	e8 00 00 00 00	 call	 __EH_epilog3
  0002a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T552910[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ENDP ; std::_Construct<WeaponInfo,WeaponInfo const &>
PUBLIC	??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z PROC ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z ENDP ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::_Vector_val<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z PROC ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::_Vector_val<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z ENDP ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::_Vector_val<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z ; std::allocator<WeaponInfo>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z PROC ; std::allocator<WeaponInfo>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ; std::_Allocate<WeaponInfo>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z ENDP ; std::allocator<WeaponInfo>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z ; std::allocator<ForceInfo>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z PROC ; std::allocator<ForceInfo>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ; std::_Allocate<ForceInfo>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z ENDP ; std::allocator<ForceInfo>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator==
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator==
_TEXT	ENDS
PUBLIC	??$_Copy_impl@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00@Z ; std::_Copy_impl<ForceInfo *,ForceInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Copy_impl@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$553005 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_impl@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00@Z PROC ; std::_Copy_impl<ForceInfo *,ForceInfo *>, COMDAT

; 2163 : 	{	// copy [_First, _Last) to [_Dest, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2164 : 	return (_Copy_impl(_First, _Last,
; 2165 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$553005[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_impl@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<ForceInfo *,ForceInfo *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2166 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Copy_impl@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00@Z ENDP ; std::_Copy_impl<ForceInfo *,ForceInfo *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z ; std::allocator<ForceInfo>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z PROC ; std::allocator<ForceInfo>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z ENDP ; std::allocator<ForceInfo>::destroy
_TEXT	ENDS
PUBLIC	??$_Copy_impl@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<WeaponInfo *,WeaponInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Copy_impl@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_impl@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Copy_impl<WeaponInfo *,WeaponInfo *>, COMDAT

; 2142 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2143 : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 10		 jmp	 SHORT $LN9@Copy_impl@2
$LL3@Copy_impl@2:

; 2144 : 		*_Dest = *_First;

  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ??4WeaponInfo@@QAEAAU0@ABU0@@Z
  00012	83 45 10 28	 add	 DWORD PTR __Dest$[ebp], 40 ; 00000028H
  00016	83 c6 28	 add	 esi, 40			; 00000028H
$LN9@Copy_impl@2:

; 2143 : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	75 eb		 jne	 SHORT $LL3@Copy_impl@2

; 2145 : 	return (_Dest);

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00021	5e		 pop	 esi

; 2146 : 	}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Copy_impl@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_impl<WeaponInfo *,WeaponInfo *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<WeaponInfo *,WeaponInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<WeaponInfo *,WeaponInfo *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 10		 jmp	 SHORT $LN11@Move
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ??4WeaponInfo@@QAEAAU0@ABU0@@Z
  00012	83 45 10 28	 add	 DWORD PTR __Dest$[ebp], 40 ; 00000028H
  00016	83 c6 28	 add	 esi, 40			; 00000028H
$LN11@Move:

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	75 eb		 jne	 SHORT $LL3@Move

; 2515 : 	return (_Dest);

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00021	5e		 pop	 esi

; 2516 : 	}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<WeaponInfo *,WeaponInfo *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ForceInfo *,ForceInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<ForceInfo *,ForceInfo *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00009	74 18		 je	 SHORT $LN10@Move@2
  0000b	56		 push	 esi
  0000c	57		 push	 edi
$LL3@Move@2:

; 2514 : 		*_Dest = _STD move(*_First);

  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00010	83 45 10 0c	 add	 DWORD PTR __Dest$[ebp], 12 ; 0000000cH
  00014	8b f0		 mov	 esi, eax
  00016	a5		 movsd
  00017	a5		 movsd
  00018	83 c0 0c	 add	 eax, 12			; 0000000cH
  0001b	a5		 movsd
  0001c	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001f	75 ec		 jne	 SHORT $LL3@Move@2
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
$LN10@Move@2:

; 2515 : 	return (_Dest);

  00023	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<ForceInfo *,ForceInfo *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z ; std::_Destroy<WeaponInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z PROC ; std::_Destroy<WeaponInfo>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	83 c1 08	 add	 ecx, 8

; 64   : 	}

  00009	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  0000a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z ENDP ; std::_Destroy<WeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@AAU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@AAU2@@Z ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@AAU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@AAU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN7@Cons_val
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN7@Cons_val:
  00013	5f		 pop	 edi

; 281  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@AAU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo &>
_TEXT	ENDS
PUBLIC	??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z ; std::allocator<WeaponInfo>::construct<WeaponInfo &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z
_TEXT	SEGMENT
$T553077 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z PROC ; std::allocator<WeaponInfo>::construct<WeaponInfo &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T553077[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct@3
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@ABU0@@Z
$LN3@construct@3:

; 209  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T553077[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUWeaponInfo@@@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@AAU2@@Z ENDP ; std::allocator<WeaponInfo>::construct<WeaponInfo &>
PUBLIC	??0?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@XZ ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@XZ PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >::operator!=
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAE_NI@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Buy
; Function compile flags: /Ogsp
;	COMDAT ?_Buy@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAE_NI@Z PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy
$LN4@Buy:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff 2e ba e8
	02		 cmp	 edi, 48806446		; 02e8ba2eH
  00022	76 0b		 jbe	 SHORT $LN2@Buy

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy:
$LN2@Buy:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@UGalaxyAttack@ioGalaxyObjectItem@@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@IPAU12@@Z ; std::_Allocate<ioGalaxyObjectItem::GalaxyAttack>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	6b ff 58	 imul	 edi, 88			; 00000058H
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy:
?_Buy@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN9@Cons_val@2
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN9@Cons_val@2:
  00013	5f		 pop	 edi

; 281  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z ; std::allocator<WeaponInfo>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z PROC ; std::allocator<WeaponInfo>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z ENDP ; std::allocator<WeaponInfo>::construct
_TEXT	ENDS
PUBLIC	??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy
; Function compile flags: /Ogsp
;	COMDAT ?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy@2

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy@2
$LN4@Buy@2:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff 66 66 66
	06		 cmp	 edi, 107374182		; 06666666H
  00022	76 0b		 jbe	 SHORT $LN2@Buy@2

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy@2:
$LN2@Buy@2:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ; std::_Allocate<WeaponInfo>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	6b ff 28	 imul	 edi, 40			; 00000028H
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy@2:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy@2:
?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy
; Function compile flags: /Ogsp
;	COMDAT ?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy@3

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy@3
$LN4@Buy@3:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff 55 55 55
	15		 cmp	 edi, 357913941		; 15555555H
  00022	76 0b		 jbe	 SHORT $LN2@Buy@3

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy@3:
$LN2@Buy@3:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ; std::_Allocate<ForceInfo>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	6b ff 0c	 imul	 edi, 12			; 0000000cH
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy@3:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy@3:
?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy
_TEXT	ENDS
PUBLIC	?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end
_TEXT	ENDS
PUBLIC	?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Make_iter
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator!=
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z ; std::_Dest_val<std::allocator<ForceInfo>,ForceInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z PROC ; std::_Dest_val<std::allocator<ForceInfo>,ForceInfo>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z ENDP ; std::_Dest_val<std::allocator<ForceInfo>,ForceInfo>
_TEXT	ENDS
PUBLIC	??$_Copy_impl@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00@Z ; std::_Copy_impl<WeaponInfo *,WeaponInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Copy_impl@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$553421 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_impl@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00@Z PROC ; std::_Copy_impl<WeaponInfo *,WeaponInfo *>, COMDAT

; 2163 : 	{	// copy [_First, _Last) to [_Dest, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2164 : 	return (_Copy_impl(_First, _Last,
; 2165 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$553421[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_impl@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<WeaponInfo *,WeaponInfo *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2166 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Copy_impl@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00@Z ENDP ; std::_Copy_impl<WeaponInfo *,WeaponInfo *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00@Z ; std::_Move<WeaponInfo *,WeaponInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$553428 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00@Z PROC ; std::_Move<WeaponInfo *,WeaponInfo *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$553428[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<WeaponInfo *,WeaponInfo *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00@Z ENDP ; std::_Move<WeaponInfo *,WeaponInfo *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00@Z ; std::_Move<ForceInfo *,ForceInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$553435 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00@Z PROC ; std::_Move<ForceInfo *,ForceInfo *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$553435[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ForceInfo *,ForceInfo *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00@Z ENDP ; std::_Move<ForceInfo *,ForceInfo *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z ; std::allocator<WeaponInfo>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z PROC ; std::allocator<WeaponInfo>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	83 c1 08	 add	 ecx, 8
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 214  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z ENDP ; std::allocator<WeaponInfo>::destroy
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 16		 jmp	 SHORT $LN24@Uninit_cop
$LL6@Uninit_cop:

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  00009	56		 push	 esi
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@AAU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@AAU2@@Z ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo &>
  00015	83 45 10 0c	 add	 DWORD PTR __Dest$[ebp], 12 ; 0000000cH
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	83 c6 0c	 add	 esi, 12			; 0000000cH
$LN24@Uninit_cop:

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001f	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00022	75 e5		 jne	 SHORT $LL6@Uninit_cop

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)
; 379  : 		_Dest_val(_Al, _Next);
; 380  : 	_RERAISE;
; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00024	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00027	5e		 pop	 esi

; 383  : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Uninit_copy@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z
_TEXT	SEGMENT
$T553504 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T553504[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val@3
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@ABU0@@Z
$LN7@Cons_val@3:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T553504[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo &>
PUBLIC	?GetCurrNoramlAttackAttribute@ioGalaxyObjectItem@@QBEPBUAttackAttribute@@XZ ; ioGalaxyObjectItem::GetCurrNoramlAttackAttribute
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogalaxyobjectitem.cpp
;	COMDAT ?GetCurrNoramlAttackAttribute@ioGalaxyObjectItem@@QBEPBUAttackAttribute@@XZ
_TEXT	SEGMENT
?GetCurrNoramlAttackAttribute@ioGalaxyObjectItem@@QBEPBUAttackAttribute@@XZ PROC ; ioGalaxyObjectItem::GetCurrNoramlAttackAttribute, COMDAT
; _this$ = ecx

; 98   : 	for( GalaxyAttackList::const_iterator iter = m_NormalAttributeList.begin(); iter != m_NormalAttributeList.end(); ++iter )

  00000	8b 81 50 1b 00
	00		 mov	 eax, DWORD PTR [ecx+6992]
  00006	8b 91 54 1b 00
	00		 mov	 edx, DWORD PTR [ecx+6996]
  0000c	3b c2		 cmp	 eax, edx
  0000e	74 17		 je	 SHORT $LN2@GetCurrNor
  00010	8b 89 70 1b 00
	00		 mov	 ecx, DWORD PTR [ecx+7024]
$LL13@GetCurrNor:

; 99   : 	{
; 100  : 		if( m_iCurrFireIndex >= iter->m_iRangeMin && m_iCurrFireIndex <= iter->m_iRangeMax )

  00016	3b 48 50	 cmp	 ecx, DWORD PTR [eax+80]
  00019	7c 05		 jl	 SHORT $LN3@GetCurrNor
  0001b	3b 48 54	 cmp	 ecx, DWORD PTR [eax+84]
  0001e	7e 09		 jle	 SHORT $LN5@GetCurrNor
$LN3@GetCurrNor:

; 98   : 	for( GalaxyAttackList::const_iterator iter = m_NormalAttributeList.begin(); iter != m_NormalAttributeList.end(); ++iter )

  00020	83 c0 58	 add	 eax, 88			; 00000058H
  00023	3b c2		 cmp	 eax, edx
  00025	75 ef		 jne	 SHORT $LL13@GetCurrNor
$LN2@GetCurrNor:

; 101  : 			return &iter->m_Attribute;			
; 102  : 	}	
; 103  : 
; 104  : 	return NULL;

  00027	33 c0		 xor	 eax, eax
$LN5@GetCurrNor:

; 105  : }

  00029	c3		 ret	 0
?GetCurrNoramlAttackAttribute@ioGalaxyObjectItem@@QBEPBUAttackAttribute@@XZ ENDP ; ioGalaxyObjectItem::GetCurrNoramlAttackAttribute
_TEXT	ENDS
PUBLIC	?GetCurrJumpAttackAttribute@ioGalaxyObjectItem@@QBEPBUAttackAttribute@@XZ ; ioGalaxyObjectItem::GetCurrJumpAttackAttribute
; Function compile flags: /Ogsp
;	COMDAT ?GetCurrJumpAttackAttribute@ioGalaxyObjectItem@@QBEPBUAttackAttribute@@XZ
_TEXT	SEGMENT
?GetCurrJumpAttackAttribute@ioGalaxyObjectItem@@QBEPBUAttackAttribute@@XZ PROC ; ioGalaxyObjectItem::GetCurrJumpAttackAttribute, COMDAT
; _this$ = ecx

; 109  : 	for( GalaxyAttackList::const_iterator iter = m_JumpAttributeList.begin(); iter != m_JumpAttributeList.end(); ++iter )

  00000	8b 81 60 1b 00
	00		 mov	 eax, DWORD PTR [ecx+7008]
  00006	8b 91 64 1b 00
	00		 mov	 edx, DWORD PTR [ecx+7012]
  0000c	3b c2		 cmp	 eax, edx
  0000e	74 17		 je	 SHORT $LN2@GetCurrJum
  00010	8b 89 70 1b 00
	00		 mov	 ecx, DWORD PTR [ecx+7024]
$LL13@GetCurrJum:

; 110  : 	{
; 111  : 		if( m_iCurrFireIndex >= iter->m_iRangeMin && m_iCurrFireIndex <= iter->m_iRangeMax )

  00016	3b 48 50	 cmp	 ecx, DWORD PTR [eax+80]
  00019	7c 05		 jl	 SHORT $LN3@GetCurrJum
  0001b	3b 48 54	 cmp	 ecx, DWORD PTR [eax+84]
  0001e	7e 09		 jle	 SHORT $LN5@GetCurrJum
$LN3@GetCurrJum:

; 109  : 	for( GalaxyAttackList::const_iterator iter = m_JumpAttributeList.begin(); iter != m_JumpAttributeList.end(); ++iter )

  00020	83 c0 58	 add	 eax, 88			; 00000058H
  00023	3b c2		 cmp	 eax, edx
  00025	75 ef		 jne	 SHORT $LL13@GetCurrJum
$LN2@GetCurrJum:

; 112  : 			return &iter->m_Attribute;			
; 113  : 	}
; 114  : 
; 115  : 	return NULL;

  00027	33 c0		 xor	 eax, eax
$LN5@GetCurrJum:

; 116  : }

  00029	c3		 ret	 0
?GetCurrJumpAttackAttribute@ioGalaxyObjectItem@@QBEPBUAttackAttribute@@XZ ENDP ; ioGalaxyObjectItem::GetCurrJumpAttackAttribute
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?OnEquiped@ioGalaxyObjectItem@@UAEXPAVioBaseChar@@@Z ; ioGalaxyObjectItem::OnEquiped
EXTRN	?GetUniqueID@ioMapEffect@@QBEKXZ:PROC		; ioMapEffect::GetUniqueID
EXTRN	?CreateMapEffect@ioPlayStage@@QAEPAVioMapEffect@@ABVioHashString@@ABUD3DXVECTOR3@@1@Z:PROC ; ioPlayStage::CreateMapEffect
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	?AddExternalComboAttack@ioDoubleJump2@@QAEXPBUAttackAttribute@@@Z:PROC ; ioDoubleJump2::AddExternalComboAttack
EXTRN	?OnEquiped@ioObjectItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioObjectItem::OnEquiped
; Function compile flags: /Ogsp
;	COMDAT ?OnEquiped@ioGalaxyObjectItem@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
$T553690 = -36						; size = 4
$T553689 = -32						; size = 4
_fOffset$ = -32						; size = 4
_vPos$549627 = -28					; size = 12
$T549629 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pOwner$ = 8						; size = 4
?OnEquiped@ioGalaxyObjectItem@@UAEXPAVioBaseChar@@@Z PROC ; ioGalaxyObjectItem::OnEquiped, COMDAT
; _this$ = ecx

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _pOwner$[ebp]
  00014	57		 push	 edi

; 133  : 	ioObjectItem::OnEquiped( pOwner );

  00015	56		 push	 esi
  00016	8b f9		 mov	 edi, ecx
  00018	e8 00 00 00 00	 call	 ?OnEquiped@ioObjectItem@@UAEXPAVioBaseChar@@@Z ; ioObjectItem::OnEquiped

; 134  : 	if( !pOwner )

  0001d	85 f6		 test	 esi, esi
  0001f	0f 84 14 01 00
	00		 je	 $LN1@OnEquiped

; 135  : 		return;
; 136  : 	
; 137  : 	ioDoubleJump2* pJump = ToDoubleJump2( m_pExtendJump );

  00025	53		 push	 ebx
  00026	ff b7 c8 0b 00
	00		 push	 DWORD PTR [edi+3016]
  0002c	e8 00 00 00 00	 call	 ?ToDoubleJump2@@YAPAVioDoubleJump2@@PAVioExtendJump@@@Z ; ToDoubleJump2
  00031	59		 pop	 ecx

; 138  : 	const AttackAttribute* pAttr = GetCurrJumpAttackAttribute();

  00032	8b cf		 mov	 ecx, edi
  00034	8b d8		 mov	 ebx, eax
  00036	e8 00 00 00 00	 call	 ?GetCurrJumpAttackAttribute@ioGalaxyObjectItem@@QBEPBUAttackAttribute@@XZ ; ioGalaxyObjectItem::GetCurrJumpAttackAttribute

; 139  : 	if( pJump && pAttr )

  0003b	85 db		 test	 ebx, ebx
  0003d	74 0c		 je	 SHORT $LN5@OnEquiped
  0003f	85 c0		 test	 eax, eax
  00041	74 08		 je	 SHORT $LN5@OnEquiped

; 140  : 	{
; 141  : 		pJump->AddExternalComboAttack( pAttr );

  00043	50		 push	 eax
  00044	8b cb		 mov	 ecx, ebx
  00046	e8 00 00 00 00	 call	 ?AddExternalComboAttack@ioDoubleJump2@@QAEXPBUAttackAttribute@@@Z ; ioDoubleJump2::AddExternalComboAttack
$LN5@OnEquiped:

; 142  : 	}
; 143  : 
; 144  : 	float fOffset = m_fHeightOffSet;

  0004b	f3 0f 10 87 4c
	1b 00 00	 movss	 xmm0, DWORD PTR [edi+6988]

; 145  : 	if( pOwner->IsNeedProcess() )

  00053	8b 06		 mov	 eax, DWORD PTR [esi]
  00055	8b ce		 mov	 ecx, esi
  00057	f3 0f 11 45 e0	 movss	 DWORD PTR _fOffset$[ebp], xmm0
  0005c	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]
  00062	84 c0		 test	 al, al
  00064	74 19		 je	 SHORT $LN4@OnEquiped

; 146  : 		fOffset += 50.0f;

  00066	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _fOffset$[ebp]
  0006b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0006e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4049000000000000
  00076	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0007a	f3 0f 11 45 e0	 movss	 DWORD PTR _fOffset$[ebp], xmm0
$LN4@OnEquiped:

; 147  : 	
; 148  : 	if( !m_GatherMeteoEffect.IsEmpty() )

  0007f	8d 8f 34 1b 00
	00		 lea	 ecx, DWORD PTR [edi+6964]
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0008b	84 c0		 test	 al, al
  0008d	0f 85 a5 00 00
	00		 jne	 $LN15@OnEquiped

; 149  : 	{
; 150  : 		ioPlayStage* pStage = pOwner->GetCreator();

  00093	8b 9e 44 03 00
	00		 mov	 ebx, DWORD PTR [esi+836]

; 151  : 		if( pStage )

  00099	85 db		 test	 ebx, ebx
  0009b	0f 84 97 00 00
	00		 je	 $LN15@OnEquiped

; 152  : 		{
; 153  : 			D3DXVECTOR3 vPos( pOwner->GetWorldPosition().x, pOwner->GetWorldPosition().y + fOffset, pOwner->GetWorldPosition().z );

  000a1	8b 06		 mov	 eax, DWORD PTR [esi]
  000a3	8b ce		 mov	 ecx, esi
  000a5	ff 50 70	 call	 DWORD PTR [eax+112]
  000a8	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000ac	8b 06		 mov	 eax, DWORD PTR [esi]
  000ae	8b ce		 mov	 ecx, esi
  000b0	f3 0f 11 45 dc	 movss	 DWORD PTR $T553690[ebp], xmm0
  000b5	ff 50 70	 call	 DWORD PTR [eax+112]
  000b8	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000bd	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _fOffset$[ebp]
  000c2	8b 06		 mov	 eax, DWORD PTR [esi]
  000c4	0f 5a c0	 cvtps2pd xmm0, xmm0
  000c7	0f 5a c9	 cvtps2pd xmm1, xmm1
  000ca	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000ce	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000d2	8b ce		 mov	 ecx, esi
  000d4	f3 0f 11 45 e0	 movss	 DWORD PTR $T553689[ebp], xmm0
  000d9	ff 50 70	 call	 DWORD PTR [eax+112]
  000dc	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000e1	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR $T553690[ebp]

; 154  : 			ioMapEffect* pMapEffect = pStage->CreateMapEffect( m_GatherMeteoEffect, vPos, D3DXVECTOR3( m_fCurrScaleRate, m_fCurrScaleRate, m_fCurrScaleRate ) );

  000e6	8d 45 f0	 lea	 eax, DWORD PTR $T549629[ebp]
  000e9	50		 push	 eax
  000ea	8d 45 e4	 lea	 eax, DWORD PTR _vPos$549627[ebp]
  000ed	50		 push	 eax
  000ee	8d 87 34 1b 00
	00		 lea	 eax, DWORD PTR [edi+6964]
  000f4	f3 0f 11 4d e4	 movss	 DWORD PTR _vPos$549627[ebp], xmm1
  000f9	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR $T553689[ebp]
  000fe	f3 0f 11 45 ec	 movss	 DWORD PTR _vPos$549627[ebp+8], xmm0
  00103	f3 0f 10 87 48
	1b 00 00	 movss	 xmm0, DWORD PTR [edi+6984]
  0010b	50		 push	 eax
  0010c	8b cb		 mov	 ecx, ebx
  0010e	f3 0f 11 4d e8	 movss	 DWORD PTR _vPos$549627[ebp+4], xmm1
  00113	f3 0f 11 45 f0	 movss	 DWORD PTR $T549629[ebp], xmm0
  00118	f3 0f 11 45 f4	 movss	 DWORD PTR $T549629[ebp+4], xmm0
  0011d	f3 0f 11 45 f8	 movss	 DWORD PTR $T549629[ebp+8], xmm0
  00122	e8 00 00 00 00	 call	 ?CreateMapEffect@ioPlayStage@@QAEPAVioMapEffect@@ABVioHashString@@ABUD3DXVECTOR3@@1@Z ; ioPlayStage::CreateMapEffect

; 155  : 			if( pMapEffect )

  00127	85 c0		 test	 eax, eax
  00129	74 0d		 je	 SHORT $LN15@OnEquiped

; 156  : 			{
; 157  : 				m_GatherMeteoEffectID = pMapEffect->GetUniqueID();

  0012b	8b c8		 mov	 ecx, eax
  0012d	e8 00 00 00 00	 call	 ?GetUniqueID@ioMapEffect@@QBEKXZ ; ioMapEffect::GetUniqueID
  00132	89 87 44 1b 00
	00		 mov	 DWORD PTR [edi+6980], eax
$LN15@OnEquiped:
  00138	5b		 pop	 ebx
$LN1@OnEquiped:

; 158  : 			}
; 159  : 		}
; 160  : 	}
; 161  : }

  00139	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013c	5f		 pop	 edi
  0013d	33 cd		 xor	 ecx, ebp
  0013f	5e		 pop	 esi
  00140	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00145	c9		 leave
  00146	c2 04 00	 ret	 4
?OnEquiped@ioGalaxyObjectItem@@UAEXPAVioBaseChar@@@Z ENDP ; ioGalaxyObjectItem::OnEquiped
_TEXT	ENDS
PUBLIC	?GetAttackAttribute@ioGalaxyObjectItem@@UBEPBUAttackAttribute@@W4AttackType@@H@Z ; ioGalaxyObjectItem::GetAttackAttribute
; Function compile flags: /Ogsp
;	COMDAT ?GetAttackAttribute@ioGalaxyObjectItem@@UBEPBUAttackAttribute@@W4AttackType@@H@Z
_TEXT	SEGMENT
_eType$ = 8						; size = 4
_iSubIdx$ = 12						; size = 4
?GetAttackAttribute@ioGalaxyObjectItem@@UBEPBUAttackAttribute@@W4AttackType@@H@Z PROC ; ioGalaxyObjectItem::GetAttackAttribute, COMDAT
; _this$ = ecx

; 182  : 	return GetCurrNoramlAttackAttribute();

  00000	e8 00 00 00 00	 call	 ?GetCurrNoramlAttackAttribute@ioGalaxyObjectItem@@QBEPBUAttackAttribute@@XZ ; ioGalaxyObjectItem::GetCurrNoramlAttackAttribute

; 183  : }

  00005	c2 08 00	 ret	 8
?GetAttackAttribute@ioGalaxyObjectItem@@UBEPBUAttackAttribute@@W4AttackType@@H@Z ENDP ; ioGalaxyObjectItem::GetAttackAttribute
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	eb 19		 jmp	 SHORT $LN35@Uninit_cop@2
$LL14@Uninit_cop@2:

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  00005	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00008	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000b	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>
  00013	83 45 10 0c	 add	 DWORD PTR __Dest$[ebp], 12 ; 0000000cH
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	83 45 08 0c	 add	 DWORD PTR __First$[ebp], 12 ; 0000000cH
$LN35@Uninit_cop@2:

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00021	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00024	75 df		 jne	 SHORT $LL14@Uninit_cop@2

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)
; 379  : 		_Dest_val(_Al, _Next);
; 380  : 	_RERAISE;
; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00026	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo const &>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ForceInfo> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z ; std::_Dest_val<std::allocator<WeaponInfo>,WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z PROC ; std::_Dest_val<std::allocator<WeaponInfo>,WeaponInfo>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	83 c1 08	 add	 ecx, 8

; 288  : 	}

  00009	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  0000a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z ENDP ; std::_Dest_val<std::allocator<WeaponInfo>,WeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@@Z ; std::_Uninitialized_copy<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$553818 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@@Z PROC ; std::_Uninitialized_copy<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$553818[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@@Z ENDP ; std::_Uninitialized_copy<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$3
__ehfuncinfo$??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 373  : 
; 374  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00016	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LL6@Uninit_cop@3:

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	74 37		 je	 SHORT $LN4@Uninit_cop@3

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  0001e	56		 push	 esi
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00025	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@AAU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@AAU2@@Z ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo &>
  0002a	83 45 10 28	 add	 DWORD PTR __Dest$[ebp], 40 ; 00000028H
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00031	83 c6 28	 add	 esi, 40			; 00000028H
  00034	eb e3		 jmp	 SHORT $LL6@Uninit_cop@3
__catch$??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00036	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00039	eb 0c		 jmp	 SHORT $LN32@Uninit_cop@3
$LL3@Uninit_cop@3:

; 379  : 		_Dest_val(_Al, _Next);

  0003b	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00044	83 c6 28	 add	 esi, 40			; 00000028H
$LN32@Uninit_cop@3:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00047	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  0004a	75 ef		 jne	 SHORT $LL3@Uninit_cop@3

; 380  : 	_RERAISE;

  0004c	6a 00		 push	 0
  0004e	6a 00		 push	 0
  00050	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN33@Uninit_cop@3:
$LN4@Uninit_cop@3:

; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00055	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00058	e8 00 00 00 00	 call	 __EH_epilog3
  0005d	c3		 ret	 0
$LN31@Uninit_cop@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$553886 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$553886[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$3
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 373  : 
; 374  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

$LL14@Uninit_cop@4:
  00016	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00019	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001c	74 34		 je	 SHORT $LN4@Uninit_cop@4

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  0001e	50		 push	 eax
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	e8 00 00 00 00	 call	 ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
  00027	83 45 10 28	 add	 DWORD PTR __Dest$[ebp], 40 ; 00000028H
  0002b	83 45 08 28	 add	 DWORD PTR __First$[ebp], 40 ; 00000028H
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
  00031	eb e3		 jmp	 SHORT $LL14@Uninit_cop@4
__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00033	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00036	eb 0c		 jmp	 SHORT $LN48@Uninit_cop@4
$LL3@Uninit_cop@4:

; 379  : 		_Dest_val(_Al, _Next);

  00038	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00041	83 c6 28	 add	 esi, 40			; 00000028H
$LN48@Uninit_cop@4:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00044	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00047	75 ef		 jne	 SHORT $LL3@Uninit_cop@4

; 380  : 	_RERAISE;

  00049	6a 00		 push	 0
  0004b	6a 00		 push	 0
  0004d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN49@Uninit_cop@4:
$LN4@Uninit_cop@4:

; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00052	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00055	e8 00 00 00 00	 call	 __EH_epilog3
  0005a	c3		 ret	 0
$LN47@Uninit_cop@4:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
PUBLIC	??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z ; std::_Destroy_range<std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ForceInfo> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<WeaponInfo> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0c		 jmp	 SHORT $LN20@Destroy_ra
$LL3@Destroy_ra:

; 97   : 		_Dest_val(_Al, _First);

  00009	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00012	83 c6 28	 add	 esi, 40			; 00000028H
$LN20@Destroy_ra:

; 96   : 	for (; _First != _Last; ++_First)

  00015	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00018	75 ef		 jne	 SHORT $LL3@Destroy_ra
  0001a	5e		 pop	 esi

; 98   : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAUForceInfo@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@PAU2@00@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<ForceInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAUForceInfo@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$554079 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUForceInfo@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@PAU2@00@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<ForceInfo *>, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$554079[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAUForceInfo@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@PAU2@00@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<ForceInfo *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Uninitialized_copy<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$554087 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@@Z PROC ; std::_Uninitialized_copy<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$554087[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@@Z ENDP ; std::_Uninitialized_copy<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$554100 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$554100[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > > >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$554110 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$554110[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z PROC ; std::_Destroy_range<std::allocator<WeaponInfo> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0c		 jmp	 SHORT $LN24@Destroy_ra@2
$LL7@Destroy_ra@2:
  00009	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00012	83 c6 28	 add	 esi, 40			; 00000028H
$LN24@Destroy_ra@2:
  00015	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00018	75 ef		 jne	 SHORT $LL7@Destroy_ra@2
  0001a	5e		 pop	 esi

; 89   : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	?erase@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@0@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::erase
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?erase@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$554310 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@0@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$554310[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ForceInfo *,ForceInfo *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@0@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::erase
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAUWeaponInfo@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@PAU2@00@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<WeaponInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@PAUWeaponInfo@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$554400 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUWeaponInfo@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@PAU2@00@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<WeaponInfo *>, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$554400[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAUWeaponInfo@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@PAU2@00@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<WeaponInfo *>
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$554414 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$554414[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > > >
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN21@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN21@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	?clear@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T554507 = -4						; size = 4
?clear@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T554507[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@0@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEXXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::clear
_TEXT	ENDS
PUBLIC	?erase@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@0@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$554634 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@0@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 03		 mov	 DWORD PTR [ebx], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 27		 je	 SHORT $LN1@erase@2

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00017	57		 push	 edi
  00018	ff 75 10	 push	 DWORD PTR __Cat$554634[ebp]
  0001b	50		 push	 eax
  0001c	51		 push	 ecx
  0001d	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  00020	e8 00 00 00 00	 call	 ??$_Move@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<WeaponInfo *,WeaponInfo *>
  00025	8b f8		 mov	 edi, eax

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00027	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0002a	50		 push	 eax
  0002b	ff 76 04	 push	 DWORD PTR [esi+4]
  0002e	57		 push	 edi
  0002f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
  00034	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1211 : 			this->_Mylast = _Ptr;

  00037	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  0003a	5f		 pop	 edi
$LN1@erase@2:

; 1212 : 			}
; 1213 : 		return (_First);

  0003b	5e		 pop	 esi
  0003c	8b c3		 mov	 eax, ebx
  0003e	5b		 pop	 ebx

; 1214 : 		}

  0003f	5d		 pop	 ebp
  00040	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@0@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::erase
_TEXT	ENDS
PUBLIC	??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$554721 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	6a 0c		 push	 12			; 0000000cH
  00025	59		 pop	 ecx
  00026	99		 cdq
  00027	f7 f9		 idiv	 ecx
  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy
  00031	84 c0		 test	 al, al
  00033	74 1f		 je	 SHORT $LN7@vector

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00035	ff 75 08	 push	 DWORD PTR __Cat$554721[ebp]
  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003d	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003f	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00042	52		 push	 edx
  00043	51		 push	 ecx
  00044	50		 push	 eax
  00045	57		 push	 edi
  00046	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00049	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
  0004e	83 c4 14	 add	 esp, 20			; 00000014H
  00051	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector:

; 543  : 			_CATCH_END
; 544  : 		}

  00054	8b c6		 mov	 eax, esi
  00056	e8 00 00 00 00	 call	 __EH_epilog3
  0005b	c2 04 00	 ret	 4
__catch$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy

; 542  : 			_RERAISE;

  00066	33 db		 xor	 ebx, ebx
  00068	53		 push	 ebx
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector:
$LN37@vector:
  0006f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
PUBLIC	??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 1e		 je	 SHORT $LN6@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0000e	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00011	50		 push	 eax
  00012	ff 76 04	 push	 DWORD PTR [esi+4]
  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0001c	ff 36		 push	 DWORD PTR [esi]
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00023	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00026	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00029	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0002d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00031	5e		 pop	 esi

; 1312 : 		}

  00032	c3		 ret	 0
?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	??4?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
tv551 = 8						; size = 4
__Cat$555080 = 8					; size = 1
__Cat$554978 = 8					; size = 1
__Cat$554955 = 8					; size = 1
__Cat$554857 = 8					; size = 1
$T554824 = 8						; size = 4
__Right$ = 8						; size = 4
??4?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::operator=, COMDAT
; _this$ = ecx

; 709  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 710  : 		if (this != &_Right)

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	0f 84 e2 00 00
	00		 je	 $LN1@operator

; 711  : 			{	// worth doing
; 712  : 			this->_Orphan_all();

  00012	53		 push	 ebx
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 713  : 
; 714  : 			if (_Right.size() == 0)

  00019	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  0001c	8b c3		 mov	 eax, ebx
  0001e	2b 07		 sub	 eax, DWORD PTR [edi]
  00020	6a 0c		 push	 12			; 0000000cH
  00022	99		 cdq
  00023	59		 pop	 ecx
  00024	f7 f9		 idiv	 ecx
  00026	89 45 08	 mov	 DWORD PTR tv551[ebp], eax
  00029	85 c0		 test	 eax, eax

; 715  : 				clear();	// new sequence empty, erase existing sequence

  0002b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002e	75 14		 jne	 SHORT $LN8@operator
  00030	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00032	50		 push	 eax
  00033	51		 push	 ecx
  00034	8d 45 08	 lea	 eax, DWORD PTR $T554824[ebp]
  00037	50		 push	 eax
  00038	8b ce		 mov	 ecx, esi
  0003a	e8 00 00 00 00	 call	 ?erase@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@0@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::erase

; 716  : 			else if (_Right.size() <= size())

  0003f	e9 af 00 00 00	 jmp	 $LN106@operator
$LN8@operator:
  00044	2b 06		 sub	 eax, DWORD PTR [esi]
  00046	6a 0c		 push	 12			; 0000000cH
  00048	99		 cdq
  00049	59		 pop	 ecx
  0004a	f7 f9		 idiv	 ecx
  0004c	8b c8		 mov	 ecx, eax
  0004e	39 4d 08	 cmp	 DWORD PTR tv551[ebp], ecx
  00051	77 22		 ja	 SHORT $LN6@operator

; 717  : 				{	// enough elements, copy new and destroy old
; 718  : 				pointer _Ptr = _STD _Copy_impl(_Right._Myfirst, _Right._Mylast,
; 719  : 					this->_Myfirst);	// copy new

  00053	ff 75 08	 push	 DWORD PTR __Cat$554857[ebp]
  00056	ff 36		 push	 DWORD PTR [esi]
  00058	53		 push	 ebx
  00059	ff 37		 push	 DWORD PTR [edi]
  0005b	e8 00 00 00 00	 call	 ??$_Copy_impl@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<ForceInfo *,ForceInfo *>

; 720  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 721  : 				this->_Mylast = this->_Myfirst + _Right.size();

  00060	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00063	2b 07		 sub	 eax, DWORD PTR [edi]
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	99		 cdq
  00069	6a 0c		 push	 12			; 0000000cH
  0006b	59		 pop	 ecx
  0006c	f7 f9		 idiv	 ecx
  0006e	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00071	03 06		 add	 eax, DWORD PTR [esi]

; 722  : 				}
; 723  : 			else if (_Right.size() <= capacity())

  00073	eb 7b		 jmp	 SHORT $LN107@operator
$LN6@operator:
  00075	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00078	2b 06		 sub	 eax, DWORD PTR [esi]
  0007a	6a 0c		 push	 12			; 0000000cH
  0007c	99		 cdq
  0007d	5b		 pop	 ebx
  0007e	f7 fb		 idiv	 ebx
  00080	39 45 08	 cmp	 DWORD PTR tv551[ebp], eax
  00083	77 2e		 ja	 SHORT $LN4@operator

; 724  : 				{	// enough room, copy and construct new
; 725  : 				pointer _Ptr = _Right._Myfirst + size();
; 726  : 				_STD _Copy_impl(_Right._Myfirst, _Ptr, this->_Myfirst);

  00085	ff 75 08	 push	 DWORD PTR __Cat$554955[ebp]
  00088	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0008b	8b 07		 mov	 eax, DWORD PTR [edi]
  0008d	ff 36		 push	 DWORD PTR [esi]
  0008f	8d 1c 08	 lea	 ebx, DWORD PTR [eax+ecx]
  00092	53		 push	 ebx
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ??$_Copy_impl@PAUForceInfo@@PAU1@@std@@YAPAUForceInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<ForceInfo *,ForceInfo *>

; 727  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);

  00099	ff 75 08	 push	 DWORD PTR __Cat$554978[ebp]
  0009c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009f	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  000a2	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  000a5	51		 push	 ecx
  000a6	50		 push	 eax
  000a7	57		 push	 edi
  000a8	53		 push	 ebx
  000a9	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >
  000ae	83 c4 24	 add	 esp, 36			; 00000024H

; 728  : 				}
; 729  : 			else

  000b1	eb 3d		 jmp	 SHORT $LN107@operator
$LN4@operator:

; 730  : 				{	// not enough room, allocate new array and construct new
; 731  : 				if (this->_Myfirst != 0)

  000b3	8b 06		 mov	 eax, DWORD PTR [esi]
  000b5	85 c0		 test	 eax, eax
  000b7	74 07		 je	 SHORT $LN92@operator

; 732  : 					{	// discard old array
; 733  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 734  : 					this->_Alval.deallocate(this->_Myfirst,
; 735  : 						this->_Myend - this->_Myfirst);

  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000bf	59		 pop	 ecx
$LN92@operator:

; 736  : 					}
; 737  : 				if (_Buy(_Right.size()))

  000c0	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000c3	2b 07		 sub	 eax, DWORD PTR [edi]
  000c5	6a 0c		 push	 12			; 0000000cH
  000c7	59		 pop	 ecx
  000c8	99		 cdq
  000c9	f7 f9		 idiv	 ecx
  000cb	8b ce		 mov	 ecx, esi
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy
  000d3	84 c0		 test	 al, al
  000d5	74 1c		 je	 SHORT $LN106@operator

; 738  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 739  : 						this->_Myfirst);

  000d7	ff 75 08	 push	 DWORD PTR __Cat$555080[ebp]
  000da	8b 06		 mov	 eax, DWORD PTR [esi]
  000dc	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000df	8b 3f		 mov	 edi, DWORD PTR [edi]
  000e1	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  000e4	52		 push	 edx
  000e5	50		 push	 eax
  000e6	51		 push	 ecx
  000e7	57		 push	 edi
  000e8	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUForceInfo@@PAU1@V?$allocator@UForceInfo@@@std@@@std@@YAPAUForceInfo@@PAU1@00AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<ForceInfo *,ForceInfo *,std::allocator<ForceInfo> >
  000ed	83 c4 14	 add	 esp, 20			; 00000014H
$LN107@operator:
  000f0	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN106@operator:
  000f3	5b		 pop	 ebx
$LN1@operator:
  000f4	5f		 pop	 edi

; 740  : 				}
; 741  : 			}
; 742  : 		return (*this);

  000f5	8b c6		 mov	 eax, esi
  000f7	5e		 pop	 esi

; 743  : 		}

  000f8	5d		 pop	 ebp
  000f9	c2 04 00	 ret	 4
??4?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::operator=
_TEXT	ENDS
PUBLIC	?clear@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T555098 = -4						; size = 4
?clear@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T555098[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@0@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEXXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::clear
_TEXT	ENDS
PUBLIC	??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$555227 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	6a 28		 push	 40			; 00000028H
  00025	59		 pop	 ecx
  00026	99		 cdq
  00027	f7 f9		 idiv	 ecx
  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy
  00031	84 c0		 test	 al, al
  00033	74 1f		 je	 SHORT $LN7@vector@2

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00035	ff 75 08	 push	 DWORD PTR __Cat$555227[ebp]
  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003d	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003f	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00042	52		 push	 edx
  00043	51		 push	 ecx
  00044	50		 push	 eax
  00045	57		 push	 edi
  00046	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00049	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
  0004e	83 c4 14	 add	 esp, 20			; 00000014H
  00051	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector@2:

; 543  : 			_CATCH_END
; 544  : 		}

  00054	8b c6		 mov	 eax, esi
  00056	e8 00 00 00 00	 call	 __EH_epilog3
  0005b	c2 04 00	 ret	 4
__catch$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy

; 542  : 			_RERAISE;

  00066	33 db		 xor	 ebx, ebx
  00068	53		 push	 ebx
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector@2:
$LN37@vector@2:
  0006f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
PUBLIC	??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??4?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
tv551 = 8						; size = 4
__Cat$555442 = 8					; size = 1
__Cat$555405 = 8					; size = 1
__Cat$555383 = 8					; size = 1
__Cat$555351 = 8					; size = 1
$T555317 = 8						; size = 4
__Right$ = 8						; size = 4
??4?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::operator=, COMDAT
; _this$ = ecx

; 709  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 710  : 		if (this != &_Right)

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	0f 84 03 01 00
	00		 je	 $LN1@operator@2

; 711  : 			{	// worth doing
; 712  : 			this->_Orphan_all();

  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 713  : 
; 714  : 			if (_Right.size() == 0)

  00018	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001b	2b 07		 sub	 eax, DWORD PTR [edi]
  0001d	6a 28		 push	 40			; 00000028H
  0001f	99		 cdq
  00020	59		 pop	 ecx
  00021	f7 f9		 idiv	 ecx
  00023	89 45 08	 mov	 DWORD PTR tv551[ebp], eax
  00026	85 c0		 test	 eax, eax

; 715  : 				clear();	// new sequence empty, erase existing sequence

  00028	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002b	75 14		 jne	 SHORT $LN8@operator@2
  0002d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002f	50		 push	 eax
  00030	51		 push	 ecx
  00031	8d 45 08	 lea	 eax, DWORD PTR $T555317[ebp]
  00034	50		 push	 eax
  00035	8b ce		 mov	 ecx, esi
  00037	e8 00 00 00 00	 call	 ?erase@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@0@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::erase

; 716  : 			else if (_Right.size() <= size())

  0003c	e9 d4 00 00 00	 jmp	 $LN1@operator@2
$LN8@operator@2:
  00041	53		 push	 ebx
  00042	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00044	2b c3		 sub	 eax, ebx
  00046	6a 28		 push	 40			; 00000028H
  00048	99		 cdq
  00049	59		 pop	 ecx
  0004a	f7 f9		 idiv	 ecx
  0004c	8b c8		 mov	 ecx, eax
  0004e	39 4d 08	 cmp	 DWORD PTR tv551[ebp], ecx
  00051	77 33		 ja	 SHORT $LN6@operator@2

; 717  : 				{	// enough elements, copy new and destroy old
; 718  : 				pointer _Ptr = _STD _Copy_impl(_Right._Myfirst, _Right._Mylast,
; 719  : 					this->_Myfirst);	// copy new

  00053	ff 75 08	 push	 DWORD PTR __Cat$555351[ebp]
  00056	53		 push	 ebx
  00057	ff 77 04	 push	 DWORD PTR [edi+4]
  0005a	ff 37		 push	 DWORD PTR [edi]
  0005c	e8 00 00 00 00	 call	 ??$_Copy_impl@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<WeaponInfo *,WeaponInfo *>

; 720  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old

  00061	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00064	51		 push	 ecx
  00065	ff 76 04	 push	 DWORD PTR [esi+4]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >

; 721  : 				this->_Mylast = this->_Myfirst + _Right.size();

  0006e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00071	2b 07		 sub	 eax, DWORD PTR [edi]
  00073	83 c4 1c	 add	 esp, 28			; 0000001cH
  00076	99		 cdq
  00077	6a 28		 push	 40			; 00000028H
  00079	59		 pop	 ecx
  0007a	f7 f9		 idiv	 ecx
  0007c	6b c0 28	 imul	 eax, 40			; 00000028H
  0007f	03 06		 add	 eax, DWORD PTR [esi]

; 722  : 				}
; 723  : 			else if (_Right.size() <= capacity())

  00081	e9 8b 00 00 00	 jmp	 $LN73@operator@2
$LN6@operator@2:
  00086	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00089	2b c3		 sub	 eax, ebx
  0008b	6a 28		 push	 40			; 00000028H
  0008d	99		 cdq
  0008e	5b		 pop	 ebx
  0008f	f7 fb		 idiv	 ebx
  00091	39 45 08	 cmp	 DWORD PTR tv551[ebp], eax
  00094	77 2e		 ja	 SHORT $LN4@operator@2

; 724  : 				{	// enough room, copy and construct new
; 725  : 				pointer _Ptr = _Right._Myfirst + size();
; 726  : 				_STD _Copy_impl(_Right._Myfirst, _Ptr, this->_Myfirst);

  00096	ff 75 08	 push	 DWORD PTR __Cat$555383[ebp]
  00099	6b c9 28	 imul	 ecx, 40			; 00000028H
  0009c	8b 07		 mov	 eax, DWORD PTR [edi]
  0009e	ff 36		 push	 DWORD PTR [esi]
  000a0	8d 1c 08	 lea	 ebx, DWORD PTR [eax+ecx]
  000a3	53		 push	 ebx
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ??$_Copy_impl@PAUWeaponInfo@@PAU1@@std@@YAPAUWeaponInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<WeaponInfo *,WeaponInfo *>

; 727  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);

  000aa	ff 75 08	 push	 DWORD PTR __Cat$555405[ebp]
  000ad	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b0	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  000b3	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  000b6	51		 push	 ecx
  000b7	50		 push	 eax
  000b8	57		 push	 edi
  000b9	53		 push	 ebx
  000ba	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >
  000bf	83 c4 24	 add	 esp, 36			; 00000024H

; 728  : 				}
; 729  : 			else

  000c2	eb 4d		 jmp	 SHORT $LN73@operator@2
$LN4@operator@2:

; 730  : 				{	// not enough room, allocate new array and construct new
; 731  : 				if (this->_Myfirst != 0)

  000c4	8b 06		 mov	 eax, DWORD PTR [esi]
  000c6	85 c0		 test	 eax, eax
  000c8	74 17		 je	 SHORT $LN62@operator@2

; 732  : 					{	// discard old array
; 733  : 					_Destroy(this->_Myfirst, this->_Mylast);

  000ca	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  000cd	51		 push	 ecx
  000ce	ff 76 04	 push	 DWORD PTR [esi+4]
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >

; 734  : 					this->_Alval.deallocate(this->_Myfirst,
; 735  : 						this->_Myend - this->_Myfirst);

  000d7	ff 36		 push	 DWORD PTR [esi]
  000d9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000de	83 c4 10	 add	 esp, 16			; 00000010H
$LN62@operator@2:

; 736  : 					}
; 737  : 				if (_Buy(_Right.size()))

  000e1	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000e4	2b 07		 sub	 eax, DWORD PTR [edi]
  000e6	6a 28		 push	 40			; 00000028H
  000e8	59		 pop	 ecx
  000e9	99		 cdq
  000ea	f7 f9		 idiv	 ecx
  000ec	8b ce		 mov	 ecx, esi
  000ee	50		 push	 eax
  000ef	e8 00 00 00 00	 call	 ?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy
  000f4	84 c0		 test	 al, al
  000f6	74 1c		 je	 SHORT $LN72@operator@2

; 738  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 739  : 						this->_Myfirst);

  000f8	ff 75 08	 push	 DWORD PTR __Cat$555442[ebp]
  000fb	8b 06		 mov	 eax, DWORD PTR [esi]
  000fd	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00100	8b 3f		 mov	 edi, DWORD PTR [edi]
  00102	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00105	52		 push	 edx
  00106	50		 push	 eax
  00107	51		 push	 ecx
  00108	57		 push	 edi
  00109	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUWeaponInfo@@PAU1@V?$allocator@UWeaponInfo@@@std@@@std@@YAPAUWeaponInfo@@PAU1@00AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<WeaponInfo *,WeaponInfo *,std::allocator<WeaponInfo> >
  0010e	83 c4 14	 add	 esp, 20			; 00000014H
$LN73@operator@2:
  00111	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN72@operator@2:
  00114	5b		 pop	 ebx
$LN1@operator@2:
  00115	5f		 pop	 edi

; 740  : 				}
; 741  : 			}
; 742  : 		return (*this);

  00116	8b c6		 mov	 eax, esi
  00118	5e		 pop	 esi

; 743  : 		}

  00119	5d		 pop	 ebp
  0011a	c2 04 00	 ret	 4
??4?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::operator=
_TEXT	ENDS
PUBLIC	??0AttackAttribute@@QAE@ABU0@@Z			; AttackAttribute::AttackAttribute
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0AttackAttribute@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$2
__ehfuncinfo$??0AttackAttribute@@QAE@ABU0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0AttackAttribute@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0AttackAttribute@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0AttackAttribute@@QAE@ABU0@@Z PROC			; AttackAttribute::AttackAttribute, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0AttackAttribute@@QAE@ABU0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00014	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  0001a	57		 push	 edi
  0001b	ff d3		 call	 ebx
  0001d	d9 47 10	 fld	 DWORD PTR [edi+16]
  00020	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00024	d9 5e 10	 fstp	 DWORD PTR [esi+16]
  00027	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  0002a	50		 push	 eax
  0002b	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0002e	ff d3		 call	 ebx
  00030	d9 47 24	 fld	 DWORD PTR [edi+36]
  00033	8d 47 28	 lea	 eax, DWORD PTR [edi+40]
  00036	d9 5e 24	 fstp	 DWORD PTR [esi+36]
  00039	50		 push	 eax
  0003a	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  0003d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00041	e8 00 00 00 00	 call	 ??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
  00046	8d 47 38	 lea	 eax, DWORD PTR [edi+56]
  00049	50		 push	 eax
  0004a	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  0004d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00051	e8 00 00 00 00	 call	 ??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
  00056	8b 47 48	 mov	 eax, DWORD PTR [edi+72]
  00059	89 46 48	 mov	 DWORD PTR [esi+72], eax
  0005c	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  0005f	89 46 4c	 mov	 DWORD PTR [esi+76], eax
  00062	8b c6		 mov	 eax, esi
  00064	e8 00 00 00 00	 call	 __EH_epilog3
  00069	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 28	 add	 ecx, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
__ehhandler$??0AttackAttribute@@QAE@ABU0@@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0AttackAttribute@@QAE@ABU0@@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0AttackAttribute@@QAE@ABU0@@Z ENDP			; AttackAttribute::AttackAttribute
PUBLIC	??0AttackAttribute@@QAE@XZ			; AttackAttribute::AttackAttribute
EXTRN	?Init@AttackAttribute@@QAEXXZ:PROC		; AttackAttribute::Init
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0AttackAttribute@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$3
__ehfuncinfo$??0AttackAttribute@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0AttackAttribute@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.h
xdata$x	ENDS
;	COMDAT ??0AttackAttribute@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0AttackAttribute@@QAE@XZ PROC				; AttackAttribute::AttackAttribute, COMDAT
; _this$ = ecx

; 107  : 	AttackAttribute()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0AttackAttribute@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	ff d7		 call	 edi
  00019	33 db		 xor	 ebx, ebx
  0001b	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0001e	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00021	ff d7		 call	 edi
  00023	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00026	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00029	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
  0002c	89 5e 38	 mov	 DWORD PTR [esi+56], ebx
  0002f	89 5e 3c	 mov	 DWORD PTR [esi+60], ebx
  00032	89 5e 40	 mov	 DWORD PTR [esi+64], ebx

; 108  : 	{
; 109  : 		Init();

  00035	8b ce		 mov	 ecx, esi
  00037	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0003b	e8 00 00 00 00	 call	 ?Init@AttackAttribute@@QAEXXZ ; AttackAttribute::Init

; 110  : 	}

  00040	8b c6		 mov	 eax, esi
  00042	e8 00 00 00 00	 call	 __EH_epilog3
  00047	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AttackAttribute@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@XZ$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 28	 add	 ecx, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
__unwindfunclet$??0AttackAttribute@@QAE@XZ$3:
  00020	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	83 c1 38	 add	 ecx, 56			; 00000038H
  00026	e9 00 00 00 00	 jmp	 ??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >
__ehhandler$??0AttackAttribute@@QAE@XZ:
  0002b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00032	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0AttackAttribute@@QAE@XZ
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0AttackAttribute@@QAE@XZ ENDP				; AttackAttribute::AttackAttribute
PUBLIC	??1AttackAttribute@@QAE@XZ			; AttackAttribute::~AttackAttribute
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1AttackAttribute@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1AttackAttribute@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1AttackAttribute@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1AttackAttribute@@QAE@XZ$2
__ehfuncinfo$??1AttackAttribute@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1AttackAttribute@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1AttackAttribute@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1AttackAttribute@@QAE@XZ PROC				; AttackAttribute::~AttackAttribute, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1AttackAttribute@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  00014	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0001b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
  00020	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00023	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00027	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
  0002c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00032	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00035	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00039	ff d7		 call	 edi
  0003b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0003f	8b ce		 mov	 ecx, esi
  00041	ff d7		 call	 edi
  00043	e8 00 00 00 00	 call	 __EH_epilog3
  00048	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1AttackAttribute@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1AttackAttribute@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1AttackAttribute@@QAE@XZ$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 28	 add	 ecx, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
__ehhandler$??1AttackAttribute@@QAE@XZ:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1AttackAttribute@@QAE@XZ
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1AttackAttribute@@QAE@XZ ENDP				; AttackAttribute::~AttackAttribute
PUBLIC	??4AttackAttribute@@QAEAAU0@ABU0@@Z		; AttackAttribute::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4AttackAttribute@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4AttackAttribute@@QAEAAU0@ABU0@@Z PROC		; AttackAttribute::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  0000f	57		 push	 edi
  00010	8b f1		 mov	 esi, ecx
  00012	ff d3		 call	 ebx
  00014	d9 47 10	 fld	 DWORD PTR [edi+16]
  00017	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  0001a	d9 5e 10	 fstp	 DWORD PTR [esi+16]
  0001d	50		 push	 eax
  0001e	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00021	ff d3		 call	 ebx
  00023	d9 47 24	 fld	 DWORD PTR [edi+36]
  00026	8d 47 28	 lea	 eax, DWORD PTR [edi+40]
  00029	d9 5e 24	 fstp	 DWORD PTR [esi+36]
  0002c	50		 push	 eax
  0002d	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00030	e8 00 00 00 00	 call	 ??4?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::operator=
  00035	8d 47 38	 lea	 eax, DWORD PTR [edi+56]
  00038	50		 push	 eax
  00039	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  0003c	e8 00 00 00 00	 call	 ??4?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::operator=
  00041	8b 47 48	 mov	 eax, DWORD PTR [edi+72]
  00044	89 46 48	 mov	 DWORD PTR [esi+72], eax
  00047	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  0004a	89 46 4c	 mov	 DWORD PTR [esi+76], eax
  0004d	5f		 pop	 edi
  0004e	8b c6		 mov	 eax, esi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
??4AttackAttribute@@QAEAAU0@ABU0@@Z ENDP		; AttackAttribute::operator=
_TEXT	ENDS
PUBLIC	??0GalaxyAttack@ioGalaxyObjectItem@@QAE@XZ	; ioGalaxyObjectItem::GalaxyAttack::GalaxyAttack
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogalaxyobjectitem.h
xdata$x	SEGMENT
__unwindtable$??0GalaxyAttack@ioGalaxyObjectItem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0GalaxyAttack@ioGalaxyObjectItem@@QAE@XZ$0
__ehfuncinfo$??0GalaxyAttack@ioGalaxyObjectItem@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0GalaxyAttack@ioGalaxyObjectItem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0GalaxyAttack@ioGalaxyObjectItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0GalaxyAttack@ioGalaxyObjectItem@@QAE@XZ PROC		; ioGalaxyObjectItem::GalaxyAttack::GalaxyAttack, COMDAT
; _this$ = ecx

; 22   : 		GalaxyAttack()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0GalaxyAttack@ioGalaxyObjectItem@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0AttackAttribute@@QAE@XZ ; AttackAttribute::AttackAttribute
  00016	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 23   : 		{
; 24   : 			m_Attribute.Init();

  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 ?Init@AttackAttribute@@QAEXXZ ; AttackAttribute::Init

; 25   : 			m_iRangeMin	= 0;

  00021	83 66 50 00	 and	 DWORD PTR [esi+80], 0

; 26   : 			m_iRangeMax	= 0;

  00025	83 66 54 00	 and	 DWORD PTR [esi+84], 0

; 27   : 		}

  00029	8b c6		 mov	 eax, esi
  0002b	e8 00 00 00 00	 call	 __EH_epilog3
  00030	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0GalaxyAttack@ioGalaxyObjectItem@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__ehhandler$??0GalaxyAttack@ioGalaxyObjectItem@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0GalaxyAttack@ioGalaxyObjectItem@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0GalaxyAttack@ioGalaxyObjectItem@@QAE@XZ ENDP		; ioGalaxyObjectItem::GalaxyAttack::GalaxyAttack
PUBLIC	??1GalaxyAttack@ioGalaxyObjectItem@@QAE@XZ	; ioGalaxyObjectItem::GalaxyAttack::~GalaxyAttack
; Function compile flags: /Ogsp
;	COMDAT ??1GalaxyAttack@ioGalaxyObjectItem@@QAE@XZ
_TEXT	SEGMENT
??1GalaxyAttack@ioGalaxyObjectItem@@QAE@XZ PROC		; ioGalaxyObjectItem::GalaxyAttack::~GalaxyAttack, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
??1GalaxyAttack@ioGalaxyObjectItem@@QAE@XZ ENDP		; ioGalaxyObjectItem::GalaxyAttack::~GalaxyAttack
_TEXT	ENDS
PUBLIC	??0GalaxyAttack@ioGalaxyObjectItem@@QAE@ABU01@@Z ; ioGalaxyObjectItem::GalaxyAttack::GalaxyAttack
; Function compile flags: /Ogsp
;	COMDAT ??0GalaxyAttack@ioGalaxyObjectItem@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0GalaxyAttack@ioGalaxyObjectItem@@QAE@ABU01@@Z PROC	; ioGalaxyObjectItem::GalaxyAttack::GalaxyAttack, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??0AttackAttribute@@QAE@ABU0@@Z
  00010	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
  00013	89 46 50	 mov	 DWORD PTR [esi+80], eax
  00016	8b 47 54	 mov	 eax, DWORD PTR [edi+84]
  00019	89 46 54	 mov	 DWORD PTR [esi+84], eax
  0001c	5f		 pop	 edi
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0GalaxyAttack@ioGalaxyObjectItem@@QAE@ABU01@@Z ENDP	; ioGalaxyObjectItem::GalaxyAttack::GalaxyAttack
_TEXT	ENDS
PUBLIC	??4GalaxyAttack@ioGalaxyObjectItem@@QAEAAU01@ABU01@@Z ; ioGalaxyObjectItem::GalaxyAttack::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4GalaxyAttack@ioGalaxyObjectItem@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4GalaxyAttack@ioGalaxyObjectItem@@QAEAAU01@ABU01@@Z PROC ; ioGalaxyObjectItem::GalaxyAttack::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??4AttackAttribute@@QAEAAU0@ABU0@@Z
  00010	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
  00013	89 46 50	 mov	 DWORD PTR [esi+80], eax
  00016	8b 47 54	 mov	 eax, DWORD PTR [edi+84]
  00019	89 46 54	 mov	 DWORD PTR [esi+84], eax
  0001c	5f		 pop	 edi
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??4GalaxyAttack@ioGalaxyObjectItem@@QAEAAU01@ABU01@@Z ENDP ; ioGalaxyObjectItem::GalaxyAttack::operator=
_TEXT	ENDS
PUBLIC	??_GGalaxyAttack@ioGalaxyObjectItem@@QAEPAXI@Z	; ioGalaxyObjectItem::GalaxyAttack::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GGalaxyAttack@ioGalaxyObjectItem@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GGalaxyAttack@ioGalaxyObjectItem@@QAEPAXI@Z PROC	; ioGalaxyObjectItem::GalaxyAttack::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@3
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@3:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GGalaxyAttack@ioGalaxyObjectItem@@QAEPAXI@Z ENDP	; ioGalaxyObjectItem::GalaxyAttack::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU34@@Z ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::construct
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU34@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU34@@Z$0
__ehfuncinfo$?construct@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU34@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU34@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU34@@Z
_TEXT	SEGMENT
$T555581 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU34@@Z PROC ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?construct@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU34@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T555581[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct@4
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0GalaxyAttack@ioGalaxyObjectItem@@QAE@ABU01@@Z
$LN3@construct@4:

; 203  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU34@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T555581[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$?construct@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU34@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU34@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU34@@Z ENDP ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::construct
PUBLIC	??$construct@AAUGalaxyAttack@ioGalaxyObjectItem@@@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::construct<ioGalaxyObjectItem::GalaxyAttack &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$construct@AAUGalaxyAttack@ioGalaxyObjectItem@@@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAUGalaxyAttack@ioGalaxyObjectItem@@@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z$0
__ehfuncinfo$??$construct@AAUGalaxyAttack@ioGalaxyObjectItem@@@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAUGalaxyAttack@ioGalaxyObjectItem@@@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@AAUGalaxyAttack@ioGalaxyObjectItem@@@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z
_TEXT	SEGMENT
$T555600 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUGalaxyAttack@ioGalaxyObjectItem@@@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z PROC ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::construct<ioGalaxyObjectItem::GalaxyAttack &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$construct@AAUGalaxyAttack@ioGalaxyObjectItem@@@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T555600[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct@5
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0GalaxyAttack@ioGalaxyObjectItem@@QAE@ABU01@@Z
$LN3@construct@5:

; 209  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAUGalaxyAttack@ioGalaxyObjectItem@@@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T555600[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$construct@AAUGalaxyAttack@ioGalaxyObjectItem@@@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAUGalaxyAttack@ioGalaxyObjectItem@@@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAUGalaxyAttack@ioGalaxyObjectItem@@@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z ENDP ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::construct<ioGalaxyObjectItem::GalaxyAttack &>
PUBLIC	??$_Move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioGalaxyObjectItem::GalaxyAttack *,ioGalaxyObjectItem::GalaxyAttack *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<ioGalaxyObjectItem::GalaxyAttack *,ioGalaxyObjectItem::GalaxyAttack *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 10		 jmp	 SHORT $LN11@Move@3
$LL3@Move@3:

; 2514 : 		*_Dest = _STD move(*_First);

  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ??4GalaxyAttack@ioGalaxyObjectItem@@QAEAAU01@ABU01@@Z
  00012	83 45 10 58	 add	 DWORD PTR __Dest$[ebp], 88 ; 00000058H
  00016	83 c6 58	 add	 esi, 88			; 00000058H
$LN11@Move@3:

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	75 eb		 jne	 SHORT $LL3@Move@3

; 2515 : 	return (_Dest);

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00021	5e		 pop	 esi

; 2516 : 	}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<ioGalaxyObjectItem::GalaxyAttack *,ioGalaxyObjectItem::GalaxyAttack *>
_TEXT	ENDS
PUBLIC	??$_Construct@UGalaxyAttack@ioGalaxyObjectItem@@ABU12@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@ABU12@@Z ; std::_Construct<ioGalaxyObjectItem::GalaxyAttack,ioGalaxyObjectItem::GalaxyAttack const &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@UGalaxyAttack@ioGalaxyObjectItem@@ABU12@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@ABU12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UGalaxyAttack@ioGalaxyObjectItem@@ABU12@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@ABU12@@Z$0
__ehfuncinfo$??$_Construct@UGalaxyAttack@ioGalaxyObjectItem@@ABU12@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@ABU12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UGalaxyAttack@ioGalaxyObjectItem@@ABU12@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@ABU12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UGalaxyAttack@ioGalaxyObjectItem@@ABU12@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@ABU12@@Z
_TEXT	SEGMENT
$T555628 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UGalaxyAttack@ioGalaxyObjectItem@@ABU12@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@ABU12@@Z PROC ; std::_Construct<ioGalaxyObjectItem::GalaxyAttack,ioGalaxyObjectItem::GalaxyAttack const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@UGalaxyAttack@ioGalaxyObjectItem@@ABU12@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@ABU12@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T555628[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 08		 je	 SHORT $LN3@Construct@3
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	e8 00 00 00 00	 call	 ??0GalaxyAttack@ioGalaxyObjectItem@@QAE@ABU01@@Z
$LN3@Construct@3:

; 49   : 	}

  00025	e8 00 00 00 00	 call	 __EH_epilog3
  0002a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UGalaxyAttack@ioGalaxyObjectItem@@ABU12@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@ABU12@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T555628[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@UGalaxyAttack@ioGalaxyObjectItem@@ABU12@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@ABU12@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UGalaxyAttack@ioGalaxyObjectItem@@ABU12@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@ABU12@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UGalaxyAttack@ioGalaxyObjectItem@@ABU12@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@ABU12@@Z ENDP ; std::_Construct<ioGalaxyObjectItem::GalaxyAttack,ioGalaxyObjectItem::GalaxyAttack const &>
PUBLIC	??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@U34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU23@@Z ; std::_Cons_val<std::allocator<ioGalaxyObjectItem::GalaxyAttack>,ioGalaxyObjectItem::GalaxyAttack,ioGalaxyObjectItem::GalaxyAttack>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@U34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@U34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU23@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@U34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@U34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@U34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU23@@Z
_TEXT	SEGMENT
$T555664 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@U34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU23@@Z PROC ; std::_Cons_val<std::allocator<ioGalaxyObjectItem::GalaxyAttack>,ioGalaxyObjectItem::GalaxyAttack,ioGalaxyObjectItem::GalaxyAttack>, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@U34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU23@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T555664[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val@4
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0GalaxyAttack@ioGalaxyObjectItem@@QAE@ABU01@@Z
$LN7@Cons_val@4:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@U34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU23@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T555664[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@U34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU23@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@U34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU23@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@U34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU23@@Z ENDP ; std::_Cons_val<std::allocator<ioGalaxyObjectItem::GalaxyAttack>,ioGalaxyObjectItem::GalaxyAttack,ioGalaxyObjectItem::GalaxyAttack>
PUBLIC	??$_Destroy@UGalaxyAttack@ioGalaxyObjectItem@@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@@Z ; std::_Destroy<ioGalaxyObjectItem::GalaxyAttack>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@UGalaxyAttack@ioGalaxyObjectItem@@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UGalaxyAttack@ioGalaxyObjectItem@@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@@Z PROC ; std::_Destroy<ioGalaxyObjectItem::GalaxyAttack>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 64   : 	}

  00006	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  00007	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
??$_Destroy@UGalaxyAttack@ioGalaxyObjectItem@@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@@Z ENDP ; std::_Destroy<ioGalaxyObjectItem::GalaxyAttack>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@AAU34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z ; std::_Cons_val<std::allocator<ioGalaxyObjectItem::GalaxyAttack>,ioGalaxyObjectItem::GalaxyAttack,ioGalaxyObjectItem::GalaxyAttack &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@AAU34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@AAU34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@AAU34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@AAU34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@AAU34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z
_TEXT	SEGMENT
$T555711 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@AAU34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z PROC ; std::_Cons_val<std::allocator<ioGalaxyObjectItem::GalaxyAttack>,ioGalaxyObjectItem::GalaxyAttack,ioGalaxyObjectItem::GalaxyAttack &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@AAU34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T555711[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val@5
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0GalaxyAttack@ioGalaxyObjectItem@@QAE@ABU01@@Z
$LN7@Cons_val@5:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@AAU34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T555711[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@AAU34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@AAU34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@AAU34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z ENDP ; std::_Cons_val<std::allocator<ioGalaxyObjectItem::GalaxyAttack>,ioGalaxyObjectItem::GalaxyAttack,ioGalaxyObjectItem::GalaxyAttack &>
PUBLIC	??$_Move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00@Z ; std::_Move<ioGalaxyObjectItem::GalaxyAttack *,ioGalaxyObjectItem::GalaxyAttack *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00@Z
_TEXT	SEGMENT
__Cat$555729 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00@Z PROC ; std::_Move<ioGalaxyObjectItem::GalaxyAttack *,ioGalaxyObjectItem::GalaxyAttack *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$555729[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioGalaxyObjectItem::GalaxyAttack *,ioGalaxyObjectItem::GalaxyAttack *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00@Z ENDP ; std::_Move<ioGalaxyObjectItem::GalaxyAttack *,ioGalaxyObjectItem::GalaxyAttack *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@ABU34@@Z ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::construct
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@ABU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@ABU34@@Z PROC ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UGalaxyAttack@ioGalaxyObjectItem@@ABU12@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@ABU12@@Z ; std::_Construct<ioGalaxyObjectItem::GalaxyAttack,ioGalaxyObjectItem::GalaxyAttack const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@ABU34@@Z ENDP ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@@Z ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@@Z PROC ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ

; 214  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?destroy@?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@QAEXPAUGalaxyAttack@ioGalaxyObjectItem@@@Z ENDP ; std::allocator<ioGalaxyObjectItem::GalaxyAttack>::destroy
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@ABU34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@ABU23@@Z ; std::_Cons_val<std::allocator<ioGalaxyObjectItem::GalaxyAttack>,ioGalaxyObjectItem::GalaxyAttack,ioGalaxyObjectItem::GalaxyAttack const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@ABU34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@ABU23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@ABU34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@ABU23@@Z PROC ; std::_Cons_val<std::allocator<ioGalaxyObjectItem::GalaxyAttack>,ioGalaxyObjectItem::GalaxyAttack,ioGalaxyObjectItem::GalaxyAttack const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UGalaxyAttack@ioGalaxyObjectItem@@ABU12@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@ABU12@@Z ; std::_Construct<ioGalaxyObjectItem::GalaxyAttack,ioGalaxyObjectItem::GalaxyAttack const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@ABU34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@ABU23@@Z ENDP ; std::_Cons_val<std::allocator<ioGalaxyObjectItem::GalaxyAttack>,ioGalaxyObjectItem::GalaxyAttack,ioGalaxyObjectItem::GalaxyAttack const &>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@@Z ; std::_Dest_val<std::allocator<ioGalaxyObjectItem::GalaxyAttack>,ioGalaxyObjectItem::GalaxyAttack>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@@Z PROC ; std::_Dest_val<std::allocator<ioGalaxyObjectItem::GalaxyAttack>,ioGalaxyObjectItem::GalaxyAttack>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]

; 288  : 	}

  00006	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  00007	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
??$_Dest_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@@Z ENDP ; std::_Dest_val<std::allocator<ioGalaxyObjectItem::GalaxyAttack>,ioGalaxyObjectItem::GalaxyAttack>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@0AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@0AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@0AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ioGalaxyObjectItem::GalaxyAttack> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0a		 jmp	 SHORT $LN20@Destroy_ra@3
$LL3@Destroy_ra@3:

; 97   : 		_Dest_val(_Al, _First);

  00009	8b ce		 mov	 ecx, esi
  0000b	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  00010	83 c6 58	 add	 esi, 88			; 00000058H
$LN20@Destroy_ra@3:

; 96   : 	for (; _First != _Last; ++_First)

  00013	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00016	75 f1		 jne	 SHORT $LL3@Destroy_ra@3
  00018	5e		 pop	 esi

; 98   : 	}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Destroy_range@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@0AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@2@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >,ioGalaxyObjectItem::GalaxyAttack *,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogalaxyobjectitem.cpp
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@2@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@2@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@2@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@2@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@2@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$3
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@2@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@2@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@2@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@2@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@2@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >,ioGalaxyObjectItem::GalaxyAttack *,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@2@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 373  : 
; 374  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

$LL14@Uninit_cop@5:
  00016	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00019	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001c	74 32		 je	 SHORT $LN4@Uninit_cop@5

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  0001e	50		 push	 eax
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	e8 00 00 00 00	 call	 ??$_Construct@UGalaxyAttack@ioGalaxyObjectItem@@ABU12@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@ABU12@@Z ; std::_Construct<ioGalaxyObjectItem::GalaxyAttack,ioGalaxyObjectItem::GalaxyAttack const &>
  00027	83 45 10 58	 add	 DWORD PTR __Dest$[ebp], 88 ; 00000058H
  0002b	83 45 08 58	 add	 DWORD PTR __First$[ebp], 88 ; 00000058H
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
  00031	eb e3		 jmp	 SHORT $LL14@Uninit_cop@5
__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@2@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00033	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00036	eb 0a		 jmp	 SHORT $LN48@Uninit_cop@5
$LL3@Uninit_cop@5:

; 379  : 		_Dest_val(_Al, _Next);

  00038	8b ce		 mov	 ecx, esi
  0003a	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  0003f	83 c6 58	 add	 esi, 88			; 00000058H
$LN48@Uninit_cop@5:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00042	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00045	75 f1		 jne	 SHORT $LL3@Uninit_cop@5

; 380  : 	_RERAISE;

  00047	6a 00		 push	 0
  00049	6a 00		 push	 0
  0004b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN49@Uninit_cop@5:
$LN4@Uninit_cop@5:

; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00050	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00053	e8 00 00 00 00	 call	 __EH_epilog3
  00058	c3		 ret	 0
$LN47@Uninit_cop@5:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@2@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@2@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@2@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >,ioGalaxyObjectItem::GalaxyAttack *,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
PUBLIC	??$_Uninit_move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@U12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioGalaxyObjectItem::GalaxyAttack *,ioGalaxyObjectItem::GalaxyAttack *,std::allocator<ioGalaxyObjectItem::GalaxyAttack>,ioGalaxyObjectItem::GalaxyAttack>
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogalaxyobjectitem.cpp
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@U12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@U12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@U12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@U12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@U12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$3
__ehfuncinfo$??$_Uninit_move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@U12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@U12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@U12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@U12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@U12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ioGalaxyObjectItem::GalaxyAttack *,ioGalaxyObjectItem::GalaxyAttack *,std::allocator<ioGalaxyObjectItem::GalaxyAttack>,ioGalaxyObjectItem::GalaxyAttack>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@U12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 428  : 
; 429  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00016	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LL6@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	74 35		 je	 SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  0001e	56		 push	 esi
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00025	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@U34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@$$QAU23@@Z ; std::_Cons_val<std::allocator<ioGalaxyObjectItem::GalaxyAttack>,ioGalaxyObjectItem::GalaxyAttack,ioGalaxyObjectItem::GalaxyAttack>
  0002a	83 45 10 58	 add	 DWORD PTR __Dest$[ebp], 88 ; 00000058H
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00031	83 c6 58	 add	 esi, 88			; 00000058H
  00034	eb e3		 jmp	 SHORT $LL6@Uninit_mov
__catch$??$_Uninit_move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@U12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00036	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00039	eb 0a		 jmp	 SHORT $LN32@Uninit_mov
$LL3@Uninit_mov:

; 434  : 		_Dest_val(_Al, _Next);

  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  00042	83 c6 58	 add	 esi, 88			; 00000058H
$LN32@Uninit_mov:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00045	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00048	75 f1		 jne	 SHORT $LL3@Uninit_mov

; 435  : 	_RERAISE;

  0004a	6a 00		 push	 0
  0004c	6a 00		 push	 0
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN33@Uninit_mov:
$LN4@Uninit_mov:

; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00053	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 438  : 	}

  00056	e8 00 00 00 00	 call	 __EH_epilog3
  0005b	c3		 ret	 0
$LN31@Uninit_mov:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@U12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@U12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@U12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ioGalaxyObjectItem::GalaxyAttack *,ioGalaxyObjectItem::GalaxyAttack *,std::allocator<ioGalaxyObjectItem::GalaxyAttack>,ioGalaxyObjectItem::GalaxyAttack>
PUBLIC	??$_Destroy_range@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@0AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@@Z ; std::_Destroy_range<std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@0AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@0AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ioGalaxyObjectItem::GalaxyAttack> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0a		 jmp	 SHORT $LN24@Destroy_ra@4
$LL7@Destroy_ra@4:
  00009	8b ce		 mov	 ecx, esi
  0000b	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  00010	83 c6 58	 add	 esi, 88			; 00000058H
$LN24@Destroy_ra@4:
  00013	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00016	75 f1		 jne	 SHORT $LL7@Destroy_ra@4
  00018	5e		 pop	 esi

; 89   : 	}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Destroy_range@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@0AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@2@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >,ioGalaxyObjectItem::GalaxyAttack *,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@2@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@@Z
_TEXT	SEGMENT
__Cat$556069 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@2@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >,ioGalaxyObjectItem::GalaxyAttack *,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$556069[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@2@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >,ioGalaxyObjectItem::GalaxyAttack *,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@2@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >,ioGalaxyObjectItem::GalaxyAttack *,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@@Z ; std::_Uninitialized_move<ioGalaxyObjectItem::GalaxyAttack *,ioGalaxyObjectItem::GalaxyAttack *,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninitialized_move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@@Z
_TEXT	SEGMENT
__Cat$556076 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@@Z PROC ; std::_Uninitialized_move<ioGalaxyObjectItem::GalaxyAttack *,ioGalaxyObjectItem::GalaxyAttack *,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$556076[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@U12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioGalaxyObjectItem::GalaxyAttack *,ioGalaxyObjectItem::GalaxyAttack *,std::allocator<ioGalaxyObjectItem::GalaxyAttack>,ioGalaxyObjectItem::GalaxyAttack>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@@Z ENDP ; std::_Uninitialized_move<ioGalaxyObjectItem::GalaxyAttack *,ioGalaxyObjectItem::GalaxyAttack *,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEXPAUGalaxyAttack@ioGalaxyObjectItem@@0@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEXPAUGalaxyAttack@ioGalaxyObjectItem@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEXPAUGalaxyAttack@ioGalaxyObjectItem@@0@Z PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0a		 jmp	 SHORT $LN26@Destroy
$LL9@Destroy:
  00009	8b ce		 mov	 ecx, esi
  0000b	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  00010	83 c6 58	 add	 esi, 88			; 00000058H
$LN26@Destroy:
  00013	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00016	75 f1		 jne	 SHORT $LL9@Destroy
  00018	5e		 pop	 esi

; 1271 : 		}

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?_Destroy@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEXPAUGalaxyAttack@ioGalaxyObjectItem@@0@Z ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@1@0PAU23@@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@1@0PAU23@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$556183 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@1@0PAU23@@Z PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$556183[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@2@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >,ioGalaxyObjectItem::GalaxyAttack *,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@1@0PAU23@@Z ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > > >
_TEXT	ENDS
PUBLIC	??$_Umove@PAUGalaxyAttack@ioGalaxyObjectItem@@@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEPAUGalaxyAttack@ioGalaxyObjectItem@@PAU23@00@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Umove<ioGalaxyObjectItem::GalaxyAttack *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAUGalaxyAttack@ioGalaxyObjectItem@@@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEPAUGalaxyAttack@ioGalaxyObjectItem@@PAU23@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUGalaxyAttack@ioGalaxyObjectItem@@@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEPAUGalaxyAttack@ioGalaxyObjectItem@@PAU23@00@Z PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Umove<ioGalaxyObjectItem::GalaxyAttack *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@@Z ; std::_Uninitialized_move<ioGalaxyObjectItem::GalaxyAttack *,ioGalaxyObjectItem::GalaxyAttack *,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUGalaxyAttack@ioGalaxyObjectItem@@@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEPAUGalaxyAttack@ioGalaxyObjectItem@@PAU23@00@Z ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Umove<ioGalaxyObjectItem::GalaxyAttack *>
_TEXT	ENDS
PUBLIC	?erase@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@0@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T556333 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$556264 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@0@Z PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00004	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __First_arg$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 4d 10	 cmp	 ecx, DWORD PTR __Last_arg$[ebp]
  00012	74 37		 je	 SHORT $LN1@erase@3

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00017	53		 push	 ebx
  00018	57		 push	 edi
  00019	ff 75 10	 push	 DWORD PTR __Cat$556264[ebp]
  0001c	51		 push	 ecx
  0001d	50		 push	 eax
  0001e	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioGalaxyObjectItem::GalaxyAttack *,ioGalaxyObjectItem::GalaxyAttack *>

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00026	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00029	8b d8		 mov	 ebx, eax
  0002b	83 c4 10	 add	 esp, 16			; 00000010H
  0002e	89 5d fc	 mov	 DWORD PTR $T556333[ebp], ebx
  00031	3b df		 cmp	 ebx, edi
  00033	74 11		 je	 SHORT $LN36@erase@3
$LL55@erase@3:
  00035	8b 4d fc	 mov	 ecx, DWORD PTR $T556333[ebp]
  00038	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  0003d	83 45 fc 58	 add	 DWORD PTR $T556333[ebp], 88 ; 00000058H
  00041	39 7d fc	 cmp	 DWORD PTR $T556333[ebp], edi
  00044	75 ef		 jne	 SHORT $LL55@erase@3
$LN36@erase@3:

; 1211 : 			this->_Mylast = _Ptr;

  00046	5f		 pop	 edi
  00047	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0004a	5b		 pop	 ebx
$LN1@erase@3:

; 1212 : 			}
; 1213 : 		return (_First);

  0004b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0004e	5e		 pop	 esi

; 1214 : 		}

  0004f	c9		 leave
  00050	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@0@Z ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEXXZ ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEXXZ PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 27		 je	 SHORT $LN27@Tidy@3

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	53		 push	 ebx
  00009	57		 push	 edi
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  00010	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00013	8b 3e		 mov	 edi, DWORD PTR [esi]
  00015	eb 0a		 jmp	 SHORT $LN31@Tidy@3
$LL12@Tidy@3:
  00017	8b cf		 mov	 ecx, edi
  00019	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  0001e	83 c7 58	 add	 edi, 88			; 00000058H
$LN31@Tidy@3:
  00021	3b fb		 cmp	 edi, ebx
  00023	75 f2		 jne	 SHORT $LL12@Tidy@3

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00025	ff 36		 push	 DWORD PTR [esi]
  00027	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002c	59		 pop	 ecx
  0002d	5f		 pop	 edi
  0002e	5b		 pop	 ebx
$LN27@Tidy@3:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  0002f	33 c0		 xor	 eax, eax
  00031	89 06		 mov	 DWORD PTR [esi], eax

; 1310 : 		this->_Mylast = 0;

  00033	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1311 : 		this->_Myend = 0;

  00036	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00039	5e		 pop	 esi

; 1312 : 		}

  0003a	c3		 ret	 0
?_Tidy@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEXXZ ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXI@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXI@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXI@Z$3
__ehfuncinfo$?reserve@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$550012 = -24					; size = 4
$T556615 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXI@Z PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	81 7d 08 2e ba
	e8 02		 cmp	 DWORD PTR __Count$[ebp], 48806446 ; 02e8ba2eH
  00015	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN62@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00022	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00025	2b 06		 sub	 eax, DWORD PTR [esi]
  00027	6a 58		 push	 88			; 00000058H
  00029	99		 cdq
  0002a	59		 pop	 ecx
  0002b	f7 f9		 idiv	 ecx
  0002d	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00030	0f 83 80 00 00
	00		 jae	 $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00036	6a 00		 push	 0
  00038	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0003b	e8 00 00 00 00	 call	 ??$_Allocate@UGalaxyAttack@ioGalaxyObjectItem@@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@IPAU12@@Z ; std::_Allocate<ioGalaxyObjectItem::GalaxyAttack>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00040	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00042	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00046	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00049	52		 push	 edx
  0004a	89 45 e8	 mov	 DWORD PTR __Ptr$550012[ebp], eax
  0004d	ff 75 e8	 push	 DWORD PTR __Ptr$550012[ebp]
  00050	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00053	50		 push	 eax
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@PAU12@00AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@@Z ; std::_Uninitialized_move<ioGalaxyObjectItem::GalaxyAttack *,ioGalaxyObjectItem::GalaxyAttack *,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  0005a	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  0005d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005f	83 c4 18	 add	 esp, 24			; 00000018H
  00062	8b c3		 mov	 eax, ebx
  00064	2b c1		 sub	 eax, ecx
  00066	6a 58		 push	 88			; 00000058H
  00068	99		 cdq
  00069	5f		 pop	 edi
  0006a	f7 ff		 idiv	 edi
  0006c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00070	8b f8		 mov	 edi, eax
  00072	85 c9		 test	 ecx, ecx
  00074	74 20		 je	 SHORT $LN54@reserve

; 761  : 			if (this->_Myfirst != 0)
; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  00076	89 4d ec	 mov	 DWORD PTR $T556615[ebp], ecx
  00079	3b cb		 cmp	 ecx, ebx
  0007b	74 11		 je	 SHORT $LN37@reserve
$LN39@reserve:
  0007d	8b 4d ec	 mov	 ecx, DWORD PTR $T556615[ebp]
  00080	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  00085	83 45 ec 58	 add	 DWORD PTR $T556615[ebp], 88 ; 00000058H
  00089	39 5d ec	 cmp	 DWORD PTR $T556615[ebp], ebx
  0008c	75 ef		 jne	 SHORT $LN39@reserve
$LN37@reserve:

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  0008e	ff 36		 push	 DWORD PTR [esi]
  00090	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00095	59		 pop	 ecx
$LN54@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00096	8b ce		 mov	 ecx, esi
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;
; 770  : 			this->_Mylast = _Ptr + _Size;

  0009e	6b ff 58	 imul	 edi, 88			; 00000058H
  000a1	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  000a4	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$550012[ebp]
  000a7	6b c0 58	 imul	 eax, 88			; 00000058H
  000aa	03 c1		 add	 eax, ecx
  000ac	03 f9		 add	 edi, ecx
  000ae	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000b1	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  000b4	89 0e		 mov	 DWORD PTR [esi], ecx
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  000b6	e8 00 00 00 00	 call	 __EH_epilog3
  000bb	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000be	ff 75 e8	 push	 DWORD PTR __Ptr$550012[ebp]
  000c1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c6	59		 pop	 ecx

; 757  : 			_RERAISE;

  000c7	6a 00		 push	 0
  000c9	6a 00		 push	 0
  000cb	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN63@reserve:
$LN61@reserve:
  000d0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXI@Z ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::reserve
PUBLIC	??0?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$556763 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	6a 58		 push	 88			; 00000058H
  00025	59		 pop	 ecx
  00026	99		 cdq
  00027	f7 f9		 idiv	 ecx
  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?_Buy@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAE_NI@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Buy
  00031	84 c0		 test	 al, al
  00033	74 1f		 je	 SHORT $LN7@vector@3

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00035	ff 75 08	 push	 DWORD PTR __Cat$556763[ebp]
  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003d	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003f	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00042	52		 push	 edx
  00043	51		 push	 ecx
  00044	50		 push	 eax
  00045	57		 push	 edi
  00046	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00049	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@std@@PAUGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@2@@std@@YAPAUGalaxyAttack@ioGalaxyObjectItem@@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@0@0PAU12@AAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> > >,ioGalaxyObjectItem::GalaxyAttack *,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
  0004e	83 c4 14	 add	 esp, 20			; 00000014H
  00051	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector@3:

; 543  : 			_CATCH_END
; 544  : 		}

  00054	8b c6		 mov	 eax, esi
  00056	e8 00 00 00 00	 call	 __EH_epilog3
  0005b	c2 04 00	 ret	 4
__catch$??0?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEXXZ ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Tidy

; 542  : 			_RERAISE;

  00066	33 db		 xor	 ebx, ebx
  00068	53		 push	 ebx
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector@3:
$LN37@vector@3:
  0006f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
PUBLIC	??1?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@XZ ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::~vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@XZ PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::~vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEXXZ ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Tidy
??1?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::~vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXXZ ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T556792 = -4						; size = 4
?clear@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXXZ PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T556792[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@0@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXXZ ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEXI@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEXI@Z PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 58		 push	 88			; 00000058H
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 2e ba e8 02	 mov	 eax, 48806446		; 02e8ba2eH
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00030	2b c1		 sub	 eax, ecx
  00032	6a 58		 push	 88			; 00000058H
  00034	99		 cdq
  00035	59		 pop	 ecx
  00036	f7 f9		 idiv	 ecx
  00038	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003b	3b f8		 cmp	 edi, eax
  0003d	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003f	57		 push	 edi
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IBEII@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Grow_to
  00047	50		 push	 eax
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?reserve@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXI@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::reserve
$LN1@Reserve:
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 1298 : 		}

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Reserve
_TEXT	ENDS
PUBLIC	??_7ioGalaxyObjectItem@@6B@			; ioGalaxyObjectItem::`vftable'
PUBLIC	??0ioGalaxyObjectItem@@QAE@XZ			; ioGalaxyObjectItem::ioGalaxyObjectItem
PUBLIC	??_R4ioGalaxyObjectItem@@6B@			; ioGalaxyObjectItem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioGalaxyObjectItem@@@8			; ioGalaxyObjectItem `RTTI Type Descriptor'
PUBLIC	??_R3ioGalaxyObjectItem@@8			; ioGalaxyObjectItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioGalaxyObjectItem@@8			; ioGalaxyObjectItem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioGalaxyObjectItem@@8		; ioGalaxyObjectItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioObjectItem@@8			; ioObjectItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioObjectItem@@@8			; ioObjectItem `RTTI Type Descriptor'
PUBLIC	??_R3ioObjectItem@@8				; ioObjectItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioObjectItem@@8				; ioObjectItem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioWeaponItem@@8			; ioWeaponItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioWeaponItem@@@8			; ioWeaponItem `RTTI Type Descriptor'
PUBLIC	??_R3ioWeaponItem@@8				; ioWeaponItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWeaponItem@@8				; ioWeaponItem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioAttackableItem@@8		; ioAttackableItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioAttackableItem@@@8			; ioAttackableItem `RTTI Type Descriptor'
PUBLIC	??_R3ioAttackableItem@@8			; ioAttackableItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioAttackableItem@@8			; ioAttackableItem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioItem@@8				; ioItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioItem@@@8				; ioItem `RTTI Type Descriptor'
PUBLIC	??_R3ioItem@@8					; ioItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioItem@@8					; ioItem::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioGalaxyObjectItem@@UAEXAAVioINILoader@@@Z ; ioGalaxyObjectItem::LoadProperty
PUBLIC	?Clone@ioGalaxyObjectItem@@UAEPAVioItem@@XZ	; ioGalaxyObjectItem::Clone
PUBLIC	?IsEnableExtraGauge@ioItem@@UAE_NPAVioBaseChar@@@Z ; ioItem::IsEnableExtraGauge
PUBLIC	?GetExtraGauge@ioItem@@UAEMXZ			; ioItem::GetExtraGauge
PUBLIC	?CheckOnHand@ioAttackableItem@@UAE_NXZ		; ioAttackableItem::CheckOnHand
PUBLIC	?CheckAimState@ioAttackableItem@@UAE_N_N@Z	; ioAttackableItem::CheckAimState
PUBLIC	?SetAimState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ; ioAttackableItem::SetAimState
PUBLIC	?CheckExtendDefenseEnable@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ; ioAttackableItem::CheckExtendDefenseEnable
PUBLIC	?IsChargeAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ; ioAttackableItem::IsChargeAttackState
PUBLIC	?IsMoveAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ; ioAttackableItem::IsMoveAttackState
PUBLIC	?IsNoGhostWalk@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ; ioAttackableItem::IsNoGhostWalk
PUBLIC	?IsEnableAttackDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z ; ioAttackableItem::IsEnableAttackDashCheck
PUBLIC	?IsEnableItemDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z ; ioAttackableItem::IsEnableItemDashCheck
PUBLIC	?IsEnableAttackRotateCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ; ioAttackableItem::IsEnableAttackRotateCheck
PUBLIC	?IsEnableChargeDefenseCheck@ioAttackableItem@@UAE_NXZ ; ioAttackableItem::IsEnableChargeDefenseCheck
PUBLIC	?IsUseDefenceCounterAttackEndDash@ioAttackableItem@@UAE_NXZ ; ioAttackableItem::IsUseDefenceCounterAttackEndDash
PUBLIC	?IsAutoTarget@ioAttackableItem@@UBE_NXZ		; ioAttackableItem::IsAutoTarget
PUBLIC	?IsWoundAfterUseExtendState@ioAttackableItem@@UAE_NXZ ; ioAttackableItem::IsWoundAfterUseExtendState
PUBLIC	?CheckWoundAfterUseExtendState@ioAttackableItem@@UAE_NPAVioBaseChar@@W4BlowTargetType@@@Z ; ioAttackableItem::CheckWoundAfterUseExtendState
PUBLIC	?IsCharSkipState@ioAttackableItem@@UAE_NPBVioBaseChar@@@Z ; ioAttackableItem::IsCharSkipState
PUBLIC	?SetObjectReleaseTCPSend@ioObjectItem@@UAEX_N@Z	; ioObjectItem::SetObjectReleaseTCPSend
PUBLIC	?IsObjectReleaseTCPSend@ioObjectItem@@UAE_NXZ	; ioObjectItem::IsObjectReleaseTCPSend
PUBLIC	?IsNormalAttackStop@ioObjectItem@@UAE_NXZ	; ioObjectItem::IsNormalAttackStop
EXTRN	??1ioObjectItem@@UAE@XZ:PROC			; ioObjectItem::~ioObjectItem
EXTRN	??0ioObjectItem@@QAE@XZ:PROC			; ioObjectItem::ioObjectItem
EXTRN	?FindFieldEntityGrp@ioItem@@MBEABVioHashString@@XZ:PROC ; ioItem::FindFieldEntityGrp
EXTRN	?GetType@ioObjectItem@@UBE?AW4ItemType@ioItem@@XZ:PROC ; ioObjectItem::GetType
EXTRN	?UseCreateIndexItem@ioItem@@UBE_NXZ:PROC	; ioItem::UseCreateIndexItem
EXTRN	?GetSetFocusColor@ioItem@@UBEKXZ:PROC		; ioItem::GetSetFocusColor
EXTRN	?Initialize@ioItem@@UAEXABVioHashString@@PAVioPlayStage@@@Z:PROC ; ioItem::Initialize
EXTRN	?InitializeBeforeEquip@ioItem@@UAEXABVioHashString@@PAVioPlayStage@@@Z:PROC ; ioItem::InitializeBeforeEquip
EXTRN	?SetExtendEquipEffect@ioItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioItem::SetExtendEquipEffect
EXTRN	?ReleaseExtendEquipEffect@ioItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioItem::ReleaseExtendEquipEffect
EXTRN	?AddGlowLine@ioWeaponItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioWeaponItem::AddGlowLine
EXTRN	?RemoveGlowLine@ioWeaponItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioWeaponItem::RemoveGlowLine
EXTRN	?GetTargetName@ioItem@@UAE?AVioHashString@@XZ:PROC ; ioItem::GetTargetName
EXTRN	?ClearTarget@ioItem@@UAEXXZ:PROC		; ioItem::ClearTarget
EXTRN	?SetItemType@ioWeaponItem@@UAEXXZ:PROC		; ioWeaponItem::SetItemType
EXTRN	?UpdateExtraData@ioItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioItem::UpdateExtraData
EXTRN	?CheckWeaponDefenseState@ioItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioItem::CheckWeaponDefenseState
EXTRN	?CheckWoundedState@ioItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioItem::CheckWoundedState
EXTRN	?SetVisible@ioItem@@UAEXPAVioBaseChar@@_N@Z:PROC ; ioItem::SetVisible
EXTRN	?UpdateSkillGauge@ioItem@@UAEXPAVioBaseChar@@M_N@Z:PROC ; ioItem::UpdateSkillGauge
EXTRN	?ReduceNeedGauge@ioItem@@UAEXMPAVioBaseChar@@@Z:PROC ; ioItem::ReduceNeedGauge
EXTRN	?GetCurBullet@ioItem@@UAEHXZ:PROC		; ioItem::GetCurBullet
EXTRN	?GetMaxBullet@ioItem@@UAEHXZ:PROC		; ioItem::GetMaxBullet
EXTRN	?SetCurBullet@ioItem@@UAEXH@Z:PROC		; ioItem::SetCurBullet
EXTRN	?GetCurSecoundBullet@ioItem@@UAEHXZ:PROC	; ioItem::GetCurSecoundBullet
EXTRN	?GetMaxSecoundBullet@ioItem@@UAEHXZ:PROC	; ioItem::GetMaxSecoundBullet
EXTRN	?SetCurSecoundBullet@ioItem@@UAEXH@Z:PROC	; ioItem::SetCurSecoundBullet
EXTRN	?GetGrowthInfoNum@ioObjectItem@@UBEHH@Z:PROC	; ioObjectItem::GetGrowthInfoNum
EXTRN	?GetGrowthInfoNumByType@ioObjectItem@@UBEHHAAH@Z:PROC ; ioObjectItem::GetGrowthInfoNumByType
EXTRN	?ClearCurChargeRateForSkill@ioItem@@UAEXXZ:PROC	; ioItem::ClearCurChargeRateForSkill
EXTRN	?GetChargeDamageRateForSkill@ioItem@@UAEMXZ:PROC ; ioItem::GetChargeDamageRateForSkill
EXTRN	?GetChargeForceRateForSkill@ioItem@@UAEMXZ:PROC	; ioItem::GetChargeForceRateForSkill
EXTRN	?GetChargeBlowRateForSkill@ioItem@@UAEMXZ:PROC	; ioItem::GetChargeBlowRateForSkill
EXTRN	?GetChargeRangeRateForSkill@ioItem@@UAEMXZ:PROC	; ioItem::GetChargeRangeRateForSkill
EXTRN	?GetChargeSpeedRateForSkill@ioItem@@UAEMXZ:PROC	; ioItem::GetChargeSpeedRateForSkill
EXTRN	?GetChargeFloatRateForSkill@ioItem@@UAEMXZ:PROC	; ioItem::GetChargeFloatRateForSkill
EXTRN	?GetChargeScaleRateForSkill@ioItem@@UAEMXZ:PROC	; ioItem::GetChargeScaleRateForSkill
EXTRN	?GetChargeExplosionRateForSkill@ioItem@@UAEMXZ:PROC ; ioItem::GetChargeExplosionRateForSkill
EXTRN	?GetChargeWoundedTimeRateForSkill@ioItem@@UAEMXZ:PROC ; ioItem::GetChargeWoundedTimeRateForSkill
EXTRN	?SetCurEquipEffect@ioItem@@UAEX_N@Z:PROC	; ioItem::SetCurEquipEffect
EXTRN	?SetCostume@ioItem@@UAEXH_N@Z:PROC		; ioItem::SetCostume
EXTRN	??_EioGalaxyObjectItem@@UAEPAXI@Z:PROC		; ioGalaxyObjectItem::`vector deleting destructor'
EXTRN	?IsCanFire@ioAttackableItem@@UBE_NPBVioBaseChar@@H_N@Z:PROC ; ioAttackableItem::IsCanFire
EXTRN	?CallItemProcess@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CallItemProcess
EXTRN	?CheckChargeInfo@ioAttackableItem@@UAEXPAVioWeapon@@_N@Z:PROC ; ioAttackableItem::CheckChargeInfo
EXTRN	?SetExtendDefenseState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetExtendDefenseState
EXTRN	?CheckExtendDefenseState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckExtendDefenseState
EXTRN	?CheckDefenseMoveAniState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckDefenseMoveAniState
EXTRN	?SetDodgeDefenseState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetDodgeDefenseState
EXTRN	?CheckDodgeDefenseState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckDodgeDefenseState
EXTRN	?ApplyDodgeDefenseState@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyDodgeDefenseState
EXTRN	?SetDefenseAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetDefenseAttackState
EXTRN	?CheckDefenseAttackState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckDefenseAttackState
EXTRN	?ApplyDefenseAttackState@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyDefenseAttackState
EXTRN	?SetExtendDashState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetExtendDashState
EXTRN	?CheckExtendDashState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckExtendDashState
EXTRN	?SetNormalAttack@ioAttackableItem@@UAEXPAVioBaseChar@@H@Z:PROC ; ioAttackableItem::SetNormalAttack
EXTRN	?CheckNormalAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckNormalAttack
EXTRN	?SetJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@HMW4AttackType@@@Z:PROC ; ioAttackableItem::SetJumpAttack
EXTRN	?CheckJumpAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckJumpAttack
EXTRN	?SetJumpReloadState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetJumpReloadState
EXTRN	?SetJumpReload@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetJumpReload
EXTRN	?CheckJumpReloadState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckJumpReloadState
EXTRN	?CheckJumpReloadReserve@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckJumpReloadReserve
EXTRN	?ProcessJumpReloadState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessJumpReloadState
EXTRN	?ApplyJumpReload@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyJumpReload
EXTRN	?OnItemGaugeOK@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::OnItemGaugeOK
EXTRN	?OnItemGaugeCancel@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::OnItemGaugeCancel
EXTRN	?OnEndExtendDefense@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::OnEndExtendDefense
EXTRN	?OnEndNormalAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::OnEndNormalAttack
EXTRN	?OnEndExtendAttack@ioAttackableItem@@UAEXPAVioBaseChar@@_N@Z:PROC ; ioAttackableItem::OnEndExtendAttack
EXTRN	?OnEndExtendJump@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::OnEndExtendJump
EXTRN	?FillNormalAttackExtraInfo@ioAttackableItem@@UAEXAAVSP2Packet@@@Z:PROC ; ioAttackableItem::FillNormalAttackExtraInfo
EXTRN	?ApplyNormalAttackExtraInfo@ioAttackableItem@@UAEXAAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyNormalAttackExtraInfo
EXTRN	?CheckLanding@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckLanding
EXTRN	?SetNoneState@ioAttackableItem@@UAEXPAVioBaseChar@@H@Z:PROC ; ioAttackableItem::SetNoneState
EXTRN	?IsCanUpdateGauge@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::IsCanUpdateGauge
EXTRN	?CheckAimJumpState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckAimJumpState
EXTRN	?GetJumppingAnimation@ioAttackableItem@@UBEABVioHashString@@XZ:PROC ; ioAttackableItem::GetJumppingAnimation
EXTRN	?GetExtendJumppingAnimation@ioAttackableItem@@UBEABVioHashString@@XZ:PROC ; ioAttackableItem::GetExtendJumppingAnimation
EXTRN	?CheckRetreatState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckRetreatState
EXTRN	?SetNextItemState@ioAttackableItem@@UAEXPAVioBaseChar@@0PAVioWeapon@@_NM@Z:PROC ; ioAttackableItem::SetNextItemState
EXTRN	?WeaponWounded@ioWeaponItem@@UAEXPAVioWeapon@@PAVioBaseChar@@@Z:PROC ; ioWeaponItem::WeaponWounded
EXTRN	?WeaponMapColDead@ioAttackableItem@@UAEXPAVioWeapon@@@Z:PROC ; ioAttackableItem::WeaponMapColDead
EXTRN	?SetDefenceCounterState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetDefenceCounterState
EXTRN	?IsUseDefenceCounterAttack@ioAttackableItem@@UAE_NXZ:PROC ; ioAttackableItem::IsUseDefenceCounterAttack
EXTRN	?ProcessDefenceCounterAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessDefenceCounterAttack
EXTRN	?ProcessExtraJump@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessExtraJump
EXTRN	?SetEndGrappling@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetEndGrappling
EXTRN	?ClearKeyReserve@ioAttackableItem@@MAEXXZ:PROC	; ioAttackableItem::ClearKeyReserve
EXTRN	?CheckReserve@ioAttackableItem@@MAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckReserve
EXTRN	?ProcessReserveKeyInput@ioAttackableItem@@MAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessReserveKeyInput
EXTRN	?SetJumpState@ioAttackableItem@@UAEXXZ:PROC	; ioAttackableItem::SetJumpState
EXTRN	?SetJumpping@ioAttackableItem@@UAEXPAVioBaseChar@@_N@Z:PROC ; ioAttackableItem::SetJumpping
EXTRN	?ProcessJumpping@ioAttackableItem@@UAEXPAVioBaseChar@@M@Z:PROC ; ioAttackableItem::ProcessJumpping
EXTRN	?ProcessJumppingByNoNeedProcess@ioAttackableItem@@UAEXPAVioBaseChar@@M@Z:PROC ; ioAttackableItem::ProcessJumppingByNoNeedProcess
EXTRN	?ProcessLanding@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessLanding
EXTRN	?ProcessJumpAttack@ioAttackableItem@@UAEXPAVioBaseChar@@M@Z:PROC ; ioAttackableItem::ProcessJumpAttack
EXTRN	?ProcessAimJump@ioAttackableItem@@UAE_NPAVioBaseChar@@M@Z:PROC ; ioAttackableItem::ProcessAimJump
EXTRN	?ApplyJump@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyJump
EXTRN	?ApplyDash@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyDash
EXTRN	?ApplyCounterAttack@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioAttackableItem::ApplyCounterAttack
EXTRN	?CheckComboJumpAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckComboJumpAttack
EXTRN	?SetFlashJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetFlashJumpAttack
EXTRN	?SetComboFlashAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetComboFlashAttack
EXTRN	?SetCollectJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetCollectJumpAttack
EXTRN	?SetPowerChargeJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetPowerChargeJumpAttack
EXTRN	?GetAttackSpeedRate@ioAttackableItem@@UBEMXZ:PROC ; ioAttackableItem::GetAttackSpeedRate
EXTRN	?GetExtraJumpSpeedRate@ioAttackableItem@@UBEMABUD3DXVECTOR3@@ABUD3DXQUATERNION@@@Z:PROC ; ioAttackableItem::GetExtraJumpSpeedRate
EXTRN	?IsEnableExtendJump@ioAttackableItem@@UAE_NXZ:PROC ; ioAttackableItem::IsEnableExtendJump
EXTRN	?RecevieExtendJumpUse@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::RecevieExtendJumpUse
EXTRN	?HasAniFile@ioAttackableItem@@UBE_NW4AttackType@@H@Z:PROC ; ioAttackableItem::HasAniFile
EXTRN	?HasEndAniFile@ioAttackableItem@@UBE_NW4AttackType@@H@Z:PROC ; ioAttackableItem::HasEndAniFile
EXTRN	?GetAniFile@ioAttackableItem@@UBEABVioHashString@@W4AttackType@@H@Z:PROC ; ioAttackableItem::GetAniFile
EXTRN	?GetAttackAniRate@ioAttackableItem@@UBEMW4AttackType@@H@Z:PROC ; ioAttackableItem::GetAttackAniRate
EXTRN	?GetEndAniFile@ioAttackableItem@@UBEABVioHashString@@W4AttackType@@H@Z:PROC ; ioAttackableItem::GetEndAniFile
EXTRN	?GetAttackEndAniRate@ioAttackableItem@@UBEMW4AttackType@@H@Z:PROC ; ioAttackableItem::GetAttackEndAniRate
EXTRN	?GetAttackAttributeIdx@ioAttackableItem@@UBEABV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@W4AttackType@@H@Z:PROC ; ioAttackableItem::GetAttackAttributeIdx
EXTRN	?GetForceInfoList@ioAttackableItem@@UBEABV?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@W4AttackType@@H@Z:PROC ; ioAttackableItem::GetForceInfoList
EXTRN	?GetAttackPreDelay@ioAttackableItem@@UBEKW4AttackType@@H@Z:PROC ; ioAttackableItem::GetAttackPreDelay
EXTRN	?GetAttackAnimationDelay@ioAttackableItem@@UBEKW4AttackType@@H@Z:PROC ; ioAttackableItem::GetAttackAnimationDelay
EXTRN	?GetMaxCombo@ioAttackableItem@@UBEHXZ:PROC	; ioAttackableItem::GetMaxCombo
EXTRN	?GetExtraDashAttackMax@ioAttackableItem@@UBEHXZ:PROC ; ioAttackableItem::GetExtraDashAttackMax
EXTRN	?HasJumpEndAnimation@ioAttackableItem@@UBE_N_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::HasJumpEndAnimation
EXTRN	?GetJumpEndAnimation@ioAttackableItem@@UBEABVioHashString@@_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::GetJumpEndAnimation
EXTRN	?ClearCancelInfo@ioAttackableItem@@MAEXXZ:PROC	; ioAttackableItem::ClearCancelInfo
EXTRN	?CheckCancelReserve@ioAttackableItem@@MAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckCancelReserve
EXTRN	?SetCurAttackAniForInputJump@ioAttackableItem@@MAEXABVioHashString@@M@Z:PROC ; ioAttackableItem::SetCurAttackAniForInputJump
EXTRN	?ProcessCancel@ioAttackableItem@@MAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessCancel
EXTRN	?ProcessCancelBySpeicalDash@ioAttackableItem@@MAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ProcessCancelBySpeicalDash
EXTRN	?SetCurAttackAniForInputDashS@ioAttackableItem@@UAEXABVioHashString@@M@Z:PROC ; ioAttackableItem::SetCurAttackAniForInputDashS
EXTRN	?CheckCancelReserveByConditionalSpecialDash@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckCancelReserveByConditionalSpecialDash
EXTRN	?IsConditionalSpecialDashReserve@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::IsConditionalSpecialDashReserve
EXTRN	?SetChangeConditionalSpecialDash@ioAttackableItem@@UAEXPAVioBaseChar@@W4DirKeyInput@ioUserKeyInput@@H@Z:PROC ; ioAttackableItem::SetChangeConditionalSpecialDash
EXTRN	?CheckChangeWereWolfState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckChangeWereWolfState
EXTRN	?SetChangeWereWolfState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetChangeWereWolfState
EXTRN	?CheckReleaseWereWolfState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckReleaseWereWolfState
EXTRN	?ReleseWereWolfState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ReleseWereWolfState
EXTRN	?ReleseWereWolfStateByOwner@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::ReleseWereWolfStateByOwner
EXTRN	?IncreaseChangeDamage@ioAttackableItem@@UAEXMH_N@Z:PROC ; ioAttackableItem::IncreaseChangeDamage
EXTRN	?IncreaseChangeDamageByWeapon@ioAttackableItem@@UAEXM@Z:PROC ; ioAttackableItem::IncreaseChangeDamageByWeapon
EXTRN	?CheckIncreaseChangeDamage@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckIncreaseChangeDamage
EXTRN	?DecreaseChangeDamage@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::DecreaseChangeDamage
EXTRN	?IsEnableActionStopDelay@ioAttackableItem@@UAE_NXZ:PROC ; ioAttackableItem::IsEnableActionStopDelay
EXTRN	?SetExtraGaugeTypeByWeapon@ioAttackableItem@@UAEXPAVioBaseChar@@HHM@Z:PROC ; ioAttackableItem::SetExtraGaugeTypeByWeapon
EXTRN	?SetUseExtraGauge@ioAttackableItem@@UAEXM@Z:PROC ; ioAttackableItem::SetUseExtraGauge
EXTRN	?InitExtraGauge@ioAttackableItem@@UAEXXZ:PROC	; ioAttackableItem::InitExtraGauge
EXTRN	?MaxExtraGauge@ioAttackableItem@@UAEXXZ:PROC	; ioAttackableItem::MaxExtraGauge
EXTRN	?GetMaxExtraGauge@ioAttackableItem@@UAEMXZ:PROC	; ioAttackableItem::GetMaxExtraGauge
EXTRN	?GetCurExtraGauge@ioAttackableItem@@UAEMXZ:PROC	; ioAttackableItem::GetCurExtraGauge
EXTRN	?SetCurExtraGauge@ioAttackableItem@@UAEXM@Z:PROC ; ioAttackableItem::SetCurExtraGauge
EXTRN	?GetAutoTargetValue@ioAttackableItem@@UAEXPAVioBaseChar@@AAM11W4AutoTargetType@@@Z:PROC ; ioAttackableItem::GetAutoTargetValue
EXTRN	?ClearAirJump@ioAttackableItem@@UAEXXZ:PROC	; ioAttackableItem::ClearAirJump
EXTRN	?SetAirJump@ioAttackableItem@@UAEXPAVioBaseChar@@HM@Z:PROC ; ioAttackableItem::SetAirJump
EXTRN	?CheckAirJump@ioAttackableItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioAttackableItem::CheckAirJump
EXTRN	?EquipObjectItemByAttakable@ioAttackableItem@@UAEXPAVioBaseChar@@PAVioItem@@@Z:PROC ; ioAttackableItem::EquipObjectItemByAttakable
EXTRN	?ReleaseObjectItemByAttack@ioAttackableItem@@UAEXPAVioBaseChar@@PAVioItem@@@Z:PROC ; ioAttackableItem::ReleaseObjectItemByAttack
EXTRN	?IsBuffFlyChange@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::IsBuffFlyChange
EXTRN	?GetAttackStateText@ioAttackableItem@@UBEPBDXZ:PROC ; ioAttackableItem::GetAttackStateText
EXTRN	?SetJumpLandingExtraState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioAttackableItem::SetJumpLandingExtraState
EXTRN	?ReleaseObjectState@ioWeaponItem@@UAEXPAVioBaseChar@@PAVioObjectItem@@@Z:PROC ; ioWeaponItem::ReleaseObjectState
EXTRN	?IsCmdCheckEnableTime@ioWeaponItem@@UAE_NXZ:PROC ; ioWeaponItem::IsCmdCheckEnableTime
EXTRN	?IsCmdSuccess@ioWeaponItem@@UAE_NXZ:PROC	; ioWeaponItem::IsCmdSuccess
EXTRN	?IsOneTimeWeaponItem@ioObjectItem@@UBE_NXZ:PROC	; ioObjectItem::IsOneTimeWeaponItem
EXTRN	?GetEquipMesh@ioObjectItem@@UBEABVioHashString@@PAVioBaseChar@@@Z:PROC ; ioObjectItem::GetEquipMesh
EXTRN	?IsCanSendControl@ioWeaponItem@@UBE_NXZ:PROC	; ioWeaponItem::IsCanSendControl
EXTRN	?GetSubType@ioObjectItem@@UBE?AW4WeaponSubType@ioWeaponItem@@XZ:PROC ; ioObjectItem::GetSubType
EXTRN	?IsEnableDash@ioObjectItem@@UBE_NXZ:PROC	; ioObjectItem::IsEnableDash
EXTRN	?IsEnableDefense@ioObjectItem@@UBE_NXZ:PROC	; ioObjectItem::IsEnableDefense
EXTRN	?IsProtectState@ioObjectItem@@UAE_NXZ:PROC	; ioObjectItem::IsProtectState
EXTRN	?EnableReduceGaugeOnSwitchBuff@ioObjectItem@@UAE_NXZ:PROC ; ioObjectItem::EnableReduceGaugeOnSwitchBuff
EXTRN	?CheckAttackCount@ioObjectItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioObjectItem::CheckAttackCount
EXTRN	?CheckActiveCount@ioObjectItem@@UAEXPAVioBaseChar@@@Z:PROC ; ioObjectItem::CheckActiveCount
EXTRN	?IsAttackComboInit@ioObjectItem@@UBE_NXZ:PROC	; ioObjectItem::IsAttackComboInit
EXTRN	?CheckReleaseProcess@ioObjectItem@@UAE_NPAVioPlayStage@@PAVioBaseChar@@@Z:PROC ; ioObjectItem::CheckReleaseProcess
EXTRN	?CheckReleaseByNormalAttack@ioObjectItem@@UAE_NPAVioPlayStage@@PAVioBaseChar@@@Z:PROC ; ioObjectItem::CheckReleaseByNormalAttack
EXTRN	?CheckObjectReleaseSelectionBuff@ioObjectItem@@UAE_NPAVioBaseChar@@@Z:PROC ; ioObjectItem::CheckObjectReleaseSelectionBuff
;	COMDAT ??_R2ioItem@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R2ioItem@@8 DD FLAT:??_R1A@?0A@EA@ioItem@@8		; ioItem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioItem@@8
rdata$r	SEGMENT
??_R3ioItem@@8 DD 00H					; ioItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioItem@@@8
_DATA	SEGMENT
??_R0?AVioItem@@@8 DD FLAT:??_7type_info@@6B@		; ioItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioItem@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioItem@@8 DD FLAT:??_R0?AVioItem@@@8	; ioItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioItem@@8
rdata$r	ENDS
;	COMDAT ??_R2ioAttackableItem@@8
rdata$r	SEGMENT
??_R2ioAttackableItem@@8 DD FLAT:??_R1A@?0A@EA@ioAttackableItem@@8 ; ioAttackableItem::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioItem@@8
rdata$r	ENDS
;	COMDAT ??_R3ioAttackableItem@@8
rdata$r	SEGMENT
??_R3ioAttackableItem@@8 DD 00H				; ioAttackableItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioAttackableItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioAttackableItem@@@8
_DATA	SEGMENT
??_R0?AVioAttackableItem@@@8 DD FLAT:??_7type_info@@6B@	; ioAttackableItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioAttackableItem@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioAttackableItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioAttackableItem@@8 DD FLAT:??_R0?AVioAttackableItem@@@8 ; ioAttackableItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioAttackableItem@@8
rdata$r	ENDS
;	COMDAT ??_R2ioWeaponItem@@8
rdata$r	SEGMENT
??_R2ioWeaponItem@@8 DD FLAT:??_R1A@?0A@EA@ioWeaponItem@@8 ; ioWeaponItem::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioAttackableItem@@8
	DD	FLAT:??_R1A@?0A@EA@ioItem@@8
rdata$r	ENDS
;	COMDAT ??_R3ioWeaponItem@@8
rdata$r	SEGMENT
??_R3ioWeaponItem@@8 DD 00H				; ioWeaponItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ioWeaponItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWeaponItem@@@8
_DATA	SEGMENT
??_R0?AVioWeaponItem@@@8 DD FLAT:??_7type_info@@6B@	; ioWeaponItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWeaponItem@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWeaponItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWeaponItem@@8 DD FLAT:??_R0?AVioWeaponItem@@@8 ; ioWeaponItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWeaponItem@@8
rdata$r	ENDS
;	COMDAT ??_R2ioObjectItem@@8
rdata$r	SEGMENT
??_R2ioObjectItem@@8 DD FLAT:??_R1A@?0A@EA@ioObjectItem@@8 ; ioObjectItem::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWeaponItem@@8
	DD	FLAT:??_R1A@?0A@EA@ioAttackableItem@@8
	DD	FLAT:??_R1A@?0A@EA@ioItem@@8
rdata$r	ENDS
;	COMDAT ??_R3ioObjectItem@@8
rdata$r	SEGMENT
??_R3ioObjectItem@@8 DD 00H				; ioObjectItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2ioObjectItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioObjectItem@@@8
_DATA	SEGMENT
??_R0?AVioObjectItem@@@8 DD FLAT:??_7type_info@@6B@	; ioObjectItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioObjectItem@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioObjectItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioObjectItem@@8 DD FLAT:??_R0?AVioObjectItem@@@8 ; ioObjectItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioObjectItem@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioGalaxyObjectItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioGalaxyObjectItem@@8 DD FLAT:??_R0?AVioGalaxyObjectItem@@@8 ; ioGalaxyObjectItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioGalaxyObjectItem@@8
rdata$r	ENDS
;	COMDAT ??_R2ioGalaxyObjectItem@@8
rdata$r	SEGMENT
??_R2ioGalaxyObjectItem@@8 DD FLAT:??_R1A@?0A@EA@ioGalaxyObjectItem@@8 ; ioGalaxyObjectItem::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioObjectItem@@8
	DD	FLAT:??_R1A@?0A@EA@ioWeaponItem@@8
	DD	FLAT:??_R1A@?0A@EA@ioAttackableItem@@8
	DD	FLAT:??_R1A@?0A@EA@ioItem@@8
rdata$r	ENDS
;	COMDAT ??_R3ioGalaxyObjectItem@@8
rdata$r	SEGMENT
??_R3ioGalaxyObjectItem@@8 DD 00H			; ioGalaxyObjectItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2ioGalaxyObjectItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioGalaxyObjectItem@@@8
_DATA	SEGMENT
??_R0?AVioGalaxyObjectItem@@@8 DD FLAT:??_7type_info@@6B@ ; ioGalaxyObjectItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioGalaxyObjectItem@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioGalaxyObjectItem@@6B@
rdata$r	SEGMENT
??_R4ioGalaxyObjectItem@@6B@ DD 00H			; ioGalaxyObjectItem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioGalaxyObjectItem@@@8
	DD	FLAT:??_R3ioGalaxyObjectItem@@8
rdata$r	ENDS
;	COMDAT ??_7ioGalaxyObjectItem@@6B@
CONST	SEGMENT
??_7ioGalaxyObjectItem@@6B@ DD FLAT:??_R4ioGalaxyObjectItem@@6B@ ; ioGalaxyObjectItem::`vftable'
	DD	FLAT:?FindFieldEntityGrp@ioItem@@MBEABVioHashString@@XZ
	DD	FLAT:?LoadProperty@ioGalaxyObjectItem@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?GetType@ioObjectItem@@UBE?AW4ItemType@ioItem@@XZ
	DD	FLAT:?Clone@ioGalaxyObjectItem@@UAEPAVioItem@@XZ
	DD	FLAT:?UseCreateIndexItem@ioItem@@UBE_NXZ
	DD	FLAT:?GetSetFocusColor@ioItem@@UBEKXZ
	DD	FLAT:?Initialize@ioItem@@UAEXABVioHashString@@PAVioPlayStage@@@Z
	DD	FLAT:?InitializeBeforeEquip@ioItem@@UAEXABVioHashString@@PAVioPlayStage@@@Z
	DD	FLAT:?OnEquiped@ioGalaxyObjectItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?OnReleased@ioGalaxyObjectItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetExtendEquipEffect@ioItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ReleaseExtendEquipEffect@ioItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?AddGlowLine@ioWeaponItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?RemoveGlowLine@ioWeaponItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?GetTargetName@ioItem@@UAE?AVioHashString@@XZ
	DD	FLAT:?ClearTarget@ioItem@@UAEXXZ
	DD	FLAT:?SetItemType@ioWeaponItem@@UAEXXZ
	DD	FLAT:?UpdateExtraData@ioItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckWeaponDefenseState@ioItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckWoundedState@ioItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetVisible@ioItem@@UAEXPAVioBaseChar@@_N@Z
	DD	FLAT:?UpdateSkillGauge@ioItem@@UAEXPAVioBaseChar@@M_N@Z
	DD	FLAT:?IsEnableExtraGauge@ioItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetExtraGauge@ioItem@@UAEMXZ
	DD	FLAT:?ReduceNeedGauge@ioItem@@UAEXMPAVioBaseChar@@@Z
	DD	FLAT:?GetCurBullet@ioItem@@UAEHXZ
	DD	FLAT:?GetMaxBullet@ioItem@@UAEHXZ
	DD	FLAT:?SetCurBullet@ioItem@@UAEXH@Z
	DD	FLAT:?GetCurSecoundBullet@ioItem@@UAEHXZ
	DD	FLAT:?GetMaxSecoundBullet@ioItem@@UAEHXZ
	DD	FLAT:?SetCurSecoundBullet@ioItem@@UAEXH@Z
	DD	FLAT:?GetGrowthInfoNum@ioObjectItem@@UBEHH@Z
	DD	FLAT:?GetGrowthInfoNumByType@ioObjectItem@@UBEHHAAH@Z
	DD	FLAT:?ClearCurChargeRateForSkill@ioItem@@UAEXXZ
	DD	FLAT:?GetChargeDamageRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeForceRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeBlowRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeRangeRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeSpeedRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeFloatRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeScaleRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeExplosionRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?GetChargeWoundedTimeRateForSkill@ioItem@@UAEMXZ
	DD	FLAT:?SetCurEquipEffect@ioItem@@UAEX_N@Z
	DD	FLAT:?SetCostume@ioItem@@UAEXH_N@Z
	DD	FLAT:??_EioGalaxyObjectItem@@UAEPAXI@Z
	DD	FLAT:?IsCanFire@ioAttackableItem@@UBE_NPBVioBaseChar@@H_N@Z
	DD	FLAT:?CallItemProcess@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetExtraInfoToWeapon@ioGalaxyObjectItem@@UAEXPAVioWeapon@@_N@Z
	DD	FLAT:?CheckChargeInfo@ioAttackableItem@@UAEXPAVioWeapon@@_N@Z
	DD	FLAT:?SetExtendDefenseState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckExtendDefenseState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckDefenseMoveAniState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetDodgeDefenseState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckDodgeDefenseState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ApplyDodgeDefenseState@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?SetDefenseAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckDefenseAttackState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ApplyDefenseAttackState@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?SetExtendDashState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckExtendDashState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetNormalAttack@ioAttackableItem@@UAEXPAVioBaseChar@@H@Z
	DD	FLAT:?CheckNormalAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@HMW4AttackType@@@Z
	DD	FLAT:?CheckJumpAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetJumpReloadState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetJumpReload@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckJumpReloadState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckJumpReloadReserve@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessJumpReloadState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ApplyJumpReload@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?OnItemGaugeOK@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?OnItemGaugeCancel@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?OnEndExtendDefense@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?OnEndNormalAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?OnEndExtendAttack@ioAttackableItem@@UAEXPAVioBaseChar@@_N@Z
	DD	FLAT:?OnEndExtendJump@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?FillNormalAttackExtraInfo@ioAttackableItem@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyNormalAttackExtraInfo@ioAttackableItem@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?CheckOnHand@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?CheckAimState@ioAttackableItem@@UAE_N_N@Z
	DD	FLAT:?SetAimState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?CheckLanding@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetNoneState@ioAttackableItem@@UAEXPAVioBaseChar@@H@Z
	DD	FLAT:?CheckExtendDefenseEnable@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsChargeAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsMoveAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsCanUpdateGauge@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsNoGhostWalk@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableAttackDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z
	DD	FLAT:?IsEnableItemDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z
	DD	FLAT:?IsEnableAttackRotateCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableChargeDefenseCheck@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?CheckAimJumpState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?GetJumppingAnimation@ioAttackableItem@@UBEABVioHashString@@XZ
	DD	FLAT:?GetExtendJumppingAnimation@ioAttackableItem@@UBEABVioHashString@@XZ
	DD	FLAT:?CheckRetreatState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetNextItemState@ioAttackableItem@@UAEXPAVioBaseChar@@0PAVioWeapon@@_NM@Z
	DD	FLAT:?WeaponWounded@ioWeaponItem@@UAEXPAVioWeapon@@PAVioBaseChar@@@Z
	DD	FLAT:?WeaponMapColDead@ioAttackableItem@@UAEXPAVioWeapon@@@Z
	DD	FLAT:?SetDefenceCounterState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsUseDefenceCounterAttack@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?ProcessDefenceCounterAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsUseDefenceCounterAttackEndDash@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?ProcessExtraJump@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetEndGrappling@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ClearKeyReserve@ioAttackableItem@@MAEXXZ
	DD	FLAT:?CheckReserve@ioAttackableItem@@MAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessReserveKeyInput@ioAttackableItem@@MAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetJumpState@ioAttackableItem@@UAEXXZ
	DD	FLAT:?SetJumpping@ioAttackableItem@@UAEXPAVioBaseChar@@_N@Z
	DD	FLAT:?ProcessJumpping@ioAttackableItem@@UAEXPAVioBaseChar@@M@Z
	DD	FLAT:?ProcessJumppingByNoNeedProcess@ioAttackableItem@@UAEXPAVioBaseChar@@M@Z
	DD	FLAT:?ProcessLanding@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessJumpAttack@ioAttackableItem@@UAEXPAVioBaseChar@@M@Z
	DD	FLAT:?ProcessAimJump@ioAttackableItem@@UAE_NPAVioBaseChar@@M@Z
	DD	FLAT:?ApplyJump@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?ApplyDash@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?ApplyCounterAttack@ioAttackableItem@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?CheckComboJumpAttack@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetFlashJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetComboFlashAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetCollectJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetPowerChargeJumpAttack@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetAttackSpeedRate@ioAttackableItem@@UBEMXZ
	DD	FLAT:?GetExtraJumpSpeedRate@ioAttackableItem@@UBEMABUD3DXVECTOR3@@ABUD3DXQUATERNION@@@Z
	DD	FLAT:?IsEnableExtendJump@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?RecevieExtendJumpUse@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?HasAniFile@ioAttackableItem@@UBE_NW4AttackType@@H@Z
	DD	FLAT:?HasEndAniFile@ioAttackableItem@@UBE_NW4AttackType@@H@Z
	DD	FLAT:?GetAttackAttribute@ioGalaxyObjectItem@@UBEPBUAttackAttribute@@W4AttackType@@H@Z
	DD	FLAT:?GetAniFile@ioAttackableItem@@UBEABVioHashString@@W4AttackType@@H@Z
	DD	FLAT:?GetAttackAniRate@ioAttackableItem@@UBEMW4AttackType@@H@Z
	DD	FLAT:?GetEndAniFile@ioAttackableItem@@UBEABVioHashString@@W4AttackType@@H@Z
	DD	FLAT:?GetAttackEndAniRate@ioAttackableItem@@UBEMW4AttackType@@H@Z
	DD	FLAT:?GetAttackAttributeIdx@ioAttackableItem@@UBEABV?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@W4AttackType@@H@Z
	DD	FLAT:?GetForceInfoList@ioAttackableItem@@UBEABV?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@W4AttackType@@H@Z
	DD	FLAT:?GetAttackPreDelay@ioAttackableItem@@UBEKW4AttackType@@H@Z
	DD	FLAT:?GetAttackAnimationDelay@ioAttackableItem@@UBEKW4AttackType@@H@Z
	DD	FLAT:?GetMaxCombo@ioAttackableItem@@UBEHXZ
	DD	FLAT:?GetExtraDashAttackMax@ioAttackableItem@@UBEHXZ
	DD	FLAT:?HasJumpEndAnimation@ioAttackableItem@@UBE_N_NPAVioBaseChar@@@Z
	DD	FLAT:?GetJumpEndAnimation@ioAttackableItem@@UBEABVioHashString@@_NPAVioBaseChar@@@Z
	DD	FLAT:?ClearCancelInfo@ioAttackableItem@@MAEXXZ
	DD	FLAT:?CheckCancelReserve@ioAttackableItem@@MAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetCurAttackAniForInputJump@ioAttackableItem@@MAEXABVioHashString@@M@Z
	DD	FLAT:?ProcessCancel@ioAttackableItem@@MAE_NPAVioBaseChar@@@Z
	DD	FLAT:?ProcessCancelBySpeicalDash@ioAttackableItem@@MAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetCurAttackAniForInputDashS@ioAttackableItem@@UAEXABVioHashString@@M@Z
	DD	FLAT:?CheckCancelReserveByConditionalSpecialDash@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsConditionalSpecialDashReserve@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetChangeConditionalSpecialDash@ioAttackableItem@@UAEXPAVioBaseChar@@W4DirKeyInput@ioUserKeyInput@@H@Z
	DD	FLAT:?CheckChangeWereWolfState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetChangeWereWolfState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckReleaseWereWolfState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?ReleseWereWolfState@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ReleseWereWolfStateByOwner@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IncreaseChangeDamage@ioAttackableItem@@UAEXMH_N@Z
	DD	FLAT:?IncreaseChangeDamageByWeapon@ioAttackableItem@@UAEXM@Z
	DD	FLAT:?CheckIncreaseChangeDamage@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?DecreaseChangeDamage@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableActionStopDelay@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?SetExtraGaugeTypeByWeapon@ioAttackableItem@@UAEXPAVioBaseChar@@HHM@Z
	DD	FLAT:?SetUseExtraGauge@ioAttackableItem@@UAEXM@Z
	DD	FLAT:?InitExtraGauge@ioAttackableItem@@UAEXXZ
	DD	FLAT:?MaxExtraGauge@ioAttackableItem@@UAEXXZ
	DD	FLAT:?GetMaxExtraGauge@ioAttackableItem@@UAEMXZ
	DD	FLAT:?GetCurExtraGauge@ioAttackableItem@@UAEMXZ
	DD	FLAT:?SetCurExtraGauge@ioAttackableItem@@UAEXM@Z
	DD	FLAT:?GetAutoTargetValue@ioAttackableItem@@UAEXPAVioBaseChar@@AAM11W4AutoTargetType@@@Z
	DD	FLAT:?ClearAirJump@ioAttackableItem@@UAEXXZ
	DD	FLAT:?SetAirJump@ioAttackableItem@@UAEXPAVioBaseChar@@HM@Z
	DD	FLAT:?CheckAirJump@ioAttackableItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsAutoTarget@ioAttackableItem@@UBE_NXZ
	DD	FLAT:?EquipObjectItemByAttakable@ioAttackableItem@@UAEXPAVioBaseChar@@PAVioItem@@@Z
	DD	FLAT:?ReleaseObjectItemByAttack@ioAttackableItem@@UAEXPAVioBaseChar@@PAVioItem@@@Z
	DD	FLAT:?IsBuffFlyChange@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetAttackStateText@ioAttackableItem@@UBEPBDXZ
	DD	FLAT:?SetJumpLandingExtraState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsWoundAfterUseExtendState@ioAttackableItem@@UAE_NXZ
	DD	FLAT:?CheckWoundAfterUseExtendState@ioAttackableItem@@UAE_NPAVioBaseChar@@W4BlowTargetType@@@Z
	DD	FLAT:?IsCharSkipState@ioAttackableItem@@UAE_NPBVioBaseChar@@@Z
	DD	FLAT:?ReleaseObjectState@ioWeaponItem@@UAEXPAVioBaseChar@@PAVioObjectItem@@@Z
	DD	FLAT:?IsCmdCheckEnableTime@ioWeaponItem@@UAE_NXZ
	DD	FLAT:?IsCmdSuccess@ioWeaponItem@@UAE_NXZ
	DD	FLAT:?IsOneTimeWeaponItem@ioObjectItem@@UBE_NXZ
	DD	FLAT:?GetEquipMesh@ioObjectItem@@UBEABVioHashString@@PAVioBaseChar@@@Z
	DD	FLAT:?IsCanSendControl@ioWeaponItem@@UBE_NXZ
	DD	FLAT:?GetSubType@ioObjectItem@@UBE?AW4WeaponSubType@ioWeaponItem@@XZ
	DD	FLAT:?IsEnableDash@ioObjectItem@@UBE_NXZ
	DD	FLAT:?IsEnableDefense@ioObjectItem@@UBE_NXZ
	DD	FLAT:?IsProtectState@ioObjectItem@@UAE_NXZ
	DD	FLAT:?EnableReduceGaugeOnSwitchBuff@ioObjectItem@@UAE_NXZ
	DD	FLAT:?GetObjectSubType@ioGalaxyObjectItem@@UBE?AW4ObjectSubType@ioObjectItem@@XZ
	DD	FLAT:?CheckAttackCount@ioObjectItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckActiveCount@ioObjectItem@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsAttackComboInit@ioObjectItem@@UBE_NXZ
	DD	FLAT:?OnProcessState@ioGalaxyObjectItem@@UAEXPAVioPlayStage@@PAVioBaseChar@@@Z
	DD	FLAT:?CheckReleaseProcess@ioObjectItem@@UAE_NPAVioPlayStage@@PAVioBaseChar@@@Z
	DD	FLAT:?CheckReleaseByNormalAttack@ioObjectItem@@UAE_NPAVioPlayStage@@PAVioBaseChar@@@Z
	DD	FLAT:?CheckObjectReleaseSelectionBuff@ioObjectItem@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?SetObjectReleaseTCPSend@ioObjectItem@@UAEX_N@Z
	DD	FLAT:?IsObjectReleaseTCPSend@ioObjectItem@@UAE_NXZ
	DD	FLAT:?IsNormalAttackStop@ioObjectItem@@UAE_NXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioGalaxyObjectItem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioGalaxyObjectItem@@QAE@XZ$0
__ehfuncinfo$??0ioGalaxyObjectItem@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioGalaxyObjectItem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogalaxyobjectitem.cpp
xdata$x	ENDS
;	COMDAT ??0ioGalaxyObjectItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioGalaxyObjectItem@@QAE@XZ PROC			; ioGalaxyObjectItem::ioGalaxyObjectItem, COMDAT
; _this$ = ecx

; 15   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioGalaxyObjectItem@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioObjectItem@@QAE@XZ	; ioObjectItem::ioObjectItem
  00016	33 ff		 xor	 edi, edi
  00018	8d 8e 34 1b 00
	00		 lea	 ecx, DWORD PTR [esi+6964]
  0001e	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00021	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioGalaxyObjectItem@@6B@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ
  0002d	89 be 50 1b 00
	00		 mov	 DWORD PTR [esi+6992], edi
  00033	89 be 54 1b 00
	00		 mov	 DWORD PTR [esi+6996], edi
  00039	89 be 58 1b 00
	00		 mov	 DWORD PTR [esi+7000], edi
  0003f	89 be 60 1b 00
	00		 mov	 DWORD PTR [esi+7008], edi
  00045	89 be 64 1b 00
	00		 mov	 DWORD PTR [esi+7012], edi
  0004b	89 be 68 1b 00
	00		 mov	 DWORD PTR [esi+7016], edi

; 16   : }

  00051	8b c6		 mov	 eax, esi
  00053	e8 00 00 00 00	 call	 __EH_epilog3
  00058	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioGalaxyObjectItem@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioObjectItem@@UAE@XZ	; ioObjectItem::~ioObjectItem
__ehhandler$??0ioGalaxyObjectItem@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioGalaxyObjectItem@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioGalaxyObjectItem@@QAE@XZ ENDP			; ioGalaxyObjectItem::ioGalaxyObjectItem
PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioitem.h
_TEXT	ENDS
;	COMDAT ?IsEnableExtraGauge@ioItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?IsEnableExtraGauge@ioItem@@UAE_NPAVioBaseChar@@@Z PROC	; ioItem::IsEnableExtraGauge, COMDAT
; _this$ = ecx

; 375  : 	virtual bool IsEnableExtraGauge( ioBaseChar *pChar ) { return true; }

  00000	b0 01		 mov	 al, 1
  00002	c2 04 00	 ret	 4
?IsEnableExtraGauge@ioItem@@UAE_NPAVioBaseChar@@@Z ENDP	; ioItem::IsEnableExtraGauge
_TEXT	ENDS
PUBLIC	__real@4f800000
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioitem.h
CONST	ENDS
;	COMDAT ?GetExtraGauge@ioItem@@UAEMXZ
_TEXT	SEGMENT
tv64 = -4						; size = 4
?GetExtraGauge@ioItem@@UAEMXZ PROC			; ioItem::GetExtraGauge, COMDAT
; _this$ = ecx

; 376  : 	virtual float GetExtraGauge() { return FLOAT1; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	b8 01 00 00 00	 mov	 eax, 1
  00009	89 45 fc	 mov	 DWORD PTR tv64[ebp], eax
  0000c	db 45 fc	 fild	 DWORD PTR tv64[ebp]
  0000f	85 c0		 test	 eax, eax
  00011	79 06		 jns	 SHORT $LN5@GetExtraGa
  00013	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN5@GetExtraGa:
  00019	c9		 leave
  0001a	c3		 ret	 0
?GetExtraGauge@ioItem@@UAEMXZ ENDP			; ioItem::GetExtraGauge
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackableitem.h
_TEXT	ENDS
;	COMDAT ?CheckOnHand@ioAttackableItem@@UAE_NXZ
_TEXT	SEGMENT
?CheckOnHand@ioAttackableItem@@UAE_NXZ PROC		; ioAttackableItem::CheckOnHand, COMDAT
; _this$ = ecx

; 429  : 	virtual bool CheckOnHand() { return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?CheckOnHand@ioAttackableItem@@UAE_NXZ ENDP		; ioAttackableItem::CheckOnHand
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?CheckAimState@ioAttackableItem@@UAE_N_N@Z
_TEXT	SEGMENT
_bAimMove$ = 8						; size = 1
?CheckAimState@ioAttackableItem@@UAE_N_N@Z PROC		; ioAttackableItem::CheckAimState, COMDAT
; _this$ = ecx

; 430  : 	virtual bool CheckAimState( bool bAimMove = false ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?CheckAimState@ioAttackableItem@@UAE_N_N@Z ENDP		; ioAttackableItem::CheckAimState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?SetAimState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?SetAimState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioAttackableItem::SetAimState, COMDAT
; _this$ = ecx

; 431  : 	virtual bool SetAimState( ioBaseChar *pChar ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?SetAimState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioAttackableItem::SetAimState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?CheckExtendDefenseEnable@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?CheckExtendDefenseEnable@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioAttackableItem::CheckExtendDefenseEnable, COMDAT
; _this$ = ecx

; 434  : 	virtual bool CheckExtendDefenseEnable( ioBaseChar *pChar ) { return true; }

  00000	b0 01		 mov	 al, 1
  00002	c2 04 00	 ret	 4
?CheckExtendDefenseEnable@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioAttackableItem::CheckExtendDefenseEnable
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsChargeAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsChargeAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioAttackableItem::IsChargeAttackState, COMDAT
; _this$ = ecx

; 436  : 	virtual bool IsChargeAttackState( ioBaseChar *pOwner ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsChargeAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioAttackableItem::IsChargeAttackState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsMoveAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsMoveAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioAttackableItem::IsMoveAttackState, COMDAT
; _this$ = ecx

; 437  : 	virtual bool IsMoveAttackState( ioBaseChar *pOwner ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsMoveAttackState@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioAttackableItem::IsMoveAttackState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsNoGhostWalk@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsNoGhostWalk@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioAttackableItem::IsNoGhostWalk, COMDAT
; _this$ = ecx

; 439  : 	virtual bool IsNoGhostWalk( ioBaseChar *pOwner ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsNoGhostWalk@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioAttackableItem::IsNoGhostWalk
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsEnableAttackDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_bCheck$ = 12						; size = 1
?IsEnableAttackDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z PROC ; ioAttackableItem::IsEnableAttackDashCheck, COMDAT
; _this$ = ecx

; 441  : 	virtual bool IsEnableAttackDashCheck( ioBaseChar *pOwner, bool bCheck ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 08 00	 ret	 8
?IsEnableAttackDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z ENDP ; ioAttackableItem::IsEnableAttackDashCheck
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsEnableItemDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_bCheck$ = 12						; size = 1
?IsEnableItemDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z PROC ; ioAttackableItem::IsEnableItemDashCheck, COMDAT
; _this$ = ecx

; 442  : 	virtual bool IsEnableItemDashCheck( ioBaseChar *pOwner, bool bCheck ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 08 00	 ret	 8
?IsEnableItemDashCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@_N@Z ENDP ; ioAttackableItem::IsEnableItemDashCheck
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsEnableAttackRotateCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsEnableAttackRotateCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z PROC ; ioAttackableItem::IsEnableAttackRotateCheck, COMDAT
; _this$ = ecx

; 443  : 	virtual bool IsEnableAttackRotateCheck( ioBaseChar *pOwner ) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsEnableAttackRotateCheck@ioAttackableItem@@UAE_NPAVioBaseChar@@@Z ENDP ; ioAttackableItem::IsEnableAttackRotateCheck
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsEnableChargeDefenseCheck@ioAttackableItem@@UAE_NXZ
_TEXT	SEGMENT
?IsEnableChargeDefenseCheck@ioAttackableItem@@UAE_NXZ PROC ; ioAttackableItem::IsEnableChargeDefenseCheck, COMDAT
; _this$ = ecx

; 444  : 	virtual bool IsEnableChargeDefenseCheck() { return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsEnableChargeDefenseCheck@ioAttackableItem@@UAE_NXZ ENDP ; ioAttackableItem::IsEnableChargeDefenseCheck
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsUseDefenceCounterAttackEndDash@ioAttackableItem@@UAE_NXZ
_TEXT	SEGMENT
?IsUseDefenceCounterAttackEndDash@ioAttackableItem@@UAE_NXZ PROC ; ioAttackableItem::IsUseDefenceCounterAttackEndDash, COMDAT
; _this$ = ecx

; 464  : 	virtual bool IsUseDefenceCounterAttackEndDash() { return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsUseDefenceCounterAttackEndDash@ioAttackableItem@@UAE_NXZ ENDP ; ioAttackableItem::IsUseDefenceCounterAttackEndDash
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsAutoTarget@ioAttackableItem@@UBE_NXZ
_TEXT	SEGMENT
?IsAutoTarget@ioAttackableItem@@UBE_NXZ PROC		; ioAttackableItem::IsAutoTarget, COMDAT
; _this$ = ecx

; 707  : 	virtual bool IsAutoTarget() const { return true; }

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?IsAutoTarget@ioAttackableItem@@UBE_NXZ ENDP		; ioAttackableItem::IsAutoTarget
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsWoundAfterUseExtendState@ioAttackableItem@@UAE_NXZ
_TEXT	SEGMENT
?IsWoundAfterUseExtendState@ioAttackableItem@@UAE_NXZ PROC ; ioAttackableItem::IsWoundAfterUseExtendState, COMDAT
; _this$ = ecx

; 724  : 	virtual bool IsWoundAfterUseExtendState(){ return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsWoundAfterUseExtendState@ioAttackableItem@@UAE_NXZ ENDP ; ioAttackableItem::IsWoundAfterUseExtendState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?CheckWoundAfterUseExtendState@ioAttackableItem@@UAE_NPAVioBaseChar@@W4BlowTargetType@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_eType$ = 12						; size = 4
?CheckWoundAfterUseExtendState@ioAttackableItem@@UAE_NPAVioBaseChar@@W4BlowTargetType@@@Z PROC ; ioAttackableItem::CheckWoundAfterUseExtendState, COMDAT
; _this$ = ecx

; 725  : 	virtual bool CheckWoundAfterUseExtendState( ioBaseChar* pOwner, BlowTargetType eType ){ return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 08 00	 ret	 8
?CheckWoundAfterUseExtendState@ioAttackableItem@@UAE_NPAVioBaseChar@@W4BlowTargetType@@@Z ENDP ; ioAttackableItem::CheckWoundAfterUseExtendState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsCharSkipState@ioAttackableItem@@UAE_NPBVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsCharSkipState@ioAttackableItem@@UAE_NPBVioBaseChar@@@Z PROC ; ioAttackableItem::IsCharSkipState, COMDAT
; _this$ = ecx

; 728  : 	virtual bool IsCharSkipState( const ioBaseChar* pOwner ){ return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsCharSkipState@ioAttackableItem@@UAE_NPBVioBaseChar@@@Z ENDP ; ioAttackableItem::IsCharSkipState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioobjectitem.h
_TEXT	ENDS
;	COMDAT ?SetObjectReleaseTCPSend@ioObjectItem@@UAEX_N@Z
_TEXT	SEGMENT
_bSend$ = 8						; size = 1
?SetObjectReleaseTCPSend@ioObjectItem@@UAEX_N@Z PROC	; ioObjectItem::SetObjectReleaseTCPSend, COMDAT
; _this$ = ecx

; 163  : 	virtual void SetObjectReleaseTCPSend( bool bSend ){ m_bObjectReleaseTCPSend = bSend; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _bSend$[ebp]
  00006	88 81 8c 19 00
	00		 mov	 BYTE PTR [ecx+6540], al
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetObjectReleaseTCPSend@ioObjectItem@@UAEX_N@Z ENDP	; ioObjectItem::SetObjectReleaseTCPSend
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsObjectReleaseTCPSend@ioObjectItem@@UAE_NXZ
_TEXT	SEGMENT
?IsObjectReleaseTCPSend@ioObjectItem@@UAE_NXZ PROC	; ioObjectItem::IsObjectReleaseTCPSend, COMDAT
; _this$ = ecx

; 164  : 	virtual bool IsObjectReleaseTCPSend(){ return m_bObjectReleaseTCPSend; }

  00000	8a 81 8c 19 00
	00		 mov	 al, BYTE PTR [ecx+6540]
  00006	c3		 ret	 0
?IsObjectReleaseTCPSend@ioObjectItem@@UAE_NXZ ENDP	; ioObjectItem::IsObjectReleaseTCPSend
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsNormalAttackStop@ioObjectItem@@UAE_NXZ
_TEXT	SEGMENT
?IsNormalAttackStop@ioObjectItem@@UAE_NXZ PROC		; ioObjectItem::IsNormalAttackStop, COMDAT
; _this$ = ecx

; 167  : 	virtual bool IsNormalAttackStop(){ return false; }	

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsNormalAttackStop@ioObjectItem@@UAE_NXZ ENDP		; ioObjectItem::IsNormalAttackStop
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	??0ioGalaxyObjectItem@@QAE@ABV0@@Z		; ioGalaxyObjectItem::ioGalaxyObjectItem
EXTRN	??0ioObjectItem@@QAE@ABV0@@Z:PROC		; ioObjectItem::ioObjectItem
;	COMDAT __real@3f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogalaxyobjectitem.cpp
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioGalaxyObjectItem@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioGalaxyObjectItem@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioGalaxyObjectItem@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioGalaxyObjectItem@@QAE@ABV0@@Z$2
__ehfuncinfo$??0ioGalaxyObjectItem@@QAE@ABV0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0ioGalaxyObjectItem@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioGalaxyObjectItem@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioGalaxyObjectItem@@QAE@ABV0@@Z PROC			; ioGalaxyObjectItem::ioGalaxyObjectItem, COMDAT
; _this$ = ecx

; 23   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioGalaxyObjectItem@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0ioObjectItem@@QAE@ABV0@@Z ; ioObjectItem::ioObjectItem
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	8d 87 34 1b 00
	00		 lea	 eax, DWORD PTR [edi+6964]
  00024	50		 push	 eax
  00025	8d 8e 34 1b 00
	00		 lea	 ecx, DWORD PTR [esi+6964]
  0002b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioGalaxyObjectItem@@6B@
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00037	8d 87 50 1b 00
	00		 lea	 eax, DWORD PTR [edi+6992]
  0003d	50		 push	 eax
  0003e	8d 8e 50 1b 00
	00		 lea	 ecx, DWORD PTR [esi+6992]
  00044	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00048	e8 00 00 00 00	 call	 ??0?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
  0004d	81 c7 60 1b 00
	00		 add	 edi, 7008		; 00001b60H
  00053	57		 push	 edi
  00054	8d 8e 60 1b 00
	00		 lea	 ecx, DWORD PTR [esi+7008]
  0005a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0005e	e8 00 00 00 00	 call	 ??0?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >

; 24   : 	m_fCurrScaleRate		= 1.0f;

  00063	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000

; 25   : 	m_GatherMeteoEffectID	= 0;

  0006b	83 a6 44 1b 00
	00 00		 and	 DWORD PTR [esi+6980], 0
  00072	f3 0f 11 86 48
	1b 00 00	 movss	 DWORD PTR [esi+6984], xmm0

; 26   : 	m_fHeightOffSet			= 0;

  0007a	0f 57 c0	 xorps	 xmm0, xmm0
  0007d	f3 0f 11 86 4c
	1b 00 00	 movss	 DWORD PTR [esi+6988], xmm0

; 27   : }

  00085	8b c6		 mov	 eax, esi
  00087	e8 00 00 00 00	 call	 __EH_epilog3
  0008c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioGalaxyObjectItem@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioObjectItem@@UAE@XZ	; ioObjectItem::~ioObjectItem
__unwindfunclet$??0ioGalaxyObjectItem@@QAE@ABV0@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 34 1b 00
	00		 add	 ecx, 6964		; 00001b34H
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioGalaxyObjectItem@@QAE@ABV0@@Z$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 50 1b 00
	00		 add	 ecx, 6992		; 00001b50H
  00020	e9 00 00 00 00	 jmp	 ??1?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@XZ ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::~vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
__ehhandler$??0ioGalaxyObjectItem@@QAE@ABV0@@Z:
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioGalaxyObjectItem@@QAE@ABV0@@Z
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioGalaxyObjectItem@@QAE@ABV0@@Z ENDP			; ioGalaxyObjectItem::ioGalaxyObjectItem
PUBLIC	??1ioGalaxyObjectItem@@UAE@XZ			; ioGalaxyObjectItem::~ioGalaxyObjectItem
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??1ioGalaxyObjectItem@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioGalaxyObjectItem@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioGalaxyObjectItem@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1ioGalaxyObjectItem@@UAE@XZ$2
__ehfuncinfo$??1ioGalaxyObjectItem@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1ioGalaxyObjectItem@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogalaxyobjectitem.cpp
xdata$x	ENDS
;	COMDAT ??1ioGalaxyObjectItem@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioGalaxyObjectItem@@UAE@XZ PROC			; ioGalaxyObjectItem::~ioGalaxyObjectItem, COMDAT
; _this$ = ecx

; 30   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioGalaxyObjectItem@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioGalaxyObjectItem@@6B@

; 31   : }

  00017	8d 8e 60 1b 00
	00		 lea	 ecx, DWORD PTR [esi+7008]
  0001d	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00024	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEXXZ ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Tidy
  00029	8d 8e 50 1b 00
	00		 lea	 ecx, DWORD PTR [esi+6992]
  0002f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00033	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEXXZ ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Tidy
  00038	8d 8e 34 1b 00
	00		 lea	 ecx, DWORD PTR [esi+6964]
  0003e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00048	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ??1ioObjectItem@@UAE@XZ	; ioObjectItem::~ioObjectItem
  00053	e8 00 00 00 00	 call	 __EH_epilog3
  00058	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioGalaxyObjectItem@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioObjectItem@@UAE@XZ	; ioObjectItem::~ioObjectItem
__unwindfunclet$??1ioGalaxyObjectItem@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 34 1b 00
	00		 add	 ecx, 6964		; 00001b34H
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioGalaxyObjectItem@@UAE@XZ$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 50 1b 00
	00		 add	 ecx, 6992		; 00001b50H
  00020	e9 00 00 00 00	 jmp	 ??1?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE@XZ ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::~vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >
__ehhandler$??1ioGalaxyObjectItem@@UAE@XZ:
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioGalaxyObjectItem@@UAE@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioGalaxyObjectItem@@UAE@XZ ENDP			; ioGalaxyObjectItem::~ioGalaxyObjectItem
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioGalaxyObjectItem@@UAEPAVioItem@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioGalaxyObjectItem@@UAEPAVioItem@@XZ$0
__ehfuncinfo$?Clone@ioGalaxyObjectItem@@UAEPAVioItem@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioGalaxyObjectItem@@UAEPAVioItem@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioGalaxyObjectItem@@UAEPAVioItem@@XZ
_TEXT	SEGMENT
$T557053 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioGalaxyObjectItem@@UAEPAVioItem@@XZ PROC	; ioGalaxyObjectItem::Clone, COMDAT
; _this$ = ecx

; 92   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioGalaxyObjectItem@@UAEPAVioItem@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 93   : 	return new ioGalaxyObjectItem( *this );

  0000e	68 74 1b 00 00	 push	 7028			; 00001b74H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T557053[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioGalaxyObjectItem@@QAE@ABV0@@Z ; ioGalaxyObjectItem::ioGalaxyObjectItem
$LN3@Clone:

; 94   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioGalaxyObjectItem@@UAEPAVioItem@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T557053[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioGalaxyObjectItem@@UAEPAVioItem@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioGalaxyObjectItem@@UAEPAVioItem@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioGalaxyObjectItem@@UAEPAVioItem@@XZ ENDP	; ioGalaxyObjectItem::Clone
PUBLIC	?push_back@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXABUGalaxyAttack@ioGalaxyObjectItem@@@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXABUGalaxyAttack@ioGalaxyObjectItem@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXABUGalaxyAttack@ioGalaxyObjectItem@@@Z PROC ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 37		 jae	 SHORT $LN4@push_back
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 31		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 58		 push	 88			; 00000058H
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEXI@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00031	6b ff 58	 imul	 edi, 88			; 00000058H
  00034	03 3e		 add	 edi, DWORD PTR [esi]
  00036	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00039	57		 push	 edi
  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@UGalaxyAttack@ioGalaxyObjectItem@@AAU34@@std@@YAXAAV?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@0@PAUGalaxyAttack@ioGalaxyObjectItem@@AAU23@@Z ; std::_Cons_val<std::allocator<ioGalaxyObjectItem::GalaxyAttack>,ioGalaxyObjectItem::GalaxyAttack,ioGalaxyObjectItem::GalaxyAttack &>
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00046	eb 19		 jmp	 SHORT $LN26@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00048	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0004b	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004d	6a 01		 push	 1
  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@IAEXI@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00056	57		 push	 edi
  00057	ff 76 04	 push	 DWORD PTR [esi+4]
  0005a	e8 00 00 00 00	 call	 ??$_Construct@UGalaxyAttack@ioGalaxyObjectItem@@ABU12@@std@@YAXPAUGalaxyAttack@ioGalaxyObjectItem@@ABU12@@Z ; std::_Construct<ioGalaxyObjectItem::GalaxyAttack,ioGalaxyObjectItem::GalaxyAttack const &>
  0005f	59		 pop	 ecx
  00060	59		 pop	 ecx
$LN26@push_back:

; 996  : 			++this->_Mylast;

  00061	83 46 04 58	 add	 DWORD PTR [esi+4], 88	; 00000058H
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
?push_back@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXABUGalaxyAttack@ioGalaxyObjectItem@@@Z ENDP ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::push_back
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioGalaxyObjectItem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioGalaxyObjectItem@@UAEPAXI@Z PROC			; ioGalaxyObjectItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioGalaxyObjectItem@@UAE@XZ ; ioGalaxyObjectItem::~ioGalaxyObjectItem
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@4
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@4:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioGalaxyObjectItem@@UAEPAXI@Z ENDP			; ioGalaxyObjectItem::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?LoadNoramlAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z ; ioGalaxyObjectItem::LoadNoramlAttribute
EXTRN	?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z:PROC ; LoadAttackAttribute
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogalaxyobjectitem.cpp
xdata$x	SEGMENT
__unwindtable$?LoadNoramlAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadNoramlAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z$0
__ehfuncinfo$?LoadNoramlAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadNoramlAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?LoadNoramlAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_Attack$548543 = -436					; size = 88
$T557167 = -348						; size = 4
tv1117 = -348						; size = 4
tv3321 = -344						; size = 4
_szBuf$ = -340						; size = 260
___encStr$548857 = -80					; size = 27
___encStr$548705 = -48					; size = 27
__k$557214 = -40					; size = 17
___encStr$548547 = -40					; size = 17
__$EHRec$ = -12						; size = 12
_rkLoader$ = 8						; size = 4
?LoadNoramlAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z PROC ; ioGalaxyObjectItem::LoadNoramlAttribute, COMDAT
; _this$ = ecx

; 46   : {

  00000	68 a8 01 00 00	 push	 424			; 000001a8H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?LoadNoramlAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]
  00012	8b f1		 mov	 esi, ecx

; 47   : 	m_NormalAttributeList.clear();

  00014	8b 86 54 1b 00
	00		 mov	 eax, DWORD PTR [esi+6996]
  0001a	8b 8e 50 1b 00
	00		 mov	 ecx, DWORD PTR [esi+6992]
  00020	50		 push	 eax
  00021	51		 push	 ecx
  00022	8d 85 a4 fe ff
	ff		 lea	 eax, DWORD PTR $T557167[ebp]
  00028	50		 push	 eax
  00029	8d 8e 50 1b 00
	00		 lea	 ecx, DWORD PTR [esi+6992]
  0002f	e8 00 00 00 00	 call	 ?erase@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@0@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::erase

; 48   : 
; 49   : 	int iCount = rkLoader.LoadInt_e( "normal_max_count", 0 );

  00034	33 db		 xor	 ebx, ebx
  00036	6a 04		 push	 4
  00038	c7 45 d8 83 83
	99 87		 mov	 DWORD PTR __k$557214[ebp], -2019982461 ; 87998383H
  0003f	c7 45 dc 8c 80
	b4 87		 mov	 DWORD PTR __k$557214[ebp+4], -2018213748 ; 87b4808cH
  00046	c7 45 e0 8c 94
	b4 89		 mov	 DWORD PTR __k$557214[ebp+8], -1984654196 ; 89b4948cH
  0004d	c7 45 e4 82 99
	85 9e		 mov	 DWORD PTR __k$557214[ebp+12], -1635411582 ; 9e859982H
  00054	8d 45 d8	 lea	 eax, DWORD PTR __k$557214[ebp]
  00057	88 5d e8	 mov	 BYTE PTR __k$557214[ebp+16], bl
  0005a	59		 pop	 ecx
$LL425@LoadNoraml:
  0005b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00061	83 c0 04	 add	 eax, 4
  00064	49		 dec	 ecx
  00065	75 f4		 jne	 SHORT $LL425@LoadNoraml
  00067	53		 push	 ebx
  00068	8d 45 d8	 lea	 eax, DWORD PTR __k$557214[ebp]
  0006b	50		 push	 eax
  0006c	8b cf		 mov	 ecx, edi
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 50   : 
; 51   : 	char szBuf[MAX_PATH];
; 52   : 	for( int i = 0; i < iCount; ++i )

  00074	3b c3		 cmp	 eax, ebx
  00076	0f 8e d7 01 00
	00		 jle	 $LN298@LoadNoraml

; 48   : 
; 49   : 	int iCount = rkLoader.LoadInt_e( "normal_max_count", 0 );

  0007c	c7 85 a8 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv3321[ebp], 1
  00086	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv1117[ebp], eax
$LL300@LoadNoraml:

; 53   : 	{
; 54   : 		GalaxyAttack Attack;

  0008c	8d 8d 4c fe ff
	ff		 lea	 ecx, DWORD PTR _Attack$548543[ebp]
  00092	e8 00 00 00 00	 call	 ??0GalaxyAttack@ioGalaxyObjectItem@@QAE@XZ ; ioGalaxyObjectItem::GalaxyAttack::GalaxyAttack
  00097	6a 04		 push	 4
  00099	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 55   : 		sprintf_s_e( szBuf, "normal_charged%d", i+1 );

  0009c	c7 45 d8 83 83
	99 87		 mov	 DWORD PTR ___encStr$548547[ebp], -2019982461 ; 87998383H
  000a3	c7 45 dc 8c 80
	b4 89		 mov	 DWORD PTR ___encStr$548547[ebp+4], -1984659316 ; 89b4808cH
  000aa	c7 45 e0 85 8d
	99 8d		 mov	 DWORD PTR ___encStr$548547[ebp+8], -1919316603 ; 8d998d85H
  000b1	c7 45 e4 88 88
	ce 8e		 mov	 DWORD PTR ___encStr$548547[ebp+12], -1899067256 ; 8ece8888H
  000b8	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$548547[ebp]
  000bb	88 5d e8	 mov	 BYTE PTR ___encStr$548547[ebp+16], bl
  000be	59		 pop	 ecx
$LL433@LoadNoraml:
  000bf	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000c5	83 c0 04	 add	 eax, 4
  000c8	49		 dec	 ecx
  000c9	75 f4		 jne	 SHORT $LL433@LoadNoraml
  000cb	ff b5 a8 fe ff
	ff		 push	 DWORD PTR tv3321[ebp]
  000d1	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$548547[ebp]
  000d4	50		 push	 eax
  000d5	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAE@@@YAHAAY0BAE@DPBDZZ ; sprintf_s<260>

; 56   : 		LoadAttackAttribute( szBuf, Attack.m_Attribute, rkLoader );

  000e1	57		 push	 edi
  000e2	8d 85 4c fe ff
	ff		 lea	 eax, DWORD PTR _Attack$548543[ebp]
  000e8	50		 push	 eax
  000e9	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000ef	50		 push	 eax
  000f0	e8 00 00 00 00	 call	 ?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z ; LoadAttackAttribute
  000f5	83 c4 18	 add	 esp, 24			; 00000018H
  000f8	6a 06		 push	 6

; 57   : 
; 58   : 		sprintf_s_e( szBuf, "normal_charged%d_range_min", i+1 );

  000fa	c7 45 d0 83 83
	99 87		 mov	 DWORD PTR ___encStr$548705[ebp], -2019982461 ; 87998383H
  00101	c7 45 d4 8c 80
	b4 89		 mov	 DWORD PTR ___encStr$548705[ebp+4], -1984659316 ; 89b4808cH
  00108	c7 45 d8 85 8d
	99 8d		 mov	 DWORD PTR ___encStr$548705[ebp+8], -1919316603 ; 8d998d85H
  0010f	c7 45 dc 88 88
	ce 8e		 mov	 DWORD PTR ___encStr$548705[ebp+12], -1899067256 ; 8ece8888H
  00116	c7 45 e0 b2 9e
	8a 84		 mov	 DWORD PTR ___encStr$548705[ebp+16], -2071290190 ; 848a9eb2H
  0011d	c7 45 e4 8a 89
	b4 87		 mov	 DWORD PTR ___encStr$548705[ebp+20], -2018211446 ; 87b4898aH
  00124	66 c7 45 e8 84
	82		 mov	 WORD PTR ___encStr$548705[ebp+24], 33412 ; 00008284H
  0012a	8d 45 d0	 lea	 eax, DWORD PTR ___encStr$548705[ebp]
  0012d	88 5d ea	 mov	 BYTE PTR ___encStr$548705[ebp+26], bl
  00130	59		 pop	 ecx
$LL441@LoadNoraml:
  00131	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00137	83 c0 04	 add	 eax, 4
  0013a	49		 dec	 ecx
  0013b	75 f4		 jne	 SHORT $LL441@LoadNoraml
  0013d	6a 18		 push	 24			; 00000018H
  0013f	58		 pop	 eax
$LL438@LoadNoraml:
  00140	8b c8		 mov	 ecx, eax
  00142	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00148	79 05		 jns	 SHORT $LN474@LoadNoraml
  0014a	49		 dec	 ecx
  0014b	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0014e	41		 inc	 ecx
$LN474@LoadNoraml:
  0014f	b2 ed		 mov	 dl, -19			; ffffffedH
  00151	2a d1		 sub	 dl, cl
  00153	30 54 05 d0	 xor	 BYTE PTR ___encStr$548705[ebp+eax], dl
  00157	40		 inc	 eax
  00158	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  0015b	7c e3		 jl	 SHORT $LL438@LoadNoraml
  0015d	ff b5 a8 fe ff
	ff		 push	 DWORD PTR tv3321[ebp]
  00163	8d 45 d0	 lea	 eax, DWORD PTR ___encStr$548705[ebp]
  00166	50		 push	 eax
  00167	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0016d	50		 push	 eax
  0016e	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAE@@@YAHAAY0BAE@DPBDZZ ; sprintf_s<260>
  00173	83 c4 0c	 add	 esp, 12			; 0000000cH

; 59   : 		Attack.m_iRangeMin = rkLoader.LoadInt( szBuf, 0 );

  00176	53		 push	 ebx
  00177	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0017d	50		 push	 eax
  0017e	8b cf		 mov	 ecx, edi
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00186	6a 06		 push	 6
  00188	89 85 9c fe ff
	ff		 mov	 DWORD PTR _Attack$548543[ebp+80], eax

; 60   : 
; 61   : 		sprintf_s_e( szBuf, "normal_charged%d_range_max", i+1 );

  0018e	c7 45 b0 83 83
	99 87		 mov	 DWORD PTR ___encStr$548857[ebp], -2019982461 ; 87998383H
  00195	c7 45 b4 8c 80
	b4 89		 mov	 DWORD PTR ___encStr$548857[ebp+4], -1984659316 ; 89b4808cH
  0019c	c7 45 b8 85 8d
	99 8d		 mov	 DWORD PTR ___encStr$548857[ebp+8], -1919316603 ; 8d998d85H
  001a3	c7 45 bc 88 88
	ce 8e		 mov	 DWORD PTR ___encStr$548857[ebp+12], -1899067256 ; 8ece8888H
  001aa	c7 45 c0 b2 9e
	8a 84		 mov	 DWORD PTR ___encStr$548857[ebp+16], -2071290190 ; 848a9eb2H
  001b1	c7 45 c4 8a 89
	b4 87		 mov	 DWORD PTR ___encStr$548857[ebp+20], -2018211446 ; 87b4898aH
  001b8	66 c7 45 c8 8c
	94		 mov	 WORD PTR ___encStr$548857[ebp+24], 38028 ; 0000948cH
  001be	8d 45 b0	 lea	 eax, DWORD PTR ___encStr$548857[ebp]
  001c1	88 5d ca	 mov	 BYTE PTR ___encStr$548857[ebp+26], bl
  001c4	59		 pop	 ecx
$LL449@LoadNoraml:
  001c5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001cb	83 c0 04	 add	 eax, 4
  001ce	49		 dec	 ecx
  001cf	75 f4		 jne	 SHORT $LL449@LoadNoraml
  001d1	6a 18		 push	 24			; 00000018H
  001d3	58		 pop	 eax
$LL446@LoadNoraml:
  001d4	8b c8		 mov	 ecx, eax
  001d6	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001dc	79 05		 jns	 SHORT $LN475@LoadNoraml
  001de	49		 dec	 ecx
  001df	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001e2	41		 inc	 ecx
$LN475@LoadNoraml:
  001e3	b2 ed		 mov	 dl, -19			; ffffffedH
  001e5	2a d1		 sub	 dl, cl
  001e7	30 54 05 b0	 xor	 BYTE PTR ___encStr$548857[ebp+eax], dl
  001eb	40		 inc	 eax
  001ec	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  001ef	7c e3		 jl	 SHORT $LL446@LoadNoraml
  001f1	ff b5 a8 fe ff
	ff		 push	 DWORD PTR tv3321[ebp]
  001f7	8d 45 b0	 lea	 eax, DWORD PTR ___encStr$548857[ebp]
  001fa	50		 push	 eax
  001fb	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00201	50		 push	 eax
  00202	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAE@@@YAHAAY0BAE@DPBDZZ ; sprintf_s<260>
  00207	83 c4 0c	 add	 esp, 12			; 0000000cH

; 62   : 		Attack.m_iRangeMax = rkLoader.LoadInt( szBuf, 0 );

  0020a	53		 push	 ebx
  0020b	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00211	50		 push	 eax
  00212	8b cf		 mov	 ecx, edi
  00214	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  0021a	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _Attack$548543[ebp+84], eax

; 63   : 
; 64   : 		m_NormalAttributeList.push_back( Attack );

  00220	8d 85 4c fe ff
	ff		 lea	 eax, DWORD PTR _Attack$548543[ebp]
  00226	50		 push	 eax
  00227	8d 8e 50 1b 00
	00		 lea	 ecx, DWORD PTR [esi+6992]
  0022d	e8 00 00 00 00	 call	 ?push_back@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXABUGalaxyAttack@ioGalaxyObjectItem@@@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::push_back

; 65   : 	}

  00232	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00236	8d 8d 4c fe ff
	ff		 lea	 ecx, DWORD PTR _Attack$548543[ebp]
  0023c	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  00241	ff 85 a8 fe ff
	ff		 inc	 DWORD PTR tv3321[ebp]
  00247	ff 8d a4 fe ff
	ff		 dec	 DWORD PTR tv1117[ebp]
  0024d	0f 85 39 fe ff
	ff		 jne	 $LL300@LoadNoraml
$LN298@LoadNoraml:

; 66   : }

  00253	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00258	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadNoramlAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z$0:
  00000	8d 8d 4c fe ff
	ff		 lea	 ecx, DWORD PTR _Attack$548543[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1GalaxyAttack@ioGalaxyObjectItem@@QAE@XZ
__ehhandler$?LoadNoramlAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 48 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-440]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadNoramlAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadNoramlAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z ENDP ; ioGalaxyObjectItem::LoadNoramlAttribute
PUBLIC	_rkLoader$GSCopy$
PUBLIC	?LoadJumpAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z ; ioGalaxyObjectItem::LoadJumpAttribute
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadJumpAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadJumpAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z$0
__ehfuncinfo$?LoadJumpAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadJumpAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?LoadJumpAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_Attack$549023 = -440					; size = 88
$T557446 = -352						; size = 4
tv1117 = -352						; size = 4
_rkLoader$GSCopy$ = -348				; size = 4
tv3294 = -344						; size = 4
_szBuf$ = -340						; size = 260
___encStr$549331 = -80					; size = 25
___encStr$549179 = -48					; size = 25
__k$557493 = -40					; size = 15
___encStr$549027 = -40					; size = 15
__$EHRec$ = -12						; size = 12
_rkLoader$ = 8						; size = 4
?LoadJumpAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z PROC ; ioGalaxyObjectItem::LoadJumpAttribute, COMDAT
; _this$ = ecx

; 69   : {

  00000	68 ac 01 00 00	 push	 428			; 000001acH
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?LoadJumpAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]
  00012	8b f1		 mov	 esi, ecx

; 70   : 	m_JumpAttributeList.clear();

  00014	8b 86 64 1b 00
	00		 mov	 eax, DWORD PTR [esi+7012]
  0001a	8b 8e 60 1b 00
	00		 mov	 ecx, DWORD PTR [esi+7008]
  00020	50		 push	 eax
  00021	51		 push	 ecx
  00022	8d 85 a0 fe ff
	ff		 lea	 eax, DWORD PTR $T557446[ebp]
  00028	50		 push	 eax
  00029	8d 8e 60 1b 00
	00		 lea	 ecx, DWORD PTR [esi+7008]

; 83   : 
; 84   : 		sprintf_s_e( szBuf, "jump_charged%d_range_max", i+1 );

  0002f	89 bd a4 fe ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], edi
  00035	e8 00 00 00 00	 call	 ?erase@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@@2@0@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::erase
  0003a	33 db		 xor	 ebx, ebx
  0003c	6a 03		 push	 3
  0003e	c7 45 d8 87 99
	86 9a		 mov	 DWORD PTR __k$557493[ebp], -1702454905 ; 9a869987H
  00045	c7 45 dc b2 81
	8a 92		 mov	 DWORD PTR __k$557493[ebp+4], -1836416590 ; 928a81b2H
  0004c	c7 45 e0 b2 8f
	84 9f		 mov	 DWORD PTR __k$557493[ebp+8], -1618702414 ; 9f848fb2H
  00053	66 c7 45 e4 83
	98		 mov	 WORD PTR __k$557493[ebp+12], 39043 ; 00009883H
  00059	8d 45 d8	 lea	 eax, DWORD PTR __k$557493[ebp]
  0005c	88 5d e6	 mov	 BYTE PTR __k$557493[ebp+14], bl
  0005f	59		 pop	 ecx
$LL425@LoadJumpAt:

; 71   : 
; 72   : 	int iCount = rkLoader.LoadInt_e( "jump_max_count", 0 );

  00060	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00066	83 c0 04	 add	 eax, 4
  00069	49		 dec	 ecx
  0006a	75 f4		 jne	 SHORT $LL425@LoadJumpAt
  0006c	6a 0c		 push	 12			; 0000000cH
  0006e	58		 pop	 eax
$LL422@LoadJumpAt:
  0006f	8b c8		 mov	 ecx, eax
  00071	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00077	79 05		 jns	 SHORT $LN474@LoadJumpAt
  00079	49		 dec	 ecx
  0007a	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0007d	41		 inc	 ecx
$LN474@LoadJumpAt:
  0007e	b2 ed		 mov	 dl, -19			; ffffffedH
  00080	2a d1		 sub	 dl, cl
  00082	30 54 05 d8	 xor	 BYTE PTR __k$557493[ebp+eax], dl
  00086	40		 inc	 eax
  00087	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  0008a	7c e3		 jl	 SHORT $LL422@LoadJumpAt
  0008c	53		 push	 ebx
  0008d	8d 45 d8	 lea	 eax, DWORD PTR __k$557493[ebp]
  00090	8b cf		 mov	 ecx, edi
  00092	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00098	50		 push	 eax
  00099	ff d7		 call	 edi

; 73   : 
; 74   : 	char szBuf[MAX_PATH];
; 75   : 	for( int i = 0; i < iCount; ++i )

  0009b	3b c3		 cmp	 eax, ebx
  0009d	0f 8e af 01 00
	00		 jle	 $LN298@LoadJumpAt

; 71   : 
; 72   : 	int iCount = rkLoader.LoadInt_e( "jump_max_count", 0 );

  000a3	c7 85 a8 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv3294[ebp], 1
  000ad	89 85 a0 fe ff
	ff		 mov	 DWORD PTR tv1117[ebp], eax
$LL300@LoadJumpAt:

; 76   : 	{
; 77   : 		GalaxyAttack Attack;

  000b3	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _Attack$549023[ebp]
  000b9	e8 00 00 00 00	 call	 ??0GalaxyAttack@ioGalaxyObjectItem@@QAE@XZ ; ioGalaxyObjectItem::GalaxyAttack::GalaxyAttack
  000be	6a 03		 push	 3
  000c0	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 78   : 		sprintf_s_e( szBuf, "jump_charged%d", i+1 );

  000c3	c7 45 d8 87 99
	86 9a		 mov	 DWORD PTR ___encStr$549027[ebp], -1702454905 ; 9a869987H
  000ca	c7 45 dc b2 8f
	83 8b		 mov	 DWORD PTR ___encStr$549027[ebp+4], -1954312270 ; 8b838fb2H
  000d1	c7 45 e0 9f 8b
	8e 8e		 mov	 DWORD PTR ___encStr$549027[ebp+8], -1903260769 ; 8e8e8b9fH
  000d8	66 c7 45 e4 c8
	88		 mov	 WORD PTR ___encStr$549027[ebp+12], 35016 ; 000088c8H
  000de	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$549027[ebp]
  000e1	88 5d e6	 mov	 BYTE PTR ___encStr$549027[ebp+14], bl
  000e4	59		 pop	 ecx
$LL433@LoadJumpAt:
  000e5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000eb	83 c0 04	 add	 eax, 4
  000ee	49		 dec	 ecx
  000ef	75 f4		 jne	 SHORT $LL433@LoadJumpAt
  000f1	6a 0c		 push	 12			; 0000000cH
  000f3	58		 pop	 eax
$LL430@LoadJumpAt:
  000f4	8b c8		 mov	 ecx, eax
  000f6	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000fc	79 05		 jns	 SHORT $LN475@LoadJumpAt
  000fe	49		 dec	 ecx
  000ff	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00102	41		 inc	 ecx
$LN475@LoadJumpAt:
  00103	b2 ed		 mov	 dl, -19			; ffffffedH
  00105	2a d1		 sub	 dl, cl
  00107	30 54 05 d8	 xor	 BYTE PTR ___encStr$549027[ebp+eax], dl
  0010b	40		 inc	 eax
  0010c	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  0010f	7c e3		 jl	 SHORT $LL430@LoadJumpAt
  00111	ff b5 a8 fe ff
	ff		 push	 DWORD PTR tv3294[ebp]
  00117	8d 45 d8	 lea	 eax, DWORD PTR ___encStr$549027[ebp]
  0011a	50		 push	 eax
  0011b	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAE@@@YAHAAY0BAE@DPBDZZ ; sprintf_s<260>

; 79   : 		LoadAttackAttribute( szBuf, Attack.m_Attribute, rkLoader );

  00127	ff b5 a4 fe ff
	ff		 push	 DWORD PTR _rkLoader$GSCopy$[ebp]
  0012d	8d 85 48 fe ff
	ff		 lea	 eax, DWORD PTR _Attack$549023[ebp]
  00133	50		 push	 eax
  00134	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 ?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z ; LoadAttackAttribute
  00140	83 c4 18	 add	 esp, 24			; 00000018H
  00143	6a 06		 push	 6

; 80   : 
; 81   : 		sprintf_s_e( szBuf, "jump_charged%d_range_min", i+1 );

  00145	c7 45 d0 87 99
	86 9a		 mov	 DWORD PTR ___encStr$549179[ebp], -1702454905 ; 9a869987H
  0014c	c7 45 d4 b2 8f
	83 8b		 mov	 DWORD PTR ___encStr$549179[ebp+4], -1954312270 ; 8b838fb2H
  00153	c7 45 d8 9f 8b
	8e 8e		 mov	 DWORD PTR ___encStr$549179[ebp+8], -1903260769 ; 8e8e8b9fH
  0015a	c7 45 dc c8 88
	b4 98		 mov	 DWORD PTR ___encStr$549179[ebp+12], -1732998968 ; 98b488c8H
  00161	c7 45 e0 8c 82
	8c 8f		 mov	 DWORD PTR ___encStr$549179[ebp+16], -1886616948 ; 8f8c828cH
  00168	c7 45 e4 b2 81
	82 84		 mov	 DWORD PTR ___encStr$549179[ebp+20], -2071821902 ; 848281b2H
  0016f	8d 45 d0	 lea	 eax, DWORD PTR ___encStr$549179[ebp]
  00172	88 5d e8	 mov	 BYTE PTR ___encStr$549179[ebp+24], bl
  00175	59		 pop	 ecx
$LL441@LoadJumpAt:
  00176	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0017c	83 c0 04	 add	 eax, 4
  0017f	49		 dec	 ecx
  00180	75 f4		 jne	 SHORT $LL441@LoadJumpAt
  00182	ff b5 a8 fe ff
	ff		 push	 DWORD PTR tv3294[ebp]
  00188	8d 45 d0	 lea	 eax, DWORD PTR ___encStr$549179[ebp]
  0018b	50		 push	 eax
  0018c	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00192	50		 push	 eax
  00193	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAE@@@YAHAAY0BAE@DPBDZZ ; sprintf_s<260>

; 82   : 		Attack.m_iRangeMin = rkLoader.LoadInt( szBuf, 0 );

  00198	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0019e	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a1	53		 push	 ebx
  001a2	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  001a8	50		 push	 eax
  001a9	ff d7		 call	 edi
  001ab	6a 06		 push	 6
  001ad	89 85 98 fe ff
	ff		 mov	 DWORD PTR _Attack$549023[ebp+80], eax

; 83   : 
; 84   : 		sprintf_s_e( szBuf, "jump_charged%d_range_max", i+1 );

  001b3	c7 45 b0 87 99
	86 9a		 mov	 DWORD PTR ___encStr$549331[ebp], -1702454905 ; 9a869987H
  001ba	c7 45 b4 b2 8f
	83 8b		 mov	 DWORD PTR ___encStr$549331[ebp+4], -1954312270 ; 8b838fb2H
  001c1	c7 45 b8 9f 8b
	8e 8e		 mov	 DWORD PTR ___encStr$549331[ebp+8], -1903260769 ; 8e8e8b9fH
  001c8	c7 45 bc c8 88
	b4 98		 mov	 DWORD PTR ___encStr$549331[ebp+12], -1732998968 ; 98b488c8H
  001cf	c7 45 c0 8c 82
	8c 8f		 mov	 DWORD PTR ___encStr$549331[ebp+16], -1886616948 ; 8f8c828cH
  001d6	c7 45 c4 b2 81
	8a 92		 mov	 DWORD PTR ___encStr$549331[ebp+20], -1836416590 ; 928a81b2H
  001dd	8d 45 b0	 lea	 eax, DWORD PTR ___encStr$549331[ebp]
  001e0	88 5d c8	 mov	 BYTE PTR ___encStr$549331[ebp+24], bl
  001e3	59		 pop	 ecx
$LL449@LoadJumpAt:
  001e4	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001ea	83 c0 04	 add	 eax, 4
  001ed	49		 dec	 ecx
  001ee	75 f4		 jne	 SHORT $LL449@LoadJumpAt
  001f0	ff b5 a8 fe ff
	ff		 push	 DWORD PTR tv3294[ebp]
  001f6	8d 45 b0	 lea	 eax, DWORD PTR ___encStr$549331[ebp]
  001f9	50		 push	 eax
  001fa	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00200	50		 push	 eax
  00201	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAE@@@YAHAAY0BAE@DPBDZZ ; sprintf_s<260>

; 85   : 		Attack.m_iRangeMax = rkLoader.LoadInt( szBuf, 0 );

  00206	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0020c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0020f	53		 push	 ebx
  00210	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00216	50		 push	 eax
  00217	ff d7		 call	 edi
  00219	89 85 9c fe ff
	ff		 mov	 DWORD PTR _Attack$549023[ebp+84], eax

; 86   : 
; 87   : 		m_JumpAttributeList.push_back( Attack );

  0021f	8d 85 48 fe ff
	ff		 lea	 eax, DWORD PTR _Attack$549023[ebp]
  00225	50		 push	 eax
  00226	8d 8e 60 1b 00
	00		 lea	 ecx, DWORD PTR [esi+7008]
  0022c	e8 00 00 00 00	 call	 ?push_back@?$vector@UGalaxyAttack@ioGalaxyObjectItem@@V?$allocator@UGalaxyAttack@ioGalaxyObjectItem@@@std@@@std@@QAEXABUGalaxyAttack@ioGalaxyObjectItem@@@Z ; std::vector<ioGalaxyObjectItem::GalaxyAttack,std::allocator<ioGalaxyObjectItem::GalaxyAttack> >::push_back

; 88   : 	}

  00231	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00235	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _Attack$549023[ebp]
  0023b	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  00240	ff 85 a8 fe ff
	ff		 inc	 DWORD PTR tv3294[ebp]
  00246	ff 8d a0 fe ff
	ff		 dec	 DWORD PTR tv1117[ebp]
  0024c	0f 85 61 fe ff
	ff		 jne	 $LL300@LoadJumpAt
$LN298@LoadJumpAt:

; 89   : }

  00252	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00257	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadJumpAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z$0:
  00000	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _Attack$549023[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1GalaxyAttack@ioGalaxyObjectItem@@QAE@XZ
__ehhandler$?LoadJumpAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 44 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-444]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadJumpAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadJumpAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z ENDP ; ioGalaxyObjectItem::LoadJumpAttribute
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioObjectItem@@UAEXAAVioINILoader@@@Z:PROC ; ioObjectItem::LoadProperty
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogalaxyobjectitem.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioGalaxyObjectItem@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_szBuf$ = -288						; size = 260
__k$557676 = -28					; size = 20
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioGalaxyObjectItem@@UAEXAAVioINILoader@@@Z PROC ; ioGalaxyObjectItem::LoadProperty, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _rkLoader$[ebp]
  00017	57		 push	 edi

; 35   : 	ioObjectItem::LoadProperty( rkLoader );

  00018	56		 push	 esi
  00019	8b f9		 mov	 edi, ecx
  0001b	e8 00 00 00 00	 call	 ?LoadProperty@ioObjectItem@@UAEXAAVioINILoader@@@Z ; ioObjectItem::LoadProperty

; 36   : 
; 37   : 	char szBuf[MAX_PATH];
; 38   : 	rkLoader.LoadString_e( "gather_meteo_effect", "", szBuf, MAX_PATH );

  00020	6a 04		 push	 4
  00022	c7 45 e4 8a 8d
	9f 82		 mov	 DWORD PTR __k$557676[ebp], -2103472758 ; 829f8d8aH
  00029	c7 45 e8 88 9e
	b4 87		 mov	 DWORD PTR __k$557676[ebp+4], -2018206072 ; 87b49e88H
  00030	c7 45 ec 88 98
	8e 85		 mov	 DWORD PTR __k$557676[ebp+8], -2054252408 ; 858e9888H
  00037	c7 45 f0 b2 89
	8d 8c		 mov	 DWORD PTR __k$557676[ebp+12], -1936881230 ; 8c8d89b2H
  0003e	8d 45 e4	 lea	 eax, DWORD PTR __k$557676[ebp]
  00041	c7 45 f4 88 8f
	9f 00		 mov	 DWORD PTR __k$557676[ebp+16], 10456968 ; 009f8f88H
  00048	59		 pop	 ecx
$LL106@LoadProper:
  00049	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0004f	83 c0 04	 add	 eax, 4
  00052	49		 dec	 ecx
  00053	75 f4		 jne	 SHORT $LL106@LoadProper
  00055	6a 10		 push	 16			; 00000010H
  00057	58		 pop	 eax
$LL103@LoadProper:
  00058	8b c8		 mov	 ecx, eax
  0005a	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00060	79 05		 jns	 SHORT $LN113@LoadProper
  00062	49		 dec	 ecx
  00063	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00066	41		 inc	 ecx
$LN113@LoadProper:
  00067	b2 ed		 mov	 dl, -19			; ffffffedH
  00069	2a d1		 sub	 dl, cl
  0006b	30 54 05 e4	 xor	 BYTE PTR __k$557676[ebp+eax], dl
  0006f	40		 inc	 eax
  00070	83 f8 13	 cmp	 eax, 19			; 00000013H
  00073	7c e3		 jl	 SHORT $LL103@LoadProper
  00075	68 04 01 00 00	 push	 260			; 00000104H
  0007a	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00080	50		 push	 eax
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00086	8d 45 e4	 lea	 eax, DWORD PTR __k$557676[ebp]
  00089	50		 push	 eax
  0008a	8b ce		 mov	 ecx, esi
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 39   : 	m_GatherMeteoEffect = szBuf;

  00092	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00098	50		 push	 eax
  00099	8d 8f 34 1b 00
	00		 lea	 ecx, DWORD PTR [edi+6964]
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 40   : 
; 41   : 	LoadNoramlAttribute( rkLoader );

  000a5	56		 push	 esi
  000a6	8b cf		 mov	 ecx, edi
  000a8	e8 00 00 00 00	 call	 ?LoadNoramlAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z ; ioGalaxyObjectItem::LoadNoramlAttribute

; 42   : 	LoadJumpAttribute( rkLoader );

  000ad	56		 push	 esi
  000ae	8b cf		 mov	 ecx, edi
  000b0	e8 00 00 00 00	 call	 ?LoadJumpAttribute@ioGalaxyObjectItem@@QAEXAAVioINILoader@@@Z ; ioGalaxyObjectItem::LoadJumpAttribute

; 43   : }

  000b5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b8	5f		 pop	 edi
  000b9	33 cd		 xor	 ecx, ebp
  000bb	5e		 pop	 esi
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	c9		 leave
  000c2	c2 04 00	 ret	 4
?LoadProperty@ioGalaxyObjectItem@@UAEXAAVioINILoader@@@Z ENDP ; ioGalaxyObjectItem::LoadProperty
_TEXT	ENDS
END
