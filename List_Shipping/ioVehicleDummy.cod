; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioVehicleDummy.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
PUBLIC	?_EEM_DS@?$deque@MV?$allocator@M@std@@@std@@2HB	; std::deque<float,std::allocator<float> >::_EEM_DS
PUBLIC	?_VBITS@?$vector@_NV?$allocator@_N@std@@@std@@2HB ; std::vector<bool,std::allocator<bool> >::_VBITS
;	COMDAT ?_VBITS@?$vector@_NV?$allocator@_N@std@@@std@@2HB
CONST	SEGMENT
?_VBITS@?$vector@_NV?$allocator@_N@std@@@std@@2HB DD 020H ; std::vector<bool,std::allocator<bool> >::_VBITS
CONST	ENDS
;	COMDAT ?_EEM_DS@?$deque@MV?$allocator@M@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@MV?$allocator@M@std@@@std@@2HB DD 04H	; std::deque<float,std::allocator<float> >::_EEM_DS
CONST	ENDS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?GetDriverState@ioVehicleDirverState@@QAE?AW4VehicleDriverState@ioVehicleDriverObjectItem@@XZ ; ioVehicleDirverState::GetDriverState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iovehicledriverobjectitem.h
;	COMDAT ?GetDriverState@ioVehicleDirverState@@QAE?AW4VehicleDriverState@ioVehicleDriverObjectItem@@XZ
_TEXT	SEGMENT
?GetDriverState@ioVehicleDirverState@@QAE?AW4VehicleDriverState@ioVehicleDriverObjectItem@@XZ PROC ; ioVehicleDirverState::GetDriverState, COMDAT
; _this$ = ecx

; 287  : 	inline DriverState GetDriverState(){ return m_eDriverState; }

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	c3		 ret	 0
?GetDriverState@ioVehicleDirverState@@QAE?AW4VehicleDriverState@ioVehicleDriverObjectItem@@XZ ENDP ; ioVehicleDirverState::GetDriverState
_TEXT	ENDS
PUBLIC	?GetDriftLeft@ioVehicleDirverState@@QAE_NXZ	; ioVehicleDirverState::GetDriftLeft
; Function compile flags: /Ogsp
;	COMDAT ?GetDriftLeft@ioVehicleDirverState@@QAE_NXZ
_TEXT	SEGMENT
?GetDriftLeft@ioVehicleDirverState@@QAE_NXZ PROC	; ioVehicleDirverState::GetDriftLeft, COMDAT
; _this$ = ecx

; 289  : 	inline bool GetDriftLeft(){ return m_bDriftLeft; }

  00000	8a 41 0c	 mov	 al, BYTE PTR [ecx+12]
  00003	c3		 ret	 0
?GetDriftLeft@ioVehicleDirverState@@QAE_NXZ ENDP	; ioVehicleDirverState::GetDriftLeft
_TEXT	ENDS
PUBLIC	??_R0?AVioSpecialStateBase@@@8			; ioSpecialStateBase `RTTI Type Descriptor'
PUBLIC	??_R0?AVioVehicleDirverState@@@8		; ioVehicleDirverState `RTTI Type Descriptor'
PUBLIC	?ToVehicleDirverState@@YAPAVioVehicleDirverState@@PAVioSpecialStateBase@@@Z ; ToVehicleDirverState
EXTRN	___RTDynamicCast:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R0?AVioSpecialStateBase@@@8
_DATA	SEGMENT
??_R0?AVioSpecialStateBase@@@8 DD FLAT:??_7type_info@@6B@ ; ioSpecialStateBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioSpecialStateBase@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVioVehicleDirverState@@@8
_DATA	SEGMENT
??_R0?AVioVehicleDirverState@@@8 DD FLAT:??_7type_info@@6B@ ; ioVehicleDirverState `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioVehicleDirverState@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ToVehicleDirverState@@YAPAVioVehicleDirverState@@PAVioSpecialStateBase@@@Z
_TEXT	SEGMENT
_pState$ = 8						; size = 4
?ToVehicleDirverState@@YAPAVioVehicleDirverState@@PAVioSpecialStateBase@@@Z PROC ; ToVehicleDirverState, COMDAT

; 297  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 298  : 	if( !pState || pState->GetState() != CS_VEHICLE_DRIVER )

  00004	8b 75 08	 mov	 esi, DWORD PTR _pState$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 24		 je	 SHORT $LN1@ToVehicleD
  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 50 10	 call	 DWORD PTR [eax+16]
  00012	3c 84		 cmp	 al, 132			; 00000084H
  00014	75 19		 jne	 SHORT $LN1@ToVehicleD

; 300  : 
; 301  : 	return dynamic_cast< ioVehicleDirverState* >( pState );

  00016	6a 00		 push	 0
  00018	68 00 00 00 00	 push	 OFFSET ??_R0?AVioVehicleDirverState@@@8
  0001d	68 00 00 00 00	 push	 OFFSET ??_R0?AVioSpecialStateBase@@@8
  00022	6a 00		 push	 0
  00024	56		 push	 esi
  00025	e8 00 00 00 00	 call	 ___RTDynamicCast
  0002a	83 c4 14	 add	 esp, 20			; 00000014H
  0002d	eb 02		 jmp	 SHORT $LN3@ToVehicleD
$LN1@ToVehicleD:

; 299  : 		return NULL;

  0002f	33 c0		 xor	 eax, eax
$LN3@ToVehicleD:
  00031	5e		 pop	 esi

; 302  : }

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?ToVehicleDirverState@@YAPAVioVehicleDirverState@@PAVioSpecialStateBase@@@Z ENDP ; ToVehicleDirverState
_TEXT	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	?GetSpecialState@ioBaseChar@@QAEPAVioSpecialStateBase@@XZ ; ioBaseChar::GetSpecialState
; Function compile flags: /Ogsp
;	COMDAT ?GetSpecialState@ioBaseChar@@QAEPAVioSpecialStateBase@@XZ
_TEXT	SEGMENT
?GetSpecialState@ioBaseChar@@QAEPAVioSpecialStateBase@@XZ PROC ; ioBaseChar::GetSpecialState, COMDAT
; _this$ = ecx

; 2163 : 	inline ioSpecialStateBase* GetSpecialState(){ return m_pCharSpeicalState; }

  00000	8b 81 14 03 00
	00		 mov	 eax, DWORD PTR [ecx+788]
  00006	c3		 ret	 0
?GetSpecialState@ioBaseChar@@QAEPAVioSpecialStateBase@@XZ ENDP ; ioBaseChar::GetSpecialState
_TEXT	ENDS
PUBLIC	?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ; ioBaseChar::GetTargetRot
; Function compile flags: /Ogsp
;	COMDAT ?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ
_TEXT	SEGMENT
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ PROC	; ioBaseChar::GetTargetRot, COMDAT
; _this$ = ecx

; 2599 : 	inline const D3DXQUATERNION& GetTargetRot() const { return m_qtTargetRot; }

  00000	8d 81 a4 06 00
	00		 lea	 eax, DWORD PTR [ecx+1700]
  00006	c3		 ret	 0
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ENDP	; ioBaseChar::GetTargetRot
_TEXT	ENDS
PUBLIC	??_7ioVehicleDummy@@6BioWorldEventReceiver@@@	; ioVehicleDummy::`vftable'
PUBLIC	??_7ioVehicleDummy@@6BioPlayEntity@@@		; ioVehicleDummy::`vftable'
PUBLIC	??0ioVehicleDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z ; ioVehicleDummy::ioVehicleDummy
PUBLIC	??_R4ioVehicleDummy@@6BioPlayEntity@@@		; ioVehicleDummy::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioVehicleDummy@@@8			; ioVehicleDummy `RTTI Type Descriptor'
PUBLIC	??_R3ioVehicleDummy@@8				; ioVehicleDummy::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioVehicleDummy@@8				; ioVehicleDummy::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioVehicleDummy@@8			; ioVehicleDummy::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioDummyChar@@8			; ioDummyChar::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioDummyChar@@@8				; ioDummyChar `RTTI Type Descriptor'
PUBLIC	??_R3ioDummyChar@@8				; ioDummyChar::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioDummyChar@@8				; ioDummyChar::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioPlayEntity@@8			; ioPlayEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioPlayEntity@@@8			; ioPlayEntity `RTTI Type Descriptor'
PUBLIC	??_R3ioPlayEntity@@8				; ioPlayEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioPlayEntity@@8				; ioPlayEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioGameEntity@@8			; ioGameEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioGameEntity@@@8			; ioGameEntity `RTTI Type Descriptor'
PUBLIC	??_R3ioGameEntity@@8				; ioGameEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioGameEntity@@8				; ioGameEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioEntityEvent@@8			; ioEntityEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioEntityEvent@@@8			; ioEntityEvent `RTTI Type Descriptor'
PUBLIC	??_R3ioEntityEvent@@8				; ioEntityEvent::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioEntityEvent@@8				; ioEntityEvent::`RTTI Base Class Array'
PUBLIC	??_R1BMI@?0A@EA@ioWorldEventReceiver@@8		; ioWorldEventReceiver::`RTTI Base Class Descriptor at (456,-1,0,64)'
PUBLIC	??_R0?AVioWorldEventReceiver@@@8		; ioWorldEventReceiver `RTTI Type Descriptor'
PUBLIC	??_R3ioWorldEventReceiver@@8			; ioWorldEventReceiver::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWorldEventReceiver@@8			; ioWorldEventReceiver::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioWorldEventReceiver@@8		; ioWorldEventReceiver::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?LoadProperty@ioVehicleDummy@@UAEXAAVioINILoader@@@Z ; ioVehicleDummy::LoadProperty
PUBLIC	?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z	; ioPlayEntity::SetTeam
PUBLIC	?ProcessState@ioVehicleDummy@@MAEXMK@Z		; ioVehicleDummy::ProcessState
PUBLIC	?ProcessPos@ioVehicleDummy@@MAEXM@Z		; ioVehicleDummy::ProcessPos
PUBLIC	?ProcessDelayState@ioVehicleDummy@@MAEXM@Z	; ioVehicleDummy::ProcessDelayState
PUBLIC	?ProcessMoveState@ioVehicleDummy@@MAEXM@Z	; ioVehicleDummy::ProcessMoveState
PUBLIC	?SetMoveState@ioVehicleDummy@@UAEXXZ		; ioVehicleDummy::SetMoveState
PUBLIC	?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ	; ioDummyChar::IsDummyCharMidSync
PUBLIC	??_R4ioVehicleDummy@@6BioWorldEventReceiver@@@	; ioVehicleDummy::`RTTI Complete Object Locator'
PUBLIC	??_EioVehicleDummy@@WBMI@AEPAXI@Z		; [thunk]:ioVehicleDummy::`vector deleting destructor'
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	??1ioDummyChar@@UAE@XZ:PROC			; ioDummyChar::~ioDummyChar
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	??0ioDummyChar@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z:PROC ; ioDummyChar::ioDummyChar
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	?AddEntityEvent@ioDummyChar@@UAEXPAVioEntity@@@Z:PROC ; ioDummyChar::AddEntityEvent
EXTRN	??_EioVehicleDummy@@UAEPAXI@Z:PROC		; ioVehicleDummy::`vector deleting destructor'
EXTRN	?Update@ioDummyChar@@UAEXMKK@Z:PROC		; ioDummyChar::Update
EXTRN	?UpdateAfter@ioDummyChar@@UAEXM@Z:PROC		; ioDummyChar::UpdateAfter
EXTRN	?GetTypeID@ioPlayEntity@@UBEHXZ:PROC		; ioPlayEntity::GetTypeID
EXTRN	?IsNeedCheckMapCollision@ioDummyChar@@UBE_NXZ:PROC ; ioDummyChar::IsNeedCheckMapCollision
EXTRN	?IsMountAvailable@ioDummyChar@@UBE_NXZ:PROC	; ioDummyChar::IsMountAvailable
EXTRN	?IsMountingAvailable@ioDummyChar@@UBE_NXZ:PROC	; ioDummyChar::IsMountingAvailable
EXTRN	?IsNowMountEnable@ioDummyChar@@UBE_NXZ:PROC	; ioDummyChar::IsNowMountEnable
EXTRN	?IsAllWeaponDefence@ioGameEntity@@UBE_NXZ:PROC	; ioGameEntity::IsAllWeaponDefence
EXTRN	?HasEntity@ioGameEntity@@UAE_NABVioHashString@@@Z:PROC ; ioGameEntity::HasEntity
EXTRN	?AddEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z:PROC ; ioGameEntity::AddEntity
EXTRN	?DestroyEntity@ioGameEntity@@UAE_NABVioHashString@@@Z:PROC ; ioGameEntity::DestroyEntity
EXTRN	?GetEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z:PROC ; ioGameEntity::GetEntity
EXTRN	?UpdateBound@ioGameEntity@@MBEXXZ:PROC		; ioGameEntity::UpdateBound
EXTRN	?UpdateBottomHeight@ioDummyChar@@MBEXXZ:PROC	; ioDummyChar::UpdateBottomHeight
EXTRN	?NeedUpdateBottomHeight@ioDummyChar@@UAEXXZ:PROC ; ioDummyChar::NeedUpdateBottomHeight
EXTRN	?SetWorldPosition@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::SetWorldPosition
EXTRN	?SetWorldOrientation@ioGameEntity@@UAEXABUD3DXQUATERNION@@@Z:PROC ; ioGameEntity::SetWorldOrientation
EXTRN	?SetWorldScale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::SetWorldScale
EXTRN	?Translate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::Translate
EXTRN	?TranslateByConveyer@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::TranslateByConveyer
EXTRN	?TranslateByWorldEntity@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::TranslateByWorldEntity
EXTRN	?MapCollisionPushingTranslate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::MapCollisionPushingTranslate
EXTRN	?DontMoveCollisionPushingTranslate@ioGameEntity@@UAEXPAV1@ABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::DontMoveCollisionPushingTranslate
EXTRN	?Rotate@ioGameEntity@@UAEXABUD3DXVECTOR3@@MW4TransformSpace@ioNode@@@Z:PROC ; ioGameEntity::Rotate
EXTRN	?Scale@ioGameEntity@@UAEXMMM@Z:PROC		; ioGameEntity::Scale
EXTRN	?Scale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioGameEntity::Scale
EXTRN	?GetWorldPosition@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ:PROC ; ioGameEntity::GetWorldPosition
EXTRN	?GetWorldOrientation@ioGameEntity@@UBEABUD3DXQUATERNION@@XZ:PROC ; ioGameEntity::GetWorldOrientation
EXTRN	?GetWorldScale@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ:PROC ; ioGameEntity::GetWorldScale
EXTRN	?ApplyWeapon@ioDummyChar@@UAE?AW4ApplyWeaponExp@@PAVioWeapon@@@Z:PROC ; ioDummyChar::ApplyWeapon
EXTRN	?IsCollisionAvailableWeapon@ioDummyChar@@UAE_NPAVioWeapon@@@Z:PROC ; ioDummyChar::IsCollisionAvailableWeapon
EXTRN	?IsCollisionAvailableRange@ioPlayEntity@@UAE_NPAVioWeapon@@@Z:PROC ; ioPlayEntity::IsCollisionAvailableRange
EXTRN	?IsEntityCollisionSkipState@ioDummyChar@@UBE_NPAVioGameEntity@@@Z:PROC ; ioDummyChar::IsEntityCollisionSkipState
EXTRN	?IsCharCollisionSkipState@ioDummyChar@@UBE_NW4TeamType@@H@Z:PROC ; ioDummyChar::IsCharCollisionSkipState
EXTRN	?IsWoundedCollision@ioPlayEntity@@UBE_NABVioOrientBox@@PAUD3DXVECTOR3@@@Z:PROC ; ioPlayEntity::IsWoundedCollision
EXTRN	?GetAttackCollisionBox@ioDummyChar@@UAE?AVioOrientBox@@W4AniCollisionType@@_N@Z:PROC ; ioDummyChar::GetAttackCollisionBox
EXTRN	?CheckSphereDistance@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAM@Z:PROC ; ioPlayEntity::CheckSphereDistance
EXTRN	?CheckSpherePoint@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAU2@@Z:PROC ; ioPlayEntity::CheckSpherePoint
EXTRN	?CheckCylinderPoint@ioPlayEntity@@UBE_NABVioCylinder@@ABUD3DXVECTOR3@@AAU3@@Z:PROC ; ioPlayEntity::CheckCylinderPoint
EXTRN	?GetSubType@ioDummyChar@@UBE?AW4PlaySubType@ioPlayEntity@@XZ:PROC ; ioDummyChar::GetSubType
EXTRN	?GetArmorType@ioDummyChar@@UBE?AW4ArmorType@@XZ:PROC ; ioDummyChar::GetArmorType
EXTRN	?DontMoveEntityLevel@ioDummyChar@@UBEHXZ:PROC	; ioDummyChar::DontMoveEntityLevel
EXTRN	?NotifyDontMoveCollisionPushingSkip@ioPlayEntity@@UAEXPAVioGameEntity@@@Z:PROC ; ioPlayEntity::NotifyDontMoveCollisionPushingSkip
EXTRN	?GetWorldEventReceiver@ioDummyChar@@UAEPAVioWorldEventReceiver@@XZ:PROC ; ioDummyChar::GetWorldEventReceiver
EXTRN	?Revival@ioPlayEntity@@UAEXXZ:PROC		; ioPlayEntity::Revival
EXTRN	?UpdateGauge@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::UpdateGauge
EXTRN	?RenderGauge@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::RenderGauge
EXTRN	?FillMaxHP@ioPlayEntity@@UAEXXZ:PROC		; ioPlayEntity::FillMaxHP
EXTRN	?ProcessRecovery@ioPlayEntity@@MAEXXZ:PROC	; ioPlayEntity::ProcessRecovery
EXTRN	?AddHeadDamageInfo@ioPlayEntity@@UAEXH_N@Z:PROC	; ioPlayEntity::AddHeadDamageInfo
EXTRN	?RenderHeadInfoList@ioPlayEntity@@UAEXHH@Z:PROC	; ioPlayEntity::RenderHeadInfoList
EXTRN	?UpdateHeadInfoList@ioPlayEntity@@MAEXK@Z:PROC	; ioPlayEntity::UpdateHeadInfoList
EXTRN	?InitDummyCharInfo@ioDummyChar@@UAEXHKABUD3DXVECTOR3@@0M_N@Z:PROC ; ioDummyChar::InitDummyCharInfo
EXTRN	?TestMapCollision@ioDummyChar@@UAE_NPAVioOpcodeShape@@PAVioPlayStage@@PBUD3DXMATRIX@@@Z:PROC ; ioDummyChar::TestMapCollision
EXTRN	?CheckEntityCollision@ioDummyChar@@UAEXPAVioPlayEntity@@@Z:PROC ; ioDummyChar::CheckEntityCollision
EXTRN	?GetDummyGrassType@ioDummyChar@@UAEHXZ:PROC	; ioDummyChar::GetDummyGrassType
EXTRN	?IsActivateWeapon@ioDummyChar@@UAE_NXZ:PROC	; ioDummyChar::IsActivateWeapon
EXTRN	?IsDummyVsDummyCollisionSkipState@ioDummyChar@@UAE_NPBV1@@Z:PROC ; ioDummyChar::IsDummyVsDummyCollisionSkipState
EXTRN	?ProcessDashState@ioDummyChar@@MAEXM@Z:PROC	; ioDummyChar::ProcessDashState
EXTRN	?ProcessAttackState@ioDummyChar@@MAEXMK@Z:PROC	; ioDummyChar::ProcessAttackState
EXTRN	?ApplyDummyCharSync@ioDummyChar@@UAEXPAVioPlayStage@@AAVSP2Packet@@@Z:PROC ; ioDummyChar::ApplyDummyCharSync
EXTRN	?SetDelayState@ioDummyChar@@UAEX_N@Z:PROC	; ioDummyChar::SetDelayState
EXTRN	?SetDieState@ioDummyChar@@UAEX_N0@Z:PROC	; ioDummyChar::SetDieState
EXTRN	?SetDashState@ioDummyChar@@UAEXXZ:PROC		; ioDummyChar::SetDashState
EXTRN	?SetAttackState@ioDummyChar@@UAEXXZ:PROC	; ioDummyChar::SetAttackState
EXTRN	?DropZoneCheck@ioDummyChar@@MAEXXZ:PROC		; ioDummyChar::DropZoneCheck
EXTRN	?SendAttackInfoToSkill@ioDummyChar@@MAEXXZ:PROC	; ioDummyChar::SendAttackInfoToSkill
EXTRN	?CheckCollisionWeapon@ioDummyChar@@UAEXPAVioBaseChar@@@Z:PROC ; ioDummyChar::CheckCollisionWeapon
EXTRN	?TranslateMountEntity@ioDummyChar@@MAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::TranslateMountEntity
EXTRN	?ClearMountEntity@ioDummyChar@@MAEXXZ:PROC	; ioDummyChar::ClearMountEntity
EXTRN	?UpdateMountedEntityList@ioDummyChar@@MAEXXZ:PROC ; ioDummyChar::UpdateMountedEntityList
EXTRN	?UpdateMountedWeaponList@ioDummyChar@@MAEXXZ:PROC ; ioDummyChar::UpdateMountedWeaponList
EXTRN	?SetWorldPositionMountEntity@ioDummyChar@@MAEXM@Z:PROC ; ioDummyChar::SetWorldPositionMountEntity
EXTRN	?DummyDieClearMountEntity@ioDummyChar@@MAEXXZ:PROC ; ioDummyChar::DummyDieClearMountEntity
EXTRN	?FillDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioDummyChar::FillDummyCharMidSync
EXTRN	?ApplyDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioDummyChar::ApplyDummyCharMidSync
EXTRN	?GetSkillMaxActiveCnt@ioDummyChar@@UAEHXZ:PROC	; ioDummyChar::GetSkillMaxActiveCnt
EXTRN	?GetSkillCurActiveCnt@ioDummyChar@@UAEHXZ:PROC	; ioDummyChar::GetSkillCurActiveCnt
EXTRN	?OnTelepotation@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z:PROC ; ioDummyChar::OnTelepotation
EXTRN	?OnFireZoneDamage@ioDummyChar@@UAEXMABVioHashString@@@Z:PROC ; ioDummyChar::OnFireZoneDamage
EXTRN	?OnPoisonZoneDamage@ioDummyChar@@UAEXXZ:PROC	; ioDummyChar::OnPoisonZoneDamage
;	COMDAT ??_R4ioVehicleDummy@@6BioWorldEventReceiver@@@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iovehicledummy.cpp
rdata$r	SEGMENT
??_R4ioVehicleDummy@@6BioWorldEventReceiver@@@ DD 00H	; ioVehicleDummy::`RTTI Complete Object Locator'
	DD	01c8H
	DD	00H
	DD	FLAT:??_R0?AVioVehicleDummy@@@8
	DD	FLAT:??_R3ioVehicleDummy@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWorldEventReceiver@@8 DD FLAT:??_R0?AVioWorldEventReceiver@@@8 ; ioWorldEventReceiver::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R2ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R2ioWorldEventReceiver@@8 DD FLAT:??_R1A@?0A@EA@ioWorldEventReceiver@@8 ; ioWorldEventReceiver::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R3ioWorldEventReceiver@@8 DD 00H			; ioWorldEventReceiver::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWorldEventReceiver@@@8
_DATA	SEGMENT
??_R0?AVioWorldEventReceiver@@@8 DD FLAT:??_7type_info@@6B@ ; ioWorldEventReceiver `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWorldEventReceiver@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BMI@?0A@EA@ioWorldEventReceiver@@8
rdata$r	SEGMENT
??_R1BMI@?0A@EA@ioWorldEventReceiver@@8 DD FLAT:??_R0?AVioWorldEventReceiver@@@8 ; ioWorldEventReceiver::`RTTI Base Class Descriptor at (456,-1,0,64)'
	DD	00H
	DD	01c8H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R2ioEntityEvent@@8
rdata$r	SEGMENT
??_R2ioEntityEvent@@8 DD FLAT:??_R1A@?0A@EA@ioEntityEvent@@8 ; ioEntityEvent::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioEntityEvent@@8
rdata$r	SEGMENT
??_R3ioEntityEvent@@8 DD 00H				; ioEntityEvent::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioEntityEvent@@@8
_DATA	SEGMENT
??_R0?AVioEntityEvent@@@8 DD FLAT:??_7type_info@@6B@	; ioEntityEvent `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioEntityEvent@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioEntityEvent@@8 DD FLAT:??_R0?AVioEntityEvent@@@8 ; ioEntityEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2ioGameEntity@@8
rdata$r	SEGMENT
??_R2ioGameEntity@@8 DD FLAT:??_R1A@?0A@EA@ioGameEntity@@8 ; ioGameEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3ioGameEntity@@8
rdata$r	SEGMENT
??_R3ioGameEntity@@8 DD 00H				; ioGameEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioGameEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioGameEntity@@@8
_DATA	SEGMENT
??_R0?AVioGameEntity@@@8 DD FLAT:??_7type_info@@6B@	; ioGameEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioGameEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioGameEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioGameEntity@@8 DD FLAT:??_R0?AVioGameEntity@@@8 ; ioGameEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioGameEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2ioPlayEntity@@8
rdata$r	SEGMENT
??_R2ioPlayEntity@@8 DD FLAT:??_R1A@?0A@EA@ioPlayEntity@@8 ; ioPlayEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioGameEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3ioPlayEntity@@8
rdata$r	SEGMENT
??_R3ioPlayEntity@@8 DD 00H				; ioPlayEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ioPlayEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioPlayEntity@@@8
_DATA	SEGMENT
??_R0?AVioPlayEntity@@@8 DD FLAT:??_7type_info@@6B@	; ioPlayEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioPlayEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioPlayEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioPlayEntity@@8 DD FLAT:??_R0?AVioPlayEntity@@@8 ; ioPlayEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioPlayEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2ioDummyChar@@8
rdata$r	SEGMENT
??_R2ioDummyChar@@8 DD FLAT:??_R1A@?0A@EA@ioDummyChar@@8 ; ioDummyChar::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioPlayEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioGameEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
	DD	FLAT:??_R1BMI@?0A@EA@ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R3ioDummyChar@@8
rdata$r	SEGMENT
??_R3ioDummyChar@@8 DD 00H				; ioDummyChar::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2ioDummyChar@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioDummyChar@@@8
_DATA	SEGMENT
??_R0?AVioDummyChar@@@8 DD FLAT:??_7type_info@@6B@	; ioDummyChar `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioDummyChar@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioDummyChar@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioDummyChar@@8 DD FLAT:??_R0?AVioDummyChar@@@8 ; ioDummyChar::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioDummyChar@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioVehicleDummy@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioVehicleDummy@@8 DD FLAT:??_R0?AVioVehicleDummy@@@8 ; ioVehicleDummy::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioVehicleDummy@@8
rdata$r	ENDS
;	COMDAT ??_R2ioVehicleDummy@@8
rdata$r	SEGMENT
??_R2ioVehicleDummy@@8 DD FLAT:??_R1A@?0A@EA@ioVehicleDummy@@8 ; ioVehicleDummy::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioDummyChar@@8
	DD	FLAT:??_R1A@?0A@EA@ioPlayEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioGameEntity@@8
	DD	FLAT:??_R1A@?0A@EA@ioEntityEvent@@8
	DD	FLAT:??_R1BMI@?0A@EA@ioWorldEventReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R3ioVehicleDummy@@8
rdata$r	SEGMENT
??_R3ioVehicleDummy@@8 DD 00H				; ioVehicleDummy::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2ioVehicleDummy@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioVehicleDummy@@@8
_DATA	SEGMENT
??_R0?AVioVehicleDummy@@@8 DD FLAT:??_7type_info@@6B@	; ioVehicleDummy `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioVehicleDummy@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioVehicleDummy@@6BioPlayEntity@@@
rdata$r	SEGMENT
??_R4ioVehicleDummy@@6BioPlayEntity@@@ DD 00H		; ioVehicleDummy::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioVehicleDummy@@@8
	DD	FLAT:??_R3ioVehicleDummy@@8
rdata$r	ENDS
;	COMDAT ??_7ioVehicleDummy@@6BioWorldEventReceiver@@@
CONST	SEGMENT
??_7ioVehicleDummy@@6BioWorldEventReceiver@@@ DD FLAT:??_R4ioVehicleDummy@@6BioWorldEventReceiver@@@ ; ioVehicleDummy::`vftable'
	DD	FLAT:?OnTelepotation@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?OnFireZoneDamage@ioDummyChar@@UAEXMABVioHashString@@@Z
	DD	FLAT:?OnPoisonZoneDamage@ioDummyChar@@UAEXXZ
	DD	FLAT:??_EioVehicleDummy@@WBMI@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7ioVehicleDummy@@6BioPlayEntity@@@
CONST	SEGMENT
??_7ioVehicleDummy@@6BioPlayEntity@@@ DD FLAT:??_R4ioVehicleDummy@@6BioPlayEntity@@@ ; ioVehicleDummy::`vftable'
	DD	FLAT:?AddEntityEvent@ioDummyChar@@UAEXPAVioEntity@@@Z
	DD	FLAT:??_EioVehicleDummy@@UAEPAXI@Z
	DD	FLAT:?Update@ioDummyChar@@UAEXMKK@Z
	DD	FLAT:?UpdateAfter@ioDummyChar@@UAEXM@Z
	DD	FLAT:?GetTypeID@ioPlayEntity@@UBEHXZ
	DD	FLAT:?IsNeedCheckMapCollision@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsMountAvailable@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsMountingAvailable@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsNowMountEnable@ioDummyChar@@UBE_NXZ
	DD	FLAT:?IsAllWeaponDefence@ioGameEntity@@UBE_NXZ
	DD	FLAT:?HasEntity@ioGameEntity@@UAE_NABVioHashString@@@Z
	DD	FLAT:?AddEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z
	DD	FLAT:?DestroyEntity@ioGameEntity@@UAE_NABVioHashString@@@Z
	DD	FLAT:?GetEntity@ioGameEntity@@UAEPAVioEntity@@ABVioHashString@@@Z
	DD	FLAT:?UpdateBound@ioGameEntity@@MBEXXZ
	DD	FLAT:?UpdateBottomHeight@ioDummyChar@@MBEXXZ
	DD	FLAT:?NeedUpdateBottomHeight@ioDummyChar@@UAEXXZ
	DD	FLAT:?SetWorldPosition@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?SetWorldOrientation@ioGameEntity@@UAEXABUD3DXQUATERNION@@@Z
	DD	FLAT:?SetWorldScale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?Translate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?TranslateByConveyer@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?TranslateByWorldEntity@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?MapCollisionPushingTranslate@ioDummyChar@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?DontMoveCollisionPushingTranslate@ioGameEntity@@UAEXPAV1@ABUD3DXVECTOR3@@@Z
	DD	FLAT:?Rotate@ioGameEntity@@UAEXABUD3DXVECTOR3@@MW4TransformSpace@ioNode@@@Z
	DD	FLAT:?Scale@ioGameEntity@@UAEXMMM@Z
	DD	FLAT:?Scale@ioGameEntity@@UAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?GetWorldPosition@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ
	DD	FLAT:?GetWorldOrientation@ioGameEntity@@UBEABUD3DXQUATERNION@@XZ
	DD	FLAT:?GetWorldScale@ioGameEntity@@UBEABUD3DXVECTOR3@@XZ
	DD	FLAT:?ApplyWeapon@ioDummyChar@@UAE?AW4ApplyWeaponExp@@PAVioWeapon@@@Z
	DD	FLAT:?IsCollisionAvailableWeapon@ioDummyChar@@UAE_NPAVioWeapon@@@Z
	DD	FLAT:?IsCollisionAvailableRange@ioPlayEntity@@UAE_NPAVioWeapon@@@Z
	DD	FLAT:?IsEntityCollisionSkipState@ioDummyChar@@UBE_NPAVioGameEntity@@@Z
	DD	FLAT:?IsCharCollisionSkipState@ioDummyChar@@UBE_NW4TeamType@@H@Z
	DD	FLAT:?IsWoundedCollision@ioPlayEntity@@UBE_NABVioOrientBox@@PAUD3DXVECTOR3@@@Z
	DD	FLAT:?GetAttackCollisionBox@ioDummyChar@@UAE?AVioOrientBox@@W4AniCollisionType@@_N@Z
	DD	FLAT:?CheckSphereDistance@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAM@Z
	DD	FLAT:?CheckSpherePoint@ioPlayEntity@@UBE_NABUD3DXVECTOR3@@MAAU2@@Z
	DD	FLAT:?CheckCylinderPoint@ioPlayEntity@@UBE_NABVioCylinder@@ABUD3DXVECTOR3@@AAU3@@Z
	DD	FLAT:?GetSubType@ioDummyChar@@UBE?AW4PlaySubType@ioPlayEntity@@XZ
	DD	FLAT:?GetArmorType@ioDummyChar@@UBE?AW4ArmorType@@XZ
	DD	FLAT:?DontMoveEntityLevel@ioDummyChar@@UBEHXZ
	DD	FLAT:?NotifyDontMoveCollisionPushingSkip@ioPlayEntity@@UAEXPAVioGameEntity@@@Z
	DD	FLAT:?LoadProperty@ioVehicleDummy@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?GetWorldEventReceiver@ioDummyChar@@UAEPAVioWorldEventReceiver@@XZ
	DD	FLAT:?Revival@ioPlayEntity@@UAEXXZ
	DD	FLAT:?UpdateGauge@ioDummyChar@@UAEXXZ
	DD	FLAT:?RenderGauge@ioDummyChar@@UAEXXZ
	DD	FLAT:?FillMaxHP@ioPlayEntity@@UAEXXZ
	DD	FLAT:?ProcessRecovery@ioPlayEntity@@MAEXXZ
	DD	FLAT:?AddHeadDamageInfo@ioPlayEntity@@UAEXH_N@Z
	DD	FLAT:?RenderHeadInfoList@ioPlayEntity@@UAEXHH@Z
	DD	FLAT:?UpdateHeadInfoList@ioPlayEntity@@MAEXK@Z
	DD	FLAT:?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z
	DD	FLAT:?InitDummyCharInfo@ioDummyChar@@UAEXHKABUD3DXVECTOR3@@0M_N@Z
	DD	FLAT:?TestMapCollision@ioDummyChar@@UAE_NPAVioOpcodeShape@@PAVioPlayStage@@PBUD3DXMATRIX@@@Z
	DD	FLAT:?CheckEntityCollision@ioDummyChar@@UAEXPAVioPlayEntity@@@Z
	DD	FLAT:?GetDummyGrassType@ioDummyChar@@UAEHXZ
	DD	FLAT:?IsActivateWeapon@ioDummyChar@@UAE_NXZ
	DD	FLAT:?IsDummyVsDummyCollisionSkipState@ioDummyChar@@UAE_NPBV1@@Z
	DD	FLAT:?ProcessState@ioVehicleDummy@@MAEXMK@Z
	DD	FLAT:?ProcessPos@ioVehicleDummy@@MAEXM@Z
	DD	FLAT:?ProcessDelayState@ioVehicleDummy@@MAEXM@Z
	DD	FLAT:?ProcessMoveState@ioVehicleDummy@@MAEXM@Z
	DD	FLAT:?ProcessDashState@ioDummyChar@@MAEXM@Z
	DD	FLAT:?ProcessAttackState@ioDummyChar@@MAEXMK@Z
	DD	FLAT:?ApplyDummyCharSync@ioDummyChar@@UAEXPAVioPlayStage@@AAVSP2Packet@@@Z
	DD	FLAT:?SetDelayState@ioDummyChar@@UAEX_N@Z
	DD	FLAT:?SetMoveState@ioVehicleDummy@@UAEXXZ
	DD	FLAT:?SetDieState@ioDummyChar@@UAEX_N0@Z
	DD	FLAT:?SetDashState@ioDummyChar@@UAEXXZ
	DD	FLAT:?SetAttackState@ioDummyChar@@UAEXXZ
	DD	FLAT:?DropZoneCheck@ioDummyChar@@MAEXXZ
	DD	FLAT:?SendAttackInfoToSkill@ioDummyChar@@MAEXXZ
	DD	FLAT:?CheckCollisionWeapon@ioDummyChar@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?TranslateMountEntity@ioDummyChar@@MAEXABUD3DXVECTOR3@@@Z
	DD	FLAT:?ClearMountEntity@ioDummyChar@@MAEXXZ
	DD	FLAT:?UpdateMountedEntityList@ioDummyChar@@MAEXXZ
	DD	FLAT:?UpdateMountedWeaponList@ioDummyChar@@MAEXXZ
	DD	FLAT:?SetWorldPositionMountEntity@ioDummyChar@@MAEXM@Z
	DD	FLAT:?DummyDieClearMountEntity@ioDummyChar@@MAEXXZ
	DD	FLAT:?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ
	DD	FLAT:?FillDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?ApplyDummyCharMidSync@ioDummyChar@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?GetSkillMaxActiveCnt@ioDummyChar@@UAEHXZ
	DD	FLAT:?GetSkillCurActiveCnt@ioDummyChar@@UAEHXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0ioVehicleDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0ioVehicleDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0ioVehicleDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioVehicleDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioVehicleDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioVehicleDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ioVehicleDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0ioVehicleDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$4
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioVehicleDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pGrp$ = 8						; size = 4
_pMode$ = 12						; size = 4
??0ioVehicleDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z PROC ; ioVehicleDummy::ioVehicleDummy, COMDAT
; _this$ = ecx

; 21   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioVehicleDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 75 0c	 push	 DWORD PTR _pMode$[ebp]
  00014	ff 75 08	 push	 DWORD PTR _pGrp$[ebp]
  00017	e8 00 00 00 00	 call	 ??0ioDummyChar@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z ; ioDummyChar::ioDummyChar
  0001c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00022	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00026	8d 8e 84 14 00
	00		 lea	 ecx, DWORD PTR [esi+5252]
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioVehicleDummy@@6BioPlayEntity@@@
  00032	c7 86 c8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+456], OFFSET ??_7ioVehicleDummy@@6BioWorldEventReceiver@@@
  0003c	ff d7		 call	 edi
  0003e	8d 8e 98 14 00
	00		 lea	 ecx, DWORD PTR [esi+5272]
  00044	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00048	ff d7		 call	 edi
  0004a	8d 8e ac 14 00
	00		 lea	 ecx, DWORD PTR [esi+5292]
  00050	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00054	ff d7		 call	 edi
  00056	8d 8e c0 14 00
	00		 lea	 ecx, DWORD PTR [esi+5312]
  0005c	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00060	ff d7		 call	 edi
  00062	8d 8e d4 14 00
	00		 lea	 ecx, DWORD PTR [esi+5332]
  00068	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0006c	ff d7		 call	 edi

; 22   : 	m_eDriverState = ioVehicleDriverObjectItem::VDS_NONE;

  0006e	83 a6 80 14 00
	00 00		 and	 DWORD PTR [esi+5248], 0

; 23   : }

  00075	8b c6		 mov	 eax, esi
  00077	e8 00 00 00 00	 call	 __EH_epilog3
  0007c	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioVehicleDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioDummyChar@@UAE@XZ	; ioDummyChar::~ioDummyChar
__unwindfunclet$??0ioVehicleDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 84 14 00
	00		 add	 ecx, 5252		; 00001484H
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioVehicleDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 98 14 00
	00		 add	 ecx, 5272		; 00001498H
  00020	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioVehicleDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$3:
  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	81 c1 ac 14 00
	00		 add	 ecx, 5292		; 000014acH
  0002f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioVehicleDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z$4:
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	81 c1 c0 14 00
	00		 add	 ecx, 5312		; 000014c0H
  0003e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0ioVehicleDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z:
  00044	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00048	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004b	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0004e	33 c8		 xor	 ecx, eax
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioVehicleDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z
  0005a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioVehicleDummy@@QAE@PAVioEntityGroup@@PAVioPlayMode@@@Z ENDP ; ioVehicleDummy::ioVehicleDummy
PUBLIC	??1ioVehicleDummy@@UAE@XZ			; ioVehicleDummy::~ioVehicleDummy
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1ioVehicleDummy@@UAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1ioVehicleDummy@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1ioVehicleDummy@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioVehicleDummy@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioVehicleDummy@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1ioVehicleDummy@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1ioVehicleDummy@@UAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1ioVehicleDummy@@UAE@XZ$4
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioVehicleDummy@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioVehicleDummy@@UAE@XZ PROC				; ioVehicleDummy::~ioVehicleDummy, COMDAT
; _this$ = ecx

; 26   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioVehicleDummy@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioVehicleDummy@@6BioPlayEntity@@@
  00017	c7 86 c8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+456], OFFSET ??_7ioVehicleDummy@@6BioWorldEventReceiver@@@

; 27   : }

  00021	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00027	8d 8e d4 14 00
	00		 lea	 ecx, DWORD PTR [esi+5332]
  0002d	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  00034	ff d7		 call	 edi
  00036	8d 8e c0 14 00
	00		 lea	 ecx, DWORD PTR [esi+5312]
  0003c	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00040	ff d7		 call	 edi
  00042	8d 8e ac 14 00
	00		 lea	 ecx, DWORD PTR [esi+5292]
  00048	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0004c	ff d7		 call	 edi
  0004e	8d 8e 98 14 00
	00		 lea	 ecx, DWORD PTR [esi+5272]
  00054	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00058	ff d7		 call	 edi
  0005a	8d 8e 84 14 00
	00		 lea	 ecx, DWORD PTR [esi+5252]
  00060	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00064	ff d7		 call	 edi
  00066	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0006a	8b ce		 mov	 ecx, esi
  0006c	e8 00 00 00 00	 call	 ??1ioDummyChar@@UAE@XZ	; ioDummyChar::~ioDummyChar
  00071	e8 00 00 00 00	 call	 __EH_epilog3
  00076	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioVehicleDummy@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioDummyChar@@UAE@XZ	; ioDummyChar::~ioDummyChar
__unwindfunclet$??1ioVehicleDummy@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 84 14 00
	00		 add	 ecx, 5252		; 00001484H
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioVehicleDummy@@UAE@XZ$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 98 14 00
	00		 add	 ecx, 5272		; 00001498H
  00020	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioVehicleDummy@@UAE@XZ$3:
  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	81 c1 ac 14 00
	00		 add	 ecx, 5292		; 000014acH
  0002f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioVehicleDummy@@UAE@XZ$4:
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	81 c1 c0 14 00
	00		 add	 ecx, 5312		; 000014c0H
  0003e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1ioVehicleDummy@@UAE@XZ:
  00044	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00048	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004b	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0004e	33 c8		 xor	 ecx, eax
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioVehicleDummy@@UAE@XZ
  0005a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioVehicleDummy@@UAE@XZ ENDP				; ioVehicleDummy::~ioVehicleDummy
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	?GetOwner@ioDummyChar@@QBEPAVioBaseChar@@XZ:PROC ; ioDummyChar::GetOwner
; Function compile flags: /Ogsp
;	COMDAT ?ProcessPos@ioVehicleDummy@@MAEXM@Z
_TEXT	SEGMENT
_dwCurTime$ = -4					; size = 4
_fTimePerSec$ = 8					; size = 4
?ProcessPos@ioVehicleDummy@@MAEXM@Z PROC		; ioVehicleDummy::ProcessPos, COMDAT
; _this$ = ecx

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx

; 83   : 	ioBaseChar *pOwner = GetOwner();

  00008	e8 00 00 00 00	 call	 ?GetOwner@ioDummyChar@@QBEPAVioBaseChar@@XZ ; ioDummyChar::GetOwner
  0000d	8b f8		 mov	 edi, eax

; 84   : 	if( !pOwner )

  0000f	85 ff		 test	 edi, edi
  00011	74 48		 je	 SHORT $LN3@ProcessPos

; 85   : 		return;
; 86   : 
; 87   : 	DWORD dwCurTime = FRAMEGETTIME();

  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00019	8b c8		 mov	 ecx, eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 88   : 
; 89   : 	if( m_State == DCS_START )

  00021	83 be 30 02 00
	00 01		 cmp	 DWORD PTR [esi+560], 1
  00028	89 45 fc	 mov	 DWORD PTR _dwCurTime$[ebp], eax
  0002b	75 06		 jne	 SHORT $LN1@ProcessPos

; 90   : 	{
; 91   : 		m_dwProcessTime = dwCurTime;

  0002d	89 86 1c 02 00
	00		 mov	 DWORD PTR [esi+540], eax
$LN1@ProcessPos:

; 92   : 	}
; 93   : 
; 94   : 	SetWorldPosition( pOwner->GetWorldPosition() );

  00033	8b 07		 mov	 eax, DWORD PTR [edi]
  00035	53		 push	 ebx
  00036	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00038	8b cf		 mov	 ecx, edi
  0003a	ff 50 70	 call	 DWORD PTR [eax+112]
  0003d	50		 push	 eax
  0003e	8b ce		 mov	 ecx, esi
  00040	ff 53 44	 call	 DWORD PTR [ebx+68]

; 95   : 	SetWorldOrientation( pOwner->GetTargetRot() );

  00043	8b 06		 mov	 eax, DWORD PTR [esi]
  00045	81 c7 a4 06 00
	00		 add	 edi, 1700		; 000006a4H
  0004b	57		 push	 edi
  0004c	8b ce		 mov	 ecx, esi
  0004e	ff 50 48	 call	 DWORD PTR [eax+72]

; 96   : 
; 97   : 	m_dwProcessTime = dwCurTime;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _dwCurTime$[ebp]
  00054	89 86 1c 02 00
	00		 mov	 DWORD PTR [esi+540], eax
  0005a	5b		 pop	 ebx
$LN3@ProcessPos:
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi

; 98   : }

  0005d	c9		 leave
  0005e	c2 04 00	 ret	 4
?ProcessPos@ioVehicleDummy@@MAEXM@Z ENDP		; ioVehicleDummy::ProcessPos
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?ProcessMoveState@ioVehicleDummy@@MAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessMoveState@ioVehicleDummy@@MAEXM@Z PROC		; ioVehicleDummy::ProcessMoveState, COMDAT
; _this$ = ecx

; 115  : 	ioBaseChar *pOwner = GetOwner();

  00000	e8 00 00 00 00	 call	 ?GetOwner@ioDummyChar@@QBEPAVioBaseChar@@XZ ; ioDummyChar::GetOwner

; 116  : 	if( !pOwner )
; 117  : 		return;
; 118  : }

  00005	c2 04 00	 ret	 4
?ProcessMoveState@ioVehicleDummy@@MAEXM@Z ENDP		; ioVehicleDummy::ProcessMoveState
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	__real@3f800000
PUBLIC	__real@42c80000
PUBLIC	?SetMoveStateMid@ioVehicleDummy@@QAEXXZ		; ioVehicleDummy::SetMoveStateMid
EXTRN	__imp_?SetLoopAniInMid@ioEntityGroup@@QAE_NHMMMM@Z:PROC
EXTRN	?GetRunDashAniRate@ioBaseChar@@QBEMXZ:PROC	; ioBaseChar::GetRunDashAniRate
EXTRN	__imp_?GetCurTime@ioAnimation@@QBEMXZ:PROC
EXTRN	__imp_?GetLoopInPlay@ioEntityGroup@@QAEPAVioAnimation@@H@Z:PROC
EXTRN	__imp_?ClearAllLoopAniExceptOne@ioEntityGroup@@QAE_NHM_N@Z:PROC
EXTRN	__imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z:PROC
EXTRN	__imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z:PROC
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	__fltused:DWORD
EXTRN	__ftol2:PROC
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?SetMoveStateMid@ioVehicleDummy@@QAEXXZ
_TEXT	SEGMENT
tv195 = -4						; size = 4
_pOwner$ = -4						; size = 4
?SetMoveStateMid@ioVehicleDummy@@QAEXXZ PROC		; ioVehicleDummy::SetMoveStateMid, COMDAT
; _this$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 174  : 	ioBaseChar *pOwner = GetOwner();

  00007	e8 00 00 00 00	 call	 ?GetOwner@ioDummyChar@@QBEPAVioBaseChar@@XZ ; ioDummyChar::GetOwner
  0000c	89 45 fc	 mov	 DWORD PTR _pOwner$[ebp], eax

; 175  : 	if( !pOwner )

  0000f	85 c0		 test	 eax, eax
  00011	0f 84 d6 00 00
	00		 je	 $LN2@SetMoveSta

; 176  : 		return;
; 177  : 
; 178  : 	if( m_State != DCS_MOVE )

  00017	83 be 30 02 00
	00 03		 cmp	 DWORD PTR [esi+560], 3
  0001e	0f 85 c9 00 00
	00		 jne	 $LN2@SetMoveSta

; 179  : 		return;
; 180  : 
; 181  : 	if( !m_MoveAnimation.IsEmpty() )

  00024	57		 push	 edi
  00025	8d be bc 06 00
	00		 lea	 edi, DWORD PTR [esi+1724]
  0002b	8b cf		 mov	 ecx, edi
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00033	84 c0		 test	 al, al
  00035	0f 85 b1 00 00
	00		 jne	 $LN8@SetMoveSta

; 182  : 	{
; 183  : 		int iAniID = m_pGroup->GetAnimationIdx( m_MoveAnimation );

  0003b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0003e	57		 push	 edi
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z
  00045	8b f8		 mov	 edi, eax

; 184  : 		if( iAniID != -1 )

  00047	83 ff ff	 cmp	 edi, -1
  0004a	0f 84 9c 00 00
	00		 je	 $LN8@SetMoveSta

; 185  : 		{
; 186  : 			m_pGroup->ClearAllActionAni( 100.0f, true );

  00050	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00058	53		 push	 ebx
  00059	6a 01		 push	 1
  0005b	51		 push	 ecx
  0005c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 187  : 			m_pGroup->ClearAllLoopAniExceptOne( iAniID, 100.0f, true );

  0006a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00072	6a 01		 push	 1
  00074	51		 push	 ecx
  00075	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00078	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007d	57		 push	 edi
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAniExceptOne@ioEntityGroup@@QAE_NHM_N@Z

; 188  : 
; 189  : 			DWORD dwPlayTime = 0;
; 190  : 			ioAnimation *pAni = m_pGroup->GetLoopInPlay( iAniID );

  00084	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00087	57		 push	 edi
  00088	33 db		 xor	 ebx, ebx
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopInPlay@ioEntityGroup@@QAEPAVioAnimation@@H@Z

; 191  : 			if( pAni ) 

  00090	85 c0		 test	 eax, eax
  00092	74 0f		 je	 SHORT $LN1@SetMoveSta

; 192  : 				dwPlayTime = pAni->GetCurTime();

  00094	8b c8		 mov	 ecx, eax
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetCurTime@ioAnimation@@QBEMXZ
  0009c	e8 00 00 00 00	 call	 __ftol2
  000a1	8b d8		 mov	 ebx, eax
$LN1@SetMoveSta:

; 193  : 
; 194  : 			m_pGroup->SetLoopAniInMid( iAniID, dwPlayTime, 100.0f, 1.0f, pOwner->GetRunDashAniRate() );

  000a3	8b 4d fc	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  000a6	e8 00 00 00 00	 call	 ?GetRunDashAniRate@ioBaseChar@@QBEMXZ ; ioBaseChar::GetRunDashAniRate
  000ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000b3	83 ec 10	 sub	 esp, 16			; 00000010H
  000b6	d9 5c 24 0c	 fstp	 DWORD PTR [esp+12]
  000ba	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  000c8	89 5d fc	 mov	 DWORD PTR tv195[ebp], ebx
  000cb	db 45 fc	 fild	 DWORD PTR tv195[ebp]
  000ce	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000d4	85 db		 test	 ebx, ebx
  000d6	79 06		 jns	 SHORT $LN9@SetMoveSta
  000d8	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN9@SetMoveSta:
  000de	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000e1	d9 1c 24	 fstp	 DWORD PTR [esp]
  000e4	57		 push	 edi
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetLoopAniInMid@ioEntityGroup@@QAE_NHMMMM@Z
  000eb	5b		 pop	 ebx
$LN8@SetMoveSta:
  000ec	5f		 pop	 edi
$LN2@SetMoveSta:
  000ed	5e		 pop	 esi

; 195  : 		}
; 196  : 	}
; 197  : }

  000ee	c9		 leave
  000ef	c3		 ret	 0
?SetMoveStateMid@ioVehicleDummy@@QAEXXZ ENDP		; ioVehicleDummy::SetMoveStateMid
_TEXT	ENDS
PUBLIC	?SetRunState@ioVehicleDummy@@QAEXXZ		; ioVehicleDummy::SetRunState
EXTRN	__imp_?SetLoopAni@ioEntityGroup@@QAE_NHMMMM@Z:PROC
EXTRN	__imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?SetRunState@ioVehicleDummy@@QAEXXZ
_TEXT	SEGMENT
?SetRunState@ioVehicleDummy@@QAEXXZ PROC		; ioVehicleDummy::SetRunState, COMDAT
; _this$ = ecx

; 200  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 201  : 	if( !m_MoveAnimation.IsEmpty() )

  00004	8d be bc 06 00
	00		 lea	 edi, DWORD PTR [esi+1724]
  0000a	8b cf		 mov	 ecx, edi
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00012	84 c0		 test	 al, al
  00014	0f 85 82 00 00
	00		 jne	 $LN1@SetRunStat

; 202  : 	{
; 203  : 		int iAniID = m_pGroup->GetAnimationIdx( m_MoveAnimation );

  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	57		 push	 edi
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z
  00024	8b f8		 mov	 edi, eax

; 204  : 		if( iAniID != -1 )

  00026	83 ff ff	 cmp	 edi, -1
  00029	74 71		 je	 SHORT $LN1@SetRunStat

; 205  : 		{
; 206  : 			m_pGroup->ClearAllActionAni( 100.0f, true );

  0002b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00033	6a 01		 push	 1
  00035	51		 push	 ecx
  00036	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 207  : 			m_pGroup->ClearAllLoopAni( 100.0f, true );

  00044	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0004c	6a 01		 push	 1
  0004e	51		 push	 ecx
  0004f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00052	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 208  : 			m_pGroup->SetLoopAni( iAniID, 100.0f, 1.0f, m_fMoveAniRate );

  0005d	0f 57 c0	 xorps	 xmm0, xmm0
  00060	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00063	83 ec 10	 sub	 esp, 16			; 00000010H
  00066	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0006c	f3 0f 10 86 cc
	06 00 00	 movss	 xmm0, DWORD PTR [esi+1740]
  00074	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0007a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00082	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00088	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00090	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00095	57		 push	 edi
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetLoopAni@ioEntityGroup@@QAE_NHMMMM@Z
$LN1@SetRunStat:

; 209  : 		}
; 210  : 	}
; 211  : }

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	c3		 ret	 0
?SetRunState@ioVehicleDummy@@QAEXXZ ENDP		; ioVehicleDummy::SetRunState
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	?SetJumpReadyState@ioVehicleDummy@@QAEXXZ	; ioVehicleDummy::SetJumpReadyState
EXTRN	__imp_?SetActionAni@ioEntityGroup@@QAE_NHMMMMMM_N0@Z:PROC
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?SetJumpReadyState@ioVehicleDummy@@QAEXXZ
_TEXT	SEGMENT
?SetJumpReadyState@ioVehicleDummy@@QAEXXZ PROC		; ioVehicleDummy::SetJumpReadyState, COMDAT
; _this$ = ecx

; 214  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 215  : 	if( !m_JumpReadyAnimation.IsEmpty() )

  00004	8d be 84 14 00
	00		 lea	 edi, DWORD PTR [esi+5252]
  0000a	8b cf		 mov	 ecx, edi
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00012	84 c0		 test	 al, al
  00014	0f 85 a9 00 00
	00		 jne	 $LN1@SetJumpRea

; 216  : 	{
; 217  : 		int iAniID = m_pGroup->GetAnimationIdx( m_JumpReadyAnimation );

  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	57		 push	 edi
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z
  00024	8b f8		 mov	 edi, eax

; 218  : 		if( iAniID != -1 )

  00026	83 ff ff	 cmp	 edi, -1
  00029	0f 84 94 00 00
	00		 je	 $LN1@SetJumpRea

; 219  : 		{
; 220  : 			m_pGroup->ClearAllActionAni( 100.0f, true );

  0002f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00037	6a 01		 push	 1
  00039	51		 push	 ecx
  0003a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 221  : 			m_pGroup->ClearAllLoopAni( 100.0f, true );

  00048	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00050	6a 01		 push	 1
  00052	51		 push	 ecx
  00053	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00056	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 222  : 			m_pGroup->SetActionAni( iAniID, 100.0f, 100.0f, 1.0f, 1.0f / m_fJumpReadyAniRate );

  00061	0f 57 c0	 xorps	 xmm0, xmm0
  00064	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0006c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0006f	6a 01		 push	 1
  00071	6a 00		 push	 0
  00073	83 ec 18	 sub	 esp, 24			; 00000018H
  00076	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  0007c	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00082	f3 0f 10 86 94
	14 00 00	 movss	 xmm0, DWORD PTR [esi+5268]
  0008a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0008d	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00091	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  00095	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0009b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000a3	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  000b1	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bc	57		 push	 edi
  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetActionAni@ioEntityGroup@@QAE_NHMMMMMM_N0@Z
$LN1@SetJumpRea:

; 223  : 		}
; 224  : 	}
; 225  : }

  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	c3		 ret	 0
?SetJumpReadyState@ioVehicleDummy@@QAEXXZ ENDP		; ioVehicleDummy::SetJumpReadyState
_TEXT	ENDS
PUBLIC	?SetJummping@ioVehicleDummy@@QAEXXZ		; ioVehicleDummy::SetJummping
; Function compile flags: /Ogsp
;	COMDAT ?SetJummping@ioVehicleDummy@@QAEXXZ
_TEXT	SEGMENT
?SetJummping@ioVehicleDummy@@QAEXXZ PROC		; ioVehicleDummy::SetJummping, COMDAT
; _this$ = ecx

; 227  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 228  : 	if( !m_JumppingAnimation.IsEmpty() )

  00004	8d be 98 14 00
	00		 lea	 edi, DWORD PTR [esi+5272]
  0000a	8b cf		 mov	 ecx, edi
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00012	84 c0		 test	 al, al
  00014	0f 85 a9 00 00
	00		 jne	 $LN1@SetJummpin

; 229  : 	{
; 230  : 		int iAniID = m_pGroup->GetAnimationIdx( m_JumppingAnimation );

  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	57		 push	 edi
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z
  00024	8b f8		 mov	 edi, eax

; 231  : 		if( iAniID != -1 )

  00026	83 ff ff	 cmp	 edi, -1
  00029	0f 84 94 00 00
	00		 je	 $LN1@SetJummpin

; 232  : 		{
; 233  : 			m_pGroup->ClearAllActionAni( 100.0f, true );

  0002f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00037	6a 01		 push	 1
  00039	51		 push	 ecx
  0003a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 234  : 			m_pGroup->ClearAllLoopAni( 100.0f, true );

  00048	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00050	6a 01		 push	 1
  00052	51		 push	 ecx
  00053	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00056	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 235  : 			m_pGroup->SetActionAni( iAniID, 100.0f, 100.0f, 1.0f, 1.0f / m_fJumppingAniRate );

  00061	0f 57 c0	 xorps	 xmm0, xmm0
  00064	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0006c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0006f	6a 01		 push	 1
  00071	6a 00		 push	 0
  00073	83 ec 18	 sub	 esp, 24			; 00000018H
  00076	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  0007c	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00082	f3 0f 10 86 a8
	14 00 00	 movss	 xmm0, DWORD PTR [esi+5288]
  0008a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0008d	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00091	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  00095	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0009b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000a3	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  000b1	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bc	57		 push	 edi
  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetActionAni@ioEntityGroup@@QAE_NHMMMMMM_N0@Z
$LN1@SetJummpin:

; 236  : 		}
; 237  : 	}
; 238  : }

  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	c3		 ret	 0
?SetJummping@ioVehicleDummy@@QAEXXZ ENDP		; ioVehicleDummy::SetJummping
_TEXT	ENDS
PUBLIC	?SetLanding@ioVehicleDummy@@QAEXXZ		; ioVehicleDummy::SetLanding
; Function compile flags: /Ogsp
;	COMDAT ?SetLanding@ioVehicleDummy@@QAEXXZ
_TEXT	SEGMENT
?SetLanding@ioVehicleDummy@@QAEXXZ PROC			; ioVehicleDummy::SetLanding, COMDAT
; _this$ = ecx

; 241  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 242  : 	if( !m_JumpLandingAnimation.IsEmpty() )

  00004	8d be ac 14 00
	00		 lea	 edi, DWORD PTR [esi+5292]
  0000a	8b cf		 mov	 ecx, edi
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00012	84 c0		 test	 al, al
  00014	0f 85 a9 00 00
	00		 jne	 $LN1@SetLanding

; 243  : 	{
; 244  : 		int iAniID = m_pGroup->GetAnimationIdx( m_JumpLandingAnimation );

  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	57		 push	 edi
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z
  00024	8b f8		 mov	 edi, eax

; 245  : 		if( iAniID != -1 )

  00026	83 ff ff	 cmp	 edi, -1
  00029	0f 84 94 00 00
	00		 je	 $LN1@SetLanding

; 246  : 		{
; 247  : 			m_pGroup->ClearAllActionAni( 100.0f, true );

  0002f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00037	6a 01		 push	 1
  00039	51		 push	 ecx
  0003a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 248  : 			m_pGroup->ClearAllLoopAni( 100.0f, true );

  00048	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00050	6a 01		 push	 1
  00052	51		 push	 ecx
  00053	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00056	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 249  : 			m_pGroup->SetActionAni( iAniID, 100.0f, 100.0f, 1.0f, 1.0f / m_fJumpLandingAniRate );

  00061	0f 57 c0	 xorps	 xmm0, xmm0
  00064	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0006c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0006f	6a 01		 push	 1
  00071	6a 00		 push	 0
  00073	83 ec 18	 sub	 esp, 24			; 00000018H
  00076	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  0007c	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00082	f3 0f 10 86 bc
	14 00 00	 movss	 xmm0, DWORD PTR [esi+5308]
  0008a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0008d	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00091	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  00095	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0009b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000a3	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  000b1	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bc	57		 push	 edi
  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetActionAni@ioEntityGroup@@QAE_NHMMMMMM_N0@Z
$LN1@SetLanding:

; 250  : 		}
; 251  : 	}
; 252  : }

  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	c3		 ret	 0
?SetLanding@ioVehicleDummy@@QAEXXZ ENDP			; ioVehicleDummy::SetLanding
_TEXT	ENDS
PUBLIC	?SetDrift@ioVehicleDummy@@QAEX_N@Z		; ioVehicleDummy::SetDrift
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetDrift@ioVehicleDummy@@QAEX_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetDrift@ioVehicleDummy@@QAEX_N@Z$0
__ehfuncinfo$?SetDrift@ioVehicleDummy@@QAEX_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetDrift@ioVehicleDummy@@QAEX_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?SetDrift@ioVehicleDummy@@QAEX_N@Z
_TEXT	SEGMENT
_szDriftAnimation$ = -28				; size = 16
__$EHRec$ = -12						; size = 12
_fDriftRate$ = 8					; size = 4
_bLeft$ = 8						; size = 1
?SetDrift@ioVehicleDummy@@QAEX_N@Z PROC			; ioVehicleDummy::SetDrift, COMDAT
; _this$ = ecx

; 255  : {

  00000	6a 10		 push	 16			; 00000010H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?SetDrift@ioVehicleDummy@@QAEX_N@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 256  : 	ioHashString szDriftAnimation;

  0000e	8d 4d e4	 lea	 ecx, DWORD PTR _szDriftAnimation$[ebp]
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 257  : 	float fDriftRate = 1.0f;
; 258  : 
; 259  : 	if( bLeft )

  0001b	80 7d 08 00	 cmp	 BYTE PTR _bLeft$[ebp], 0

; 260  : 	{
; 261  : 		szDriftAnimation	= m_DriftLeftAnimation;

  0001f	8d 4d e4	 lea	 ecx, DWORD PTR _szDriftAnimation$[ebp]
  00022	74 17		 je	 SHORT $LN4@SetDrift
  00024	8d 86 c0 14 00
	00		 lea	 eax, DWORD PTR [esi+5312]
  0002a	50		 push	 eax
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 262  : 		fDriftRate			= m_fDriftLeftAniRate;

  00031	f3 0f 10 86 d0
	14 00 00	 movss	 xmm0, DWORD PTR [esi+5328]

; 263  : 	}
; 264  : 	else

  00039	eb 15		 jmp	 SHORT $LN10@SetDrift
$LN4@SetDrift:

; 265  : 	{
; 266  : 		szDriftAnimation	= m_DrifRightAnimation;

  0003b	8d 86 d4 14 00
	00		 lea	 eax, DWORD PTR [esi+5332]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 267  : 		fDriftRate			= m_fDrifRightAniRate;

  00048	f3 0f 10 86 e4
	14 00 00	 movss	 xmm0, DWORD PTR [esi+5348]
$LN10@SetDrift:

; 268  : 	}
; 269  : 
; 270  : 	if( !szDriftAnimation.IsEmpty() )

  00050	8d 4d e4	 lea	 ecx, DWORD PTR _szDriftAnimation$[ebp]
  00053	f3 0f 11 45 08	 movss	 DWORD PTR _fDriftRate$[ebp], xmm0
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0005e	84 c0		 test	 al, al
  00060	0f 85 a9 00 00
	00		 jne	 $LN1@SetDrift

; 271  : 	{
; 272  : 		int iAniID = m_pGroup->GetAnimationIdx( szDriftAnimation );

  00066	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00069	8d 45 e4	 lea	 eax, DWORD PTR _szDriftAnimation$[ebp]
  0006c	50		 push	 eax
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z
  00073	8b f8		 mov	 edi, eax

; 273  : 		if( iAniID != -1 )

  00075	83 ff ff	 cmp	 edi, -1
  00078	0f 84 91 00 00
	00		 je	 $LN1@SetDrift

; 274  : 		{
; 275  : 			m_pGroup->ClearAllActionAni( 100.0f, true );

  0007e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00086	6a 01		 push	 1
  00088	51		 push	 ecx
  00089	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0008c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 276  : 			m_pGroup->ClearAllLoopAni( 100.0f, true );

  00097	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0009f	6a 01		 push	 1
  000a1	51		 push	 ecx
  000a2	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 277  : 			m_pGroup->SetActionAni( iAniID, 100.0f, 100.0f, 1.0f, 1.0f / fDriftRate );

  000b0	0f 57 c0	 xorps	 xmm0, xmm0
  000b3	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000bb	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000be	6a 01		 push	 1
  000c0	6a 00		 push	 0
  000c2	83 ec 18	 sub	 esp, 24			; 00000018H
  000c5	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  000cb	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  000d1	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDriftRate$[ebp]
  000d6	0f 5a c0	 cvtps2pd xmm0, xmm0
  000d9	f2 0f 5e c8	 divsd	 xmm1, xmm0
  000dd	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  000e1	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  000e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000ef	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  000fd	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00103	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00108	57		 push	 edi
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetActionAni@ioEntityGroup@@QAE_NHMMMMMM_N0@Z
$LN1@SetDrift:

; 278  : 		}
; 279  : 	}
; 280  : }

  0010f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00113	8d 4d e4	 lea	 ecx, DWORD PTR _szDriftAnimation$[ebp]
  00116	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0011c	e8 00 00 00 00	 call	 __EH_epilog3
  00121	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetDrift@ioVehicleDummy@@QAEX_N@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _szDriftAnimation$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?SetDrift@ioVehicleDummy@@QAEX_N@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetDrift@ioVehicleDummy@@QAEX_N@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetDrift@ioVehicleDummy@@QAEX_N@Z ENDP			; ioVehicleDummy::SetDrift
; Function compile flags: /Odsp
;	COMDAT ??_EioVehicleDummy@@WBMI@AEPAXI@Z
_TEXT	SEGMENT
??_EioVehicleDummy@@WBMI@AEPAXI@Z PROC			; [thunk]:ioVehicleDummy::`vector deleting destructor', COMDAT
  00000	81 e9 c8 01 00
	00		 sub	 ecx, 456		; 000001c8H
  00006	e9 00 00 00 00	 jmp	 ??_EioVehicleDummy@@UAEPAXI@Z
??_EioVehicleDummy@@WBMI@AEPAXI@Z ENDP			; [thunk]:ioVehicleDummy::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iodummychar.h
_TEXT	ENDS
;	COMDAT ?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ
_TEXT	SEGMENT
?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ PROC		; ioDummyChar::IsDummyCharMidSync, COMDAT
; _this$ = ecx

; 742  : 	virtual bool IsDummyCharMidSync(){ return false; }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsDummyCharMidSync@ioDummyChar@@UAE_NXZ ENDP		; ioDummyChar::IsDummyCharMidSync
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z	; CEncrypt<unsigned long>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z PROC	; CEncrypt<unsigned long>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1256 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1257 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1258 : 		*value = *((DWORD*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 1259 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ENDP	; CEncrypt<unsigned long>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ; CEncrypt<enum TeamType>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
;	COMDAT ?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z PROC ; CEncrypt<enum TeamType>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ENDP ; CEncrypt<enum TeamType>::EncryptValueToPool
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GioVehicleDummy@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioVehicleDummy@@UAEPAXI@Z PROC			; ioVehicleDummy::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioVehicleDummy@@UAE@XZ ; ioVehicleDummy::~ioVehicleDummy
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioVehicleDummy@@UAEPAXI@Z ENDP			; ioVehicleDummy::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?CheckCratorState@ioVehicleDummy@@QAEXPAVioBaseChar@@@Z ; ioVehicleDummy::CheckCratorState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iovehicledummy.cpp
;	COMDAT ?CheckCratorState@ioVehicleDummy@@QAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?CheckCratorState@ioVehicleDummy@@QAEXPAVioBaseChar@@@Z PROC ; ioVehicleDummy::CheckCratorState, COMDAT
; _this$ = ecx

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 122  : 	if( !pOwner )

  00005	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	0f 84 c8 00 00
	00		 je	 $LN6@CheckCrato

; 123  : 		return;
; 124  : 
; 125  : 	if( 0 < m_dwSpecialStateCheckTime )

  00012	83 be e8 14 00
	00 00		 cmp	 DWORD PTR [esi+5352], 0
  00019	76 5e		 jbe	 SHORT $LN9@CheckCrato

; 126  : 	{
; 127  : 		if( pOwner->GetState() == CS_VEHICLE_DRIVER )

  0001b	80 bf 10 03 00
	00 84		 cmp	 BYTE PTR [edi+784], 132	; 00000084H
  00022	75 09		 jne	 SHORT $LN13@CheckCrato

; 128  : 		{
; 129  : 			m_dwCurrCheckTime = 0;

  00024	83 a6 ec 14 00
	00 00		 and	 DWORD PTR [esi+5356], 0
  0002b	eb 4c		 jmp	 SHORT $LN9@CheckCrato
$LN13@CheckCrato:

; 130  : 		}
; 131  : 		else if( pOwner->GetState() != CS_VEHICLE_DRIVER && m_dwCurrCheckTime == 0 )

  0002d	8b 86 ec 14 00
	00		 mov	 eax, DWORD PTR [esi+5356]
  00033	85 c0		 test	 eax, eax
  00035	75 16		 jne	 SHORT $LN31@CheckCrato

; 132  : 		{
; 133  : 			m_dwCurrCheckTime = FRAMEGETTIME();

  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0003d	8b c8		 mov	 ecx, eax
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00045	89 86 ec 14 00
	00		 mov	 DWORD PTR [esi+5356], eax
  0004b	eb 2c		 jmp	 SHORT $LN9@CheckCrato
$LN31@CheckCrato:

; 134  : 		}
; 135  : 		else if( 0 < m_dwCurrCheckTime && m_dwCurrCheckTime + m_dwSpecialStateCheckTime < FRAMEGETTIME() )

  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00053	8b c8		 mov	 ecx, eax
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0005b	8b 8e ec 14 00
	00		 mov	 ecx, DWORD PTR [esi+5356]
  00061	03 8e e8 14 00
	00		 add	 ecx, DWORD PTR [esi+5352]
  00067	3b c8		 cmp	 ecx, eax
  00069	73 0e		 jae	 SHORT $LN9@CheckCrato

; 136  : 		{
; 137  : 			SetDieState( true );

  0006b	8b 06		 mov	 eax, DWORD PTR [esi]
  0006d	6a 00		 push	 0
  0006f	6a 01		 push	 1
  00071	8b ce		 mov	 ecx, esi
  00073	ff 90 1c 01 00
	00		 call	 DWORD PTR [eax+284]
$LN9@CheckCrato:

; 138  : 		}
; 139  : 	}
; 140  : 
; 141  : 	ioVehicleDirverState* pState = ToVehicleDirverState( pOwner->GetSpecialState() );

  00079	ff b7 14 03 00
	00		 push	 DWORD PTR [edi+788]
  0007f	e8 00 00 00 00	 call	 ?ToVehicleDirverState@@YAPAVioVehicleDirverState@@PAVioSpecialStateBase@@@Z ; ToVehicleDirverState
  00084	59		 pop	 ecx

; 142  : 	if( pState && pState->GetDriverState() != m_eDriverState )

  00085	85 c0		 test	 eax, eax
  00087	74 51		 je	 SHORT $LN6@CheckCrato
  00089	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008c	3b 8e 80 14 00
	00		 cmp	 ecx, DWORD PTR [esi+5248]
  00092	74 46		 je	 SHORT $LN6@CheckCrato

; 143  : 	{
; 144  : 		m_eDriverState = pState->GetDriverState();

  00094	89 8e 80 14 00
	00		 mov	 DWORD PTR [esi+5248], ecx

; 145  : 		switch( m_eDriverState )

  0009a	49		 dec	 ecx
  0009b	49		 dec	 ecx
  0009c	74 35		 je	 SHORT $LN5@CheckCrato
  0009e	49		 dec	 ecx
  0009f	74 29		 je	 SHORT $LN4@CheckCrato
  000a1	49		 dec	 ecx
  000a2	74 1d		 je	 SHORT $LN3@CheckCrato
  000a4	49		 dec	 ecx
  000a5	74 11		 je	 SHORT $LN2@CheckCrato
  000a7	49		 dec	 ecx
  000a8	75 30		 jne	 SHORT $LN6@CheckCrato

; 159  : 		case ioVehicleDriverObjectItem::VDS_DRIFT:
; 160  : 			SetDrift( pState->GetDriftLeft() );

  000aa	0f b6 40 0c	 movzx	 eax, BYTE PTR [eax+12]
  000ae	50		 push	 eax
  000af	8b ce		 mov	 ecx, esi
  000b1	e8 00 00 00 00	 call	 ?SetDrift@ioVehicleDummy@@QAEX_N@Z ; ioVehicleDummy::SetDrift

; 161  : 			break;

  000b6	eb 22		 jmp	 SHORT $LN6@CheckCrato
$LN2@CheckCrato:

; 156  : 		case ioVehicleDriverObjectItem::VDS_LADING:
; 157  : 			SetLanding();

  000b8	8b ce		 mov	 ecx, esi
  000ba	e8 00 00 00 00	 call	 ?SetLanding@ioVehicleDummy@@QAEXXZ ; ioVehicleDummy::SetLanding

; 158  : 			break;

  000bf	eb 19		 jmp	 SHORT $LN6@CheckCrato
$LN3@CheckCrato:

; 153  : 		case ioVehicleDriverObjectItem::VDS_JUMPPING:
; 154  : 			SetJummping();

  000c1	8b ce		 mov	 ecx, esi
  000c3	e8 00 00 00 00	 call	 ?SetJummping@ioVehicleDummy@@QAEXXZ ; ioVehicleDummy::SetJummping

; 155  : 			break;

  000c8	eb 10		 jmp	 SHORT $LN6@CheckCrato
$LN4@CheckCrato:

; 149  : 			break;			
; 150  : 		case ioVehicleDriverObjectItem::VDS_JUMP_READY:
; 151  : 			SetJumpReadyState();

  000ca	8b ce		 mov	 ecx, esi
  000cc	e8 00 00 00 00	 call	 ?SetJumpReadyState@ioVehicleDummy@@QAEXXZ ; ioVehicleDummy::SetJumpReadyState

; 152  : 			break;

  000d1	eb 07		 jmp	 SHORT $LN6@CheckCrato
$LN5@CheckCrato:

; 146  : 		{
; 147  : 		case ioVehicleDriverObjectItem::VDS_RUN:			
; 148  : 			SetRunState();

  000d3	8b ce		 mov	 ecx, esi
  000d5	e8 00 00 00 00	 call	 ?SetRunState@ioVehicleDummy@@QAEXXZ ; ioVehicleDummy::SetRunState
$LN6@CheckCrato:
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi

; 162  : 		}
; 163  : 	}
; 164  : }

  000dc	5d		 pop	 ebp
  000dd	c2 04 00	 ret	 4
?CheckCratorState@ioVehicleDummy@@QAEXPAVioBaseChar@@@Z ENDP ; ioVehicleDummy::CheckCratorState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?SetMoveState@ioVehicleDummy@@UAEXXZ
_TEXT	SEGMENT
?SetMoveState@ioVehicleDummy@@UAEXXZ PROC		; ioVehicleDummy::SetMoveState, COMDAT
; _this$ = ecx

; 168  : 	m_State = DCS_MOVE;

  00000	c7 81 30 02 00
	00 03 00 00 00	 mov	 DWORD PTR [ecx+560], 3

; 169  : 	SetRunState();

  0000a	e9 00 00 00 00	 jmp	 ?SetRunState@ioVehicleDummy@@QAEXXZ ; ioVehicleDummy::SetRunState
?SetMoveState@ioVehicleDummy@@UAEXXZ ENDP		; ioVehicleDummy::SetMoveState
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BF@@ioINILoader@@QAEXAAY0BF@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<21>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadString_e@$0BF@@ioINILoader@@QAEXAAY0BF@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -36					; size = 4
__k$ = -32						; size = 21
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BF@@ioINILoader@@QAEXAAY0BF@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<21>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d dc	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 f7 01 00
	00		 je	 $LN96@LoadString
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 e0 01 00
	00		 je	 $LN95@LoadString
  0003a	b1 ec		 mov	 cl, -20			; ffffffecH
  0003c	32 d1		 xor	 dl, cl
  0003e	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00041	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00044	84 d2		 test	 dl, dl
  00046	0f 84 c8 01 00
	00		 je	 $LN94@LoadString
  0004c	b3 eb		 mov	 bl, -21			; ffffffebH
  0004e	32 d3		 xor	 dl, bl
  00050	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  00053	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00056	84 d2		 test	 dl, dl
  00058	0f 84 b0 01 00
	00		 je	 $LN93@LoadString
  0005e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00061	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 99 01 00
	00		 je	 $LN92@LoadString
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 83 01 00
	00		 je	 $LN91@LoadString
  00080	32 d1		 xor	 dl, cl
  00082	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  00085	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00088	84 d2		 test	 dl, dl
  0008a	0f 84 6e 01 00
	00		 je	 $LN90@LoadString
  00090	32 d3		 xor	 dl, bl
  00092	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  00095	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00098	84 d2		 test	 dl, dl
  0009a	0f 84 58 01 00
	00		 je	 $LN89@LoadString
  000a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a3	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 41 01 00
	00		 je	 $LN88@LoadString
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 2b 01 00
	00		 je	 $LN87@LoadString
  000c2	32 d1		 xor	 dl, cl
  000c4	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 16 01 00
	00		 je	 $LN86@LoadString
  000d2	32 d3		 xor	 dl, bl
  000d4	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 00 01 00
	00		 je	 $LN85@LoadString
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 e9 00 00
	00		 je	 $LN84@LoadString
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 d3 00 00
	00		 je	 $LN83@LoadString
  00104	32 d1		 xor	 dl, cl
  00106	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 be 00 00
	00		 je	 $LN82@LoadString
  00114	32 d3		 xor	 dl, bl
  00116	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00119	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011c	84 d2		 test	 dl, dl
  0011e	0f 84 a8 00 00
	00		 je	 $LN81@LoadString
  00124	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00127	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	0f 84 91 00 00
	00		 je	 $LN80@LoadString
  00135	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00138	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  0013b	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013e	84 d2		 test	 dl, dl
  00140	74 7f		 je	 SHORT $LN79@LoadString
  00142	32 d1		 xor	 dl, cl
  00144	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00147	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0014a	84 d2		 test	 dl, dl
  0014c	74 6e		 je	 SHORT $LN78@LoadString
  0014e	32 d3		 xor	 dl, bl
  00150	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	74 5c		 je	 SHORT $LN77@LoadString
  0015a	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0015d	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	0f 84 ba 00 00
	00		 je	 $LN111@LoadString
  0016a	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0016d	84 d2		 test	 dl, dl
  0016f	74 40		 je	 SHORT $LN75@LoadString
  00171	32 d1		 xor	 dl, cl
  00173	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00176	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00179	84 d2		 test	 dl, dl
  0017b	74 2f		 je	 SHORT $LN74@LoadString
  0017d	32 d3		 xor	 dl, bl
  0017f	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00182	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00185	84 d2		 test	 dl, dl
  00187	74 1d		 je	 SHORT $LN73@LoadString
  00189	8a 40 18	 mov	 al, BYTE PTR [eax+24]
  0018c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0018f	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  00192	84 c0		 test	 al, al
  00194	74 0a		 je	 SHORT $LN72@LoadString
  00196	34 ed		 xor	 al, -19			; ffffffedH
  00198	88 45 f8	 mov	 BYTE PTR __k$[ebp+24], al
  0019b	e9 84 00 00 00	 jmp	 $LN111@LoadString
$LN72@LoadString:
  001a0	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001a4	eb 7e		 jmp	 SHORT $LN111@LoadString
$LN73@LoadString:
  001a6	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  001aa	eb 78		 jmp	 SHORT $LN111@LoadString
$LN74@LoadString:
  001ac	88 5d f6	 mov	 BYTE PTR __k$[ebp+22], bl
  001af	eb 73		 jmp	 SHORT $LN111@LoadString
$LN75@LoadString:
  001b1	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001b4	eb 6e		 jmp	 SHORT $LN111@LoadString
$LN77@LoadString:
  001b6	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  001ba	eb 68		 jmp	 SHORT $LN111@LoadString
$LN78@LoadString:
  001bc	88 5d f2	 mov	 BYTE PTR __k$[ebp+18], bl
  001bf	eb 63		 jmp	 SHORT $LN111@LoadString
$LN79@LoadString:
  001c1	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001c4	eb 5e		 jmp	 SHORT $LN111@LoadString
$LN80@LoadString:
  001c6	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001ca	eb 58		 jmp	 SHORT $LN111@LoadString
$LN81@LoadString:
  001cc	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001d0	eb 52		 jmp	 SHORT $LN111@LoadString
$LN82@LoadString:
  001d2	88 5d ee	 mov	 BYTE PTR __k$[ebp+14], bl
  001d5	eb 4d		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  001d7	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  001da	eb 48		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  001dc	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001e0	eb 42		 jmp	 SHORT $LN111@LoadString
$LN85@LoadString:
  001e2	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001e6	eb 3c		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  001e8	88 5d ea	 mov	 BYTE PTR __k$[ebp+10], bl
  001eb	eb 37		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  001ed	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  001f0	eb 32		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  001f2	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001f6	eb 2c		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  001f8	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001fc	eb 26		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  001fe	88 5d e6	 mov	 BYTE PTR __k$[ebp+6], bl
  00201	eb 21		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  00203	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  00206	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  00208	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0020c	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  0020e	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00212	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  00214	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00218	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  0021a	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0021e	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  00220	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  00224	6a 05		 push	 5
  00226	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00229	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+20], 0
  0022d	5a		 pop	 edx
$LL104@LoadString:
  0022e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00234	83 c0 04	 add	 eax, 4
  00237	4a		 dec	 edx
  00238	75 f4		 jne	 SHORT $LL104@LoadString

; 163  : 		LoadString(_k, d, b, i);

  0023a	ff 75 14	 push	 DWORD PTR _i$[ebp]
  0023d	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00240	57		 push	 edi
  00241	56		 push	 esi
  00242	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00245	50		 push	 eax
  00246	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  0024c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024f	5f		 pop	 edi
  00250	5e		 pop	 esi
  00251	33 cd		 xor	 ecx, ebp
  00253	5b		 pop	 ebx
  00254	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00259	c9		 leave
  0025a	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BF@@ioINILoader@@QAEXAAY0BF@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<21>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BK@@ioINILoader@@QAEMAAY0BK@$$CBDM@Z ; ioINILoader::LoadFloat_e<26>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BK@@ioINILoader@@QAEMAAY0BK@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -36						; size = 26
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BK@@ioINILoader@@QAEMAAY0BK@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<26>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 79 02 00
	00		 je	 $LN96@LoadFloat_
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 62 02 00
	00		 je	 $LN95@LoadFloat_
  00032	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00035	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 4b 02 00
	00		 je	 $LN94@LoadFloat_
  00043	b1 eb		 mov	 cl, -21			; ffffffebH
  00045	32 d1		 xor	 dl, cl
  00047	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 33 02 00
	00		 je	 $LN93@LoadFloat_
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 1b 02 00
	00		 je	 $LN92@LoadFloat_
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 04 02 00
	00		 je	 $LN91@LoadFloat_
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 ee 01 00
	00		 je	 $LN90@LoadFloat_
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 d9 01 00
	00		 je	 $LN89@LoadFloat_
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 c3 01 00
	00		 je	 $LN88@LoadFloat_
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 ac 01 00
	00		 je	 $LN87@LoadFloat_
  000ba	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bd	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	0f 84 96 01 00
	00		 je	 $LN86@LoadFloat_
  000cb	32 d1		 xor	 dl, cl
  000cd	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 81 01 00
	00		 je	 $LN85@LoadFloat_
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 6b 01 00
	00		 je	 $LN84@LoadFloat_
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 54 01 00
	00		 je	 $LN83@LoadFloat_
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 3e 01 00
	00		 je	 $LN82@LoadFloat_
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 29 01 00
	00		 je	 $LN81@LoadFloat_
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 13 01 00
	00		 je	 $LN80@LoadFloat_
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 fc 00 00
	00		 je	 $LN79@LoadFloat_
  0013e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00141	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00147	84 d2		 test	 dl, dl
  00149	0f 84 e6 00 00
	00		 je	 $LN78@LoadFloat_
  0014f	32 d1		 xor	 dl, cl
  00151	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 d1 00 00
	00		 je	 $LN77@LoadFloat_
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 bb 00 00
	00		 je	 $LN76@LoadFloat_
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 a4 00 00
	00		 je	 $LN75@LoadFloat_
  00180	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00183	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  00186	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00189	84 d2		 test	 dl, dl
  0018b	0f 84 8e 00 00
	00		 je	 $LN74@LoadFloat_
  00191	32 d1		 xor	 dl, cl
  00193	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00196	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00199	84 d2		 test	 dl, dl
  0019b	74 7d		 je	 SHORT $LN73@LoadFloat_
  0019d	32 d3		 xor	 dl, bl
  0019f	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001a2	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a5	84 d2		 test	 dl, dl
  001a7	74 68		 je	 SHORT $LN72@LoadFloat_
  001a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001ac	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  001b0	88 55 f4	 mov	 BYTE PTR __k$[ebp+24], dl
  001b3	0f 84 e5 00 00
	00		 je	 $LN1@LoadFloat_
  001b9	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001bc	84 d2		 test	 dl, dl
  001be	74 49		 je	 SHORT $LN70@LoadFloat_
  001c0	32 d1		 xor	 dl, cl
  001c2	88 55 f6	 mov	 BYTE PTR __k$[ebp+26], dl
  001c5	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001c8	84 d2		 test	 dl, dl
  001ca	74 35		 je	 SHORT $LN69@LoadFloat_
  001cc	32 d3		 xor	 dl, bl
  001ce	88 55 f7	 mov	 BYTE PTR __k$[ebp+27], dl
  001d1	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001d4	84 d2		 test	 dl, dl
  001d6	74 20		 je	 SHORT $LN68@LoadFloat_
  001d8	8a 40 1d	 mov	 al, BYTE PTR [eax+29]
  001db	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001de	88 55 f8	 mov	 BYTE PTR __k$[ebp+28], dl
  001e1	84 c0		 test	 al, al
  001e3	74 0a		 je	 SHORT $LN67@LoadFloat_
  001e5	34 ec		 xor	 al, -20			; ffffffecH
  001e7	88 45 f9	 mov	 BYTE PTR __k$[ebp+29], al
  001ea	e9 af 00 00 00	 jmp	 $LN1@LoadFloat_
$LN67@LoadFloat_:
  001ef	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+29], -20 ; ffffffecH
  001f3	e9 a6 00 00 00	 jmp	 $LN1@LoadFloat_
$LN68@LoadFloat_:
  001f8	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  001fc	e9 9d 00 00 00	 jmp	 $LN1@LoadFloat_
$LN69@LoadFloat_:
  00201	88 5d f7	 mov	 BYTE PTR __k$[ebp+27], bl
  00204	e9 95 00 00 00	 jmp	 $LN1@LoadFloat_
$LN70@LoadFloat_:
  00209	88 4d f6	 mov	 BYTE PTR __k$[ebp+26], cl
  0020c	e9 8d 00 00 00	 jmp	 $LN1@LoadFloat_
$LN72@LoadFloat_:
  00211	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  00215	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_
$LN73@LoadFloat_:
  0021a	88 5d f3	 mov	 BYTE PTR __k$[ebp+23], bl
  0021d	eb 7f		 jmp	 SHORT $LN1@LoadFloat_
$LN74@LoadFloat_:
  0021f	88 4d f2	 mov	 BYTE PTR __k$[ebp+22], cl
  00222	eb 7a		 jmp	 SHORT $LN1@LoadFloat_
$LN75@LoadFloat_:
  00224	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  00228	eb 74		 jmp	 SHORT $LN1@LoadFloat_
$LN76@LoadFloat_:
  0022a	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0022e	eb 6e		 jmp	 SHORT $LN1@LoadFloat_
$LN77@LoadFloat_:
  00230	88 5d ef	 mov	 BYTE PTR __k$[ebp+19], bl
  00233	eb 69		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  00235	88 4d ee	 mov	 BYTE PTR __k$[ebp+18], cl
  00238	eb 64		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  0023a	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0023e	eb 5e		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  00240	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00244	eb 58		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  00246	88 5d eb	 mov	 BYTE PTR __k$[ebp+15], bl
  00249	eb 53		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  0024b	88 4d ea	 mov	 BYTE PTR __k$[ebp+14], cl
  0024e	eb 4e		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  00250	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00254	eb 48		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  00256	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0025a	eb 42		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  0025c	88 5d e7	 mov	 BYTE PTR __k$[ebp+11], bl
  0025f	eb 3d		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  00261	88 4d e6	 mov	 BYTE PTR __k$[ebp+10], cl
  00264	eb 38		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  00266	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0026a	eb 32		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  0026c	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00270	eb 2c		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  00272	88 5d e3	 mov	 BYTE PTR __k$[ebp+7], bl
  00275	eb 27		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  00277	88 4d e2	 mov	 BYTE PTR __k$[ebp+6], cl
  0027a	eb 22		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  0027c	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00280	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  00282	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00286	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  00288	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0028c	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  0028e	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00292	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  00294	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00298	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  0029a	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  0029e	6a 06		 push	 6
  002a0	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002a3	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+25], 0
  002a7	5a		 pop	 edx
$LL104@LoadFloat_:
  002a8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002ae	83 c0 04	 add	 eax, 4
  002b1	4a		 dec	 edx
  002b2	75 f4		 jne	 SHORT $LL104@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  002b4	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  002b9	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  002bd	51		 push	 ecx
  002be	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c6	50		 push	 eax
  002c7	8b ce		 mov	 ecx, esi
  002c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  002cf	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002d2	5e		 pop	 esi
  002d3	33 cd		 xor	 ecx, ebp
  002d5	5b		 pop	 ebx
  002d6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002db	c9		 leave
  002dc	c2 08 00	 ret	 8
??$LoadFloat_e@$0BK@@ioINILoader@@QAEMAAY0BK@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<26>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<19>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<19>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 cf 01 00
	00		 je	 $LN96@LoadString@2
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 b8 01 00
	00		 je	 $LN95@LoadString@2
  00039	b1 ec		 mov	 cl, -20			; ffffffecH
  0003b	32 d1		 xor	 dl, cl
  0003d	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00040	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00043	84 d2		 test	 dl, dl
  00045	0f 84 a0 01 00
	00		 je	 $LN94@LoadString@2
  0004b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004e	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 89 01 00
	00		 je	 $LN93@LoadString@2
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 72 01 00
	00		 je	 $LN92@LoadString@2
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 5c 01 00
	00		 je	 $LN91@LoadString@2
  0007e	32 d1		 xor	 dl, cl
  00080	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  00083	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00086	84 d2		 test	 dl, dl
  00088	0f 84 46 01 00
	00		 je	 $LN90@LoadString@2
  0008e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00091	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 2f 01 00
	00		 je	 $LN89@LoadString@2
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 18 01 00
	00		 je	 $LN88@LoadString@2
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 02 01 00
	00		 je	 $LN87@LoadString@2
  000c1	32 d1		 xor	 dl, cl
  000c3	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000c6	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c9	84 d2		 test	 dl, dl
  000cb	0f 84 ec 00 00
	00		 je	 $LN86@LoadString@2
  000d1	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 d5 00 00
	00		 je	 $LN85@LoadString@2
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 be 00 00
	00		 je	 $LN84@LoadString@2
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 a8 00 00
	00		 je	 $LN83@LoadString@2
  00104	32 d1		 xor	 dl, cl
  00106	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 92 00 00
	00		 je	 $LN82@LoadString@2
  00114	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00117	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0011a	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011d	84 d2		 test	 dl, dl
  0011f	74 7f		 je	 SHORT $LN81@LoadString@2
  00121	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00124	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00127	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012a	84 d2		 test	 dl, dl
  0012c	74 6c		 je	 SHORT $LN80@LoadString@2
  0012e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00131	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00134	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00137	84 d2		 test	 dl, dl
  00139	74 5a		 je	 SHORT $LN79@LoadString@2
  0013b	32 d1		 xor	 dl, cl
  0013d	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00141	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	0f 84 b1 00 00
	00		 je	 $LN111@LoadString@2
  0014a	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0014d	84 d2		 test	 dl, dl
  0014f	74 3e		 je	 SHORT $LN77@LoadString@2
  00151	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00154	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  00157	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0015a	84 d2		 test	 dl, dl
  0015c	74 2b		 je	 SHORT $LN76@LoadString@2
  0015e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00161	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  00164	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00167	84 d2		 test	 dl, dl
  00169	74 19		 je	 SHORT $LN75@LoadString@2
  0016b	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  0016e	32 d1		 xor	 dl, cl
  00170	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  00173	84 c0		 test	 al, al
  00175	74 07		 je	 SHORT $LN74@LoadString@2
  00177	34 eb		 xor	 al, -21			; ffffffebH
  00179	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  0017c	eb 7d		 jmp	 SHORT $LN111@LoadString@2
$LN74@LoadString@2:
  0017e	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  00182	eb 77		 jmp	 SHORT $LN111@LoadString@2
$LN75@LoadString@2:
  00184	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  00187	eb 72		 jmp	 SHORT $LN111@LoadString@2
$LN76@LoadString@2:
  00189	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0018d	eb 6c		 jmp	 SHORT $LN111@LoadString@2
$LN77@LoadString@2:
  0018f	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00193	eb 66		 jmp	 SHORT $LN111@LoadString@2
$LN79@LoadString@2:
  00195	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00198	eb 61		 jmp	 SHORT $LN111@LoadString@2
$LN80@LoadString@2:
  0019a	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0019e	eb 5b		 jmp	 SHORT $LN111@LoadString@2
$LN81@LoadString@2:
  001a0	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001a4	eb 55		 jmp	 SHORT $LN111@LoadString@2
$LN82@LoadString@2:
  001a6	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001aa	eb 4f		 jmp	 SHORT $LN111@LoadString@2
$LN83@LoadString@2:
  001ac	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001af	eb 4a		 jmp	 SHORT $LN111@LoadString@2
$LN84@LoadString@2:
  001b1	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001b5	eb 44		 jmp	 SHORT $LN111@LoadString@2
$LN85@LoadString@2:
  001b7	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001bb	eb 3e		 jmp	 SHORT $LN111@LoadString@2
$LN86@LoadString@2:
  001bd	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001c1	eb 38		 jmp	 SHORT $LN111@LoadString@2
$LN87@LoadString@2:
  001c3	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001c6	eb 33		 jmp	 SHORT $LN111@LoadString@2
$LN88@LoadString@2:
  001c8	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001cc	eb 2d		 jmp	 SHORT $LN111@LoadString@2
$LN89@LoadString@2:
  001ce	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001d2	eb 27		 jmp	 SHORT $LN111@LoadString@2
$LN90@LoadString@2:
  001d4	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d8	eb 21		 jmp	 SHORT $LN111@LoadString@2
$LN91@LoadString@2:
  001da	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001dd	eb 1c		 jmp	 SHORT $LN111@LoadString@2
$LN92@LoadString@2:
  001df	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001e3	eb 16		 jmp	 SHORT $LN111@LoadString@2
$LN93@LoadString@2:
  001e5	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e9	eb 10		 jmp	 SHORT $LN111@LoadString@2
$LN94@LoadString@2:
  001eb	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001ef	eb 0a		 jmp	 SHORT $LN111@LoadString@2
$LN95@LoadString@2:
  001f1	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001f5	eb 04		 jmp	 SHORT $LN111@LoadString@2
$LN96@LoadString@2:
  001f7	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@2:
  001fb	6a 04		 push	 4
  001fd	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00200	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  00204	5a		 pop	 edx
$LL104@LoadString@2:
  00205	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0020b	83 c0 04	 add	 eax, 4
  0020e	4a		 dec	 edx
  0020f	75 f4		 jne	 SHORT $LL104@LoadString@2
  00211	6a 10		 push	 16			; 00000010H
  00213	58		 pop	 eax
$LL101@LoadString@2:
  00214	8b c8		 mov	 ecx, eax
  00216	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0021c	79 05		 jns	 SHORT $LN112@LoadString@2
  0021e	49		 dec	 ecx
  0021f	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00222	41		 inc	 ecx
$LN112@LoadString@2:
  00223	b2 ed		 mov	 dl, -19			; ffffffedH
  00225	2a d1		 sub	 dl, cl
  00227	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  0022b	40		 inc	 eax
  0022c	83 f8 12	 cmp	 eax, 18			; 00000012H
  0022f	7c e3		 jl	 SHORT $LL101@LoadString@2

; 163  : 		LoadString(_k, d, b, i);

  00231	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00234	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00237	57		 push	 edi
  00238	56		 push	 esi
  00239	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0023c	50		 push	 eax
  0023d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00243	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00246	5f		 pop	 edi
  00247	33 cd		 xor	 ecx, ebp
  00249	5e		 pop	 esi
  0024a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024f	c9		 leave
  00250	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<19>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z ; ioINILoader::LoadFloat_e<24>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<24>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 45 02 00
	00		 je	 $LN96@LoadFloat_@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 2e 02 00
	00		 je	 $LN95@LoadFloat_@2
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 16 02 00
	00		 je	 $LN94@LoadFloat_@2
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 fe 01 00
	00		 je	 $LN93@LoadFloat_@2
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 e7 01 00
	00		 je	 $LN92@LoadFloat_@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 d1 01 00
	00		 je	 $LN91@LoadFloat_@2
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 bc 01 00
	00		 je	 $LN90@LoadFloat_@2
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 a6 01 00
	00		 je	 $LN89@LoadFloat_@2
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 8f 01 00
	00		 je	 $LN88@LoadFloat_@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 79 01 00
	00		 je	 $LN87@LoadFloat_@2
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 64 01 00
	00		 je	 $LN86@LoadFloat_@2
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 4e 01 00
	00		 je	 $LN85@LoadFloat_@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 37 01 00
	00		 je	 $LN84@LoadFloat_@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 21 01 00
	00		 je	 $LN83@LoadFloat_@2
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 0c 01 00
	00		 je	 $LN82@LoadFloat_@2
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 f6 00 00
	00		 je	 $LN81@LoadFloat_@2
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 df 00 00
	00		 je	 $LN80@LoadFloat_@2
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 c9 00 00
	00		 je	 $LN79@LoadFloat_@2
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 b4 00 00
	00		 je	 $LN78@LoadFloat_@2
  0014e	32 d1		 xor	 dl, cl
  00150	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 9e 00 00
	00		 je	 $LN77@LoadFloat_@2
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 87 00 00
	00		 je	 $LN76@LoadFloat_@2
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	74 75		 je	 SHORT $LN75@LoadFloat_@2
  0017c	32 d3		 xor	 dl, bl
  0017e	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00181	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00184	84 d2		 test	 dl, dl
  00186	74 64		 je	 SHORT $LN74@LoadFloat_@2
  00188	32 d1		 xor	 dl, cl
  0018a	80 78 17 00	 cmp	 BYTE PTR [eax+23], 0
  0018e	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00191	0f 84 d3 00 00
	00		 je	 $LN1@LoadFloat_@2
  00197	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  0019a	84 d2		 test	 dl, dl
  0019c	74 48		 je	 SHORT $LN72@LoadFloat_@2
  0019e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001a1	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a4	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001a7	84 d2		 test	 dl, dl
  001a9	74 33		 je	 SHORT $LN71@LoadFloat_@2
  001ab	32 d3		 xor	 dl, bl
  001ad	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001b0	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001b3	84 d2		 test	 dl, dl
  001b5	74 1f		 je	 SHORT $LN70@LoadFloat_@2
  001b7	8a 40 1b	 mov	 al, BYTE PTR [eax+27]
  001ba	32 d1		 xor	 dl, cl
  001bc	88 55 fa	 mov	 BYTE PTR __k$[ebp+26], dl
  001bf	84 c0		 test	 al, al
  001c1	74 0a		 je	 SHORT $LN69@LoadFloat_@2
  001c3	34 ea		 xor	 al, -22			; ffffffeaH
  001c5	88 45 fb	 mov	 BYTE PTR __k$[ebp+27], al
  001c8	e9 9d 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN69@LoadFloat_@2:
  001cd	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001d1	e9 94 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN70@LoadFloat_@2:
  001d6	88 4d fa	 mov	 BYTE PTR __k$[ebp+26], cl
  001d9	e9 8c 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN71@LoadFloat_@2:
  001de	88 5d f9	 mov	 BYTE PTR __k$[ebp+25], bl
  001e1	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN72@LoadFloat_@2:
  001e6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ea	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN74@LoadFloat_@2:
  001ec	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001ef	eb 79		 jmp	 SHORT $LN1@LoadFloat_@2
$LN75@LoadFloat_@2:
  001f1	88 5d f5	 mov	 BYTE PTR __k$[ebp+21], bl
  001f4	eb 74		 jmp	 SHORT $LN1@LoadFloat_@2
$LN76@LoadFloat_@2:
  001f6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001fa	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN77@LoadFloat_@2:
  001fc	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00200	eb 68		 jmp	 SHORT $LN1@LoadFloat_@2
$LN78@LoadFloat_@2:
  00202	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  00205	eb 63		 jmp	 SHORT $LN1@LoadFloat_@2
$LN79@LoadFloat_@2:
  00207	88 5d f1	 mov	 BYTE PTR __k$[ebp+17], bl
  0020a	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN80@LoadFloat_@2:
  0020c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00210	eb 58		 jmp	 SHORT $LN1@LoadFloat_@2
$LN81@LoadFloat_@2:
  00212	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00216	eb 52		 jmp	 SHORT $LN1@LoadFloat_@2
$LN82@LoadFloat_@2:
  00218	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  0021b	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@2
$LN83@LoadFloat_@2:
  0021d	88 5d ed	 mov	 BYTE PTR __k$[ebp+13], bl
  00220	eb 48		 jmp	 SHORT $LN1@LoadFloat_@2
$LN84@LoadFloat_@2:
  00222	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00226	eb 42		 jmp	 SHORT $LN1@LoadFloat_@2
$LN85@LoadFloat_@2:
  00228	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0022c	eb 3c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN86@LoadFloat_@2:
  0022e	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00231	eb 37		 jmp	 SHORT $LN1@LoadFloat_@2
$LN87@LoadFloat_@2:
  00233	88 5d e9	 mov	 BYTE PTR __k$[ebp+9], bl
  00236	eb 32		 jmp	 SHORT $LN1@LoadFloat_@2
$LN88@LoadFloat_@2:
  00238	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0023c	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN89@LoadFloat_@2:
  0023e	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00242	eb 26		 jmp	 SHORT $LN1@LoadFloat_@2
$LN90@LoadFloat_@2:
  00244	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00247	eb 21		 jmp	 SHORT $LN1@LoadFloat_@2
$LN91@LoadFloat_@2:
  00249	88 5d e5	 mov	 BYTE PTR __k$[ebp+5], bl
  0024c	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN92@LoadFloat_@2:
  0024e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00252	eb 16		 jmp	 SHORT $LN1@LoadFloat_@2
$LN93@LoadFloat_@2:
  00254	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00258	eb 10		 jmp	 SHORT $LN1@LoadFloat_@2
$LN94@LoadFloat_@2:
  0025a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0025e	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN95@LoadFloat_@2:
  00260	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00264	eb 04		 jmp	 SHORT $LN1@LoadFloat_@2
$LN96@LoadFloat_@2:
  00266	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@2:
  0026a	6a 05		 push	 5
  0026c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0026f	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+23], 0
  00273	5a		 pop	 edx
$LL104@LoadFloat_@2:
  00274	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0027a	83 c0 04	 add	 eax, 4
  0027d	4a		 dec	 edx
  0027e	75 f4		 jne	 SHORT $LL104@LoadFloat_@2
  00280	6a 14		 push	 20			; 00000014H
  00282	58		 pop	 eax
$LL101@LoadFloat_@2:
  00283	8b c8		 mov	 ecx, eax
  00285	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0028b	79 05		 jns	 SHORT $LN111@LoadFloat_@2
  0028d	49		 dec	 ecx
  0028e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00291	41		 inc	 ecx
$LN111@LoadFloat_@2:
  00292	b2 ed		 mov	 dl, -19			; ffffffedH
  00294	2a d1		 sub	 dl, cl
  00296	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  0029a	40		 inc	 eax
  0029b	83 f8 17	 cmp	 eax, 23			; 00000017H
  0029e	7c e3		 jl	 SHORT $LL101@LoadFloat_@2

; 137  : 		return LoadFloat(_k, f);

  002a0	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  002a5	51		 push	 ecx
  002a6	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  002a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ae	50		 push	 eax
  002af	8b ce		 mov	 ecx, esi
  002b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  002b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ba	5e		 pop	 esi
  002bb	33 cd		 xor	 ecx, ebp
  002bd	5b		 pop	 ebx
  002be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c3	c9		 leave
  002c4	c2 08 00	 ret	 8
??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<24>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BH@@ioINILoader@@QAEXAAY0BH@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<23>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BH@@ioINILoader@@QAEXAAY0BH@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -36					; size = 4
__k$ = -32						; size = 23
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BH@@ioINILoader@@QAEXAAY0BH@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<23>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d dc	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 2d 02 00
	00		 je	 $LN96@LoadString@3
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 16 02 00
	00		 je	 $LN95@LoadString@3
  0003a	b1 ec		 mov	 cl, -20			; ffffffecH
  0003c	32 d1		 xor	 dl, cl
  0003e	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00041	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00044	84 d2		 test	 dl, dl
  00046	0f 84 fe 01 00
	00		 je	 $LN94@LoadString@3
  0004c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004f	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  00052	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00055	84 d2		 test	 dl, dl
  00057	0f 84 e7 01 00
	00		 je	 $LN93@LoadString@3
  0005d	b3 ea		 mov	 bl, -22			; ffffffeaH
  0005f	32 d3		 xor	 dl, bl
  00061	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 cf 01 00
	00		 je	 $LN92@LoadString@3
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 b9 01 00
	00		 je	 $LN91@LoadString@3
  00080	32 d1		 xor	 dl, cl
  00082	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  00085	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00088	84 d2		 test	 dl, dl
  0008a	0f 84 a3 01 00
	00		 je	 $LN90@LoadString@3
  00090	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00093	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  00096	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00099	84 d2		 test	 dl, dl
  0009b	0f 84 8d 01 00
	00		 je	 $LN89@LoadString@3
  000a1	32 d3		 xor	 dl, bl
  000a3	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 77 01 00
	00		 je	 $LN88@LoadString@3
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 61 01 00
	00		 je	 $LN87@LoadString@3
  000c2	32 d1		 xor	 dl, cl
  000c4	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 4b 01 00
	00		 je	 $LN86@LoadString@3
  000d2	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000d5	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d8	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000db	84 d2		 test	 dl, dl
  000dd	0f 84 35 01 00
	00		 je	 $LN85@LoadString@3
  000e3	32 d3		 xor	 dl, bl
  000e5	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 1f 01 00
	00		 je	 $LN84@LoadString@3
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 09 01 00
	00		 je	 $LN83@LoadString@3
  00104	32 d1		 xor	 dl, cl
  00106	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 f3 00 00
	00		 je	 $LN82@LoadString@3
  00114	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00117	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  0011a	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011d	84 d2		 test	 dl, dl
  0011f	0f 84 dd 00 00
	00		 je	 $LN81@LoadString@3
  00125	32 d3		 xor	 dl, bl
  00127	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	0f 84 c7 00 00
	00		 je	 $LN80@LoadString@3
  00135	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00138	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  0013b	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013e	84 d2		 test	 dl, dl
  00140	0f 84 b1 00 00
	00		 je	 $LN79@LoadString@3
  00146	32 d1		 xor	 dl, cl
  00148	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  0014b	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0014e	84 d2		 test	 dl, dl
  00150	0f 84 9b 00 00
	00		 je	 $LN78@LoadString@3
  00156	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00159	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  0015c	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0015f	84 d2		 test	 dl, dl
  00161	0f 84 85 00 00
	00		 je	 $LN77@LoadString@3
  00167	32 d3		 xor	 dl, bl
  00169	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  0016c	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0016f	84 d2		 test	 dl, dl
  00171	74 73		 je	 SHORT $LN76@LoadString@3
  00173	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00176	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00179	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0017c	84 d2		 test	 dl, dl
  0017e	74 61		 je	 SHORT $LN75@LoadString@3
  00180	32 d1		 xor	 dl, cl
  00182	80 78 16 00	 cmp	 BYTE PTR [eax+22], 0
  00186	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00189	0f 84 cb 00 00
	00		 je	 $LN111@LoadString@3
  0018f	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00192	84 d2		 test	 dl, dl
  00194	74 46		 je	 SHORT $LN73@LoadString@3
  00196	32 d3		 xor	 dl, bl
  00198	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  0019b	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  0019e	84 d2		 test	 dl, dl
  001a0	74 34		 je	 SHORT $LN72@LoadString@3
  001a2	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001a5	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a8	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ab	84 d2		 test	 dl, dl
  001ad	74 1f		 je	 SHORT $LN71@LoadString@3
  001af	8a 40 1a	 mov	 al, BYTE PTR [eax+26]
  001b2	32 d1		 xor	 dl, cl
  001b4	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001b7	84 c0		 test	 al, al
  001b9	74 0a		 je	 SHORT $LN70@LoadString@3
  001bb	34 eb		 xor	 al, -21			; ffffffebH
  001bd	88 45 fa	 mov	 BYTE PTR __k$[ebp+26], al
  001c0	e9 95 00 00 00	 jmp	 $LN111@LoadString@3
$LN70@LoadString@3:
  001c5	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+26], -21 ; ffffffebH
  001c9	e9 8c 00 00 00	 jmp	 $LN111@LoadString@3
$LN71@LoadString@3:
  001ce	88 4d f9	 mov	 BYTE PTR __k$[ebp+25], cl
  001d1	e9 84 00 00 00	 jmp	 $LN111@LoadString@3
$LN72@LoadString@3:
  001d6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001da	eb 7e		 jmp	 SHORT $LN111@LoadString@3
$LN73@LoadString@3:
  001dc	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001df	eb 79		 jmp	 SHORT $LN111@LoadString@3
$LN75@LoadString@3:
  001e1	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001e4	eb 74		 jmp	 SHORT $LN111@LoadString@3
$LN76@LoadString@3:
  001e6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001ea	eb 6e		 jmp	 SHORT $LN111@LoadString@3
$LN77@LoadString@3:
  001ec	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001ef	eb 69		 jmp	 SHORT $LN111@LoadString@3
$LN78@LoadString@3:
  001f1	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  001f5	eb 63		 jmp	 SHORT $LN111@LoadString@3
$LN79@LoadString@3:
  001f7	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001fa	eb 5e		 jmp	 SHORT $LN111@LoadString@3
$LN80@LoadString@3:
  001fc	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00200	eb 58		 jmp	 SHORT $LN111@LoadString@3
$LN81@LoadString@3:
  00202	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  00205	eb 53		 jmp	 SHORT $LN111@LoadString@3
$LN82@LoadString@3:
  00207	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0020b	eb 4d		 jmp	 SHORT $LN111@LoadString@3
$LN83@LoadString@3:
  0020d	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  00210	eb 48		 jmp	 SHORT $LN111@LoadString@3
$LN84@LoadString@3:
  00212	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00216	eb 42		 jmp	 SHORT $LN111@LoadString@3
$LN85@LoadString@3:
  00218	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  0021b	eb 3d		 jmp	 SHORT $LN111@LoadString@3
$LN86@LoadString@3:
  0021d	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00221	eb 37		 jmp	 SHORT $LN111@LoadString@3
$LN87@LoadString@3:
  00223	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  00226	eb 32		 jmp	 SHORT $LN111@LoadString@3
$LN88@LoadString@3:
  00228	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0022c	eb 2c		 jmp	 SHORT $LN111@LoadString@3
$LN89@LoadString@3:
  0022e	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00231	eb 27		 jmp	 SHORT $LN111@LoadString@3
$LN90@LoadString@3:
  00233	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00237	eb 21		 jmp	 SHORT $LN111@LoadString@3
$LN91@LoadString@3:
  00239	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  0023c	eb 1c		 jmp	 SHORT $LN111@LoadString@3
$LN92@LoadString@3:
  0023e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00242	eb 16		 jmp	 SHORT $LN111@LoadString@3
$LN93@LoadString@3:
  00244	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00248	eb 10		 jmp	 SHORT $LN111@LoadString@3
$LN94@LoadString@3:
  0024a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0024e	eb 0a		 jmp	 SHORT $LN111@LoadString@3
$LN95@LoadString@3:
  00250	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00254	eb 04		 jmp	 SHORT $LN111@LoadString@3
$LN96@LoadString@3:
  00256	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@3:
  0025a	6a 05		 push	 5
  0025c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0025f	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+22], 0
  00263	5a		 pop	 edx
$LL104@LoadString@3:
  00264	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0026a	83 c0 04	 add	 eax, 4
  0026d	4a		 dec	 edx
  0026e	75 f4		 jne	 SHORT $LL104@LoadString@3
  00270	6a 14		 push	 20			; 00000014H
  00272	58		 pop	 eax
$LL101@LoadString@3:
  00273	8b c8		 mov	 ecx, eax
  00275	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0027b	79 05		 jns	 SHORT $LN112@LoadString@3
  0027d	49		 dec	 ecx
  0027e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00281	41		 inc	 ecx
$LN112@LoadString@3:
  00282	b2 ed		 mov	 dl, -19			; ffffffedH
  00284	2a d1		 sub	 dl, cl
  00286	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  0028a	40		 inc	 eax
  0028b	83 f8 16	 cmp	 eax, 22			; 00000016H
  0028e	7c e3		 jl	 SHORT $LL101@LoadString@3

; 163  : 		LoadString(_k, d, b, i);

  00290	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00293	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00296	57		 push	 edi
  00297	56		 push	 esi
  00298	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0029b	50		 push	 eax
  0029c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  002a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a5	5f		 pop	 edi
  002a6	5e		 pop	 esi
  002a7	33 cd		 xor	 ecx, ebp
  002a9	5b		 pop	 ebx
  002aa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002af	c9		 leave
  002b0	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BH@@ioINILoader@@QAEXAAY0BH@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<23>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BM@@ioINILoader@@QAEMAAY0BM@$$CBDM@Z ; ioINILoader::LoadFloat_e<28>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BM@@ioINILoader@@QAEMAAY0BM@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -36						; size = 28
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BM@@ioINILoader@@QAEMAAY0BM@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<28>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 a9 02 00
	00		 je	 $LN96@LoadFloat_@3
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 92 02 00
	00		 je	 $LN95@LoadFloat_@3
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 7a 02 00
	00		 je	 $LN94@LoadFloat_@3
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 62 02 00
	00		 je	 $LN93@LoadFloat_@3
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 4b 02 00
	00		 je	 $LN92@LoadFloat_@3
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 35 02 00
	00		 je	 $LN91@LoadFloat_@3
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 20 02 00
	00		 je	 $LN90@LoadFloat_@3
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 0a 02 00
	00		 je	 $LN89@LoadFloat_@3
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 f3 01 00
	00		 je	 $LN88@LoadFloat_@3
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 dd 01 00
	00		 je	 $LN87@LoadFloat_@3
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 c8 01 00
	00		 je	 $LN86@LoadFloat_@3
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 b2 01 00
	00		 je	 $LN85@LoadFloat_@3
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 9b 01 00
	00		 je	 $LN84@LoadFloat_@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 85 01 00
	00		 je	 $LN83@LoadFloat_@3
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 70 01 00
	00		 je	 $LN82@LoadFloat_@3
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 5a 01 00
	00		 je	 $LN81@LoadFloat_@3
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 43 01 00
	00		 je	 $LN80@LoadFloat_@3
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 2d 01 00
	00		 je	 $LN79@LoadFloat_@3
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 18 01 00
	00		 je	 $LN78@LoadFloat_@3
  0014e	32 d1		 xor	 dl, cl
  00150	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 02 01 00
	00		 je	 $LN77@LoadFloat_@3
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 eb 00 00
	00		 je	 $LN76@LoadFloat_@3
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 d5 00 00
	00		 je	 $LN75@LoadFloat_@3
  00180	32 d3		 xor	 dl, bl
  00182	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	0f 84 c0 00 00
	00		 je	 $LN74@LoadFloat_@3
  00190	32 d1		 xor	 dl, cl
  00192	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00195	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00198	84 d2		 test	 dl, dl
  0019a	0f 84 aa 00 00
	00		 je	 $LN73@LoadFloat_@3
  001a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001a3	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	0f 84 90 00 00
	00		 je	 $LN72@LoadFloat_@3
  001b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b4	88 55 f4	 mov	 BYTE PTR __k$[ebp+24], dl
  001b7	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ba	84 d2		 test	 dl, dl
  001bc	74 7b		 je	 SHORT $LN71@LoadFloat_@3
  001be	32 d3		 xor	 dl, bl
  001c0	88 55 f5	 mov	 BYTE PTR __k$[ebp+25], dl
  001c3	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001c6	84 d2		 test	 dl, dl
  001c8	74 67		 je	 SHORT $LN70@LoadFloat_@3
  001ca	32 d1		 xor	 dl, cl
  001cc	80 78 1b 00	 cmp	 BYTE PTR [eax+27], 0
  001d0	88 55 f6	 mov	 BYTE PTR __k$[ebp+26], dl
  001d3	0f 84 f5 00 00
	00		 je	 $LN1@LoadFloat_@3
  001d9	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001dc	84 d2		 test	 dl, dl
  001de	74 48		 je	 SHORT $LN68@LoadFloat_@3
  001e0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001e3	88 55 f8	 mov	 BYTE PTR __k$[ebp+28], dl
  001e6	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001e9	84 d2		 test	 dl, dl
  001eb	74 33		 je	 SHORT $LN67@LoadFloat_@3
  001ed	32 d3		 xor	 dl, bl
  001ef	88 55 f9	 mov	 BYTE PTR __k$[ebp+29], dl
  001f2	8a 50 1e	 mov	 dl, BYTE PTR [eax+30]
  001f5	84 d2		 test	 dl, dl
  001f7	74 1f		 je	 SHORT $LN66@LoadFloat_@3
  001f9	8a 40 1f	 mov	 al, BYTE PTR [eax+31]
  001fc	32 d1		 xor	 dl, cl
  001fe	88 55 fa	 mov	 BYTE PTR __k$[ebp+30], dl
  00201	84 c0		 test	 al, al
  00203	74 0a		 je	 SHORT $LN65@LoadFloat_@3
  00205	34 ea		 xor	 al, -22			; ffffffeaH
  00207	88 45 fb	 mov	 BYTE PTR __k$[ebp+31], al
  0020a	e9 bf 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN65@LoadFloat_@3:
  0020f	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+31], -22 ; ffffffeaH
  00213	e9 b6 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN66@LoadFloat_@3:
  00218	88 4d fa	 mov	 BYTE PTR __k$[ebp+30], cl
  0021b	e9 ae 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN67@LoadFloat_@3:
  00220	88 5d f9	 mov	 BYTE PTR __k$[ebp+29], bl
  00223	e9 a6 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN68@LoadFloat_@3:
  00228	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  0022c	e9 9d 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN70@LoadFloat_@3:
  00231	88 4d f6	 mov	 BYTE PTR __k$[ebp+26], cl
  00234	e9 95 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN71@LoadFloat_@3:
  00239	88 5d f5	 mov	 BYTE PTR __k$[ebp+25], bl
  0023c	e9 8d 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN72@LoadFloat_@3:
  00241	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  00245	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN73@LoadFloat_@3:
  0024a	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  0024e	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN74@LoadFloat_@3:
  00250	88 4d f2	 mov	 BYTE PTR __k$[ebp+22], cl
  00253	eb 79		 jmp	 SHORT $LN1@LoadFloat_@3
$LN75@LoadFloat_@3:
  00255	88 5d f1	 mov	 BYTE PTR __k$[ebp+21], bl
  00258	eb 74		 jmp	 SHORT $LN1@LoadFloat_@3
$LN76@LoadFloat_@3:
  0025a	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0025e	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN77@LoadFloat_@3:
  00260	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00264	eb 68		 jmp	 SHORT $LN1@LoadFloat_@3
$LN78@LoadFloat_@3:
  00266	88 4d ee	 mov	 BYTE PTR __k$[ebp+18], cl
  00269	eb 63		 jmp	 SHORT $LN1@LoadFloat_@3
$LN79@LoadFloat_@3:
  0026b	88 5d ed	 mov	 BYTE PTR __k$[ebp+17], bl
  0026e	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN80@LoadFloat_@3:
  00270	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00274	eb 58		 jmp	 SHORT $LN1@LoadFloat_@3
$LN81@LoadFloat_@3:
  00276	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0027a	eb 52		 jmp	 SHORT $LN1@LoadFloat_@3
$LN82@LoadFloat_@3:
  0027c	88 4d ea	 mov	 BYTE PTR __k$[ebp+14], cl
  0027f	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@3
$LN83@LoadFloat_@3:
  00281	88 5d e9	 mov	 BYTE PTR __k$[ebp+13], bl
  00284	eb 48		 jmp	 SHORT $LN1@LoadFloat_@3
$LN84@LoadFloat_@3:
  00286	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0028a	eb 42		 jmp	 SHORT $LN1@LoadFloat_@3
$LN85@LoadFloat_@3:
  0028c	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00290	eb 3c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN86@LoadFloat_@3:
  00292	88 4d e6	 mov	 BYTE PTR __k$[ebp+10], cl
  00295	eb 37		 jmp	 SHORT $LN1@LoadFloat_@3
$LN87@LoadFloat_@3:
  00297	88 5d e5	 mov	 BYTE PTR __k$[ebp+9], bl
  0029a	eb 32		 jmp	 SHORT $LN1@LoadFloat_@3
$LN88@LoadFloat_@3:
  0029c	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  002a0	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN89@LoadFloat_@3:
  002a2	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  002a6	eb 26		 jmp	 SHORT $LN1@LoadFloat_@3
$LN90@LoadFloat_@3:
  002a8	88 4d e2	 mov	 BYTE PTR __k$[ebp+6], cl
  002ab	eb 21		 jmp	 SHORT $LN1@LoadFloat_@3
$LN91@LoadFloat_@3:
  002ad	88 5d e1	 mov	 BYTE PTR __k$[ebp+5], bl
  002b0	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN92@LoadFloat_@3:
  002b2	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  002b6	eb 16		 jmp	 SHORT $LN1@LoadFloat_@3
$LN93@LoadFloat_@3:
  002b8	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  002bc	eb 10		 jmp	 SHORT $LN1@LoadFloat_@3
$LN94@LoadFloat_@3:
  002be	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  002c2	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@3
$LN95@LoadFloat_@3:
  002c4	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  002c8	eb 04		 jmp	 SHORT $LN1@LoadFloat_@3
$LN96@LoadFloat_@3:
  002ca	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@3:
  002ce	6a 06		 push	 6
  002d0	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002d3	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+27], 0
  002d7	5a		 pop	 edx
$LL104@LoadFloat_@3:
  002d8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002de	83 c0 04	 add	 eax, 4
  002e1	4a		 dec	 edx
  002e2	75 f4		 jne	 SHORT $LL104@LoadFloat_@3
  002e4	6a 18		 push	 24			; 00000018H
  002e6	58		 pop	 eax
$LL101@LoadFloat_@3:
  002e7	8b c8		 mov	 ecx, eax
  002e9	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  002ef	79 05		 jns	 SHORT $LN111@LoadFloat_@3
  002f1	49		 dec	 ecx
  002f2	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002f5	41		 inc	 ecx
$LN111@LoadFloat_@3:
  002f6	b2 ed		 mov	 dl, -19			; ffffffedH
  002f8	2a d1		 sub	 dl, cl
  002fa	30 54 05 dc	 xor	 BYTE PTR __k$[ebp+eax], dl
  002fe	40		 inc	 eax
  002ff	83 f8 1b	 cmp	 eax, 27			; 0000001bH
  00302	7c e3		 jl	 SHORT $LL101@LoadFloat_@3

; 137  : 		return LoadFloat(_k, f);

  00304	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00309	51		 push	 ecx
  0030a	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  0030d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00312	50		 push	 eax
  00313	8b ce		 mov	 ecx, esi
  00315	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0031b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0031e	5e		 pop	 esi
  0031f	33 cd		 xor	 ecx, ebp
  00321	5b		 pop	 ebx
  00322	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00327	c9		 leave
  00328	c2 08 00	 ret	 8
??$LoadFloat_e@$0BM@@ioINILoader@@QAEMAAY0BM@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<28>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BG@@ioINILoader@@QAEXAAY0BG@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<22>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BG@@ioINILoader@@QAEXAAY0BG@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -36					; size = 4
__k$ = -32						; size = 22
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BG@@ioINILoader@@QAEXAAY0BG@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<22>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d dc	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 15 02 00
	00		 je	 $LN96@LoadString@4
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 fe 01 00
	00		 je	 $LN95@LoadString@4
  0003a	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003d	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00040	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00043	84 d2		 test	 dl, dl
  00045	0f 84 e7 01 00
	00		 je	 $LN94@LoadString@4
  0004b	b1 eb		 mov	 cl, -21			; ffffffebH
  0004d	32 d1		 xor	 dl, cl
  0004f	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  00052	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00055	84 d2		 test	 dl, dl
  00057	0f 84 cf 01 00
	00		 je	 $LN93@LoadString@4
  0005d	b3 ea		 mov	 bl, -22			; ffffffeaH
  0005f	32 d3		 xor	 dl, bl
  00061	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 b7 01 00
	00		 je	 $LN92@LoadString@4
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 a0 01 00
	00		 je	 $LN91@LoadString@4
  00080	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00083	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  00086	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00089	84 d2		 test	 dl, dl
  0008b	0f 84 8a 01 00
	00		 je	 $LN90@LoadString@4
  00091	32 d1		 xor	 dl, cl
  00093	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  00096	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00099	84 d2		 test	 dl, dl
  0009b	0f 84 75 01 00
	00		 je	 $LN89@LoadString@4
  000a1	32 d3		 xor	 dl, bl
  000a3	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 5f 01 00
	00		 je	 $LN88@LoadString@4
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 48 01 00
	00		 je	 $LN87@LoadString@4
  000c2	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000c5	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c8	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000cb	84 d2		 test	 dl, dl
  000cd	0f 84 32 01 00
	00		 je	 $LN86@LoadString@4
  000d3	32 d1		 xor	 dl, cl
  000d5	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d8	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000db	84 d2		 test	 dl, dl
  000dd	0f 84 1d 01 00
	00		 je	 $LN85@LoadString@4
  000e3	32 d3		 xor	 dl, bl
  000e5	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 07 01 00
	00		 je	 $LN84@LoadString@4
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 f0 00 00
	00		 je	 $LN83@LoadString@4
  00104	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00107	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  0010a	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010d	84 d2		 test	 dl, dl
  0010f	0f 84 da 00 00
	00		 je	 $LN82@LoadString@4
  00115	32 d1		 xor	 dl, cl
  00117	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  0011a	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011d	84 d2		 test	 dl, dl
  0011f	0f 84 c5 00 00
	00		 je	 $LN81@LoadString@4
  00125	32 d3		 xor	 dl, bl
  00127	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	0f 84 af 00 00
	00		 je	 $LN80@LoadString@4
  00135	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00138	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  0013b	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013e	84 d2		 test	 dl, dl
  00140	0f 84 98 00 00
	00		 je	 $LN79@LoadString@4
  00146	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00149	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  0014c	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0014f	84 d2		 test	 dl, dl
  00151	0f 84 82 00 00
	00		 je	 $LN78@LoadString@4
  00157	32 d1		 xor	 dl, cl
  00159	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  0015c	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0015f	84 d2		 test	 dl, dl
  00161	74 71		 je	 SHORT $LN77@LoadString@4
  00163	32 d3		 xor	 dl, bl
  00165	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00168	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0016b	84 d2		 test	 dl, dl
  0016d	74 5f		 je	 SHORT $LN76@LoadString@4
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  00176	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00179	0f 84 c3 00 00
	00		 je	 $LN111@LoadString@4
  0017f	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00182	84 d2		 test	 dl, dl
  00184	74 43		 je	 SHORT $LN74@LoadString@4
  00186	32 d1		 xor	 dl, cl
  00188	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  0018b	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0018e	84 d2		 test	 dl, dl
  00190	74 32		 je	 SHORT $LN73@LoadString@4
  00192	32 d3		 xor	 dl, bl
  00194	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  00197	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  0019a	84 d2		 test	 dl, dl
  0019c	74 20		 je	 SHORT $LN72@LoadString@4
  0019e	8a 40 19	 mov	 al, BYTE PTR [eax+25]
  001a1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001a4	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a7	84 c0		 test	 al, al
  001a9	74 0a		 je	 SHORT $LN71@LoadString@4
  001ab	34 ec		 xor	 al, -20			; ffffffecH
  001ad	88 45 f9	 mov	 BYTE PTR __k$[ebp+25], al
  001b0	e9 8d 00 00 00	 jmp	 $LN111@LoadString@4
$LN71@LoadString@4:
  001b5	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+25], -20 ; ffffffecH
  001b9	e9 84 00 00 00	 jmp	 $LN111@LoadString@4
$LN72@LoadString@4:
  001be	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001c2	eb 7e		 jmp	 SHORT $LN111@LoadString@4
$LN73@LoadString@4:
  001c4	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001c7	eb 79		 jmp	 SHORT $LN111@LoadString@4
$LN74@LoadString@4:
  001c9	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001cc	eb 74		 jmp	 SHORT $LN111@LoadString@4
$LN76@LoadString@4:
  001ce	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001d2	eb 6e		 jmp	 SHORT $LN111@LoadString@4
$LN77@LoadString@4:
  001d4	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001d7	eb 69		 jmp	 SHORT $LN111@LoadString@4
$LN78@LoadString@4:
  001d9	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  001dc	eb 64		 jmp	 SHORT $LN111@LoadString@4
$LN79@LoadString@4:
  001de	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  001e2	eb 5e		 jmp	 SHORT $LN111@LoadString@4
$LN80@LoadString@4:
  001e4	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001e8	eb 58		 jmp	 SHORT $LN111@LoadString@4
$LN81@LoadString@4:
  001ea	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001ed	eb 53		 jmp	 SHORT $LN111@LoadString@4
$LN82@LoadString@4:
  001ef	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  001f2	eb 4e		 jmp	 SHORT $LN111@LoadString@4
$LN83@LoadString@4:
  001f4	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  001f8	eb 48		 jmp	 SHORT $LN111@LoadString@4
$LN84@LoadString@4:
  001fa	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001fe	eb 42		 jmp	 SHORT $LN111@LoadString@4
$LN85@LoadString@4:
  00200	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  00203	eb 3d		 jmp	 SHORT $LN111@LoadString@4
$LN86@LoadString@4:
  00205	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00208	eb 38		 jmp	 SHORT $LN111@LoadString@4
$LN87@LoadString@4:
  0020a	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0020e	eb 32		 jmp	 SHORT $LN111@LoadString@4
$LN88@LoadString@4:
  00210	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00214	eb 2c		 jmp	 SHORT $LN111@LoadString@4
$LN89@LoadString@4:
  00216	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00219	eb 27		 jmp	 SHORT $LN111@LoadString@4
$LN90@LoadString@4:
  0021b	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  0021e	eb 22		 jmp	 SHORT $LN111@LoadString@4
$LN91@LoadString@4:
  00220	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00224	eb 1c		 jmp	 SHORT $LN111@LoadString@4
$LN92@LoadString@4:
  00226	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0022a	eb 16		 jmp	 SHORT $LN111@LoadString@4
$LN93@LoadString@4:
  0022c	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00230	eb 10		 jmp	 SHORT $LN111@LoadString@4
$LN94@LoadString@4:
  00232	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00236	eb 0a		 jmp	 SHORT $LN111@LoadString@4
$LN95@LoadString@4:
  00238	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0023c	eb 04		 jmp	 SHORT $LN111@LoadString@4
$LN96@LoadString@4:
  0023e	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@4:
  00242	6a 05		 push	 5
  00244	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00247	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+21], 0
  0024b	5a		 pop	 edx
$LL104@LoadString@4:
  0024c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00252	83 c0 04	 add	 eax, 4
  00255	4a		 dec	 edx
  00256	75 f4		 jne	 SHORT $LL104@LoadString@4

; 163  : 		LoadString(_k, d, b, i);

  00258	ff 75 14	 push	 DWORD PTR _i$[ebp]
  0025b	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0025e	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00262	57		 push	 edi
  00263	56		 push	 esi
  00264	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00267	50		 push	 eax
  00268	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  0026e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00271	5f		 pop	 edi
  00272	5e		 pop	 esi
  00273	33 cd		 xor	 ecx, ebp
  00275	5b		 pop	 ebx
  00276	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0027b	c9		 leave
  0027c	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BG@@ioINILoader@@QAEXAAY0BG@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<22>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BL@@ioINILoader@@QAEMAAY0BL@$$CBDM@Z ; ioINILoader::LoadFloat_e<27>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BL@@ioINILoader@@QAEMAAY0BL@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -36						; size = 27
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BL@@ioINILoader@@QAEMAAY0BL@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<27>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 91 02 00
	00		 je	 $LN96@LoadFloat_@4
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 7a 02 00
	00		 je	 $LN95@LoadFloat_@4
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 62 02 00
	00		 je	 $LN94@LoadFloat_@4
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 4b 02 00
	00		 je	 $LN93@LoadFloat_@4
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 33 02 00
	00		 je	 $LN92@LoadFloat_@4
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 1d 02 00
	00		 je	 $LN91@LoadFloat_@4
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 07 02 00
	00		 je	 $LN90@LoadFloat_@4
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 f1 01 00
	00		 je	 $LN89@LoadFloat_@4
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 db 01 00
	00		 je	 $LN88@LoadFloat_@4
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 c5 01 00
	00		 je	 $LN87@LoadFloat_@4
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 af 01 00
	00		 je	 $LN86@LoadFloat_@4
  000ca	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cd	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 99 01 00
	00		 je	 $LN85@LoadFloat_@4
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 83 01 00
	00		 je	 $LN84@LoadFloat_@4
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 6d 01 00
	00		 je	 $LN83@LoadFloat_@4
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 57 01 00
	00		 je	 $LN82@LoadFloat_@4
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 41 01 00
	00		 je	 $LN81@LoadFloat_@4
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 2b 01 00
	00		 je	 $LN80@LoadFloat_@4
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 15 01 00
	00		 je	 $LN79@LoadFloat_@4
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 ff 00 00
	00		 je	 $LN78@LoadFloat_@4
  0014e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00151	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 e9 00 00
	00		 je	 $LN77@LoadFloat_@4
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 d3 00 00
	00		 je	 $LN76@LoadFloat_@4
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 bd 00 00
	00		 je	 $LN75@LoadFloat_@4
  00180	32 d1		 xor	 dl, cl
  00182	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	0f 84 a7 00 00
	00		 je	 $LN74@LoadFloat_@4
  00190	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00193	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00196	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00199	84 d2		 test	 dl, dl
  0019b	0f 84 91 00 00
	00		 je	 $LN73@LoadFloat_@4
  001a1	32 d3		 xor	 dl, bl
  001a3	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	74 7c		 je	 SHORT $LN72@LoadFloat_@4
  001ad	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b0	88 55 f4	 mov	 BYTE PTR __k$[ebp+24], dl
  001b3	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001b6	84 d2		 test	 dl, dl
  001b8	74 67		 je	 SHORT $LN71@LoadFloat_@4
  001ba	32 d1		 xor	 dl, cl
  001bc	80 78 1a 00	 cmp	 BYTE PTR [eax+26], 0
  001c0	88 55 f5	 mov	 BYTE PTR __k$[ebp+25], dl
  001c3	0f 84 ed 00 00
	00		 je	 $LN1@LoadFloat_@4
  001c9	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001cc	84 d2		 test	 dl, dl
  001ce	74 49		 je	 SHORT $LN69@LoadFloat_@4
  001d0	32 d3		 xor	 dl, bl
  001d2	88 55 f7	 mov	 BYTE PTR __k$[ebp+27], dl
  001d5	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001d8	84 d2		 test	 dl, dl
  001da	74 34		 je	 SHORT $LN68@LoadFloat_@4
  001dc	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001df	88 55 f8	 mov	 BYTE PTR __k$[ebp+28], dl
  001e2	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001e5	84 d2		 test	 dl, dl
  001e7	74 1f		 je	 SHORT $LN67@LoadFloat_@4
  001e9	8a 40 1e	 mov	 al, BYTE PTR [eax+30]
  001ec	32 d1		 xor	 dl, cl
  001ee	88 55 f9	 mov	 BYTE PTR __k$[ebp+29], dl
  001f1	84 c0		 test	 al, al
  001f3	74 0a		 je	 SHORT $LN66@LoadFloat_@4
  001f5	34 eb		 xor	 al, -21			; ffffffebH
  001f7	88 45 fa	 mov	 BYTE PTR __k$[ebp+30], al
  001fa	e9 b7 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN66@LoadFloat_@4:
  001ff	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+30], -21 ; ffffffebH
  00203	e9 ae 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN67@LoadFloat_@4:
  00208	88 4d f9	 mov	 BYTE PTR __k$[ebp+29], cl
  0020b	e9 a6 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN68@LoadFloat_@4:
  00210	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  00214	e9 9d 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN69@LoadFloat_@4:
  00219	88 5d f7	 mov	 BYTE PTR __k$[ebp+27], bl
  0021c	e9 95 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN71@LoadFloat_@4:
  00221	88 4d f5	 mov	 BYTE PTR __k$[ebp+25], cl
  00224	e9 8d 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN72@LoadFloat_@4:
  00229	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  0022d	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN73@LoadFloat_@4:
  00232	88 5d f3	 mov	 BYTE PTR __k$[ebp+23], bl
  00235	eb 7f		 jmp	 SHORT $LN1@LoadFloat_@4
$LN74@LoadFloat_@4:
  00237	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0023b	eb 79		 jmp	 SHORT $LN1@LoadFloat_@4
$LN75@LoadFloat_@4:
  0023d	88 4d f1	 mov	 BYTE PTR __k$[ebp+21], cl
  00240	eb 74		 jmp	 SHORT $LN1@LoadFloat_@4
$LN76@LoadFloat_@4:
  00242	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00246	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@4
$LN77@LoadFloat_@4:
  00248	88 5d ef	 mov	 BYTE PTR __k$[ebp+19], bl
  0024b	eb 69		 jmp	 SHORT $LN1@LoadFloat_@4
$LN78@LoadFloat_@4:
  0024d	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00251	eb 63		 jmp	 SHORT $LN1@LoadFloat_@4
$LN79@LoadFloat_@4:
  00253	88 4d ed	 mov	 BYTE PTR __k$[ebp+17], cl
  00256	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@4
$LN80@LoadFloat_@4:
  00258	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0025c	eb 58		 jmp	 SHORT $LN1@LoadFloat_@4
$LN81@LoadFloat_@4:
  0025e	88 5d eb	 mov	 BYTE PTR __k$[ebp+15], bl
  00261	eb 53		 jmp	 SHORT $LN1@LoadFloat_@4
$LN82@LoadFloat_@4:
  00263	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00267	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@4
$LN83@LoadFloat_@4:
  00269	88 4d e9	 mov	 BYTE PTR __k$[ebp+13], cl
  0026c	eb 48		 jmp	 SHORT $LN1@LoadFloat_@4
$LN84@LoadFloat_@4:
  0026e	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00272	eb 42		 jmp	 SHORT $LN1@LoadFloat_@4
$LN85@LoadFloat_@4:
  00274	88 5d e7	 mov	 BYTE PTR __k$[ebp+11], bl
  00277	eb 3d		 jmp	 SHORT $LN1@LoadFloat_@4
$LN86@LoadFloat_@4:
  00279	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0027d	eb 37		 jmp	 SHORT $LN1@LoadFloat_@4
$LN87@LoadFloat_@4:
  0027f	88 4d e5	 mov	 BYTE PTR __k$[ebp+9], cl
  00282	eb 32		 jmp	 SHORT $LN1@LoadFloat_@4
$LN88@LoadFloat_@4:
  00284	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00288	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN89@LoadFloat_@4:
  0028a	88 5d e3	 mov	 BYTE PTR __k$[ebp+7], bl
  0028d	eb 27		 jmp	 SHORT $LN1@LoadFloat_@4
$LN90@LoadFloat_@4:
  0028f	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00293	eb 21		 jmp	 SHORT $LN1@LoadFloat_@4
$LN91@LoadFloat_@4:
  00295	88 4d e1	 mov	 BYTE PTR __k$[ebp+5], cl
  00298	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN92@LoadFloat_@4:
  0029a	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0029e	eb 16		 jmp	 SHORT $LN1@LoadFloat_@4
$LN93@LoadFloat_@4:
  002a0	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  002a4	eb 10		 jmp	 SHORT $LN1@LoadFloat_@4
$LN94@LoadFloat_@4:
  002a6	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  002aa	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@4
$LN95@LoadFloat_@4:
  002ac	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  002b0	eb 04		 jmp	 SHORT $LN1@LoadFloat_@4
$LN96@LoadFloat_@4:
  002b2	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@4:
  002b6	6a 06		 push	 6
  002b8	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002bb	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+26], 0
  002bf	5a		 pop	 edx
$LL104@LoadFloat_@4:
  002c0	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002c6	83 c0 04	 add	 eax, 4
  002c9	4a		 dec	 edx
  002ca	75 f4		 jne	 SHORT $LL104@LoadFloat_@4
  002cc	6a 18		 push	 24			; 00000018H
  002ce	58		 pop	 eax
$LL101@LoadFloat_@4:
  002cf	8b c8		 mov	 ecx, eax
  002d1	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  002d7	79 05		 jns	 SHORT $LN111@LoadFloat_@4
  002d9	49		 dec	 ecx
  002da	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002dd	41		 inc	 ecx
$LN111@LoadFloat_@4:
  002de	b2 ed		 mov	 dl, -19			; ffffffedH
  002e0	2a d1		 sub	 dl, cl
  002e2	30 54 05 dc	 xor	 BYTE PTR __k$[ebp+eax], dl
  002e6	40		 inc	 eax
  002e7	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  002ea	7c e3		 jl	 SHORT $LL101@LoadFloat_@4

; 137  : 		return LoadFloat(_k, f);

  002ec	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  002f1	51		 push	 ecx
  002f2	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fa	50		 push	 eax
  002fb	8b ce		 mov	 ecx, esi
  002fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00303	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00306	5e		 pop	 esi
  00307	33 cd		 xor	 ecx, ebp
  00309	5b		 pop	 ebx
  0030a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0030f	c9		 leave
  00310	c2 08 00	 ret	 8
??$LoadFloat_e@$0BL@@ioINILoader@@QAEMAAY0BL@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<27>
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@K@@QAEKXZ				; CEncrypt<unsigned long>::operator unsigned long
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??B?$CEncrypt@K@@QAEKXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@K@@QAEKXZ PROC				; CEncrypt<unsigned long>::operator unsigned long, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@K@@QAEKXZ ENDP				; CEncrypt<unsigned long>::operator unsigned long
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z ; CEncrypt<enum TeamType>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z PROC ; CEncrypt<enum TeamType>::operator=, COMDAT
; _this$ = ecx

; 2965 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2966 : 		type value = inValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 2967 : 		EncryptValueToPool((char*)&value);

  00009	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ; CEncrypt<enum TeamType>::EncryptValueToPool

; 2968 : #ifdef _NOTUSE
; 2969 : 		m_value = inValue;
; 2970 : 		Debug();
; 2971 : #endif
; 2972 : 		return value;

  00012	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 2973 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@W4TeamType@@@@QAE?AW4TeamType@@W41@@Z ENDP ; CEncrypt<enum TeamType>::operator=
_TEXT	ENDS
PUBLIC	??_C@_0BD@HKPLNBJP@special_check_time?$AA@	; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	_rkLoader$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioDummyChar@@UAEXAAVioINILoader@@@Z:PROC ; ioDummyChar::LoadProperty
EXTRN	_memset:PROC
;	COMDAT ??_C@_0BD@HKPLNBJP@special_check_time?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_0BD@HKPLNBJP@special_check_time?$AA@ DB 'special_check_time', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iovehicledummy.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioVehicleDummy@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_rkLoader$GSCopy$ = -300				; size = 4
_szBuf$ = -296						; size = 260
__k$667243 = -36					; size = 27
__k$667006 = -36					; size = 26
__k$666756 = -36					; size = 28
__k$666243 = -36					; size = 26
__k$667118 = -32					; size = 22
__k$666881 = -32					; size = 21
__k$666618 = -32					; size = 23
__k$666493 = -32					; size = 24
__k$666118 = -32					; size = 21
__k$666368 = -28					; size = 19
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioVehicleDummy@@UAEXAAVioINILoader@@@Z PROC ; ioVehicleDummy::LoadProperty, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 31   : 	ioDummyChar::LoadProperty( rkLoader );

  00018	57		 push	 edi
  00019	8b f1		 mov	 esi, ecx

; 50   : 
; 51   : 	rkLoader.LoadString_e( "drift_right_animation", "", szBuf, MAX_PATH );

  0001b	89 bd d4 fe ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], edi
  00021	e8 00 00 00 00	 call	 ?LoadProperty@ioDummyChar@@UAEXAAVioINILoader@@@Z ; ioDummyChar::LoadProperty
  00026	68 03 01 00 00	 push	 259			; 00000103H
  0002b	8d 85 d9 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp+1]
  00031	6a 00		 push	 0
  00033	50		 push	 eax
  00034	c6 85 d8 fe ff
	ff 00		 mov	 BYTE PTR _szBuf$[ebp], 0
  0003b	e8 00 00 00 00	 call	 _memset
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
  00043	6a 05		 push	 5
  00045	c7 45 e0 87 99
	86 9a		 mov	 DWORD PTR __k$666118[ebp], -1702454905 ; 9a869987H
  0004c	c7 45 e4 b2 9e
	8e 8b		 mov	 DWORD PTR __k$666118[ebp+4], -1953587534 ; 8b8e9eb2H
  00053	c7 45 e8 89 95
	b4 8b		 mov	 DWORD PTR __k$666118[ebp+8], -1951099511 ; 8bb49589H
  0005a	c7 45 ec 83 85
	86 8b		 mov	 DWORD PTR __k$666118[ebp+12], -1954118269 ; 8b868583H
  00061	c7 45 f0 99 85
	84 84		 mov	 DWORD PTR __k$666118[ebp+16], -2071689831 ; 84848599H
  00068	8d 45 e0	 lea	 eax, DWORD PTR __k$666118[ebp]
  0006b	c6 45 f4 00	 mov	 BYTE PTR __k$666118[ebp+20], 0
  0006f	59		 pop	 ecx
$LL106@LoadProper:

; 32   : 
; 33   : 	char szBuf[MAX_PATH] = "";
; 34   : 
; 35   : 	rkLoader.LoadString_e( "jump_ready_animation", "", szBuf, MAX_PATH );

  00070	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00076	83 c0 04	 add	 eax, 4
  00079	49		 dec	 ecx
  0007a	75 f4		 jne	 SHORT $LL106@LoadProper
  0007c	53		 push	 ebx
  0007d	68 04 01 00 00	 push	 260			; 00000104H
  00082	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00088	50		 push	 eax
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0008e	8d 45 e0	 lea	 eax, DWORD PTR __k$666118[ebp]
  00091	8b cf		 mov	 ecx, edi
  00093	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z
  00099	50		 push	 eax
  0009a	ff d7		 call	 edi

; 36   : 	m_JumpReadyAnimation = szBuf;

  0009c	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  000a2	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000a8	50		 push	 eax
  000a9	8d 8e 84 14 00
	00		 lea	 ecx, DWORD PTR [esi+5252]
  000af	ff d3		 call	 ebx
  000b1	6a 06		 push	 6

; 37   : 	m_fJumpReadyAniRate  = rkLoader.LoadFloat_e( "jump_ready_animation_rate", 1.0f );

  000b3	c7 45 dc 87 99
	86 9a		 mov	 DWORD PTR __k$666243[ebp], -1702454905 ; 9a869987H
  000ba	c7 45 e0 b2 9e
	8e 8b		 mov	 DWORD PTR __k$666243[ebp+4], -1953587534 ; 8b8e9eb2H
  000c1	c7 45 e4 89 95
	b4 8b		 mov	 DWORD PTR __k$666243[ebp+8], -1951099511 ; 8bb49589H
  000c8	c7 45 e8 83 85
	86 8b		 mov	 DWORD PTR __k$666243[ebp+12], -1954118269 ; 8b868583H
  000cf	c7 45 ec 99 85
	84 84		 mov	 DWORD PTR __k$666243[ebp+16], -2071689831 ; 84848599H
  000d6	c7 45 f0 b2 9e
	8a 9e		 mov	 DWORD PTR __k$666243[ebp+20], -1635082574 ; 9e8a9eb2H
  000dd	8d 45 dc	 lea	 eax, DWORD PTR __k$666243[ebp]
  000e0	66 c7 45 f4 88
	00		 mov	 WORD PTR __k$666243[ebp+24], 136 ; 00000088H
  000e6	59		 pop	 ecx
$LL212@LoadProper:
  000e7	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000ed	83 c0 04	 add	 eax, 4
  000f0	49		 dec	 ecx
  000f1	75 f4		 jne	 SHORT $LL212@LoadProper
  000f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000fb	80 75 f4 ed	 xor	 BYTE PTR __k$666243[ebp+24], -19 ; ffffffedH
  000ff	51		 push	 ecx
  00100	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00106	8d 45 dc	 lea	 eax, DWORD PTR __k$666243[ebp]
  00109	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010e	50		 push	 eax
  0010f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00115	d9 9e 94 14 00
	00		 fstp	 DWORD PTR [esi+5268]
  0011b	6a 04		 push	 4

; 38   : 
; 39   : 	rkLoader.LoadString_e( "jumpping_animation", "", szBuf, MAX_PATH );

  0011d	c7 45 e4 87 99
	86 9a		 mov	 DWORD PTR __k$666368[ebp], -1702454905 ; 9a869987H
  00124	c7 45 e8 9d 85
	85 8d		 mov	 DWORD PTR __k$666368[ebp+4], -1920629347 ; 8d85859dH
  0012b	c7 45 ec b2 8d
	85 83		 mov	 DWORD PTR __k$666368[ebp+8], -2088399438 ; 83858db2H
  00132	c7 45 f0 80 8d
	9f 83		 mov	 DWORD PTR __k$666368[ebp+12], -2086695552 ; 839f8d80H
  00139	66 c7 45 f4 82
	82		 mov	 WORD PTR __k$666368[ebp+16], 33410 ; 00008282H
  0013f	8d 45 e4	 lea	 eax, DWORD PTR __k$666368[ebp]
  00142	c6 45 f6 00	 mov	 BYTE PTR __k$666368[ebp+18], 0
  00146	59		 pop	 ecx
$LL318@LoadProper:
  00147	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0014d	83 c0 04	 add	 eax, 4
  00150	49		 dec	 ecx
  00151	75 f4		 jne	 SHORT $LL318@LoadProper
  00153	6a 10		 push	 16			; 00000010H
  00155	58		 pop	 eax
$LL315@LoadProper:
  00156	8b c8		 mov	 ecx, eax
  00158	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0015e	79 05		 jns	 SHORT $LN1103@LoadProper
  00160	49		 dec	 ecx
  00161	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00164	41		 inc	 ecx
$LN1103@LoadProper:
  00165	b2 ed		 mov	 dl, -19			; ffffffedH
  00167	2a d1		 sub	 dl, cl
  00169	30 54 05 e4	 xor	 BYTE PTR __k$666368[ebp+eax], dl
  0016d	40		 inc	 eax
  0016e	83 f8 12	 cmp	 eax, 18			; 00000012H
  00171	7c e3		 jl	 SHORT $LL315@LoadProper
  00173	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00179	68 04 01 00 00	 push	 260			; 00000104H
  0017e	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00184	50		 push	 eax
  00185	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0018a	8d 45 e4	 lea	 eax, DWORD PTR __k$666368[ebp]
  0018d	50		 push	 eax
  0018e	ff d7		 call	 edi

; 40   : 	m_JumppingAnimation = szBuf;

  00190	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00196	50		 push	 eax
  00197	8d 8e 98 14 00
	00		 lea	 ecx, DWORD PTR [esi+5272]
  0019d	ff d3		 call	 ebx
  0019f	6a 05		 push	 5

; 41   : 	m_fJumppingAniRate  = rkLoader.LoadFloat_e( "jumpping_animation_rate", 1.0f );

  001a1	c7 45 e0 87 99
	86 9a		 mov	 DWORD PTR __k$666493[ebp], -1702454905 ; 9a869987H
  001a8	c7 45 e4 9d 85
	85 8d		 mov	 DWORD PTR __k$666493[ebp+4], -1920629347 ; 8d85859dH
  001af	c7 45 e8 b2 8d
	85 83		 mov	 DWORD PTR __k$666493[ebp+8], -2088399438 ; 83858db2H
  001b6	c7 45 ec 80 8d
	9f 83		 mov	 DWORD PTR __k$666493[ebp+12], -2086695552 ; 839f8d80H
  001bd	c7 45 f0 82 82
	b4 98		 mov	 DWORD PTR __k$666493[ebp+16], -1733000574 ; 98b48282H
  001c4	8d 45 e0	 lea	 eax, DWORD PTR __k$666493[ebp]
  001c7	c7 45 f4 8c 98
	8e 00		 mov	 DWORD PTR __k$666493[ebp+20], 9345164 ; 008e988cH
  001ce	59		 pop	 ecx
$LL424@LoadProper:
  001cf	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001d5	83 c0 04	 add	 eax, 4
  001d8	49		 dec	 ecx
  001d9	75 f4		 jne	 SHORT $LL424@LoadProper
  001db	6a 14		 push	 20			; 00000014H
  001dd	58		 pop	 eax
$LL421@LoadProper:
  001de	8b c8		 mov	 ecx, eax
  001e0	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001e6	79 05		 jns	 SHORT $LN1104@LoadProper
  001e8	49		 dec	 ecx
  001e9	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001ec	41		 inc	 ecx
$LN1104@LoadProper:
  001ed	b2 ed		 mov	 dl, -19			; ffffffedH
  001ef	2a d1		 sub	 dl, cl
  001f1	30 54 05 e0	 xor	 BYTE PTR __k$666493[ebp+eax], dl
  001f5	40		 inc	 eax
  001f6	83 f8 17	 cmp	 eax, 23			; 00000017H
  001f9	7c e3		 jl	 SHORT $LL421@LoadProper
  001fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00203	51		 push	 ecx
  00204	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0020a	8d 45 e0	 lea	 eax, DWORD PTR __k$666493[ebp]
  0020d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00212	50		 push	 eax
  00213	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00219	d9 9e a8 14 00
	00		 fstp	 DWORD PTR [esi+5288]
  0021f	6a 05		 push	 5

; 42   : 
; 43   : 	rkLoader.LoadString_e( "jump_landing_animation", "", szBuf, MAX_PATH );

  00221	c7 45 e0 87 99
	86 9a		 mov	 DWORD PTR __k$666618[ebp], -1702454905 ; 9a869987H
  00228	c7 45 e4 b2 80
	8a 84		 mov	 DWORD PTR __k$666618[ebp+4], -2071297870 ; 848a80b2H
  0022f	c7 45 e8 89 85
	85 8d		 mov	 DWORD PTR __k$666618[ebp+8], -1920629367 ; 8d858589H
  00236	c7 45 ec b2 8d
	85 83		 mov	 DWORD PTR __k$666618[ebp+12], -2088399438 ; 83858db2H
  0023d	c7 45 f0 80 8d
	9f 83		 mov	 DWORD PTR __k$666618[ebp+16], -2086695552 ; 839f8d80H
  00244	66 c7 45 f4 82
	82		 mov	 WORD PTR __k$666618[ebp+20], 33410 ; 00008282H
  0024a	8d 45 e0	 lea	 eax, DWORD PTR __k$666618[ebp]
  0024d	c6 45 f6 00	 mov	 BYTE PTR __k$666618[ebp+22], 0
  00251	59		 pop	 ecx
$LL530@LoadProper:
  00252	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00258	83 c0 04	 add	 eax, 4
  0025b	49		 dec	 ecx
  0025c	75 f4		 jne	 SHORT $LL530@LoadProper
  0025e	6a 14		 push	 20			; 00000014H
  00260	58		 pop	 eax
$LL527@LoadProper:
  00261	8b c8		 mov	 ecx, eax
  00263	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00269	79 05		 jns	 SHORT $LN1105@LoadProper
  0026b	49		 dec	 ecx
  0026c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0026f	41		 inc	 ecx
$LN1105@LoadProper:
  00270	b2 ed		 mov	 dl, -19			; ffffffedH
  00272	2a d1		 sub	 dl, cl
  00274	30 54 05 e0	 xor	 BYTE PTR __k$666618[ebp+eax], dl
  00278	40		 inc	 eax
  00279	83 f8 16	 cmp	 eax, 22			; 00000016H
  0027c	7c e3		 jl	 SHORT $LL527@LoadProper
  0027e	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00284	68 04 01 00 00	 push	 260			; 00000104H
  00289	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0028f	50		 push	 eax
  00290	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00295	8d 45 e0	 lea	 eax, DWORD PTR __k$666618[ebp]
  00298	50		 push	 eax
  00299	ff d7		 call	 edi

; 44   : 	m_JumpLandingAnimation = szBuf;

  0029b	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  002a1	50		 push	 eax
  002a2	8d 8e ac 14 00
	00		 lea	 ecx, DWORD PTR [esi+5292]
  002a8	ff d3		 call	 ebx
  002aa	6a 06		 push	 6

; 45   : 	m_fJumpLandingAniRate  = rkLoader.LoadFloat_e( "jump_landing_animation_rate", 1.0f );

  002ac	c7 45 dc 87 99
	86 9a		 mov	 DWORD PTR __k$666756[ebp], -1702454905 ; 9a869987H
  002b3	c7 45 e0 b2 80
	8a 84		 mov	 DWORD PTR __k$666756[ebp+4], -2071297870 ; 848a80b2H
  002ba	c7 45 e4 89 85
	85 8d		 mov	 DWORD PTR __k$666756[ebp+8], -1920629367 ; 8d858589H
  002c1	c7 45 e8 b2 8d
	85 83		 mov	 DWORD PTR __k$666756[ebp+12], -2088399438 ; 83858db2H
  002c8	c7 45 ec 80 8d
	9f 83		 mov	 DWORD PTR __k$666756[ebp+16], -2086695552 ; 839f8d80H
  002cf	c7 45 f0 82 82
	b4 98		 mov	 DWORD PTR __k$666756[ebp+20], -1733000574 ; 98b48282H
  002d6	8d 45 dc	 lea	 eax, DWORD PTR __k$666756[ebp]
  002d9	c7 45 f4 8c 98
	8e 00		 mov	 DWORD PTR __k$666756[ebp+24], 9345164 ; 008e988cH
  002e0	59		 pop	 ecx
$LL636@LoadProper:
  002e1	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002e7	83 c0 04	 add	 eax, 4
  002ea	49		 dec	 ecx
  002eb	75 f4		 jne	 SHORT $LL636@LoadProper
  002ed	6a 18		 push	 24			; 00000018H
  002ef	58		 pop	 eax
$LL633@LoadProper:
  002f0	8b c8		 mov	 ecx, eax
  002f2	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  002f8	79 05		 jns	 SHORT $LN1106@LoadProper
  002fa	49		 dec	 ecx
  002fb	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002fe	41		 inc	 ecx
$LN1106@LoadProper:
  002ff	b2 ed		 mov	 dl, -19			; ffffffedH
  00301	2a d1		 sub	 dl, cl
  00303	30 54 05 dc	 xor	 BYTE PTR __k$666756[ebp+eax], dl
  00307	40		 inc	 eax
  00308	83 f8 1b	 cmp	 eax, 27			; 0000001bH
  0030b	7c e3		 jl	 SHORT $LL633@LoadProper
  0030d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00315	51		 push	 ecx
  00316	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0031c	8d 45 dc	 lea	 eax, DWORD PTR __k$666756[ebp]
  0031f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00324	50		 push	 eax
  00325	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0032b	d9 9e bc 14 00
	00		 fstp	 DWORD PTR [esi+5308]
  00331	6a 05		 push	 5

; 46   : 
; 47   : 	rkLoader.LoadString_e( "drift_left_animation", "", szBuf, MAX_PATH );

  00333	c7 45 e0 89 9e
	82 8c		 mov	 DWORD PTR __k$666881[ebp], -1937596791 ; 8c829e89H
  0033a	c7 45 e4 99 b3
	87 8f		 mov	 DWORD PTR __k$666881[ebp+4], -1886932071 ; 8f87b399H
  00341	c7 45 e8 8b 98
	b4 8b		 mov	 DWORD PTR __k$666881[ebp+8], -1951098741 ; 8bb4988bH
  00348	c7 45 ec 83 85
	86 8b		 mov	 DWORD PTR __k$666881[ebp+12], -1954118269 ; 8b868583H
  0034f	c7 45 f0 99 85
	84 84		 mov	 DWORD PTR __k$666881[ebp+16], -2071689831 ; 84848599H
  00356	8d 45 e0	 lea	 eax, DWORD PTR __k$666881[ebp]
  00359	c6 45 f4 00	 mov	 BYTE PTR __k$666881[ebp+20], 0
  0035d	59		 pop	 ecx
$LL742@LoadProper:
  0035e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00364	83 c0 04	 add	 eax, 4
  00367	49		 dec	 ecx
  00368	75 f4		 jne	 SHORT $LL742@LoadProper
  0036a	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00370	68 04 01 00 00	 push	 260			; 00000104H
  00375	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0037b	50		 push	 eax
  0037c	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00381	8d 45 e0	 lea	 eax, DWORD PTR __k$666881[ebp]
  00384	50		 push	 eax
  00385	ff d7		 call	 edi

; 48   : 	m_DriftLeftAnimation = szBuf;

  00387	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0038d	50		 push	 eax
  0038e	8d 8e c0 14 00
	00		 lea	 ecx, DWORD PTR [esi+5312]
  00394	ff d3		 call	 ebx
  00396	6a 06		 push	 6

; 49   : 	m_fDriftLeftAniRate  = rkLoader.LoadFloat_e( "drift_left_animation_rate", 1.0f );

  00398	c7 45 dc 89 9e
	82 8c		 mov	 DWORD PTR __k$667006[ebp], -1937596791 ; 8c829e89H
  0039f	c7 45 e0 99 b3
	87 8f		 mov	 DWORD PTR __k$667006[ebp+4], -1886932071 ; 8f87b399H
  003a6	c7 45 e4 8b 98
	b4 8b		 mov	 DWORD PTR __k$667006[ebp+8], -1951098741 ; 8bb4988bH
  003ad	c7 45 e8 83 85
	86 8b		 mov	 DWORD PTR __k$667006[ebp+12], -1954118269 ; 8b868583H
  003b4	c7 45 ec 99 85
	84 84		 mov	 DWORD PTR __k$667006[ebp+16], -2071689831 ; 84848599H
  003bb	c7 45 f0 b2 9e
	8a 9e		 mov	 DWORD PTR __k$667006[ebp+20], -1635082574 ; 9e8a9eb2H
  003c2	8d 45 dc	 lea	 eax, DWORD PTR __k$667006[ebp]
  003c5	66 c7 45 f4 88
	00		 mov	 WORD PTR __k$667006[ebp+24], 136 ; 00000088H
  003cb	59		 pop	 ecx
$LL848@LoadProper:
  003cc	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  003d2	83 c0 04	 add	 eax, 4
  003d5	49		 dec	 ecx
  003d6	75 f4		 jne	 SHORT $LL848@LoadProper
  003d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003e0	80 75 f4 ed	 xor	 BYTE PTR __k$667006[ebp+24], -19 ; ffffffedH
  003e4	51		 push	 ecx
  003e5	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  003eb	8d 45 dc	 lea	 eax, DWORD PTR __k$667006[ebp]
  003ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f3	50		 push	 eax
  003f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  003fa	d9 9e d0 14 00
	00		 fstp	 DWORD PTR [esi+5328]
  00400	6a 05		 push	 5

; 50   : 
; 51   : 	rkLoader.LoadString_e( "drift_right_animation", "", szBuf, MAX_PATH );

  00402	c7 45 e0 89 9e
	82 8c		 mov	 DWORD PTR __k$667118[ebp], -1937596791 ; 8c829e89H
  00409	c7 45 e4 99 b3
	99 83		 mov	 DWORD PTR __k$667118[ebp+4], -2087079015 ; 8399b399H
  00410	c7 45 e8 8a 84
	9f b5		 mov	 DWORD PTR __k$667118[ebp+8], -1247837046 ; b59f848aH
  00417	c7 45 ec 8c 82
	82 87		 mov	 DWORD PTR __k$667118[ebp+12], -2021490036 ; 8782828cH
  0041e	c7 45 f0 8c 98
	82 85		 mov	 DWORD PTR __k$667118[ebp+16], -2055038836 ; 8582988cH
  00425	8d 45 e0	 lea	 eax, DWORD PTR __k$667118[ebp]
  00428	66 c7 45 f4 83
	00		 mov	 WORD PTR __k$667118[ebp+20], 131 ; 00000083H
  0042e	59		 pop	 ecx
$LL954@LoadProper:
  0042f	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00435	83 c0 04	 add	 eax, 4
  00438	49		 dec	 ecx
  00439	75 f4		 jne	 SHORT $LL954@LoadProper
  0043b	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00441	80 75 f4 ed	 xor	 BYTE PTR __k$667118[ebp+20], -19 ; ffffffedH
  00445	68 04 01 00 00	 push	 260			; 00000104H
  0044a	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00450	50		 push	 eax
  00451	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00456	8d 45 e0	 lea	 eax, DWORD PTR __k$667118[ebp]
  00459	50		 push	 eax
  0045a	ff d7		 call	 edi

; 52   : 	m_DrifRightAnimation = szBuf;

  0045c	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00462	50		 push	 eax
  00463	8d 8e d4 14 00
	00		 lea	 ecx, DWORD PTR [esi+5332]
  00469	ff d3		 call	 ebx
  0046b	6a 06		 push	 6
  0046d	59		 pop	 ecx

; 53   : 	m_fDrifRightAniRate  = rkLoader.LoadFloat_e( "drift_right_animation_rate", 1.0f );

  0046e	c7 45 dc 89 9e
	82 8c		 mov	 DWORD PTR __k$667243[ebp], -1937596791 ; 8c829e89H
  00475	c7 45 e0 99 b3
	99 83		 mov	 DWORD PTR __k$667243[ebp+4], -2087079015 ; 8399b399H
  0047c	c7 45 e4 8a 84
	9f b5		 mov	 DWORD PTR __k$667243[ebp+8], -1247837046 ; b59f848aH
  00483	c7 45 e8 8c 82
	82 87		 mov	 DWORD PTR __k$667243[ebp+12], -2021490036 ; 8782828cH
  0048a	c7 45 ec 8c 98
	82 85		 mov	 DWORD PTR __k$667243[ebp+16], -2055038836 ; 8582988cH
  00491	c7 45 f0 83 b3
	99 8b		 mov	 DWORD PTR __k$667243[ebp+20], -1952861309 ; 8b99b383H
  00498	66 c7 45 f4 99
	89		 mov	 WORD PTR __k$667243[ebp+24], 35225 ; 00008999H
  0049e	8d 45 dc	 lea	 eax, DWORD PTR __k$667243[ebp]
  004a1	c6 45 f6 00	 mov	 BYTE PTR __k$667243[ebp+26], 0
  004a5	5b		 pop	 ebx
$LL1060@LoadProper:
  004a6	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  004ac	83 c0 04	 add	 eax, 4
  004af	49		 dec	 ecx
  004b0	75 f4		 jne	 SHORT $LL1060@LoadProper
  004b2	6a 18		 push	 24			; 00000018H
  004b4	58		 pop	 eax
$LL1057@LoadProper:
  004b5	8b c8		 mov	 ecx, eax
  004b7	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  004bd	79 05		 jns	 SHORT $LN1107@LoadProper
  004bf	49		 dec	 ecx
  004c0	83 c9 fc	 or	 ecx, -4			; fffffffcH
  004c3	41		 inc	 ecx
$LN1107@LoadProper:
  004c4	b2 ed		 mov	 dl, -19			; ffffffedH
  004c6	2a d1		 sub	 dl, cl
  004c8	30 54 05 dc	 xor	 BYTE PTR __k$667243[ebp+eax], dl
  004cc	40		 inc	 eax
  004cd	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  004d0	7c e3		 jl	 SHORT $LL1057@LoadProper
  004d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004da	51		 push	 ecx
  004db	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  004e1	8d 45 dc	 lea	 eax, DWORD PTR __k$667243[ebp]
  004e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e9	50		 push	 eax
  004ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  004f0	d9 9e e4 14 00
	00		 fstp	 DWORD PTR [esi+5348]

; 54   : 
; 55   : 	m_dwSpecialStateCheckTime = rkLoader.LoadInt( "special_check_time", 500 );

  004f6	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  004fc	68 f4 01 00 00	 push	 500			; 000001f4H
  00501	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@HKPLNBJP@special_check_time?$AA@
  00506	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 56   : }

  0050c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0050f	5f		 pop	 edi
  00510	89 86 e8 14 00
	00		 mov	 DWORD PTR [esi+5352], eax
  00516	33 cd		 xor	 ecx, ebp
  00518	5e		 pop	 esi
  00519	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0051e	c9		 leave
  0051f	c2 04 00	 ret	 4
?LoadProperty@ioVehicleDummy@@UAEXAAVioINILoader@@@Z ENDP ; ioVehicleDummy::LoadProperty
_TEXT	ENDS
EXTRN	?ProcessEffectUpdate@ioDummyChar@@IAEXM@Z:PROC	; ioDummyChar::ProcessEffectUpdate
EXTRN	?ProcessStartState@ioDummyChar@@IAEXM@Z:PROC	; ioDummyChar::ProcessStartState
EXTRN	?ProcessDieState@ioDummyChar@@IAEXM@Z:PROC	; ioDummyChar::ProcessDieState
; Function compile flags: /Ogsp
;	COMDAT ?ProcessState@ioVehicleDummy@@MAEXMK@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
_dwPreTime$ = 12					; size = 4
?ProcessState@ioVehicleDummy@@MAEXMK@Z PROC		; ioVehicleDummy::ProcessState, COMDAT
; _this$ = ecx

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   : 	switch( m_State )

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	8b 86 30 02 00
	00		 mov	 eax, DWORD PTR [esi+560]
  00011	48		 dec	 eax
  00012	74 38		 je	 SHORT $LN3@ProcessSta
  00014	48		 dec	 eax
  00015	74 25		 je	 SHORT $LN4@ProcessSta
  00017	48		 dec	 eax
  00018	74 12		 je	 SHORT $LN2@ProcessSta
  0001a	83 e8 03	 sub	 eax, 3
  0001d	75 38		 jne	 SHORT $LN5@ProcessSta

; 71   : 	case DCS_DIE:
; 72   : 		ProcessDieState( fTimePerSec );

  0001f	51		 push	 ecx
  00020	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00025	e8 00 00 00 00	 call	 ?ProcessDieState@ioDummyChar@@IAEXM@Z ; ioDummyChar::ProcessDieState

; 73   : 		break;

  0002a	eb 2b		 jmp	 SHORT $LN5@ProcessSta
$LN2@ProcessSta:

; 67   : 		break;
; 68   : 	case DCS_MOVE:
; 69   : 		ProcessMoveState( fTimePerSec );

  0002c	8b 06		 mov	 eax, DWORD PTR [esi]
  0002e	51		 push	 ecx
  0002f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00034	ff 90 04 01 00
	00		 call	 DWORD PTR [eax+260]

; 70   : 		break;

  0003a	eb 1b		 jmp	 SHORT $LN5@ProcessSta
$LN4@ProcessSta:

; 61   : 	{
; 62   : 	case DCS_DELAY:
; 63   : 		ProcessDelayState( fTimePerSec );

  0003c	8b 06		 mov	 eax, DWORD PTR [esi]
  0003e	51		 push	 ecx
  0003f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00044	ff 90 00 01 00
	00		 call	 DWORD PTR [eax+256]

; 64   : 		break;

  0004a	eb 0b		 jmp	 SHORT $LN5@ProcessSta
$LN3@ProcessSta:

; 65   : 	case DCS_START:
; 66   : 		ProcessStartState( fTimePerSec );

  0004c	51		 push	 ecx
  0004d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00052	e8 00 00 00 00	 call	 ?ProcessStartState@ioDummyChar@@IAEXM@Z ; ioDummyChar::ProcessStartState
$LN5@ProcessSta:

; 74   : 	}
; 75   : 
; 76   : 	CheckCratorState( GetOwner() ); 

  00057	8b ce		 mov	 ecx, esi
  00059	e8 00 00 00 00	 call	 ?GetOwner@ioDummyChar@@QBEPAVioBaseChar@@XZ ; ioDummyChar::GetOwner
  0005e	50		 push	 eax
  0005f	8b ce		 mov	 ecx, esi
  00061	e8 00 00 00 00	 call	 ?CheckCratorState@ioVehicleDummy@@QAEXPAVioBaseChar@@@Z ; ioVehicleDummy::CheckCratorState

; 77   : 	ProcessPos( fTimePerSec );

  00066	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  0006b	8b 06		 mov	 eax, DWORD PTR [esi]
  0006d	51		 push	 ecx
  0006e	8b ce		 mov	 ecx, esi
  00070	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00075	ff 90 fc 00 00
	00		 call	 DWORD PTR [eax+252]

; 78   : 	ProcessEffectUpdate( fTimePerSec );

  0007b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00080	51		 push	 ecx
  00081	8b ce		 mov	 ecx, esi
  00083	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00088	e8 00 00 00 00	 call	 ?ProcessEffectUpdate@ioDummyChar@@IAEXM@Z ; ioDummyChar::ProcessEffectUpdate
  0008d	5e		 pop	 esi

; 79   : }

  0008e	5d		 pop	 ebp
  0008f	c2 08 00	 ret	 8
?ProcessState@ioVehicleDummy@@MAEXMK@Z ENDP		; ioVehicleDummy::ProcessState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?ProcessDelayState@ioVehicleDummy@@MAEXM@Z
_TEXT	SEGMENT
_value$667407 = -4					; size = 4
_fTimePerSec$ = 8					; size = 4
?ProcessDelayState@ioVehicleDummy@@MAEXM@Z PROC		; ioVehicleDummy::ProcessDelayState, COMDAT
; _this$ = ecx

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 102  : 	ioBaseChar *pOwner = GetOwner();

  00007	e8 00 00 00 00	 call	 ?GetOwner@ioDummyChar@@QBEPAVioBaseChar@@XZ ; ioDummyChar::GetOwner

; 103  : 	if( !pOwner )

  0000c	85 c0		 test	 eax, eax
  0000e	74 43		 je	 SHORT $LN1@ProcessDel

; 104  : 		return;
; 105  : 
; 106  : 	DWORD dwCurTime = FRAMEGETTIME();

  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00018	8b c8		 mov	 ecx, eax
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 107  : 	if( m_dwDelayStartTime > 0 && m_dwDelayStartTime + m_dwDelayDuration < dwCurTime )

  00020	83 bf 20 02 00
	00 00		 cmp	 DWORD PTR [edi+544], 0
  00027	8b d8		 mov	 ebx, eax
  00029	76 26		 jbe	 SHORT $LN7@ProcessDel
  0002b	8d 45 fc	 lea	 eax, DWORD PTR _value$667407[ebp]
  0002e	50		 push	 eax
  0002f	8d 8f 3c 07 00
	00		 lea	 ecx, DWORD PTR [edi+1852]
  00035	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  0003a	8b 87 20 02 00
	00		 mov	 eax, DWORD PTR [edi+544]
  00040	03 45 fc	 add	 eax, DWORD PTR _value$667407[ebp]
  00043	3b c3		 cmp	 eax, ebx
  00045	73 0a		 jae	 SHORT $LN7@ProcessDel

; 108  : 	{
; 109  : 		SetMoveState();

  00047	8b 07		 mov	 eax, DWORD PTR [edi]
  00049	8b cf		 mov	 ecx, edi
  0004b	ff 90 18 01 00
	00		 call	 DWORD PTR [eax+280]
$LN7@ProcessDel:
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
$LN1@ProcessDel:
  00053	5f		 pop	 edi

; 110  : 	}
; 111  : }

  00054	c9		 leave
  00055	c2 04 00	 ret	 4
?ProcessDelayState@ioVehicleDummy@@MAEXM@Z ENDP		; ioVehicleDummy::ProcessDelayState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioplayentity.h
_TEXT	ENDS
;	COMDAT ?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z
_TEXT	SEGMENT
_value$667416 = 8					; size = 4
_eType$ = 8						; size = 4
?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z PROC		; ioPlayEntity::SetTeam, COMDAT
; _this$ = ecx

; 106  : 	virtual void SetTeam( TeamType eType ) { m_TeamType = eType; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _eType$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$667416[ebp], eax
  00009	8d 45 08	 lea	 eax, DWORD PTR _value$667416[ebp]
  0000c	50		 push	 eax
  0000d	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  00013	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@W4TeamType@@@@AAEXPBD@Z ; CEncrypt<enum TeamType>::EncryptValueToPool
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?SetTeam@ioPlayEntity@@UAEXW4TeamType@@@Z ENDP		; ioPlayEntity::SetTeam
_TEXT	ENDS
END
