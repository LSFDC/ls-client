; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\Housing\BlockDefine.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??0TilePos@@QAE@HHH@Z				; TilePos::TilePos
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\housing\blockdefine.h
;	COMDAT ??0TilePos@@QAE@HHH@Z
_TEXT	SEGMENT
_nX$ = 8						; size = 4
_nY$ = 12						; size = 4
_nZ$ = 16						; size = 4
??0TilePos@@QAE@HHH@Z PROC				; TilePos::TilePos, COMDAT
; _this$ = ecx

; 96   : 	TilePos( int nX, int nY, int nZ )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 97   : 	{
; 98   : 		x		= nX;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR _nX$[ebp]

; 99   : 		y		= nY;
; 100  : 		z		= nZ;
; 101  : 		event	= 0;

  00008	83 60 0c 00	 and	 DWORD PTR [eax+12], 0
  0000c	89 08		 mov	 DWORD PTR [eax], ecx
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR _nY$[ebp]
  00011	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00014	8b 4d 10	 mov	 ecx, DWORD PTR _nZ$[ebp]
  00017	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 102  : 	}

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
??0TilePos@@QAE@HHH@Z ENDP				; TilePos::TilePos
_TEXT	ENDS
PUBLIC	?GetTileMax@ioBlockManager@@QAEHXZ		; ioBlockManager::GetTileMax
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\housing\ioblockmanager.h
;	COMDAT ?GetTileMax@ioBlockManager@@QAEHXZ
_TEXT	SEGMENT
?GetTileMax@ioBlockManager@@QAEHXZ PROC			; ioBlockManager::GetTileMax, COMDAT
; _this$ = ecx

; 71   : 	int GetTileMax(){ return m_nTileMax; }

  00000	8b 41 48	 mov	 eax, DWORD PTR [ecx+72]
  00003	c3		 ret	 0
?GetTileMax@ioBlockManager@@QAEHXZ ENDP			; ioBlockManager::GetTileMax
_TEXT	ENDS
PUBLIC	?GetBlockStartHeight@ioBlockManager@@QAEMXZ	; ioBlockManager::GetBlockStartHeight
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?GetBlockStartHeight@ioBlockManager@@QAEMXZ
_TEXT	SEGMENT
?GetBlockStartHeight@ioBlockManager@@QAEMXZ PROC	; ioBlockManager::GetBlockStartHeight, COMDAT
; _this$ = ecx

; 73   : 	float GetBlockStartHeight(){ return m_fBlockStartHeight; }

  00000	d9 41 34	 fld	 DWORD PTR [ecx+52]
  00003	c3		 ret	 0
?GetBlockStartHeight@ioBlockManager@@QAEMXZ ENDP	; ioBlockManager::GetBlockStartHeight
_TEXT	ENDS
PUBLIC	?GetBlockRotation@ioBlockManager@@QAEABUD3DXQUATERNION@@XZ ; ioBlockManager::GetBlockRotation
; Function compile flags: /Ogsp
;	COMDAT ?GetBlockRotation@ioBlockManager@@QAEABUD3DXQUATERNION@@XZ
_TEXT	SEGMENT
?GetBlockRotation@ioBlockManager@@QAEABUD3DXQUATERNION@@XZ PROC ; ioBlockManager::GetBlockRotation, COMDAT
; _this$ = ecx

; 74   : 	const D3DXQUATERNION& GetBlockRotation(){ return m_BlockRotation; }

  00000	8d 41 38	 lea	 eax, DWORD PTR [ecx+56]
  00003	c3		 ret	 0
?GetBlockRotation@ioBlockManager@@QAEABUD3DXQUATERNION@@XZ ENDP ; ioBlockManager::GetBlockRotation
_TEXT	ENDS
PUBLIC	__real@3f91df46a2526c7a
PUBLIC	??$DEGtoRAD@M@@YAMM@Z				; DEGtoRAD<float>
;	COMDAT __real@3f91df46a2526c7a
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\veryoftenusedefine.h
CONST	SEGMENT
__real@3f91df46a2526c7a DQ 03f91df46a2526c7ar	; 0.0174533
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??$DEGtoRAD@M@@YAMM@Z
_TEXT	SEGMENT
tv129 = 8						; size = 4
_val$ = 8						; size = 4
??$DEGtoRAD@M@@YAMM@Z PROC				; DEGtoRAD<float>, COMDAT

; 20   : type  DEGtoRAD (type val) {return (type) (val * 0.0174532925199);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR _val$[ebp]
  00006	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a2526c7a
  0000c	d9 5d 08	 fstp	 DWORD PTR tv129[ebp]
  0000f	d9 45 08	 fld	 DWORD PTR tv129[ebp]
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??$DEGtoRAD@M@@YAMM@Z ENDP				; DEGtoRAD<float>
_TEXT	ENDS
PUBLIC	_cosf
EXTRN	__CIcos:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv69 = 8						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	e8 00 00 00 00	 call	 __CIcos
  0000b	d9 5d 08	 fstp	 DWORD PTR tv69[ebp]
  0000e	d9 45 08	 fld	 DWORD PTR tv69[ebp]
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
PUBLIC	_floorf
EXTRN	_floor:PROC
; Function compile flags: /Ogsp
;	COMDAT _floorf
_TEXT	SEGMENT
tv69 = 8						; size = 4
__X$ = 8						; size = 4
_floorf	PROC						; COMDAT

; 416  :         {return ((float)floor((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	51		 push	 ecx
  00007	51		 push	 ecx
  00008	dd 1c 24	 fstp	 QWORD PTR [esp]
  0000b	e8 00 00 00 00	 call	 _floor
  00010	d9 5d 08	 fstp	 DWORD PTR tv69[ebp]
  00013	59		 pop	 ecx
  00014	d9 45 08	 fld	 DWORD PTR tv69[ebp]
  00017	59		 pop	 ecx
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
_floorf	ENDP
_TEXT	ENDS
PUBLIC	_sinf
EXTRN	__CIsin:PROC
; Function compile flags: /Ogsp
;	COMDAT _sinf
_TEXT	SEGMENT
tv69 = 8						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	e8 00 00 00 00	 call	 __CIsin
  0000b	d9 5d 08	 fstp	 DWORD PTR tv69[ebp]
  0000e	d9 45 08	 fld	 DWORD PTR tv69[ebp]
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
PUBLIC	?cos@@YAMM@Z					; cos
; Function compile flags: /Ogsp
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
tv73 = 8						; size = 4
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 512  :         {return (cosf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	e8 00 00 00 00	 call	 __CIcos
  0000b	d9 5d 08	 fstp	 DWORD PTR tv73[ebp]
  0000e	d9 45 08	 fld	 DWORD PTR tv73[ebp]
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
PUBLIC	?sin@@YAMM@Z					; sin
; Function compile flags: /Ogsp
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
tv73 = 8						; size = 4
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 538  :         {return (sinf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	e8 00 00 00 00	 call	 __CIsin
  0000b	d9 5d 08	 fstp	 DWORD PTR tv73[ebp]
  0000e	d9 45 08	 fld	 DWORD PTR tv73[ebp]
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	_fOutWorldZ$GSCopy$
PUBLIC	_fOutWorldY$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?TileCoordToWorldCoord@@YAXHHHAAM00@Z		; TileCoordToWorldCoord
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z:PROC
EXTRN	?GetSingleton@ioBlockManager@@SAAAV1@XZ:PROC	; ioBlockManager::GetSingleton
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\housing\blockdefine.cpp
;	COMDAT ?TileCoordToWorldCoord@@YAXHHHAAM00@Z
_TEXT	SEGMENT
_fOutWorldZ$GSCopy$ = -36				; size = 4
_fOutWorldY$GSCopy$ = -32				; size = 4
$T507314 = -28						; size = 12
_vPos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_nTileX$ = 8						; size = 4
_nTileY$ = 12						; size = 4
_nTileZ$ = 16						; size = 4
_fOutWorldX$ = 20					; size = 4
_fOutWorldY$ = 24					; size = 4
_fOutWorldZ$ = 28					; size = 4
?TileCoordToWorldCoord@@YAXHHHAAM00@Z PROC		; TileCoordToWorldCoord, COMDAT

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 18	 mov	 eax, DWORD PTR _fOutWorldY$[ebp]

; 7    : 
; 8    : 	D3DXVECTOR3 vPos;
; 9    : 	vPos.x = nTileX * UD_SIZE;

  00013	89 45 e0	 mov	 DWORD PTR _fOutWorldY$GSCopy$[ebp], eax
  00016	8b 45 1c	 mov	 eax, DWORD PTR _fOutWorldZ$[ebp]
  00019	89 45 dc	 mov	 DWORD PTR _fOutWorldZ$GSCopy$[ebp], eax
  0001c	8b 45 08	 mov	 eax, DWORD PTR _nTileX$[ebp]
  0001f	6b c0 64	 imul	 eax, 100		; 00000064H
  00022	53		 push	 ebx
  00023	8b 5d 14	 mov	 ebx, DWORD PTR _fOutWorldX$[ebp]
  00026	56		 push	 esi
  00027	0f 57 c0	 xorps	 xmm0, xmm0
  0002a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0002e	57		 push	 edi
  0002f	f3 0f 11 45 f0	 movss	 DWORD PTR _vPos$[ebp], xmm0

; 10   : 	vPos.z = ((g_BlockManager.GetTileMax()-1) - nTileZ) * UD_SIZE - ((g_BlockManager.GetTileMax()-1) * UD_SIZE);

  00034	e8 00 00 00 00	 call	 ?GetSingleton@ioBlockManager@@SAAAV1@XZ ; ioBlockManager::GetSingleton
  00039	8b 70 48	 mov	 esi, DWORD PTR [eax+72]
  0003c	e8 00 00 00 00	 call	 ?GetSingleton@ioBlockManager@@SAAAV1@XZ ; ioBlockManager::GetSingleton
  00041	2b 70 48	 sub	 esi, DWORD PTR [eax+72]
  00044	0f 57 c0	 xorps	 xmm0, xmm0
  00047	2b 75 10	 sub	 esi, DWORD PTR _nTileZ$[ebp]
  0004a	6b f6 64	 imul	 esi, 100		; 00000064H
  0004d	f3 0f 2a c6	 cvtsi2ss xmm0, esi
  00051	f3 0f 11 45 f8	 movss	 DWORD PTR _vPos$[ebp+8], xmm0

; 11   : 	vPos.y = nTileY * UD_SIZE + g_BlockManager.GetBlockStartHeight();

  00056	e8 00 00 00 00	 call	 ?GetSingleton@ioBlockManager@@SAAAV1@XZ ; ioBlockManager::GetSingleton
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _nTileY$[ebp]
  0005e	f3 0f 10 48 34	 movss	 xmm1, DWORD PTR [eax+52]
  00063	6b c9 64	 imul	 ecx, 100		; 00000064H
  00066	0f 57 c0	 xorps	 xmm0, xmm0
  00069	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0006d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00070	0f 5a c9	 cvtps2pd xmm1, xmm1
  00073	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00077	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0007b	f3 0f 11 45 f4	 movss	 DWORD PTR _vPos$[ebp+4], xmm0

; 12   : 	
; 13   : 	vPos = g_BlockManager.GetBlockRotation() * vPos;

  00080	e8 00 00 00 00	 call	 ?GetSingleton@ioBlockManager@@SAAAV1@XZ ; ioBlockManager::GetSingleton
  00085	8d 4d f0	 lea	 ecx, DWORD PTR _vPos$[ebp]
  00088	51		 push	 ecx
  00089	83 c0 38	 add	 eax, 56			; 00000038H
  0008c	50		 push	 eax
  0008d	8d 45 e4	 lea	 eax, DWORD PTR $T507314[ebp]
  00090	50		 push	 eax
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z

; 14   : 	fOutWorldX = vPos.x;
; 15   : 	fOutWorldZ = vPos.z;
; 16   : 	fOutWorldY = vPos.y;
; 17   : }

  00097	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009a	8b f0		 mov	 esi, eax
  0009c	8b 45 dc	 mov	 eax, DWORD PTR _fOutWorldZ$GSCopy$[ebp]
  0009f	8d 7d f0	 lea	 edi, DWORD PTR _vPos$[ebp]
  000a2	a5		 movsd
  000a3	a5		 movsd
  000a4	a5		 movsd
  000a5	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _vPos$[ebp]
  000aa	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ad	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0
  000b1	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _vPos$[ebp+8]
  000b6	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  000ba	8b 45 e0	 mov	 eax, DWORD PTR _fOutWorldY$GSCopy$[ebp]
  000bd	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _vPos$[ebp+4]
  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi
  000c4	33 cd		 xor	 ecx, ebp
  000c6	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  000ca	5b		 pop	 ebx
  000cb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d0	c9		 leave
  000d1	c3		 ret	 0
?TileCoordToWorldCoord@@YAXHHHAAM00@Z ENDP		; TileCoordToWorldCoord
_TEXT	ENDS
PUBLIC	__real@3fe0000000000000
PUBLIC	?RoundOff@@YAMM@Z				; RoundOff
;	COMDAT __real@3fe0000000000000
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\housing\blockdefine.cpp
CONST	ENDS
;	COMDAT ?RoundOff@@YAMM@Z
_TEXT	SEGMENT
tv134 = 8						; size = 4
tv74 = 8						; size = 4
_f$ = 8							; size = 4
?RoundOff@@YAMM@Z PROC					; RoundOff, COMDAT

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 21   : 	return floorf(f + 0.5f);

  00003	d9 45 08	 fld	 DWORD PTR _f$[ebp]
  00006	51		 push	 ecx
  00007	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  0000d	51		 push	 ecx
  0000e	d9 5d 08	 fstp	 DWORD PTR tv134[ebp]
  00011	d9 45 08	 fld	 DWORD PTR tv134[ebp]
  00014	dd 1c 24	 fstp	 QWORD PTR [esp]
  00017	e8 00 00 00 00	 call	 _floor
  0001c	d9 5d 08	 fstp	 DWORD PTR tv74[ebp]
  0001f	59		 pop	 ecx
  00020	d9 45 08	 fld	 DWORD PTR tv74[ebp]
  00023	59		 pop	 ecx

; 22   : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?RoundOff@@YAMM@Z ENDP					; RoundOff
_TEXT	ENDS
PUBLIC	__real@bff0000000000000
PUBLIC	?BlockCoordRotate@@YAXHHMAAM0@Z			; BlockCoordRotate
;	COMDAT __real@bff0000000000000
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\housing\blockdefine.cpp
CONST	ENDS
;	COMDAT ?BlockCoordRotate@@YAXHHMAAM0@Z
_TEXT	SEGMENT
_mMat$ = -20						; size = 16
tv230 = -4						; size = 4
_fSrcX$ = 8						; size = 4
_fSrcZ$ = 12						; size = 4
tv234 = 16						; size = 4
tv227 = 16						; size = 4
_fTheta$ = 16						; size = 4
_fOutX$ = 20						; size = 4
_fOutZ$ = 24						; size = 4
?BlockCoordRotate@@YAXHHMAAM0@Z PROC			; BlockCoordRotate, COMDAT

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 26   : 	float mMat[2][2];
; 27   : 	mMat[0][0] = cos( DEGtoRAD( fTheta ) );

  00006	d9 45 10	 fld	 DWORD PTR _fTheta$[ebp]
  00009	56		 push	 esi
  0000a	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a2526c7a
  00010	57		 push	 edi
  00011	d9 5d 10	 fstp	 DWORD PTR tv227[ebp]
  00014	d9 45 10	 fld	 DWORD PTR tv227[ebp]
  00017	e8 00 00 00 00	 call	 __CIcos
  0001c	d9 5d fc	 fstp	 DWORD PTR tv230[ebp]
  0001f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR tv230[ebp]

; 28   : 	mMat[1][1] = cos( DEGtoRAD( fTheta ) );
; 29   : 
; 30   : 	mMat[0][1] = -1 * sin( DEGtoRAD( fTheta ) );

  00024	d9 45 10	 fld	 DWORD PTR tv227[ebp]
  00027	f3 0f 11 45 ec	 movss	 DWORD PTR _mMat$[ebp], xmm0
  0002c	f3 0f 11 45 f8	 movss	 DWORD PTR _mMat$[ebp+12], xmm0
  00031	e8 00 00 00 00	 call	 __CIsin
  00036	d9 5d 10	 fstp	 DWORD PTR tv234[ebp]
  00039	f3 0f 10 5d 10	 movss	 xmm3, DWORD PTR tv234[ebp]

; 31   : 	mMat[1][0] = sin( DEGtoRAD( fTheta ) );	
; 32   : 
; 33   : 	fOutX = mMat[0][0] * fSrcX + mMat[0][1] * fSrcZ;

  0003e	66 0f 6e 4d 08	 movd	 xmm1, DWORD PTR _fSrcX$[ebp]
  00043	f3 0f 10 6d ec	 movss	 xmm5, DWORD PTR _mMat$[ebp]
  00048	8b 75 14	 mov	 esi, DWORD PTR _fOutX$[ebp]

; 34   : 	fOutZ = mMat[1][0] * fSrcX + mMat[1][1] * fSrcZ;

  0004b	8b 7d 18	 mov	 edi, DWORD PTR _fOutZ$[ebp]
  0004e	0f 5a c3	 cvtps2pd xmm0, xmm3
  00051	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff0000000000000
  00059	0f 57 d2	 xorps	 xmm2, xmm2
  0005c	66 0f 5a d0	 cvtpd2ps xmm2, xmm0
  00060	66 0f 6e 45 0c	 movd	 xmm0, DWORD PTR _fSrcZ$[ebp]
  00065	0f 5a d2	 cvtps2pd xmm2, xmm2
  00068	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0006b	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0006e	0f 57 e4	 xorps	 xmm4, xmm4
  00071	f3 0f 5a e1	 cvtss2sd xmm4, xmm1
  00075	0f 5a ed	 cvtps2pd xmm5, xmm5
  00078	f2 0f 59 e5	 mulsd	 xmm4, xmm5
  0007c	0f 57 ed	 xorps	 xmm5, xmm5
  0007f	f3 0f 5a e8	 cvtss2sd xmm5, xmm0
  00083	f2 0f 59 ea	 mulsd	 xmm5, xmm2
  00087	f2 0f 58 e5	 addsd	 xmm4, xmm5
  0008b	66 0f 5a d4	 cvtpd2ps xmm2, xmm4
  0008f	f3 0f 11 16	 movss	 DWORD PTR [esi], xmm2
  00093	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00097	f3 0f 5a c0	 cvtss2sd xmm0, xmm0

; 35   : 	fOutX = RoundOff( fOutX );

  0009b	51		 push	 ecx
  0009c	0f 5a d3	 cvtps2pd xmm2, xmm3
  0009f	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  000a3	f3 0f 10 55 f8	 movss	 xmm2, DWORD PTR _mMat$[ebp+12]
  000a8	0f 5a d2	 cvtps2pd xmm2, xmm2
  000ab	f2 0f 59 c2	 mulsd	 xmm0, xmm2
  000af	f2 0f 58 c8	 addsd	 xmm1, xmm0
  000b3	0f 57 c0	 xorps	 xmm0, xmm0
  000b6	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000ba	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  000be	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  000c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c7	e8 00 00 00 00	 call	 ?RoundOff@@YAMM@Z	; RoundOff
  000cc	d9 1e		 fstp	 DWORD PTR [esi]

; 36   : 	fOutZ = RoundOff( fOutZ );

  000ce	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  000d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d7	e8 00 00 00 00	 call	 ?RoundOff@@YAMM@Z	; RoundOff
  000dc	d9 1f		 fstp	 DWORD PTR [edi]
  000de	59		 pop	 ecx
  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi

; 37   : }

  000e1	c9		 leave
  000e2	c3		 ret	 0
?BlockCoordRotate@@YAXHHMAAM0@Z ENDP			; BlockCoordRotate
_TEXT	ENDS
_BSS	SEGMENT
_ZERO_TILE_POS DB 010H DUP (?)
_BSS	ENDS
END
