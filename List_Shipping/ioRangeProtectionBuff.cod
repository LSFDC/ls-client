; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioRangeProtectionBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?return5@@YAIXZ					; return5
; Function compile flags: /Ogsp
;	COMDAT ?return5@@YAIXZ
_TEXT	SEGMENT
?return5@@YAIXZ PROC					; return5, COMDAT

; 18   : 	__forceinline unsigned int return5() { __asm mov eax, 5 };

  00000	b8 05 00 00 00	 mov	 eax, 5
  00005	c3		 ret	 0
?return5@@YAIXZ ENDP					; return5
_TEXT	ENDS
PUBLIC	?return10@@YAIXZ				; return10
; Function compile flags: /Ogsp
;	COMDAT ?return10@@YAIXZ
_TEXT	SEGMENT
?return10@@YAIXZ PROC					; return10, COMDAT

; 21   : 	__forceinline unsigned int return10() { __asm mov eax, 10 };

  00000	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00005	c3		 ret	 0
?return10@@YAIXZ ENDP					; return10
_TEXT	ENDS
PUBLIC	?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ	; ioBaseChar::GetBlowStopMotionState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ PROC	; ioBaseChar::GetBlowStopMotionState, COMDAT
; _this$ = ecx

; 1566 : 	inline bool GetBlowStopMotionState() const { return m_bBlowStopMotion; }

  00000	8a 81 c7 15 00
	00		 mov	 al, BYTE PTR [ecx+5575]
  00006	c3		 ret	 0
?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ ENDP	; ioBaseChar::GetBlowStopMotionState
_TEXT	ENDS
PUBLIC	?GetBlowFrozenState@ioBaseChar@@QBE_NXZ		; ioBaseChar::GetBlowFrozenState
; Function compile flags: /Ogsp
;	COMDAT ?GetBlowFrozenState@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?GetBlowFrozenState@ioBaseChar@@QBE_NXZ PROC		; ioBaseChar::GetBlowFrozenState, COMDAT
; _this$ = ecx

; 1571 : 	inline bool GetBlowFrozenState() const { return m_bBlowFrozenState; }

  00000	8a 81 c5 15 00
	00		 mov	 al, BYTE PTR [ecx+5573]
  00006	c3		 ret	 0
?GetBlowFrozenState@ioBaseChar@@QBE_NXZ ENDP		; ioBaseChar::GetBlowFrozenState
_TEXT	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ	; ioBaseChar::GetCharName
; Function compile flags: /Ogsp
;	COMDAT ?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ PROC	; ioBaseChar::GetCharName, COMDAT
; _this$ = ecx

; 2594 : 	inline const ioHashString& GetCharName() const { return m_Name; }

  00000	8d 81 d4 02 00
	00		 lea	 eax, DWORD PTR [ecx+724]
  00006	c3		 ret	 0
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ ENDP	; ioBaseChar::GetCharName
_TEXT	ENDS
PUBLIC	??_7ioRangeProtectionBuff@@6B@			; ioRangeProtectionBuff::`vftable'
PUBLIC	??0ioRangeProtectionBuff@@QAE@XZ		; ioRangeProtectionBuff::ioRangeProtectionBuff
PUBLIC	??_R4ioRangeProtectionBuff@@6B@			; ioRangeProtectionBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioRangeProtectionBuff@@@8		; ioRangeProtectionBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioRangeProtectionBuff@@8			; ioRangeProtectionBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioRangeProtectionBuff@@8			; ioRangeProtectionBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioRangeProtectionBuff@@8		; ioRangeProtectionBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioRangeProtectionBuff@@UAEXAAVioINILoader@@@Z ; ioRangeProtectionBuff::LoadProperty
PUBLIC	?Clone@ioRangeProtectionBuff@@UAEPAVioBuff@@XZ	; ioRangeProtectionBuff::Clone
PUBLIC	?StartBuff@ioRangeProtectionBuff@@UAEXPAVioBaseChar@@@Z ; ioRangeProtectionBuff::StartBuff
PUBLIC	?ApplyStartBuff@ioRangeProtectionBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioRangeProtectionBuff::ApplyStartBuff
PUBLIC	?ProcessBuff@ioRangeProtectionBuff@@UAEXM@Z	; ioRangeProtectionBuff::ProcessBuff
PUBLIC	?EndBuff@ioRangeProtectionBuff@@UAEXXZ		; ioRangeProtectionBuff::EndBuff
PUBLIC	?SetAction@ioRangeProtectionBuff@@MAEXXZ	; ioRangeProtectionBuff::SetAction
PUBLIC	?ProcessDelay@ioRangeProtectionBuff@@MAEXM@Z	; ioRangeProtectionBuff::ProcessDelay
PUBLIC	?SetExtraDurationByGrowth@ioRangeProtectionBuff@@UAEXM@Z ; ioRangeProtectionBuff::SetExtraDurationByGrowth
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyExtraBuffInfo
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioRangeProtectionBuff@@UAEPAXI@Z:PROC	; ioRangeProtectionBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iorangeprotectionbuff.cpp
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioRangeProtectionBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioRangeProtectionBuff@@8 DD FLAT:??_R0?AVioRangeProtectionBuff@@@8 ; ioRangeProtectionBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioRangeProtectionBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioRangeProtectionBuff@@8
rdata$r	SEGMENT
??_R2ioRangeProtectionBuff@@8 DD FLAT:??_R1A@?0A@EA@ioRangeProtectionBuff@@8 ; ioRangeProtectionBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioRangeProtectionBuff@@8
rdata$r	SEGMENT
??_R3ioRangeProtectionBuff@@8 DD 00H			; ioRangeProtectionBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioRangeProtectionBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioRangeProtectionBuff@@@8
_DATA	SEGMENT
??_R0?AVioRangeProtectionBuff@@@8 DD FLAT:??_7type_info@@6B@ ; ioRangeProtectionBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioRangeProtectionBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioRangeProtectionBuff@@6B@
rdata$r	SEGMENT
??_R4ioRangeProtectionBuff@@6B@ DD 00H			; ioRangeProtectionBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioRangeProtectionBuff@@@8
	DD	FLAT:??_R3ioRangeProtectionBuff@@8
rdata$r	ENDS
;	COMDAT ??_7ioRangeProtectionBuff@@6B@
CONST	SEGMENT
??_7ioRangeProtectionBuff@@6B@ DD FLAT:??_R4ioRangeProtectionBuff@@6B@ ; ioRangeProtectionBuff::`vftable'
	DD	FLAT:?LoadProperty@ioRangeProtectionBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioRangeProtectionBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioRangeProtectionBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioRangeProtectionBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioRangeProtectionBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioRangeProtectionBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioRangeProtectionBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioRangeProtectionBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioRangeProtectionBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioRangeProtectionBuff@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0ioRangeProtectionBuff@@QAE@XZ
_TEXT	SEGMENT
??0ioRangeProtectionBuff@@QAE@XZ PROC			; ioRangeProtectionBuff::ioRangeProtectionBuff, COMDAT
; _this$ = ecx

; 10   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioRangeProtectionBuff@@6B@

; 11   : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0ioRangeProtectionBuff@@QAE@XZ ENDP			; ioRangeProtectionBuff::ioRangeProtectionBuff
_TEXT	ENDS
PUBLIC	??0ioRangeProtectionBuff@@QAE@ABV0@@Z		; ioRangeProtectionBuff::ioRangeProtectionBuff
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
;	COMDAT ??0ioRangeProtectionBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??0ioRangeProtectionBuff@@QAE@ABV0@@Z PROC		; ioRangeProtectionBuff::ioRangeProtectionBuff, COMDAT
; _this$ = ecx

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioRangeProtectionBuff@@6B@

; 16   : 	m_fOutLineR = rhs.m_fOutLineR;

  00016	d9 87 6c 09 00
	00		 fld	 DWORD PTR [edi+2412]
  0001c	d9 9e 6c 09 00
	00		 fstp	 DWORD PTR [esi+2412]

; 17   : 	m_fOutLineG = rhs.m_fOutLineG;

  00022	d9 87 70 09 00
	00		 fld	 DWORD PTR [edi+2416]
  00028	d9 9e 70 09 00
	00		 fstp	 DWORD PTR [esi+2416]

; 18   : 	m_fOutLineB = rhs.m_fOutLineB;

  0002e	d9 87 74 09 00
	00		 fld	 DWORD PTR [edi+2420]
  00034	d9 9e 74 09 00
	00		 fstp	 DWORD PTR [esi+2420]

; 19   : 	m_fOutLineAlpha = rhs.m_fOutLineAlpha;

  0003a	d9 87 78 09 00
	00		 fld	 DWORD PTR [edi+2424]
  00040	d9 9e 78 09 00
	00		 fstp	 DWORD PTR [esi+2424]

; 20   : 	m_fOutLineThickness = rhs.m_fOutLineThickness;

  00046	d9 87 7c 09 00
	00		 fld	 DWORD PTR [edi+2428]
  0004c	d9 9e 7c 09 00
	00		 fstp	 DWORD PTR [esi+2428]

; 21   : 	m_bEnableOutLine = rhs.m_bEnableOutLine;

  00052	8a 87 80 09 00
	00		 mov	 al, BYTE PTR [edi+2432]
  00058	88 86 80 09 00
	00		 mov	 BYTE PTR [esi+2432], al

; 22   : 	m_bDisableDownState = rhs.m_bDisableDownState;

  0005e	8a 87 81 09 00
	00		 mov	 al, BYTE PTR [edi+2433]
  00064	88 86 81 09 00
	00		 mov	 BYTE PTR [esi+2433], al
  0006a	5f		 pop	 edi

; 23   : }

  0006b	8b c6		 mov	 eax, esi
  0006d	5e		 pop	 esi
  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
??0ioRangeProtectionBuff@@QAE@ABV0@@Z ENDP		; ioRangeProtectionBuff::ioRangeProtectionBuff
_TEXT	ENDS
PUBLIC	??1ioRangeProtectionBuff@@UAE@XZ		; ioRangeProtectionBuff::~ioRangeProtectionBuff
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
; Function compile flags: /Ogsp
;	COMDAT ??1ioRangeProtectionBuff@@UAE@XZ
_TEXT	SEGMENT
??1ioRangeProtectionBuff@@UAE@XZ PROC			; ioRangeProtectionBuff::~ioRangeProtectionBuff, COMDAT
; _this$ = ecx

; 26   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioRangeProtectionBuff@@6B@

; 27   : }

  00006	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
??1ioRangeProtectionBuff@@UAE@XZ ENDP			; ioRangeProtectionBuff::~ioRangeProtectionBuff
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioRangeProtectionBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioRangeProtectionBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioRangeProtectionBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioRangeProtectionBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioRangeProtectionBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T525008 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioRangeProtectionBuff@@UAEPAVioBuff@@XZ PROC	; ioRangeProtectionBuff::Clone, COMDAT
; _this$ = ecx

; 43   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioRangeProtectionBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 44   : 	return new ioRangeProtectionBuff( *this );

  0000e	68 84 09 00 00	 push	 2436			; 00000984H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T525008[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioRangeProtectionBuff@@QAE@ABV0@@Z ; ioRangeProtectionBuff::ioRangeProtectionBuff
$LN3@Clone:

; 45   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioRangeProtectionBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T525008[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioRangeProtectionBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioRangeProtectionBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioRangeProtectionBuff@@UAEPAVioBuff@@XZ ENDP	; ioRangeProtectionBuff::Clone
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
EXTRN	?RestoreOutLineChange@ioBaseChar@@QAEXW4ChangeOutLineType@@@Z:PROC ; ioBaseChar::RestoreOutLineChange
; Function compile flags: /Ogsp
;	COMDAT ?EndBuff@ioRangeProtectionBuff@@UAEXXZ
_TEXT	SEGMENT
?EndBuff@ioRangeProtectionBuff@@UAEXXZ PROC		; ioRangeProtectionBuff::EndBuff, COMDAT
; _this$ = ecx

; 161  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 162  : 	if( m_bEnableOutLine )

  00003	80 be 80 09 00
	00 00		 cmp	 BYTE PTR [esi+2432], 0
  0000a	74 0d		 je	 SHORT $LN1@EndBuff

; 163  : 	{
; 164  : 		m_pOwner->RestoreOutLineChange( COT_BUFF_PROTECTION );

  0000c	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00012	6a 01		 push	 1
  00014	e8 00 00 00 00	 call	 ?RestoreOutLineChange@ioBaseChar@@QAEXW4ChangeOutLineType@@@Z ; ioBaseChar::RestoreOutLineChange
$LN1@EndBuff:

; 165  : 	}
; 166  : 
; 167  : 	ioBuff::EndBuff();

  00019	8b ce		 mov	 ecx, esi
  0001b	5e		 pop	 esi
  0001c	e9 00 00 00 00	 jmp	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff
?EndBuff@ioRangeProtectionBuff@@UAEXXZ ENDP		; ioRangeProtectionBuff::EndBuff
_TEXT	ENDS
PUBLIC	?CheckOwnerStateCheck@ioRangeProtectionBuff@@IAEXXZ ; ioRangeProtectionBuff::CheckOwnerStateCheck
EXTRN	?IsApplyDownState@ioBaseChar@@QAE_N_N@Z:PROC	; ioBaseChar::IsApplyDownState
EXTRN	?IsFloatingState@ioBaseChar@@QBE_NXZ:PROC	; ioBaseChar::IsFloatingState
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
; Function compile flags: /Ogsp
;	COMDAT ?CheckOwnerStateCheck@ioRangeProtectionBuff@@IAEXXZ
_TEXT	SEGMENT
?CheckOwnerStateCheck@ioRangeProtectionBuff@@IAEXXZ PROC ; ioRangeProtectionBuff::CheckOwnerStateCheck, COMDAT
; _this$ = ecx

; 224  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 225  : 	if( !m_pOwner ) return;

  00003	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00009	33 d2		 xor	 edx, edx
  0000b	3b ca		 cmp	 ecx, edx
  0000d	74 57		 je	 SHORT $LN1@CheckOwner

; 226  : 
; 227  : 	CharState eState = m_pOwner->GetState();

  0000f	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]

; 228  : 
; 229  : 	if( m_bDisableDownState )

  00015	38 96 81 09 00
	00		 cmp	 BYTE PTR [esi+2433], dl
  0001b	74 49		 je	 SHORT $LN1@CheckOwner

; 230  : 	{
; 231  : 		if( eState == CS_FROZEN && m_pOwner->GetBlowFrozenState() )

  0001d	3c 17		 cmp	 al, 23			; 00000017H
  0001f	75 10		 jne	 SHORT $LN13@CheckOwner
  00021	38 91 c5 15 00
	00		 cmp	 BYTE PTR [ecx+5573], dl
$LN29@CheckOwner:
  00027	74 3d		 je	 SHORT $LN1@CheckOwner
$LN28@CheckOwner:

; 232  : 			SetReserveEndBuff();

  00029	8b ce		 mov	 ecx, esi
  0002b	5e		 pop	 esi
  0002c	e9 00 00 00 00	 jmp	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff
$LN13@CheckOwner:

; 233  : 		else if( eState == CS_BLOW_WOUNDED && !m_pOwner->IsFloatingState() )

  00031	3c 0c		 cmp	 al, 12			; 0000000cH
  00033	75 0b		 jne	 SHORT $LN11@CheckOwner
$LN31@CheckOwner:
  00035	e8 00 00 00 00	 call	 ?IsFloatingState@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsFloatingState
  0003a	84 c0		 test	 al, al
  0003c	75 28		 jne	 SHORT $LN1@CheckOwner

; 234  : 			SetReserveEndBuff();

  0003e	eb e9		 jmp	 SHORT $LN28@CheckOwner
$LN11@CheckOwner:

; 235  : 		else if( eState == CS_BOUND_BLOW_WOUNDED && !m_pOwner->IsFloatingState() )

  00040	3c 31		 cmp	 al, 49			; 00000031H

; 236  : 			SetReserveEndBuff();

  00042	74 f1		 je	 SHORT $LN31@CheckOwner

; 237  : 		else if( eState == CS_ETC_STATE && m_pOwner->IsApplyDownState(false) )

  00044	3c 0f		 cmp	 al, 15			; 0000000fH
  00046	75 0a		 jne	 SHORT $LN7@CheckOwner
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 ?IsApplyDownState@ioBaseChar@@QAE_N_N@Z ; ioBaseChar::IsApplyDownState
  0004e	84 c0		 test	 al, al

; 238  : 			SetReserveEndBuff();

  00050	eb d5		 jmp	 SHORT $LN29@CheckOwner
$LN7@CheckOwner:

; 239  : 		else if( eState == CS_STOP_MOTION && m_pOwner->GetBlowStopMotionState() )

  00052	3c 26		 cmp	 al, 38			; 00000026H
  00054	75 08		 jne	 SHORT $LN5@CheckOwner
$LN30@CheckOwner:
  00056	38 91 c7 15 00
	00		 cmp	 BYTE PTR [ecx+5575], dl

; 240  : 			SetReserveEndBuff();

  0005c	eb c9		 jmp	 SHORT $LN29@CheckOwner
$LN5@CheckOwner:

; 241  : 		else if( eState == CS_DROP_ZONE_DOWN )

  0005e	3c 10		 cmp	 al, 16			; 00000010H

; 242  : 			SetReserveEndBuff();

  00060	74 c7		 je	 SHORT $LN28@CheckOwner

; 243  : 		else if( eState == CS_ICE_STATE && m_pOwner->GetBlowStopMotionState() )

  00062	3c 3b		 cmp	 al, 59			; 0000003bH

; 244  : 			SetReserveEndBuff();

  00064	74 f0		 je	 SHORT $LN30@CheckOwner
$LN1@CheckOwner:
  00066	5e		 pop	 esi

; 245  : 	}
; 246  : }

  00067	c3		 ret	 0
?CheckOwnerStateCheck@ioRangeProtectionBuff@@IAEXXZ ENDP ; ioRangeProtectionBuff::CheckOwnerStateCheck
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetTypeID@ioBuff@@QBEHXZ			; ioBuff::GetTypeID
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
;	COMDAT ?GetTypeID@ioBuff@@QBEHXZ
_TEXT	SEGMENT
?GetTypeID@ioBuff@@QBEHXZ PROC				; ioBuff::GetTypeID, COMDAT
; _this$ = ecx

; 424  : 	inline int GetTypeID() const { return m_iBuffType; }

  00000	8b 81 cc 03 00
	00		 mov	 eax, DWORD PTR [ecx+972]
  00006	c3		 ret	 0
?GetTypeID@ioBuff@@QBEHXZ ENDP				; ioBuff::GetTypeID
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z	; CEncrypt<unsigned long>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z PROC	; CEncrypt<unsigned long>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ENDP	; CEncrypt<unsigned long>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z	; CEncrypt<unsigned long>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z PROC	; CEncrypt<unsigned long>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1256 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1257 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1258 : 		*value = *((DWORD*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 1259 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ENDP	; CEncrypt<unsigned long>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z	; CEncrypt<bool>::EncryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z PROC	; CEncrypt<bool>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal@2
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal@2:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ENDP	; CEncrypt<bool>::EncryptValueToPool
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioRangeProtectionBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioRangeProtectionBuff@@UAEPAXI@Z PROC		; ioRangeProtectionBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioRangeProtectionBuff@@6B@
  0000c	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 07		 je	 SHORT $LN1@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	59		 pop	 ecx
$LN1@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??_GioRangeProtectionBuff@@UAEPAXI@Z ENDP		; ioRangeProtectionBuff::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?CheckCallingAreaWeapon@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingAreaWeapon
EXTRN	?ProcessBuff@ioBuff@@UAEXM@Z:PROC		; ioBuff::ProcessBuff
EXTRN	?CheckCallingProcess@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingProcess
EXTRN	?CheckSwitchType@ioBuff@@IAE_NM@Z:PROC		; ioBuff::CheckSwitchType
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iorangeprotectionbuff.cpp
;	COMDAT ?ProcessBuff@ioRangeProtectionBuff@@UAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioRangeProtectionBuff@@UAEXM@Z PROC	; ioRangeProtectionBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 172  : 	CheckOwnerStateCheck();

  00006	e8 00 00 00 00	 call	 ?CheckOwnerStateCheck@ioRangeProtectionBuff@@IAEXXZ ; ioRangeProtectionBuff::CheckOwnerStateCheck

; 173  : 
; 174  : 	switch( m_iOperationType )

  0000b	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  00011	83 e8 00	 sub	 eax, 0
  00014	74 57		 je	 SHORT $LN1@ProcessBuf
  00016	48		 dec	 eax
  00017	74 40		 je	 SHORT $LN2@ProcessBuf
  00019	48		 dec	 eax
  0001a	74 17		 je	 SHORT $LN5@ProcessBuf
  0001c	48		 dec	 eax
  0001d	75 55		 jne	 SHORT $LN6@ProcessBuf

; 185  : 	case OT_DELAY:
; 186  : 		ProcessDelay( fTimePerSec );

  0001f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00024	8b 06		 mov	 eax, DWORD PTR [esi]
  00026	51		 push	 ecx
  00027	8b ce		 mov	 ecx, esi
  00029	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002e	ff 50 38	 call	 DWORD PTR [eax+56]

; 187  : 		break;

  00031	eb 41		 jmp	 SHORT $LN6@ProcessBuf
$LN5@ProcessBuf:

; 175  : 	{
; 176  : 	case OT_SWITCH:
; 177  : 		if( !CheckSwitchType( fTimePerSec ) )

  00033	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00038	51		 push	 ecx
  00039	8b ce		 mov	 ecx, esi
  0003b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00040	e8 00 00 00 00	 call	 ?CheckSwitchType@ioBuff@@IAE_NM@Z ; ioBuff::CheckSwitchType

; 178  : 		{
; 179  : 			SetReserveEndBuff();

  00045	8b ce		 mov	 ecx, esi
  00047	84 c0		 test	 al, al
  00049	75 07		 jne	 SHORT $LN4@ProcessBuf
  0004b	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 180  : 			return;

  00050	eb 22		 jmp	 SHORT $LN6@ProcessBuf
$LN4@ProcessBuf:

; 181  : 		}
; 182  : 
; 183  : 		CheckCallingProcess();

  00052	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 184  : 		break;

  00057	eb 1b		 jmp	 SHORT $LN6@ProcessBuf
$LN2@ProcessBuf:

; 188  : 	case OT_ACTIVE:
; 189  : 		ioBuff::ProcessBuff( fTimePerSec );

  00059	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  0005e	51		 push	 ecx
  0005f	8b ce		 mov	 ecx, esi
  00061	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00066	e8 00 00 00 00	 call	 ?ProcessBuff@ioBuff@@UAEXM@Z ; ioBuff::ProcessBuff

; 190  : 		break;

  0006b	eb 07		 jmp	 SHORT $LN6@ProcessBuf
$LN1@ProcessBuf:

; 191  : 	case OT_PASSIVE:
; 192  : 		CheckCallingAreaWeapon();

  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?CheckCallingAreaWeapon@ioBuff@@IAEXXZ ; ioBuff::CheckCallingAreaWeapon
$LN6@ProcessBuf:
  00074	5e		 pop	 esi

; 193  : 		break;
; 194  : 	}
; 195  : }

  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
?ProcessBuff@ioRangeProtectionBuff@@UAEXM@Z ENDP	; ioRangeProtectionBuff::ProcessBuff
_TEXT	ENDS
PUBLIC	??G?$CEncrypt@K@@QAEKABK@Z			; CEncrypt<unsigned long>::operator-
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??G?$CEncrypt@K@@QAEKABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??G?$CEncrypt@K@@QAEKABK@Z PROC				; CEncrypt<unsigned long>::operator-, COMDAT
; _this$ = ecx

; 1274 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1275 : 		
; 1276 : 		type value;
; 1277 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1278 : #ifdef _NOTUSE
; 1279 : 		Debug();
; 1280 : #endif
; 1281 : 		return value - inValue;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _inValue$[ebp]
  00013	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1282 : 	}

  00015	c9		 leave
  00016	c2 04 00	 ret	 4
??G?$CEncrypt@K@@QAEKABK@Z ENDP				; CEncrypt<unsigned long>::operator-
_TEXT	ENDS
PUBLIC	??H?$CEncrypt@K@@QAEKABK@Z			; CEncrypt<unsigned long>::operator+
; Function compile flags: /Ogsp
;	COMDAT ??H?$CEncrypt@K@@QAEKABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??H?$CEncrypt@K@@QAEKABK@Z PROC				; CEncrypt<unsigned long>::operator+, COMDAT
; _this$ = ecx

; 1285 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1286 : 		type value;
; 1287 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1288 : #ifdef _NOTUSE
; 1289 : 		Debug();
; 1290 : #endif
; 1291 : 		return value + inValue;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	03 45 fc	 add	 eax, DWORD PTR _value$[ebp]

; 1292 : 	}

  00015	c9		 leave
  00016	c2 04 00	 ret	 4
??H?$CEncrypt@K@@QAEKABK@Z ENDP				; CEncrypt<unsigned long>::operator+
_TEXT	ENDS
PUBLIC	??Y?$CEncrypt@K@@QAEAAKABK@Z			; CEncrypt<unsigned long>::operator+=
; Function compile flags: /Ogsp
;	COMDAT ??Y?$CEncrypt@K@@QAEAAKABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??Y?$CEncrypt@K@@QAEAAKABK@Z PROC			; CEncrypt<unsigned long>::operator+=, COMDAT
; _this$ = ecx

; 1325 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 1326 : 		type value;
; 1327 : 		DecryptValueToPool(&value);

  00005	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00008	50		 push	 eax
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1328 : 		value += inValue;

  00010	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00013	8b 00		 mov	 eax, DWORD PTR [eax]
  00015	01 45 fc	 add	 DWORD PTR _value$[ebp], eax

; 1329 : 		EncryptValueToPool((char*)&value);

  00018	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  0001b	50		 push	 eax
  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 1330 : #ifdef _NOTUSE
; 1331 : 		m_value += inValue;
; 1332 : 		Debug();
; 1333 : #endif
; 1334 : 		return value;

  00023	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00026	5e		 pop	 esi

; 1335 : 	} 

  00027	c9		 leave
  00028	c2 04 00	 ret	 4
??Y?$CEncrypt@K@@QAEAAKABK@Z ENDP			; CEncrypt<unsigned long>::operator+=
_TEXT	ENDS
PUBLIC	??M?$CEncrypt@K@@QAE_NABK@Z			; CEncrypt<unsigned long>::operator<
; Function compile flags: /Ogsp
;	COMDAT ??M?$CEncrypt@K@@QAE_NABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??M?$CEncrypt@K@@QAE_NABK@Z PROC			; CEncrypt<unsigned long>::operator<, COMDAT
; _this$ = ecx

; 1401 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1402 : 		type value;
; 1403 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1404 : #ifdef _NOTUSE
; 1405 : 		Debug();
; 1406 : #endif
; 1407 : 		return (value < inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _value$[ebp]
  00013	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00015	1b c0		 sbb	 eax, eax
  00017	f7 d8		 neg	 eax

; 1408 : 	} 

  00019	c9		 leave
  0001a	c2 04 00	 ret	 4
??M?$CEncrypt@K@@QAE_NABK@Z ENDP			; CEncrypt<unsigned long>::operator<
_TEXT	ENDS
PUBLIC	??N?$CEncrypt@K@@QAE_NABK@Z			; CEncrypt<unsigned long>::operator<=
; Function compile flags: /Ogsp
;	COMDAT ??N?$CEncrypt@K@@QAE_NABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??N?$CEncrypt@K@@QAE_NABK@Z PROC			; CEncrypt<unsigned long>::operator<=, COMDAT
; _this$ = ecx

; 1431 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1432 : 		
; 1433 : 		type value;
; 1434 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1435 : #ifdef _NOTUSE
; 1436 : 		Debug();
; 1437 : #endif
; 1438 : 		return (value <= inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	3b 45 fc	 cmp	 eax, DWORD PTR _value$[ebp]
  00015	1b c0		 sbb	 eax, eax
  00017	40		 inc	 eax

; 1439 : 	}		

  00018	c9		 leave
  00019	c2 04 00	 ret	 4
??N?$CEncrypt@K@@QAE_NABK@Z ENDP			; CEncrypt<unsigned long>::operator<=
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0P@@ioINILoader@@QAE_NAAY0P@$$CBD_N@Z ; ioINILoader::LoadBool_e<15>
EXTRN	__imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadBool_e@$0P@@ioINILoader@@QAE_NAAY0P@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0P@@ioINILoader@@QAE_NAAY0P@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<15>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 75 01 00
	00		 je	 $LN96@LoadBool_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 5e 01 00
	00		 je	 $LN95@LoadBool_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 46 01 00
	00		 je	 $LN94@LoadBool_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 2f 01 00
	00		 je	 $LN93@LoadBool_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 18 01 00
	00		 je	 $LN92@LoadBool_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 02 01 00
	00		 je	 $LN91@LoadBool_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 ec 00 00
	00		 je	 $LN90@LoadBool_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 d5 00 00
	00		 je	 $LN89@LoadBool_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 be 00 00
	00		 je	 $LN88@LoadBool_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 a8 00 00
	00		 je	 $LN87@LoadBool_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 92 00 00
	00		 je	 $LN86@LoadBool_e
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 7f		 je	 SHORT $LN85@LoadBool_e
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 6c		 je	 SHORT $LN84@LoadBool_e
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000e9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000ec	84 d2		 test	 dl, dl
  000ee	74 5a		 je	 SHORT $LN83@LoadBool_e
  000f0	32 d1		 xor	 dl, cl
  000f2	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000f6	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000f9	0f 84 9a 00 00
	00		 je	 $LN1@LoadBool_e
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 3e		 je	 SHORT $LN81@LoadBool_e
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 2b		 je	 SHORT $LN80@LoadBool_e
  00113	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00116	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00119	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0011c	84 d2		 test	 dl, dl
  0011e	74 19		 je	 SHORT $LN79@LoadBool_e
  00120	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  00123	32 d1		 xor	 dl, cl
  00125	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00128	84 c0		 test	 al, al
  0012a	74 07		 je	 SHORT $LN78@LoadBool_e
  0012c	34 eb		 xor	 al, -21			; ffffffebH
  0012e	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00131	eb 66		 jmp	 SHORT $LN1@LoadBool_e
$LN78@LoadBool_e:
  00133	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00137	eb 60		 jmp	 SHORT $LN1@LoadBool_e
$LN79@LoadBool_e:
  00139	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  0013c	eb 5b		 jmp	 SHORT $LN1@LoadBool_e
$LN80@LoadBool_e:
  0013e	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00142	eb 55		 jmp	 SHORT $LN1@LoadBool_e
$LN81@LoadBool_e:
  00144	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00148	eb 4f		 jmp	 SHORT $LN1@LoadBool_e
$LN83@LoadBool_e:
  0014a	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0014d	eb 4a		 jmp	 SHORT $LN1@LoadBool_e
$LN84@LoadBool_e:
  0014f	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00153	eb 44		 jmp	 SHORT $LN1@LoadBool_e
$LN85@LoadBool_e:
  00155	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00159	eb 3e		 jmp	 SHORT $LN1@LoadBool_e
$LN86@LoadBool_e:
  0015b	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0015f	eb 38		 jmp	 SHORT $LN1@LoadBool_e
$LN87@LoadBool_e:
  00161	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  00164	eb 33		 jmp	 SHORT $LN1@LoadBool_e
$LN88@LoadBool_e:
  00166	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0016a	eb 2d		 jmp	 SHORT $LN1@LoadBool_e
$LN89@LoadBool_e:
  0016c	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00170	eb 27		 jmp	 SHORT $LN1@LoadBool_e
$LN90@LoadBool_e:
  00172	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00176	eb 21		 jmp	 SHORT $LN1@LoadBool_e
$LN91@LoadBool_e:
  00178	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  0017b	eb 1c		 jmp	 SHORT $LN1@LoadBool_e
$LN92@LoadBool_e:
  0017d	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00181	eb 16		 jmp	 SHORT $LN1@LoadBool_e
$LN93@LoadBool_e:
  00183	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00187	eb 10		 jmp	 SHORT $LN1@LoadBool_e
$LN94@LoadBool_e:
  00189	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0018d	eb 0a		 jmp	 SHORT $LN1@LoadBool_e
$LN95@LoadBool_e:
  0018f	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00193	eb 04		 jmp	 SHORT $LN1@LoadBool_e
$LN96@LoadBool_e:
  00195	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e:
  00199	6a 03		 push	 3
  0019b	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0019e	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001a2	5a		 pop	 edx
$LL104@LoadBool_e:
  001a3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a9	83 c0 04	 add	 eax, 4
  001ac	4a		 dec	 edx
  001ad	75 f4		 jne	 SHORT $LL104@LoadBool_e
  001af	6a 0c		 push	 12			; 0000000cH
  001b1	58		 pop	 eax
$LL101@LoadBool_e:
  001b2	8b c8		 mov	 ecx, eax
  001b4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001ba	79 05		 jns	 SHORT $LN111@LoadBool_e
  001bc	49		 dec	 ecx
  001bd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c0	41		 inc	 ecx
$LN111@LoadBool_e:
  001c1	b2 ed		 mov	 dl, -19			; ffffffedH
  001c3	2a d1		 sub	 dl, cl
  001c5	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001c9	40		 inc	 eax
  001ca	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001cd	7c e3		 jl	 SHORT $LL101@LoadBool_e

; 103  : 		return LoadBool(_k, b);

  001cf	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  001d2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001d5	50		 push	 eax
  001d6	8b ce		 mov	 ecx, esi
  001d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  001de	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e1	33 cd		 xor	 ecx, ebp
  001e3	5e		 pop	 esi
  001e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e9	c9		 leave
  001ea	c2 08 00	 ret	 8
??$LoadBool_e@$0P@@ioINILoader@@QAE_NAAY0P@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<15>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BC@@ioINILoader@@QAEMAAY0BC@$$CBDM@Z ; ioINILoader::LoadFloat_e<18>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BC@@ioINILoader@@QAEMAAY0BC@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 18
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BC@@ioINILoader@@QAEMAAY0BC@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<18>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 be 01 00
	00		 je	 $LN96@LoadFloat_
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 a7 01 00
	00		 je	 $LN95@LoadFloat_
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 90 01 00
	00		 je	 $LN94@LoadFloat_
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 78 01 00
	00		 je	 $LN93@LoadFloat_
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 61 01 00
	00		 je	 $LN92@LoadFloat_
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 4a 01 00
	00		 je	 $LN91@LoadFloat_
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 34 01 00
	00		 je	 $LN90@LoadFloat_
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 1e 01 00
	00		 je	 $LN89@LoadFloat_
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 07 01 00
	00		 je	 $LN88@LoadFloat_
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 f0 00 00
	00		 je	 $LN87@LoadFloat_
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 da 00 00
	00		 je	 $LN86@LoadFloat_
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 c4 00 00
	00		 je	 $LN85@LoadFloat_
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 ad 00 00
	00		 je	 $LN84@LoadFloat_
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 96 00 00
	00		 je	 $LN83@LoadFloat_
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 80 00 00
	00		 je	 $LN82@LoadFloat_
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 6e		 je	 SHORT $LN81@LoadFloat_
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 5b		 je	 SHORT $LN80@LoadFloat_
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  0012d	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00130	0f 84 ac 00 00
	00		 je	 $LN1@LoadFloat_
  00136	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00139	84 d2		 test	 dl, dl
  0013b	74 3f		 je	 SHORT $LN78@LoadFloat_
  0013d	32 d1		 xor	 dl, cl
  0013f	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 2d		 je	 SHORT $LN77@LoadFloat_
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 1a		 je	 SHORT $LN76@LoadFloat_
  00156	8a 40 15	 mov	 al, BYTE PTR [eax+21]
  00159	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0015c	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015f	84 c0		 test	 al, al
  00161	74 07		 je	 SHORT $LN75@LoadFloat_
  00163	34 ec		 xor	 al, -20			; ffffffecH
  00165	88 45 f9	 mov	 BYTE PTR __k$[ebp+21], al
  00168	eb 78		 jmp	 SHORT $LN1@LoadFloat_
$LN75@LoadFloat_:
  0016a	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  0016e	eb 72		 jmp	 SHORT $LN1@LoadFloat_
$LN76@LoadFloat_:
  00170	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00174	eb 6c		 jmp	 SHORT $LN1@LoadFloat_
$LN77@LoadFloat_:
  00176	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0017a	eb 66		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  0017c	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  0017f	eb 61		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  00181	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00185	eb 5b		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  00187	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0018b	eb 55		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  0018d	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  00190	eb 50		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  00192	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00196	eb 4a		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  00198	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0019c	eb 44		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  0019e	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001a2	eb 3e		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  001a4	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001a7	eb 39		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  001a9	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  001ad	eb 33		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  001af	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001b3	eb 2d		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  001b5	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001b9	eb 27		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  001bb	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001be	eb 22		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  001c0	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  001c4	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  001c6	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001ca	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  001cc	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001d0	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  001d2	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001d6	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  001d8	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001dc	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  001de	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  001e2	6a 04		 push	 4
  001e4	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001e7	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+17], 0
  001eb	5a		 pop	 edx
$LL104@LoadFloat_:
  001ec	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001f2	83 c0 04	 add	 eax, 4
  001f5	4a		 dec	 edx
  001f6	75 f4		 jne	 SHORT $LL104@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  001f8	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001fd	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00201	51		 push	 ecx
  00202	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00205	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020a	50		 push	 eax
  0020b	8b ce		 mov	 ecx, esi
  0020d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00213	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00216	33 cd		 xor	 ecx, ebp
  00218	5e		 pop	 esi
  00219	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0021e	c9		 leave
  0021f	c2 08 00	 ret	 8
??$LoadFloat_e@$0BC@@ioINILoader@@QAEMAAY0BC@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<18>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BE@@ioINILoader@@QAEMAAY0BE@$$CBDM@Z ; ioINILoader::LoadFloat_e<20>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BE@@ioINILoader@@QAEMAAY0BE@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BE@@ioINILoader@@QAEMAAY0BE@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<20>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 dd 01 00
	00		 je	 $LN96@LoadFloat_@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 c6 01 00
	00		 je	 $LN95@LoadFloat_@2
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 ae 01 00
	00		 je	 $LN94@LoadFloat_@2
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 96 01 00
	00		 je	 $LN93@LoadFloat_@2
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 7f 01 00
	00		 je	 $LN92@LoadFloat_@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 69 01 00
	00		 je	 $LN91@LoadFloat_@2
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 54 01 00
	00		 je	 $LN90@LoadFloat_@2
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 3e 01 00
	00		 je	 $LN89@LoadFloat_@2
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 27 01 00
	00		 je	 $LN88@LoadFloat_@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 11 01 00
	00		 je	 $LN87@LoadFloat_@2
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 fc 00 00
	00		 je	 $LN86@LoadFloat_@2
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 e6 00 00
	00		 je	 $LN85@LoadFloat_@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 cf 00 00
	00		 je	 $LN84@LoadFloat_@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 b9 00 00
	00		 je	 $LN83@LoadFloat_@2
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 a4 00 00
	00		 je	 $LN82@LoadFloat_@2
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 8e 00 00
	00		 je	 $LN81@LoadFloat_@2
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	74 7b		 je	 SHORT $LN80@LoadFloat_@2
  00129	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0012c	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012f	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00132	84 d2		 test	 dl, dl
  00134	74 69		 je	 SHORT $LN79@LoadFloat_@2
  00136	32 d3		 xor	 dl, bl
  00138	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013b	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0013e	84 d2		 test	 dl, dl
  00140	74 58		 je	 SHORT $LN78@LoadFloat_@2
  00142	32 d1		 xor	 dl, cl
  00144	80 78 13 00	 cmp	 BYTE PTR [eax+19], 0
  00148	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0014b	0f 84 b1 00 00
	00		 je	 $LN1@LoadFloat_@2
  00151	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00154	84 d2		 test	 dl, dl
  00156	74 3c		 je	 SHORT $LN76@LoadFloat_@2
  00158	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0015b	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015e	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00161	84 d2		 test	 dl, dl
  00163	74 2a		 je	 SHORT $LN75@LoadFloat_@2
  00165	32 d3		 xor	 dl, bl
  00167	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016a	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0016d	84 d2		 test	 dl, dl
  0016f	74 19		 je	 SHORT $LN74@LoadFloat_@2
  00171	8a 40 17	 mov	 al, BYTE PTR [eax+23]
  00174	32 d1		 xor	 dl, cl
  00176	88 55 fa	 mov	 BYTE PTR __k$[ebp+22], dl
  00179	84 c0		 test	 al, al
  0017b	74 07		 je	 SHORT $LN73@LoadFloat_@2
  0017d	34 ea		 xor	 al, -22			; ffffffeaH
  0017f	88 45 fb	 mov	 BYTE PTR __k$[ebp+23], al
  00182	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN73@LoadFloat_@2:
  00184	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00188	eb 78		 jmp	 SHORT $LN1@LoadFloat_@2
$LN74@LoadFloat_@2:
  0018a	88 4d fa	 mov	 BYTE PTR __k$[ebp+22], cl
  0018d	eb 73		 jmp	 SHORT $LN1@LoadFloat_@2
$LN75@LoadFloat_@2:
  0018f	88 5d f9	 mov	 BYTE PTR __k$[ebp+21], bl
  00192	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN76@LoadFloat_@2:
  00194	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00198	eb 68		 jmp	 SHORT $LN1@LoadFloat_@2
$LN78@LoadFloat_@2:
  0019a	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  0019d	eb 63		 jmp	 SHORT $LN1@LoadFloat_@2
$LN79@LoadFloat_@2:
  0019f	88 5d f5	 mov	 BYTE PTR __k$[ebp+17], bl
  001a2	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN80@LoadFloat_@2:
  001a4	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001a8	eb 58		 jmp	 SHORT $LN1@LoadFloat_@2
$LN81@LoadFloat_@2:
  001aa	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001ae	eb 52		 jmp	 SHORT $LN1@LoadFloat_@2
$LN82@LoadFloat_@2:
  001b0	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  001b3	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@2
$LN83@LoadFloat_@2:
  001b5	88 5d f1	 mov	 BYTE PTR __k$[ebp+13], bl
  001b8	eb 48		 jmp	 SHORT $LN1@LoadFloat_@2
$LN84@LoadFloat_@2:
  001ba	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001be	eb 42		 jmp	 SHORT $LN1@LoadFloat_@2
$LN85@LoadFloat_@2:
  001c0	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001c4	eb 3c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN86@LoadFloat_@2:
  001c6	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001c9	eb 37		 jmp	 SHORT $LN1@LoadFloat_@2
$LN87@LoadFloat_@2:
  001cb	88 5d ed	 mov	 BYTE PTR __k$[ebp+9], bl
  001ce	eb 32		 jmp	 SHORT $LN1@LoadFloat_@2
$LN88@LoadFloat_@2:
  001d0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001d4	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN89@LoadFloat_@2:
  001d6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001da	eb 26		 jmp	 SHORT $LN1@LoadFloat_@2
$LN90@LoadFloat_@2:
  001dc	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001df	eb 21		 jmp	 SHORT $LN1@LoadFloat_@2
$LN91@LoadFloat_@2:
  001e1	88 5d e9	 mov	 BYTE PTR __k$[ebp+5], bl
  001e4	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN92@LoadFloat_@2:
  001e6	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001ea	eb 16		 jmp	 SHORT $LN1@LoadFloat_@2
$LN93@LoadFloat_@2:
  001ec	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001f0	eb 10		 jmp	 SHORT $LN1@LoadFloat_@2
$LN94@LoadFloat_@2:
  001f2	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001f6	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN95@LoadFloat_@2:
  001f8	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001fc	eb 04		 jmp	 SHORT $LN1@LoadFloat_@2
$LN96@LoadFloat_@2:
  001fe	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@2:
  00202	6a 04		 push	 4
  00204	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00207	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+19], 0
  0020b	5a		 pop	 edx
$LL104@LoadFloat_@2:
  0020c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00212	83 c0 04	 add	 eax, 4
  00215	4a		 dec	 edx
  00216	75 f4		 jne	 SHORT $LL104@LoadFloat_@2
  00218	6a 10		 push	 16			; 00000010H
  0021a	58		 pop	 eax
$LL101@LoadFloat_@2:
  0021b	8b c8		 mov	 ecx, eax
  0021d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00223	79 05		 jns	 SHORT $LN111@LoadFloat_@2
  00225	49		 dec	 ecx
  00226	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00229	41		 inc	 ecx
$LN111@LoadFloat_@2:
  0022a	b2 ed		 mov	 dl, -19			; ffffffedH
  0022c	2a d1		 sub	 dl, cl
  0022e	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00232	40		 inc	 eax
  00233	83 f8 13	 cmp	 eax, 19			; 00000013H
  00236	7c e3		 jl	 SHORT $LL101@LoadFloat_@2

; 137  : 		return LoadFloat(_k, f);

  00238	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0023d	51		 push	 ecx
  0023e	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00241	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00246	50		 push	 eax
  00247	8b ce		 mov	 ecx, esi
  00249	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0024f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00252	5e		 pop	 esi
  00253	33 cd		 xor	 ecx, ebp
  00255	5b		 pop	 ebx
  00256	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025b	c9		 leave
  0025c	c2 08 00	 ret	 8
??$LoadFloat_e@$0BE@@ioINILoader@@QAEMAAY0BE@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<20>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BD@@ioINILoader@@QAEMAAY0BD@$$CBDM@Z ; ioINILoader::LoadFloat_e<19>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BD@@ioINILoader@@QAEMAAY0BD@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BD@@ioINILoader@@QAEMAAY0BD@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<19>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 cf 01 00
	00		 je	 $LN96@LoadFloat_@3
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 b8 01 00
	00		 je	 $LN95@LoadFloat_@3
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 a0 01 00
	00		 je	 $LN94@LoadFloat_@3
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 89 01 00
	00		 je	 $LN93@LoadFloat_@3
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 72 01 00
	00		 je	 $LN92@LoadFloat_@3
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 5c 01 00
	00		 je	 $LN91@LoadFloat_@3
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 46 01 00
	00		 je	 $LN90@LoadFloat_@3
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 2f 01 00
	00		 je	 $LN89@LoadFloat_@3
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 18 01 00
	00		 je	 $LN88@LoadFloat_@3
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 02 01 00
	00		 je	 $LN87@LoadFloat_@3
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 ec 00 00
	00		 je	 $LN86@LoadFloat_@3
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 d5 00 00
	00		 je	 $LN85@LoadFloat_@3
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 be 00 00
	00		 je	 $LN84@LoadFloat_@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 a8 00 00
	00		 je	 $LN83@LoadFloat_@3
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 92 00 00
	00		 je	 $LN82@LoadFloat_@3
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 7f		 je	 SHORT $LN81@LoadFloat_@3
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 6c		 je	 SHORT $LN80@LoadFloat_@3
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012c	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0012f	84 d2		 test	 dl, dl
  00131	74 5a		 je	 SHORT $LN79@LoadFloat_@3
  00133	32 d1		 xor	 dl, cl
  00135	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00139	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013c	0f 84 b1 00 00
	00		 je	 $LN1@LoadFloat_@3
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 3e		 je	 SHORT $LN77@LoadFloat_@3
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 2b		 je	 SHORT $LN76@LoadFloat_@3
  00156	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00159	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0015f	84 d2		 test	 dl, dl
  00161	74 19		 je	 SHORT $LN75@LoadFloat_@3
  00163	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  00166	32 d1		 xor	 dl, cl
  00168	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016b	84 c0		 test	 al, al
  0016d	74 07		 je	 SHORT $LN74@LoadFloat_@3
  0016f	34 eb		 xor	 al, -21			; ffffffebH
  00171	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  00174	eb 7d		 jmp	 SHORT $LN1@LoadFloat_@3
$LN74@LoadFloat_@3:
  00176	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0017a	eb 77		 jmp	 SHORT $LN1@LoadFloat_@3
$LN75@LoadFloat_@3:
  0017c	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  0017f	eb 72		 jmp	 SHORT $LN1@LoadFloat_@3
$LN76@LoadFloat_@3:
  00181	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00185	eb 6c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN77@LoadFloat_@3:
  00187	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0018b	eb 66		 jmp	 SHORT $LN1@LoadFloat_@3
$LN79@LoadFloat_@3:
  0018d	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00190	eb 61		 jmp	 SHORT $LN1@LoadFloat_@3
$LN80@LoadFloat_@3:
  00192	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00196	eb 5b		 jmp	 SHORT $LN1@LoadFloat_@3
$LN81@LoadFloat_@3:
  00198	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0019c	eb 55		 jmp	 SHORT $LN1@LoadFloat_@3
$LN82@LoadFloat_@3:
  0019e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001a2	eb 4f		 jmp	 SHORT $LN1@LoadFloat_@3
$LN83@LoadFloat_@3:
  001a4	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001a7	eb 4a		 jmp	 SHORT $LN1@LoadFloat_@3
$LN84@LoadFloat_@3:
  001a9	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001ad	eb 44		 jmp	 SHORT $LN1@LoadFloat_@3
$LN85@LoadFloat_@3:
  001af	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001b3	eb 3e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN86@LoadFloat_@3:
  001b5	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001b9	eb 38		 jmp	 SHORT $LN1@LoadFloat_@3
$LN87@LoadFloat_@3:
  001bb	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001be	eb 33		 jmp	 SHORT $LN1@LoadFloat_@3
$LN88@LoadFloat_@3:
  001c0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001c4	eb 2d		 jmp	 SHORT $LN1@LoadFloat_@3
$LN89@LoadFloat_@3:
  001c6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001ca	eb 27		 jmp	 SHORT $LN1@LoadFloat_@3
$LN90@LoadFloat_@3:
  001cc	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d0	eb 21		 jmp	 SHORT $LN1@LoadFloat_@3
$LN91@LoadFloat_@3:
  001d2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001d5	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN92@LoadFloat_@3:
  001d7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001db	eb 16		 jmp	 SHORT $LN1@LoadFloat_@3
$LN93@LoadFloat_@3:
  001dd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e1	eb 10		 jmp	 SHORT $LN1@LoadFloat_@3
$LN94@LoadFloat_@3:
  001e3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001e7	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@3
$LN95@LoadFloat_@3:
  001e9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001ed	eb 04		 jmp	 SHORT $LN1@LoadFloat_@3
$LN96@LoadFloat_@3:
  001ef	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@3:
  001f3	6a 04		 push	 4
  001f5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f8	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  001fc	5a		 pop	 edx
$LL104@LoadFloat_@3:
  001fd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00203	83 c0 04	 add	 eax, 4
  00206	4a		 dec	 edx
  00207	75 f4		 jne	 SHORT $LL104@LoadFloat_@3
  00209	6a 10		 push	 16			; 00000010H
  0020b	58		 pop	 eax
$LL101@LoadFloat_@3:
  0020c	8b c8		 mov	 ecx, eax
  0020e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00214	79 05		 jns	 SHORT $LN111@LoadFloat_@3
  00216	49		 dec	 ecx
  00217	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0021a	41		 inc	 ecx
$LN111@LoadFloat_@3:
  0021b	b2 ed		 mov	 dl, -19			; ffffffedH
  0021d	2a d1		 sub	 dl, cl
  0021f	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00223	40		 inc	 eax
  00224	83 f8 12	 cmp	 eax, 18			; 00000012H
  00227	7c e3		 jl	 SHORT $LL101@LoadFloat_@3

; 137  : 		return LoadFloat(_k, f);

  00229	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0022e	51		 push	 ecx
  0022f	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00232	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00237	50		 push	 eax
  00238	8b ce		 mov	 ecx, esi
  0023a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00240	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00243	33 cd		 xor	 ecx, ebp
  00245	5e		 pop	 esi
  00246	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024b	c9		 leave
  0024c	c2 08 00	 ret	 8
??$LoadFloat_e@$0BD@@ioINILoader@@QAEMAAY0BD@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<19>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z ; ioINILoader::LoadBool_e<19>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<19>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 cf 01 00
	00		 je	 $LN96@LoadBool_e@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 b8 01 00
	00		 je	 $LN95@LoadBool_e@2
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 a0 01 00
	00		 je	 $LN94@LoadBool_e@2
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 89 01 00
	00		 je	 $LN93@LoadBool_e@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 72 01 00
	00		 je	 $LN92@LoadBool_e@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 5c 01 00
	00		 je	 $LN91@LoadBool_e@2
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 46 01 00
	00		 je	 $LN90@LoadBool_e@2
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 2f 01 00
	00		 je	 $LN89@LoadBool_e@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 18 01 00
	00		 je	 $LN88@LoadBool_e@2
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 02 01 00
	00		 je	 $LN87@LoadBool_e@2
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 ec 00 00
	00		 je	 $LN86@LoadBool_e@2
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 d5 00 00
	00		 je	 $LN85@LoadBool_e@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 be 00 00
	00		 je	 $LN84@LoadBool_e@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 a8 00 00
	00		 je	 $LN83@LoadBool_e@2
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 92 00 00
	00		 je	 $LN82@LoadBool_e@2
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 7f		 je	 SHORT $LN81@LoadBool_e@2
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 6c		 je	 SHORT $LN80@LoadBool_e@2
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012c	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0012f	84 d2		 test	 dl, dl
  00131	74 5a		 je	 SHORT $LN79@LoadBool_e@2
  00133	32 d1		 xor	 dl, cl
  00135	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00139	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013c	0f 84 b1 00 00
	00		 je	 $LN1@LoadBool_e@2
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 3e		 je	 SHORT $LN77@LoadBool_e@2
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 2b		 je	 SHORT $LN76@LoadBool_e@2
  00156	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00159	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0015f	84 d2		 test	 dl, dl
  00161	74 19		 je	 SHORT $LN75@LoadBool_e@2
  00163	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  00166	32 d1		 xor	 dl, cl
  00168	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016b	84 c0		 test	 al, al
  0016d	74 07		 je	 SHORT $LN74@LoadBool_e@2
  0016f	34 eb		 xor	 al, -21			; ffffffebH
  00171	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  00174	eb 7d		 jmp	 SHORT $LN1@LoadBool_e@2
$LN74@LoadBool_e@2:
  00176	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0017a	eb 77		 jmp	 SHORT $LN1@LoadBool_e@2
$LN75@LoadBool_e@2:
  0017c	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  0017f	eb 72		 jmp	 SHORT $LN1@LoadBool_e@2
$LN76@LoadBool_e@2:
  00181	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00185	eb 6c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN77@LoadBool_e@2:
  00187	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0018b	eb 66		 jmp	 SHORT $LN1@LoadBool_e@2
$LN79@LoadBool_e@2:
  0018d	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00190	eb 61		 jmp	 SHORT $LN1@LoadBool_e@2
$LN80@LoadBool_e@2:
  00192	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00196	eb 5b		 jmp	 SHORT $LN1@LoadBool_e@2
$LN81@LoadBool_e@2:
  00198	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0019c	eb 55		 jmp	 SHORT $LN1@LoadBool_e@2
$LN82@LoadBool_e@2:
  0019e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001a2	eb 4f		 jmp	 SHORT $LN1@LoadBool_e@2
$LN83@LoadBool_e@2:
  001a4	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001a7	eb 4a		 jmp	 SHORT $LN1@LoadBool_e@2
$LN84@LoadBool_e@2:
  001a9	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001ad	eb 44		 jmp	 SHORT $LN1@LoadBool_e@2
$LN85@LoadBool_e@2:
  001af	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001b3	eb 3e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN86@LoadBool_e@2:
  001b5	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001b9	eb 38		 jmp	 SHORT $LN1@LoadBool_e@2
$LN87@LoadBool_e@2:
  001bb	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001be	eb 33		 jmp	 SHORT $LN1@LoadBool_e@2
$LN88@LoadBool_e@2:
  001c0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001c4	eb 2d		 jmp	 SHORT $LN1@LoadBool_e@2
$LN89@LoadBool_e@2:
  001c6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001ca	eb 27		 jmp	 SHORT $LN1@LoadBool_e@2
$LN90@LoadBool_e@2:
  001cc	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d0	eb 21		 jmp	 SHORT $LN1@LoadBool_e@2
$LN91@LoadBool_e@2:
  001d2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001d5	eb 1c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN92@LoadBool_e@2:
  001d7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001db	eb 16		 jmp	 SHORT $LN1@LoadBool_e@2
$LN93@LoadBool_e@2:
  001dd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e1	eb 10		 jmp	 SHORT $LN1@LoadBool_e@2
$LN94@LoadBool_e@2:
  001e3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001e7	eb 0a		 jmp	 SHORT $LN1@LoadBool_e@2
$LN95@LoadBool_e@2:
  001e9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001ed	eb 04		 jmp	 SHORT $LN1@LoadBool_e@2
$LN96@LoadBool_e@2:
  001ef	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e@2:
  001f3	6a 04		 push	 4
  001f5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f8	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  001fc	5a		 pop	 edx
$LL104@LoadBool_e@2:
  001fd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00203	83 c0 04	 add	 eax, 4
  00206	4a		 dec	 edx
  00207	75 f4		 jne	 SHORT $LL104@LoadBool_e@2
  00209	6a 10		 push	 16			; 00000010H
  0020b	58		 pop	 eax
$LL101@LoadBool_e@2:
  0020c	8b c8		 mov	 ecx, eax
  0020e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00214	79 05		 jns	 SHORT $LN111@LoadBool_e@2
  00216	49		 dec	 ecx
  00217	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0021a	41		 inc	 ecx
$LN111@LoadBool_e@2:
  0021b	b2 ed		 mov	 dl, -19			; ffffffedH
  0021d	2a d1		 sub	 dl, cl
  0021f	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00223	40		 inc	 eax
  00224	83 f8 12	 cmp	 eax, 18			; 00000012H
  00227	7c e3		 jl	 SHORT $LL101@LoadBool_e@2

; 103  : 		return LoadBool(_k, b);

  00229	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  0022c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0022f	50		 push	 eax
  00230	8b ce		 mov	 ecx, esi
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  00238	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023b	33 cd		 xor	 ecx, ebp
  0023d	5e		 pop	 esi
  0023e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00243	c9		 leave
  00244	c2 08 00	 ret	 8
??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<19>
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@K@@QAEKK@Z			; CEncrypt<unsigned long>::operator=
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??4?$CEncrypt@K@@QAEKK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@K@@QAEKK@Z PROC				; CEncrypt<unsigned long>::operator=, COMDAT
; _this$ = ecx

; 1262 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1263 : 		
; 1264 : 		type value = inValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 1265 : 		EncryptValueToPool((char*)&value);

  00009	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 1266 : #ifdef _NOTUSE
; 1267 : 		m_value = inValue;
; 1268 : 		Debug();
; 1269 : #endif
; 1270 : 		return value;

  00012	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 1271 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@K@@QAEKK@Z ENDP				; CEncrypt<unsigned long>::operator=
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@_N@@QAE_N_N@Z			; CEncrypt<bool>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@_N@@QAE_N_N@Z
_TEXT	SEGMENT
_inValue$ = 8						; size = 1
_value$ = 11						; size = 1
??4?$CEncrypt@_N@@QAE_N_N@Z PROC			; CEncrypt<bool>::operator=, COMDAT
; _this$ = ecx

; 225  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 226  : 		type value = inValue;

  00003	8a 45 08	 mov	 al, BYTE PTR _inValue$[ebp]
  00006	88 45 0b	 mov	 BYTE PTR _value$[ebp], al

; 227  : 		EncryptValueToPool((char*)&value);

  00009	8d 45 0b	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 228  : #ifdef _NOTUSE
; 229  : 		m_value = inValue;
; 230  : 		Debug();
; 231  : #endif
; 232  : 		return value;

  00012	8a 45 0b	 mov	 al, BYTE PTR _value$[ebp]

; 233  : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@_N@@QAE_N_N@Z ENDP			; CEncrypt<bool>::operator=
_TEXT	ENDS
PUBLIC	__real@40000000
PUBLIC	__real@4f800000
PUBLIC	__$ArrayPad$
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
;	COMDAT __real@40000000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iorangeprotectionbuff.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioRangeProtectionBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
tv6617 = -36						; size = 4
tv6607 = -36						; size = 4
tv6585 = -36						; size = 4
tv6581 = -36						; size = 4
$T525726 = -36						; size = 4
tv6589 = -32						; size = 4
_i$525585 = -32						; size = 4
$T525722 = -32						; size = 4
__k$525992 = -28					; size = 19
__k$525882 = -28					; size = 18
__k$525742 = -28					; size = 20
__k$525609 = -28					; size = 19
__k$525484 = -28					; size = 20
__k$525370 = -28					; size = 18
__k$525226 = -24					; size = 15
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioRangeProtectionBuff@@UAEXAAVioINILoader@@@Z PROC ; ioRangeProtectionBuff::LoadProperty, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 31   : 	ioBuff::LoadProperty( rkLoader );

  00016	57		 push	 edi
  00017	8b f1		 mov	 esi, ecx
  00019	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty

; 32   : 
; 33   : 	m_bEnableOutLine = rkLoader.LoadBool_e( "outline_enable", false );

  0001e	6a 03		 push	 3
  00020	59		 pop	 ecx
  00021	6a 04		 push	 4
  00023	c7 45 e8 82 99
	9f 86		 mov	 DWORD PTR __k$525226[ebp], -2036360830 ; 869f9982H
  0002a	c7 45 ec 84 82
	8e b5		 mov	 DWORD PTR __k$525226[ebp+4], -1248951676 ; b58e8284H
  00031	c7 45 f0 88 82
	8a 88		 mov	 DWORD PTR __k$525226[ebp+8], -2004188536 ; 888a8288H
  00038	66 c7 45 f4 81
	89		 mov	 WORD PTR __k$525226[ebp+12], 35201 ; 00008981H
  0003e	8d 45 e8	 lea	 eax, DWORD PTR __k$525226[ebp]
  00041	c6 45 f6 00	 mov	 BYTE PTR __k$525226[ebp+14], 0
  00045	5b		 pop	 ebx
$LL106@LoadProper:
  00046	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0004c	03 c3		 add	 eax, ebx
  0004e	49		 dec	 ecx
  0004f	75 f5		 jne	 SHORT $LL106@LoadProper
  00051	6a 0c		 push	 12			; 0000000cH
  00053	58		 pop	 eax
$LL103@LoadProper:
  00054	8b c8		 mov	 ecx, eax
  00056	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0005c	79 05		 jns	 SHORT $LN781@LoadProper
  0005e	49		 dec	 ecx
  0005f	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00062	41		 inc	 ecx
$LN781@LoadProper:
  00063	b2 ed		 mov	 dl, -19			; ffffffedH
  00065	2a d1		 sub	 dl, cl
  00067	30 54 05 e8	 xor	 BYTE PTR __k$525226[ebp+eax], dl
  0006b	40		 inc	 eax
  0006c	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  0006f	7c e3		 jl	 SHORT $LL103@LoadProper
  00071	6a 00		 push	 0
  00073	8d 45 e8	 lea	 eax, DWORD PTR __k$525226[ebp]
  00076	50		 push	 eax
  00077	8b cf		 mov	 ecx, edi
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  0007f	88 86 80 09 00
	00		 mov	 BYTE PTR [esi+2432], al

; 34   : 	m_fOutLineR = rkLoader.LoadFloat_e( "outline_color_red", FLOAT1 );

  00085	b8 01 00 00 00	 mov	 eax, 1
  0008a	c7 45 e4 82 99
	9f 86		 mov	 DWORD PTR __k$525370[ebp], -2036360830 ; 869f9982H
  00091	c7 45 e8 84 82
	8e b5		 mov	 DWORD PTR __k$525370[ebp+4], -1248951676 ; b58e8284H
  00098	c7 45 ec 8e 83
	87 85		 mov	 DWORD PTR __k$525370[ebp+8], -2054716530 ; 8587838eH
  0009f	c7 45 f0 9f b3
	99 8f		 mov	 DWORD PTR __k$525370[ebp+12], -1885752417 ; 8f99b39fH
  000a6	8d 4d e4	 lea	 ecx, DWORD PTR __k$525370[ebp]
  000a9	66 c7 45 f4 89
	00		 mov	 WORD PTR __k$525370[ebp+16], 137 ; 00000089H
  000af	8b d3		 mov	 edx, ebx
$LL214@LoadProper:
  000b1	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  000b7	03 cb		 add	 ecx, ebx
  000b9	4a		 dec	 edx
  000ba	75 f5		 jne	 SHORT $LL214@LoadProper
  000bc	80 75 f4 ed	 xor	 BYTE PTR __k$525370[ebp+16], -19 ; ffffffedH
  000c0	89 45 dc	 mov	 DWORD PTR tv6617[ebp], eax
  000c3	db 45 dc	 fild	 DWORD PTR tv6617[ebp]
  000c6	85 c0		 test	 eax, eax
  000c8	79 06		 jns	 SHORT $LN782@LoadProper
  000ca	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN782@LoadProper:
  000d0	51		 push	 ecx
  000d1	8d 45 e4	 lea	 eax, DWORD PTR __k$525370[ebp]
  000d4	d9 1c 24	 fstp	 DWORD PTR [esp]
  000d7	50		 push	 eax
  000d8	8b cf		 mov	 ecx, edi
  000da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  000e0	d9 9e 6c 09 00
	00		 fstp	 DWORD PTR [esi+2412]

; 35   : 	m_fOutLineG = rkLoader.LoadFloat_e( "outline_color_green", FLOAT1 );

  000e6	b8 01 00 00 00	 mov	 eax, 1
  000eb	c7 45 e4 82 99
	9f 86		 mov	 DWORD PTR __k$525484[ebp], -2036360830 ; 869f9982H
  000f2	c7 45 e8 84 82
	8e b5		 mov	 DWORD PTR __k$525484[ebp+4], -1248951676 ; b58e8284H
  000f9	c7 45 ec 8e 83
	87 85		 mov	 DWORD PTR __k$525484[ebp+8], -2054716530 ; 8587838eH
  00100	c7 45 f0 9f b3
	8c 98		 mov	 DWORD PTR __k$525484[ebp+12], -1735609441 ; 988cb39fH
  00107	8d 4d e4	 lea	 ecx, DWORD PTR __k$525484[ebp]
  0010a	c7 45 f4 88 89
	85 00		 mov	 DWORD PTR __k$525484[ebp+16], 8751496 ; 00858988H
  00111	8b d3		 mov	 edx, ebx
$LL322@LoadProper:
  00113	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  00119	03 cb		 add	 ecx, ebx
  0011b	4a		 dec	 edx
  0011c	75 f5		 jne	 SHORT $LL322@LoadProper
  0011e	c7 45 e0 10 00
	00 00		 mov	 DWORD PTR _i$525585[ebp], 16 ; 00000010H
$LL319@LoadProper:
  00125	8b 4d e0	 mov	 ecx, DWORD PTR _i$525585[ebp]
  00128	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0012e	79 05		 jns	 SHORT $LN783@LoadProper
  00130	49		 dec	 ecx
  00131	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00134	41		 inc	 ecx
$LN783@LoadProper:
  00135	b2 ed		 mov	 dl, -19			; ffffffedH
  00137	2a d1		 sub	 dl, cl
  00139	8b 4d e0	 mov	 ecx, DWORD PTR _i$525585[ebp]
  0013c	30 54 0d e4	 xor	 BYTE PTR __k$525484[ebp+ecx], dl
  00140	ff 45 e0	 inc	 DWORD PTR _i$525585[ebp]
  00143	83 7d e0 13	 cmp	 DWORD PTR _i$525585[ebp], 19 ; 00000013H
  00147	7c dc		 jl	 SHORT $LL319@LoadProper
  00149	89 45 dc	 mov	 DWORD PTR tv6607[ebp], eax
  0014c	db 45 dc	 fild	 DWORD PTR tv6607[ebp]
  0014f	85 c0		 test	 eax, eax
  00151	79 06		 jns	 SHORT $LN784@LoadProper
  00153	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN784@LoadProper:
  00159	51		 push	 ecx
  0015a	8d 45 e4	 lea	 eax, DWORD PTR __k$525484[ebp]
  0015d	d9 1c 24	 fstp	 DWORD PTR [esp]
  00160	50		 push	 eax
  00161	8b cf		 mov	 ecx, edi
  00163	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00169	d9 9e 70 09 00
	00		 fstp	 DWORD PTR [esi+2416]

; 36   : 	m_fOutLineB = rkLoader.LoadFloat_e( "outline_color_blue", 0.0f );

  0016f	c7 45 e4 82 99
	9f 86		 mov	 DWORD PTR __k$525609[ebp], -2036360830 ; 869f9982H
  00176	c7 45 e8 84 82
	8e b5		 mov	 DWORD PTR __k$525609[ebp+4], -1248951676 ; b58e8284H
  0017d	c7 45 ec 8e 83
	87 85		 mov	 DWORD PTR __k$525609[ebp+8], -2054716530 ; 8587838eH
  00184	c7 45 f0 9f b3
	89 86		 mov	 DWORD PTR __k$525609[ebp+12], -2037795937 ; 8689b39fH
  0018b	66 c7 45 f4 98
	89		 mov	 WORD PTR __k$525609[ebp+16], 35224 ; 00008998H
  00191	8d 45 e4	 lea	 eax, DWORD PTR __k$525609[ebp]
  00194	c6 45 f6 00	 mov	 BYTE PTR __k$525609[ebp+18], 0
  00198	8b cb		 mov	 ecx, ebx
$LL428@LoadProper:
  0019a	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a0	03 c3		 add	 eax, ebx
  001a2	49		 dec	 ecx
  001a3	75 f5		 jne	 SHORT $LL428@LoadProper
  001a5	6a 10		 push	 16			; 00000010H
  001a7	58		 pop	 eax
$LL425@LoadProper:
  001a8	8b c8		 mov	 ecx, eax
  001aa	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001b0	79 05		 jns	 SHORT $LN785@LoadProper
  001b2	49		 dec	 ecx
  001b3	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001b6	41		 inc	 ecx
$LN785@LoadProper:
  001b7	b2 ed		 mov	 dl, -19			; ffffffedH
  001b9	2a d1		 sub	 dl, cl
  001bb	30 54 05 e4	 xor	 BYTE PTR __k$525609[ebp+eax], dl
  001bf	40		 inc	 eax
  001c0	83 f8 12	 cmp	 eax, 18			; 00000012H
  001c3	7c e3		 jl	 SHORT $LL425@LoadProper
  001c5	0f 57 c0	 xorps	 xmm0, xmm0
  001c8	51		 push	 ecx
  001c9	8d 45 e4	 lea	 eax, DWORD PTR __k$525609[ebp]
  001cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d1	50		 push	 eax
  001d2	8b cf		 mov	 ecx, edi
  001d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  001da	d9 9e 74 09 00
	00		 fstp	 DWORD PTR [esi+2420]

; 37   : 	m_fOutLineAlpha = rkLoader.LoadFloat_e( "outline_color_alpha", FLOAT05 );

  001e0	b8 05 00 00 00	 mov	 eax, 5
  001e5	89 45 e0	 mov	 DWORD PTR $T525722[ebp], eax
  001e8	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  001ed	89 45 dc	 mov	 DWORD PTR $T525726[ebp], eax
  001f0	c7 45 e4 82 99
	9f 86		 mov	 DWORD PTR __k$525742[ebp], -2036360830 ; 869f9982H
  001f7	c7 45 e8 84 82
	8e b5		 mov	 DWORD PTR __k$525742[ebp+4], -1248951676 ; b58e8284H
  001fe	c7 45 ec 8e 83
	87 85		 mov	 DWORD PTR __k$525742[ebp+8], -2054716530 ; 8587838eH
  00205	c7 45 f0 9f b3
	8a 86		 mov	 DWORD PTR __k$525742[ebp+12], -2037730401 ; 868ab39fH
  0020c	8d 4d e4	 lea	 ecx, DWORD PTR __k$525742[ebp]
  0020f	c7 45 f4 9d 84
	8a 00		 mov	 DWORD PTR __k$525742[ebp+16], 9077917 ; 008a849dH
  00216	8b c3		 mov	 eax, ebx
$LL538@LoadProper:
  00218	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  0021e	03 cb		 add	 ecx, ebx
  00220	48		 dec	 eax
  00221	75 f5		 jne	 SHORT $LL538@LoadProper
  00223	6a 10		 push	 16			; 00000010H
  00225	59		 pop	 ecx
$LL535@LoadProper:
  00226	8b c1		 mov	 eax, ecx
  00228	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0022d	79 05		 jns	 SHORT $LN786@LoadProper
  0022f	48		 dec	 eax
  00230	83 c8 fc	 or	 eax, -4			; fffffffcH
  00233	40		 inc	 eax
$LN786@LoadProper:
  00234	b2 ed		 mov	 dl, -19			; ffffffedH
  00236	2a d0		 sub	 dl, al
  00238	30 54 0d e4	 xor	 BYTE PTR __k$525742[ebp+ecx], dl
  0023c	41		 inc	 ecx
  0023d	83 f9 13	 cmp	 ecx, 19			; 00000013H
  00240	7c e4		 jl	 SHORT $LL535@LoadProper
  00242	8b 45 e0	 mov	 eax, DWORD PTR $T525722[ebp]
  00245	db 45 e0	 fild	 DWORD PTR $T525722[ebp]
  00248	85 c0		 test	 eax, eax
  0024a	79 06		 jns	 SHORT $LN787@LoadProper
  0024c	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN787@LoadProper:
  00252	8b 45 dc	 mov	 eax, DWORD PTR $T525726[ebp]
  00255	db 45 dc	 fild	 DWORD PTR $T525726[ebp]
  00258	85 c0		 test	 eax, eax
  0025a	79 06		 jns	 SHORT $LN788@LoadProper
  0025c	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN788@LoadProper:
  00262	de f9		 fdivp	 ST(1), ST(0)
  00264	51		 push	 ecx
  00265	8d 45 e4	 lea	 eax, DWORD PTR __k$525742[ebp]
  00268	8b cf		 mov	 ecx, edi
  0026a	d9 5d dc	 fstp	 DWORD PTR tv6581[ebp]
  0026d	d9 45 dc	 fld	 DWORD PTR tv6581[ebp]
  00270	d9 1c 24	 fstp	 DWORD PTR [esp]
  00273	50		 push	 eax
  00274	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0027a	d9 9e 78 09 00
	00		 fstp	 DWORD PTR [esi+2424]

; 38   : 	m_fOutLineThickness = rkLoader.LoadFloat_e( "outline_thickness", 2.0f );

  00280	c7 45 e4 82 99
	9f 86		 mov	 DWORD PTR __k$525882[ebp], -2036360830 ; 869f9982H
  00287	c7 45 e8 84 82
	8e b5		 mov	 DWORD PTR __k$525882[ebp+4], -1248951676 ; b58e8284H
  0028e	c7 45 ec 99 84
	82 89		 mov	 DWORD PTR __k$525882[ebp+8], -1987935079 ; 89828499H
  00295	c7 45 f0 86 82
	8e 99		 mov	 DWORD PTR __k$525882[ebp+12], -1718713722 ; 998e8286H
  0029c	8d 45 e4	 lea	 eax, DWORD PTR __k$525882[ebp]
  0029f	66 c7 45 f4 9e
	00		 mov	 WORD PTR __k$525882[ebp+16], 158 ; 0000009eH
  002a5	8b cb		 mov	 ecx, ebx
$LL644@LoadProper:
  002a7	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002ad	03 c3		 add	 eax, ebx
  002af	49		 dec	 ecx
  002b0	75 f5		 jne	 SHORT $LL644@LoadProper
  002b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  002ba	80 75 f4 ed	 xor	 BYTE PTR __k$525882[ebp+16], -19 ; ffffffedH
  002be	51		 push	 ecx
  002bf	8d 45 e4	 lea	 eax, DWORD PTR __k$525882[ebp]
  002c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c7	50		 push	 eax
  002c8	8b cf		 mov	 ecx, edi
  002ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  002d0	d9 9e 7c 09 00
	00		 fstp	 DWORD PTR [esi+2428]

; 39   : 	m_bDisableDownState  = rkLoader.LoadBool_e( "disable_down_state", false );

  002d6	c7 45 e4 89 85
	98 8b		 mov	 DWORD PTR __k$525992[ebp], -1952938615 ; 8b988589H
  002dd	c7 45 e8 8f 80
	8e b5		 mov	 DWORD PTR __k$525992[ebp+4], -1248952177 ; b58e808fH
  002e4	c7 45 ec 89 83
	9c 84		 mov	 DWORD PTR __k$525992[ebp+8], -2070117495 ; 849c8389H
  002eb	c7 45 f0 b2 9f
	9f 8b		 mov	 DWORD PTR __k$525992[ebp+12], -1952473166 ; 8b9f9fb2H
  002f2	66 c7 45 f4 99
	89		 mov	 WORD PTR __k$525992[ebp+16], 35225 ; 00008999H
  002f8	8d 45 e4	 lea	 eax, DWORD PTR __k$525992[ebp]
  002fb	c6 45 f6 00	 mov	 BYTE PTR __k$525992[ebp+18], 0
  002ff	8b cb		 mov	 ecx, ebx
$LL750@LoadProper:
  00301	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00307	03 c3		 add	 eax, ebx
  00309	49		 dec	 ecx
  0030a	75 f5		 jne	 SHORT $LL750@LoadProper
  0030c	6a 10		 push	 16			; 00000010H
  0030e	58		 pop	 eax
$LL747@LoadProper:
  0030f	8b c8		 mov	 ecx, eax
  00311	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00317	79 05		 jns	 SHORT $LN789@LoadProper
  00319	49		 dec	 ecx
  0031a	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0031d	41		 inc	 ecx
$LN789@LoadProper:
  0031e	b2 ed		 mov	 dl, -19			; ffffffedH
  00320	2a d1		 sub	 dl, cl
  00322	30 54 05 e4	 xor	 BYTE PTR __k$525992[ebp+eax], dl
  00326	40		 inc	 eax
  00327	83 f8 12	 cmp	 eax, 18			; 00000012H
  0032a	7c e3		 jl	 SHORT $LL747@LoadProper
  0032c	6a 00		 push	 0
  0032e	8d 45 e4	 lea	 eax, DWORD PTR __k$525992[ebp]
  00331	50		 push	 eax
  00332	8b cf		 mov	 ecx, edi
  00334	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 40   : }

  0033a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0033d	5f		 pop	 edi
  0033e	88 86 81 09 00
	00		 mov	 BYTE PTR [esi+2433], al
  00344	5e		 pop	 esi
  00345	33 cd		 xor	 ecx, ebp
  00347	5b		 pop	 ebx
  00348	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0034d	c9		 leave
  0034e	c2 04 00	 ret	 4
?LoadProperty@ioRangeProtectionBuff@@UAEXAAVioINILoader@@@Z ENDP ; ioRangeProtectionBuff::LoadProperty
_TEXT	ENDS
EXTRN	?GetBuffDuration@ioBuff@@IAEKXZ:PROC		; ioBuff::GetBuffDuration
EXTRN	?GetMemberBalanceRateForStateProtectionTime@ioBaseChar@@QAEMH@Z:PROC ; ioBaseChar::GetMemberBalanceRateForStateProtectionTime
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	__ftol2:PROC
; Function compile flags: /Ogsp
;	COMDAT ?StartBuff@ioRangeProtectionBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
tv155 = -8						; size = 8
tv254 = 8						; size = 4
_value$526171 = 8					; size = 4
_value$526166 = 8					; size = 4
_value$526162 = 8					; size = 4
_value$526154 = 8					; size = 4
_pOwner$ = 8						; size = 4
_value$526175 = 11					; size = 1
?StartBuff@ioRangeProtectionBuff@@UAEXPAVioBaseChar@@@Z PROC ; ioRangeProtectionBuff::StartBuff, COMDAT
; _this$ = ecx

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx

; 49   : #ifndef SHIPPING 
; 50   : 	if( Setting::ShowExtraInfo() )
; 51   : 	{
; 52   : 		LOG.PrintTimeAndLog( 0, "BuffCheck - %s, StartTime: %d", m_Name.c_str(), FRAMEGETTIME() );
; 53   : 	}
; 54   : #endif
; 55   : 
; 56   : 	if( !pOwner )

  00006	8b 5d 08	 mov	 ebx, DWORD PTR _pOwner$[ebp]
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	85 db		 test	 ebx, ebx
  0000e	0f 84 e4 00 00
	00		 je	 $LN1@StartBuff

; 57   : 		return;
; 58   : 
; 59   : 	DWORD dwCurTime = FRAMEGETTIME();

  00014	57		 push	 edi
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0001b	8b c8		 mov	 ecx, eax
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00023	8b f8		 mov	 edi, eax

; 60   : 	m_pOwner = pOwner;
; 61   : 	m_OwnerName = pOwner->GetCharName();

  00025	8d 83 d4 02 00
	00		 lea	 eax, DWORD PTR [ebx+724]
  0002b	50		 push	 eax
  0002c	8d 8e 78 02 00
	00		 lea	 ecx, DWORD PTR [esi+632]
  00032	89 9e 74 02 00
	00		 mov	 DWORD PTR [esi+628], ebx
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 62   : 
; 63   : 	m_dwBuffStartTime = dwCurTime;

  0003e	8d 45 08	 lea	 eax, DWORD PTR _value$526154[ebp]
  00041	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  00047	50		 push	 eax
  00048	89 7d 08	 mov	 DWORD PTR _value$526154[ebp], edi
  0004b	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 64   : 	if( m_iOperationType == OT_DELAY )

  00050	83 be d0 03 00
	00 03		 cmp	 DWORD PTR [esi+976], 3
  00057	75 12		 jne	 SHORT $LN2@StartBuff

; 65   : 	{
; 66   : 		m_dwBuffStartTime += m_dwDelayDuration;

  00059	8d 86 d8 02 00
	00		 lea	 eax, DWORD PTR [esi+728]
  0005f	50		 push	 eax
  00060	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  00066	e8 00 00 00 00	 call	 ??Y?$CEncrypt@K@@QAEAAKABK@Z ; CEncrypt<unsigned long>::operator+=
$LN2@StartBuff:

; 67   : 	}
; 68   : 
; 69   : 	DWORD dwCurDuration = GetBuffDuration() * pOwner->GetMemberBalanceRateForStateProtectionTime( GetTypeID() );

  0006b	ff b6 cc 03 00
	00		 push	 DWORD PTR [esi+972]
  00071	8b cb		 mov	 ecx, ebx
  00073	e8 00 00 00 00	 call	 ?GetMemberBalanceRateForStateProtectionTime@ioBaseChar@@QAEMH@Z ; ioBaseChar::GetMemberBalanceRateForStateProtectionTime
  00078	dd 5d f8	 fstp	 QWORD PTR tv155[ebp]
  0007b	8b ce		 mov	 ecx, esi
  0007d	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  00082	89 45 08	 mov	 DWORD PTR tv254[ebp], eax
  00085	db 45 08	 fild	 DWORD PTR tv254[ebp]
  00088	85 c0		 test	 eax, eax
  0008a	79 06		 jns	 SHORT $LN20@StartBuff
  0008c	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN20@StartBuff:
  00092	dc 4d f8	 fmul	 QWORD PTR tv155[ebp]
  00095	e8 00 00 00 00	 call	 __ftol2
  0009a	8b d8		 mov	 ebx, eax

; 70   : 	m_dwBuffEndTime = m_dwBuffStartTime + dwCurDuration;

  0009c	8d 45 08	 lea	 eax, DWORD PTR _value$526162[ebp]
  0009f	50		 push	 eax
  000a0	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  000a6	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  000ab	8b 45 08	 mov	 eax, DWORD PTR _value$526162[ebp]
  000ae	03 c3		 add	 eax, ebx
  000b0	89 45 08	 mov	 DWORD PTR _value$526166[ebp], eax
  000b3	8d 45 08	 lea	 eax, DWORD PTR _value$526166[ebp]
  000b6	50		 push	 eax
  000b7	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  000bd	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 71   : 	m_dwCheckTime = dwCurTime;

  000c2	8d 45 08	 lea	 eax, DWORD PTR _value$526171[ebp]
  000c5	50		 push	 eax
  000c6	8d 8e 3c 03 00
	00		 lea	 ecx, DWORD PTR [esi+828]
  000cc	89 7d 08	 mov	 DWORD PTR _value$526171[ebp], edi
  000cf	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 72   : 	
; 73   : 	m_bLive = true;

  000d4	8d 45 0b	 lea	 eax, DWORD PTR _value$526175[ebp]
  000d7	50		 push	 eax
  000d8	8d 8e 70 07 00
	00		 lea	 ecx, DWORD PTR [esi+1904]
  000de	c6 45 0b 01	 mov	 BYTE PTR _value$526175[ebp], 1
  000e2	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 74   : 
; 75   : 	if( m_iOperationType != OT_DELAY )

  000e7	83 be d0 03 00
	00 03		 cmp	 DWORD PTR [esi+976], 3
  000ee	5f		 pop	 edi
  000ef	74 07		 je	 SHORT $LN1@StartBuff

; 76   : 	{
; 77   : 		SetAction();

  000f1	8b 06		 mov	 eax, DWORD PTR [esi]
  000f3	8b ce		 mov	 ecx, esi
  000f5	ff 50 34	 call	 DWORD PTR [eax+52]
$LN1@StartBuff:
  000f8	5e		 pop	 esi
  000f9	5b		 pop	 ebx

; 78   : 	}
; 79   : }

  000fa	c9		 leave
  000fb	c2 04 00	 ret	 4
?StartBuff@ioRangeProtectionBuff@@UAEXPAVioBaseChar@@@Z ENDP ; ioRangeProtectionBuff::StartBuff
_TEXT	ENDS
EXTRN	?CalcGlobalGapTime@ioGlobalTimer@@QBEKK@Z:PROC	; ioGlobalTimer::CalcGlobalGapTime
EXTRN	?GetSingleton@ioGlobalTimer@@SAAAV1@XZ:PROC	; ioGlobalTimer::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioRangeProtectionBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
tv140 = -8						; size = 8
tv245 = 8						; size = 4
_value$526201 = 8					; size = 4
_value$526196 = 8					; size = 4
_value$526192 = 8					; size = 4
_pOwner$ = 8						; size = 4
_value$526206 = 11					; size = 1
_value$526183 = 12					; size = 4
_dwCurDuration$523814 = 12				; size = 4
_dwGlobalTimeGap$ = 12					; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioRangeProtectionBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioRangeProtectionBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 83   : 	m_pOwner = pOwner;

  00005	8b 45 08	 mov	 eax, DWORD PTR _pOwner$[ebp]
  00008	53		 push	 ebx
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 84   : 	DWORD dwGlobalTimeGap = g_GlobalTimer.CalcGlobalGapTime( dwGlobalTime );

  0000b	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  0000e	8b f1		 mov	 esi, ecx
  00010	89 86 74 02 00
	00		 mov	 DWORD PTR [esi+628], eax
  00016	e8 00 00 00 00	 call	 ?GetSingleton@ioGlobalTimer@@SAAAV1@XZ ; ioGlobalTimer::GetSingleton
  0001b	8b c8		 mov	 ecx, eax
  0001d	e8 00 00 00 00	 call	 ?CalcGlobalGapTime@ioGlobalTimer@@QBEKK@Z ; ioGlobalTimer::CalcGlobalGapTime

; 85   : 
; 86   : 	if( m_iOperationType != OT_SWITCH )

  00022	83 be d0 03 00
	00 02		 cmp	 DWORD PTR [esi+976], 2
  00029	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0002f	89 45 0c	 mov	 DWORD PTR _dwGlobalTimeGap$[ebp], eax
  00032	0f 84 89 00 00
	00		 je	 $LN12@ApplyStart

; 87   : 	{
; 88   : 		if( dwGlobalTimeGap > dwGapTime )

  00038	8b 7d 10	 mov	 edi, DWORD PTR _dwGapTime$[ebp]
  0003b	3b c7		 cmp	 eax, edi
  0003d	76 07		 jbe	 SHORT $LN2@ApplyStart

; 89   : 			return false;

  0003f	32 c0		 xor	 al, al
  00041	e9 bc 00 00 00	 jmp	 $LN4@ApplyStart
$LN2@ApplyStart:

; 90   : 
; 91   : 		dwGapTime -= dwGlobalTimeGap;
; 92   : 		m_dwBuffEndTime = FRAMEGETTIME() + dwGapTime;

  00046	ff d3		 call	 ebx
  00048	8b c8		 mov	 ecx, eax
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00050	2b 7d 0c	 sub	 edi, DWORD PTR _dwGlobalTimeGap$[ebp]
  00053	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  00059	03 c7		 add	 eax, edi
  0005b	89 45 0c	 mov	 DWORD PTR _value$526183[ebp], eax
  0005e	8d 45 0c	 lea	 eax, DWORD PTR _value$526183[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 93   : 
; 94   : 		DWORD dwCurDuration = GetBuffDuration() * pOwner->GetMemberBalanceRateForStateProtectionTime( GetTypeID() );

  00067	ff b6 cc 03 00
	00		 push	 DWORD PTR [esi+972]
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  00070	e8 00 00 00 00	 call	 ?GetMemberBalanceRateForStateProtectionTime@ioBaseChar@@QAEMH@Z ; ioBaseChar::GetMemberBalanceRateForStateProtectionTime
  00075	dd 5d f8	 fstp	 QWORD PTR tv140[ebp]
  00078	8b ce		 mov	 ecx, esi
  0007a	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  0007f	89 45 08	 mov	 DWORD PTR tv245[ebp], eax
  00082	db 45 08	 fild	 DWORD PTR tv245[ebp]
  00085	85 c0		 test	 eax, eax
  00087	79 06		 jns	 SHORT $LN18@ApplyStart
  00089	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN18@ApplyStart:
  0008f	dc 4d f8	 fmul	 QWORD PTR tv140[ebp]
  00092	e8 00 00 00 00	 call	 __ftol2
  00097	89 45 0c	 mov	 DWORD PTR _dwCurDuration$523814[ebp], eax

; 95   : 		m_dwBuffStartTime = m_dwBuffEndTime - dwCurDuration;

  0009a	8d 45 08	 lea	 eax, DWORD PTR _value$526192[ebp]
  0009d	50		 push	 eax
  0009e	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  000a4	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  000a9	8b 45 08	 mov	 eax, DWORD PTR _value$526192[ebp]
  000ac	2b 45 0c	 sub	 eax, DWORD PTR _dwCurDuration$523814[ebp]
  000af	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  000b5	89 45 08	 mov	 DWORD PTR _value$526196[ebp], eax
  000b8	8d 45 08	 lea	 eax, DWORD PTR _value$526196[ebp]
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool
$LN12@ApplyStart:

; 96   : 	}
; 97   : 
; 98   : 	m_dwCheckTime = FRAMEGETTIME();

  000c1	ff d3		 call	 ebx
  000c3	8b c8		 mov	 ecx, eax
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  000cb	89 45 08	 mov	 DWORD PTR _value$526201[ebp], eax
  000ce	8d 45 08	 lea	 eax, DWORD PTR _value$526201[ebp]
  000d1	50		 push	 eax
  000d2	8d 8e 3c 03 00
	00		 lea	 ecx, DWORD PTR [esi+828]
  000d8	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 99   : 	m_bLive = true;

  000dd	8d 45 0b	 lea	 eax, DWORD PTR _value$526206[ebp]
  000e0	50		 push	 eax
  000e1	8d 8e 70 07 00
	00		 lea	 ecx, DWORD PTR [esi+1904]
  000e7	c6 45 0b 01	 mov	 BYTE PTR _value$526206[ebp], 1
  000eb	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 100  : 
; 101  : 	if( m_iOperationType != OT_DELAY )

  000f0	83 be d0 03 00
	00 03		 cmp	 DWORD PTR [esi+976], 3
  000f7	74 07		 je	 SHORT $LN1@ApplyStart

; 102  : 	{
; 103  : 		SetAction();

  000f9	8b 06		 mov	 eax, DWORD PTR [esi]
  000fb	8b ce		 mov	 ecx, esi
  000fd	ff 50 34	 call	 DWORD PTR [eax+52]
$LN1@ApplyStart:

; 104  : 	}
; 105  : 
; 106  : 	return true;

  00100	b0 01		 mov	 al, 1
$LN4@ApplyStart:
  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx

; 107  : }

  00105	c9		 leave
  00106	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioRangeProtectionBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioRangeProtectionBuff::ApplyStartBuff
_TEXT	ENDS
PUBLIC	__real@00000000
;	COMDAT __real@00000000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iorangeprotectionbuff.cpp
CONST	ENDS
;	COMDAT ?SetExtraDurationByGrowth@ioRangeProtectionBuff@@UAEXM@Z
_TEXT	SEGMENT
tv129 = -8						; size = 8
tv206 = 8						; size = 4
_value$526221 = 8					; size = 4
_value$526217 = 8					; size = 4
_fDuration$ = 8						; size = 4
?SetExtraDurationByGrowth@ioRangeProtectionBuff@@UAEXM@Z PROC ; ioRangeProtectionBuff::SetExtraDurationByGrowth, COMDAT
; _this$ = ecx

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 111  : 	m_dwExtraDurationByGrowth = 0;

  00008	83 a6 60 05 00
	00 00		 and	 DWORD PTR [esi+1376], 0

; 112  : 
; 113  : 	if( m_bDisableGrowth )

  0000f	80 be fc 04 00
	00 00		 cmp	 BYTE PTR [esi+1276], 0
  00016	0f 85 90 00 00
	00		 jne	 $LN10@SetExtraDu

; 114  : 		return;
; 115  : 
; 116  : 	if( GetBuffDuration() == 0 ) return;

  0001c	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  00021	85 c0		 test	 eax, eax
  00023	0f 84 83 00 00
	00		 je	 $LN10@SetExtraDu

; 117  : 	if( fDuration == 0.0f ) return;

  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDuration$[ebp]
  0002e	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00035	9f		 lahf
  00036	f6 c4 44	 test	 ah, 68			; 00000044H
  00039	7b 71		 jnp	 SHORT $LN10@SetExtraDu

; 118  : 
; 119  : 	m_dwExtraDurationByGrowth = (DWORD)fDuration;

  0003b	d9 45 08	 fld	 DWORD PTR _fDuration$[ebp]
  0003e	57		 push	 edi
  0003f	e8 00 00 00 00	 call	 __ftol2

; 120  : 
; 121  : 	DWORD dwCurDuration = GetBuffDuration() * m_pOwner->GetMemberBalanceRateForStateProtectionTime( GetTypeID() );

  00044	ff b6 cc 03 00
	00		 push	 DWORD PTR [esi+972]
  0004a	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00050	89 86 60 05 00
	00		 mov	 DWORD PTR [esi+1376], eax
  00056	e8 00 00 00 00	 call	 ?GetMemberBalanceRateForStateProtectionTime@ioBaseChar@@QAEMH@Z ; ioBaseChar::GetMemberBalanceRateForStateProtectionTime
  0005b	dd 5d f8	 fstp	 QWORD PTR tv129[ebp]
  0005e	8b ce		 mov	 ecx, esi
  00060	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  00065	89 45 08	 mov	 DWORD PTR tv206[ebp], eax
  00068	db 45 08	 fild	 DWORD PTR tv206[ebp]
  0006b	85 c0		 test	 eax, eax
  0006d	79 06		 jns	 SHORT $LN12@SetExtraDu
  0006f	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN12@SetExtraDu:
  00075	dc 4d f8	 fmul	 QWORD PTR tv129[ebp]
  00078	e8 00 00 00 00	 call	 __ftol2
  0007d	8b f8		 mov	 edi, eax

; 122  : 	m_dwBuffEndTime = m_dwBuffStartTime + dwCurDuration + m_dwExtraDurationByGrowth;

  0007f	8d 45 08	 lea	 eax, DWORD PTR _value$526217[ebp]
  00082	50		 push	 eax
  00083	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  00089	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  0008e	8b 45 08	 mov	 eax, DWORD PTR _value$526217[ebp]
  00091	03 c7		 add	 eax, edi
  00093	03 86 60 05 00
	00		 add	 eax, DWORD PTR [esi+1376]
  00099	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  0009f	89 45 08	 mov	 DWORD PTR _value$526221[ebp], eax
  000a2	8d 45 08	 lea	 eax, DWORD PTR _value$526221[ebp]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool
  000ab	5f		 pop	 edi
$LN10@SetExtraDu:
  000ac	5e		 pop	 esi

; 123  : }

  000ad	c9		 leave
  000ae	c2 04 00	 ret	 4
?SetExtraDurationByGrowth@ioRangeProtectionBuff@@UAEXM@Z ENDP ; ioRangeProtectionBuff::SetExtraDurationByGrowth
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?ApplyOutLineChange@ioBaseChar@@QAEXW4ChangeOutLineType@@ABU_D3DCOLORVALUE@@M@Z:PROC ; ioBaseChar::ApplyOutLineChange
EXTRN	?InitColorValue@Help@@YAXAAU_D3DCOLORVALUE@@MMMM@Z:PROC ; Help::InitColorValue
EXTRN	?PlaySoundA@ioGameEntity@@QAEKABVioHashString@@_N@Z:PROC ; ioGameEntity::PlaySoundA
EXTRN	?AttachEffect@ioBaseChar@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@_N@Z:PROC ; ioBaseChar::AttachEffect
EXTRN	?GetEffectEventOwner@ioBuff@@IAEPAVioBaseChar@@XZ:PROC ; ioBuff::GetEffectEventOwner
EXTRN	?RotateByBuffCollision@ioBaseChar@@QAEXABVioHashString@@H@Z:PROC ; ioBaseChar::RotateByBuffCollision
EXTRN	__imp_??9ioHashString@@QBE_NABV0@@Z:PROC
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	?CheckBuffDesc@ioBuff@@IAEXXZ:PROC		; ioBuff::CheckBuffDesc
EXTRN	?CheckChangeColor@ioBuff@@IAEX_N@Z:PROC		; ioBuff::CheckChangeColor
EXTRN	?CheckChangeSkill@ioBuff@@IAEX_N@Z:PROC		; ioBuff::CheckChangeSkill
EXTRN	?CheckInvisibleHelmet@ioBuff@@IAEX_N@Z:PROC	; ioBuff::CheckInvisibleHelmet
EXTRN	?CheckInvisibleCloak@ioBuff@@IAEX_N@Z:PROC	; ioBuff::CheckInvisibleCloak
EXTRN	?CheckInvisibleWeapon@ioBuff@@IAEX_N@Z:PROC	; ioBuff::CheckInvisibleWeapon
; Function compile flags: /Ogsp
;	COMDAT ?SetAction@ioRangeProtectionBuff@@MAEXXZ
_TEXT	SEGMENT
_value$526234 = -21					; size = 1
_kColor$523832 = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
?SetAction@ioRangeProtectionBuff@@MAEXXZ PROC		; ioRangeProtectionBuff::SetAction, COMDAT
; _this$ = ecx

; 126  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi

; 127  : 	CheckInvisibleWeapon( false );

  00012	33 ff		 xor	 edi, edi
  00014	57		 push	 edi
  00015	8b f1		 mov	 esi, ecx
  00017	e8 00 00 00 00	 call	 ?CheckInvisibleWeapon@ioBuff@@IAEX_N@Z ; ioBuff::CheckInvisibleWeapon

; 128  : 	CheckInvisibleCloak( false );

  0001c	57		 push	 edi
  0001d	8b ce		 mov	 ecx, esi
  0001f	e8 00 00 00 00	 call	 ?CheckInvisibleCloak@ioBuff@@IAEX_N@Z ; ioBuff::CheckInvisibleCloak

; 129  : 	CheckInvisibleHelmet( false );

  00024	57		 push	 edi
  00025	8b ce		 mov	 ecx, esi
  00027	e8 00 00 00 00	 call	 ?CheckInvisibleHelmet@ioBuff@@IAEX_N@Z ; ioBuff::CheckInvisibleHelmet

; 130  : 
; 131  : 	CheckChangeSkill( true );

  0002c	6a 01		 push	 1
  0002e	8b ce		 mov	 ecx, esi
  00030	e8 00 00 00 00	 call	 ?CheckChangeSkill@ioBuff@@IAEX_N@Z ; ioBuff::CheckChangeSkill

; 132  : 
; 133  : 	CheckChangeColor( true );

  00035	6a 01		 push	 1
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?CheckChangeColor@ioBuff@@IAEX_N@Z ; ioBuff::CheckChangeColor

; 134  : 	CheckBuffDesc();

  0003e	8b ce		 mov	 ecx, esi
  00040	e8 00 00 00 00	 call	 ?CheckBuffDesc@ioBuff@@IAEXXZ ; ioBuff::CheckBuffDesc

; 135  : 
; 136  : 	if( m_CreatorLookType != CLT_NONE && !m_CreateChar.IsEmpty() )

  00045	39 be f4 08 00
	00		 cmp	 DWORD PTR [esi+2292], edi
  0004b	74 3c		 je	 SHORT $LN3@SetAction
  0004d	8d be 88 02 00
	00		 lea	 edi, DWORD PTR [esi+648]
  00053	8b cf		 mov	 ecx, edi
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0005b	84 c0		 test	 al, al
  0005d	75 2a		 jne	 SHORT $LN3@SetAction

; 137  : 	{
; 138  : 		if( m_CreateChar != m_pOwner->GetCharName() )

  0005f	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  00065	05 d4 02 00 00	 add	 eax, 724		; 000002d4H
  0006a	50		 push	 eax
  0006b	8b cf		 mov	 ecx, edi
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??9ioHashString@@QBE_NABV0@@Z
  00073	84 c0		 test	 al, al
  00075	74 12		 je	 SHORT $LN3@SetAction

; 139  : 			m_pOwner->RotateByBuffCollision( m_CreateChar, m_CreatorLookType );

  00077	ff b6 f4 08 00
	00		 push	 DWORD PTR [esi+2292]
  0007d	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00083	57		 push	 edi
  00084	e8 00 00 00 00	 call	 ?RotateByBuffCollision@ioBaseChar@@QAEXABVioHashString@@H@Z ; ioBaseChar::RotateByBuffCollision
$LN3@SetAction:

; 140  : 	}
; 141  : 
; 142  : 	m_pOwner->AttachEffect( m_BuffEffect, GetEffectEventOwner() );

  00089	6a 01		 push	 1
  0008b	8b ce		 mov	 ecx, esi
  0008d	e8 00 00 00 00	 call	 ?GetEffectEventOwner@ioBuff@@IAEPAVioBaseChar@@XZ ; ioBuff::GetEffectEventOwner
  00092	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00098	50		 push	 eax
  00099	8d 86 7c 05 00
	00		 lea	 eax, DWORD PTR [esi+1404]
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 ?AttachEffect@ioBaseChar@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@_N@Z ; ioBaseChar::AttachEffect

; 143  : 
; 144  : 	if( !m_LoopSound.IsEmpty() )

  000a5	8d be fc 05 00
	00		 lea	 edi, DWORD PTR [esi+1532]
  000ab	8b cf		 mov	 ecx, edi
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  000b3	84 c0		 test	 al, al
  000b5	75 27		 jne	 SHORT $LN9@SetAction

; 145  : 	{
; 146  : 		m_LoopSoundID = m_pOwner->PlaySound( m_LoopSound, true );

  000b7	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  000bd	6a 01		 push	 1
  000bf	57		 push	 edi
  000c0	e8 00 00 00 00	 call	 ?PlaySoundA@ioGameEntity@@QAEKABVioHashString@@_N@Z ; ioGameEntity::PlaySoundA
  000c5	89 86 0c 06 00
	00		 mov	 DWORD PTR [esi+1548], eax

; 147  : 		m_bLoopSoundPlayed = true;

  000cb	8d 45 eb	 lea	 eax, DWORD PTR _value$526234[ebp]
  000ce	50		 push	 eax
  000cf	8d 8e 60 08 00
	00		 lea	 ecx, DWORD PTR [esi+2144]
  000d5	c6 45 eb 01	 mov	 BYTE PTR _value$526234[ebp], 1
  000d9	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool
$LN9@SetAction:

; 148  : 	}
; 149  : 
; 150  : 	if( m_bEnableOutLine )

  000de	80 be 80 09 00
	00 00		 cmp	 BYTE PTR [esi+2432], 0
  000e5	74 64		 je	 SHORT $LN1@SetAction

; 151  : 	{
; 152  : 		D3DCOLORVALUE kColor;
; 153  : 		Help::InitColorValue( kColor, m_fOutLineR, m_fOutLineG, m_fOutLineB, m_fOutLineAlpha );

  000e7	f3 0f 10 86 78
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2424]
  000ef	83 ec 10	 sub	 esp, 16			; 00000010H
  000f2	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  000f8	f3 0f 10 86 74
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2420]
  00100	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00106	f3 0f 10 86 70
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2416]
  0010e	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00114	f3 0f 10 86 6c
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2412]
  0011c	8d 45 ec	 lea	 eax, DWORD PTR _kColor$523832[ebp]
  0011f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ?InitColorValue@Help@@YAXAAU_D3DCOLORVALUE@@MMMM@Z ; Help::InitColorValue

; 154  : 		m_pOwner->ApplyOutLineChange( COT_BUFF_PROTECTION, kColor, m_fOutLineThickness );

  0012a	f3 0f 10 86 7c
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2428]
  00132	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00138	83 c4 10	 add	 esp, 16			; 00000010H
  0013b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00140	8d 45 ec	 lea	 eax, DWORD PTR _kColor$523832[ebp]
  00143	50		 push	 eax
  00144	6a 01		 push	 1
  00146	e8 00 00 00 00	 call	 ?ApplyOutLineChange@ioBaseChar@@QAEXW4ChangeOutLineType@@ABU_D3DCOLORVALUE@@M@Z ; ioBaseChar::ApplyOutLineChange
$LN1@SetAction:

; 155  : 	}
; 156  : 
; 157  : 	m_bBuffStart = true;
; 158  : }

  0014b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014e	5f		 pop	 edi
  0014f	c6 86 d5 02 00
	00 01		 mov	 BYTE PTR [esi+725], 1
  00156	33 cd		 xor	 ecx, ebp
  00158	5e		 pop	 esi
  00159	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015e	c9		 leave
  0015f	c3		 ret	 0
?SetAction@ioRangeProtectionBuff@@MAEXXZ ENDP		; ioRangeProtectionBuff::SetAction
_TEXT	ENDS
EXTRN	?CheckEnableDelayState@ioBuff@@IAE_NXZ:PROC	; ioBuff::CheckEnableDelayState
; Function compile flags: /Ogsp
;	COMDAT ?ProcessDelay@ioRangeProtectionBuff@@MAEXM@Z
_TEXT	SEGMENT
_value$526249 = -4					; size = 4
_value$526245 = -4					; size = 4
_value$526241 = -4					; size = 4
_fTimePerSec$ = 8					; size = 4
?ProcessDelay@ioRangeProtectionBuff@@MAEXM@Z PROC	; ioRangeProtectionBuff::ProcessDelay, COMDAT
; _this$ = ecx

; 198  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx

; 199  : 	DWORD dwCurTime = FRAMEGETTIME();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0000e	8b c8		 mov	 ecx, eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 200  : 
; 201  : 	if( CheckEnableDelayState() )

  00016	8b ce		 mov	 ecx, esi
  00018	8b f8		 mov	 edi, eax
  0001a	e8 00 00 00 00	 call	 ?CheckEnableDelayState@ioBuff@@IAE_NXZ ; ioBuff::CheckEnableDelayState
  0001f	84 c0		 test	 al, al
  00021	75 76		 jne	 SHORT $LN6@ProcessDel

; 202  : 		return;
; 203  : 
; 204  : 	if( GetBuffDuration() == 0 )

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  0002a	85 c0		 test	 eax, eax
  0002c	75 25		 jne	 SHORT $LN4@ProcessDel

; 205  : 	{
; 206  : 		if( !m_bBuffStart && m_dwBuffStartTime < dwCurTime )

  0002e	38 86 d5 02 00
	00		 cmp	 BYTE PTR [esi+725], al
  00034	75 63		 jne	 SHORT $LN6@ProcessDel
  00036	8d 45 fc	 lea	 eax, DWORD PTR _value$526241[ebp]
  00039	50		 push	 eax
  0003a	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  00040	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00045	39 7d fc	 cmp	 DWORD PTR _value$526241[ebp], edi
  00048	73 4f		 jae	 SHORT $LN6@ProcessDel

; 207  : 			SetAction();

  0004a	8b 06		 mov	 eax, DWORD PTR [esi]
  0004c	8b ce		 mov	 ecx, esi
  0004e	ff 50 34	 call	 DWORD PTR [eax+52]

; 208  : 		return;

  00051	eb 46		 jmp	 SHORT $LN6@ProcessDel
$LN4@ProcessDel:

; 209  : 	}
; 210  : 
; 211  : 	if( !m_bBuffStart && m_dwBuffStartTime < dwCurTime )

  00053	80 be d5 02 00
	00 00		 cmp	 BYTE PTR [esi+725], 0
  0005a	75 1b		 jne	 SHORT $LN2@ProcessDel
  0005c	8d 45 fc	 lea	 eax, DWORD PTR _value$526245[ebp]
  0005f	50		 push	 eax
  00060	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  00066	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  0006b	39 7d fc	 cmp	 DWORD PTR _value$526245[ebp], edi
  0006e	73 07		 jae	 SHORT $LN2@ProcessDel

; 212  : 		SetAction();

  00070	8b 06		 mov	 eax, DWORD PTR [esi]
  00072	8b ce		 mov	 ecx, esi
  00074	ff 50 34	 call	 DWORD PTR [eax+52]
$LN2@ProcessDel:

; 213  : 
; 214  : 	if( m_dwBuffEndTime <= dwCurTime )

  00077	8d 45 fc	 lea	 eax, DWORD PTR _value$526249[ebp]
  0007a	50		 push	 eax
  0007b	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  00081	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 215  : 	{
; 216  : 		SetReserveEndBuff();

  00086	8b ce		 mov	 ecx, esi
  00088	39 7d fc	 cmp	 DWORD PTR _value$526249[ebp], edi
  0008b	77 07		 ja	 SHORT $LN1@ProcessDel
  0008d	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 217  : 		return;

  00092	eb 05		 jmp	 SHORT $LN6@ProcessDel
$LN1@ProcessDel:

; 218  : 	}
; 219  : 
; 220  : 	CheckCallingProcess();

  00094	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess
$LN6@ProcessDel:
  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi

; 221  : }

  0009b	c9		 leave
  0009c	c2 04 00	 ret	 4
?ProcessDelay@ioRangeProtectionBuff@@MAEXM@Z ENDP	; ioRangeProtectionBuff::ProcessDelay
_TEXT	ENDS
END
