; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioWoundColorChangeBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ	; ioBaseChar::GetCharName
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ PROC	; ioBaseChar::GetCharName, COMDAT
; _this$ = ecx

; 2594 : 	inline const ioHashString& GetCharName() const { return m_Name; }

  00000	8d 81 d4 02 00
	00		 lea	 eax, DWORD PTR [ecx+724]
  00006	c3		 ret	 0
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ ENDP	; ioBaseChar::GetCharName
_TEXT	ENDS
PUBLIC	??_7ioWoundColorChangeBuff@@6B@			; ioWoundColorChangeBuff::`vftable'
PUBLIC	??0ioWoundColorChangeBuff@@QAE@XZ		; ioWoundColorChangeBuff::ioWoundColorChangeBuff
PUBLIC	??_R4ioWoundColorChangeBuff@@6B@		; ioWoundColorChangeBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioWoundColorChangeBuff@@@8		; ioWoundColorChangeBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioWoundColorChangeBuff@@8			; ioWoundColorChangeBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWoundColorChangeBuff@@8			; ioWoundColorChangeBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioWoundColorChangeBuff@@8		; ioWoundColorChangeBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioWoundColorChangeBuff@@UAEXAAVioINILoader@@@Z ; ioWoundColorChangeBuff::LoadProperty
PUBLIC	?Clone@ioWoundColorChangeBuff@@UAEPAVioBuff@@XZ	; ioWoundColorChangeBuff::Clone
PUBLIC	?StartBuff@ioWoundColorChangeBuff@@UAEXPAVioBaseChar@@@Z ; ioWoundColorChangeBuff::StartBuff
PUBLIC	?ApplyStartBuff@ioWoundColorChangeBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioWoundColorChangeBuff::ApplyStartBuff
PUBLIC	?ProcessBuff@ioWoundColorChangeBuff@@UAEXM@Z	; ioWoundColorChangeBuff::ProcessBuff
PUBLIC	?EndBuff@ioWoundColorChangeBuff@@UAEXXZ		; ioWoundColorChangeBuff::EndBuff
PUBLIC	?SetAction@ioWoundColorChangeBuff@@MAEXXZ	; ioWoundColorChangeBuff::SetAction
PUBLIC	?ProcessDelay@ioWoundColorChangeBuff@@MAEXM@Z	; ioWoundColorChangeBuff::ProcessDelay
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyExtraBuffInfo
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioWoundColorChangeBuff@@UAEPAXI@Z:PROC	; ioWoundColorChangeBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iowoundcolorchangebuff.cpp
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWoundColorChangeBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWoundColorChangeBuff@@8 DD FLAT:??_R0?AVioWoundColorChangeBuff@@@8 ; ioWoundColorChangeBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWoundColorChangeBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioWoundColorChangeBuff@@8
rdata$r	SEGMENT
??_R2ioWoundColorChangeBuff@@8 DD FLAT:??_R1A@?0A@EA@ioWoundColorChangeBuff@@8 ; ioWoundColorChangeBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioWoundColorChangeBuff@@8
rdata$r	SEGMENT
??_R3ioWoundColorChangeBuff@@8 DD 00H			; ioWoundColorChangeBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioWoundColorChangeBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWoundColorChangeBuff@@@8
_DATA	SEGMENT
??_R0?AVioWoundColorChangeBuff@@@8 DD FLAT:??_7type_info@@6B@ ; ioWoundColorChangeBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWoundColorChangeBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioWoundColorChangeBuff@@6B@
rdata$r	SEGMENT
??_R4ioWoundColorChangeBuff@@6B@ DD 00H			; ioWoundColorChangeBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioWoundColorChangeBuff@@@8
	DD	FLAT:??_R3ioWoundColorChangeBuff@@8
rdata$r	ENDS
;	COMDAT ??_7ioWoundColorChangeBuff@@6B@
CONST	SEGMENT
??_7ioWoundColorChangeBuff@@6B@ DD FLAT:??_R4ioWoundColorChangeBuff@@6B@ ; ioWoundColorChangeBuff::`vftable'
	DD	FLAT:?LoadProperty@ioWoundColorChangeBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioWoundColorChangeBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioWoundColorChangeBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioWoundColorChangeBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioWoundColorChangeBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioWoundColorChangeBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioWoundColorChangeBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioWoundColorChangeBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioWoundColorChangeBuff@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0ioWoundColorChangeBuff@@QAE@XZ
_TEXT	SEGMENT
??0ioWoundColorChangeBuff@@QAE@XZ PROC			; ioWoundColorChangeBuff::ioWoundColorChangeBuff, COMDAT
; _this$ = ecx

; 12   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff

; 13   : 	m_dwWoundStartTime = 0;

  00008	83 a6 6c 09 00
	00 00		 and	 DWORD PTR [esi+2412], 0
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioWoundColorChangeBuff@@6B@

; 14   : }

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c3		 ret	 0
??0ioWoundColorChangeBuff@@QAE@XZ ENDP			; ioWoundColorChangeBuff::ioWoundColorChangeBuff
_TEXT	ENDS
PUBLIC	??0ioWoundColorChangeBuff@@QAE@ABV0@@Z		; ioWoundColorChangeBuff::ioWoundColorChangeBuff
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
; Function compile flags: /Ogsp
;	COMDAT ??0ioWoundColorChangeBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??0ioWoundColorChangeBuff@@QAE@ABV0@@Z PROC		; ioWoundColorChangeBuff::ioWoundColorChangeBuff, COMDAT
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioWoundColorChangeBuff@@6B@
  00016	8b 87 70 09 00
	00		 mov	 eax, DWORD PTR [edi+2416]

; 20   : 	m_dwWoundStartTime = 0;

  0001c	83 a6 6c 09 00
	00 00		 and	 DWORD PTR [esi+2412], 0
  00023	89 86 70 09 00
	00		 mov	 DWORD PTR [esi+2416], eax
  00029	5f		 pop	 edi

; 21   : }

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??0ioWoundColorChangeBuff@@QAE@ABV0@@Z ENDP		; ioWoundColorChangeBuff::ioWoundColorChangeBuff
_TEXT	ENDS
PUBLIC	??1ioWoundColorChangeBuff@@UAE@XZ		; ioWoundColorChangeBuff::~ioWoundColorChangeBuff
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
; Function compile flags: /Ogsp
;	COMDAT ??1ioWoundColorChangeBuff@@UAE@XZ
_TEXT	SEGMENT
??1ioWoundColorChangeBuff@@UAE@XZ PROC			; ioWoundColorChangeBuff::~ioWoundColorChangeBuff, COMDAT
; _this$ = ecx

; 24   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioWoundColorChangeBuff@@6B@

; 25   : }

  00006	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
??1ioWoundColorChangeBuff@@UAE@XZ ENDP			; ioWoundColorChangeBuff::~ioWoundColorChangeBuff
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioWoundColorChangeBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioWoundColorChangeBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioWoundColorChangeBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioWoundColorChangeBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioWoundColorChangeBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T524320 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioWoundColorChangeBuff@@UAEPAVioBuff@@XZ PROC	; ioWoundColorChangeBuff::Clone, COMDAT
; _this$ = ecx

; 35   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioWoundColorChangeBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 36   : 	return new ioWoundColorChangeBuff( *this );

  0000e	68 74 09 00 00	 push	 2420			; 00000974H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T524320[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioWoundColorChangeBuff@@QAE@ABV0@@Z ; ioWoundColorChangeBuff::ioWoundColorChangeBuff
$LN3@Clone:

; 37   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioWoundColorChangeBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T524320[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioWoundColorChangeBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioWoundColorChangeBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioWoundColorChangeBuff@@UAEPAVioBuff@@XZ ENDP	; ioWoundColorChangeBuff::Clone
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
; Function compile flags: /Ogsp
;	COMDAT ?EndBuff@ioWoundColorChangeBuff@@UAEXXZ
_TEXT	SEGMENT
?EndBuff@ioWoundColorChangeBuff@@UAEXXZ PROC		; ioWoundColorChangeBuff::EndBuff, COMDAT
; _this$ = ecx

; 130  : 	ioBuff::EndBuff();

  00000	e9 00 00 00 00	 jmp	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff
?EndBuff@ioWoundColorChangeBuff@@UAEXXZ ENDP		; ioWoundColorChangeBuff::EndBuff
_TEXT	ENDS
EXTRN	?EndEffect@ioBaseChar@@QAEXABVioHashString@@_N1@Z:PROC ; ioBaseChar::EndEffect
EXTRN	?CheckChangeColor@ioBuff@@IAEX_N@Z:PROC		; ioBuff::CheckChangeColor
EXTRN	?CheckCallingAreaWeapon@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingAreaWeapon
EXTRN	?ProcessBuff@ioBuff@@UAEXM@Z:PROC		; ioBuff::ProcessBuff
EXTRN	?CheckCallingProcess@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingProcess
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
EXTRN	?CheckSwitchType@ioBuff@@IAE_NM@Z:PROC		; ioBuff::CheckSwitchType
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?ProcessBuff@ioWoundColorChangeBuff@@UAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioWoundColorChangeBuff@@UAEXM@Z PROC	; ioWoundColorChangeBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 135  : 	DWORD dwCurTime = FRAMEGETTIME();

  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0000d	8b c8		 mov	 ecx, eax
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00015	8b d8		 mov	 ebx, eax

; 136  : 
; 137  : 	switch( m_iOperationType )

  00017	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  0001d	83 e8 00	 sub	 eax, 0
  00020	74 57		 je	 SHORT $LN3@ProcessBuf
  00022	48		 dec	 eax
  00023	74 40		 je	 SHORT $LN4@ProcessBuf
  00025	48		 dec	 eax
  00026	74 17		 je	 SHORT $LN7@ProcessBuf
  00028	48		 dec	 eax
  00029	75 55		 jne	 SHORT $LN8@ProcessBuf

; 148  : 	case OT_DELAY:
; 149  : 		ProcessDelay( fTimePerSec );

  0002b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	51		 push	 ecx
  00033	8b ce		 mov	 ecx, esi
  00035	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003a	ff 50 38	 call	 DWORD PTR [eax+56]

; 150  : 		break;

  0003d	eb 41		 jmp	 SHORT $LN8@ProcessBuf
$LN7@ProcessBuf:

; 138  : 	{
; 139  : 	case OT_SWITCH:
; 140  : 		if( !CheckSwitchType( fTimePerSec ) )

  0003f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00044	51		 push	 ecx
  00045	8b ce		 mov	 ecx, esi
  00047	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004c	e8 00 00 00 00	 call	 ?CheckSwitchType@ioBuff@@IAE_NM@Z ; ioBuff::CheckSwitchType

; 141  : 		{
; 142  : 			SetReserveEndBuff();

  00051	8b ce		 mov	 ecx, esi
  00053	84 c0		 test	 al, al
  00055	75 07		 jne	 SHORT $LN6@ProcessBuf
  00057	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 143  : 			return;

  0005c	eb 62		 jmp	 SHORT $LN1@ProcessBuf
$LN6@ProcessBuf:

; 144  : 		}
; 145  : 
; 146  : 		CheckCallingProcess();

  0005e	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 147  : 		break;

  00063	eb 1b		 jmp	 SHORT $LN8@ProcessBuf
$LN4@ProcessBuf:

; 151  : 	case OT_ACTIVE:
; 152  : 		ioBuff::ProcessBuff( fTimePerSec );

  00065	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  0006a	51		 push	 ecx
  0006b	8b ce		 mov	 ecx, esi
  0006d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00072	e8 00 00 00 00	 call	 ?ProcessBuff@ioBuff@@UAEXM@Z ; ioBuff::ProcessBuff

; 153  : 		break;

  00077	eb 07		 jmp	 SHORT $LN8@ProcessBuf
$LN3@ProcessBuf:

; 154  : 	case OT_PASSIVE:
; 155  : 		CheckCallingAreaWeapon();

  00079	8b ce		 mov	 ecx, esi
  0007b	e8 00 00 00 00	 call	 ?CheckCallingAreaWeapon@ioBuff@@IAEXXZ ; ioBuff::CheckCallingAreaWeapon
$LN8@ProcessBuf:

; 156  : 		break;
; 157  : 	}
; 158  : 
; 159  : 	//
; 160  : 	if( m_dwWoundStartTime > 0 && m_dwWoundEffectDuration > 0 )

  00080	8b 8e 6c 09 00
	00		 mov	 ecx, DWORD PTR [esi+2412]
  00086	85 c9		 test	 ecx, ecx
  00088	74 36		 je	 SHORT $LN1@ProcessBuf
  0008a	8b 96 70 09 00
	00		 mov	 edx, DWORD PTR [esi+2416]
  00090	85 d2		 test	 edx, edx
  00092	74 2c		 je	 SHORT $LN1@ProcessBuf

; 161  : 	{
; 162  : 		if( m_dwWoundStartTime+m_dwWoundEffectDuration < dwCurTime )

  00094	03 d1		 add	 edx, ecx
  00096	3b d3		 cmp	 edx, ebx
  00098	73 26		 jae	 SHORT $LN1@ProcessBuf

; 163  : 		{
; 164  : 			m_dwWoundStartTime = 0;

  0009a	83 a6 6c 09 00
	00 00		 and	 DWORD PTR [esi+2412], 0

; 165  : 
; 166  : 			CheckChangeColor( false );

  000a1	6a 00		 push	 0
  000a3	8b ce		 mov	 ecx, esi
  000a5	e8 00 00 00 00	 call	 ?CheckChangeColor@ioBuff@@IAEX_N@Z ; ioBuff::CheckChangeColor

; 167  : 			m_pOwner->EndEffect( m_BuffEffect, false );

  000aa	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  000b0	6a 01		 push	 1
  000b2	6a 00		 push	 0
  000b4	8d 86 7c 05 00
	00		 lea	 eax, DWORD PTR [esi+1404]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ?EndEffect@ioBaseChar@@QAEXABVioHashString@@_N1@Z ; ioBaseChar::EndEffect
$LN1@ProcessBuf:
  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx

; 168  : 		}
; 169  : 	}
; 170  : }

  000c2	5d		 pop	 ebp
  000c3	c2 04 00	 ret	 4
?ProcessBuff@ioWoundColorChangeBuff@@UAEXM@Z ENDP	; ioWoundColorChangeBuff::ProcessBuff
_TEXT	ENDS
PUBLIC	?ApplyWoundState@ioWoundColorChangeBuff@@QAEXXZ	; ioWoundColorChangeBuff::ApplyWoundState
EXTRN	?AttachEffect@ioBaseChar@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@_N@Z:PROC ; ioBaseChar::AttachEffect
EXTRN	?GetEffectEventOwner@ioBuff@@IAEPAVioBaseChar@@XZ:PROC ; ioBuff::GetEffectEventOwner
; Function compile flags: /Ogsp
;	COMDAT ?ApplyWoundState@ioWoundColorChangeBuff@@QAEXXZ
_TEXT	SEGMENT
?ApplyWoundState@ioWoundColorChangeBuff@@QAEXXZ PROC	; ioWoundColorChangeBuff::ApplyWoundState, COMDAT
; _this$ = ecx

; 199  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 200  : 	DWORD dwCurTime = FRAMEGETTIME();

  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0000a	8b c8		 mov	 ecx, eax
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 201  : 	
; 202  : 	m_dwWoundStartTime = dwCurTime;
; 203  : 
; 204  : 	CheckChangeColor( true );

  00012	6a 01		 push	 1
  00014	8b ce		 mov	 ecx, esi
  00016	89 86 6c 09 00
	00		 mov	 DWORD PTR [esi+2412], eax
  0001c	e8 00 00 00 00	 call	 ?CheckChangeColor@ioBuff@@IAEX_N@Z ; ioBuff::CheckChangeColor

; 205  : 
; 206  : 	m_pOwner->EndEffect( m_BuffEffect, false );

  00021	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00027	6a 01		 push	 1
  00029	6a 00		 push	 0
  0002b	8d be 7c 05 00
	00		 lea	 edi, DWORD PTR [esi+1404]
  00031	57		 push	 edi
  00032	e8 00 00 00 00	 call	 ?EndEffect@ioBaseChar@@QAEXABVioHashString@@_N1@Z ; ioBaseChar::EndEffect

; 207  : 	m_pOwner->AttachEffect( m_BuffEffect, GetEffectEventOwner() );

  00037	6a 01		 push	 1
  00039	8b ce		 mov	 ecx, esi
  0003b	e8 00 00 00 00	 call	 ?GetEffectEventOwner@ioBuff@@IAEPAVioBaseChar@@XZ ; ioBuff::GetEffectEventOwner
  00040	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00046	50		 push	 eax
  00047	57		 push	 edi
  00048	e8 00 00 00 00	 call	 ?AttachEffect@ioBaseChar@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@_N@Z ; ioBaseChar::AttachEffect
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi

; 208  : }

  0004f	c3		 ret	 0
?ApplyWoundState@ioWoundColorChangeBuff@@QAEXXZ ENDP	; ioWoundColorChangeBuff::ApplyWoundState
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetTypeID@ioBuff@@QBEHXZ			; ioBuff::GetTypeID
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
;	COMDAT ?GetTypeID@ioBuff@@QBEHXZ
_TEXT	SEGMENT
?GetTypeID@ioBuff@@QBEHXZ PROC				; ioBuff::GetTypeID, COMDAT
; _this$ = ecx

; 424  : 	inline int GetTypeID() const { return m_iBuffType; }

  00000	8b 81 cc 03 00
	00		 mov	 eax, DWORD PTR [ecx+972]
  00006	c3		 ret	 0
?GetTypeID@ioBuff@@QBEHXZ ENDP				; ioBuff::GetTypeID
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z	; CEncrypt<unsigned long>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z PROC	; CEncrypt<unsigned long>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ENDP	; CEncrypt<unsigned long>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z	; CEncrypt<unsigned long>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z PROC	; CEncrypt<unsigned long>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1256 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1257 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1258 : 		*value = *((DWORD*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 1259 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ENDP	; CEncrypt<unsigned long>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z	; CEncrypt<bool>::EncryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z PROC	; CEncrypt<bool>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal@2
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal@2:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ENDP	; CEncrypt<bool>::EncryptValueToPool
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioWoundColorChangeBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioWoundColorChangeBuff@@UAEPAXI@Z PROC		; ioWoundColorChangeBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioWoundColorChangeBuff@@6B@
  0000c	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 07		 je	 SHORT $LN1@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	59		 pop	 ecx
$LN1@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??_GioWoundColorChangeBuff@@UAEPAXI@Z ENDP		; ioWoundColorChangeBuff::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??G?$CEncrypt@K@@QAEKABK@Z			; CEncrypt<unsigned long>::operator-
; Function compile flags: /Ogsp
;	COMDAT ??G?$CEncrypt@K@@QAEKABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??G?$CEncrypt@K@@QAEKABK@Z PROC				; CEncrypt<unsigned long>::operator-, COMDAT
; _this$ = ecx

; 1274 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1275 : 		
; 1276 : 		type value;
; 1277 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1278 : #ifdef _NOTUSE
; 1279 : 		Debug();
; 1280 : #endif
; 1281 : 		return value - inValue;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _inValue$[ebp]
  00013	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1282 : 	}

  00015	c9		 leave
  00016	c2 04 00	 ret	 4
??G?$CEncrypt@K@@QAEKABK@Z ENDP				; CEncrypt<unsigned long>::operator-
_TEXT	ENDS
PUBLIC	??H?$CEncrypt@K@@QAEKABK@Z			; CEncrypt<unsigned long>::operator+
; Function compile flags: /Ogsp
;	COMDAT ??H?$CEncrypt@K@@QAEKABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??H?$CEncrypt@K@@QAEKABK@Z PROC				; CEncrypt<unsigned long>::operator+, COMDAT
; _this$ = ecx

; 1285 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1286 : 		type value;
; 1287 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1288 : #ifdef _NOTUSE
; 1289 : 		Debug();
; 1290 : #endif
; 1291 : 		return value + inValue;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	03 45 fc	 add	 eax, DWORD PTR _value$[ebp]

; 1292 : 	}

  00015	c9		 leave
  00016	c2 04 00	 ret	 4
??H?$CEncrypt@K@@QAEKABK@Z ENDP				; CEncrypt<unsigned long>::operator+
_TEXT	ENDS
PUBLIC	??Y?$CEncrypt@K@@QAEAAKABK@Z			; CEncrypt<unsigned long>::operator+=
; Function compile flags: /Ogsp
;	COMDAT ??Y?$CEncrypt@K@@QAEAAKABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??Y?$CEncrypt@K@@QAEAAKABK@Z PROC			; CEncrypt<unsigned long>::operator+=, COMDAT
; _this$ = ecx

; 1325 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 1326 : 		type value;
; 1327 : 		DecryptValueToPool(&value);

  00005	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00008	50		 push	 eax
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1328 : 		value += inValue;

  00010	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00013	8b 00		 mov	 eax, DWORD PTR [eax]
  00015	01 45 fc	 add	 DWORD PTR _value$[ebp], eax

; 1329 : 		EncryptValueToPool((char*)&value);

  00018	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  0001b	50		 push	 eax
  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 1330 : #ifdef _NOTUSE
; 1331 : 		m_value += inValue;
; 1332 : 		Debug();
; 1333 : #endif
; 1334 : 		return value;

  00023	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00026	5e		 pop	 esi

; 1335 : 	} 

  00027	c9		 leave
  00028	c2 04 00	 ret	 4
??Y?$CEncrypt@K@@QAEAAKABK@Z ENDP			; CEncrypt<unsigned long>::operator+=
_TEXT	ENDS
PUBLIC	??M?$CEncrypt@K@@QAE_NABK@Z			; CEncrypt<unsigned long>::operator<
; Function compile flags: /Ogsp
;	COMDAT ??M?$CEncrypt@K@@QAE_NABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??M?$CEncrypt@K@@QAE_NABK@Z PROC			; CEncrypt<unsigned long>::operator<, COMDAT
; _this$ = ecx

; 1401 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1402 : 		type value;
; 1403 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1404 : #ifdef _NOTUSE
; 1405 : 		Debug();
; 1406 : #endif
; 1407 : 		return (value < inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _value$[ebp]
  00013	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00015	1b c0		 sbb	 eax, eax
  00017	f7 d8		 neg	 eax

; 1408 : 	} 

  00019	c9		 leave
  0001a	c2 04 00	 ret	 4
??M?$CEncrypt@K@@QAE_NABK@Z ENDP			; CEncrypt<unsigned long>::operator<
_TEXT	ENDS
PUBLIC	??N?$CEncrypt@K@@QAE_NABK@Z			; CEncrypt<unsigned long>::operator<=
; Function compile flags: /Ogsp
;	COMDAT ??N?$CEncrypt@K@@QAE_NABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??N?$CEncrypt@K@@QAE_NABK@Z PROC			; CEncrypt<unsigned long>::operator<=, COMDAT
; _this$ = ecx

; 1431 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1432 : 		
; 1433 : 		type value;
; 1434 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1435 : #ifdef _NOTUSE
; 1436 : 		Debug();
; 1437 : #endif
; 1438 : 		return (value <= inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	3b 45 fc	 cmp	 eax, DWORD PTR _value$[ebp]
  00015	1b c0		 sbb	 eax, eax
  00017	40		 inc	 eax

; 1439 : 	}		

  00018	c9		 leave
  00019	c2 04 00	 ret	 4
??N?$CEncrypt@K@@QAE_NABK@Z ENDP			; CEncrypt<unsigned long>::operator<=
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BG@@ioINILoader@@QAEHAAY0BG@$$CBDH@Z ; ioINILoader::LoadInt_e<22>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadInt_e@$0BG@@ioINILoader@@QAEHAAY0BG@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -32						; size = 22
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BG@@ioINILoader@@QAEHAAY0BG@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<22>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 15 02 00
	00		 je	 $LN96@LoadInt_e
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 fe 01 00
	00		 je	 $LN95@LoadInt_e
  00032	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00035	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 e7 01 00
	00		 je	 $LN94@LoadInt_e
  00043	b1 eb		 mov	 cl, -21			; ffffffebH
  00045	32 d1		 xor	 dl, cl
  00047	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 cf 01 00
	00		 je	 $LN93@LoadInt_e
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 b7 01 00
	00		 je	 $LN92@LoadInt_e
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 a0 01 00
	00		 je	 $LN91@LoadInt_e
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 8a 01 00
	00		 je	 $LN90@LoadInt_e
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 75 01 00
	00		 je	 $LN89@LoadInt_e
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 5f 01 00
	00		 je	 $LN88@LoadInt_e
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 48 01 00
	00		 je	 $LN87@LoadInt_e
  000ba	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bd	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	0f 84 32 01 00
	00		 je	 $LN86@LoadInt_e
  000cb	32 d1		 xor	 dl, cl
  000cd	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 1d 01 00
	00		 je	 $LN85@LoadInt_e
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 07 01 00
	00		 je	 $LN84@LoadInt_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 f0 00 00
	00		 je	 $LN83@LoadInt_e
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 da 00 00
	00		 je	 $LN82@LoadInt_e
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 c5 00 00
	00		 je	 $LN81@LoadInt_e
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 af 00 00
	00		 je	 $LN80@LoadInt_e
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 98 00 00
	00		 je	 $LN79@LoadInt_e
  0013e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00141	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00147	84 d2		 test	 dl, dl
  00149	0f 84 82 00 00
	00		 je	 $LN78@LoadInt_e
  0014f	32 d1		 xor	 dl, cl
  00151	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	74 71		 je	 SHORT $LN77@LoadInt_e
  0015b	32 d3		 xor	 dl, bl
  0015d	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00160	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00163	84 d2		 test	 dl, dl
  00165	74 5f		 je	 SHORT $LN76@LoadInt_e
  00167	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016a	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0016e	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00171	0f 84 c3 00 00
	00		 je	 $LN1@LoadInt_e
  00177	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0017a	84 d2		 test	 dl, dl
  0017c	74 43		 je	 SHORT $LN74@LoadInt_e
  0017e	32 d1		 xor	 dl, cl
  00180	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00183	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00186	84 d2		 test	 dl, dl
  00188	74 32		 je	 SHORT $LN73@LoadInt_e
  0018a	32 d3		 xor	 dl, bl
  0018c	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  0018f	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  00192	84 d2		 test	 dl, dl
  00194	74 20		 je	 SHORT $LN72@LoadInt_e
  00196	8a 40 19	 mov	 al, BYTE PTR [eax+25]
  00199	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0019c	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  0019f	84 c0		 test	 al, al
  001a1	74 0a		 je	 SHORT $LN71@LoadInt_e
  001a3	34 ec		 xor	 al, -20			; ffffffecH
  001a5	88 45 f9	 mov	 BYTE PTR __k$[ebp+25], al
  001a8	e9 8d 00 00 00	 jmp	 $LN1@LoadInt_e
$LN71@LoadInt_e:
  001ad	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+25], -20 ; ffffffecH
  001b1	e9 84 00 00 00	 jmp	 $LN1@LoadInt_e
$LN72@LoadInt_e:
  001b6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ba	eb 7e		 jmp	 SHORT $LN1@LoadInt_e
$LN73@LoadInt_e:
  001bc	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001bf	eb 79		 jmp	 SHORT $LN1@LoadInt_e
$LN74@LoadInt_e:
  001c1	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001c4	eb 74		 jmp	 SHORT $LN1@LoadInt_e
$LN76@LoadInt_e:
  001c6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001ca	eb 6e		 jmp	 SHORT $LN1@LoadInt_e
$LN77@LoadInt_e:
  001cc	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001cf	eb 69		 jmp	 SHORT $LN1@LoadInt_e
$LN78@LoadInt_e:
  001d1	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  001d4	eb 64		 jmp	 SHORT $LN1@LoadInt_e
$LN79@LoadInt_e:
  001d6	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  001da	eb 5e		 jmp	 SHORT $LN1@LoadInt_e
$LN80@LoadInt_e:
  001dc	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001e0	eb 58		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  001e2	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001e5	eb 53		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  001e7	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  001ea	eb 4e		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  001ec	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  001f0	eb 48		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  001f2	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001f6	eb 42		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  001f8	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  001fb	eb 3d		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  001fd	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00200	eb 38		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  00202	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00206	eb 32		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  00208	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0020c	eb 2c		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  0020e	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00211	eb 27		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  00213	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00216	eb 22		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  00218	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0021c	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  0021e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00222	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  00224	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00228	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  0022a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0022e	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  00230	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00234	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  00236	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  0023a	6a 05		 push	 5
  0023c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0023f	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+21], 0
  00243	5a		 pop	 edx
$LL104@LoadInt_e:
  00244	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0024a	83 c0 04	 add	 eax, 4
  0024d	4a		 dec	 edx
  0024e	75 f4		 jne	 SHORT $LL104@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  00250	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00253	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00257	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0025a	50		 push	 eax
  0025b	8b ce		 mov	 ecx, esi
  0025d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00263	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00266	5e		 pop	 esi
  00267	33 cd		 xor	 ecx, ebp
  00269	5b		 pop	 ebx
  0026a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0026f	c9		 leave
  00270	c2 08 00	 ret	 8
??$LoadInt_e@$0BG@@ioINILoader@@QAEHAAY0BG@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<22>
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@K@@QAEKK@Z			; CEncrypt<unsigned long>::operator=
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??4?$CEncrypt@K@@QAEKK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@K@@QAEKK@Z PROC				; CEncrypt<unsigned long>::operator=, COMDAT
; _this$ = ecx

; 1262 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1263 : 		
; 1264 : 		type value = inValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 1265 : 		EncryptValueToPool((char*)&value);

  00009	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 1266 : #ifdef _NOTUSE
; 1267 : 		m_value = inValue;
; 1268 : 		Debug();
; 1269 : #endif
; 1270 : 		return value;

  00012	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 1271 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@K@@QAEKK@Z ENDP				; CEncrypt<unsigned long>::operator=
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@_N@@QAE_N_N@Z			; CEncrypt<bool>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@_N@@QAE_N_N@Z
_TEXT	SEGMENT
_inValue$ = 8						; size = 1
_value$ = 11						; size = 1
??4?$CEncrypt@_N@@QAE_N_N@Z PROC			; CEncrypt<bool>::operator=, COMDAT
; _this$ = ecx

; 225  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 226  : 		type value = inValue;

  00003	8a 45 08	 mov	 al, BYTE PTR _inValue$[ebp]
  00006	88 45 0b	 mov	 BYTE PTR _value$[ebp], al

; 227  : 		EncryptValueToPool((char*)&value);

  00009	8d 45 0b	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 228  : #ifdef _NOTUSE
; 229  : 		m_value = inValue;
; 230  : 		Debug();
; 231  : #endif
; 232  : 		return value;

  00012	8a 45 0b	 mov	 al, BYTE PTR _value$[ebp]

; 233  : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@_N@@QAE_N_N@Z ENDP			; CEncrypt<bool>::operator=
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iowoundcolorchangebuff.cpp
;	COMDAT ?LoadProperty@ioWoundColorChangeBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
__k$524442 = -32					; size = 22
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioWoundColorChangeBuff@@UAEXAAVioINILoader@@@Z PROC ; ioWoundColorChangeBuff::LoadProperty, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _rkLoader$[ebp]
  00014	57		 push	 edi

; 29   : 	ioBuff::LoadProperty( rkLoader );

  00015	56		 push	 esi
  00016	8b f9		 mov	 edi, ecx
  00018	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty

; 30   : 
; 31   : 	m_dwWoundEffectDuration = (DWORD)rkLoader.LoadInt_e( "wound_effect_duration", 0 );

  0001d	6a 05		 push	 5
  0001f	c7 45 e0 9a 83
	9e 84		 mov	 DWORD PTR __k$524442[ebp], -2069986406 ; 849e839aH
  00026	c7 45 e4 89 b3
	8e 8c		 mov	 DWORD PTR __k$524442[ebp+4], -1936804983 ; 8c8eb389H
  0002d	c7 45 e8 8b 89
	88 9e		 mov	 DWORD PTR __k$524442[ebp+8], -1635219061 ; 9e88898bH
  00034	c7 45 ec b2 88
	9e 98		 mov	 DWORD PTR __k$524442[ebp+12], -1734440782 ; 989e88b2H
  0003b	c7 45 f0 8c 98
	82 85		 mov	 DWORD PTR __k$524442[ebp+16], -2055038836 ; 8582988cH
  00042	8d 45 e0	 lea	 eax, DWORD PTR __k$524442[ebp]
  00045	66 c7 45 f4 83
	00		 mov	 WORD PTR __k$524442[ebp+20], 131 ; 00000083H
  0004b	59		 pop	 ecx
$LL106@LoadProper:
  0004c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00052	83 c0 04	 add	 eax, 4
  00055	49		 dec	 ecx
  00056	75 f4		 jne	 SHORT $LL106@LoadProper
  00058	80 75 f4 ed	 xor	 BYTE PTR __k$524442[ebp+20], -19 ; ffffffedH
  0005c	51		 push	 ecx
  0005d	8d 45 e0	 lea	 eax, DWORD PTR __k$524442[ebp]
  00060	50		 push	 eax
  00061	8b ce		 mov	 ecx, esi
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 32   : }

  00069	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006c	89 87 70 09 00
	00		 mov	 DWORD PTR [edi+2416], eax
  00072	5f		 pop	 edi
  00073	33 cd		 xor	 ecx, ebp
  00075	5e		 pop	 esi
  00076	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007b	c9		 leave
  0007c	c2 04 00	 ret	 4
?LoadProperty@ioWoundColorChangeBuff@@UAEXAAVioINILoader@@@Z ENDP ; ioWoundColorChangeBuff::LoadProperty
_TEXT	ENDS
PUBLIC	__real@4f800000
EXTRN	?GetBuffDuration@ioBuff@@IAEKXZ:PROC		; ioBuff::GetBuffDuration
EXTRN	?GetMemberBalanceRateForStateProtectionTime@ioBaseChar@@QAEMH@Z:PROC ; ioBaseChar::GetMemberBalanceRateForStateProtectionTime
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
EXTRN	__ftol2:PROC
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iowoundcolorchangebuff.cpp
CONST	ENDS
;	COMDAT ?StartBuff@ioWoundColorChangeBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
tv155 = -8						; size = 8
tv257 = 8						; size = 4
_value$524570 = 8					; size = 4
_value$524565 = 8					; size = 4
_value$524561 = 8					; size = 4
_value$524553 = 8					; size = 4
_pOwner$ = 8						; size = 4
_value$524574 = 11					; size = 1
?StartBuff@ioWoundColorChangeBuff@@UAEXPAVioBaseChar@@@Z PROC ; ioWoundColorChangeBuff::StartBuff, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx

; 41   : #ifndef SHIPPING 
; 42   : 	if( Setting::ShowExtraInfo() )
; 43   : 	{
; 44   : 		LOG.PrintTimeAndLog( 0, "BuffCheck - %s, StartTime: %d", m_Name.c_str(), FRAMEGETTIME() );
; 45   : 	}
; 46   : #endif
; 47   : 
; 48   : 	if( !pOwner )

  00006	8b 5d 08	 mov	 ebx, DWORD PTR _pOwner$[ebp]
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	85 db		 test	 ebx, ebx
  0000e	0f 84 eb 00 00
	00		 je	 $LN1@StartBuff

; 49   : 		return;
; 50   : 
; 51   : 	DWORD dwCurTime = FRAMEGETTIME();

  00014	57		 push	 edi
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0001b	8b c8		 mov	 ecx, eax
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00023	8b f8		 mov	 edi, eax

; 52   : 	m_pOwner = pOwner;
; 53   : 	m_OwnerName = pOwner->GetCharName();

  00025	8d 83 d4 02 00
	00		 lea	 eax, DWORD PTR [ebx+724]
  0002b	50		 push	 eax
  0002c	8d 8e 78 02 00
	00		 lea	 ecx, DWORD PTR [esi+632]
  00032	89 9e 74 02 00
	00		 mov	 DWORD PTR [esi+628], ebx
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 54   : 
; 55   : 	m_dwBuffStartTime = dwCurTime;

  0003e	8d 45 08	 lea	 eax, DWORD PTR _value$524553[ebp]
  00041	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  00047	50		 push	 eax
  00048	89 7d 08	 mov	 DWORD PTR _value$524553[ebp], edi
  0004b	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 56   : 	if( m_iOperationType == OT_DELAY )

  00050	83 be d0 03 00
	00 03		 cmp	 DWORD PTR [esi+976], 3
  00057	75 12		 jne	 SHORT $LN2@StartBuff

; 57   : 	{
; 58   : 		m_dwBuffStartTime += m_dwDelayDuration;

  00059	8d 86 d8 02 00
	00		 lea	 eax, DWORD PTR [esi+728]
  0005f	50		 push	 eax
  00060	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  00066	e8 00 00 00 00	 call	 ??Y?$CEncrypt@K@@QAEAAKABK@Z ; CEncrypt<unsigned long>::operator+=
$LN2@StartBuff:

; 59   : 	}
; 60   : 
; 61   : 	DWORD dwCurDuration = GetBuffDuration() * pOwner->GetMemberBalanceRateForStateProtectionTime( GetTypeID() );

  0006b	ff b6 cc 03 00
	00		 push	 DWORD PTR [esi+972]
  00071	8b cb		 mov	 ecx, ebx
  00073	e8 00 00 00 00	 call	 ?GetMemberBalanceRateForStateProtectionTime@ioBaseChar@@QAEMH@Z ; ioBaseChar::GetMemberBalanceRateForStateProtectionTime
  00078	dd 5d f8	 fstp	 QWORD PTR tv155[ebp]
  0007b	8b ce		 mov	 ecx, esi
  0007d	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  00082	89 45 08	 mov	 DWORD PTR tv257[ebp], eax
  00085	db 45 08	 fild	 DWORD PTR tv257[ebp]
  00088	85 c0		 test	 eax, eax
  0008a	79 06		 jns	 SHORT $LN20@StartBuff
  0008c	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN20@StartBuff:
  00092	dc 4d f8	 fmul	 QWORD PTR tv155[ebp]
  00095	e8 00 00 00 00	 call	 __ftol2
  0009a	8b d8		 mov	 ebx, eax

; 62   : 	m_dwBuffEndTime = m_dwBuffStartTime + dwCurDuration;

  0009c	8d 45 08	 lea	 eax, DWORD PTR _value$524561[ebp]
  0009f	50		 push	 eax
  000a0	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  000a6	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  000ab	8b 45 08	 mov	 eax, DWORD PTR _value$524561[ebp]
  000ae	03 c3		 add	 eax, ebx
  000b0	89 45 08	 mov	 DWORD PTR _value$524565[ebp], eax
  000b3	8d 45 08	 lea	 eax, DWORD PTR _value$524565[ebp]
  000b6	50		 push	 eax
  000b7	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  000bd	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 63   : 	m_dwCheckTime = dwCurTime;

  000c2	8d 45 08	 lea	 eax, DWORD PTR _value$524570[ebp]
  000c5	50		 push	 eax
  000c6	8d 8e 3c 03 00
	00		 lea	 ecx, DWORD PTR [esi+828]
  000cc	89 7d 08	 mov	 DWORD PTR _value$524570[ebp], edi
  000cf	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 64   : 	
; 65   : 	m_bLive = true;

  000d4	8d 45 0b	 lea	 eax, DWORD PTR _value$524574[ebp]
  000d7	50		 push	 eax
  000d8	8d 8e 70 07 00
	00		 lea	 ecx, DWORD PTR [esi+1904]
  000de	c6 45 0b 01	 mov	 BYTE PTR _value$524574[ebp], 1
  000e2	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 66   : 	m_dwWoundStartTime = 0;

  000e7	83 a6 6c 09 00
	00 00		 and	 DWORD PTR [esi+2412], 0

; 67   : 
; 68   : 	if( m_iOperationType != OT_DELAY )

  000ee	83 be d0 03 00
	00 03		 cmp	 DWORD PTR [esi+976], 3
  000f5	5f		 pop	 edi
  000f6	74 07		 je	 SHORT $LN1@StartBuff

; 69   : 	{
; 70   : 		SetAction();

  000f8	8b 06		 mov	 eax, DWORD PTR [esi]
  000fa	8b ce		 mov	 ecx, esi
  000fc	ff 50 34	 call	 DWORD PTR [eax+52]
$LN1@StartBuff:
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx

; 71   : 	}
; 72   : }

  00101	c9		 leave
  00102	c2 04 00	 ret	 4
?StartBuff@ioWoundColorChangeBuff@@UAEXPAVioBaseChar@@@Z ENDP ; ioWoundColorChangeBuff::StartBuff
_TEXT	ENDS
EXTRN	?CalcGlobalGapTime@ioGlobalTimer@@QBEKK@Z:PROC	; ioGlobalTimer::CalcGlobalGapTime
EXTRN	?GetSingleton@ioGlobalTimer@@SAAAV1@XZ:PROC	; ioGlobalTimer::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioWoundColorChangeBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
tv140 = -8						; size = 8
tv248 = 8						; size = 4
_value$524602 = 8					; size = 4
_value$524597 = 8					; size = 4
_value$524593 = 8					; size = 4
_pOwner$ = 8						; size = 4
_value$524607 = 11					; size = 1
_value$524584 = 12					; size = 4
_dwCurDuration$523789 = 12				; size = 4
_dwGlobalTimeGap$ = 12					; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioWoundColorChangeBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioWoundColorChangeBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 76   : 	m_pOwner = pOwner;

  00005	8b 45 08	 mov	 eax, DWORD PTR _pOwner$[ebp]
  00008	53		 push	 ebx
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 77   : 	DWORD dwGlobalTimeGap = g_GlobalTimer.CalcGlobalGapTime( dwGlobalTime );

  0000b	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  0000e	8b f1		 mov	 esi, ecx
  00010	89 86 74 02 00
	00		 mov	 DWORD PTR [esi+628], eax
  00016	e8 00 00 00 00	 call	 ?GetSingleton@ioGlobalTimer@@SAAAV1@XZ ; ioGlobalTimer::GetSingleton
  0001b	8b c8		 mov	 ecx, eax
  0001d	e8 00 00 00 00	 call	 ?CalcGlobalGapTime@ioGlobalTimer@@QBEKK@Z ; ioGlobalTimer::CalcGlobalGapTime

; 78   : 
; 79   : 	if( m_iOperationType != OT_SWITCH )

  00022	83 be d0 03 00
	00 02		 cmp	 DWORD PTR [esi+976], 2
  00029	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0002f	89 45 0c	 mov	 DWORD PTR _dwGlobalTimeGap$[ebp], eax
  00032	0f 84 89 00 00
	00		 je	 $LN12@ApplyStart

; 80   : 	{
; 81   : 		if( dwGlobalTimeGap > dwGapTime )

  00038	8b 7d 10	 mov	 edi, DWORD PTR _dwGapTime$[ebp]
  0003b	3b c7		 cmp	 eax, edi
  0003d	76 07		 jbe	 SHORT $LN2@ApplyStart

; 82   : 			return false;

  0003f	32 c0		 xor	 al, al
  00041	e9 c3 00 00 00	 jmp	 $LN4@ApplyStart
$LN2@ApplyStart:

; 83   : 
; 84   : 		dwGapTime -= dwGlobalTimeGap;
; 85   : 		m_dwBuffEndTime = FRAMEGETTIME() + dwGapTime;

  00046	ff d3		 call	 ebx
  00048	8b c8		 mov	 ecx, eax
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00050	2b 7d 0c	 sub	 edi, DWORD PTR _dwGlobalTimeGap$[ebp]
  00053	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  00059	03 c7		 add	 eax, edi
  0005b	89 45 0c	 mov	 DWORD PTR _value$524584[ebp], eax
  0005e	8d 45 0c	 lea	 eax, DWORD PTR _value$524584[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 86   : 
; 87   : 		DWORD dwCurDuration = GetBuffDuration() * pOwner->GetMemberBalanceRateForStateProtectionTime( GetTypeID() );

  00067	ff b6 cc 03 00
	00		 push	 DWORD PTR [esi+972]
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  00070	e8 00 00 00 00	 call	 ?GetMemberBalanceRateForStateProtectionTime@ioBaseChar@@QAEMH@Z ; ioBaseChar::GetMemberBalanceRateForStateProtectionTime
  00075	dd 5d f8	 fstp	 QWORD PTR tv140[ebp]
  00078	8b ce		 mov	 ecx, esi
  0007a	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  0007f	89 45 08	 mov	 DWORD PTR tv248[ebp], eax
  00082	db 45 08	 fild	 DWORD PTR tv248[ebp]
  00085	85 c0		 test	 eax, eax
  00087	79 06		 jns	 SHORT $LN18@ApplyStart
  00089	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN18@ApplyStart:
  0008f	dc 4d f8	 fmul	 QWORD PTR tv140[ebp]
  00092	e8 00 00 00 00	 call	 __ftol2
  00097	89 45 0c	 mov	 DWORD PTR _dwCurDuration$523789[ebp], eax

; 88   : 		m_dwBuffStartTime = m_dwBuffEndTime - dwCurDuration;

  0009a	8d 45 08	 lea	 eax, DWORD PTR _value$524593[ebp]
  0009d	50		 push	 eax
  0009e	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  000a4	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  000a9	8b 45 08	 mov	 eax, DWORD PTR _value$524593[ebp]
  000ac	2b 45 0c	 sub	 eax, DWORD PTR _dwCurDuration$523789[ebp]
  000af	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  000b5	89 45 08	 mov	 DWORD PTR _value$524597[ebp], eax
  000b8	8d 45 08	 lea	 eax, DWORD PTR _value$524597[ebp]
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool
$LN12@ApplyStart:

; 89   : 	}
; 90   : 
; 91   : 	m_dwCheckTime = FRAMEGETTIME();

  000c1	ff d3		 call	 ebx
  000c3	8b c8		 mov	 ecx, eax
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  000cb	89 45 08	 mov	 DWORD PTR _value$524602[ebp], eax
  000ce	8d 45 08	 lea	 eax, DWORD PTR _value$524602[ebp]
  000d1	50		 push	 eax
  000d2	8d 8e 3c 03 00
	00		 lea	 ecx, DWORD PTR [esi+828]
  000d8	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 92   : 	m_bLive = true;

  000dd	8d 45 0b	 lea	 eax, DWORD PTR _value$524607[ebp]
  000e0	50		 push	 eax
  000e1	8d 8e 70 07 00
	00		 lea	 ecx, DWORD PTR [esi+1904]
  000e7	c6 45 0b 01	 mov	 BYTE PTR _value$524607[ebp], 1
  000eb	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 93   : 	m_dwWoundStartTime = 0;

  000f0	83 a6 6c 09 00
	00 00		 and	 DWORD PTR [esi+2412], 0

; 94   : 
; 95   : 	if( m_iOperationType != OT_DELAY )

  000f7	83 be d0 03 00
	00 03		 cmp	 DWORD PTR [esi+976], 3
  000fe	74 07		 je	 SHORT $LN1@ApplyStart

; 96   : 	{
; 97   : 		SetAction();

  00100	8b 06		 mov	 eax, DWORD PTR [esi]
  00102	8b ce		 mov	 ecx, esi
  00104	ff 50 34	 call	 DWORD PTR [eax+52]
$LN1@ApplyStart:

; 98   : 	}
; 99   : 
; 100  : 	return true;

  00107	b0 01		 mov	 al, 1
$LN4@ApplyStart:
  00109	5f		 pop	 edi
  0010a	5e		 pop	 esi
  0010b	5b		 pop	 ebx

; 101  : }

  0010c	c9		 leave
  0010d	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioWoundColorChangeBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioWoundColorChangeBuff::ApplyStartBuff
_TEXT	ENDS
EXTRN	?PlaySoundA@ioGameEntity@@QAEKABVioHashString@@_N@Z:PROC ; ioGameEntity::PlaySoundA
EXTRN	?RotateByBuffCollision@ioBaseChar@@QAEXABVioHashString@@H@Z:PROC ; ioBaseChar::RotateByBuffCollision
EXTRN	__imp_??9ioHashString@@QBE_NABV0@@Z:PROC
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	?CheckBuffDesc@ioBuff@@IAEXXZ:PROC		; ioBuff::CheckBuffDesc
EXTRN	?CheckChangeSkill@ioBuff@@IAEX_N@Z:PROC		; ioBuff::CheckChangeSkill
EXTRN	?CheckInvisibleHelmet@ioBuff@@IAEX_N@Z:PROC	; ioBuff::CheckInvisibleHelmet
EXTRN	?CheckInvisibleCloak@ioBuff@@IAEX_N@Z:PROC	; ioBuff::CheckInvisibleCloak
EXTRN	?CheckInvisibleWeapon@ioBuff@@IAEX_N@Z:PROC	; ioBuff::CheckInvisibleWeapon
; Function compile flags: /Ogsp
;	COMDAT ?SetAction@ioWoundColorChangeBuff@@MAEXXZ
_TEXT	SEGMENT
_value$524618 = -1					; size = 1
?SetAction@ioWoundColorChangeBuff@@MAEXXZ PROC		; ioWoundColorChangeBuff::SetAction, COMDAT
; _this$ = ecx

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 105  : 	CheckInvisibleWeapon( false );

  00006	33 ff		 xor	 edi, edi
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?CheckInvisibleWeapon@ioBuff@@IAEX_N@Z ; ioBuff::CheckInvisibleWeapon

; 106  : 	CheckInvisibleCloak( false );

  00010	57		 push	 edi
  00011	8b ce		 mov	 ecx, esi
  00013	e8 00 00 00 00	 call	 ?CheckInvisibleCloak@ioBuff@@IAEX_N@Z ; ioBuff::CheckInvisibleCloak

; 107  : 	CheckInvisibleHelmet( false );

  00018	57		 push	 edi
  00019	8b ce		 mov	 ecx, esi
  0001b	e8 00 00 00 00	 call	 ?CheckInvisibleHelmet@ioBuff@@IAEX_N@Z ; ioBuff::CheckInvisibleHelmet

; 108  : 
; 109  : 	CheckChangeSkill( true );

  00020	6a 01		 push	 1
  00022	8b ce		 mov	 ecx, esi
  00024	e8 00 00 00 00	 call	 ?CheckChangeSkill@ioBuff@@IAEX_N@Z ; ioBuff::CheckChangeSkill

; 110  : 
; 111  : 	CheckBuffDesc();

  00029	8b ce		 mov	 ecx, esi
  0002b	e8 00 00 00 00	 call	 ?CheckBuffDesc@ioBuff@@IAEXXZ ; ioBuff::CheckBuffDesc

; 112  : 
; 113  : 	if( m_CreatorLookType != CLT_NONE && !m_CreateChar.IsEmpty() )

  00030	39 be f4 08 00
	00		 cmp	 DWORD PTR [esi+2292], edi
  00036	74 3c		 je	 SHORT $LN2@SetAction
  00038	8d be 88 02 00
	00		 lea	 edi, DWORD PTR [esi+648]
  0003e	8b cf		 mov	 ecx, edi
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00046	84 c0		 test	 al, al
  00048	75 2a		 jne	 SHORT $LN2@SetAction

; 114  : 	{
; 115  : 		if( m_CreateChar != m_pOwner->GetCharName() )

  0004a	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  00050	05 d4 02 00 00	 add	 eax, 724		; 000002d4H
  00055	50		 push	 eax
  00056	8b cf		 mov	 ecx, edi
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??9ioHashString@@QBE_NABV0@@Z
  0005e	84 c0		 test	 al, al
  00060	74 12		 je	 SHORT $LN2@SetAction

; 116  : 			m_pOwner->RotateByBuffCollision( m_CreateChar, m_CreatorLookType );

  00062	ff b6 f4 08 00
	00		 push	 DWORD PTR [esi+2292]
  00068	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0006e	57		 push	 edi
  0006f	e8 00 00 00 00	 call	 ?RotateByBuffCollision@ioBaseChar@@QAEXABVioHashString@@H@Z ; ioBaseChar::RotateByBuffCollision
$LN2@SetAction:

; 117  : 	}
; 118  : 
; 119  : 	if( !m_LoopSound.IsEmpty() )

  00074	8d be fc 05 00
	00		 lea	 edi, DWORD PTR [esi+1532]
  0007a	8b cf		 mov	 ecx, edi
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00082	84 c0		 test	 al, al
  00084	75 27		 jne	 SHORT $LN8@SetAction

; 120  : 	{
; 121  : 		m_LoopSoundID = m_pOwner->PlaySound( m_LoopSound, true );

  00086	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0008c	6a 01		 push	 1
  0008e	57		 push	 edi
  0008f	e8 00 00 00 00	 call	 ?PlaySoundA@ioGameEntity@@QAEKABVioHashString@@_N@Z ; ioGameEntity::PlaySoundA
  00094	89 86 0c 06 00
	00		 mov	 DWORD PTR [esi+1548], eax

; 122  : 		m_bLoopSoundPlayed = true;

  0009a	8d 45 ff	 lea	 eax, DWORD PTR _value$524618[ebp]
  0009d	50		 push	 eax
  0009e	8d 8e 60 08 00
	00		 lea	 ecx, DWORD PTR [esi+2144]
  000a4	c6 45 ff 01	 mov	 BYTE PTR _value$524618[ebp], 1
  000a8	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool
$LN8@SetAction:

; 123  : 	}
; 124  : 
; 125  : 	m_bBuffStart = true;

  000ad	5f		 pop	 edi
  000ae	c6 86 d5 02 00
	00 01		 mov	 BYTE PTR [esi+725], 1
  000b5	5e		 pop	 esi

; 126  : }

  000b6	c9		 leave
  000b7	c3		 ret	 0
?SetAction@ioWoundColorChangeBuff@@MAEXXZ ENDP		; ioWoundColorChangeBuff::SetAction
_TEXT	ENDS
EXTRN	?CheckEnableDelayState@ioBuff@@IAE_NXZ:PROC	; ioBuff::CheckEnableDelayState
; Function compile flags: /Ogsp
;	COMDAT ?ProcessDelay@ioWoundColorChangeBuff@@MAEXM@Z
_TEXT	SEGMENT
_value$524632 = -4					; size = 4
_value$524628 = -4					; size = 4
_value$524624 = -4					; size = 4
_fTimePerSec$ = 8					; size = 4
?ProcessDelay@ioWoundColorChangeBuff@@MAEXM@Z PROC	; ioWoundColorChangeBuff::ProcessDelay, COMDAT
; _this$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx

; 174  : 	DWORD dwCurTime = FRAMEGETTIME();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0000e	8b c8		 mov	 ecx, eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 175  : 
; 176  : 	if( CheckEnableDelayState() )

  00016	8b ce		 mov	 ecx, esi
  00018	8b f8		 mov	 edi, eax
  0001a	e8 00 00 00 00	 call	 ?CheckEnableDelayState@ioBuff@@IAE_NXZ ; ioBuff::CheckEnableDelayState
  0001f	84 c0		 test	 al, al
  00021	75 76		 jne	 SHORT $LN6@ProcessDel

; 177  : 		return;
; 178  : 
; 179  : 	if( GetBuffDuration() == 0 )

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  0002a	85 c0		 test	 eax, eax
  0002c	75 25		 jne	 SHORT $LN4@ProcessDel

; 180  : 	{
; 181  : 		if( !m_bBuffStart && m_dwBuffStartTime < dwCurTime )

  0002e	38 86 d5 02 00
	00		 cmp	 BYTE PTR [esi+725], al
  00034	75 63		 jne	 SHORT $LN6@ProcessDel
  00036	8d 45 fc	 lea	 eax, DWORD PTR _value$524624[ebp]
  00039	50		 push	 eax
  0003a	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  00040	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00045	39 7d fc	 cmp	 DWORD PTR _value$524624[ebp], edi
  00048	73 4f		 jae	 SHORT $LN6@ProcessDel

; 182  : 			SetAction();

  0004a	8b 06		 mov	 eax, DWORD PTR [esi]
  0004c	8b ce		 mov	 ecx, esi
  0004e	ff 50 34	 call	 DWORD PTR [eax+52]

; 183  : 		return;

  00051	eb 46		 jmp	 SHORT $LN6@ProcessDel
$LN4@ProcessDel:

; 184  : 	}
; 185  : 
; 186  : 	if( !m_bBuffStart && m_dwBuffStartTime < dwCurTime )

  00053	80 be d5 02 00
	00 00		 cmp	 BYTE PTR [esi+725], 0
  0005a	75 1b		 jne	 SHORT $LN2@ProcessDel
  0005c	8d 45 fc	 lea	 eax, DWORD PTR _value$524628[ebp]
  0005f	50		 push	 eax
  00060	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  00066	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  0006b	39 7d fc	 cmp	 DWORD PTR _value$524628[ebp], edi
  0006e	73 07		 jae	 SHORT $LN2@ProcessDel

; 187  : 		SetAction();

  00070	8b 06		 mov	 eax, DWORD PTR [esi]
  00072	8b ce		 mov	 ecx, esi
  00074	ff 50 34	 call	 DWORD PTR [eax+52]
$LN2@ProcessDel:

; 188  : 
; 189  : 	if( m_dwBuffEndTime <= dwCurTime )

  00077	8d 45 fc	 lea	 eax, DWORD PTR _value$524632[ebp]
  0007a	50		 push	 eax
  0007b	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  00081	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 190  : 	{
; 191  : 		SetReserveEndBuff();

  00086	8b ce		 mov	 ecx, esi
  00088	39 7d fc	 cmp	 DWORD PTR _value$524632[ebp], edi
  0008b	77 07		 ja	 SHORT $LN1@ProcessDel
  0008d	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 192  : 		return;

  00092	eb 05		 jmp	 SHORT $LN6@ProcessDel
$LN1@ProcessDel:

; 193  : 	}
; 194  : 
; 195  : 	CheckCallingProcess();

  00094	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess
$LN6@ProcessDel:
  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi

; 196  : }

  0009b	c9		 leave
  0009c	c2 04 00	 ret	 4
?ProcessDelay@ioWoundColorChangeBuff@@MAEXM@Z ENDP	; ioWoundColorChangeBuff::ProcessDelay
_TEXT	ENDS
END
