; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioSkillGaugeCheckBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?return5@@YAIXZ					; return5
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return5@@YAIXZ
_TEXT	SEGMENT
?return5@@YAIXZ PROC					; return5, COMDAT

; 18   : 	__forceinline unsigned int return5() { __asm mov eax, 5 };

  00000	b8 05 00 00 00	 mov	 eax, 5
  00005	c3		 ret	 0
?return5@@YAIXZ ENDP					; return5
_TEXT	ENDS
PUBLIC	?return10@@YAIXZ				; return10
; Function compile flags: /Ogsp
;	COMDAT ?return10@@YAIXZ
_TEXT	SEGMENT
?return10@@YAIXZ PROC					; return10, COMDAT

; 21   : 	__forceinline unsigned int return10() { __asm mov eax, 10 };

  00000	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00005	c3		 ret	 0
?return10@@YAIXZ ENDP					; return10
_TEXT	ENDS
PUBLIC	?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ	; ioBaseChar::GetCharName
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ PROC	; ioBaseChar::GetCharName, COMDAT
; _this$ = ecx

; 2594 : 	inline const ioHashString& GetCharName() const { return m_Name; }

  00000	8d 81 d4 02 00
	00		 lea	 eax, DWORD PTR [ecx+724]
  00006	c3		 ret	 0
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ ENDP	; ioBaseChar::GetCharName
_TEXT	ENDS
PUBLIC	?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ	; ioBaseChar::GetCreator
; Function compile flags: /Ogsp
;	COMDAT ?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ
_TEXT	SEGMENT
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ PROC	; ioBaseChar::GetCreator, COMDAT
; _this$ = ecx

; 4013 : 	inline ioPlayStage* GetCreator() { return m_pCreator; }

  00000	8b 81 44 03 00
	00		 mov	 eax, DWORD PTR [ecx+836]
  00006	c3		 ret	 0
?GetCreator@ioBaseChar@@QAEPAVioPlayStage@@XZ ENDP	; ioBaseChar::GetCreator
_TEXT	ENDS
PUBLIC	??_7ioSkillGaugeCheckBuff@@6B@			; ioSkillGaugeCheckBuff::`vftable'
PUBLIC	??0ioSkillGaugeCheckBuff@@QAE@XZ		; ioSkillGaugeCheckBuff::ioSkillGaugeCheckBuff
PUBLIC	??_R4ioSkillGaugeCheckBuff@@6B@			; ioSkillGaugeCheckBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioSkillGaugeCheckBuff@@@8		; ioSkillGaugeCheckBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioSkillGaugeCheckBuff@@8			; ioSkillGaugeCheckBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioSkillGaugeCheckBuff@@8			; ioSkillGaugeCheckBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioSkillGaugeCheckBuff@@8		; ioSkillGaugeCheckBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioSkillGaugeCheckBuff@@UAEXAAVioINILoader@@@Z ; ioSkillGaugeCheckBuff::LoadProperty
PUBLIC	?Clone@ioSkillGaugeCheckBuff@@UAEPAVioBuff@@XZ	; ioSkillGaugeCheckBuff::Clone
PUBLIC	?StartBuff@ioSkillGaugeCheckBuff@@UAEXPAVioBaseChar@@@Z ; ioSkillGaugeCheckBuff::StartBuff
PUBLIC	?ApplyStartBuff@ioSkillGaugeCheckBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioSkillGaugeCheckBuff::ApplyStartBuff
PUBLIC	?ProcessBuff@ioSkillGaugeCheckBuff@@UAEXM@Z	; ioSkillGaugeCheckBuff::ProcessBuff
PUBLIC	?EndBuff@ioSkillGaugeCheckBuff@@UAEXXZ		; ioSkillGaugeCheckBuff::EndBuff
PUBLIC	?ApplyExtraBuffInfo@ioSkillGaugeCheckBuff@@UAEXAAVSP2Packet@@@Z ; ioSkillGaugeCheckBuff::ApplyExtraBuffInfo
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioSkillGaugeCheckBuff@@UAEPAXI@Z:PROC	; ioSkillGaugeCheckBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioskillgaugecheckbuff.cpp
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioSkillGaugeCheckBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioSkillGaugeCheckBuff@@8 DD FLAT:??_R0?AVioSkillGaugeCheckBuff@@@8 ; ioSkillGaugeCheckBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioSkillGaugeCheckBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioSkillGaugeCheckBuff@@8
rdata$r	SEGMENT
??_R2ioSkillGaugeCheckBuff@@8 DD FLAT:??_R1A@?0A@EA@ioSkillGaugeCheckBuff@@8 ; ioSkillGaugeCheckBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioSkillGaugeCheckBuff@@8
rdata$r	SEGMENT
??_R3ioSkillGaugeCheckBuff@@8 DD 00H			; ioSkillGaugeCheckBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioSkillGaugeCheckBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioSkillGaugeCheckBuff@@@8
_DATA	SEGMENT
??_R0?AVioSkillGaugeCheckBuff@@@8 DD FLAT:??_7type_info@@6B@ ; ioSkillGaugeCheckBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioSkillGaugeCheckBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioSkillGaugeCheckBuff@@6B@
rdata$r	SEGMENT
??_R4ioSkillGaugeCheckBuff@@6B@ DD 00H			; ioSkillGaugeCheckBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioSkillGaugeCheckBuff@@@8
	DD	FLAT:??_R3ioSkillGaugeCheckBuff@@8
rdata$r	ENDS
;	COMDAT ??_7ioSkillGaugeCheckBuff@@6B@
CONST	SEGMENT
??_7ioSkillGaugeCheckBuff@@6B@ DD FLAT:??_R4ioSkillGaugeCheckBuff@@6B@ ; ioSkillGaugeCheckBuff::`vftable'
	DD	FLAT:?LoadProperty@ioSkillGaugeCheckBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioSkillGaugeCheckBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioSkillGaugeCheckBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioSkillGaugeCheckBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioSkillGaugeCheckBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioSkillGaugeCheckBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioSkillGaugeCheckBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioSkillGaugeCheckBuff@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0ioSkillGaugeCheckBuff@@QAE@XZ
_TEXT	SEGMENT
??0ioSkillGaugeCheckBuff@@QAE@XZ PROC			; ioSkillGaugeCheckBuff::ioSkillGaugeCheckBuff, COMDAT
; _this$ = ecx

; 12   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioSkillGaugeCheckBuff@@6B@

; 13   : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0ioSkillGaugeCheckBuff@@QAE@XZ ENDP			; ioSkillGaugeCheckBuff::ioSkillGaugeCheckBuff
_TEXT	ENDS
PUBLIC	??0ioSkillGaugeCheckBuff@@QAE@ABV0@@Z		; ioSkillGaugeCheckBuff::ioSkillGaugeCheckBuff
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
; Function compile flags: /Ogsp
;	COMDAT ??0ioSkillGaugeCheckBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??0ioSkillGaugeCheckBuff@@QAE@ABV0@@Z PROC		; ioSkillGaugeCheckBuff::ioSkillGaugeCheckBuff, COMDAT
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioSkillGaugeCheckBuff@@6B@
  00016	8b 87 6c 09 00
	00		 mov	 eax, DWORD PTR [edi+2412]
  0001c	89 86 6c 09 00
	00		 mov	 DWORD PTR [esi+2412], eax
  00022	8b 87 70 09 00
	00		 mov	 eax, DWORD PTR [edi+2416]
  00028	89 86 70 09 00
	00		 mov	 DWORD PTR [esi+2416], eax
  0002e	5f		 pop	 edi

; 20   : }

  0002f	8b c6		 mov	 eax, esi
  00031	5e		 pop	 esi
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??0ioSkillGaugeCheckBuff@@QAE@ABV0@@Z ENDP		; ioSkillGaugeCheckBuff::ioSkillGaugeCheckBuff
_TEXT	ENDS
PUBLIC	??1ioSkillGaugeCheckBuff@@UAE@XZ		; ioSkillGaugeCheckBuff::~ioSkillGaugeCheckBuff
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
; Function compile flags: /Ogsp
;	COMDAT ??1ioSkillGaugeCheckBuff@@UAE@XZ
_TEXT	SEGMENT
??1ioSkillGaugeCheckBuff@@UAE@XZ PROC			; ioSkillGaugeCheckBuff::~ioSkillGaugeCheckBuff, COMDAT
; _this$ = ecx

; 23   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioSkillGaugeCheckBuff@@6B@

; 24   : }

  00006	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
??1ioSkillGaugeCheckBuff@@UAE@XZ ENDP			; ioSkillGaugeCheckBuff::~ioSkillGaugeCheckBuff
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioSkillGaugeCheckBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioSkillGaugeCheckBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioSkillGaugeCheckBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioSkillGaugeCheckBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioSkillGaugeCheckBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T551120 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioSkillGaugeCheckBuff@@UAEPAVioBuff@@XZ PROC	; ioSkillGaugeCheckBuff::Clone, COMDAT
; _this$ = ecx

; 38   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioSkillGaugeCheckBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 39   : 	return new ioSkillGaugeCheckBuff( *this );

  0000e	68 74 09 00 00	 push	 2420			; 00000974H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T551120[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioSkillGaugeCheckBuff@@QAE@ABV0@@Z ; ioSkillGaugeCheckBuff::ioSkillGaugeCheckBuff
$LN3@Clone:

; 40   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioSkillGaugeCheckBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T551120[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioSkillGaugeCheckBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioSkillGaugeCheckBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioSkillGaugeCheckBuff@@UAEPAVioBuff@@XZ ENDP	; ioSkillGaugeCheckBuff::Clone
EXTRN	?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z:PROC	; ioBuff::StartBuff
; Function compile flags: /Ogsp
;	COMDAT ?StartBuff@ioSkillGaugeCheckBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?StartBuff@ioSkillGaugeCheckBuff@@UAEXPAVioBaseChar@@@Z PROC ; ioSkillGaugeCheckBuff::StartBuff, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 45   : 
; 46   : }

  00003	5d		 pop	 ebp

; 44   : 	ioBuff::StartBuff( pOwner );

  00004	e9 00 00 00 00	 jmp	 ?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z ; ioBuff::StartBuff
?StartBuff@ioSkillGaugeCheckBuff@@UAEXPAVioBaseChar@@@Z ENDP ; ioSkillGaugeCheckBuff::StartBuff
_TEXT	ENDS
EXTRN	?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z:PROC ; ioBuff::ApplyStartBuff
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioSkillGaugeCheckBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioSkillGaugeCheckBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioSkillGaugeCheckBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 50   : 	if( !ioBuff::ApplyStartBuff( pOwner, dwGlobalTime, dwGapTime ) )

  00003	ff 75 10	 push	 DWORD PTR _dwGapTime$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  00009	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0000c	e8 00 00 00 00	 call	 ?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBuff::ApplyStartBuff
  00011	84 c0		 test	 al, al
  00013	0f 95 c0	 setne	 al

; 51   : 		return false;
; 52   : 
; 53   : 	return true;
; 54   : }

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioSkillGaugeCheckBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioSkillGaugeCheckBuff::ApplyStartBuff
_TEXT	ENDS
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
; Function compile flags: /Ogsp
;	COMDAT ?EndBuff@ioSkillGaugeCheckBuff@@UAEXXZ
_TEXT	SEGMENT
?EndBuff@ioSkillGaugeCheckBuff@@UAEXXZ PROC		; ioSkillGaugeCheckBuff::EndBuff, COMDAT
; _this$ = ecx

; 108  : 	ioBuff::EndBuff();

  00000	e9 00 00 00 00	 jmp	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff
?EndBuff@ioSkillGaugeCheckBuff@@UAEXXZ ENDP		; ioSkillGaugeCheckBuff::EndBuff
_TEXT	ENDS
PUBLIC	??1FireTime@@QAE@XZ				; FireTime::~FireTime
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1FireTime@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1FireTime@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1FireTime@@QAE@XZ$1
__ehfuncinfo$??1FireTime@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1FireTime@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1FireTime@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1FireTime@@QAE@XZ PROC				; FireTime::~FireTime, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1FireTime@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00017	8d 4f 44	 lea	 ecx, DWORD PTR [edi+68]
  0001a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00021	ff d6		 call	 esi
  00023	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  00026	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0002a	ff d6		 call	 esi
  0002c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00030	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00033	ff d6		 call	 esi
  00035	e8 00 00 00 00	 call	 __EH_epilog3
  0003a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1FireTime@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 14	 add	 ecx, 20			; 00000014H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1FireTime@@QAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 30	 add	 ecx, 48			; 00000030H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1FireTime@@QAE@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1FireTime@@QAE@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1FireTime@@QAE@XZ ENDP				; FireTime::~FireTime
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator-
; Function compile flags: /Ogsp
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 386  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000a	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	0f 5a c9	 cvtps2pd xmm1, xmm1
  00017	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0001b	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  00020	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00024	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00028	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00030	0f 5a c9	 cvtps2pd xmm1, xmm1
  00033	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00037	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  0003c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00040	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00045	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0004a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00050	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00054	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00058	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 388  : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator-
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	??0FireTime@@QAE@XZ				; FireTime::FireTime
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	SEGMENT
__unwindtable$??0FireTime@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FireTime@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FireTime@@QAE@XZ$1
__ehfuncinfo$??0FireTime@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FireTime@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0FireTime@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0FireTime@@QAE@XZ PROC				; FireTime::FireTime, COMDAT
; _this$ = ecx

; 219  : 	FireTime()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0FireTime@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0001a	ff d7		 call	 edi
  0001c	33 db		 xor	 ebx, ebx
  0001e	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00021	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00024	ff d7		 call	 edi
  00026	8d 4e 44	 lea	 ecx, DWORD PTR [esi+68]
  00029	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0002d	ff d7		 call	 edi

; 220  : 	{
; 221  : 		dwStart = 0;

  0002f	89 1e		 mov	 DWORD PTR [esi], ebx

; 222  : 		dwDuration = 0;

  00031	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 223  : 
; 224  : 		iAttributeIdx = 0;

  00034	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 225  : 		iResistanceIdx = 0;

  00037	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx

; 226  : 
; 227  : 		bLoopWoundedAni = false;

  0003a	88 5e 10	 mov	 BYTE PTR [esi+16], bl

; 228  : 		dwWoundedAniDuration = 0;

  0003d	89 5e 24	 mov	 DWORD PTR [esi+36], ebx

; 229  : 
; 230  : 		dwWeaponIdx = 0;

  00040	89 5e 28	 mov	 DWORD PTR [esi+40], ebx

; 231  : 		eCollisionType = ACT_NONE;

  00043	c7 46 2c 06 00
	00 00		 mov	 DWORD PTR [esi+44], 6

; 232  : 		eFireTimeType = FTT_NORMAL_ATTACK;

  0004a	89 5e 40	 mov	 DWORD PTR [esi+64], ebx

; 233  : 
; 234  : 		m_iExtraValue = 0;

  0004d	89 5e 54	 mov	 DWORD PTR [esi+84], ebx

; 235  : 	}

  00050	8b c6		 mov	 eax, esi
  00052	e8 00 00 00 00	 call	 __EH_epilog3
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FireTime@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 14	 add	 ecx, 20			; 00000014H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FireTime@@QAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 30	 add	 ecx, 48			; 00000030H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0FireTime@@QAE@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0FireTime@@QAE@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0FireTime@@QAE@XZ ENDP				; FireTime::FireTime
PUBLIC	?GetName@ioBuff@@QBEABVioHashString@@XZ		; ioBuff::GetName
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
;	COMDAT ?GetName@ioBuff@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetName@ioBuff@@QBEABVioHashString@@XZ PROC		; ioBuff::GetName, COMDAT
; _this$ = ecx

; 440  : 	inline const ioHashString& GetName() const { return m_Name; }

  00000	8d 81 34 02 00
	00		 lea	 eax, DWORD PTR [ecx+564]
  00006	c3		 ret	 0
?GetName@ioBuff@@QBEABVioHashString@@XZ ENDP		; ioBuff::GetName
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z	; CEncrypt<unsigned long>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z PROC	; CEncrypt<unsigned long>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1256 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1257 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1258 : 		*value = *((DWORD*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 1259 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ENDP	; CEncrypt<unsigned long>::DecryptValueToPool
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioSkillGaugeCheckBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioSkillGaugeCheckBuff@@UAEPAXI@Z PROC		; ioSkillGaugeCheckBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioSkillGaugeCheckBuff@@6B@
  0000c	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 07		 je	 SHORT $LN1@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	59		 pop	 ecx
$LN1@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??_GioSkillGaugeCheckBuff@@UAEPAXI@Z ENDP		; ioSkillGaugeCheckBuff::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?CreateSuccusWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z ; ioSkillGaugeCheckBuff::CreateSuccusWeapon
EXTRN	??1SP2Packet@@UAE@XZ:PROC			; SP2Packet::~SP2Packet
EXTRN	?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z:PROC ; P2PNetwork::SendToAllPlayingUser
EXTRN	??6SP2Packet@@QAEAAV0@_N@Z:PROC			; SP2Packet::operator<<
EXTRN	??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z:PROC	; SP2Packet::operator<<
EXTRN	??0SP2Packet@@QAE@K@Z:PROC			; SP2Packet::SP2Packet
EXTRN	?ExtendFireExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUFireTime@@ABUD3DXVECTOR3@@1ABVioHashString@@@Z:PROC ; ioBaseChar::ExtendFireExplicit
EXTRN	?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z:PROC ; ioGameEntity::GetMidPositionByRate
EXTRN	?IncreaseWeaponIndexBase@ioBaseChar@@QAEKXZ:PROC ; ioBaseChar::IncreaseWeaponIndexBase
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	?GetBaseChar@ioBaseChar@@QAEPAV1@ABVioHashString@@@Z:PROC ; ioBaseChar::GetBaseChar
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
EXTRN	?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ:PROC	; ioBuff::GetOwner
EXTRN	___security_cookie:DWORD
EXTRN	__chkstk:PROC
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreateSuccusWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateSuccusWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateSuccusWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z$1
__ehfuncinfo$?CreateSuccusWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateSuccusWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioskillgaugecheckbuff.cpp
xdata$x	ENDS
;	COMDAT ?CreateSuccusWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z
_TEXT	SEGMENT
_kFireTime$ = -32928					; size = 88
_pCreator$ = -32840					; size = 4
tv416 = -32836						; size = 4
tv412 = -32836						; size = 4
tv408 = -32836						; size = 4
_kPacket$550247 = -32832				; size = 32792
_vPos$ = -40						; size = 12
_vDir$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_bSend$ = 8						; size = 1
?CreateSuccusWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z PROC ; ioSkillGaugeCheckBuff::CreateSuccusWeapon, COMDAT
; _this$ = ecx

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateSuccusWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 94 80 00 00	 mov	 eax, 32916		; 00008094H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b f1		 mov	 esi, ecx

; 114  : 	if( GetOwner() == NULL )

  00034	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner

; 115  : 	{
; 116  : 		SetReserveEndBuff();

  00039	8b ce		 mov	 ecx, esi
  0003b	85 c0		 test	 eax, eax
  0003d	75 0a		 jne	 SHORT $LN3@CreateSucc
$LN25@CreateSucc:
  0003f	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 117  : 		return;

  00044	e9 ed 01 00 00	 jmp	 $LN4@CreateSucc
$LN3@CreateSucc:

; 118  : 	}
; 119  : 
; 120  : 	ioBaseChar *pCreator = GetOwner()->GetBaseChar( m_CreateChar );

  00049	8d 86 88 02 00
	00		 lea	 eax, DWORD PTR [esi+648]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?GetBaseChar@ioBaseChar@@QAEPAV1@ABVioHashString@@@Z ; ioBaseChar::GetBaseChar

; 121  : 	if( pCreator == NULL )

  0005c	33 db		 xor	 ebx, ebx
  0005e	89 85 b8 7f ff
	ff		 mov	 DWORD PTR _pCreator$[ebp], eax
  00064	3b c3		 cmp	 eax, ebx
  00066	75 04		 jne	 SHORT $LN2@CreateSucc

; 122  : 	{
; 123  : 		SetReserveEndBuff();

  00068	8b ce		 mov	 ecx, esi

; 124  : 		return;

  0006a	eb d3		 jmp	 SHORT $LN25@CreateSucc
$LN2@CreateSucc:

; 125  : 	}
; 126  : 
; 127  : 	FireTime kFireTime;

  0006c	8d 8d 60 7f ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  00072	e8 00 00 00 00	 call	 ??0FireTime@@QAE@XZ	; FireTime::FireTime
  00077	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 128  : 	kFireTime.dwStart = FRAMEGETTIME();

  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00080	8b c8		 mov	 ecx, eax
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00088	89 85 60 7f ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp], eax

; 129  : 
; 130  : 	kFireTime.iAttributeIdx = m_nSuccessWeapon;

  0008e	8b 86 6c 09 00
	00		 mov	 eax, DWORD PTR [esi+2412]

; 131  : 	kFireTime.iResistanceIdx = 0;
; 132  : 	kFireTime.szWoundedAni  = "";

  00094	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00099	8d 8d 74 7f ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp+20]
  0009f	89 85 68 7f ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp+8], eax
  000a5	89 9d 6c 7f ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp+12], ebx
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 133  : 	kFireTime.dwWoundedAniDuration = 0;
; 134  : 	kFireTime.bLoopWoundedAni = false;
; 135  : 
; 136  : 	kFireTime.dwWeaponIdx = pCreator->IncreaseWeaponIndexBase();

  000b1	8b 8d b8 7f ff
	ff		 mov	 ecx, DWORD PTR _pCreator$[ebp]
  000b7	89 9d 84 7f ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp+36], ebx
  000bd	88 9d 70 7f ff
	ff		 mov	 BYTE PTR _kFireTime$[ebp+16], bl
  000c3	e8 00 00 00 00	 call	 ?IncreaseWeaponIndexBase@ioBaseChar@@QAEKXZ ; ioBaseChar::IncreaseWeaponIndexBase
  000c8	89 85 88 7f ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp+40], eax

; 137  : 	kFireTime.eFireTimeType = FTT_NORMAL_ATTACK;

  000ce	89 9d a0 7f ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp+64], ebx

; 138  : 
; 139  : 	D3DXVECTOR3 vPos = GetOwner()->GetMidPositionByRate();

  000d4	b8 05 00 00 00	 mov	 eax, 5
  000d9	8b c8		 mov	 ecx, eax
  000db	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  000e0	89 8d bc 7f ff
	ff		 mov	 DWORD PTR tv416[ebp], ecx
  000e6	db 85 bc 7f ff
	ff		 fild	 DWORD PTR tv416[ebp]
  000ec	85 c9		 test	 ecx, ecx
  000ee	79 06		 jns	 SHORT $LN23@CreateSucc
  000f0	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN23@CreateSucc:
  000f6	89 85 bc 7f ff
	ff		 mov	 DWORD PTR tv412[ebp], eax
  000fc	db 85 bc 7f ff
	ff		 fild	 DWORD PTR tv412[ebp]
  00102	85 c0		 test	 eax, eax
  00104	79 06		 jns	 SHORT $LN24@CreateSucc
  00106	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN24@CreateSucc:
  0010c	de f9		 fdivp	 ST(1), ST(0)
  0010e	51		 push	 ecx
  0010f	8d 45 d8	 lea	 eax, DWORD PTR _vPos$[ebp]
  00112	8b ce		 mov	 ecx, esi
  00114	d9 9d bc 7f ff
	ff		 fstp	 DWORD PTR tv408[ebp]
  0011a	d9 85 bc 7f ff
	ff		 fld	 DWORD PTR tv408[ebp]
  00120	d9 1c 24	 fstp	 DWORD PTR [esp]
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  00129	8b c8		 mov	 ecx, eax
  0012b	e8 00 00 00 00	 call	 ?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z ; ioGameEntity::GetMidPositionByRate

; 140  : 	D3DXVECTOR3 vDir = pCreator->GetWorldPosition() - GetOwner()->GetWorldPosition();

  00130	8b ce		 mov	 ecx, esi
  00132	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  00137	8b 10		 mov	 edx, DWORD PTR [eax]
  00139	8b c8		 mov	 ecx, eax
  0013b	ff 52 70	 call	 DWORD PTR [edx+112]
  0013e	8b 8d b8 7f ff
	ff		 mov	 ecx, DWORD PTR _pCreator$[ebp]
  00144	8b f8		 mov	 edi, eax
  00146	8b 01		 mov	 eax, DWORD PTR [ecx]
  00148	ff 50 70	 call	 DWORD PTR [eax+112]
  0014b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0014f	f3 0f 10 0f	 movss	 xmm1, DWORD PTR [edi]
  00153	f3 0f 10 57 04	 movss	 xmm2, DWORD PTR [edi+4]
  00158	f3 0f 10 5f 08	 movss	 xmm3, DWORD PTR [edi+8]

; 141  : 	pCreator->ExtendFireExplicit( kFireTime, vPos, vDir, GetName() );

  0015d	8b 8d b8 7f ff
	ff		 mov	 ecx, DWORD PTR _pCreator$[ebp]
  00163	0f 5a c9	 cvtps2pd xmm1, xmm1
  00166	0f 5a c0	 cvtps2pd xmm0, xmm0
  00169	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0016d	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  00172	0f 5a d2	 cvtps2pd xmm2, xmm2
  00175	0f 5a c9	 cvtps2pd xmm1, xmm1
  00178	f2 0f 5c ca	 subsd	 xmm1, xmm2
  0017c	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00181	8d be 34 02 00
	00		 lea	 edi, DWORD PTR [esi+564]
  00187	57		 push	 edi
  00188	8d 45 e4	 lea	 eax, DWORD PTR _vDir$[ebp]
  0018b	50		 push	 eax
  0018c	8d 45 d8	 lea	 eax, DWORD PTR _vPos$[ebp]
  0018f	50		 push	 eax
  00190	0f 5a d2	 cvtps2pd xmm2, xmm2
  00193	0f 5a db	 cvtps2pd xmm3, xmm3
  00196	8d 85 60 7f ff
	ff		 lea	 eax, DWORD PTR _kFireTime$[ebp]
  0019c	f2 0f 5c d3	 subsd	 xmm2, xmm3
  001a0	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  001a4	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  001a8	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  001ac	50		 push	 eax
  001ad	f3 0f 11 45 e4	 movss	 DWORD PTR _vDir$[ebp], xmm0
  001b2	f3 0f 11 4d e8	 movss	 DWORD PTR _vDir$[ebp+4], xmm1
  001b7	f3 0f 11 55 ec	 movss	 DWORD PTR _vDir$[ebp+8], xmm2
  001bc	e8 00 00 00 00	 call	 ?ExtendFireExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUFireTime@@ABUD3DXVECTOR3@@1ABVioHashString@@@Z ; ioBaseChar::ExtendFireExplicit

; 142  : 
; 143  : 	if( bSend )

  001c1	38 5d 08	 cmp	 BYTE PTR _bSend$[ebp], bl
  001c4	74 61		 je	 SHORT $LN1@CreateSucc

; 144  : 	{
; 145  : 		SP2Packet kPacket( CUPK_APPLY_EXTRA_BUFF_INFO );

  001c6	68 45 42 00 00	 push	 16965			; 00004245H
  001cb	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550247[ebp]
  001d1	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 146  : 		kPacket << m_pOwner->GetCharName();

  001d6	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  001dc	05 d4 02 00 00	 add	 eax, 724		; 000002d4H
  001e1	50		 push	 eax
  001e2	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550247[ebp]
  001e8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001ec	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 147  : 		kPacket << GetName();

  001f1	57		 push	 edi
  001f2	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550247[ebp]
  001f8	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 148  : 		kPacket << true;

  001fd	6a 01		 push	 1
  001ff	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550247[ebp]
  00205	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@_N@Z ; SP2Packet::operator<<

; 149  : 
; 150  : 		P2PNetwork::SendToAllPlayingUser( kPacket );

  0020a	8d 85 c0 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$550247[ebp]
  00210	53		 push	 ebx
  00211	50		 push	 eax
  00212	e8 00 00 00 00	 call	 ?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z ; P2PNetwork::SendToAllPlayingUser
  00217	59		 pop	 ecx
  00218	59		 pop	 ecx

; 151  : 	}

  00219	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550247[ebp]
  0021f	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00222	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN1@CreateSucc:

; 152  : }

  00227	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0022b	8d 8d 60 7f ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  00231	e8 00 00 00 00	 call	 ??1FireTime@@QAE@XZ
$LN4@CreateSucc:
  00236	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00239	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00240	59		 pop	 ecx
  00241	5f		 pop	 edi
  00242	5e		 pop	 esi
  00243	5b		 pop	 ebx
  00244	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00247	33 cd		 xor	 ecx, ebp
  00249	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024e	c9		 leave
  0024f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateSuccusWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z$0:
  00000	8d 8d 60 7f ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1FireTime@@QAE@XZ
__unwindfunclet$?CreateSuccusWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z$1:
  0000b	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550247[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?CreateSuccusWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 8a 5c 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32932]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateSuccusWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateSuccusWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z ENDP ; ioSkillGaugeCheckBuff::CreateSuccusWeapon
PUBLIC	__$ArrayPad$
PUBLIC	?CreateFailWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z ; ioSkillGaugeCheckBuff::CreateFailWeapon
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
xdata$x	SEGMENT
__unwindtable$?CreateFailWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateFailWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateFailWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z$1
__ehfuncinfo$?CreateFailWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateFailWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioskillgaugecheckbuff.cpp
xdata$x	ENDS
;	COMDAT ?CreateFailWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z
_TEXT	SEGMENT
_kFireTime$ = -32928					; size = 88
_pCreator$ = -32840					; size = 4
tv416 = -32836						; size = 4
tv412 = -32836						; size = 4
tv408 = -32836						; size = 4
_kPacket$550263 = -32832				; size = 32792
_vPos$ = -40						; size = 12
_vDir$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_bSend$ = 8						; size = 1
?CreateFailWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z PROC	; ioSkillGaugeCheckBuff::CreateFailWeapon, COMDAT
; _this$ = ecx

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateFailWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 94 80 00 00	 mov	 eax, 32916		; 00008094H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b f1		 mov	 esi, ecx

; 156  : 	if( GetOwner() == NULL )

  00034	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner

; 157  : 	{
; 158  : 		SetReserveEndBuff();

  00039	8b ce		 mov	 ecx, esi
  0003b	85 c0		 test	 eax, eax
  0003d	75 0a		 jne	 SHORT $LN3@CreateFail
$LN25@CreateFail:
  0003f	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 159  : 		return;

  00044	e9 ec 01 00 00	 jmp	 $LN4@CreateFail
$LN3@CreateFail:

; 160  : 	}
; 161  : 
; 162  : 	ioBaseChar *pCreator = GetOwner()->GetBaseChar( m_CreateChar );

  00049	8d 86 88 02 00
	00		 lea	 eax, DWORD PTR [esi+648]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?GetBaseChar@ioBaseChar@@QAEPAV1@ABVioHashString@@@Z ; ioBaseChar::GetBaseChar

; 163  : 	if( pCreator == NULL )

  0005c	33 db		 xor	 ebx, ebx
  0005e	89 85 b8 7f ff
	ff		 mov	 DWORD PTR _pCreator$[ebp], eax
  00064	3b c3		 cmp	 eax, ebx
  00066	75 04		 jne	 SHORT $LN2@CreateFail

; 164  : 	{
; 165  : 		SetReserveEndBuff();

  00068	8b ce		 mov	 ecx, esi

; 166  : 		return;

  0006a	eb d3		 jmp	 SHORT $LN25@CreateFail
$LN2@CreateFail:

; 167  : 	}
; 168  : 
; 169  : 	FireTime kFireTime;

  0006c	8d 8d 60 7f ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  00072	e8 00 00 00 00	 call	 ??0FireTime@@QAE@XZ	; FireTime::FireTime
  00077	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 170  : 	kFireTime.dwStart = FRAMEGETTIME();

  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00080	8b c8		 mov	 ecx, eax
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00088	89 85 60 7f ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp], eax

; 171  : 
; 172  : 	kFireTime.iAttributeIdx = m_nFailWeapon;

  0008e	8b 86 70 09 00
	00		 mov	 eax, DWORD PTR [esi+2416]

; 173  : 	kFireTime.iResistanceIdx = 0;
; 174  : 	kFireTime.szWoundedAni  = "";

  00094	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00099	8d 8d 74 7f ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp+20]
  0009f	89 85 68 7f ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp+8], eax
  000a5	89 9d 6c 7f ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp+12], ebx
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 175  : 	kFireTime.dwWoundedAniDuration = 0;
; 176  : 	kFireTime.bLoopWoundedAni = false;
; 177  : 
; 178  : 	kFireTime.dwWeaponIdx = pCreator->IncreaseWeaponIndexBase();

  000b1	8b 8d b8 7f ff
	ff		 mov	 ecx, DWORD PTR _pCreator$[ebp]
  000b7	89 9d 84 7f ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp+36], ebx
  000bd	88 9d 70 7f ff
	ff		 mov	 BYTE PTR _kFireTime$[ebp+16], bl
  000c3	e8 00 00 00 00	 call	 ?IncreaseWeaponIndexBase@ioBaseChar@@QAEKXZ ; ioBaseChar::IncreaseWeaponIndexBase
  000c8	89 85 88 7f ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp+40], eax

; 179  : 	kFireTime.eFireTimeType = FTT_NORMAL_ATTACK;

  000ce	89 9d a0 7f ff
	ff		 mov	 DWORD PTR _kFireTime$[ebp+64], ebx

; 180  : 
; 181  : 	D3DXVECTOR3 vPos = GetOwner()->GetMidPositionByRate();

  000d4	b8 05 00 00 00	 mov	 eax, 5
  000d9	8b c8		 mov	 ecx, eax
  000db	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  000e0	89 8d bc 7f ff
	ff		 mov	 DWORD PTR tv416[ebp], ecx
  000e6	db 85 bc 7f ff
	ff		 fild	 DWORD PTR tv416[ebp]
  000ec	85 c9		 test	 ecx, ecx
  000ee	79 06		 jns	 SHORT $LN23@CreateFail
  000f0	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN23@CreateFail:
  000f6	89 85 bc 7f ff
	ff		 mov	 DWORD PTR tv412[ebp], eax
  000fc	db 85 bc 7f ff
	ff		 fild	 DWORD PTR tv412[ebp]
  00102	85 c0		 test	 eax, eax
  00104	79 06		 jns	 SHORT $LN24@CreateFail
  00106	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN24@CreateFail:
  0010c	de f9		 fdivp	 ST(1), ST(0)
  0010e	51		 push	 ecx
  0010f	8d 45 d8	 lea	 eax, DWORD PTR _vPos$[ebp]
  00112	8b ce		 mov	 ecx, esi
  00114	d9 9d bc 7f ff
	ff		 fstp	 DWORD PTR tv408[ebp]
  0011a	d9 85 bc 7f ff
	ff		 fld	 DWORD PTR tv408[ebp]
  00120	d9 1c 24	 fstp	 DWORD PTR [esp]
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  00129	8b c8		 mov	 ecx, eax
  0012b	e8 00 00 00 00	 call	 ?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z ; ioGameEntity::GetMidPositionByRate

; 182  : 	D3DXVECTOR3 vDir = pCreator->GetWorldPosition() - GetOwner()->GetWorldPosition();

  00130	8b ce		 mov	 ecx, esi
  00132	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  00137	8b 10		 mov	 edx, DWORD PTR [eax]
  00139	8b c8		 mov	 ecx, eax
  0013b	ff 52 70	 call	 DWORD PTR [edx+112]
  0013e	8b 8d b8 7f ff
	ff		 mov	 ecx, DWORD PTR _pCreator$[ebp]
  00144	8b f8		 mov	 edi, eax
  00146	8b 01		 mov	 eax, DWORD PTR [ecx]
  00148	ff 50 70	 call	 DWORD PTR [eax+112]
  0014b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0014f	f3 0f 10 0f	 movss	 xmm1, DWORD PTR [edi]
  00153	f3 0f 10 57 04	 movss	 xmm2, DWORD PTR [edi+4]
  00158	f3 0f 10 5f 08	 movss	 xmm3, DWORD PTR [edi+8]

; 183  : 	pCreator->ExtendFireExplicit( kFireTime, vPos, vDir, GetName() );

  0015d	8b 8d b8 7f ff
	ff		 mov	 ecx, DWORD PTR _pCreator$[ebp]
  00163	0f 5a c9	 cvtps2pd xmm1, xmm1
  00166	0f 5a c0	 cvtps2pd xmm0, xmm0
  00169	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0016d	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  00172	0f 5a d2	 cvtps2pd xmm2, xmm2
  00175	0f 5a c9	 cvtps2pd xmm1, xmm1
  00178	f2 0f 5c ca	 subsd	 xmm1, xmm2
  0017c	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00181	8d be 34 02 00
	00		 lea	 edi, DWORD PTR [esi+564]
  00187	57		 push	 edi
  00188	8d 45 e4	 lea	 eax, DWORD PTR _vDir$[ebp]
  0018b	50		 push	 eax
  0018c	8d 45 d8	 lea	 eax, DWORD PTR _vPos$[ebp]
  0018f	50		 push	 eax
  00190	0f 5a d2	 cvtps2pd xmm2, xmm2
  00193	0f 5a db	 cvtps2pd xmm3, xmm3
  00196	8d 85 60 7f ff
	ff		 lea	 eax, DWORD PTR _kFireTime$[ebp]
  0019c	f2 0f 5c d3	 subsd	 xmm2, xmm3
  001a0	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  001a4	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  001a8	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  001ac	50		 push	 eax
  001ad	f3 0f 11 45 e4	 movss	 DWORD PTR _vDir$[ebp], xmm0
  001b2	f3 0f 11 4d e8	 movss	 DWORD PTR _vDir$[ebp+4], xmm1
  001b7	f3 0f 11 55 ec	 movss	 DWORD PTR _vDir$[ebp+8], xmm2
  001bc	e8 00 00 00 00	 call	 ?ExtendFireExplicit@ioBaseChar@@QAEPAVioWeapon@@ABUFireTime@@ABUD3DXVECTOR3@@1ABVioHashString@@@Z ; ioBaseChar::ExtendFireExplicit

; 184  : 
; 185  : 	if( bSend )

  001c1	38 5d 08	 cmp	 BYTE PTR _bSend$[ebp], bl
  001c4	74 60		 je	 SHORT $LN1@CreateFail

; 186  : 	{
; 187  : 		SP2Packet kPacket( CUPK_APPLY_EXTRA_BUFF_INFO );

  001c6	68 45 42 00 00	 push	 16965			; 00004245H
  001cb	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550263[ebp]
  001d1	e8 00 00 00 00	 call	 ??0SP2Packet@@QAE@K@Z	; SP2Packet::SP2Packet

; 188  : 		kPacket << m_pOwner->GetCharName();

  001d6	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  001dc	05 d4 02 00 00	 add	 eax, 724		; 000002d4H
  001e1	50		 push	 eax
  001e2	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550263[ebp]
  001e8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001ec	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 189  : 		kPacket << GetName();

  001f1	57		 push	 edi
  001f2	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550263[ebp]
  001f8	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@ABVioHashString@@@Z ; SP2Packet::operator<<

; 190  : 		kPacket << false;

  001fd	53		 push	 ebx
  001fe	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550263[ebp]
  00204	e8 00 00 00 00	 call	 ??6SP2Packet@@QAEAAV0@_N@Z ; SP2Packet::operator<<

; 191  : 
; 192  : 		P2PNetwork::SendToAllPlayingUser( kPacket );

  00209	8d 85 c0 7f ff
	ff		 lea	 eax, DWORD PTR _kPacket$550263[ebp]
  0020f	53		 push	 ebx
  00210	50		 push	 eax
  00211	e8 00 00 00 00	 call	 ?SendToAllPlayingUser@P2PNetwork@@YAXAAVSP2Packet@@PAVioBaseChar@@@Z ; P2PNetwork::SendToAllPlayingUser
  00216	59		 pop	 ecx
  00217	59		 pop	 ecx

; 193  : 	}

  00218	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550263[ebp]
  0021e	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00221	e8 00 00 00 00	 call	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
$LN1@CreateFail:

; 194  : }

  00226	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0022a	8d 8d 60 7f ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  00230	e8 00 00 00 00	 call	 ??1FireTime@@QAE@XZ
$LN4@CreateFail:
  00235	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00238	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0023f	59		 pop	 ecx
  00240	5f		 pop	 edi
  00241	5e		 pop	 esi
  00242	5b		 pop	 ebx
  00243	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00246	33 cd		 xor	 ecx, ebp
  00248	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024d	c9		 leave
  0024e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateFailWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z$0:
  00000	8d 8d 60 7f ff
	ff		 lea	 ecx, DWORD PTR _kFireTime$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1FireTime@@QAE@XZ
__unwindfunclet$?CreateFailWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z$1:
  0000b	8d 8d c0 7f ff
	ff		 lea	 ecx, DWORD PTR _kPacket$550263[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1SP2Packet@@UAE@XZ	; SP2Packet::~SP2Packet
__ehhandler$?CreateFailWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 8a 5c 7f ff
	ff		 mov	 ecx, DWORD PTR [edx-32932]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateFailWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateFailWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z ENDP	; ioSkillGaugeCheckBuff::CreateFailWeapon
EXTRN	??5SP2Packet@@QAEAAV0@AA_N@Z:PROC		; SP2Packet::operator>>
; Function compile flags: /Ogsp
;	COMDAT ?ApplyExtraBuffInfo@ioSkillGaugeCheckBuff@@UAEXAAVSP2Packet@@@Z
_TEXT	SEGMENT
_bSuccess$ = -1						; size = 1
_rkPacket$ = 8						; size = 4
?ApplyExtraBuffInfo@ioSkillGaugeCheckBuff@@UAEXAAVSP2Packet@@@Z PROC ; ioSkillGaugeCheckBuff::ApplyExtraBuffInfo, COMDAT
; _this$ = ecx

; 198  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 199  : 	ioBaseChar *pOwner = GetOwner();

  00007	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner

; 200  : 	if( !pOwner )

  0000c	85 c0		 test	 eax, eax
  0000e	74 32		 je	 SHORT $LN5@ApplyExtra

; 201  : 		return;
; 202  : 
; 203  : 	ioPlayStage *pStage = pOwner->GetCreator();
; 204  : 	if( !pStage )

  00010	83 b8 44 03 00
	00 00		 cmp	 DWORD PTR [eax+836], 0
  00017	74 29		 je	 SHORT $LN5@ApplyExtra

; 205  : 		return;
; 206  : 
; 207  : 	bool bSuccess;
; 208  : 	rkPacket >> bSuccess;

  00019	8b 4d 08	 mov	 ecx, DWORD PTR _rkPacket$[ebp]
  0001c	8d 45 ff	 lea	 eax, DWORD PTR _bSuccess$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AA_N@Z ; SP2Packet::operator>>

; 209  : 
; 210  : 	if( bSuccess )

  00025	80 7d ff 00	 cmp	 BYTE PTR _bSuccess$[ebp], 0

; 211  : 		CreateSuccusWeapon(false);

  00029	6a 00		 push	 0
  0002b	8b ce		 mov	 ecx, esi
  0002d	74 07		 je	 SHORT $LN2@ApplyExtra
  0002f	e8 00 00 00 00	 call	 ?CreateSuccusWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z ; ioSkillGaugeCheckBuff::CreateSuccusWeapon

; 212  : 	else

  00034	eb 05		 jmp	 SHORT $LN1@ApplyExtra
$LN2@ApplyExtra:

; 213  : 		CreateFailWeapon(false);

  00036	e8 00 00 00 00	 call	 ?CreateFailWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z ; ioSkillGaugeCheckBuff::CreateFailWeapon
$LN1@ApplyExtra:

; 214  : 
; 215  : 	SetReserveEndBuff();

  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff
$LN5@ApplyExtra:
  00042	5e		 pop	 esi

; 216  : }

  00043	c9		 leave
  00044	c2 04 00	 ret	 4
?ApplyExtraBuffInfo@ioSkillGaugeCheckBuff@@UAEXAAVSP2Packet@@@Z ENDP ; ioSkillGaugeCheckBuff::ApplyExtraBuffInfo
_TEXT	ENDS
PUBLIC	??M?$CEncrypt@K@@QAE_NABK@Z			; CEncrypt<unsigned long>::operator<
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??M?$CEncrypt@K@@QAE_NABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??M?$CEncrypt@K@@QAE_NABK@Z PROC			; CEncrypt<unsigned long>::operator<, COMDAT
; _this$ = ecx

; 1401 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1402 : 		type value;
; 1403 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1404 : #ifdef _NOTUSE
; 1405 : 		Debug();
; 1406 : #endif
; 1407 : 		return (value < inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _value$[ebp]
  00013	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00015	1b c0		 sbb	 eax, eax
  00017	f7 d8		 neg	 eax

; 1408 : 	} 

  00019	c9		 leave
  0001a	c2 04 00	 ret	 4
??M?$CEncrypt@K@@QAE_NABK@Z ENDP			; CEncrypt<unsigned long>::operator<
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z ; ioINILoader::LoadInt_e<19>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<19>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 cf 01 00
	00		 je	 $LN96@LoadInt_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 b8 01 00
	00		 je	 $LN95@LoadInt_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 a0 01 00
	00		 je	 $LN94@LoadInt_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 89 01 00
	00		 je	 $LN93@LoadInt_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 72 01 00
	00		 je	 $LN92@LoadInt_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 5c 01 00
	00		 je	 $LN91@LoadInt_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 46 01 00
	00		 je	 $LN90@LoadInt_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 2f 01 00
	00		 je	 $LN89@LoadInt_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 18 01 00
	00		 je	 $LN88@LoadInt_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 02 01 00
	00		 je	 $LN87@LoadInt_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 ec 00 00
	00		 je	 $LN86@LoadInt_e
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 d5 00 00
	00		 je	 $LN85@LoadInt_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 be 00 00
	00		 je	 $LN84@LoadInt_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 a8 00 00
	00		 je	 $LN83@LoadInt_e
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 92 00 00
	00		 je	 $LN82@LoadInt_e
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 7f		 je	 SHORT $LN81@LoadInt_e
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 6c		 je	 SHORT $LN80@LoadInt_e
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012c	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0012f	84 d2		 test	 dl, dl
  00131	74 5a		 je	 SHORT $LN79@LoadInt_e
  00133	32 d1		 xor	 dl, cl
  00135	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00139	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013c	0f 84 b1 00 00
	00		 je	 $LN1@LoadInt_e
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 3e		 je	 SHORT $LN77@LoadInt_e
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 2b		 je	 SHORT $LN76@LoadInt_e
  00156	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00159	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0015f	84 d2		 test	 dl, dl
  00161	74 19		 je	 SHORT $LN75@LoadInt_e
  00163	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  00166	32 d1		 xor	 dl, cl
  00168	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016b	84 c0		 test	 al, al
  0016d	74 07		 je	 SHORT $LN74@LoadInt_e
  0016f	34 eb		 xor	 al, -21			; ffffffebH
  00171	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  00174	eb 7d		 jmp	 SHORT $LN1@LoadInt_e
$LN74@LoadInt_e:
  00176	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0017a	eb 77		 jmp	 SHORT $LN1@LoadInt_e
$LN75@LoadInt_e:
  0017c	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  0017f	eb 72		 jmp	 SHORT $LN1@LoadInt_e
$LN76@LoadInt_e:
  00181	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00185	eb 6c		 jmp	 SHORT $LN1@LoadInt_e
$LN77@LoadInt_e:
  00187	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0018b	eb 66		 jmp	 SHORT $LN1@LoadInt_e
$LN79@LoadInt_e:
  0018d	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00190	eb 61		 jmp	 SHORT $LN1@LoadInt_e
$LN80@LoadInt_e:
  00192	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00196	eb 5b		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  00198	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0019c	eb 55		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  0019e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001a2	eb 4f		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  001a4	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001a7	eb 4a		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  001a9	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001ad	eb 44		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  001af	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001b3	eb 3e		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  001b5	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001b9	eb 38		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  001bb	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001be	eb 33		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  001c0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001c4	eb 2d		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  001c6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001ca	eb 27		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  001cc	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d0	eb 21		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  001d2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001d5	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  001d7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001db	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  001dd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e1	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  001e3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001e7	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  001e9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001ed	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  001ef	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  001f3	6a 04		 push	 4
  001f5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f8	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  001fc	5a		 pop	 edx
$LL104@LoadInt_e:
  001fd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00203	83 c0 04	 add	 eax, 4
  00206	4a		 dec	 edx
  00207	75 f4		 jne	 SHORT $LL104@LoadInt_e
  00209	6a 10		 push	 16			; 00000010H
  0020b	58		 pop	 eax
$LL101@LoadInt_e:
  0020c	8b c8		 mov	 ecx, eax
  0020e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00214	79 05		 jns	 SHORT $LN111@LoadInt_e
  00216	49		 dec	 ecx
  00217	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0021a	41		 inc	 ecx
$LN111@LoadInt_e:
  0021b	b2 ed		 mov	 dl, -19			; ffffffedH
  0021d	2a d1		 sub	 dl, cl
  0021f	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00223	40		 inc	 eax
  00224	83 f8 12	 cmp	 eax, 18			; 00000012H
  00227	7c e3		 jl	 SHORT $LL101@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  00229	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0022c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0022f	50		 push	 eax
  00230	8b ce		 mov	 ecx, esi
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00238	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023b	33 cd		 xor	 ecx, ebp
  0023d	5e		 pop	 esi
  0023e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00243	c9		 leave
  00244	c2 08 00	 ret	 8
??$LoadInt_e@$0BD@@ioINILoader@@QAEHAAY0BD@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<19>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BA@@ioINILoader@@QAEHAAY0BA@$$CBDH@Z ; ioINILoader::LoadInt_e<16>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BA@@ioINILoader@@QAEHAAY0BA@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BA@@ioINILoader@@QAEHAAY0BA@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<16>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 8c 01 00
	00		 je	 $LN96@LoadInt_e@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 75 01 00
	00		 je	 $LN95@LoadInt_e@2
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 5e 01 00
	00		 je	 $LN94@LoadInt_e@2
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 46 01 00
	00		 je	 $LN93@LoadInt_e@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 2f 01 00
	00		 je	 $LN92@LoadInt_e@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 18 01 00
	00		 je	 $LN91@LoadInt_e@2
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 02 01 00
	00		 je	 $LN90@LoadInt_e@2
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 ec 00 00
	00		 je	 $LN89@LoadInt_e@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 d5 00 00
	00		 je	 $LN88@LoadInt_e@2
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 be 00 00
	00		 je	 $LN87@LoadInt_e@2
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 a8 00 00
	00		 je	 $LN86@LoadInt_e@2
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 92 00 00
	00		 je	 $LN85@LoadInt_e@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	74 7f		 je	 SHORT $LN84@LoadInt_e@2
  000e7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f0	84 d2		 test	 dl, dl
  000f2	74 6c		 je	 SHORT $LN83@LoadInt_e@2
  000f4	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f7	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000fa	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000fd	84 d2		 test	 dl, dl
  000ff	74 5a		 je	 SHORT $LN82@LoadInt_e@2
  00101	32 d1		 xor	 dl, cl
  00103	80 78 0f 00	 cmp	 BYTE PTR [eax+15], 0
  00107	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  0010a	0f 84 a0 00 00
	00		 je	 $LN1@LoadInt_e@2
  00110	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00113	84 d2		 test	 dl, dl
  00115	74 3e		 je	 SHORT $LN80@LoadInt_e@2
  00117	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011a	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011d	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00120	84 d2		 test	 dl, dl
  00122	74 2b		 je	 SHORT $LN79@LoadInt_e@2
  00124	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00127	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  0012a	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0012d	84 d2		 test	 dl, dl
  0012f	74 19		 je	 SHORT $LN78@LoadInt_e@2
  00131	8a 40 13	 mov	 al, BYTE PTR [eax+19]
  00134	32 d1		 xor	 dl, cl
  00136	88 55 fa	 mov	 BYTE PTR __k$[ebp+18], dl
  00139	84 c0		 test	 al, al
  0013b	74 07		 je	 SHORT $LN77@LoadInt_e@2
  0013d	34 ea		 xor	 al, -22			; ffffffeaH
  0013f	88 45 fb	 mov	 BYTE PTR __k$[ebp+19], al
  00142	eb 6c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN77@LoadInt_e@2:
  00144	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00148	eb 66		 jmp	 SHORT $LN1@LoadInt_e@2
$LN78@LoadInt_e@2:
  0014a	88 4d fa	 mov	 BYTE PTR __k$[ebp+18], cl
  0014d	eb 61		 jmp	 SHORT $LN1@LoadInt_e@2
$LN79@LoadInt_e@2:
  0014f	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  00153	eb 5b		 jmp	 SHORT $LN1@LoadInt_e@2
$LN80@LoadInt_e@2:
  00155	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00159	eb 55		 jmp	 SHORT $LN1@LoadInt_e@2
$LN82@LoadInt_e@2:
  0015b	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0015e	eb 50		 jmp	 SHORT $LN1@LoadInt_e@2
$LN83@LoadInt_e@2:
  00160	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00164	eb 4a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN84@LoadInt_e@2:
  00166	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0016a	eb 44		 jmp	 SHORT $LN1@LoadInt_e@2
$LN85@LoadInt_e@2:
  0016c	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00170	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN86@LoadInt_e@2:
  00172	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  00175	eb 39		 jmp	 SHORT $LN1@LoadInt_e@2
$LN87@LoadInt_e@2:
  00177	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0017b	eb 33		 jmp	 SHORT $LN1@LoadInt_e@2
$LN88@LoadInt_e@2:
  0017d	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00181	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@2
$LN89@LoadInt_e@2:
  00183	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00187	eb 27		 jmp	 SHORT $LN1@LoadInt_e@2
$LN90@LoadInt_e@2:
  00189	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  0018c	eb 22		 jmp	 SHORT $LN1@LoadInt_e@2
$LN91@LoadInt_e@2:
  0018e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00192	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN92@LoadInt_e@2:
  00194	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00198	eb 16		 jmp	 SHORT $LN1@LoadInt_e@2
$LN93@LoadInt_e@2:
  0019a	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0019e	eb 10		 jmp	 SHORT $LN1@LoadInt_e@2
$LN94@LoadInt_e@2:
  001a0	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001a4	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN95@LoadInt_e@2:
  001a6	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001aa	eb 04		 jmp	 SHORT $LN1@LoadInt_e@2
$LN96@LoadInt_e@2:
  001ac	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@2:
  001b0	6a 03		 push	 3
  001b2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001b5	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+15], 0
  001b9	5a		 pop	 edx
$LL104@LoadInt_e@2:
  001ba	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001c0	83 c0 04	 add	 eax, 4
  001c3	4a		 dec	 edx
  001c4	75 f4		 jne	 SHORT $LL104@LoadInt_e@2
  001c6	6a 0c		 push	 12			; 0000000cH
  001c8	58		 pop	 eax
$LL101@LoadInt_e@2:
  001c9	8b c8		 mov	 ecx, eax
  001cb	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001d1	79 05		 jns	 SHORT $LN111@LoadInt_e@2
  001d3	49		 dec	 ecx
  001d4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001d7	41		 inc	 ecx
$LN111@LoadInt_e@2:
  001d8	b2 ed		 mov	 dl, -19			; ffffffedH
  001da	2a d1		 sub	 dl, cl
  001dc	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001e0	40		 inc	 eax
  001e1	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001e4	7c e3		 jl	 SHORT $LL101@LoadInt_e@2

; 120  : 		return LoadInt(_k, i);

  001e6	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001e9	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001ec	50		 push	 eax
  001ed	8b ce		 mov	 ecx, esi
  001ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  001f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f8	33 cd		 xor	 ecx, ebp
  001fa	5e		 pop	 esi
  001fb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00200	c9		 leave
  00201	c2 08 00	 ret	 8
??$LoadInt_e@$0BA@@ioINILoader@@QAEHAAY0BA@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<16>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioskillgaugecheckbuff.cpp
;	COMDAT ?LoadProperty@ioSkillGaugeCheckBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
__k$551502 = -28					; size = 16
__k$551377 = -28					; size = 19
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioSkillGaugeCheckBuff@@UAEXAAVioINILoader@@@Z PROC ; ioSkillGaugeCheckBuff::LoadProperty, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _rkLoader$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi

; 28   : 	ioBuff::LoadProperty( rkLoader );

  00016	53		 push	 ebx
  00017	8b f1		 mov	 esi, ecx
  00019	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty

; 29   : 
; 30   : 	char szKey[MAX_PATH] = "";
; 31   : 	char szBuf[MAX_PATH] = "";
; 32   : 
; 33   : 	m_nSuccessWeapon	= rkLoader.LoadInt_e( "success_weapon_idx", 0 );

  0001e	6a 04		 push	 4
  00020	c7 45 e4 9e 99
	88 89		 mov	 DWORD PTR __k$551377[ebp], -1987536482 ; 8988999eH
  00027	c7 45 e8 88 9f
	98 b5		 mov	 DWORD PTR __k$551377[ebp+4], -1248288888 ; b5989f88H
  0002e	c7 45 ec 9a 89
	8a 9a		 mov	 DWORD PTR __k$551377[ebp+8], -1702196838 ; 9a8a899aH
  00035	c7 45 f0 82 82
	b4 83		 mov	 DWORD PTR __k$551377[ebp+12], -2085322110 ; 83b48282H
  0003c	66 c7 45 f4 89
	94		 mov	 WORD PTR __k$551377[ebp+16], 38025 ; 00009489H
  00042	8d 45 e4	 lea	 eax, DWORD PTR __k$551377[ebp]
  00045	c6 45 f6 00	 mov	 BYTE PTR __k$551377[ebp+18], 0
  00049	59		 pop	 ecx
$LL106@LoadProper:
  0004a	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00050	83 c0 04	 add	 eax, 4
  00053	49		 dec	 ecx
  00054	75 f4		 jne	 SHORT $LL106@LoadProper
  00056	6a 10		 push	 16			; 00000010H
  00058	5f		 pop	 edi
$LL103@LoadProper:
  00059	8b c7		 mov	 eax, edi
  0005b	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00060	79 05		 jns	 SHORT $LN223@LoadProper
  00062	48		 dec	 eax
  00063	83 c8 fc	 or	 eax, -4			; fffffffcH
  00066	40		 inc	 eax
$LN223@LoadProper:
  00067	b1 ed		 mov	 cl, -19			; ffffffedH
  00069	2a c8		 sub	 cl, al
  0006b	30 4c 3d e4	 xor	 BYTE PTR __k$551377[ebp+edi], cl
  0006f	47		 inc	 edi
  00070	83 ff 12	 cmp	 edi, 18			; 00000012H
  00073	7c e4		 jl	 SHORT $LL103@LoadProper
  00075	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  0007b	6a 00		 push	 0
  0007d	8d 45 e4	 lea	 eax, DWORD PTR __k$551377[ebp]
  00080	50		 push	 eax
  00081	8b cb		 mov	 ecx, ebx
  00083	ff d7		 call	 edi
  00085	6a 03		 push	 3
  00087	89 86 6c 09 00
	00		 mov	 DWORD PTR [esi+2412], eax

; 34   : 	m_nFailWeapon		= rkLoader.LoadInt_e( "fail_weapon_idx", 0 );

  0008d	c7 45 e4 8b 8d
	82 86		 mov	 DWORD PTR __k$551502[ebp], -2038264437 ; 86828d8bH
  00094	c7 45 e8 b2 9b
	8e 8b		 mov	 DWORD PTR __k$551502[ebp+4], -1953588302 ; 8b8e9bb2H
  0009b	c7 45 ec 9d 83
	85 b5		 mov	 DWORD PTR __k$551502[ebp+8], -1249541219 ; b585839dH
  000a2	8d 45 e4	 lea	 eax, DWORD PTR __k$551502[ebp]
  000a5	c7 45 f0 84 88
	93 00		 mov	 DWORD PTR __k$551502[ebp+12], 9668740 ; 00938884H
  000ac	59		 pop	 ecx
$LL212@LoadProper:
  000ad	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000b3	83 c0 04	 add	 eax, 4
  000b6	49		 dec	 ecx
  000b7	75 f4		 jne	 SHORT $LL212@LoadProper
  000b9	6a 0c		 push	 12			; 0000000cH
  000bb	58		 pop	 eax
$LL209@LoadProper:
  000bc	8b c8		 mov	 ecx, eax
  000be	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000c4	79 05		 jns	 SHORT $LN224@LoadProper
  000c6	49		 dec	 ecx
  000c7	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000ca	41		 inc	 ecx
$LN224@LoadProper:
  000cb	b2 ed		 mov	 dl, -19			; ffffffedH
  000cd	2a d1		 sub	 dl, cl
  000cf	30 54 05 e4	 xor	 BYTE PTR __k$551502[ebp+eax], dl
  000d3	40		 inc	 eax
  000d4	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  000d7	7c e3		 jl	 SHORT $LL209@LoadProper
  000d9	6a 00		 push	 0
  000db	8d 45 e4	 lea	 eax, DWORD PTR __k$551502[ebp]
  000de	50		 push	 eax
  000df	8b cb		 mov	 ecx, ebx
  000e1	ff d7		 call	 edi

; 35   : }

  000e3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e6	5f		 pop	 edi
  000e7	89 86 70 09 00
	00		 mov	 DWORD PTR [esi+2416], eax
  000ed	5e		 pop	 esi
  000ee	33 cd		 xor	 ecx, ebp
  000f0	5b		 pop	 ebx
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	c9		 leave
  000f7	c2 04 00	 ret	 4
?LoadProperty@ioSkillGaugeCheckBuff@@UAEXAAVioINILoader@@@Z ENDP ; ioSkillGaugeCheckBuff::LoadProperty
_TEXT	ENDS
EXTRN	?ClearEquipItemGauge@ioBaseChar@@QAE_NH@Z:PROC	; ioBaseChar::ClearEquipItemGauge
EXTRN	?IsNetworkMode@ioPlayStage@@QAE_NXZ:PROC	; ioPlayStage::IsNetworkMode
; Function compile flags: /Ogsp
;	COMDAT ?ProcessBuff@ioSkillGaugeCheckBuff@@UAEXM@Z
_TEXT	SEGMENT
_value$551620 = -4					; size = 4
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioSkillGaugeCheckBuff@@UAEXM@Z PROC	; ioSkillGaugeCheckBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 58   : 	if( GetOwner() == NULL )

  00007	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner

; 59   : 	{
; 60   : 		SetReserveEndBuff();

  0000c	8b ce		 mov	 ecx, esi
  0000e	85 c0		 test	 eax, eax

; 61   : 		return;

  00010	0f 84 aa 00 00
	00		 je	 $LN18@ProcessBuf

; 62   : 	}
; 63   : 
; 64   : 	ioBaseChar *pCreator = GetOwner()->GetBaseChar( m_CreateChar );

  00016	8d 86 88 02 00
	00		 lea	 eax, DWORD PTR [esi+648]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  00022	8b c8		 mov	 ecx, eax
  00024	e8 00 00 00 00	 call	 ?GetBaseChar@ioBaseChar@@QAEPAV1@ABVioHashString@@@Z ; ioBaseChar::GetBaseChar

; 65   : 	if( pCreator == NULL )
; 66   : 	{
; 67   : 		SetReserveEndBuff();

  00029	8b ce		 mov	 ecx, esi
  0002b	85 c0		 test	 eax, eax

; 68   : 		return;

  0002d	0f 84 8d 00 00
	00		 je	 $LN18@ProcessBuf

; 69   : 	}
; 70   : 
; 71   : 	ioPlayStage *pStage = GetOwner()->GetCreator();

  00033	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  00038	8b 88 44 03 00
	00		 mov	 ecx, DWORD PTR [eax+836]

; 72   : 	if( pStage == NULL )

  0003e	85 c9		 test	 ecx, ecx

; 73   : 	{
; 74   : 		SetReserveEndBuff();
; 75   : 		return;

  00040	74 7c		 je	 SHORT $LN2@ProcessBuf

; 76   : 	}
; 77   : 	
; 78   : 	if( pStage->IsNetworkMode() )

  00042	e8 00 00 00 00	 call	 ?IsNetworkMode@ioPlayStage@@QAE_NXZ ; ioPlayStage::IsNetworkMode

; 79   : 	{
; 80   : 		if( GetOwner()->IsNeedProcess() )

  00047	8b ce		 mov	 ecx, esi
  00049	84 c0		 test	 al, al
  0004b	74 4f		 je	 SHORT $LN8@ProcessBuf
  0004d	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  00052	8b 10		 mov	 edx, DWORD PTR [eax]
  00054	8b c8		 mov	 ecx, eax
  00056	ff 92 00 01 00
	00		 call	 DWORD PTR [edx+256]
  0005c	84 c0		 test	 al, al
  0005e	74 14		 je	 SHORT $LN7@ProcessBuf

; 81   : 		{
; 82   : 			if( GetOwner()->ClearEquipItemGauge( ioGaugeClearBuff::GCT_FULL_HIGHT ) )

  00060	6a 02		 push	 2
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  00069	8b c8		 mov	 ecx, eax
  0006b	e8 00 00 00 00	 call	 ?ClearEquipItemGauge@ioBaseChar@@QAE_NH@Z ; ioBaseChar::ClearEquipItemGauge

; 83   : 				CreateSuccusWeapon( true );

  00070	6a 01		 push	 1

; 84   : 			else

  00072	eb 38		 jmp	 SHORT $LN19@ProcessBuf
$LN7@ProcessBuf:
  00074	57		 push	 edi

; 99   : 		return;
; 100  : 	}
; 101  : 
; 102  : 	if( m_dwBuffEndTime < FRAMEGETTIME() )

  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0007b	8b c8		 mov	 ecx, eax
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00083	8b f8		 mov	 edi, eax
  00085	8d 45 fc	 lea	 eax, DWORD PTR _value$551620[ebp]
  00088	50		 push	 eax
  00089	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  0008f	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00094	39 7d fc	 cmp	 DWORD PTR _value$551620[ebp], edi
  00097	5f		 pop	 edi
  00098	73 2b		 jae	 SHORT $LN1@ProcessBuf

; 103  : 		SetReserveEndBuff();

  0009a	eb 22		 jmp	 SHORT $LN2@ProcessBuf
$LN8@ProcessBuf:

; 85   : 				CreateFailWeapon( true );
; 86   : 
; 87   : 			SetReserveEndBuff();
; 88   : 			return;
; 89   : 		}
; 90   : 	}
; 91   : 	else
; 92   : 	{
; 93   : 		if( GetOwner()->ClearEquipItemGauge( ioGaugeClearBuff::GCT_FULL_HIGHT ) )

  0009c	6a 02		 push	 2
  0009e	e8 00 00 00 00	 call	 ?GetOwner@ioBuff@@QAEPAVioBaseChar@@XZ ; ioBuff::GetOwner
  000a3	8b c8		 mov	 ecx, eax
  000a5	e8 00 00 00 00	 call	 ?ClearEquipItemGauge@ioBaseChar@@QAE_NH@Z ; ioBaseChar::ClearEquipItemGauge

; 94   : 			CreateSuccusWeapon( false );

  000aa	6a 00		 push	 0
$LN19@ProcessBuf:
  000ac	8b ce		 mov	 ecx, esi
  000ae	84 c0		 test	 al, al
  000b0	74 07		 je	 SHORT $LN6@ProcessBuf
  000b2	e8 00 00 00 00	 call	 ?CreateSuccusWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z ; ioSkillGaugeCheckBuff::CreateSuccusWeapon

; 95   : 		else

  000b7	eb 05		 jmp	 SHORT $LN2@ProcessBuf
$LN6@ProcessBuf:

; 96   : 			CreateFailWeapon( false );

  000b9	e8 00 00 00 00	 call	 ?CreateFailWeapon@ioSkillGaugeCheckBuff@@IAEX_N@Z ; ioSkillGaugeCheckBuff::CreateFailWeapon
$LN2@ProcessBuf:

; 97   : 
; 98   : 		SetReserveEndBuff();

  000be	8b ce		 mov	 ecx, esi
$LN18@ProcessBuf:
  000c0	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff
$LN1@ProcessBuf:
  000c5	5e		 pop	 esi

; 104  : }

  000c6	c9		 leave
  000c7	c2 04 00	 ret	 4
?ProcessBuff@ioSkillGaugeCheckBuff@@UAEXM@Z ENDP	; ioSkillGaugeCheckBuff::ProcessBuff
_TEXT	ENDS
END
