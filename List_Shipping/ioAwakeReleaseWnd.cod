; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\GUI\ioAwakeReleaseWnd.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?return100@@YAIXZ				; return100
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return100@@YAIXZ
_TEXT	SEGMENT
?return100@@YAIXZ PROC					; return100, COMDAT

; 25   : 	__forceinline unsigned int return100() { __asm mov eax, 100 };

  00000	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00005	c3		 ret	 0
?return100@@YAIXZ ENDP					; return100
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	?OnProcess@ioAwakeReleaseWnd@@MAEXM@Z		; ioAwakeReleaseWnd::OnProcess
EXTRN	__imp_?OnProcess@ioWnd@@MAEXM@Z:PROC
EXTRN	__imp_?ShowWnd@ioWnd@@QAEXXZ:PROC
EXTRN	?IsReserveDeleteAwake@ioSoldierAwakeManager@@QAE_NXZ:PROC ; ioSoldierAwakeManager::IsReserveDeleteAwake
EXTRN	?GetSingleton@ioSoldierAwakeManager@@SAAAV1@XZ:PROC ; ioSoldierAwakeManager::GetSingleton
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	__imp_?IsShow@ioWnd@@QBE_NXZ:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\ioawakereleasewnd.cpp
CONST	ENDS
;	COMDAT ?OnProcess@ioAwakeReleaseWnd@@MAEXM@Z
_TEXT	SEGMENT
tv163 = 8						; size = 4
tv160 = 8						; size = 4
_fTimePerSec$ = 8					; size = 4
?OnProcess@ioAwakeReleaseWnd@@MAEXM@Z PROC		; ioAwakeReleaseWnd::OnProcess, COMDAT
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 38   : 	if( !IsShow() )

  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  0000c	84 c0		 test	 al, al
  0000e	75 5b		 jne	 SHORT $LN3@OnProcess

; 39   : 	{
; 40   : 		if( FRAMEGETTIME() - m_dwHideDelayTime < FLOAT100 )

  00010	57		 push	 edi
  00011	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00016	8b f8		 mov	 edi, eax
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0001e	8b c8		 mov	 ecx, eax
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00026	2b 86 f4 01 00
	00		 sub	 eax, DWORD PTR [esi+500]
  0002c	89 45 08	 mov	 DWORD PTR tv163[ebp], eax
  0002f	db 45 08	 fild	 DWORD PTR tv163[ebp]
  00032	79 06		 jns	 SHORT $LN8@OnProcess
  00034	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN8@OnProcess:
  0003a	89 7d 08	 mov	 DWORD PTR tv160[ebp], edi
  0003d	db 45 08	 fild	 DWORD PTR tv160[ebp]
  00040	85 ff		 test	 edi, edi
  00042	79 06		 jns	 SHORT $LN9@OnProcess
  00044	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN9@OnProcess:
  0004a	df f1		 fcomip	 ST(1)
  0004c	dd d8		 fstp	 ST(0)
  0004e	5f		 pop	 edi
  0004f	77 2d		 ja	 SHORT $LN4@OnProcess

; 41   : 			return;
; 42   : 
; 43   : 		if( g_AwakeMgr.IsReserveDeleteAwake() )

  00051	e8 00 00 00 00	 call	 ?GetSingleton@ioSoldierAwakeManager@@SAAAV1@XZ ; ioSoldierAwakeManager::GetSingleton
  00056	8b c8		 mov	 ecx, eax
  00058	e8 00 00 00 00	 call	 ?IsReserveDeleteAwake@ioSoldierAwakeManager@@QAE_NXZ ; ioSoldierAwakeManager::IsReserveDeleteAwake
  0005d	84 c0		 test	 al, al
  0005f	74 1d		 je	 SHORT $LN4@OnProcess

; 44   : 		{
; 45   : 			ShowWnd();

  00061	8b ce		 mov	 ecx, esi
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowWnd@ioWnd@@QAEXXZ

; 46   : 		}
; 47   : 		return;

  00069	eb 13		 jmp	 SHORT $LN4@OnProcess
$LN3@OnProcess:

; 48   : 	}
; 49   : 
; 50   : 	ioMovingWnd::OnProcess( fTimePerSec );

  0006b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00070	51		 push	 ecx
  00071	8b ce		 mov	 ecx, esi
  00073	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnProcess@ioWnd@@MAEXM@Z
$LN4@OnProcess:
  0007e	5e		 pop	 esi

; 51   : }

  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
?OnProcess@ioAwakeReleaseWnd@@MAEXM@Z ENDP		; ioAwakeReleaseWnd::OnProcess
_TEXT	ENDS
PUBLIC	?iwm_esc@ioAwakeReleaseWnd@@UAE_NXZ		; ioAwakeReleaseWnd::iwm_esc
EXTRN	?EraseDeleteExtraAwake@ioSoldierAwakeManager@@QAEX_N@Z:PROC ; ioSoldierAwakeManager::EraseDeleteExtraAwake
EXTRN	__imp_?iwm_esc@ioWnd@@UAE_NXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?iwm_esc@ioAwakeReleaseWnd@@UAE_NXZ
_TEXT	SEGMENT
?iwm_esc@ioAwakeReleaseWnd@@UAE_NXZ PROC		; ioAwakeReleaseWnd::iwm_esc, COMDAT
; _this$ = ecx

; 109  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 110  : 	if( !IsShow() ) return false;

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  00009	84 c0		 test	 al, al
  0000b	74 1e		 je	 SHORT $LN1@iwm_esc

; 111  : 	if( ioWnd::iwm_esc() )

  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?iwm_esc@ioWnd@@UAE_NXZ
  00015	84 c0		 test	 al, al
  00017	74 12		 je	 SHORT $LN1@iwm_esc

; 112  : 	{
; 113  : 		g_AwakeMgr.EraseDeleteExtraAwake( false );

  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?GetSingleton@ioSoldierAwakeManager@@SAAAV1@XZ ; ioSoldierAwakeManager::GetSingleton
  00020	8b c8		 mov	 ecx, eax
  00022	e8 00 00 00 00	 call	 ?EraseDeleteExtraAwake@ioSoldierAwakeManager@@QAEX_N@Z ; ioSoldierAwakeManager::EraseDeleteExtraAwake

; 114  : 		return true;

  00027	b0 01		 mov	 al, 1
  00029	5e		 pop	 esi

; 117  : }

  0002a	c3		 ret	 0
$LN1@iwm_esc:

; 115  : 	}
; 116  : 	return false;

  0002b	32 c0		 xor	 al, al
  0002d	5e		 pop	 esi

; 117  : }

  0002e	c3		 ret	 0
?iwm_esc@ioAwakeReleaseWnd@@UAE_NXZ ENDP		; ioAwakeReleaseWnd::iwm_esc
_TEXT	ENDS
PUBLIC	?iwm_command@ioAwakeReleaseWnd@@UAEXPAVioWnd@@HK@Z ; ioAwakeReleaseWnd::iwm_command
EXTRN	__imp_?HideWnd@ioWnd@@QAEXXZ:PROC
EXTRN	__imp_?GetID@ioWnd@@QBEKXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?iwm_command@ioAwakeReleaseWnd@@UAEXPAVioWnd@@HK@Z
_TEXT	SEGMENT
_pWnd$ = 8						; size = 4
_cmd$ = 12						; size = 4
_param$ = 16						; size = 4
?iwm_command@ioAwakeReleaseWnd@@UAEXPAVioWnd@@HK@Z PROC	; ioAwakeReleaseWnd::iwm_command, COMDAT
; _this$ = ecx

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 121  : 	DWORD dwID = pWnd->GetID();

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _pWnd$[ebp]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetID@ioWnd@@QBEKXZ

; 122  : 
; 123  : 	switch( dwID )

  0000f	48		 dec	 eax
  00010	74 06		 je	 SHORT $LN2@iwm_comman
  00012	48		 dec	 eax
  00013	74 24		 je	 SHORT $LN4@iwm_comman
  00015	48		 dec	 eax
  00016	75 1c		 jne	 SHORT $LN1@iwm_comman
$LN2@iwm_comman:

; 132  : 	case ID_X:
; 133  : 	case ID_OK:
; 134  : 		if( cmd == IOBN_BTNUP )

  00018	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  0001c	75 16		 jne	 SHORT $LN1@iwm_comman

; 135  : 		{
; 136  : 			g_AwakeMgr.EraseDeleteExtraAwake( false );

  0001e	6a 00		 push	 0
$LN9@iwm_comman:
  00020	e8 00 00 00 00	 call	 ?GetSingleton@ioSoldierAwakeManager@@SAAAV1@XZ ; ioSoldierAwakeManager::GetSingleton
  00025	8b c8		 mov	 ecx, eax
  00027	e8 00 00 00 00	 call	 ?EraseDeleteExtraAwake@ioSoldierAwakeManager@@QAEX_N@Z ; ioSoldierAwakeManager::EraseDeleteExtraAwake

; 137  : 			HideWnd();

  0002c	8b ce		 mov	 ecx, esi
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideWnd@ioWnd@@QAEXXZ
$LN1@iwm_comman:
  00034	5e		 pop	 esi

; 138  : 		}
; 139  : 		break;
; 140  : 	}
; 141  : }

  00035	5d		 pop	 ebp
  00036	c2 0c 00	 ret	 12			; 0000000cH
$LN4@iwm_comman:

; 124  : 	{
; 125  : 	case ID_ALL_OK:
; 126  : 		if( cmd == IOBN_BTNUP )

  00039	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  0003d	75 f5		 jne	 SHORT $LN1@iwm_comman

; 127  : 		{
; 128  : 			g_AwakeMgr.EraseDeleteExtraAwake( true );

  0003f	6a 01		 push	 1

; 129  : 			HideWnd();
; 130  : 		}
; 131  : 		break;

  00041	eb dd		 jmp	 SHORT $LN9@iwm_comman
?iwm_command@ioAwakeReleaseWnd@@UAEXPAVioWnd@@HK@Z ENDP	; ioAwakeReleaseWnd::iwm_command
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
EXTRN	_memcpy:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 496  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 		}

  00003	5d		 pop	 ebp

; 497  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 526  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 527  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]
  00008	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000b	88 01		 mov	 BYTE PTR [ecx], al

; 528  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2010 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2011 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2012 : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 2010 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2011 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2012 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 459  : 		}

  00000	c3		 ret	 0
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2004 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2005 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr@2
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2006 : 		}

  00008	c3		 ret	 0
$LN3@Myptr@2:

; 2004 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2005 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2006 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z	; operator==<9>
EXTRN	__imp_?c_str@ioHashString@@QBEPBDXZ:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iohashstring.h
;	COMDAT ??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 9
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z PROC	; operator==<9>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _lhs$[ebp]
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 ee 00 00
	00		 je	 $LN96@operator
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 d7 00 00
	00		 je	 $LN95@operator
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 c0 00 00
	00		 je	 $LN94@operator
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 a9 00 00
	00		 je	 $LN93@operator
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 92 00 00
	00		 je	 $LN92@operator
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	74 7f		 je	 SHORT $LN91@operator
  00071	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00074	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  00077	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007a	84 d2		 test	 dl, dl
  0007c	74 6c		 je	 SHORT $LN90@operator
  0007e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00081	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  00084	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00087	84 d2		 test	 dl, dl
  00089	74 59		 je	 SHORT $LN89@operator
  0008b	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0008e	80 78 08 00	 cmp	 BYTE PTR [eax+8], 0
  00092	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  00095	74 7b		 je	 SHORT $LN1@operator
  00097	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  0009a	84 d2		 test	 dl, dl
  0009c	74 40		 je	 SHORT $LN87@operator
  0009e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000a1	88 55 f5	 mov	 BYTE PTR __t$[ebp+9], dl
  000a4	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000a7	84 d2		 test	 dl, dl
  000a9	74 2d		 je	 SHORT $LN86@operator
  000ab	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ae	88 55 f6	 mov	 BYTE PTR __t$[ebp+10], dl
  000b1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000b4	84 d2		 test	 dl, dl
  000b6	74 1a		 je	 SHORT $LN85@operator
  000b8	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  000bb	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000be	88 55 f7	 mov	 BYTE PTR __t$[ebp+11], dl
  000c1	84 c0		 test	 al, al
  000c3	74 07		 je	 SHORT $LN84@operator
  000c5	34 ed		 xor	 al, -19			; ffffffedH
  000c7	88 45 f8	 mov	 BYTE PTR __t$[ebp+12], al
  000ca	eb 46		 jmp	 SHORT $LN1@operator
$LN84@operator:
  000cc	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  000d0	eb 40		 jmp	 SHORT $LN1@operator
$LN85@operator:
  000d2	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  000d6	eb 3a		 jmp	 SHORT $LN1@operator
$LN86@operator:
  000d8	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000dc	eb 34		 jmp	 SHORT $LN1@operator
$LN87@operator:
  000de	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  000e2	eb 2e		 jmp	 SHORT $LN1@operator
$LN89@operator:
  000e4	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  000e8	eb 28		 jmp	 SHORT $LN1@operator
$LN90@operator:
  000ea	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  000ee	eb 22		 jmp	 SHORT $LN1@operator
$LN91@operator:
  000f0	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  000f4	eb 1c		 jmp	 SHORT $LN1@operator
$LN92@operator:
  000f6	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  000fa	eb 16		 jmp	 SHORT $LN1@operator
$LN93@operator:
  000fc	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00100	eb 10		 jmp	 SHORT $LN1@operator
$LN94@operator:
  00102	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  00106	eb 0a		 jmp	 SHORT $LN1@operator
$LN95@operator:
  00108	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  0010c	eb 04		 jmp	 SHORT $LN1@operator
$LN96@operator:
  0010e	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator:
  00112	6a 02		 push	 2
  00114	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  00117	c6 45 f4 00	 mov	 BYTE PTR __t$[ebp+8], 0
  0011b	5a		 pop	 edx
$LL104@operator:
  0011c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00122	83 c0 04	 add	 eax, 4
  00125	4a		 dec	 edx
  00126	75 f4		 jne	 SHORT $LL104@operator
  00128	56		 push	 esi
  00129	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator:
  00132	8a 08		 mov	 cl, BYTE PTR [eax]
  00134	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00136	75 1a		 jne	 SHORT $LN112@operator
  00138	84 c9		 test	 cl, cl
  0013a	74 12		 je	 SHORT $LN113@operator
  0013c	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0013f	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00142	75 0e		 jne	 SHORT $LN112@operator
  00144	83 c0 02	 add	 eax, 2
  00147	83 c6 02	 add	 esi, 2
  0014a	84 c9		 test	 cl, cl
  0014c	75 e4		 jne	 SHORT $LL111@operator
$LN113@operator:
  0014e	33 c0		 xor	 eax, eax
  00150	eb 05		 jmp	 SHORT $LN114@operator
$LN112@operator:
  00152	1b c0		 sbb	 eax, eax
  00154	83 d8 ff	 sbb	 eax, -1
$LN114@operator:
  00157	33 c9		 xor	 ecx, ecx
  00159	85 c0		 test	 eax, eax
  0015b	0f 94 c0	 sete	 al

; 148  : }

  0015e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00161	33 cd		 xor	 ecx, ebp
  00163	5e		 pop	 esi
  00164	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00169	c9		 leave
  0016a	c3		 ret	 0
??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z ENDP	; operator==<9>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z	; operator==<12>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z PROC	; operator==<12>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 32 01 00
	00		 je	 $LN96@operator@2
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 1b 01 00
	00		 je	 $LN95@operator@2
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 04 01 00
	00		 je	 $LN94@operator@2
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 ec 00 00
	00		 je	 $LN93@operator@2
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 d5 00 00
	00		 je	 $LN92@operator@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 be 00 00
	00		 je	 $LN91@operator@2
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 a8 00 00
	00		 je	 $LN90@operator@2
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 92 00 00
	00		 je	 $LN89@operator@2
  00099	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009c	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  0009f	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a2	84 d2		 test	 dl, dl
  000a4	74 7f		 je	 SHORT $LN88@operator@2
  000a6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a9	88 55 f4	 mov	 BYTE PTR __t$[ebp+8], dl
  000ac	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000af	84 d2		 test	 dl, dl
  000b1	74 6c		 je	 SHORT $LN87@operator@2
  000b3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b6	88 55 f5	 mov	 BYTE PTR __t$[ebp+9], dl
  000b9	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000bc	84 d2		 test	 dl, dl
  000be	74 5a		 je	 SHORT $LN86@operator@2
  000c0	32 d1		 xor	 dl, cl
  000c2	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000c6	88 55 f6	 mov	 BYTE PTR __t$[ebp+10], dl
  000c9	0f 84 89 00 00
	00		 je	 $LN1@operator@2
  000cf	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d2	84 d2		 test	 dl, dl
  000d4	74 3e		 je	 SHORT $LN84@operator@2
  000d6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d9	88 55 f8	 mov	 BYTE PTR __t$[ebp+12], dl
  000dc	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000df	84 d2		 test	 dl, dl
  000e1	74 2b		 je	 SHORT $LN83@operator@2
  000e3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e6	88 55 f9	 mov	 BYTE PTR __t$[ebp+13], dl
  000e9	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000ec	84 d2		 test	 dl, dl
  000ee	74 19		 je	 SHORT $LN82@operator@2
  000f0	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000f3	32 d1		 xor	 dl, cl
  000f5	88 55 fa	 mov	 BYTE PTR __t$[ebp+14], dl
  000f8	84 c0		 test	 al, al
  000fa	74 07		 je	 SHORT $LN81@operator@2
  000fc	34 ea		 xor	 al, -22			; ffffffeaH
  000fe	88 45 fb	 mov	 BYTE PTR __t$[ebp+15], al
  00101	eb 55		 jmp	 SHORT $LN1@operator@2
$LN81@operator@2:
  00103	c6 45 fb ea	 mov	 BYTE PTR __t$[ebp+15], -22 ; ffffffeaH
  00107	eb 4f		 jmp	 SHORT $LN1@operator@2
$LN82@operator@2:
  00109	88 4d fa	 mov	 BYTE PTR __t$[ebp+14], cl
  0010c	eb 4a		 jmp	 SHORT $LN1@operator@2
$LN83@operator@2:
  0010e	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+13], -20 ; ffffffecH
  00112	eb 44		 jmp	 SHORT $LN1@operator@2
$LN84@operator@2:
  00114	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  00118	eb 3e		 jmp	 SHORT $LN1@operator@2
$LN86@operator@2:
  0011a	88 4d f6	 mov	 BYTE PTR __t$[ebp+10], cl
  0011d	eb 39		 jmp	 SHORT $LN1@operator@2
$LN87@operator@2:
  0011f	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  00123	eb 33		 jmp	 SHORT $LN1@operator@2
$LN88@operator@2:
  00125	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  00129	eb 2d		 jmp	 SHORT $LN1@operator@2
$LN89@operator@2:
  0012b	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  0012f	eb 27		 jmp	 SHORT $LN1@operator@2
$LN90@operator@2:
  00131	88 4d f2	 mov	 BYTE PTR __t$[ebp+6], cl
  00134	eb 22		 jmp	 SHORT $LN1@operator@2
$LN91@operator@2:
  00136	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  0013a	eb 1c		 jmp	 SHORT $LN1@operator@2
$LN92@operator@2:
  0013c	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00140	eb 16		 jmp	 SHORT $LN1@operator@2
$LN93@operator@2:
  00142	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00146	eb 10		 jmp	 SHORT $LN1@operator@2
$LN94@operator@2:
  00148	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  0014c	eb 0a		 jmp	 SHORT $LN1@operator@2
$LN95@operator@2:
  0014e	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  00152	eb 04		 jmp	 SHORT $LN1@operator@2
$LN96@operator@2:
  00154	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@2:
  00158	6a 02		 push	 2
  0015a	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  0015d	c6 45 f7 00	 mov	 BYTE PTR __t$[ebp+11], 0
  00161	5a		 pop	 edx
$LL104@operator@2:
  00162	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00168	83 c0 04	 add	 eax, 4
  0016b	4a		 dec	 edx
  0016c	75 f4		 jne	 SHORT $LL104@operator@2
  0016e	6a 08		 push	 8
  00170	58		 pop	 eax
$LL101@operator@2:
  00171	8b c8		 mov	 ecx, eax
  00173	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00179	79 05		 jns	 SHORT $LN115@operator@2
  0017b	49		 dec	 ecx
  0017c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0017f	41		 inc	 ecx
$LN115@operator@2:
  00180	b2 ed		 mov	 dl, -19			; ffffffedH
  00182	2a d1		 sub	 dl, cl
  00184	30 54 05 ec	 xor	 BYTE PTR __t$[ebp+eax], dl
  00188	40		 inc	 eax
  00189	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0018c	7c e3		 jl	 SHORT $LL101@operator@2
  0018e	8b cf		 mov	 ecx, edi
  00190	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  00193	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@2:
  00199	8a 08		 mov	 cl, BYTE PTR [eax]
  0019b	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0019d	75 1a		 jne	 SHORT $LN112@operator@2
  0019f	84 c9		 test	 cl, cl
  001a1	74 12		 je	 SHORT $LN113@operator@2
  001a3	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  001a6	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  001a9	75 0e		 jne	 SHORT $LN112@operator@2
  001ab	83 c0 02	 add	 eax, 2
  001ae	83 c6 02	 add	 esi, 2
  001b1	84 c9		 test	 cl, cl
  001b3	75 e4		 jne	 SHORT $LL111@operator@2
$LN113@operator@2:
  001b5	33 c0		 xor	 eax, eax
  001b7	eb 05		 jmp	 SHORT $LN114@operator@2
$LN112@operator@2:
  001b9	1b c0		 sbb	 eax, eax
  001bb	83 d8 ff	 sbb	 eax, -1
$LN114@operator@2:
  001be	33 c9		 xor	 ecx, ecx
  001c0	85 c0		 test	 eax, eax
  001c2	0f 94 c0	 sete	 al

; 148  : }

  001c5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c8	5f		 pop	 edi
  001c9	33 cd		 xor	 ecx, ebp
  001cb	5e		 pop	 esi
  001cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d1	c9		 leave
  001d2	c3		 ret	 0
??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z ENDP	; operator==<12>
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1497 : 		return (_Myptr());

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN5@c_str
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1498 : 		}

  00008	c3		 ret	 0

; 1497 : 		return (_Myptr());

$LN5@c_str:
  00009	8b c1		 mov	 eax, ecx

; 1498 : 		}

  0000b	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 454  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 455  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogsp
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1953 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1954 : 		_Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0000a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000d	72 02		 jb	 SHORT $LN5@Eos
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN5@Eos:
  00011	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1955 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	_szType$GSCopy$
PUBLIC	_pImage$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?AddRenderImage@ioAwakeReleaseWnd@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z ; ioAwakeReleaseWnd::AddRenderImage
EXTRN	__imp_?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\ioawakereleasewnd.cpp
;	COMDAT ?AddRenderImage@ioAwakeReleaseWnd@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z
_TEXT	SEGMENT
_szType$GSCopy$ = -32					; size = 4
_pImage$GSCopy$ = -28					; size = 4
_this$GSCopy$ = -24					; size = 4
__t$511823 = -20					; size = 12
__t$511784 = -20					; size = 9
__$ArrayPad$ = -4					; size = 4
_szType$ = 8						; size = 4
_pImage$ = 12						; size = 4
?AddRenderImage@ioAwakeReleaseWnd@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z PROC ; ioAwakeReleaseWnd::AddRenderImage, COMDAT
; _this$ = ecx

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _pImage$[ebp]
  00013	8b 55 08	 mov	 edx, DWORD PTR _szType$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	57		 push	 edi

; 22   : 	if( szType == "IconBack" )

  00019	6a 02		 push	 2
  0001b	5b		 pop	 ebx
  0001c	89 4d e8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx

; 26   : 	}
; 27   : 	else if( szType == "SoliderIcon" )

  0001f	89 45 e4	 mov	 DWORD PTR _pImage$GSCopy$[ebp], eax
  00022	89 55 e0	 mov	 DWORD PTR _szType$GSCopy$[ebp], edx
  00025	c7 45 ec a4 8f
	84 84		 mov	 DWORD PTR __t$511784[ebp], -2071687260 ; 84848fa4H
  0002c	c7 45 f0 af 8d
	88 81		 mov	 DWORD PTR __t$511784[ebp+4], -2121757265 ; 81888dafH
  00033	8d 45 ec	 lea	 eax, DWORD PTR __t$511784[ebp]
  00036	c6 45 f4 00	 mov	 BYTE PTR __t$511784[ebp+8], 0
  0003a	8b cb		 mov	 ecx, ebx
  0003c	bf ed ec eb ea	 mov	 edi, -353637139		; eaebecedH
$LL116@AddRenderI:

; 22   : 	if( szType == "IconBack" )

  00041	31 38		 xor	 DWORD PTR [eax], edi
  00043	83 c0 04	 add	 eax, 4
  00046	49		 dec	 ecx
  00047	75 f8		 jne	 SHORT $LL116@AddRenderI
  00049	8b ca		 mov	 ecx, edx
  0004b	8d 75 ec	 lea	 esi, DWORD PTR __t$511784[ebp]
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL234@AddRenderI:
  00054	8a 08		 mov	 cl, BYTE PTR [eax]
  00056	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00058	75 18		 jne	 SHORT $LN235@AddRenderI
  0005a	84 c9		 test	 cl, cl
  0005c	74 10		 je	 SHORT $LN236@AddRenderI
  0005e	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00061	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00064	75 0c		 jne	 SHORT $LN235@AddRenderI
  00066	03 c3		 add	 eax, ebx
  00068	03 f3		 add	 esi, ebx
  0006a	84 c9		 test	 cl, cl
  0006c	75 e6		 jne	 SHORT $LL234@AddRenderI
$LN236@AddRenderI:
  0006e	33 c0		 xor	 eax, eax
  00070	eb 05		 jmp	 SHORT $LN237@AddRenderI
$LN235@AddRenderI:
  00072	1b c0		 sbb	 eax, eax
  00074	83 d8 ff	 sbb	 eax, -1
$LN237@AddRenderI:
  00077	85 c0		 test	 eax, eax
  00079	75 29		 jne	 SHORT $LN233@AddRenderI

; 23   : 	{
; 24   : 		SAFEDELETE( m_pIconBack );

  0007b	8b 75 e8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0007e	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  00084	85 c9		 test	 ecx, ecx
  00086	74 0e		 je	 SHORT $LN5@AddRenderI
  00088	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008a	6a 01		 push	 1
  0008c	ff 50 40	 call	 DWORD PTR [eax+64]
  0008f	83 a6 90 01 00
	00 00		 and	 DWORD PTR [esi+400], 0
$LN5@AddRenderI:

; 25   : 		m_pIconBack = pImage;

  00096	8b 45 e4	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00099	89 86 90 01 00
	00		 mov	 DWORD PTR [esi+400], eax
  0009f	e9 aa 00 00 00	 jmp	 $LN1@AddRenderI
$LN233@AddRenderI:

; 26   : 	}
; 27   : 	else if( szType == "SoliderIcon" )

  000a4	c7 45 ec be 83
	87 83		 mov	 DWORD PTR __t$511823[ebp], -2088270914 ; 838783beH
  000ab	c7 45 f0 89 89
	99 a3		 mov	 DWORD PTR __t$511823[ebp+4], -1550218871 ; a3998989H
  000b2	8d 45 ec	 lea	 eax, DWORD PTR __t$511823[ebp]
  000b5	c7 45 f4 8e 83
	85 00		 mov	 DWORD PTR __t$511823[ebp+8], 8749966 ; 0085838eH
  000bc	8b cb		 mov	 ecx, ebx
$LL222@AddRenderI:
  000be	31 38		 xor	 DWORD PTR [eax], edi
  000c0	83 c0 04	 add	 eax, 4
  000c3	49		 dec	 ecx
  000c4	75 f8		 jne	 SHORT $LL222@AddRenderI
  000c6	6a 08		 push	 8
  000c8	58		 pop	 eax
$LL219@AddRenderI:
  000c9	8b c8		 mov	 ecx, eax
  000cb	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000d1	79 05		 jns	 SHORT $LN242@AddRenderI
  000d3	49		 dec	 ecx
  000d4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000d7	41		 inc	 ecx
$LN242@AddRenderI:
  000d8	b2 ed		 mov	 dl, -19			; ffffffedH
  000da	2a d1		 sub	 dl, cl
  000dc	30 54 05 ec	 xor	 BYTE PTR __t$511823[ebp+eax], dl
  000e0	40		 inc	 eax
  000e1	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  000e4	7c e3		 jl	 SHORT $LL219@AddRenderI
  000e6	8b 4d e0	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  000e9	8d 75 ec	 lea	 esi, DWORD PTR __t$511823[ebp]
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL238@AddRenderI:
  000f2	8a 08		 mov	 cl, BYTE PTR [eax]
  000f4	3a 0e		 cmp	 cl, BYTE PTR [esi]
  000f6	75 18		 jne	 SHORT $LN239@AddRenderI
  000f8	84 c9		 test	 cl, cl
  000fa	74 10		 je	 SHORT $LN240@AddRenderI
  000fc	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000ff	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00102	75 0c		 jne	 SHORT $LN239@AddRenderI
  00104	03 c3		 add	 eax, ebx
  00106	03 f3		 add	 esi, ebx
  00108	84 c9		 test	 cl, cl
  0010a	75 e6		 jne	 SHORT $LL238@AddRenderI
$LN240@AddRenderI:
  0010c	33 c0		 xor	 eax, eax
  0010e	eb 05		 jmp	 SHORT $LN241@AddRenderI
$LN239@AddRenderI:
  00110	1b c0		 sbb	 eax, eax
  00112	83 d8 ff	 sbb	 eax, -1
$LN241@AddRenderI:
  00115	85 c0		 test	 eax, eax
  00117	75 26		 jne	 SHORT $LN3@AddRenderI

; 28   : 	{
; 29   : 		SAFEDELETE( m_pSoliderIcon );

  00119	8b 75 e8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0011c	8b 8e 94 01 00
	00		 mov	 ecx, DWORD PTR [esi+404]
  00122	85 c9		 test	 ecx, ecx
  00124	74 0e		 je	 SHORT $LN2@AddRenderI
  00126	8b 01		 mov	 eax, DWORD PTR [ecx]
  00128	6a 01		 push	 1
  0012a	ff 50 40	 call	 DWORD PTR [eax+64]
  0012d	83 a6 94 01 00
	00 00		 and	 DWORD PTR [esi+404], 0
$LN2@AddRenderI:

; 30   : 		m_pSoliderIcon = pImage;

  00134	8b 45 e4	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00137	89 86 94 01 00
	00		 mov	 DWORD PTR [esi+404], eax

; 31   : 	}
; 32   : 	else

  0013d	eb 0f		 jmp	 SHORT $LN1@AddRenderI
$LN3@AddRenderI:

; 33   : 		ioWnd::AddRenderImage( szType, pImage );

  0013f	ff 75 e4	 push	 DWORD PTR _pImage$GSCopy$[ebp]
  00142	8b 4d e8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00145	ff 75 e0	 push	 DWORD PTR _szType$GSCopy$[ebp]
  00148	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
$LN1@AddRenderI:

; 34   : }

  0014e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00151	5f		 pop	 edi
  00152	5e		 pop	 esi
  00153	33 cd		 xor	 ecx, ebp
  00155	5b		 pop	 ebx
  00156	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015b	c9		 leave
  0015c	c2 08 00	 ret	 8
?AddRenderImage@ioAwakeReleaseWnd@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z ENDP ; ioAwakeReleaseWnd::AddRenderImage
_TEXT	ENDS
PUBLIC	__real@3f266666
PUBLIC	??_C@_0BM@NMFJOMHK@ioAwakeReleaseWnd?3?3OnRender?$AA@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__real@3f800000
PUBLIC	?OnRender@ioAwakeReleaseWnd@@MAEXXZ		; ioAwakeReleaseWnd::OnRender
EXTRN	__imp_?PrintText@ioFontManager@@QAAXMMMPBDZZ:PROC
EXTRN	__imp_?PrintText@ioFontManager@@QAEXMMMPBD0@Z:PROC
EXTRN	__imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z:PROC
EXTRN	__imp_?GetSingleton@ioStringManager@@SAAAV1@XZ:PROC
EXTRN	__imp_?SetTextColor@ioFontManager@@QAEXK@Z:PROC
EXTRN	__imp_?SetBkColor@ioFontManager@@QAEXHHH@Z:PROC
EXTRN	__imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z:PROC
EXTRN	__imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z:PROC
EXTRN	__imp_?GetSingleton@ioFontManager@@SAAAV1@XZ:PROC
EXTRN	?RenderGradeIconBack@ioUIImageRenderManager@@QAEXHHHMW4UIRenderType@@W4TextureFilterOption@@HHH_N0@Z:PROC ; ioUIImageRenderManager::RenderGradeIconBack
EXTRN	?GetSingleton@ioUIImageRenderManager@@SAAAV1@XZ:PROC ; ioUIImageRenderManager::GetSingleton
EXTRN	__imp_?GetDerivedPosY@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?GetDerivedPosX@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?OnRender@ioWnd@@MAEXXZ:PROC
;	COMDAT __real@3f266666
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT ??_C@_0BM@NMFJOMHK@ioAwakeReleaseWnd?3?3OnRender?$AA@
CONST	SEGMENT
??_C@_0BM@NMFJOMHK@ioAwakeReleaseWnd?3?3OnRender?$AA@ DB 'ioAwakeReleaseW'
	DB	'nd::OnRender', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\ioawakereleasewnd.cpp
CONST	ENDS
;	COMDAT ?OnRender@ioAwakeReleaseWnd@@MAEXXZ
_TEXT	SEGMENT
tv346 = -8						; size = 4
tv333 = -8						; size = 4
_iXPos$ = -8						; size = 4
_iYPos$ = -4						; size = 4
?OnRender@ioAwakeReleaseWnd@@MAEXXZ PROC		; ioAwakeReleaseWnd::OnRender, COMDAT
; _this$ = ecx

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 55   : 	ioWnd::OnRender();

  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnRender@ioWnd@@MAEXXZ

; 56   : 
; 57   : 	int iXPos = GetDerivedPosX();

  00010	8b cf		 mov	 ecx, edi
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosX@ioWnd@@QBEHXZ

; 58   : 	int iYPos = GetDerivedPosY();

  00018	8b cf		 mov	 ecx, edi
  0001a	89 45 f8	 mov	 DWORD PTR _iXPos$[ebp], eax
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ

; 59   : 
; 60   : 	if( m_pIconBack )

  00023	33 db		 xor	 ebx, ebx
  00025	8b f0		 mov	 esi, eax
  00027	89 75 fc	 mov	 DWORD PTR _iYPos$[ebp], esi
  0002a	39 9f 90 01 00
	00		 cmp	 DWORD PTR [edi+400], ebx
  00030	74 2d		 je	 SHORT $LN2@OnRender

; 61   : 		m_pIconBack->Render( iXPos, iYPos, UI_RENDER_MULTIPLY );

  00032	8b 87 90 01 00
	00		 mov	 eax, DWORD PTR [edi+400]
  00038	8b 10		 mov	 edx, DWORD PTR [eax]
  0003a	53		 push	 ebx
  0003b	53		 push	 ebx
  0003c	53		 push	 ebx
  0003d	6a 08		 push	 8
  0003f	51		 push	 ecx
  00040	0f 57 c0	 xorps	 xmm0, xmm0
  00043	51		 push	 ecx
  00044	f3 0f 2a c6	 cvtsi2ss xmm0, esi
  00048	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0004e	66 0f 6e 45 f8	 movd	 xmm0, DWORD PTR _iXPos$[ebp]
  00053	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00056	8b c8		 mov	 ecx, eax
  00058	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005d	ff 12		 call	 DWORD PTR [edx]
$LN2@OnRender:

; 62   : 
; 63   : 	g_UIImageRenderMgr.RenderGradeIconBack( m_nGradeType, iXPos + 103, iYPos + 98 );

  0005f	8b 4d f8	 mov	 ecx, DWORD PTR _iXPos$[ebp]
  00062	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0006a	53		 push	 ebx
  0006b	53		 push	 ebx
  0006c	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00071	50		 push	 eax
  00072	50		 push	 eax
  00073	50		 push	 eax
  00074	53		 push	 ebx
  00075	83 c1 67	 add	 ecx, 103		; 00000067H
  00078	53		 push	 ebx
  00079	51		 push	 ecx
  0007a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007f	83 c6 62	 add	 esi, 98			; 00000062H
  00082	56		 push	 esi
  00083	51		 push	 ecx
  00084	ff b7 f0 01 00
	00		 push	 DWORD PTR [edi+496]
  0008a	89 4d f8	 mov	 DWORD PTR tv333[ebp], ecx
  0008d	e8 00 00 00 00	 call	 ?GetSingleton@ioUIImageRenderManager@@SAAAV1@XZ ; ioUIImageRenderManager::GetSingleton
  00092	8b c8		 mov	 ecx, eax
  00094	e8 00 00 00 00	 call	 ?RenderGradeIconBack@ioUIImageRenderManager@@QAEXHHHMW4UIRenderType@@W4TextureFilterOption@@HHH_N0@Z ; ioUIImageRenderManager::RenderGradeIconBack

; 64   : 
; 65   : 	if( m_pSoliderIcon )

  00099	39 9f 94 01 00
	00		 cmp	 DWORD PTR [edi+404], ebx
  0009f	74 2c		 je	 SHORT $LN1@OnRender

; 66   : 		m_pSoliderIcon->Render( iXPos + 103, iYPos + 98 );

  000a1	8b 87 94 01 00
	00		 mov	 eax, DWORD PTR [edi+404]
  000a7	8b 10		 mov	 edx, DWORD PTR [eax]
  000a9	53		 push	 ebx
  000aa	53		 push	 ebx
  000ab	53		 push	 ebx
  000ac	53		 push	 ebx
  000ad	51		 push	 ecx
  000ae	0f 57 c0	 xorps	 xmm0, xmm0
  000b1	51		 push	 ecx
  000b2	f3 0f 2a c6	 cvtsi2ss xmm0, esi
  000b6	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000bc	66 0f 6e 45 f8	 movd	 xmm0, DWORD PTR tv333[ebp]
  000c1	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000c4	8b c8		 mov	 ecx, eax
  000c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cb	ff 12		 call	 DWORD PTR [edx]
$LN1@OnRender:

; 67   : 
; 68   : 	g_FontMgr.SetTextStyle( TS_NORMAL );

  000cd	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?GetSingleton@ioFontManager@@SAAAV1@XZ
  000d3	53		 push	 ebx
  000d4	ff d6		 call	 esi
  000d6	8b c8		 mov	 ecx, eax
  000d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z

; 69   : 	g_FontMgr.SetAlignType( TAT_CENTER );

  000de	6a 01		 push	 1
  000e0	ff d6		 call	 esi
  000e2	8b c8		 mov	 ecx, eax
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z

; 70   : 	g_FontMgr.SetBkColor( 0, 0, 0 );

  000ea	53		 push	 ebx
  000eb	53		 push	 ebx
  000ec	53		 push	 ebx
  000ed	ff d6		 call	 esi
  000ef	8b c8		 mov	 ecx, eax
  000f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetBkColor@ioFontManager@@QAEXHHH@Z

; 71   : 	g_FontMgr.SetTextColor( m_dwAwakeColor );

  000f7	ff b7 ec 01 00
	00		 push	 DWORD PTR [edi+492]
  000fd	ff d6		 call	 esi
  000ff	8b c8		 mov	 ecx, eax
  00101	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 72   : 	g_FontMgr.PrintText( iXPos + 103, iYPos + 144, FONT_SIZE_13, STR(1), m_szClassName.c_str() ); 

  00107	8d 87 b4 01 00
	00		 lea	 eax, DWORD PTR [edi+436]
  0010d	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00111	72 02		 jb	 SHORT $LN9@OnRender
  00113	8b 00		 mov	 eax, DWORD PTR [eax]
$LN9@OnRender:
  00115	66 0f 6e 45 f8	 movd	 xmm0, DWORD PTR tv333[ebp]
  0011a	50		 push	 eax
  0011b	53		 push	 ebx
  0011c	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00122	6a 01		 push	 1
  00124	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00129	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0012c	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NMFJOMHK@ioAwakeReleaseWnd?3?3OnRender?$AA@
  00131	f3 0f 11 45 f8	 movss	 DWORD PTR tv346[ebp], xmm0
  00136	ff d3		 call	 ebx
  00138	8b c8		 mov	 ecx, eax
  0013a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00140	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00148	50		 push	 eax
  00149	8b 45 fc	 mov	 eax, DWORD PTR _iYPos$[ebp]
  0014c	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0014f	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00155	05 90 00 00 00	 add	 eax, 144		; 00000090H
  0015a	0f 57 c0	 xorps	 xmm0, xmm0
  0015d	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00161	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00167	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR tv346[ebp]
  0016c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00171	ff d6		 call	 esi
  00173	8b c8		 mov	 ecx, eax
  00175	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAEXMMMPBD0@Z

; 73   : 
; 74   : 	g_FontMgr.SetTextColor( TCT_DEFAULT_DARKGRAY );

  0017b	68 3a 3a 3a ff	 push	 -12961222		; ff3a3a3aH
  00180	ff d6		 call	 esi
  00182	8b c8		 mov	 ecx, eax
  00184	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 75   : 	g_FontMgr.PrintText( iXPos + 103, iYPos + 162, FONT_SIZE_13, STR(2), m_szAwakeName.c_str() ); 

  0018a	81 c7 d0 01 00
	00		 add	 edi, 464		; 000001d0H
  00190	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  00194	72 02		 jb	 SHORT $LN15@OnRender
  00196	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN15@OnRender:
  00198	57		 push	 edi
  00199	6a 00		 push	 0
  0019b	6a 02		 push	 2
  0019d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  001a2	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NMFJOMHK@ioAwakeReleaseWnd?3?3OnRender?$AA@
  001a7	ff d3		 call	 ebx
  001a9	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  001af	8b c8		 mov	 ecx, eax
  001b1	ff d7		 call	 edi
  001b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  001bb	50		 push	 eax
  001bc	8b 45 fc	 mov	 eax, DWORD PTR _iYPos$[ebp]
  001bf	83 ec 0c	 sub	 esp, 12			; 0000000cH
  001c2	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  001c8	05 a2 00 00 00	 add	 eax, 162		; 000000a2H
  001cd	0f 57 c0	 xorps	 xmm0, xmm0
  001d0	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  001d4	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001da	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR tv346[ebp]
  001df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e4	ff d6		 call	 esi
  001e6	8b c8		 mov	 ecx, eax
  001e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAEXMMMPBD0@Z

; 76   : 
; 77   : 	g_FontMgr.SetTextColor( TCT_DEFAULT_GRAY );

  001ee	68 6e 6e 6e ff	 push	 -9539986		; ff6e6e6eH
  001f3	ff d6		 call	 esi
  001f5	8b c8		 mov	 ecx, eax
  001f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 78   : 	g_FontMgr.PrintText( iXPos + 103, iYPos + 180, FONT_SIZE_13, STR(3) ); 	

  001fd	6a 00		 push	 0
  001ff	6a 03		 push	 3
  00201	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00206	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NMFJOMHK@ioAwakeReleaseWnd?3?3OnRender?$AA@
  0020b	ff d3		 call	 ebx
  0020d	8b c8		 mov	 ecx, eax
  0020f	ff d7		 call	 edi
  00211	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00219	50		 push	 eax
  0021a	8b 45 fc	 mov	 eax, DWORD PTR _iYPos$[ebp]
  0021d	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00220	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00226	05 b4 00 00 00	 add	 eax, 180		; 000000b4H
  0022b	0f 57 c0	 xorps	 xmm0, xmm0
  0022e	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00232	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00238	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR tv346[ebp]
  0023d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00242	ff d6		 call	 esi
  00244	50		 push	 eax
  00245	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAAXMMMPBDZZ
  0024b	83 c4 14	 add	 esp, 20			; 00000014H
  0024e	5f		 pop	 edi
  0024f	5e		 pop	 esi
  00250	5b		 pop	 ebx

; 79   : }

  00251	c9		 leave
  00252	c3		 ret	 0
?OnRender@ioAwakeReleaseWnd@@MAEXXZ ENDP		; ioAwakeReleaseWnd::OnRender
_TEXT	ENDS
PUBLIC	?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear, COMDAT
; _this$ = ecx

; 1140 : 		_Eos(0);

  00000	83 61 10 00	 and	 DWORD PTR [ecx+16], 0
  00004	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00008	72 02		 jb	 SHORT $LN7@clear
  0000a	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN7@clear:
  0000c	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 1141 : 		}

  0000f	c3		 ret	 0
?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1988 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1989 : 		if (!_Built)

  00003	80 7d 08 00	 cmp	 BYTE PTR __Built$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 20		 je	 SHORT $LN9@Tidy

; 1990 : 			;
; 1991 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00010	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00014	72 1a		 jb	 SHORT $LN9@Tidy

; 1992 : 			{	// copy any leftovers to small buffer and deallocate
; 1993 : 			_Elem *_Ptr = this->_Bx._Ptr;

  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 1994 : 			if (0 < _Newsize)

  00019	85 ff		 test	 edi, edi
  0001b	74 0b		 je	 SHORT $LN7@Tidy

; 1995 : 				_Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);

  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _memcpy
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@Tidy:

; 1996 : 			this->_Alval.deallocate(_Ptr, this->_Myres + 1);

  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	59		 pop	 ecx
  0002f	5b		 pop	 ebx
$LN9@Tidy:

; 1997 : 			}
; 1998 : 		this->_Myres = this->_BUF_SIZE - 1;
; 1999 : 		_Eos(_Newsize);

  00030	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00033	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0003a	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi

; 2000 : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	??_C@_0BM@BHMKFBDL@ioAwakeReleaseWnd?3?3iwm_show?$AA@ ; `string'
PUBLIC	?iwm_show@ioAwakeReleaseWnd@@UAEXXZ		; ioAwakeReleaseWnd::iwm_show
EXTRN	__imp_?SetTitleText@ioWnd@@QAEXPBD0H@Z:PROC
EXTRN	__imp_?SafeSprintf@@YAXPADHPBD1@Z:PROC
EXTRN	?GetPowerUpGradeType@ioUIImageRenderManager@@QAEHH@Z:PROC ; ioUIImageRenderManager::GetPowerUpGradeType
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	__imp_?CreateImageByFullName@ioUIImageSetManager@@QAEPAVioUIRenderImage@@ABVioHashString@@_N@Z:PROC
EXTRN	__imp_?GetSingleton@ioUIImageSetManager@@SAAAV1@XZ:PROC
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
EXTRN	?GetFirstDeleteAwake@ioSoldierAwakeManager@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00AAKAAH@Z:PROC ; ioSoldierAwakeManager::GetFirstDeleteAwake
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT ??_C@_0BM@BHMKFBDL@ioAwakeReleaseWnd?3?3iwm_show?$AA@
CONST	SEGMENT
??_C@_0BM@BHMKFBDL@ioAwakeReleaseWnd?3?3iwm_show?$AA@ DB 'ioAwakeReleaseW'
	DB	'nd::iwm_show', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?iwm_show@ioAwakeReleaseWnd@@UAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?iwm_show@ioAwakeReleaseWnd@@UAEXXZ$0
__ehfuncinfo$?iwm_show@ioAwakeReleaseWnd@@UAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?iwm_show@ioAwakeReleaseWnd@@UAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\ioawakereleasewnd.cpp
xdata$x	ENDS
;	COMDAT ?iwm_show@ioAwakeReleaseWnd@@UAEXXZ
_TEXT	SEGMENT
$T512051 = -296						; size = 16
_nClassType$ = -280					; size = 4
_szBuf$ = -276						; size = 260
__$EHRec$ = -12						; size = 12
?iwm_show@ioAwakeReleaseWnd@@UAEXXZ PROC		; ioAwakeReleaseWnd::iwm_show, COMDAT
; _this$ = ecx

; 82   : {

  00000	68 1c 01 00 00	 push	 284			; 0000011cH
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?iwm_show@ioAwakeReleaseWnd@@UAEXXZ
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b f1		 mov	 esi, ecx

; 83   : 	SAFEDELETE( m_pSoliderIcon );

  00011	8b 8e 94 01 00
	00		 mov	 ecx, DWORD PTR [esi+404]
  00017	85 c9		 test	 ecx, ecx
  00019	74 0e		 je	 SHORT $LN1@iwm_show
  0001b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001d	6a 01		 push	 1
  0001f	ff 50 40	 call	 DWORD PTR [eax+64]
  00022	83 a6 94 01 00
	00 00		 and	 DWORD PTR [esi+404], 0
$LN1@iwm_show:

; 84   : 	m_szAwakeName.clear();	

  00029	8d 9e d0 01 00
	00		 lea	 ebx, DWORD PTR [esi+464]
  0002f	83 63 10 00	 and	 DWORD PTR [ebx+16], 0
  00033	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  00037	72 04		 jb	 SHORT $LN13@iwm_show
  00039	8b 03		 mov	 eax, DWORD PTR [ebx]
  0003b	eb 02		 jmp	 SHORT $LN14@iwm_show
$LN13@iwm_show:
  0003d	8b c3		 mov	 eax, ebx
$LN14@iwm_show:

; 85   : 	m_szIconName.clear();

  0003f	8d be 98 01 00
	00		 lea	 edi, DWORD PTR [esi+408]
  00045	c6 00 00	 mov	 BYTE PTR [eax], 0
  00048	33 d2		 xor	 edx, edx
  0004a	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  0004e	89 57 10	 mov	 DWORD PTR [edi+16], edx
  00051	72 04		 jb	 SHORT $LN23@iwm_show
  00053	8b 07		 mov	 eax, DWORD PTR [edi]
  00055	eb 02		 jmp	 SHORT $LN24@iwm_show
$LN23@iwm_show:
  00057	8b c7		 mov	 eax, edi
$LN24@iwm_show:
  00059	88 10		 mov	 BYTE PTR [eax], dl

; 86   : 	m_szClassName.clear();

  0005b	8d 86 b4 01 00
	00		 lea	 eax, DWORD PTR [esi+436]
  00061	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00065	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00068	72 04		 jb	 SHORT $LN33@iwm_show
  0006a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006c	eb 02		 jmp	 SHORT $LN34@iwm_show
$LN33@iwm_show:
  0006e	8b c8		 mov	 ecx, eax
$LN34@iwm_show:
  00070	88 11		 mov	 BYTE PTR [ecx], dl

; 87   : 	m_dwAwakeColor = TCT_DEFAULT_DARKGRAY;
; 88   : 
; 89   : 	int nClassType = 0;

  00072	89 95 e8 fe ff
	ff		 mov	 DWORD PTR _nClassType$[ebp], edx

; 90   : 	g_AwakeMgr.GetFirstDeleteAwake( m_szClassName, m_szIconName, m_szAwakeName, m_dwAwakeColor, nClassType );

  00078	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR _nClassType$[ebp]
  0007e	52		 push	 edx
  0007f	8d 8e ec 01 00
	00		 lea	 ecx, DWORD PTR [esi+492]
  00085	51		 push	 ecx
  00086	53		 push	 ebx
  00087	57		 push	 edi
  00088	50		 push	 eax
  00089	c7 01 3a 3a 3a
	ff		 mov	 DWORD PTR [ecx], -12961222 ; ff3a3a3aH
  0008f	e8 00 00 00 00	 call	 ?GetSingleton@ioSoldierAwakeManager@@SAAAV1@XZ ; ioSoldierAwakeManager::GetSingleton
  00094	8b c8		 mov	 ecx, eax
  00096	e8 00 00 00 00	 call	 ?GetFirstDeleteAwake@ioSoldierAwakeManager@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00AAKAAH@Z ; ioSoldierAwakeManager::GetFirstDeleteAwake

; 91   : 	m_pSoliderIcon = g_UIImageSetMgr.CreateImageByFullName( m_szIconName.c_str() );

  0009b	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  0009f	72 02		 jb	 SHORT $LN41@iwm_show
  000a1	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN41@iwm_show:
  000a3	57		 push	 edi
  000a4	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR $T512051[ebp]
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  000b0	33 ff		 xor	 edi, edi
  000b2	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR $T512051[ebp]
  000b8	57		 push	 edi
  000b9	50		 push	 eax
  000ba	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioUIImageSetManager@@SAAAV1@XZ
  000c3	8b c8		 mov	 ecx, eax
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CreateImageByFullName@ioUIImageSetManager@@QAEPAVioUIRenderImage@@ABVioHashString@@_N@Z
  000cb	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000cf	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR $T512051[ebp]
  000d5	89 86 94 01 00
	00		 mov	 DWORD PTR [esi+404], eax
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 92   : 
; 93   : 	m_nGradeType = g_UIImageRenderMgr.GetPowerUpGradeType( nClassType );

  000e1	ff b5 e8 fe ff
	ff		 push	 DWORD PTR _nClassType$[ebp]
  000e7	e8 00 00 00 00	 call	 ?GetSingleton@ioUIImageRenderManager@@SAAAV1@XZ ; ioUIImageRenderManager::GetSingleton
  000ec	8b c8		 mov	 ecx, eax
  000ee	e8 00 00 00 00	 call	 ?GetPowerUpGradeType@ioUIImageRenderManager@@QAEHH@Z ; ioUIImageRenderManager::GetPowerUpGradeType
  000f3	89 86 f0 01 00
	00		 mov	 DWORD PTR [esi+496], eax

; 94   : 
; 95   : 	char szBuf[MAX_PATH];
; 96   : 	SafeSprintf( szBuf, sizeof(szBuf), STR(1), m_szAwakeName.c_str() );

  000f9	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  000fd	72 02		 jb	 SHORT $LN47@iwm_show
  000ff	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN47@iwm_show:
  00101	53		 push	 ebx
  00102	57		 push	 edi
  00103	6a 01		 push	 1
  00105	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0010a	53		 push	 ebx
  0010b	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BHMKFBDL@ioAwakeReleaseWnd?3?3iwm_show?$AA@
  00110	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00116	8b c8		 mov	 ecx, eax
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  0011e	50		 push	 eax
  0011f	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00125	68 04 01 00 00	 push	 260			; 00000104H
  0012a	50		 push	 eax
  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SafeSprintf@@YAXPADHPBD1@Z
  00131	83 c4 10	 add	 esp, 16			; 00000010H

; 97   : 	SetTitleText( szBuf );

  00134	57		 push	 edi
  00135	53		 push	 ebx
  00136	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0013c	50		 push	 eax
  0013d	8b ce		 mov	 ecx, esi
  0013f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTitleText@ioWnd@@QAEXPBD0H@Z

; 98   : }

  00145	e8 00 00 00 00	 call	 __EH_epilog3_GS
  0014a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?iwm_show@ioAwakeReleaseWnd@@UAEXXZ$0:
  00000	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR $T512051[ebp]
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?iwm_show@ioAwakeReleaseWnd@@UAEXXZ:
  0000c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00010	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00013	8b 8a d4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-300]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?iwm_show@ioAwakeReleaseWnd@@UAEXXZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?iwm_show@ioAwakeReleaseWnd@@UAEXXZ ENDP		; ioAwakeReleaseWnd::iwm_show
PUBLIC	?iwm_hide@ioAwakeReleaseWnd@@UAEXXZ		; ioAwakeReleaseWnd::iwm_hide
; Function compile flags: /Ogsp
;	COMDAT ?iwm_hide@ioAwakeReleaseWnd@@UAEXXZ
_TEXT	SEGMENT
?iwm_hide@ioAwakeReleaseWnd@@UAEXXZ PROC		; ioAwakeReleaseWnd::iwm_hide, COMDAT
; _this$ = ecx

; 101  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 102  : 	m_szIconName.clear();

  00003	8d 86 98 01 00
	00		 lea	 eax, DWORD PTR [esi+408]
  00009	33 c9		 xor	 ecx, ecx
  0000b	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0000f	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00012	72 02		 jb	 SHORT $LN9@iwm_hide
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
$LN9@iwm_hide:
  00016	88 08		 mov	 BYTE PTR [eax], cl

; 103  : 	m_szAwakeName.clear();

  00018	8d 86 d0 01 00
	00		 lea	 eax, DWORD PTR [esi+464]
  0001e	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00022	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00025	72 02		 jb	 SHORT $LN19@iwm_hide
  00027	8b 00		 mov	 eax, DWORD PTR [eax]
$LN19@iwm_hide:
  00029	88 08		 mov	 BYTE PTR [eax], cl

; 104  : 
; 105  : 	m_dwHideDelayTime = FRAMEGETTIME();

  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00031	8b c8		 mov	 ecx, eax
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00039	89 86 f4 01 00
	00		 mov	 DWORD PTR [esi+500], eax
  0003f	5e		 pop	 esi

; 106  : }

  00040	c3		 ret	 0
?iwm_hide@ioAwakeReleaseWnd@@UAEXXZ ENDP		; ioAwakeReleaseWnd::iwm_hide
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 550  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 551  : 		_Tidy();

  00002	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  00006	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
  0000d	c6 00 00	 mov	 BYTE PTR [eax], 0

; 552  : 		}

  00010	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 754  : 		_Tidy(true);

  00000	6a 00		 push	 0
  00002	6a 01		 push	 1
  00004	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 755  : 		}

  00009	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??_7ioAwakeReleaseWnd@@6B@			; ioAwakeReleaseWnd::`vftable'
PUBLIC	??0ioAwakeReleaseWnd@@QAE@XZ			; ioAwakeReleaseWnd::ioAwakeReleaseWnd
PUBLIC	??_R4ioAwakeReleaseWnd@@6B@			; ioAwakeReleaseWnd::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioAwakeReleaseWnd@@@8			; ioAwakeReleaseWnd `RTTI Type Descriptor'
PUBLIC	??_R3ioAwakeReleaseWnd@@8			; ioAwakeReleaseWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioAwakeReleaseWnd@@8			; ioAwakeReleaseWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioAwakeReleaseWnd@@8		; ioAwakeReleaseWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioMovingWnd@@8			; ioMovingWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioMovingWnd@@@8				; ioMovingWnd `RTTI Type Descriptor'
PUBLIC	??_R3ioMovingWnd@@8				; ioMovingWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioMovingWnd@@8				; ioMovingWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioWnd@@8				; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioWnd@@@8				; ioWnd `RTTI Type Descriptor'
PUBLIC	??_R3ioWnd@@8					; ioWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWnd@@8					; ioWnd::`RTTI Base Class Array'
EXTRN	__imp_??0ioMovingWnd@@QAE@XZ:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z:PROC ; ioWnd::AddRenderFrame
EXTRN	?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z:PROC ; ioWnd::AddTooltipHelp
EXTRN	?ParseExtraInfo@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::ParseExtraInfo
EXTRN	?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC ; ioWnd::AddNamedRenderImage
EXTRN	?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z:PROC ; ioWnd::RemoveNamedRenderImage
EXTRN	?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z:PROC ; ioWnd::GetNamedRenderImage
EXTRN	?SetWindowAlpha@ioWnd@@UAEXH@Z:PROC		; ioWnd::SetWindowAlpha
EXTRN	?SetActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetActive
EXTRN	?SetInActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetInActive
EXTRN	?ClearElementImageList@ioWnd@@UAEXXZ:PROC	; ioWnd::ClearElementImageList
EXTRN	?SetSize@ioWnd@@UAEXHH@Z:PROC			; ioWnd::SetSize
EXTRN	?SetPositionToDefault@ioMovingWnd@@UAEXHH_N0@Z:PROC ; ioMovingWnd::SetPositionToDefault
EXTRN	?IsNeedProcess@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsNeedProcess
EXTRN	?IsCanMouseReaction@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsCanMouseReaction
EXTRN	?AddChild@ioWnd@@UAEXPAV1@@Z:PROC		; ioWnd::AddChild
EXTRN	?DeleteChild@ioWnd@@UAEXK@Z:PROC		; ioWnd::DeleteChild
EXTRN	?DeleteAllChild@ioWnd@@UAEXXZ:PROC		; ioWnd::DeleteAllChild
EXTRN	?OnRenderShowAndHide@ioWnd@@MAE_NXZ:PROC	; ioWnd::OnRenderShowAndHide
EXTRN	?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z:PROC ; ioWnd::OnRenderShowAndHideByDefault
EXTRN	?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByTop
EXTRN	?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByDown
EXTRN	?OnRenderAfterChild@ioWnd@@MAEXXZ:PROC		; ioWnd::OnRenderAfterChild
EXTRN	?OnMouseProcess@ioMovingWnd@@MAEXABVioMouse@@@Z:PROC ; ioMovingWnd::OnMouseProcess
EXTRN	?CheckFrameReSize@ioWnd@@MAEXHHHH@Z:PROC	; ioWnd::CheckFrameReSize
EXTRN	?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z:PROC ; ioWnd::RenderImageList
EXTRN	?iwm_create@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_create
EXTRN	?iwm_destroy@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_destroy
EXTRN	?iwm_lbuttondown@ioMovingWnd@@UAEXABVioMouse@@@Z:PROC ; ioMovingWnd::iwm_lbuttondown
EXTRN	?iwm_lbuttonup@ioMovingWnd@@UAEXABVioMouse@@@Z:PROC ; ioMovingWnd::iwm_lbuttonup
EXTRN	?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z:PROC ; ioWnd::iwm_lbuttonDBLCLK
EXTRN	?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttondown
EXTRN	?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttonup
EXTRN	?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseover
EXTRN	?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mousemove
EXTRN	?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseleave
EXTRN	?iwm_vscroll@ioWnd@@UAEXKH@Z:PROC		; ioWnd::iwm_vscroll
EXTRN	?iwm_wheel@ioWnd@@UAEXH@Z:PROC			; ioWnd::iwm_wheel
EXTRN	?iwm_spacebar@ioWnd@@UAE_NXZ:PROC		; ioWnd::iwm_spacebar
EXTRN	?iwm_gototop@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_gototop
EXTRN	?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragenter
EXTRN	?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragover
EXTRN	?iwm_dragleave@ioWnd@@UAEXXZ:PROC		; ioWnd::iwm_dragleave
EXTRN	?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z:PROC ; ioWnd::iwm_dropitem
EXTRN	?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z:PROC ; ioWnd::iwm_dropdone
EXTRN	?IsEXType@ioWnd@@UBE_NXZ:PROC			; ioWnd::IsEXType
EXTRN	?GetWndType@ioWnd@@UBEKXZ:PROC			; ioWnd::GetWndType
EXTRN	?RenderWnd@ioWnd@@UAEXXZ:PROC			; ioWnd::RenderWnd
EXTRN	?SetIDEX@ioWnd@@UAEXAAK_N@Z:PROC		; ioWnd::SetIDEX
EXTRN	?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC	; ioWnd::ParseXML
EXTRN	?GetHeaderFileName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetHeaderFileName
EXTRN	?GetTemplateName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetTemplateName
EXTRN	?GetDefClassName@ioWnd@@UBEPBDXZ:PROC		; ioWnd::GetDefClassName
EXTRN	?_Clone@ioWnd@@UAEPAV1@XZ:PROC			; ioWnd::_Clone
EXTRN	?Copy@ioWnd@@UAEXPAV1@@Z:PROC			; ioWnd::Copy
EXTRN	?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z:PROC	; ioWnd::Save
EXTRN	?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::SetSaveData
EXTRN	?SetPosX@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosX
EXTRN	?SetPosY@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosY
EXTRN	?SetWidth@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetWidth
EXTRN	?SetHeight@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetHeight
EXTRN	?GetNumFixedRenderFrame@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderFrame
EXTRN	?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderFrameType
EXTRN	?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderFrame
EXTRN	?GetNumFixedRenderImage@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderImage
EXTRN	?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderImageType
EXTRN	?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderImage
EXTRN	?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z:PROC ; ioWnd::AddEffect
EXTRN	?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z:PROC ; ioWnd::GetEffect
EXTRN	??_EioAwakeReleaseWnd@@UAEPAXI@Z:PROC		; ioAwakeReleaseWnd::`vector deleting destructor'
;	COMDAT ??_R2ioWnd@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R2ioWnd@@8 DD FLAT:??_R1A@?0A@EA@ioWnd@@8		; ioWnd::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWnd@@8
rdata$r	SEGMENT
??_R3ioWnd@@8 DD 00H					; ioWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWnd@@@8
_DATA	SEGMENT
??_R0?AVioWnd@@@8 DD FLAT:??_7type_info@@6B@		; ioWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWnd@@8 DD FLAT:??_R0?AVioWnd@@@8	; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2ioMovingWnd@@8
rdata$r	SEGMENT
??_R2ioMovingWnd@@8 DD FLAT:??_R1A@?0A@EA@ioMovingWnd@@8 ; ioMovingWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3ioMovingWnd@@8
rdata$r	SEGMENT
??_R3ioMovingWnd@@8 DD 00H				; ioMovingWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioMovingWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioMovingWnd@@@8
_DATA	SEGMENT
??_R0?AVioMovingWnd@@@8 DD FLAT:??_7type_info@@6B@	; ioMovingWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioMovingWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioMovingWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioMovingWnd@@8 DD FLAT:??_R0?AVioMovingWnd@@@8 ; ioMovingWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioMovingWnd@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioAwakeReleaseWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioAwakeReleaseWnd@@8 DD FLAT:??_R0?AVioAwakeReleaseWnd@@@8 ; ioAwakeReleaseWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioAwakeReleaseWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2ioAwakeReleaseWnd@@8
rdata$r	SEGMENT
??_R2ioAwakeReleaseWnd@@8 DD FLAT:??_R1A@?0A@EA@ioAwakeReleaseWnd@@8 ; ioAwakeReleaseWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioMovingWnd@@8
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3ioAwakeReleaseWnd@@8
rdata$r	SEGMENT
??_R3ioAwakeReleaseWnd@@8 DD 00H			; ioAwakeReleaseWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ioAwakeReleaseWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioAwakeReleaseWnd@@@8
_DATA	SEGMENT
??_R0?AVioAwakeReleaseWnd@@@8 DD FLAT:??_7type_info@@6B@ ; ioAwakeReleaseWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioAwakeReleaseWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioAwakeReleaseWnd@@6B@
rdata$r	SEGMENT
??_R4ioAwakeReleaseWnd@@6B@ DD 00H			; ioAwakeReleaseWnd::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioAwakeReleaseWnd@@@8
	DD	FLAT:??_R3ioAwakeReleaseWnd@@8
rdata$r	ENDS
;	COMDAT ??_7ioAwakeReleaseWnd@@6B@
CONST	SEGMENT
??_7ioAwakeReleaseWnd@@6B@ DD FLAT:??_R4ioAwakeReleaseWnd@@6B@ ; ioAwakeReleaseWnd::`vftable'
	DD	FLAT:?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
	DD	FLAT:?AddRenderImage@ioAwakeReleaseWnd@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z
	DD	FLAT:?ParseExtraInfo@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z
	DD	FLAT:?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z
	DD	FLAT:?SetWindowAlpha@ioWnd@@UAEXH@Z
	DD	FLAT:?SetActive@ioWnd@@UAEXXZ
	DD	FLAT:?SetInActive@ioWnd@@UAEXXZ
	DD	FLAT:?ClearElementImageList@ioWnd@@UAEXXZ
	DD	FLAT:?SetSize@ioWnd@@UAEXHH@Z
	DD	FLAT:?SetPositionToDefault@ioMovingWnd@@UAEXHH_N0@Z
	DD	FLAT:?IsNeedProcess@ioWnd@@UBE_NXZ
	DD	FLAT:?IsCanMouseReaction@ioWnd@@UBE_NXZ
	DD	FLAT:?AddChild@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?DeleteChild@ioWnd@@UAEXK@Z
	DD	FLAT:?DeleteAllChild@ioWnd@@UAEXXZ
	DD	FLAT:?OnRenderShowAndHide@ioWnd@@MAE_NXZ
	DD	FLAT:?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRender@ioAwakeReleaseWnd@@MAEXXZ
	DD	FLAT:?OnRenderAfterChild@ioWnd@@MAEXXZ
	DD	FLAT:?OnProcess@ioAwakeReleaseWnd@@MAEXM@Z
	DD	FLAT:?OnMouseProcess@ioMovingWnd@@MAEXABVioMouse@@@Z
	DD	FLAT:?CheckFrameReSize@ioWnd@@MAEXHHHH@Z
	DD	FLAT:?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z
	DD	FLAT:?iwm_create@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_destroy@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_lbuttondown@ioMovingWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonup@ioMovingWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_command@ioAwakeReleaseWnd@@UAEXPAVioWnd@@HK@Z
	DD	FLAT:?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_vscroll@ioWnd@@UAEXKH@Z
	DD	FLAT:?iwm_wheel@ioWnd@@UAEXH@Z
	DD	FLAT:?iwm_show@ioAwakeReleaseWnd@@UAEXXZ
	DD	FLAT:?iwm_hide@ioAwakeReleaseWnd@@UAEXXZ
	DD	FLAT:?iwm_esc@ioAwakeReleaseWnd@@UAE_NXZ
	DD	FLAT:?iwm_spacebar@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_gototop@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragleave@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z
	DD	FLAT:?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z
	DD	FLAT:?IsEXType@ioWnd@@UBE_NXZ
	DD	FLAT:?GetWndType@ioWnd@@UBEKXZ
	DD	FLAT:?RenderWnd@ioWnd@@UAEXXZ
	DD	FLAT:?SetIDEX@ioWnd@@UAEXAAK_N@Z
	DD	FLAT:?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?GetHeaderFileName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetTemplateName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetDefClassName@ioWnd@@UBEPBDXZ
	DD	FLAT:?_Clone@ioWnd@@UAEPAV1@XZ
	DD	FLAT:?Copy@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z
	DD	FLAT:?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?SetPosX@ioWnd@@UAEXH@Z
	DD	FLAT:?SetPosY@ioWnd@@UAEXH@Z
	DD	FLAT:?SetWidth@ioWnd@@UAEXH@Z
	DD	FLAT:?SetHeight@ioWnd@@UAEXH@Z
	DD	FLAT:?GetNumFixedRenderFrame@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?GetNumFixedRenderImage@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z
	DD	FLAT:?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z
	DD	FLAT:??_EioAwakeReleaseWnd@@UAEPAXI@Z
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\ioawakereleasewnd.cpp
CONST	ENDS
;	COMDAT ??0ioAwakeReleaseWnd@@QAE@XZ
_TEXT	SEGMENT
??0ioAwakeReleaseWnd@@QAE@XZ PROC			; ioAwakeReleaseWnd::ioAwakeReleaseWnd, COMDAT
; _this$ = ecx

; 6    : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioMovingWnd@@QAE@XZ
  00009	33 c9		 xor	 ecx, ecx
  0000b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioAwakeReleaseWnd@@6B@
  00011	89 8e a8 01 00
	00		 mov	 DWORD PTR [esi+424], ecx
  00017	6a 0f		 push	 15			; 0000000fH
  00019	5a		 pop	 edx
  0001a	89 96 ac 01 00
	00		 mov	 DWORD PTR [esi+428], edx
  00020	88 8e 98 01 00
	00		 mov	 BYTE PTR [esi+408], cl
  00026	89 96 c8 01 00
	00		 mov	 DWORD PTR [esi+456], edx
  0002c	89 8e c4 01 00
	00		 mov	 DWORD PTR [esi+452], ecx
  00032	88 8e b4 01 00
	00		 mov	 BYTE PTR [esi+436], cl
  00038	89 96 e4 01 00
	00		 mov	 DWORD PTR [esi+484], edx
  0003e	89 8e e0 01 00
	00		 mov	 DWORD PTR [esi+480], ecx
  00044	88 8e d0 01 00
	00		 mov	 BYTE PTR [esi+464], cl

; 7    : 	m_pIconBack		 = NULL;

  0004a	89 8e 90 01 00
	00		 mov	 DWORD PTR [esi+400], ecx

; 8    : 	m_pSoliderIcon	 = NULL;

  00050	89 8e 94 01 00
	00		 mov	 DWORD PTR [esi+404], ecx

; 9    : 
; 10   : 	m_dwHideDelayTime = 0;

  00056	89 8e f4 01 00
	00		 mov	 DWORD PTR [esi+500], ecx

; 11   : 	m_nGradeType = 0;

  0005c	89 8e f0 01 00
	00		 mov	 DWORD PTR [esi+496], ecx

; 12   : }

  00062	8b c6		 mov	 eax, esi
  00064	5e		 pop	 esi
  00065	c3		 ret	 0
??0ioAwakeReleaseWnd@@QAE@XZ ENDP			; ioAwakeReleaseWnd::ioAwakeReleaseWnd
_TEXT	ENDS
PUBLIC	??1ioAwakeReleaseWnd@@UAE@XZ			; ioAwakeReleaseWnd::~ioAwakeReleaseWnd
EXTRN	__imp_??1ioMovingWnd@@UAE@XZ:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??1ioAwakeReleaseWnd@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioAwakeReleaseWnd@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioAwakeReleaseWnd@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1ioAwakeReleaseWnd@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1ioAwakeReleaseWnd@@UAE@XZ$3
__ehfuncinfo$??1ioAwakeReleaseWnd@@UAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1ioAwakeReleaseWnd@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\ioawakereleasewnd.cpp
xdata$x	ENDS
;	COMDAT ??1ioAwakeReleaseWnd@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioAwakeReleaseWnd@@UAE@XZ PROC			; ioAwakeReleaseWnd::~ioAwakeReleaseWnd, COMDAT
; _this$ = ecx

; 15   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioAwakeReleaseWnd@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioAwakeReleaseWnd@@6B@

; 16   : 	SAFEDELETE( m_pIconBack );

  00017	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  0001d	33 db		 xor	 ebx, ebx
  0001f	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  00026	3b cb		 cmp	 ecx, ebx
  00028	74 0d		 je	 SHORT $LN2@ioAwakeRel
  0002a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002c	6a 01		 push	 1
  0002e	ff 50 40	 call	 DWORD PTR [eax+64]
  00031	89 9e 90 01 00
	00		 mov	 DWORD PTR [esi+400], ebx
$LN2@ioAwakeRel:

; 17   : 	SAFEDELETE( m_pSoliderIcon );

  00037	8b 8e 94 01 00
	00		 mov	 ecx, DWORD PTR [esi+404]
  0003d	3b cb		 cmp	 ecx, ebx
  0003f	74 0d		 je	 SHORT $LN1@ioAwakeRel
  00041	8b 01		 mov	 eax, DWORD PTR [ecx]
  00043	6a 01		 push	 1
  00045	ff 50 40	 call	 DWORD PTR [eax+64]
  00048	89 9e 94 01 00
	00		 mov	 DWORD PTR [esi+404], ebx
$LN1@ioAwakeRel:

; 18   : }

  0004e	53		 push	 ebx
  0004f	6a 01		 push	 1
  00051	8d 8e d0 01 00
	00		 lea	 ecx, DWORD PTR [esi+464]
  00057	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0005c	53		 push	 ebx
  0005d	6a 01		 push	 1
  0005f	8d 8e b4 01 00
	00		 lea	 ecx, DWORD PTR [esi+436]
  00065	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0006a	53		 push	 ebx
  0006b	6a 01		 push	 1
  0006d	8d 8e 98 01 00
	00		 lea	 ecx, DWORD PTR [esi+408]
  00073	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00078	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0007c	8b ce		 mov	 ecx, esi
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioMovingWnd@@UAE@XZ
  00084	e8 00 00 00 00	 call	 __EH_epilog3
  00089	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioAwakeReleaseWnd@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioMovingWnd@@UAE@XZ
__unwindfunclet$??1ioAwakeReleaseWnd@@UAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	81 c1 98 01 00
	00		 add	 ecx, 408		; 00000198H
  00012	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1ioAwakeReleaseWnd@@UAE@XZ$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 b4 01 00
	00		 add	 ecx, 436		; 000001b4H
  00020	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1ioAwakeReleaseWnd@@UAE@XZ$3:
  00025	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	81 c1 d0 01 00
	00		 add	 ecx, 464		; 000001d0H
  0002e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??1ioAwakeReleaseWnd@@UAE@XZ:
  00033	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00037	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003a	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioAwakeReleaseWnd@@UAE@XZ
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioAwakeReleaseWnd@@UAE@XZ ENDP			; ioAwakeReleaseWnd::~ioAwakeReleaseWnd
; Function compile flags: /Ogsp
;	COMDAT ??_GioAwakeReleaseWnd@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioAwakeReleaseWnd@@UAEPAXI@Z PROC			; ioAwakeReleaseWnd::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioAwakeReleaseWnd@@UAE@XZ ; ioAwakeReleaseWnd::~ioAwakeReleaseWnd
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioAwakeReleaseWnd@@UAEPAXI@Z ENDP			; ioAwakeReleaseWnd::`scalar deleting destructor'
_TEXT	ENDS
END
