; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioIceBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ	; ioBaseChar::GetBlowStopMotionState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ PROC	; ioBaseChar::GetBlowStopMotionState, COMDAT
; _this$ = ecx

; 1566 : 	inline bool GetBlowStopMotionState() const { return m_bBlowStopMotion; }

  00000	8a 81 c7 15 00
	00		 mov	 al, BYTE PTR [ecx+5575]
  00006	c3		 ret	 0
?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ ENDP	; ioBaseChar::GetBlowStopMotionState
_TEXT	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	?IsCheckIceBound@ioBaseChar@@QBE_NXZ		; ioBaseChar::IsCheckIceBound
; Function compile flags: /Ogsp
;	COMDAT ?IsCheckIceBound@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?IsCheckIceBound@ioBaseChar@@QBE_NXZ PROC		; ioBaseChar::IsCheckIceBound, COMDAT
; _this$ = ecx

; 2357 : 	inline bool IsCheckIceBound() const { return m_bCheckIceBound; }

  00000	8a 81 34 1c 00
	00		 mov	 al, BYTE PTR [ecx+7220]
  00006	c3		 ret	 0
?IsCheckIceBound@ioBaseChar@@QBE_NXZ ENDP		; ioBaseChar::IsCheckIceBound
_TEXT	ENDS
PUBLIC	?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ	; ioBaseChar::GetCharName
; Function compile flags: /Ogsp
;	COMDAT ?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ PROC	; ioBaseChar::GetCharName, COMDAT
; _this$ = ecx

; 2594 : 	inline const ioHashString& GetCharName() const { return m_Name; }

  00000	8d 81 d4 02 00
	00		 lea	 eax, DWORD PTR [ecx+724]
  00006	c3		 ret	 0
?GetCharName@ioBaseChar@@QBEABVioHashString@@XZ ENDP	; ioBaseChar::GetCharName
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ	; ioGameEntity::GetGroup
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
;	COMDAT ?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ
_TEXT	SEGMENT
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ PROC	; ioGameEntity::GetGroup, COMDAT
; _this$ = ecx

; 166  : 	inline ioEntityGroup* GetGroup() const { return m_pGroup; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ ENDP	; ioGameEntity::GetGroup
_TEXT	ENDS
PUBLIC	?Init@WeaponInfo@@QAEXXZ			; WeaponInfo::Init
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.h
;	COMDAT ?Init@WeaponInfo@@QAEXXZ
_TEXT	SEGMENT
?Init@WeaponInfo@@QAEXXZ PROC				; WeaponInfo::Init, COMDAT
; _this$ = ecx

; 71   : 		m_iWeaponIdx = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 01		 mov	 DWORD PTR [ecx], eax

; 72   : 		m_iResistanceIdx = 0;

  00004	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 73   : 
; 74   : 		m_dwWoundedDuration = 0;

  00007	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 75   : 		m_dwCallTime = 0;

  0000a	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 76   : 
; 77   : 		m_bWoundedLoopAni = false;

  0000d	88 41 20	 mov	 BYTE PTR [ecx+32], al

; 78   : 
; 79   : 		m_dwDuration = 0;

  00010	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 80   : 	}

  00013	c3		 ret	 0
?Init@WeaponInfo@@QAEXXZ ENDP				; WeaponInfo::Init
_TEXT	ENDS
PUBLIC	??1WeaponInfo@@QAE@XZ				; WeaponInfo::~WeaponInfo
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1WeaponInfo@@QAE@XZ
_TEXT	SEGMENT
??1WeaponInfo@@QAE@XZ PROC				; WeaponInfo::~WeaponInfo, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??1WeaponInfo@@QAE@XZ ENDP				; WeaponInfo::~WeaponInfo
_TEXT	ENDS
PUBLIC	?Init@tagBlowWoundAniInfo@@QAEXXZ		; tagBlowWoundAniInfo::Init
EXTRN	__imp_?Clear@ioHashString@@QAEXXZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\weaponattribute.h
;	COMDAT ?Init@tagBlowWoundAniInfo@@QAEXXZ
_TEXT	SEGMENT
?Init@tagBlowWoundAniInfo@@QAEXXZ PROC			; tagBlowWoundAniInfo::Init, COMDAT
; _this$ = ecx

; 310  : 	{

  00000	56		 push	 esi

; 311  : 		m_BlowingAni.Clear();

  00001	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?Clear@ioHashString@@QAEXXZ
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	ff d6		 call	 esi

; 312  : 		m_BlowingBackAni.Clear();

  0000c	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0000f	ff d6		 call	 esi

; 313  : 
; 314  : 		m_JumpBlowingAni.Clear();

  00011	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  00014	ff d6		 call	 esi

; 315  : 		m_JumpBlowingBackAni.Clear();

  00016	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  00019	ff d6		 call	 esi

; 316  : 
; 317  : 		m_DownAni.Clear();

  0001b	8d 4f 40	 lea	 ecx, DWORD PTR [edi+64]
  0001e	ff d6		 call	 esi

; 318  : 		m_DownBackAni.Clear();

  00020	8d 4f 50	 lea	 ecx, DWORD PTR [edi+80]
  00023	ff d6		 call	 esi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 319  : 	}

  00027	c3		 ret	 0
?Init@tagBlowWoundAniInfo@@QAEXXZ ENDP			; tagBlowWoundAniInfo::Init
_TEXT	ENDS
PUBLIC	??1tagBlowWoundAniInfo@@QAE@XZ			; tagBlowWoundAniInfo::~tagBlowWoundAniInfo
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1tagBlowWoundAniInfo@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1tagBlowWoundAniInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1tagBlowWoundAniInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$4
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1tagBlowWoundAniInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1tagBlowWoundAniInfo@@QAE@XZ PROC			; tagBlowWoundAniInfo::~tagBlowWoundAniInfo, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1tagBlowWoundAniInfo@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00017	8d 4f 50	 lea	 ecx, DWORD PTR [edi+80]
  0001a	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  00021	ff d6		 call	 esi
  00023	8d 4f 40	 lea	 ecx, DWORD PTR [edi+64]
  00026	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0002a	ff d6		 call	 esi
  0002c	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  0002f	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00033	ff d6		 call	 esi
  00035	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  00038	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0003c	ff d6		 call	 esi
  0003e	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00041	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00045	ff d6		 call	 esi
  00047	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0004b	8b cf		 mov	 ecx, edi
  0004d	ff d6		 call	 esi
  0004f	e8 00 00 00 00	 call	 __EH_epilog3
  00054	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 10	 add	 ecx, 16			; 00000010H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 20	 add	 ecx, 32			; 00000020H
  0001b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 30	 add	 ecx, 48			; 00000030H
  00027	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1tagBlowWoundAniInfo@@QAE@XZ$4:
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 c1 40	 add	 ecx, 64			; 00000040H
  00033	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1tagBlowWoundAniInfo@@QAE@XZ:
  00039	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00040	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00043	33 c8		 xor	 ecx, eax
  00045	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1tagBlowWoundAniInfo@@QAE@XZ
  0004f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1tagBlowWoundAniInfo@@QAE@XZ ENDP			; tagBlowWoundAniInfo::~tagBlowWoundAniInfo
PUBLIC	?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z	; CEncrypt<unsigned long>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z PROC	; CEncrypt<unsigned long>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ENDP	; CEncrypt<unsigned long>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z	; CEncrypt<unsigned long>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z PROC	; CEncrypt<unsigned long>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1256 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1257 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1258 : 		*value = *((DWORD*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 1259 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ENDP	; CEncrypt<unsigned long>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z	; CEncrypt<bool>::EncryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z PROC	; CEncrypt<bool>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal@2
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal@2:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ENDP	; CEncrypt<bool>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	??0WeaponInfo@@QAE@ABU0@@Z			; WeaponInfo::WeaponInfo
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0WeaponInfo@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0WeaponInfo@@QAE@ABU0@@Z PROC				; WeaponInfo::WeaponInfo, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	8b 07		 mov	 eax, DWORD PTR [edi]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00011	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00014	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00017	50		 push	 eax
  00018	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00021	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00024	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00027	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0002a	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0002d	8a 47 20	 mov	 al, BYTE PTR [edi+32]
  00030	88 46 20	 mov	 BYTE PTR [esi+32], al
  00033	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00036	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00039	5f		 pop	 edi
  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??0WeaponInfo@@QAE@ABU0@@Z ENDP				; WeaponInfo::WeaponInfo
_TEXT	ENDS
PUBLIC	??_7ioIceBuff@@6B@				; ioIceBuff::`vftable'
PUBLIC	??0ioIceBuff@@QAE@ABV0@@Z			; ioIceBuff::ioIceBuff
PUBLIC	??_R4ioIceBuff@@6B@				; ioIceBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioIceBuff@@@8				; ioIceBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioIceBuff@@8				; ioIceBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioIceBuff@@8				; ioIceBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioIceBuff@@8			; ioIceBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioIceBuff@@UAEXAAVioINILoader@@@Z	; ioIceBuff::LoadProperty
PUBLIC	?Clone@ioIceBuff@@UAEPAVioBuff@@XZ		; ioIceBuff::Clone
PUBLIC	?StartBuff@ioIceBuff@@UAEXPAVioBaseChar@@@Z	; ioIceBuff::StartBuff
PUBLIC	?ApplyStartBuff@ioIceBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioIceBuff::ApplyStartBuff
PUBLIC	?ProcessBuff@ioIceBuff@@UAEXM@Z			; ioIceBuff::ProcessBuff
PUBLIC	?EndBuff@ioIceBuff@@UAEXXZ			; ioIceBuff::EndBuff
PUBLIC	?SetAction@ioIceBuff@@MAEXXZ			; ioIceBuff::SetAction
PUBLIC	?ProcessDelay@ioIceBuff@@MAEXM@Z		; ioIceBuff::ProcessDelay
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
EXTRN	__fltused:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyExtraBuffInfo
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioIceBuff@@UAEPAXI@Z:PROC			; ioIceBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioicebuff.cpp
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioIceBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioIceBuff@@8 DD FLAT:??_R0?AVioIceBuff@@@8 ; ioIceBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioIceBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioIceBuff@@8
rdata$r	SEGMENT
??_R2ioIceBuff@@8 DD FLAT:??_R1A@?0A@EA@ioIceBuff@@8	; ioIceBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioIceBuff@@8
rdata$r	SEGMENT
??_R3ioIceBuff@@8 DD 00H				; ioIceBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioIceBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioIceBuff@@@8
_DATA	SEGMENT
??_R0?AVioIceBuff@@@8 DD FLAT:??_7type_info@@6B@	; ioIceBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioIceBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioIceBuff@@6B@
rdata$r	SEGMENT
??_R4ioIceBuff@@6B@ DD 00H				; ioIceBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioIceBuff@@@8
	DD	FLAT:??_R3ioIceBuff@@8
rdata$r	ENDS
;	COMDAT ??_7ioIceBuff@@6B@
CONST	SEGMENT
??_7ioIceBuff@@6B@ DD FLAT:??_R4ioIceBuff@@6B@		; ioIceBuff::`vftable'
	DD	FLAT:?LoadProperty@ioIceBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioIceBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioIceBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioIceBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioIceBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioIceBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioIceBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioIceBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioIceBuff@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioIceBuff@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioIceBuff@@QAE@ABV0@@Z$0
__ehfuncinfo$??0ioIceBuff@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioIceBuff@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioIceBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioIceBuff@@QAE@ABV0@@Z PROC				; ioIceBuff::ioIceBuff, COMDAT
; _this$ = ecx

; 18   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioIceBuff@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	8d 87 6c 09 00
	00		 lea	 eax, DWORD PTR [edi+2412]
  00024	50		 push	 eax
  00025	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  0002b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioIceBuff@@6B@
  00031	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@ABU0@@Z
  00036	d9 87 94 09 00
	00		 fld	 DWORD PTR [edi+2452]
  0003c	d9 9e 94 09 00
	00		 fstp	 DWORD PTR [esi+2452]

; 19   : }

  00042	8b c6		 mov	 eax, esi
  00044	e8 00 00 00 00	 call	 __EH_epilog3
  00049	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioIceBuff@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??0ioIceBuff@@QAE@ABV0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioIceBuff@@QAE@ABV0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioIceBuff@@QAE@ABV0@@Z ENDP				; ioIceBuff::ioIceBuff
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
_TEXT	ENDS
PUBLIC	??1ioIceBuff@@UAE@XZ				; ioIceBuff::~ioIceBuff
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	SEGMENT
__unwindtable$??1ioIceBuff@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioIceBuff@@UAE@XZ$0
__ehfuncinfo$??1ioIceBuff@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ioIceBuff@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioicebuff.cpp
xdata$x	ENDS
;	COMDAT ??1ioIceBuff@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioIceBuff@@UAE@XZ PROC				; ioIceBuff::~ioIceBuff, COMDAT
; _this$ = ecx

; 22   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioIceBuff@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioIceBuff@@6B@
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 23   : }

  0001b	8d 8e 74 09 00
	00		 lea	 ecx, DWORD PTR [esi+2420]
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00027	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  00032	e8 00 00 00 00	 call	 __EH_epilog3
  00037	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioIceBuff@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??1ioIceBuff@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioIceBuff@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioIceBuff@@UAE@XZ ENDP				; ioIceBuff::~ioIceBuff
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioIceBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioIceBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioIceBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioIceBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioIceBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T525209 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioIceBuff@@UAEPAVioBuff@@XZ PROC			; ioIceBuff::Clone, COMDAT
; _this$ = ecx

; 45   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioIceBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 46   : 	return new ioIceBuff( *this );

  0000e	68 98 09 00 00	 push	 2456			; 00000998H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T525209[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioIceBuff@@QAE@ABV0@@Z ; ioIceBuff::ioIceBuff
$LN3@Clone:

; 47   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioIceBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T525209[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioIceBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioIceBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioIceBuff@@UAEPAVioBuff@@XZ ENDP			; ioIceBuff::Clone
PUBLIC	??G?$CEncrypt@K@@QAEKABK@Z			; CEncrypt<unsigned long>::operator-
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??G?$CEncrypt@K@@QAEKABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??G?$CEncrypt@K@@QAEKABK@Z PROC				; CEncrypt<unsigned long>::operator-, COMDAT
; _this$ = ecx

; 1274 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1275 : 		
; 1276 : 		type value;
; 1277 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1278 : #ifdef _NOTUSE
; 1279 : 		Debug();
; 1280 : #endif
; 1281 : 		return value - inValue;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _inValue$[ebp]
  00013	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1282 : 	}

  00015	c9		 leave
  00016	c2 04 00	 ret	 4
??G?$CEncrypt@K@@QAEKABK@Z ENDP				; CEncrypt<unsigned long>::operator-
_TEXT	ENDS
PUBLIC	??H?$CEncrypt@K@@QAEKABK@Z			; CEncrypt<unsigned long>::operator+
; Function compile flags: /Ogsp
;	COMDAT ??H?$CEncrypt@K@@QAEKABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??H?$CEncrypt@K@@QAEKABK@Z PROC				; CEncrypt<unsigned long>::operator+, COMDAT
; _this$ = ecx

; 1285 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1286 : 		type value;
; 1287 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1288 : #ifdef _NOTUSE
; 1289 : 		Debug();
; 1290 : #endif
; 1291 : 		return value + inValue;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	03 45 fc	 add	 eax, DWORD PTR _value$[ebp]

; 1292 : 	}

  00015	c9		 leave
  00016	c2 04 00	 ret	 4
??H?$CEncrypt@K@@QAEKABK@Z ENDP				; CEncrypt<unsigned long>::operator+
_TEXT	ENDS
PUBLIC	??Y?$CEncrypt@K@@QAEAAKABK@Z			; CEncrypt<unsigned long>::operator+=
; Function compile flags: /Ogsp
;	COMDAT ??Y?$CEncrypt@K@@QAEAAKABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??Y?$CEncrypt@K@@QAEAAKABK@Z PROC			; CEncrypt<unsigned long>::operator+=, COMDAT
; _this$ = ecx

; 1325 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 1326 : 		type value;
; 1327 : 		DecryptValueToPool(&value);

  00005	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00008	50		 push	 eax
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1328 : 		value += inValue;

  00010	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00013	8b 00		 mov	 eax, DWORD PTR [eax]
  00015	01 45 fc	 add	 DWORD PTR _value$[ebp], eax

; 1329 : 		EncryptValueToPool((char*)&value);

  00018	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  0001b	50		 push	 eax
  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 1330 : #ifdef _NOTUSE
; 1331 : 		m_value += inValue;
; 1332 : 		Debug();
; 1333 : #endif
; 1334 : 		return value;

  00023	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00026	5e		 pop	 esi

; 1335 : 	} 

  00027	c9		 leave
  00028	c2 04 00	 ret	 4
??Y?$CEncrypt@K@@QAEAAKABK@Z ENDP			; CEncrypt<unsigned long>::operator+=
_TEXT	ENDS
PUBLIC	??M?$CEncrypt@K@@QAE_NABK@Z			; CEncrypt<unsigned long>::operator<
; Function compile flags: /Ogsp
;	COMDAT ??M?$CEncrypt@K@@QAE_NABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??M?$CEncrypt@K@@QAE_NABK@Z PROC			; CEncrypt<unsigned long>::operator<, COMDAT
; _this$ = ecx

; 1401 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1402 : 		type value;
; 1403 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1404 : #ifdef _NOTUSE
; 1405 : 		Debug();
; 1406 : #endif
; 1407 : 		return (value < inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _value$[ebp]
  00013	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00015	1b c0		 sbb	 eax, eax
  00017	f7 d8		 neg	 eax

; 1408 : 	} 

  00019	c9		 leave
  0001a	c2 04 00	 ret	 4
??M?$CEncrypt@K@@QAE_NABK@Z ENDP			; CEncrypt<unsigned long>::operator<
_TEXT	ENDS
PUBLIC	??N?$CEncrypt@K@@QAE_NABK@Z			; CEncrypt<unsigned long>::operator<=
; Function compile flags: /Ogsp
;	COMDAT ??N?$CEncrypt@K@@QAE_NABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??N?$CEncrypt@K@@QAE_NABK@Z PROC			; CEncrypt<unsigned long>::operator<=, COMDAT
; _this$ = ecx

; 1431 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1432 : 		
; 1433 : 		type value;
; 1434 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1435 : #ifdef _NOTUSE
; 1436 : 		Debug();
; 1437 : #endif
; 1438 : 		return (value <= inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	3b 45 fc	 cmp	 eax, DWORD PTR _value$[ebp]
  00015	1b c0		 sbb	 eax, eax
  00017	40		 inc	 eax

; 1439 : 	}		

  00018	c9		 leave
  00019	c2 04 00	 ret	 4
??N?$CEncrypt@K@@QAE_NABK@Z ENDP			; CEncrypt<unsigned long>::operator<=
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BG@@ioINILoader@@QAEHAAY0BG@$$CBDH@Z ; ioINILoader::LoadInt_e<22>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadInt_e@$0BG@@ioINILoader@@QAEHAAY0BG@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -32						; size = 22
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BG@@ioINILoader@@QAEHAAY0BG@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<22>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 15 02 00
	00		 je	 $LN96@LoadInt_e
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 fe 01 00
	00		 je	 $LN95@LoadInt_e
  00032	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00035	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 e7 01 00
	00		 je	 $LN94@LoadInt_e
  00043	b1 eb		 mov	 cl, -21			; ffffffebH
  00045	32 d1		 xor	 dl, cl
  00047	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 cf 01 00
	00		 je	 $LN93@LoadInt_e
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 b7 01 00
	00		 je	 $LN92@LoadInt_e
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 a0 01 00
	00		 je	 $LN91@LoadInt_e
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 8a 01 00
	00		 je	 $LN90@LoadInt_e
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 75 01 00
	00		 je	 $LN89@LoadInt_e
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 5f 01 00
	00		 je	 $LN88@LoadInt_e
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 48 01 00
	00		 je	 $LN87@LoadInt_e
  000ba	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bd	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	0f 84 32 01 00
	00		 je	 $LN86@LoadInt_e
  000cb	32 d1		 xor	 dl, cl
  000cd	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 1d 01 00
	00		 je	 $LN85@LoadInt_e
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 07 01 00
	00		 je	 $LN84@LoadInt_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 f0 00 00
	00		 je	 $LN83@LoadInt_e
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 da 00 00
	00		 je	 $LN82@LoadInt_e
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 c5 00 00
	00		 je	 $LN81@LoadInt_e
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 af 00 00
	00		 je	 $LN80@LoadInt_e
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 98 00 00
	00		 je	 $LN79@LoadInt_e
  0013e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00141	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00147	84 d2		 test	 dl, dl
  00149	0f 84 82 00 00
	00		 je	 $LN78@LoadInt_e
  0014f	32 d1		 xor	 dl, cl
  00151	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	74 71		 je	 SHORT $LN77@LoadInt_e
  0015b	32 d3		 xor	 dl, bl
  0015d	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00160	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00163	84 d2		 test	 dl, dl
  00165	74 5f		 je	 SHORT $LN76@LoadInt_e
  00167	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016a	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0016e	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00171	0f 84 c3 00 00
	00		 je	 $LN1@LoadInt_e
  00177	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0017a	84 d2		 test	 dl, dl
  0017c	74 43		 je	 SHORT $LN74@LoadInt_e
  0017e	32 d1		 xor	 dl, cl
  00180	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00183	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00186	84 d2		 test	 dl, dl
  00188	74 32		 je	 SHORT $LN73@LoadInt_e
  0018a	32 d3		 xor	 dl, bl
  0018c	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  0018f	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  00192	84 d2		 test	 dl, dl
  00194	74 20		 je	 SHORT $LN72@LoadInt_e
  00196	8a 40 19	 mov	 al, BYTE PTR [eax+25]
  00199	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0019c	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  0019f	84 c0		 test	 al, al
  001a1	74 0a		 je	 SHORT $LN71@LoadInt_e
  001a3	34 ec		 xor	 al, -20			; ffffffecH
  001a5	88 45 f9	 mov	 BYTE PTR __k$[ebp+25], al
  001a8	e9 8d 00 00 00	 jmp	 $LN1@LoadInt_e
$LN71@LoadInt_e:
  001ad	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+25], -20 ; ffffffecH
  001b1	e9 84 00 00 00	 jmp	 $LN1@LoadInt_e
$LN72@LoadInt_e:
  001b6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ba	eb 7e		 jmp	 SHORT $LN1@LoadInt_e
$LN73@LoadInt_e:
  001bc	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001bf	eb 79		 jmp	 SHORT $LN1@LoadInt_e
$LN74@LoadInt_e:
  001c1	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001c4	eb 74		 jmp	 SHORT $LN1@LoadInt_e
$LN76@LoadInt_e:
  001c6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001ca	eb 6e		 jmp	 SHORT $LN1@LoadInt_e
$LN77@LoadInt_e:
  001cc	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001cf	eb 69		 jmp	 SHORT $LN1@LoadInt_e
$LN78@LoadInt_e:
  001d1	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  001d4	eb 64		 jmp	 SHORT $LN1@LoadInt_e
$LN79@LoadInt_e:
  001d6	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  001da	eb 5e		 jmp	 SHORT $LN1@LoadInt_e
$LN80@LoadInt_e:
  001dc	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001e0	eb 58		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  001e2	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001e5	eb 53		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  001e7	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  001ea	eb 4e		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  001ec	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  001f0	eb 48		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  001f2	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001f6	eb 42		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  001f8	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  001fb	eb 3d		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  001fd	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00200	eb 38		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  00202	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00206	eb 32		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  00208	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0020c	eb 2c		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  0020e	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00211	eb 27		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  00213	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00216	eb 22		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  00218	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0021c	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  0021e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00222	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  00224	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00228	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  0022a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0022e	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  00230	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00234	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  00236	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  0023a	6a 05		 push	 5
  0023c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0023f	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+21], 0
  00243	5a		 pop	 edx
$LL104@LoadInt_e:
  00244	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0024a	83 c0 04	 add	 eax, 4
  0024d	4a		 dec	 edx
  0024e	75 f4		 jne	 SHORT $LL104@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  00250	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00253	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00257	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0025a	50		 push	 eax
  0025b	8b ce		 mov	 ecx, esi
  0025d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00263	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00266	5e		 pop	 esi
  00267	33 cd		 xor	 ecx, ebp
  00269	5b		 pop	 ebx
  0026a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0026f	c9		 leave
  00270	c2 08 00	 ret	 8
??$LoadInt_e@$0BG@@ioINILoader@@QAEHAAY0BG@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<22>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BL@@ioINILoader@@QAEHAAY0BL@$$CBDH@Z ; ioINILoader::LoadInt_e<27>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BL@@ioINILoader@@QAEHAAY0BL@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -36						; size = 27
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BL@@ioINILoader@@QAEHAAY0BL@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<27>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 91 02 00
	00		 je	 $LN96@LoadInt_e@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 7a 02 00
	00		 je	 $LN95@LoadInt_e@2
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 62 02 00
	00		 je	 $LN94@LoadInt_e@2
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 4b 02 00
	00		 je	 $LN93@LoadInt_e@2
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 33 02 00
	00		 je	 $LN92@LoadInt_e@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 1d 02 00
	00		 je	 $LN91@LoadInt_e@2
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 07 02 00
	00		 je	 $LN90@LoadInt_e@2
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 f1 01 00
	00		 je	 $LN89@LoadInt_e@2
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 db 01 00
	00		 je	 $LN88@LoadInt_e@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 c5 01 00
	00		 je	 $LN87@LoadInt_e@2
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 af 01 00
	00		 je	 $LN86@LoadInt_e@2
  000ca	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cd	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 99 01 00
	00		 je	 $LN85@LoadInt_e@2
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 83 01 00
	00		 je	 $LN84@LoadInt_e@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 6d 01 00
	00		 je	 $LN83@LoadInt_e@2
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 57 01 00
	00		 je	 $LN82@LoadInt_e@2
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 41 01 00
	00		 je	 $LN81@LoadInt_e@2
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 2b 01 00
	00		 je	 $LN80@LoadInt_e@2
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 15 01 00
	00		 je	 $LN79@LoadInt_e@2
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 ff 00 00
	00		 je	 $LN78@LoadInt_e@2
  0014e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00151	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 e9 00 00
	00		 je	 $LN77@LoadInt_e@2
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 d3 00 00
	00		 je	 $LN76@LoadInt_e@2
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 bd 00 00
	00		 je	 $LN75@LoadInt_e@2
  00180	32 d1		 xor	 dl, cl
  00182	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	0f 84 a7 00 00
	00		 je	 $LN74@LoadInt_e@2
  00190	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00193	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00196	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00199	84 d2		 test	 dl, dl
  0019b	0f 84 91 00 00
	00		 je	 $LN73@LoadInt_e@2
  001a1	32 d3		 xor	 dl, bl
  001a3	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	74 7c		 je	 SHORT $LN72@LoadInt_e@2
  001ad	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b0	88 55 f4	 mov	 BYTE PTR __k$[ebp+24], dl
  001b3	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001b6	84 d2		 test	 dl, dl
  001b8	74 67		 je	 SHORT $LN71@LoadInt_e@2
  001ba	32 d1		 xor	 dl, cl
  001bc	80 78 1a 00	 cmp	 BYTE PTR [eax+26], 0
  001c0	88 55 f5	 mov	 BYTE PTR __k$[ebp+25], dl
  001c3	0f 84 ed 00 00
	00		 je	 $LN1@LoadInt_e@2
  001c9	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001cc	84 d2		 test	 dl, dl
  001ce	74 49		 je	 SHORT $LN69@LoadInt_e@2
  001d0	32 d3		 xor	 dl, bl
  001d2	88 55 f7	 mov	 BYTE PTR __k$[ebp+27], dl
  001d5	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001d8	84 d2		 test	 dl, dl
  001da	74 34		 je	 SHORT $LN68@LoadInt_e@2
  001dc	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001df	88 55 f8	 mov	 BYTE PTR __k$[ebp+28], dl
  001e2	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001e5	84 d2		 test	 dl, dl
  001e7	74 1f		 je	 SHORT $LN67@LoadInt_e@2
  001e9	8a 40 1e	 mov	 al, BYTE PTR [eax+30]
  001ec	32 d1		 xor	 dl, cl
  001ee	88 55 f9	 mov	 BYTE PTR __k$[ebp+29], dl
  001f1	84 c0		 test	 al, al
  001f3	74 0a		 je	 SHORT $LN66@LoadInt_e@2
  001f5	34 eb		 xor	 al, -21			; ffffffebH
  001f7	88 45 fa	 mov	 BYTE PTR __k$[ebp+30], al
  001fa	e9 b7 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN66@LoadInt_e@2:
  001ff	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+30], -21 ; ffffffebH
  00203	e9 ae 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN67@LoadInt_e@2:
  00208	88 4d f9	 mov	 BYTE PTR __k$[ebp+29], cl
  0020b	e9 a6 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN68@LoadInt_e@2:
  00210	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  00214	e9 9d 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN69@LoadInt_e@2:
  00219	88 5d f7	 mov	 BYTE PTR __k$[ebp+27], bl
  0021c	e9 95 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN71@LoadInt_e@2:
  00221	88 4d f5	 mov	 BYTE PTR __k$[ebp+25], cl
  00224	e9 8d 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN72@LoadInt_e@2:
  00229	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  0022d	e9 84 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN73@LoadInt_e@2:
  00232	88 5d f3	 mov	 BYTE PTR __k$[ebp+23], bl
  00235	eb 7f		 jmp	 SHORT $LN1@LoadInt_e@2
$LN74@LoadInt_e@2:
  00237	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0023b	eb 79		 jmp	 SHORT $LN1@LoadInt_e@2
$LN75@LoadInt_e@2:
  0023d	88 4d f1	 mov	 BYTE PTR __k$[ebp+21], cl
  00240	eb 74		 jmp	 SHORT $LN1@LoadInt_e@2
$LN76@LoadInt_e@2:
  00242	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00246	eb 6e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN77@LoadInt_e@2:
  00248	88 5d ef	 mov	 BYTE PTR __k$[ebp+19], bl
  0024b	eb 69		 jmp	 SHORT $LN1@LoadInt_e@2
$LN78@LoadInt_e@2:
  0024d	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00251	eb 63		 jmp	 SHORT $LN1@LoadInt_e@2
$LN79@LoadInt_e@2:
  00253	88 4d ed	 mov	 BYTE PTR __k$[ebp+17], cl
  00256	eb 5e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN80@LoadInt_e@2:
  00258	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0025c	eb 58		 jmp	 SHORT $LN1@LoadInt_e@2
$LN81@LoadInt_e@2:
  0025e	88 5d eb	 mov	 BYTE PTR __k$[ebp+15], bl
  00261	eb 53		 jmp	 SHORT $LN1@LoadInt_e@2
$LN82@LoadInt_e@2:
  00263	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00267	eb 4d		 jmp	 SHORT $LN1@LoadInt_e@2
$LN83@LoadInt_e@2:
  00269	88 4d e9	 mov	 BYTE PTR __k$[ebp+13], cl
  0026c	eb 48		 jmp	 SHORT $LN1@LoadInt_e@2
$LN84@LoadInt_e@2:
  0026e	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00272	eb 42		 jmp	 SHORT $LN1@LoadInt_e@2
$LN85@LoadInt_e@2:
  00274	88 5d e7	 mov	 BYTE PTR __k$[ebp+11], bl
  00277	eb 3d		 jmp	 SHORT $LN1@LoadInt_e@2
$LN86@LoadInt_e@2:
  00279	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0027d	eb 37		 jmp	 SHORT $LN1@LoadInt_e@2
$LN87@LoadInt_e@2:
  0027f	88 4d e5	 mov	 BYTE PTR __k$[ebp+9], cl
  00282	eb 32		 jmp	 SHORT $LN1@LoadInt_e@2
$LN88@LoadInt_e@2:
  00284	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00288	eb 2c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN89@LoadInt_e@2:
  0028a	88 5d e3	 mov	 BYTE PTR __k$[ebp+7], bl
  0028d	eb 27		 jmp	 SHORT $LN1@LoadInt_e@2
$LN90@LoadInt_e@2:
  0028f	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00293	eb 21		 jmp	 SHORT $LN1@LoadInt_e@2
$LN91@LoadInt_e@2:
  00295	88 4d e1	 mov	 BYTE PTR __k$[ebp+5], cl
  00298	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN92@LoadInt_e@2:
  0029a	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0029e	eb 16		 jmp	 SHORT $LN1@LoadInt_e@2
$LN93@LoadInt_e@2:
  002a0	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  002a4	eb 10		 jmp	 SHORT $LN1@LoadInt_e@2
$LN94@LoadInt_e@2:
  002a6	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  002aa	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN95@LoadInt_e@2:
  002ac	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  002b0	eb 04		 jmp	 SHORT $LN1@LoadInt_e@2
$LN96@LoadInt_e@2:
  002b2	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@2:
  002b6	6a 06		 push	 6
  002b8	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002bb	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+26], 0
  002bf	5a		 pop	 edx
$LL104@LoadInt_e@2:
  002c0	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002c6	83 c0 04	 add	 eax, 4
  002c9	4a		 dec	 edx
  002ca	75 f4		 jne	 SHORT $LL104@LoadInt_e@2
  002cc	6a 18		 push	 24			; 00000018H
  002ce	58		 pop	 eax
$LL101@LoadInt_e@2:
  002cf	8b c8		 mov	 ecx, eax
  002d1	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  002d7	79 05		 jns	 SHORT $LN111@LoadInt_e@2
  002d9	49		 dec	 ecx
  002da	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002dd	41		 inc	 ecx
$LN111@LoadInt_e@2:
  002de	b2 ed		 mov	 dl, -19			; ffffffedH
  002e0	2a d1		 sub	 dl, cl
  002e2	30 54 05 dc	 xor	 BYTE PTR __k$[ebp+eax], dl
  002e6	40		 inc	 eax
  002e7	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  002ea	7c e3		 jl	 SHORT $LL101@LoadInt_e@2

; 120  : 		return LoadInt(_k, i);

  002ec	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  002ef	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002f2	50		 push	 eax
  002f3	8b ce		 mov	 ecx, esi
  002f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  002fb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002fe	5e		 pop	 esi
  002ff	33 cd		 xor	 ecx, ebp
  00301	5b		 pop	 ebx
  00302	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00307	c9		 leave
  00308	c2 08 00	 ret	 8
??$LoadInt_e@$0BL@@ioINILoader@@QAEHAAY0BL@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<27>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BK@@ioINILoader@@QAEXAAY0BK@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<26>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BK@@ioINILoader@@QAEXAAY0BK@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -40					; size = 4
__k$ = -36						; size = 26
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BK@@ioINILoader@@QAEXAAY0BK@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<26>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d d8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 79 02 00
	00		 je	 $LN96@LoadString
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 62 02 00
	00		 je	 $LN95@LoadString
  0003a	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003d	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00040	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00043	84 d2		 test	 dl, dl
  00045	0f 84 4b 02 00
	00		 je	 $LN94@LoadString
  0004b	b1 eb		 mov	 cl, -21			; ffffffebH
  0004d	32 d1		 xor	 dl, cl
  0004f	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  00052	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00055	84 d2		 test	 dl, dl
  00057	0f 84 33 02 00
	00		 je	 $LN93@LoadString
  0005d	b3 ea		 mov	 bl, -22			; ffffffeaH
  0005f	32 d3		 xor	 dl, bl
  00061	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 1b 02 00
	00		 je	 $LN92@LoadString
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 04 02 00
	00		 je	 $LN91@LoadString
  00080	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00083	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  00086	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00089	84 d2		 test	 dl, dl
  0008b	0f 84 ee 01 00
	00		 je	 $LN90@LoadString
  00091	32 d1		 xor	 dl, cl
  00093	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  00096	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00099	84 d2		 test	 dl, dl
  0009b	0f 84 d9 01 00
	00		 je	 $LN89@LoadString
  000a1	32 d3		 xor	 dl, bl
  000a3	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 c3 01 00
	00		 je	 $LN88@LoadString
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 ac 01 00
	00		 je	 $LN87@LoadString
  000c2	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000c5	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000c8	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000cb	84 d2		 test	 dl, dl
  000cd	0f 84 96 01 00
	00		 je	 $LN86@LoadString
  000d3	32 d1		 xor	 dl, cl
  000d5	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000d8	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000db	84 d2		 test	 dl, dl
  000dd	0f 84 81 01 00
	00		 je	 $LN85@LoadString
  000e3	32 d3		 xor	 dl, bl
  000e5	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 6b 01 00
	00		 je	 $LN84@LoadString
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 54 01 00
	00		 je	 $LN83@LoadString
  00104	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00107	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  0010a	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010d	84 d2		 test	 dl, dl
  0010f	0f 84 3e 01 00
	00		 je	 $LN82@LoadString
  00115	32 d1		 xor	 dl, cl
  00117	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  0011a	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011d	84 d2		 test	 dl, dl
  0011f	0f 84 29 01 00
	00		 je	 $LN81@LoadString
  00125	32 d3		 xor	 dl, bl
  00127	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	0f 84 13 01 00
	00		 je	 $LN80@LoadString
  00135	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00138	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  0013b	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013e	84 d2		 test	 dl, dl
  00140	0f 84 fc 00 00
	00		 je	 $LN79@LoadString
  00146	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00149	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  0014c	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0014f	84 d2		 test	 dl, dl
  00151	0f 84 e6 00 00
	00		 je	 $LN78@LoadString
  00157	32 d1		 xor	 dl, cl
  00159	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  0015c	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0015f	84 d2		 test	 dl, dl
  00161	0f 84 d1 00 00
	00		 je	 $LN77@LoadString
  00167	32 d3		 xor	 dl, bl
  00169	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  0016c	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0016f	84 d2		 test	 dl, dl
  00171	0f 84 bb 00 00
	00		 je	 $LN76@LoadString
  00177	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0017a	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  0017d	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00180	84 d2		 test	 dl, dl
  00182	0f 84 a4 00 00
	00		 je	 $LN75@LoadString
  00188	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0018b	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  0018e	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00191	84 d2		 test	 dl, dl
  00193	0f 84 8e 00 00
	00		 je	 $LN74@LoadString
  00199	32 d1		 xor	 dl, cl
  0019b	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  0019e	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  001a1	84 d2		 test	 dl, dl
  001a3	74 7d		 je	 SHORT $LN73@LoadString
  001a5	32 d3		 xor	 dl, bl
  001a7	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001aa	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001ad	84 d2		 test	 dl, dl
  001af	74 68		 je	 SHORT $LN72@LoadString
  001b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b4	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  001b8	88 55 f4	 mov	 BYTE PTR __k$[ebp+24], dl
  001bb	0f 84 e5 00 00
	00		 je	 $LN111@LoadString
  001c1	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001c4	84 d2		 test	 dl, dl
  001c6	74 49		 je	 SHORT $LN70@LoadString
  001c8	32 d1		 xor	 dl, cl
  001ca	88 55 f6	 mov	 BYTE PTR __k$[ebp+26], dl
  001cd	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001d0	84 d2		 test	 dl, dl
  001d2	74 35		 je	 SHORT $LN69@LoadString
  001d4	32 d3		 xor	 dl, bl
  001d6	88 55 f7	 mov	 BYTE PTR __k$[ebp+27], dl
  001d9	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001dc	84 d2		 test	 dl, dl
  001de	74 20		 je	 SHORT $LN68@LoadString
  001e0	8a 40 1d	 mov	 al, BYTE PTR [eax+29]
  001e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001e6	88 55 f8	 mov	 BYTE PTR __k$[ebp+28], dl
  001e9	84 c0		 test	 al, al
  001eb	74 0a		 je	 SHORT $LN67@LoadString
  001ed	34 ec		 xor	 al, -20			; ffffffecH
  001ef	88 45 f9	 mov	 BYTE PTR __k$[ebp+29], al
  001f2	e9 af 00 00 00	 jmp	 $LN111@LoadString
$LN67@LoadString:
  001f7	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+29], -20 ; ffffffecH
  001fb	e9 a6 00 00 00	 jmp	 $LN111@LoadString
$LN68@LoadString:
  00200	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  00204	e9 9d 00 00 00	 jmp	 $LN111@LoadString
$LN69@LoadString:
  00209	88 5d f7	 mov	 BYTE PTR __k$[ebp+27], bl
  0020c	e9 95 00 00 00	 jmp	 $LN111@LoadString
$LN70@LoadString:
  00211	88 4d f6	 mov	 BYTE PTR __k$[ebp+26], cl
  00214	e9 8d 00 00 00	 jmp	 $LN111@LoadString
$LN72@LoadString:
  00219	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  0021d	e9 84 00 00 00	 jmp	 $LN111@LoadString
$LN73@LoadString:
  00222	88 5d f3	 mov	 BYTE PTR __k$[ebp+23], bl
  00225	eb 7f		 jmp	 SHORT $LN111@LoadString
$LN74@LoadString:
  00227	88 4d f2	 mov	 BYTE PTR __k$[ebp+22], cl
  0022a	eb 7a		 jmp	 SHORT $LN111@LoadString
$LN75@LoadString:
  0022c	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  00230	eb 74		 jmp	 SHORT $LN111@LoadString
$LN76@LoadString:
  00232	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00236	eb 6e		 jmp	 SHORT $LN111@LoadString
$LN77@LoadString:
  00238	88 5d ef	 mov	 BYTE PTR __k$[ebp+19], bl
  0023b	eb 69		 jmp	 SHORT $LN111@LoadString
$LN78@LoadString:
  0023d	88 4d ee	 mov	 BYTE PTR __k$[ebp+18], cl
  00240	eb 64		 jmp	 SHORT $LN111@LoadString
$LN79@LoadString:
  00242	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  00246	eb 5e		 jmp	 SHORT $LN111@LoadString
$LN80@LoadString:
  00248	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0024c	eb 58		 jmp	 SHORT $LN111@LoadString
$LN81@LoadString:
  0024e	88 5d eb	 mov	 BYTE PTR __k$[ebp+15], bl
  00251	eb 53		 jmp	 SHORT $LN111@LoadString
$LN82@LoadString:
  00253	88 4d ea	 mov	 BYTE PTR __k$[ebp+14], cl
  00256	eb 4e		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  00258	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  0025c	eb 48		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  0025e	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00262	eb 42		 jmp	 SHORT $LN111@LoadString
$LN85@LoadString:
  00264	88 5d e7	 mov	 BYTE PTR __k$[ebp+11], bl
  00267	eb 3d		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  00269	88 4d e6	 mov	 BYTE PTR __k$[ebp+10], cl
  0026c	eb 38		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  0026e	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00272	eb 32		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  00274	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00278	eb 2c		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  0027a	88 5d e3	 mov	 BYTE PTR __k$[ebp+7], bl
  0027d	eb 27		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  0027f	88 4d e2	 mov	 BYTE PTR __k$[ebp+6], cl
  00282	eb 22		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  00284	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00288	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  0028a	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0028e	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  00290	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00294	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  00296	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0029a	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  0029c	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  002a0	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  002a2	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  002a6	6a 06		 push	 6
  002a8	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002ab	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+25], 0
  002af	5a		 pop	 edx
$LL104@LoadString:
  002b0	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002b6	83 c0 04	 add	 eax, 4
  002b9	4a		 dec	 edx
  002ba	75 f4		 jne	 SHORT $LL104@LoadString

; 163  : 		LoadString(_k, d, b, i);

  002bc	ff 75 14	 push	 DWORD PTR _i$[ebp]
  002bf	8b 4d d8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  002c2	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  002c6	57		 push	 edi
  002c7	56		 push	 esi
  002c8	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002cb	50		 push	 eax
  002cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  002d2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002d5	5f		 pop	 edi
  002d6	5e		 pop	 esi
  002d7	33 cd		 xor	 ecx, ebp
  002d9	5b		 pop	 ebx
  002da	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002df	c9		 leave
  002e0	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BK@@ioINILoader@@QAEXAAY0BK@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<26>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BP@@ioINILoader@@QAEHAAY0BP@$$CBDH@Z ; ioINILoader::LoadInt_e<31>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BP@@ioINILoader@@QAEHAAY0BP@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -40						; size = 31
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BP@@ioINILoader@@QAEHAAY0BP@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<31>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 f5 02 00
	00		 je	 $LN96@LoadInt_e@3
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 d8	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 de 02 00
	00		 je	 $LN95@LoadInt_e@3
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 d9	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 c6 02 00
	00		 je	 $LN94@LoadInt_e@3
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 da	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 af 02 00
	00		 je	 $LN93@LoadInt_e@3
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 db	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 97 02 00
	00		 je	 $LN92@LoadInt_e@3
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 dc	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 81 02 00
	00		 je	 $LN91@LoadInt_e@3
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 dd	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 6b 02 00
	00		 je	 $LN90@LoadInt_e@3
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 de	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 55 02 00
	00		 je	 $LN89@LoadInt_e@3
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 df	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 3f 02 00
	00		 je	 $LN88@LoadInt_e@3
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e0	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 29 02 00
	00		 je	 $LN87@LoadInt_e@3
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 13 02 00
	00		 je	 $LN86@LoadInt_e@3
  000ca	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cd	88 55 e2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 fd 01 00
	00		 je	 $LN85@LoadInt_e@3
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 e3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 e7 01 00
	00		 je	 $LN84@LoadInt_e@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 d1 01 00
	00		 je	 $LN83@LoadInt_e@3
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 e5	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 bb 01 00
	00		 je	 $LN82@LoadInt_e@3
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 e6	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 a5 01 00
	00		 je	 $LN81@LoadInt_e@3
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 e7	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 8f 01 00
	00		 je	 $LN80@LoadInt_e@3
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 e8	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 79 01 00
	00		 je	 $LN79@LoadInt_e@3
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 e9	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 63 01 00
	00		 je	 $LN78@LoadInt_e@3
  0014e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00151	88 55 ea	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 4d 01 00
	00		 je	 $LN77@LoadInt_e@3
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 eb	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 37 01 00
	00		 je	 $LN76@LoadInt_e@3
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 ec	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 21 01 00
	00		 je	 $LN75@LoadInt_e@3
  00180	32 d1		 xor	 dl, cl
  00182	88 55 ed	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	0f 84 0b 01 00
	00		 je	 $LN74@LoadInt_e@3
  00190	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00193	88 55 ee	 mov	 BYTE PTR __k$[ebp+22], dl
  00196	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00199	84 d2		 test	 dl, dl
  0019b	0f 84 f5 00 00
	00		 je	 $LN73@LoadInt_e@3
  001a1	32 d3		 xor	 dl, bl
  001a3	88 55 ef	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	0f 84 dc 00 00
	00		 je	 $LN72@LoadInt_e@3
  001b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b4	88 55 f0	 mov	 BYTE PTR __k$[ebp+24], dl
  001b7	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ba	84 d2		 test	 dl, dl
  001bc	0f 84 c3 00 00
	00		 je	 $LN71@LoadInt_e@3
  001c2	32 d1		 xor	 dl, cl
  001c4	88 55 f1	 mov	 BYTE PTR __k$[ebp+25], dl
  001c7	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001ca	84 d2		 test	 dl, dl
  001cc	0f 84 aa 00 00
	00		 je	 $LN70@LoadInt_e@3
  001d2	80 f2 eb	 xor	 dl, -21			; ffffffebH
  001d5	88 55 f2	 mov	 BYTE PTR __k$[ebp+26], dl
  001d8	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001db	84 d2		 test	 dl, dl
  001dd	0f 84 91 00 00
	00		 je	 $LN69@LoadInt_e@3
  001e3	32 d3		 xor	 dl, bl
  001e5	88 55 f3	 mov	 BYTE PTR __k$[ebp+27], dl
  001e8	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001eb	84 d2		 test	 dl, dl
  001ed	74 7c		 je	 SHORT $LN68@LoadInt_e@3
  001ef	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001f2	88 55 f4	 mov	 BYTE PTR __k$[ebp+28], dl
  001f5	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001f8	84 d2		 test	 dl, dl
  001fa	74 67		 je	 SHORT $LN67@LoadInt_e@3
  001fc	32 d1		 xor	 dl, cl
  001fe	80 78 1e 00	 cmp	 BYTE PTR [eax+30], 0
  00202	88 55 f5	 mov	 BYTE PTR __k$[ebp+29], dl
  00205	0f 84 0f 01 00
	00		 je	 $LN1@LoadInt_e@3
  0020b	8a 50 1f	 mov	 dl, BYTE PTR [eax+31]
  0020e	84 d2		 test	 dl, dl
  00210	74 49		 je	 SHORT $LN65@LoadInt_e@3
  00212	32 d3		 xor	 dl, bl
  00214	88 55 f7	 mov	 BYTE PTR __k$[ebp+31], dl
  00217	8a 50 20	 mov	 dl, BYTE PTR [eax+32]
  0021a	84 d2		 test	 dl, dl
  0021c	74 34		 je	 SHORT $LN64@LoadInt_e@3
  0021e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00221	88 55 f8	 mov	 BYTE PTR __k$[ebp+32], dl
  00224	8a 50 21	 mov	 dl, BYTE PTR [eax+33]
  00227	84 d2		 test	 dl, dl
  00229	74 1f		 je	 SHORT $LN63@LoadInt_e@3
  0022b	8a 40 22	 mov	 al, BYTE PTR [eax+34]
  0022e	32 d1		 xor	 dl, cl
  00230	88 55 f9	 mov	 BYTE PTR __k$[ebp+33], dl
  00233	84 c0		 test	 al, al
  00235	74 0a		 je	 SHORT $LN62@LoadInt_e@3
  00237	34 eb		 xor	 al, -21			; ffffffebH
  00239	88 45 fa	 mov	 BYTE PTR __k$[ebp+34], al
  0023c	e9 d9 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN62@LoadInt_e@3:
  00241	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+34], -21 ; ffffffebH
  00245	e9 d0 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN63@LoadInt_e@3:
  0024a	88 4d f9	 mov	 BYTE PTR __k$[ebp+33], cl
  0024d	e9 c8 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN64@LoadInt_e@3:
  00252	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+32], -19 ; ffffffedH
  00256	e9 bf 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN65@LoadInt_e@3:
  0025b	88 5d f7	 mov	 BYTE PTR __k$[ebp+31], bl
  0025e	e9 b7 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN67@LoadInt_e@3:
  00263	88 4d f5	 mov	 BYTE PTR __k$[ebp+29], cl
  00266	e9 af 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN68@LoadInt_e@3:
  0026b	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  0026f	e9 a6 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN69@LoadInt_e@3:
  00274	88 5d f3	 mov	 BYTE PTR __k$[ebp+27], bl
  00277	e9 9e 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN70@LoadInt_e@3:
  0027c	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+26], -21 ; ffffffebH
  00280	e9 95 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN71@LoadInt_e@3:
  00285	88 4d f1	 mov	 BYTE PTR __k$[ebp+25], cl
  00288	e9 8d 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN72@LoadInt_e@3:
  0028d	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  00291	e9 84 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN73@LoadInt_e@3:
  00296	88 5d ef	 mov	 BYTE PTR __k$[ebp+23], bl
  00299	eb 7f		 jmp	 SHORT $LN1@LoadInt_e@3
$LN74@LoadInt_e@3:
  0029b	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0029f	eb 79		 jmp	 SHORT $LN1@LoadInt_e@3
$LN75@LoadInt_e@3:
  002a1	88 4d ed	 mov	 BYTE PTR __k$[ebp+21], cl
  002a4	eb 74		 jmp	 SHORT $LN1@LoadInt_e@3
$LN76@LoadInt_e@3:
  002a6	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  002aa	eb 6e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN77@LoadInt_e@3:
  002ac	88 5d eb	 mov	 BYTE PTR __k$[ebp+19], bl
  002af	eb 69		 jmp	 SHORT $LN1@LoadInt_e@3
$LN78@LoadInt_e@3:
  002b1	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  002b5	eb 63		 jmp	 SHORT $LN1@LoadInt_e@3
$LN79@LoadInt_e@3:
  002b7	88 4d e9	 mov	 BYTE PTR __k$[ebp+17], cl
  002ba	eb 5e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN80@LoadInt_e@3:
  002bc	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  002c0	eb 58		 jmp	 SHORT $LN1@LoadInt_e@3
$LN81@LoadInt_e@3:
  002c2	88 5d e7	 mov	 BYTE PTR __k$[ebp+15], bl
  002c5	eb 53		 jmp	 SHORT $LN1@LoadInt_e@3
$LN82@LoadInt_e@3:
  002c7	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  002cb	eb 4d		 jmp	 SHORT $LN1@LoadInt_e@3
$LN83@LoadInt_e@3:
  002cd	88 4d e5	 mov	 BYTE PTR __k$[ebp+13], cl
  002d0	eb 48		 jmp	 SHORT $LN1@LoadInt_e@3
$LN84@LoadInt_e@3:
  002d2	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  002d6	eb 42		 jmp	 SHORT $LN1@LoadInt_e@3
$LN85@LoadInt_e@3:
  002d8	88 5d e3	 mov	 BYTE PTR __k$[ebp+11], bl
  002db	eb 3d		 jmp	 SHORT $LN1@LoadInt_e@3
$LN86@LoadInt_e@3:
  002dd	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  002e1	eb 37		 jmp	 SHORT $LN1@LoadInt_e@3
$LN87@LoadInt_e@3:
  002e3	88 4d e1	 mov	 BYTE PTR __k$[ebp+9], cl
  002e6	eb 32		 jmp	 SHORT $LN1@LoadInt_e@3
$LN88@LoadInt_e@3:
  002e8	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  002ec	eb 2c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN89@LoadInt_e@3:
  002ee	88 5d df	 mov	 BYTE PTR __k$[ebp+7], bl
  002f1	eb 27		 jmp	 SHORT $LN1@LoadInt_e@3
$LN90@LoadInt_e@3:
  002f3	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  002f7	eb 21		 jmp	 SHORT $LN1@LoadInt_e@3
$LN91@LoadInt_e@3:
  002f9	88 4d dd	 mov	 BYTE PTR __k$[ebp+5], cl
  002fc	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN92@LoadInt_e@3:
  002fe	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00302	eb 16		 jmp	 SHORT $LN1@LoadInt_e@3
$LN93@LoadInt_e@3:
  00304	c6 45 db ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00308	eb 10		 jmp	 SHORT $LN1@LoadInt_e@3
$LN94@LoadInt_e@3:
  0030a	c6 45 da eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0030e	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@3
$LN95@LoadInt_e@3:
  00310	c6 45 d9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00314	eb 04		 jmp	 SHORT $LN1@LoadInt_e@3
$LN96@LoadInt_e@3:
  00316	c6 45 d8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@3:
  0031a	6a 07		 push	 7
  0031c	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  0031f	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+30], 0
  00323	5a		 pop	 edx
$LL104@LoadInt_e@3:
  00324	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0032a	83 c0 04	 add	 eax, 4
  0032d	4a		 dec	 edx
  0032e	75 f4		 jne	 SHORT $LL104@LoadInt_e@3
  00330	6a 1c		 push	 28			; 0000001cH
  00332	58		 pop	 eax
$LL101@LoadInt_e@3:
  00333	8b c8		 mov	 ecx, eax
  00335	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0033b	79 05		 jns	 SHORT $LN111@LoadInt_e@3
  0033d	49		 dec	 ecx
  0033e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00341	41		 inc	 ecx
$LN111@LoadInt_e@3:
  00342	b2 ed		 mov	 dl, -19			; ffffffedH
  00344	2a d1		 sub	 dl, cl
  00346	30 54 05 d8	 xor	 BYTE PTR __k$[ebp+eax], dl
  0034a	40		 inc	 eax
  0034b	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  0034e	7c e3		 jl	 SHORT $LL101@LoadInt_e@3

; 120  : 		return LoadInt(_k, i);

  00350	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00353	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  00356	50		 push	 eax
  00357	8b ce		 mov	 ecx, esi
  00359	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  0035f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00362	5e		 pop	 esi
  00363	33 cd		 xor	 ecx, ebp
  00365	5b		 pop	 ebx
  00366	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0036b	c9		 leave
  0036c	c2 08 00	 ret	 8
??$LoadInt_e@$0BP@@ioINILoader@@QAEHAAY0BP@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<31>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BP@@ioINILoader@@QAE_NAAY0BP@$$CBD_N@Z ; ioINILoader::LoadBool_e<31>
EXTRN	__imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0BP@@ioINILoader@@QAE_NAAY0BP@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -40						; size = 31
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BP@@ioINILoader@@QAE_NAAY0BP@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<31>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 f5 02 00
	00		 je	 $LN96@LoadBool_e
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 d8	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 de 02 00
	00		 je	 $LN95@LoadBool_e
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 d9	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 c6 02 00
	00		 je	 $LN94@LoadBool_e
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 da	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 af 02 00
	00		 je	 $LN93@LoadBool_e
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 db	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 97 02 00
	00		 je	 $LN92@LoadBool_e
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 dc	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 81 02 00
	00		 je	 $LN91@LoadBool_e
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 dd	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 6b 02 00
	00		 je	 $LN90@LoadBool_e
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 de	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 55 02 00
	00		 je	 $LN89@LoadBool_e
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 df	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 3f 02 00
	00		 je	 $LN88@LoadBool_e
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e0	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 29 02 00
	00		 je	 $LN87@LoadBool_e
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 13 02 00
	00		 je	 $LN86@LoadBool_e
  000ca	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cd	88 55 e2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 fd 01 00
	00		 je	 $LN85@LoadBool_e
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 e3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 e7 01 00
	00		 je	 $LN84@LoadBool_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 d1 01 00
	00		 je	 $LN83@LoadBool_e
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 e5	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 bb 01 00
	00		 je	 $LN82@LoadBool_e
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 e6	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 a5 01 00
	00		 je	 $LN81@LoadBool_e
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 e7	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 8f 01 00
	00		 je	 $LN80@LoadBool_e
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 e8	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 79 01 00
	00		 je	 $LN79@LoadBool_e
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 e9	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 63 01 00
	00		 je	 $LN78@LoadBool_e
  0014e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00151	88 55 ea	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 4d 01 00
	00		 je	 $LN77@LoadBool_e
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 eb	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 37 01 00
	00		 je	 $LN76@LoadBool_e
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 ec	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 21 01 00
	00		 je	 $LN75@LoadBool_e
  00180	32 d1		 xor	 dl, cl
  00182	88 55 ed	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	0f 84 0b 01 00
	00		 je	 $LN74@LoadBool_e
  00190	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00193	88 55 ee	 mov	 BYTE PTR __k$[ebp+22], dl
  00196	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00199	84 d2		 test	 dl, dl
  0019b	0f 84 f5 00 00
	00		 je	 $LN73@LoadBool_e
  001a1	32 d3		 xor	 dl, bl
  001a3	88 55 ef	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	0f 84 dc 00 00
	00		 je	 $LN72@LoadBool_e
  001b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b4	88 55 f0	 mov	 BYTE PTR __k$[ebp+24], dl
  001b7	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ba	84 d2		 test	 dl, dl
  001bc	0f 84 c3 00 00
	00		 je	 $LN71@LoadBool_e
  001c2	32 d1		 xor	 dl, cl
  001c4	88 55 f1	 mov	 BYTE PTR __k$[ebp+25], dl
  001c7	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001ca	84 d2		 test	 dl, dl
  001cc	0f 84 aa 00 00
	00		 je	 $LN70@LoadBool_e
  001d2	80 f2 eb	 xor	 dl, -21			; ffffffebH
  001d5	88 55 f2	 mov	 BYTE PTR __k$[ebp+26], dl
  001d8	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001db	84 d2		 test	 dl, dl
  001dd	0f 84 91 00 00
	00		 je	 $LN69@LoadBool_e
  001e3	32 d3		 xor	 dl, bl
  001e5	88 55 f3	 mov	 BYTE PTR __k$[ebp+27], dl
  001e8	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001eb	84 d2		 test	 dl, dl
  001ed	74 7c		 je	 SHORT $LN68@LoadBool_e
  001ef	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001f2	88 55 f4	 mov	 BYTE PTR __k$[ebp+28], dl
  001f5	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001f8	84 d2		 test	 dl, dl
  001fa	74 67		 je	 SHORT $LN67@LoadBool_e
  001fc	32 d1		 xor	 dl, cl
  001fe	80 78 1e 00	 cmp	 BYTE PTR [eax+30], 0
  00202	88 55 f5	 mov	 BYTE PTR __k$[ebp+29], dl
  00205	0f 84 0f 01 00
	00		 je	 $LN1@LoadBool_e
  0020b	8a 50 1f	 mov	 dl, BYTE PTR [eax+31]
  0020e	84 d2		 test	 dl, dl
  00210	74 49		 je	 SHORT $LN65@LoadBool_e
  00212	32 d3		 xor	 dl, bl
  00214	88 55 f7	 mov	 BYTE PTR __k$[ebp+31], dl
  00217	8a 50 20	 mov	 dl, BYTE PTR [eax+32]
  0021a	84 d2		 test	 dl, dl
  0021c	74 34		 je	 SHORT $LN64@LoadBool_e
  0021e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00221	88 55 f8	 mov	 BYTE PTR __k$[ebp+32], dl
  00224	8a 50 21	 mov	 dl, BYTE PTR [eax+33]
  00227	84 d2		 test	 dl, dl
  00229	74 1f		 je	 SHORT $LN63@LoadBool_e
  0022b	8a 40 22	 mov	 al, BYTE PTR [eax+34]
  0022e	32 d1		 xor	 dl, cl
  00230	88 55 f9	 mov	 BYTE PTR __k$[ebp+33], dl
  00233	84 c0		 test	 al, al
  00235	74 0a		 je	 SHORT $LN62@LoadBool_e
  00237	34 eb		 xor	 al, -21			; ffffffebH
  00239	88 45 fa	 mov	 BYTE PTR __k$[ebp+34], al
  0023c	e9 d9 00 00 00	 jmp	 $LN1@LoadBool_e
$LN62@LoadBool_e:
  00241	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+34], -21 ; ffffffebH
  00245	e9 d0 00 00 00	 jmp	 $LN1@LoadBool_e
$LN63@LoadBool_e:
  0024a	88 4d f9	 mov	 BYTE PTR __k$[ebp+33], cl
  0024d	e9 c8 00 00 00	 jmp	 $LN1@LoadBool_e
$LN64@LoadBool_e:
  00252	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+32], -19 ; ffffffedH
  00256	e9 bf 00 00 00	 jmp	 $LN1@LoadBool_e
$LN65@LoadBool_e:
  0025b	88 5d f7	 mov	 BYTE PTR __k$[ebp+31], bl
  0025e	e9 b7 00 00 00	 jmp	 $LN1@LoadBool_e
$LN67@LoadBool_e:
  00263	88 4d f5	 mov	 BYTE PTR __k$[ebp+29], cl
  00266	e9 af 00 00 00	 jmp	 $LN1@LoadBool_e
$LN68@LoadBool_e:
  0026b	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  0026f	e9 a6 00 00 00	 jmp	 $LN1@LoadBool_e
$LN69@LoadBool_e:
  00274	88 5d f3	 mov	 BYTE PTR __k$[ebp+27], bl
  00277	e9 9e 00 00 00	 jmp	 $LN1@LoadBool_e
$LN70@LoadBool_e:
  0027c	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+26], -21 ; ffffffebH
  00280	e9 95 00 00 00	 jmp	 $LN1@LoadBool_e
$LN71@LoadBool_e:
  00285	88 4d f1	 mov	 BYTE PTR __k$[ebp+25], cl
  00288	e9 8d 00 00 00	 jmp	 $LN1@LoadBool_e
$LN72@LoadBool_e:
  0028d	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  00291	e9 84 00 00 00	 jmp	 $LN1@LoadBool_e
$LN73@LoadBool_e:
  00296	88 5d ef	 mov	 BYTE PTR __k$[ebp+23], bl
  00299	eb 7f		 jmp	 SHORT $LN1@LoadBool_e
$LN74@LoadBool_e:
  0029b	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0029f	eb 79		 jmp	 SHORT $LN1@LoadBool_e
$LN75@LoadBool_e:
  002a1	88 4d ed	 mov	 BYTE PTR __k$[ebp+21], cl
  002a4	eb 74		 jmp	 SHORT $LN1@LoadBool_e
$LN76@LoadBool_e:
  002a6	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  002aa	eb 6e		 jmp	 SHORT $LN1@LoadBool_e
$LN77@LoadBool_e:
  002ac	88 5d eb	 mov	 BYTE PTR __k$[ebp+19], bl
  002af	eb 69		 jmp	 SHORT $LN1@LoadBool_e
$LN78@LoadBool_e:
  002b1	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  002b5	eb 63		 jmp	 SHORT $LN1@LoadBool_e
$LN79@LoadBool_e:
  002b7	88 4d e9	 mov	 BYTE PTR __k$[ebp+17], cl
  002ba	eb 5e		 jmp	 SHORT $LN1@LoadBool_e
$LN80@LoadBool_e:
  002bc	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  002c0	eb 58		 jmp	 SHORT $LN1@LoadBool_e
$LN81@LoadBool_e:
  002c2	88 5d e7	 mov	 BYTE PTR __k$[ebp+15], bl
  002c5	eb 53		 jmp	 SHORT $LN1@LoadBool_e
$LN82@LoadBool_e:
  002c7	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  002cb	eb 4d		 jmp	 SHORT $LN1@LoadBool_e
$LN83@LoadBool_e:
  002cd	88 4d e5	 mov	 BYTE PTR __k$[ebp+13], cl
  002d0	eb 48		 jmp	 SHORT $LN1@LoadBool_e
$LN84@LoadBool_e:
  002d2	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  002d6	eb 42		 jmp	 SHORT $LN1@LoadBool_e
$LN85@LoadBool_e:
  002d8	88 5d e3	 mov	 BYTE PTR __k$[ebp+11], bl
  002db	eb 3d		 jmp	 SHORT $LN1@LoadBool_e
$LN86@LoadBool_e:
  002dd	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  002e1	eb 37		 jmp	 SHORT $LN1@LoadBool_e
$LN87@LoadBool_e:
  002e3	88 4d e1	 mov	 BYTE PTR __k$[ebp+9], cl
  002e6	eb 32		 jmp	 SHORT $LN1@LoadBool_e
$LN88@LoadBool_e:
  002e8	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  002ec	eb 2c		 jmp	 SHORT $LN1@LoadBool_e
$LN89@LoadBool_e:
  002ee	88 5d df	 mov	 BYTE PTR __k$[ebp+7], bl
  002f1	eb 27		 jmp	 SHORT $LN1@LoadBool_e
$LN90@LoadBool_e:
  002f3	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  002f7	eb 21		 jmp	 SHORT $LN1@LoadBool_e
$LN91@LoadBool_e:
  002f9	88 4d dd	 mov	 BYTE PTR __k$[ebp+5], cl
  002fc	eb 1c		 jmp	 SHORT $LN1@LoadBool_e
$LN92@LoadBool_e:
  002fe	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00302	eb 16		 jmp	 SHORT $LN1@LoadBool_e
$LN93@LoadBool_e:
  00304	c6 45 db ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00308	eb 10		 jmp	 SHORT $LN1@LoadBool_e
$LN94@LoadBool_e:
  0030a	c6 45 da eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0030e	eb 0a		 jmp	 SHORT $LN1@LoadBool_e
$LN95@LoadBool_e:
  00310	c6 45 d9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00314	eb 04		 jmp	 SHORT $LN1@LoadBool_e
$LN96@LoadBool_e:
  00316	c6 45 d8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e:
  0031a	6a 07		 push	 7
  0031c	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  0031f	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+30], 0
  00323	5a		 pop	 edx
$LL104@LoadBool_e:
  00324	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0032a	83 c0 04	 add	 eax, 4
  0032d	4a		 dec	 edx
  0032e	75 f4		 jne	 SHORT $LL104@LoadBool_e
  00330	6a 1c		 push	 28			; 0000001cH
  00332	58		 pop	 eax
$LL101@LoadBool_e:
  00333	8b c8		 mov	 ecx, eax
  00335	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0033b	79 05		 jns	 SHORT $LN111@LoadBool_e
  0033d	49		 dec	 ecx
  0033e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00341	41		 inc	 ecx
$LN111@LoadBool_e:
  00342	b2 ed		 mov	 dl, -19			; ffffffedH
  00344	2a d1		 sub	 dl, cl
  00346	30 54 05 d8	 xor	 BYTE PTR __k$[ebp+eax], dl
  0034a	40		 inc	 eax
  0034b	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  0034e	7c e3		 jl	 SHORT $LL101@LoadBool_e

; 103  : 		return LoadBool(_k, b);

  00350	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  00353	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  00356	50		 push	 eax
  00357	8b ce		 mov	 ecx, esi
  00359	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  0035f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00362	5e		 pop	 esi
  00363	33 cd		 xor	 ecx, ebp
  00365	5b		 pop	 ebx
  00366	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0036b	c9		 leave
  0036c	c2 08 00	 ret	 8
??$LoadBool_e@$0BP@@ioINILoader@@QAE_NAAY0BP@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<31>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BF@@ioINILoader@@QAEMAAY0BF@$$CBDM@Z ; ioINILoader::LoadFloat_e<21>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BF@@ioINILoader@@QAEMAAY0BF@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -32						; size = 21
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BF@@ioINILoader@@QAEMAAY0BF@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<21>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 f7 01 00
	00		 je	 $LN96@LoadFloat_
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 e0 01 00
	00		 je	 $LN95@LoadFloat_
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 c8 01 00
	00		 je	 $LN94@LoadFloat_
  00044	b3 eb		 mov	 bl, -21			; ffffffebH
  00046	32 d3		 xor	 dl, bl
  00048	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 b0 01 00
	00		 je	 $LN93@LoadFloat_
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 99 01 00
	00		 je	 $LN92@LoadFloat_
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 83 01 00
	00		 je	 $LN91@LoadFloat_
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 6e 01 00
	00		 je	 $LN90@LoadFloat_
  00088	32 d3		 xor	 dl, bl
  0008a	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 58 01 00
	00		 je	 $LN89@LoadFloat_
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 41 01 00
	00		 je	 $LN88@LoadFloat_
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 2b 01 00
	00		 je	 $LN87@LoadFloat_
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 16 01 00
	00		 je	 $LN86@LoadFloat_
  000ca	32 d3		 xor	 dl, bl
  000cc	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 00 01 00
	00		 je	 $LN85@LoadFloat_
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 e9 00 00
	00		 je	 $LN84@LoadFloat_
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 d3 00 00
	00		 je	 $LN83@LoadFloat_
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 be 00 00
	00		 je	 $LN82@LoadFloat_
  0010c	32 d3		 xor	 dl, bl
  0010e	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 a8 00 00
	00		 je	 $LN81@LoadFloat_
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 91 00 00
	00		 je	 $LN80@LoadFloat_
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	74 7f		 je	 SHORT $LN79@LoadFloat_
  0013a	32 d1		 xor	 dl, cl
  0013c	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  0013f	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00142	84 d2		 test	 dl, dl
  00144	74 6e		 je	 SHORT $LN78@LoadFloat_
  00146	32 d3		 xor	 dl, bl
  00148	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  0014b	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0014e	84 d2		 test	 dl, dl
  00150	74 5c		 je	 SHORT $LN77@LoadFloat_
  00152	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00155	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00159	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  0015c	0f 84 ba 00 00
	00		 je	 $LN1@LoadFloat_
  00162	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00165	84 d2		 test	 dl, dl
  00167	74 40		 je	 SHORT $LN75@LoadFloat_
  00169	32 d1		 xor	 dl, cl
  0016b	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  0016e	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00171	84 d2		 test	 dl, dl
  00173	74 2f		 je	 SHORT $LN74@LoadFloat_
  00175	32 d3		 xor	 dl, bl
  00177	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  0017a	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0017d	84 d2		 test	 dl, dl
  0017f	74 1d		 je	 SHORT $LN73@LoadFloat_
  00181	8a 40 18	 mov	 al, BYTE PTR [eax+24]
  00184	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00187	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  0018a	84 c0		 test	 al, al
  0018c	74 0a		 je	 SHORT $LN72@LoadFloat_
  0018e	34 ed		 xor	 al, -19			; ffffffedH
  00190	88 45 f8	 mov	 BYTE PTR __k$[ebp+24], al
  00193	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_
$LN72@LoadFloat_:
  00198	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  0019c	eb 7e		 jmp	 SHORT $LN1@LoadFloat_
$LN73@LoadFloat_:
  0019e	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  001a2	eb 78		 jmp	 SHORT $LN1@LoadFloat_
$LN74@LoadFloat_:
  001a4	88 5d f6	 mov	 BYTE PTR __k$[ebp+22], bl
  001a7	eb 73		 jmp	 SHORT $LN1@LoadFloat_
$LN75@LoadFloat_:
  001a9	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001ac	eb 6e		 jmp	 SHORT $LN1@LoadFloat_
$LN77@LoadFloat_:
  001ae	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  001b2	eb 68		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  001b4	88 5d f2	 mov	 BYTE PTR __k$[ebp+18], bl
  001b7	eb 63		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  001b9	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001bc	eb 5e		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  001be	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001c2	eb 58		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  001c4	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001c8	eb 52		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  001ca	88 5d ee	 mov	 BYTE PTR __k$[ebp+14], bl
  001cd	eb 4d		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  001cf	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  001d2	eb 48		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  001d4	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001d8	eb 42		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  001da	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001de	eb 3c		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  001e0	88 5d ea	 mov	 BYTE PTR __k$[ebp+10], bl
  001e3	eb 37		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  001e5	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  001e8	eb 32		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  001ea	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001ee	eb 2c		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  001f0	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001f4	eb 26		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  001f6	88 5d e6	 mov	 BYTE PTR __k$[ebp+6], bl
  001f9	eb 21		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  001fb	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  001fe	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  00200	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00204	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  00206	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0020a	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  0020c	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00210	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  00212	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00216	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  00218	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  0021c	6a 05		 push	 5
  0021e	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00221	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+20], 0
  00225	5a		 pop	 edx
$LL104@LoadFloat_:
  00226	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0022c	83 c0 04	 add	 eax, 4
  0022f	4a		 dec	 edx
  00230	75 f4		 jne	 SHORT $LL104@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  00232	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00237	51		 push	 ecx
  00238	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0023b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00240	50		 push	 eax
  00241	8b ce		 mov	 ecx, esi
  00243	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00249	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024c	5e		 pop	 esi
  0024d	33 cd		 xor	 ecx, ebp
  0024f	5b		 pop	 ebx
  00250	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00255	c9		 leave
  00256	c2 08 00	 ret	 8
??$LoadFloat_e@$0BF@@ioINILoader@@QAEMAAY0BF@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<21>
_TEXT	ENDS
PUBLIC	??0WeaponInfo@@QAE@XZ				; WeaponInfo::WeaponInfo
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.h
;	COMDAT ??0WeaponInfo@@QAE@XZ
_TEXT	SEGMENT
??0WeaponInfo@@QAE@XZ PROC				; WeaponInfo::WeaponInfo, COMDAT
; _this$ = ecx

; 64   : 	WeaponInfo()

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 65   : 	{
; 66   : 		Init();

  0000c	33 c0		 xor	 eax, eax
  0000e	89 06		 mov	 DWORD PTR [esi], eax
  00010	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00013	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00016	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00019	88 46 20	 mov	 BYTE PTR [esi+32], al
  0001c	89 46 24	 mov	 DWORD PTR [esi+36], eax

; 67   : 	}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c3		 ret	 0
??0WeaponInfo@@QAE@XZ ENDP				; WeaponInfo::WeaponInfo
_TEXT	ENDS
PUBLIC	??0tagBlowWoundAniInfo@@QAE@XZ			; tagBlowWoundAniInfo::tagBlowWoundAniInfo
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\weaponattribute.h
xdata$x	SEGMENT
__ehfuncinfo$??0tagBlowWoundAniInfo@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0tagBlowWoundAniInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0tagBlowWoundAniInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$5
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0tagBlowWoundAniInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0tagBlowWoundAniInfo@@QAE@XZ PROC			; tagBlowWoundAniInfo::tagBlowWoundAniInfo, COMDAT
; _this$ = ecx

; 304  : 	tagBlowWoundAniInfo()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0tagBlowWoundAniInfo@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	ff d6		 call	 esi
  00019	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001d	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00020	ff d6		 call	 esi
  00022	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  00025	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00029	ff d6		 call	 esi
  0002b	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  0002e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00032	ff d6		 call	 esi
  00034	8d 4f 40	 lea	 ecx, DWORD PTR [edi+64]
  00037	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0003b	ff d6		 call	 esi
  0003d	8d 4f 50	 lea	 ecx, DWORD PTR [edi+80]
  00040	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00044	ff d6		 call	 esi

; 305  : 	{
; 306  : 		Init();

  00046	8b cf		 mov	 ecx, edi
  00048	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0004c	e8 00 00 00 00	 call	 ?Init@tagBlowWoundAniInfo@@QAEXXZ ; tagBlowWoundAniInfo::Init

; 307  : 	}

  00051	8b c7		 mov	 eax, edi
  00053	e8 00 00 00 00	 call	 __EH_epilog3
  00058	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 10	 add	 ecx, 16			; 00000010H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 20	 add	 ecx, 32			; 00000020H
  0001b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 30	 add	 ecx, 48			; 00000030H
  00027	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$4:
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 c1 40	 add	 ecx, 64			; 00000040H
  00033	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0tagBlowWoundAniInfo@@QAE@XZ$5:
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	83 c1 50	 add	 ecx, 80			; 00000050H
  0003f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0tagBlowWoundAniInfo@@QAE@XZ:
  00045	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00049	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004c	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0004f	33 c8		 xor	 ecx, eax
  00051	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00056	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0tagBlowWoundAniInfo@@QAE@XZ
  0005b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0tagBlowWoundAniInfo@@QAE@XZ ENDP			; tagBlowWoundAniInfo::tagBlowWoundAniInfo
PUBLIC	??4?$CEncrypt@K@@QAEKK@Z			; CEncrypt<unsigned long>::operator=
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??4?$CEncrypt@K@@QAEKK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@K@@QAEKK@Z PROC				; CEncrypt<unsigned long>::operator=, COMDAT
; _this$ = ecx

; 1262 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1263 : 		
; 1264 : 		type value = inValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 1265 : 		EncryptValueToPool((char*)&value);

  00009	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 1266 : #ifdef _NOTUSE
; 1267 : 		m_value = inValue;
; 1268 : 		Debug();
; 1269 : #endif
; 1270 : 		return value;

  00012	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 1271 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@K@@QAEKK@Z ENDP				; CEncrypt<unsigned long>::operator=
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@_N@@QAE_N_N@Z			; CEncrypt<bool>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@_N@@QAE_N_N@Z
_TEXT	SEGMENT
_inValue$ = 8						; size = 1
_value$ = 11						; size = 1
??4?$CEncrypt@_N@@QAE_N_N@Z PROC			; CEncrypt<bool>::operator=, COMDAT
; _this$ = ecx

; 225  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 226  : 		type value = inValue;

  00003	8a 45 08	 mov	 al, BYTE PTR _inValue$[ebp]
  00006	88 45 0b	 mov	 BYTE PTR _value$[ebp], al

; 227  : 		EncryptValueToPool((char*)&value);

  00009	8d 45 0b	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 228  : #ifdef _NOTUSE
; 229  : 		m_value = inValue;
; 230  : 		Debug();
; 231  : #endif
; 232  : 		return value;

  00012	8a 45 0b	 mov	 al, BYTE PTR _value$[ebp]

; 233  : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@_N@@QAE_N_N@Z ENDP			; CEncrypt<bool>::operator=
_TEXT	ENDS
PUBLIC	??0ioIceBuff@@QAE@XZ				; ioIceBuff::ioIceBuff
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioicebuff.cpp
xdata$x	SEGMENT
__unwindtable$??0ioIceBuff@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioIceBuff@@QAE@XZ$0
__ehfuncinfo$??0ioIceBuff@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioIceBuff@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioIceBuff@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioIceBuff@@QAE@XZ PROC				; ioIceBuff::ioIceBuff, COMDAT
; _this$ = ecx

; 11   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioIceBuff@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff
  00016	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001a	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioIceBuff@@6B@
  00026	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@XZ	; WeaponInfo::WeaponInfo

; 12   : }

  0002b	8b c6		 mov	 eax, esi
  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioIceBuff@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??0ioIceBuff@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioIceBuff@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioIceBuff@@QAE@XZ ENDP				; ioIceBuff::ioIceBuff
; Function compile flags: /Ogsp
;	COMDAT ??_GioIceBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioIceBuff@@UAEPAXI@Z PROC				; ioIceBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioIceBuff@@UAE@XZ	; ioIceBuff::~ioIceBuff
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioIceBuff@@UAEPAXI@Z ENDP				; ioIceBuff::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	_rkLoader$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
EXTRN	_memset:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioicebuff.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioIceBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_rkLoader$GSCopy$ = -304				; size = 4
_szBuf$ = -300						; size = 260
__k$525917 = -40					; size = 31
__k$525792 = -40					; size = 31
__k$525770 = -36					; size = 26
__k$525555 = -36					; size = 27
__k$526042 = -32					; size = 21
__k$525430 = -32					; size = 22
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioIceBuff@@UAEXAAVioINILoader@@@Z PROC	; ioIceBuff::LoadProperty, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 27   : 	ioBuff::LoadProperty( rkLoader );

  00019	57		 push	 edi
  0001a	8b f1		 mov	 esi, ecx

; 39   : 	m_BoundWeaponInfo.m_bWoundedLoopAni = rkLoader.LoadBool_e( "bound_attribute_wound_loop_ani", false );

  0001c	89 bd d0 fe ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], edi
  00022	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty
  00027	33 db		 xor	 ebx, ebx
  00029	68 03 01 00 00	 push	 259			; 00000103H
  0002e	8d 85 d5 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp+1]
  00034	53		 push	 ebx
  00035	50		 push	 eax
  00036	88 9d d4 fe ff
	ff		 mov	 BYTE PTR _szBuf$[ebp], bl
  0003c	e8 00 00 00 00	 call	 _memset
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	6a 05		 push	 5
  00046	c7 45 e0 8f 83
	9e 84		 mov	 DWORD PTR __k$525430[ebp], -2069986417 ; 849e838fH
  0004d	c7 45 e4 89 b3
	8a 9e		 mov	 DWORD PTR __k$525430[ebp+4], -1635077239 ; 9e8ab389H
  00054	c7 45 e8 99 9e
	82 88		 mov	 DWORD PTR __k$525430[ebp+8], -2004705639 ; 88829e99H
  0005b	c7 45 ec 98 98
	8e b5		 mov	 DWORD PTR __k$525430[ebp+12], -1248946024 ; b58e9898H
  00062	c7 45 f0 84 82
	8f 8f		 mov	 DWORD PTR __k$525430[ebp+16], -1886420348 ; 8f8f8284H
  00069	8d 45 e0	 lea	 eax, DWORD PTR __k$525430[ebp]
  0006c	66 c7 45 f4 95
	00		 mov	 WORD PTR __k$525430[ebp+20], 149 ; 00000095H
  00072	59		 pop	 ecx
$LL106@LoadProper:

; 28   : 
; 29   : 	char szBuf[MAX_PATH] = "";
; 30   : 	char szKey[MAX_PATH] = "";
; 31   : 
; 32   : 	m_BoundWeaponInfo.m_iWeaponIdx = rkLoader.LoadInt_e( "bound_attribute_index", 0 );

  00073	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00079	83 c0 04	 add	 eax, 4
  0007c	49		 dec	 ecx
  0007d	75 f4		 jne	 SHORT $LL106@LoadProper
  0007f	80 75 f4 ed	 xor	 BYTE PTR __k$525430[ebp+20], -19 ; ffffffedH
  00083	53		 push	 ebx
  00084	8d 45 e0	 lea	 eax, DWORD PTR __k$525430[ebp]
  00087	8b cf		 mov	 ecx, edi
  00089	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  0008f	50		 push	 eax
  00090	ff d7		 call	 edi
  00092	6a 06		 push	 6
  00094	89 86 6c 09 00
	00		 mov	 DWORD PTR [esi+2412], eax

; 33   : 	m_BoundWeaponInfo.m_iResistanceIdx = rkLoader.LoadInt_e( "bound_attribute_resistance", 0 );

  0009a	c7 45 dc 8f 83
	9e 84		 mov	 DWORD PTR __k$525555[ebp], -2069986417 ; 849e838fH
  000a1	c7 45 e0 89 b3
	8a 9e		 mov	 DWORD PTR __k$525555[ebp+4], -1635077239 ; 9e8ab389H
  000a8	c7 45 e4 99 9e
	82 88		 mov	 DWORD PTR __k$525555[ebp+8], -2004705639 ; 88829e99H
  000af	c7 45 e8 98 98
	8e b5		 mov	 DWORD PTR __k$525555[ebp+12], -1248946024 ; b58e9898H
  000b6	c7 45 ec 9f 89
	98 83		 mov	 DWORD PTR __k$525555[ebp+16], -2087155297 ; 8398899fH
  000bd	c7 45 f0 9e 98
	8a 84		 mov	 DWORD PTR __k$525555[ebp+20], -2071291746 ; 848a989eH
  000c4	66 c7 45 f4 8e
	89		 mov	 WORD PTR __k$525555[ebp+24], 35214 ; 0000898eH
  000ca	8d 45 dc	 lea	 eax, DWORD PTR __k$525555[ebp]
  000cd	88 5d f6	 mov	 BYTE PTR __k$525555[ebp+26], bl
  000d0	59		 pop	 ecx
$LL212@LoadProper:
  000d1	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000d7	83 c0 04	 add	 eax, 4
  000da	49		 dec	 ecx
  000db	75 f4		 jne	 SHORT $LL212@LoadProper
  000dd	6a 18		 push	 24			; 00000018H
  000df	58		 pop	 eax
$LL209@LoadProper:
  000e0	8b c8		 mov	 ecx, eax
  000e2	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000e8	79 05		 jns	 SHORT $LN663@LoadProper
  000ea	49		 dec	 ecx
  000eb	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000ee	41		 inc	 ecx
$LN663@LoadProper:
  000ef	b2 ed		 mov	 dl, -19			; ffffffedH
  000f1	2a d1		 sub	 dl, cl
  000f3	30 54 05 dc	 xor	 BYTE PTR __k$525555[ebp+eax], dl
  000f7	40		 inc	 eax
  000f8	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  000fb	7c e3		 jl	 SHORT $LL209@LoadProper
  000fd	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00103	53		 push	 ebx
  00104	8d 45 dc	 lea	 eax, DWORD PTR __k$525555[ebp]
  00107	50		 push	 eax
  00108	ff d7		 call	 edi
  0010a	6a 06		 push	 6
  0010c	89 86 70 09 00
	00		 mov	 DWORD PTR [esi+2416], eax

; 34   : 
; 35   : 	rkLoader.LoadString_e( "bound_attribute_wound_ani", "", szBuf, MAX_PATH );

  00112	c7 45 dc 8f 83
	9e 84		 mov	 DWORD PTR __k$525770[ebp], -2069986417 ; 849e838fH
  00119	c7 45 e0 89 b3
	8a 9e		 mov	 DWORD PTR __k$525770[ebp+4], -1635077239 ; 9e8ab389H
  00120	c7 45 e4 99 9e
	82 88		 mov	 DWORD PTR __k$525770[ebp+8], -2004705639 ; 88829e99H
  00127	c7 45 e8 98 98
	8e b5		 mov	 DWORD PTR __k$525770[ebp+12], -1248946024 ; b58e9898H
  0012e	c7 45 ec 9a 83
	9e 84		 mov	 DWORD PTR __k$525770[ebp+16], -2069986406 ; 849e839aH
  00135	c7 45 f0 89 b3
	8a 84		 mov	 DWORD PTR __k$525770[ebp+20], -2071284855 ; 848ab389H
  0013c	8d 45 dc	 lea	 eax, DWORD PTR __k$525770[ebp]
  0013f	66 c7 45 f4 84
	00		 mov	 WORD PTR __k$525770[ebp+24], 132 ; 00000084H
  00145	59		 pop	 ecx
$LL318@LoadProper:
  00146	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0014c	83 c0 04	 add	 eax, 4
  0014f	49		 dec	 ecx
  00150	75 f4		 jne	 SHORT $LL318@LoadProper
  00152	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00158	80 75 f4 ed	 xor	 BYTE PTR __k$525770[ebp+24], -19 ; ffffffedH
  0015c	68 04 01 00 00	 push	 260			; 00000104H
  00161	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00167	50		 push	 eax
  00168	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0016d	8d 45 dc	 lea	 eax, DWORD PTR __k$525770[ebp]
  00170	50		 push	 eax
  00171	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 36   : 	m_BoundWeaponInfo.m_WoundedAnimation = szBuf;

  00177	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0017d	50		 push	 eax
  0017e	8d 8e 74 09 00
	00		 lea	 ecx, DWORD PTR [esi+2420]
  00184	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  0018a	6a 07		 push	 7

; 37   : 
; 38   : 	m_BoundWeaponInfo.m_dwWoundedDuration = rkLoader.LoadInt_e( "bound_attribute_wound_duration", 0 );

  0018c	c7 45 d8 8f 83
	9e 84		 mov	 DWORD PTR __k$525792[ebp], -2069986417 ; 849e838fH
  00193	c7 45 dc 89 b3
	8a 9e		 mov	 DWORD PTR __k$525792[ebp+4], -1635077239 ; 9e8ab389H
  0019a	c7 45 e0 99 9e
	82 88		 mov	 DWORD PTR __k$525792[ebp+8], -2004705639 ; 88829e99H
  001a1	c7 45 e4 98 98
	8e b5		 mov	 DWORD PTR __k$525792[ebp+12], -1248946024 ; b58e9898H
  001a8	c7 45 e8 9a 83
	9e 84		 mov	 DWORD PTR __k$525792[ebp+16], -2069986406 ; 849e839aH
  001af	c7 45 ec 89 b3
	8f 9f		 mov	 DWORD PTR __k$525792[ebp+20], -1617972343 ; 9f8fb389H
  001b6	c7 45 f0 9f 8d
	9f 83		 mov	 DWORD PTR __k$525792[ebp+24], -2086695521 ; 839f8d9fH
  001bd	66 c7 45 f4 82
	82		 mov	 WORD PTR __k$525792[ebp+28], 33410 ; 00008282H
  001c3	8d 45 d8	 lea	 eax, DWORD PTR __k$525792[ebp]
  001c6	88 5d f6	 mov	 BYTE PTR __k$525792[ebp+30], bl
  001c9	59		 pop	 ecx
$LL424@LoadProper:
  001ca	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001d0	83 c0 04	 add	 eax, 4
  001d3	49		 dec	 ecx
  001d4	75 f4		 jne	 SHORT $LL424@LoadProper
  001d6	6a 1c		 push	 28			; 0000001cH
  001d8	58		 pop	 eax
$LL421@LoadProper:
  001d9	8b c8		 mov	 ecx, eax
  001db	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001e1	79 05		 jns	 SHORT $LN664@LoadProper
  001e3	49		 dec	 ecx
  001e4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001e7	41		 inc	 ecx
$LN664@LoadProper:
  001e8	b2 ed		 mov	 dl, -19			; ffffffedH
  001ea	2a d1		 sub	 dl, cl
  001ec	30 54 05 d8	 xor	 BYTE PTR __k$525792[ebp+eax], dl
  001f0	40		 inc	 eax
  001f1	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  001f4	7c e3		 jl	 SHORT $LL421@LoadProper
  001f6	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  001fc	53		 push	 ebx
  001fd	8d 45 d8	 lea	 eax, DWORD PTR __k$525792[ebp]
  00200	50		 push	 eax
  00201	ff d7		 call	 edi
  00203	6a 07		 push	 7
  00205	89 86 84 09 00
	00		 mov	 DWORD PTR [esi+2436], eax

; 39   : 	m_BoundWeaponInfo.m_bWoundedLoopAni = rkLoader.LoadBool_e( "bound_attribute_wound_loop_ani", false );

  0020b	c7 45 d8 8f 83
	9e 84		 mov	 DWORD PTR __k$525917[ebp], -2069986417 ; 849e838fH
  00212	c7 45 dc 89 b3
	8a 9e		 mov	 DWORD PTR __k$525917[ebp+4], -1635077239 ; 9e8ab389H
  00219	c7 45 e0 99 9e
	82 88		 mov	 DWORD PTR __k$525917[ebp+8], -2004705639 ; 88829e99H
  00220	c7 45 e4 98 98
	8e b5		 mov	 DWORD PTR __k$525917[ebp+12], -1248946024 ; b58e9898H
  00227	c7 45 e8 9a 83
	9e 84		 mov	 DWORD PTR __k$525917[ebp+16], -2069986406 ; 849e839aH
  0022e	c7 45 ec 89 b3
	87 85		 mov	 DWORD PTR __k$525917[ebp+20], -2054704247 ; 8587b389H
  00235	c7 45 f0 82 9c
	b4 8b		 mov	 DWORD PTR __k$525917[ebp+24], -1951097726 ; 8bb49c82H
  0023c	66 c7 45 f4 83
	85		 mov	 WORD PTR __k$525917[ebp+28], 34179 ; 00008583H
  00242	8d 45 d8	 lea	 eax, DWORD PTR __k$525917[ebp]
  00245	88 5d f6	 mov	 BYTE PTR __k$525917[ebp+30], bl
  00248	59		 pop	 ecx
$LL530@LoadProper:
  00249	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0024f	83 c0 04	 add	 eax, 4
  00252	49		 dec	 ecx
  00253	75 f4		 jne	 SHORT $LL530@LoadProper
  00255	6a 1c		 push	 28			; 0000001cH
  00257	5f		 pop	 edi
$LL527@LoadProper:
  00258	8b c7		 mov	 eax, edi
  0025a	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0025f	79 05		 jns	 SHORT $LN665@LoadProper
  00261	48		 dec	 eax
  00262	83 c8 fc	 or	 eax, -4			; fffffffcH
  00265	40		 inc	 eax
$LN665@LoadProper:
  00266	b1 ed		 mov	 cl, -19			; ffffffedH
  00268	2a c8		 sub	 cl, al
  0026a	30 4c 3d d8	 xor	 BYTE PTR __k$525917[ebp+edi], cl
  0026e	47		 inc	 edi
  0026f	83 ff 1e	 cmp	 edi, 30			; 0000001eH
  00272	7c e4		 jl	 SHORT $LL527@LoadProper
  00274	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0027a	53		 push	 ebx
  0027b	8d 45 d8	 lea	 eax, DWORD PTR __k$525917[ebp]
  0027e	50		 push	 eax
  0027f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  00285	6a 05		 push	 5
  00287	88 86 8c 09 00
	00		 mov	 BYTE PTR [esi+2444], al

; 40   : 
; 41   : 	m_fBoundGravityAmt = rkLoader.LoadFloat_e( "bound_enable_gravity", 0.0f );

  0028d	c7 45 e0 8f 83
	9e 84		 mov	 DWORD PTR __k$526042[ebp], -2069986417 ; 849e838fH
  00294	c7 45 e4 89 b3
	8e 84		 mov	 DWORD PTR __k$526042[ebp+4], -2071022711 ; 848eb389H
  0029b	c7 45 e8 8c 8e
	87 8f		 mov	 DWORD PTR __k$526042[ebp+8], -1886941556 ; 8f878e8cH
  002a2	c7 45 ec b2 8b
	99 8b		 mov	 DWORD PTR __k$526042[ebp+12], -1952871502 ; 8b998bb2H
  002a9	c7 45 f0 9b 85
	9f 93		 mov	 DWORD PTR __k$526042[ebp+16], -1818262117 ; 939f859bH
  002b0	8d 45 e0	 lea	 eax, DWORD PTR __k$526042[ebp]
  002b3	88 5d f4	 mov	 BYTE PTR __k$526042[ebp+20], bl
  002b6	59		 pop	 ecx
$LL636@LoadProper:
  002b7	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002bd	83 c0 04	 add	 eax, 4
  002c0	49		 dec	 ecx
  002c1	75 f4		 jne	 SHORT $LL636@LoadProper
  002c3	0f 57 c0	 xorps	 xmm0, xmm0
  002c6	51		 push	 ecx
  002c7	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  002cd	8d 45 e0	 lea	 eax, DWORD PTR __k$526042[ebp]
  002d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d5	50		 push	 eax
  002d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  002dc	d9 9e 94 09 00
	00		 fstp	 DWORD PTR [esi+2452]

; 42   : }

  002e2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002e5	5f		 pop	 edi
  002e6	5e		 pop	 esi
  002e7	33 cd		 xor	 ecx, ebp
  002e9	5b		 pop	 ebx
  002ea	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ef	c9		 leave
  002f0	c2 04 00	 ret	 4
?LoadProperty@ioIceBuff@@UAEXAAVioINILoader@@@Z ENDP	; ioIceBuff::LoadProperty
_TEXT	ENDS
EXTRN	?GetBuffDuration@ioBuff@@IAEKXZ:PROC		; ioBuff::GetBuffDuration
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?StartBuff@ioIceBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
$T526186 = -4						; size = 4
_value$526205 = 8					; size = 4
_value$526200 = 8					; size = 4
_value$526196 = 8					; size = 4
_value$526192 = 8					; size = 4
_pOwner$ = 8						; size = 4
_value$526209 = 11					; size = 1
?StartBuff@ioIceBuff@@UAEXPAVioBaseChar@@@Z PROC	; ioIceBuff::StartBuff, COMDAT
; _this$ = ecx

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 51   : #ifndef SHIPPING 
; 52   : 	if( Setting::ShowExtraInfo() )
; 53   : 	{
; 54   : 		LOG.PrintTimeAndLog( 0, "BuffCheck - %s, StartTime: %d", m_Name.c_str(), FRAMEGETTIME() );
; 55   : 	}
; 56   : #endif
; 57   : 
; 58   : 	if( !pOwner )

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _pOwner$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	85 db		 test	 ebx, ebx
  0000d	0f 84 be 00 00
	00		 je	 $LN1@StartBuff

; 59   : 		return;
; 60   : 
; 61   : 	DWORD dwCurTime = FRAMEGETTIME();

  00013	57		 push	 edi
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0001a	8b c8		 mov	 ecx, eax
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 62   : 	m_pOwner = pOwner;

  00022	89 9e 74 02 00
	00		 mov	 DWORD PTR [esi+628], ebx

; 63   : 	m_OwnerName = pOwner->GetCharName();

  00028	81 c3 d4 02 00
	00		 add	 ebx, 724		; 000002d4H
  0002e	53		 push	 ebx
  0002f	8d 8e 78 02 00
	00		 lea	 ecx, DWORD PTR [esi+632]
  00035	8b f8		 mov	 edi, eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 64   : 
; 65   : 	m_dwBuffStartTime = dwCurTime;

  0003d	8d 45 08	 lea	 eax, DWORD PTR _value$526192[ebp]
  00040	50		 push	 eax
  00041	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  00047	89 7d 08	 mov	 DWORD PTR _value$526192[ebp], edi
  0004a	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 66   : 	if( m_iOperationType == OT_DELAY )

  0004f	83 be d0 03 00
	00 03		 cmp	 DWORD PTR [esi+976], 3
  00056	75 12		 jne	 SHORT $LN2@StartBuff

; 67   : 		m_dwBuffStartTime += m_dwDelayDuration;

  00058	8d 86 d8 02 00
	00		 lea	 eax, DWORD PTR [esi+728]
  0005e	50		 push	 eax
  0005f	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  00065	e8 00 00 00 00	 call	 ??Y?$CEncrypt@K@@QAEAAKABK@Z ; CEncrypt<unsigned long>::operator+=
$LN2@StartBuff:

; 68   : 
; 69   : 	m_dwBuffEndTime = m_dwBuffStartTime + GetBuffDuration();

  0006a	8b ce		 mov	 ecx, esi
  0006c	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  00071	89 45 fc	 mov	 DWORD PTR $T526186[ebp], eax
  00074	8d 45 08	 lea	 eax, DWORD PTR _value$526196[ebp]
  00077	50		 push	 eax
  00078	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  0007e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00083	8b 45 08	 mov	 eax, DWORD PTR _value$526196[ebp]
  00086	03 45 fc	 add	 eax, DWORD PTR $T526186[ebp]
  00089	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  0008f	89 45 08	 mov	 DWORD PTR _value$526200[ebp], eax
  00092	8d 45 08	 lea	 eax, DWORD PTR _value$526200[ebp]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 70   : 	m_dwCheckTime = dwCurTime;

  0009b	8d 45 08	 lea	 eax, DWORD PTR _value$526205[ebp]
  0009e	50		 push	 eax
  0009f	8d 8e 3c 03 00
	00		 lea	 ecx, DWORD PTR [esi+828]
  000a5	89 7d 08	 mov	 DWORD PTR _value$526205[ebp], edi
  000a8	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 71   : 	
; 72   : 	m_bLive = true;

  000ad	8d 45 0b	 lea	 eax, DWORD PTR _value$526209[ebp]
  000b0	50		 push	 eax
  000b1	8d 8e 70 07 00
	00		 lea	 ecx, DWORD PTR [esi+1904]
  000b7	c6 45 0b 01	 mov	 BYTE PTR _value$526209[ebp], 1
  000bb	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 73   : 
; 74   : 	if( m_iOperationType != OT_DELAY )

  000c0	83 be d0 03 00
	00 03		 cmp	 DWORD PTR [esi+976], 3
  000c7	5f		 pop	 edi
  000c8	74 07		 je	 SHORT $LN1@StartBuff

; 75   : 	{
; 76   : 		SetAction();

  000ca	8b 06		 mov	 eax, DWORD PTR [esi]
  000cc	8b ce		 mov	 ecx, esi
  000ce	ff 50 34	 call	 DWORD PTR [eax+52]
$LN1@StartBuff:
  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx

; 77   : 	}
; 78   : }

  000d3	c9		 leave
  000d4	c2 04 00	 ret	 4
?StartBuff@ioIceBuff@@UAEXPAVioBaseChar@@@Z ENDP	; ioIceBuff::StartBuff
_TEXT	ENDS
EXTRN	?CalcGlobalGapTime@ioGlobalTimer@@QBEKK@Z:PROC	; ioGlobalTimer::CalcGlobalGapTime
EXTRN	?GetSingleton@ioGlobalTimer@@SAAAV1@XZ:PROC	; ioGlobalTimer::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioIceBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_value$526230 = 8					; size = 4
_value$526225 = 8					; size = 4
_value$526221 = 8					; size = 4
_value$526216 = 8					; size = 4
_dwGlobalTimeGap$ = 8					; size = 4
_pOwner$ = 8						; size = 4
_value$526235 = 11					; size = 1
$T526213 = 12						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioIceBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioIceBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 82   : 	m_pOwner = pOwner;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pOwner$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 83   : 	DWORD dwGlobalTimeGap = g_GlobalTimer.CalcGlobalGapTime( dwGlobalTime );

  00009	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 86 74 02 00
	00		 mov	 DWORD PTR [esi+628], eax
  00014	e8 00 00 00 00	 call	 ?GetSingleton@ioGlobalTimer@@SAAAV1@XZ ; ioGlobalTimer::GetSingleton
  00019	8b c8		 mov	 ecx, eax
  0001b	e8 00 00 00 00	 call	 ?CalcGlobalGapTime@ioGlobalTimer@@QBEKK@Z ; ioGlobalTimer::CalcGlobalGapTime

; 84   : 
; 85   : 	if( m_iOperationType != OT_SWITCH )

  00020	83 be d0 03 00
	00 02		 cmp	 DWORD PTR [esi+976], 2
  00027	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0002d	89 45 08	 mov	 DWORD PTR _dwGlobalTimeGap$[ebp], eax
  00030	74 60		 je	 SHORT $LN10@ApplyStart

; 86   : 	{
; 87   : 		if( dwGlobalTimeGap > dwGapTime )

  00032	8b 7d 10	 mov	 edi, DWORD PTR _dwGapTime$[ebp]
  00035	3b c7		 cmp	 eax, edi
  00037	76 07		 jbe	 SHORT $LN2@ApplyStart

; 88   : 			return false;

  00039	32 c0		 xor	 al, al
  0003b	e9 93 00 00 00	 jmp	 $LN4@ApplyStart
$LN2@ApplyStart:

; 89   : 
; 90   : 		dwGapTime -= dwGlobalTimeGap;
; 91   : 		m_dwBuffEndTime = FRAMEGETTIME() + dwGapTime;

  00040	ff d3		 call	 ebx
  00042	8b c8		 mov	 ecx, eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0004a	2b 7d 08	 sub	 edi, DWORD PTR _dwGlobalTimeGap$[ebp]
  0004d	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  00053	03 c7		 add	 eax, edi
  00055	89 45 08	 mov	 DWORD PTR _value$526216[ebp], eax
  00058	8d 45 08	 lea	 eax, DWORD PTR _value$526216[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 92   : 		m_dwBuffStartTime = m_dwBuffEndTime - GetBuffDuration();

  00061	8b ce		 mov	 ecx, esi
  00063	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  00068	89 45 0c	 mov	 DWORD PTR $T526213[ebp], eax
  0006b	8d 45 08	 lea	 eax, DWORD PTR _value$526221[ebp]
  0006e	50		 push	 eax
  0006f	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  00075	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  0007a	8b 45 08	 mov	 eax, DWORD PTR _value$526221[ebp]
  0007d	2b 45 0c	 sub	 eax, DWORD PTR $T526213[ebp]
  00080	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  00086	89 45 08	 mov	 DWORD PTR _value$526225[ebp], eax
  00089	8d 45 08	 lea	 eax, DWORD PTR _value$526225[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool
$LN10@ApplyStart:

; 93   : 	}
; 94   : 
; 95   : 	m_dwCheckTime = FRAMEGETTIME();

  00092	ff d3		 call	 ebx
  00094	8b c8		 mov	 ecx, eax
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0009c	89 45 08	 mov	 DWORD PTR _value$526230[ebp], eax
  0009f	8d 45 08	 lea	 eax, DWORD PTR _value$526230[ebp]
  000a2	50		 push	 eax
  000a3	8d 8e 3c 03 00
	00		 lea	 ecx, DWORD PTR [esi+828]
  000a9	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 96   : 	m_bLive = true;

  000ae	8d 45 0b	 lea	 eax, DWORD PTR _value$526235[ebp]
  000b1	50		 push	 eax
  000b2	8d 8e 70 07 00
	00		 lea	 ecx, DWORD PTR [esi+1904]
  000b8	c6 45 0b 01	 mov	 BYTE PTR _value$526235[ebp], 1
  000bc	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool

; 97   : 
; 98   : 	if( m_iOperationType != OT_DELAY )

  000c1	83 be d0 03 00
	00 03		 cmp	 DWORD PTR [esi+976], 3
  000c8	74 07		 je	 SHORT $LN1@ApplyStart

; 99   : 	{
; 100  : 		SetAction();

  000ca	8b 06		 mov	 eax, DWORD PTR [esi]
  000cc	8b ce		 mov	 ecx, esi
  000ce	ff 50 34	 call	 DWORD PTR [eax+52]
$LN1@ApplyStart:

; 101  : 	}
; 102  : 
; 103  : 	return true;

  000d1	b0 01		 mov	 al, 1
$LN4@ApplyStart:
  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
  000d5	5b		 pop	 ebx

; 104  : }

  000d6	5d		 pop	 ebp
  000d7	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioIceBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioIceBuff::ApplyStartBuff
_TEXT	ENDS
EXTRN	?CheckCallingAreaWeapon@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingAreaWeapon
EXTRN	?IsFloating@ioBaseChar@@QAE_NXZ:PROC		; ioBaseChar::IsFloating
EXTRN	?CheckEnableDelayState@ioBuff@@IAE_NXZ:PROC	; ioBuff::CheckEnableDelayState
EXTRN	?CheckCallingProcess@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingProcess
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
EXTRN	?CheckSwitchType@ioBuff@@IAE_NM@Z:PROC		; ioBuff::CheckSwitchType
; Function compile flags: /Ogsp
;	COMDAT ?ProcessBuff@ioIceBuff@@UAEXM@Z
_TEXT	SEGMENT
_value$526250 = 8					; size = 4
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioIceBuff@@UAEXM@Z PROC			; ioIceBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 107  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 108  : 	switch( m_iOperationType )

  00006	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  0000c	83 e8 00	 sub	 eax, 0
  0000f	0f 84 cd 00 00
	00		 je	 $LN1@ProcessBuf
  00015	48		 dec	 eax
  00016	74 49		 je	 SHORT $LN8@ProcessBuf
  00018	48		 dec	 eax
  00019	74 1c		 je	 SHORT $LN11@ProcessBuf
  0001b	48		 dec	 eax
  0001c	0f 85 c5 00 00
	00		 jne	 $LN12@ProcessBuf

; 119  : 	case OT_DELAY:
; 120  : 		ProcessDelay( fTimePerSec );

  00022	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00027	8b 06		 mov	 eax, DWORD PTR [esi]
  00029	51		 push	 ecx
  0002a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002f	ff 50 38	 call	 DWORD PTR [eax+56]

; 121  : 		break;

  00032	e9 b0 00 00 00	 jmp	 $LN12@ProcessBuf
$LN11@ProcessBuf:

; 109  : 	{
; 110  : 	case OT_SWITCH:
; 111  : 		if( !CheckSwitchType( fTimePerSec ) )

  00037	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  0003c	51		 push	 ecx
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	e8 00 00 00 00	 call	 ?CheckSwitchType@ioBuff@@IAE_NM@Z ; ioBuff::CheckSwitchType

; 112  : 		{
; 113  : 			SetReserveEndBuff();

  00047	8b ce		 mov	 ecx, esi
  00049	84 c0		 test	 al, al
  0004b	75 0a		 jne	 SHORT $LN10@ProcessBuf
$LN22@ProcessBuf:
  0004d	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 114  : 			return;

  00052	e9 90 00 00 00	 jmp	 $LN12@ProcessBuf
$LN10@ProcessBuf:

; 115  : 		}
; 116  : 
; 117  : 		CheckCallingProcess();

  00057	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 118  : 		break;

  0005c	e9 86 00 00 00	 jmp	 $LN12@ProcessBuf
$LN8@ProcessBuf:

; 122  : 	case OT_ACTIVE:
; 123  : 		{
; 124  : 			if( m_pOwner && m_pOwner->GetState() != CS_ICE_STATE )

  00061	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  00067	85 c0		 test	 eax, eax
  00069	74 09		 je	 SHORT $LN7@ProcessBuf
  0006b	80 b8 10 03 00
	00 3b		 cmp	 BYTE PTR [eax+784], 59	; 0000003bH

; 125  : 			{
; 126  : 				SetReserveEndBuff();
; 127  : 				return;

  00072	75 d9		 jne	 SHORT $LN22@ProcessBuf
$LN7@ProcessBuf:

; 128  : 			}
; 129  : 
; 130  : 			if( CheckEnableDelayState() )

  00074	e8 00 00 00 00	 call	 ?CheckEnableDelayState@ioBuff@@IAE_NXZ ; ioBuff::CheckEnableDelayState
  00079	84 c0		 test	 al, al
  0007b	75 6a		 jne	 SHORT $LN12@ProcessBuf

; 131  : 				return;
; 132  : 
; 133  : 			if( m_pOwner && m_pOwner->IsFloating() )

  0007d	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00083	85 c9		 test	 ecx, ecx
  00085	74 09		 je	 SHORT $LN5@ProcessBuf
  00087	e8 00 00 00 00	 call	 ?IsFloating@ioBaseChar@@QAE_NXZ ; ioBaseChar::IsFloating
  0008c	84 c0		 test	 al, al
  0008e	75 57		 jne	 SHORT $LN12@ProcessBuf
$LN5@ProcessBuf:

; 134  : 				return;
; 135  : 
; 136  : 			if( m_pOwner && !m_pOwner->IsCheckIceBound() )

  00090	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  00096	85 c0		 test	 eax, eax
  00098	74 10		 je	 SHORT $LN4@ProcessBuf
  0009a	80 b8 34 1c 00
	00 00		 cmp	 BYTE PTR [eax+7220], 0
  000a1	75 07		 jne	 SHORT $LN4@ProcessBuf

; 137  : 				CheckCallingProcess();

  000a3	8b ce		 mov	 ecx, esi
  000a5	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess
$LN4@ProcessBuf:

; 138  : 
; 139  : 			if( GetBuffDuration() == 0 )

  000aa	8b ce		 mov	 ecx, esi
  000ac	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  000b1	85 c0		 test	 eax, eax
  000b3	74 32		 je	 SHORT $LN12@ProcessBuf

; 140  : 				return;
; 141  : 
; 142  : 			if( m_dwBuffEndTime <= FRAMEGETTIME() )

  000b5	57		 push	 edi
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  000bc	8b c8		 mov	 ecx, eax
  000be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  000c4	8b f8		 mov	 edi, eax
  000c6	8d 45 08	 lea	 eax, DWORD PTR _value$526250[ebp]
  000c9	50		 push	 eax
  000ca	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  000d0	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  000d5	39 7d 08	 cmp	 DWORD PTR _value$526250[ebp], edi
  000d8	5f		 pop	 edi
  000d9	77 0c		 ja	 SHORT $LN12@ProcessBuf

; 143  : 			{
; 144  : 				SetReserveEndBuff();

  000db	8b ce		 mov	 ecx, esi

; 145  : 				return;

  000dd	e9 6b ff ff ff	 jmp	 $LN22@ProcessBuf
$LN1@ProcessBuf:

; 146  : 			}
; 147  : 		}
; 148  : 		break;
; 149  : 	case OT_PASSIVE:
; 150  : 		CheckCallingAreaWeapon();

  000e2	e8 00 00 00 00	 call	 ?CheckCallingAreaWeapon@ioBuff@@IAEXXZ ; ioBuff::CheckCallingAreaWeapon
$LN12@ProcessBuf:
  000e7	5e		 pop	 esi

; 151  : 		break;
; 152  : 	}
; 153  : }

  000e8	5d		 pop	 ebp
  000e9	c2 04 00	 ret	 4
?ProcessBuff@ioIceBuff@@UAEXM@Z ENDP			; ioIceBuff::ProcessBuff
_TEXT	ENDS
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
EXTRN	?SetBlowWoundedState@ioBaseChar@@QAEX_NABUtagBlowWoundAniInfo@@00@Z:PROC ; ioBaseChar::SetBlowWoundedState
EXTRN	?SetDashFailStart@ioBaseChar@@QAEXXZ:PROC	; ioBaseChar::SetDashFailStart
EXTRN	?SetState@ioBaseChar@@QAEXH_N@Z:PROC		; ioBaseChar::SetState
EXTRN	__imp_?ResumeAllPlayingAnimation@ioEntityGroup@@QAEXXZ:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
xdata$x	SEGMENT
__unwindtable$?EndBuff@ioIceBuff@@UAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EndBuff@ioIceBuff@@UAEXXZ$0
__ehfuncinfo$?EndBuff@ioIceBuff@@UAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?EndBuff@ioIceBuff@@UAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioicebuff.cpp
xdata$x	ENDS
;	COMDAT ?EndBuff@ioIceBuff@@UAEXXZ
_TEXT	SEGMENT
_kInfo$523844 = -108					; size = 96
__$EHRec$ = -12						; size = 12
?EndBuff@ioIceBuff@@UAEXXZ PROC				; ioIceBuff::EndBuff, COMDAT
; _this$ = ecx

; 156  : {

  00000	6a 60		 push	 96			; 00000060H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?EndBuff@ioIceBuff@@UAEXXZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 157  : 	if( m_pOwner )

  0000e	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  00014	33 db		 xor	 ebx, ebx
  00016	3b c3		 cmp	 eax, ebx
  00018	74 64		 je	 SHORT $LN1@EndBuff

; 158  : 	{
; 159  : 		m_pOwner->GetGroup()->ResumeAllPlayingAnimation();

  0001a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ResumeAllPlayingAnimation@ioEntityGroup@@QAEXXZ

; 160  : 
; 161  : 		if( m_pOwner->GetState() == CS_ICE_STATE )

  00023	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00029	80 b9 10 03 00
	00 3b		 cmp	 BYTE PTR [ecx+784], 59	; 0000003bH
  00030	75 4c		 jne	 SHORT $LN1@EndBuff

; 162  : 		{
; 163  : 			if( !m_pOwner->GetBlowStopMotionState() )

  00032	38 99 c7 15 00
	00		 cmp	 BYTE PTR [ecx+5575], bl
  00038	75 1b		 jne	 SHORT $LN2@EndBuff

; 164  : 			{
; 165  : 				m_pOwner->SetState( CS_DELAY, m_bSendDelayNetWork );

  0003a	0f b6 86 f9 08
	00 00		 movzx	 eax, BYTE PTR [esi+2297]
  00041	50		 push	 eax
  00042	53		 push	 ebx
  00043	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState

; 166  : 				m_pOwner->SetDashFailStart();

  00048	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0004e	e8 00 00 00 00	 call	 ?SetDashFailStart@ioBaseChar@@QAEXXZ ; ioBaseChar::SetDashFailStart

; 167  : 			}
; 168  : 			else

  00053	eb 29		 jmp	 SHORT $LN1@EndBuff
$LN2@EndBuff:

; 169  : 			{
; 170  : 				BlowWoundAniInfo kInfo;

  00055	8d 4d 94	 lea	 ecx, DWORD PTR _kInfo$523844[ebp]
  00058	e8 00 00 00 00	 call	 ??0tagBlowWoundAniInfo@@QAE@XZ ; tagBlowWoundAniInfo::tagBlowWoundAniInfo

; 171  : 				m_pOwner->SetBlowWoundedState( false, kInfo );

  0005d	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00063	53		 push	 ebx
  00064	53		 push	 ebx
  00065	8d 45 94	 lea	 eax, DWORD PTR _kInfo$523844[ebp]
  00068	50		 push	 eax
  00069	53		 push	 ebx
  0006a	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0006d	e8 00 00 00 00	 call	 ?SetBlowWoundedState@ioBaseChar@@QAEX_NABUtagBlowWoundAniInfo@@00@Z ; ioBaseChar::SetBlowWoundedState

; 172  : 			}

  00072	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00076	8d 4d 94	 lea	 ecx, DWORD PTR _kInfo$523844[ebp]
  00079	e8 00 00 00 00	 call	 ??1tagBlowWoundAniInfo@@QAE@XZ
$LN1@EndBuff:

; 173  : 		}
; 174  : 	}
; 175  : 
; 176  : 	ioBuff::EndBuff();

  0007e	8b ce		 mov	 ecx, esi
  00080	e8 00 00 00 00	 call	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff

; 177  : }

  00085	e8 00 00 00 00	 call	 __EH_epilog3
  0008a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?EndBuff@ioIceBuff@@UAEXXZ$0:
  00000	8d 4d 94	 lea	 ecx, DWORD PTR _kInfo$523844[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1tagBlowWoundAniInfo@@QAE@XZ
__ehhandler$?EndBuff@ioIceBuff@@UAEXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?EndBuff@ioIceBuff@@UAEXXZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?EndBuff@ioIceBuff@@UAEXXZ ENDP				; ioIceBuff::EndBuff
EXTRN	?SetIceState@ioBaseChar@@QAEXABVioHashString@@0ABUWeaponInfo@@M@Z:PROC ; ioBaseChar::SetIceState
EXTRN	?PlaySoundA@ioGameEntity@@QAEKABVioHashString@@_N@Z:PROC ; ioGameEntity::PlaySoundA
EXTRN	?AttachEffect@ioBaseChar@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@_N@Z:PROC ; ioBaseChar::AttachEffect
EXTRN	?GetEffectEventOwner@ioBuff@@IAEPAVioBaseChar@@XZ:PROC ; ioBuff::GetEffectEventOwner
EXTRN	?RotateByBuffCollision@ioBaseChar@@QAEXABVioHashString@@H@Z:PROC ; ioBaseChar::RotateByBuffCollision
EXTRN	__imp_??9ioHashString@@QBE_NABV0@@Z:PROC
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	?CheckBuffDesc@ioBuff@@IAEXXZ:PROC		; ioBuff::CheckBuffDesc
EXTRN	?CheckChangeColor@ioBuff@@IAEX_N@Z:PROC		; ioBuff::CheckChangeColor
EXTRN	?CheckChangeSkill@ioBuff@@IAEX_N@Z:PROC		; ioBuff::CheckChangeSkill
EXTRN	?CheckInvisibleHelmet@ioBuff@@IAEX_N@Z:PROC	; ioBuff::CheckInvisibleHelmet
EXTRN	?CheckInvisibleCloak@ioBuff@@IAEX_N@Z:PROC	; ioBuff::CheckInvisibleCloak
EXTRN	?CheckInvisibleWeapon@ioBuff@@IAEX_N@Z:PROC	; ioBuff::CheckInvisibleWeapon
; Function compile flags: /Ogsp
;	COMDAT ?SetAction@ioIceBuff@@MAEXXZ
_TEXT	SEGMENT
_value$526282 = -1					; size = 1
?SetAction@ioIceBuff@@MAEXXZ PROC			; ioIceBuff::SetAction, COMDAT
; _this$ = ecx

; 180  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 181  : 	CheckInvisibleWeapon( false );

  00006	33 ff		 xor	 edi, edi
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?CheckInvisibleWeapon@ioBuff@@IAEX_N@Z ; ioBuff::CheckInvisibleWeapon

; 182  : 	CheckInvisibleCloak( false );

  00010	57		 push	 edi
  00011	8b ce		 mov	 ecx, esi
  00013	e8 00 00 00 00	 call	 ?CheckInvisibleCloak@ioBuff@@IAEX_N@Z ; ioBuff::CheckInvisibleCloak

; 183  : 	CheckInvisibleHelmet( false );

  00018	57		 push	 edi
  00019	8b ce		 mov	 ecx, esi
  0001b	e8 00 00 00 00	 call	 ?CheckInvisibleHelmet@ioBuff@@IAEX_N@Z ; ioBuff::CheckInvisibleHelmet

; 184  : 	
; 185  : 	CheckChangeSkill( true );

  00020	6a 01		 push	 1
  00022	8b ce		 mov	 ecx, esi
  00024	e8 00 00 00 00	 call	 ?CheckChangeSkill@ioBuff@@IAEX_N@Z ; ioBuff::CheckChangeSkill

; 186  : 	CheckChangeColor( true );

  00029	6a 01		 push	 1
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?CheckChangeColor@ioBuff@@IAEX_N@Z ; ioBuff::CheckChangeColor

; 187  : 	CheckBuffDesc();

  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?CheckBuffDesc@ioBuff@@IAEXXZ ; ioBuff::CheckBuffDesc

; 188  : 
; 189  : 	if( m_CreatorLookType != CLT_NONE && !m_CreateChar.IsEmpty() )

  00039	39 be f4 08 00
	00		 cmp	 DWORD PTR [esi+2292], edi
  0003f	74 3c		 je	 SHORT $LN3@SetAction
  00041	8d be 88 02 00
	00		 lea	 edi, DWORD PTR [esi+648]
  00047	8b cf		 mov	 ecx, edi
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0004f	84 c0		 test	 al, al
  00051	75 2a		 jne	 SHORT $LN3@SetAction

; 190  : 	{
; 191  : 		if( m_CreateChar != m_pOwner->GetCharName() )

  00053	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  00059	05 d4 02 00 00	 add	 eax, 724		; 000002d4H
  0005e	50		 push	 eax
  0005f	8b cf		 mov	 ecx, edi
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??9ioHashString@@QBE_NABV0@@Z
  00067	84 c0		 test	 al, al
  00069	74 12		 je	 SHORT $LN3@SetAction

; 192  : 			m_pOwner->RotateByBuffCollision( m_CreateChar, m_CreatorLookType );

  0006b	ff b6 f4 08 00
	00		 push	 DWORD PTR [esi+2292]
  00071	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00077	57		 push	 edi
  00078	e8 00 00 00 00	 call	 ?RotateByBuffCollision@ioBaseChar@@QAEXABVioHashString@@H@Z ; ioBaseChar::RotateByBuffCollision
$LN3@SetAction:

; 193  : 	}
; 194  : 
; 195  : 	m_pOwner->AttachEffect( m_BuffEffect, GetEffectEventOwner() );

  0007d	6a 01		 push	 1
  0007f	8b ce		 mov	 ecx, esi
  00081	e8 00 00 00 00	 call	 ?GetEffectEventOwner@ioBuff@@IAEPAVioBaseChar@@XZ ; ioBuff::GetEffectEventOwner
  00086	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0008c	50		 push	 eax
  0008d	8d 86 7c 05 00
	00		 lea	 eax, DWORD PTR [esi+1404]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ?AttachEffect@ioBaseChar@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@_N@Z ; ioBaseChar::AttachEffect

; 196  : 
; 197  : 	if( !m_LoopSound.IsEmpty() )

  00099	8d be fc 05 00
	00		 lea	 edi, DWORD PTR [esi+1532]
  0009f	8b cf		 mov	 ecx, edi
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  000a7	84 c0		 test	 al, al
  000a9	75 27		 jne	 SHORT $LN9@SetAction

; 198  : 	{
; 199  : 		m_LoopSoundID = m_pOwner->PlaySound( m_LoopSound, true );

  000ab	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  000b1	6a 01		 push	 1
  000b3	57		 push	 edi
  000b4	e8 00 00 00 00	 call	 ?PlaySoundA@ioGameEntity@@QAEKABVioHashString@@_N@Z ; ioGameEntity::PlaySoundA
  000b9	89 86 0c 06 00
	00		 mov	 DWORD PTR [esi+1548], eax

; 200  : 		m_bLoopSoundPlayed = true;

  000bf	8d 45 ff	 lea	 eax, DWORD PTR _value$526282[ebp]
  000c2	50		 push	 eax
  000c3	8d 8e 60 08 00
	00		 lea	 ecx, DWORD PTR [esi+2144]
  000c9	c6 45 ff 01	 mov	 BYTE PTR _value$526282[ebp], 1
  000cd	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@_N@@AAEXPBD@Z ; CEncrypt<bool>::EncryptValueToPool
$LN9@SetAction:

; 201  : 	}
; 202  : 
; 203  : 	if( m_pOwner->GetState() != CS_DIE &&
; 204  : 		m_pOwner->GetState() != CS_VIEW &&
; 205  : 		m_pOwner->GetState() != CS_OBSERVER &&
; 206  : 		m_pOwner->GetState() != CS_LOADING )

  000d2	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  000d8	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  000de	3c 0e		 cmp	 al, 14			; 0000000eH
  000e0	74 34		 je	 SHORT $LN1@SetAction
  000e2	3c 1a		 cmp	 al, 26			; 0000001aH
  000e4	74 30		 je	 SHORT $LN1@SetAction
  000e6	3c 2a		 cmp	 al, 42			; 0000002aH
  000e8	74 2c		 je	 SHORT $LN1@SetAction
  000ea	3c 24		 cmp	 al, 36			; 00000024H
  000ec	74 28		 je	 SHORT $LN1@SetAction

; 207  : 	{
; 208  : 		m_pOwner->SetIceState( m_Name, m_CreateChar, m_BoundWeaponInfo, m_fBoundGravityAmt );

  000ee	f3 0f 10 86 94
	09 00 00	 movss	 xmm0, DWORD PTR [esi+2452]
  000f6	51		 push	 ecx
  000f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fc	8d 86 6c 09 00
	00		 lea	 eax, DWORD PTR [esi+2412]
  00102	50		 push	 eax
  00103	8d 86 88 02 00
	00		 lea	 eax, DWORD PTR [esi+648]
  00109	50		 push	 eax
  0010a	8d 86 34 02 00
	00		 lea	 eax, DWORD PTR [esi+564]
  00110	50		 push	 eax
  00111	e8 00 00 00 00	 call	 ?SetIceState@ioBaseChar@@QAEXABVioHashString@@0ABUWeaponInfo@@M@Z ; ioBaseChar::SetIceState
$LN1@SetAction:

; 209  : 	}
; 210  : 
; 211  : 	m_bBuffStart = true;

  00116	5f		 pop	 edi
  00117	c6 86 d5 02 00
	00 01		 mov	 BYTE PTR [esi+725], 1
  0011e	5e		 pop	 esi

; 212  : }

  0011f	c9		 leave
  00120	c3		 ret	 0
?SetAction@ioIceBuff@@MAEXXZ ENDP			; ioIceBuff::SetAction
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?ProcessDelay@ioIceBuff@@MAEXM@Z
_TEXT	SEGMENT
_value$526312 = -4					; size = 4
_value$526308 = -4					; size = 4
_value$526304 = -4					; size = 4
_fTimePerSec$ = 8					; size = 4
?ProcessDelay@ioIceBuff@@MAEXM@Z PROC			; ioIceBuff::ProcessDelay, COMDAT
; _this$ = ecx

; 215  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx

; 216  : 	DWORD dwCurTime = FRAMEGETTIME();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0000e	8b c8		 mov	 ecx, eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 217  : 
; 218  : 	if( CheckEnableDelayState() )

  00016	8b ce		 mov	 ecx, esi
  00018	8b f8		 mov	 edi, eax
  0001a	e8 00 00 00 00	 call	 ?CheckEnableDelayState@ioBuff@@IAE_NXZ ; ioBuff::CheckEnableDelayState
  0001f	84 c0		 test	 al, al
  00021	75 76		 jne	 SHORT $LN6@ProcessDel

; 219  : 		return;
; 220  : 
; 221  : 	if( GetBuffDuration() == 0 )

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  0002a	85 c0		 test	 eax, eax
  0002c	75 25		 jne	 SHORT $LN4@ProcessDel

; 222  : 	{
; 223  : 		if( !m_bBuffStart && m_dwBuffStartTime < dwCurTime )

  0002e	38 86 d5 02 00
	00		 cmp	 BYTE PTR [esi+725], al
  00034	75 63		 jne	 SHORT $LN6@ProcessDel
  00036	8d 45 fc	 lea	 eax, DWORD PTR _value$526304[ebp]
  00039	50		 push	 eax
  0003a	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  00040	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00045	39 7d fc	 cmp	 DWORD PTR _value$526304[ebp], edi
  00048	73 4f		 jae	 SHORT $LN6@ProcessDel

; 224  : 			SetAction();

  0004a	8b 06		 mov	 eax, DWORD PTR [esi]
  0004c	8b ce		 mov	 ecx, esi
  0004e	ff 50 34	 call	 DWORD PTR [eax+52]

; 225  : 		return;

  00051	eb 46		 jmp	 SHORT $LN6@ProcessDel
$LN4@ProcessDel:

; 226  : 	}
; 227  : 
; 228  : 	if( !m_bBuffStart && m_dwBuffStartTime < dwCurTime )

  00053	80 be d5 02 00
	00 00		 cmp	 BYTE PTR [esi+725], 0
  0005a	75 1b		 jne	 SHORT $LN2@ProcessDel
  0005c	8d 45 fc	 lea	 eax, DWORD PTR _value$526308[ebp]
  0005f	50		 push	 eax
  00060	8d 8e 6c 03 00
	00		 lea	 ecx, DWORD PTR [esi+876]
  00066	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  0006b	39 7d fc	 cmp	 DWORD PTR _value$526308[ebp], edi
  0006e	73 07		 jae	 SHORT $LN2@ProcessDel

; 229  : 		SetAction();

  00070	8b 06		 mov	 eax, DWORD PTR [esi]
  00072	8b ce		 mov	 ecx, esi
  00074	ff 50 34	 call	 DWORD PTR [eax+52]
$LN2@ProcessDel:

; 230  : 
; 231  : 	if( m_dwBuffEndTime <= dwCurTime )

  00077	8d 45 fc	 lea	 eax, DWORD PTR _value$526312[ebp]
  0007a	50		 push	 eax
  0007b	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  00081	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 232  : 	{
; 233  : 		SetReserveEndBuff();

  00086	8b ce		 mov	 ecx, esi
  00088	39 7d fc	 cmp	 DWORD PTR _value$526312[ebp], edi
  0008b	77 07		 ja	 SHORT $LN1@ProcessDel
  0008d	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 234  : 		return;

  00092	eb 05		 jmp	 SHORT $LN6@ProcessDel
$LN1@ProcessDel:

; 235  : 	}
; 236  : 
; 237  : 	CheckCallingProcess();

  00094	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess
$LN6@ProcessDel:
  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi

; 238  : }

  0009b	c9		 leave
  0009c	c2 04 00	 ret	 4
?ProcessDelay@ioIceBuff@@MAEXM@Z ENDP			; ioIceBuff::ProcessDelay
_TEXT	ENDS
END
