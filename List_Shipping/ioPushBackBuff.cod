; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioPushBackBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?return100@@YAIXZ				; return100
; Function compile flags: /Ogsp
;	COMDAT ?return100@@YAIXZ
_TEXT	SEGMENT
?return100@@YAIXZ PROC					; return100, COMDAT

; 25   : 	__forceinline unsigned int return100() { __asm mov eax, 100 };

  00000	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00005	c3		 ret	 0
?return100@@YAIXZ ENDP					; return100
_TEXT	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	?GetCurEtcStateCnt@ioBaseChar@@QAEHXZ		; ioBaseChar::GetCurEtcStateCnt
; Function compile flags: /Ogsp
;	COMDAT ?GetCurEtcStateCnt@ioBaseChar@@QAEHXZ
_TEXT	SEGMENT
?GetCurEtcStateCnt@ioBaseChar@@QAEHXZ PROC		; ioBaseChar::GetCurEtcStateCnt, COMDAT
; _this$ = ecx

; 2977 : 	inline int GetCurEtcStateCnt() { return m_iEtcStateCnt; }

  00000	8b 81 ac 19 00
	00		 mov	 eax, DWORD PTR [ecx+6572]
  00006	c3		 ret	 0
?GetCurEtcStateCnt@ioBaseChar@@QAEHXZ ENDP		; ioBaseChar::GetCurEtcStateCnt
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	??_7ioPushBackBuff@@6B@				; ioPushBackBuff::`vftable'
PUBLIC	??0ioPushBackBuff@@QAE@XZ			; ioPushBackBuff::ioPushBackBuff
PUBLIC	??_R4ioPushBackBuff@@6B@			; ioPushBackBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioPushBackBuff@@@8			; ioPushBackBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioPushBackBuff@@8				; ioPushBackBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioPushBackBuff@@8				; ioPushBackBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioPushBackBuff@@8			; ioPushBackBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioPushBackBuff@@UAEXAAVioINILoader@@@Z ; ioPushBackBuff::LoadProperty
PUBLIC	?Clone@ioPushBackBuff@@UAEPAVioBuff@@XZ		; ioPushBackBuff::Clone
PUBLIC	?StartBuff@ioPushBackBuff@@UAEXPAVioBaseChar@@@Z ; ioPushBackBuff::StartBuff
PUBLIC	?ApplyStartBuff@ioPushBackBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioPushBackBuff::ApplyStartBuff
PUBLIC	?ProcessBuff@ioPushBackBuff@@UAEXM@Z		; ioPushBackBuff::ProcessBuff
PUBLIC	?EndBuff@ioPushBackBuff@@UAEXXZ			; ioPushBackBuff::EndBuff
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__fltused:DWORD
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyExtraBuffInfo
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioPushBackBuff@@UAEPAXI@Z:PROC		; ioPushBackBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioPushBackBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioPushBackBuff@@8 DD FLAT:??_R0?AVioPushBackBuff@@@8 ; ioPushBackBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioPushBackBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioPushBackBuff@@8
rdata$r	SEGMENT
??_R2ioPushBackBuff@@8 DD FLAT:??_R1A@?0A@EA@ioPushBackBuff@@8 ; ioPushBackBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioPushBackBuff@@8
rdata$r	SEGMENT
??_R3ioPushBackBuff@@8 DD 00H				; ioPushBackBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioPushBackBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioPushBackBuff@@@8
_DATA	SEGMENT
??_R0?AVioPushBackBuff@@@8 DD FLAT:??_7type_info@@6B@	; ioPushBackBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioPushBackBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioPushBackBuff@@6B@
rdata$r	SEGMENT
??_R4ioPushBackBuff@@6B@ DD 00H				; ioPushBackBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioPushBackBuff@@@8
	DD	FLAT:??_R3ioPushBackBuff@@8
rdata$r	ENDS
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT ??_7ioPushBackBuff@@6B@
CONST	SEGMENT
??_7ioPushBackBuff@@6B@ DD FLAT:??_R4ioPushBackBuff@@6B@ ; ioPushBackBuff::`vftable'
	DD	FLAT:?LoadProperty@ioPushBackBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioPushBackBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioPushBackBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioPushBackBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioPushBackBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioPushBackBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioPushBackBuff@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioPushBackBuff@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioPushBackBuff@@QAE@XZ$0
__ehfuncinfo$??0ioPushBackBuff@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioPushBackBuff@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iopushbackbuff.cpp
xdata$x	ENDS
;	COMDAT ??0ioPushBackBuff@@QAE@XZ
_TEXT	SEGMENT
tv133 = -16						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioPushBackBuff@@QAE@XZ PROC				; ioPushBackBuff::ioPushBackBuff, COMDAT
; _this$ = ecx

; 9    : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioPushBackBuff@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff
  00016	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001a	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioPushBackBuff@@6B@
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 10   : 	m_fPushBackTimeRate = FLOAT1;

  0002c	b8 01 00 00 00	 mov	 eax, 1
  00031	89 45 f0	 mov	 DWORD PTR tv133[ebp], eax
  00034	db 45 f0	 fild	 DWORD PTR tv133[ebp]
  00037	85 c0		 test	 eax, eax
  00039	79 06		 jns	 SHORT $LN8@ioPushBack
  0003b	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN8@ioPushBack:
  00041	d9 9e 7c 09 00
	00		 fstp	 DWORD PTR [esi+2428]

; 11   : }

  00047	8b c6		 mov	 eax, esi
  00049	e8 00 00 00 00	 call	 __EH_epilog3
  0004e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioPushBackBuff@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??0ioPushBackBuff@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioPushBackBuff@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioPushBackBuff@@QAE@XZ ENDP				; ioPushBackBuff::ioPushBackBuff
PUBLIC	??0ioPushBackBuff@@QAE@ABV0@@Z			; ioPushBackBuff::ioPushBackBuff
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioPushBackBuff@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioPushBackBuff@@QAE@ABV0@@Z$0
__ehfuncinfo$??0ioPushBackBuff@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioPushBackBuff@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioPushBackBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioPushBackBuff@@QAE@ABV0@@Z PROC			; ioPushBackBuff::ioPushBackBuff, COMDAT
; _this$ = ecx

; 15   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioPushBackBuff@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	8d 87 6c 09 00
	00		 lea	 eax, DWORD PTR [edi+2412]
  00024	50		 push	 eax
  00025	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  0002b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioPushBackBuff@@6B@
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z

; 16   : 	m_fPushBackTimeRate = rhs.m_fPushBackTimeRate;

  00037	d9 87 7c 09 00
	00		 fld	 DWORD PTR [edi+2428]
  0003d	d9 9e 7c 09 00
	00		 fstp	 DWORD PTR [esi+2428]

; 17   : }

  00043	8b c6		 mov	 eax, esi
  00045	e8 00 00 00 00	 call	 __EH_epilog3
  0004a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioPushBackBuff@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??0ioPushBackBuff@@QAE@ABV0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioPushBackBuff@@QAE@ABV0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioPushBackBuff@@QAE@ABV0@@Z ENDP			; ioPushBackBuff::ioPushBackBuff
PUBLIC	??1ioPushBackBuff@@UAE@XZ			; ioPushBackBuff::~ioPushBackBuff
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioPushBackBuff@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioPushBackBuff@@UAE@XZ$0
__ehfuncinfo$??1ioPushBackBuff@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ioPushBackBuff@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioPushBackBuff@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioPushBackBuff@@UAE@XZ PROC				; ioPushBackBuff::~ioPushBackBuff, COMDAT
; _this$ = ecx

; 20   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioPushBackBuff@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioPushBackBuff@@6B@
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 21   : }

  0001b	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00027	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  00032	e8 00 00 00 00	 call	 __EH_epilog3
  00037	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioPushBackBuff@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??1ioPushBackBuff@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioPushBackBuff@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioPushBackBuff@@UAE@XZ ENDP				; ioPushBackBuff::~ioPushBackBuff
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioPushBackBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioPushBackBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioPushBackBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioPushBackBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioPushBackBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T524498 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioPushBackBuff@@UAEPAVioBuff@@XZ PROC		; ioPushBackBuff::Clone, COMDAT
; _this$ = ecx

; 35   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioPushBackBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 36   : 	return new ioPushBackBuff( *this );

  0000e	68 84 09 00 00	 push	 2436			; 00000984H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T524498[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioPushBackBuff@@QAE@ABV0@@Z ; ioPushBackBuff::ioPushBackBuff
$LN3@Clone:

; 37   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioPushBackBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T524498[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioPushBackBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioPushBackBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioPushBackBuff@@UAEPAVioBuff@@XZ ENDP		; ioPushBackBuff::Clone
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
EXTRN	?CheckCallingAreaWeapon@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingAreaWeapon
EXTRN	?ProcessBuff@ioBuff@@UAEXM@Z:PROC		; ioBuff::ProcessBuff
; Function compile flags: /Ogsp
;	COMDAT ?ProcessBuff@ioPushBackBuff@@UAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioPushBackBuff@@UAEXM@Z PROC		; ioPushBackBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 101  : 	if( m_pOwner->GetState() != CS_ETC_STATE || m_pOwner->GetCurEtcStateCnt() != m_iEtcStateCnt )

  00003	8b 81 74 02 00
	00		 mov	 eax, DWORD PTR [ecx+628]
  00009	80 b8 10 03 00
	00 0f		 cmp	 BYTE PTR [eax+784], 15	; 0000000fH
  00010	75 39		 jne	 SHORT $LN6@ProcessBuf
  00012	8b 80 ac 19 00
	00		 mov	 eax, DWORD PTR [eax+6572]
  00018	3b 81 80 09 00
	00		 cmp	 eax, DWORD PTR [ecx+2432]
  0001e	75 2b		 jne	 SHORT $LN6@ProcessBuf

; 104  : 		return;
; 105  : 	}
; 106  : 
; 107  : 	switch( m_iOperationType )

  00020	8b 81 d0 03 00
	00		 mov	 eax, DWORD PTR [ecx+976]
  00026	83 e8 00	 sub	 eax, 0
  00029	74 19		 je	 SHORT $LN1@ProcessBuf
  0002b	48		 dec	 eax
  0002c	74 04		 je	 SHORT $LN2@ProcessBuf
  0002e	48		 dec	 eax
  0002f	48		 dec	 eax
  00030	75 1e		 jne	 SHORT $LN4@ProcessBuf
$LN2@ProcessBuf:

; 108  : 	{
; 109  : 	case OT_SWITCH:
; 110  : 		break;
; 111  : 	case OT_DELAY:
; 112  : 	case OT_ACTIVE:
; 113  : 		ioBuff::ProcessBuff( fTimePerSec );

  00032	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00037	51		 push	 ecx
  00038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003d	e8 00 00 00 00	 call	 ?ProcessBuff@ioBuff@@UAEXM@Z ; ioBuff::ProcessBuff

; 114  : 		break;

  00042	eb 0c		 jmp	 SHORT $LN4@ProcessBuf
$LN1@ProcessBuf:

; 115  : 	case OT_PASSIVE:
; 116  : 		CheckCallingAreaWeapon();

  00044	e8 00 00 00 00	 call	 ?CheckCallingAreaWeapon@ioBuff@@IAEXXZ ; ioBuff::CheckCallingAreaWeapon

; 117  : 		break;

  00049	eb 05		 jmp	 SHORT $LN4@ProcessBuf
$LN6@ProcessBuf:

; 102  : 	{
; 103  : 		SetReserveEndBuff();

  0004b	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff
$LN4@ProcessBuf:

; 118  : 	}
; 119  : }

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?ProcessBuff@ioPushBackBuff@@UAEXM@Z ENDP		; ioPushBackBuff::ProcessBuff
_TEXT	ENDS
EXTRN	?SetState@ioBaseChar@@QAEXH_N@Z:PROC		; ioBaseChar::SetState
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
; Function compile flags: /Ogsp
;	COMDAT ?EndBuff@ioPushBackBuff@@UAEXXZ
_TEXT	SEGMENT
?EndBuff@ioPushBackBuff@@UAEXXZ PROC			; ioPushBackBuff::EndBuff, COMDAT
; _this$ = ecx

; 122  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 123  : 	ioBuff::EndBuff();

  00003	e8 00 00 00 00	 call	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff

; 124  : 
; 125  : 	if( m_pOwner->GetState() == CS_ETC_STATE && m_pOwner->GetCurEtcStateCnt() == m_iEtcStateCnt )

  00008	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0000e	80 b9 10 03 00
	00 0f		 cmp	 BYTE PTR [ecx+784], 15	; 0000000fH
  00015	75 1d		 jne	 SHORT $LN1@EndBuff
  00017	8b 81 ac 19 00
	00		 mov	 eax, DWORD PTR [ecx+6572]
  0001d	3b 86 80 09 00
	00		 cmp	 eax, DWORD PTR [esi+2432]
  00023	75 0f		 jne	 SHORT $LN1@EndBuff

; 126  : 	{
; 127  : 		m_pOwner->SetState( CS_DELAY, m_bSendDelayNetWork );

  00025	0f b6 86 f9 08
	00 00		 movzx	 eax, BYTE PTR [esi+2297]
  0002c	50		 push	 eax
  0002d	6a 00		 push	 0
  0002f	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState
$LN1@EndBuff:
  00034	5e		 pop	 esi

; 128  : 	}
; 129  : }

  00035	c3		 ret	 0
?EndBuff@ioPushBackBuff@@UAEXXZ ENDP			; ioPushBackBuff::EndBuff
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ	; ioGameEntity::GetGroup
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
;	COMDAT ?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ
_TEXT	SEGMENT
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ PROC	; ioGameEntity::GetGroup, COMDAT
; _this$ = ecx

; 166  : 	inline ioEntityGroup* GetGroup() const { return m_pGroup; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ ENDP	; ioGameEntity::GetGroup
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
_TEXT	ENDS
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z	; CEncrypt<unsigned long>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z PROC	; CEncrypt<unsigned long>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ENDP	; CEncrypt<unsigned long>::EncryptValueToPool
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioPushBackBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioPushBackBuff@@UAEPAXI@Z PROC			; ioPushBackBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioPushBackBuff@@UAE@XZ ; ioPushBackBuff::~ioPushBackBuff
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioPushBackBuff@@UAEPAXI@Z ENDP			; ioPushBackBuff::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<20>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
__k$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<20>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 dd 01 00
	00		 je	 $LN96@LoadString
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 c6 01 00
	00		 je	 $LN95@LoadString
  0003a	b3 ec		 mov	 bl, -20			; ffffffecH
  0003c	32 d3		 xor	 dl, bl
  0003e	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00041	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00044	84 d2		 test	 dl, dl
  00046	0f 84 ae 01 00
	00		 je	 $LN94@LoadString
  0004c	b1 eb		 mov	 cl, -21			; ffffffebH
  0004e	32 d1		 xor	 dl, cl
  00050	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00053	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00056	84 d2		 test	 dl, dl
  00058	0f 84 96 01 00
	00		 je	 $LN93@LoadString
  0005e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00061	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 7f 01 00
	00		 je	 $LN92@LoadString
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 69 01 00
	00		 je	 $LN91@LoadString
  00080	32 d3		 xor	 dl, bl
  00082	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  00085	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00088	84 d2		 test	 dl, dl
  0008a	0f 84 54 01 00
	00		 je	 $LN90@LoadString
  00090	32 d1		 xor	 dl, cl
  00092	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  00095	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00098	84 d2		 test	 dl, dl
  0009a	0f 84 3e 01 00
	00		 je	 $LN89@LoadString
  000a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a3	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 27 01 00
	00		 je	 $LN88@LoadString
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 11 01 00
	00		 je	 $LN87@LoadString
  000c2	32 d3		 xor	 dl, bl
  000c4	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 fc 00 00
	00		 je	 $LN86@LoadString
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 e6 00 00
	00		 je	 $LN85@LoadString
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 cf 00 00
	00		 je	 $LN84@LoadString
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 b9 00 00
	00		 je	 $LN83@LoadString
  00104	32 d3		 xor	 dl, bl
  00106	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 a4 00 00
	00		 je	 $LN82@LoadString
  00114	32 d1		 xor	 dl, cl
  00116	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00119	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011c	84 d2		 test	 dl, dl
  0011e	0f 84 8e 00 00
	00		 je	 $LN81@LoadString
  00124	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00127	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	74 7b		 je	 SHORT $LN80@LoadString
  00131	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00134	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00137	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013a	84 d2		 test	 dl, dl
  0013c	74 69		 je	 SHORT $LN79@LoadString
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	74 58		 je	 SHORT $LN78@LoadString
  0014a	32 d1		 xor	 dl, cl
  0014c	80 78 13 00	 cmp	 BYTE PTR [eax+19], 0
  00150	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	0f 84 b1 00 00
	00		 je	 $LN111@LoadString
  00159	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0015c	84 d2		 test	 dl, dl
  0015e	74 3c		 je	 SHORT $LN76@LoadString
  00160	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00163	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  00166	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00169	84 d2		 test	 dl, dl
  0016b	74 2a		 je	 SHORT $LN75@LoadString
  0016d	32 d3		 xor	 dl, bl
  0016f	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  00172	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00175	84 d2		 test	 dl, dl
  00177	74 19		 je	 SHORT $LN74@LoadString
  00179	8a 40 17	 mov	 al, BYTE PTR [eax+23]
  0017c	32 d1		 xor	 dl, cl
  0017e	88 55 fa	 mov	 BYTE PTR __k$[ebp+22], dl
  00181	84 c0		 test	 al, al
  00183	74 07		 je	 SHORT $LN73@LoadString
  00185	34 ea		 xor	 al, -22			; ffffffeaH
  00187	88 45 fb	 mov	 BYTE PTR __k$[ebp+23], al
  0018a	eb 7e		 jmp	 SHORT $LN111@LoadString
$LN73@LoadString:
  0018c	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00190	eb 78		 jmp	 SHORT $LN111@LoadString
$LN74@LoadString:
  00192	88 4d fa	 mov	 BYTE PTR __k$[ebp+22], cl
  00195	eb 73		 jmp	 SHORT $LN111@LoadString
$LN75@LoadString:
  00197	88 5d f9	 mov	 BYTE PTR __k$[ebp+21], bl
  0019a	eb 6e		 jmp	 SHORT $LN111@LoadString
$LN76@LoadString:
  0019c	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001a0	eb 68		 jmp	 SHORT $LN111@LoadString
$LN78@LoadString:
  001a2	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  001a5	eb 63		 jmp	 SHORT $LN111@LoadString
$LN79@LoadString:
  001a7	88 5d f5	 mov	 BYTE PTR __k$[ebp+17], bl
  001aa	eb 5e		 jmp	 SHORT $LN111@LoadString
$LN80@LoadString:
  001ac	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001b0	eb 58		 jmp	 SHORT $LN111@LoadString
$LN81@LoadString:
  001b2	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001b6	eb 52		 jmp	 SHORT $LN111@LoadString
$LN82@LoadString:
  001b8	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  001bb	eb 4d		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  001bd	88 5d f1	 mov	 BYTE PTR __k$[ebp+13], bl
  001c0	eb 48		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  001c2	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001c6	eb 42		 jmp	 SHORT $LN111@LoadString
$LN85@LoadString:
  001c8	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001cc	eb 3c		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  001ce	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001d1	eb 37		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  001d3	88 5d ed	 mov	 BYTE PTR __k$[ebp+9], bl
  001d6	eb 32		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  001d8	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001dc	eb 2c		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  001de	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001e2	eb 26		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  001e4	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001e7	eb 21		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  001e9	88 5d e9	 mov	 BYTE PTR __k$[ebp+5], bl
  001ec	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  001ee	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001f2	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  001f4	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001f8	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  001fa	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001fe	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  00200	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00204	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  00206	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  0020a	6a 04		 push	 4
  0020c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0020f	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+19], 0
  00213	5a		 pop	 edx
$LL104@LoadString:
  00214	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0021a	83 c0 04	 add	 eax, 4
  0021d	4a		 dec	 edx
  0021e	75 f4		 jne	 SHORT $LL104@LoadString
  00220	6a 10		 push	 16			; 00000010H
  00222	58		 pop	 eax
$LL101@LoadString:
  00223	8b c8		 mov	 ecx, eax
  00225	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0022b	79 05		 jns	 SHORT $LN112@LoadString
  0022d	49		 dec	 ecx
  0022e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00231	41		 inc	 ecx
$LN112@LoadString:
  00232	b2 ed		 mov	 dl, -19			; ffffffedH
  00234	2a d1		 sub	 dl, cl
  00236	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  0023a	40		 inc	 eax
  0023b	83 f8 13	 cmp	 eax, 19			; 00000013H
  0023e	7c e3		 jl	 SHORT $LL101@LoadString

; 163  : 		LoadString(_k, d, b, i);

  00240	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00243	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00246	57		 push	 edi
  00247	56		 push	 esi
  00248	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0024b	50		 push	 eax
  0024c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00252	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00255	5f		 pop	 edi
  00256	5e		 pop	 esi
  00257	33 cd		 xor	 ecx, ebp
  00259	5b		 pop	 ebx
  0025a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025f	c9		 leave
  00260	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<20>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BE@@ioINILoader@@QAEMAAY0BE@$$CBDM@Z ; ioINILoader::LoadFloat_e<20>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BE@@ioINILoader@@QAEMAAY0BE@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BE@@ioINILoader@@QAEMAAY0BE@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<20>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 dd 01 00
	00		 je	 $LN96@LoadFloat_
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 c6 01 00
	00		 je	 $LN95@LoadFloat_
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 ae 01 00
	00		 je	 $LN94@LoadFloat_
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 96 01 00
	00		 je	 $LN93@LoadFloat_
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 7f 01 00
	00		 je	 $LN92@LoadFloat_
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 69 01 00
	00		 je	 $LN91@LoadFloat_
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 54 01 00
	00		 je	 $LN90@LoadFloat_
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 3e 01 00
	00		 je	 $LN89@LoadFloat_
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 27 01 00
	00		 je	 $LN88@LoadFloat_
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 11 01 00
	00		 je	 $LN87@LoadFloat_
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 fc 00 00
	00		 je	 $LN86@LoadFloat_
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 e6 00 00
	00		 je	 $LN85@LoadFloat_
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 cf 00 00
	00		 je	 $LN84@LoadFloat_
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 b9 00 00
	00		 je	 $LN83@LoadFloat_
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 a4 00 00
	00		 je	 $LN82@LoadFloat_
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 8e 00 00
	00		 je	 $LN81@LoadFloat_
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	74 7b		 je	 SHORT $LN80@LoadFloat_
  00129	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0012c	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012f	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00132	84 d2		 test	 dl, dl
  00134	74 69		 je	 SHORT $LN79@LoadFloat_
  00136	32 d3		 xor	 dl, bl
  00138	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013b	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0013e	84 d2		 test	 dl, dl
  00140	74 58		 je	 SHORT $LN78@LoadFloat_
  00142	32 d1		 xor	 dl, cl
  00144	80 78 13 00	 cmp	 BYTE PTR [eax+19], 0
  00148	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0014b	0f 84 b1 00 00
	00		 je	 $LN1@LoadFloat_
  00151	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00154	84 d2		 test	 dl, dl
  00156	74 3c		 je	 SHORT $LN76@LoadFloat_
  00158	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0015b	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015e	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00161	84 d2		 test	 dl, dl
  00163	74 2a		 je	 SHORT $LN75@LoadFloat_
  00165	32 d3		 xor	 dl, bl
  00167	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016a	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0016d	84 d2		 test	 dl, dl
  0016f	74 19		 je	 SHORT $LN74@LoadFloat_
  00171	8a 40 17	 mov	 al, BYTE PTR [eax+23]
  00174	32 d1		 xor	 dl, cl
  00176	88 55 fa	 mov	 BYTE PTR __k$[ebp+22], dl
  00179	84 c0		 test	 al, al
  0017b	74 07		 je	 SHORT $LN73@LoadFloat_
  0017d	34 ea		 xor	 al, -22			; ffffffeaH
  0017f	88 45 fb	 mov	 BYTE PTR __k$[ebp+23], al
  00182	eb 7e		 jmp	 SHORT $LN1@LoadFloat_
$LN73@LoadFloat_:
  00184	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00188	eb 78		 jmp	 SHORT $LN1@LoadFloat_
$LN74@LoadFloat_:
  0018a	88 4d fa	 mov	 BYTE PTR __k$[ebp+22], cl
  0018d	eb 73		 jmp	 SHORT $LN1@LoadFloat_
$LN75@LoadFloat_:
  0018f	88 5d f9	 mov	 BYTE PTR __k$[ebp+21], bl
  00192	eb 6e		 jmp	 SHORT $LN1@LoadFloat_
$LN76@LoadFloat_:
  00194	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00198	eb 68		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  0019a	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  0019d	eb 63		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  0019f	88 5d f5	 mov	 BYTE PTR __k$[ebp+17], bl
  001a2	eb 5e		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  001a4	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001a8	eb 58		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  001aa	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001ae	eb 52		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  001b0	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  001b3	eb 4d		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  001b5	88 5d f1	 mov	 BYTE PTR __k$[ebp+13], bl
  001b8	eb 48		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  001ba	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001be	eb 42		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  001c0	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001c4	eb 3c		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  001c6	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001c9	eb 37		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  001cb	88 5d ed	 mov	 BYTE PTR __k$[ebp+9], bl
  001ce	eb 32		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  001d0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001d4	eb 2c		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  001d6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001da	eb 26		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  001dc	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001df	eb 21		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  001e1	88 5d e9	 mov	 BYTE PTR __k$[ebp+5], bl
  001e4	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  001e6	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001ea	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  001ec	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001f0	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  001f2	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001f6	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  001f8	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001fc	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  001fe	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  00202	6a 04		 push	 4
  00204	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00207	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+19], 0
  0020b	5a		 pop	 edx
$LL104@LoadFloat_:
  0020c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00212	83 c0 04	 add	 eax, 4
  00215	4a		 dec	 edx
  00216	75 f4		 jne	 SHORT $LL104@LoadFloat_
  00218	6a 10		 push	 16			; 00000010H
  0021a	58		 pop	 eax
$LL101@LoadFloat_:
  0021b	8b c8		 mov	 ecx, eax
  0021d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00223	79 05		 jns	 SHORT $LN111@LoadFloat_
  00225	49		 dec	 ecx
  00226	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00229	41		 inc	 ecx
$LN111@LoadFloat_:
  0022a	b2 ed		 mov	 dl, -19			; ffffffedH
  0022c	2a d1		 sub	 dl, cl
  0022e	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00232	40		 inc	 eax
  00233	83 f8 13	 cmp	 eax, 19			; 00000013H
  00236	7c e3		 jl	 SHORT $LL101@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  00238	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0023d	51		 push	 ecx
  0023e	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00241	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00246	50		 push	 eax
  00247	8b ce		 mov	 ecx, esi
  00249	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0024f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00252	5e		 pop	 esi
  00253	33 cd		 xor	 ecx, ebp
  00255	5b		 pop	 ebx
  00256	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025b	c9		 leave
  0025c	c2 08 00	 ret	 8
??$LoadFloat_e@$0BE@@ioINILoader@@QAEMAAY0BE@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<20>
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@K@@QAEKK@Z			; CEncrypt<unsigned long>::operator=
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??4?$CEncrypt@K@@QAEKK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@K@@QAEKK@Z PROC				; CEncrypt<unsigned long>::operator=, COMDAT
; _this$ = ecx

; 1262 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1263 : 		
; 1264 : 		type value = inValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 1265 : 		EncryptValueToPool((char*)&value);

  00009	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 1266 : #ifdef _NOTUSE
; 1267 : 		m_value = inValue;
; 1268 : 		Debug();
; 1269 : #endif
; 1270 : 		return value;

  00012	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 1271 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@K@@QAEKK@Z ENDP				; CEncrypt<unsigned long>::operator=
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iopushbackbuff.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioPushBackBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
tv1989 = -292						; size = 4
_szBuf$ = -288						; size = 260
__k$524759 = -28					; size = 20
__k$524630 = -28					; size = 20
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioPushBackBuff@@UAEXAAVioINILoader@@@Z PROC ; ioPushBackBuff::LoadProperty, COMDAT
; _this$ = ecx

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 25   : 	ioBuff::LoadProperty( rkLoader );

  00019	57		 push	 edi
  0001a	8b f1		 mov	 esi, ecx
  0001c	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty

; 26   : 
; 27   : 	char szBuf[MAX_PATH];
; 28   : 	rkLoader.LoadString_e( "push_back_animation", "", szBuf, MAX_PATH );

  00021	6a 04		 push	 4
  00023	5b		 pop	 ebx
  00024	c7 45 e4 9d 99
	98 82		 mov	 DWORD PTR __k$524630[ebp], -2103928419 ; 8298999dH
  0002b	c7 45 e8 b2 8e
	8a 89		 mov	 DWORD PTR __k$524630[ebp+4], -1987408206 ; 898a8eb2H
  00032	c7 45 ec 86 b3
	8a 84		 mov	 DWORD PTR __k$524630[ebp+8], -2071284858 ; 848ab386H
  00039	c7 45 f0 84 81
	8a 9e		 mov	 DWORD PTR __k$524630[ebp+12], -1635090044 ; 9e8a8184H
  00040	8d 45 e4	 lea	 eax, DWORD PTR __k$524630[ebp]
  00043	c7 45 f4 84 83
	85 00		 mov	 DWORD PTR __k$524630[ebp+16], 8749956 ; 00858384H
  0004a	8b cb		 mov	 ecx, ebx
$LL106@LoadProper:
  0004c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00052	03 c3		 add	 eax, ebx
  00054	49		 dec	 ecx
  00055	75 f5		 jne	 SHORT $LL106@LoadProper
  00057	6a 10		 push	 16			; 00000010H
  00059	58		 pop	 eax
$LL103@LoadProper:
  0005a	8b c8		 mov	 ecx, eax
  0005c	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00062	79 05		 jns	 SHORT $LN225@LoadProper
  00064	49		 dec	 ecx
  00065	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00068	41		 inc	 ecx
$LN225@LoadProper:
  00069	b2 ed		 mov	 dl, -19			; ffffffedH
  0006b	2a d1		 sub	 dl, cl
  0006d	30 54 05 e4	 xor	 BYTE PTR __k$524630[ebp+eax], dl
  00071	40		 inc	 eax
  00072	83 f8 13	 cmp	 eax, 19			; 00000013H
  00075	7c e3		 jl	 SHORT $LL103@LoadProper
  00077	68 04 01 00 00	 push	 260			; 00000104H
  0007c	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00082	50		 push	 eax
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00088	8d 45 e4	 lea	 eax, DWORD PTR __k$524630[ebp]
  0008b	50		 push	 eax
  0008c	8b cf		 mov	 ecx, edi
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 29   : 	m_PushBackAnimation = szBuf;

  00094	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0009a	50		 push	 eax
  0009b	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 30   : 
; 31   : 	m_fPushBackTimeRate = rkLoader.LoadFloat_e( "push_back_time_rate", FLOAT1 );

  000a7	b8 01 00 00 00	 mov	 eax, 1
  000ac	c7 45 e4 9d 99
	98 82		 mov	 DWORD PTR __k$524759[ebp], -2103928419 ; 8298999dH
  000b3	c7 45 e8 b2 8e
	8a 89		 mov	 DWORD PTR __k$524759[ebp+4], -1987408206 ; 898a8eb2H
  000ba	c7 45 ec 86 b3
	9f 83		 mov	 DWORD PTR __k$524759[ebp+8], -2086685818 ; 839fb386H
  000c1	c7 45 f0 80 89
	b4 98		 mov	 DWORD PTR __k$524759[ebp+12], -1732998784 ; 98b48980H
  000c8	8d 4d e4	 lea	 ecx, DWORD PTR __k$524759[ebp]
  000cb	c7 45 f4 8c 98
	8e 00		 mov	 DWORD PTR __k$524759[ebp+16], 9345164 ; 008e988cH
  000d2	8b d3		 mov	 edx, ebx
$LL214@LoadProper:
  000d4	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  000da	03 cb		 add	 ecx, ebx
  000dc	4a		 dec	 edx
  000dd	75 f5		 jne	 SHORT $LL214@LoadProper
  000df	6a 10		 push	 16			; 00000010H
  000e1	59		 pop	 ecx
$LL211@LoadProper:
  000e2	8b d1		 mov	 edx, ecx
  000e4	81 e2 03 00 00
	80		 and	 edx, -2147483645	; 80000003H
  000ea	79 05		 jns	 SHORT $LN226@LoadProper
  000ec	4a		 dec	 edx
  000ed	83 ca fc	 or	 edx, -4			; fffffffcH
  000f0	42		 inc	 edx
$LN226@LoadProper:
  000f1	b3 ed		 mov	 bl, -19			; ffffffedH
  000f3	2a da		 sub	 bl, dl
  000f5	30 5c 0d e4	 xor	 BYTE PTR __k$524759[ebp+ecx], bl
  000f9	41		 inc	 ecx
  000fa	83 f9 13	 cmp	 ecx, 19			; 00000013H
  000fd	7c e3		 jl	 SHORT $LL211@LoadProper
  000ff	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv1989[ebp], eax
  00105	db 85 dc fe ff
	ff		 fild	 DWORD PTR tv1989[ebp]
  0010b	85 c0		 test	 eax, eax
  0010d	79 06		 jns	 SHORT $LN227@LoadProper
  0010f	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN227@LoadProper:
  00115	51		 push	 ecx
  00116	8d 45 e4	 lea	 eax, DWORD PTR __k$524759[ebp]
  00119	d9 1c 24	 fstp	 DWORD PTR [esp]
  0011c	50		 push	 eax
  0011d	8b cf		 mov	 ecx, edi
  0011f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00125	d9 9e 7c 09 00
	00		 fstp	 DWORD PTR [esi+2428]

; 32   : }

  0012b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012e	5f		 pop	 edi
  0012f	5e		 pop	 esi
  00130	33 cd		 xor	 ecx, ebp
  00132	5b		 pop	 ebx
  00133	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00138	c9		 leave
  00139	c2 04 00	 ret	 4
?LoadProperty@ioPushBackBuff@@UAEXAAVioINILoader@@@Z ENDP ; ioPushBackBuff::LoadProperty
_TEXT	ENDS
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	?GetBuffDuration@ioBuff@@IAEKXZ:PROC		; ioBuff::GetBuffDuration
EXTRN	?SetBuffDuration@ioBuff@@IAEXK@Z:PROC		; ioBuff::SetBuffDuration
EXTRN	__imp_?GetAnimationFullTime@ioEntityGroup@@QAEMH@Z:PROC
EXTRN	__imp_?SetActionAni@ioEntityGroup@@QAE_NABVioHashString@@MMMMMM_N1@Z:PROC
EXTRN	__imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z:PROC
EXTRN	__imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z:PROC
EXTRN	__imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z:PROC
EXTRN	?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z:PROC	; ioBuff::StartBuff
EXTRN	__ftol2:PROC
; Function compile flags: /Ogsp
;	COMDAT ?StartBuff@ioPushBackBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
tv231 = -16						; size = 4
tv227 = -16						; size = 4
tv207 = -16						; size = 4
tv193 = -16						; size = 4
_value$524913 = -16					; size = 4
_iAniID$ = -16						; size = 4
tv288 = -12						; size = 4
tv283 = -12						; size = 4
tv278 = -12						; size = 4
tv260 = -12						; size = 4
tv257 = -12						; size = 4
$T524897 = -12						; size = 4
tv268 = -8						; size = 4
tv264 = -8						; size = 4
tv262 = -8						; size = 4
_fTimeRate$ = -4					; size = 4
_pOwner$ = 8						; size = 4
?StartBuff@ioPushBackBuff@@UAEXPAVioBaseChar@@@Z PROC	; ioPushBackBuff::StartBuff, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 41   : 	ioBuff::StartBuff( pOwner );

  00009	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  0000c	57		 push	 edi
  0000d	8b f1		 mov	 esi, ecx
  0000f	e8 00 00 00 00	 call	 ?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z ; ioBuff::StartBuff

; 42   : 
; 43   : 	ioEntityGroup *pGrp = pOwner->GetGroup();

  00014	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]

; 44   : 	int iAniID = pGrp->GetAnimationIdx( m_PushBackAnimation );

  00017	8d 9e 6c 09 00
	00		 lea	 ebx, DWORD PTR [esi+2412]
  0001d	53		 push	 ebx
  0001e	8b cf		 mov	 ecx, edi
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z
  00026	89 45 f0	 mov	 DWORD PTR _iAniID$[ebp], eax

; 45   : 	if( iAniID == -1 ) return;

  00029	83 f8 ff	 cmp	 eax, -1
  0002c	0f 84 d5 01 00
	00		 je	 $LN4@StartBuff

; 46   : 
; 47   : 	pGrp->ClearAllLoopAni( FLOAT100, true );

  00032	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00037	89 45 f4	 mov	 DWORD PTR tv288[ebp], eax
  0003a	db 45 f4	 fild	 DWORD PTR tv288[ebp]
  0003d	6a 01		 push	 1
  0003f	85 c0		 test	 eax, eax
  00041	79 06		 jns	 SHORT $LN30@StartBuff
  00043	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN30@StartBuff:
  00049	51		 push	 ecx
  0004a	8b cf		 mov	 ecx, edi
  0004c	d9 1c 24	 fstp	 DWORD PTR [esp]
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 48   : 	pGrp->ClearAllActionAni( FLOAT100, true );

  00055	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  0005a	89 45 f4	 mov	 DWORD PTR tv283[ebp], eax
  0005d	db 45 f4	 fild	 DWORD PTR tv283[ebp]
  00060	6a 01		 push	 1
  00062	85 c0		 test	 eax, eax
  00064	79 06		 jns	 SHORT $LN31@StartBuff
  00066	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN31@StartBuff:
  0006c	51		 push	 ecx
  0006d	8b cf		 mov	 ecx, edi
  0006f	d9 1c 24	 fstp	 DWORD PTR [esp]
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 49   : 
; 50   : 	float fTimeRate = FLOAT1;

  00078	b8 01 00 00 00	 mov	 eax, 1
  0007d	89 45 f4	 mov	 DWORD PTR tv278[ebp], eax
  00080	db 45 f4	 fild	 DWORD PTR tv278[ebp]
  00083	85 c0		 test	 eax, eax
  00085	79 06		 jns	 SHORT $LN32@StartBuff
  00087	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN32@StartBuff:

; 51   : 	if( m_fPushBackTimeRate > 0.0f )

  0008d	f3 0f 10 8e 7c
	09 00 00	 movss	 xmm1, DWORD PTR [esi+2428]
  00095	d9 5d fc	 fstp	 DWORD PTR _fTimeRate$[ebp]
  00098	0f 57 c0	 xorps	 xmm0, xmm0
  0009b	0f 2f c8	 comiss	 xmm1, xmm0
  0009e	76 05		 jbe	 SHORT $LN2@StartBuff

; 52   : 	{
; 53   : 		fTimeRate = m_fPushBackTimeRate;

  000a0	f3 0f 11 4d fc	 movss	 DWORD PTR _fTimeRate$[ebp], xmm1
$LN2@StartBuff:

; 54   : 	}
; 55   : 
; 56   : 	pGrp->SetActionAni( m_PushBackAnimation, FLOAT100, FLOAT100, FLOAT1, FLOAT1/fTimeRate );

  000a5	b8 01 00 00 00	 mov	 eax, 1
  000aa	8b c8		 mov	 ecx, eax
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	8b d0		 mov	 edx, eax
  000b3	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  000b8	89 45 f4	 mov	 DWORD PTR $T524897[ebp], eax
  000bb	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  000c0	6a 01		 push	 1
  000c2	6a 00		 push	 0
  000c4	83 ec 18	 sub	 esp, 24			; 00000018H
  000c7	89 4d f8	 mov	 DWORD PTR tv268[ebp], ecx
  000ca	db 45 f8	 fild	 DWORD PTR tv268[ebp]
  000cd	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  000d3	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  000d9	85 c9		 test	 ecx, ecx
  000db	79 06		 jns	 SHORT $LN33@StartBuff
  000dd	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN33@StartBuff:
  000e3	d8 75 fc	 fdiv	 DWORD PTR _fTimeRate$[ebp]
  000e6	d9 5d f8	 fstp	 DWORD PTR tv264[ebp]
  000e9	d9 45 f8	 fld	 DWORD PTR tv264[ebp]
  000ec	d9 5c 24 0c	 fstp	 DWORD PTR [esp+12]
  000f0	89 55 f8	 mov	 DWORD PTR tv262[ebp], edx
  000f3	db 45 f8	 fild	 DWORD PTR tv262[ebp]
  000f6	85 d2		 test	 edx, edx
  000f8	79 06		 jns	 SHORT $LN34@StartBuff
  000fa	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN34@StartBuff:
  00100	8b 4d f4	 mov	 ecx, DWORD PTR $T524897[ebp]
  00103	d9 5c 24 08	 fstp	 DWORD PTR [esp+8]
  00107	db 45 f4	 fild	 DWORD PTR $T524897[ebp]
  0010a	85 c9		 test	 ecx, ecx
  0010c	79 06		 jns	 SHORT $LN35@StartBuff
  0010e	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN35@StartBuff:
  00114	89 45 f4	 mov	 DWORD PTR tv257[ebp], eax
  00117	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  0011b	db 45 f4	 fild	 DWORD PTR tv257[ebp]
  0011e	85 c0		 test	 eax, eax
  00120	79 06		 jns	 SHORT $LN36@StartBuff
  00122	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN36@StartBuff:
  00128	d9 1c 24	 fstp	 DWORD PTR [esp]
  0012b	53		 push	 ebx
  0012c	8b cf		 mov	 ecx, edi
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetActionAni@ioEntityGroup@@QAE_NABVioHashString@@MMMMMM_N1@Z

; 57   : 	SetBuffDuration( pGrp->GetAnimationFullTime( iAniID ) * fTimeRate );

  00134	ff 75 f0	 push	 DWORD PTR _iAniID$[ebp]
  00137	8b cf		 mov	 ecx, edi
  00139	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationFullTime@ioEntityGroup@@QAEMH@Z
  0013f	d8 4d fc	 fmul	 DWORD PTR _fTimeRate$[ebp]
  00142	e8 00 00 00 00	 call	 __ftol2
  00147	50		 push	 eax
  00148	8b ce		 mov	 ecx, esi
  0014a	e8 00 00 00 00	 call	 ?SetBuffDuration@ioBuff@@IAEXK@Z ; ioBuff::SetBuffDuration

; 58   : 
; 59   : 	if( GetBuffDuration() > FLOAT100 )

  0014f	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00154	8b ce		 mov	 ecx, esi
  00156	8b f8		 mov	 edi, eax
  00158	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  0015d	89 45 f0	 mov	 DWORD PTR tv231[ebp], eax
  00160	db 45 f0	 fild	 DWORD PTR tv231[ebp]
  00163	85 c0		 test	 eax, eax
  00165	79 06		 jns	 SHORT $LN37@StartBuff
  00167	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN37@StartBuff:
  0016d	89 7d f0	 mov	 DWORD PTR tv227[ebp], edi
  00170	db 45 f0	 fild	 DWORD PTR tv227[ebp]
  00173	85 ff		 test	 edi, edi
  00175	79 06		 jns	 SHORT $LN38@StartBuff
  00177	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN38@StartBuff:
  0017d	d9 c9		 fxch	 ST(1)
  0017f	df f1		 fcomip	 ST(1)
  00181	dd d8		 fstp	 ST(0)
  00183	76 3d		 jbe	 SHORT $LN1@StartBuff

; 60   : 		SetBuffDuration( GetBuffDuration() - FLOAT100 );

  00185	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  0018a	8b ce		 mov	 ecx, esi
  0018c	8b f8		 mov	 edi, eax
  0018e	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  00193	89 45 f0	 mov	 DWORD PTR tv207[ebp], eax
  00196	db 45 f0	 fild	 DWORD PTR tv207[ebp]
  00199	85 c0		 test	 eax, eax
  0019b	79 06		 jns	 SHORT $LN39@StartBuff
  0019d	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN39@StartBuff:
  001a3	89 7d f0	 mov	 DWORD PTR tv193[ebp], edi
  001a6	db 45 f0	 fild	 DWORD PTR tv193[ebp]
  001a9	85 ff		 test	 edi, edi
  001ab	79 06		 jns	 SHORT $LN40@StartBuff
  001ad	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN40@StartBuff:
  001b3	de e9		 fsubp	 ST(1), ST(0)
  001b5	e8 00 00 00 00	 call	 __ftol2
  001ba	50		 push	 eax
  001bb	8b ce		 mov	 ecx, esi
  001bd	e8 00 00 00 00	 call	 ?SetBuffDuration@ioBuff@@IAEXK@Z ; ioBuff::SetBuffDuration
$LN1@StartBuff:

; 61   : 
; 62   : 	m_dwBuffEndTime = FRAMEGETTIME() + GetBuffDuration();

  001c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  001c8	8b c8		 mov	 ecx, eax
  001ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  001d0	8b ce		 mov	 ecx, esi
  001d2	8b f8		 mov	 edi, eax
  001d4	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  001d9	03 f8		 add	 edi, eax
  001db	8d 45 f0	 lea	 eax, DWORD PTR _value$524913[ebp]
  001de	50		 push	 eax
  001df	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  001e5	89 7d f0	 mov	 DWORD PTR _value$524913[ebp], edi
  001e8	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 63   : 	pOwner->SetState( CS_ETC_STATE );

  001ed	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  001f0	6a 01		 push	 1
  001f2	6a 0f		 push	 15			; 0000000fH
  001f4	8b cf		 mov	 ecx, edi
  001f6	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState

; 64   : 
; 65   : 	m_iEtcStateCnt = pOwner->GetCurEtcStateCnt();

  001fb	8b 87 ac 19 00
	00		 mov	 eax, DWORD PTR [edi+6572]
  00201	89 86 80 09 00
	00		 mov	 DWORD PTR [esi+2432], eax
$LN4@StartBuff:
  00207	5f		 pop	 edi
  00208	5e		 pop	 esi
  00209	5b		 pop	 ebx

; 66   : }

  0020a	c9		 leave
  0020b	c2 04 00	 ret	 4
?StartBuff@ioPushBackBuff@@UAEXPAVioBaseChar@@@Z ENDP	; ioPushBackBuff::StartBuff
_TEXT	ENDS
EXTRN	?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z:PROC ; ioBuff::ApplyStartBuff
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioPushBackBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_iAniID$ = -8						; size = 4
$T524961 = -4						; size = 4
_pOwner$ = 8						; size = 4
tv298 = 12						; size = 4
tv295 = 12						; size = 4
tv293 = 12						; size = 4
tv290 = 12						; size = 4
tv288 = 12						; size = 4
_dwGlobalTime$ = 12					; size = 4
tv319 = 16						; size = 4
tv314 = 16						; size = 4
tv309 = 16						; size = 4
tv235 = 16						; size = 4
tv223 = 16						; size = 4
tv211 = 16						; size = 4
tv197 = 16						; size = 4
_value$524977 = 16					; size = 4
_fTimeRate$ = 16					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioPushBackBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioPushBackBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 70   : 	if( !ioBuff::ApplyStartBuff( pOwner, dwGlobalTime, dwGapTime ) )

  00007	ff 75 10	 push	 DWORD PTR _dwGapTime$[ebp]
  0000a	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  00010	8b f1		 mov	 esi, ecx
  00012	57		 push	 edi
  00013	e8 00 00 00 00	 call	 ?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBuff::ApplyStartBuff
  00018	84 c0		 test	 al, al
  0001a	0f 84 fa 01 00
	00		 je	 $LN5@ApplyStart
$LN4@ApplyStart:

; 71   : 		return false;
; 72   : 
; 73   : 	ioEntityGroup *pGrp = pOwner->GetGroup();

  00020	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  00023	53		 push	 ebx

; 74   : 	int iAniID = pGrp->GetAnimationIdx( m_PushBackAnimation );

  00024	8d 9e 6c 09 00
	00		 lea	 ebx, DWORD PTR [esi+2412]
  0002a	53		 push	 ebx
  0002b	8b cf		 mov	 ecx, edi
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationIdx@ioEntityGroup@@QAEHABVioHashString@@@Z
  00033	89 45 f8	 mov	 DWORD PTR _iAniID$[ebp], eax

; 75   : 	if( iAniID == -1 )	return false;

  00036	83 f8 ff	 cmp	 eax, -1
  00039	75 07		 jne	 SHORT $LN3@ApplyStart
  0003b	32 c0		 xor	 al, al
  0003d	e9 d7 01 00 00	 jmp	 $LN31@ApplyStart
$LN3@ApplyStart:

; 76   : 
; 77   : 	pGrp->ClearAllLoopAni( FLOAT100, true );

  00042	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00047	89 45 10	 mov	 DWORD PTR tv319[ebp], eax
  0004a	db 45 10	 fild	 DWORD PTR tv319[ebp]
  0004d	6a 01		 push	 1
  0004f	85 c0		 test	 eax, eax
  00051	79 06		 jns	 SHORT $LN32@ApplyStart
  00053	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN32@ApplyStart:
  00059	51		 push	 ecx
  0005a	8b cf		 mov	 ecx, edi
  0005c	d9 1c 24	 fstp	 DWORD PTR [esp]
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllLoopAni@ioEntityGroup@@QAEXM_N@Z

; 78   : 	pGrp->ClearAllActionAni( FLOAT100, true );

  00065	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  0006a	89 45 10	 mov	 DWORD PTR tv314[ebp], eax
  0006d	db 45 10	 fild	 DWORD PTR tv314[ebp]
  00070	6a 01		 push	 1
  00072	85 c0		 test	 eax, eax
  00074	79 06		 jns	 SHORT $LN33@ApplyStart
  00076	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN33@ApplyStart:
  0007c	51		 push	 ecx
  0007d	8b cf		 mov	 ecx, edi
  0007f	d9 1c 24	 fstp	 DWORD PTR [esp]
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ClearAllActionAni@ioEntityGroup@@QAEXM_N@Z

; 79   : 
; 80   : 	float fTimeRate = FLOAT1;

  00088	b8 01 00 00 00	 mov	 eax, 1
  0008d	89 45 10	 mov	 DWORD PTR tv309[ebp], eax
  00090	db 45 10	 fild	 DWORD PTR tv309[ebp]
  00093	85 c0		 test	 eax, eax
  00095	79 06		 jns	 SHORT $LN34@ApplyStart
  00097	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN34@ApplyStart:

; 81   : 	if( m_fPushBackTimeRate > 0.0f )

  0009d	f3 0f 10 8e 7c
	09 00 00	 movss	 xmm1, DWORD PTR [esi+2428]
  000a5	d9 5d 10	 fstp	 DWORD PTR _fTimeRate$[ebp]
  000a8	0f 57 c0	 xorps	 xmm0, xmm0
  000ab	0f 2f c8	 comiss	 xmm1, xmm0
  000ae	76 05		 jbe	 SHORT $LN2@ApplyStart

; 82   : 	{
; 83   : 		fTimeRate = m_fPushBackTimeRate;

  000b0	f3 0f 11 4d 10	 movss	 DWORD PTR _fTimeRate$[ebp], xmm1
$LN2@ApplyStart:

; 84   : 	}
; 85   : 
; 86   : 	pGrp->SetActionAni( m_PushBackAnimation, FLOAT100, FLOAT100, FLOAT1, FLOAT1/fTimeRate );

  000b5	b8 01 00 00 00	 mov	 eax, 1
  000ba	8b c8		 mov	 ecx, eax
  000bc	b8 01 00 00 00	 mov	 eax, 1
  000c1	8b d0		 mov	 edx, eax
  000c3	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  000c8	89 45 fc	 mov	 DWORD PTR $T524961[ebp], eax
  000cb	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  000d0	6a 01		 push	 1
  000d2	6a 00		 push	 0
  000d4	83 ec 18	 sub	 esp, 24			; 00000018H
  000d7	89 4d 0c	 mov	 DWORD PTR tv298[ebp], ecx
  000da	db 45 0c	 fild	 DWORD PTR tv298[ebp]
  000dd	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  000e3	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  000e9	85 c9		 test	 ecx, ecx
  000eb	79 06		 jns	 SHORT $LN35@ApplyStart
  000ed	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN35@ApplyStart:
  000f3	d8 75 10	 fdiv	 DWORD PTR _fTimeRate$[ebp]
  000f6	d9 5d 0c	 fstp	 DWORD PTR tv295[ebp]
  000f9	d9 45 0c	 fld	 DWORD PTR tv295[ebp]
  000fc	d9 5c 24 0c	 fstp	 DWORD PTR [esp+12]
  00100	89 55 0c	 mov	 DWORD PTR tv293[ebp], edx
  00103	db 45 0c	 fild	 DWORD PTR tv293[ebp]
  00106	85 d2		 test	 edx, edx
  00108	79 06		 jns	 SHORT $LN36@ApplyStart
  0010a	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN36@ApplyStart:
  00110	8b 4d fc	 mov	 ecx, DWORD PTR $T524961[ebp]
  00113	d9 5c 24 08	 fstp	 DWORD PTR [esp+8]
  00117	db 45 fc	 fild	 DWORD PTR $T524961[ebp]
  0011a	85 c9		 test	 ecx, ecx
  0011c	79 06		 jns	 SHORT $LN37@ApplyStart
  0011e	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN37@ApplyStart:
  00124	89 45 0c	 mov	 DWORD PTR tv288[ebp], eax
  00127	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  0012b	db 45 0c	 fild	 DWORD PTR tv288[ebp]
  0012e	85 c0		 test	 eax, eax
  00130	79 06		 jns	 SHORT $LN38@ApplyStart
  00132	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN38@ApplyStart:
  00138	d9 1c 24	 fstp	 DWORD PTR [esp]
  0013b	53		 push	 ebx
  0013c	8b cf		 mov	 ecx, edi
  0013e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetActionAni@ioEntityGroup@@QAE_NABVioHashString@@MMMMMM_N1@Z

; 87   : 	SetBuffDuration( pGrp->GetAnimationFullTime( iAniID ) * fTimeRate );

  00144	ff 75 f8	 push	 DWORD PTR _iAniID$[ebp]
  00147	8b cf		 mov	 ecx, edi
  00149	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationFullTime@ioEntityGroup@@QAEMH@Z
  0014f	d8 4d 10	 fmul	 DWORD PTR _fTimeRate$[ebp]
  00152	e8 00 00 00 00	 call	 __ftol2
  00157	50		 push	 eax
  00158	8b ce		 mov	 ecx, esi
  0015a	e8 00 00 00 00	 call	 ?SetBuffDuration@ioBuff@@IAEXK@Z ; ioBuff::SetBuffDuration

; 88   : 
; 89   : 	if( GetBuffDuration() > FLOAT100 )

  0015f	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00164	8b ce		 mov	 ecx, esi
  00166	8b f8		 mov	 edi, eax
  00168	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  0016d	89 45 10	 mov	 DWORD PTR tv235[ebp], eax
  00170	db 45 10	 fild	 DWORD PTR tv235[ebp]
  00173	85 c0		 test	 eax, eax
  00175	79 06		 jns	 SHORT $LN39@ApplyStart
  00177	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN39@ApplyStart:
  0017d	89 7d 10	 mov	 DWORD PTR tv223[ebp], edi
  00180	db 45 10	 fild	 DWORD PTR tv223[ebp]
  00183	85 ff		 test	 edi, edi
  00185	79 06		 jns	 SHORT $LN40@ApplyStart
  00187	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN40@ApplyStart:
  0018d	d9 c9		 fxch	 ST(1)
  0018f	df f1		 fcomip	 ST(1)
  00191	dd d8		 fstp	 ST(0)
  00193	76 3d		 jbe	 SHORT $LN1@ApplyStart

; 90   : 		SetBuffDuration( GetBuffDuration() - FLOAT100 );

  00195	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  0019a	8b ce		 mov	 ecx, esi
  0019c	8b f8		 mov	 edi, eax
  0019e	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  001a3	89 45 10	 mov	 DWORD PTR tv211[ebp], eax
  001a6	db 45 10	 fild	 DWORD PTR tv211[ebp]
  001a9	85 c0		 test	 eax, eax
  001ab	79 06		 jns	 SHORT $LN41@ApplyStart
  001ad	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN41@ApplyStart:
  001b3	89 7d 10	 mov	 DWORD PTR tv197[ebp], edi
  001b6	db 45 10	 fild	 DWORD PTR tv197[ebp]
  001b9	85 ff		 test	 edi, edi
  001bb	79 06		 jns	 SHORT $LN42@ApplyStart
  001bd	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN42@ApplyStart:
  001c3	de e9		 fsubp	 ST(1), ST(0)
  001c5	e8 00 00 00 00	 call	 __ftol2
  001ca	50		 push	 eax
  001cb	8b ce		 mov	 ecx, esi
  001cd	e8 00 00 00 00	 call	 ?SetBuffDuration@ioBuff@@IAEXK@Z ; ioBuff::SetBuffDuration
$LN1@ApplyStart:

; 91   : 
; 92   : 	m_dwBuffEndTime = FRAMEGETTIME() + GetBuffDuration();

  001d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  001d8	8b c8		 mov	 ecx, eax
  001da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  001e0	8b ce		 mov	 ecx, esi
  001e2	8b f8		 mov	 edi, eax
  001e4	e8 00 00 00 00	 call	 ?GetBuffDuration@ioBuff@@IAEKXZ ; ioBuff::GetBuffDuration
  001e9	03 f8		 add	 edi, eax
  001eb	8d 45 10	 lea	 eax, DWORD PTR _value$524977[ebp]
  001ee	50		 push	 eax
  001ef	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  001f5	89 7d 10	 mov	 DWORD PTR _value$524977[ebp], edi
  001f8	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@K@@AAEXPBD@Z ; CEncrypt<unsigned long>::EncryptValueToPool

; 93   : 	pOwner->SetState( CS_ETC_STATE );

  001fd	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00200	6a 01		 push	 1
  00202	6a 0f		 push	 15			; 0000000fH
  00204	8b cf		 mov	 ecx, edi
  00206	e8 00 00 00 00	 call	 ?SetState@ioBaseChar@@QAEXH_N@Z ; ioBaseChar::SetState

; 94   : 
; 95   : 	m_iEtcStateCnt = pOwner->GetCurEtcStateCnt();

  0020b	8b 87 ac 19 00
	00		 mov	 eax, DWORD PTR [edi+6572]
  00211	89 86 80 09 00
	00		 mov	 DWORD PTR [esi+2432], eax

; 96   : 	return true;

  00217	b0 01		 mov	 al, 1
$LN31@ApplyStart:
  00219	5b		 pop	 ebx
$LN5@ApplyStart:
  0021a	5f		 pop	 edi
  0021b	5e		 pop	 esi

; 97   : }

  0021c	c9		 leave
  0021d	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioPushBackBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioPushBackBuff::ApplyStartBuff
_TEXT	ENDS
END
