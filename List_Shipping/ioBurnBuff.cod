; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioBurnBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	?IsMonsterHalfBoss@ioNpcChar@@QAE_NXZ		; ioNpcChar::IsMonsterHalfBoss
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionpcchar.h
;	COMDAT ?IsMonsterHalfBoss@ioNpcChar@@QAE_NXZ
_TEXT	SEGMENT
?IsMonsterHalfBoss@ioNpcChar@@QAE_NXZ PROC		; ioNpcChar::IsMonsterHalfBoss, COMDAT
; _this$ = ecx

; 305  : 	bool IsMonsterHalfBoss(){ return ( m_iBossMonsterType == NBT_HALF_BOSS ); }

  00000	33 c0		 xor	 eax, eax
  00002	83 b9 68 48 00
	00 01		 cmp	 DWORD PTR [ecx+18536], 1
  00009	0f 94 c0	 sete	 al
  0000c	c3		 ret	 0
?IsMonsterHalfBoss@ioNpcChar@@QAE_NXZ ENDP		; ioNpcChar::IsMonsterHalfBoss
_TEXT	ENDS
PUBLIC	?IsMonsterLastBoss@ioNpcChar@@QAE_NXZ		; ioNpcChar::IsMonsterLastBoss
; Function compile flags: /Ogsp
;	COMDAT ?IsMonsterLastBoss@ioNpcChar@@QAE_NXZ
_TEXT	SEGMENT
?IsMonsterLastBoss@ioNpcChar@@QAE_NXZ PROC		; ioNpcChar::IsMonsterLastBoss, COMDAT
; _this$ = ecx

; 306  : 	bool IsMonsterLastBoss(){ return ( m_iBossMonsterType == NBT_LAST_BOSS ); }

  00000	33 c0		 xor	 eax, eax
  00002	83 b9 68 48 00
	00 02		 cmp	 DWORD PTR [ecx+18536], 2
  00009	0f 94 c0	 sete	 al
  0000c	c3		 ret	 0
?IsMonsterLastBoss@ioNpcChar@@QAE_NXZ ENDP		; ioNpcChar::IsMonsterLastBoss
_TEXT	ENDS
PUBLIC	??_7ioBurnBuff@@6B@				; ioBurnBuff::`vftable'
PUBLIC	??0ioBurnBuff@@QAE@XZ				; ioBurnBuff::ioBurnBuff
PUBLIC	??_R4ioBurnBuff@@6B@				; ioBurnBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioBurnBuff@@@8				; ioBurnBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBurnBuff@@8				; ioBurnBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBurnBuff@@8				; ioBurnBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioBurnBuff@@8			; ioBurnBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioBurnBuff@@UAEXAAVioINILoader@@@Z ; ioBurnBuff::LoadProperty
PUBLIC	?Clone@ioBurnBuff@@UAEPAVioBuff@@XZ		; ioBurnBuff::Clone
PUBLIC	?StartBuff@ioBurnBuff@@UAEXPAVioBaseChar@@@Z	; ioBurnBuff::StartBuff
PUBLIC	?ApplyStartBuff@ioBurnBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBurnBuff::ApplyStartBuff
PUBLIC	?ProcessBuff@ioBurnBuff@@UAEXM@Z		; ioBurnBuff::ProcessBuff
PUBLIC	?EndBuff@ioBurnBuff@@UAEXXZ			; ioBurnBuff::EndBuff
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyExtraBuffInfo
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioBurnBuff@@UAEPAXI@Z:PROC			; ioBurnBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioburnbuff.cpp
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBurnBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBurnBuff@@8 DD FLAT:??_R0?AVioBurnBuff@@@8 ; ioBurnBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBurnBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioBurnBuff@@8
rdata$r	SEGMENT
??_R2ioBurnBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBurnBuff@@8	; ioBurnBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioBurnBuff@@8
rdata$r	SEGMENT
??_R3ioBurnBuff@@8 DD 00H				; ioBurnBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioBurnBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBurnBuff@@@8
_DATA	SEGMENT
??_R0?AVioBurnBuff@@@8 DD FLAT:??_7type_info@@6B@	; ioBurnBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBurnBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioBurnBuff@@6B@
rdata$r	SEGMENT
??_R4ioBurnBuff@@6B@ DD 00H				; ioBurnBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioBurnBuff@@@8
	DD	FLAT:??_R3ioBurnBuff@@8
rdata$r	ENDS
;	COMDAT ??_7ioBurnBuff@@6B@
CONST	SEGMENT
??_7ioBurnBuff@@6B@ DD FLAT:??_R4ioBurnBuff@@6B@	; ioBurnBuff::`vftable'
	DD	FLAT:?LoadProperty@ioBurnBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioBurnBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioBurnBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioBurnBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioBurnBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioBurnBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioBurnBuff@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioBurnBuff@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioBurnBuff@@QAE@XZ$0
__ehfuncinfo$??0ioBurnBuff@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioBurnBuff@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioBurnBuff@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioBurnBuff@@QAE@XZ PROC				; ioBurnBuff::ioBurnBuff, COMDAT
; _this$ = ecx

; 9    : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioBurnBuff@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff
  00016	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001a	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioBurnBuff@@6B@
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ

; 10   : }

  0002c	8b c6		 mov	 eax, esi
  0002e	e8 00 00 00 00	 call	 __EH_epilog3
  00033	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioBurnBuff@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??0ioBurnBuff@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioBurnBuff@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioBurnBuff@@QAE@XZ ENDP				; ioBurnBuff::ioBurnBuff
PUBLIC	??0ioBurnBuff@@QAE@ABV0@@Z			; ioBurnBuff::ioBurnBuff
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioBurnBuff@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioBurnBuff@@QAE@ABV0@@Z$0
__ehfuncinfo$??0ioBurnBuff@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioBurnBuff@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioBurnBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioBurnBuff@@QAE@ABV0@@Z PROC				; ioBurnBuff::ioBurnBuff, COMDAT
; _this$ = ecx

; 24   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioBurnBuff@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	8d 87 6c 09 00
	00		 lea	 eax, DWORD PTR [edi+2412]
  00024	50		 push	 eax
  00025	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  0002b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioBurnBuff@@6B@
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00037	8b 87 7c 09 00
	00		 mov	 eax, DWORD PTR [edi+2428]
  0003d	89 86 7c 09 00
	00		 mov	 DWORD PTR [esi+2428], eax
  00043	8b 87 80 09 00
	00		 mov	 eax, DWORD PTR [edi+2432]
  00049	89 86 80 09 00
	00		 mov	 DWORD PTR [esi+2432], eax
  0004f	8b 87 84 09 00
	00		 mov	 eax, DWORD PTR [edi+2436]
  00055	89 86 84 09 00
	00		 mov	 DWORD PTR [esi+2436], eax
  0005b	8b 87 88 09 00
	00		 mov	 eax, DWORD PTR [edi+2440]
  00061	89 86 88 09 00
	00		 mov	 DWORD PTR [esi+2440], eax
  00067	8b 87 8c 09 00
	00		 mov	 eax, DWORD PTR [edi+2444]
  0006d	89 86 8c 09 00
	00		 mov	 DWORD PTR [esi+2444], eax
  00073	8b 87 90 09 00
	00		 mov	 eax, DWORD PTR [edi+2448]
  00079	89 86 90 09 00
	00		 mov	 DWORD PTR [esi+2448], eax
  0007f	8b 87 94 09 00
	00		 mov	 eax, DWORD PTR [edi+2452]
  00085	89 86 94 09 00
	00		 mov	 DWORD PTR [esi+2452], eax
  0008b	8b 87 98 09 00
	00		 mov	 eax, DWORD PTR [edi+2456]
  00091	89 86 98 09 00
	00		 mov	 DWORD PTR [esi+2456], eax
  00097	8a 87 9c 09 00
	00		 mov	 al, BYTE PTR [edi+2460]
  0009d	88 86 9c 09 00
	00		 mov	 BYTE PTR [esi+2460], al

; 25   : }

  000a3	8b c6		 mov	 eax, esi
  000a5	e8 00 00 00 00	 call	 __EH_epilog3
  000aa	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioBurnBuff@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??0ioBurnBuff@@QAE@ABV0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioBurnBuff@@QAE@ABV0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioBurnBuff@@QAE@ABV0@@Z ENDP				; ioBurnBuff::ioBurnBuff
PUBLIC	??1ioBurnBuff@@UAE@XZ				; ioBurnBuff::~ioBurnBuff
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioBurnBuff@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioBurnBuff@@UAE@XZ$0
__ehfuncinfo$??1ioBurnBuff@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ioBurnBuff@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioBurnBuff@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioBurnBuff@@UAE@XZ PROC				; ioBurnBuff::~ioBurnBuff, COMDAT
; _this$ = ecx

; 28   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioBurnBuff@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioBurnBuff@@6B@
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 29   : }

  0001b	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00027	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  00032	e8 00 00 00 00	 call	 __EH_epilog3
  00037	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioBurnBuff@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??1ioBurnBuff@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioBurnBuff@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioBurnBuff@@UAE@XZ ENDP				; ioBurnBuff::~ioBurnBuff
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioBurnBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioBurnBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioBurnBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioBurnBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioBurnBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T526289 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioBurnBuff@@UAEPAVioBuff@@XZ PROC		; ioBurnBuff::Clone, COMDAT
; _this$ = ecx

; 76   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioBurnBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 77   : 	return new ioBurnBuff( *this );

  0000e	68 a0 09 00 00	 push	 2464			; 000009a0H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T526289[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioBurnBuff@@QAE@ABV0@@Z ; ioBurnBuff::ioBurnBuff
$LN3@Clone:

; 78   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioBurnBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T526289[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioBurnBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioBurnBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioBurnBuff@@UAEPAVioBuff@@XZ ENDP		; ioBurnBuff::Clone
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
EXTRN	?RemoveMaterialModifyExcept@ioBaseChar@@QAEXABVioHashString@@@Z:PROC ; ioBaseChar::RemoveMaterialModifyExcept
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?EndBuff@ioBurnBuff@@UAEXXZ
_TEXT	SEGMENT
?EndBuff@ioBurnBuff@@UAEXXZ PROC			; ioBurnBuff::EndBuff, COMDAT
; _this$ = ecx

; 137  : {

  00000	53		 push	 ebx
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 138  : 	if( !m_AddEntity.IsEmpty() )

  00004	8d 9f 6c 09 00
	00		 lea	 ebx, DWORD PTR [edi+2412]
  0000a	8b cb		 mov	 ecx, ebx
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00012	84 c0		 test	 al, al
  00014	75 1a		 jne	 SHORT $LN1@EndBuff

; 139  : 	{
; 140  : 		m_pOwner->DestroyEntity( m_AddEntity );

  00016	8b 8f 74 02 00
	00		 mov	 ecx, DWORD PTR [edi+628]
  0001c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001e	56		 push	 esi
  0001f	53		 push	 ebx
  00020	ff 50 30	 call	 DWORD PTR [eax+48]

; 141  : 		m_pOwner->RemoveMaterialModifyExcept( m_AddEntity );

  00023	8b 8f 74 02 00
	00		 mov	 ecx, DWORD PTR [edi+628]
  00029	53		 push	 ebx
  0002a	e8 00 00 00 00	 call	 ?RemoveMaterialModifyExcept@ioBaseChar@@QAEXABVioHashString@@@Z ; ioBaseChar::RemoveMaterialModifyExcept
  0002f	5e		 pop	 esi
$LN1@EndBuff:

; 142  : 	}
; 143  : 
; 144  : 	ioBuff::EndBuff();

  00030	8b cf		 mov	 ecx, edi
  00032	5f		 pop	 edi
  00033	5b		 pop	 ebx
  00034	e9 00 00 00 00	 jmp	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff
?EndBuff@ioBurnBuff@@UAEXXZ ENDP			; ioBurnBuff::EndBuff
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	??_R0?AVioGameEntity@@@8			; ioGameEntity `RTTI Type Descriptor'
PUBLIC	??_R0?AVioPlayEntity@@@8			; ioPlayEntity `RTTI Type Descriptor'
PUBLIC	?ToPlayEntity@@YAPAVioPlayEntity@@PAVioGameEntity@@@Z ; ToPlayEntity
EXTRN	___RTDynamicCast:PROC
;	COMDAT ??_R0?AVioGameEntity@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioplayentity.h
_DATA	SEGMENT
??_R0?AVioGameEntity@@@8 DD FLAT:??_7type_info@@6B@	; ioGameEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioGameEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVioPlayEntity@@@8
_DATA	SEGMENT
??_R0?AVioPlayEntity@@@8 DD FLAT:??_7type_info@@6B@	; ioPlayEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioPlayEntity@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ToPlayEntity@@YAPAVioPlayEntity@@PAVioGameEntity@@@Z
_TEXT	SEGMENT
_pObj$ = 8						; size = 4
?ToPlayEntity@@YAPAVioPlayEntity@@PAVioGameEntity@@@Z PROC ; ToPlayEntity, COMDAT

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 122  : 	if( !pObj || pObj->GetTypeID() != ioGameEntity::GET_PLAY_ENTITY )

  00004	8b 75 08	 mov	 esi, DWORD PTR _pObj$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 25		 je	 SHORT $LN1@ToPlayEnti
  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 50 10	 call	 DWORD PTR [eax+16]
  00012	83 f8 01	 cmp	 eax, 1
  00015	75 19		 jne	 SHORT $LN1@ToPlayEnti

; 124  : 
; 125  : 	return dynamic_cast< ioPlayEntity* >( pObj );

  00017	6a 00		 push	 0
  00019	68 00 00 00 00	 push	 OFFSET ??_R0?AVioPlayEntity@@@8
  0001e	68 00 00 00 00	 push	 OFFSET ??_R0?AVioGameEntity@@@8
  00023	6a 00		 push	 0
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ___RTDynamicCast
  0002b	83 c4 14	 add	 esp, 20			; 00000014H
  0002e	eb 02		 jmp	 SHORT $LN3@ToPlayEnti
$LN1@ToPlayEnti:

; 123  : 		return NULL;

  00030	33 c0		 xor	 eax, eax
$LN3@ToPlayEnti:
  00032	5e		 pop	 esi

; 126  : }

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?ToPlayEntity@@YAPAVioPlayEntity@@PAVioGameEntity@@@Z ENDP ; ToPlayEntity
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
_TEXT	ENDS
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z	; CEncrypt<unsigned long>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z PROC	; CEncrypt<unsigned long>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1256 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1257 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1258 : 		*value = *((DWORD*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 1259 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ENDP	; CEncrypt<unsigned long>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z	; CEncrypt<bool>::DecryptValueToPool
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z PROC	; CEncrypt<bool>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 219  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 220  : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 221  : 		*value = *((bool*)m_TempMem);

  00016	8a 06		 mov	 al, BYTE PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	88 01		 mov	 BYTE PTR [ecx], al
  0001d	5e		 pop	 esi

; 222  : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ENDP	; CEncrypt<bool>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	??_R0?AVioBaseChar@@@8				; ioBaseChar `RTTI Type Descriptor'
PUBLIC	?ToBaseChar@@YAPAVioBaseChar@@PAVioGameEntity@@@Z ; ToBaseChar
;	COMDAT ??_R0?AVioBaseChar@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
_DATA	SEGMENT
??_R0?AVioBaseChar@@@8 DD FLAT:??_7type_info@@6B@	; ioBaseChar `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBaseChar@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ToBaseChar@@YAPAVioBaseChar@@PAVioGameEntity@@@Z
_TEXT	SEGMENT
_pObj$ = 8						; size = 4
?ToBaseChar@@YAPAVioBaseChar@@PAVioGameEntity@@@Z PROC	; ToBaseChar, COMDAT

; 4326 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4327 : 	ioPlayEntity *pPlay = ToPlayEntity( pObj );

  00004	ff 75 08	 push	 DWORD PTR _pObj$[ebp]
  00007	e8 00 00 00 00	 call	 ?ToPlayEntity@@YAPAVioPlayEntity@@PAVioGameEntity@@@Z ; ToPlayEntity
  0000c	8b f0		 mov	 esi, eax
  0000e	59		 pop	 ecx

; 4328 : 	if( !pPlay || pPlay->GetSubType() != ioPlayEntity::PST_CHAR )

  0000f	85 f6		 test	 esi, esi
  00011	74 25		 je	 SHORT $LN1@ToBaseChar
  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	8b ce		 mov	 ecx, esi
  00017	ff 90 a4 00 00
	00		 call	 DWORD PTR [eax+164]
  0001d	85 c0		 test	 eax, eax
  0001f	75 17		 jne	 SHORT $LN1@ToBaseChar

; 4330 : 
; 4331 : 	return dynamic_cast< ioBaseChar* >( pPlay );

  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET ??_R0?AVioBaseChar@@@8
  00027	68 00 00 00 00	 push	 OFFSET ??_R0?AVioPlayEntity@@@8
  0002c	50		 push	 eax
  0002d	56		 push	 esi
  0002e	e8 00 00 00 00	 call	 ___RTDynamicCast
  00033	83 c4 14	 add	 esp, 20			; 00000014H
  00036	eb 02		 jmp	 SHORT $LN3@ToBaseChar
$LN1@ToBaseChar:

; 4329 : 		return NULL;

  00038	33 c0		 xor	 eax, eax
$LN3@ToBaseChar:
  0003a	5e		 pop	 esi

; 4332 : }

  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?ToBaseChar@@YAPAVioBaseChar@@PAVioGameEntity@@@Z ENDP	; ToBaseChar
_TEXT	ENDS
PUBLIC	??_R0?AVioNpcChar@@@8				; ioNpcChar `RTTI Type Descriptor'
PUBLIC	?ToNpcChar@@YAPAVioNpcChar@@PAVioGameEntity@@@Z	; ToNpcChar
;	COMDAT ??_R0?AVioNpcChar@@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ionpcchar.h
_DATA	SEGMENT
??_R0?AVioNpcChar@@@8 DD FLAT:??_7type_info@@6B@	; ioNpcChar `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioNpcChar@@', 00H
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?ToNpcChar@@YAPAVioNpcChar@@PAVioGameEntity@@@Z
_TEXT	SEGMENT
_pObj$ = 8						; size = 4
?ToNpcChar@@YAPAVioNpcChar@@PAVioGameEntity@@@Z PROC	; ToNpcChar, COMDAT

; 361  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 362  : 	ioBaseChar *pChar = ToBaseChar( pObj );

  00004	ff 75 08	 push	 DWORD PTR _pObj$[ebp]
  00007	e8 00 00 00 00	 call	 ?ToBaseChar@@YAPAVioBaseChar@@PAVioGameEntity@@@Z ; ToBaseChar
  0000c	8b f0		 mov	 esi, eax
  0000e	59		 pop	 ecx

; 363  : 	if( !pChar || pChar->GetControlType() != CONTROL_AI )

  0000f	85 f6		 test	 esi, esi
  00011	74 28		 je	 SHORT $LN1@ToNpcChar
  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	8b ce		 mov	 ecx, esi
  00017	ff 90 ec 00 00
	00		 call	 DWORD PTR [eax+236]
  0001d	83 f8 02	 cmp	 eax, 2
  00020	75 19		 jne	 SHORT $LN1@ToNpcChar

; 365  : 
; 366  : 	return dynamic_cast< ioNpcChar* >(pChar);

  00022	6a 00		 push	 0
  00024	68 00 00 00 00	 push	 OFFSET ??_R0?AVioNpcChar@@@8
  00029	68 00 00 00 00	 push	 OFFSET ??_R0?AVioBaseChar@@@8
  0002e	6a 00		 push	 0
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 ___RTDynamicCast
  00036	83 c4 14	 add	 esp, 20			; 00000014H
  00039	eb 02		 jmp	 SHORT $LN3@ToNpcChar
$LN1@ToNpcChar:

; 364  : 		return NULL;

  0003b	33 c0		 xor	 eax, eax
$LN3@ToNpcChar:
  0003d	5e		 pop	 esi

; 367  : }

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?ToNpcChar@@YAPAVioNpcChar@@PAVioGameEntity@@@Z ENDP	; ToNpcChar
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioBurnBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioBurnBuff@@UAEPAXI@Z PROC				; ioBurnBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioBurnBuff@@UAE@XZ	; ioBurnBuff::~ioBurnBuff
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioBurnBuff@@UAEPAXI@Z ENDP				; ioBurnBuff::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?GetMaxTime@ioBurnBuff@@IAEKXZ			; ioBurnBuff::GetMaxTime
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioburnbuff.cpp
;	COMDAT ?GetMaxTime@ioBurnBuff@@IAEKXZ
_TEXT	SEGMENT
?GetMaxTime@ioBurnBuff@@IAEKXZ PROC			; ioBurnBuff::GetMaxTime, COMDAT
; _this$ = ecx

; 53   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 54   : 	ioNpcChar *pNpc = ToNpcChar( m_pOwner );

  00004	ff b7 74 02 00
	00		 push	 DWORD PTR [edi+628]
  0000a	e8 00 00 00 00	 call	 ?ToNpcChar@@YAPAVioNpcChar@@PAVioGameEntity@@@Z ; ToNpcChar
  0000f	8b f0		 mov	 esi, eax
  00011	59		 pop	 ecx

; 55   : 	if( !pNpc || pNpc->GetNpcType() == NT_DEVELOPER_K )

  00012	85 f6		 test	 esi, esi
  00014	74 2f		 je	 SHORT $LN3@GetMaxTime
  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b ce		 mov	 ecx, esi
  0001a	ff 90 98 01 00
	00		 call	 DWORD PTR [eax+408]
  00020	83 f8 01	 cmp	 eax, 1
  00023	74 20		 je	 SHORT $LN3@GetMaxTime

; 57   : 
; 58   : 	if( pNpc->IsMonsterLastBoss() || pNpc->IsMonsterHalfBoss() )

  00025	8b b6 68 48 00
	00		 mov	 esi, DWORD PTR [esi+18536]
  0002b	83 fe 02	 cmp	 esi, 2
  0002e	74 0d		 je	 SHORT $LN1@GetMaxTime
  00030	83 fe 01	 cmp	 esi, 1
  00033	74 08		 je	 SHORT $LN1@GetMaxTime

; 60   : 	return m_dwMaxTimeByNpc;

  00035	8b 87 84 09 00
	00		 mov	 eax, DWORD PTR [edi+2436]
  0003b	eb 0e		 jmp	 SHORT $LN5@GetMaxTime
$LN1@GetMaxTime:

; 59   : 		return m_dwMaxTimeByBossNpc;

  0003d	8b 87 8c 09 00
	00		 mov	 eax, DWORD PTR [edi+2444]
  00043	eb 06		 jmp	 SHORT $LN5@GetMaxTime
$LN3@GetMaxTime:

; 56   : 		return m_dwMaxTime;

  00045	8b 87 7c 09 00
	00		 mov	 eax, DWORD PTR [edi+2428]
$LN5@GetMaxTime:
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi

; 61   : }

  0004d	c3		 ret	 0
?GetMaxTime@ioBurnBuff@@IAEKXZ ENDP			; ioBurnBuff::GetMaxTime
_TEXT	ENDS
PUBLIC	?GetMinTime@ioBurnBuff@@IAEKXZ			; ioBurnBuff::GetMinTime
; Function compile flags: /Ogsp
;	COMDAT ?GetMinTime@ioBurnBuff@@IAEKXZ
_TEXT	SEGMENT
?GetMinTime@ioBurnBuff@@IAEKXZ PROC			; ioBurnBuff::GetMinTime, COMDAT
; _this$ = ecx

; 64   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 65   : 	ioNpcChar *pNpc = ToNpcChar( m_pOwner );

  00004	ff b7 74 02 00
	00		 push	 DWORD PTR [edi+628]
  0000a	e8 00 00 00 00	 call	 ?ToNpcChar@@YAPAVioNpcChar@@PAVioGameEntity@@@Z ; ToNpcChar
  0000f	8b f0		 mov	 esi, eax
  00011	59		 pop	 ecx

; 66   : 	if( !pNpc || pNpc->GetNpcType() == NT_DEVELOPER_K )

  00012	85 f6		 test	 esi, esi
  00014	74 2f		 je	 SHORT $LN3@GetMinTime
  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b ce		 mov	 ecx, esi
  0001a	ff 90 98 01 00
	00		 call	 DWORD PTR [eax+408]
  00020	83 f8 01	 cmp	 eax, 1
  00023	74 20		 je	 SHORT $LN3@GetMinTime

; 68   : 
; 69   : 	if( pNpc->IsMonsterLastBoss() || pNpc->IsMonsterHalfBoss() )

  00025	8b b6 68 48 00
	00		 mov	 esi, DWORD PTR [esi+18536]
  0002b	83 fe 02	 cmp	 esi, 2
  0002e	74 0d		 je	 SHORT $LN1@GetMinTime
  00030	83 fe 01	 cmp	 esi, 1
  00033	74 08		 je	 SHORT $LN1@GetMinTime

; 71   : 
; 72   : 	return m_dwMinTimeByNpc;

  00035	8b 87 88 09 00
	00		 mov	 eax, DWORD PTR [edi+2440]
  0003b	eb 0e		 jmp	 SHORT $LN5@GetMinTime
$LN1@GetMinTime:

; 70   : 		return m_dwMinTimeByBossNpc;

  0003d	8b 87 90 09 00
	00		 mov	 eax, DWORD PTR [edi+2448]
  00043	eb 06		 jmp	 SHORT $LN5@GetMinTime
$LN3@GetMinTime:

; 67   : 		return m_dwMinTime;

  00045	8b 87 80 09 00
	00		 mov	 eax, DWORD PTR [edi+2432]
$LN5@GetMinTime:
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi

; 73   : }

  0004d	c3		 ret	 0
?GetMinTime@ioBurnBuff@@IAEKXZ ENDP			; ioBurnBuff::GetMinTime
_TEXT	ENDS
EXTRN	?SetFlameStateValue@ioBaseChar@@QAEXKK@Z:PROC	; ioBaseChar::SetFlameStateValue
EXTRN	?AddMaterialModifyExcept@ioBaseChar@@QAEXABVioHashString@@@Z:PROC ; ioBaseChar::AddMaterialModifyExcept
EXTRN	?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z:PROC ; ioBuff::ApplyStartBuff
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioBurnBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioBurnBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioBurnBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 101  : 	if( !ioBuff::ApplyStartBuff( pOwner, dwGlobalTime, dwGapTime ) )

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _pOwner$[ebp]
  00007	57		 push	 edi
  00008	ff 75 10	 push	 DWORD PTR _dwGapTime$[ebp]
  0000b	8b f9		 mov	 edi, ecx
  0000d	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  00010	53		 push	 ebx
  00011	e8 00 00 00 00	 call	 ?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBuff::ApplyStartBuff
  00016	84 c0		 test	 al, al
  00018	74 3d		 je	 SHORT $LN3@ApplyStart
$LN2@ApplyStart:
  0001a	56		 push	 esi

; 102  : 		return false;
; 103  : 
; 104  : 	if( !m_AddEntity.IsEmpty() )

  0001b	8d b7 6c 09 00
	00		 lea	 esi, DWORD PTR [edi+2412]
  00021	8b ce		 mov	 ecx, esi
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00029	84 c0		 test	 al, al
  0002b	75 10		 jne	 SHORT $LN1@ApplyStart

; 105  : 	{
; 106  : 		pOwner->AddEntity( m_AddEntity );

  0002d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0002f	56		 push	 esi
  00030	8b cb		 mov	 ecx, ebx
  00032	ff 50 2c	 call	 DWORD PTR [eax+44]

; 107  : 		pOwner->AddMaterialModifyExcept( m_AddEntity );

  00035	56		 push	 esi
  00036	8b cb		 mov	 ecx, ebx
  00038	e8 00 00 00 00	 call	 ?AddMaterialModifyExcept@ioBaseChar@@QAEXABVioHashString@@@Z ; ioBaseChar::AddMaterialModifyExcept
$LN1@ApplyStart:

; 108  : 	}
; 109  : 
; 110  : 	pOwner->SetFlameStateValue( GetMinTime(), GetMaxTime() );

  0003d	8b cf		 mov	 ecx, edi
  0003f	e8 00 00 00 00	 call	 ?GetMaxTime@ioBurnBuff@@IAEKXZ ; ioBurnBuff::GetMaxTime
  00044	50		 push	 eax
  00045	8b cf		 mov	 ecx, edi
  00047	e8 00 00 00 00	 call	 ?GetMinTime@ioBurnBuff@@IAEKXZ ; ioBurnBuff::GetMinTime
  0004c	50		 push	 eax
  0004d	8b cb		 mov	 ecx, ebx
  0004f	e8 00 00 00 00	 call	 ?SetFlameStateValue@ioBaseChar@@QAEXKK@Z ; ioBaseChar::SetFlameStateValue

; 111  : 
; 112  : 	return true;

  00054	b0 01		 mov	 al, 1
  00056	5e		 pop	 esi
$LN3@ApplyStart:
  00057	5f		 pop	 edi
  00058	5b		 pop	 ebx

; 113  : }

  00059	5d		 pop	 ebp
  0005a	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioBurnBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioBurnBuff::ApplyStartBuff
_TEXT	ENDS
PUBLIC	??N?$CEncrypt@K@@QAE_NABK@Z			; CEncrypt<unsigned long>::operator<=
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??N?$CEncrypt@K@@QAE_NABK@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??N?$CEncrypt@K@@QAE_NABK@Z PROC			; CEncrypt<unsigned long>::operator<=, COMDAT
; _this$ = ecx

; 1431 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1432 : 		
; 1433 : 		type value;
; 1434 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool

; 1435 : #ifdef _NOTUSE
; 1436 : 		Debug();
; 1437 : #endif
; 1438 : 		return (value <= inValue);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	3b 45 fc	 cmp	 eax, DWORD PTR _value$[ebp]
  00015	1b c0		 sbb	 eax, eax
  00017	40		 inc	 eax

; 1439 : 	}		

  00018	c9		 leave
  00019	c2 04 00	 ret	 4
??N?$CEncrypt@K@@QAE_NABK@Z ENDP			; CEncrypt<unsigned long>::operator<=
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$08@ioINILoader@@QAEXAAY08$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<9>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadString_e@$08@ioINILoader@@QAEXAAY08$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 9
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$08@ioINILoader@@QAEXAAY08$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<9>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	84 d2		 test	 dl, dl
  0001f	0f 84 ee 00 00
	00		 je	 $LN96@LoadString
  00025	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00028	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  0002b	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002e	84 d2		 test	 dl, dl
  00030	0f 84 d7 00 00
	00		 je	 $LN95@LoadString
  00036	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00039	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  0003c	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003f	84 d2		 test	 dl, dl
  00041	0f 84 c0 00 00
	00		 je	 $LN94@LoadString
  00047	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004a	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  0004d	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00050	84 d2		 test	 dl, dl
  00052	0f 84 a9 00 00
	00		 je	 $LN93@LoadString
  00058	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005b	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  0005e	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00061	84 d2		 test	 dl, dl
  00063	0f 84 92 00 00
	00		 je	 $LN92@LoadString
  00069	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006c	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006f	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00072	84 d2		 test	 dl, dl
  00074	74 7f		 je	 SHORT $LN91@LoadString
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	74 6c		 je	 SHORT $LN90@LoadString
  00083	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00086	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00089	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008c	84 d2		 test	 dl, dl
  0008e	74 59		 je	 SHORT $LN89@LoadString
  00090	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00093	80 78 08 00	 cmp	 BYTE PTR [eax+8], 0
  00097	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009a	74 7b		 je	 SHORT $LN1@LoadString
  0009c	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  0009f	84 d2		 test	 dl, dl
  000a1	74 40		 je	 SHORT $LN87@LoadString
  000a3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000a6	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000a9	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ac	84 d2		 test	 dl, dl
  000ae	74 2d		 je	 SHORT $LN86@LoadString
  000b0	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000b3	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000b6	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000b9	84 d2		 test	 dl, dl
  000bb	74 1a		 je	 SHORT $LN85@LoadString
  000bd	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  000c0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000c3	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000c6	84 c0		 test	 al, al
  000c8	74 07		 je	 SHORT $LN84@LoadString
  000ca	34 ed		 xor	 al, -19			; ffffffedH
  000cc	88 45 f8	 mov	 BYTE PTR __k$[ebp+12], al
  000cf	eb 46		 jmp	 SHORT $LN1@LoadString
$LN84@LoadString:
  000d1	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  000d5	eb 40		 jmp	 SHORT $LN1@LoadString
$LN85@LoadString:
  000d7	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  000db	eb 3a		 jmp	 SHORT $LN1@LoadString
$LN86@LoadString:
  000dd	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  000e1	eb 34		 jmp	 SHORT $LN1@LoadString
$LN87@LoadString:
  000e3	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  000e7	eb 2e		 jmp	 SHORT $LN1@LoadString
$LN89@LoadString:
  000e9	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  000ed	eb 28		 jmp	 SHORT $LN1@LoadString
$LN90@LoadString:
  000ef	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  000f3	eb 22		 jmp	 SHORT $LN1@LoadString
$LN91@LoadString:
  000f5	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  000f9	eb 1c		 jmp	 SHORT $LN1@LoadString
$LN92@LoadString:
  000fb	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  000ff	eb 16		 jmp	 SHORT $LN1@LoadString
$LN93@LoadString:
  00101	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00105	eb 10		 jmp	 SHORT $LN1@LoadString
$LN94@LoadString:
  00107	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0010b	eb 0a		 jmp	 SHORT $LN1@LoadString
$LN95@LoadString:
  0010d	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00111	eb 04		 jmp	 SHORT $LN1@LoadString
$LN96@LoadString:
  00113	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadString:
  00117	6a 02		 push	 2
  00119	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0011c	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+8], 0
  00120	5a		 pop	 edx
$LL104@LoadString:
  00121	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00127	83 c0 04	 add	 eax, 4
  0012a	4a		 dec	 edx
  0012b	75 f4		 jne	 SHORT $LL104@LoadString

; 163  : 		LoadString(_k, d, b, i);

  0012d	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00130	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00133	57		 push	 edi
  00134	56		 push	 esi
  00135	50		 push	 eax
  00136	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  0013c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013f	5f		 pop	 edi
  00140	33 cd		 xor	 ecx, ebp
  00142	5e		 pop	 esi
  00143	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00148	c9		 leave
  00149	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$08@ioINILoader@@QAEXAAY08$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<9>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$08@ioINILoader@@QAEHAAY08$$CBDH@Z	; ioINILoader::LoadInt_e<9>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$08@ioINILoader@@QAEHAAY08$$CBDH@Z
_TEXT	SEGMENT
__k$ = -20						; size = 9
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$08@ioINILoader@@QAEHAAY08$$CBDH@Z PROC	; ioINILoader::LoadInt_e<9>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	84 d2		 test	 dl, dl
  00017	0f 84 ee 00 00
	00		 je	 $LN96@LoadInt_e
  0001d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00020	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00023	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00026	84 d2		 test	 dl, dl
  00028	0f 84 d7 00 00
	00		 je	 $LN95@LoadInt_e
  0002e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00031	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00034	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00037	84 d2		 test	 dl, dl
  00039	0f 84 c0 00 00
	00		 je	 $LN94@LoadInt_e
  0003f	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00042	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00045	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00048	84 d2		 test	 dl, dl
  0004a	0f 84 a9 00 00
	00		 je	 $LN93@LoadInt_e
  00050	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00053	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00056	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00059	84 d2		 test	 dl, dl
  0005b	0f 84 92 00 00
	00		 je	 $LN92@LoadInt_e
  00061	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00064	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00067	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006a	84 d2		 test	 dl, dl
  0006c	74 7f		 je	 SHORT $LN91@LoadInt_e
  0006e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00071	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00074	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00077	84 d2		 test	 dl, dl
  00079	74 6c		 je	 SHORT $LN90@LoadInt_e
  0007b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0007e	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00081	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00084	84 d2		 test	 dl, dl
  00086	74 59		 je	 SHORT $LN89@LoadInt_e
  00088	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0008b	80 78 08 00	 cmp	 BYTE PTR [eax+8], 0
  0008f	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  00092	74 7b		 je	 SHORT $LN1@LoadInt_e
  00094	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  00097	84 d2		 test	 dl, dl
  00099	74 40		 je	 SHORT $LN87@LoadInt_e
  0009b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0009e	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000a1	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000a4	84 d2		 test	 dl, dl
  000a6	74 2d		 je	 SHORT $LN86@LoadInt_e
  000a8	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ab	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000ae	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000b1	84 d2		 test	 dl, dl
  000b3	74 1a		 je	 SHORT $LN85@LoadInt_e
  000b5	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  000b8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000bb	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000be	84 c0		 test	 al, al
  000c0	74 07		 je	 SHORT $LN84@LoadInt_e
  000c2	34 ed		 xor	 al, -19			; ffffffedH
  000c4	88 45 f8	 mov	 BYTE PTR __k$[ebp+12], al
  000c7	eb 46		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  000c9	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  000cd	eb 40		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  000cf	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  000d3	eb 3a		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  000d5	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  000d9	eb 34		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  000db	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  000df	eb 2e		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  000e1	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  000e5	eb 28		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  000e7	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  000eb	eb 22		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  000ed	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  000f1	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  000f3	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  000f7	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  000f9	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  000fd	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  000ff	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00103	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  00105	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00109	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  0010b	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  0010f	6a 02		 push	 2
  00111	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00114	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+8], 0
  00118	5a		 pop	 edx
$LL104@LoadInt_e:
  00119	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0011f	83 c0 04	 add	 eax, 4
  00122	4a		 dec	 edx
  00123	75 f4		 jne	 SHORT $LL104@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  00125	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00128	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0012b	50		 push	 eax
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00132	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00135	33 cd		 xor	 ecx, ebp
  00137	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013c	c9		 leave
  0013d	c2 08 00	 ret	 8
??$LoadInt_e@$08@ioINILoader@@QAEHAAY08$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<9>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0N@@ioINILoader@@QAEHAAY0N@$$CBDH@Z ; ioINILoader::LoadInt_e<13>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0N@@ioINILoader@@QAEHAAY0N@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -24						; size = 13
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0N@@ioINILoader@@QAEHAAY0N@$$CBDH@Z PROC	; ioINILoader::LoadInt_e<13>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 4d 01 00
	00		 je	 $LN96@LoadInt_e@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 36 01 00
	00		 je	 $LN95@LoadInt_e@2
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 1e 01 00
	00		 je	 $LN94@LoadInt_e@2
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 07 01 00
	00		 je	 $LN93@LoadInt_e@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 f0 00 00
	00		 je	 $LN92@LoadInt_e@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 da 00 00
	00		 je	 $LN91@LoadInt_e@2
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 c4 00 00
	00		 je	 $LN90@LoadInt_e@2
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 ad 00 00
	00		 je	 $LN89@LoadInt_e@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 96 00 00
	00		 je	 $LN88@LoadInt_e@2
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 80 00 00
	00		 je	 $LN87@LoadInt_e@2
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	74 6e		 je	 SHORT $LN86@LoadInt_e@2
  000c5	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000c8	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cb	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000ce	84 d2		 test	 dl, dl
  000d0	74 5b		 je	 SHORT $LN85@LoadInt_e@2
  000d2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	0f 84 8f 00 00
	00		 je	 $LN1@LoadInt_e@2
  000e2	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000e5	84 d2		 test	 dl, dl
  000e7	74 3f		 je	 SHORT $LN83@LoadInt_e@2
  000e9	32 d1		 xor	 dl, cl
  000eb	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000ee	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f1	84 d2		 test	 dl, dl
  000f3	74 2d		 je	 SHORT $LN82@LoadInt_e@2
  000f5	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000f8	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  000fb	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  000fe	84 d2		 test	 dl, dl
  00100	74 1a		 je	 SHORT $LN81@LoadInt_e@2
  00102	8a 40 10	 mov	 al, BYTE PTR [eax+16]
  00105	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00108	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010b	84 c0		 test	 al, al
  0010d	74 07		 je	 SHORT $LN80@LoadInt_e@2
  0010f	34 ed		 xor	 al, -19			; ffffffedH
  00111	88 45 f8	 mov	 BYTE PTR __k$[ebp+16], al
  00114	eb 5b		 jmp	 SHORT $LN1@LoadInt_e@2
$LN80@LoadInt_e@2:
  00116	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0011a	eb 55		 jmp	 SHORT $LN1@LoadInt_e@2
$LN81@LoadInt_e@2:
  0011c	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00120	eb 4f		 jmp	 SHORT $LN1@LoadInt_e@2
$LN82@LoadInt_e@2:
  00122	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00126	eb 49		 jmp	 SHORT $LN1@LoadInt_e@2
$LN83@LoadInt_e@2:
  00128	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0012b	eb 44		 jmp	 SHORT $LN1@LoadInt_e@2
$LN85@LoadInt_e@2:
  0012d	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00131	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN86@LoadInt_e@2:
  00133	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00137	eb 38		 jmp	 SHORT $LN1@LoadInt_e@2
$LN87@LoadInt_e@2:
  00139	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  0013c	eb 33		 jmp	 SHORT $LN1@LoadInt_e@2
$LN88@LoadInt_e@2:
  0013e	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00142	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@2
$LN89@LoadInt_e@2:
  00144	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00148	eb 27		 jmp	 SHORT $LN1@LoadInt_e@2
$LN90@LoadInt_e@2:
  0014a	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0014e	eb 21		 jmp	 SHORT $LN1@LoadInt_e@2
$LN91@LoadInt_e@2:
  00150	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  00153	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN92@LoadInt_e@2:
  00155	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00159	eb 16		 jmp	 SHORT $LN1@LoadInt_e@2
$LN93@LoadInt_e@2:
  0015b	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0015f	eb 10		 jmp	 SHORT $LN1@LoadInt_e@2
$LN94@LoadInt_e@2:
  00161	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00165	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN95@LoadInt_e@2:
  00167	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0016b	eb 04		 jmp	 SHORT $LN1@LoadInt_e@2
$LN96@LoadInt_e@2:
  0016d	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@2:
  00171	6a 03		 push	 3
  00173	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  00176	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+12], 0
  0017a	5a		 pop	 edx
$LL104@LoadInt_e@2:
  0017b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00181	83 c0 04	 add	 eax, 4
  00184	4a		 dec	 edx
  00185	75 f4		 jne	 SHORT $LL104@LoadInt_e@2

; 120  : 		return LoadInt(_k, i);

  00187	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0018a	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0018d	50		 push	 eax
  0018e	8b ce		 mov	 ecx, esi
  00190	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00196	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00199	33 cd		 xor	 ecx, ebp
  0019b	5e		 pop	 esi
  0019c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a1	c9		 leave
  001a2	c2 08 00	 ret	 8
??$LoadInt_e@$0N@@ioINILoader@@QAEHAAY0N@$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<13>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BC@@ioINILoader@@QAEHAAY0BC@$$CBDH@Z ; ioINILoader::LoadInt_e<18>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BC@@ioINILoader@@QAEHAAY0BC@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -28						; size = 18
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BC@@ioINILoader@@QAEHAAY0BC@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<18>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 be 01 00
	00		 je	 $LN96@LoadInt_e@3
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 a7 01 00
	00		 je	 $LN95@LoadInt_e@3
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 90 01 00
	00		 je	 $LN94@LoadInt_e@3
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 78 01 00
	00		 je	 $LN93@LoadInt_e@3
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 61 01 00
	00		 je	 $LN92@LoadInt_e@3
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 4a 01 00
	00		 je	 $LN91@LoadInt_e@3
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 34 01 00
	00		 je	 $LN90@LoadInt_e@3
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 1e 01 00
	00		 je	 $LN89@LoadInt_e@3
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 07 01 00
	00		 je	 $LN88@LoadInt_e@3
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 f0 00 00
	00		 je	 $LN87@LoadInt_e@3
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 da 00 00
	00		 je	 $LN86@LoadInt_e@3
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 c4 00 00
	00		 je	 $LN85@LoadInt_e@3
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 ad 00 00
	00		 je	 $LN84@LoadInt_e@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 96 00 00
	00		 je	 $LN83@LoadInt_e@3
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 80 00 00
	00		 je	 $LN82@LoadInt_e@3
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 6e		 je	 SHORT $LN81@LoadInt_e@3
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 5b		 je	 SHORT $LN80@LoadInt_e@3
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  0012d	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00130	0f 84 ac 00 00
	00		 je	 $LN1@LoadInt_e@3
  00136	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00139	84 d2		 test	 dl, dl
  0013b	74 3f		 je	 SHORT $LN78@LoadInt_e@3
  0013d	32 d1		 xor	 dl, cl
  0013f	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 2d		 je	 SHORT $LN77@LoadInt_e@3
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 1a		 je	 SHORT $LN76@LoadInt_e@3
  00156	8a 40 15	 mov	 al, BYTE PTR [eax+21]
  00159	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0015c	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015f	84 c0		 test	 al, al
  00161	74 07		 je	 SHORT $LN75@LoadInt_e@3
  00163	34 ec		 xor	 al, -20			; ffffffecH
  00165	88 45 f9	 mov	 BYTE PTR __k$[ebp+21], al
  00168	eb 78		 jmp	 SHORT $LN1@LoadInt_e@3
$LN75@LoadInt_e@3:
  0016a	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  0016e	eb 72		 jmp	 SHORT $LN1@LoadInt_e@3
$LN76@LoadInt_e@3:
  00170	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00174	eb 6c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN77@LoadInt_e@3:
  00176	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0017a	eb 66		 jmp	 SHORT $LN1@LoadInt_e@3
$LN78@LoadInt_e@3:
  0017c	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  0017f	eb 61		 jmp	 SHORT $LN1@LoadInt_e@3
$LN80@LoadInt_e@3:
  00181	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00185	eb 5b		 jmp	 SHORT $LN1@LoadInt_e@3
$LN81@LoadInt_e@3:
  00187	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0018b	eb 55		 jmp	 SHORT $LN1@LoadInt_e@3
$LN82@LoadInt_e@3:
  0018d	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  00190	eb 50		 jmp	 SHORT $LN1@LoadInt_e@3
$LN83@LoadInt_e@3:
  00192	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00196	eb 4a		 jmp	 SHORT $LN1@LoadInt_e@3
$LN84@LoadInt_e@3:
  00198	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0019c	eb 44		 jmp	 SHORT $LN1@LoadInt_e@3
$LN85@LoadInt_e@3:
  0019e	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001a2	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN86@LoadInt_e@3:
  001a4	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001a7	eb 39		 jmp	 SHORT $LN1@LoadInt_e@3
$LN87@LoadInt_e@3:
  001a9	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  001ad	eb 33		 jmp	 SHORT $LN1@LoadInt_e@3
$LN88@LoadInt_e@3:
  001af	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001b3	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@3
$LN89@LoadInt_e@3:
  001b5	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001b9	eb 27		 jmp	 SHORT $LN1@LoadInt_e@3
$LN90@LoadInt_e@3:
  001bb	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001be	eb 22		 jmp	 SHORT $LN1@LoadInt_e@3
$LN91@LoadInt_e@3:
  001c0	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  001c4	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN92@LoadInt_e@3:
  001c6	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001ca	eb 16		 jmp	 SHORT $LN1@LoadInt_e@3
$LN93@LoadInt_e@3:
  001cc	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001d0	eb 10		 jmp	 SHORT $LN1@LoadInt_e@3
$LN94@LoadInt_e@3:
  001d2	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001d6	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@3
$LN95@LoadInt_e@3:
  001d8	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001dc	eb 04		 jmp	 SHORT $LN1@LoadInt_e@3
$LN96@LoadInt_e@3:
  001de	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@3:
  001e2	6a 04		 push	 4
  001e4	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001e7	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+17], 0
  001eb	5a		 pop	 edx
$LL104@LoadInt_e@3:
  001ec	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001f2	83 c0 04	 add	 eax, 4
  001f5	4a		 dec	 edx
  001f6	75 f4		 jne	 SHORT $LL104@LoadInt_e@3

; 120  : 		return LoadInt(_k, i);

  001f8	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001fb	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001ff	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00202	50		 push	 eax
  00203	8b ce		 mov	 ecx, esi
  00205	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  0020b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0020e	33 cd		 xor	 ecx, ebp
  00210	5e		 pop	 esi
  00211	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00216	c9		 leave
  00217	c2 08 00	 ret	 8
??$LoadInt_e@$0BC@@ioINILoader@@QAEHAAY0BC@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<18>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0O@@ioINILoader@@QAEHAAY0O@$$CBDH@Z ; ioINILoader::LoadInt_e<14>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0O@@ioINILoader@@QAEHAAY0O@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -24						; size = 14
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0O@@ioINILoader@@QAEHAAY0O@$$CBDH@Z PROC	; ioINILoader::LoadInt_e<14>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 64 01 00
	00		 je	 $LN96@LoadInt_e@4
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 4d 01 00
	00		 je	 $LN95@LoadInt_e@4
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 36 01 00
	00		 je	 $LN94@LoadInt_e@4
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 1e 01 00
	00		 je	 $LN93@LoadInt_e@4
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 07 01 00
	00		 je	 $LN92@LoadInt_e@4
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 f0 00 00
	00		 je	 $LN91@LoadInt_e@4
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 da 00 00
	00		 je	 $LN90@LoadInt_e@4
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 c4 00 00
	00		 je	 $LN89@LoadInt_e@4
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 ad 00 00
	00		 je	 $LN88@LoadInt_e@4
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 96 00 00
	00		 je	 $LN87@LoadInt_e@4
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 80 00 00
	00		 je	 $LN86@LoadInt_e@4
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 6e		 je	 SHORT $LN85@LoadInt_e@4
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 5b		 je	 SHORT $LN84@LoadInt_e@4
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	0f 84 95 00 00
	00		 je	 $LN1@LoadInt_e@4
  000f3	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f6	84 d2		 test	 dl, dl
  000f8	74 3f		 je	 SHORT $LN82@LoadInt_e@4
  000fa	32 d1		 xor	 dl, cl
  000fc	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 2d		 je	 SHORT $LN81@LoadInt_e@4
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 1a		 je	 SHORT $LN80@LoadInt_e@4
  00113	8a 40 11	 mov	 al, BYTE PTR [eax+17]
  00116	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00119	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011c	84 c0		 test	 al, al
  0011e	74 07		 je	 SHORT $LN79@LoadInt_e@4
  00120	34 ec		 xor	 al, -20			; ffffffecH
  00122	88 45 f9	 mov	 BYTE PTR __k$[ebp+17], al
  00125	eb 61		 jmp	 SHORT $LN1@LoadInt_e@4
$LN79@LoadInt_e@4:
  00127	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0012b	eb 5b		 jmp	 SHORT $LN1@LoadInt_e@4
$LN80@LoadInt_e@4:
  0012d	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00131	eb 55		 jmp	 SHORT $LN1@LoadInt_e@4
$LN81@LoadInt_e@4:
  00133	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00137	eb 4f		 jmp	 SHORT $LN1@LoadInt_e@4
$LN82@LoadInt_e@4:
  00139	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0013c	eb 4a		 jmp	 SHORT $LN1@LoadInt_e@4
$LN84@LoadInt_e@4:
  0013e	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00142	eb 44		 jmp	 SHORT $LN1@LoadInt_e@4
$LN85@LoadInt_e@4:
  00144	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00148	eb 3e		 jmp	 SHORT $LN1@LoadInt_e@4
$LN86@LoadInt_e@4:
  0014a	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  0014d	eb 39		 jmp	 SHORT $LN1@LoadInt_e@4
$LN87@LoadInt_e@4:
  0014f	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00153	eb 33		 jmp	 SHORT $LN1@LoadInt_e@4
$LN88@LoadInt_e@4:
  00155	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00159	eb 2d		 jmp	 SHORT $LN1@LoadInt_e@4
$LN89@LoadInt_e@4:
  0015b	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0015f	eb 27		 jmp	 SHORT $LN1@LoadInt_e@4
$LN90@LoadInt_e@4:
  00161	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  00164	eb 22		 jmp	 SHORT $LN1@LoadInt_e@4
$LN91@LoadInt_e@4:
  00166	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0016a	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@4
$LN92@LoadInt_e@4:
  0016c	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00170	eb 16		 jmp	 SHORT $LN1@LoadInt_e@4
$LN93@LoadInt_e@4:
  00172	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00176	eb 10		 jmp	 SHORT $LN1@LoadInt_e@4
$LN94@LoadInt_e@4:
  00178	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0017c	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@4
$LN95@LoadInt_e@4:
  0017e	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00182	eb 04		 jmp	 SHORT $LN1@LoadInt_e@4
$LN96@LoadInt_e@4:
  00184	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@4:
  00188	6a 03		 push	 3
  0018a	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0018d	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+13], 0
  00191	5a		 pop	 edx
$LL104@LoadInt_e@4:
  00192	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00198	83 c0 04	 add	 eax, 4
  0019b	4a		 dec	 edx
  0019c	75 f4		 jne	 SHORT $LL104@LoadInt_e@4

; 120  : 		return LoadInt(_k, i);

  0019e	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001a1	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001a5	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001a8	50		 push	 eax
  001a9	8b ce		 mov	 ecx, esi
  001ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  001b1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b4	33 cd		 xor	 ecx, ebp
  001b6	5e		 pop	 esi
  001b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001bc	c9		 leave
  001bd	c2 08 00	 ret	 8
??$LoadInt_e@$0O@@ioINILoader@@QAEHAAY0O@$$CBDH@Z ENDP	; ioINILoader::LoadInt_e<14>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BA@@ioINILoader@@QAE_NAAY0BA@$$CBD_N@Z ; ioINILoader::LoadBool_e<16>
EXTRN	__imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0BA@@ioINILoader@@QAE_NAAY0BA@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BA@@ioINILoader@@QAE_NAAY0BA@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<16>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 8c 01 00
	00		 je	 $LN96@LoadBool_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 75 01 00
	00		 je	 $LN95@LoadBool_e
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 5e 01 00
	00		 je	 $LN94@LoadBool_e
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 46 01 00
	00		 je	 $LN93@LoadBool_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 2f 01 00
	00		 je	 $LN92@LoadBool_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 18 01 00
	00		 je	 $LN91@LoadBool_e
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 02 01 00
	00		 je	 $LN90@LoadBool_e
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 ec 00 00
	00		 je	 $LN89@LoadBool_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 d5 00 00
	00		 je	 $LN88@LoadBool_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 be 00 00
	00		 je	 $LN87@LoadBool_e
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 a8 00 00
	00		 je	 $LN86@LoadBool_e
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 92 00 00
	00		 je	 $LN85@LoadBool_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	74 7f		 je	 SHORT $LN84@LoadBool_e
  000e7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f0	84 d2		 test	 dl, dl
  000f2	74 6c		 je	 SHORT $LN83@LoadBool_e
  000f4	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f7	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000fa	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000fd	84 d2		 test	 dl, dl
  000ff	74 5a		 je	 SHORT $LN82@LoadBool_e
  00101	32 d1		 xor	 dl, cl
  00103	80 78 0f 00	 cmp	 BYTE PTR [eax+15], 0
  00107	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  0010a	0f 84 a0 00 00
	00		 je	 $LN1@LoadBool_e
  00110	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00113	84 d2		 test	 dl, dl
  00115	74 3e		 je	 SHORT $LN80@LoadBool_e
  00117	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011a	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011d	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00120	84 d2		 test	 dl, dl
  00122	74 2b		 je	 SHORT $LN79@LoadBool_e
  00124	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00127	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  0012a	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0012d	84 d2		 test	 dl, dl
  0012f	74 19		 je	 SHORT $LN78@LoadBool_e
  00131	8a 40 13	 mov	 al, BYTE PTR [eax+19]
  00134	32 d1		 xor	 dl, cl
  00136	88 55 fa	 mov	 BYTE PTR __k$[ebp+18], dl
  00139	84 c0		 test	 al, al
  0013b	74 07		 je	 SHORT $LN77@LoadBool_e
  0013d	34 ea		 xor	 al, -22			; ffffffeaH
  0013f	88 45 fb	 mov	 BYTE PTR __k$[ebp+19], al
  00142	eb 6c		 jmp	 SHORT $LN1@LoadBool_e
$LN77@LoadBool_e:
  00144	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00148	eb 66		 jmp	 SHORT $LN1@LoadBool_e
$LN78@LoadBool_e:
  0014a	88 4d fa	 mov	 BYTE PTR __k$[ebp+18], cl
  0014d	eb 61		 jmp	 SHORT $LN1@LoadBool_e
$LN79@LoadBool_e:
  0014f	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  00153	eb 5b		 jmp	 SHORT $LN1@LoadBool_e
$LN80@LoadBool_e:
  00155	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00159	eb 55		 jmp	 SHORT $LN1@LoadBool_e
$LN82@LoadBool_e:
  0015b	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0015e	eb 50		 jmp	 SHORT $LN1@LoadBool_e
$LN83@LoadBool_e:
  00160	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00164	eb 4a		 jmp	 SHORT $LN1@LoadBool_e
$LN84@LoadBool_e:
  00166	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0016a	eb 44		 jmp	 SHORT $LN1@LoadBool_e
$LN85@LoadBool_e:
  0016c	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00170	eb 3e		 jmp	 SHORT $LN1@LoadBool_e
$LN86@LoadBool_e:
  00172	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  00175	eb 39		 jmp	 SHORT $LN1@LoadBool_e
$LN87@LoadBool_e:
  00177	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0017b	eb 33		 jmp	 SHORT $LN1@LoadBool_e
$LN88@LoadBool_e:
  0017d	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00181	eb 2d		 jmp	 SHORT $LN1@LoadBool_e
$LN89@LoadBool_e:
  00183	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00187	eb 27		 jmp	 SHORT $LN1@LoadBool_e
$LN90@LoadBool_e:
  00189	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  0018c	eb 22		 jmp	 SHORT $LN1@LoadBool_e
$LN91@LoadBool_e:
  0018e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00192	eb 1c		 jmp	 SHORT $LN1@LoadBool_e
$LN92@LoadBool_e:
  00194	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00198	eb 16		 jmp	 SHORT $LN1@LoadBool_e
$LN93@LoadBool_e:
  0019a	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0019e	eb 10		 jmp	 SHORT $LN1@LoadBool_e
$LN94@LoadBool_e:
  001a0	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001a4	eb 0a		 jmp	 SHORT $LN1@LoadBool_e
$LN95@LoadBool_e:
  001a6	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001aa	eb 04		 jmp	 SHORT $LN1@LoadBool_e
$LN96@LoadBool_e:
  001ac	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e:
  001b0	6a 03		 push	 3
  001b2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001b5	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+15], 0
  001b9	5a		 pop	 edx
$LL104@LoadBool_e:
  001ba	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001c0	83 c0 04	 add	 eax, 4
  001c3	4a		 dec	 edx
  001c4	75 f4		 jne	 SHORT $LL104@LoadBool_e
  001c6	6a 0c		 push	 12			; 0000000cH
  001c8	58		 pop	 eax
$LL101@LoadBool_e:
  001c9	8b c8		 mov	 ecx, eax
  001cb	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001d1	79 05		 jns	 SHORT $LN111@LoadBool_e
  001d3	49		 dec	 ecx
  001d4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001d7	41		 inc	 ecx
$LN111@LoadBool_e:
  001d8	b2 ed		 mov	 dl, -19			; ffffffedH
  001da	2a d1		 sub	 dl, cl
  001dc	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001e0	40		 inc	 eax
  001e1	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001e4	7c e3		 jl	 SHORT $LL101@LoadBool_e

; 103  : 		return LoadBool(_k, b);

  001e6	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  001e9	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001ec	50		 push	 eax
  001ed	8b ce		 mov	 ecx, esi
  001ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  001f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f8	33 cd		 xor	 ecx, ebp
  001fa	5e		 pop	 esi
  001fb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00200	c9		 leave
  00201	c2 08 00	 ret	 8
??$LoadBool_e@$0BA@@ioINILoader@@QAE_NAAY0BA@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<16>
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@_N@@QAE_NXZ			; CEncrypt<bool>::operator bool
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??B?$CEncrypt@_N@@QAE_NXZ
_TEXT	SEGMENT
_value$ = -1						; size = 1
??B?$CEncrypt@_N@@QAE_NXZ PROC				; CEncrypt<bool>::operator bool, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 ff	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	8a 45 ff	 mov	 al, BYTE PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@_N@@QAE_NXZ ENDP				; CEncrypt<bool>::operator bool
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	_rkLoader$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioburnbuff.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioBurnBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_rkLoader$GSCopy$ = -292				; size = 4
_szBuf$ = -288						; size = 260
__k$527642 = -28					; size = 16
__k$527253 = -28					; size = 18
__k$527127 = -28					; size = 18
__k$527517 = -24					; size = 14
__k$527392 = -24					; size = 14
__k$527001 = -24					; size = 13
__k$526875 = -24					; size = 13
__k$526783 = -20					; size = 9
__k$526658 = -20					; size = 9
__k$526513 = -20					; size = 9
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioBurnBuff@@UAEXAAVioINILoader@@@Z PROC	; ioBurnBuff::LoadProperty, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 33   : 	ioBuff::LoadProperty( rkLoader );

  00019	57		 push	 edi
  0001a	8b f1		 mov	 esi, ecx

; 48   : 
; 49   : 	m_bEnableTimeEnd = rkLoader.LoadBool_e( "enable_time_end", false );

  0001c	89 bd dc fe ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], edi
  00022	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty
  00027	33 db		 xor	 ebx, ebx
  00029	6a 02		 push	 2
  0002b	c7 45 ec 8c 88
	8f b5		 mov	 DWORD PTR __k$526513[ebp], -1248884596 ; b58f888cH
  00032	c7 45 f0 80 89
	98 82		 mov	 DWORD PTR __k$526513[ebp+4], -2103932544 ; 82988980H
  00039	8d 45 ec	 lea	 eax, DWORD PTR __k$526513[ebp]
  0003c	88 5d f4	 mov	 BYTE PTR __k$526513[ebp+8], bl
  0003f	59		 pop	 ecx
$LL106@LoadProper:

; 34   : 
; 35   : 	char szBuf[MAX_PATH];
; 36   : 	rkLoader.LoadString_e( "add_mesh", "", szBuf, MAX_PATH );

  00040	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00046	83 c0 04	 add	 eax, 4
  00049	49		 dec	 ecx
  0004a	75 f4		 jne	 SHORT $LL106@LoadProper
  0004c	68 04 01 00 00	 push	 260			; 00000104H
  00051	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00057	50		 push	 eax
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0005d	8d 45 ec	 lea	 eax, DWORD PTR __k$526513[ebp]
  00060	50		 push	 eax
  00061	8b cf		 mov	 ecx, edi
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 37   : 	m_AddEntity = szBuf;

  00069	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0006f	50		 push	 eax
  00070	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  0007c	6a 02		 push	 2

; 38   : 
; 39   : 	m_dwMaxTime = rkLoader.LoadInt_e( "max_time", 0 );

  0007e	c7 45 ec 80 8d
	93 b5		 mov	 DWORD PTR __k$526658[ebp], -1248621184 ; b5938d80H
  00085	c7 45 f0 99 85
	86 8f		 mov	 DWORD PTR __k$526658[ebp+4], -1887009383 ; 8f868599H
  0008c	8d 45 ec	 lea	 eax, DWORD PTR __k$526658[ebp]
  0008f	88 5d f4	 mov	 BYTE PTR __k$526658[ebp+8], bl
  00092	59		 pop	 ecx
$LL212@LoadProper:
  00093	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00099	83 c0 04	 add	 eax, 4
  0009c	49		 dec	 ecx
  0009d	75 f4		 jne	 SHORT $LL212@LoadProper
  0009f	53		 push	 ebx
  000a0	8d 45 ec	 lea	 eax, DWORD PTR __k$526658[ebp]
  000a3	8b cf		 mov	 ecx, edi
  000a5	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  000ab	50		 push	 eax
  000ac	ff d7		 call	 edi
  000ae	6a 02		 push	 2
  000b0	89 86 7c 09 00
	00		 mov	 DWORD PTR [esi+2428], eax

; 40   : 	m_dwMinTime = rkLoader.LoadInt_e( "min_time", 0 );

  000b6	c7 45 ec 80 85
	85 b5		 mov	 DWORD PTR __k$526783[ebp], -1249540736 ; b5858580H
  000bd	c7 45 f0 99 85
	86 8f		 mov	 DWORD PTR __k$526783[ebp+4], -1887009383 ; 8f868599H
  000c4	8d 45 ec	 lea	 eax, DWORD PTR __k$526783[ebp]
  000c7	88 5d f4	 mov	 BYTE PTR __k$526783[ebp+8], bl
  000ca	59		 pop	 ecx
$LL318@LoadProper:
  000cb	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000d1	83 c0 04	 add	 eax, 4
  000d4	49		 dec	 ecx
  000d5	75 f4		 jne	 SHORT $LL318@LoadProper
  000d7	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  000dd	53		 push	 ebx
  000de	8d 45 ec	 lea	 eax, DWORD PTR __k$526783[ebp]
  000e1	50		 push	 eax
  000e2	ff d7		 call	 edi

; 41   : 	m_dwMaxTimeByNpc = rkLoader.LoadInt_e( "max_time_npc", m_dwMaxTime );

  000e4	8b 8e 7c 09 00
	00		 mov	 ecx, DWORD PTR [esi+2428]
  000ea	6a 03		 push	 3
  000ec	89 86 80 09 00
	00		 mov	 DWORD PTR [esi+2432], eax
  000f2	c7 45 e8 80 8d
	93 b5		 mov	 DWORD PTR __k$526875[ebp], -1248621184 ; b5938d80H
  000f9	c7 45 ec 99 85
	86 8f		 mov	 DWORD PTR __k$526875[ebp+4], -1887009383 ; 8f868599H
  00100	c7 45 f0 b2 82
	9b 89		 mov	 DWORD PTR __k$526875[ebp+8], -1986297166 ; 899b82b2H
  00107	8d 45 e8	 lea	 eax, DWORD PTR __k$526875[ebp]
  0010a	88 5d f4	 mov	 BYTE PTR __k$526875[ebp+12], bl
  0010d	5a		 pop	 edx
$LL424@LoadProper:
  0010e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00114	83 c0 04	 add	 eax, 4
  00117	4a		 dec	 edx
  00118	75 f4		 jne	 SHORT $LL424@LoadProper
  0011a	51		 push	 ecx
  0011b	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00121	8d 45 e8	 lea	 eax, DWORD PTR __k$526875[ebp]
  00124	50		 push	 eax
  00125	ff d7		 call	 edi

; 42   : 	m_dwMinTimeByNpc = rkLoader.LoadInt_e( "min_time_npc", m_dwMinTime );

  00127	8b 8e 80 09 00
	00		 mov	 ecx, DWORD PTR [esi+2432]
  0012d	6a 03		 push	 3
  0012f	89 86 84 09 00
	00		 mov	 DWORD PTR [esi+2436], eax
  00135	c7 45 e8 80 85
	85 b5		 mov	 DWORD PTR __k$527001[ebp], -1249540736 ; b5858580H
  0013c	c7 45 ec 99 85
	86 8f		 mov	 DWORD PTR __k$527001[ebp+4], -1887009383 ; 8f868599H
  00143	c7 45 f0 b2 82
	9b 89		 mov	 DWORD PTR __k$527001[ebp+8], -1986297166 ; 899b82b2H
  0014a	8d 45 e8	 lea	 eax, DWORD PTR __k$527001[ebp]
  0014d	88 5d f4	 mov	 BYTE PTR __k$527001[ebp+12], bl
  00150	5a		 pop	 edx
$LL530@LoadProper:
  00151	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00157	83 c0 04	 add	 eax, 4
  0015a	4a		 dec	 edx
  0015b	75 f4		 jne	 SHORT $LL530@LoadProper
  0015d	51		 push	 ecx
  0015e	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00164	8d 45 e8	 lea	 eax, DWORD PTR __k$527001[ebp]
  00167	50		 push	 eax
  00168	ff d7		 call	 edi

; 43   : 	m_dwMaxTimeByBossNpc = rkLoader.LoadInt_e( "max_time_boss_npc", m_dwMaxTimeByNpc );

  0016a	8b 8e 84 09 00
	00		 mov	 ecx, DWORD PTR [esi+2436]
  00170	6a 04		 push	 4
  00172	89 86 88 09 00
	00		 mov	 DWORD PTR [esi+2440], eax
  00178	c7 45 e4 80 8d
	93 b5		 mov	 DWORD PTR __k$527127[ebp], -1248621184 ; b5938d80H
  0017f	c7 45 e8 99 85
	86 8f		 mov	 DWORD PTR __k$527127[ebp+4], -1887009383 ; 8f868599H
  00186	c7 45 ec b2 8e
	84 99		 mov	 DWORD PTR __k$527127[ebp+8], -1719365966 ; 99848eb2H
  0018d	c7 45 f0 9e b3
	85 9a		 mov	 DWORD PTR __k$527127[ebp+12], -1702513762 ; 9a85b39eH
  00194	8d 45 e4	 lea	 eax, DWORD PTR __k$527127[ebp]
  00197	66 c7 45 f4 8e
	00		 mov	 WORD PTR __k$527127[ebp+16], 142 ; 0000008eH
  0019d	5a		 pop	 edx
$LL636@LoadProper:
  0019e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a4	83 c0 04	 add	 eax, 4
  001a7	4a		 dec	 edx
  001a8	75 f4		 jne	 SHORT $LL636@LoadProper
  001aa	80 75 f4 ed	 xor	 BYTE PTR __k$527127[ebp+16], -19 ; ffffffedH
  001ae	51		 push	 ecx
  001af	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  001b5	8d 45 e4	 lea	 eax, DWORD PTR __k$527127[ebp]
  001b8	50		 push	 eax
  001b9	ff d7		 call	 edi

; 44   : 	m_dwMinTimeByBossNpc = rkLoader.LoadInt_e( "min_time_boss_npc", m_dwMinTimeByNpc );

  001bb	8b 8e 88 09 00
	00		 mov	 ecx, DWORD PTR [esi+2440]
  001c1	6a 04		 push	 4
  001c3	89 86 8c 09 00
	00		 mov	 DWORD PTR [esi+2444], eax
  001c9	c7 45 e4 80 85
	85 b5		 mov	 DWORD PTR __k$527253[ebp], -1249540736 ; b5858580H
  001d0	c7 45 e8 99 85
	86 8f		 mov	 DWORD PTR __k$527253[ebp+4], -1887009383 ; 8f868599H
  001d7	c7 45 ec b2 8e
	84 99		 mov	 DWORD PTR __k$527253[ebp+8], -1719365966 ; 99848eb2H
  001de	c7 45 f0 9e b3
	85 9a		 mov	 DWORD PTR __k$527253[ebp+12], -1702513762 ; 9a85b39eH
  001e5	8d 45 e4	 lea	 eax, DWORD PTR __k$527253[ebp]
  001e8	66 c7 45 f4 8e
	00		 mov	 WORD PTR __k$527253[ebp+16], 142 ; 0000008eH
  001ee	5a		 pop	 edx
$LL742@LoadProper:
  001ef	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001f5	83 c0 04	 add	 eax, 4
  001f8	4a		 dec	 edx
  001f9	75 f4		 jne	 SHORT $LL742@LoadProper
  001fb	80 75 f4 ed	 xor	 BYTE PTR __k$527253[ebp+16], -19 ; ffffffedH
  001ff	51		 push	 ecx
  00200	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00206	8d 45 e4	 lea	 eax, DWORD PTR __k$527253[ebp]
  00209	50		 push	 eax
  0020a	ff d7		 call	 edi
  0020c	6a 03		 push	 3
  0020e	89 86 90 09 00
	00		 mov	 DWORD PTR [esi+2448], eax

; 45   : 
; 46   : 	m_dwTeamMaxTime = rkLoader.LoadInt_e( "team_max_time", 0 );

  00214	c7 45 e8 99 89
	8a 87		 mov	 DWORD PTR __k$527392[ebp], -2020963943 ; 878a8999H
  0021b	c7 45 ec b2 81
	8a 92		 mov	 DWORD PTR __k$527392[ebp+4], -1836416590 ; 928a81b2H
  00222	c7 45 f0 b2 98
	82 87		 mov	 DWORD PTR __k$527392[ebp+8], -2021484366 ; 878298b2H
  00229	8d 45 e8	 lea	 eax, DWORD PTR __k$527392[ebp]
  0022c	66 c7 45 f4 88
	00		 mov	 WORD PTR __k$527392[ebp+12], 136 ; 00000088H
  00232	59		 pop	 ecx
$LL848@LoadProper:
  00233	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00239	83 c0 04	 add	 eax, 4
  0023c	49		 dec	 ecx
  0023d	75 f4		 jne	 SHORT $LL848@LoadProper
  0023f	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00245	80 75 f4 ed	 xor	 BYTE PTR __k$527392[ebp+12], -19 ; ffffffedH
  00249	53		 push	 ebx
  0024a	8d 45 e8	 lea	 eax, DWORD PTR __k$527392[ebp]
  0024d	50		 push	 eax
  0024e	ff d7		 call	 edi
  00250	6a 03		 push	 3
  00252	89 86 94 09 00
	00		 mov	 DWORD PTR [esi+2452], eax

; 47   : 	m_dwTeamMinTime = rkLoader.LoadInt_e( "team_min_time", 0 );

  00258	c7 45 e8 99 89
	8a 87		 mov	 DWORD PTR __k$527517[ebp], -2020963943 ; 878a8999H
  0025f	c7 45 ec b2 81
	82 84		 mov	 DWORD PTR __k$527517[ebp+4], -2071821902 ; 848281b2H
  00266	c7 45 f0 b2 98
	82 87		 mov	 DWORD PTR __k$527517[ebp+8], -2021484366 ; 878298b2H
  0026d	8d 45 e8	 lea	 eax, DWORD PTR __k$527517[ebp]
  00270	66 c7 45 f4 88
	00		 mov	 WORD PTR __k$527517[ebp+12], 136 ; 00000088H
  00276	59		 pop	 ecx
$LL954@LoadProper:
  00277	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0027d	83 c0 04	 add	 eax, 4
  00280	49		 dec	 ecx
  00281	75 f4		 jne	 SHORT $LL954@LoadProper
  00283	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00289	80 75 f4 ed	 xor	 BYTE PTR __k$527517[ebp+12], -19 ; ffffffedH
  0028d	53		 push	 ebx
  0028e	8d 45 e8	 lea	 eax, DWORD PTR __k$527517[ebp]
  00291	50		 push	 eax
  00292	ff d7		 call	 edi
  00294	6a 03		 push	 3
  00296	89 86 98 09 00
	00		 mov	 DWORD PTR [esi+2456], eax

; 48   : 
; 49   : 	m_bEnableTimeEnd = rkLoader.LoadBool_e( "enable_time_end", false );

  0029c	c7 45 e4 88 82
	8a 88		 mov	 DWORD PTR __k$527642[ebp], -2004188536 ; 888a8288H
  002a3	c7 45 e8 81 89
	b4 9e		 mov	 DWORD PTR __k$527642[ebp+4], -1632335487 ; 9eb48981H
  002aa	c7 45 ec 84 81
	8e b5		 mov	 DWORD PTR __k$527642[ebp+8], -1248951932 ; b58e8184H
  002b1	8d 45 e4	 lea	 eax, DWORD PTR __k$527642[ebp]
  002b4	c7 45 f0 88 82
	8f 00		 mov	 DWORD PTR __k$527642[ebp+12], 9405064 ; 008f8288H
  002bb	59		 pop	 ecx
$LL1060@LoadProper:
  002bc	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002c2	83 c0 04	 add	 eax, 4
  002c5	49		 dec	 ecx
  002c6	75 f4		 jne	 SHORT $LL1060@LoadProper
  002c8	6a 0c		 push	 12			; 0000000cH
  002ca	5f		 pop	 edi
$LL1057@LoadProper:
  002cb	8b c7		 mov	 eax, edi
  002cd	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  002d2	79 05		 jns	 SHORT $LN1103@LoadProper
  002d4	48		 dec	 eax
  002d5	83 c8 fc	 or	 eax, -4			; fffffffcH
  002d8	40		 inc	 eax
$LN1103@LoadProper:
  002d9	b1 ed		 mov	 cl, -19			; ffffffedH
  002db	2a c8		 sub	 cl, al
  002dd	30 4c 3d e4	 xor	 BYTE PTR __k$527642[ebp+edi], cl
  002e1	47		 inc	 edi
  002e2	83 ff 0f	 cmp	 edi, 15			; 0000000fH
  002e5	7c e4		 jl	 SHORT $LL1057@LoadProper
  002e7	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  002ed	53		 push	 ebx
  002ee	8d 45 e4	 lea	 eax, DWORD PTR __k$527642[ebp]
  002f1	50		 push	 eax
  002f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 50   : }

  002f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002fb	5f		 pop	 edi
  002fc	88 86 9c 09 00
	00		 mov	 BYTE PTR [esi+2460], al
  00302	5e		 pop	 esi
  00303	33 cd		 xor	 ecx, ebp
  00305	5b		 pop	 ebx
  00306	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0030b	c9		 leave
  0030c	c2 04 00	 ret	 4
?LoadProperty@ioBurnBuff@@UAEXAAVioINILoader@@@Z ENDP	; ioBurnBuff::LoadProperty
_TEXT	ENDS
EXTRN	?IsEnableTeamAttack@ioBaseChar@@QAE_NXZ:PROC	; ioBaseChar::IsEnableTeamAttack
EXTRN	?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z:PROC	; ioBuff::StartBuff
; Function compile flags: /Ogsp
;	COMDAT ?StartBuff@ioBurnBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_value$527787 = 11					; size = 1
?StartBuff@ioBurnBuff@@UAEXPAVioBaseChar@@@Z PROC	; ioBurnBuff::StartBuff, COMDAT
; _this$ = ecx

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 82   : 	ioBuff::StartBuff( pOwner );

  00005	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z ; ioBuff::StartBuff

; 83   : 	if( !pOwner ) return;

  00010	85 ff		 test	 edi, edi
  00012	74 69		 je	 SHORT $LN1@StartBuff

; 84   : 
; 85   : 	if( !m_AddEntity.IsEmpty() )

  00014	53		 push	 ebx
  00015	8d 9e 6c 09 00
	00		 lea	 ebx, DWORD PTR [esi+2412]
  0001b	8b cb		 mov	 ecx, ebx
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00023	84 c0		 test	 al, al
  00025	75 10		 jne	 SHORT $LN3@StartBuff

; 86   : 	{
; 87   : 		pOwner->AddEntity( m_AddEntity );

  00027	8b 07		 mov	 eax, DWORD PTR [edi]
  00029	53		 push	 ebx
  0002a	8b cf		 mov	 ecx, edi
  0002c	ff 50 2c	 call	 DWORD PTR [eax+44]

; 88   : 		pOwner->AddMaterialModifyExcept( m_AddEntity );

  0002f	53		 push	 ebx
  00030	8b cf		 mov	 ecx, edi
  00032	e8 00 00 00 00	 call	 ?AddMaterialModifyExcept@ioBaseChar@@QAEXABVioHashString@@@Z ; ioBaseChar::AddMaterialModifyExcept
$LN3@StartBuff:

; 89   : 	}
; 90   : 
; 91   : 	bool bEnableTeamAttack = pOwner->IsEnableTeamAttack();

  00037	8b cf		 mov	 ecx, edi
  00039	e8 00 00 00 00	 call	 ?IsEnableTeamAttack@ioBaseChar@@QAE_NXZ ; ioBaseChar::IsEnableTeamAttack
  0003e	5b		 pop	 ebx

; 92   : 
; 93   : 	if( !bEnableTeamAttack && m_bTeamAttack )

  0003f	84 c0		 test	 al, al
  00041	75 23		 jne	 SHORT $LN2@StartBuff
  00043	8d 45 0b	 lea	 eax, DWORD PTR _value$527787[ebp]
  00046	50		 push	 eax
  00047	8d 8e 00 08 00
	00		 lea	 ecx, DWORD PTR [esi+2048]
  0004d	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@_N@@QAEXPA_N@Z ; CEncrypt<bool>::DecryptValueToPool
  00052	80 7d 0b 00	 cmp	 BYTE PTR _value$527787[ebp], 0
  00056	74 0e		 je	 SHORT $LN2@StartBuff

; 94   : 		pOwner->SetFlameStateValue( m_dwTeamMinTime, m_dwTeamMaxTime );

  00058	ff b6 94 09 00
	00		 push	 DWORD PTR [esi+2452]
  0005e	ff b6 98 09 00
	00		 push	 DWORD PTR [esi+2456]

; 95   : 	else

  00064	eb 10		 jmp	 SHORT $LN9@StartBuff
$LN2@StartBuff:

; 96   : 		pOwner->SetFlameStateValue( GetMinTime(), GetMaxTime() );	

  00066	8b ce		 mov	 ecx, esi
  00068	e8 00 00 00 00	 call	 ?GetMaxTime@ioBurnBuff@@IAEKXZ ; ioBurnBuff::GetMaxTime
  0006d	50		 push	 eax
  0006e	8b ce		 mov	 ecx, esi
  00070	e8 00 00 00 00	 call	 ?GetMinTime@ioBurnBuff@@IAEKXZ ; ioBurnBuff::GetMinTime
  00075	50		 push	 eax
$LN9@StartBuff:
  00076	8b cf		 mov	 ecx, edi
  00078	e8 00 00 00 00	 call	 ?SetFlameStateValue@ioBaseChar@@QAEXKK@Z ; ioBaseChar::SetFlameStateValue
$LN1@StartBuff:
  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi

; 97   : }

  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
?StartBuff@ioBurnBuff@@UAEXPAVioBaseChar@@@Z ENDP	; ioBurnBuff::StartBuff
_TEXT	ENDS
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
EXTRN	?ResetFlameStateValue@ioBaseChar@@QAEXXZ:PROC	; ioBaseChar::ResetFlameStateValue
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	?CheckCallingProcess@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingProcess
; Function compile flags: /Ogsp
;	COMDAT ?ProcessBuff@ioBurnBuff@@UAEXM@Z
_TEXT	SEGMENT
_value$527803 = -4					; size = 4
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioBurnBuff@@UAEXM@Z PROC			; ioBurnBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 116  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 117  : 	if( m_pOwner->GetState() != CS_BLOW_WOUNDED && m_pOwner->GetState() != CS_BOUND_BLOW_WOUNDED )

  00007	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  0000d	8a 80 10 03 00
	00		 mov	 al, BYTE PTR [eax+784]
  00013	3c 0c		 cmp	 al, 12			; 0000000cH
  00015	74 04		 je	 SHORT $LN3@ProcessBuf
  00017	3c 31		 cmp	 al, 49			; 00000031H

; 118  : 	{
; 119  : 		SetReserveEndBuff();
; 120  : 		return;

  00019	75 41		 jne	 SHORT $LN12@ProcessBuf
$LN3@ProcessBuf:

; 121  : 	}
; 122  : 
; 123  : 	CheckCallingProcess();

  0001b	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 124  : 	
; 125  : 	if( m_bEnableTimeEnd )

  00020	80 be 9c 09 00
	00 00		 cmp	 BYTE PTR [esi+2460], 0
  00027	74 38		 je	 SHORT $LN1@ProcessBuf

; 126  : 	{
; 127  : 		if( m_dwBuffEndTime <= FRAMEGETTIME() )

  00029	57		 push	 edi
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00030	8b c8		 mov	 ecx, eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00038	8b f8		 mov	 edi, eax
  0003a	8d 45 fc	 lea	 eax, DWORD PTR _value$527803[ebp]
  0003d	50		 push	 eax
  0003e	8d 8e 9c 03 00
	00		 lea	 ecx, DWORD PTR [esi+924]
  00044	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@K@@QAEXPAK@Z ; CEncrypt<unsigned long>::DecryptValueToPool
  00049	39 7d fc	 cmp	 DWORD PTR _value$527803[ebp], edi
  0004c	5f		 pop	 edi
  0004d	77 12		 ja	 SHORT $LN1@ProcessBuf

; 128  : 		{
; 129  : 			m_pOwner->ResetFlameStateValue();

  0004f	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00055	e8 00 00 00 00	 call	 ?ResetFlameStateValue@ioBaseChar@@QAEXXZ ; ioBaseChar::ResetFlameStateValue

; 130  : 			SetReserveEndBuff();

  0005a	8b ce		 mov	 ecx, esi
$LN12@ProcessBuf:
  0005c	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff
$LN1@ProcessBuf:
  00061	5e		 pop	 esi

; 131  : 			return;
; 132  : 		}
; 133  : 	}	
; 134  : }

  00062	c9		 leave
  00063	c2 04 00	 ret	 4
?ProcessBuff@ioBurnBuff@@UAEXM@Z ENDP			; ioBurnBuff::ProcessBuff
_TEXT	ENDS
END
